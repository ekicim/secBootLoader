
secBootLoader.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
	is_gps_valid = 0;
	return FAIL;
}


double GPS_CalculateDistance() {
       0:	00 80 00 10 71 01 00 00 e9 01 00 00 f1 01 00 00     ....q...........
	char buffer[200];
	double local_prev_lat = 0;
      10:	f9 01 00 00 01 02 00 00 09 02 00 00 00 00 00 00     ................
	...
	double local_last_lat = 0;
	int count = sprintf(buffer,"Last Lat : %.10f, Last Lon= %.10f,Prev Lat : %.10f, Prev Lon= %.10f\r\r", last_lat,last_lon,prev_lat,prev_lon);
      2c:	11 02 00 00 19 02 00 00 00 00 00 00 21 02 00 00     ............!...
      3c:	71 25 00 00 91 32 00 00 31 02 00 00 31 02 00 00     q%...2..1...1...
      4c:	31 02 00 00 31 02 00 00 59 28 00 00 61 29 00 00     1...1...Y(..a)..
      5c:	71 2a 00 00 7d 2b 00 00 31 02 00 00 fd 12 00 00     q*..}+..1.......
	UARTSend(PORT_TRACE, buffer, count);
      6c:	41 16 00 00 31 02 00 00 31 02 00 00 31 02 00 00     A...1...1...1...
	if (is_gps_valid == 0 || last_lat == 0 || last_lon == 0 || prev_lat == 0 || prev_lon == 0){
      7c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      8c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      9c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      ac:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      bc:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...

000000cc <__data_section_table>:
      cc:	00007700 	.word	0x00007700
      d0:	10000000 	.word	0x10000000
      d4:	0000001c 	.word	0x0000001c
      d8:	00007700 	.word	0x00007700
      dc:	2007c000 	.word	0x2007c000
      e0:	00000000 	.word	0x00000000

000000e4 <__bss_section_table>:
      e4:	10000020 	.word	0x10000020
		TraceNL("GPS_CalculateDistance returns..");
      e8:	00001ff8 	.word	0x00001ff8
		return 0;
      ec:	2007c000 	.word	0x2007c000
      f0:	00000000 	.word	0x00000000

000000f4 <data_init>:
      f4:	b480      	push	{r7}
	}
	/////// Convert ddMM to degrees
	double R = 6371000; // m
      f6:	b089      	sub	sp, #36	; 0x24
      f8:	af00      	add	r7, sp, #0
      fa:	60f8      	str	r0, [r7, #12]
      fc:	60b9      	str	r1, [r7, #8]
      fe:	607a      	str	r2, [r7, #4]
	double dLat = (last_lat-prev_lat) * 0.0174532925; // To Radian
     100:	68bb      	ldr	r3, [r7, #8]
     102:	61fb      	str	r3, [r7, #28]
     104:	68fb      	ldr	r3, [r7, #12]
     106:	61bb      	str	r3, [r7, #24]
     108:	2300      	movs	r3, #0
     10a:	617b      	str	r3, [r7, #20]
     10c:	e00a      	b.n	124 <data_init+0x30>
     10e:	69fb      	ldr	r3, [r7, #28]
     110:	1d1a      	adds	r2, r3, #4
     112:	61fa      	str	r2, [r7, #28]
     114:	69ba      	ldr	r2, [r7, #24]
     116:	1d11      	adds	r1, r2, #4
     118:	61b9      	str	r1, [r7, #24]
     11a:	6812      	ldr	r2, [r2, #0]
     11c:	601a      	str	r2, [r3, #0]
     11e:	697b      	ldr	r3, [r7, #20]
     120:	3304      	adds	r3, #4
     122:	617b      	str	r3, [r7, #20]
     124:	697a      	ldr	r2, [r7, #20]
     126:	687b      	ldr	r3, [r7, #4]
     128:	429a      	cmp	r2, r3
	double dLon = (last_lon-prev_lon) * 0.0174532925; //To Radian
     12a:	d3f0      	bcc.n	10e <data_init+0x1a>
     12c:	3724      	adds	r7, #36	; 0x24
     12e:	46bd      	mov	sp, r7
     130:	f85d 7b04 	ldr.w	r7, [sp], #4
     134:	4770      	bx	lr
     136:	bf00      	nop

00000138 <bss_init>:
     138:	b480      	push	{r7}
     13a:	b085      	sub	sp, #20
     13c:	af00      	add	r7, sp, #0
     13e:	6078      	str	r0, [r7, #4]
     140:	6039      	str	r1, [r7, #0]
     142:	687b      	ldr	r3, [r7, #4]
     144:	60fb      	str	r3, [r7, #12]
     146:	2300      	movs	r3, #0
     148:	60bb      	str	r3, [r7, #8]
     14a:	e007      	b.n	15c <bss_init+0x24>
     14c:	68fb      	ldr	r3, [r7, #12]
     14e:	1d1a      	adds	r2, r3, #4
     150:	60fa      	str	r2, [r7, #12]
     152:	2200      	movs	r2, #0
	local_prev_lat = prev_lat * 0.0174532925;
     154:	601a      	str	r2, [r3, #0]
     156:	68bb      	ldr	r3, [r7, #8]
     158:	3304      	adds	r3, #4
     15a:	60bb      	str	r3, [r7, #8]
     15c:	68ba      	ldr	r2, [r7, #8]
     15e:	683b      	ldr	r3, [r7, #0]
     160:	429a      	cmp	r2, r3
     162:	d3f3      	bcc.n	14c <bss_init+0x14>
     164:	3714      	adds	r7, #20
     166:	46bd      	mov	sp, r7
     168:	f85d 7b04 	ldr.w	r7, [sp], #4
     16c:	4770      	bx	lr
     16e:	bf00      	nop

00000170 <ResetISR>:
     170:	b580      	push	{r7, lr}
     172:	b084      	sub	sp, #16
	local_last_lat = last_lat * 0.0174532925;
     174:	af00      	add	r7, sp, #0
     176:	4b19      	ldr	r3, [pc, #100]	; (1dc <ResetISR+0x6c>)
     178:	60fb      	str	r3, [r7, #12]
     17a:	e013      	b.n	1a4 <ResetISR+0x34>
     17c:	68fb      	ldr	r3, [r7, #12]
     17e:	1d1a      	adds	r2, r3, #4
     180:	60fa      	str	r2, [r7, #12]
     182:	681b      	ldr	r3, [r3, #0]
     184:	60bb      	str	r3, [r7, #8]
     186:	68fb      	ldr	r3, [r7, #12]
     188:	1d1a      	adds	r2, r3, #4
     18a:	60fa      	str	r2, [r7, #12]
     18c:	681b      	ldr	r3, [r3, #0]
     18e:	607b      	str	r3, [r7, #4]
     190:	68fb      	ldr	r3, [r7, #12]
     192:	1d1a      	adds	r2, r3, #4
	double a = sin(dLat/2) * sin(dLat/2) + sin(dLon/2) * sin(dLon/2) * cos(local_last_lat) * cos(local_last_lat);
     194:	60fa      	str	r2, [r7, #12]
     196:	681b      	ldr	r3, [r3, #0]
     198:	603b      	str	r3, [r7, #0]
     19a:	68b8      	ldr	r0, [r7, #8]
     19c:	6879      	ldr	r1, [r7, #4]
     19e:	683a      	ldr	r2, [r7, #0]
     1a0:	f7ff ffa8 	bl	f4 <data_init>
     1a4:	68fb      	ldr	r3, [r7, #12]
     1a6:	4a0e      	ldr	r2, [pc, #56]	; (1e0 <ResetISR+0x70>)
     1a8:	4293      	cmp	r3, r2
     1aa:	d3e7      	bcc.n	17c <ResetISR+0xc>
     1ac:	e00d      	b.n	1ca <ResetISR+0x5a>
     1ae:	68fb      	ldr	r3, [r7, #12]
     1b0:	1d1a      	adds	r2, r3, #4
     1b2:	60fa      	str	r2, [r7, #12]
     1b4:	681b      	ldr	r3, [r3, #0]
     1b6:	607b      	str	r3, [r7, #4]
     1b8:	68fb      	ldr	r3, [r7, #12]
     1ba:	1d1a      	adds	r2, r3, #4
     1bc:	60fa      	str	r2, [r7, #12]
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	603b      	str	r3, [r7, #0]
     1c2:	6878      	ldr	r0, [r7, #4]
     1c4:	6839      	ldr	r1, [r7, #0]
     1c6:	f7ff ffb7 	bl	138 <bss_init>
     1ca:	68fb      	ldr	r3, [r7, #12]
     1cc:	4a05      	ldr	r2, [pc, #20]	; (1e4 <ResetISR+0x74>)
     1ce:	4293      	cmp	r3, r2
     1d0:	d3ed      	bcc.n	1ae <ResetISR+0x3e>
     1d2:	f003 fc19 	bl	3a08 <SystemInit>
     1d6:	f003 fc87 	bl	3ae8 <__main>
     1da:	e7fe      	b.n	1da <ResetISR+0x6a>
     1dc:	000000cc 	.word	0x000000cc
     1e0:	000000e4 	.word	0x000000e4
     1e4:	000000f4 	.word	0x000000f4

000001e8 <NMI_Handler>:
     1e8:	b480      	push	{r7}
     1ea:	af00      	add	r7, sp, #0
     1ec:	e7fe      	b.n	1ec <NMI_Handler+0x4>
     1ee:	bf00      	nop

000001f0 <HardFault_Handler>:
     1f0:	b480      	push	{r7}
     1f2:	af00      	add	r7, sp, #0
     1f4:	e7fe      	b.n	1f4 <HardFault_Handler+0x4>
     1f6:	bf00      	nop

000001f8 <MemManage_Handler>:
     1f8:	b480      	push	{r7}
     1fa:	af00      	add	r7, sp, #0
     1fc:	e7fe      	b.n	1fc <MemManage_Handler+0x4>
     1fe:	bf00      	nop

00000200 <BusFault_Handler>:
     200:	b480      	push	{r7}
     202:	af00      	add	r7, sp, #0
     204:	e7fe      	b.n	204 <BusFault_Handler+0x4>
     206:	bf00      	nop

00000208 <UsageFault_Handler>:
     208:	b480      	push	{r7}
     20a:	af00      	add	r7, sp, #0
     20c:	e7fe      	b.n	20c <UsageFault_Handler+0x4>
     20e:	bf00      	nop

00000210 <SVC_Handler>:
     210:	b480      	push	{r7}
     212:	af00      	add	r7, sp, #0
     214:	e7fe      	b.n	214 <SVC_Handler+0x4>
     216:	bf00      	nop

00000218 <DebugMon_Handler>:
     218:	b480      	push	{r7}
     21a:	af00      	add	r7, sp, #0
     21c:	e7fe      	b.n	21c <DebugMon_Handler+0x4>
     21e:	bf00      	nop

00000220 <PendSV_Handler>:
     220:	b480      	push	{r7}
     222:	af00      	add	r7, sp, #0
     224:	e7fe      	b.n	224 <PendSV_Handler+0x4>
     226:	bf00      	nop
     228:	b480      	push	{r7}
     22a:	af00      	add	r7, sp, #0
     22c:	e7fe      	b.n	22c <PendSV_Handler+0xc>
     22e:	bf00      	nop

00000230 <ADC_IRQHandler>:
     230:	b480      	push	{r7}
     232:	af00      	add	r7, sp, #0
     234:	e7fe      	b.n	234 <ADC_IRQHandler+0x4>
     236:	bf00      	nop
     238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     23c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     24c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     25c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     26c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     27c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	double c = 2 * atan2(sqrt(a), sqrt(1-a));
     280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     28c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     29c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	double d = R * c;
     2c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	if (d > 50000) {
     2dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
		TraceNL("GPS_CalculateDistance greater than 50000, returning 0.");
     2f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
		return 0;
     2f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000002fc <CRP_WORD>:
     2fc:	ffff ffff                                   ....

00000300 <LoadParams>:
     300:	b580      	push	{r7, lr}
     302:	b0b2      	sub	sp, #200	; 0xc8
     304:	af00      	add	r7, sp, #0
     306:	4b54      	ldr	r3, [pc, #336]	; (458 <LoadParams+0x158>)
     308:	681b      	ldr	r3, [r3, #0]
     30a:	2200      	movs	r2, #0
     30c:	461a      	mov	r2, r3
     30e:	4610      	mov	r0, r2
     310:	4952      	ldr	r1, [pc, #328]	; (45c <LoadParams+0x15c>)
     312:	f000 fb2b 	bl	96c <EEPROM_LoadString>
     316:	4b51      	ldr	r3, [pc, #324]	; (45c <LoadParams+0x15c>)
     318:	781b      	ldrb	r3, [r3, #0]
     31a:	3380      	adds	r3, #128	; 0x80
     31c:	4a50      	ldr	r2, [pc, #320]	; (460 <LoadParams+0x160>)
     31e:	5cd3      	ldrb	r3, [r2, r3]
     320:	f003 0338 	and.w	r3, r3, #56	; 0x38
     324:	2b00      	cmp	r3, #0
     326:	d00c      	beq.n	342 <LoadParams+0x42>
     328:	484c      	ldr	r0, [pc, #304]	; (45c <LoadParams+0x15c>)
     32a:	f005 f915 	bl	5558 <strlen>
     32e:	4603      	mov	r3, r0
     330:	2b04      	cmp	r3, #4
     332:	d906      	bls.n	342 <LoadParams+0x42>
     334:	4849      	ldr	r0, [pc, #292]	; (45c <LoadParams+0x15c>)
     336:	212e      	movs	r1, #46	; 0x2e
     338:	f005 f8e0 	bl	54fc <strchr>
	}
	TraceNL("*****************");
     33c:	4603      	mov	r3, r0
     33e:	2b00      	cmp	r3, #0
     340:	d103      	bne.n	34a <LoadParams+0x4a>
	TraceNL("*******");
     342:	4846      	ldr	r0, [pc, #280]	; (45c <LoadParams+0x15c>)
     344:	4947      	ldr	r1, [pc, #284]	; (464 <LoadParams+0x164>)
     346:	f005 f8e6 	bl	5516 <strcpy>
	TraceNL("**");
     34a:	4b47      	ldr	r3, [pc, #284]	; (468 <LoadParams+0x168>)
     34c:	681b      	ldr	r3, [r3, #0]
	TraceNL("*");
     34e:	2200      	movs	r2, #0
     350:	461a      	mov	r2, r3
     352:	4610      	mov	r0, r2
	count = sprintf(buffer,"GPS Distance= %.10f\r", d);
     354:	f000 fa98 	bl	888 <EEPROM_LoadInt64>
     358:	4602      	mov	r2, r0
     35a:	460b      	mov	r3, r1
     35c:	4b43      	ldr	r3, [pc, #268]	; (46c <LoadParams+0x16c>)
     35e:	601a      	str	r2, [r3, #0]
     360:	4b42      	ldr	r3, [pc, #264]	; (46c <LoadParams+0x16c>)
     362:	681b      	ldr	r3, [r3, #0]
     364:	2b00      	cmp	r3, #0
	UARTSend(PORT_TRACE, buffer, count);
     366:	d005      	beq.n	374 <LoadParams+0x74>
     368:	4b40      	ldr	r3, [pc, #256]	; (46c <LoadParams+0x16c>)
     36a:	681b      	ldr	r3, [r3, #0]
     36c:	f64f 72ff 	movw	r2, #65535	; 0xffff
     370:	4293      	cmp	r3, r2
     372:	d103      	bne.n	37c <LoadParams+0x7c>
     374:	4b3d      	ldr	r3, [pc, #244]	; (46c <LoadParams+0x16c>)
	TraceNL("*****************");
     376:	f241 72c1 	movw	r2, #6081	; 0x17c1
     37a:	601a      	str	r2, [r3, #0]
	TraceNL("*******");
     37c:	4b3c      	ldr	r3, [pc, #240]	; (470 <LoadParams+0x170>)
     37e:	681b      	ldr	r3, [r3, #0]
     380:	2200      	movs	r2, #0
	TraceNL("**");
     382:	461a      	mov	r2, r3
     384:	4610      	mov	r0, r2
     386:	493b      	ldr	r1, [pc, #236]	; (474 <LoadParams+0x174>)
	TraceNL("*");
     388:	f000 faf0 	bl	96c <EEPROM_LoadString>
     38c:	4b39      	ldr	r3, [pc, #228]	; (474 <LoadParams+0x174>)
	/*if (d < 1)
		d=0;*///Active in production
	return d;
     38e:	781b      	ldrb	r3, [r3, #0]
     390:	3380      	adds	r3, #128	; 0x80
}
     392:	4a33      	ldr	r2, [pc, #204]	; (460 <LoadParams+0x160>)
     394:	5cd3      	ldrb	r3, [r2, r3]
     396:	f003 0338 	and.w	r3, r3, #56	; 0x38
     39a:	2b00      	cmp	r3, #0
     39c:	d005      	beq.n	3aa <LoadParams+0xaa>
     39e:	4835      	ldr	r0, [pc, #212]	; (474 <LoadParams+0x174>)
     3a0:	f005 f8da 	bl	5558 <strlen>
     3a4:	4603      	mov	r3, r0
     3a6:	2b02      	cmp	r3, #2
     3a8:	d803      	bhi.n	3b2 <LoadParams+0xb2>
     3aa:	4832      	ldr	r0, [pc, #200]	; (474 <LoadParams+0x174>)
     3ac:	4932      	ldr	r1, [pc, #200]	; (478 <LoadParams+0x178>)
     3ae:	f005 f8b2 	bl	5516 <strcpy>
     3b2:	4b32      	ldr	r3, [pc, #200]	; (47c <LoadParams+0x17c>)
	//LOAD APN
	EEPROM_LoadString(cal_apn, per_apn_val);
	if (isalnum(per_apn_val[0]) == 0 || strlen(per_apn_val) < 3)
		strcpy(per_apn_val, "internet");//Default value
	//LOAD APN User
	EEPROM_LoadString(cal_apn_user, per_apnuser_val);
     3b4:	681b      	ldr	r3, [r3, #0]
     3b6:	2200      	movs	r2, #0
     3b8:	461a      	mov	r2, r3
     3ba:	4610      	mov	r0, r2
     3bc:	4930      	ldr	r1, [pc, #192]	; (480 <LoadParams+0x180>)
     3be:	f000 fad5 	bl	96c <EEPROM_LoadString>
	if (isalnum(per_apnuser_val[0]) == 0 || strlen(per_apnuser_val) < 3)
     3c2:	4b2f      	ldr	r3, [pc, #188]	; (480 <LoadParams+0x180>)
     3c4:	781b      	ldrb	r3, [r3, #0]
     3c6:	3380      	adds	r3, #128	; 0x80
     3c8:	4a25      	ldr	r2, [pc, #148]	; (460 <LoadParams+0x160>)
     3ca:	5cd3      	ldrb	r3, [r2, r3]
     3cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
     3d0:	2b00      	cmp	r3, #0
     3d2:	d005      	beq.n	3e0 <LoadParams+0xe0>
     3d4:	482a      	ldr	r0, [pc, #168]	; (480 <LoadParams+0x180>)
     3d6:	f005 f8bf 	bl	5558 <strlen>
     3da:	4603      	mov	r3, r0
     3dc:	2b02      	cmp	r3, #2
     3de:	d803      	bhi.n	3e8 <LoadParams+0xe8>
		strcpy(per_apnuser_val, "vodafone");//Default value
     3e0:	4827      	ldr	r0, [pc, #156]	; (480 <LoadParams+0x180>)
     3e2:	4928      	ldr	r1, [pc, #160]	; (484 <LoadParams+0x184>)
     3e4:	f005 f897 	bl	5516 <strcpy>
	//LOAD APN Pass
	EEPROM_LoadString(cal_apn_pass, per_apnpass_val);
     3e8:	4b27      	ldr	r3, [pc, #156]	; (488 <LoadParams+0x188>)
     3ea:	681b      	ldr	r3, [r3, #0]
     3ec:	2200      	movs	r2, #0
     3ee:	461a      	mov	r2, r3
     3f0:	4610      	mov	r0, r2
     3f2:	4926      	ldr	r1, [pc, #152]	; (48c <LoadParams+0x18c>)
     3f4:	f000 faba 	bl	96c <EEPROM_LoadString>
	if (isalnum(per_apnpass_val[0]) == 0 || strlen(per_apnpass_val) < 3)
     3f8:	4b24      	ldr	r3, [pc, #144]	; (48c <LoadParams+0x18c>)
     3fa:	781b      	ldrb	r3, [r3, #0]
     3fc:	3380      	adds	r3, #128	; 0x80
     3fe:	4a18      	ldr	r2, [pc, #96]	; (460 <LoadParams+0x160>)
     400:	5cd3      	ldrb	r3, [r2, r3]
     402:	f003 0338 	and.w	r3, r3, #56	; 0x38
     406:	2b00      	cmp	r3, #0
     408:	d005      	beq.n	416 <LoadParams+0x116>
     40a:	4820      	ldr	r0, [pc, #128]	; (48c <LoadParams+0x18c>)
     40c:	f005 f8a4 	bl	5558 <strlen>
     410:	4603      	mov	r3, r0
     412:	2b02      	cmp	r3, #2
     414:	d803      	bhi.n	41e <LoadParams+0x11e>
		strcpy(per_apnpass_val, "vodafone");//Default value
     416:	481d      	ldr	r0, [pc, #116]	; (48c <LoadParams+0x18c>)
     418:	491a      	ldr	r1, [pc, #104]	; (484 <LoadParams+0x184>)
     41a:	f005 f87c 	bl	5516 <strcpy>

	//LOAD Mileage
	per_mileage_val = EEPROM_LoadInt64(cal_mileage);
     41e:	4b1c      	ldr	r3, [pc, #112]	; (490 <LoadParams+0x190>)
     420:	681b      	ldr	r3, [r3, #0]
     422:	2200      	movs	r2, #0
     424:	461a      	mov	r2, r3
     426:	4610      	mov	r0, r2
     428:	f000 fa2e 	bl	888 <EEPROM_LoadInt64>
     42c:	4602      	mov	r2, r0
     42e:	460b      	mov	r3, r1
     430:	4918      	ldr	r1, [pc, #96]	; (494 <LoadParams+0x194>)
     432:	e9c1 2300 	strd	r2, r3, [r1]
	sprintf(buffer, "Mileage: %d\n", (int)per_mileage_val);
     436:	4b17      	ldr	r3, [pc, #92]	; (494 <LoadParams+0x194>)
     438:	e9d3 2300 	ldrd	r2, r3, [r3]
     43c:	463b      	mov	r3, r7
     43e:	4618      	mov	r0, r3
     440:	4915      	ldr	r1, [pc, #84]	; (498 <LoadParams+0x198>)
     442:	f003 fc23 	bl	3c8c <sprintf>
	TraceNL(buffer);
     446:	463b      	mov	r3, r7
     448:	4618      	mov	r0, r3
     44a:	f002 f8c5 	bl	25d8 <TraceNL>
	LoadTimings();
     44e:	f000 f825 	bl	49c <LoadTimings>

	//MODE 0 = Deep Power Down
	//MODE 1 = Power Down
}
     452:	37c8      	adds	r7, #200	; 0xc8
     454:	46bd      	mov	sp, r7
     456:	bd80      	pop	{r7, pc}
     458:	10000d28 	.word	0x10000d28
     45c:	10000ca8 	.word	0x10000ca8
     460:	00007508 	.word	0x00007508
     464:	0000654c 	.word	0x0000654c
     468:	10000d24 	.word	0x10000d24
     46c:	10000d18 	.word	0x10000d18
     470:	10000d60 	.word	0x10000d60
     474:	10000d64 	.word	0x10000d64
     478:	0000655c 	.word	0x0000655c
     47c:	10000d14 	.word	0x10000d14
     480:	10000cf8 	.word	0x10000cf8
     484:	00006568 	.word	0x00006568
     488:	10000c9c 	.word	0x10000c9c
     48c:	10000d48 	.word	0x10000d48
     490:	10000ce8 	.word	0x10000ce8
     494:	10000d38 	.word	0x10000d38
     498:	00006574 	.word	0x00006574

0000049c <LoadTimings>:

void LoadTimings() {
     49c:	b580      	push	{r7, lr}
     49e:	b0b4      	sub	sp, #208	; 0xd0
     4a0:	af00      	add	r7, sp, #0
	char buffer[200];
	//LOAD Ignition On Period
	per_ignonperiod_val = EEPROM_LoadInt64(cal_ign_on_period);
     4a2:	4b98      	ldr	r3, [pc, #608]	; (704 <LoadTimings+0x268>)
     4a4:	681b      	ldr	r3, [r3, #0]
     4a6:	2200      	movs	r2, #0
     4a8:	461a      	mov	r2, r3
     4aa:	4610      	mov	r0, r2
     4ac:	f000 f9ec 	bl	888 <EEPROM_LoadInt64>
     4b0:	4602      	mov	r2, r0
     4b2:	460b      	mov	r3, r1
     4b4:	4b94      	ldr	r3, [pc, #592]	; (708 <LoadTimings+0x26c>)
     4b6:	601a      	str	r2, [r3, #0]
	if (per_ignonperiod_val == 0 || per_ignonperiod_val > 14400)
     4b8:	4b93      	ldr	r3, [pc, #588]	; (708 <LoadTimings+0x26c>)
     4ba:	681b      	ldr	r3, [r3, #0]
     4bc:	2b00      	cmp	r3, #0
     4be:	d004      	beq.n	4ca <LoadTimings+0x2e>
     4c0:	4b91      	ldr	r3, [pc, #580]	; (708 <LoadTimings+0x26c>)
     4c2:	681b      	ldr	r3, [r3, #0]
     4c4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     4c8:	dd02      	ble.n	4d0 <LoadTimings+0x34>
		per_ignonperiod_val = 60;
     4ca:	4b8f      	ldr	r3, [pc, #572]	; (708 <LoadTimings+0x26c>)
     4cc:	223c      	movs	r2, #60	; 0x3c
     4ce:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignonperiod_val: %d\n", (int)per_ignonperiod_val);
     4d0:	4b8d      	ldr	r3, [pc, #564]	; (708 <LoadTimings+0x26c>)
     4d2:	681b      	ldr	r3, [r3, #0]
     4d4:	1d3a      	adds	r2, r7, #4
     4d6:	4610      	mov	r0, r2
     4d8:	498c      	ldr	r1, [pc, #560]	; (70c <LoadTimings+0x270>)
     4da:	461a      	mov	r2, r3
     4dc:	f003 fbd6 	bl	3c8c <sprintf>
	TraceNL(buffer);
     4e0:	1d3b      	adds	r3, r7, #4
     4e2:	4618      	mov	r0, r3
     4e4:	f002 f878 	bl	25d8 <TraceNL>
	//LOAD Ignition Off Period
	per_ignoffperiod_val = (int)EEPROM_LoadInt64(cal_ign_off_period);
     4e8:	4b89      	ldr	r3, [pc, #548]	; (710 <LoadTimings+0x274>)
     4ea:	681b      	ldr	r3, [r3, #0]
     4ec:	2200      	movs	r2, #0
     4ee:	461a      	mov	r2, r3
     4f0:	4610      	mov	r0, r2
     4f2:	f000 f9c9 	bl	888 <EEPROM_LoadInt64>
     4f6:	4602      	mov	r2, r0
     4f8:	460b      	mov	r3, r1
     4fa:	4b86      	ldr	r3, [pc, #536]	; (714 <LoadTimings+0x278>)
     4fc:	601a      	str	r2, [r3, #0]
	int original_per_ignoffperiod_val = per_ignoffperiod_val;
     4fe:	4b85      	ldr	r3, [pc, #532]	; (714 <LoadTimings+0x278>)
     500:	681b      	ldr	r3, [r3, #0]
     502:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (per_ignoffperiod_val == 0 || per_ignoffperiod_val > 14400) //4 hours max.
     506:	4b83      	ldr	r3, [pc, #524]	; (714 <LoadTimings+0x278>)
     508:	681b      	ldr	r3, [r3, #0]
     50a:	2b00      	cmp	r3, #0
     50c:	d004      	beq.n	518 <LoadTimings+0x7c>
     50e:	4b81      	ldr	r3, [pc, #516]	; (714 <LoadTimings+0x278>)
     510:	681b      	ldr	r3, [r3, #0]
     512:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     516:	dd02      	ble.n	51e <LoadTimings+0x82>
		per_ignoffperiod_val = 120;
     518:	4b7e      	ldr	r3, [pc, #504]	; (714 <LoadTimings+0x278>)
     51a:	2278      	movs	r2, #120	; 0x78
     51c:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignoffperiod_val: %d, per_ignoffperiod_val(original): %d\n", (int)per_ignoffperiod_val,(int)original_per_ignoffperiod_val);
     51e:	4b7d      	ldr	r3, [pc, #500]	; (714 <LoadTimings+0x278>)
     520:	681b      	ldr	r3, [r3, #0]
     522:	1d3a      	adds	r2, r7, #4
     524:	4610      	mov	r0, r2
     526:	497c      	ldr	r1, [pc, #496]	; (718 <LoadTimings+0x27c>)
     528:	461a      	mov	r2, r3
     52a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
     52e:	f003 fbad 	bl	3c8c <sprintf>
	TraceNL(buffer);
     532:	1d3b      	adds	r3, r7, #4
     534:	4618      	mov	r0, r3
     536:	f002 f84f 	bl	25d8 <TraceNL>
	//LOAD Ignition On Roaming Period
	per_ignonroamingperiod_val = (int)EEPROM_LoadInt64(cal_ign_on_roaming_period);
     53a:	4b78      	ldr	r3, [pc, #480]	; (71c <LoadTimings+0x280>)
     53c:	681b      	ldr	r3, [r3, #0]
     53e:	2200      	movs	r2, #0
     540:	461a      	mov	r2, r3
     542:	4610      	mov	r0, r2
     544:	f000 f9a0 	bl	888 <EEPROM_LoadInt64>
     548:	4602      	mov	r2, r0
     54a:	460b      	mov	r3, r1
     54c:	4b74      	ldr	r3, [pc, #464]	; (720 <LoadTimings+0x284>)
     54e:	601a      	str	r2, [r3, #0]
	if (per_ignonroamingperiod_val == 0 || per_ignonroamingperiod_val > 14400)
     550:	4b73      	ldr	r3, [pc, #460]	; (720 <LoadTimings+0x284>)
     552:	681b      	ldr	r3, [r3, #0]
     554:	2b00      	cmp	r3, #0
     556:	d004      	beq.n	562 <LoadTimings+0xc6>
     558:	4b71      	ldr	r3, [pc, #452]	; (720 <LoadTimings+0x284>)
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     560:	dd03      	ble.n	56a <LoadTimings+0xce>
		per_ignonroamingperiod_val = 1800;
     562:	4b6f      	ldr	r3, [pc, #444]	; (720 <LoadTimings+0x284>)
     564:	f44f 62e1 	mov.w	r2, #1800	; 0x708
     568:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignonroamingperiod_val: %d\n", (int)per_ignonroamingperiod_val);
     56a:	4b6d      	ldr	r3, [pc, #436]	; (720 <LoadTimings+0x284>)
     56c:	681b      	ldr	r3, [r3, #0]
     56e:	1d3a      	adds	r2, r7, #4
     570:	4610      	mov	r0, r2
     572:	496c      	ldr	r1, [pc, #432]	; (724 <LoadTimings+0x288>)
     574:	461a      	mov	r2, r3
     576:	f003 fb89 	bl	3c8c <sprintf>
	TraceNL(buffer);
     57a:	1d3b      	adds	r3, r7, #4
     57c:	4618      	mov	r0, r3
     57e:	f002 f82b 	bl	25d8 <TraceNL>
	//LOAD Ignition Off Roaming Period
	per_ignoffroamingperiod_val = (int)EEPROM_LoadInt64(cal_ign_off_roaming_period);
     582:	4b69      	ldr	r3, [pc, #420]	; (728 <LoadTimings+0x28c>)
     584:	681b      	ldr	r3, [r3, #0]
     586:	2200      	movs	r2, #0
     588:	461a      	mov	r2, r3
     58a:	4610      	mov	r0, r2
     58c:	f000 f97c 	bl	888 <EEPROM_LoadInt64>
     590:	4602      	mov	r2, r0
     592:	460b      	mov	r3, r1
     594:	4b65      	ldr	r3, [pc, #404]	; (72c <LoadTimings+0x290>)
     596:	601a      	str	r2, [r3, #0]
	if (per_ignoffroamingperiod_val == 0 || per_ignoffroamingperiod_val > 14400)
     598:	4b64      	ldr	r3, [pc, #400]	; (72c <LoadTimings+0x290>)
     59a:	681b      	ldr	r3, [r3, #0]
     59c:	2b00      	cmp	r3, #0
     59e:	d004      	beq.n	5aa <LoadTimings+0x10e>
     5a0:	4b62      	ldr	r3, [pc, #392]	; (72c <LoadTimings+0x290>)
     5a2:	681b      	ldr	r3, [r3, #0]
     5a4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     5a8:	dd03      	ble.n	5b2 <LoadTimings+0x116>
		per_ignoffroamingperiod_val = 7200;
     5aa:	4b60      	ldr	r3, [pc, #384]	; (72c <LoadTimings+0x290>)
     5ac:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
     5b0:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignoffroamingperiod_val: %d\n", (int)per_ignoffroamingperiod_val);
     5b2:	4b5e      	ldr	r3, [pc, #376]	; (72c <LoadTimings+0x290>)
     5b4:	681b      	ldr	r3, [r3, #0]
     5b6:	1d3a      	adds	r2, r7, #4
     5b8:	4610      	mov	r0, r2
     5ba:	495d      	ldr	r1, [pc, #372]	; (730 <LoadTimings+0x294>)
     5bc:	461a      	mov	r2, r3
     5be:	f003 fb65 	bl	3c8c <sprintf>
	TraceNL(buffer);
     5c2:	1d3b      	adds	r3, r7, #4
     5c4:	4618      	mov	r0, r3
     5c6:	f002 f807 	bl	25d8 <TraceNL>
	per_lowpow_just_wake = (int)EEPROM_LoadInt64(cal_lowpow_just_wake);
     5ca:	4b5a      	ldr	r3, [pc, #360]	; (734 <LoadTimings+0x298>)
     5cc:	681b      	ldr	r3, [r3, #0]
     5ce:	2200      	movs	r2, #0
     5d0:	461a      	mov	r2, r3
     5d2:	4610      	mov	r0, r2
     5d4:	f000 f958 	bl	888 <EEPROM_LoadInt64>
     5d8:	4602      	mov	r2, r0
     5da:	460b      	mov	r3, r1
     5dc:	4b56      	ldr	r3, [pc, #344]	; (738 <LoadTimings+0x29c>)
     5de:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_just_wake: %d\n", (int)per_lowpow_just_wake);
     5e0:	4b55      	ldr	r3, [pc, #340]	; (738 <LoadTimings+0x29c>)
     5e2:	681b      	ldr	r3, [r3, #0]
     5e4:	1d3a      	adds	r2, r7, #4
     5e6:	4610      	mov	r0, r2
     5e8:	4954      	ldr	r1, [pc, #336]	; (73c <LoadTimings+0x2a0>)
     5ea:	461a      	mov	r2, r3
     5ec:	f003 fb4e 	bl	3c8c <sprintf>
	TraceNL(buffer);
     5f0:	1d3b      	adds	r3, r7, #4
     5f2:	4618      	mov	r0, r3
     5f4:	f001 fff0 	bl	25d8 <TraceNL>
	per_lowpow_cancel = (int)EEPROM_LoadInt64(cal_lowpow_cancel);
     5f8:	4b51      	ldr	r3, [pc, #324]	; (740 <LoadTimings+0x2a4>)
     5fa:	681b      	ldr	r3, [r3, #0]
     5fc:	2200      	movs	r2, #0
     5fe:	461a      	mov	r2, r3
     600:	4610      	mov	r0, r2
     602:	f000 f941 	bl	888 <EEPROM_LoadInt64>
     606:	4602      	mov	r2, r0
     608:	460b      	mov	r3, r1
     60a:	4b4e      	ldr	r3, [pc, #312]	; (744 <LoadTimings+0x2a8>)
     60c:	601a      	str	r2, [r3, #0]
	if (per_lowpow_cancel > 2)
     60e:	4b4d      	ldr	r3, [pc, #308]	; (744 <LoadTimings+0x2a8>)
     610:	681b      	ldr	r3, [r3, #0]
     612:	2b02      	cmp	r3, #2
     614:	dd02      	ble.n	61c <LoadTimings+0x180>
		per_lowpow_cancel = 0;
     616:	4b4b      	ldr	r3, [pc, #300]	; (744 <LoadTimings+0x2a8>)
     618:	2200      	movs	r2, #0
     61a:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_cancel: %d\n", (int)per_lowpow_cancel);
     61c:	4b49      	ldr	r3, [pc, #292]	; (744 <LoadTimings+0x2a8>)
     61e:	681b      	ldr	r3, [r3, #0]
     620:	1d3a      	adds	r2, r7, #4
     622:	4610      	mov	r0, r2
     624:	4948      	ldr	r1, [pc, #288]	; (748 <LoadTimings+0x2ac>)
     626:	461a      	mov	r2, r3
     628:	f003 fb30 	bl	3c8c <sprintf>
	TraceNL(buffer);
     62c:	1d3b      	adds	r3, r7, #4
     62e:	4618      	mov	r0, r3
     630:	f001 ffd2 	bl	25d8 <TraceNL>
	//LOAD Low Power Wake Up Period
	per_lowpow_period = (int)EEPROM_LoadInt64(cal_lowpow_period);
     634:	4b45      	ldr	r3, [pc, #276]	; (74c <LoadTimings+0x2b0>)
     636:	681b      	ldr	r3, [r3, #0]
     638:	2200      	movs	r2, #0
     63a:	461a      	mov	r2, r3
     63c:	4610      	mov	r0, r2
     63e:	f000 f923 	bl	888 <EEPROM_LoadInt64>
     642:	4602      	mov	r2, r0
     644:	460b      	mov	r3, r1
     646:	4b42      	ldr	r3, [pc, #264]	; (750 <LoadTimings+0x2b4>)
     648:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_period(original): %d\n", (int)per_lowpow_period);
     64a:	4b41      	ldr	r3, [pc, #260]	; (750 <LoadTimings+0x2b4>)
     64c:	681b      	ldr	r3, [r3, #0]
     64e:	1d3a      	adds	r2, r7, #4
     650:	4610      	mov	r0, r2
     652:	4940      	ldr	r1, [pc, #256]	; (754 <LoadTimings+0x2b8>)
     654:	461a      	mov	r2, r3
     656:	f003 fb19 	bl	3c8c <sprintf>
	TraceNL(buffer);
     65a:	1d3b      	adds	r3, r7, #4
     65c:	4618      	mov	r0, r3
     65e:	f001 ffbb 	bl	25d8 <TraceNL>
	if (per_lowpow_period < 1 || per_lowpow_period > 2880){ //No period more than 2 days.
     662:	4b3b      	ldr	r3, [pc, #236]	; (750 <LoadTimings+0x2b4>)
     664:	681b      	ldr	r3, [r3, #0]
     666:	2b00      	cmp	r3, #0
     668:	dd04      	ble.n	674 <LoadTimings+0x1d8>
     66a:	4b39      	ldr	r3, [pc, #228]	; (750 <LoadTimings+0x2b4>)
     66c:	681b      	ldr	r3, [r3, #0]
     66e:	f5b3 6f34 	cmp.w	r3, #2880	; 0xb40
     672:	dd02      	ble.n	67a <LoadTimings+0x1de>
		per_lowpow_period = 59;
     674:	4b36      	ldr	r3, [pc, #216]	; (750 <LoadTimings+0x2b4>)
     676:	223b      	movs	r2, #59	; 0x3b
     678:	601a      	str	r2, [r3, #0]
		#endif
		#ifdef CABINET_DEMO
			per_lowpow_period = 15; //59;//1Hour
		#endif
	}
	sprintf(buffer, "per_lowpow_period: %d\n", (int)per_lowpow_period);
     67a:	4b35      	ldr	r3, [pc, #212]	; (750 <LoadTimings+0x2b4>)
     67c:	681b      	ldr	r3, [r3, #0]
     67e:	1d3a      	adds	r2, r7, #4
     680:	4610      	mov	r0, r2
     682:	4935      	ldr	r1, [pc, #212]	; (758 <LoadTimings+0x2bc>)
     684:	461a      	mov	r2, r3
     686:	f003 fb01 	bl	3c8c <sprintf>
	TraceNL(buffer);
     68a:	1d3b      	adds	r3, r7, #4
     68c:	4618      	mov	r0, r3
     68e:	f001 ffa3 	bl	25d8 <TraceNL>
	per_lowpow_mode = (int)EEPROM_LoadInt64(cal_lowpow_mode);
     692:	4b32      	ldr	r3, [pc, #200]	; (75c <LoadTimings+0x2c0>)
     694:	681b      	ldr	r3, [r3, #0]
     696:	2200      	movs	r2, #0
     698:	461a      	mov	r2, r3
     69a:	4610      	mov	r0, r2
     69c:	f000 f8f4 	bl	888 <EEPROM_LoadInt64>
     6a0:	4602      	mov	r2, r0
     6a2:	460b      	mov	r3, r1
     6a4:	4b2e      	ldr	r3, [pc, #184]	; (760 <LoadTimings+0x2c4>)
     6a6:	601a      	str	r2, [r3, #0]
	if (per_lowpow_mode > 2){
     6a8:	4b2d      	ldr	r3, [pc, #180]	; (760 <LoadTimings+0x2c4>)
     6aa:	681b      	ldr	r3, [r3, #0]
     6ac:	2b02      	cmp	r3, #2
     6ae:	dd02      	ble.n	6b6 <LoadTimings+0x21a>
		per_lowpow_mode = 0;
     6b0:	4b2b      	ldr	r3, [pc, #172]	; (760 <LoadTimings+0x2c4>)
     6b2:	2200      	movs	r2, #0
     6b4:	601a      	str	r2, [r3, #0]
		#ifdef CABINET_DEMO
			per_lowpow_mode = 1; //Light sleep
		#endif
	}
	sprintf(buffer, "per_lowpow_mode: %d\n", (int)per_lowpow_mode);
     6b6:	4b2a      	ldr	r3, [pc, #168]	; (760 <LoadTimings+0x2c4>)
     6b8:	681b      	ldr	r3, [r3, #0]
     6ba:	1d3a      	adds	r2, r7, #4
     6bc:	4610      	mov	r0, r2
     6be:	4929      	ldr	r1, [pc, #164]	; (764 <LoadTimings+0x2c8>)
     6c0:	461a      	mov	r2, r3
     6c2:	f003 fae3 	bl	3c8c <sprintf>
	TraceNL(buffer);
     6c6:	1d3b      	adds	r3, r7, #4
     6c8:	4618      	mov	r0, r3
     6ca:	f001 ff85 	bl	25d8 <TraceNL>
	per_coffe_counter = (int)EEPROM_LoadInt64(cal_coffee_counter);
     6ce:	4b26      	ldr	r3, [pc, #152]	; (768 <LoadTimings+0x2cc>)
     6d0:	681b      	ldr	r3, [r3, #0]
     6d2:	2200      	movs	r2, #0
     6d4:	461a      	mov	r2, r3
     6d6:	4610      	mov	r0, r2
     6d8:	f000 f8d6 	bl	888 <EEPROM_LoadInt64>
     6dc:	4602      	mov	r2, r0
     6de:	460b      	mov	r3, r1
     6e0:	4b22      	ldr	r3, [pc, #136]	; (76c <LoadTimings+0x2d0>)
     6e2:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_coffee_counter: %d\n", (int)per_coffe_counter);
     6e4:	4b21      	ldr	r3, [pc, #132]	; (76c <LoadTimings+0x2d0>)
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	1d3a      	adds	r2, r7, #4
     6ea:	4610      	mov	r0, r2
     6ec:	4920      	ldr	r1, [pc, #128]	; (770 <LoadTimings+0x2d4>)
     6ee:	461a      	mov	r2, r3
     6f0:	f003 facc 	bl	3c8c <sprintf>
	TraceNL(buffer);
     6f4:	1d3b      	adds	r3, r7, #4
     6f6:	4618      	mov	r0, r3
     6f8:	f001 ff6e 	bl	25d8 <TraceNL>
}
     6fc:	37d0      	adds	r7, #208	; 0xd0
     6fe:	46bd      	mov	sp, r7
     700:	bd80      	pop	{r7, pc}
     702:	bf00      	nop
     704:	10000cd0 	.word	0x10000cd0
     708:	10000cd8 	.word	0x10000cd8
     70c:	00006584 	.word	0x00006584
     710:	10000d40 	.word	0x10000d40
     714:	10000ca0 	.word	0x10000ca0
     718:	000065a0 	.word	0x000065a0
     71c:	10000cf0 	.word	0x10000cf0
     720:	10000cd4 	.word	0x10000cd4
     724:	000065e0 	.word	0x000065e0
     728:	10000d20 	.word	0x10000d20
     72c:	10000d44 	.word	0x10000d44
     730:	00006600 	.word	0x00006600
     734:	10000d2c 	.word	0x10000d2c
     738:	10000cec 	.word	0x10000cec
     73c:	00006624 	.word	0x00006624
     740:	10000cf4 	.word	0x10000cf4
     744:	10000d30 	.word	0x10000d30
     748:	00006640 	.word	0x00006640
     74c:	10000d5c 	.word	0x10000d5c
     750:	10000c98 	.word	0x10000c98
     754:	00006658 	.word	0x00006658
     758:	0000667c 	.word	0x0000667c
     75c:	10000cdc 	.word	0x10000cdc
     760:	10000ce0 	.word	0x10000ce0
     764:	00006694 	.word	0x00006694
     768:	10000ce4 	.word	0x10000ce4
     76c:	10000d34 	.word	0x10000d34
     770:	000066ac 	.word	0x000066ac

00000774 <EEPROM_Init>:

void PersistParams() {
	EEPROM_SaveInt64(cal_mileage,per_mileage_val);
}

uint8_t EEPROM_Init() {
     774:	b580      	push	{r7, lr}
     776:	af00      	add	r7, sp, #0
	//Initialize EEPROM Memory Map -- 256x8
	test.StartPos = 0;
     778:	4b33      	ldr	r3, [pc, #204]	; (848 <EEPROM_Init+0xd4>)
     77a:	2200      	movs	r2, #0
     77c:	805a      	strh	r2, [r3, #2]
	test.Length = 2;
     77e:	4b32      	ldr	r3, [pc, #200]	; (848 <EEPROM_Init+0xd4>)
     780:	2202      	movs	r2, #2
     782:	801a      	strh	r2, [r3, #0]
	//Calibration test, ip, port, apn, apn_user, apn_pass, ign_on_period, ign_off_period, ign_on_roaming_period, ign_off_roaming_period, mileage;
	cal_port.StartPos = 6;
     784:	4b31      	ldr	r3, [pc, #196]	; (84c <EEPROM_Init+0xd8>)
     786:	2206      	movs	r2, #6
     788:	805a      	strh	r2, [r3, #2]
	cal_port.Length = 2;
     78a:	4b30      	ldr	r3, [pc, #192]	; (84c <EEPROM_Init+0xd8>)
     78c:	2202      	movs	r2, #2
     78e:	801a      	strh	r2, [r3, #0]
	cal_apn.StartPos = 8;
     790:	4b2f      	ldr	r3, [pc, #188]	; (850 <EEPROM_Init+0xdc>)
     792:	2208      	movs	r2, #8
     794:	805a      	strh	r2, [r3, #2]
	cal_apn.Length = 25;
     796:	4b2e      	ldr	r3, [pc, #184]	; (850 <EEPROM_Init+0xdc>)
     798:	2219      	movs	r2, #25
     79a:	801a      	strh	r2, [r3, #0]
	cal_apn_user.StartPos = 33;
     79c:	4b2d      	ldr	r3, [pc, #180]	; (854 <EEPROM_Init+0xe0>)
     79e:	2221      	movs	r2, #33	; 0x21
     7a0:	805a      	strh	r2, [r3, #2]
	cal_apn_user.Length = 12;
     7a2:	4b2c      	ldr	r3, [pc, #176]	; (854 <EEPROM_Init+0xe0>)
     7a4:	220c      	movs	r2, #12
     7a6:	801a      	strh	r2, [r3, #0]
	cal_apn_pass.StartPos = 45;
     7a8:	4b2b      	ldr	r3, [pc, #172]	; (858 <EEPROM_Init+0xe4>)
     7aa:	222d      	movs	r2, #45	; 0x2d
     7ac:	805a      	strh	r2, [r3, #2]
	cal_apn_pass.Length = 12;
     7ae:	4b2a      	ldr	r3, [pc, #168]	; (858 <EEPROM_Init+0xe4>)
     7b0:	220c      	movs	r2, #12
     7b2:	801a      	strh	r2, [r3, #0]
	cal_ign_on_period.StartPos = 57;
     7b4:	4b29      	ldr	r3, [pc, #164]	; (85c <EEPROM_Init+0xe8>)
     7b6:	2239      	movs	r2, #57	; 0x39
     7b8:	805a      	strh	r2, [r3, #2]
	cal_ign_on_period.Length = 2;
     7ba:	4b28      	ldr	r3, [pc, #160]	; (85c <EEPROM_Init+0xe8>)
     7bc:	2202      	movs	r2, #2
     7be:	801a      	strh	r2, [r3, #0]
	cal_lowpow_period.StartPos = 59;
     7c0:	4b27      	ldr	r3, [pc, #156]	; (860 <EEPROM_Init+0xec>)
     7c2:	223b      	movs	r2, #59	; 0x3b
     7c4:	805a      	strh	r2, [r3, #2]
	cal_lowpow_period.Length = 2;
     7c6:	4b26      	ldr	r3, [pc, #152]	; (860 <EEPROM_Init+0xec>)
     7c8:	2202      	movs	r2, #2
     7ca:	801a      	strh	r2, [r3, #0]
	cal_ign_on_roaming_period.StartPos = 61;
     7cc:	4b25      	ldr	r3, [pc, #148]	; (864 <EEPROM_Init+0xf0>)
     7ce:	223d      	movs	r2, #61	; 0x3d
     7d0:	805a      	strh	r2, [r3, #2]
	cal_ign_on_roaming_period.Length = 2;
     7d2:	4b24      	ldr	r3, [pc, #144]	; (864 <EEPROM_Init+0xf0>)
     7d4:	2202      	movs	r2, #2
     7d6:	801a      	strh	r2, [r3, #0]
	cal_ign_off_roaming_period.StartPos = 63;
     7d8:	4b23      	ldr	r3, [pc, #140]	; (868 <EEPROM_Init+0xf4>)
     7da:	223f      	movs	r2, #63	; 0x3f
     7dc:	805a      	strh	r2, [r3, #2]
	cal_ign_off_roaming_period.Length = 2;
     7de:	4b22      	ldr	r3, [pc, #136]	; (868 <EEPROM_Init+0xf4>)
     7e0:	2202      	movs	r2, #2
     7e2:	801a      	strh	r2, [r3, #0]
	cal_mileage.StartPos = 65;
     7e4:	4b21      	ldr	r3, [pc, #132]	; (86c <EEPROM_Init+0xf8>)
     7e6:	2241      	movs	r2, #65	; 0x41
     7e8:	805a      	strh	r2, [r3, #2]
	cal_mileage.Length = 8;
     7ea:	4b20      	ldr	r3, [pc, #128]	; (86c <EEPROM_Init+0xf8>)
     7ec:	2208      	movs	r2, #8
     7ee:	801a      	strh	r2, [r3, #0]
	cal_ip.StartPos = 73;
     7f0:	4b1f      	ldr	r3, [pc, #124]	; (870 <EEPROM_Init+0xfc>)
     7f2:	2249      	movs	r2, #73	; 0x49
     7f4:	805a      	strh	r2, [r3, #2]
	cal_ip.Length = 25;
     7f6:	4b1e      	ldr	r3, [pc, #120]	; (870 <EEPROM_Init+0xfc>)
     7f8:	2219      	movs	r2, #25
     7fa:	801a      	strh	r2, [r3, #0]
	cal_ign_off_period.StartPos = 98;
     7fc:	4b1d      	ldr	r3, [pc, #116]	; (874 <EEPROM_Init+0x100>)
     7fe:	2262      	movs	r2, #98	; 0x62
     800:	805a      	strh	r2, [r3, #2]
	cal_ign_off_period.Length = 2;
     802:	4b1c      	ldr	r3, [pc, #112]	; (874 <EEPROM_Init+0x100>)
     804:	2202      	movs	r2, #2
     806:	801a      	strh	r2, [r3, #0]
	cal_lowpow_just_wake.StartPos = 100;
     808:	4b1b      	ldr	r3, [pc, #108]	; (878 <EEPROM_Init+0x104>)
     80a:	2264      	movs	r2, #100	; 0x64
     80c:	805a      	strh	r2, [r3, #2]
	cal_lowpow_just_wake.Length = 2;
     80e:	4b1a      	ldr	r3, [pc, #104]	; (878 <EEPROM_Init+0x104>)
     810:	2202      	movs	r2, #2
     812:	801a      	strh	r2, [r3, #0]
	cal_lowpow_cancel.StartPos = 102;
     814:	4b19      	ldr	r3, [pc, #100]	; (87c <EEPROM_Init+0x108>)
     816:	2266      	movs	r2, #102	; 0x66
     818:	805a      	strh	r2, [r3, #2]
	cal_lowpow_cancel.Length = 2;
     81a:	4b18      	ldr	r3, [pc, #96]	; (87c <EEPROM_Init+0x108>)
     81c:	2202      	movs	r2, #2
     81e:	801a      	strh	r2, [r3, #0]
	cal_lowpow_mode.StartPos = 104;
     820:	4b17      	ldr	r3, [pc, #92]	; (880 <EEPROM_Init+0x10c>)
     822:	2268      	movs	r2, #104	; 0x68
     824:	805a      	strh	r2, [r3, #2]
	cal_lowpow_mode.Length = 2;
     826:	4b16      	ldr	r3, [pc, #88]	; (880 <EEPROM_Init+0x10c>)
     828:	2202      	movs	r2, #2
     82a:	801a      	strh	r2, [r3, #0]
	cal_coffee_counter.StartPos = 106;
     82c:	4b15      	ldr	r3, [pc, #84]	; (884 <EEPROM_Init+0x110>)
     82e:	226a      	movs	r2, #106	; 0x6a
     830:	805a      	strh	r2, [r3, #2]
	cal_coffee_counter.Length = 2;
     832:	4b14      	ldr	r3, [pc, #80]	; (884 <EEPROM_Init+0x110>)
     834:	2202      	movs	r2, #2
     836:	801a      	strh	r2, [r3, #0]
 	return I2CInit(1,((uint32_t)I2CMASTER) == 0);
     838:	2001      	movs	r0, #1
     83a:	2100      	movs	r1, #0
     83c:	f001 f8f2 	bl	1a24 <I2CInit>
     840:	4603      	mov	r3, r0
     842:	b2db      	uxtb	r3, r3
}
     844:	4618      	mov	r0, r3
     846:	bd80      	pop	{r7, pc}
     848:	10000d10 	.word	0x10000d10
     84c:	10000d24 	.word	0x10000d24
     850:	10000d60 	.word	0x10000d60
     854:	10000d14 	.word	0x10000d14
     858:	10000c9c 	.word	0x10000c9c
     85c:	10000cd0 	.word	0x10000cd0
     860:	10000d5c 	.word	0x10000d5c
     864:	10000cf0 	.word	0x10000cf0
     868:	10000d20 	.word	0x10000d20
     86c:	10000ce8 	.word	0x10000ce8
     870:	10000d28 	.word	0x10000d28
     874:	10000d40 	.word	0x10000d40
     878:	10000d2c 	.word	0x10000d2c
     87c:	10000cf4 	.word	0x10000cf4
     880:	10000cdc 	.word	0x10000cdc
     884:	10000ce4 	.word	0x10000ce4

00000888 <EEPROM_LoadInt64>:

uint64_t EEPROM_LoadInt64(Calibration cal) {
     888:	b580      	push	{r7, lr}
     88a:	b086      	sub	sp, #24
     88c:	af00      	add	r7, sp, #0
     88e:	6078      	str	r0, [r7, #4]
	int index = 0;
     890:	2300      	movs	r3, #0
     892:	617b      	str	r3, [r7, #20]
	uint64_t result = 0;
     894:	f04f 0200 	mov.w	r2, #0
     898:	f04f 0300 	mov.w	r3, #0
     89c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for (index=0; index < cal.Length; index++) {
     8a0:	2300      	movs	r3, #0
     8a2:	617b      	str	r3, [r7, #20]
     8a4:	e055      	b.n	952 <EEPROM_LoadInt64+0xca>
		if (cal.Length > 2)
     8a6:	88bb      	ldrh	r3, [r7, #4]
     8a8:	2b02      	cmp	r3, #2
     8aa:	d926      	bls.n	8fa <EEPROM_LoadInt64+0x72>
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFFFFFF);
     8ac:	88fb      	ldrh	r3, [r7, #6]
     8ae:	b2da      	uxtb	r2, r3
     8b0:	697b      	ldr	r3, [r7, #20]
     8b2:	b2db      	uxtb	r3, r3
     8b4:	4413      	add	r3, r2
     8b6:	b2db      	uxtb	r3, r3
     8b8:	2001      	movs	r0, #1
     8ba:	4619      	mov	r1, r3
     8bc:	f001 f998 	bl	1bf0 <i2c_read>
     8c0:	4603      	mov	r3, r0
     8c2:	461a      	mov	r2, r3
     8c4:	88bb      	ldrh	r3, [r7, #4]
     8c6:	4619      	mov	r1, r3
     8c8:	697b      	ldr	r3, [r7, #20]
     8ca:	1acb      	subs	r3, r1, r3
     8cc:	3b01      	subs	r3, #1
     8ce:	00db      	lsls	r3, r3, #3
     8d0:	fa02 f303 	lsl.w	r3, r2, r3
     8d4:	461a      	mov	r2, r3
     8d6:	f04f 0300 	mov.w	r3, #0
     8da:	f04f 30ff 	mov.w	r0, #4294967295
     8de:	f04f 0100 	mov.w	r1, #0
     8e2:	ea02 0200 	and.w	r2, r2, r0
     8e6:	ea03 0301 	and.w	r3, r3, r1
     8ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     8ee:	1812      	adds	r2, r2, r0
     8f0:	eb43 0301 	adc.w	r3, r3, r1
     8f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
     8f8:	e025      	b.n	946 <EEPROM_LoadInt64+0xbe>
		else
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFF);
     8fa:	88fb      	ldrh	r3, [r7, #6]
     8fc:	b2da      	uxtb	r2, r3
     8fe:	697b      	ldr	r3, [r7, #20]
     900:	b2db      	uxtb	r3, r3
     902:	4413      	add	r3, r2
     904:	b2db      	uxtb	r3, r3
     906:	2001      	movs	r0, #1
     908:	4619      	mov	r1, r3
     90a:	f001 f971 	bl	1bf0 <i2c_read>
     90e:	4603      	mov	r3, r0
     910:	461a      	mov	r2, r3
     912:	88bb      	ldrh	r3, [r7, #4]
     914:	4619      	mov	r1, r3
     916:	697b      	ldr	r3, [r7, #20]
     918:	1acb      	subs	r3, r1, r3
     91a:	3b01      	subs	r3, #1
     91c:	00db      	lsls	r3, r3, #3
     91e:	fa02 f303 	lsl.w	r3, r2, r3
     922:	461a      	mov	r2, r3
     924:	f04f 0300 	mov.w	r3, #0
     928:	f64f 70ff 	movw	r0, #65535	; 0xffff
     92c:	f04f 0100 	mov.w	r1, #0
     930:	ea02 0200 	and.w	r2, r2, r0
     934:	ea03 0301 	and.w	r3, r3, r1
     938:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     93c:	1812      	adds	r2, r2, r0
     93e:	eb43 0301 	adc.w	r3, r3, r1
     942:	e9c7 2302 	strd	r2, r3, [r7, #8]
		DelayMs(10);
     946:	200a      	movs	r0, #10
     948:	f001 fe20 	bl	258c <DelayMs>
}

uint64_t EEPROM_LoadInt64(Calibration cal) {
	int index = 0;
	uint64_t result = 0;
	for (index=0; index < cal.Length; index++) {
     94c:	697b      	ldr	r3, [r7, #20]
     94e:	3301      	adds	r3, #1
     950:	617b      	str	r3, [r7, #20]
     952:	88bb      	ldrh	r3, [r7, #4]
     954:	461a      	mov	r2, r3
     956:	697b      	ldr	r3, [r7, #20]
     958:	429a      	cmp	r2, r3
     95a:	dca4      	bgt.n	8a6 <EEPROM_LoadInt64+0x1e>
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFFFFFF);
		else
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFF);
		DelayMs(10);
	}
	return result;
     95c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
     960:	4610      	mov	r0, r2
     962:	4619      	mov	r1, r3
     964:	3718      	adds	r7, #24
     966:	46bd      	mov	sp, r7
     968:	bd80      	pop	{r7, pc}
     96a:	bf00      	nop

0000096c <EEPROM_LoadString>:
	i2c_write(1,cal.StartPos + index, '\0');
	DelayMs(10);
	return 1;
}

void EEPROM_LoadString(Calibration cal,  char* str){
     96c:	b590      	push	{r4, r7, lr}
     96e:	b085      	sub	sp, #20
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
     974:	6039      	str	r1, [r7, #0]
	int index = 0;
     976:	2300      	movs	r3, #0
     978:	60fb      	str	r3, [r7, #12]
	for (index=0; index < cal.Length; index++) {
     97a:	2300      	movs	r3, #0
     97c:	60fb      	str	r3, [r7, #12]
     97e:	e01b      	b.n	9b8 <EEPROM_LoadString+0x4c>
		str[index] = i2c_read(1,cal.StartPos + index);
     980:	68fb      	ldr	r3, [r7, #12]
     982:	683a      	ldr	r2, [r7, #0]
     984:	18d4      	adds	r4, r2, r3
     986:	88fb      	ldrh	r3, [r7, #6]
     988:	b2da      	uxtb	r2, r3
     98a:	68fb      	ldr	r3, [r7, #12]
     98c:	b2db      	uxtb	r3, r3
     98e:	4413      	add	r3, r2
     990:	b2db      	uxtb	r3, r3
     992:	2001      	movs	r0, #1
     994:	4619      	mov	r1, r3
     996:	f001 f92b 	bl	1bf0 <i2c_read>
     99a:	4603      	mov	r3, r0
     99c:	7023      	strb	r3, [r4, #0]
		DelayMs(10);
     99e:	200a      	movs	r0, #10
     9a0:	f001 fdf4 	bl	258c <DelayMs>
		if (str[index] == '\0')
     9a4:	68fb      	ldr	r3, [r7, #12]
     9a6:	683a      	ldr	r2, [r7, #0]
     9a8:	4413      	add	r3, r2
     9aa:	781b      	ldrb	r3, [r3, #0]
     9ac:	2b00      	cmp	r3, #0
     9ae:	d100      	bne.n	9b2 <EEPROM_LoadString+0x46>
			break;
     9b0:	e007      	b.n	9c2 <EEPROM_LoadString+0x56>
	return 1;
}

void EEPROM_LoadString(Calibration cal,  char* str){
	int index = 0;
	for (index=0; index < cal.Length; index++) {
     9b2:	68fb      	ldr	r3, [r7, #12]
     9b4:	3301      	adds	r3, #1
     9b6:	60fb      	str	r3, [r7, #12]
     9b8:	88bb      	ldrh	r3, [r7, #4]
     9ba:	461a      	mov	r2, r3
     9bc:	68fb      	ldr	r3, [r7, #12]
     9be:	429a      	cmp	r2, r3
     9c0:	dcde      	bgt.n	980 <EEPROM_LoadString+0x14>
		str[index] = i2c_read(1,cal.StartPos + index);
		DelayMs(10);
		if (str[index] == '\0')
			break;
	}
}
     9c2:	3714      	adds	r7, #20
     9c4:	46bd      	mov	sp, r7
     9c6:	bd90      	pop	{r4, r7, pc}

000009c8 <GSM_SendAt>:
unsigned long int last_hard_reset = -1;
int connectionFailCount = 0;
#define LBS 1

uint16_t GSM_SendAt( char* cmd, char *response, int delay )
{
     9c8:	b580      	push	{r7, lr}
     9ca:	b0a0      	sub	sp, #128	; 0x80
     9cc:	af00      	add	r7, sp, #0
     9ce:	60f8      	str	r0, [r7, #12]
     9d0:	60b9      	str	r1, [r7, #8]
     9d2:	607a      	str	r2, [r7, #4]
//	}*/

	char buffer[100];
	uint16_t	len;

	sprintf( buffer, "---> %s\r\n", cmd );
     9d4:	f107 0314 	add.w	r3, r7, #20
     9d8:	4618      	mov	r0, r3
     9da:	4918      	ldr	r1, [pc, #96]	; (a3c <GSM_SendAt+0x74>)
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	f003 f955 	bl	3c8c <sprintf>
	Trace( buffer );
     9e2:	f107 0314 	add.w	r3, r7, #20
     9e6:	4618      	mov	r0, r3
     9e8:	f001 fde6 	bl	25b8 <Trace>

	int count = sprintf( buffer, "%s\r\n", cmd );
     9ec:	f107 0314 	add.w	r3, r7, #20
     9f0:	4618      	mov	r0, r3
     9f2:	4913      	ldr	r1, [pc, #76]	; (a40 <GSM_SendAt+0x78>)
     9f4:	68fa      	ldr	r2, [r7, #12]
     9f6:	f003 f949 	bl	3c8c <sprintf>
     9fa:	67f8      	str	r0, [r7, #124]	; 0x7c
	UARTSend( PORT_GSM, buffer, count );
     9fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     9fe:	f107 0214 	add.w	r2, r7, #20
     a02:	2001      	movs	r0, #1
     a04:	4611      	mov	r1, r2
     a06:	461a      	mov	r2, r3
     a08:	f002 fad4 	bl	2fb4 <UARTSend>

	DelayMs( delay );
     a0c:	687b      	ldr	r3, [r7, #4]
     a0e:	4618      	mov	r0, r3
     a10:	f001 fdbc 	bl	258c <DelayMs>

	len = ReadUart( response, PORT_GSM );
     a14:	68b8      	ldr	r0, [r7, #8]
     a16:	2101      	movs	r1, #1
     a18:	f002 fb68 	bl	30ec <ReadUart>
     a1c:	4603      	mov	r3, r0
     a1e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	response[len] = '\0';
     a22:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
     a26:	68ba      	ldr	r2, [r7, #8]
     a28:	4413      	add	r3, r2
     a2a:	2200      	movs	r2, #0
     a2c:	701a      	strb	r2, [r3, #0]

	// TraceDumpHex( response, len );

    return ( len );
     a2e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
}
     a32:	4618      	mov	r0, r3
     a34:	3780      	adds	r7, #128	; 0x80
     a36:	46bd      	mov	sp, r7
     a38:	bd80      	pop	{r7, pc}
     a3a:	bf00      	nop
     a3c:	000066c4 	.word	0x000066c4
     a40:	000066d0 	.word	0x000066d0

00000a44 <GSM_TCP_Recv>:



int16_t GSM_TCP_Recv( char* pDataBuf, int16_t maxBytes )
{
     a44:	b580      	push	{r7, lr}
     a46:	b082      	sub	sp, #8
     a48:	af00      	add	r7, sp, #0
     a4a:	6078      	str	r0, [r7, #4]
     a4c:	460b      	mov	r3, r1
     a4e:	807b      	strh	r3, [r7, #2]
	return ( GSM_SendAt( "AT+QIRD=1,1,0,1100", pDataBuf, 1000 ) );
     a50:	4806      	ldr	r0, [pc, #24]	; (a6c <GSM_TCP_Recv+0x28>)
     a52:	6879      	ldr	r1, [r7, #4]
     a54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     a58:	f7ff ffb6 	bl	9c8 <GSM_SendAt>
     a5c:	4603      	mov	r3, r0
     a5e:	b29b      	uxth	r3, r3
     a60:	b21b      	sxth	r3, r3
}
     a62:	4618      	mov	r0, r3
     a64:	3708      	adds	r7, #8
     a66:	46bd      	mov	sp, r7
     a68:	bd80      	pop	{r7, pc}
     a6a:	bf00      	nop
     a6c:	000066d8 	.word	0x000066d8

00000a70 <GSM_ConnectToTrioUpgradeServer>:
	OK*/
}


int GSM_ConnectToTrioUpgradeServer(char *ip, char *port)
{
     a70:	b580      	push	{r7, lr}
     a72:	b0e2      	sub	sp, #392	; 0x188
     a74:	af02      	add	r7, sp, #8
     a76:	1d3b      	adds	r3, r7, #4
     a78:	6018      	str	r0, [r3, #0]
     a7a:	463b      	mov	r3, r7
     a7c:	6019      	str	r1, [r3, #0]
	char buffer[200];
	char response[150];

	TraceNL("Entered GSM_ConnectToTrioUpgradeServer");
     a7e:	48bb      	ldr	r0, [pc, #748]	; (d6c <GSM_ConnectToTrioUpgradeServer+0x2fc>)
     a80:	f001 fdaa 	bl	25d8 <TraceNL>

	int init_result = GSM_InitModule();
     a84:	f000 fa7e 	bl	f84 <GSM_InitModule>
     a88:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	if (init_result == FAIL){
     a8c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
     a90:	f1b3 3fff 	cmp.w	r3, #4294967295
     a94:	d109      	bne.n	aaa <GSM_ConnectToTrioUpgradeServer+0x3a>
		GSM_ShutdownModule();
     a96:	f000 fa43 	bl	f20 <GSM_ShutdownModule>
		DelayMs(2000);
     a9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     a9e:	f001 fd75 	bl	258c <DelayMs>
		init_result = GSM_InitModule();
     aa2:	f000 fa6f 	bl	f84 <GSM_InitModule>
     aa6:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	}

	WDTFeed();
     aaa:	f002 fc27 	bl	32fc <WDTFeed>

	if(init_result == FAIL)
     aae:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
     ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
     ab6:	d102      	bne.n	abe <GSM_ConnectToTrioUpgradeServer+0x4e>
		return ( init_result );
     ab8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
     abc:	e150      	b.n	d60 <GSM_ConnectToTrioUpgradeServer+0x2f0>

	GSM_EchoOFF();
     abe:	f000 fba5 	bl	120c <GSM_EchoOFF>
	GSM_GetImei();
     ac2:	f000 fb27 	bl	1114 <GSM_GetImei>
	GSM_GetImsi(); //
     ac6:	f000 fb45 	bl	1154 <GSM_GetImsi>
	int conn_stat = GSM_GetRegStat();
     aca:	f000 facf 	bl	106c <GSM_GetRegStat>
     ace:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170

	GSM_SendAt("ATI", response, 500);
     ad2:	f107 0308 	add.w	r3, r7, #8
     ad6:	48a6      	ldr	r0, [pc, #664]	; (d70 <GSM_ConnectToTrioUpgradeServer+0x300>)
     ad8:	4619      	mov	r1, r3
     ada:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     ade:	f7ff ff73 	bl	9c8 <GSM_SendAt>
	WDTFeed();
     ae2:	f002 fc0b 	bl	32fc <WDTFeed>
	GSM_SendAt("AT+QIFGCNT=1", response, 500);
     ae6:	f107 0308 	add.w	r3, r7, #8
     aea:	48a2      	ldr	r0, [pc, #648]	; (d74 <GSM_ConnectToTrioUpgradeServer+0x304>)
     aec:	4619      	mov	r1, r3
     aee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     af2:	f7ff ff69 	bl	9c8 <GSM_SendAt>

	memset(buffer, 0, sizeof(buffer));
     af6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
     afa:	4618      	mov	r0, r3
     afc:	2100      	movs	r1, #0
     afe:	22c8      	movs	r2, #200	; 0xc8
     b00:	f002 fffc 	bl	3afc <memset>
	sprintf(buffer, "AT+QICSGP=1,\"%s\",\"%s\",\"%s\"", per_apn_val, per_apnuser_val, per_apnpass_val);
     b04:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
     b08:	4b9b      	ldr	r3, [pc, #620]	; (d78 <GSM_ConnectToTrioUpgradeServer+0x308>)
     b0a:	9300      	str	r3, [sp, #0]
     b0c:	4610      	mov	r0, r2
     b0e:	499b      	ldr	r1, [pc, #620]	; (d7c <GSM_ConnectToTrioUpgradeServer+0x30c>)
     b10:	4a9b      	ldr	r2, [pc, #620]	; (d80 <GSM_ConnectToTrioUpgradeServer+0x310>)
     b12:	4b9c      	ldr	r3, [pc, #624]	; (d84 <GSM_ConnectToTrioUpgradeServer+0x314>)
     b14:	f003 f8ba 	bl	3c8c <sprintf>

	GSM_SendAt(buffer, response, 100);
     b18:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
     b1c:	f107 0308 	add.w	r3, r7, #8
     b20:	4610      	mov	r0, r2
     b22:	4619      	mov	r1, r3
     b24:	2264      	movs	r2, #100	; 0x64
     b26:	f7ff ff4f 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QIMUX=0", response, 100);
     b2a:	f107 0308 	add.w	r3, r7, #8
     b2e:	4896      	ldr	r0, [pc, #600]	; (d88 <GSM_ConnectToTrioUpgradeServer+0x318>)
     b30:	4619      	mov	r1, r3
     b32:	2264      	movs	r2, #100	; 0x64
     b34:	f7ff ff48 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QVBATT=0,3500,0", response, 100); //Disable low power shut down and warning.
     b38:	f107 0308 	add.w	r3, r7, #8
     b3c:	4893      	ldr	r0, [pc, #588]	; (d8c <GSM_ConnectToTrioUpgradeServer+0x31c>)
     b3e:	4619      	mov	r1, r3
     b40:	2264      	movs	r2, #100	; 0x64
     b42:	f7ff ff41 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QVBATT=1,3300,0",response,100); // Disable 3.3 volt cutoff.
     b46:	f107 0308 	add.w	r3, r7, #8
     b4a:	4891      	ldr	r0, [pc, #580]	; (d90 <GSM_ConnectToTrioUpgradeServer+0x320>)
     b4c:	4619      	mov	r1, r3
     b4e:	2264      	movs	r2, #100	; 0x64
     b50:	f7ff ff3a 	bl	9c8 <GSM_SendAt>

	GSM_SendAt("AT+QISHOWRA=1", response, 100); // show remote address
     b54:	f107 0308 	add.w	r3, r7, #8
     b58:	488e      	ldr	r0, [pc, #568]	; (d94 <GSM_ConnectToTrioUpgradeServer+0x324>)
     b5a:	4619      	mov	r1, r3
     b5c:	2264      	movs	r2, #100	; 0x64
     b5e:	f7ff ff33 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QISHOWPT=1", response, 100); // show protocol type ,TCP, or UDP
     b62:	f107 0308 	add.w	r3, r7, #8
     b66:	488c      	ldr	r0, [pc, #560]	; (d98 <GSM_ConnectToTrioUpgradeServer+0x328>)
     b68:	4619      	mov	r1, r3
     b6a:	2264      	movs	r2, #100	; 0x64
     b6c:	f7ff ff2c 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QINDI=0", response, 100);    //  disable indicator
     b70:	f107 0308 	add.w	r3, r7, #8
     b74:	4889      	ldr	r0, [pc, #548]	; (d9c <GSM_ConnectToTrioUpgradeServer+0x32c>)
     b76:	4619      	mov	r1, r3
     b78:	2264      	movs	r2, #100	; 0x64
     b7a:	f7ff ff25 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QIHEAD=1", response, 100);    //
     b7e:	f107 0308 	add.w	r3, r7, #8
     b82:	4887      	ldr	r0, [pc, #540]	; (da0 <GSM_ConnectToTrioUpgradeServer+0x330>)
     b84:	4619      	mov	r1, r3
     b86:	2264      	movs	r2, #100	; 0x64
     b88:	f7ff ff1e 	bl	9c8 <GSM_SendAt>

	//GSM_SendAt("AT+QIMODE=1", response, 100); //Transparent Mode
	GSM_SendAt("AT+QIMODE=0", response, 100);   //Non Transparent Mode
     b8c:	f107 0308 	add.w	r3, r7, #8
     b90:	4884      	ldr	r0, [pc, #528]	; (da4 <GSM_ConnectToTrioUpgradeServer+0x334>)
     b92:	4619      	mov	r1, r3
     b94:	2264      	movs	r2, #100	; 0x64
     b96:	f7ff ff17 	bl	9c8 <GSM_SendAt>
	//GSM_SendAt("AT+QINDI=1", response, 100);  //Alert when data received.


	//GSM_SendAt("AT+QITCFG=3,1,512,1", response, 500); //Transparent mode configuration

	memset(buffer, 0, sizeof(buffer));
     b9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
     b9e:	4618      	mov	r0, r3
     ba0:	2100      	movs	r1, #0
     ba2:	22c8      	movs	r2, #200	; 0xc8
     ba4:	f002 ffaa 	bl	3afc <memset>
	if (isalpha(per_ip_val[0])){ //DNS
     ba8:	4b7f      	ldr	r3, [pc, #508]	; (da8 <GSM_ConnectToTrioUpgradeServer+0x338>)
     baa:	781b      	ldrb	r3, [r3, #0]
     bac:	3380      	adds	r3, #128	; 0x80
     bae:	4a7f      	ldr	r2, [pc, #508]	; (dac <GSM_ConnectToTrioUpgradeServer+0x33c>)
     bb0:	5cd3      	ldrb	r3, [r2, r3]
     bb2:	f003 0318 	and.w	r3, r3, #24
     bb6:	2b00      	cmp	r3, #0
     bb8:	d013      	beq.n	be2 <GSM_ConnectToTrioUpgradeServer+0x172>
		GSM_SendAt("AT+QIDNSIP=1", response, 100);
     bba:	f107 0308 	add.w	r3, r7, #8
     bbe:	487c      	ldr	r0, [pc, #496]	; (db0 <GSM_ConnectToTrioUpgradeServer+0x340>)
     bc0:	4619      	mov	r1, r3
     bc2:	2264      	movs	r2, #100	; 0x64
     bc4:	f7ff ff00 	bl	9c8 <GSM_SendAt>
		TraceDumpHex( response, strlen(response) );
     bc8:	f107 0308 	add.w	r3, r7, #8
     bcc:	4618      	mov	r0, r3
     bce:	f004 fcc3 	bl	5558 <strlen>
     bd2:	4602      	mov	r2, r0
     bd4:	f107 0308 	add.w	r3, r7, #8
     bd8:	4618      	mov	r0, r3
     bda:	4611      	mov	r1, r2
     bdc:	f001 fd3e 	bl	265c <TraceDumpHex>
     be0:	e006      	b.n	bf0 <GSM_ConnectToTrioUpgradeServer+0x180>
	}else
		GSM_SendAt("AT+QIDNSIP=0", response, 100);
     be2:	f107 0308 	add.w	r3, r7, #8
     be6:	4873      	ldr	r0, [pc, #460]	; (db4 <GSM_ConnectToTrioUpgradeServer+0x344>)
     be8:	4619      	mov	r1, r3
     bea:	2264      	movs	r2, #100	; 0x64
     bec:	f7ff feec 	bl	9c8 <GSM_SendAt>


	////Low Power/////
	//GSM_SendAt("AT+QGPCLASS=8", response, 100); // 1 Tx timeslots
	GSM_SendAt("AT+QGPCLASS=12", response, 100); // 1 Tx timeslots
     bf0:	f107 0308 	add.w	r3, r7, #8
     bf4:	4870      	ldr	r0, [pc, #448]	; (db8 <GSM_ConnectToTrioUpgradeServer+0x348>)
     bf6:	4619      	mov	r1, r3
     bf8:	2264      	movs	r2, #100	; 0x64
     bfa:	f7ff fee5 	bl	9c8 <GSM_SendAt>
//	TraceDumpHex( response, strlen(response) );
	//GSM_SendAt("AT+CDETXPW=900,1,255,2", response, 100);
	//////////////////
	GSM_SendAt("AT",response,100);
     bfe:	f107 0308 	add.w	r3, r7, #8
     c02:	486e      	ldr	r0, [pc, #440]	; (dbc <GSM_ConnectToTrioUpgradeServer+0x34c>)
     c04:	4619      	mov	r1, r3
     c06:	2264      	movs	r2, #100	; 0x64
     c08:	f7ff fede 	bl	9c8 <GSM_SendAt>

	int cmd_count = sprintf(buffer, "AT+QIOPEN=\"TCP\",\"%s\",%d", static_update_server_ip, 5007L);
     c0c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
     c10:	4618      	mov	r0, r3
     c12:	496b      	ldr	r1, [pc, #428]	; (dc0 <GSM_ConnectToTrioUpgradeServer+0x350>)
     c14:	4a6b      	ldr	r2, [pc, #428]	; (dc4 <GSM_ConnectToTrioUpgradeServer+0x354>)
     c16:	f241 338f 	movw	r3, #5007	; 0x138f
     c1a:	f003 f837 	bl	3c8c <sprintf>
     c1e:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
	//GSM_SendAt("AT+QIOPEN=\"TCP\",\"178.63.30.80\",6081", response, 2000);

	GSM_SendAt( buffer, response, 100);
     c22:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
     c26:	f107 0308 	add.w	r3, r7, #8
     c2a:	4610      	mov	r0, r2
     c2c:	4619      	mov	r1, r3
     c2e:	2264      	movs	r2, #100	; 0x64
     c30:	f7ff feca 	bl	9c8 <GSM_SendAt>
	//UARTSend(PORT_GSM, buffer, cmd_count);

	//UARTSend(PORT_TRACE, buffer, cmd_count);
	int server_conn_count = 0;
     c34:	2300      	movs	r3, #0
     c36:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	int server_conn_result = FAIL;
     c3a:	f04f 33ff 	mov.w	r3, #4294967295
     c3e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

	while(1){
		int recLen = ReadUart(response, PORT_GSM);
     c42:	f107 0308 	add.w	r3, r7, #8
     c46:	4618      	mov	r0, r3
     c48:	2101      	movs	r1, #1
     c4a:	f002 fa4f 	bl	30ec <ReadUart>
     c4e:	4603      	mov	r3, r0
     c50:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		if( recLen )
     c54:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
     c58:	2b00      	cmp	r3, #0
     c5a:	d026      	beq.n	caa <GSM_ConnectToTrioUpgradeServer+0x23a>
		{
//			TraceDumpHex( response, strlen(response) );
			if (strstr(response,"FAIL") != NULL/* || strstr(response,"ERROR") != NULL*/){ //ERROR is about format ignore
     c5c:	f107 0308 	add.w	r3, r7, #8
     c60:	4618      	mov	r0, r3
     c62:	4959      	ldr	r1, [pc, #356]	; (dc8 <GSM_ConnectToTrioUpgradeServer+0x358>)
     c64:	f004 fcc9 	bl	55fa <strstr>
     c68:	4603      	mov	r3, r0
     c6a:	2b00      	cmp	r3, #0
     c6c:	d000      	beq.n	c70 <GSM_ConnectToTrioUpgradeServer+0x200>
				//UARTSend(PORT_GSM, buffer, cmd_count); //Testing AT to server problem
				break;
     c6e:	e02d      	b.n	ccc <GSM_ConnectToTrioUpgradeServer+0x25c>
			}
			else if (strstr(response,"CONNECT OK") != NULL || strstr(response,"ALREADY CONNECT") != NULL){
     c70:	f107 0308 	add.w	r3, r7, #8
     c74:	4618      	mov	r0, r3
     c76:	4955      	ldr	r1, [pc, #340]	; (dcc <GSM_ConnectToTrioUpgradeServer+0x35c>)
     c78:	f004 fcbf 	bl	55fa <strstr>
     c7c:	4603      	mov	r3, r0
     c7e:	2b00      	cmp	r3, #0
     c80:	d108      	bne.n	c94 <GSM_ConnectToTrioUpgradeServer+0x224>
     c82:	f107 0308 	add.w	r3, r7, #8
     c86:	4618      	mov	r0, r3
     c88:	4951      	ldr	r1, [pc, #324]	; (dd0 <GSM_ConnectToTrioUpgradeServer+0x360>)
     c8a:	f004 fcb6 	bl	55fa <strstr>
     c8e:	4603      	mov	r3, r0
     c90:	2b00      	cmp	r3, #0
     c92:	d00a      	beq.n	caa <GSM_ConnectToTrioUpgradeServer+0x23a>
				//UARTSend( PORT_TRACE, response, cmd_count );
				TraceDumpHex( response, recLen );
     c94:	f107 0308 	add.w	r3, r7, #8
     c98:	4618      	mov	r0, r3
     c9a:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
     c9e:	f001 fcdd 	bl	265c <TraceDumpHex>
				server_conn_result = SUCCESS;
     ca2:	2300      	movs	r3, #0
     ca4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
				break;
     ca8:	e010      	b.n	ccc <GSM_ConnectToTrioUpgradeServer+0x25c>
			}
		}

		WDTFeed();
     caa:	f002 fb27 	bl	32fc <WDTFeed>
		DelayMs(300);
     cae:	f44f 7096 	mov.w	r0, #300	; 0x12c
     cb2:	f001 fc6b 	bl	258c <DelayMs>
		server_conn_count++;
     cb6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
     cba:	3301      	adds	r3, #1
     cbc:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
		if (server_conn_count > 30)
     cc0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
     cc4:	2b1e      	cmp	r3, #30
     cc6:	dd00      	ble.n	cca <GSM_ConnectToTrioUpgradeServer+0x25a>
			break;
     cc8:	e000      	b.n	ccc <GSM_ConnectToTrioUpgradeServer+0x25c>
	}
     cca:	e7ba      	b.n	c42 <GSM_ConnectToTrioUpgradeServer+0x1d2>

	//GSM_SendAt(buffer, response, 2000);
	if (server_conn_result == SUCCESS) {
     ccc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
     cd0:	2b00      	cmp	r3, #0
     cd2:	d107      	bne.n	ce4 <GSM_ConnectToTrioUpgradeServer+0x274>
		TraceNL("Connected to the server.");
     cd4:	483f      	ldr	r0, [pc, #252]	; (dd4 <GSM_ConnectToTrioUpgradeServer+0x364>)
     cd6:	f001 fc7f 	bl	25d8 <TraceNL>
		connectionFailCount = 0;
     cda:	4b3f      	ldr	r3, [pc, #252]	; (dd8 <GSM_ConnectToTrioUpgradeServer+0x368>)
     cdc:	2200      	movs	r2, #0
     cde:	601a      	str	r2, [r3, #0]
		return SUCCESS;
     ce0:	2300      	movs	r3, #0
     ce2:	e03d      	b.n	d60 <GSM_ConnectToTrioUpgradeServer+0x2f0>
	}

	TraceNL("QIOPEN failed.");
     ce4:	483d      	ldr	r0, [pc, #244]	; (ddc <GSM_ConnectToTrioUpgradeServer+0x36c>)
     ce6:	f001 fc77 	bl	25d8 <TraceNL>
	connectionFailCount++;
     cea:	4b3b      	ldr	r3, [pc, #236]	; (dd8 <GSM_ConnectToTrioUpgradeServer+0x368>)
     cec:	681b      	ldr	r3, [r3, #0]
     cee:	3301      	adds	r3, #1
     cf0:	4a39      	ldr	r2, [pc, #228]	; (dd8 <GSM_ConnectToTrioUpgradeServer+0x368>)
     cf2:	6013      	str	r3, [r2, #0]
	if (connectionFailCount > 40 && connectionFailCount % 200 == 0) //10 minutes.
     cf4:	4b38      	ldr	r3, [pc, #224]	; (dd8 <GSM_ConnectToTrioUpgradeServer+0x368>)
     cf6:	681b      	ldr	r3, [r3, #0]
     cf8:	2b28      	cmp	r3, #40	; 0x28
     cfa:	dd17      	ble.n	d2c <GSM_ConnectToTrioUpgradeServer+0x2bc>
     cfc:	4b36      	ldr	r3, [pc, #216]	; (dd8 <GSM_ConnectToTrioUpgradeServer+0x368>)
     cfe:	681a      	ldr	r2, [r3, #0]
     d00:	4b37      	ldr	r3, [pc, #220]	; (de0 <GSM_ConnectToTrioUpgradeServer+0x370>)
     d02:	fb83 1302 	smull	r1, r3, r3, r2
     d06:	1199      	asrs	r1, r3, #6
     d08:	17d3      	asrs	r3, r2, #31
     d0a:	1acb      	subs	r3, r1, r3
     d0c:	21c8      	movs	r1, #200	; 0xc8
     d0e:	fb01 f303 	mul.w	r3, r1, r3
     d12:	1ad3      	subs	r3, r2, r3
     d14:	2b00      	cmp	r3, #0
     d16:	d109      	bne.n	d2c <GSM_ConnectToTrioUpgradeServer+0x2bc>
	{
		TraceNL("Hard resetting module.");
     d18:	4832      	ldr	r0, [pc, #200]	; (de4 <GSM_ConnectToTrioUpgradeServer+0x374>)
     d1a:	f001 fc5d 	bl	25d8 <TraceNL>
		GSM_InitModule(); //Restarts and initializes module.
     d1e:	f000 f931 	bl	f84 <GSM_InitModule>
		last_hard_reset = STT_Value;
     d22:	4b31      	ldr	r3, [pc, #196]	; (de8 <GSM_ConnectToTrioUpgradeServer+0x378>)
     d24:	681b      	ldr	r3, [r3, #0]
     d26:	4a31      	ldr	r2, [pc, #196]	; (dec <GSM_ConnectToTrioUpgradeServer+0x37c>)
     d28:	6013      	str	r3, [r2, #0]
     d2a:	e017      	b.n	d5c <GSM_ConnectToTrioUpgradeServer+0x2ec>
	}
	else if (connectionFailCount > 30 && connectionFailCount % 20 == 0){ //100 in production
     d2c:	4b2a      	ldr	r3, [pc, #168]	; (dd8 <GSM_ConnectToTrioUpgradeServer+0x368>)
     d2e:	681b      	ldr	r3, [r3, #0]
     d30:	2b1e      	cmp	r3, #30
     d32:	dd13      	ble.n	d5c <GSM_ConnectToTrioUpgradeServer+0x2ec>
     d34:	4b28      	ldr	r3, [pc, #160]	; (dd8 <GSM_ConnectToTrioUpgradeServer+0x368>)
     d36:	6819      	ldr	r1, [r3, #0]
     d38:	4b2d      	ldr	r3, [pc, #180]	; (df0 <GSM_ConnectToTrioUpgradeServer+0x380>)
     d3a:	fb83 2301 	smull	r2, r3, r3, r1
     d3e:	10da      	asrs	r2, r3, #3
     d40:	17cb      	asrs	r3, r1, #31
     d42:	1ad2      	subs	r2, r2, r3
     d44:	4613      	mov	r3, r2
     d46:	009b      	lsls	r3, r3, #2
     d48:	4413      	add	r3, r2
     d4a:	009b      	lsls	r3, r3, #2
     d4c:	1aca      	subs	r2, r1, r3
     d4e:	2a00      	cmp	r2, #0
     d50:	d104      	bne.n	d5c <GSM_ConnectToTrioUpgradeServer+0x2ec>
		TraceNL("connectionFailCount > 40 restarting module.");
     d52:	4828      	ldr	r0, [pc, #160]	; (df4 <GSM_ConnectToTrioUpgradeServer+0x384>)
     d54:	f001 fc40 	bl	25d8 <TraceNL>
		GSM_InitModule(); //Restarts and initializes module.
     d58:	f000 f914 	bl	f84 <GSM_InitModule>
	}
	return FAIL;
     d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
     d60:	4618      	mov	r0, r3
     d62:	f507 77c0 	add.w	r7, r7, #384	; 0x180
     d66:	46bd      	mov	sp, r7
     d68:	bd80      	pop	{r7, pc}
     d6a:	bf00      	nop
     d6c:	0000677c 	.word	0x0000677c
     d70:	000067a4 	.word	0x000067a4
     d74:	000067a8 	.word	0x000067a8
     d78:	10000d48 	.word	0x10000d48
     d7c:	000067b8 	.word	0x000067b8
     d80:	10000d64 	.word	0x10000d64
     d84:	10000cf8 	.word	0x10000cf8
     d88:	000067d4 	.word	0x000067d4
     d8c:	000067e0 	.word	0x000067e0
     d90:	000067f4 	.word	0x000067f4
     d94:	00006808 	.word	0x00006808
     d98:	00006818 	.word	0x00006818
     d9c:	00006828 	.word	0x00006828
     da0:	00006834 	.word	0x00006834
     da4:	00006840 	.word	0x00006840
     da8:	10000ca8 	.word	0x10000ca8
     dac:	00007508 	.word	0x00007508
     db0:	0000684c 	.word	0x0000684c
     db4:	0000685c 	.word	0x0000685c
     db8:	0000686c 	.word	0x0000686c
     dbc:	0000674c 	.word	0x0000674c
     dc0:	0000687c 	.word	0x0000687c
     dc4:	10000000 	.word	0x10000000
     dc8:	00006894 	.word	0x00006894
     dcc:	0000689c 	.word	0x0000689c
     dd0:	000068a8 	.word	0x000068a8
     dd4:	000068b8 	.word	0x000068b8
     dd8:	10000020 	.word	0x10000020
     ddc:	000068d4 	.word	0x000068d4
     de0:	51eb851f 	.word	0x51eb851f
     de4:	000068e4 	.word	0x000068e4
     de8:	10000d1c 	.word	0x10000d1c
     dec:	10000010 	.word	0x10000010
     df0:	66666667 	.word	0x66666667
     df4:	000068fc 	.word	0x000068fc

00000df8 <GSM_TCP_Send>:
** Returned value:	greater than 0 to indicate number of characters transferred
**
**                  a value less than 0 is error code, tobe defined later.
******************************************************************************/
int GSM_TCP_Send( unsigned char* msg, uint16_t len )
{
     df8:	b580      	push	{r7, lr}
     dfa:	b0d0      	sub	sp, #320	; 0x140
     dfc:	af00      	add	r7, sp, #0
     dfe:	1d3b      	adds	r3, r7, #4
     e00:	6018      	str	r0, [r3, #0]
     e02:	460a      	mov	r2, r1
     e04:	1cbb      	adds	r3, r7, #2
     e06:	801a      	strh	r2, [r3, #0]
	char response[200];
	char buffer[100];

	TraceNL("Entered GSM_TCP_Send");
     e08:	4836      	ldr	r0, [pc, #216]	; (ee4 <GSM_TCP_Send+0xec>)
     e0a:	f001 fbe5 	bl	25d8 <TraceNL>

	GSM_SendAt( "AT", response, 100 ); //Empty buffer
     e0e:	f107 0370 	add.w	r3, r7, #112	; 0x70
     e12:	4835      	ldr	r0, [pc, #212]	; (ee8 <GSM_TCP_Send+0xf0>)
     e14:	4619      	mov	r1, r3
     e16:	2264      	movs	r2, #100	; 0x64
     e18:	f7ff fdd6 	bl	9c8 <GSM_SendAt>

	int count = sprintf( buffer, "AT+QISEND=%d", len );
     e1c:	1cbb      	adds	r3, r7, #2
     e1e:	881b      	ldrh	r3, [r3, #0]
     e20:	f107 020c 	add.w	r2, r7, #12
     e24:	4610      	mov	r0, r2
     e26:	4931      	ldr	r1, [pc, #196]	; (eec <GSM_TCP_Send+0xf4>)
     e28:	461a      	mov	r2, r3
     e2a:	f002 ff2f 	bl	3c8c <sprintf>
     e2e:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	GSM_SendAt( buffer, response, 100 );
     e32:	f107 020c 	add.w	r2, r7, #12
     e36:	f107 0370 	add.w	r3, r7, #112	; 0x70
     e3a:	4610      	mov	r0, r2
     e3c:	4619      	mov	r1, r3
     e3e:	2264      	movs	r2, #100	; 0x64
     e40:	f7ff fdc2 	bl	9c8 <GSM_SendAt>

	if( strchr(response, '>') != NULL )
     e44:	f107 0370 	add.w	r3, r7, #112	; 0x70
     e48:	4618      	mov	r0, r3
     e4a:	213e      	movs	r1, #62	; 0x3e
     e4c:	f004 fb56 	bl	54fc <strchr>
     e50:	4603      	mov	r3, r0
     e52:	2b00      	cmp	r3, #0
     e54:	d03b      	beq.n	ece <GSM_TCP_Send+0xd6>
	{
		UARTSend( PORT_GSM, msg, len );
     e56:	1cbb      	adds	r3, r7, #2
     e58:	881a      	ldrh	r2, [r3, #0]
     e5a:	1d3b      	adds	r3, r7, #4
     e5c:	2001      	movs	r0, #1
     e5e:	6819      	ldr	r1, [r3, #0]
     e60:	f002 f8a8 	bl	2fb4 <UARTSend>

		DelayMs( 300 );
     e64:	f44f 7096 	mov.w	r0, #300	; 0x12c
     e68:	f001 fb90 	bl	258c <DelayMs>

		ReadUart( response, PORT_GSM );
     e6c:	f107 0370 	add.w	r3, r7, #112	; 0x70
     e70:	4618      	mov	r0, r3
     e72:	2101      	movs	r1, #1
     e74:	f002 f93a 	bl	30ec <ReadUart>
		int sendOkCheck = 0;
     e78:	2300      	movs	r3, #0
     e7a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

		while( strstr( response, "SEND OK" ) == NULL )
     e7e:	e017      	b.n	eb0 <GSM_TCP_Send+0xb8>
		{
			TraceNL( "Send OK whiling.." );
     e80:	481b      	ldr	r0, [pc, #108]	; (ef0 <GSM_TCP_Send+0xf8>)
     e82:	f001 fba9 	bl	25d8 <TraceNL>
			if ( sendOkCheck > 20 )
     e86:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
     e8a:	2b14      	cmp	r3, #20
     e8c:	dd02      	ble.n	e94 <GSM_TCP_Send+0x9c>
				return ( FAIL );
     e8e:	f04f 33ff 	mov.w	r3, #4294967295
     e92:	e021      	b.n	ed8 <GSM_TCP_Send+0xe0>

			DelayMs( 100 );
     e94:	2064      	movs	r0, #100	; 0x64
     e96:	f001 fb79 	bl	258c <DelayMs>
			ReadUart( response, PORT_GSM );
     e9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
     e9e:	4618      	mov	r0, r3
     ea0:	2101      	movs	r1, #1
     ea2:	f002 f923 	bl	30ec <ReadUart>

			sendOkCheck++;
     ea6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
     eaa:	3301      	adds	r3, #1
     eac:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		DelayMs( 300 );

		ReadUart( response, PORT_GSM );
		int sendOkCheck = 0;

		while( strstr( response, "SEND OK" ) == NULL )
     eb0:	f107 0370 	add.w	r3, r7, #112	; 0x70
     eb4:	4618      	mov	r0, r3
     eb6:	490f      	ldr	r1, [pc, #60]	; (ef4 <GSM_TCP_Send+0xfc>)
     eb8:	f004 fb9f 	bl	55fa <strstr>
     ebc:	4603      	mov	r3, r0
     ebe:	2b00      	cmp	r3, #0
     ec0:	d0de      	beq.n	e80 <GSM_TCP_Send+0x88>
			DelayMs( 100 );
			ReadUart( response, PORT_GSM );

			sendOkCheck++;
		}
		TraceNL( "Data sent." );
     ec2:	480d      	ldr	r0, [pc, #52]	; (ef8 <GSM_TCP_Send+0x100>)
     ec4:	f001 fb88 	bl	25d8 <TraceNL>
		return ( len );
     ec8:	1cbb      	adds	r3, r7, #2
     eca:	881b      	ldrh	r3, [r3, #0]
     ecc:	e004      	b.n	ed8 <GSM_TCP_Send+0xe0>
	}
	TraceNL( "Data fail." );
     ece:	480b      	ldr	r0, [pc, #44]	; (efc <GSM_TCP_Send+0x104>)
     ed0:	f001 fb82 	bl	25d8 <TraceNL>
	return ( FAIL );
     ed4:	f04f 33ff 	mov.w	r3, #4294967295
}
     ed8:	4618      	mov	r0, r3
     eda:	f507 77a0 	add.w	r7, r7, #320	; 0x140
     ede:	46bd      	mov	sp, r7
     ee0:	bd80      	pop	{r7, pc}
     ee2:	bf00      	nop
     ee4:	00006a50 	.word	0x00006a50
     ee8:	0000674c 	.word	0x0000674c
     eec:	000069dc 	.word	0x000069dc
     ef0:	000069ec 	.word	0x000069ec
     ef4:	00006a00 	.word	0x00006a00
     ef8:	00006a08 	.word	0x00006a08
     efc:	00006a1c 	.word	0x00006a1c

00000f00 <GSM_TogglePwrKey>:

void GSM_TogglePwrKey() {
     f00:	b580      	push	{r7, lr}
     f02:	af00      	add	r7, sp, #0
	//Toggle PWR_KEY
	LPC_GPIO2->FIOSET = (1 << 3);
     f04:	4b05      	ldr	r3, [pc, #20]	; (f1c <GSM_TogglePwrKey+0x1c>)
     f06:	2208      	movs	r2, #8
     f08:	619a      	str	r2, [r3, #24]
	DelayMs(2000);
     f0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     f0e:	f001 fb3d 	bl	258c <DelayMs>
	LPC_GPIO2->FIOCLR = (1 << 3);
     f12:	4b02      	ldr	r3, [pc, #8]	; (f1c <GSM_TogglePwrKey+0x1c>)
     f14:	2208      	movs	r2, #8
     f16:	61da      	str	r2, [r3, #28]
}
     f18:	bd80      	pop	{r7, pc}
     f1a:	bf00      	nop
     f1c:	2009c040 	.word	0x2009c040

00000f20 <GSM_ShutdownModule>:

int GSM_ShutdownModule() {
     f20:	b580      	push	{r7, lr}
     f22:	b09a      	sub	sp, #104	; 0x68
     f24:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+QPOWD=0", response, 500);
     f26:	1d3b      	adds	r3, r7, #4
     f28:	4813      	ldr	r0, [pc, #76]	; (f78 <GSM_ShutdownModule+0x58>)
     f2a:	4619      	mov	r1, r3
     f2c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     f30:	f7ff fd4a 	bl	9c8 <GSM_SendAt>
	DelayMs(1000);
     f34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     f38:	f001 fb28 	bl	258c <DelayMs>
	memset(response, 0, sizeof(response));
     f3c:	1d3b      	adds	r3, r7, #4
     f3e:	4618      	mov	r0, r3
     f40:	2100      	movs	r1, #0
     f42:	2264      	movs	r2, #100	; 0x64
     f44:	f002 fdda 	bl	3afc <memset>
	GSM_SendAt("AT", response, 500);
     f48:	1d3b      	adds	r3, r7, #4
     f4a:	480c      	ldr	r0, [pc, #48]	; (f7c <GSM_ShutdownModule+0x5c>)
     f4c:	4619      	mov	r1, r3
     f4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     f52:	f7ff fd39 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "OK") == NULL) {
     f56:	1d3b      	adds	r3, r7, #4
     f58:	4618      	mov	r0, r3
     f5a:	4909      	ldr	r1, [pc, #36]	; (f80 <GSM_ShutdownModule+0x60>)
     f5c:	f004 fb4d 	bl	55fa <strstr>
     f60:	4603      	mov	r3, r0
     f62:	2b00      	cmp	r3, #0
     f64:	d101      	bne.n	f6a <GSM_ShutdownModule+0x4a>
		return ( SUCCESS );
     f66:	2300      	movs	r3, #0
     f68:	e001      	b.n	f6e <GSM_ShutdownModule+0x4e>
	}
	return ( FAIL );
     f6a:	f04f 33ff 	mov.w	r3, #4294967295
}
     f6e:	4618      	mov	r0, r3
     f70:	3768      	adds	r7, #104	; 0x68
     f72:	46bd      	mov	sp, r7
     f74:	bd80      	pop	{r7, pc}
     f76:	bf00      	nop
     f78:	00006a68 	.word	0x00006a68
     f7c:	0000674c 	.word	0x0000674c
     f80:	00006a74 	.word	0x00006a74

00000f84 <GSM_InitModule>:
	LPC_GPIO2->FIOCLR = (1 << 2);

	return ( SUCCESS );
}

int GSM_InitModule() {
     f84:	b580      	push	{r7, lr}
     f86:	b09c      	sub	sp, #112	; 0x70
     f88:	af00      	add	r7, sp, #0
	//Unset EMERG
	char response[100];
	LPC_GPIO2->FIOCLR = (1 << 2);
     f8a:	4b30      	ldr	r3, [pc, #192]	; (104c <GSM_InitModule+0xc8>)
     f8c:	2204      	movs	r2, #4
     f8e:	61da      	str	r2, [r3, #28]
	DelayMs(1000);
     f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     f94:	f001 fafa 	bl	258c <DelayMs>
	GSM_TogglePwrKey();
     f98:	f7ff ffb2 	bl	f00 <GSM_TogglePwrKey>
	int i = 0;
     f9c:	2300      	movs	r3, #0
     f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (i = 0; i < 20; i++) {
     fa0:	2300      	movs	r3, #0
     fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
     fa4:	e048      	b.n	1038 <GSM_InitModule+0xb4>
		GSM_SendAt("AT", response, 500);
     fa6:	1d3b      	adds	r3, r7, #4
     fa8:	4829      	ldr	r0, [pc, #164]	; (1050 <GSM_InitModule+0xcc>)
     faa:	4619      	mov	r1, r3
     fac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     fb0:	f7ff fd0a 	bl	9c8 <GSM_SendAt>

//		TraceDumpHex( response, strlen(response) );
		if (strstr(response, "OK") != NULL) {
     fb4:	1d3b      	adds	r3, r7, #4
     fb6:	4618      	mov	r0, r3
     fb8:	4926      	ldr	r1, [pc, #152]	; (1054 <GSM_InitModule+0xd0>)
     fba:	f004 fb1e 	bl	55fa <strstr>
     fbe:	4603      	mov	r3, r0
     fc0:	2b00      	cmp	r3, #0
     fc2:	d036      	beq.n	1032 <GSM_InitModule+0xae>

//			GSM_Set1152008N1( );
//
//			UARTInit(PORT_GSM, 115200);
			GSM_SendAt("AT+CMEE=2", response, 500);
     fc4:	1d3b      	adds	r3, r7, #4
     fc6:	4824      	ldr	r0, [pc, #144]	; (1058 <GSM_InitModule+0xd4>)
     fc8:	4619      	mov	r1, r3
     fca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     fce:	f7ff fcfb 	bl	9c8 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			DelayMs(500);
     fd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     fd6:	f001 fad9 	bl	258c <DelayMs>
			//Init SMS
			//SMS Text Mode
			GSM_SendAt("AT+CMGF=1", response, 500);
     fda:	1d3b      	adds	r3, r7, #4
     fdc:	481f      	ldr	r0, [pc, #124]	; (105c <GSM_InitModule+0xd8>)
     fde:	4619      	mov	r1, r3
     fe0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     fe4:	f7ff fcf0 	bl	9c8 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			//Initialize SMS, if not new messages does not cause +CMTI
			GSM_SendAt("AT+CNMI=2,1,0,0,0", response, 500);
     fe8:	1d3b      	adds	r3, r7, #4
     fea:	481d      	ldr	r0, [pc, #116]	; (1060 <GSM_InitModule+0xdc>)
     fec:	4619      	mov	r1, r3
     fee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     ff2:	f7ff fce9 	bl	9c8 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			int sim_check = FAIL;
     ff6:	f04f 33ff 	mov.w	r3, #4294967295
     ffa:	66bb      	str	r3, [r7, #104]	; 0x68
			for(;i<40;i++){
     ffc:	e014      	b.n	1028 <GSM_InitModule+0xa4>
				sim_check = GSM_CheckSimCard();
     ffe:	f000 f867 	bl	10d0 <GSM_CheckSimCard>
    1002:	66b8      	str	r0, [r7, #104]	; 0x68
				if (sim_check == SUCCESS){
    1004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1006:	2b00      	cmp	r3, #0
    1008:	d103      	bne.n	1012 <GSM_InitModule+0x8e>
					TraceNL("Sim card ready..\r");
    100a:	4816      	ldr	r0, [pc, #88]	; (1064 <GSM_InitModule+0xe0>)
    100c:	f001 fae4 	bl	25d8 <TraceNL>
					break;
    1010:	e00d      	b.n	102e <GSM_InitModule+0xaa>
				}
				else
					TraceNL("Sim not ready!\r");
    1012:	4815      	ldr	r0, [pc, #84]	; (1068 <GSM_InitModule+0xe4>)
    1014:	f001 fae0 	bl	25d8 <TraceNL>
				DelayMs(200);
    1018:	20c8      	movs	r0, #200	; 0xc8
    101a:	f001 fab7 	bl	258c <DelayMs>
				WDTFeed();
    101e:	f002 f96d 	bl	32fc <WDTFeed>
//			TraceDumpHex( response, strlen(response) );
			//Initialize SMS, if not new messages does not cause +CMTI
			GSM_SendAt("AT+CNMI=2,1,0,0,0", response, 500);
//			TraceDumpHex( response, strlen(response) );
			int sim_check = FAIL;
			for(;i<40;i++){
    1022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1024:	3301      	adds	r3, #1
    1026:	66fb      	str	r3, [r7, #108]	; 0x6c
    1028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    102a:	2b27      	cmp	r3, #39	; 0x27
    102c:	dde7      	ble.n	ffe <GSM_InitModule+0x7a>
				else
					TraceNL("Sim not ready!\r");
				DelayMs(200);
				WDTFeed();
			}
			return sim_check;
    102e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1030:	e007      	b.n	1042 <GSM_InitModule+0xbe>
	char response[100];
	LPC_GPIO2->FIOCLR = (1 << 2);
	DelayMs(1000);
	GSM_TogglePwrKey();
	int i = 0;
	for (i = 0; i < 20; i++) {
    1032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1034:	3301      	adds	r3, #1
    1036:	66fb      	str	r3, [r7, #108]	; 0x6c
    1038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    103a:	2b13      	cmp	r3, #19
    103c:	ddb3      	ble.n	fa6 <GSM_InitModule+0x22>
				WDTFeed();
			}
			return sim_check;
		}
	}
	return FAIL;
    103e:	f04f 33ff 	mov.w	r3, #4294967295
}
    1042:	4618      	mov	r0, r3
    1044:	3770      	adds	r7, #112	; 0x70
    1046:	46bd      	mov	sp, r7
    1048:	bd80      	pop	{r7, pc}
    104a:	bf00      	nop
    104c:	2009c040 	.word	0x2009c040
    1050:	0000674c 	.word	0x0000674c
    1054:	00006a74 	.word	0x00006a74
    1058:	00006a78 	.word	0x00006a78
    105c:	00006a84 	.word	0x00006a84
    1060:	00006a90 	.word	0x00006a90
    1064:	00006aa4 	.word	0x00006aa4
    1068:	00006ab8 	.word	0x00006ab8

0000106c <GSM_GetRegStat>:
	UTIL_GetPartOfString(response, csq_str, ':', ',', 0, 0);
	return atoi(csq_str);
}


int GSM_GetRegStat(){
    106c:	b580      	push	{r7, lr}
    106e:	b09e      	sub	sp, #120	; 0x78
    1070:	af00      	add	r7, sp, #0
	char csq_str[20];
	char response[100];
	GSM_SendAt("AT+CREG?", response, 100);
    1072:	463b      	mov	r3, r7
    1074:	4812      	ldr	r0, [pc, #72]	; (10c0 <GSM_GetRegStat+0x54>)
    1076:	4619      	mov	r1, r3
    1078:	2264      	movs	r2, #100	; 0x64
    107a:	f7ff fca5 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "+CREG") != NULL && ((strstr(response, ",5") != NULL) || (strstr(response, ",1") != NULL))) {
    107e:	463b      	mov	r3, r7
    1080:	4618      	mov	r0, r3
    1082:	4910      	ldr	r1, [pc, #64]	; (10c4 <GSM_GetRegStat+0x58>)
    1084:	f004 fab9 	bl	55fa <strstr>
    1088:	4603      	mov	r3, r0
    108a:	2b00      	cmp	r3, #0
    108c:	d011      	beq.n	10b2 <GSM_GetRegStat+0x46>
    108e:	463b      	mov	r3, r7
    1090:	4618      	mov	r0, r3
    1092:	490d      	ldr	r1, [pc, #52]	; (10c8 <GSM_GetRegStat+0x5c>)
    1094:	f004 fab1 	bl	55fa <strstr>
    1098:	4603      	mov	r3, r0
    109a:	2b00      	cmp	r3, #0
    109c:	d107      	bne.n	10ae <GSM_GetRegStat+0x42>
    109e:	463b      	mov	r3, r7
    10a0:	4618      	mov	r0, r3
    10a2:	490a      	ldr	r1, [pc, #40]	; (10cc <GSM_GetRegStat+0x60>)
    10a4:	f004 faa9 	bl	55fa <strstr>
    10a8:	4603      	mov	r3, r0
    10aa:	2b00      	cmp	r3, #0
    10ac:	d001      	beq.n	10b2 <GSM_GetRegStat+0x46>
		return SUCCESS;
    10ae:	2300      	movs	r3, #0
    10b0:	e001      	b.n	10b6 <GSM_GetRegStat+0x4a>
	}
	return FAIL;
    10b2:	f04f 33ff 	mov.w	r3, #4294967295
}
    10b6:	4618      	mov	r0, r3
    10b8:	3778      	adds	r7, #120	; 0x78
    10ba:	46bd      	mov	sp, r7
    10bc:	bd80      	pop	{r7, pc}
    10be:	bf00      	nop
    10c0:	00006ad0 	.word	0x00006ad0
    10c4:	00006adc 	.word	0x00006adc
    10c8:	00006ae4 	.word	0x00006ae4
    10cc:	00006ae8 	.word	0x00006ae8

000010d0 <GSM_CheckSimCard>:
	return FAIL;
}



int GSM_CheckSimCard() {
    10d0:	b580      	push	{r7, lr}
    10d2:	b09a      	sub	sp, #104	; 0x68
    10d4:	af00      	add	r7, sp, #0
	TraceNL("Entered check sim card.");
    10d6:	480c      	ldr	r0, [pc, #48]	; (1108 <GSM_CheckSimCard+0x38>)
    10d8:	f001 fa7e 	bl	25d8 <TraceNL>
	char response[100];
	GSM_SendAt("AT+CPIN?", response, 250);
    10dc:	1d3b      	adds	r3, r7, #4
    10de:	480b      	ldr	r0, [pc, #44]	; (110c <GSM_CheckSimCard+0x3c>)
    10e0:	4619      	mov	r1, r3
    10e2:	22fa      	movs	r2, #250	; 0xfa
    10e4:	f7ff fc70 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "READY") != NULL)
    10e8:	1d3b      	adds	r3, r7, #4
    10ea:	4618      	mov	r0, r3
    10ec:	4908      	ldr	r1, [pc, #32]	; (1110 <GSM_CheckSimCard+0x40>)
    10ee:	f004 fa84 	bl	55fa <strstr>
    10f2:	4603      	mov	r3, r0
    10f4:	2b00      	cmp	r3, #0
    10f6:	d001      	beq.n	10fc <GSM_CheckSimCard+0x2c>
		return ( SUCCESS );
    10f8:	2300      	movs	r3, #0
    10fa:	e001      	b.n	1100 <GSM_CheckSimCard+0x30>
	return ( FAIL );
    10fc:	f04f 33ff 	mov.w	r3, #4294967295
}
    1100:	4618      	mov	r0, r3
    1102:	3768      	adds	r7, #104	; 0x68
    1104:	46bd      	mov	sp, r7
    1106:	bd80      	pop	{r7, pc}
    1108:	00006af0 	.word	0x00006af0
    110c:	00006b08 	.word	0x00006b08
    1110:	00006b14 	.word	0x00006b14

00001114 <GSM_GetImei>:

void GSM_GetImei() {
    1114:	b580      	push	{r7, lr}
    1116:	b09a      	sub	sp, #104	; 0x68
    1118:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+GSN", response, 500);
    111a:	1d3b      	adds	r3, r7, #4
    111c:	480a      	ldr	r0, [pc, #40]	; (1148 <GSM_GetImei+0x34>)
    111e:	4619      	mov	r1, r3
    1120:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1124:	f7ff fc50 	bl	9c8 <GSM_SendAt>
	TraceNL("IMEI : ");
    1128:	4808      	ldr	r0, [pc, #32]	; (114c <GSM_GetImei+0x38>)
    112a:	f001 fa55 	bl	25d8 <TraceNL>
	strncpy(imei, response + 9, 15);
    112e:	1d3b      	adds	r3, r7, #4
    1130:	3309      	adds	r3, #9
    1132:	4807      	ldr	r0, [pc, #28]	; (1150 <GSM_GetImei+0x3c>)
    1134:	4619      	mov	r1, r3
    1136:	220f      	movs	r2, #15
    1138:	f004 fa33 	bl	55a2 <strncpy>
	TraceNL(imei);
    113c:	4804      	ldr	r0, [pc, #16]	; (1150 <GSM_GetImei+0x3c>)
    113e:	f001 fa4b 	bl	25d8 <TraceNL>
}
    1142:	3768      	adds	r7, #104	; 0x68
    1144:	46bd      	mov	sp, r7
    1146:	bd80      	pop	{r7, pc}
    1148:	00006b1c 	.word	0x00006b1c
    114c:	00006b24 	.word	0x00006b24
    1150:	10000f7c 	.word	0x10000f7c

00001154 <GSM_GetImsi>:

void GSM_GetImsi() {
    1154:	b590      	push	{r4, r7, lr}
    1156:	b09d      	sub	sp, #116	; 0x74
    1158:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+CIMI", response, 500);
    115a:	463b      	mov	r3, r7
    115c:	4827      	ldr	r0, [pc, #156]	; (11fc <GSM_GetImsi+0xa8>)
    115e:	4619      	mov	r1, r3
    1160:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1164:	f7ff fc30 	bl	9c8 <GSM_SendAt>
	Trace("IMSI : ");
    1168:	4825      	ldr	r0, [pc, #148]	; (1200 <GSM_GetImsi+0xac>)
    116a:	f001 fa25 	bl	25b8 <Trace>
	int i;
	int index = 0;
    116e:	2300      	movs	r3, #0
    1170:	66bb      	str	r3, [r7, #104]	; 0x68
	int is_start = 0;
    1172:	2300      	movs	r3, #0
    1174:	667b      	str	r3, [r7, #100]	; 0x64
	for (i = 0; i < strlen(response); i++) {
    1176:	2300      	movs	r3, #0
    1178:	66fb      	str	r3, [r7, #108]	; 0x6c
    117a:	e02c      	b.n	11d6 <GSM_GetImsi+0x82>
		if (index > 19)
    117c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    117e:	2b13      	cmp	r3, #19
    1180:	dd00      	ble.n	1184 <GSM_GetImsi+0x30>
			break;
    1182:	e030      	b.n	11e6 <GSM_GetImsi+0x92>
		if ( isdigit(response[i]))
    1184:	463a      	mov	r2, r7
    1186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1188:	4413      	add	r3, r2
    118a:	781b      	ldrb	r3, [r3, #0]
    118c:	3380      	adds	r3, #128	; 0x80
    118e:	4a1d      	ldr	r2, [pc, #116]	; (1204 <GSM_GetImsi+0xb0>)
    1190:	5cd3      	ldrb	r3, [r2, r3]
    1192:	f003 0320 	and.w	r3, r3, #32
    1196:	2b00      	cmp	r3, #0
    1198:	d001      	beq.n	119e <GSM_GetImsi+0x4a>
			is_start = 1;
    119a:	2301      	movs	r3, #1
    119c:	667b      	str	r3, [r7, #100]	; 0x64
		if (is_start == 1 && response[i] == '\n')
    119e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    11a0:	2b01      	cmp	r3, #1
    11a2:	d106      	bne.n	11b2 <GSM_GetImsi+0x5e>
    11a4:	463a      	mov	r2, r7
    11a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    11a8:	4413      	add	r3, r2
    11aa:	781b      	ldrb	r3, [r3, #0]
    11ac:	2b0a      	cmp	r3, #10
    11ae:	d100      	bne.n	11b2 <GSM_GetImsi+0x5e>
			break;
    11b0:	e019      	b.n	11e6 <GSM_GetImsi+0x92>
		if (is_start == 1) {
    11b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    11b4:	2b01      	cmp	r3, #1
    11b6:	d10b      	bne.n	11d0 <GSM_GetImsi+0x7c>
			imsi[index] = response[i];
    11b8:	463a      	mov	r2, r7
    11ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    11bc:	4413      	add	r3, r2
    11be:	7819      	ldrb	r1, [r3, #0]
    11c0:	4a11      	ldr	r2, [pc, #68]	; (1208 <GSM_GetImsi+0xb4>)
    11c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    11c4:	4413      	add	r3, r2
    11c6:	460a      	mov	r2, r1
    11c8:	701a      	strb	r2, [r3, #0]
			index++;
    11ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    11cc:	3301      	adds	r3, #1
    11ce:	66bb      	str	r3, [r7, #104]	; 0x68
	GSM_SendAt("AT+CIMI", response, 500);
	Trace("IMSI : ");
	int i;
	int index = 0;
	int is_start = 0;
	for (i = 0; i < strlen(response); i++) {
    11d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    11d2:	3301      	adds	r3, #1
    11d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    11d6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    11d8:	463b      	mov	r3, r7
    11da:	4618      	mov	r0, r3
    11dc:	f004 f9bc 	bl	5558 <strlen>
    11e0:	4603      	mov	r3, r0
    11e2:	429c      	cmp	r4, r3
    11e4:	d3ca      	bcc.n	117c <GSM_GetImsi+0x28>
		if (is_start == 1) {
			imsi[index] = response[i];
			index++;
		}
	}
	imsi[index - 1] = '\0';
    11e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    11e8:	3b01      	subs	r3, #1
    11ea:	4a07      	ldr	r2, [pc, #28]	; (1208 <GSM_GetImsi+0xb4>)
    11ec:	2100      	movs	r1, #0
    11ee:	54d1      	strb	r1, [r2, r3]
	TraceNL(imsi);
    11f0:	4805      	ldr	r0, [pc, #20]	; (1208 <GSM_GetImsi+0xb4>)
    11f2:	f001 f9f1 	bl	25d8 <TraceNL>
}
    11f6:	3774      	adds	r7, #116	; 0x74
    11f8:	46bd      	mov	sp, r7
    11fa:	bd90      	pop	{r4, r7, pc}
    11fc:	00006b2c 	.word	0x00006b2c
    1200:	00006b34 	.word	0x00006b34
    1204:	00007508 	.word	0x00007508
    1208:	10000f68 	.word	0x10000f68

0000120c <GSM_EchoOFF>:
	TraceNL("Setting GPS baud rate ");
}


void GSM_EchoOFF( )
{
    120c:	b580      	push	{r7, lr}
    120e:	b09a      	sub	sp, #104	; 0x68
    1210:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("ATE0", response, 500);
    1212:	1d3b      	adds	r3, r7, #4
    1214:	4805      	ldr	r0, [pc, #20]	; (122c <GSM_EchoOFF+0x20>)
    1216:	4619      	mov	r1, r3
    1218:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    121c:	f7ff fbd4 	bl	9c8 <GSM_SendAt>
	TraceNL("ECHO OFF");
    1220:	4803      	ldr	r0, [pc, #12]	; (1230 <GSM_EchoOFF+0x24>)
    1222:	f001 f9d9 	bl	25d8 <TraceNL>
}
    1226:	3768      	adds	r7, #104	; 0x68
    1228:	46bd      	mov	sp, r7
    122a:	bd80      	pop	{r7, pc}
    122c:	00006b74 	.word	0x00006b74
    1230:	00006b7c 	.word	0x00006b7c

00001234 <GSM_TCP_Close>:

void GSM_TCP_Close( void )
{
    1234:	b580      	push	{r7, lr}
    1236:	b0b2      	sub	sp, #200	; 0xc8
    1238:	af00      	add	r7, sp, #0
	char response[200];
	GSM_SendAt("AT+QICLOSE", response, 500);
    123a:	463b      	mov	r3, r7
    123c:	4805      	ldr	r0, [pc, #20]	; (1254 <GSM_TCP_Close+0x20>)
    123e:	4619      	mov	r1, r3
    1240:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1244:	f7ff fbc0 	bl	9c8 <GSM_SendAt>
	TraceNL("CLOSE TCP connection ");
    1248:	4803      	ldr	r0, [pc, #12]	; (1258 <GSM_TCP_Close+0x24>)
    124a:	f001 f9c5 	bl	25d8 <TraceNL>

}
    124e:	37c8      	adds	r7, #200	; 0xc8
    1250:	46bd      	mov	sp, r7
    1252:	bd80      	pop	{r7, pc}
    1254:	00006b88 	.word	0x00006b88
    1258:	00006b94 	.word	0x00006b94

0000125c <u16CRC_Calc16>:
**
** Returned value:  16-bit CRC
**
******************************************************************************/
uint16_t u16CRC_Calc16(const uint8_t *pu8Data, int32_t i16Len)
{
    125c:	b480      	push	{r7}
    125e:	b085      	sub	sp, #20
    1260:	af00      	add	r7, sp, #0
    1262:	6078      	str	r0, [r7, #4]
    1264:	6039      	str	r1, [r7, #0]
	uint8_t i;
	uint16_t u16CRC = 0;
    1266:	2300      	movs	r3, #0
    1268:	81bb      	strh	r3, [r7, #12]

    while(--i16Len >= 0)
    126a:	e022      	b.n	12b2 <u16CRC_Calc16+0x56>
    {
    	i = 8;
    126c:	2308      	movs	r3, #8
    126e:	73fb      	strb	r3, [r7, #15]
    	u16CRC = u16CRC ^ (((uint16_t)*pu8Data++) << 8);
    1270:	687b      	ldr	r3, [r7, #4]
    1272:	1c5a      	adds	r2, r3, #1
    1274:	607a      	str	r2, [r7, #4]
    1276:	781b      	ldrb	r3, [r3, #0]
    1278:	021b      	lsls	r3, r3, #8
    127a:	b29a      	uxth	r2, r3
    127c:	89bb      	ldrh	r3, [r7, #12]
    127e:	4053      	eors	r3, r2
    1280:	b29b      	uxth	r3, r3
    1282:	81bb      	strh	r3, [r7, #12]

    	do
        {
    		if (u16CRC & 0x8000)
    1284:	89bb      	ldrh	r3, [r7, #12]
    1286:	b21b      	sxth	r3, r3
    1288:	2b00      	cmp	r3, #0
    128a:	da09      	bge.n	12a0 <u16CRC_Calc16+0x44>
    		{
    			u16CRC = u16CRC << 1 ^ 0x1021;
    128c:	89bb      	ldrh	r3, [r7, #12]
    128e:	005b      	lsls	r3, r3, #1
    1290:	b29b      	uxth	r3, r3
    1292:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
    1296:	f083 0301 	eor.w	r3, r3, #1
    129a:	b29b      	uxth	r3, r3
    129c:	81bb      	strh	r3, [r7, #12]
    129e:	e002      	b.n	12a6 <u16CRC_Calc16+0x4a>
    		}
    		else
    		{
    			u16CRC = u16CRC << 1;
    12a0:	89bb      	ldrh	r3, [r7, #12]
    12a2:	005b      	lsls	r3, r3, #1
    12a4:	81bb      	strh	r3, [r7, #12]
    		}
        }
    	while(--i);
    12a6:	7bfb      	ldrb	r3, [r7, #15]
    12a8:	3b01      	subs	r3, #1
    12aa:	73fb      	strb	r3, [r7, #15]
    12ac:	7bfb      	ldrb	r3, [r7, #15]
    12ae:	2b00      	cmp	r3, #0
    12b0:	d1e8      	bne.n	1284 <u16CRC_Calc16+0x28>
uint16_t u16CRC_Calc16(const uint8_t *pu8Data, int32_t i16Len)
{
	uint8_t i;
	uint16_t u16CRC = 0;

    while(--i16Len >= 0)
    12b2:	683b      	ldr	r3, [r7, #0]
    12b4:	3b01      	subs	r3, #1
    12b6:	603b      	str	r3, [r7, #0]
    12b8:	683b      	ldr	r3, [r7, #0]
    12ba:	2b00      	cmp	r3, #0
    12bc:	dad6      	bge.n	126c <u16CRC_Calc16+0x10>
    			u16CRC = u16CRC << 1;
    		}
        }
    	while(--i);
    }
    return u16CRC;
    12be:	89bb      	ldrh	r3, [r7, #12]
}
    12c0:	4618      	mov	r0, r3
    12c2:	3714      	adds	r7, #20
    12c4:	46bd      	mov	sp, r7
    12c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    12ca:	4770      	bx	lr

000012cc <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    12cc:	b480      	push	{r7}
    12ce:	b083      	sub	sp, #12
    12d0:	af00      	add	r7, sp, #0
    12d2:	4603      	mov	r3, r0
    12d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    12d6:	4908      	ldr	r1, [pc, #32]	; (12f8 <NVIC_EnableIRQ+0x2c>)
    12d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
    12dc:	095b      	lsrs	r3, r3, #5
    12de:	79fa      	ldrb	r2, [r7, #7]
    12e0:	f002 021f 	and.w	r2, r2, #31
    12e4:	2001      	movs	r0, #1
    12e6:	fa00 f202 	lsl.w	r2, r0, r2
    12ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    12ee:	370c      	adds	r7, #12
    12f0:	46bd      	mov	sp, r7
    12f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    12f6:	4770      	bx	lr
    12f8:	e000e100 	.word	0xe000e100

000012fc <I2C0_IRQHandler>:

volatile uint32_t RdIndex_1,RdIndex_0 = 0;
volatile uint32_t WrIndex_1,WrIndex_0 = 0;


void I2C0_IRQHandler(void) {
    12fc:	b480      	push	{r7}
    12fe:	b083      	sub	sp, #12
    1300:	af00      	add	r7, sp, #0
	uint8_t StatValue;
	/* this handler deals with master read and master write only */
	StatValue = LPC_I2C0->I2STAT;
    1302:	4ba9      	ldr	r3, [pc, #676]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    1304:	685b      	ldr	r3, [r3, #4]
    1306:	71fb      	strb	r3, [r7, #7]
	switch (StatValue) {
    1308:	79fb      	ldrb	r3, [r7, #7]
    130a:	3b08      	subs	r3, #8
    130c:	2b50      	cmp	r3, #80	; 0x50
    130e:	f200 8184 	bhi.w	161a <I2C0_IRQHandler+0x31e>
    1312:	a201      	add	r2, pc, #4	; (adr r2, 1318 <I2C0_IRQHandler+0x1c>)
    1314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1318:	0000145d 	.word	0x0000145d
    131c:	0000161b 	.word	0x0000161b
    1320:	0000161b 	.word	0x0000161b
    1324:	0000161b 	.word	0x0000161b
    1328:	0000161b 	.word	0x0000161b
    132c:	0000161b 	.word	0x0000161b
    1330:	0000161b 	.word	0x0000161b
    1334:	0000161b 	.word	0x0000161b
    1338:	0000147f 	.word	0x0000147f
    133c:	0000161b 	.word	0x0000161b
    1340:	0000161b 	.word	0x0000161b
    1344:	0000161b 	.word	0x0000161b
    1348:	0000161b 	.word	0x0000161b
    134c:	0000161b 	.word	0x0000161b
    1350:	0000161b 	.word	0x0000161b
    1354:	0000161b 	.word	0x0000161b
    1358:	000014a9 	.word	0x000014a9
    135c:	0000161b 	.word	0x0000161b
    1360:	0000161b 	.word	0x0000161b
    1364:	0000161b 	.word	0x0000161b
    1368:	0000161b 	.word	0x0000161b
    136c:	0000161b 	.word	0x0000161b
    1370:	0000161b 	.word	0x0000161b
    1374:	0000161b 	.word	0x0000161b
    1378:	0000160d 	.word	0x0000160d
    137c:	0000161b 	.word	0x0000161b
    1380:	0000161b 	.word	0x0000161b
    1384:	0000161b 	.word	0x0000161b
    1388:	0000161b 	.word	0x0000161b
    138c:	0000161b 	.word	0x0000161b
    1390:	0000161b 	.word	0x0000161b
    1394:	0000161b 	.word	0x0000161b
    1398:	000014d3 	.word	0x000014d3
    139c:	0000161b 	.word	0x0000161b
    13a0:	0000161b 	.word	0x0000161b
    13a4:	0000161b 	.word	0x0000161b
    13a8:	0000161b 	.word	0x0000161b
    13ac:	0000161b 	.word	0x0000161b
    13b0:	0000161b 	.word	0x0000161b
    13b4:	0000161b 	.word	0x0000161b
    13b8:	00001519 	.word	0x00001519
    13bc:	0000161b 	.word	0x0000161b
    13c0:	0000161b 	.word	0x0000161b
    13c4:	0000161b 	.word	0x0000161b
    13c8:	0000161b 	.word	0x0000161b
    13cc:	0000161b 	.word	0x0000161b
    13d0:	0000161b 	.word	0x0000161b
    13d4:	0000161b 	.word	0x0000161b
    13d8:	0000161b 	.word	0x0000161b
    13dc:	0000161b 	.word	0x0000161b
    13e0:	0000161b 	.word	0x0000161b
    13e4:	0000161b 	.word	0x0000161b
    13e8:	0000161b 	.word	0x0000161b
    13ec:	0000161b 	.word	0x0000161b
    13f0:	0000161b 	.word	0x0000161b
    13f4:	0000161b 	.word	0x0000161b
    13f8:	00001599 	.word	0x00001599
    13fc:	0000161b 	.word	0x0000161b
    1400:	0000161b 	.word	0x0000161b
    1404:	0000161b 	.word	0x0000161b
    1408:	0000161b 	.word	0x0000161b
    140c:	0000161b 	.word	0x0000161b
    1410:	0000161b 	.word	0x0000161b
    1414:	0000161b 	.word	0x0000161b
    1418:	0000160d 	.word	0x0000160d
    141c:	0000161b 	.word	0x0000161b
    1420:	0000161b 	.word	0x0000161b
    1424:	0000161b 	.word	0x0000161b
    1428:	0000161b 	.word	0x0000161b
    142c:	0000161b 	.word	0x0000161b
    1430:	0000161b 	.word	0x0000161b
    1434:	0000161b 	.word	0x0000161b
    1438:	000015c5 	.word	0x000015c5
    143c:	0000161b 	.word	0x0000161b
    1440:	0000161b 	.word	0x0000161b
    1444:	0000161b 	.word	0x0000161b
    1448:	0000161b 	.word	0x0000161b
    144c:	0000161b 	.word	0x0000161b
    1450:	0000161b 	.word	0x0000161b
    1454:	0000161b 	.word	0x0000161b
    1458:	000015c5 	.word	0x000015c5
		case 0x08: /* A Start condition is issued. */
			LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    145c:	4952      	ldr	r1, [pc, #328]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    145e:	4b53      	ldr	r3, [pc, #332]	; (15ac <I2C0_IRQHandler+0x2b0>)
    1460:	681b      	ldr	r3, [r3, #0]
    1462:	1c5a      	adds	r2, r3, #1
    1464:	4851      	ldr	r0, [pc, #324]	; (15ac <I2C0_IRQHandler+0x2b0>)
    1466:	6002      	str	r2, [r0, #0]
    1468:	4a51      	ldr	r2, [pc, #324]	; (15b0 <I2C0_IRQHandler+0x2b4>)
    146a:	5cd3      	ldrb	r3, [r2, r3]
    146c:	b2db      	uxtb	r3, r3
    146e:	608b      	str	r3, [r1, #8]
			LPC_I2C0->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    1470:	4b4d      	ldr	r3, [pc, #308]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    1472:	2228      	movs	r2, #40	; 0x28
    1474:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = I2C_STARTED;
    1476:	4b4f      	ldr	r3, [pc, #316]	; (15b4 <I2C0_IRQHandler+0x2b8>)
    1478:	2201      	movs	r2, #1
    147a:	601a      	str	r2, [r3, #0]
			break;
    147c:	e0d1      	b.n	1622 <I2C0_IRQHandler+0x326>
		case 0x10: /* A repeated started is issued */
			if (!I2C0_Cmd) {
    147e:	4b4e      	ldr	r3, [pc, #312]	; (15b8 <I2C0_IRQHandler+0x2bc>)
    1480:	681b      	ldr	r3, [r3, #0]
    1482:	2b00      	cmp	r3, #0
    1484:	d109      	bne.n	149a <I2C0_IRQHandler+0x19e>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    1486:	4948      	ldr	r1, [pc, #288]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    1488:	4b48      	ldr	r3, [pc, #288]	; (15ac <I2C0_IRQHandler+0x2b0>)
    148a:	681b      	ldr	r3, [r3, #0]
    148c:	1c5a      	adds	r2, r3, #1
    148e:	4847      	ldr	r0, [pc, #284]	; (15ac <I2C0_IRQHandler+0x2b0>)
    1490:	6002      	str	r2, [r0, #0]
    1492:	4a47      	ldr	r2, [pc, #284]	; (15b0 <I2C0_IRQHandler+0x2b4>)
    1494:	5cd3      	ldrb	r3, [r2, r3]
    1496:	b2db      	uxtb	r3, r3
    1498:	608b      	str	r3, [r1, #8]
			}
			LPC_I2C0->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    149a:	4b43      	ldr	r3, [pc, #268]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    149c:	2228      	movs	r2, #40	; 0x28
    149e:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = I2C_RESTARTED;
    14a0:	4b44      	ldr	r3, [pc, #272]	; (15b4 <I2C0_IRQHandler+0x2b8>)
    14a2:	2202      	movs	r2, #2
    14a4:	601a      	str	r2, [r3, #0]
			break;
    14a6:	e0bc      	b.n	1622 <I2C0_IRQHandler+0x326>
		case 0x18: /* Regardless, it's a ACK */
			if (I2C0_MasterState == I2C_STARTED) {
    14a8:	4b42      	ldr	r3, [pc, #264]	; (15b4 <I2C0_IRQHandler+0x2b8>)
    14aa:	681b      	ldr	r3, [r3, #0]
    14ac:	2b01      	cmp	r3, #1
    14ae:	d10c      	bne.n	14ca <I2C0_IRQHandler+0x1ce>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    14b0:	493d      	ldr	r1, [pc, #244]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    14b2:	4b3e      	ldr	r3, [pc, #248]	; (15ac <I2C0_IRQHandler+0x2b0>)
    14b4:	681b      	ldr	r3, [r3, #0]
    14b6:	1c5a      	adds	r2, r3, #1
    14b8:	483c      	ldr	r0, [pc, #240]	; (15ac <I2C0_IRQHandler+0x2b0>)
    14ba:	6002      	str	r2, [r0, #0]
    14bc:	4a3c      	ldr	r2, [pc, #240]	; (15b0 <I2C0_IRQHandler+0x2b4>)
    14be:	5cd3      	ldrb	r3, [r2, r3]
    14c0:	b2db      	uxtb	r3, r3
    14c2:	608b      	str	r3, [r1, #8]
				I2C0_MasterState = DATA_ACK;
    14c4:	4b3b      	ldr	r3, [pc, #236]	; (15b4 <I2C0_IRQHandler+0x2b8>)
    14c6:	2204      	movs	r2, #4
    14c8:	601a      	str	r2, [r3, #0]
			}
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    14ca:	4b37      	ldr	r3, [pc, #220]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    14cc:	2208      	movs	r2, #8
    14ce:	619a      	str	r2, [r3, #24]
			break;
    14d0:	e0a7      	b.n	1622 <I2C0_IRQHandler+0x326>
		case 0x28: /* Data byte has been transmitted, regardless ACK or NACK */
			 if ( WrIndex_0 < I2C0_WriteLength )
    14d2:	4b36      	ldr	r3, [pc, #216]	; (15ac <I2C0_IRQHandler+0x2b0>)
    14d4:	681a      	ldr	r2, [r3, #0]
    14d6:	4b39      	ldr	r3, [pc, #228]	; (15bc <I2C0_IRQHandler+0x2c0>)
    14d8:	681b      	ldr	r3, [r3, #0]
    14da:	429a      	cmp	r2, r3
    14dc:	d20a      	bcs.n	14f4 <I2C0_IRQHandler+0x1f8>
				{
				  LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++]; /* this should be the last one */
    14de:	4932      	ldr	r1, [pc, #200]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    14e0:	4b32      	ldr	r3, [pc, #200]	; (15ac <I2C0_IRQHandler+0x2b0>)
    14e2:	681b      	ldr	r3, [r3, #0]
    14e4:	1c5a      	adds	r2, r3, #1
    14e6:	4831      	ldr	r0, [pc, #196]	; (15ac <I2C0_IRQHandler+0x2b0>)
    14e8:	6002      	str	r2, [r0, #0]
    14ea:	4a31      	ldr	r2, [pc, #196]	; (15b0 <I2C0_IRQHandler+0x2b4>)
    14ec:	5cd3      	ldrb	r3, [r2, r3]
    14ee:	b2db      	uxtb	r3, r3
    14f0:	608b      	str	r3, [r1, #8]
    14f2:	e00d      	b.n	1510 <I2C0_IRQHandler+0x214>
				}
				else
				{
				  if ( I2C0_ReadLength != 0 )
    14f4:	4b32      	ldr	r3, [pc, #200]	; (15c0 <I2C0_IRQHandler+0x2c4>)
    14f6:	681b      	ldr	r3, [r3, #0]
    14f8:	2b00      	cmp	r3, #0
    14fa:	d003      	beq.n	1504 <I2C0_IRQHandler+0x208>
				  {
						LPC_I2C0->I2CONSET = I2CONSET_STA;   /* Set Repeated-start flag */
    14fc:	4b2a      	ldr	r3, [pc, #168]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    14fe:	2220      	movs	r2, #32
    1500:	601a      	str	r2, [r3, #0]
    1502:	e005      	b.n	1510 <I2C0_IRQHandler+0x214>
				  }
				  else
				  {
						LPC_I2C0->I2CONSET = I2CONSET_STO;      /* Set Stop flag */
    1504:	4b28      	ldr	r3, [pc, #160]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    1506:	2210      	movs	r2, #16
    1508:	601a      	str	r2, [r3, #0]
						I2C0_MasterState = I2C_IDLE;
    150a:	4b2a      	ldr	r3, [pc, #168]	; (15b4 <I2C0_IRQHandler+0x2b8>)
    150c:	2200      	movs	r2, #0
    150e:	601a      	str	r2, [r3, #0]
				  }
				}
				LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    1510:	4b25      	ldr	r3, [pc, #148]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    1512:	2208      	movs	r2, #8
    1514:	619a      	str	r2, [r3, #24]
				break;
    1516:	e084      	b.n	1622 <I2C0_IRQHandler+0x326>
		case 0x30:
			if (WrIndex_0 != I2C0_WriteLength) {
    1518:	4b24      	ldr	r3, [pc, #144]	; (15ac <I2C0_IRQHandler+0x2b0>)
    151a:	681a      	ldr	r2, [r3, #0]
    151c:	4b27      	ldr	r3, [pc, #156]	; (15bc <I2C0_IRQHandler+0x2c0>)
    151e:	681b      	ldr	r3, [r3, #0]
    1520:	429a      	cmp	r2, r3
    1522:	d024      	beq.n	156e <I2C0_IRQHandler+0x272>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[1 + WrIndex_0]; /* this should be the last one */
    1524:	4a20      	ldr	r2, [pc, #128]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    1526:	4b21      	ldr	r3, [pc, #132]	; (15ac <I2C0_IRQHandler+0x2b0>)
    1528:	681b      	ldr	r3, [r3, #0]
    152a:	3301      	adds	r3, #1
    152c:	4920      	ldr	r1, [pc, #128]	; (15b0 <I2C0_IRQHandler+0x2b4>)
    152e:	5ccb      	ldrb	r3, [r1, r3]
    1530:	b2db      	uxtb	r3, r3
    1532:	6093      	str	r3, [r2, #8]
				WrIndex_0++;
    1534:	4b1d      	ldr	r3, [pc, #116]	; (15ac <I2C0_IRQHandler+0x2b0>)
    1536:	681b      	ldr	r3, [r3, #0]
    1538:	3301      	adds	r3, #1
    153a:	4a1c      	ldr	r2, [pc, #112]	; (15ac <I2C0_IRQHandler+0x2b0>)
    153c:	6013      	str	r3, [r2, #0]
				if (WrIndex_0 != I2C0_WriteLength) {
    153e:	4b1b      	ldr	r3, [pc, #108]	; (15ac <I2C0_IRQHandler+0x2b0>)
    1540:	681a      	ldr	r2, [r3, #0]
    1542:	4b1e      	ldr	r3, [pc, #120]	; (15bc <I2C0_IRQHandler+0x2c0>)
    1544:	681b      	ldr	r3, [r3, #0]
    1546:	429a      	cmp	r2, r3
    1548:	d003      	beq.n	1552 <I2C0_IRQHandler+0x256>
					I2C0_MasterState = DATA_ACK;
    154a:	4b1a      	ldr	r3, [pc, #104]	; (15b4 <I2C0_IRQHandler+0x2b8>)
    154c:	2204      	movs	r2, #4
    154e:	601a      	str	r2, [r3, #0]
    1550:	e01e      	b.n	1590 <I2C0_IRQHandler+0x294>
				} else {
					I2C0_MasterState = DATA_NACK;
    1552:	4b18      	ldr	r3, [pc, #96]	; (15b4 <I2C0_IRQHandler+0x2b8>)
    1554:	2205      	movs	r2, #5
    1556:	601a      	str	r2, [r3, #0]
					if (I2C0_ReadLength != 0) {
    1558:	4b19      	ldr	r3, [pc, #100]	; (15c0 <I2C0_IRQHandler+0x2c4>)
    155a:	681b      	ldr	r3, [r3, #0]
    155c:	2b00      	cmp	r3, #0
    155e:	d017      	beq.n	1590 <I2C0_IRQHandler+0x294>
						LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    1560:	4b11      	ldr	r3, [pc, #68]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    1562:	2220      	movs	r2, #32
    1564:	601a      	str	r2, [r3, #0]
						I2C0_MasterState = I2C_REPEATED_START;
    1566:	4b13      	ldr	r3, [pc, #76]	; (15b4 <I2C0_IRQHandler+0x2b8>)
    1568:	2203      	movs	r2, #3
    156a:	601a      	str	r2, [r3, #0]
    156c:	e010      	b.n	1590 <I2C0_IRQHandler+0x294>
					}
				}
			} else {
				if (I2C0_ReadLength != 0) {
    156e:	4b14      	ldr	r3, [pc, #80]	; (15c0 <I2C0_IRQHandler+0x2c4>)
    1570:	681b      	ldr	r3, [r3, #0]
    1572:	2b00      	cmp	r3, #0
    1574:	d006      	beq.n	1584 <I2C0_IRQHandler+0x288>
					LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    1576:	4b0c      	ldr	r3, [pc, #48]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    1578:	2220      	movs	r2, #32
    157a:	601a      	str	r2, [r3, #0]
					I2C0_MasterState = I2C_REPEATED_START;
    157c:	4b0d      	ldr	r3, [pc, #52]	; (15b4 <I2C0_IRQHandler+0x2b8>)
    157e:	2203      	movs	r2, #3
    1580:	601a      	str	r2, [r3, #0]
    1582:	e005      	b.n	1590 <I2C0_IRQHandler+0x294>
				} else {
					I2C0_MasterState = DATA_NACK;
    1584:	4b0b      	ldr	r3, [pc, #44]	; (15b4 <I2C0_IRQHandler+0x2b8>)
    1586:	2205      	movs	r2, #5
    1588:	601a      	str	r2, [r3, #0]
					LPC_I2C0->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    158a:	4b07      	ldr	r3, [pc, #28]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    158c:	2210      	movs	r2, #16
    158e:	601a      	str	r2, [r3, #0]
				}
			}
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    1590:	4b05      	ldr	r3, [pc, #20]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    1592:	2208      	movs	r2, #8
    1594:	619a      	str	r2, [r3, #24]
			break;
    1596:	e044      	b.n	1622 <I2C0_IRQHandler+0x326>
		case 0x40: /* Master Receive, SLA_R has been sent */
			LPC_I2C0->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    1598:	4b03      	ldr	r3, [pc, #12]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    159a:	2204      	movs	r2, #4
    159c:	601a      	str	r2, [r3, #0]
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    159e:	4b02      	ldr	r3, [pc, #8]	; (15a8 <I2C0_IRQHandler+0x2ac>)
    15a0:	2208      	movs	r2, #8
    15a2:	619a      	str	r2, [r3, #24]
			break;
    15a4:	e03d      	b.n	1622 <I2C0_IRQHandler+0x326>
    15a6:	bf00      	nop
    15a8:	4001c000 	.word	0x4001c000
    15ac:	1000002c 	.word	0x1000002c
    15b0:	1000103c 	.word	0x1000103c
    15b4:	10000024 	.word	0x10000024
    15b8:	1000105c 	.word	0x1000105c
    15bc:	10001018 	.word	0x10001018
    15c0:	10000fc0 	.word	0x10000fc0
		case 0x50: /* Data byte has been received, regardless following ACK or NACK */
		case 0x58:
			I2C0_MasterBuffer[3 + RdIndex_0] = LPC_I2C0->I2DAT;
    15c4:	4b19      	ldr	r3, [pc, #100]	; (162c <I2C0_IRQHandler+0x330>)
    15c6:	681b      	ldr	r3, [r3, #0]
    15c8:	3303      	adds	r3, #3
    15ca:	4a19      	ldr	r2, [pc, #100]	; (1630 <I2C0_IRQHandler+0x334>)
    15cc:	6892      	ldr	r2, [r2, #8]
    15ce:	b2d1      	uxtb	r1, r2
    15d0:	4a18      	ldr	r2, [pc, #96]	; (1634 <I2C0_IRQHandler+0x338>)
    15d2:	54d1      	strb	r1, [r2, r3]
			RdIndex_0++;
    15d4:	4b15      	ldr	r3, [pc, #84]	; (162c <I2C0_IRQHandler+0x330>)
    15d6:	681b      	ldr	r3, [r3, #0]
    15d8:	3301      	adds	r3, #1
    15da:	4a14      	ldr	r2, [pc, #80]	; (162c <I2C0_IRQHandler+0x330>)
    15dc:	6013      	str	r3, [r2, #0]
			if (RdIndex_0 != I2C0_ReadLength) {
    15de:	4b13      	ldr	r3, [pc, #76]	; (162c <I2C0_IRQHandler+0x330>)
    15e0:	681a      	ldr	r2, [r3, #0]
    15e2:	4b15      	ldr	r3, [pc, #84]	; (1638 <I2C0_IRQHandler+0x33c>)
    15e4:	681b      	ldr	r3, [r3, #0]
    15e6:	429a      	cmp	r2, r3
    15e8:	d003      	beq.n	15f2 <I2C0_IRQHandler+0x2f6>
				I2C0_MasterState = DATA_ACK;
    15ea:	4b14      	ldr	r3, [pc, #80]	; (163c <I2C0_IRQHandler+0x340>)
    15ec:	2204      	movs	r2, #4
    15ee:	601a      	str	r2, [r3, #0]
    15f0:	e005      	b.n	15fe <I2C0_IRQHandler+0x302>
			} else {
				RdIndex_0 = 0;
    15f2:	4b0e      	ldr	r3, [pc, #56]	; (162c <I2C0_IRQHandler+0x330>)
    15f4:	2200      	movs	r2, #0
    15f6:	601a      	str	r2, [r3, #0]
				I2C0_MasterState = DATA_NACK;
    15f8:	4b10      	ldr	r3, [pc, #64]	; (163c <I2C0_IRQHandler+0x340>)
    15fa:	2205      	movs	r2, #5
    15fc:	601a      	str	r2, [r3, #0]
			}
			LPC_I2C0->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    15fe:	4b0c      	ldr	r3, [pc, #48]	; (1630 <I2C0_IRQHandler+0x334>)
    1600:	2204      	movs	r2, #4
    1602:	601a      	str	r2, [r3, #0]
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    1604:	4b0a      	ldr	r3, [pc, #40]	; (1630 <I2C0_IRQHandler+0x334>)
    1606:	2208      	movs	r2, #8
    1608:	619a      	str	r2, [r3, #24]
			break;
    160a:	e00a      	b.n	1622 <I2C0_IRQHandler+0x326>
		case 0x20: /* regardless, it's a NACK */
		case 0x48:
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    160c:	4b08      	ldr	r3, [pc, #32]	; (1630 <I2C0_IRQHandler+0x334>)
    160e:	2208      	movs	r2, #8
    1610:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = DATA_NACK;
    1612:	4b0a      	ldr	r3, [pc, #40]	; (163c <I2C0_IRQHandler+0x340>)
    1614:	2205      	movs	r2, #5
    1616:	601a      	str	r2, [r3, #0]
			break;
    1618:	e003      	b.n	1622 <I2C0_IRQHandler+0x326>
		case 0x38: /* Arbitration lost, in this example, we don't
		 deal with multiple master situation */
		default:
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    161a:	4b05      	ldr	r3, [pc, #20]	; (1630 <I2C0_IRQHandler+0x334>)
    161c:	2208      	movs	r2, #8
    161e:	619a      	str	r2, [r3, #24]
			break;
    1620:	bf00      	nop
	}
}
    1622:	370c      	adds	r7, #12
    1624:	46bd      	mov	sp, r7
    1626:	f85d 7b04 	ldr.w	r7, [sp], #4
    162a:	4770      	bx	lr
    162c:	10000028 	.word	0x10000028
    1630:	4001c000 	.word	0x4001c000
    1634:	1000103c 	.word	0x1000103c
    1638:	10000fc0 	.word	0x10000fc0
    163c:	10000024 	.word	0x10000024

00001640 <I2C1_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void I2C1_IRQHandler(void) {
    1640:	b480      	push	{r7}
    1642:	b083      	sub	sp, #12
    1644:	af00      	add	r7, sp, #0
	uint8_t StatValue;
	/* this handler deals with master read and master write only */
	StatValue = LPC_I2C1->I2STAT;
    1646:	4bae      	ldr	r3, [pc, #696]	; (1900 <I2C1_IRQHandler+0x2c0>)
    1648:	685b      	ldr	r3, [r3, #4]
    164a:	71fb      	strb	r3, [r7, #7]
	switch (StatValue) {
    164c:	79fb      	ldrb	r3, [r7, #7]
    164e:	3b08      	subs	r3, #8
    1650:	2b50      	cmp	r3, #80	; 0x50
    1652:	f200 814b 	bhi.w	18ec <I2C1_IRQHandler+0x2ac>
    1656:	a201      	add	r2, pc, #4	; (adr r2, 165c <I2C1_IRQHandler+0x1c>)
    1658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    165c:	000017a1 	.word	0x000017a1
    1660:	000018ed 	.word	0x000018ed
    1664:	000018ed 	.word	0x000018ed
    1668:	000018ed 	.word	0x000018ed
    166c:	000018ed 	.word	0x000018ed
    1670:	000018ed 	.word	0x000018ed
    1674:	000018ed 	.word	0x000018ed
    1678:	000018ed 	.word	0x000018ed
    167c:	000017b9 	.word	0x000017b9
    1680:	000018ed 	.word	0x000018ed
    1684:	000018ed 	.word	0x000018ed
    1688:	000018ed 	.word	0x000018ed
    168c:	000018ed 	.word	0x000018ed
    1690:	000018ed 	.word	0x000018ed
    1694:	000018ed 	.word	0x000018ed
    1698:	000018ed 	.word	0x000018ed
    169c:	000017d9 	.word	0x000017d9
    16a0:	000018ed 	.word	0x000018ed
    16a4:	000018ed 	.word	0x000018ed
    16a8:	000018ed 	.word	0x000018ed
    16ac:	000018ed 	.word	0x000018ed
    16b0:	000018ed 	.word	0x000018ed
    16b4:	000018ed 	.word	0x000018ed
    16b8:	000018ed 	.word	0x000018ed
    16bc:	000018df 	.word	0x000018df
    16c0:	000018ed 	.word	0x000018ed
    16c4:	000018ed 	.word	0x000018ed
    16c8:	000018ed 	.word	0x000018ed
    16cc:	000018ed 	.word	0x000018ed
    16d0:	000018ed 	.word	0x000018ed
    16d4:	000018ed 	.word	0x000018ed
    16d8:	000018ed 	.word	0x000018ed
    16dc:	00001809 	.word	0x00001809
    16e0:	000018ed 	.word	0x000018ed
    16e4:	000018ed 	.word	0x000018ed
    16e8:	000018ed 	.word	0x000018ed
    16ec:	000018ed 	.word	0x000018ed
    16f0:	000018ed 	.word	0x000018ed
    16f4:	000018ed 	.word	0x000018ed
    16f8:	000018ed 	.word	0x000018ed
    16fc:	00001809 	.word	0x00001809
    1700:	000018ed 	.word	0x000018ed
    1704:	000018ed 	.word	0x000018ed
    1708:	000018ed 	.word	0x000018ed
    170c:	000018ed 	.word	0x000018ed
    1710:	000018ed 	.word	0x000018ed
    1714:	000018ed 	.word	0x000018ed
    1718:	000018ed 	.word	0x000018ed
    171c:	000018ed 	.word	0x000018ed
    1720:	000018ed 	.word	0x000018ed
    1724:	000018ed 	.word	0x000018ed
    1728:	000018ed 	.word	0x000018ed
    172c:	000018ed 	.word	0x000018ed
    1730:	000018ed 	.word	0x000018ed
    1734:	000018ed 	.word	0x000018ed
    1738:	000018ed 	.word	0x000018ed
    173c:	00001889 	.word	0x00001889
    1740:	000018ed 	.word	0x000018ed
    1744:	000018ed 	.word	0x000018ed
    1748:	000018ed 	.word	0x000018ed
    174c:	000018ed 	.word	0x000018ed
    1750:	000018ed 	.word	0x000018ed
    1754:	000018ed 	.word	0x000018ed
    1758:	000018ed 	.word	0x000018ed
    175c:	000018df 	.word	0x000018df
    1760:	000018ed 	.word	0x000018ed
    1764:	000018ed 	.word	0x000018ed
    1768:	000018ed 	.word	0x000018ed
    176c:	000018ed 	.word	0x000018ed
    1770:	000018ed 	.word	0x000018ed
    1774:	000018ed 	.word	0x000018ed
    1778:	000018ed 	.word	0x000018ed
    177c:	00001897 	.word	0x00001897
    1780:	000018ed 	.word	0x000018ed
    1784:	000018ed 	.word	0x000018ed
    1788:	000018ed 	.word	0x000018ed
    178c:	000018ed 	.word	0x000018ed
    1790:	000018ed 	.word	0x000018ed
    1794:	000018ed 	.word	0x000018ed
    1798:	000018ed 	.word	0x000018ed
    179c:	00001897 	.word	0x00001897
	case 0x08: /* A Start condition is issued. */
		LPC_I2C1->I2DAT = I2C1_MasterBuffer[0];
    17a0:	4b57      	ldr	r3, [pc, #348]	; (1900 <I2C1_IRQHandler+0x2c0>)
    17a2:	4a58      	ldr	r2, [pc, #352]	; (1904 <I2C1_IRQHandler+0x2c4>)
    17a4:	7812      	ldrb	r2, [r2, #0]
    17a6:	b2d2      	uxtb	r2, r2
    17a8:	609a      	str	r2, [r3, #8]
		LPC_I2C1->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    17aa:	4b55      	ldr	r3, [pc, #340]	; (1900 <I2C1_IRQHandler+0x2c0>)
    17ac:	2228      	movs	r2, #40	; 0x28
    17ae:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = I2C_STARTED;
    17b0:	4b55      	ldr	r3, [pc, #340]	; (1908 <I2C1_IRQHandler+0x2c8>)
    17b2:	2201      	movs	r2, #1
    17b4:	601a      	str	r2, [r3, #0]
		break;
    17b6:	e09d      	b.n	18f4 <I2C1_IRQHandler+0x2b4>
	case 0x10: /* A repeated started is issued */
		if (!I2C1_Cmd) {
    17b8:	4b54      	ldr	r3, [pc, #336]	; (190c <I2C1_IRQHandler+0x2cc>)
    17ba:	681b      	ldr	r3, [r3, #0]
    17bc:	2b00      	cmp	r3, #0
    17be:	d104      	bne.n	17ca <I2C1_IRQHandler+0x18a>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[2];
    17c0:	4b4f      	ldr	r3, [pc, #316]	; (1900 <I2C1_IRQHandler+0x2c0>)
    17c2:	4a50      	ldr	r2, [pc, #320]	; (1904 <I2C1_IRQHandler+0x2c4>)
    17c4:	7892      	ldrb	r2, [r2, #2]
    17c6:	b2d2      	uxtb	r2, r2
    17c8:	609a      	str	r2, [r3, #8]
		}
		LPC_I2C1->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    17ca:	4b4d      	ldr	r3, [pc, #308]	; (1900 <I2C1_IRQHandler+0x2c0>)
    17cc:	2228      	movs	r2, #40	; 0x28
    17ce:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = I2C_RESTARTED;
    17d0:	4b4d      	ldr	r3, [pc, #308]	; (1908 <I2C1_IRQHandler+0x2c8>)
    17d2:	2202      	movs	r2, #2
    17d4:	601a      	str	r2, [r3, #0]
		break;
    17d6:	e08d      	b.n	18f4 <I2C1_IRQHandler+0x2b4>
	case 0x18: /* Regardless, it's a ACK */
		if (I2C1_MasterState == I2C_STARTED) {
    17d8:	4b4b      	ldr	r3, [pc, #300]	; (1908 <I2C1_IRQHandler+0x2c8>)
    17da:	681b      	ldr	r3, [r3, #0]
    17dc:	2b01      	cmp	r3, #1
    17de:	d10f      	bne.n	1800 <I2C1_IRQHandler+0x1c0>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[1 + WrIndex_1];
    17e0:	4a47      	ldr	r2, [pc, #284]	; (1900 <I2C1_IRQHandler+0x2c0>)
    17e2:	4b4b      	ldr	r3, [pc, #300]	; (1910 <I2C1_IRQHandler+0x2d0>)
    17e4:	681b      	ldr	r3, [r3, #0]
    17e6:	3301      	adds	r3, #1
    17e8:	4946      	ldr	r1, [pc, #280]	; (1904 <I2C1_IRQHandler+0x2c4>)
    17ea:	5ccb      	ldrb	r3, [r1, r3]
    17ec:	b2db      	uxtb	r3, r3
    17ee:	6093      	str	r3, [r2, #8]
			WrIndex_1++;
    17f0:	4b47      	ldr	r3, [pc, #284]	; (1910 <I2C1_IRQHandler+0x2d0>)
    17f2:	681b      	ldr	r3, [r3, #0]
    17f4:	3301      	adds	r3, #1
    17f6:	4a46      	ldr	r2, [pc, #280]	; (1910 <I2C1_IRQHandler+0x2d0>)
    17f8:	6013      	str	r3, [r2, #0]
			I2C1_MasterState = DATA_ACK;
    17fa:	4b43      	ldr	r3, [pc, #268]	; (1908 <I2C1_IRQHandler+0x2c8>)
    17fc:	2204      	movs	r2, #4
    17fe:	601a      	str	r2, [r3, #0]
		}
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    1800:	4b3f      	ldr	r3, [pc, #252]	; (1900 <I2C1_IRQHandler+0x2c0>)
    1802:	2208      	movs	r2, #8
    1804:	619a      	str	r2, [r3, #24]
		break;
    1806:	e075      	b.n	18f4 <I2C1_IRQHandler+0x2b4>
	case 0x28: /* Data byte has been transmitted, regardless ACK or NACK */
	case 0x30:
		if (WrIndex_1 != I2C1_WriteLength) {
    1808:	4b41      	ldr	r3, [pc, #260]	; (1910 <I2C1_IRQHandler+0x2d0>)
    180a:	681a      	ldr	r2, [r3, #0]
    180c:	4b41      	ldr	r3, [pc, #260]	; (1914 <I2C1_IRQHandler+0x2d4>)
    180e:	681b      	ldr	r3, [r3, #0]
    1810:	429a      	cmp	r2, r3
    1812:	d024      	beq.n	185e <I2C1_IRQHandler+0x21e>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[1 + WrIndex_1]; /* this should be the last one */
    1814:	4a3a      	ldr	r2, [pc, #232]	; (1900 <I2C1_IRQHandler+0x2c0>)
    1816:	4b3e      	ldr	r3, [pc, #248]	; (1910 <I2C1_IRQHandler+0x2d0>)
    1818:	681b      	ldr	r3, [r3, #0]
    181a:	3301      	adds	r3, #1
    181c:	4939      	ldr	r1, [pc, #228]	; (1904 <I2C1_IRQHandler+0x2c4>)
    181e:	5ccb      	ldrb	r3, [r1, r3]
    1820:	b2db      	uxtb	r3, r3
    1822:	6093      	str	r3, [r2, #8]
			WrIndex_1++;
    1824:	4b3a      	ldr	r3, [pc, #232]	; (1910 <I2C1_IRQHandler+0x2d0>)
    1826:	681b      	ldr	r3, [r3, #0]
    1828:	3301      	adds	r3, #1
    182a:	4a39      	ldr	r2, [pc, #228]	; (1910 <I2C1_IRQHandler+0x2d0>)
    182c:	6013      	str	r3, [r2, #0]
			if (WrIndex_1 != I2C1_WriteLength) {
    182e:	4b38      	ldr	r3, [pc, #224]	; (1910 <I2C1_IRQHandler+0x2d0>)
    1830:	681a      	ldr	r2, [r3, #0]
    1832:	4b38      	ldr	r3, [pc, #224]	; (1914 <I2C1_IRQHandler+0x2d4>)
    1834:	681b      	ldr	r3, [r3, #0]
    1836:	429a      	cmp	r2, r3
    1838:	d003      	beq.n	1842 <I2C1_IRQHandler+0x202>
				I2C1_MasterState = DATA_ACK;
    183a:	4b33      	ldr	r3, [pc, #204]	; (1908 <I2C1_IRQHandler+0x2c8>)
    183c:	2204      	movs	r2, #4
    183e:	601a      	str	r2, [r3, #0]
    1840:	e01e      	b.n	1880 <I2C1_IRQHandler+0x240>
			} else {
				I2C1_MasterState = DATA_NACK;
    1842:	4b31      	ldr	r3, [pc, #196]	; (1908 <I2C1_IRQHandler+0x2c8>)
    1844:	2205      	movs	r2, #5
    1846:	601a      	str	r2, [r3, #0]
				if (I2C1_ReadLength != 0) {
    1848:	4b33      	ldr	r3, [pc, #204]	; (1918 <I2C1_IRQHandler+0x2d8>)
    184a:	681b      	ldr	r3, [r3, #0]
    184c:	2b00      	cmp	r3, #0
    184e:	d017      	beq.n	1880 <I2C1_IRQHandler+0x240>
					LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    1850:	4b2b      	ldr	r3, [pc, #172]	; (1900 <I2C1_IRQHandler+0x2c0>)
    1852:	2220      	movs	r2, #32
    1854:	601a      	str	r2, [r3, #0]
					I2C1_MasterState = I2C_REPEATED_START;
    1856:	4b2c      	ldr	r3, [pc, #176]	; (1908 <I2C1_IRQHandler+0x2c8>)
    1858:	2203      	movs	r2, #3
    185a:	601a      	str	r2, [r3, #0]
    185c:	e010      	b.n	1880 <I2C1_IRQHandler+0x240>
				}
			}
		} else {
			if (I2C1_ReadLength != 0) {
    185e:	4b2e      	ldr	r3, [pc, #184]	; (1918 <I2C1_IRQHandler+0x2d8>)
    1860:	681b      	ldr	r3, [r3, #0]
    1862:	2b00      	cmp	r3, #0
    1864:	d006      	beq.n	1874 <I2C1_IRQHandler+0x234>
				LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    1866:	4b26      	ldr	r3, [pc, #152]	; (1900 <I2C1_IRQHandler+0x2c0>)
    1868:	2220      	movs	r2, #32
    186a:	601a      	str	r2, [r3, #0]
				I2C1_MasterState = I2C_REPEATED_START;
    186c:	4b26      	ldr	r3, [pc, #152]	; (1908 <I2C1_IRQHandler+0x2c8>)
    186e:	2203      	movs	r2, #3
    1870:	601a      	str	r2, [r3, #0]
    1872:	e005      	b.n	1880 <I2C1_IRQHandler+0x240>
			} else {
				I2C1_MasterState = DATA_NACK;
    1874:	4b24      	ldr	r3, [pc, #144]	; (1908 <I2C1_IRQHandler+0x2c8>)
    1876:	2205      	movs	r2, #5
    1878:	601a      	str	r2, [r3, #0]
				LPC_I2C1->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    187a:	4b21      	ldr	r3, [pc, #132]	; (1900 <I2C1_IRQHandler+0x2c0>)
    187c:	2210      	movs	r2, #16
    187e:	601a      	str	r2, [r3, #0]
			}
		}
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    1880:	4b1f      	ldr	r3, [pc, #124]	; (1900 <I2C1_IRQHandler+0x2c0>)
    1882:	2208      	movs	r2, #8
    1884:	619a      	str	r2, [r3, #24]
		break;
    1886:	e035      	b.n	18f4 <I2C1_IRQHandler+0x2b4>
	case 0x40: /* Master Receive, SLA_R has been sent */
		LPC_I2C1->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    1888:	4b1d      	ldr	r3, [pc, #116]	; (1900 <I2C1_IRQHandler+0x2c0>)
    188a:	2204      	movs	r2, #4
    188c:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    188e:	4b1c      	ldr	r3, [pc, #112]	; (1900 <I2C1_IRQHandler+0x2c0>)
    1890:	2208      	movs	r2, #8
    1892:	619a      	str	r2, [r3, #24]
		break;
    1894:	e02e      	b.n	18f4 <I2C1_IRQHandler+0x2b4>
	case 0x50: /* Data byte has been received, regardless following ACK or NACK */
	case 0x58:
		I2C1_MasterBuffer[3 + RdIndex_1] = LPC_I2C1->I2DAT;
    1896:	4b21      	ldr	r3, [pc, #132]	; (191c <I2C1_IRQHandler+0x2dc>)
    1898:	681b      	ldr	r3, [r3, #0]
    189a:	3303      	adds	r3, #3
    189c:	4a18      	ldr	r2, [pc, #96]	; (1900 <I2C1_IRQHandler+0x2c0>)
    189e:	6892      	ldr	r2, [r2, #8]
    18a0:	b2d1      	uxtb	r1, r2
    18a2:	4a18      	ldr	r2, [pc, #96]	; (1904 <I2C1_IRQHandler+0x2c4>)
    18a4:	54d1      	strb	r1, [r2, r3]
		RdIndex_1++;
    18a6:	4b1d      	ldr	r3, [pc, #116]	; (191c <I2C1_IRQHandler+0x2dc>)
    18a8:	681b      	ldr	r3, [r3, #0]
    18aa:	3301      	adds	r3, #1
    18ac:	4a1b      	ldr	r2, [pc, #108]	; (191c <I2C1_IRQHandler+0x2dc>)
    18ae:	6013      	str	r3, [r2, #0]
		if (RdIndex_1 != I2C1_ReadLength) {
    18b0:	4b1a      	ldr	r3, [pc, #104]	; (191c <I2C1_IRQHandler+0x2dc>)
    18b2:	681a      	ldr	r2, [r3, #0]
    18b4:	4b18      	ldr	r3, [pc, #96]	; (1918 <I2C1_IRQHandler+0x2d8>)
    18b6:	681b      	ldr	r3, [r3, #0]
    18b8:	429a      	cmp	r2, r3
    18ba:	d003      	beq.n	18c4 <I2C1_IRQHandler+0x284>
			I2C1_MasterState = DATA_ACK;
    18bc:	4b12      	ldr	r3, [pc, #72]	; (1908 <I2C1_IRQHandler+0x2c8>)
    18be:	2204      	movs	r2, #4
    18c0:	601a      	str	r2, [r3, #0]
    18c2:	e005      	b.n	18d0 <I2C1_IRQHandler+0x290>
		} else {
			RdIndex_1 = 0;
    18c4:	4b15      	ldr	r3, [pc, #84]	; (191c <I2C1_IRQHandler+0x2dc>)
    18c6:	2200      	movs	r2, #0
    18c8:	601a      	str	r2, [r3, #0]
			I2C1_MasterState = DATA_NACK;
    18ca:	4b0f      	ldr	r3, [pc, #60]	; (1908 <I2C1_IRQHandler+0x2c8>)
    18cc:	2205      	movs	r2, #5
    18ce:	601a      	str	r2, [r3, #0]
		}
		LPC_I2C1->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    18d0:	4b0b      	ldr	r3, [pc, #44]	; (1900 <I2C1_IRQHandler+0x2c0>)
    18d2:	2204      	movs	r2, #4
    18d4:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    18d6:	4b0a      	ldr	r3, [pc, #40]	; (1900 <I2C1_IRQHandler+0x2c0>)
    18d8:	2208      	movs	r2, #8
    18da:	619a      	str	r2, [r3, #24]
		break;
    18dc:	e00a      	b.n	18f4 <I2C1_IRQHandler+0x2b4>
	case 0x20: /* regardless, it's a NACK */
	case 0x48:
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    18de:	4b08      	ldr	r3, [pc, #32]	; (1900 <I2C1_IRQHandler+0x2c0>)
    18e0:	2208      	movs	r2, #8
    18e2:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = DATA_NACK;
    18e4:	4b08      	ldr	r3, [pc, #32]	; (1908 <I2C1_IRQHandler+0x2c8>)
    18e6:	2205      	movs	r2, #5
    18e8:	601a      	str	r2, [r3, #0]
		break;
    18ea:	e003      	b.n	18f4 <I2C1_IRQHandler+0x2b4>
	case 0x38: /* Arbitration lost, in this example, we don't
	 deal with multiple master situation */
	default:
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    18ec:	4b04      	ldr	r3, [pc, #16]	; (1900 <I2C1_IRQHandler+0x2c0>)
    18ee:	2208      	movs	r2, #8
    18f0:	619a      	str	r2, [r3, #24]
		break;
    18f2:	bf00      	nop
	}
}
    18f4:	370c      	adds	r7, #12
    18f6:	46bd      	mov	sp, r7
    18f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    18fc:	4770      	bx	lr
    18fe:	bf00      	nop
    1900:	4005c000 	.word	0x4005c000
    1904:	1000101c 	.word	0x1000101c
    1908:	10000ff4 	.word	0x10000ff4
    190c:	10000ff0 	.word	0x10000ff0
    1910:	10001060 	.word	0x10001060
    1914:	10000fb0 	.word	0x10000fb0
    1918:	10000fc4 	.word	0x10000fc4
    191c:	10000fb4 	.word	0x10000fb4

00001920 <I2CStart>:
 **
 ** parameters:			None
 ** Returned value:		true or false, return false if timed out
 **
 *****************************************************************************/
uint32_t I2CStart(uint8_t port) {
    1920:	b480      	push	{r7}
    1922:	b085      	sub	sp, #20
    1924:	af00      	add	r7, sp, #0
    1926:	4603      	mov	r3, r0
    1928:	71fb      	strb	r3, [r7, #7]
	uint32_t timeout = 0;
    192a:	2300      	movs	r3, #0
    192c:	60fb      	str	r3, [r7, #12]
	uint32_t retVal = 0;
    192e:	2300      	movs	r3, #0
    1930:	60bb      	str	r3, [r7, #8]
	if (port == 0){
    1932:	79fb      	ldrb	r3, [r7, #7]
    1934:	2b00      	cmp	r3, #0
    1936:	d116      	bne.n	1966 <I2CStart+0x46>
			/*--- Issue a start condition ---*/
			LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Start flag */
    1938:	4b1b      	ldr	r3, [pc, #108]	; (19a8 <I2CStart+0x88>)
    193a:	2220      	movs	r2, #32
    193c:	601a      	str	r2, [r3, #0]
			/*--- Wait until START transmitted ---*/
			while (1) {
				if (I2C0_MasterState == I2C_STARTED) {
    193e:	4b1b      	ldr	r3, [pc, #108]	; (19ac <I2CStart+0x8c>)
    1940:	681b      	ldr	r3, [r3, #0]
    1942:	2b01      	cmp	r3, #1
    1944:	d102      	bne.n	194c <I2CStart+0x2c>
					retVal = 1;
    1946:	2301      	movs	r3, #1
    1948:	60bb      	str	r3, [r7, #8]
					break;
    194a:	e00a      	b.n	1962 <I2CStart+0x42>
				}
				if (timeout >= MAX_TIMEOUT) {
    194c:	68fb      	ldr	r3, [r7, #12]
    194e:	4a18      	ldr	r2, [pc, #96]	; (19b0 <I2CStart+0x90>)
    1950:	4293      	cmp	r3, r2
    1952:	d902      	bls.n	195a <I2CStart+0x3a>
					retVal = 0;
    1954:	2300      	movs	r3, #0
    1956:	60bb      	str	r3, [r7, #8]
					break;
    1958:	e003      	b.n	1962 <I2CStart+0x42>
				}
				timeout++;
    195a:	68fb      	ldr	r3, [r7, #12]
    195c:	3301      	adds	r3, #1
    195e:	60fb      	str	r3, [r7, #12]
			}
    1960:	e7ed      	b.n	193e <I2CStart+0x1e>
			return (retVal);
    1962:	68bb      	ldr	r3, [r7, #8]
    1964:	e01a      	b.n	199c <I2CStart+0x7c>
		}
	else if (port == 1){
    1966:	79fb      	ldrb	r3, [r7, #7]
    1968:	2b01      	cmp	r3, #1
    196a:	d116      	bne.n	199a <I2CStart+0x7a>
		/*--- Issue a start condition ---*/
		LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Start flag */
    196c:	4b11      	ldr	r3, [pc, #68]	; (19b4 <I2CStart+0x94>)
    196e:	2220      	movs	r2, #32
    1970:	601a      	str	r2, [r3, #0]
		/*--- Wait until START transmitted ---*/
		while (1) {
			if (I2C1_MasterState == I2C_STARTED) {
    1972:	4b11      	ldr	r3, [pc, #68]	; (19b8 <I2CStart+0x98>)
    1974:	681b      	ldr	r3, [r3, #0]
    1976:	2b01      	cmp	r3, #1
    1978:	d102      	bne.n	1980 <I2CStart+0x60>
				retVal = 1;
    197a:	2301      	movs	r3, #1
    197c:	60bb      	str	r3, [r7, #8]
				break;
    197e:	e00a      	b.n	1996 <I2CStart+0x76>
			}
			if (timeout >= MAX_TIMEOUT) {
    1980:	68fb      	ldr	r3, [r7, #12]
    1982:	4a0b      	ldr	r2, [pc, #44]	; (19b0 <I2CStart+0x90>)
    1984:	4293      	cmp	r3, r2
    1986:	d902      	bls.n	198e <I2CStart+0x6e>
				retVal = 0;
    1988:	2300      	movs	r3, #0
    198a:	60bb      	str	r3, [r7, #8]
				break;
    198c:	e003      	b.n	1996 <I2CStart+0x76>
			}
			timeout++;
    198e:	68fb      	ldr	r3, [r7, #12]
    1990:	3301      	adds	r3, #1
    1992:	60fb      	str	r3, [r7, #12]
		}
    1994:	e7ed      	b.n	1972 <I2CStart+0x52>
		return (retVal);
    1996:	68bb      	ldr	r3, [r7, #8]
    1998:	e000      	b.n	199c <I2CStart+0x7c>
	}
	return 0;
    199a:	2300      	movs	r3, #0
}
    199c:	4618      	mov	r0, r3
    199e:	3714      	adds	r7, #20
    19a0:	46bd      	mov	sp, r7
    19a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    19a6:	4770      	bx	lr
    19a8:	4001c000 	.word	0x4001c000
    19ac:	10000024 	.word	0x10000024
    19b0:	00fffffe 	.word	0x00fffffe
    19b4:	4005c000 	.word	0x4005c000
    19b8:	10000ff4 	.word	0x10000ff4

000019bc <I2CStop>:
 **
 ** parameters:			None
 ** Returned value:		true or never return
 **
 *****************************************************************************/
uint32_t I2CStop(uint8_t port) {
    19bc:	b480      	push	{r7}
    19be:	b083      	sub	sp, #12
    19c0:	af00      	add	r7, sp, #0
    19c2:	4603      	mov	r3, r0
    19c4:	71fb      	strb	r3, [r7, #7]
	if (port == 0){
    19c6:	79fb      	ldrb	r3, [r7, #7]
    19c8:	2b00      	cmp	r3, #0
    19ca:	d10e      	bne.n	19ea <I2CStop+0x2e>
		LPC_I2C0->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    19cc:	4b13      	ldr	r3, [pc, #76]	; (1a1c <I2CStop+0x60>)
    19ce:	2210      	movs	r2, #16
    19d0:	601a      	str	r2, [r3, #0]
		LPC_I2C0->I2CONCLR = I2CONCLR_SIC; /* Clear SI flag */
    19d2:	4b12      	ldr	r3, [pc, #72]	; (1a1c <I2CStop+0x60>)
    19d4:	2208      	movs	r2, #8
    19d6:	619a      	str	r2, [r3, #24]
		/*--- Wait for STOP detected ---*/
		while (LPC_I2C0->I2CONSET & I2CONSET_STO);
    19d8:	bf00      	nop
    19da:	4b10      	ldr	r3, [pc, #64]	; (1a1c <I2CStop+0x60>)
    19dc:	681b      	ldr	r3, [r3, #0]
    19de:	f003 0310 	and.w	r3, r3, #16
    19e2:	2b00      	cmp	r3, #0
    19e4:	d1f9      	bne.n	19da <I2CStop+0x1e>
		return 1;
    19e6:	2301      	movs	r3, #1
    19e8:	e012      	b.n	1a10 <I2CStop+0x54>
	}else if(port == 1){
    19ea:	79fb      	ldrb	r3, [r7, #7]
    19ec:	2b01      	cmp	r3, #1
    19ee:	d10e      	bne.n	1a0e <I2CStop+0x52>
		LPC_I2C1->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    19f0:	4b0b      	ldr	r3, [pc, #44]	; (1a20 <I2CStop+0x64>)
    19f2:	2210      	movs	r2, #16
    19f4:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC; /* Clear SI flag */
    19f6:	4b0a      	ldr	r3, [pc, #40]	; (1a20 <I2CStop+0x64>)
    19f8:	2208      	movs	r2, #8
    19fa:	619a      	str	r2, [r3, #24]
		/*--- Wait for STOP detected ---*/
		while (LPC_I2C1->I2CONSET & I2CONSET_STO);
    19fc:	bf00      	nop
    19fe:	4b08      	ldr	r3, [pc, #32]	; (1a20 <I2CStop+0x64>)
    1a00:	681b      	ldr	r3, [r3, #0]
    1a02:	f003 0310 	and.w	r3, r3, #16
    1a06:	2b00      	cmp	r3, #0
    1a08:	d1f9      	bne.n	19fe <I2CStop+0x42>
		return 1;
    1a0a:	2301      	movs	r3, #1
    1a0c:	e000      	b.n	1a10 <I2CStop+0x54>
	}
	return 0;
    1a0e:	2300      	movs	r3, #0
}
    1a10:	4618      	mov	r0, r3
    1a12:	370c      	adds	r7, #12
    1a14:	46bd      	mov	sp, r7
    1a16:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a1a:	4770      	bx	lr
    1a1c:	4001c000 	.word	0x4001c000
    1a20:	4005c000 	.word	0x4005c000

00001a24 <I2CInit>:
 ** parameters:			I2c mode is either MASTER or SLAVE
 ** Returned value:		true or false, return false if the I2C
 **				interrupt handler was not installed correctly
 **
 *****************************************************************************/
uint32_t I2CInit(uint8_t port,uint32_t I2cMode) {
    1a24:	b580      	push	{r7, lr}
    1a26:	b082      	sub	sp, #8
    1a28:	af00      	add	r7, sp, #0
    1a2a:	4603      	mov	r3, r0
    1a2c:	6039      	str	r1, [r7, #0]
    1a2e:	71fb      	strb	r3, [r7, #7]
	if (port == 0){
    1a30:	79fb      	ldrb	r3, [r7, #7]
    1a32:	2b00      	cmp	r3, #0
    1a34:	d12a      	bne.n	1a8c <I2CInit+0x68>
		LPC_SC->PCONP |= (1 << 7);
    1a36:	4a34      	ldr	r2, [pc, #208]	; (1b08 <I2CInit+0xe4>)
    1a38:	4b33      	ldr	r3, [pc, #204]	; (1b08 <I2CInit+0xe4>)
    1a3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1a42:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	    //LPC_PINCON->PINSEL1 &= ~0x03C00000;
	    //LPC_PINCON->PINSEL1 |=  0x01400000;
		/* set PIO0.27 and PIO0.28 to I2C0 SDA and SCL */
		/* function to 01 on both SDA and SCL. */
		LPC_PINCON->PINSEL1 &= ~((0x03<<22)|(0x03<<24));
    1a46:	4a31      	ldr	r2, [pc, #196]	; (1b0c <I2CInit+0xe8>)
    1a48:	4b30      	ldr	r3, [pc, #192]	; (1b0c <I2CInit+0xe8>)
    1a4a:	685b      	ldr	r3, [r3, #4]
    1a4c:	f023 7370 	bic.w	r3, r3, #62914560	; 0x3c00000
    1a50:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINSEL1 |= ((0x01<<22)|(0x01<<24));
    1a52:	4a2e      	ldr	r2, [pc, #184]	; (1b0c <I2CInit+0xe8>)
    1a54:	4b2d      	ldr	r3, [pc, #180]	; (1b0c <I2CInit+0xe8>)
    1a56:	685b      	ldr	r3, [r3, #4]
    1a58:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
    1a5c:	6053      	str	r3, [r2, #4]
	    //LPC_SC->PCLKSEL0 &= ~(3 << 14); // clear bits
	    //LPC_SC->PCLKSEL0 |=  (3 << 14); // set to "01" (full speed)
		//PINMODE is not required for P0.27, P0.28 these are dedicated open drain I2C pins.
		/*--- Clear flags ---*/
		LPC_I2C0->I2CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC
    1a5e:	4b2c      	ldr	r3, [pc, #176]	; (1b10 <I2CInit+0xec>)
    1a60:	226c      	movs	r2, #108	; 0x6c
    1a62:	619a      	str	r2, [r3, #24]
				| I2CONCLR_I2ENC;
		/*--- Reset registers ---*/
		LPC_PINCON->I2CPADCFG &= ~((0x1<<0)|(0x1<<2));
    1a64:	4a29      	ldr	r2, [pc, #164]	; (1b0c <I2CInit+0xe8>)
    1a66:	4b29      	ldr	r3, [pc, #164]	; (1b0c <I2CInit+0xe8>)
    1a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    1a6a:	f023 0305 	bic.w	r3, r3, #5
    1a6e:	67d3      	str	r3, [r2, #124]	; 0x7c
		LPC_I2C0->I2SCLL   = I2SCLL_SCLL;
    1a70:	4b27      	ldr	r3, [pc, #156]	; (1b10 <I2CInit+0xec>)
    1a72:	2280      	movs	r2, #128	; 0x80
    1a74:	615a      	str	r2, [r3, #20]
		LPC_I2C0->I2SCLH   = I2SCLH_SCLH;
    1a76:	4b26      	ldr	r3, [pc, #152]	; (1b10 <I2CInit+0xec>)
    1a78:	2280      	movs	r2, #128	; 0x80
    1a7a:	611a      	str	r2, [r3, #16]
		/* Install interrupt handler */
		NVIC_EnableIRQ(I2C0_IRQn);
    1a7c:	200a      	movs	r0, #10
    1a7e:	f7ff fc25 	bl	12cc <NVIC_EnableIRQ>
		LPC_I2C0->I2CONSET = I2CONSET_I2EN;
    1a82:	4b23      	ldr	r3, [pc, #140]	; (1b10 <I2CInit+0xec>)
    1a84:	2240      	movs	r2, #64	; 0x40
    1a86:	601a      	str	r2, [r3, #0]
		return (1);
    1a88:	2301      	movs	r3, #1
    1a8a:	e039      	b.n	1b00 <I2CInit+0xdc>
	}
	else if (port == 1){
    1a8c:	79fb      	ldrb	r3, [r7, #7]
    1a8e:	2b01      	cmp	r3, #1
    1a90:	d136      	bne.n	1b00 <I2CInit+0xdc>
		LPC_SC->PCONP |= (1 << 19);
    1a92:	4a1d      	ldr	r2, [pc, #116]	; (1b08 <I2CInit+0xe4>)
    1a94:	4b1c      	ldr	r3, [pc, #112]	; (1b08 <I2CInit+0xe4>)
    1a96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1a9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1a9e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		/* set PIO0.19 and PIO0.20 to I2C1 SDA and SCL */
		/* function to 11 on both SDA and SCL. */
		LPC_PINCON->PINSEL1 &= ~((0x3 << 6) | (0x3 << 8));
    1aa2:	4a1a      	ldr	r2, [pc, #104]	; (1b0c <I2CInit+0xe8>)
    1aa4:	4b19      	ldr	r3, [pc, #100]	; (1b0c <I2CInit+0xe8>)
    1aa6:	685b      	ldr	r3, [r3, #4]
    1aa8:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
    1aac:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINSEL1 |= ((0x3 << 6) | (0x3 << 8));
    1aae:	4a17      	ldr	r2, [pc, #92]	; (1b0c <I2CInit+0xe8>)
    1ab0:	4b16      	ldr	r3, [pc, #88]	; (1b0c <I2CInit+0xe8>)
    1ab2:	685b      	ldr	r3, [r3, #4]
    1ab4:	f443 7370 	orr.w	r3, r3, #960	; 0x3c0
    1ab8:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINMODE1 &= ~((0x3 << 6) | (0x3 << 8));
    1aba:	4a14      	ldr	r2, [pc, #80]	; (1b0c <I2CInit+0xe8>)
    1abc:	4b13      	ldr	r3, [pc, #76]	; (1b0c <I2CInit+0xe8>)
    1abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1ac0:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
    1ac4:	6453      	str	r3, [r2, #68]	; 0x44
		LPC_PINCON->PINMODE1 |= ((0x2 << 6) | (0x2 << 8)); /* No pull-up no pull-down */
    1ac6:	4a11      	ldr	r2, [pc, #68]	; (1b0c <I2CInit+0xe8>)
    1ac8:	4b10      	ldr	r3, [pc, #64]	; (1b0c <I2CInit+0xe8>)
    1aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1acc:	f443 7320 	orr.w	r3, r3, #640	; 0x280
    1ad0:	6453      	str	r3, [r2, #68]	; 0x44
		LPC_PINCON->PINMODE_OD0 |= ((0x1 << 19) | (0x1 << 20));
    1ad2:	4a0e      	ldr	r2, [pc, #56]	; (1b0c <I2CInit+0xe8>)
    1ad4:	4b0d      	ldr	r3, [pc, #52]	; (1b0c <I2CInit+0xe8>)
    1ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    1ad8:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
    1adc:	6693      	str	r3, [r2, #104]	; 0x68

		/*--- Clear flags ---*/
		LPC_I2C1->I2CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC
    1ade:	4b0d      	ldr	r3, [pc, #52]	; (1b14 <I2CInit+0xf0>)
    1ae0:	226c      	movs	r2, #108	; 0x6c
    1ae2:	619a      	str	r2, [r3, #24]
				| I2CONCLR_I2ENC;

		/*--- Reset registers ---*/
		LPC_I2C1->I2SCLL = I2SCLL_SCLL;
    1ae4:	4b0b      	ldr	r3, [pc, #44]	; (1b14 <I2CInit+0xf0>)
    1ae6:	2280      	movs	r2, #128	; 0x80
    1ae8:	615a      	str	r2, [r3, #20]
		LPC_I2C1->I2SCLH = I2SCLH_SCLH;
    1aea:	4b0a      	ldr	r3, [pc, #40]	; (1b14 <I2CInit+0xf0>)
    1aec:	2280      	movs	r2, #128	; 0x80
    1aee:	611a      	str	r2, [r3, #16]

		/* Install interrupt handler */
		NVIC_EnableIRQ(I2C1_IRQn);
    1af0:	200b      	movs	r0, #11
    1af2:	f7ff fbeb 	bl	12cc <NVIC_EnableIRQ>

		LPC_I2C1->I2CONSET = I2CONSET_I2EN;
    1af6:	4b07      	ldr	r3, [pc, #28]	; (1b14 <I2CInit+0xf0>)
    1af8:	2240      	movs	r2, #64	; 0x40
    1afa:	601a      	str	r2, [r3, #0]
		return (1);
    1afc:	2301      	movs	r3, #1
    1afe:	e7ff      	b.n	1b00 <I2CInit+0xdc>
	}
}
    1b00:	4618      	mov	r0, r3
    1b02:	3708      	adds	r7, #8
    1b04:	46bd      	mov	sp, r7
    1b06:	bd80      	pop	{r7, pc}
    1b08:	400fc000 	.word	0x400fc000
    1b0c:	4002c000 	.word	0x4002c000
    1b10:	4001c000 	.word	0x4001c000
    1b14:	4005c000 	.word	0x4005c000

00001b18 <I2CEngine>:
 ** Returned value:		true or false, return false only if the
 **				start condition can never be generated and
 **				timed out.
 **
 *****************************************************************************/
uint32_t I2CEngine(uint8_t port) {
    1b18:	b580      	push	{r7, lr}
    1b1a:	b084      	sub	sp, #16
    1b1c:	af00      	add	r7, sp, #0
    1b1e:	4603      	mov	r3, r0
    1b20:	71fb      	strb	r3, [r7, #7]
	int timeout = 0;
    1b22:	2300      	movs	r3, #0
    1b24:	60fb      	str	r3, [r7, #12]
	if (port == 0){
    1b26:	79fb      	ldrb	r3, [r7, #7]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d12a      	bne.n	1b82 <I2CEngine+0x6a>
			I2C0_MasterState = I2C_IDLE;
    1b2c:	4b2a      	ldr	r3, [pc, #168]	; (1bd8 <I2CEngine+0xc0>)
    1b2e:	2200      	movs	r2, #0
    1b30:	601a      	str	r2, [r3, #0]
			RdIndex_0 = 0;
    1b32:	4b2a      	ldr	r3, [pc, #168]	; (1bdc <I2CEngine+0xc4>)
    1b34:	2200      	movs	r2, #0
    1b36:	601a      	str	r2, [r3, #0]
			WrIndex_0 = 0;
    1b38:	4b29      	ldr	r3, [pc, #164]	; (1be0 <I2CEngine+0xc8>)
    1b3a:	2200      	movs	r2, #0
    1b3c:	601a      	str	r2, [r3, #0]
			if (I2CStart(port) != 1) {
    1b3e:	79fb      	ldrb	r3, [r7, #7]
    1b40:	4618      	mov	r0, r3
    1b42:	f7ff feed 	bl	1920 <I2CStart>
    1b46:	4603      	mov	r3, r0
    1b48:	2b01      	cmp	r3, #1
    1b4a:	d005      	beq.n	1b58 <I2CEngine+0x40>
				I2CStop(port);
    1b4c:	79fb      	ldrb	r3, [r7, #7]
    1b4e:	4618      	mov	r0, r3
    1b50:	f7ff ff34 	bl	19bc <I2CStop>
				return (0);
    1b54:	2300      	movs	r3, #0
    1b56:	e03a      	b.n	1bce <I2CEngine+0xb6>
			}

			while (1) {
				if (I2C0_MasterState == DATA_NACK) {
    1b58:	4b1f      	ldr	r3, [pc, #124]	; (1bd8 <I2CEngine+0xc0>)
    1b5a:	681b      	ldr	r3, [r3, #0]
    1b5c:	2b05      	cmp	r3, #5
    1b5e:	d104      	bne.n	1b6a <I2CEngine+0x52>
					I2CStop(port);
    1b60:	79fb      	ldrb	r3, [r7, #7]
    1b62:	4618      	mov	r0, r3
    1b64:	f7ff ff2a 	bl	19bc <I2CStop>
					break;
    1b68:	e009      	b.n	1b7e <I2CEngine+0x66>
				}
				if (timeout >= 0xFFFF) {
    1b6a:	68fb      	ldr	r3, [r7, #12]
    1b6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    1b70:	4293      	cmp	r3, r2
    1b72:	dd00      	ble.n	1b76 <I2CEngine+0x5e>
					break;
    1b74:	e003      	b.n	1b7e <I2CEngine+0x66>
				}
				timeout++;
    1b76:	68fb      	ldr	r3, [r7, #12]
    1b78:	3301      	adds	r3, #1
    1b7a:	60fb      	str	r3, [r7, #12]
			}
    1b7c:	e7ec      	b.n	1b58 <I2CEngine+0x40>
			return (1);
    1b7e:	2301      	movs	r3, #1
    1b80:	e025      	b.n	1bce <I2CEngine+0xb6>
		}
	else if (port == 1){
    1b82:	79fb      	ldrb	r3, [r7, #7]
    1b84:	2b01      	cmp	r3, #1
    1b86:	d121      	bne.n	1bcc <I2CEngine+0xb4>
		I2C1_MasterState = I2C_IDLE;
    1b88:	4b16      	ldr	r3, [pc, #88]	; (1be4 <I2CEngine+0xcc>)
    1b8a:	2200      	movs	r2, #0
    1b8c:	601a      	str	r2, [r3, #0]
		RdIndex_1 = 0;
    1b8e:	4b16      	ldr	r3, [pc, #88]	; (1be8 <I2CEngine+0xd0>)
    1b90:	2200      	movs	r2, #0
    1b92:	601a      	str	r2, [r3, #0]
		WrIndex_1 = 0;
    1b94:	4b15      	ldr	r3, [pc, #84]	; (1bec <I2CEngine+0xd4>)
    1b96:	2200      	movs	r2, #0
    1b98:	601a      	str	r2, [r3, #0]
		if (I2CStart(port) != 1) {
    1b9a:	79fb      	ldrb	r3, [r7, #7]
    1b9c:	4618      	mov	r0, r3
    1b9e:	f7ff febf 	bl	1920 <I2CStart>
    1ba2:	4603      	mov	r3, r0
    1ba4:	2b01      	cmp	r3, #1
    1ba6:	d005      	beq.n	1bb4 <I2CEngine+0x9c>
			I2CStop(port);
    1ba8:	79fb      	ldrb	r3, [r7, #7]
    1baa:	4618      	mov	r0, r3
    1bac:	f7ff ff06 	bl	19bc <I2CStop>
			return (0);
    1bb0:	2300      	movs	r3, #0
    1bb2:	e00c      	b.n	1bce <I2CEngine+0xb6>
		}

		while (1) {
			if (I2C1_MasterState == DATA_NACK) {
    1bb4:	4b0b      	ldr	r3, [pc, #44]	; (1be4 <I2CEngine+0xcc>)
    1bb6:	681b      	ldr	r3, [r3, #0]
    1bb8:	2b05      	cmp	r3, #5
    1bba:	d106      	bne.n	1bca <I2CEngine+0xb2>
				I2CStop(port);
    1bbc:	79fb      	ldrb	r3, [r7, #7]
    1bbe:	4618      	mov	r0, r3
    1bc0:	f7ff fefc 	bl	19bc <I2CStop>
				break;
    1bc4:	bf00      	nop
			}
		}
		return (1);
    1bc6:	2301      	movs	r3, #1
    1bc8:	e001      	b.n	1bce <I2CEngine+0xb6>
		while (1) {
			if (I2C1_MasterState == DATA_NACK) {
				I2CStop(port);
				break;
			}
		}
    1bca:	e7f3      	b.n	1bb4 <I2CEngine+0x9c>
		return (1);
	}
	return 0;
    1bcc:	2300      	movs	r3, #0
}
    1bce:	4618      	mov	r0, r3
    1bd0:	3710      	adds	r7, #16
    1bd2:	46bd      	mov	sp, r7
    1bd4:	bd80      	pop	{r7, pc}
    1bd6:	bf00      	nop
    1bd8:	10000024 	.word	0x10000024
    1bdc:	10000028 	.word	0x10000028
    1be0:	1000002c 	.word	0x1000002c
    1be4:	10000ff4 	.word	0x10000ff4
    1be8:	10000fb4 	.word	0x10000fb4
    1bec:	10001060 	.word	0x10001060

00001bf0 <i2c_read>:
			return 0;
	}
	return 0;
}

uint8_t i2c_read(uint8_t port, uint8_t register_addr) {
    1bf0:	b580      	push	{r7, lr}
    1bf2:	b084      	sub	sp, #16
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	4603      	mov	r3, r0
    1bf8:	460a      	mov	r2, r1
    1bfa:	71fb      	strb	r3, [r7, #7]
    1bfc:	4613      	mov	r3, r2
    1bfe:	71bb      	strb	r3, [r7, #6]
	int i;
	/* clear buffer */
	if (port == 0){
    1c00:	79fb      	ldrb	r3, [r7, #7]
    1c02:	2b00      	cmp	r3, #0
    1c04:	d128      	bne.n	1c58 <i2c_read+0x68>
		for (i = 0; i < BUFSIZE; i++) {
    1c06:	2300      	movs	r3, #0
    1c08:	60fb      	str	r3, [r7, #12]
    1c0a:	e007      	b.n	1c1c <i2c_read+0x2c>
			I2C0_MasterBuffer[i] = 0;
    1c0c:	4a2a      	ldr	r2, [pc, #168]	; (1cb8 <i2c_read+0xc8>)
    1c0e:	68fb      	ldr	r3, [r7, #12]
    1c10:	4413      	add	r3, r2
    1c12:	2200      	movs	r2, #0
    1c14:	701a      	strb	r2, [r3, #0]

uint8_t i2c_read(uint8_t port, uint8_t register_addr) {
	int i;
	/* clear buffer */
	if (port == 0){
		for (i = 0; i < BUFSIZE; i++) {
    1c16:	68fb      	ldr	r3, [r7, #12]
    1c18:	3301      	adds	r3, #1
    1c1a:	60fb      	str	r3, [r7, #12]
    1c1c:	68fb      	ldr	r3, [r7, #12]
    1c1e:	2b1f      	cmp	r3, #31
    1c20:	ddf4      	ble.n	1c0c <i2c_read+0x1c>
			I2C0_MasterBuffer[i] = 0;
		}
		I2C0_WriteLength = 2;
    1c22:	4b26      	ldr	r3, [pc, #152]	; (1cbc <i2c_read+0xcc>)
    1c24:	2202      	movs	r2, #2
    1c26:	601a      	str	r2, [r3, #0]
		I2C0_ReadLength = 1;
    1c28:	4b25      	ldr	r3, [pc, #148]	; (1cc0 <i2c_read+0xd0>)
    1c2a:	2201      	movs	r2, #1
    1c2c:	601a      	str	r2, [r3, #0]
		I2C0_MasterBuffer[0] = 0x3A;//ADR_BYTE_MMA7455;
    1c2e:	4b22      	ldr	r3, [pc, #136]	; (1cb8 <i2c_read+0xc8>)
    1c30:	223a      	movs	r2, #58	; 0x3a
    1c32:	701a      	strb	r2, [r3, #0]
		I2C0_MasterBuffer[1] = register_addr;
    1c34:	4a20      	ldr	r2, [pc, #128]	; (1cb8 <i2c_read+0xc8>)
    1c36:	79bb      	ldrb	r3, [r7, #6]
    1c38:	7053      	strb	r3, [r2, #1]
		I2C0_MasterBuffer[2] = 0x3B;//ADR_BYTE_MMA7455 | RD_BIT;
    1c3a:	4b1f      	ldr	r3, [pc, #124]	; (1cb8 <i2c_read+0xc8>)
    1c3c:	223b      	movs	r2, #59	; 0x3b
    1c3e:	709a      	strb	r2, [r3, #2]
		I2CEngine(port);
    1c40:	79fb      	ldrb	r3, [r7, #7]
    1c42:	4618      	mov	r0, r3
    1c44:	f7ff ff68 	bl	1b18 <I2CEngine>
		I2CStop(port);
    1c48:	79fb      	ldrb	r3, [r7, #7]
    1c4a:	4618      	mov	r0, r3
    1c4c:	f7ff feb6 	bl	19bc <I2CStop>
		return (I2C0_MasterBuffer[3]);
    1c50:	4b19      	ldr	r3, [pc, #100]	; (1cb8 <i2c_read+0xc8>)
    1c52:	78db      	ldrb	r3, [r3, #3]
    1c54:	b2db      	uxtb	r3, r3
    1c56:	e02b      	b.n	1cb0 <i2c_read+0xc0>
	}
	else if (port == 1){
    1c58:	79fb      	ldrb	r3, [r7, #7]
    1c5a:	2b01      	cmp	r3, #1
    1c5c:	d128      	bne.n	1cb0 <i2c_read+0xc0>
		for (i = 0; i < BUFSIZE; i++) {
    1c5e:	2300      	movs	r3, #0
    1c60:	60fb      	str	r3, [r7, #12]
    1c62:	e007      	b.n	1c74 <i2c_read+0x84>
			I2C1_MasterBuffer[i] = 0;
    1c64:	4a17      	ldr	r2, [pc, #92]	; (1cc4 <i2c_read+0xd4>)
    1c66:	68fb      	ldr	r3, [r7, #12]
    1c68:	4413      	add	r3, r2
    1c6a:	2200      	movs	r2, #0
    1c6c:	701a      	strb	r2, [r3, #0]
		I2CEngine(port);
		I2CStop(port);
		return (I2C0_MasterBuffer[3]);
	}
	else if (port == 1){
		for (i = 0; i < BUFSIZE; i++) {
    1c6e:	68fb      	ldr	r3, [r7, #12]
    1c70:	3301      	adds	r3, #1
    1c72:	60fb      	str	r3, [r7, #12]
    1c74:	68fb      	ldr	r3, [r7, #12]
    1c76:	2b1f      	cmp	r3, #31
    1c78:	ddf4      	ble.n	1c64 <i2c_read+0x74>
			I2C1_MasterBuffer[i] = 0;
		}
		I2C1_WriteLength = 2;
    1c7a:	4b13      	ldr	r3, [pc, #76]	; (1cc8 <i2c_read+0xd8>)
    1c7c:	2202      	movs	r2, #2
    1c7e:	601a      	str	r2, [r3, #0]
		I2C1_ReadLength = 1;
    1c80:	4b12      	ldr	r3, [pc, #72]	; (1ccc <i2c_read+0xdc>)
    1c82:	2201      	movs	r2, #1
    1c84:	601a      	str	r2, [r3, #0]
		I2C1_MasterBuffer[0] = ADR_BYTE_24AA02;
    1c86:	4b0f      	ldr	r3, [pc, #60]	; (1cc4 <i2c_read+0xd4>)
    1c88:	22a0      	movs	r2, #160	; 0xa0
    1c8a:	701a      	strb	r2, [r3, #0]
		I2C1_MasterBuffer[1] = register_addr;
    1c8c:	4a0d      	ldr	r2, [pc, #52]	; (1cc4 <i2c_read+0xd4>)
    1c8e:	79bb      	ldrb	r3, [r7, #6]
    1c90:	7053      	strb	r3, [r2, #1]
		I2C1_MasterBuffer[2] = ADR_BYTE_24AA02 | RD_BIT;
    1c92:	4b0c      	ldr	r3, [pc, #48]	; (1cc4 <i2c_read+0xd4>)
    1c94:	22a1      	movs	r2, #161	; 0xa1
    1c96:	709a      	strb	r2, [r3, #2]
		I2CEngine(port);
    1c98:	79fb      	ldrb	r3, [r7, #7]
    1c9a:	4618      	mov	r0, r3
    1c9c:	f7ff ff3c 	bl	1b18 <I2CEngine>
		I2CStop(port);
    1ca0:	79fb      	ldrb	r3, [r7, #7]
    1ca2:	4618      	mov	r0, r3
    1ca4:	f7ff fe8a 	bl	19bc <I2CStop>
		return (I2C1_MasterBuffer[3]);
    1ca8:	4b06      	ldr	r3, [pc, #24]	; (1cc4 <i2c_read+0xd4>)
    1caa:	78db      	ldrb	r3, [r3, #3]
    1cac:	b2db      	uxtb	r3, r3
    1cae:	e7ff      	b.n	1cb0 <i2c_read+0xc0>
	}
}
    1cb0:	4618      	mov	r0, r3
    1cb2:	3710      	adds	r7, #16
    1cb4:	46bd      	mov	sp, r7
    1cb6:	bd80      	pop	{r7, pc}
    1cb8:	1000103c 	.word	0x1000103c
    1cbc:	10001018 	.word	0x10001018
    1cc0:	10000fc0 	.word	0x10000fc0
    1cc4:	1000101c 	.word	0x1000101c
    1cc8:	10000fb0 	.word	0x10000fb0
    1ccc:	10000fc4 	.word	0x10000fc4

00001cd0 <u32IAP_PrepareSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_PrepareSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
    1cd0:	b580      	push	{r7, lr}
    1cd2:	b08e      	sub	sp, #56	; 0x38
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1cda:	683a      	ldr	r2, [r7, #0]
    1cdc:	687b      	ldr	r3, [r7, #4]
    1cde:	429a      	cmp	r2, r3
    1ce0:	d202      	bcs.n	1ce8 <u32IAP_PrepareSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1ce2:	230c      	movs	r3, #12
    1ce4:	637b      	str	r3, [r7, #52]	; 0x34
    1ce6:	e00f      	b.n	1d08 <u32IAP_PrepareSectors+0x38>
	}
	else
	{
		au32Command[0] = IAP_CMD_PREPARE_SECTORS;
    1ce8:	2332      	movs	r3, #50	; 0x32
    1cea:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
    1cec:	687b      	ldr	r3, [r7, #4]
    1cee:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
    1cf0:	683b      	ldr	r3, [r7, #0]
    1cf2:	617b      	str	r3, [r7, #20]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1cf4:	f107 010c 	add.w	r1, r7, #12
    1cf8:	f107 0220 	add.w	r2, r7, #32
    1cfc:	4b05      	ldr	r3, [pc, #20]	; (1d14 <u32IAP_PrepareSectors+0x44>)
    1cfe:	4608      	mov	r0, r1
    1d00:	4611      	mov	r1, r2
    1d02:	4798      	blx	r3

		u32Status = au32Result[0];
    1d04:	6a3b      	ldr	r3, [r7, #32]
    1d06:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
    1d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    1d0a:	4618      	mov	r0, r3
    1d0c:	3738      	adds	r7, #56	; 0x38
    1d0e:	46bd      	mov	sp, r7
    1d10:	bd80      	pop	{r7, pc}
    1d12:	bf00      	nop
    1d14:	1fff1ff1 	.word	0x1fff1ff1

00001d18 <u32IAP_CopyRAMToFlash>:
*
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_CopyRAMToFlash(uint32_t u32DstAddr, uint32_t u32SrcAddr, uint32_t u32Len)
{
    1d18:	b580      	push	{r7, lr}
    1d1a:	b08e      	sub	sp, #56	; 0x38
    1d1c:	af00      	add	r7, sp, #0
    1d1e:	60f8      	str	r0, [r7, #12]
    1d20:	60b9      	str	r1, [r7, #8]
    1d22:	607a      	str	r2, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1d24:	b672      	cpsid	i
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	__disable_irq();
	au32Command[0] = IAP_CMD_COPY_RAM_TO_FLASH;
    1d26:	2333      	movs	r3, #51	; 0x33
    1d28:	613b      	str	r3, [r7, #16]
	au32Command[1] = u32DstAddr;
    1d2a:	68fb      	ldr	r3, [r7, #12]
    1d2c:	617b      	str	r3, [r7, #20]
	au32Command[2] = u32SrcAddr;
    1d2e:	68bb      	ldr	r3, [r7, #8]
    1d30:	61bb      	str	r3, [r7, #24]
	au32Command[3] = u32Len;
    1d32:	687b      	ldr	r3, [r7, #4]
    1d34:	61fb      	str	r3, [r7, #28]
	au32Command[4] = SystemCoreClock / 1000UL;	/* Core clock frequency in kHz */
    1d36:	4b0a      	ldr	r3, [pc, #40]	; (1d60 <u32IAP_CopyRAMToFlash+0x48>)
    1d38:	681b      	ldr	r3, [r3, #0]
    1d3a:	4a0a      	ldr	r2, [pc, #40]	; (1d64 <u32IAP_CopyRAMToFlash+0x4c>)
    1d3c:	fba2 2303 	umull	r2, r3, r2, r3
    1d40:	099b      	lsrs	r3, r3, #6
    1d42:	623b      	str	r3, [r7, #32]

	IAP_EXECUTE_CMD(au32Command, au32Result);
    1d44:	f107 0110 	add.w	r1, r7, #16
    1d48:	f107 0224 	add.w	r2, r7, #36	; 0x24
    1d4c:	4b06      	ldr	r3, [pc, #24]	; (1d68 <u32IAP_CopyRAMToFlash+0x50>)
    1d4e:	4608      	mov	r0, r1
    1d50:	4611      	mov	r1, r2
    1d52:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1d54:	b662      	cpsie	i

	__enable_irq();
	return ( au32Result[0] );
    1d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1d58:	4618      	mov	r0, r3
    1d5a:	3738      	adds	r7, #56	; 0x38
    1d5c:	46bd      	mov	sp, r7
    1d5e:	bd80      	pop	{r7, pc}
    1d60:	10000018 	.word	0x10000018
    1d64:	10624dd3 	.word	0x10624dd3
    1d68:	1fff1ff1 	.word	0x1fff1ff1

00001d6c <u32IAP_EraseSectors>:
*
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_EraseSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
    1d6c:	b580      	push	{r7, lr}
    1d6e:	b08e      	sub	sp, #56	; 0x38
    1d70:	af00      	add	r7, sp, #0
    1d72:	6078      	str	r0, [r7, #4]
    1d74:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1d76:	683a      	ldr	r2, [r7, #0]
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	429a      	cmp	r2, r3
    1d7c:	d202      	bcs.n	1d84 <u32IAP_EraseSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1d7e:	230c      	movs	r3, #12
    1d80:	637b      	str	r3, [r7, #52]	; 0x34
    1d82:	e018      	b.n	1db6 <u32IAP_EraseSectors+0x4a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1d84:	b672      	cpsid	i
	}
	else
	{
		__disable_irq();
		au32Command[0] = IAP_CMD_ERASE_SECTORS;
    1d86:	2334      	movs	r3, #52	; 0x34
    1d88:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
    1d8a:	687b      	ldr	r3, [r7, #4]
    1d8c:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
    1d8e:	683b      	ldr	r3, [r7, #0]
    1d90:	617b      	str	r3, [r7, #20]
		au32Command[3] = SystemCoreClock / 1000UL;	/* Core clock frequency in kHz */
    1d92:	4b0b      	ldr	r3, [pc, #44]	; (1dc0 <u32IAP_EraseSectors+0x54>)
    1d94:	681b      	ldr	r3, [r3, #0]
    1d96:	4a0b      	ldr	r2, [pc, #44]	; (1dc4 <u32IAP_EraseSectors+0x58>)
    1d98:	fba2 2303 	umull	r2, r3, r2, r3
    1d9c:	099b      	lsrs	r3, r3, #6
    1d9e:	61bb      	str	r3, [r7, #24]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1da0:	f107 010c 	add.w	r1, r7, #12
    1da4:	f107 0220 	add.w	r2, r7, #32
    1da8:	4b07      	ldr	r3, [pc, #28]	; (1dc8 <u32IAP_EraseSectors+0x5c>)
    1daa:	4608      	mov	r0, r1
    1dac:	4611      	mov	r1, r2
    1dae:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1db0:	b662      	cpsie	i

		__enable_irq();
		u32Status = au32Result[0];
    1db2:	6a3b      	ldr	r3, [r7, #32]
    1db4:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
    1db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    1db8:	4618      	mov	r0, r3
    1dba:	3738      	adds	r7, #56	; 0x38
    1dbc:	46bd      	mov	sp, r7
    1dbe:	bd80      	pop	{r7, pc}
    1dc0:	10000018 	.word	0x10000018
    1dc4:	10624dd3 	.word	0x10624dd3
    1dc8:	1fff1ff1 	.word	0x1fff1ff1

00001dcc <u32IAP_BlankCheckSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_BlankCheckSectors(uint32_t u32StartSector, uint32_t u32EndSector, uint32_t *pu32Result)
{
    1dcc:	b580      	push	{r7, lr}
    1dce:	b090      	sub	sp, #64	; 0x40
    1dd0:	af00      	add	r7, sp, #0
    1dd2:	60f8      	str	r0, [r7, #12]
    1dd4:	60b9      	str	r1, [r7, #8]
    1dd6:	607a      	str	r2, [r7, #4]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1dd8:	68ba      	ldr	r2, [r7, #8]
    1dda:	68fb      	ldr	r3, [r7, #12]
    1ddc:	429a      	cmp	r2, r3
    1dde:	d202      	bcs.n	1de6 <u32IAP_BlankCheckSectors+0x1a>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1de0:	230c      	movs	r3, #12
    1de2:	63fb      	str	r3, [r7, #60]	; 0x3c
    1de4:	e019      	b.n	1e1a <u32IAP_BlankCheckSectors+0x4e>
	}
	else
	{
		au32Command[0] = IAP_CMD_BLANK_CHECK_SECTORS;
    1de6:	2335      	movs	r3, #53	; 0x35
    1de8:	617b      	str	r3, [r7, #20]
		au32Command[1] = u32StartSector;
    1dea:	68fb      	ldr	r3, [r7, #12]
    1dec:	61bb      	str	r3, [r7, #24]
		au32Command[2] = u32EndSector;
    1dee:	68bb      	ldr	r3, [r7, #8]
    1df0:	61fb      	str	r3, [r7, #28]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1df2:	f107 0114 	add.w	r1, r7, #20
    1df6:	f107 0228 	add.w	r2, r7, #40	; 0x28
    1dfa:	4b0a      	ldr	r3, [pc, #40]	; (1e24 <u32IAP_BlankCheckSectors+0x58>)
    1dfc:	4608      	mov	r0, r1
    1dfe:	4611      	mov	r1, r2
    1e00:	4798      	blx	r3

		if (au32Result[0] == IAP_STA_SECTOR_NOT_BLANK)
    1e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1e04:	2b08      	cmp	r3, #8
    1e06:	d106      	bne.n	1e16 <u32IAP_BlankCheckSectors+0x4a>
		{
			*pu32Result       = au32Result[0];
    1e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1e0a:	687b      	ldr	r3, [r7, #4]
    1e0c:	601a      	str	r2, [r3, #0]
			*(pu32Result + 1) = au32Result[1];
    1e0e:	687b      	ldr	r3, [r7, #4]
    1e10:	3304      	adds	r3, #4
    1e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1e14:	601a      	str	r2, [r3, #0]
		}
		u32Status = au32Result[0];
    1e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1e18:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	return ( u32Status );
    1e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1e1c:	4618      	mov	r0, r3
    1e1e:	3740      	adds	r7, #64	; 0x40
    1e20:	46bd      	mov	sp, r7
    1e22:	bd80      	pop	{r7, pc}
    1e24:	1fff1ff1 	.word	0x1fff1ff1

00001e28 <u32IAP_Compare>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_Compare(uint32_t u32DstAddr, uint32_t u32SrcAddr, uint32_t u32Len, uint32_t *pu32Offset)
{
    1e28:	b580      	push	{r7, lr}
    1e2a:	b08e      	sub	sp, #56	; 0x38
    1e2c:	af00      	add	r7, sp, #0
    1e2e:	60f8      	str	r0, [r7, #12]
    1e30:	60b9      	str	r1, [r7, #8]
    1e32:	607a      	str	r2, [r7, #4]
    1e34:	603b      	str	r3, [r7, #0]
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	au32Command[0] = IAP_CMD_COMPARE;
    1e36:	2338      	movs	r3, #56	; 0x38
    1e38:	613b      	str	r3, [r7, #16]
	au32Command[1] = u32DstAddr;
    1e3a:	68fb      	ldr	r3, [r7, #12]
    1e3c:	617b      	str	r3, [r7, #20]
	au32Command[2] = u32SrcAddr;
    1e3e:	68bb      	ldr	r3, [r7, #8]
    1e40:	61bb      	str	r3, [r7, #24]
	au32Command[3] = u32Len;
    1e42:	687b      	ldr	r3, [r7, #4]
    1e44:	61fb      	str	r3, [r7, #28]

	IAP_EXECUTE_CMD(au32Command, au32Result);
    1e46:	f107 0110 	add.w	r1, r7, #16
    1e4a:	f107 0224 	add.w	r2, r7, #36	; 0x24
    1e4e:	4b09      	ldr	r3, [pc, #36]	; (1e74 <u32IAP_Compare+0x4c>)
    1e50:	4608      	mov	r0, r1
    1e52:	4611      	mov	r1, r2
    1e54:	4798      	blx	r3

	if (au32Result[0] == IAP_STA_COMPARE_ERROR)
    1e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e58:	2b0a      	cmp	r3, #10
    1e5a:	d105      	bne.n	1e68 <u32IAP_Compare+0x40>
	{
		if (pu32Offset != 0)
    1e5c:	683b      	ldr	r3, [r7, #0]
    1e5e:	2b00      	cmp	r3, #0
    1e60:	d002      	beq.n	1e68 <u32IAP_Compare+0x40>
		{
			*pu32Offset = au32Result[1];
    1e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1e64:	683b      	ldr	r3, [r7, #0]
    1e66:	601a      	str	r2, [r3, #0]
		}
	}
	return ( au32Result[0] );
    1e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1e6a:	4618      	mov	r0, r3
    1e6c:	3738      	adds	r7, #56	; 0x38
    1e6e:	46bd      	mov	sp, r7
    1e70:	bd80      	pop	{r7, pc}
    1e72:	bf00      	nop
    1e74:	1fff1ff1 	.word	0x1fff1ff1

00001e78 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1e78:	b480      	push	{r7}
    1e7a:	b083      	sub	sp, #12
    1e7c:	af00      	add	r7, sp, #0
    1e7e:	4603      	mov	r3, r0
    1e80:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1e82:	4908      	ldr	r1, [pc, #32]	; (1ea4 <NVIC_EnableIRQ+0x2c>)
    1e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1e88:	095b      	lsrs	r3, r3, #5
    1e8a:	79fa      	ldrb	r2, [r7, #7]
    1e8c:	f002 021f 	and.w	r2, r2, #31
    1e90:	2001      	movs	r0, #1
    1e92:	fa00 f202 	lsl.w	r2, r0, r2
    1e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr
    1ea4:	e000e100 	.word	0xe000e100

00001ea8 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1ea8:	b480      	push	{r7}
    1eaa:	b083      	sub	sp, #12
    1eac:	af00      	add	r7, sp, #0
    1eae:	4603      	mov	r3, r0
    1eb0:	6039      	str	r1, [r7, #0]
    1eb2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    1eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1eb8:	2b00      	cmp	r3, #0
    1eba:	da0b      	bge.n	1ed4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    1ebc:	490d      	ldr	r1, [pc, #52]	; (1ef4 <NVIC_SetPriority+0x4c>)
    1ebe:	79fb      	ldrb	r3, [r7, #7]
    1ec0:	f003 030f 	and.w	r3, r3, #15
    1ec4:	3b04      	subs	r3, #4
    1ec6:	683a      	ldr	r2, [r7, #0]
    1ec8:	b2d2      	uxtb	r2, r2
    1eca:	00d2      	lsls	r2, r2, #3
    1ecc:	b2d2      	uxtb	r2, r2
    1ece:	440b      	add	r3, r1
    1ed0:	761a      	strb	r2, [r3, #24]
    1ed2:	e009      	b.n	1ee8 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    1ed4:	4908      	ldr	r1, [pc, #32]	; (1ef8 <NVIC_SetPriority+0x50>)
    1ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1eda:	683a      	ldr	r2, [r7, #0]
    1edc:	b2d2      	uxtb	r2, r2
    1ede:	00d2      	lsls	r2, r2, #3
    1ee0:	b2d2      	uxtb	r2, r2
    1ee2:	440b      	add	r3, r1
    1ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    1ee8:	370c      	adds	r7, #12
    1eea:	46bd      	mov	sp, r7
    1eec:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ef0:	4770      	bx	lr
    1ef2:	bf00      	nop
    1ef4:	e000ed00 	.word	0xe000ed00
    1ef8:	e000e100 	.word	0xe000e100

00001efc <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
    1efc:	b580      	push	{r7, lr}
    1efe:	b082      	sub	sp, #8
    1f00:	af00      	add	r7, sp, #0
    1f02:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    1f0a:	d301      	bcc.n	1f10 <SysTick_Config+0x14>
    1f0c:	2301      	movs	r3, #1
    1f0e:	e011      	b.n	1f34 <SysTick_Config+0x38>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
    1f10:	4a0a      	ldr	r2, [pc, #40]	; (1f3c <SysTick_Config+0x40>)
    1f12:	687b      	ldr	r3, [r7, #4]
    1f14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1f18:	3b01      	subs	r3, #1
    1f1a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
    1f1c:	f04f 30ff 	mov.w	r0, #4294967295
    1f20:	211f      	movs	r1, #31
    1f22:	f7ff ffc1 	bl	1ea8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    1f26:	4b05      	ldr	r3, [pc, #20]	; (1f3c <SysTick_Config+0x40>)
    1f28:	2200      	movs	r2, #0
    1f2a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
    1f2c:	4b03      	ldr	r3, [pc, #12]	; (1f3c <SysTick_Config+0x40>)
    1f2e:	2207      	movs	r2, #7
    1f30:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
    1f32:	2300      	movs	r3, #0
}
    1f34:	4618      	mov	r0, r3
    1f36:	3708      	adds	r7, #8
    1f38:	46bd      	mov	sp, r7
    1f3a:	bd80      	pop	{r7, pc}
    1f3c:	e000e010 	.word	0xe000e010

00001f40 <ConfigurePins>:
int extPowerPinVal = 0;
char cell_buf[15];
short is_cell_only = 1;


void ConfigurePins() {
    1f40:	b580      	push	{r7, lr}
    1f42:	b082      	sub	sp, #8
    1f44:	af00      	add	r7, sp, #0
	//PWRKEY & EMERG_OFF
	LPC_PINCON->PINSEL4 &= ~(0xFFFF); // Reset P2[0..7] = GPIO
    1f46:	4a34      	ldr	r2, [pc, #208]	; (2018 <ConfigurePins+0xd8>)
    1f48:	4b33      	ldr	r3, [pc, #204]	; (2018 <ConfigurePins+0xd8>)
    1f4a:	691b      	ldr	r3, [r3, #16]
    1f4c:	0c1b      	lsrs	r3, r3, #16
    1f4e:	041b      	lsls	r3, r3, #16
    1f50:	6113      	str	r3, [r2, #16]
	LPC_GPIO2->FIODIR |= 0xFF; // P2[0..7] =
    1f52:	4a32      	ldr	r2, [pc, #200]	; (201c <ConfigurePins+0xdc>)
    1f54:	4b31      	ldr	r3, [pc, #196]	; (201c <ConfigurePins+0xdc>)
    1f56:	681b      	ldr	r3, [r3, #0]
    1f58:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1f5c:	6013      	str	r3, [r2, #0]
	LPC_PINCON->PINSEL9 &= ~(0xFFFF); // Reset P4[24..31] = GPIO
    1f5e:	4a2e      	ldr	r2, [pc, #184]	; (2018 <ConfigurePins+0xd8>)
    1f60:	4b2d      	ldr	r3, [pc, #180]	; (2018 <ConfigurePins+0xd8>)
    1f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1f64:	0c1b      	lsrs	r3, r3, #16
    1f66:	041b      	lsls	r3, r3, #16
    1f68:	6253      	str	r3, [r2, #36]	; 0x24
	LPC_GPIO4->FIODIR = (1 << 28) | (1 << 29);
    1f6a:	4b2d      	ldr	r3, [pc, #180]	; (2020 <ConfigurePins+0xe0>)
    1f6c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    1f70:	601a      	str	r2, [r3, #0]
	LPC_GPIO0->FIODIR &= (1 << 7); //P0[7] DIN 1 as input --> Default mode pull up enabled.
    1f72:	4a2c      	ldr	r2, [pc, #176]	; (2024 <ConfigurePins+0xe4>)
    1f74:	4b2b      	ldr	r3, [pc, #172]	; (2024 <ConfigurePins+0xe4>)
    1f76:	681b      	ldr	r3, [r3, #0]
    1f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1f7c:	6013      	str	r3, [r2, #0]
	LPC_GPIO0->FIODIR &= ~(1 << 29 | 1 << 30); //P0[30] as input
    1f7e:	4a29      	ldr	r2, [pc, #164]	; (2024 <ConfigurePins+0xe4>)
    1f80:	4b28      	ldr	r3, [pc, #160]	; (2024 <ConfigurePins+0xe4>)
    1f82:	681b      	ldr	r3, [r3, #0]
    1f84:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
    1f88:	6013      	str	r3, [r2, #0]
	LPC_GPIO0->FIODIR |= (1 << 5);
    1f8a:	4a26      	ldr	r2, [pc, #152]	; (2024 <ConfigurePins+0xe4>)
    1f8c:	4b25      	ldr	r3, [pc, #148]	; (2024 <ConfigurePins+0xe4>)
    1f8e:	681b      	ldr	r3, [r3, #0]
    1f90:	f043 0320 	orr.w	r3, r3, #32
    1f94:	6013      	str	r3, [r2, #0]
	//Init ADC
	uint32_t u32PCLKDIV, u32PCLK;
	LPC_SC->PCONP |= (1 << 12);
    1f96:	4a24      	ldr	r2, [pc, #144]	; (2028 <ConfigurePins+0xe8>)
    1f98:	4b23      	ldr	r3, [pc, #140]	; (2028 <ConfigurePins+0xe8>)
    1f9a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1f9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1fa2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	u32PCLKDIV = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
    1fa6:	4b20      	ldr	r3, [pc, #128]	; (2028 <ConfigurePins+0xe8>)
    1fa8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    1fac:	099b      	lsrs	r3, r3, #6
    1fae:	f003 0303 	and.w	r3, r3, #3
    1fb2:	607b      	str	r3, [r7, #4]
	switch (u32PCLKDIV) {
    1fb4:	687b      	ldr	r3, [r7, #4]
    1fb6:	2b02      	cmp	r3, #2
    1fb8:	d009      	beq.n	1fce <ConfigurePins+0x8e>
    1fba:	2b03      	cmp	r3, #3
    1fbc:	d00a      	beq.n	1fd4 <ConfigurePins+0x94>
    1fbe:	2b01      	cmp	r3, #1
    1fc0:	d002      	beq.n	1fc8 <ConfigurePins+0x88>
	case 0x00:
	default:
		u32PCLK = 12000000 / 4;
    1fc2:	4b1a      	ldr	r3, [pc, #104]	; (202c <ConfigurePins+0xec>)
    1fc4:	603b      	str	r3, [r7, #0]
		break;
    1fc6:	e008      	b.n	1fda <ConfigurePins+0x9a>
	case 0x01:
		u32PCLK = 12000000;
    1fc8:	4b19      	ldr	r3, [pc, #100]	; (2030 <ConfigurePins+0xf0>)
    1fca:	603b      	str	r3, [r7, #0]
		break;
    1fcc:	e005      	b.n	1fda <ConfigurePins+0x9a>
	case 0x02:
		u32PCLK = 12000000 / 2;
    1fce:	4b19      	ldr	r3, [pc, #100]	; (2034 <ConfigurePins+0xf4>)
    1fd0:	603b      	str	r3, [r7, #0]
		break;
    1fd2:	e002      	b.n	1fda <ConfigurePins+0x9a>
	case 0x03:
		u32PCLK = 12000000 / 8;
    1fd4:	4b18      	ldr	r3, [pc, #96]	; (2038 <ConfigurePins+0xf8>)
    1fd6:	603b      	str	r3, [r7, #0]
		break;
    1fd8:	bf00      	nop
	//LPC_ADC->ADCR = (1 << 3) | ((u32PCLK / 12000000 - 1) << 8) | (0 << 16) | (0
	//		<< 17) | (1 << 21) | (0 << 24) | (0 << 27);
	//LPC_PINCON->PINSEL1 |= (1U << 20);
	///ADC//
	//External Power Pin
	LPC_GPIO0->FIODIR &= ~(1 << 22);
    1fda:	4a12      	ldr	r2, [pc, #72]	; (2024 <ConfigurePins+0xe4>)
    1fdc:	4b11      	ldr	r3, [pc, #68]	; (2024 <ConfigurePins+0xe4>)
    1fde:	681b      	ldr	r3, [r3, #0]
    1fe0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    1fe4:	6013      	str	r3, [r2, #0]
	//Ignition Pin
	LPC_GPIO0->FIODIR &= ~(1 << 21);
    1fe6:	4a0f      	ldr	r2, [pc, #60]	; (2024 <ConfigurePins+0xe4>)
    1fe8:	4b0e      	ldr	r3, [pc, #56]	; (2024 <ConfigurePins+0xe4>)
    1fea:	681b      	ldr	r3, [r3, #0]
    1fec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
    1ff0:	6013      	str	r3, [r2, #0]
	#ifdef brisa
		DIGITAL_IN1_PIN = 21;
	#endif
	LPC_GPIOINT->IO0IntEnR |= (1 << 22); // Rising edge
    1ff2:	4a12      	ldr	r2, [pc, #72]	; (203c <ConfigurePins+0xfc>)
    1ff4:	4b11      	ldr	r3, [pc, #68]	; (203c <ConfigurePins+0xfc>)
    1ff6:	691b      	ldr	r3, [r3, #16]
    1ff8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1ffc:	6113      	str	r3, [r2, #16]
	LPC_GPIOINT->IO0IntEnF |= (1 << 22); // Falling edge
    1ffe:	4a0f      	ldr	r2, [pc, #60]	; (203c <ConfigurePins+0xfc>)
    2000:	4b0e      	ldr	r3, [pc, #56]	; (203c <ConfigurePins+0xfc>)
    2002:	695b      	ldr	r3, [r3, #20]
    2004:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    2008:	6153      	str	r3, [r2, #20]
	NVIC_EnableIRQ(EINT3_IRQn);
    200a:	2015      	movs	r0, #21
    200c:	f7ff ff34 	bl	1e78 <NVIC_EnableIRQ>
}
    2010:	3708      	adds	r7, #8
    2012:	46bd      	mov	sp, r7
    2014:	bd80      	pop	{r7, pc}
    2016:	bf00      	nop
    2018:	4002c000 	.word	0x4002c000
    201c:	2009c040 	.word	0x2009c040
    2020:	2009c080 	.word	0x2009c080
    2024:	2009c000 	.word	0x2009c000
    2028:	400fc000 	.word	0x400fc000
    202c:	002dc6c0 	.word	0x002dc6c0
    2030:	00b71b00 	.word	0x00b71b00
    2034:	005b8d80 	.word	0x005b8d80
    2038:	0016e360 	.word	0x0016e360
    203c:	40028080 	.word	0x40028080

00002040 <main>:
			is_conn = GSM_ConnectToTrio();
	}
	return is_conn;
}

int main(void) {
    2040:	b580      	push	{r7, lr}
    2042:	b0b8      	sub	sp, #224	; 0xe0
    2044:	af00      	add	r7, sp, #0
	char buffer[200];
	device_power_state = high_power_state;
    2046:	4b6b      	ldr	r3, [pc, #428]	; (21f4 <main+0x1b4>)
    2048:	2201      	movs	r2, #1
    204a:	701a      	strb	r2, [r3, #0]
	SystemInit();
    204c:	f001 fcdc 	bl	3a08 <SystemInit>
	LPC_SC->CLKSRCSEL |= 0x01;//0x01;
    2050:	4a69      	ldr	r2, [pc, #420]	; (21f8 <main+0x1b8>)
    2052:	4b69      	ldr	r3, [pc, #420]	; (21f8 <main+0x1b8>)
    2054:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    2058:	f043 0301 	orr.w	r3, r3, #1
    205c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	LPC_SC->PLL0CFG |= 0x01; // Select external osc. as main clock.
    2060:	4a65      	ldr	r2, [pc, #404]	; (21f8 <main+0x1b8>)
    2062:	4b65      	ldr	r3, [pc, #404]	; (21f8 <main+0x1b8>)
    2064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    2068:	f043 0301 	orr.w	r3, r3, #1
    206c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	LPC_SC->CCLKCFG = 0x03; // Main PLL is divided by 8
    2070:	4b61      	ldr	r3, [pc, #388]	; (21f8 <main+0x1b8>)
    2072:	2203      	movs	r2, #3
    2074:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	SystemCoreClockUpdate();
    2078:	f001 fc70 	bl	395c <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000 - 1); // Generate f each 1 ms, used to enable DelayMs function?
    207c:	4b5f      	ldr	r3, [pc, #380]	; (21fc <main+0x1bc>)
    207e:	681b      	ldr	r3, [r3, #0]
    2080:	4a5f      	ldr	r2, [pc, #380]	; (2200 <main+0x1c0>)
    2082:	fba2 2303 	umull	r2, r3, r2, r3
    2086:	099b      	lsrs	r3, r3, #6
    2088:	3b01      	subs	r3, #1
    208a:	4618      	mov	r0, r3
    208c:	f7ff ff36 	bl	1efc <SysTick_Config>
	WDTInit(WDT_FEED_30_SECS);
    2090:	485c      	ldr	r0, [pc, #368]	; (2204 <main+0x1c4>)
    2092:	f001 f915 	bl	32c0 <WDTInit>

	ConfigurePins();
    2096:	f7ff ff53 	bl	1f40 <ConfigurePins>
	UARTInit(PORT_TRACE, 115200);
    209a:	2000      	movs	r0, #0
    209c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    20a0:	f000 fdf0 	bl	2c84 <UARTInit>
	UARTInit(PORT_GSM, 115200);
    20a4:	2001      	movs	r0, #1
    20a6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    20aa:	f000 fdeb 	bl	2c84 <UARTInit>
	UARTInit(PORT_GPS, Baudrate);
    20ae:	2002      	movs	r0, #2
    20b0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    20b4:	f000 fde6 	bl	2c84 <UARTInit>
	TraceNL("Hello P65 20150520.");
    20b8:	4853      	ldr	r0, [pc, #332]	; (2208 <main+0x1c8>)
    20ba:	f000 fa8d 	bl	25d8 <TraceNL>
	sprintf(buffer, "SystemCoreClock = %d Hz\n", SystemCoreClock);
    20be:	4b4f      	ldr	r3, [pc, #316]	; (21fc <main+0x1bc>)
    20c0:	681b      	ldr	r3, [r3, #0]
    20c2:	1d3a      	adds	r2, r7, #4
    20c4:	4610      	mov	r0, r2
    20c6:	4951      	ldr	r1, [pc, #324]	; (220c <main+0x1cc>)
    20c8:	461a      	mov	r2, r3
    20ca:	f001 fddf 	bl	3c8c <sprintf>
	//UARTSend(PORT_TRACE, buffer, count);
	Trace(buffer);
    20ce:	1d3b      	adds	r3, r7, #4
    20d0:	4618      	mov	r0, r3
    20d2:	f000 fa71 	bl	25b8 <Trace>
	if (EEPROM_Init() == 0) /* initialize I2c */{
    20d6:	f7fe fb4d 	bl	774 <EEPROM_Init>
    20da:	4603      	mov	r3, r0
    20dc:	2b00      	cmp	r3, #0
    20de:	d103      	bne.n	20e8 <main+0xa8>
		TraceNL("EEPROM Init Error."); /* Fatal error */
    20e0:	484b      	ldr	r0, [pc, #300]	; (2210 <main+0x1d0>)
    20e2:	f000 fa79 	bl	25d8 <TraceNL>
    20e6:	e002      	b.n	20ee <main+0xae>
	} else {
		TraceNL("EEPROM Init Ok.");
    20e8:	484a      	ldr	r0, [pc, #296]	; (2214 <main+0x1d4>)
    20ea:	f000 fa75 	bl	25d8 <TraceNL>
	}


	uint16_t crc = u16CRC_Calc16("adssadsadsadsadsadsa", 20);
    20ee:	484a      	ldr	r0, [pc, #296]	; (2218 <main+0x1d8>)
    20f0:	2114      	movs	r1, #20
    20f2:	f7ff f8b3 	bl	125c <u16CRC_Calc16>
    20f6:	4603      	mov	r3, r0
    20f8:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8

	sprintf(buffer, "CRC of adssadsadsadsadsadsa is : = %d \r\n", crc);
    20fc:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
    2100:	1d3a      	adds	r2, r7, #4
    2102:	4610      	mov	r0, r2
    2104:	4945      	ldr	r1, [pc, #276]	; (221c <main+0x1dc>)
    2106:	461a      	mov	r2, r3
    2108:	f001 fdc0 	bl	3c8c <sprintf>
	Trace(buffer);
    210c:	1d3b      	adds	r3, r7, #4
    210e:	4618      	mov	r0, r3
    2110:	f000 fa52 	bl	25b8 <Trace>
	LoadParams();
    2114:	f7fe f8f4 	bl	300 <LoadParams>
	unsigned long int lastGPSLedToggle = 0;
    2118:	2300      	movs	r3, #0
    211a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	memset(buffer, 0xAA, sizeof(buffer));
    211e:	1d3b      	adds	r3, r7, #4
    2120:	4618      	mov	r0, r3
    2122:	21aa      	movs	r1, #170	; 0xaa
    2124:	22c8      	movs	r2, #200	; 0xc8
    2126:	f001 fce9 	bl	3afc <memset>
	//u32BootLoader_ProgramFlash(buffer,0x30000,16);
	WDTFeed();
    212a:	f001 f8e7 	bl	32fc <WDTFeed>
	int is_sent = SUCCESS;
    212e:	2300      	movs	r3, #0
    2130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

	int is_last_speed_zero = 1;
    2134:	2301      	movs	r3, #1
    2136:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	int count ;

	device_power_state = high_power_state;
    213a:	4b2e      	ldr	r3, [pc, #184]	; (21f4 <main+0x1b4>)
    213c:	2201      	movs	r2, #1
    213e:	701a      	strb	r2, [r3, #0]

	/// TODO set a timer in order of update failure to return to older

	TraceNL( "Initializing Server Connection" );
    2140:	4837      	ldr	r0, [pc, #220]	; (2220 <main+0x1e0>)
    2142:	f000 fa49 	bl	25d8 <TraceNL>

	if( IsUpgradeRequested() )
    2146:	f000 f87f 	bl	2248 <IsUpgradeRequested>
    214a:	4603      	mov	r3, r0
    214c:	2b00      	cmp	r3, #0
    214e:	d04d      	beq.n	21ec <main+0x1ac>
	{
		TraceNL( "System image upgrade requested" );
    2150:	4834      	ldr	r0, [pc, #208]	; (2224 <main+0x1e4>)
    2152:	f000 fa41 	bl	25d8 <TraceNL>
		int8_t 	trials = 1;
    2156:	2301      	movs	r3, #1
    2158:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		while( trials-- > 0 )
    215c:	e039      	b.n	21d2 <main+0x192>
		{
			TraceNL( "Trial" );
    215e:	4832      	ldr	r0, [pc, #200]	; (2228 <main+0x1e8>)
    2160:	f000 fa3a 	bl	25d8 <TraceNL>
			 * 	Setup a server connection
			 *
			 */

			// InitializeServerConn();
			if( GSM_ConnectToTrioUpgradeServer() == SUCCESS )
    2164:	f7fe fc84 	bl	a70 <GSM_ConnectToTrioUpgradeServer>
    2168:	4603      	mov	r3, r0
    216a:	2b00      	cmp	r3, #0
    216c:	d12e      	bne.n	21cc <main+0x18c>
			{
				TraceNL( "Server Connection Established to Upgrade server" );
    216e:	482f      	ldr	r0, [pc, #188]	; (222c <main+0x1ec>)
    2170:	f000 fa32 	bl	25d8 <TraceNL>

				//GSM_SendToServerTCP( "[ST;70;r2246;P65-20150204-1;;HELLO]" );

				WDTFeed( );
    2174:	f001 f8c2 	bl	32fc <WDTFeed>

				DownloadSecondaryImage();
    2178:	f000 f876 	bl	2268 <DownloadSecondaryImage>

				WDTFeed( );
    217c:	f001 f8be 	bl	32fc <WDTFeed>
				TraceNL( "Download finished " );
    2180:	482b      	ldr	r0, [pc, #172]	; (2230 <main+0x1f0>)
    2182:	f000 fa29 	bl	25d8 <TraceNL>
				ExecuteApplicationImage( SECONDARY_IMAGE_LOAD_ADDR );
    2186:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    218a:	f000 f8d1 	bl	2330 <ExecuteApplicationImage>

				for ( count = 0; count < 100000000; count++)
    218e:	2300      	movs	r3, #0
    2190:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    2194:	e015      	b.n	21c2 <main+0x182>
					if( count % 10000000 == 0)
    2196:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
    219a:	4b26      	ldr	r3, [pc, #152]	; (2234 <main+0x1f4>)
    219c:	fb83 1302 	smull	r1, r3, r3, r2
    21a0:	1599      	asrs	r1, r3, #22
    21a2:	17d3      	asrs	r3, r2, #31
    21a4:	1acb      	subs	r3, r1, r3
    21a6:	4924      	ldr	r1, [pc, #144]	; (2238 <main+0x1f8>)
    21a8:	fb01 f303 	mul.w	r3, r1, r3
    21ac:	1ad3      	subs	r3, r2, r3
    21ae:	2b00      	cmp	r3, #0
    21b0:	d102      	bne.n	21b8 <main+0x178>
						TracePutc( '.' );
    21b2:	202e      	movs	r0, #46	; 0x2e
    21b4:	f000 fa28 	bl	2608 <TracePutc>

				WDTFeed( );
				TraceNL( "Download finished " );
				ExecuteApplicationImage( SECONDARY_IMAGE_LOAD_ADDR );

				for ( count = 0; count < 100000000; count++)
    21b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    21bc:	3301      	adds	r3, #1
    21be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    21c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    21c6:	4a1d      	ldr	r2, [pc, #116]	; (223c <main+0x1fc>)
    21c8:	4293      	cmp	r3, r2
    21ca:	dde4      	ble.n	2196 <main+0x156>
					if( count % 10000000 == 0)
						TracePutc( '.' );
			}
			TraceNL( "Trial end" );
    21cc:	481c      	ldr	r0, [pc, #112]	; (2240 <main+0x200>)
    21ce:	f000 fa03 	bl	25d8 <TraceNL>

	if( IsUpgradeRequested() )
	{
		TraceNL( "System image upgrade requested" );
		int8_t 	trials = 1;
		while( trials-- > 0 )
    21d2:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
    21d6:	b2d3      	uxtb	r3, r2
    21d8:	3b01      	subs	r3, #1
    21da:	b2db      	uxtb	r3, r3
    21dc:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    21e0:	b253      	sxtb	r3, r2
    21e2:	2b00      	cmp	r3, #0
    21e4:	dcbb      	bgt.n	215e <main+0x11e>
					if( count % 10000000 == 0)
						TracePutc( '.' );
			}
			TraceNL( "Trial end" );
		}
		TraceNL( "Finished upgrading" );
    21e6:	4817      	ldr	r0, [pc, #92]	; (2244 <main+0x204>)
    21e8:	f000 f9f6 	bl	25d8 <TraceNL>
//	// Valid application does not exists. Get one from UART 0
//	enter_serial_isp();
//
//	while ( 1 );	// assert should not get here
//	return (0);
}
    21ec:	4618      	mov	r0, r3
    21ee:	37e0      	adds	r7, #224	; 0xe0
    21f0:	46bd      	mov	sp, r7
    21f2:	bd80      	pop	{r7, pc}
    21f4:	10000f58 	.word	0x10000f58
    21f8:	400fc000 	.word	0x400fc000
    21fc:	10000018 	.word	0x10000018
    2200:	10624dd3 	.word	0x10624dd3
    2204:	0c6aea15 	.word	0x0c6aea15
    2208:	00006f54 	.word	0x00006f54
    220c:	00006f68 	.word	0x00006f68
    2210:	00006f84 	.word	0x00006f84
    2214:	00006f98 	.word	0x00006f98
    2218:	00006fa8 	.word	0x00006fa8
    221c:	00006fc0 	.word	0x00006fc0
    2220:	00006fec 	.word	0x00006fec
    2224:	0000700c 	.word	0x0000700c
    2228:	0000702c 	.word	0x0000702c
    222c:	00007034 	.word	0x00007034
    2230:	00007064 	.word	0x00007064
    2234:	6b5fca6b 	.word	0x6b5fca6b
    2238:	00989680 	.word	0x00989680
    223c:	05f5e0ff 	.word	0x05f5e0ff
    2240:	00007078 	.word	0x00007078
    2244:	00007084 	.word	0x00007084

00002248 <IsUpgradeRequested>:
** Returned value:	TRUE	upgrade is requested
** 					FALSE   upgrade is not requested
**
******************************************************************************/
uint32_t	IsUpgradeRequested( void )
{
    2248:	b480      	push	{r7}
    224a:	af00      	add	r7, sp, #0
	// TODO for test purposes allways upgrade requested later change
	if( (*( (uint32_t *) UPGRADE_PARAMETERS_ADDR) ) == 0xFFFFFFFF )
    224c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
    2250:	681b      	ldr	r3, [r3, #0]
    2252:	f1b3 3fff 	cmp.w	r3, #4294967295
    2256:	d101      	bne.n	225c <IsUpgradeRequested+0x14>
	{
		return TRUE;
    2258:	2301      	movs	r3, #1
    225a:	e000      	b.n	225e <IsUpgradeRequested+0x16>
	}

	return FALSE;
    225c:	2300      	movs	r3, #0
}
    225e:	4618      	mov	r0, r3
    2260:	46bd      	mov	sp, r7
    2262:	f85d 7b04 	ldr.w	r7, [sp], #4
    2266:	4770      	bx	lr

00002268 <DownloadSecondaryImage>:


void DownloadSecondaryImage( void )
{
    2268:	b590      	push	{r4, r7, lr}
    226a:	b0a3      	sub	sp, #140	; 0x8c
    226c:	af02      	add	r7, sp, #8
	uint32_t	reason[5];
	uint32_t	i;

	char buff[100];

	i = SECONDARY_IMAGE_START_SEC;
    226e:	2316      	movs	r3, #22
    2270:	67fb      	str	r3, [r7, #124]	; 0x7c
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    2272:	e00a      	b.n	228a <DownloadSecondaryImage+0x22>
	{
		u32IAP_PrepareSectors( i, i );
    2274:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    2276:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    2278:	f7ff fd2a 	bl	1cd0 <u32IAP_PrepareSectors>
		u32IAP_EraseSectors( i, i );
    227c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    227e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    2280:	f7ff fd74 	bl	1d6c <u32IAP_EraseSectors>
	uint32_t	i;

	char buff[100];

	i = SECONDARY_IMAGE_START_SEC;
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    2284:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    2286:	3301      	adds	r3, #1
    2288:	67fb      	str	r3, [r7, #124]	; 0x7c
    228a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    228c:	2b1b      	cmp	r3, #27
    228e:	d9f1      	bls.n	2274 <DownloadSecondaryImage+0xc>
	{
		u32IAP_PrepareSectors( i, i );
		u32IAP_EraseSectors( i, i );
	}
	TraceNL( "Checking if target memory is blank" );
    2290:	4821      	ldr	r0, [pc, #132]	; (2318 <DownloadSecondaryImage+0xb0>)
    2292:	f000 f9a1 	bl	25d8 <TraceNL>


	i = SECONDARY_IMAGE_START_SEC;
    2296:	2316      	movs	r3, #22
    2298:	67fb      	str	r3, [r7, #124]	; 0x7c
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    229a:	e02d      	b.n	22f8 <DownloadSecondaryImage+0x90>
	{
		if( u32IAP_BlankCheckSectors( i, i, &reason[0] )== IAP_STA_SECTOR_NOT_BLANK )
    229c:	f107 0368 	add.w	r3, r7, #104	; 0x68
    22a0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    22a2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    22a4:	461a      	mov	r2, r3
    22a6:	f7ff fd91 	bl	1dcc <u32IAP_BlankCheckSectors>
    22aa:	4603      	mov	r3, r0
    22ac:	2b08      	cmp	r3, #8
    22ae:	d116      	bne.n	22de <DownloadSecondaryImage+0x76>
		{
			sprintf(buff, "Target sector (%d) is not blank addr: 0x%X, 0x%X", i, reason[0], reason[1] );
    22b0:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    22b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    22b4:	1d3a      	adds	r2, r7, #4
    22b6:	9300      	str	r3, [sp, #0]
    22b8:	4610      	mov	r0, r2
    22ba:	4918      	ldr	r1, [pc, #96]	; (231c <DownloadSecondaryImage+0xb4>)
    22bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    22be:	4623      	mov	r3, r4
    22c0:	f001 fce4 	bl	3c8c <sprintf>
			TraceNL( buff );
    22c4:	1d3b      	adds	r3, r7, #4
    22c6:	4618      	mov	r0, r3
    22c8:	f000 f986 	bl	25d8 <TraceNL>
			u32IAP_PrepareSectors( i, i );
    22cc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    22ce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    22d0:	f7ff fcfe 	bl	1cd0 <u32IAP_PrepareSectors>
			u32IAP_EraseSectors( i, i);
    22d4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    22d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    22d8:	f7ff fd48 	bl	1d6c <u32IAP_EraseSectors>
    22dc:	e009      	b.n	22f2 <DownloadSecondaryImage+0x8a>

		}else
		{
			sprintf(buff, "Target sector (%d) is blank ", i );
    22de:	1d3b      	adds	r3, r7, #4
    22e0:	4618      	mov	r0, r3
    22e2:	490f      	ldr	r1, [pc, #60]	; (2320 <DownloadSecondaryImage+0xb8>)
    22e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    22e6:	f001 fcd1 	bl	3c8c <sprintf>
			TraceNL( buff );
    22ea:	1d3b      	adds	r3, r7, #4
    22ec:	4618      	mov	r0, r3
    22ee:	f000 f973 	bl	25d8 <TraceNL>
	}
	TraceNL( "Checking if target memory is blank" );


	i = SECONDARY_IMAGE_START_SEC;
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    22f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    22f4:	3301      	adds	r3, #1
    22f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    22f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    22fa:	2b1b      	cmp	r3, #27
    22fc:	d9ce      	bls.n	229c <DownloadSecondaryImage+0x34>
			TraceNL( buff );
		}
	}

	/*	Clear the received data counter using in the load_mage function */
	received_data = 0;
    22fe:	4b09      	ldr	r3, [pc, #36]	; (2324 <DownloadSecondaryImage+0xbc>)
    2300:	2200      	movs	r2, #0
    2302:	601a      	str	r2, [r3, #0]

	TraceNL( "Starting download" );
    2304:	4808      	ldr	r0, [pc, #32]	; (2328 <DownloadSecondaryImage+0xc0>)
    2306:	f000 f967 	bl	25d8 <TraceNL>
	/*	Store a new image into flash */
	XModem1K_Client( &load_image );
    230a:	4808      	ldr	r0, [pc, #32]	; (232c <DownloadSecondaryImage+0xc4>)
    230c:	f001 f8ac 	bl	3468 <XModem1K_Client>


}
    2310:	3784      	adds	r7, #132	; 0x84
    2312:	46bd      	mov	sp, r7
    2314:	bd90      	pop	{r4, r7, pc}
    2316:	bf00      	nop
    2318:	000071a8 	.word	0x000071a8
    231c:	000071cc 	.word	0x000071cc
    2320:	00007200 	.word	0x00007200
    2324:	10000434 	.word	0x10000434
    2328:	00007220 	.word	0x00007220
    232c:	00002361 	.word	0x00002361

00002330 <ExecuteApplicationImage>:

}


void ExecuteApplicationImage( unsigned int startAddress )
{
    2330:	b580      	push	{r7, lr}
    2332:	b084      	sub	sp, #16
    2334:	af00      	add	r7, sp, #0
    2336:	6078      	str	r0, [r7, #4]
	unsigned *p;	// used for loading address of reset handler from user flash

	/* Change the Vector Table to the
	in case the user application uses interrupts */

	SCB->VTOR = (startAddress & 0x1FFFFF80);
    2338:	4a08      	ldr	r2, [pc, #32]	; (235c <ExecuteApplicationImage+0x2c>)
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    2340:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2344:	6093      	str	r3, [r2, #8]

	// Load contents of second word of user flash - the reset handler address
	// in the applications vector table
	p = (unsigned *)(startAddress + 4);
    2346:	687b      	ldr	r3, [r7, #4]
    2348:	3304      	adds	r3, #4
    234a:	60fb      	str	r3, [r7, #12]

	// Set user_code_entry to be the address contained in that second word
	// of user flash
	user_code_entry = (void *) *p;
    234c:	68fb      	ldr	r3, [r7, #12]
    234e:	681b      	ldr	r3, [r3, #0]
    2350:	60bb      	str	r3, [r7, #8]

	// Jump to user application
    user_code_entry();
    2352:	68bb      	ldr	r3, [r7, #8]
    2354:	4798      	blx	r3
}
    2356:	3710      	adds	r7, #16
    2358:	46bd      	mov	sp, r7
    235a:	bd80      	pop	{r7, pc}
    235c:	e000ed00 	.word	0xe000ed00

00002360 <load_image>:

static uint32_t load_image(uint8_t *data, uint16_t length){
    2360:	b580      	push	{r7, lr}
    2362:	b0c4      	sub	sp, #272	; 0x110
    2364:	af00      	add	r7, sp, #0
    2366:	1d3b      	adds	r3, r7, #4
    2368:	6018      	str	r0, [r3, #0]
    236a:	460a      	mov	r2, r1
    236c:	1cbb      	adds	r3, r7, #2
    236e:	801a      	strh	r2, [r3, #0]
	char buffer[250];
	uint32_t rc;
	int i;


	sprintf(buffer, "Totally received : %d   frame length : %d\r\n", received_data, length);
    2370:	4b71      	ldr	r3, [pc, #452]	; (2538 <load_image+0x1d8>)
    2372:	681a      	ldr	r2, [r3, #0]
    2374:	1cbb      	adds	r3, r7, #2
    2376:	881b      	ldrh	r3, [r3, #0]
    2378:	f107 0108 	add.w	r1, r7, #8
    237c:	4608      	mov	r0, r1
    237e:	496f      	ldr	r1, [pc, #444]	; (253c <load_image+0x1dc>)
    2380:	f001 fc84 	bl	3c8c <sprintf>
	Trace( buffer );
    2384:	f107 0308 	add.w	r3, r7, #8
    2388:	4618      	mov	r0, r3
    238a:	f000 f915 	bl	25b8 <Trace>

	if( length == 0 && flashWriteIndex == 0 )
    238e:	1cbb      	adds	r3, r7, #2
    2390:	881b      	ldrh	r3, [r3, #0]
    2392:	2b00      	cmp	r3, #0
    2394:	d105      	bne.n	23a2 <load_image+0x42>
    2396:	4b6a      	ldr	r3, [pc, #424]	; (2540 <load_image+0x1e0>)
    2398:	681b      	ldr	r3, [r3, #0]
    239a:	2b00      	cmp	r3, #0
    239c:	d101      	bne.n	23a2 <load_image+0x42>
	{
		// Finished and all previous data has been written
		return ( 2 ); // return non zero to indicate success
    239e:	2302      	movs	r3, #2
    23a0:	e0c4      	b.n	252c <load_image+0x1cc>
	}


	for( i = 0; i < length; i++ )
    23a2:	2300      	movs	r3, #0
    23a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    23a8:	e011      	b.n	23ce <load_image+0x6e>
	{
		flashWriteBuffer[flashWriteIndex++] = data[i];
    23aa:	4b65      	ldr	r3, [pc, #404]	; (2540 <load_image+0x1e0>)
    23ac:	681b      	ldr	r3, [r3, #0]
    23ae:	1c5a      	adds	r2, r3, #1
    23b0:	4963      	ldr	r1, [pc, #396]	; (2540 <load_image+0x1e0>)
    23b2:	600a      	str	r2, [r1, #0]
    23b4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    23b8:	1d39      	adds	r1, r7, #4
    23ba:	6809      	ldr	r1, [r1, #0]
    23bc:	440a      	add	r2, r1
    23be:	7811      	ldrb	r1, [r2, #0]
    23c0:	4a60      	ldr	r2, [pc, #384]	; (2544 <load_image+0x1e4>)
    23c2:	54d1      	strb	r1, [r2, r3]
		// Finished and all previous data has been written
		return ( 2 ); // return non zero to indicate success
	}


	for( i = 0; i < length; i++ )
    23c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    23c8:	3301      	adds	r3, #1
    23ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    23ce:	1cbb      	adds	r3, r7, #2
    23d0:	881a      	ldrh	r2, [r3, #0]
    23d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    23d6:	429a      	cmp	r2, r3
    23d8:	dce7      	bgt.n	23aa <load_image+0x4a>
	{
		flashWriteBuffer[flashWriteIndex++] = data[i];
	}

	if( flashWriteIndex && ((flashWriteIndex % FLASH_SECTOR_SIZE) == 0) )
    23da:	4b59      	ldr	r3, [pc, #356]	; (2540 <load_image+0x1e0>)
    23dc:	681b      	ldr	r3, [r3, #0]
    23de:	2b00      	cmp	r3, #0
    23e0:	f000 80a3 	beq.w	252a <load_image+0x1ca>
    23e4:	4b56      	ldr	r3, [pc, #344]	; (2540 <load_image+0x1e0>)
    23e6:	681b      	ldr	r3, [r3, #0]
    23e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    23ec:	2b00      	cmp	r3, #0
    23ee:	f040 809c 	bne.w	252a <load_image+0x1ca>
	{
		sprintf(buffer, "Totally : %d  flashWriteIndex : %d\r\n",
    23f2:	4b51      	ldr	r3, [pc, #324]	; (2538 <load_image+0x1d8>)
    23f4:	681a      	ldr	r2, [r3, #0]
    23f6:	4b52      	ldr	r3, [pc, #328]	; (2540 <load_image+0x1e0>)
    23f8:	681b      	ldr	r3, [r3, #0]
    23fa:	f107 0108 	add.w	r1, r7, #8
    23fe:	4608      	mov	r0, r1
    2400:	4951      	ldr	r1, [pc, #324]	; (2548 <load_image+0x1e8>)
    2402:	f001 fc43 	bl	3c8c <sprintf>
//		TraceDumpHex(buffer, strlen(buffer));
//		TraceDumpHex(flashWriteBuffer, flashWriteIndex);

		/*	Prepare Sectors to be flashed */
		// TODO arrange sectors for primary image
		if (u32IAP_PrepareSectors(22, 27) == IAP_STA_CMD_SUCCESS) {
    2406:	2016      	movs	r0, #22
    2408:	211b      	movs	r1, #27
    240a:	f7ff fc61 	bl	1cd0 <u32IAP_PrepareSectors>
    240e:	4603      	mov	r3, r0
    2410:	2b00      	cmp	r3, #0
    2412:	f040 808a 	bne.w	252a <load_image+0x1ca>
			TraceNL("prepared ");
    2416:	484d      	ldr	r0, [pc, #308]	; (254c <load_image+0x1ec>)
    2418:	f000 f8de 	bl	25d8 <TraceNL>

			rc = u32IAP_CopyRAMToFlash(
    241c:	4b46      	ldr	r3, [pc, #280]	; (2538 <load_image+0x1d8>)
    241e:	681b      	ldr	r3, [r3, #0]
    2420:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
    2424:	4947      	ldr	r1, [pc, #284]	; (2544 <load_image+0x1e4>)
    2426:	4b46      	ldr	r3, [pc, #280]	; (2540 <load_image+0x1e0>)
    2428:	681b      	ldr	r3, [r3, #0]
    242a:	4610      	mov	r0, r2
    242c:	461a      	mov	r2, r3
    242e:	f7ff fc73 	bl	1d18 <u32IAP_CopyRAMToFlash>
    2432:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
					SECONDARY_IMAGE_LOAD_ADDR + received_data,
					(uint32_t) flashWriteBuffer,
					flashWriteIndex
					);

			sprintf( buffer, "Copy Ram result code : %d\r\n", rc );
    2436:	f107 0308 	add.w	r3, r7, #8
    243a:	4618      	mov	r0, r3
    243c:	4944      	ldr	r1, [pc, #272]	; (2550 <load_image+0x1f0>)
    243e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    2442:	f001 fc23 	bl	3c8c <sprintf>
			TraceNL( buffer );
    2446:	f107 0308 	add.w	r3, r7, #8
    244a:	4618      	mov	r0, r3
    244c:	f000 f8c4 	bl	25d8 <TraceNL>
			/*	Copy data (already) located in RAM to flash */
			if (rc == IAP_STA_CMD_SUCCESS) {
    2450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    2454:	2b00      	cmp	r3, #0
    2456:	d168      	bne.n	252a <load_image+0x1ca>
				TraceNL( "copied " );
    2458:	483e      	ldr	r0, [pc, #248]	; (2554 <load_image+0x1f4>)
    245a:	f000 f8bd 	bl	25d8 <TraceNL>

				rc = u32IAP_Compare( SECONDARY_IMAGE_LOAD_ADDR + received_data,
    245e:	4b36      	ldr	r3, [pc, #216]	; (2538 <load_image+0x1d8>)
    2460:	681b      	ldr	r3, [r3, #0]
    2462:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
    2466:	4937      	ldr	r1, [pc, #220]	; (2544 <load_image+0x1e4>)
    2468:	4b35      	ldr	r3, [pc, #212]	; (2540 <load_image+0x1e0>)
    246a:	681b      	ldr	r3, [r3, #0]
    246c:	4610      	mov	r0, r2
    246e:	461a      	mov	r2, r3
    2470:	2300      	movs	r3, #0
    2472:	f7ff fcd9 	bl	1e28 <u32IAP_Compare>
    2476:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
						             (uint32_t) flashWriteBuffer,
									 flashWriteIndex, 0
									);
				sprintf( buffer, "u32IAP_Compare : %d  wrote %d \r\n", rc , flashWriteIndex );
    247a:	4b31      	ldr	r3, [pc, #196]	; (2540 <load_image+0x1e0>)
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	f107 0208 	add.w	r2, r7, #8
    2482:	4610      	mov	r0, r2
    2484:	4934      	ldr	r1, [pc, #208]	; (2558 <load_image+0x1f8>)
    2486:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    248a:	f001 fbff 	bl	3c8c <sprintf>
				Trace( buffer );
    248e:	f107 0308 	add.w	r3, r7, #8
    2492:	4618      	mov	r0, r3
    2494:	f000 f890 	bl	25b8 <Trace>

				/*	Verify the flash contents with the contents in RAM */
				if (rc == IAP_STA_CMD_SUCCESS) {
    2498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    249c:	2b00      	cmp	r3, #0
    249e:	d10e      	bne.n	24be <load_image+0x15e>
					/*	Update and Print Received bytes counter */
					received_data += flashWriteIndex;
    24a0:	4b25      	ldr	r3, [pc, #148]	; (2538 <load_image+0x1d8>)
    24a2:	681a      	ldr	r2, [r3, #0]
    24a4:	4b26      	ldr	r3, [pc, #152]	; (2540 <load_image+0x1e0>)
    24a6:	681b      	ldr	r3, [r3, #0]
    24a8:	4413      	add	r3, r2
    24aa:	4a23      	ldr	r2, [pc, #140]	; (2538 <load_image+0x1d8>)
    24ac:	6013      	str	r3, [r2, #0]
					//snprintf((char *)string, MAX_STRING_SIZE, "Received %d of %d bytes", received_data, BMP->bmp_size);
					TraceNL( "verified " );
    24ae:	482b      	ldr	r0, [pc, #172]	; (255c <load_image+0x1fc>)
    24b0:	f000 f892 	bl	25d8 <TraceNL>

					flashWriteIndex = 0;
    24b4:	4b22      	ldr	r3, [pc, #136]	; (2540 <load_image+0x1e0>)
    24b6:	2200      	movs	r2, #0
    24b8:	601a      	str	r2, [r3, #0]
					return (1);
    24ba:	2301      	movs	r3, #1
    24bc:	e036      	b.n	252c <load_image+0x1cc>
				} else {
					int count;
					TraceDumpHex( SECONDARY_IMAGE_LOAD_ADDR + received_data, flashWriteIndex);
    24be:	4b1e      	ldr	r3, [pc, #120]	; (2538 <load_image+0x1d8>)
    24c0:	681b      	ldr	r3, [r3, #0]
    24c2:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
    24c6:	4b1e      	ldr	r3, [pc, #120]	; (2540 <load_image+0x1e0>)
    24c8:	681b      	ldr	r3, [r3, #0]
    24ca:	4610      	mov	r0, r2
    24cc:	4619      	mov	r1, r3
    24ce:	f000 f8c5 	bl	265c <TraceDumpHex>

					received_data += flashWriteIndex;
    24d2:	4b19      	ldr	r3, [pc, #100]	; (2538 <load_image+0x1d8>)
    24d4:	681a      	ldr	r2, [r3, #0]
    24d6:	4b1a      	ldr	r3, [pc, #104]	; (2540 <load_image+0x1e0>)
    24d8:	681b      	ldr	r3, [r3, #0]
    24da:	4413      	add	r3, r2
    24dc:	4a16      	ldr	r2, [pc, #88]	; (2538 <load_image+0x1d8>)
    24de:	6013      	str	r3, [r2, #0]
					//snprintf((char *)string, MAX_STRING_SIZE, "Received %d of %d bytes", received_data, BMP->bmp_size);
					TraceNL( "verification failed " );
    24e0:	481f      	ldr	r0, [pc, #124]	; (2560 <load_image+0x200>)
    24e2:	f000 f879 	bl	25d8 <TraceNL>

					for ( count = 0; count < 100000000; count++)
    24e6:	2300      	movs	r3, #0
    24e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    24ec:	e015      	b.n	251a <load_image+0x1ba>
						if( count % 10000000 == 0)
    24ee:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
    24f2:	4b1c      	ldr	r3, [pc, #112]	; (2564 <load_image+0x204>)
    24f4:	fb83 1302 	smull	r1, r3, r3, r2
    24f8:	1599      	asrs	r1, r3, #22
    24fa:	17d3      	asrs	r3, r2, #31
    24fc:	1acb      	subs	r3, r1, r3
    24fe:	491a      	ldr	r1, [pc, #104]	; (2568 <load_image+0x208>)
    2500:	fb01 f303 	mul.w	r3, r1, r3
    2504:	1ad3      	subs	r3, r2, r3
    2506:	2b00      	cmp	r3, #0
    2508:	d102      	bne.n	2510 <load_image+0x1b0>
							TracePutc( '.' );
    250a:	202e      	movs	r0, #46	; 0x2e
    250c:	f000 f87c 	bl	2608 <TracePutc>

					received_data += flashWriteIndex;
					//snprintf((char *)string, MAX_STRING_SIZE, "Received %d of %d bytes", received_data, BMP->bmp_size);
					TraceNL( "verification failed " );

					for ( count = 0; count < 100000000; count++)
    2510:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    2514:	3301      	adds	r3, #1
    2516:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    251a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    251e:	4a13      	ldr	r2, [pc, #76]	; (256c <load_image+0x20c>)
    2520:	4293      	cmp	r3, r2
    2522:	dde4      	ble.n	24ee <load_image+0x18e>
						if( count % 10000000 == 0)
							TracePutc( '.' );

					flashWriteIndex = 0;
    2524:	4b06      	ldr	r3, [pc, #24]	; (2540 <load_image+0x1e0>)
    2526:	2200      	movs	r2, #0
    2528:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}

	return (0);
    252a:	2300      	movs	r3, #0
}
    252c:	4618      	mov	r0, r3
    252e:	f507 7788 	add.w	r7, r7, #272	; 0x110
    2532:	46bd      	mov	sp, r7
    2534:	bd80      	pop	{r7, pc}
    2536:	bf00      	nop
    2538:	10000434 	.word	0x10000434
    253c:	00007234 	.word	0x00007234
    2540:	10000430 	.word	0x10000430
    2544:	10000030 	.word	0x10000030
    2548:	00007260 	.word	0x00007260
    254c:	00007288 	.word	0x00007288
    2550:	00007294 	.word	0x00007294
    2554:	000072b0 	.word	0x000072b0
    2558:	000072b8 	.word	0x000072b8
    255c:	000072dc 	.word	0x000072dc
    2560:	000072e8 	.word	0x000072e8
    2564:	6b5fca6b 	.word	0x6b5fca6b
    2568:	00989680 	.word	0x00989680
    256c:	05f5e0ff 	.word	0x05f5e0ff

00002570 <SysTick_Handler>:
 *  Created on: 14 Kas 2012
 *      Author: trio
 */
#include <LPC17xx.h>
#include "timer.h"
void SysTick_Handler(void) {
    2570:	b480      	push	{r7}
    2572:	af00      	add	r7, sp, #0
	STT_Value++;
    2574:	4b04      	ldr	r3, [pc, #16]	; (2588 <SysTick_Handler+0x18>)
    2576:	681b      	ldr	r3, [r3, #0]
    2578:	3301      	adds	r3, #1
    257a:	4a03      	ldr	r2, [pc, #12]	; (2588 <SysTick_Handler+0x18>)
    257c:	6013      	str	r3, [r2, #0]
}
    257e:	46bd      	mov	sp, r7
    2580:	f85d 7b04 	ldr.w	r7, [sp], #4
    2584:	4770      	bx	lr
    2586:	bf00      	nop
    2588:	10000d1c 	.word	0x10000d1c

0000258c <DelayMs>:

void DelayMs(unsigned int t) // 65536 max.
{
    258c:	b480      	push	{r7}
    258e:	b085      	sub	sp, #20
    2590:	af00      	add	r7, sp, #0
    2592:	6078      	str	r0, [r7, #4]
	unsigned long temp;
	temp = STT_Value;
    2594:	4b07      	ldr	r3, [pc, #28]	; (25b4 <DelayMs+0x28>)
    2596:	681b      	ldr	r3, [r3, #0]
    2598:	60fb      	str	r3, [r7, #12]
	while ((STT_Value - temp) < t);
    259a:	bf00      	nop
    259c:	4b05      	ldr	r3, [pc, #20]	; (25b4 <DelayMs+0x28>)
    259e:	681a      	ldr	r2, [r3, #0]
    25a0:	68fb      	ldr	r3, [r7, #12]
    25a2:	1ad2      	subs	r2, r2, r3
    25a4:	687b      	ldr	r3, [r7, #4]
    25a6:	429a      	cmp	r2, r3
    25a8:	d3f8      	bcc.n	259c <DelayMs+0x10>
}
    25aa:	3714      	adds	r7, #20
    25ac:	46bd      	mov	sp, r7
    25ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    25b2:	4770      	bx	lr
    25b4:	10000d1c 	.word	0x10000d1c

000025b8 <Trace>:
#include <string.h>
#include <trace.h>


void Trace( char* msg)
{
    25b8:	b580      	push	{r7, lr}
    25ba:	b082      	sub	sp, #8
    25bc:	af00      	add	r7, sp, #0
    25be:	6078      	str	r0, [r7, #4]

	UARTSend(PORT_TRACE, (unsigned char*)msg, strlen(msg));
    25c0:	6878      	ldr	r0, [r7, #4]
    25c2:	f002 ffc9 	bl	5558 <strlen>
    25c6:	4603      	mov	r3, r0
    25c8:	2000      	movs	r0, #0
    25ca:	6879      	ldr	r1, [r7, #4]
    25cc:	461a      	mov	r2, r3
    25ce:	f000 fcf1 	bl	2fb4 <UARTSend>

}
    25d2:	3708      	adds	r7, #8
    25d4:	46bd      	mov	sp, r7
    25d6:	bd80      	pop	{r7, pc}

000025d8 <TraceNL>:

void TraceNL( char* msg)
{
    25d8:	b580      	push	{r7, lr}
    25da:	b082      	sub	sp, #8
    25dc:	af00      	add	r7, sp, #0
    25de:	6078      	str	r0, [r7, #4]
	UARTSend(PORT_TRACE, (unsigned char*)msg, strlen(msg));
    25e0:	6878      	ldr	r0, [r7, #4]
    25e2:	f002 ffb9 	bl	5558 <strlen>
    25e6:	4603      	mov	r3, r0
    25e8:	2000      	movs	r0, #0
    25ea:	6879      	ldr	r1, [r7, #4]
    25ec:	461a      	mov	r2, r3
    25ee:	f000 fce1 	bl	2fb4 <UARTSend>
	UARTSend(PORT_TRACE, (unsigned char*)"\r\n", 2);
    25f2:	2000      	movs	r0, #0
    25f4:	4903      	ldr	r1, [pc, #12]	; (2604 <TraceNL+0x2c>)
    25f6:	2202      	movs	r2, #2
    25f8:	f000 fcdc 	bl	2fb4 <UARTSend>
}
    25fc:	3708      	adds	r7, #8
    25fe:	46bd      	mov	sp, r7
    2600:	bd80      	pop	{r7, pc}
    2602:	bf00      	nop
    2604:	00007300 	.word	0x00007300

00002608 <TracePutc>:

void TracePutc( char c )
{
    2608:	b580      	push	{r7, lr}
    260a:	b082      	sub	sp, #8
    260c:	af00      	add	r7, sp, #0
    260e:	4603      	mov	r3, r0
    2610:	71fb      	strb	r3, [r7, #7]
	UARTSend(PORT_TRACE, (unsigned char*)&c, 1L);
    2612:	1dfb      	adds	r3, r7, #7
    2614:	2000      	movs	r0, #0
    2616:	4619      	mov	r1, r3
    2618:	2201      	movs	r2, #1
    261a:	f000 fccb 	bl	2fb4 <UARTSend>
}
    261e:	3708      	adds	r7, #8
    2620:	46bd      	mov	sp, r7
    2622:	bd80      	pop	{r7, pc}

00002624 <TracePutcHex>:

void TracePutcHex( char c )
{
    2624:	b580      	push	{r7, lr}
    2626:	b086      	sub	sp, #24
    2628:	af00      	add	r7, sp, #0
    262a:	4603      	mov	r3, r0
    262c:	71fb      	strb	r3, [r7, #7]
	unsigned char  buff[10];
    int count;
	count = sprintf( buff, "%02x", c);
    262e:	79fb      	ldrb	r3, [r7, #7]
    2630:	f107 0208 	add.w	r2, r7, #8
    2634:	4610      	mov	r0, r2
    2636:	4908      	ldr	r1, [pc, #32]	; (2658 <TracePutcHex+0x34>)
    2638:	461a      	mov	r2, r3
    263a:	f001 fb27 	bl	3c8c <sprintf>
    263e:	6178      	str	r0, [r7, #20]
	UARTSend( PORT_TRACE, buff, count );
    2640:	697b      	ldr	r3, [r7, #20]
    2642:	f107 0208 	add.w	r2, r7, #8
    2646:	2000      	movs	r0, #0
    2648:	4611      	mov	r1, r2
    264a:	461a      	mov	r2, r3
    264c:	f000 fcb2 	bl	2fb4 <UARTSend>

}
    2650:	3718      	adds	r7, #24
    2652:	46bd      	mov	sp, r7
    2654:	bd80      	pop	{r7, pc}
    2656:	bf00      	nop
    2658:	00007304 	.word	0x00007304

0000265c <TraceDumpHex>:

void TraceDumpHex( char* pMsg, int len )
{
    265c:	b580      	push	{r7, lr}
    265e:	b0d6      	sub	sp, #344	; 0x158
    2660:	af00      	add	r7, sp, #0
    2662:	1d3b      	adds	r3, r7, #4
    2664:	6018      	str	r0, [r3, #0]
    2666:	463b      	mov	r3, r7
    2668:	6019      	str	r1, [r3, #0]
#if defined (BOOTROM_DEBUG)

	int i, count;
	unsigned char buffer[300];
	unsigned char buff[17];
	unsigned char *pc = (unsigned char*) pMsg;
    266a:	1d3b      	adds	r3, r7, #4
    266c:	681b      	ldr	r3, [r3, #0]
    266e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

	UARTSend( PORT_TRACE, "\r\n", 2);
    2672:	2000      	movs	r0, #0
    2674:	495a      	ldr	r1, [pc, #360]	; (27e0 <TraceDumpHex+0x184>)
    2676:	2202      	movs	r2, #2
    2678:	f000 fc9c 	bl	2fb4 <UARTSend>
	// Process every byte in the data.
	for (i = 0; i < len; i++) {
    267c:	2300      	movs	r3, #0
    267e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    2682:	e07d      	b.n	2780 <TraceDumpHex+0x124>
		// Multiple of 16 means new line (with line offset).

		if ((i % 16) == 0) {
    2684:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    2688:	f003 030f 	and.w	r3, r3, #15
    268c:	2b00      	cmp	r3, #0
    268e:	d117      	bne.n	26c0 <TraceDumpHex+0x64>
			// Just don't print ASCII for the zeroth line.
			if (i != 0) {
    2690:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    2694:	2b00      	cmp	r3, #0
    2696:	d013      	beq.n	26c0 <TraceDumpHex+0x64>
				count = sprintf(buffer, "  %s\r\n", buff);
    2698:	f107 0220 	add.w	r2, r7, #32
    269c:	f107 030c 	add.w	r3, r7, #12
    26a0:	4610      	mov	r0, r2
    26a2:	4950      	ldr	r1, [pc, #320]	; (27e4 <TraceDumpHex+0x188>)
    26a4:	461a      	mov	r2, r3
    26a6:	f001 faf1 	bl	3c8c <sprintf>
    26aa:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
				UARTSend( PORT_TRACE, buffer, count);
    26ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    26b2:	f107 0220 	add.w	r2, r7, #32
    26b6:	2000      	movs	r0, #0
    26b8:	4611      	mov	r1, r2
    26ba:	461a      	mov	r2, r3
    26bc:	f000 fc7a 	bl	2fb4 <UARTSend>
			}
		}
		count = sprintf(buffer, " %02x", pc[i]);
    26c0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    26c4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    26c8:	4413      	add	r3, r2
    26ca:	781b      	ldrb	r3, [r3, #0]
    26cc:	461a      	mov	r2, r3
    26ce:	f107 0320 	add.w	r3, r7, #32
    26d2:	4618      	mov	r0, r3
    26d4:	4944      	ldr	r1, [pc, #272]	; (27e8 <TraceDumpHex+0x18c>)
    26d6:	f001 fad9 	bl	3c8c <sprintf>
    26da:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
		UARTSend( PORT_TRACE, buffer, count );
    26de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    26e2:	f107 0220 	add.w	r2, r7, #32
    26e6:	2000      	movs	r0, #0
    26e8:	4611      	mov	r1, r2
    26ea:	461a      	mov	r2, r3
    26ec:	f000 fc62 	bl	2fb4 <UARTSend>

		// And store a printable ASCII character for later.
		if ((pc[i] < 0x20) || (pc[i] > 0x7e))
    26f0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    26f4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    26f8:	4413      	add	r3, r2
    26fa:	781b      	ldrb	r3, [r3, #0]
    26fc:	2b1f      	cmp	r3, #31
    26fe:	d907      	bls.n	2710 <TraceDumpHex+0xb4>
    2700:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    2704:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    2708:	4413      	add	r3, r2
    270a:	781b      	ldrb	r3, [r3, #0]
    270c:	2b7e      	cmp	r3, #126	; 0x7e
    270e:	d90f      	bls.n	2730 <TraceDumpHex+0xd4>
			buff[i % 16] = '.';
    2710:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    2714:	4b35      	ldr	r3, [pc, #212]	; (27ec <TraceDumpHex+0x190>)
    2716:	4013      	ands	r3, r2
    2718:	2b00      	cmp	r3, #0
    271a:	da03      	bge.n	2724 <TraceDumpHex+0xc8>
    271c:	3b01      	subs	r3, #1
    271e:	f063 030f 	orn	r3, r3, #15
    2722:	3301      	adds	r3, #1
    2724:	461a      	mov	r2, r3
    2726:	f107 030c 	add.w	r3, r7, #12
    272a:	212e      	movs	r1, #46	; 0x2e
    272c:	5499      	strb	r1, [r3, r2]
    272e:	e013      	b.n	2758 <TraceDumpHex+0xfc>
		else
			buff[i % 16] = pc[i];
    2730:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    2734:	4b2d      	ldr	r3, [pc, #180]	; (27ec <TraceDumpHex+0x190>)
    2736:	4013      	ands	r3, r2
    2738:	2b00      	cmp	r3, #0
    273a:	da03      	bge.n	2744 <TraceDumpHex+0xe8>
    273c:	3b01      	subs	r3, #1
    273e:	f063 030f 	orn	r3, r3, #15
    2742:	3301      	adds	r3, #1
    2744:	4619      	mov	r1, r3
    2746:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    274a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    274e:	4413      	add	r3, r2
    2750:	781a      	ldrb	r2, [r3, #0]
    2752:	f107 030c 	add.w	r3, r7, #12
    2756:	545a      	strb	r2, [r3, r1]
		buff[(i % 16) + 1] = '\0';
    2758:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    275c:	4b23      	ldr	r3, [pc, #140]	; (27ec <TraceDumpHex+0x190>)
    275e:	4013      	ands	r3, r2
    2760:	2b00      	cmp	r3, #0
    2762:	da03      	bge.n	276c <TraceDumpHex+0x110>
    2764:	3b01      	subs	r3, #1
    2766:	f063 030f 	orn	r3, r3, #15
    276a:	3301      	adds	r3, #1
    276c:	3301      	adds	r3, #1
    276e:	f107 020c 	add.w	r2, r7, #12
    2772:	2100      	movs	r1, #0
    2774:	54d1      	strb	r1, [r2, r3]
	unsigned char buff[17];
	unsigned char *pc = (unsigned char*) pMsg;

	UARTSend( PORT_TRACE, "\r\n", 2);
	// Process every byte in the data.
	for (i = 0; i < len; i++) {
    2776:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    277a:	3301      	adds	r3, #1
    277c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    2780:	463b      	mov	r3, r7
    2782:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    2786:	681b      	ldr	r3, [r3, #0]
    2788:	429a      	cmp	r2, r3
    278a:	f6ff af7b 	blt.w	2684 <TraceDumpHex+0x28>
			buff[i % 16] = pc[i];
		buff[(i % 16) + 1] = '\0';
	}

    // Pad out last line if not exactly 16 characters.
    while ((i % 16) != 0) {
    278e:	e009      	b.n	27a4 <TraceDumpHex+0x148>
    	UARTSend( PORT_TRACE, "   ", 3);
    2790:	2000      	movs	r0, #0
    2792:	4917      	ldr	r1, [pc, #92]	; (27f0 <TraceDumpHex+0x194>)
    2794:	2203      	movs	r2, #3
    2796:	f000 fc0d 	bl	2fb4 <UARTSend>
        i++;
    279a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    279e:	3301      	adds	r3, #1
    27a0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			buff[i % 16] = pc[i];
		buff[(i % 16) + 1] = '\0';
	}

    // Pad out last line if not exactly 16 characters.
    while ((i % 16) != 0) {
    27a4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    27a8:	f003 030f 	and.w	r3, r3, #15
    27ac:	2b00      	cmp	r3, #0
    27ae:	d1ef      	bne.n	2790 <TraceDumpHex+0x134>
    	UARTSend( PORT_TRACE, "   ", 3);
        i++;
    }
	count = sprintf(buffer, "  %s\r\n", buff);
    27b0:	f107 0220 	add.w	r2, r7, #32
    27b4:	f107 030c 	add.w	r3, r7, #12
    27b8:	4610      	mov	r0, r2
    27ba:	490a      	ldr	r1, [pc, #40]	; (27e4 <TraceDumpHex+0x188>)
    27bc:	461a      	mov	r2, r3
    27be:	f001 fa65 	bl	3c8c <sprintf>
    27c2:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
	UARTSend( PORT_TRACE, buffer, count);
    27c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    27ca:	f107 0220 	add.w	r2, r7, #32
    27ce:	2000      	movs	r0, #0
    27d0:	4611      	mov	r1, r2
    27d2:	461a      	mov	r2, r3
    27d4:	f000 fbee 	bl	2fb4 <UARTSend>
#endif
}
    27d8:	f507 77ac 	add.w	r7, r7, #344	; 0x158
    27dc:	46bd      	mov	sp, r7
    27de:	bd80      	pop	{r7, pc}
    27e0:	00007300 	.word	0x00007300
    27e4:	0000730c 	.word	0x0000730c
    27e8:	00007314 	.word	0x00007314
    27ec:	8000000f 	.word	0x8000000f
    27f0:	0000731c 	.word	0x0000731c

000027f4 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    27f4:	b480      	push	{r7}
    27f6:	b083      	sub	sp, #12
    27f8:	af00      	add	r7, sp, #0
    27fa:	4603      	mov	r3, r0
    27fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    27fe:	4908      	ldr	r1, [pc, #32]	; (2820 <NVIC_EnableIRQ+0x2c>)
    2800:	f997 3007 	ldrsb.w	r3, [r7, #7]
    2804:	095b      	lsrs	r3, r3, #5
    2806:	79fa      	ldrb	r2, [r7, #7]
    2808:	f002 021f 	and.w	r2, r2, #31
    280c:	2001      	movs	r0, #1
    280e:	fa00 f202 	lsl.w	r2, r0, r2
    2812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2816:	370c      	adds	r7, #12
    2818:	46bd      	mov	sp, r7
    281a:	f85d 7b04 	ldr.w	r7, [sp], #4
    281e:	4770      	bx	lr
    2820:	e000e100 	.word	0xe000e100

00002824 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
    2824:	b480      	push	{r7}
    2826:	b083      	sub	sp, #12
    2828:	af00      	add	r7, sp, #0
    282a:	4603      	mov	r3, r0
    282c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    282e:	4909      	ldr	r1, [pc, #36]	; (2854 <NVIC_DisableIRQ+0x30>)
    2830:	f997 3007 	ldrsb.w	r3, [r7, #7]
    2834:	095b      	lsrs	r3, r3, #5
    2836:	79fa      	ldrb	r2, [r7, #7]
    2838:	f002 021f 	and.w	r2, r2, #31
    283c:	2001      	movs	r0, #1
    283e:	fa00 f202 	lsl.w	r2, r0, r2
    2842:	3320      	adds	r3, #32
    2844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2848:	370c      	adds	r7, #12
    284a:	46bd      	mov	sp, r7
    284c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2850:	4770      	bx	lr
    2852:	bf00      	nop
    2854:	e000e100 	.word	0xe000e100

00002858 <UART0_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART0_IRQHandler(void) {
    2858:	b480      	push	{r7}
    285a:	b083      	sub	sp, #12
    285c:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART0->IIR;
    285e:	4b3b      	ldr	r3, [pc, #236]	; (294c <UART0_IRQHandler+0xf4>)
    2860:	689b      	ldr	r3, [r3, #8]
    2862:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    2864:	79bb      	ldrb	r3, [r7, #6]
    2866:	085b      	lsrs	r3, r3, #1
    2868:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    286a:	79bb      	ldrb	r3, [r7, #6]
    286c:	f003 0307 	and.w	r3, r3, #7
    2870:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    2872:	79bb      	ldrb	r3, [r7, #6]
    2874:	2b03      	cmp	r3, #3
    2876:	d12c      	bne.n	28d2 <UART0_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART0->LSR;
    2878:	4b34      	ldr	r3, [pc, #208]	; (294c <UART0_IRQHandler+0xf4>)
    287a:	7d1b      	ldrb	r3, [r3, #20]
    287c:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    287e:	797b      	ldrb	r3, [r7, #5]
    2880:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2884:	2b00      	cmp	r3, #0
    2886:	d006      	beq.n	2896 <UART0_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART0Status = LSRValue;
    2888:	797b      	ldrb	r3, [r7, #5]
    288a:	4a31      	ldr	r2, [pc, #196]	; (2950 <UART0_IRQHandler+0xf8>)
    288c:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART0->RBR; /* Dummy read on RX to clear
    288e:	4b2f      	ldr	r3, [pc, #188]	; (294c <UART0_IRQHandler+0xf4>)
    2890:	781b      	ldrb	r3, [r3, #0]
    2892:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2894:	e055      	b.n	2942 <UART0_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    2896:	797b      	ldrb	r3, [r7, #5]
    2898:	f003 0301 	and.w	r3, r3, #1
    289c:	2b00      	cmp	r3, #0
    289e:	d050      	beq.n	2942 <UART0_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART0Buffer[UART0Count] = LPC_UART0->RBR;
    28a0:	4b2c      	ldr	r3, [pc, #176]	; (2954 <UART0_IRQHandler+0xfc>)
    28a2:	881b      	ldrh	r3, [r3, #0]
    28a4:	b29b      	uxth	r3, r3
    28a6:	461a      	mov	r2, r3
    28a8:	4b28      	ldr	r3, [pc, #160]	; (294c <UART0_IRQHandler+0xf4>)
    28aa:	781b      	ldrb	r3, [r3, #0]
    28ac:	b2d9      	uxtb	r1, r3
    28ae:	4b2a      	ldr	r3, [pc, #168]	; (2958 <UART0_IRQHandler+0x100>)
    28b0:	5499      	strb	r1, [r3, r2]
			UART0Count++;
    28b2:	4b28      	ldr	r3, [pc, #160]	; (2954 <UART0_IRQHandler+0xfc>)
    28b4:	881b      	ldrh	r3, [r3, #0]
    28b6:	b29b      	uxth	r3, r3
    28b8:	3301      	adds	r3, #1
    28ba:	b29a      	uxth	r2, r3
    28bc:	4b25      	ldr	r3, [pc, #148]	; (2954 <UART0_IRQHandler+0xfc>)
    28be:	801a      	strh	r2, [r3, #0]
			if (UART0Count == BUFSIZE) {
    28c0:	4b24      	ldr	r3, [pc, #144]	; (2954 <UART0_IRQHandler+0xfc>)
    28c2:	881b      	ldrh	r3, [r3, #0]
    28c4:	b29b      	uxth	r3, r3
    28c6:	2bff      	cmp	r3, #255	; 0xff
    28c8:	d13b      	bne.n	2942 <UART0_IRQHandler+0xea>
				UART0Count = 0; /* buffer overflow */
    28ca:	4b22      	ldr	r3, [pc, #136]	; (2954 <UART0_IRQHandler+0xfc>)
    28cc:	2200      	movs	r2, #0
    28ce:	801a      	strh	r2, [r3, #0]
    28d0:	e037      	b.n	2942 <UART0_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    28d2:	79bb      	ldrb	r3, [r7, #6]
    28d4:	2b02      	cmp	r3, #2
    28d6:	d118      	bne.n	290a <UART0_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART0Buffer[UART0Count] = LPC_UART0->RBR;
    28d8:	4b1e      	ldr	r3, [pc, #120]	; (2954 <UART0_IRQHandler+0xfc>)
    28da:	881b      	ldrh	r3, [r3, #0]
    28dc:	b29b      	uxth	r3, r3
    28de:	461a      	mov	r2, r3
    28e0:	4b1a      	ldr	r3, [pc, #104]	; (294c <UART0_IRQHandler+0xf4>)
    28e2:	781b      	ldrb	r3, [r3, #0]
    28e4:	b2d9      	uxtb	r1, r3
    28e6:	4b1c      	ldr	r3, [pc, #112]	; (2958 <UART0_IRQHandler+0x100>)
    28e8:	5499      	strb	r1, [r3, r2]
		UART0Count++;
    28ea:	4b1a      	ldr	r3, [pc, #104]	; (2954 <UART0_IRQHandler+0xfc>)
    28ec:	881b      	ldrh	r3, [r3, #0]
    28ee:	b29b      	uxth	r3, r3
    28f0:	3301      	adds	r3, #1
    28f2:	b29a      	uxth	r2, r3
    28f4:	4b17      	ldr	r3, [pc, #92]	; (2954 <UART0_IRQHandler+0xfc>)
    28f6:	801a      	strh	r2, [r3, #0]
		if (UART0Count == BUFSIZE) {
    28f8:	4b16      	ldr	r3, [pc, #88]	; (2954 <UART0_IRQHandler+0xfc>)
    28fa:	881b      	ldrh	r3, [r3, #0]
    28fc:	b29b      	uxth	r3, r3
    28fe:	2bff      	cmp	r3, #255	; 0xff
    2900:	d11f      	bne.n	2942 <UART0_IRQHandler+0xea>
			UART0Count = 0; /* buffer overflow */
    2902:	4b14      	ldr	r3, [pc, #80]	; (2954 <UART0_IRQHandler+0xfc>)
    2904:	2200      	movs	r2, #0
    2906:	801a      	strh	r2, [r3, #0]
    2908:	e01b      	b.n	2942 <UART0_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    290a:	79bb      	ldrb	r3, [r7, #6]
    290c:	2b06      	cmp	r3, #6
    290e:	d106      	bne.n	291e <UART0_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART0Status |= 0x100; /* Bit 9 as the CTI error */
    2910:	4b0f      	ldr	r3, [pc, #60]	; (2950 <UART0_IRQHandler+0xf8>)
    2912:	681b      	ldr	r3, [r3, #0]
    2914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2918:	4a0d      	ldr	r2, [pc, #52]	; (2950 <UART0_IRQHandler+0xf8>)
    291a:	6013      	str	r3, [r2, #0]
    291c:	e011      	b.n	2942 <UART0_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    291e:	79bb      	ldrb	r3, [r7, #6]
    2920:	2b01      	cmp	r3, #1
    2922:	d10e      	bne.n	2942 <UART0_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART0->LSR; /* Check status in the LSR to see if
    2924:	4b09      	ldr	r3, [pc, #36]	; (294c <UART0_IRQHandler+0xf4>)
    2926:	7d1b      	ldrb	r3, [r3, #20]
    2928:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    292a:	797b      	ldrb	r3, [r7, #5]
    292c:	f003 0320 	and.w	r3, r3, #32
    2930:	2b00      	cmp	r3, #0
    2932:	d003      	beq.n	293c <UART0_IRQHandler+0xe4>
			UART0TxEmpty = 1;
    2934:	4b09      	ldr	r3, [pc, #36]	; (295c <UART0_IRQHandler+0x104>)
    2936:	2201      	movs	r2, #1
    2938:	701a      	strb	r2, [r3, #0]
    293a:	e002      	b.n	2942 <UART0_IRQHandler+0xea>
		} else {
			UART0TxEmpty = 0;
    293c:	4b07      	ldr	r3, [pc, #28]	; (295c <UART0_IRQHandler+0x104>)
    293e:	2200      	movs	r2, #0
    2940:	701a      	strb	r2, [r3, #0]
		}
	}
}
    2942:	370c      	adds	r7, #12
    2944:	46bd      	mov	sp, r7
    2946:	f85d 7b04 	ldr.w	r7, [sp], #4
    294a:	4770      	bx	lr
    294c:	4000c000 	.word	0x4000c000
    2950:	10001ec4 	.word	0x10001ec4
    2954:	10000438 	.word	0x10000438
    2958:	100014c4 	.word	0x100014c4
    295c:	10000014 	.word	0x10000014

00002960 <UART1_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART1_IRQHandler(void) {
    2960:	b480      	push	{r7}
    2962:	b083      	sub	sp, #12
    2964:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART1->IIR;
    2966:	4b3d      	ldr	r3, [pc, #244]	; (2a5c <UART1_IRQHandler+0xfc>)
    2968:	689b      	ldr	r3, [r3, #8]
    296a:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    296c:	79bb      	ldrb	r3, [r7, #6]
    296e:	085b      	lsrs	r3, r3, #1
    2970:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    2972:	79bb      	ldrb	r3, [r7, #6]
    2974:	f003 0307 	and.w	r3, r3, #7
    2978:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    297a:	79bb      	ldrb	r3, [r7, #6]
    297c:	2b03      	cmp	r3, #3
    297e:	d12e      	bne.n	29de <UART1_IRQHandler+0x7e>
	{
		LSRValue = LPC_UART1->LSR;
    2980:	4b36      	ldr	r3, [pc, #216]	; (2a5c <UART1_IRQHandler+0xfc>)
    2982:	7d1b      	ldrb	r3, [r3, #20]
    2984:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2986:	797b      	ldrb	r3, [r7, #5]
    2988:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    298c:	2b00      	cmp	r3, #0
    298e:	d006      	beq.n	299e <UART1_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART1Status = LSRValue;
    2990:	797b      	ldrb	r3, [r7, #5]
    2992:	4a33      	ldr	r2, [pc, #204]	; (2a60 <UART1_IRQHandler+0x100>)
    2994:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART1->RBR; /* Dummy read on RX to clear
    2996:	4b31      	ldr	r3, [pc, #196]	; (2a5c <UART1_IRQHandler+0xfc>)
    2998:	781b      	ldrb	r3, [r3, #0]
    299a:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    299c:	e059      	b.n	2a52 <UART1_IRQHandler+0xf2>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    299e:	797b      	ldrb	r3, [r7, #5]
    29a0:	f003 0301 	and.w	r3, r3, #1
    29a4:	2b00      	cmp	r3, #0
    29a6:	d054      	beq.n	2a52 <UART1_IRQHandler+0xf2>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART1Buffer[UART1Count] = LPC_UART1->RBR;
    29a8:	4b2e      	ldr	r3, [pc, #184]	; (2a64 <UART1_IRQHandler+0x104>)
    29aa:	881b      	ldrh	r3, [r3, #0]
    29ac:	b29b      	uxth	r3, r3
    29ae:	461a      	mov	r2, r3
    29b0:	4b2a      	ldr	r3, [pc, #168]	; (2a5c <UART1_IRQHandler+0xfc>)
    29b2:	781b      	ldrb	r3, [r3, #0]
    29b4:	b2d9      	uxtb	r1, r3
    29b6:	4b2c      	ldr	r3, [pc, #176]	; (2a68 <UART1_IRQHandler+0x108>)
    29b8:	5499      	strb	r1, [r3, r2]
			UART1Count++;
    29ba:	4b2a      	ldr	r3, [pc, #168]	; (2a64 <UART1_IRQHandler+0x104>)
    29bc:	881b      	ldrh	r3, [r3, #0]
    29be:	b29b      	uxth	r3, r3
    29c0:	3301      	adds	r3, #1
    29c2:	b29a      	uxth	r2, r3
    29c4:	4b27      	ldr	r3, [pc, #156]	; (2a64 <UART1_IRQHandler+0x104>)
    29c6:	801a      	strh	r2, [r3, #0]
			if (UART1Count == GSM_UART_BUFFER_SIZE) {
    29c8:	4b26      	ldr	r3, [pc, #152]	; (2a64 <UART1_IRQHandler+0x104>)
    29ca:	881b      	ldrh	r3, [r3, #0]
    29cc:	b29b      	uxth	r3, r3
    29ce:	f240 424c 	movw	r2, #1100	; 0x44c
    29d2:	4293      	cmp	r3, r2
    29d4:	d13d      	bne.n	2a52 <UART1_IRQHandler+0xf2>
				UART1Count = 0; /* buffer overflow */
    29d6:	4b23      	ldr	r3, [pc, #140]	; (2a64 <UART1_IRQHandler+0x104>)
    29d8:	2200      	movs	r2, #0
    29da:	801a      	strh	r2, [r3, #0]
    29dc:	e039      	b.n	2a52 <UART1_IRQHandler+0xf2>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    29de:	79bb      	ldrb	r3, [r7, #6]
    29e0:	2b02      	cmp	r3, #2
    29e2:	d11a      	bne.n	2a1a <UART1_IRQHandler+0xba>
	{
		/* Receive Data Available */
		UART1Buffer[UART1Count] = LPC_UART1->RBR;
    29e4:	4b1f      	ldr	r3, [pc, #124]	; (2a64 <UART1_IRQHandler+0x104>)
    29e6:	881b      	ldrh	r3, [r3, #0]
    29e8:	b29b      	uxth	r3, r3
    29ea:	461a      	mov	r2, r3
    29ec:	4b1b      	ldr	r3, [pc, #108]	; (2a5c <UART1_IRQHandler+0xfc>)
    29ee:	781b      	ldrb	r3, [r3, #0]
    29f0:	b2d9      	uxtb	r1, r3
    29f2:	4b1d      	ldr	r3, [pc, #116]	; (2a68 <UART1_IRQHandler+0x108>)
    29f4:	5499      	strb	r1, [r3, r2]
		UART1Count++;
    29f6:	4b1b      	ldr	r3, [pc, #108]	; (2a64 <UART1_IRQHandler+0x104>)
    29f8:	881b      	ldrh	r3, [r3, #0]
    29fa:	b29b      	uxth	r3, r3
    29fc:	3301      	adds	r3, #1
    29fe:	b29a      	uxth	r2, r3
    2a00:	4b18      	ldr	r3, [pc, #96]	; (2a64 <UART1_IRQHandler+0x104>)
    2a02:	801a      	strh	r2, [r3, #0]
		if (UART1Count == GSM_UART_BUFFER_SIZE) {
    2a04:	4b17      	ldr	r3, [pc, #92]	; (2a64 <UART1_IRQHandler+0x104>)
    2a06:	881b      	ldrh	r3, [r3, #0]
    2a08:	b29b      	uxth	r3, r3
    2a0a:	f240 424c 	movw	r2, #1100	; 0x44c
    2a0e:	4293      	cmp	r3, r2
    2a10:	d11f      	bne.n	2a52 <UART1_IRQHandler+0xf2>
			UART1Count = 0; /* buffer overflow */
    2a12:	4b14      	ldr	r3, [pc, #80]	; (2a64 <UART1_IRQHandler+0x104>)
    2a14:	2200      	movs	r2, #0
    2a16:	801a      	strh	r2, [r3, #0]
    2a18:	e01b      	b.n	2a52 <UART1_IRQHandler+0xf2>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2a1a:	79bb      	ldrb	r3, [r7, #6]
    2a1c:	2b06      	cmp	r3, #6
    2a1e:	d106      	bne.n	2a2e <UART1_IRQHandler+0xce>
	{
		/* Character Time-out indicator */
		UART1Status |= 0x100; /* Bit 9 as the CTI error */
    2a20:	4b0f      	ldr	r3, [pc, #60]	; (2a60 <UART1_IRQHandler+0x100>)
    2a22:	681b      	ldr	r3, [r3, #0]
    2a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2a28:	4a0d      	ldr	r2, [pc, #52]	; (2a60 <UART1_IRQHandler+0x100>)
    2a2a:	6013      	str	r3, [r2, #0]
    2a2c:	e011      	b.n	2a52 <UART1_IRQHandler+0xf2>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2a2e:	79bb      	ldrb	r3, [r7, #6]
    2a30:	2b01      	cmp	r3, #1
    2a32:	d10e      	bne.n	2a52 <UART1_IRQHandler+0xf2>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART1->LSR; /* Check status in the LSR to see if
    2a34:	4b09      	ldr	r3, [pc, #36]	; (2a5c <UART1_IRQHandler+0xfc>)
    2a36:	7d1b      	ldrb	r3, [r3, #20]
    2a38:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    2a3a:	797b      	ldrb	r3, [r7, #5]
    2a3c:	f003 0320 	and.w	r3, r3, #32
    2a40:	2b00      	cmp	r3, #0
    2a42:	d003      	beq.n	2a4c <UART1_IRQHandler+0xec>
			UART1TxEmpty = 1;
    2a44:	4b09      	ldr	r3, [pc, #36]	; (2a6c <UART1_IRQHandler+0x10c>)
    2a46:	2201      	movs	r2, #1
    2a48:	701a      	strb	r2, [r3, #0]
    2a4a:	e002      	b.n	2a52 <UART1_IRQHandler+0xf2>
		} else {
			UART1TxEmpty = 0;
    2a4c:	4b07      	ldr	r3, [pc, #28]	; (2a6c <UART1_IRQHandler+0x10c>)
    2a4e:	2200      	movs	r2, #0
    2a50:	701a      	strb	r2, [r3, #0]
		}
	}

}
    2a52:	370c      	adds	r7, #12
    2a54:	46bd      	mov	sp, r7
    2a56:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a5a:	4770      	bx	lr
    2a5c:	40010000 	.word	0x40010000
    2a60:	100015c4 	.word	0x100015c4
    2a64:	1000043a 	.word	0x1000043a
    2a68:	10001068 	.word	0x10001068
    2a6c:	10000015 	.word	0x10000015

00002a70 <UART2_IRQHandler>:

void UART2_IRQHandler(void) {
    2a70:	b480      	push	{r7}
    2a72:	b083      	sub	sp, #12
    2a74:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;
	IIRValue = LPC_UART2->IIR;
    2a76:	4b3c      	ldr	r3, [pc, #240]	; (2b68 <UART2_IRQHandler+0xf8>)
    2a78:	689b      	ldr	r3, [r3, #8]
    2a7a:	71bb      	strb	r3, [r7, #6]
	IIRValue >>= 1; /* skip pending bit in IIR */
    2a7c:	79bb      	ldrb	r3, [r7, #6]
    2a7e:	085b      	lsrs	r3, r3, #1
    2a80:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    2a82:	79bb      	ldrb	r3, [r7, #6]
    2a84:	f003 0307 	and.w	r3, r3, #7
    2a88:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    2a8a:	79bb      	ldrb	r3, [r7, #6]
    2a8c:	2b03      	cmp	r3, #3
    2a8e:	d12d      	bne.n	2aec <UART2_IRQHandler+0x7c>
	{
		LSRValue = LPC_UART2->LSR;
    2a90:	4b35      	ldr	r3, [pc, #212]	; (2b68 <UART2_IRQHandler+0xf8>)
    2a92:	7d1b      	ldrb	r3, [r3, #20]
    2a94:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2a96:	797b      	ldrb	r3, [r7, #5]
    2a98:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2a9c:	2b00      	cmp	r3, #0
    2a9e:	d006      	beq.n	2aae <UART2_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART2Status = LSRValue;
    2aa0:	797b      	ldrb	r3, [r7, #5]
    2aa2:	4a32      	ldr	r2, [pc, #200]	; (2b6c <UART2_IRQHandler+0xfc>)
    2aa4:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART2->RBR; /* Dummy read on RX to clear
    2aa6:	4b30      	ldr	r3, [pc, #192]	; (2b68 <UART2_IRQHandler+0xf8>)
    2aa8:	781b      	ldrb	r3, [r3, #0]
    2aaa:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2aac:	e057      	b.n	2b5e <UART2_IRQHandler+0xee>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    2aae:	797b      	ldrb	r3, [r7, #5]
    2ab0:	f003 0301 	and.w	r3, r3, #1
    2ab4:	2b00      	cmp	r3, #0
    2ab6:	d052      	beq.n	2b5e <UART2_IRQHandler+0xee>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART2Buffer[UART2Count] = LPC_UART2->RBR;
    2ab8:	4b2d      	ldr	r3, [pc, #180]	; (2b70 <UART2_IRQHandler+0x100>)
    2aba:	881b      	ldrh	r3, [r3, #0]
    2abc:	b29b      	uxth	r3, r3
    2abe:	461a      	mov	r2, r3
    2ac0:	4b29      	ldr	r3, [pc, #164]	; (2b68 <UART2_IRQHandler+0xf8>)
    2ac2:	781b      	ldrb	r3, [r3, #0]
    2ac4:	b2d9      	uxtb	r1, r3
    2ac6:	4b2b      	ldr	r3, [pc, #172]	; (2b74 <UART2_IRQHandler+0x104>)
    2ac8:	5499      	strb	r1, [r3, r2]
			UART2Count++;
    2aca:	4b29      	ldr	r3, [pc, #164]	; (2b70 <UART2_IRQHandler+0x100>)
    2acc:	881b      	ldrh	r3, [r3, #0]
    2ace:	b29b      	uxth	r3, r3
    2ad0:	3301      	adds	r3, #1
    2ad2:	b29a      	uxth	r2, r3
    2ad4:	4b26      	ldr	r3, [pc, #152]	; (2b70 <UART2_IRQHandler+0x100>)
    2ad6:	801a      	strh	r2, [r3, #0]
			if (UART2Count >= UART2_BUFFSIZE) {
    2ad8:	4b25      	ldr	r3, [pc, #148]	; (2b70 <UART2_IRQHandler+0x100>)
    2ada:	881b      	ldrh	r3, [r3, #0]
    2adc:	b29b      	uxth	r3, r3
    2ade:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    2ae2:	d33c      	bcc.n	2b5e <UART2_IRQHandler+0xee>
				UART2Count = 0; /* buffer overflow */
    2ae4:	4b22      	ldr	r3, [pc, #136]	; (2b70 <UART2_IRQHandler+0x100>)
    2ae6:	2200      	movs	r2, #0
    2ae8:	801a      	strh	r2, [r3, #0]
    2aea:	e038      	b.n	2b5e <UART2_IRQHandler+0xee>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2aec:	79bb      	ldrb	r3, [r7, #6]
    2aee:	2b02      	cmp	r3, #2
    2af0:	d119      	bne.n	2b26 <UART2_IRQHandler+0xb6>
	{
		/* Receive Data Available */
		UART2Buffer[UART2Count] = LPC_UART2->RBR;
    2af2:	4b1f      	ldr	r3, [pc, #124]	; (2b70 <UART2_IRQHandler+0x100>)
    2af4:	881b      	ldrh	r3, [r3, #0]
    2af6:	b29b      	uxth	r3, r3
    2af8:	461a      	mov	r2, r3
    2afa:	4b1b      	ldr	r3, [pc, #108]	; (2b68 <UART2_IRQHandler+0xf8>)
    2afc:	781b      	ldrb	r3, [r3, #0]
    2afe:	b2d9      	uxtb	r1, r3
    2b00:	4b1c      	ldr	r3, [pc, #112]	; (2b74 <UART2_IRQHandler+0x104>)
    2b02:	5499      	strb	r1, [r3, r2]
		UART2Count++;
    2b04:	4b1a      	ldr	r3, [pc, #104]	; (2b70 <UART2_IRQHandler+0x100>)
    2b06:	881b      	ldrh	r3, [r3, #0]
    2b08:	b29b      	uxth	r3, r3
    2b0a:	3301      	adds	r3, #1
    2b0c:	b29a      	uxth	r2, r3
    2b0e:	4b18      	ldr	r3, [pc, #96]	; (2b70 <UART2_IRQHandler+0x100>)
    2b10:	801a      	strh	r2, [r3, #0]
		if (UART2Count >= UART2_BUFFSIZE) {
    2b12:	4b17      	ldr	r3, [pc, #92]	; (2b70 <UART2_IRQHandler+0x100>)
    2b14:	881b      	ldrh	r3, [r3, #0]
    2b16:	b29b      	uxth	r3, r3
    2b18:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    2b1c:	d31f      	bcc.n	2b5e <UART2_IRQHandler+0xee>
			UART2Count = 0; /* buffer overflow */
    2b1e:	4b14      	ldr	r3, [pc, #80]	; (2b70 <UART2_IRQHandler+0x100>)
    2b20:	2200      	movs	r2, #0
    2b22:	801a      	strh	r2, [r3, #0]
    2b24:	e01b      	b.n	2b5e <UART2_IRQHandler+0xee>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2b26:	79bb      	ldrb	r3, [r7, #6]
    2b28:	2b06      	cmp	r3, #6
    2b2a:	d106      	bne.n	2b3a <UART2_IRQHandler+0xca>
	{
		/* Character Time-out indicator */
		UART2Status |= 0x100; /* Bit 9 as the CTI error */
    2b2c:	4b0f      	ldr	r3, [pc, #60]	; (2b6c <UART2_IRQHandler+0xfc>)
    2b2e:	681b      	ldr	r3, [r3, #0]
    2b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2b34:	4a0d      	ldr	r2, [pc, #52]	; (2b6c <UART2_IRQHandler+0xfc>)
    2b36:	6013      	str	r3, [r2, #0]
    2b38:	e011      	b.n	2b5e <UART2_IRQHandler+0xee>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2b3a:	79bb      	ldrb	r3, [r7, #6]
    2b3c:	2b01      	cmp	r3, #1
    2b3e:	d10e      	bne.n	2b5e <UART2_IRQHandler+0xee>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART2->LSR; /* Check status in the LSR to see if
    2b40:	4b09      	ldr	r3, [pc, #36]	; (2b68 <UART2_IRQHandler+0xf8>)
    2b42:	7d1b      	ldrb	r3, [r3, #20]
    2b44:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    2b46:	797b      	ldrb	r3, [r7, #5]
    2b48:	f003 0320 	and.w	r3, r3, #32
    2b4c:	2b00      	cmp	r3, #0
    2b4e:	d003      	beq.n	2b58 <UART2_IRQHandler+0xe8>
			UART2TxEmpty = 1;
    2b50:	4b09      	ldr	r3, [pc, #36]	; (2b78 <UART2_IRQHandler+0x108>)
    2b52:	2201      	movs	r2, #1
    2b54:	701a      	strb	r2, [r3, #0]
    2b56:	e002      	b.n	2b5e <UART2_IRQHandler+0xee>
		} else {
			UART2TxEmpty = 0;
    2b58:	4b07      	ldr	r3, [pc, #28]	; (2b78 <UART2_IRQHandler+0x108>)
    2b5a:	2200      	movs	r2, #0
    2b5c:	701a      	strb	r2, [r3, #0]
		}
	}
}
    2b5e:	370c      	adds	r7, #12
    2b60:	46bd      	mov	sp, r7
    2b62:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b66:	4770      	bx	lr
    2b68:	40098000 	.word	0x40098000
    2b6c:	100014b8 	.word	0x100014b8
    2b70:	1000043c 	.word	0x1000043c
    2b74:	100016cc 	.word	0x100016cc
    2b78:	10000017 	.word	0x10000017

00002b7c <UART3_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART3_IRQHandler(void) {
    2b7c:	b480      	push	{r7}
    2b7e:	b083      	sub	sp, #12
    2b80:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART3->IIR;
    2b82:	4b3b      	ldr	r3, [pc, #236]	; (2c70 <UART3_IRQHandler+0xf4>)
    2b84:	689b      	ldr	r3, [r3, #8]
    2b86:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    2b88:	79bb      	ldrb	r3, [r7, #6]
    2b8a:	085b      	lsrs	r3, r3, #1
    2b8c:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    2b8e:	79bb      	ldrb	r3, [r7, #6]
    2b90:	f003 0307 	and.w	r3, r3, #7
    2b94:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    2b96:	79bb      	ldrb	r3, [r7, #6]
    2b98:	2b03      	cmp	r3, #3
    2b9a:	d12c      	bne.n	2bf6 <UART3_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART3->LSR;
    2b9c:	4b34      	ldr	r3, [pc, #208]	; (2c70 <UART3_IRQHandler+0xf4>)
    2b9e:	7d1b      	ldrb	r3, [r3, #20]
    2ba0:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2ba2:	797b      	ldrb	r3, [r7, #5]
    2ba4:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2ba8:	2b00      	cmp	r3, #0
    2baa:	d006      	beq.n	2bba <UART3_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART3Status = LSRValue;
    2bac:	797b      	ldrb	r3, [r7, #5]
    2bae:	4a31      	ldr	r2, [pc, #196]	; (2c74 <UART3_IRQHandler+0xf8>)
    2bb0:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART3->RBR; /* Dummy read on RX to clear
    2bb2:	4b2f      	ldr	r3, [pc, #188]	; (2c70 <UART3_IRQHandler+0xf4>)
    2bb4:	781b      	ldrb	r3, [r3, #0]
    2bb6:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2bb8:	e055      	b.n	2c66 <UART3_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    2bba:	797b      	ldrb	r3, [r7, #5]
    2bbc:	f003 0301 	and.w	r3, r3, #1
    2bc0:	2b00      	cmp	r3, #0
    2bc2:	d050      	beq.n	2c66 <UART3_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART3Buffer[UART3Count] = LPC_UART3->RBR;
    2bc4:	4b2c      	ldr	r3, [pc, #176]	; (2c78 <UART3_IRQHandler+0xfc>)
    2bc6:	881b      	ldrh	r3, [r3, #0]
    2bc8:	b29b      	uxth	r3, r3
    2bca:	461a      	mov	r2, r3
    2bcc:	4b28      	ldr	r3, [pc, #160]	; (2c70 <UART3_IRQHandler+0xf4>)
    2bce:	781b      	ldrb	r3, [r3, #0]
    2bd0:	b2d9      	uxtb	r1, r3
    2bd2:	4b2a      	ldr	r3, [pc, #168]	; (2c7c <UART3_IRQHandler+0x100>)
    2bd4:	5499      	strb	r1, [r3, r2]
			UART3Count++;
    2bd6:	4b28      	ldr	r3, [pc, #160]	; (2c78 <UART3_IRQHandler+0xfc>)
    2bd8:	881b      	ldrh	r3, [r3, #0]
    2bda:	b29b      	uxth	r3, r3
    2bdc:	3301      	adds	r3, #1
    2bde:	b29a      	uxth	r2, r3
    2be0:	4b25      	ldr	r3, [pc, #148]	; (2c78 <UART3_IRQHandler+0xfc>)
    2be2:	801a      	strh	r2, [r3, #0]
			if (UART3Count == BUFSIZE) {
    2be4:	4b24      	ldr	r3, [pc, #144]	; (2c78 <UART3_IRQHandler+0xfc>)
    2be6:	881b      	ldrh	r3, [r3, #0]
    2be8:	b29b      	uxth	r3, r3
    2bea:	2bff      	cmp	r3, #255	; 0xff
    2bec:	d13b      	bne.n	2c66 <UART3_IRQHandler+0xea>
				UART3Count = 0; /* buffer overflow */
    2bee:	4b22      	ldr	r3, [pc, #136]	; (2c78 <UART3_IRQHandler+0xfc>)
    2bf0:	2200      	movs	r2, #0
    2bf2:	801a      	strh	r2, [r3, #0]
    2bf4:	e037      	b.n	2c66 <UART3_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2bf6:	79bb      	ldrb	r3, [r7, #6]
    2bf8:	2b02      	cmp	r3, #2
    2bfa:	d118      	bne.n	2c2e <UART3_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART3Buffer[UART3Count] = LPC_UART3->RBR;
    2bfc:	4b1e      	ldr	r3, [pc, #120]	; (2c78 <UART3_IRQHandler+0xfc>)
    2bfe:	881b      	ldrh	r3, [r3, #0]
    2c00:	b29b      	uxth	r3, r3
    2c02:	461a      	mov	r2, r3
    2c04:	4b1a      	ldr	r3, [pc, #104]	; (2c70 <UART3_IRQHandler+0xf4>)
    2c06:	781b      	ldrb	r3, [r3, #0]
    2c08:	b2d9      	uxtb	r1, r3
    2c0a:	4b1c      	ldr	r3, [pc, #112]	; (2c7c <UART3_IRQHandler+0x100>)
    2c0c:	5499      	strb	r1, [r3, r2]
		UART3Count++;
    2c0e:	4b1a      	ldr	r3, [pc, #104]	; (2c78 <UART3_IRQHandler+0xfc>)
    2c10:	881b      	ldrh	r3, [r3, #0]
    2c12:	b29b      	uxth	r3, r3
    2c14:	3301      	adds	r3, #1
    2c16:	b29a      	uxth	r2, r3
    2c18:	4b17      	ldr	r3, [pc, #92]	; (2c78 <UART3_IRQHandler+0xfc>)
    2c1a:	801a      	strh	r2, [r3, #0]
		if (UART3Count == BUFSIZE) {
    2c1c:	4b16      	ldr	r3, [pc, #88]	; (2c78 <UART3_IRQHandler+0xfc>)
    2c1e:	881b      	ldrh	r3, [r3, #0]
    2c20:	b29b      	uxth	r3, r3
    2c22:	2bff      	cmp	r3, #255	; 0xff
    2c24:	d11f      	bne.n	2c66 <UART3_IRQHandler+0xea>
			UART3Count = 0; /* buffer overflow */
    2c26:	4b14      	ldr	r3, [pc, #80]	; (2c78 <UART3_IRQHandler+0xfc>)
    2c28:	2200      	movs	r2, #0
    2c2a:	801a      	strh	r2, [r3, #0]
    2c2c:	e01b      	b.n	2c66 <UART3_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2c2e:	79bb      	ldrb	r3, [r7, #6]
    2c30:	2b06      	cmp	r3, #6
    2c32:	d106      	bne.n	2c42 <UART3_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART3Status |= 0x100; /* Bit 9 as the CTI error */
    2c34:	4b0f      	ldr	r3, [pc, #60]	; (2c74 <UART3_IRQHandler+0xf8>)
    2c36:	681b      	ldr	r3, [r3, #0]
    2c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2c3c:	4a0d      	ldr	r2, [pc, #52]	; (2c74 <UART3_IRQHandler+0xf8>)
    2c3e:	6013      	str	r3, [r2, #0]
    2c40:	e011      	b.n	2c66 <UART3_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2c42:	79bb      	ldrb	r3, [r7, #6]
    2c44:	2b01      	cmp	r3, #1
    2c46:	d10e      	bne.n	2c66 <UART3_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART3->LSR; /* Check status in the LSR to see if
    2c48:	4b09      	ldr	r3, [pc, #36]	; (2c70 <UART3_IRQHandler+0xf4>)
    2c4a:	7d1b      	ldrb	r3, [r3, #20]
    2c4c:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    2c4e:	797b      	ldrb	r3, [r7, #5]
    2c50:	f003 0320 	and.w	r3, r3, #32
    2c54:	2b00      	cmp	r3, #0
    2c56:	d003      	beq.n	2c60 <UART3_IRQHandler+0xe4>
			UART3TxEmpty = 1;
    2c58:	4b09      	ldr	r3, [pc, #36]	; (2c80 <UART3_IRQHandler+0x104>)
    2c5a:	2201      	movs	r2, #1
    2c5c:	701a      	strb	r2, [r3, #0]
    2c5e:	e002      	b.n	2c66 <UART3_IRQHandler+0xea>
		} else {
			UART3TxEmpty = 0;
    2c60:	4b07      	ldr	r3, [pc, #28]	; (2c80 <UART3_IRQHandler+0x104>)
    2c62:	2200      	movs	r2, #0
    2c64:	701a      	strb	r2, [r3, #0]
		}
	}
}
    2c66:	370c      	adds	r7, #12
    2c68:	46bd      	mov	sp, r7
    2c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c6e:	4770      	bx	lr
    2c70:	4009c000 	.word	0x4009c000
    2c74:	100014c0 	.word	0x100014c0
    2c78:	1000043e 	.word	0x1000043e
    2c7c:	100015cc 	.word	0x100015cc
    2c80:	10000016 	.word	0x10000016

00002c84 <UARTInit>:
 ** Returned value:		true or false, return false only if the
 **						interrupt handler can't be installed to the
 **						VIC table
 **
 *****************************************************************************/
uint32_t UARTInit(uint32_t PortNum, uint32_t baudrate) {
    2c84:	b580      	push	{r7, lr}
    2c86:	b086      	sub	sp, #24
    2c88:	af00      	add	r7, sp, #0
    2c8a:	6078      	str	r0, [r7, #4]
    2c8c:	6039      	str	r1, [r7, #0]
	uint32_t Fdiv;
	uint32_t pclkdiv, pclk;
	if (PortNum == 0) {
    2c8e:	687b      	ldr	r3, [r7, #4]
    2c90:	2b00      	cmp	r3, #0
    2c92:	d15b      	bne.n	2d4c <UARTInit+0xc8>
		LPC_PINCON->PINSEL0 &= ~0x000000F0;
    2c94:	4aa5      	ldr	r2, [pc, #660]	; (2f2c <UARTInit+0x2a8>)
    2c96:	4ba5      	ldr	r3, [pc, #660]	; (2f2c <UARTInit+0x2a8>)
    2c98:	681b      	ldr	r3, [r3, #0]
    2c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2c9e:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00000050; /* RxD0 is P0.3 and TxD0 is P0.2 */
    2ca0:	4aa2      	ldr	r2, [pc, #648]	; (2f2c <UARTInit+0x2a8>)
    2ca2:	4ba2      	ldr	r3, [pc, #648]	; (2f2c <UARTInit+0x2a8>)
    2ca4:	681b      	ldr	r3, [r3, #0]
    2ca6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    2caa:	6013      	str	r3, [r2, #0]
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART0 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
    2cac:	4ba0      	ldr	r3, [pc, #640]	; (2f30 <UARTInit+0x2ac>)
    2cae:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2cb2:	099b      	lsrs	r3, r3, #6
    2cb4:	f003 0303 	and.w	r3, r3, #3
    2cb8:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2cba:	693b      	ldr	r3, [r7, #16]
    2cbc:	2b02      	cmp	r3, #2
    2cbe:	d00c      	beq.n	2cda <UARTInit+0x56>
    2cc0:	2b03      	cmp	r3, #3
    2cc2:	d00f      	beq.n	2ce4 <UARTInit+0x60>
    2cc4:	2b01      	cmp	r3, #1
    2cc6:	d004      	beq.n	2cd2 <UARTInit+0x4e>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2cc8:	4b9a      	ldr	r3, [pc, #616]	; (2f34 <UARTInit+0x2b0>)
    2cca:	681b      	ldr	r3, [r3, #0]
    2ccc:	089b      	lsrs	r3, r3, #2
    2cce:	617b      	str	r3, [r7, #20]
			break;
    2cd0:	e00d      	b.n	2cee <UARTInit+0x6a>
		case 0x01:
			pclk = SystemCoreClock;
    2cd2:	4b98      	ldr	r3, [pc, #608]	; (2f34 <UARTInit+0x2b0>)
    2cd4:	681b      	ldr	r3, [r3, #0]
    2cd6:	617b      	str	r3, [r7, #20]
			break;
    2cd8:	e009      	b.n	2cee <UARTInit+0x6a>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2cda:	4b96      	ldr	r3, [pc, #600]	; (2f34 <UARTInit+0x2b0>)
    2cdc:	681b      	ldr	r3, [r3, #0]
    2cde:	085b      	lsrs	r3, r3, #1
    2ce0:	617b      	str	r3, [r7, #20]
			break;
    2ce2:	e004      	b.n	2cee <UARTInit+0x6a>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2ce4:	4b93      	ldr	r3, [pc, #588]	; (2f34 <UARTInit+0x2b0>)
    2ce6:	681b      	ldr	r3, [r3, #0]
    2ce8:	08db      	lsrs	r3, r3, #3
    2cea:	617b      	str	r3, [r7, #20]
			break;
    2cec:	bf00      	nop
		}
		LPC_UART0->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2cee:	4b92      	ldr	r3, [pc, #584]	; (2f38 <UARTInit+0x2b4>)
    2cf0:	2283      	movs	r2, #131	; 0x83
    2cf2:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2cf4:	697b      	ldr	r3, [r7, #20]
    2cf6:	091a      	lsrs	r2, r3, #4
    2cf8:	683b      	ldr	r3, [r7, #0]
    2cfa:	fbb2 f3f3 	udiv	r3, r2, r3
    2cfe:	60fb      	str	r3, [r7, #12]
		if (baudrate == 115200){
    2d00:	683b      	ldr	r3, [r7, #0]
    2d02:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2d06:	d10a      	bne.n	2d1e <UARTInit+0x9a>
			LPC_UART0->DLM = 0;
    2d08:	4b8b      	ldr	r3, [pc, #556]	; (2f38 <UARTInit+0x2b4>)
    2d0a:	2200      	movs	r2, #0
    2d0c:	711a      	strb	r2, [r3, #4]
			LPC_UART0->DLL = 9;
    2d0e:	4b8a      	ldr	r3, [pc, #552]	; (2f38 <UARTInit+0x2b4>)
    2d10:	2209      	movs	r2, #9
    2d12:	701a      	strb	r2, [r3, #0]
			LPC_UART0->FDR=1<<0|1<<5;
    2d14:	4b88      	ldr	r3, [pc, #544]	; (2f38 <UARTInit+0x2b4>)
    2d16:	2221      	movs	r2, #33	; 0x21
    2d18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    2d1c:	e008      	b.n	2d30 <UARTInit+0xac>
		}else{
			LPC_UART0->DLM = Fdiv / 256;
    2d1e:	4a86      	ldr	r2, [pc, #536]	; (2f38 <UARTInit+0x2b4>)
    2d20:	68fb      	ldr	r3, [r7, #12]
    2d22:	0a1b      	lsrs	r3, r3, #8
    2d24:	b2db      	uxtb	r3, r3
    2d26:	7113      	strb	r3, [r2, #4]
			LPC_UART0->DLL = Fdiv % 256;
    2d28:	4b83      	ldr	r3, [pc, #524]	; (2f38 <UARTInit+0x2b4>)
    2d2a:	68fa      	ldr	r2, [r7, #12]
    2d2c:	b2d2      	uxtb	r2, r2
    2d2e:	701a      	strb	r2, [r3, #0]
		}
		LPC_UART0->LCR = 0x03; /* DLAB = 0 */
    2d30:	4b81      	ldr	r3, [pc, #516]	; (2f38 <UARTInit+0x2b4>)
    2d32:	2203      	movs	r2, #3
    2d34:	731a      	strb	r2, [r3, #12]
		LPC_UART0->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2d36:	4b80      	ldr	r3, [pc, #512]	; (2f38 <UARTInit+0x2b4>)
    2d38:	2207      	movs	r2, #7
    2d3a:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART0_IRQn);
    2d3c:	2005      	movs	r0, #5
    2d3e:	f7ff fd59 	bl	27f4 <NVIC_EnableIRQ>
		LPC_UART0->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART0 interrupt */
    2d42:	4b7d      	ldr	r3, [pc, #500]	; (2f38 <UARTInit+0x2b4>)
    2d44:	2207      	movs	r2, #7
    2d46:	605a      	str	r2, [r3, #4]
		return (TRUE);
    2d48:	2301      	movs	r3, #1
    2d4a:	e12a      	b.n	2fa2 <UARTInit+0x31e>
	} else if (PortNum == 1) {
    2d4c:	687b      	ldr	r3, [r7, #4]
    2d4e:	2b01      	cmp	r3, #1
    2d50:	d165      	bne.n	2e1e <UARTInit+0x19a>
		NVIC_DisableIRQ(UART1_IRQn);
    2d52:	2006      	movs	r0, #6
    2d54:	f7ff fd66 	bl	2824 <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 4;
    2d58:	4a75      	ldr	r2, [pc, #468]	; (2f30 <UARTInit+0x2ac>)
    2d5a:	4b75      	ldr	r3, [pc, #468]	; (2f30 <UARTInit+0x2ac>)
    2d5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2d60:	f043 0310 	orr.w	r3, r3, #16
    2d64:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL4 &= ~0x0000000F;
    2d68:	4a70      	ldr	r2, [pc, #448]	; (2f2c <UARTInit+0x2a8>)
    2d6a:	4b70      	ldr	r3, [pc, #448]	; (2f2c <UARTInit+0x2a8>)
    2d6c:	691b      	ldr	r3, [r3, #16]
    2d6e:	f023 030f 	bic.w	r3, r3, #15
    2d72:	6113      	str	r3, [r2, #16]
		LPC_PINCON->PINSEL4 |= 0x0000000A; /* Enable RxD1 P0.16, TxD1 P0.15 */
    2d74:	4a6d      	ldr	r2, [pc, #436]	; (2f2c <UARTInit+0x2a8>)
    2d76:	4b6d      	ldr	r3, [pc, #436]	; (2f2c <UARTInit+0x2a8>)
    2d78:	691b      	ldr	r3, [r3, #16]
    2d7a:	f043 030a 	orr.w	r3, r3, #10
    2d7e:	6113      	str	r3, [r2, #16]

		//| 1<<25; //Enable PCUART1
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 8,9 are for UART1 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
    2d80:	4b6b      	ldr	r3, [pc, #428]	; (2f30 <UARTInit+0x2ac>)
    2d82:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2d86:	0a1b      	lsrs	r3, r3, #8
    2d88:	f003 0303 	and.w	r3, r3, #3
    2d8c:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2d8e:	693b      	ldr	r3, [r7, #16]
    2d90:	2b02      	cmp	r3, #2
    2d92:	d00c      	beq.n	2dae <UARTInit+0x12a>
    2d94:	2b03      	cmp	r3, #3
    2d96:	d00f      	beq.n	2db8 <UARTInit+0x134>
    2d98:	2b01      	cmp	r3, #1
    2d9a:	d004      	beq.n	2da6 <UARTInit+0x122>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2d9c:	4b65      	ldr	r3, [pc, #404]	; (2f34 <UARTInit+0x2b0>)
    2d9e:	681b      	ldr	r3, [r3, #0]
    2da0:	089b      	lsrs	r3, r3, #2
    2da2:	617b      	str	r3, [r7, #20]
			break;
    2da4:	e00d      	b.n	2dc2 <UARTInit+0x13e>
		case 0x01:
			pclk = SystemCoreClock;
    2da6:	4b63      	ldr	r3, [pc, #396]	; (2f34 <UARTInit+0x2b0>)
    2da8:	681b      	ldr	r3, [r3, #0]
    2daa:	617b      	str	r3, [r7, #20]
			break;
    2dac:	e009      	b.n	2dc2 <UARTInit+0x13e>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2dae:	4b61      	ldr	r3, [pc, #388]	; (2f34 <UARTInit+0x2b0>)
    2db0:	681b      	ldr	r3, [r3, #0]
    2db2:	085b      	lsrs	r3, r3, #1
    2db4:	617b      	str	r3, [r7, #20]
			break;
    2db6:	e004      	b.n	2dc2 <UARTInit+0x13e>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2db8:	4b5e      	ldr	r3, [pc, #376]	; (2f34 <UARTInit+0x2b0>)
    2dba:	681b      	ldr	r3, [r3, #0]
    2dbc:	08db      	lsrs	r3, r3, #3
    2dbe:	617b      	str	r3, [r7, #20]
			break;
    2dc0:	bf00      	nop
		}
		LPC_UART1->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2dc2:	4b5e      	ldr	r3, [pc, #376]	; (2f3c <UARTInit+0x2b8>)
    2dc4:	2283      	movs	r2, #131	; 0x83
    2dc6:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2dc8:	697b      	ldr	r3, [r7, #20]
    2dca:	091a      	lsrs	r2, r3, #4
    2dcc:	683b      	ldr	r3, [r7, #0]
    2dce:	fbb2 f3f3 	udiv	r3, r2, r3
    2dd2:	60fb      	str	r3, [r7, #12]

		if (baudrate == 115200){
    2dd4:	683b      	ldr	r3, [r7, #0]
    2dd6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2dda:	d109      	bne.n	2df0 <UARTInit+0x16c>
			LPC_UART1->DLM = 0;
    2ddc:	4b57      	ldr	r3, [pc, #348]	; (2f3c <UARTInit+0x2b8>)
    2dde:	2200      	movs	r2, #0
    2de0:	711a      	strb	r2, [r3, #4]
			LPC_UART1->DLL = 9;
    2de2:	4b56      	ldr	r3, [pc, #344]	; (2f3c <UARTInit+0x2b8>)
    2de4:	2209      	movs	r2, #9
    2de6:	701a      	strb	r2, [r3, #0]
			LPC_UART1->FDR=1<<0|1<<5;
    2de8:	4b54      	ldr	r3, [pc, #336]	; (2f3c <UARTInit+0x2b8>)
    2dea:	2221      	movs	r2, #33	; 0x21
    2dec:	629a      	str	r2, [r3, #40]	; 0x28
    2dee:	e008      	b.n	2e02 <UARTInit+0x17e>
		}else{
			LPC_UART1->DLM = Fdiv / 256;
    2df0:	4a52      	ldr	r2, [pc, #328]	; (2f3c <UARTInit+0x2b8>)
    2df2:	68fb      	ldr	r3, [r7, #12]
    2df4:	0a1b      	lsrs	r3, r3, #8
    2df6:	b2db      	uxtb	r3, r3
    2df8:	7113      	strb	r3, [r2, #4]
			LPC_UART1->DLL = Fdiv % 256;
    2dfa:	4b50      	ldr	r3, [pc, #320]	; (2f3c <UARTInit+0x2b8>)
    2dfc:	68fa      	ldr	r2, [r7, #12]
    2dfe:	b2d2      	uxtb	r2, r2
    2e00:	701a      	strb	r2, [r3, #0]
		}
		LPC_UART1->LCR = 0x03; /* DLAB = 0 */
    2e02:	4b4e      	ldr	r3, [pc, #312]	; (2f3c <UARTInit+0x2b8>)
    2e04:	2203      	movs	r2, #3
    2e06:	731a      	strb	r2, [r3, #12]
		LPC_UART1->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2e08:	4b4c      	ldr	r3, [pc, #304]	; (2f3c <UARTInit+0x2b8>)
    2e0a:	2207      	movs	r2, #7
    2e0c:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART1_IRQn);
    2e0e:	2006      	movs	r0, #6
    2e10:	f7ff fcf0 	bl	27f4 <NVIC_EnableIRQ>
		LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART1 interrupt */
    2e14:	4b49      	ldr	r3, [pc, #292]	; (2f3c <UARTInit+0x2b8>)
    2e16:	2207      	movs	r2, #7
    2e18:	605a      	str	r2, [r3, #4]
		return (TRUE);
    2e1a:	2301      	movs	r3, #1
    2e1c:	e0c1      	b.n	2fa2 <UARTInit+0x31e>
	} else if (PortNum == 2) {
    2e1e:	687b      	ldr	r3, [r7, #4]
    2e20:	2b02      	cmp	r3, #2
    2e22:	d157      	bne.n	2ed4 <UARTInit+0x250>
		NVIC_DisableIRQ(UART2_IRQn);
    2e24:	2007      	movs	r0, #7
    2e26:	f7ff fcfd 	bl	2824 <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 24; // UART 2 PCONP bit 24
    2e2a:	4a41      	ldr	r2, [pc, #260]	; (2f30 <UARTInit+0x2ac>)
    2e2c:	4b40      	ldr	r3, [pc, #256]	; (2f30 <UARTInit+0x2ac>)
    2e2e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2e36:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL0 &= ~0x00F00000;
    2e3a:	4a3c      	ldr	r2, [pc, #240]	; (2f2c <UARTInit+0x2a8>)
    2e3c:	4b3b      	ldr	r3, [pc, #236]	; (2f2c <UARTInit+0x2a8>)
    2e3e:	681b      	ldr	r3, [r3, #0]
    2e40:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    2e44:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00500000; /* Enable TxD2 on 0.10, RxD2 on 0.11 */
    2e46:	4a39      	ldr	r2, [pc, #228]	; (2f2c <UARTInit+0x2a8>)
    2e48:	4b38      	ldr	r3, [pc, #224]	; (2f2c <UARTInit+0x2a8>)
    2e4a:	681b      	ldr	r3, [r3, #0]
    2e4c:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
    2e50:	6013      	str	r3, [r2, #0]
		pclkdiv = (LPC_SC->PCLKSEL0 >> 16) & 0x03;
    2e52:	4b37      	ldr	r3, [pc, #220]	; (2f30 <UARTInit+0x2ac>)
    2e54:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2e58:	0c1b      	lsrs	r3, r3, #16
    2e5a:	f003 0303 	and.w	r3, r3, #3
    2e5e:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2e60:	693b      	ldr	r3, [r7, #16]
    2e62:	2b02      	cmp	r3, #2
    2e64:	d00c      	beq.n	2e80 <UARTInit+0x1fc>
    2e66:	2b03      	cmp	r3, #3
    2e68:	d00f      	beq.n	2e8a <UARTInit+0x206>
    2e6a:	2b01      	cmp	r3, #1
    2e6c:	d004      	beq.n	2e78 <UARTInit+0x1f4>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2e6e:	4b31      	ldr	r3, [pc, #196]	; (2f34 <UARTInit+0x2b0>)
    2e70:	681b      	ldr	r3, [r3, #0]
    2e72:	089b      	lsrs	r3, r3, #2
    2e74:	617b      	str	r3, [r7, #20]
			break;
    2e76:	e00d      	b.n	2e94 <UARTInit+0x210>
		case 0x01:
			pclk = SystemCoreClock;
    2e78:	4b2e      	ldr	r3, [pc, #184]	; (2f34 <UARTInit+0x2b0>)
    2e7a:	681b      	ldr	r3, [r3, #0]
    2e7c:	617b      	str	r3, [r7, #20]
			break;
    2e7e:	e009      	b.n	2e94 <UARTInit+0x210>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2e80:	4b2c      	ldr	r3, [pc, #176]	; (2f34 <UARTInit+0x2b0>)
    2e82:	681b      	ldr	r3, [r3, #0]
    2e84:	085b      	lsrs	r3, r3, #1
    2e86:	617b      	str	r3, [r7, #20]
			break;
    2e88:	e004      	b.n	2e94 <UARTInit+0x210>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2e8a:	4b2a      	ldr	r3, [pc, #168]	; (2f34 <UARTInit+0x2b0>)
    2e8c:	681b      	ldr	r3, [r3, #0]
    2e8e:	08db      	lsrs	r3, r3, #3
    2e90:	617b      	str	r3, [r7, #20]
			break;
    2e92:	bf00      	nop
		}
		LPC_UART2->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2e94:	4b2a      	ldr	r3, [pc, #168]	; (2f40 <UARTInit+0x2bc>)
    2e96:	2283      	movs	r2, #131	; 0x83
    2e98:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2e9a:	697b      	ldr	r3, [r7, #20]
    2e9c:	091a      	lsrs	r2, r3, #4
    2e9e:	683b      	ldr	r3, [r7, #0]
    2ea0:	fbb2 f3f3 	udiv	r3, r2, r3
    2ea4:	60fb      	str	r3, [r7, #12]
		LPC_UART2->DLM = Fdiv / 256;
    2ea6:	4a26      	ldr	r2, [pc, #152]	; (2f40 <UARTInit+0x2bc>)
    2ea8:	68fb      	ldr	r3, [r7, #12]
    2eaa:	0a1b      	lsrs	r3, r3, #8
    2eac:	b2db      	uxtb	r3, r3
    2eae:	7113      	strb	r3, [r2, #4]
		LPC_UART2->DLL = Fdiv % 256;
    2eb0:	4b23      	ldr	r3, [pc, #140]	; (2f40 <UARTInit+0x2bc>)
    2eb2:	68fa      	ldr	r2, [r7, #12]
    2eb4:	b2d2      	uxtb	r2, r2
    2eb6:	701a      	strb	r2, [r3, #0]
		LPC_UART2->LCR = 0x03; /* DLAB = 0 */
    2eb8:	4b21      	ldr	r3, [pc, #132]	; (2f40 <UARTInit+0x2bc>)
    2eba:	2203      	movs	r2, #3
    2ebc:	731a      	strb	r2, [r3, #12]
		LPC_UART2->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2ebe:	4b20      	ldr	r3, [pc, #128]	; (2f40 <UARTInit+0x2bc>)
    2ec0:	2207      	movs	r2, #7
    2ec2:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART2_IRQn);
    2ec4:	2007      	movs	r0, #7
    2ec6:	f7ff fc95 	bl	27f4 <NVIC_EnableIRQ>
		LPC_UART2->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART2 interrupt */
    2eca:	4b1d      	ldr	r3, [pc, #116]	; (2f40 <UARTInit+0x2bc>)
    2ecc:	2207      	movs	r2, #7
    2ece:	605a      	str	r2, [r3, #4]
		//LPC_UART2->IER = IER_THRE; /* Polling */
		//LPC_UART2->TER = (1 << 7);
		return (TRUE);
    2ed0:	2301      	movs	r3, #1
    2ed2:	e066      	b.n	2fa2 <UARTInit+0x31e>
	} else if (PortNum == 3) {
    2ed4:	687b      	ldr	r3, [r7, #4]
    2ed6:	2b03      	cmp	r3, #3
    2ed8:	d162      	bne.n	2fa0 <UARTInit+0x31c>
		LPC_PINCON->PINSEL0 &= ~0x0000000F;
    2eda:	4a14      	ldr	r2, [pc, #80]	; (2f2c <UARTInit+0x2a8>)
    2edc:	4b13      	ldr	r3, [pc, #76]	; (2f2c <UARTInit+0x2a8>)
    2ede:	681b      	ldr	r3, [r3, #0]
    2ee0:	f023 030f 	bic.w	r3, r3, #15
    2ee4:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x0000000A; /* RxD3 is P0.1 and TxD3 is P0.0 */
    2ee6:	4a11      	ldr	r2, [pc, #68]	; (2f2c <UARTInit+0x2a8>)
    2ee8:	4b10      	ldr	r3, [pc, #64]	; (2f2c <UARTInit+0x2a8>)
    2eea:	681b      	ldr	r3, [r3, #0]
    2eec:	f043 030a 	orr.w	r3, r3, #10
    2ef0:	6013      	str	r3, [r2, #0]
		LPC_SC->PCONP |= 1 << 4 | 1 << 25; //Enable PCUART1
    2ef2:	4a0f      	ldr	r2, [pc, #60]	; (2f30 <UARTInit+0x2ac>)
    2ef4:	4b0e      	ldr	r3, [pc, #56]	; (2f30 <UARTInit+0x2ac>)
    2ef6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2efa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    2efe:	f043 0310 	orr.w	r3, r3, #16
    2f02:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART3 */
		pclkdiv = (LPC_SC->PCLKSEL1 >> 18) & 0x03;
    2f06:	4b0a      	ldr	r3, [pc, #40]	; (2f30 <UARTInit+0x2ac>)
    2f08:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
    2f0c:	0c9b      	lsrs	r3, r3, #18
    2f0e:	f003 0303 	and.w	r3, r3, #3
    2f12:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2f14:	693b      	ldr	r3, [r7, #16]
    2f16:	2b02      	cmp	r3, #2
    2f18:	d018      	beq.n	2f4c <UARTInit+0x2c8>
    2f1a:	2b03      	cmp	r3, #3
    2f1c:	d01b      	beq.n	2f56 <UARTInit+0x2d2>
    2f1e:	2b01      	cmp	r3, #1
    2f20:	d010      	beq.n	2f44 <UARTInit+0x2c0>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2f22:	4b04      	ldr	r3, [pc, #16]	; (2f34 <UARTInit+0x2b0>)
    2f24:	681b      	ldr	r3, [r3, #0]
    2f26:	089b      	lsrs	r3, r3, #2
    2f28:	617b      	str	r3, [r7, #20]
			break;
    2f2a:	e019      	b.n	2f60 <UARTInit+0x2dc>
    2f2c:	4002c000 	.word	0x4002c000
    2f30:	400fc000 	.word	0x400fc000
    2f34:	10000018 	.word	0x10000018
    2f38:	4000c000 	.word	0x4000c000
    2f3c:	40010000 	.word	0x40010000
    2f40:	40098000 	.word	0x40098000
		case 0x01:
			pclk = SystemCoreClock;
    2f44:	4b19      	ldr	r3, [pc, #100]	; (2fac <UARTInit+0x328>)
    2f46:	681b      	ldr	r3, [r3, #0]
    2f48:	617b      	str	r3, [r7, #20]
			break;
    2f4a:	e009      	b.n	2f60 <UARTInit+0x2dc>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2f4c:	4b17      	ldr	r3, [pc, #92]	; (2fac <UARTInit+0x328>)
    2f4e:	681b      	ldr	r3, [r3, #0]
    2f50:	085b      	lsrs	r3, r3, #1
    2f52:	617b      	str	r3, [r7, #20]
			break;
    2f54:	e004      	b.n	2f60 <UARTInit+0x2dc>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2f56:	4b15      	ldr	r3, [pc, #84]	; (2fac <UARTInit+0x328>)
    2f58:	681b      	ldr	r3, [r3, #0]
    2f5a:	08db      	lsrs	r3, r3, #3
    2f5c:	617b      	str	r3, [r7, #20]
			break;
    2f5e:	bf00      	nop
		}
		LPC_UART3->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2f60:	4b13      	ldr	r3, [pc, #76]	; (2fb0 <UARTInit+0x32c>)
    2f62:	2283      	movs	r2, #131	; 0x83
    2f64:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2f66:	697b      	ldr	r3, [r7, #20]
    2f68:	091a      	lsrs	r2, r3, #4
    2f6a:	683b      	ldr	r3, [r7, #0]
    2f6c:	fbb2 f3f3 	udiv	r3, r2, r3
    2f70:	60fb      	str	r3, [r7, #12]
		LPC_UART3->DLM = Fdiv / 256;
    2f72:	4a0f      	ldr	r2, [pc, #60]	; (2fb0 <UARTInit+0x32c>)
    2f74:	68fb      	ldr	r3, [r7, #12]
    2f76:	0a1b      	lsrs	r3, r3, #8
    2f78:	b2db      	uxtb	r3, r3
    2f7a:	7113      	strb	r3, [r2, #4]
		LPC_UART3->DLL = Fdiv % 256;
    2f7c:	4b0c      	ldr	r3, [pc, #48]	; (2fb0 <UARTInit+0x32c>)
    2f7e:	68fa      	ldr	r2, [r7, #12]
    2f80:	b2d2      	uxtb	r2, r2
    2f82:	701a      	strb	r2, [r3, #0]
		LPC_UART3->LCR = 0x03; /* DLAB = 0 */
    2f84:	4b0a      	ldr	r3, [pc, #40]	; (2fb0 <UARTInit+0x32c>)
    2f86:	2203      	movs	r2, #3
    2f88:	731a      	strb	r2, [r3, #12]
		LPC_UART3->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2f8a:	4b09      	ldr	r3, [pc, #36]	; (2fb0 <UARTInit+0x32c>)
    2f8c:	2207      	movs	r2, #7
    2f8e:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART3_IRQn);
    2f90:	2008      	movs	r0, #8
    2f92:	f7ff fc2f 	bl	27f4 <NVIC_EnableIRQ>
		LPC_UART3->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART3 interrupt */
    2f96:	4b06      	ldr	r3, [pc, #24]	; (2fb0 <UARTInit+0x32c>)
    2f98:	2207      	movs	r2, #7
    2f9a:	605a      	str	r2, [r3, #4]
		return (TRUE);
    2f9c:	2301      	movs	r3, #1
    2f9e:	e000      	b.n	2fa2 <UARTInit+0x31e>
	}
	return (FALSE);
    2fa0:	2300      	movs	r3, #0
}
    2fa2:	4618      	mov	r0, r3
    2fa4:	3718      	adds	r7, #24
    2fa6:	46bd      	mov	sp, r7
    2fa8:	bd80      	pop	{r7, pc}
    2faa:	bf00      	nop
    2fac:	10000018 	.word	0x10000018
    2fb0:	4009c000 	.word	0x4009c000

00002fb4 <UARTSend>:
 **
 ** parameters:			portNum, buffer pointer, and data length
 ** Returned value:		None
 **
 *****************************************************************************/
void UARTSend(uint32_t portNum, uint8_t *buffer, uint32_t Length) {
    2fb4:	b480      	push	{r7}
    2fb6:	b087      	sub	sp, #28
    2fb8:	af00      	add	r7, sp, #0
    2fba:	60f8      	str	r0, [r7, #12]
    2fbc:	60b9      	str	r1, [r7, #8]
    2fbe:	607a      	str	r2, [r7, #4]
	uint8_t *BufferPtr = buffer;
    2fc0:	68bb      	ldr	r3, [r7, #8]
    2fc2:	613b      	str	r3, [r7, #16]
	int index = 0;
    2fc4:	2300      	movs	r3, #0
    2fc6:	617b      	str	r3, [r7, #20]
	if (portNum == 0) {
    2fc8:	68fb      	ldr	r3, [r7, #12]
    2fca:	2b00      	cmp	r3, #0
    2fcc:	d11b      	bne.n	3006 <UARTSend+0x52>
		while (Length != 0) {
    2fce:	e016      	b.n	2ffe <UARTSend+0x4a>
			/* THRE status, contain valid data */
			while (!(UART0TxEmpty & 0x01));
    2fd0:	bf00      	nop
    2fd2:	4b3e      	ldr	r3, [pc, #248]	; (30cc <UARTSend+0x118>)
    2fd4:	781b      	ldrb	r3, [r3, #0]
    2fd6:	b2db      	uxtb	r3, r3
    2fd8:	f003 0301 	and.w	r3, r3, #1
    2fdc:	2b00      	cmp	r3, #0
    2fde:	d0f8      	beq.n	2fd2 <UARTSend+0x1e>
			LPC_UART0->THR = BufferPtr[index];
    2fe0:	493b      	ldr	r1, [pc, #236]	; (30d0 <UARTSend+0x11c>)
    2fe2:	697b      	ldr	r3, [r7, #20]
    2fe4:	693a      	ldr	r2, [r7, #16]
    2fe6:	4413      	add	r3, r2
    2fe8:	781b      	ldrb	r3, [r3, #0]
    2fea:	700b      	strb	r3, [r1, #0]
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
    2fec:	4b37      	ldr	r3, [pc, #220]	; (30cc <UARTSend+0x118>)
    2fee:	2200      	movs	r2, #0
    2ff0:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    2ff2:	697b      	ldr	r3, [r7, #20]
    2ff4:	3301      	adds	r3, #1
    2ff6:	617b      	str	r3, [r7, #20]
			Length--;
    2ff8:	687b      	ldr	r3, [r7, #4]
    2ffa:	3b01      	subs	r3, #1
    2ffc:	607b      	str	r3, [r7, #4]
 *****************************************************************************/
void UARTSend(uint32_t portNum, uint8_t *buffer, uint32_t Length) {
	uint8_t *BufferPtr = buffer;
	int index = 0;
	if (portNum == 0) {
		while (Length != 0) {
    2ffe:	687b      	ldr	r3, [r7, #4]
    3000:	2b00      	cmp	r3, #0
    3002:	d1e5      	bne.n	2fd0 <UARTSend+0x1c>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    3004:	e05c      	b.n	30c0 <UARTSend+0x10c>
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
    3006:	68fb      	ldr	r3, [r7, #12]
    3008:	2b01      	cmp	r3, #1
    300a:	d11b      	bne.n	3044 <UARTSend+0x90>
		while (Length != 0) {
    300c:	e016      	b.n	303c <UARTSend+0x88>
			/* THRE status, contain valid data */
			while (!(UART1TxEmpty & 0x01));
    300e:	bf00      	nop
    3010:	4b30      	ldr	r3, [pc, #192]	; (30d4 <UARTSend+0x120>)
    3012:	781b      	ldrb	r3, [r3, #0]
    3014:	b2db      	uxtb	r3, r3
    3016:	f003 0301 	and.w	r3, r3, #1
    301a:	2b00      	cmp	r3, #0
    301c:	d0f8      	beq.n	3010 <UARTSend+0x5c>
			LPC_UART1->THR = BufferPtr[index];
    301e:	492e      	ldr	r1, [pc, #184]	; (30d8 <UARTSend+0x124>)
    3020:	697b      	ldr	r3, [r7, #20]
    3022:	693a      	ldr	r2, [r7, #16]
    3024:	4413      	add	r3, r2
    3026:	781b      	ldrb	r3, [r3, #0]
    3028:	700b      	strb	r3, [r1, #0]
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
    302a:	4b2a      	ldr	r3, [pc, #168]	; (30d4 <UARTSend+0x120>)
    302c:	2200      	movs	r2, #0
    302e:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    3030:	697b      	ldr	r3, [r7, #20]
    3032:	3301      	adds	r3, #1
    3034:	617b      	str	r3, [r7, #20]
			Length--;
    3036:	687b      	ldr	r3, [r7, #4]
    3038:	3b01      	subs	r3, #1
    303a:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
		while (Length != 0) {
    303c:	687b      	ldr	r3, [r7, #4]
    303e:	2b00      	cmp	r3, #0
    3040:	d1e5      	bne.n	300e <UARTSend+0x5a>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    3042:	e03d      	b.n	30c0 <UARTSend+0x10c>
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
    3044:	68fb      	ldr	r3, [r7, #12]
    3046:	2b02      	cmp	r3, #2
    3048:	d11b      	bne.n	3082 <UARTSend+0xce>
		while (Length != 0) {
    304a:	e016      	b.n	307a <UARTSend+0xc6>
			/* THRE status, contain valid data */
			while (!(UART2TxEmpty & 0x01));
    304c:	bf00      	nop
    304e:	4b23      	ldr	r3, [pc, #140]	; (30dc <UARTSend+0x128>)
    3050:	781b      	ldrb	r3, [r3, #0]
    3052:	b2db      	uxtb	r3, r3
    3054:	f003 0301 	and.w	r3, r3, #1
    3058:	2b00      	cmp	r3, #0
    305a:	d0f8      	beq.n	304e <UARTSend+0x9a>
			LPC_UART2->THR = BufferPtr[index];
    305c:	4920      	ldr	r1, [pc, #128]	; (30e0 <UARTSend+0x12c>)
    305e:	697b      	ldr	r3, [r7, #20]
    3060:	693a      	ldr	r2, [r7, #16]
    3062:	4413      	add	r3, r2
    3064:	781b      	ldrb	r3, [r3, #0]
    3066:	700b      	strb	r3, [r1, #0]
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
    3068:	4b1c      	ldr	r3, [pc, #112]	; (30dc <UARTSend+0x128>)
    306a:	2200      	movs	r2, #0
    306c:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    306e:	697b      	ldr	r3, [r7, #20]
    3070:	3301      	adds	r3, #1
    3072:	617b      	str	r3, [r7, #20]
			Length--;
    3074:	687b      	ldr	r3, [r7, #4]
    3076:	3b01      	subs	r3, #1
    3078:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
		while (Length != 0) {
    307a:	687b      	ldr	r3, [r7, #4]
    307c:	2b00      	cmp	r3, #0
    307e:	d1e5      	bne.n	304c <UARTSend+0x98>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    3080:	e01e      	b.n	30c0 <UARTSend+0x10c>
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
    3082:	68fb      	ldr	r3, [r7, #12]
    3084:	2b03      	cmp	r3, #3
    3086:	d11a      	bne.n	30be <UARTSend+0x10a>
		while (Length != 0) {
    3088:	e016      	b.n	30b8 <UARTSend+0x104>
			/* THRE status, contain valid data */
			while (!(UART3TxEmpty & 0x01));
    308a:	bf00      	nop
    308c:	4b15      	ldr	r3, [pc, #84]	; (30e4 <UARTSend+0x130>)
    308e:	781b      	ldrb	r3, [r3, #0]
    3090:	b2db      	uxtb	r3, r3
    3092:	f003 0301 	and.w	r3, r3, #1
    3096:	2b00      	cmp	r3, #0
    3098:	d0f8      	beq.n	308c <UARTSend+0xd8>
			LPC_UART3->THR = BufferPtr[index];
    309a:	4913      	ldr	r1, [pc, #76]	; (30e8 <UARTSend+0x134>)
    309c:	697b      	ldr	r3, [r7, #20]
    309e:	693a      	ldr	r2, [r7, #16]
    30a0:	4413      	add	r3, r2
    30a2:	781b      	ldrb	r3, [r3, #0]
    30a4:	700b      	strb	r3, [r1, #0]
			UART3TxEmpty = 0; /* not empty in the THR until it shifts out */
    30a6:	4b0f      	ldr	r3, [pc, #60]	; (30e4 <UARTSend+0x130>)
    30a8:	2200      	movs	r2, #0
    30aa:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    30ac:	697b      	ldr	r3, [r7, #20]
    30ae:	3301      	adds	r3, #1
    30b0:	617b      	str	r3, [r7, #20]
			Length--;
    30b2:	687b      	ldr	r3, [r7, #4]
    30b4:	3b01      	subs	r3, #1
    30b6:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
		while (Length != 0) {
    30b8:	687b      	ldr	r3, [r7, #4]
    30ba:	2b00      	cmp	r3, #0
    30bc:	d1e5      	bne.n	308a <UARTSend+0xd6>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    30be:	bf00      	nop
}
    30c0:	371c      	adds	r7, #28
    30c2:	46bd      	mov	sp, r7
    30c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    30c8:	4770      	bx	lr
    30ca:	bf00      	nop
    30cc:	10000014 	.word	0x10000014
    30d0:	4000c000 	.word	0x4000c000
    30d4:	10000015 	.word	0x10000015
    30d8:	40010000 	.word	0x40010000
    30dc:	10000017 	.word	0x10000017
    30e0:	40098000 	.word	0x40098000
    30e4:	10000016 	.word	0x10000016
    30e8:	4009c000 	.word	0x4009c000

000030ec <ReadUart>:

uint16_t ReadUart( uint8_t *veri, uint8_t PortNum )
{
    30ec:	b480      	push	{r7}
    30ee:	b087      	sub	sp, #28
    30f0:	af00      	add	r7, sp, #0
    30f2:	6078      	str	r0, [r7, #4]
    30f4:	460b      	mov	r3, r1
    30f6:	70fb      	strb	r3, [r7, #3]
	uint8_t *veri_ptr = veri;
    30f8:	687b      	ldr	r3, [r7, #4]
    30fa:	617b      	str	r3, [r7, #20]
	uint16_t buff_count = 0;
    30fc:	2300      	movs	r3, #0
    30fe:	827b      	strh	r3, [r7, #18]
	if (PortNum == 0) {
    3100:	78fb      	ldrb	r3, [r7, #3]
    3102:	2b00      	cmp	r3, #0
    3104:	d122      	bne.n	314c <ReadUart+0x60>
		if (UART0Count > 0) {
    3106:	4b4e      	ldr	r3, [pc, #312]	; (3240 <ReadUart+0x154>)
    3108:	881b      	ldrh	r3, [r3, #0]
    310a:	b29b      	uxth	r3, r3
    310c:	2b00      	cmp	r3, #0
    310e:	d01d      	beq.n	314c <ReadUart+0x60>
			while (buff_count < UART0Count) {
    3110:	e00b      	b.n	312a <ReadUart+0x3e>
				*veri_ptr = UART0Buffer[buff_count];
    3112:	8a7b      	ldrh	r3, [r7, #18]
    3114:	4a4b      	ldr	r2, [pc, #300]	; (3244 <ReadUart+0x158>)
    3116:	5cd3      	ldrb	r3, [r2, r3]
    3118:	b2da      	uxtb	r2, r3
    311a:	697b      	ldr	r3, [r7, #20]
    311c:	701a      	strb	r2, [r3, #0]
				buff_count++;
    311e:	8a7b      	ldrh	r3, [r7, #18]
    3120:	3301      	adds	r3, #1
    3122:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    3124:	697b      	ldr	r3, [r7, #20]
    3126:	3301      	adds	r3, #1
    3128:	617b      	str	r3, [r7, #20]
{
	uint8_t *veri_ptr = veri;
	uint16_t buff_count = 0;
	if (PortNum == 0) {
		if (UART0Count > 0) {
			while (buff_count < UART0Count) {
    312a:	4b45      	ldr	r3, [pc, #276]	; (3240 <ReadUart+0x154>)
    312c:	881b      	ldrh	r3, [r3, #0]
    312e:	b29b      	uxth	r3, r3
    3130:	8a7a      	ldrh	r2, [r7, #18]
    3132:	429a      	cmp	r2, r3
    3134:	d3ed      	bcc.n	3112 <ReadUart+0x26>
				*veri_ptr = UART0Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    3136:	697b      	ldr	r3, [r7, #20]
    3138:	2200      	movs	r2, #0
    313a:	701a      	strb	r2, [r3, #0]
			uint16_t len = UART0Count;
    313c:	4b40      	ldr	r3, [pc, #256]	; (3240 <ReadUart+0x154>)
    313e:	881b      	ldrh	r3, [r3, #0]
    3140:	823b      	strh	r3, [r7, #16]
			UART0Count = 0;
    3142:	4b3f      	ldr	r3, [pc, #252]	; (3240 <ReadUart+0x154>)
    3144:	2200      	movs	r2, #0
    3146:	801a      	strh	r2, [r3, #0]
			return ( len );
    3148:	8a3b      	ldrh	r3, [r7, #16]
    314a:	e073      	b.n	3234 <ReadUart+0x148>
		}
	}
	if (PortNum == 1) {
    314c:	78fb      	ldrb	r3, [r7, #3]
    314e:	2b01      	cmp	r3, #1
    3150:	d124      	bne.n	319c <ReadUart+0xb0>



		if (UART1Count > 0) {
    3152:	4b3d      	ldr	r3, [pc, #244]	; (3248 <ReadUart+0x15c>)
    3154:	881b      	ldrh	r3, [r3, #0]
    3156:	b29b      	uxth	r3, r3
    3158:	2b00      	cmp	r3, #0
    315a:	d06a      	beq.n	3232 <ReadUart+0x146>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    315c:	b672      	cpsid	i

			__disable_irq();

			while (buff_count < UART1Count) {
    315e:	e00b      	b.n	3178 <ReadUart+0x8c>
				*veri_ptr = UART1Buffer[buff_count];
    3160:	8a7b      	ldrh	r3, [r7, #18]
    3162:	4a3a      	ldr	r2, [pc, #232]	; (324c <ReadUart+0x160>)
    3164:	5cd3      	ldrb	r3, [r2, r3]
    3166:	b2da      	uxtb	r2, r3
    3168:	697b      	ldr	r3, [r7, #20]
    316a:	701a      	strb	r2, [r3, #0]
				buff_count++;
    316c:	8a7b      	ldrh	r3, [r7, #18]
    316e:	3301      	adds	r3, #1
    3170:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    3172:	697b      	ldr	r3, [r7, #20]
    3174:	3301      	adds	r3, #1
    3176:	617b      	str	r3, [r7, #20]

		if (UART1Count > 0) {

			__disable_irq();

			while (buff_count < UART1Count) {
    3178:	4b33      	ldr	r3, [pc, #204]	; (3248 <ReadUart+0x15c>)
    317a:	881b      	ldrh	r3, [r3, #0]
    317c:	b29b      	uxth	r3, r3
    317e:	8a7a      	ldrh	r2, [r7, #18]
    3180:	429a      	cmp	r2, r3
    3182:	d3ed      	bcc.n	3160 <ReadUart+0x74>
				*veri_ptr = UART1Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    3184:	697b      	ldr	r3, [r7, #20]
    3186:	2200      	movs	r2, #0
    3188:	701a      	strb	r2, [r3, #0]
			uint16_t len = UART1Count;
    318a:	4b2f      	ldr	r3, [pc, #188]	; (3248 <ReadUart+0x15c>)
    318c:	881b      	ldrh	r3, [r3, #0]
    318e:	81fb      	strh	r3, [r7, #14]
			UART1Count = 0;
    3190:	4b2d      	ldr	r3, [pc, #180]	; (3248 <ReadUart+0x15c>)
    3192:	2200      	movs	r2, #0
    3194:	801a      	strh	r2, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3196:	b662      	cpsie	i

			__enable_irq();
			return ( len );
    3198:	89fb      	ldrh	r3, [r7, #14]
    319a:	e04b      	b.n	3234 <ReadUart+0x148>
		}
	}//GPS Port
	else if (PortNum == 2) {
    319c:	78fb      	ldrb	r3, [r7, #3]
    319e:	2b02      	cmp	r3, #2
    31a0:	d11f      	bne.n	31e2 <ReadUart+0xf6>
		if (UART2Count > 0) {
    31a2:	4b2b      	ldr	r3, [pc, #172]	; (3250 <ReadUart+0x164>)
    31a4:	881b      	ldrh	r3, [r3, #0]
    31a6:	b29b      	uxth	r3, r3
    31a8:	2b00      	cmp	r3, #0
    31aa:	d042      	beq.n	3232 <ReadUart+0x146>
			while (buff_count < UART2Count) {
    31ac:	e00b      	b.n	31c6 <ReadUart+0xda>
				*veri_ptr = UART2Buffer[buff_count];
    31ae:	8a7b      	ldrh	r3, [r7, #18]
    31b0:	4a28      	ldr	r2, [pc, #160]	; (3254 <ReadUart+0x168>)
    31b2:	5cd3      	ldrb	r3, [r2, r3]
    31b4:	b2da      	uxtb	r2, r3
    31b6:	697b      	ldr	r3, [r7, #20]
    31b8:	701a      	strb	r2, [r3, #0]
				buff_count++;
    31ba:	8a7b      	ldrh	r3, [r7, #18]
    31bc:	3301      	adds	r3, #1
    31be:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    31c0:	697b      	ldr	r3, [r7, #20]
    31c2:	3301      	adds	r3, #1
    31c4:	617b      	str	r3, [r7, #20]
			return ( len );
		}
	}//GPS Port
	else if (PortNum == 2) {
		if (UART2Count > 0) {
			while (buff_count < UART2Count) {
    31c6:	4b22      	ldr	r3, [pc, #136]	; (3250 <ReadUart+0x164>)
    31c8:	881b      	ldrh	r3, [r3, #0]
    31ca:	b29b      	uxth	r3, r3
    31cc:	8a7a      	ldrh	r2, [r7, #18]
    31ce:	429a      	cmp	r2, r3
    31d0:	d3ed      	bcc.n	31ae <ReadUart+0xc2>
				*veri_ptr = UART2Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    31d2:	697b      	ldr	r3, [r7, #20]
    31d4:	2200      	movs	r2, #0
    31d6:	701a      	strb	r2, [r3, #0]
			UART2Count = 0;
    31d8:	4b1d      	ldr	r3, [pc, #116]	; (3250 <ReadUart+0x164>)
    31da:	2200      	movs	r2, #0
    31dc:	801a      	strh	r2, [r3, #0]
			return buff_count;
    31de:	8a7b      	ldrh	r3, [r7, #18]
    31e0:	e028      	b.n	3234 <ReadUart+0x148>
		}
	} else if (PortNum == 3) {
    31e2:	78fb      	ldrb	r3, [r7, #3]
    31e4:	2b03      	cmp	r3, #3
    31e6:	d124      	bne.n	3232 <ReadUart+0x146>
		if (UART3Count > 0) {
    31e8:	4b1b      	ldr	r3, [pc, #108]	; (3258 <ReadUart+0x16c>)
    31ea:	881b      	ldrh	r3, [r3, #0]
    31ec:	b29b      	uxth	r3, r3
    31ee:	2b00      	cmp	r3, #0
    31f0:	d01f      	beq.n	3232 <ReadUart+0x146>
			while (buff_count < UART3Count) {
    31f2:	e00b      	b.n	320c <ReadUart+0x120>
				*veri_ptr = UART3Buffer[buff_count];
    31f4:	8a7b      	ldrh	r3, [r7, #18]
    31f6:	4a19      	ldr	r2, [pc, #100]	; (325c <ReadUart+0x170>)
    31f8:	5cd3      	ldrb	r3, [r2, r3]
    31fa:	b2da      	uxtb	r2, r3
    31fc:	697b      	ldr	r3, [r7, #20]
    31fe:	701a      	strb	r2, [r3, #0]
				buff_count++;
    3200:	8a7b      	ldrh	r3, [r7, #18]
    3202:	3301      	adds	r3, #1
    3204:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    3206:	697b      	ldr	r3, [r7, #20]
    3208:	3301      	adds	r3, #1
    320a:	617b      	str	r3, [r7, #20]
			UART2Count = 0;
			return buff_count;
		}
	} else if (PortNum == 3) {
		if (UART3Count > 0) {
			while (buff_count < UART3Count) {
    320c:	4b12      	ldr	r3, [pc, #72]	; (3258 <ReadUart+0x16c>)
    320e:	881b      	ldrh	r3, [r3, #0]
    3210:	b29b      	uxth	r3, r3
    3212:	8a7a      	ldrh	r2, [r7, #18]
    3214:	429a      	cmp	r2, r3
    3216:	d3ed      	bcc.n	31f4 <ReadUart+0x108>
				*veri_ptr = UART3Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    3218:	697b      	ldr	r3, [r7, #20]
    321a:	2200      	movs	r2, #0
    321c:	701a      	strb	r2, [r3, #0]
			int len = UART3Count;
    321e:	4b0e      	ldr	r3, [pc, #56]	; (3258 <ReadUart+0x16c>)
    3220:	881b      	ldrh	r3, [r3, #0]
    3222:	b29b      	uxth	r3, r3
    3224:	60bb      	str	r3, [r7, #8]
			UART3Count = 0;
    3226:	4b0c      	ldr	r3, [pc, #48]	; (3258 <ReadUart+0x16c>)
    3228:	2200      	movs	r2, #0
    322a:	801a      	strh	r2, [r3, #0]
			return len;
    322c:	68bb      	ldr	r3, [r7, #8]
    322e:	b29b      	uxth	r3, r3
    3230:	e000      	b.n	3234 <ReadUart+0x148>
		}
	}
	return 0;
    3232:	2300      	movs	r3, #0
}
    3234:	4618      	mov	r0, r3
    3236:	371c      	adds	r7, #28
    3238:	46bd      	mov	sp, r7
    323a:	f85d 7b04 	ldr.w	r7, [sp], #4
    323e:	4770      	bx	lr
    3240:	10000438 	.word	0x10000438
    3244:	100014c4 	.word	0x100014c4
    3248:	1000043a 	.word	0x1000043a
    324c:	10001068 	.word	0x10001068
    3250:	1000043c 	.word	0x1000043c
    3254:	100016cc 	.word	0x100016cc
    3258:	1000043e 	.word	0x1000043e
    325c:	100015cc 	.word	0x100015cc

00003260 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3260:	b480      	push	{r7}
    3262:	b083      	sub	sp, #12
    3264:	af00      	add	r7, sp, #0
    3266:	4603      	mov	r3, r0
    3268:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    326a:	4908      	ldr	r1, [pc, #32]	; (328c <NVIC_EnableIRQ+0x2c>)
    326c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    3270:	095b      	lsrs	r3, r3, #5
    3272:	79fa      	ldrb	r2, [r7, #7]
    3274:	f002 021f 	and.w	r2, r2, #31
    3278:	2001      	movs	r0, #1
    327a:	fa00 f202 	lsl.w	r2, r0, r2
    327e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3282:	370c      	adds	r7, #12
    3284:	46bd      	mov	sp, r7
    3286:	f85d 7b04 	ldr.w	r7, [sp], #4
    328a:	4770      	bx	lr
    328c:	e000e100 	.word	0xe000e100

00003290 <WDT_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void WDT_IRQHandler(void) {
    3290:	b480      	push	{r7}
    3292:	af00      	add	r7, sp, #0
	LPC_WDT->WDMOD &= ~WDTOF; /* clear the time-out terrupt flag */
    3294:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    329c:	781b      	ldrb	r3, [r3, #0]
    329e:	b2db      	uxtb	r3, r3
    32a0:	f023 0304 	bic.w	r3, r3, #4
    32a4:	b2db      	uxtb	r3, r3
    32a6:	7013      	strb	r3, [r2, #0]
	wdt_counter++;
    32a8:	4b04      	ldr	r3, [pc, #16]	; (32bc <WDT_IRQHandler+0x2c>)
    32aa:	681b      	ldr	r3, [r3, #0]
    32ac:	3301      	adds	r3, #1
    32ae:	4a03      	ldr	r2, [pc, #12]	; (32bc <WDT_IRQHandler+0x2c>)
    32b0:	6013      	str	r3, [r2, #0]
	return;
    32b2:	bf00      	nop
}
    32b4:	46bd      	mov	sp, r7
    32b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    32ba:	4770      	bx	lr
    32bc:	10001ec8 	.word	0x10001ec8

000032c0 <WDTInit>:
	//WDT_SetTimeOutRTC(300 * 1000 * 1000);
	LPC_WDT->WDMOD = 0x3;
	//WDTFeed();
}

uint32_t WDTInit(uint32_t feed) {
    32c0:	b580      	push	{r7, lr}
    32c2:	b082      	sub	sp, #8
    32c4:	af00      	add	r7, sp, #0
    32c6:	6078      	str	r0, [r7, #4]
	wdt_counter = 0;
    32c8:	4b0b      	ldr	r3, [pc, #44]	; (32f8 <WDTInit+0x38>)
    32ca:	2200      	movs	r2, #0
    32cc:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(WDT_IRQn);
    32ce:	2000      	movs	r0, #0
    32d0:	f7ff ffc6 	bl	3260 <NVIC_EnableIRQ>
	LPC_WDT->WDCLKSEL = 0x1;//0x0 = IRC (Internal RC Oscillator) ,0x1 = APB Peripheral clock
    32d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    32d8:	2201      	movs	r2, #1
    32da:	611a      	str	r2, [r3, #16]
	//IRC is active even in Deep Sleep, and WDT Interrupt can wake up MCU in this mode.
	LPC_WDT->WDTC = feed; /* once WDEN is set, the WDT will start after feeding */
    32dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    32e0:	687b      	ldr	r3, [r7, #4]
    32e2:	6053      	str	r3, [r2, #4]
	LPC_WDT->WDMOD = 0x3;
    32e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    32e8:	2203      	movs	r2, #3
    32ea:	701a      	strb	r2, [r3, #0]
	WDTFeed();
    32ec:	f000 f806 	bl	32fc <WDTFeed>
}
    32f0:	4618      	mov	r0, r3
    32f2:	3708      	adds	r7, #8
    32f4:	46bd      	mov	sp, r7
    32f6:	bd80      	pop	{r7, pc}
    32f8:	10001ec8 	.word	0x10001ec8

000032fc <WDTFeed>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void WDTFeed(void) {
    32fc:	b480      	push	{r7}
    32fe:	af00      	add	r7, sp, #0
	LPC_WDT->WDFEED = 0xAA; /* Feeding sequence */
    3300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3304:	22aa      	movs	r2, #170	; 0xaa
    3306:	721a      	strb	r2, [r3, #8]
	LPC_WDT->WDFEED = 0x55;
    3308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    330c:	2255      	movs	r2, #85	; 0x55
    330e:	721a      	strb	r2, [r3, #8]
	return;
    3310:	bf00      	nop
}
    3312:	46bd      	mov	sp, r7
    3314:	f85d 7b04 	ldr.w	r7, [sp], #4
    3318:	4770      	bx	lr
    331a:	bf00      	nop

0000331c <XModemReadByte>:
//	(*pByte) = receiveBuf[dataIndex++];
//	return (1);
//}


uint8_t XModemReadByte( unsigned char* pByte) {
    331c:	b580      	push	{r7, lr}
    331e:	b08a      	sub	sp, #40	; 0x28
    3320:	af00      	add	r7, sp, #0
    3322:	6078      	str	r0, [r7, #4]
	char* pnewline;
	char asciiLen[10];
	unsigned int len, i;
	unsigned dataoffset;

	if (dataIndex >= dataLen) {
    3324:	4b49      	ldr	r3, [pc, #292]	; (344c <XModemReadByte+0x130>)
    3326:	881a      	ldrh	r2, [r3, #0]
    3328:	4b49      	ldr	r3, [pc, #292]	; (3450 <XModemReadByte+0x134>)
    332a:	881b      	ldrh	r3, [r3, #0]
    332c:	429a      	cmp	r2, r3
    332e:	d37c      	bcc.n	342a <XModemReadByte+0x10e>
		// all buffer consumed read more from TCP connection
		dataLen = GSM_TCP_Recv( receiveBuf, RECEIVE_BUFF_LEN );
    3330:	4848      	ldr	r0, [pc, #288]	; (3454 <XModemReadByte+0x138>)
    3332:	f240 414c 	movw	r1, #1100	; 0x44c
    3336:	f7fd fb85 	bl	a44 <GSM_TCP_Recv>
    333a:	4603      	mov	r3, r0
    333c:	b29a      	uxth	r2, r3
    333e:	4b44      	ldr	r3, [pc, #272]	; (3450 <XModemReadByte+0x134>)
    3340:	801a      	strh	r2, [r3, #0]
		receiveBuf[dataLen] = '\0';
    3342:	4b43      	ldr	r3, [pc, #268]	; (3450 <XModemReadByte+0x134>)
    3344:	881b      	ldrh	r3, [r3, #0]
    3346:	461a      	mov	r2, r3
    3348:	4b42      	ldr	r3, [pc, #264]	; (3454 <XModemReadByte+0x138>)
    334a:	2100      	movs	r1, #0
    334c:	5499      	strb	r1, [r3, r2]

		// find the length of the message between
		// ",TCP," and "\r\n"
		pdata = strstr( receiveBuf, "IPD" );
    334e:	4841      	ldr	r0, [pc, #260]	; (3454 <XModemReadByte+0x138>)
    3350:	4941      	ldr	r1, [pc, #260]	; (3458 <XModemReadByte+0x13c>)
    3352:	f002 f952 	bl	55fa <strstr>
    3356:	4603      	mov	r3, r0
    3358:	627b      	str	r3, [r7, #36]	; 0x24
		if (pdata == NULL)
    335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    335c:	2b00      	cmp	r3, #0
    335e:	d117      	bne.n	3390 <XModemReadByte+0x74>
		{
			pdata = strstr( receiveBuf, ",TCP," );
    3360:	483c      	ldr	r0, [pc, #240]	; (3454 <XModemReadByte+0x138>)
    3362:	493e      	ldr	r1, [pc, #248]	; (345c <XModemReadByte+0x140>)
    3364:	f002 f949 	bl	55fa <strstr>
    3368:	4603      	mov	r3, r0
    336a:	627b      	str	r3, [r7, #36]	; 0x24
			if (pdata == NULL) {
    336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    336e:	2b00      	cmp	r3, #0
    3370:	d101      	bne.n	3376 <XModemReadByte+0x5a>
				return (0);
    3372:	2300      	movs	r3, #0
    3374:	e065      	b.n	3442 <XModemReadByte+0x126>
			}

			pnewline = strstr(pdata, "\r\n");
    3376:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3378:	4939      	ldr	r1, [pc, #228]	; (3460 <XModemReadByte+0x144>)
    337a:	f002 f93e 	bl	55fa <strstr>
    337e:	4603      	mov	r3, r0
    3380:	623b      	str	r3, [r7, #32]
			dataoffset = 2;
    3382:	2302      	movs	r3, #2
    3384:	61bb      	str	r3, [r7, #24]
			if (pnewline == NULL) {
    3386:	6a3b      	ldr	r3, [r7, #32]
    3388:	2b00      	cmp	r3, #0
    338a:	d10e      	bne.n	33aa <XModemReadByte+0x8e>
				return (0);
    338c:	2300      	movs	r3, #0
    338e:	e058      	b.n	3442 <XModemReadByte+0x126>
			}

		} else
		{
			pnewline = strstr( pdata, "TCP:" );
    3390:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3392:	4934      	ldr	r1, [pc, #208]	; (3464 <XModemReadByte+0x148>)
    3394:	f002 f931 	bl	55fa <strstr>
    3398:	4603      	mov	r3, r0
    339a:	623b      	str	r3, [r7, #32]
			if (pnewline == NULL) {
    339c:	6a3b      	ldr	r3, [r7, #32]
    339e:	2b00      	cmp	r3, #0
    33a0:	d101      	bne.n	33a6 <XModemReadByte+0x8a>
				return (0);
    33a2:	2300      	movs	r3, #0
    33a4:	e04d      	b.n	3442 <XModemReadByte+0x126>
			}
			dataoffset = 4;
    33a6:	2304      	movs	r3, #4
    33a8:	61bb      	str	r3, [r7, #24]
		}

		strncpy( asciiLen, pdata + 3, pnewline - pdata );
    33aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    33ac:	1cd9      	adds	r1, r3, #3
    33ae:	6a3a      	ldr	r2, [r7, #32]
    33b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    33b2:	1ad3      	subs	r3, r2, r3
    33b4:	f107 0208 	add.w	r2, r7, #8
    33b8:	4610      	mov	r0, r2
    33ba:	461a      	mov	r2, r3
    33bc:	f002 f8f1 	bl	55a2 <strncpy>

		asciiLen[pnewline - pdata] = '\0';
    33c0:	6a3a      	ldr	r2, [r7, #32]
    33c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    33c4:	1ad3      	subs	r3, r2, r3
    33c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
    33ca:	4413      	add	r3, r2
    33cc:	2200      	movs	r2, #0
    33ce:	f803 2c20 	strb.w	r2, [r3, #-32]

		len = atoi(asciiLen);
    33d2:	f107 0308 	add.w	r3, r7, #8
    33d6:	4618      	mov	r0, r3
    33d8:	f002 f864 	bl	54a4 <atoi>
    33dc:	4603      	mov	r3, r0
    33de:	617b      	str	r3, [r7, #20]

//		int count = sprintf(asciiLen, "%d", len );
//		asciiLen[count] = '\0';
//		TraceDumpHex(asciiLen, strlen(asciiLen));

		for (i = 0; i < len; i++) {
    33e0:	2300      	movs	r3, #0
    33e2:	61fb      	str	r3, [r7, #28]
    33e4:	e00d      	b.n	3402 <XModemReadByte+0xe6>
			receiveBuf[i] = *(pnewline + dataoffset + i);
    33e6:	69ba      	ldr	r2, [r7, #24]
    33e8:	69fb      	ldr	r3, [r7, #28]
    33ea:	4413      	add	r3, r2
    33ec:	6a3a      	ldr	r2, [r7, #32]
    33ee:	4413      	add	r3, r2
    33f0:	7819      	ldrb	r1, [r3, #0]
    33f2:	4a18      	ldr	r2, [pc, #96]	; (3454 <XModemReadByte+0x138>)
    33f4:	69fb      	ldr	r3, [r7, #28]
    33f6:	4413      	add	r3, r2
    33f8:	460a      	mov	r2, r1
    33fa:	701a      	strb	r2, [r3, #0]

//		int count = sprintf(asciiLen, "%d", len );
//		asciiLen[count] = '\0';
//		TraceDumpHex(asciiLen, strlen(asciiLen));

		for (i = 0; i < len; i++) {
    33fc:	69fb      	ldr	r3, [r7, #28]
    33fe:	3301      	adds	r3, #1
    3400:	61fb      	str	r3, [r7, #28]
    3402:	69fa      	ldr	r2, [r7, #28]
    3404:	697b      	ldr	r3, [r7, #20]
    3406:	429a      	cmp	r2, r3
    3408:	d3ed      	bcc.n	33e6 <XModemReadByte+0xca>
			receiveBuf[i] = *(pnewline + dataoffset + i);
		}
		dataLen   = len;
    340a:	697b      	ldr	r3, [r7, #20]
    340c:	b29a      	uxth	r2, r3
    340e:	4b10      	ldr	r3, [pc, #64]	; (3450 <XModemReadByte+0x134>)
    3410:	801a      	strh	r2, [r3, #0]
		dataIndex = 0;
    3412:	4b0e      	ldr	r3, [pc, #56]	; (344c <XModemReadByte+0x130>)
    3414:	2200      	movs	r2, #0
    3416:	801a      	strh	r2, [r3, #0]
		if( dataLen <= 0 ) {
    3418:	4b0d      	ldr	r3, [pc, #52]	; (3450 <XModemReadByte+0x134>)
    341a:	881b      	ldrh	r3, [r3, #0]
    341c:	2b00      	cmp	r3, #0
    341e:	d104      	bne.n	342a <XModemReadByte+0x10e>
			dataLen = 0;
    3420:	4b0b      	ldr	r3, [pc, #44]	; (3450 <XModemReadByte+0x134>)
    3422:	2200      	movs	r2, #0
    3424:	801a      	strh	r2, [r3, #0]
			return (0);  // no data available
    3426:	2300      	movs	r3, #0
    3428:	e00b      	b.n	3442 <XModemReadByte+0x126>
		}
	}

	(*pByte) = receiveBuf[dataIndex++];
    342a:	4b08      	ldr	r3, [pc, #32]	; (344c <XModemReadByte+0x130>)
    342c:	881b      	ldrh	r3, [r3, #0]
    342e:	1c5a      	adds	r2, r3, #1
    3430:	b291      	uxth	r1, r2
    3432:	4a06      	ldr	r2, [pc, #24]	; (344c <XModemReadByte+0x130>)
    3434:	8011      	strh	r1, [r2, #0]
    3436:	461a      	mov	r2, r3
    3438:	4b06      	ldr	r3, [pc, #24]	; (3454 <XModemReadByte+0x138>)
    343a:	5c9a      	ldrb	r2, [r3, r2]
    343c:	687b      	ldr	r3, [r7, #4]
    343e:	701a      	strb	r2, [r3, #0]
	return (1);
    3440:	2301      	movs	r3, #1
}
    3442:	4618      	mov	r0, r3
    3444:	3728      	adds	r7, #40	; 0x28
    3446:	46bd      	mov	sp, r7
    3448:	bd80      	pop	{r7, pc}
    344a:	bf00      	nop
    344c:	10000c8e 	.word	0x10000c8e
    3450:	10000c8c 	.word	0x10000c8c
    3454:	10000840 	.word	0x10000840
    3458:	00007320 	.word	0x00007320
    345c:	00007324 	.word	0x00007324
    3460:	0000732c 	.word	0x0000732c
    3464:	00007330 	.word	0x00007330

00003468 <XModem1K_Client>:


int XModem1K_Client(
		uint32_t (*pu32Xmodem1kRxPacketCallback)(uint8_t *pu8Data,
				uint16_t u16Len)) {
    3468:	b580      	push	{r7, lr}
    346a:	b0be      	sub	sp, #248	; 0xf8
    346c:	af00      	add	r7, sp, #0
    346e:	6078      	str	r0, [r7, #4]
	uint32_t u32InProgress = 1;
    3470:	2301      	movs	r3, #1
    3472:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	uint32_t u32State = STATE_IDLE;
    3476:	2300      	movs	r3, #0
    3478:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint32_t u32ByteCount;
	uint32_t u32PktLen;
	uint16_t u16CRC, calculatedCRC;
	uint16_t frameNum = 0;
    347c:	2300      	movs	r3, #0
    347e:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8

	uint32_t trials;

	/* Prepare UART for RX/TX */

	while (u32InProgress) {
    3482:	e21d      	b.n	38c0 <XModem1K_Client+0x458>
		WDTFeed();
    3484:	f7ff ff3a 	bl	32fc <WDTFeed>
		switch (u32State) {
    3488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    348c:	2b01      	cmp	r3, #1
    348e:	d01e      	beq.n	34ce <XModem1K_Client+0x66>
    3490:	2b01      	cmp	r3, #1
    3492:	d302      	bcc.n	349a <XModem1K_Client+0x32>
    3494:	2b02      	cmp	r3, #2
    3496:	d061      	beq.n	355c <XModem1K_Client+0xf4>
    3498:	e211      	b.n	38be <XModem1K_Client+0x456>
		case STATE_IDLE: {

			/* Send command to server indicating we are ready to receive */
			uint8_t u8Cmd = POLL;
    349a:	2343      	movs	r3, #67	; 0x43
    349c:	73fb      	strb	r3, [r7, #15]

			TraceNL( "Start downloading" );
    349e:	48dd      	ldr	r0, [pc, #884]	; (3814 <XModem1K_Client+0x3ac>)
    34a0:	f7ff f89a 	bl	25d8 <TraceNL>
			TracePutcHex( u8Cmd );
    34a4:	7bfb      	ldrb	r3, [r7, #15]
    34a6:	4618      	mov	r0, r3
    34a8:	f7ff f8bc 	bl	2624 <TracePutcHex>
			GSM_TCP_Send(&u8Cmd, 1);
    34ac:	f107 030f 	add.w	r3, r7, #15
    34b0:	4618      	mov	r0, r3
    34b2:	2101      	movs	r1, #1
    34b4:	f7fd fca0 	bl	df8 <GSM_TCP_Send>

			/* Start timeout to send another poll if we do not get a response */
			vTimerStart(POLL_PERIOD_ms);
    34b8:	f644 6020 	movw	r0, #20000	; 0x4e20
    34bc:	f000 fa10 	bl	38e0 <vTimerStart>
			trials   = DOWNLOAD_MAX_TRIALS;
    34c0:	2303      	movs	r3, #3
    34c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

			u32State = STATE_CONNECTING;
    34c6:	2301      	movs	r3, #1
    34c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		}
			break;
    34cc:	e1f8      	b.n	38c0 <XModem1K_Client+0x458>

		case STATE_CONNECTING: {
			uint8_t u8Data;

			/* Check if a character has been received on the UART */
			if( XModemReadByte( &u8Data ) )
    34ce:	f107 030e 	add.w	r3, r7, #14
    34d2:	4618      	mov	r0, r3
    34d4:	f7ff ff22 	bl	331c <XModemReadByte>
    34d8:	4603      	mov	r3, r0
    34da:	2b00      	cmp	r3, #0
    34dc:	d011      	beq.n	3502 <XModem1K_Client+0x9a>
			{
				/* Expecting a start of packet character */
				if( u8Data == SOH )
    34de:	7bbb      	ldrb	r3, [r7, #14]
    34e0:	2b01      	cmp	r3, #1
    34e2:	d13a      	bne.n	355a <XModem1K_Client+0xf2>
				{
					/* SOH indicates short pay load packet is being transmitted */
					u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    34e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    34e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
					u32ByteCount = 1;
    34ec:	2301      	movs	r3, #1
    34ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

					/* Start packet timeout */
					vTimerStart( PACKET_TIMEOUT_PERIOD_ms);
    34f2:	f644 6020 	movw	r0, #20000	; 0x4e20
    34f6:	f000 f9f3 	bl	38e0 <vTimerStart>

					/* Wait for a further characters */
					u32State = STATE_RECEIVING;
    34fa:	2302      	movs	r3, #2
    34fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    3500:	e1de      	b.n	38c0 <XModem1K_Client+0x458>
				}
			} else /* No data received yet, check poll command timeout */
			{
				if ((LPC_TIM0->TCR & 0x01) == 0) {
    3502:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3506:	685b      	ldr	r3, [r3, #4]
    3508:	f003 0301 	and.w	r3, r3, #1
    350c:	2b00      	cmp	r3, #0
    350e:	f040 81d7 	bne.w	38c0 <XModem1K_Client+0x458>
					/* Timeout expired following poll command transmission so try again.. */
					uint8_t u8Cmd = POLL;
    3512:	2343      	movs	r3, #67	; 0x43
    3514:	737b      	strb	r3, [r7, #13]

					if (trials-- > 0) {
    3516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    351a:	1e5a      	subs	r2, r3, #1
    351c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
    3520:	2b00      	cmp	r3, #0
    3522:	d014      	beq.n	354e <XModem1K_Client+0xe6>
						TraceNL("Connecting state timer expired sending  new request  ");
    3524:	48bc      	ldr	r0, [pc, #752]	; (3818 <XModem1K_Client+0x3b0>)
    3526:	f7ff f857 	bl	25d8 <TraceNL>
						TracePutcHex( u8Cmd );
    352a:	7b7b      	ldrb	r3, [r7, #13]
    352c:	4618      	mov	r0, r3
    352e:	f7ff f879 	bl	2624 <TracePutcHex>
						TraceNL("\r\n");
    3532:	48ba      	ldr	r0, [pc, #744]	; (381c <XModem1K_Client+0x3b4>)
    3534:	f7ff f850 	bl	25d8 <TraceNL>
						GSM_TCP_Send(&u8Cmd, 1);
    3538:	f107 030d 	add.w	r3, r7, #13
    353c:	4618      	mov	r0, r3
    353e:	2101      	movs	r1, #1
    3540:	f7fd fc5a 	bl	df8 <GSM_TCP_Send>

					/*
					 * Restart timeout to send another poll
					 * if we do not get a response
					 */
					vTimerStart( POLL_PERIOD_ms);
    3544:	f644 6020 	movw	r0, #20000	; 0x4e20
    3548:	f000 f9ca 	bl	38e0 <vTimerStart>
    354c:	e005      	b.n	355a <XModem1K_Client+0xf2>
						TraceNL("Connecting state timer expired sending  new request  ");
						TracePutcHex( u8Cmd );
						TraceNL("\r\n");
						GSM_TCP_Send(&u8Cmd, 1);
					} else {
						TraceNL("No reply give up upgrading");
    354e:	48b4      	ldr	r0, [pc, #720]	; (3820 <XModem1K_Client+0x3b8>)
    3550:	f7ff f842 	bl	25d8 <TraceNL>
						return ( DOWNLOAD_ERR_TIMEOUT );
    3554:	f04f 33ff 	mov.w	r3, #4294967295
    3558:	e1b7      	b.n	38ca <XModem1K_Client+0x462>
					 */
					vTimerStart( POLL_PERIOD_ms);
				}
			}
		}
			break;
    355a:	e1b1      	b.n	38c0 <XModem1K_Client+0x458>

		case STATE_RECEIVING: {
			uint8_t u8Data;

			/* Check if a character has been received on the UART */
			if( XModemReadByte( &u8Data ) )
    355c:	f107 030c 	add.w	r3, r7, #12
    3560:	4618      	mov	r0, r3
    3562:	f7ff fedb 	bl	331c <XModemReadByte>
    3566:	4603      	mov	r3, r0
    3568:	2b00      	cmp	r3, #0
    356a:	f000 8180 	beq.w	386e <XModem1K_Client+0x406>
			{
				// TracePutcHex( u8Data );
				/* Position of received byte determines action we take */
				if( u32ByteCount == 0 )
    356e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3572:	2b00      	cmp	r3, #0
    3574:	f040 80a7 	bne.w	36c6 <XModem1K_Client+0x25e>
				{
					/* Expecting a start of packet character */
					if( u8Data == SOH ) {
    3578:	7b3b      	ldrb	r3, [r7, #12]
    357a:	2b01      	cmp	r3, #1
    357c:	d10b      	bne.n	3596 <XModem1K_Client+0x12e>
						/* SOH indicates short pay load packet is being transmitted */
						u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    357e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3582:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
						u32ByteCount = 1;
    3586:	2301      	movs	r3, #1
    3588:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

						/* Start packet timeout */
						vTimerStart(PACKET_TIMEOUT_PERIOD_ms);
    358c:	f644 6020 	movw	r0, #20000	; 0x4e20
    3590:	f000 f9a6 	bl	38e0 <vTimerStart>
    3594:	e192      	b.n	38bc <XModem1K_Client+0x454>
					} else if (u8Data == EOT) {
    3596:	7b3b      	ldrb	r3, [r7, #12]
    3598:	2b04      	cmp	r3, #4
    359a:	f040 818f 	bne.w	38bc <XModem1K_Client+0x454>
						TraceNL("Received EOT ");
    359e:	48a1      	ldr	r0, [pc, #644]	; (3824 <XModem1K_Client+0x3bc>)
    35a0:	f7ff f81a 	bl	25d8 <TraceNL>
						/* Server indicating transmission is complete */
						TraceNL("Closing TCP connection ");
    35a4:	48a0      	ldr	r0, [pc, #640]	; (3828 <XModem1K_Client+0x3c0>)
    35a6:	f7ff f817 	bl	25d8 <TraceNL>
						GSM_TCP_Close( );
    35aa:	f7fd fe43 	bl	1234 <GSM_TCP_Close>

						u32InProgress = 0;
    35ae:	2300      	movs	r3, #0
    35b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

						sprintf( buffer, "byte count: %d, packet len %d\r\n", u32ByteCount, u32PktLen);
    35b4:	f107 0310 	add.w	r3, r7, #16
    35b8:	4618      	mov	r0, r3
    35ba:	499c      	ldr	r1, [pc, #624]	; (382c <XModem1K_Client+0x3c4>)
    35bc:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    35c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    35c4:	f000 fb62 	bl	3c8c <sprintf>
						Trace( buffer, strlen( buffer ) );
    35c8:	f107 0310 	add.w	r3, r7, #16
    35cc:	4618      	mov	r0, r3
    35ce:	f001 ffc3 	bl	5558 <strlen>
    35d2:	4602      	mov	r2, r0
    35d4:	f107 0310 	add.w	r3, r7, #16
    35d8:	4618      	mov	r0, r3
    35da:	4611      	mov	r1, r2
    35dc:	f7fe ffec 	bl	25b8 <Trace>

						/* Call the call back function to indicated a complete transmission */
						/* If length == 0, then EOT */
						pu32Xmodem1kRxPacketCallback( SECONDARY_IMAGE_LOAD_ADDR, 0);
    35e0:	687b      	ldr	r3, [r7, #4]
    35e2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    35e6:	2100      	movs	r1, #0
    35e8:	4798      	blx	r3

						uint32_t imageSize;
						uint16_t imageCRC;

						XModemReadByte( &u8Data );
    35ea:	f107 030c 	add.w	r3, r7, #12
    35ee:	4618      	mov	r0, r3
    35f0:	f7ff fe94 	bl	331c <XModemReadByte>
						imageSize = u8Data << 24 & 0xFF000000;
    35f4:	7b3b      	ldrb	r3, [r7, #12]
    35f6:	061b      	lsls	r3, r3, #24
    35f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

						XModemReadByte( &u8Data );
    35fc:	f107 030c 	add.w	r3, r7, #12
    3600:	4618      	mov	r0, r3
    3602:	f7ff fe8b 	bl	331c <XModemReadByte>
						imageSize |= u8Data << 16 & 0x00FF0000;
    3606:	7b3b      	ldrb	r3, [r7, #12]
    3608:	041b      	lsls	r3, r3, #16
    360a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    360e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
    3612:	4313      	orrs	r3, r2
    3614:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

						XModemReadByte( &u8Data );
    3618:	f107 030c 	add.w	r3, r7, #12
    361c:	4618      	mov	r0, r3
    361e:	f7ff fe7d 	bl	331c <XModemReadByte>
						imageSize |= u8Data << 8 & 0x0000FF00;
    3622:	7b3b      	ldrb	r3, [r7, #12]
    3624:	021b      	lsls	r3, r3, #8
    3626:	b29b      	uxth	r3, r3
    3628:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
    362c:	4313      	orrs	r3, r2
    362e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

						XModemReadByte( &u8Data );
    3632:	f107 030c 	add.w	r3, r7, #12
    3636:	4618      	mov	r0, r3
    3638:	f7ff fe70 	bl	331c <XModemReadByte>
						imageSize |= u8Data << 0 & 0x000000FF;
    363c:	7b3b      	ldrb	r3, [r7, #12]
    363e:	461a      	mov	r2, r3
    3640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    3644:	4313      	orrs	r3, r2
    3646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc


						XModemReadByte( &u8Data );
    364a:	f107 030c 	add.w	r3, r7, #12
    364e:	4618      	mov	r0, r3
    3650:	f7ff fe64 	bl	331c <XModemReadByte>
						imageCRC = u8Data << 8 & 0xFF00;
    3654:	7b3b      	ldrb	r3, [r7, #12]
    3656:	021b      	lsls	r3, r3, #8
    3658:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda

						XModemReadByte( &u8Data );
    365c:	f107 030c 	add.w	r3, r7, #12
    3660:	4618      	mov	r0, r3
    3662:	f7ff fe5b 	bl	331c <XModemReadByte>
						imageCRC |= u8Data << 0 & 0x00FF;
    3666:	7b3b      	ldrb	r3, [r7, #12]
    3668:	b29a      	uxth	r2, r3
    366a:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
    366e:	4313      	orrs	r3, r2
    3670:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda

						sprintf( buffer, "file size: 0x%X, CRC: 0x%X\r\n", imageSize, imageCRC );
    3674:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
    3678:	f107 0210 	add.w	r2, r7, #16
    367c:	4610      	mov	r0, r2
    367e:	496c      	ldr	r1, [pc, #432]	; (3830 <XModem1K_Client+0x3c8>)
    3680:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
    3684:	f000 fb02 	bl	3c8c <sprintf>
						Trace( buffer );
    3688:	f107 0310 	add.w	r3, r7, #16
    368c:	4618      	mov	r0, r3
    368e:	f7fe ff93 	bl	25b8 <Trace>

						calculatedCRC = u16CRC_Calc16( SECONDARY_IMAGE_LOAD_ADDR, imageSize );
    3692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    3696:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    369a:	4619      	mov	r1, r3
    369c:	f7fd fdde 	bl	125c <u16CRC_Calc16>
    36a0:	4603      	mov	r3, r0
    36a2:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8

						sprintf( buffer, "Calculated Image CRC: 0x%X\r\n", calculatedCRC );
    36a6:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
    36aa:	f107 0210 	add.w	r2, r7, #16
    36ae:	4610      	mov	r0, r2
    36b0:	4960      	ldr	r1, [pc, #384]	; (3834 <XModem1K_Client+0x3cc>)
    36b2:	461a      	mov	r2, r3
    36b4:	f000 faea 	bl	3c8c <sprintf>
						Trace( buffer );
    36b8:	f107 0310 	add.w	r3, r7, #16
    36bc:	4618      	mov	r0, r3
    36be:	f7fe ff7b 	bl	25b8 <Trace>


					    // We should have completed the image reception now dump it to see if any problem.
						// TraceDumpHex( SECONDARY_IMAGE_LOAD_ADDR, 20000 );

						return ( 0 );
    36c2:	2300      	movs	r3, #0
    36c4:	e101      	b.n	38ca <XModem1K_Client+0x462>

					} else {
						// Unexpected char ignore it
					}
				} else if (u32ByteCount == 1) {
    36c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    36ca:	2b01      	cmp	r3, #1
    36cc:	d108      	bne.n	36e0 <XModem1K_Client+0x278>
					/* Byte 1 is the packet number - should be different from last one we received */
					frameNum = u8Data;
    36ce:	7b3b      	ldrb	r3, [r7, #12]
    36d0:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
					u32ByteCount++;
    36d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    36d8:	3301      	adds	r3, #1
    36da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    36de:	e0ed      	b.n	38bc <XModem1K_Client+0x454>
				} else if (u32ByteCount == 2) {
    36e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    36e4:	2b02      	cmp	r3, #2
    36e6:	d11f      	bne.n	3728 <XModem1K_Client+0x2c0>
					/* Byte 2 is the packet number inverted - check for error with last byte */
					frameNum <<= 8;
    36e8:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
    36ec:	021b      	lsls	r3, r3, #8
    36ee:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
					frameNum |= u8Data;
    36f2:	7b3b      	ldrb	r3, [r7, #12]
    36f4:	b29a      	uxth	r2, r3
    36f6:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
    36fa:	4313      	orrs	r3, r2
    36fc:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
					sprintf( buffer, "frame number :  %d\r\n", frameNum );
    3700:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
    3704:	f107 0210 	add.w	r2, r7, #16
    3708:	4610      	mov	r0, r2
    370a:	494b      	ldr	r1, [pc, #300]	; (3838 <XModem1K_Client+0x3d0>)
    370c:	461a      	mov	r2, r3
    370e:	f000 fabd 	bl	3c8c <sprintf>
				    TraceNL( buffer );
    3712:	f107 0310 	add.w	r3, r7, #16
    3716:	4618      	mov	r0, r3
    3718:	f7fe ff5e 	bl	25d8 <TraceNL>

					u32ByteCount++;
    371c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3720:	3301      	adds	r3, #1
    3722:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    3726:	e0c9      	b.n	38bc <XModem1K_Client+0x454>
				} else if( ((u32ByteCount == (SHORT_PACKET_PAYLOAD_LEN+3)) &&
    3728:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    372c:	f240 4203 	movw	r2, #1027	; 0x403
    3730:	4293      	cmp	r3, r2
    3732:	d10d      	bne.n	3750 <XModem1K_Client+0x2e8>
    3734:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    3738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    373c:	d108      	bne.n	3750 <XModem1K_Client+0x2e8>
						    (u32PktLen == SHORT_PACKET_PAYLOAD_LEN)) )
				{
					/* If pay load is short byte 131 is the MS byte of the packet CRC, if pay load
					 is long byte 1027 is the MS byte of the packet CRC. */
					u16CRC = u8Data;
    373e:	7b3b      	ldrb	r3, [r7, #12]
    3740:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
					u32ByteCount++;
    3744:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3748:	3301      	adds	r3, #1
    374a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    374e:	e08d      	b.n	386c <XModem1K_Client+0x404>

				}
				else if( (u32ByteCount == (SHORT_PACKET_PAYLOAD_LEN+4)) &&
    3750:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3754:	f240 4204 	movw	r2, #1028	; 0x404
    3758:	4293      	cmp	r3, r2
    375a:	d17b      	bne.n	3854 <XModem1K_Client+0x3ec>
    375c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    3760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3764:	d176      	bne.n	3854 <XModem1K_Client+0x3ec>
						 (u32PktLen == SHORT_PACKET_PAYLOAD_LEN) )
				{
					/* If pay load is short byte 132 is the LS byte of the packet CRC, if pay load
					 is long byte 1028 is the LS byte of the packet CRC. */
					u16CRC <<= 8;
    3766:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
    376a:	021b      	lsls	r3, r3, #8
    376c:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
					u16CRC |= u8Data;
    3770:	7b3b      	ldrb	r3, [r7, #12]
    3772:	b29a      	uxth	r2, r3
    3774:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
    3778:	4313      	orrs	r3, r2
    377a:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea

					calculatedCRC = u16CRC_Calc16( &au8RxBuffer[0], u32PktLen );
    377e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    3782:	482e      	ldr	r0, [pc, #184]	; (383c <XModem1K_Client+0x3d4>)
    3784:	4619      	mov	r1, r3
    3786:	f7fd fd69 	bl	125c <u16CRC_Calc16>
    378a:	4603      	mov	r3, r0
    378c:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
					sprintf( buffer, "calculaetd crc : 0x%X\r\n", calculatedCRC );
    3790:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
    3794:	f107 0210 	add.w	r2, r7, #16
    3798:	4610      	mov	r0, r2
    379a:	4929      	ldr	r1, [pc, #164]	; (3840 <XModem1K_Client+0x3d8>)
    379c:	461a      	mov	r2, r3
    379e:	f000 fa75 	bl	3c8c <sprintf>
				    TraceNL( buffer );
    37a2:	f107 0310 	add.w	r3, r7, #16
    37a6:	4618      	mov	r0, r3
    37a8:	f7fe ff16 	bl	25d8 <TraceNL>

					/* Check the received CRC against the CRC we generate on the packet data */
					if( calculatedCRC == u16CRC )
    37ac:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
    37b0:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
    37b4:	429a      	cmp	r2, r3
    37b6:	d11d      	bne.n	37f4 <XModem1K_Client+0x38c>
					{
						uint8_t u8Cmd;

						u8Cmd = ACK;
    37b8:	2306      	movs	r3, #6
    37ba:	72fb      	strb	r3, [r7, #11]
						GSM_TCP_Send( &u8Cmd, 1 );
    37bc:	f107 030b 	add.w	r3, r7, #11
    37c0:	4618      	mov	r0, r3
    37c2:	2101      	movs	r1, #1
    37c4:	f7fd fb18 	bl	df8 <GSM_TCP_Send>

						WDTFeed();
    37c8:	f7ff fd98 	bl	32fc <WDTFeed>
						// write to flash
						pu32Xmodem1kRxPacketCallback( &au8RxBuffer[0], u32PktLen );
    37cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    37d0:	b29a      	uxth	r2, r3
    37d2:	687b      	ldr	r3, [r7, #4]
    37d4:	4819      	ldr	r0, [pc, #100]	; (383c <XModem1K_Client+0x3d4>)
    37d6:	4611      	mov	r1, r2
    37d8:	4798      	blx	r3

						TraceNL("Received a frame ");
    37da:	481a      	ldr	r0, [pc, #104]	; (3844 <XModem1K_Client+0x3dc>)
    37dc:	f7fe fefc 	bl	25d8 <TraceNL>
						TraceNL("Sending  ACK ");
    37e0:	4819      	ldr	r0, [pc, #100]	; (3848 <XModem1K_Client+0x3e0>)
    37e2:	f7fe fef9 	bl	25d8 <TraceNL>
						TraceNL("CRC matches ");
    37e6:	4819      	ldr	r0, [pc, #100]	; (384c <XModem1K_Client+0x3e4>)
    37e8:	f7fe fef6 	bl	25d8 <TraceNL>
						DelayMs( 100 );
    37ec:	2064      	movs	r0, #100	; 0x64
    37ee:	f7fe fecd 	bl	258c <DelayMs>
    37f2:	e00a      	b.n	380a <XModem1K_Client+0x3a2>


					} else /* Error CRC calculated does not match that received */
					{
						/* Indicate problem to server - should result in packet being resent.. */
						uint8_t u8Cmd = NAK;
    37f4:	2315      	movs	r3, #21
    37f6:	72bb      	strb	r3, [r7, #10]
						TraceNL("CRC does not match  NAK ing");
    37f8:	4815      	ldr	r0, [pc, #84]	; (3850 <XModem1K_Client+0x3e8>)
    37fa:	f7fe feed 	bl	25d8 <TraceNL>
						GSM_TCP_Send(&u8Cmd, 1);
    37fe:	f107 030a 	add.w	r3, r7, #10
    3802:	4618      	mov	r0, r3
    3804:	2101      	movs	r1, #1
    3806:	f7fd faf7 	bl	df8 <GSM_TCP_Send>
					}
					u32ByteCount = 0;
    380a:	2300      	movs	r3, #0
    380c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
					u32ByteCount++;

				}
				else if( (u32ByteCount == (SHORT_PACKET_PAYLOAD_LEN+4)) &&
						 (u32PktLen == SHORT_PACKET_PAYLOAD_LEN) )
				{
    3810:	e02c      	b.n	386c <XModem1K_Client+0x404>
    3812:	bf00      	nop
    3814:	00007338 	.word	0x00007338
    3818:	0000734c 	.word	0x0000734c
    381c:	0000732c 	.word	0x0000732c
    3820:	00007384 	.word	0x00007384
    3824:	000073a0 	.word	0x000073a0
    3828:	000073b0 	.word	0x000073b0
    382c:	000073c8 	.word	0x000073c8
    3830:	000073e8 	.word	0x000073e8
    3834:	00007408 	.word	0x00007408
    3838:	00007428 	.word	0x00007428
    383c:	10000440 	.word	0x10000440
    3840:	00007440 	.word	0x00007440
    3844:	00007458 	.word	0x00007458
    3848:	0000746c 	.word	0x0000746c
    384c:	0000747c 	.word	0x0000747c
    3850:	0000748c 	.word	0x0000748c
					}
					u32ByteCount = 0;

				} else {
					/* Must be pay load data so store */
					au8RxBuffer[u32ByteCount - PACKET_HEADER_LEN] = u8Data;
    3854:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3858:	3b03      	subs	r3, #3
    385a:	7b39      	ldrb	r1, [r7, #12]
    385c:	4a1d      	ldr	r2, [pc, #116]	; (38d4 <XModem1K_Client+0x46c>)
    385e:	54d1      	strb	r1, [r2, r3]
					u32ByteCount++;
    3860:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3864:	3301      	adds	r3, #1
    3866:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    386a:	e027      	b.n	38bc <XModem1K_Client+0x454>
    386c:	e026      	b.n	38bc <XModem1K_Client+0x454>
				}
			}
			else
			{
				if( (LPC_TIM0->TCR & 0x01) == 0 )
    386e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3872:	685b      	ldr	r3, [r3, #4]
    3874:	f003 0301 	and.w	r3, r3, #1
    3878:	2b00      	cmp	r3, #0
    387a:	d11f      	bne.n	38bc <XModem1K_Client+0x454>
				{
					/* Timeout expired no data received stop upgrade  */
					if (trials-- > 0)
    387c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    3880:	1e5a      	subs	r2, r3, #1
    3882:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
    3886:	2b00      	cmp	r3, #0
    3888:	d012      	beq.n	38b0 <XModem1K_Client+0x448>
					{
						TraceNL("Time out in RECEIVING   ");
    388a:	4813      	ldr	r0, [pc, #76]	; (38d8 <XModem1K_Client+0x470>)
    388c:	f7fe fea4 	bl	25d8 <TraceNL>
						uint8_t u8Cmd = NAK;
    3890:	2315      	movs	r3, #21
    3892:	727b      	strb	r3, [r7, #9]
						GSM_TCP_Send(&u8Cmd, 1);
    3894:	f107 0309 	add.w	r3, r7, #9
    3898:	4618      	mov	r0, r3
    389a:	2101      	movs	r1, #1
    389c:	f7fd faac 	bl	df8 <GSM_TCP_Send>

						u32ByteCount = 0;
    38a0:	2300      	movs	r3, #0
    38a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
						vTimerStart( POLL_PERIOD_ms);
    38a6:	f644 6020 	movw	r0, #20000	; 0x4e20
    38aa:	f000 f819 	bl	38e0 <vTimerStart>
    38ae:	e005      	b.n	38bc <XModem1K_Client+0x454>
					} else {
						// no more trying giving up upgrading
						TraceNL("Download process failed giving up upgrading");
    38b0:	480a      	ldr	r0, [pc, #40]	; (38dc <XModem1K_Client+0x474>)
    38b2:	f7fe fe91 	bl	25d8 <TraceNL>
						return ( DOWNLOAD_ERR_TIMEOUT );
    38b6:	f04f 33ff 	mov.w	r3, #4294967295
    38ba:	e006      	b.n	38ca <XModem1K_Client+0x462>
					}
				}
			}
		}
			break;
    38bc:	e000      	b.n	38c0 <XModem1K_Client+0x458>

		default:
			break;
    38be:	bf00      	nop

	uint32_t trials;

	/* Prepare UART for RX/TX */

	while (u32InProgress) {
    38c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    38c4:	2b00      	cmp	r3, #0
    38c6:	f47f addd 	bne.w	3484 <XModem1K_Client+0x1c>

		default:
			break;
		}
	}
}
    38ca:	4618      	mov	r0, r3
    38cc:	37f8      	adds	r7, #248	; 0xf8
    38ce:	46bd      	mov	sp, r7
    38d0:	bd80      	pop	{r7, pc}
    38d2:	bf00      	nop
    38d4:	10000440 	.word	0x10000440
    38d8:	000074a8 	.word	0x000074a8
    38dc:	000074c4 	.word	0x000074c4

000038e0 <vTimerStart>:
 ** Parameters:	     None
 **
 ** Returned value:  None
 **
 *****************************************************************************/
static void vTimerStart(uint32_t u32Periodms) {
    38e0:	b480      	push	{r7}
    38e2:	b083      	sub	sp, #12
    38e4:	af00      	add	r7, sp, #0
    38e6:	6078      	str	r0, [r7, #4]
	/* Enable the timer clock */
	LPC_SC->PCONP |= (1UL << 1);
    38e8:	4a19      	ldr	r2, [pc, #100]	; (3950 <vTimerStart+0x70>)
    38ea:	4b19      	ldr	r3, [pc, #100]	; (3950 <vTimerStart+0x70>)
    38ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    38f0:	f043 0302 	orr.w	r3, r3, #2
    38f4:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

	/* Configure the timer so that we can poll for a match */
	LPC_TIM0->TCR = 0x02; /* reset timer */
    38f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    38fc:	2202      	movs	r2, #2
    38fe:	605a      	str	r2, [r3, #4]
	LPC_TIM0->PR = 0x00; /* set prescaler to zero */
    3900:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3904:	2200      	movs	r2, #0
    3906:	60da      	str	r2, [r3, #12]
	LPC_TIM0->MR0 = u32Periodms
    3908:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
			* ((SystemCoreClock / 4 / (LPC_TIM0->PR + 1)) / 1000UL);
    390c:	4b11      	ldr	r3, [pc, #68]	; (3954 <vTimerStart+0x74>)
    390e:	681b      	ldr	r3, [r3, #0]
    3910:	4a11      	ldr	r2, [pc, #68]	; (3958 <vTimerStart+0x78>)
    3912:	fba2 2303 	umull	r2, r3, r2, r3
    3916:	0a1a      	lsrs	r2, r3, #8
    3918:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    391c:	68db      	ldr	r3, [r3, #12]
    391e:	3301      	adds	r3, #1
    3920:	fbb2 f3f3 	udiv	r3, r2, r3
    3924:	687a      	ldr	r2, [r7, #4]
    3926:	fb02 f303 	mul.w	r3, r2, r3
	LPC_SC->PCONP |= (1UL << 1);

	/* Configure the timer so that we can poll for a match */
	LPC_TIM0->TCR = 0x02; /* reset timer */
	LPC_TIM0->PR = 0x00; /* set prescaler to zero */
	LPC_TIM0->MR0 = u32Periodms
    392a:	618b      	str	r3, [r1, #24]
			* ((SystemCoreClock / 4 / (LPC_TIM0->PR + 1)) / 1000UL);
	LPC_TIM0->IR = 0xFF; /* reset all interrupts */
    392c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3930:	22ff      	movs	r2, #255	; 0xff
    3932:	601a      	str	r2, [r3, #0]
	LPC_TIM0->MCR = 0x04; /* stop timer on match */
    3934:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3938:	2204      	movs	r2, #4
    393a:	615a      	str	r2, [r3, #20]
	LPC_TIM0->TCR = 0x01; /* start timer */
    393c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3940:	2201      	movs	r2, #1
    3942:	605a      	str	r2, [r3, #4]
}
    3944:	370c      	adds	r7, #12
    3946:	46bd      	mov	sp, r7
    3948:	f85d 7b04 	ldr.w	r7, [sp], #4
    394c:	4770      	bx	lr
    394e:	bf00      	nop
    3950:	400fc000 	.word	0x400fc000
    3954:	10000018 	.word	0x10000018
    3958:	10624dd3 	.word	0x10624dd3

0000395c <SystemCoreClockUpdate>:

/*----------------------------------------------------------------------------
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
    395c:	b538      	push	{r3, r4, r5, lr}

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    395e:	4b24      	ldr	r3, [pc, #144]	; (39f0 <SystemCoreClockUpdate+0x94>)
    3960:	4c24      	ldr	r4, [pc, #144]	; (39f4 <SystemCoreClockUpdate+0x98>)
    3962:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3966:	f3c2 6201 	ubfx	r2, r2, #24, #2
    396a:	2a03      	cmp	r2, #3
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    396c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    3970:	f002 0203 	and.w	r2, r2, #3
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    3974:	d128      	bne.n	39c8 <SystemCoreClockUpdate+0x6c>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    3976:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    397a:	2a01      	cmp	r2, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    397c:	f3c1 010e 	ubfx	r1, r1, #0, #15
    3980:	f101 0101 	add.w	r1, r1, #1
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3984:	d009      	beq.n	399a <SystemCoreClockUpdate+0x3e>
    3986:	2a02      	cmp	r2, #2
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    3988:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    398c:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    3990:	f3c2 4207 	ubfx	r2, r2, #16, #8
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3994:	d009      	beq.n	39aa <SystemCoreClockUpdate+0x4e>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = (IRC_OSC * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3996:	4818      	ldr	r0, [pc, #96]	; (39f8 <SystemCoreClockUpdate+0x9c>)
    3998:	e009      	b.n	39ae <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    399a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    399e:	4817      	ldr	r0, [pc, #92]	; (39fc <SystemCoreClockUpdate+0xa0>)
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
    39a0:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    39a4:	f3c2 4207 	ubfx	r2, r2, #16, #8
    39a8:	e001      	b.n	39ae <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    39aa:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
    39ae:	3201      	adds	r2, #1
    39b0:	2300      	movs	r3, #0
    39b2:	fba1 0100 	umull	r0, r1, r1, r0
    39b6:	f002 f933 	bl	5c20 <__aeabi_uldivmod>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    39ba:	b2ea      	uxtb	r2, r5
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    39bc:	3201      	adds	r2, #1
    39be:	2300      	movs	r3, #0
    39c0:	f002 f92e 	bl	5c20 <__aeabi_uldivmod>
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
    39c4:	6020      	str	r0, [r4, #0]
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    39c6:	bd38      	pop	{r3, r4, r5, pc}
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    39c8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    39cc:	2a01      	cmp	r2, #1
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    39ce:	b2db      	uxtb	r3, r3
    39d0:	f103 0301 	add.w	r3, r3, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    39d4:	d003      	beq.n	39de <SystemCoreClockUpdate+0x82>
    39d6:	2a02      	cmp	r2, #2
    39d8:	d003      	beq.n	39e2 <SystemCoreClockUpdate+0x86>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    39da:	4a09      	ldr	r2, [pc, #36]	; (3a00 <SystemCoreClockUpdate+0xa4>)
    39dc:	e003      	b.n	39e6 <SystemCoreClockUpdate+0x8a>
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    39de:	4a09      	ldr	r2, [pc, #36]	; (3a04 <SystemCoreClockUpdate+0xa8>)
    39e0:	e001      	b.n	39e6 <SystemCoreClockUpdate+0x8a>
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    39e2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
    39e6:	fbb2 f3f3 	udiv	r3, r2, r3
    39ea:	6023      	str	r3, [r4, #0]
    39ec:	bd38      	pop	{r3, r4, r5, pc}
    39ee:	bf00      	nop
    39f0:	400fc000 	.word	0x400fc000
    39f4:	10000018 	.word	0x10000018
    39f8:	007a1200 	.word	0x007a1200
    39fc:	016e3600 	.word	0x016e3600
    3a00:	003d0900 	.word	0x003d0900
    3a04:	00b71b00 	.word	0x00b71b00

00003a08 <SystemInit>:
 *         Initialize the System.
 */
void SystemInit (void)
{
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
    3a08:	4b34      	ldr	r3, [pc, #208]	; (3adc <SystemInit+0xd4>)
    3a0a:	2220      	movs	r2, #32
    3a0c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    3a10:	461a      	mov	r2, r3
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    3a12:	f8d2 11a0 	ldr.w	r1, [r2, #416]	; 0x1a0
    3a16:	4b31      	ldr	r3, [pc, #196]	; (3adc <SystemInit+0xd4>)
    3a18:	0648      	lsls	r0, r1, #25
    3a1a:	d5fa      	bpl.n	3a12 <SystemInit+0xa>
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    3a1c:	2203      	movs	r2, #3
    3a1e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    3a22:	2200      	movs	r2, #0
    3a24:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    3a28:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    3a2c:	4a2c      	ldr	r2, [pc, #176]	; (3ae0 <SystemInit+0xd8>)
  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    3a2e:	2001      	movs	r0, #1
    3a30:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    3a34:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    3a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
  LPC_SC->PLL0FEED  = 0x55;
    3a3a:	2255      	movs	r2, #85	; 0x55

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    3a3c:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3a40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    3a44:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    3a48:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3a4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    3a50:	4b22      	ldr	r3, [pc, #136]	; (3adc <SystemInit+0xd4>)
    3a52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3a56:	0151      	lsls	r1, r2, #5
    3a58:	d5fa      	bpl.n	3a50 <SystemInit+0x48>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    3a5a:	2203      	movs	r2, #3
    3a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    3a60:	22aa      	movs	r2, #170	; 0xaa
    3a62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3a66:	2255      	movs	r2, #85	; 0x55
    3a68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    3a6c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
    3a70:	4a1a      	ldr	r2, [pc, #104]	; (3adc <SystemInit+0xd4>)
    3a72:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
    3a76:	d0f9      	beq.n	3a6c <SystemInit+0x64>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
    3a78:	2323      	movs	r3, #35	; 0x23
    3a7a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0xAA;
    3a7e:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PLL1FEED  = 0x55;
    3a80:	2355      	movs	r3, #85	; 0x55

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    3a82:	2001      	movs	r0, #1
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
  LPC_SC->PLL1FEED  = 0xAA;
    3a84:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3a88:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    3a8c:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    3a90:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3a94:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    3a98:	4b10      	ldr	r3, [pc, #64]	; (3adc <SystemInit+0xd4>)
    3a9a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    3a9e:	0552      	lsls	r2, r2, #21
    3aa0:	d5fa      	bpl.n	3a98 <SystemInit+0x90>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    3aa2:	2203      	movs	r2, #3
    3aa4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    3aa8:	22aa      	movs	r2, #170	; 0xaa
    3aaa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3aae:	2255      	movs	r2, #85	; 0x55
    3ab0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    3ab4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    3ab8:	4a08      	ldr	r2, [pc, #32]	; (3adc <SystemInit+0xd4>)
    3aba:	f411 7f40 	tst.w	r1, #768	; 0x300
    3abe:	d0f9      	beq.n	3ab4 <SystemInit+0xac>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    3ac0:	4b08      	ldr	r3, [pc, #32]	; (3ae4 <SystemInit+0xdc>)
    3ac2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    3ac6:	2300      	movs	r3, #0
    3ac8:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = (LPC_SC->FLASHCFG & ~0x0000F000) | FLASHCFG_Val;
    3acc:	6813      	ldr	r3, [r2, #0]
    3ace:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
    3ad2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    3ad6:	6013      	str	r3, [r2, #0]
    3ad8:	4770      	bx	lr
    3ada:	bf00      	nop
    3adc:	400fc000 	.word	0x400fc000
    3ae0:	00050063 	.word	0x00050063
    3ae4:	042887de 	.word	0x042887de

00003ae8 <__main>:
    3ae8:	b508      	push	{r3, lr}
    3aea:	2000      	movs	r0, #0
    3aec:	4601      	mov	r1, r0
    3aee:	4602      	mov	r2, r0
    3af0:	f000 fd82 	bl	45f8 <_initio>
    3af4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3af8:	f7fe baa2 	b.w	2040 <main>

00003afc <memset>:
    3afc:	f002 bcf8 	b.w	64f0 <__aeabi_lowlevel_memset>

00003b00 <malloc>:
    3b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b02:	4b31      	ldr	r3, [pc, #196]	; (3bc8 <malloc+0xc8>)
    3b04:	1cc5      	adds	r5, r0, #3
    3b06:	681c      	ldr	r4, [r3, #0]
    3b08:	08ad      	lsrs	r5, r5, #2
    3b0a:	b198      	cbz	r0, 3b34 <malloc+0x34>
    3b0c:	461f      	mov	r7, r3
    3b0e:	2600      	movs	r6, #0
    3b10:	f105 0e0a 	add.w	lr, r5, #10
    3b14:	f105 0c03 	add.w	ip, r5, #3
    3b18:	e005      	b.n	3b26 <malloc+0x26>
    3b1a:	6823      	ldr	r3, [r4, #0]
    3b1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    3b20:	d014      	beq.n	3b4c <malloc+0x4c>
    3b22:	4626      	mov	r6, r4
    3b24:	68a4      	ldr	r4, [r4, #8]
    3b26:	2c00      	cmp	r4, #0
    3b28:	d1f7      	bne.n	3b1a <malloc+0x1a>
    3b2a:	300c      	adds	r0, #12
    3b2c:	f001 fd74 	bl	5618 <_sbrk>
    3b30:	1c43      	adds	r3, r0, #1
    3b32:	d110      	bne.n	3b56 <malloc+0x56>
    3b34:	2000      	movs	r0, #0
    3b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b38:	6811      	ldr	r1, [r2, #0]
    3b3a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    3b3e:	d115      	bne.n	3b6c <malloc+0x6c>
    3b40:	6851      	ldr	r1, [r2, #4]
    3b42:	440b      	add	r3, r1
    3b44:	3303      	adds	r3, #3
    3b46:	6063      	str	r3, [r4, #4]
    3b48:	6893      	ldr	r3, [r2, #8]
    3b4a:	60a3      	str	r3, [r4, #8]
    3b4c:	68a2      	ldr	r2, [r4, #8]
    3b4e:	6863      	ldr	r3, [r4, #4]
    3b50:	2a00      	cmp	r2, #0
    3b52:	d1f1      	bne.n	3b38 <malloc+0x38>
    3b54:	e00a      	b.n	3b6c <malloc+0x6c>
    3b56:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    3b5a:	e880 0028 	stmia.w	r0, {r3, r5}
    3b5e:	6084      	str	r4, [r0, #8]
    3b60:	b90e      	cbnz	r6, 3b66 <malloc+0x66>
    3b62:	6038      	str	r0, [r7, #0]
    3b64:	e000      	b.n	3b68 <malloc+0x68>
    3b66:	60b0      	str	r0, [r6, #8]
    3b68:	300c      	adds	r0, #12
    3b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b6c:	42ab      	cmp	r3, r5
    3b6e:	db07      	blt.n	3b80 <malloc+0x80>
    3b70:	459c      	cmp	ip, r3
    3b72:	db05      	blt.n	3b80 <malloc+0x80>
    3b74:	4620      	mov	r0, r4
    3b76:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    3b7a:	f840 3b0c 	str.w	r3, [r0], #12
    3b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b80:	4573      	cmp	r3, lr
    3b82:	d911      	bls.n	3ba8 <malloc+0xa8>
    3b84:	4620      	mov	r0, r4
    3b86:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    3b8a:	6065      	str	r5, [r4, #4]
    3b8c:	f840 1b0c 	str.w	r1, [r0], #12
    3b90:	eb00 0185 	add.w	r1, r0, r5, lsl #2
    3b94:	60a1      	str	r1, [r4, #8]
    3b96:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    3b9a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    3b9e:	1b5d      	subs	r5, r3, r5
    3ba0:	3d03      	subs	r5, #3
    3ba2:	604d      	str	r5, [r1, #4]
    3ba4:	608a      	str	r2, [r1, #8]
    3ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ba8:	2a00      	cmp	r2, #0
    3baa:	d1ba      	bne.n	3b22 <malloc+0x22>
    3bac:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    3bb0:	f001 fd32 	bl	5618 <_sbrk>
    3bb4:	3001      	adds	r0, #1
    3bb6:	d0bd      	beq.n	3b34 <malloc+0x34>
    3bb8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    3bbc:	e884 0028 	stmia.w	r4, {r3, r5}
    3bc0:	f104 000c 	add.w	r0, r4, #12
    3bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bc6:	bf00      	nop
    3bc8:	10002010 	.word	0x10002010

00003bcc <free>:
    3bcc:	b1a8      	cbz	r0, 3bfa <free+0x2e>
    3bce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3bd2:	f840 3c0c 	str.w	r3, [r0, #-12]
    3bd6:	f850 2c04 	ldr.w	r2, [r0, #-4]
    3bda:	b172      	cbz	r2, 3bfa <free+0x2e>
    3bdc:	6813      	ldr	r3, [r2, #0]
    3bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    3be2:	d10a      	bne.n	3bfa <free+0x2e>
    3be4:	6853      	ldr	r3, [r2, #4]
    3be6:	f850 1c08 	ldr.w	r1, [r0, #-8]
    3bea:	440b      	add	r3, r1
    3bec:	3303      	adds	r3, #3
    3bee:	f840 3c08 	str.w	r3, [r0, #-8]
    3bf2:	6893      	ldr	r3, [r2, #8]
    3bf4:	f840 3c04 	str.w	r3, [r0, #-4]
    3bf8:	e7ed      	b.n	3bd6 <free+0xa>
    3bfa:	4770      	bx	lr

00003bfc <_Csys_alloc>:
    3bfc:	b510      	push	{r4, lr}
    3bfe:	f7ff ff7f 	bl	3b00 <malloc>
    3c02:	4604      	mov	r4, r0
    3c04:	b928      	cbnz	r0, 3c12 <_Csys_alloc+0x16>
    3c06:	4904      	ldr	r1, [pc, #16]	; (3c18 <_Csys_alloc+0x1c>)
    3c08:	2217      	movs	r2, #23
    3c0a:	f002 fc9d 	bl	6548 <__sys_write>
    3c0e:	f002 fc88 	bl	6522 <__sys_appexit>
    3c12:	4620      	mov	r0, r4
    3c14:	bd10      	pop	{r4, pc}
    3c16:	bf00      	nop
    3c18:	000074f0 	.word	0x000074f0

00003c1c <fp_round>:
    3c1c:	5c42      	ldrb	r2, [r0, r1]
    3c1e:	1843      	adds	r3, r0, r1
    3c20:	2a34      	cmp	r2, #52	; 0x34
    3c22:	dc01      	bgt.n	3c28 <fp_round+0xc>
    3c24:	2000      	movs	r0, #0
    3c26:	4770      	bx	lr
    3c28:	2a35      	cmp	r2, #53	; 0x35
    3c2a:	d106      	bne.n	3c3a <fp_round+0x1e>
    3c2c:	4619      	mov	r1, r3
    3c2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    3c32:	2a30      	cmp	r2, #48	; 0x30
    3c34:	d0fb      	beq.n	3c2e <fp_round+0x12>
    3c36:	2a00      	cmp	r2, #0
    3c38:	d0f4      	beq.n	3c24 <fp_round+0x8>
    3c3a:	461a      	mov	r2, r3
    3c3c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    3c40:	2939      	cmp	r1, #57	; 0x39
    3c42:	d102      	bne.n	3c4a <fp_round+0x2e>
    3c44:	2130      	movs	r1, #48	; 0x30
    3c46:	7011      	strb	r1, [r2, #0]
    3c48:	e7f8      	b.n	3c3c <fp_round+0x20>
    3c4a:	3101      	adds	r1, #1
    3c4c:	7011      	strb	r1, [r2, #0]
    3c4e:	7802      	ldrb	r2, [r0, #0]
    3c50:	2a30      	cmp	r2, #48	; 0x30
    3c52:	d0e7      	beq.n	3c24 <fp_round+0x8>
    3c54:	1a1a      	subs	r2, r3, r0
    3c56:	2a00      	cmp	r2, #0
    3c58:	db03      	blt.n	3c62 <fp_round+0x46>
    3c5a:	f813 2901 	ldrb.w	r2, [r3], #-1
    3c5e:	709a      	strb	r2, [r3, #2]
    3c60:	e7f8      	b.n	3c54 <fp_round+0x38>
    3c62:	2001      	movs	r0, #1
    3c64:	4770      	bx	lr

00003c66 <pr_dec.constprop.1>:
    3c66:	b510      	push	{r4, lr}
    3c68:	1f8c      	subs	r4, r1, #6
    3c6a:	42a1      	cmp	r1, r4
    3c6c:	d00d      	beq.n	3c8a <pr_dec.constprop.1+0x24>
    3c6e:	230a      	movs	r3, #10
    3c70:	fb90 f3f3 	sdiv	r3, r0, r3
    3c74:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    3c78:	3030      	adds	r0, #48	; 0x30
    3c7a:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
    3c7e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    3c82:	f801 0901 	strb.w	r0, [r1], #-1
    3c86:	4618      	mov	r0, r3
    3c88:	e7ef      	b.n	3c6a <pr_dec.constprop.1+0x4>
    3c8a:	bd10      	pop	{r4, pc}

00003c8c <sprintf>:
    3c8c:	b40e      	push	{r1, r2, r3}
    3c8e:	b530      	push	{r4, r5, lr}
    3c90:	4605      	mov	r5, r0
    3c92:	b090      	sub	sp, #64	; 0x40
    3c94:	ab13      	add	r3, sp, #76	; 0x4c
    3c96:	f853 4b04 	ldr.w	r4, [r3], #4
    3c9a:	2100      	movs	r1, #0
    3c9c:	2228      	movs	r2, #40	; 0x28
    3c9e:	a806      	add	r0, sp, #24
    3ca0:	9305      	str	r3, [sp, #20]
    3ca2:	f7ff ff2b 	bl	3afc <memset>
    3ca6:	230a      	movs	r3, #10
    3ca8:	9309      	str	r3, [sp, #36]	; 0x24
    3caa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    3cae:	9308      	str	r3, [sp, #32]
    3cb0:	9b05      	ldr	r3, [sp, #20]
    3cb2:	9400      	str	r4, [sp, #0]
    3cb4:	9301      	str	r3, [sp, #4]
    3cb6:	4b0f      	ldr	r3, [pc, #60]	; (3cf4 <sprintf+0x68>)
    3cb8:	a806      	add	r0, sp, #24
    3cba:	9302      	str	r3, [sp, #8]
    3cbc:	f04f 32ff 	mov.w	r2, #4294967295
    3cc0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    3cc4:	9506      	str	r5, [sp, #24]
    3cc6:	f000 fce9 	bl	469c <__vfprintf>
    3cca:	9b08      	ldr	r3, [sp, #32]
    3ccc:	4604      	mov	r4, r0
    3cce:	3b01      	subs	r3, #1
    3cd0:	2b00      	cmp	r3, #0
    3cd2:	9308      	str	r3, [sp, #32]
    3cd4:	db03      	blt.n	3cde <sprintf+0x52>
    3cd6:	9b06      	ldr	r3, [sp, #24]
    3cd8:	2200      	movs	r2, #0
    3cda:	701a      	strb	r2, [r3, #0]
    3cdc:	e003      	b.n	3ce6 <sprintf+0x5a>
    3cde:	2000      	movs	r0, #0
    3ce0:	a906      	add	r1, sp, #24
    3ce2:	f001 fcdb 	bl	569c <__flsbuf>
    3ce6:	4620      	mov	r0, r4
    3ce8:	b010      	add	sp, #64	; 0x40
    3cea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3cee:	b003      	add	sp, #12
    3cf0:	4770      	bx	lr
    3cf2:	bf00      	nop
    3cf4:	00003cf9 	.word	0x00003cf9

00003cf8 <fp_display>:
    3cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cfc:	4614      	mov	r4, r2
    3cfe:	f647 72f0 	movw	r2, #32752	; 0x7ff0
    3d02:	684e      	ldr	r6, [r1, #4]
    3d04:	b09f      	sub	sp, #124	; 0x7c
    3d06:	9306      	str	r3, [sp, #24]
    3d08:	f3c6 430f 	ubfx	r3, r6, #16, #16
    3d0c:	f023 030f 	bic.w	r3, r3, #15
    3d10:	045b      	lsls	r3, r3, #17
    3d12:	680f      	ldr	r7, [r1, #0]
    3d14:	0c5b      	lsrs	r3, r3, #17
    3d16:	4293      	cmp	r3, r2
    3d18:	9005      	str	r0, [sp, #20]
    3d1a:	f8dd b0a4 	ldr.w	fp, [sp, #164]	; 0xa4
    3d1e:	9708      	str	r7, [sp, #32]
    3d20:	9607      	str	r6, [sp, #28]
    3d22:	d127      	bne.n	3d74 <fp_display+0x7c>
    3d24:	2300      	movs	r3, #0
    3d26:	70e3      	strb	r3, [r4, #3]
    3d28:	f3c6 0313 	ubfx	r3, r6, #0, #20
    3d2c:	433b      	orrs	r3, r7
    3d2e:	f04f 036e 	mov.w	r3, #110	; 0x6e
    3d32:	d115      	bne.n	3d60 <fp_display+0x68>
    3d34:	2269      	movs	r2, #105	; 0x69
    3d36:	7063      	strb	r3, [r4, #1]
    3d38:	2e00      	cmp	r6, #0
    3d3a:	f04f 0366 	mov.w	r3, #102	; 0x66
    3d3e:	7022      	strb	r2, [r4, #0]
    3d40:	70a3      	strb	r3, [r4, #2]
    3d42:	da01      	bge.n	3d48 <fp_display+0x50>
    3d44:	4b84      	ldr	r3, [pc, #528]	; (3f58 <fp_display+0x260>)
    3d46:	e010      	b.n	3d6a <fp_display+0x72>
    3d48:	9b06      	ldr	r3, [sp, #24]
    3d4a:	079a      	lsls	r2, r3, #30
    3d4c:	d406      	bmi.n	3d5c <fp_display+0x64>
    3d4e:	4a83      	ldr	r2, [pc, #524]	; (3f5c <fp_display+0x264>)
    3d50:	f013 0f04 	tst.w	r3, #4
    3d54:	4b82      	ldr	r3, [pc, #520]	; (3f60 <fp_display+0x268>)
    3d56:	bf08      	it	eq
    3d58:	4613      	moveq	r3, r2
    3d5a:	e006      	b.n	3d6a <fp_display+0x72>
    3d5c:	4b81      	ldr	r3, [pc, #516]	; (3f64 <fp_display+0x26c>)
    3d5e:	e004      	b.n	3d6a <fp_display+0x72>
    3d60:	7023      	strb	r3, [r4, #0]
    3d62:	2261      	movs	r2, #97	; 0x61
    3d64:	70a3      	strb	r3, [r4, #2]
    3d66:	4b7d      	ldr	r3, [pc, #500]	; (3f5c <fp_display+0x264>)
    3d68:	7062      	strb	r2, [r4, #1]
    3d6a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    3d6c:	2003      	movs	r0, #3
    3d6e:	6013      	str	r3, [r2, #0]
    3d70:	f000 bc3f 	b.w	45f2 <fp_display+0x8fa>
    3d74:	9b05      	ldr	r3, [sp, #20]
    3d76:	f023 0320 	bic.w	r3, r3, #32
    3d7a:	2b41      	cmp	r3, #65	; 0x41
    3d7c:	f000 8244 	beq.w	4208 <fp_display+0x510>
    3d80:	4638      	mov	r0, r7
    3d82:	4631      	mov	r1, r6
    3d84:	2200      	movs	r2, #0
    3d86:	2300      	movs	r3, #0
    3d88:	f002 fb28 	bl	63dc <__aeabi_dcmplt>
    3d8c:	b138      	cbz	r0, 3d9e <fp_display+0xa6>
    3d8e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    3d92:	9a08      	ldr	r2, [sp, #32]
    3d94:	461e      	mov	r6, r3
    3d96:	2301      	movs	r3, #1
    3d98:	4617      	mov	r7, r2
    3d9a:	9309      	str	r3, [sp, #36]	; 0x24
    3d9c:	e000      	b.n	3da0 <fp_display+0xa8>
    3d9e:	9009      	str	r0, [sp, #36]	; 0x24
    3da0:	4638      	mov	r0, r7
    3da2:	4631      	mov	r1, r6
    3da4:	2200      	movs	r2, #0
    3da6:	2300      	movs	r3, #0
    3da8:	f002 fb02 	bl	63b0 <__aeabi_dcmpeq>
    3dac:	2800      	cmp	r0, #0
    3dae:	f040 820d 	bne.w	41cc <fp_display+0x4d4>
    3db2:	f240 152d 	movw	r5, #301	; 0x12d
    3db6:	aa11      	add	r2, sp, #68	; 0x44
    3db8:	4638      	mov	r0, r7
    3dba:	4631      	mov	r1, r6
    3dbc:	f001 fd70 	bl	58a0 <_frexpl>
    3dc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3dc2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3dc6:	4355      	muls	r5, r2
    3dc8:	f5a5 53ab 	sub.w	r3, r5, #5472	; 0x1560
    3dcc:	3b1c      	subs	r3, #28
    3dce:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    3dd2:	fb93 f5f5 	sdiv	r5, r3, r5
    3dd6:	2000      	movs	r0, #0
    3dd8:	4963      	ldr	r1, [pc, #396]	; (3f68 <fp_display+0x270>)
    3dda:	1aaa      	subs	r2, r5, r2
    3ddc:	f001 fd8e 	bl	58fc <_ldexpl>
    3de0:	2d00      	cmp	r5, #0
    3de2:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3de6:	da06      	bge.n	3df6 <fp_display+0xfe>
    3de8:	a355      	add	r3, pc, #340	; (adr r3, 3f40 <fp_display+0x248>)
    3dea:	e9d3 2300 	ldrd	r2, r3, [r3]
    3dee:	426e      	negs	r6, r5
    3df0:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    3df4:	e006      	b.n	3e04 <fp_display+0x10c>
    3df6:	4b5d      	ldr	r3, [pc, #372]	; (3f6c <fp_display+0x274>)
    3df8:	f04f 0200 	mov.w	r2, #0
    3dfc:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    3e00:	d016      	beq.n	3e30 <fp_display+0x138>
    3e02:	462e      	mov	r6, r5
    3e04:	07f3      	lsls	r3, r6, #31
    3e06:	d509      	bpl.n	3e1c <fp_display+0x124>
    3e08:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3e0c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3e10:	f001 ffc2 	bl	5d98 <__aeabi_dmul>
    3e14:	2e01      	cmp	r6, #1
    3e16:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3e1a:	d009      	beq.n	3e30 <fp_display+0x138>
    3e1c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3e20:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3e24:	f001 ffb8 	bl	5d98 <__aeabi_dmul>
    3e28:	1076      	asrs	r6, r6, #1
    3e2a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    3e2e:	e7e9      	b.n	3e04 <fp_display+0x10c>
    3e30:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3e34:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    3e38:	f002 f83e 	bl	5eb8 <__aeabi_ddiv>
    3e3c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3e40:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3e44:	a340      	add	r3, pc, #256	; (adr r3, 3f48 <fp_display+0x250>)
    3e46:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e4a:	f002 fac7 	bl	63dc <__aeabi_dcmplt>
    3e4e:	b188      	cbz	r0, 3e74 <fp_display+0x17c>
    3e50:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3e54:	2200      	movs	r2, #0
    3e56:	4b46      	ldr	r3, [pc, #280]	; (3f70 <fp_display+0x278>)
    3e58:	f001 ff9e 	bl	5d98 <__aeabi_dmul>
    3e5c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3e60:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3e64:	2200      	movs	r2, #0
    3e66:	4b42      	ldr	r3, [pc, #264]	; (3f70 <fp_display+0x278>)
    3e68:	f002 f826 	bl	5eb8 <__aeabi_ddiv>
    3e6c:	3d01      	subs	r5, #1
    3e6e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3e72:	e7e5      	b.n	3e40 <fp_display+0x148>
    3e74:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3e78:	a335      	add	r3, pc, #212	; (adr r3, 3f50 <fp_display+0x258>)
    3e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e7e:	f002 fb09 	bl	6494 <__aeabi_dcmpge>
    3e82:	b188      	cbz	r0, 3ea8 <fp_display+0x1b0>
    3e84:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3e88:	2200      	movs	r2, #0
    3e8a:	4b39      	ldr	r3, [pc, #228]	; (3f70 <fp_display+0x278>)
    3e8c:	f002 f814 	bl	5eb8 <__aeabi_ddiv>
    3e90:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3e94:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3e98:	2200      	movs	r2, #0
    3e9a:	4b35      	ldr	r3, [pc, #212]	; (3f70 <fp_display+0x278>)
    3e9c:	f001 ff7c 	bl	5d98 <__aeabi_dmul>
    3ea0:	3501      	adds	r5, #1
    3ea2:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3ea6:	e7e5      	b.n	3e74 <fp_display+0x17c>
    3ea8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3eac:	f002 fa32 	bl	6314 <__aeabi_d2iz>
    3eb0:	426b      	negs	r3, r5
    3eb2:	ea13 0325 	ands.w	r3, r3, r5, asr #32
    3eb6:	bf38      	it	cc
    3eb8:	462b      	movcc	r3, r5
    3eba:	4682      	mov	sl, r0
    3ebc:	930e      	str	r3, [sp, #56]	; 0x38
    3ebe:	4650      	mov	r0, sl
    3ec0:	f002 fa6c 	bl	639c <__aeabi_i2d>
    3ec4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3ec6:	1aaa      	subs	r2, r5, r2
    3ec8:	f001 fd18 	bl	58fc <_ldexpl>
    3ecc:	2200      	movs	r2, #0
    3ece:	2300      	movs	r3, #0
    3ed0:	2d00      	cmp	r5, #0
    3ed2:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3ed6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    3eda:	da4b      	bge.n	3f74 <fp_display+0x27c>
    3edc:	a118      	add	r1, pc, #96	; (adr r1, 3f40 <fp_display+0x248>)
    3ede:	e9d1 0100 	ldrd	r0, r1, [r1]
    3ee2:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    3ee6:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    3eea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    3eee:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3ef2:	f04f 0800 	mov.w	r8, #0
    3ef6:	4642      	mov	r2, r8
    3ef8:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    3efc:	464b      	mov	r3, r9
    3efe:	f002 f883 	bl	6008 <__aeabi_dsub>
    3f02:	4602      	mov	r2, r0
    3f04:	460b      	mov	r3, r1
    3f06:	4630      	mov	r0, r6
    3f08:	4639      	mov	r1, r7
    3f0a:	f002 f969 	bl	61e0 <__aeabi_dadd>
    3f0e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    3f12:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    3f16:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3f1a:	2200      	movs	r2, #0
    3f1c:	4b13      	ldr	r3, [pc, #76]	; (3f6c <fp_display+0x274>)
    3f1e:	f001 ff3b 	bl	5d98 <__aeabi_dmul>
    3f22:	4602      	mov	r2, r0
    3f24:	460b      	mov	r3, r1
    3f26:	2000      	movs	r0, #0
    3f28:	490f      	ldr	r1, [pc, #60]	; (3f68 <fp_display+0x270>)
    3f2a:	f002 f86d 	bl	6008 <__aeabi_dsub>
    3f2e:	2200      	movs	r2, #0
    3f30:	4b0e      	ldr	r3, [pc, #56]	; (3f6c <fp_display+0x274>)
    3f32:	f001 ffc1 	bl	5eb8 <__aeabi_ddiv>
    3f36:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    3f3a:	e024      	b.n	3f86 <fp_display+0x28e>
    3f3c:	f3af 8000 	nop.w
    3f40:	9999999a 	.word	0x9999999a
    3f44:	3fc99999 	.word	0x3fc99999
    3f48:	00000000 	.word	0x00000000
    3f4c:	40f86a00 	.word	0x40f86a00
    3f50:	00000000 	.word	0x00000000
    3f54:	412e8480 	.word	0x412e8480
    3f58:	000076ba 	.word	0x000076ba
    3f5c:	00007507 	.word	0x00007507
    3f60:	0000768a 	.word	0x0000768a
    3f64:	00007688 	.word	0x00007688
    3f68:	3ff00000 	.word	0x3ff00000
    3f6c:	40140000 	.word	0x40140000
    3f70:	40240000 	.word	0x40240000
    3f74:	49ae      	ldr	r1, [pc, #696]	; (4230 <fp_display+0x538>)
    3f76:	f04f 0000 	mov.w	r0, #0
    3f7a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    3f7e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    3f82:	f000 8089 	beq.w	4098 <fp_display+0x3a0>
    3f86:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    3f8a:	f01c 0f01 	tst.w	ip, #1
    3f8e:	d048      	beq.n	4022 <fp_display+0x32a>
    3f90:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3f94:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    3f98:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    3f9c:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    3fa0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    3fa4:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    3fa8:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    3fac:	f001 fef4 	bl	5d98 <__aeabi_dmul>
    3fb0:	4632      	mov	r2, r6
    3fb2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    3fb6:	463b      	mov	r3, r7
    3fb8:	4640      	mov	r0, r8
    3fba:	4649      	mov	r1, r9
    3fbc:	f002 f910 	bl	61e0 <__aeabi_dadd>
    3fc0:	4602      	mov	r2, r0
    3fc2:	460b      	mov	r3, r1
    3fc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    3fc8:	f001 fee6 	bl	5d98 <__aeabi_dmul>
    3fcc:	4602      	mov	r2, r0
    3fce:	460b      	mov	r3, r1
    3fd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    3fd4:	f002 f904 	bl	61e0 <__aeabi_dadd>
    3fd8:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    3fdc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3fe0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3fe4:	f001 fed8 	bl	5d98 <__aeabi_dmul>
    3fe8:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3fec:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    3ff0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3ff4:	f04f 0800 	mov.w	r8, #0
    3ff8:	4642      	mov	r2, r8
    3ffa:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    3ffe:	464b      	mov	r3, r9
    4000:	f002 f802 	bl	6008 <__aeabi_dsub>
    4004:	4602      	mov	r2, r0
    4006:	460b      	mov	r3, r1
    4008:	4630      	mov	r0, r6
    400a:	4639      	mov	r1, r7
    400c:	f002 f8e8 	bl	61e0 <__aeabi_dadd>
    4010:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    4014:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    4018:	f1bc 0f01 	cmp.w	ip, #1
    401c:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
    4020:	d03a      	beq.n	4098 <fp_display+0x3a0>
    4022:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    4026:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    402a:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    402e:	4602      	mov	r2, r0
    4030:	460b      	mov	r3, r1
    4032:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    4036:	f002 f8d3 	bl	61e0 <__aeabi_dadd>
    403a:	4632      	mov	r2, r6
    403c:	463b      	mov	r3, r7
    403e:	f002 f8cf 	bl	61e0 <__aeabi_dadd>
    4042:	4602      	mov	r2, r0
    4044:	460b      	mov	r3, r1
    4046:	4640      	mov	r0, r8
    4048:	4649      	mov	r1, r9
    404a:	f001 fea5 	bl	5d98 <__aeabi_dmul>
    404e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    4052:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    4056:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    405a:	f001 fe9d 	bl	5d98 <__aeabi_dmul>
    405e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    4062:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    4066:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    406a:	f04f 0800 	mov.w	r8, #0
    406e:	4642      	mov	r2, r8
    4070:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    4074:	464b      	mov	r3, r9
    4076:	f001 ffc7 	bl	6008 <__aeabi_dsub>
    407a:	4602      	mov	r2, r0
    407c:	460b      	mov	r3, r1
    407e:	4630      	mov	r0, r6
    4080:	4639      	mov	r1, r7
    4082:	f002 f8ad 	bl	61e0 <__aeabi_dadd>
    4086:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    408a:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    408e:	ea4f 0c6c 	mov.w	ip, ip, asr #1
    4092:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    4096:	e778      	b.n	3f8a <fp_display+0x292>
    4098:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    409c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    40a0:	f002 f9ca 	bl	6438 <__aeabi_dcmple>
    40a4:	b910      	cbnz	r0, 40ac <fp_display+0x3b4>
    40a6:	f10a 3aff 	add.w	sl, sl, #4294967295
    40aa:	e708      	b.n	3ebe <fp_display+0x1c6>
    40ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    40b0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    40b4:	f001 ffa8 	bl	6008 <__aeabi_dsub>
    40b8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    40bc:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    40c0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    40c4:	f001 ffa0 	bl	6008 <__aeabi_dsub>
    40c8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    40cc:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    40d0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    40d4:	f001 fef0 	bl	5eb8 <__aeabi_ddiv>
    40d8:	a353      	add	r3, pc, #332	; (adr r3, 4228 <fp_display+0x530>)
    40da:	e9d3 2300 	ldrd	r2, r3, [r3]
    40de:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    40e2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    40e6:	f001 fe57 	bl	5d98 <__aeabi_dmul>
    40ea:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    40ee:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    40f2:	f002 f90f 	bl	6314 <__aeabi_d2iz>
    40f6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    40fa:	4680      	mov	r8, r0
    40fc:	f002 f94e 	bl	639c <__aeabi_i2d>
    4100:	4602      	mov	r2, r0
    4102:	460b      	mov	r3, r1
    4104:	4630      	mov	r0, r6
    4106:	4639      	mov	r1, r7
    4108:	f001 ff7e 	bl	6008 <__aeabi_dsub>
    410c:	a346      	add	r3, pc, #280	; (adr r3, 4228 <fp_display+0x530>)
    410e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4112:	f001 fe41 	bl	5d98 <__aeabi_dmul>
    4116:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    411a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    411e:	f002 f8f9 	bl	6314 <__aeabi_d2iz>
    4122:	4606      	mov	r6, r0
    4124:	2e00      	cmp	r6, #0
    4126:	da06      	bge.n	4136 <fp_display+0x43e>
    4128:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
    412c:	f506 7610 	add.w	r6, r6, #576	; 0x240
    4130:	f108 38ff 	add.w	r8, r8, #4294967295
    4134:	e7f6      	b.n	4124 <fp_display+0x42c>
    4136:	4b3f      	ldr	r3, [pc, #252]	; (4234 <fp_display+0x53c>)
    4138:	429e      	cmp	r6, r3
    413a:	dd06      	ble.n	414a <fp_display+0x452>
    413c:	f5a6 2674 	sub.w	r6, r6, #999424	; 0xf4000
    4140:	f5a6 7610 	sub.w	r6, r6, #576	; 0x240
    4144:	f108 0801 	add.w	r8, r8, #1
    4148:	e7f5      	b.n	4136 <fp_display+0x43e>
    414a:	f1b8 0f00 	cmp.w	r8, #0
    414e:	da06      	bge.n	415e <fp_display+0x466>
    4150:	f508 2874 	add.w	r8, r8, #999424	; 0xf4000
    4154:	f508 7810 	add.w	r8, r8, #576	; 0x240
    4158:	f10a 3aff 	add.w	sl, sl, #4294967295
    415c:	e7f5      	b.n	414a <fp_display+0x452>
    415e:	4598      	cmp	r8, r3
    4160:	dd06      	ble.n	4170 <fp_display+0x478>
    4162:	f5a8 2874 	sub.w	r8, r8, #999424	; 0xf4000
    4166:	f5a8 7810 	sub.w	r8, r8, #576	; 0x240
    416a:	f10a 0a01 	add.w	sl, sl, #1
    416e:	e7f6      	b.n	415e <fp_display+0x466>
    4170:	4b31      	ldr	r3, [pc, #196]	; (4238 <fp_display+0x540>)
    4172:	4650      	mov	r0, sl
    4174:	459a      	cmp	sl, r3
    4176:	dc11      	bgt.n	419c <fp_display+0x4a4>
    4178:	3301      	adds	r3, #1
    417a:	fb98 f2f3 	sdiv	r2, r8, r3
    417e:	fb96 f3f3 	sdiv	r3, r6, r3
    4182:	482e      	ldr	r0, [pc, #184]	; (423c <fp_display+0x544>)
    4184:	210a      	movs	r1, #10
    4186:	fb00 8802 	mla	r8, r0, r2, r8
    418a:	fb00 6603 	mla	r6, r0, r3, r6
    418e:	fb01 2a0a 	mla	sl, r1, sl, r2
    4192:	fb01 3808 	mla	r8, r1, r8, r3
    4196:	434e      	muls	r6, r1
    4198:	3d01      	subs	r5, #1
    419a:	e01c      	b.n	41d6 <fp_display+0x4de>
    419c:	4b25      	ldr	r3, [pc, #148]	; (4234 <fp_display+0x53c>)
    419e:	459a      	cmp	sl, r3
    41a0:	dd19      	ble.n	41d6 <fp_display+0x4de>
    41a2:	220a      	movs	r2, #10
    41a4:	fb9a faf2 	sdiv	sl, sl, r2
    41a8:	f06f 0309 	mvn.w	r3, #9
    41ac:	fb03 000a 	mla	r0, r3, sl, r0
    41b0:	4923      	ldr	r1, [pc, #140]	; (4240 <fp_display+0x548>)
    41b2:	3501      	adds	r5, #1
    41b4:	fb01 8000 	mla	r0, r1, r0, r8
    41b8:	fb90 f8f2 	sdiv	r8, r0, r2
    41bc:	fb03 0308 	mla	r3, r3, r8, r0
    41c0:	fb01 6603 	mla	r6, r1, r3, r6
    41c4:	3605      	adds	r6, #5
    41c6:	fb96 f6f2 	sdiv	r6, r6, r2
    41ca:	e004      	b.n	41d6 <fp_display+0x4de>
    41cc:	2600      	movs	r6, #0
    41ce:	46b0      	mov	r8, r6
    41d0:	46b2      	mov	sl, r6
    41d2:	f06f 0504 	mvn.w	r5, #4
    41d6:	4621      	mov	r1, r4
    41d8:	2730      	movs	r7, #48	; 0x30
    41da:	f801 7b06 	strb.w	r7, [r1], #6
    41de:	4650      	mov	r0, sl
    41e0:	f7ff fd41 	bl	3c66 <pr_dec.constprop.1>
    41e4:	4640      	mov	r0, r8
    41e6:	f104 010c 	add.w	r1, r4, #12
    41ea:	f7ff fd3c 	bl	3c66 <pr_dec.constprop.1>
    41ee:	4630      	mov	r0, r6
    41f0:	f104 0112 	add.w	r1, r4, #18
    41f4:	f7ff fd37 	bl	3c66 <pr_dec.constprop.1>
    41f8:	2300      	movs	r3, #0
    41fa:	7523      	strb	r3, [r4, #20]
    41fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    41fe:	3505      	adds	r5, #5
    4200:	74e7      	strb	r7, [r4, #19]
    4202:	ea43 0585 	orr.w	r5, r3, r5, lsl #2
    4206:	e000      	b.n	420a <fp_display+0x512>
    4208:	2500      	movs	r5, #0
    420a:	07ef      	lsls	r7, r5, #31
    420c:	d501      	bpl.n	4212 <fp_display+0x51a>
    420e:	4b0d      	ldr	r3, [pc, #52]	; (4244 <fp_display+0x54c>)
    4210:	e01f      	b.n	4252 <fp_display+0x55a>
    4212:	9b06      	ldr	r3, [sp, #24]
    4214:	079e      	lsls	r6, r3, #30
    4216:	d41b      	bmi.n	4250 <fp_display+0x558>
    4218:	4a0b      	ldr	r2, [pc, #44]	; (4248 <fp_display+0x550>)
    421a:	f013 0f04 	tst.w	r3, #4
    421e:	4b0b      	ldr	r3, [pc, #44]	; (424c <fp_display+0x554>)
    4220:	bf08      	it	eq
    4222:	4613      	moveq	r3, r2
    4224:	e015      	b.n	4252 <fp_display+0x55a>
    4226:	bf00      	nop
    4228:	00000000 	.word	0x00000000
    422c:	412e8480 	.word	0x412e8480
    4230:	40140000 	.word	0x40140000
    4234:	000f423f 	.word	0x000f423f
    4238:	0001869f 	.word	0x0001869f
    423c:	fffe7960 	.word	0xfffe7960
    4240:	000f4240 	.word	0x000f4240
    4244:	000076ba 	.word	0x000076ba
    4248:	00007507 	.word	0x00007507
    424c:	0000768a 	.word	0x0000768a
    4250:	4bad      	ldr	r3, [pc, #692]	; (4508 <fp_display+0x810>)
    4252:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    4254:	f025 0501 	bic.w	r5, r5, #1
    4258:	6013      	str	r3, [r2, #0]
    425a:	2304      	movs	r3, #4
    425c:	fb95 f5f3 	sdiv	r5, r5, r3
    4260:	9b05      	ldr	r3, [sp, #20]
    4262:	f8db 6000 	ldr.w	r6, [fp]
    4266:	2b61      	cmp	r3, #97	; 0x61
    4268:	d010      	beq.n	428c <fp_display+0x594>
    426a:	dc06      	bgt.n	427a <fp_display+0x582>
    426c:	2b45      	cmp	r3, #69	; 0x45
    426e:	d067      	beq.n	4340 <fp_display+0x648>
    4270:	2b47      	cmp	r3, #71	; 0x47
    4272:	d048      	beq.n	4306 <fp_display+0x60e>
    4274:	2b41      	cmp	r3, #65	; 0x41
    4276:	d144      	bne.n	4302 <fp_display+0x60a>
    4278:	e008      	b.n	428c <fp_display+0x594>
    427a:	9b05      	ldr	r3, [sp, #20]
    427c:	2b66      	cmp	r3, #102	; 0x66
    427e:	f000 80df 	beq.w	4440 <fp_display+0x748>
    4282:	2b67      	cmp	r3, #103	; 0x67
    4284:	d03f      	beq.n	4306 <fp_display+0x60e>
    4286:	2b65      	cmp	r3, #101	; 0x65
    4288:	d13b      	bne.n	4302 <fp_display+0x60a>
    428a:	e059      	b.n	4340 <fp_display+0x648>
    428c:	9b07      	ldr	r3, [sp, #28]
    428e:	2000      	movs	r0, #0
    4290:	f3c3 0113 	ubfx	r1, r3, #0, #20
    4294:	9b08      	ldr	r3, [sp, #32]
    4296:	4318      	orrs	r0, r3
    4298:	9b07      	ldr	r3, [sp, #28]
    429a:	f3c3 520a 	ubfx	r2, r3, #20, #11
    429e:	b112      	cbz	r2, 42a6 <fp_display+0x5ae>
    42a0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
    42a4:	e004      	b.n	42b0 <fp_display+0x5b8>
    42a6:	ea50 0301 	orrs.w	r3, r0, r1
    42aa:	4b98      	ldr	r3, [pc, #608]	; (450c <fp_display+0x814>)
    42ac:	bf08      	it	eq
    42ae:	2300      	moveq	r3, #0
    42b0:	2a00      	cmp	r2, #0
    42b2:	bf0c      	ite	eq
    42b4:	2230      	moveq	r2, #48	; 0x30
    42b6:	2231      	movne	r2, #49	; 0x31
    42b8:	b966      	cbnz	r6, 42d4 <fp_display+0x5dc>
    42ba:	9d06      	ldr	r5, [sp, #24]
    42bc:	072d      	lsls	r5, r5, #28
    42be:	d409      	bmi.n	42d4 <fp_display+0x5dc>
    42c0:	9d05      	ldr	r5, [sp, #20]
    42c2:	4620      	mov	r0, r4
    42c4:	4992      	ldr	r1, [pc, #584]	; (4510 <fp_display+0x818>)
    42c6:	4c93      	ldr	r4, [pc, #588]	; (4514 <fp_display+0x81c>)
    42c8:	2d61      	cmp	r5, #97	; 0x61
    42ca:	bf08      	it	eq
    42cc:	4621      	moveq	r1, r4
    42ce:	f7ff fcdd 	bl	3c8c <sprintf>
    42d2:	e00c      	b.n	42ee <fp_display+0x5f6>
    42d4:	e9cd 0100 	strd	r0, r1, [sp]
    42d8:	9302      	str	r3, [sp, #8]
    42da:	4620      	mov	r0, r4
    42dc:	4b8e      	ldr	r3, [pc, #568]	; (4518 <fp_display+0x820>)
    42de:	498f      	ldr	r1, [pc, #572]	; (451c <fp_display+0x824>)
    42e0:	9c05      	ldr	r4, [sp, #20]
    42e2:	2c61      	cmp	r4, #97	; 0x61
    42e4:	bf18      	it	ne
    42e6:	4619      	movne	r1, r3
    42e8:	4633      	mov	r3, r6
    42ea:	f7ff fccf 	bl	3c8c <sprintf>
    42ee:	4a8c      	ldr	r2, [pc, #560]	; (4520 <fp_display+0x828>)
    42f0:	4b8c      	ldr	r3, [pc, #560]	; (4524 <fp_display+0x82c>)
    42f2:	9907      	ldr	r1, [sp, #28]
    42f4:	ea33 0321 	bics.w	r3, r3, r1, asr #32
    42f8:	bf28      	it	cs
    42fa:	4613      	movcs	r3, r2
    42fc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    42fe:	6013      	str	r3, [r2, #0]
    4300:	e177      	b.n	45f2 <fp_display+0x8fa>
    4302:	2367      	movs	r3, #103	; 0x67
    4304:	9305      	str	r3, [sp, #20]
    4306:	9b06      	ldr	r3, [sp, #24]
    4308:	2e00      	cmp	r6, #0
    430a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    430e:	9306      	str	r3, [sp, #24]
    4310:	bfdc      	itt	le
    4312:	2301      	movle	r3, #1
    4314:	f8cb 3000 	strle.w	r3, [fp]
    4318:	f8db 1000 	ldr.w	r1, [fp]
    431c:	4620      	mov	r0, r4
    431e:	2911      	cmp	r1, #17
    4320:	bfd4      	ite	le
    4322:	3101      	addle	r1, #1
    4324:	2112      	movgt	r1, #18
    4326:	f7ff fc79 	bl	3c1c <fp_round>
    432a:	f8db 3000 	ldr.w	r3, [fp]
    432e:	4405      	add	r5, r0
    4330:	429d      	cmp	r5, r3
    4332:	db7e      	blt.n	4432 <fp_display+0x73a>
    4334:	3b01      	subs	r3, #1
    4336:	f8cb 3000 	str.w	r3, [fp]
    433a:	9b05      	ldr	r3, [sp, #20]
    433c:	3b02      	subs	r3, #2
    433e:	9305      	str	r3, [sp, #20]
    4340:	f8db 3000 	ldr.w	r3, [fp]
    4344:	2b11      	cmp	r3, #17
    4346:	bfc1      	itttt	gt
    4348:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    434a:	3b11      	subgt	r3, #17
    434c:	6013      	strgt	r3, [r2, #0]
    434e:	2311      	movgt	r3, #17
    4350:	bfc8      	it	gt
    4352:	f8cb 3000 	strgt.w	r3, [fp]
    4356:	9b06      	ldr	r3, [sp, #24]
    4358:	f8db 6000 	ldr.w	r6, [fp]
    435c:	f413 6700 	ands.w	r7, r3, #2048	; 0x800
    4360:	f106 0602 	add.w	r6, r6, #2
    4364:	d104      	bne.n	4370 <fp_display+0x678>
    4366:	4620      	mov	r0, r4
    4368:	4631      	mov	r1, r6
    436a:	f7ff fc57 	bl	3c1c <fp_round>
    436e:	4405      	add	r5, r0
    4370:	7863      	ldrb	r3, [r4, #1]
    4372:	7023      	strb	r3, [r4, #0]
    4374:	f8db 3000 	ldr.w	r3, [fp]
    4378:	b923      	cbnz	r3, 4384 <fp_display+0x68c>
    437a:	f640 0308 	movw	r3, #2056	; 0x808
    437e:	9a06      	ldr	r2, [sp, #24]
    4380:	4013      	ands	r3, r2
    4382:	b113      	cbz	r3, 438a <fp_display+0x692>
    4384:	232e      	movs	r3, #46	; 0x2e
    4386:	7063      	strb	r3, [r4, #1]
    4388:	e000      	b.n	438c <fp_display+0x694>
    438a:	2601      	movs	r6, #1
    438c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    438e:	681b      	ldr	r3, [r3, #0]
    4390:	2b00      	cmp	r3, #0
    4392:	bfc2      	ittt	gt
    4394:	233e      	movgt	r3, #62	; 0x3e
    4396:	55a3      	strbgt	r3, [r4, r6]
    4398:	3601      	addgt	r6, #1
    439a:	b177      	cbz	r7, 43ba <fp_display+0x6c2>
    439c:	9b06      	ldr	r3, [sp, #24]
    439e:	071f      	lsls	r7, r3, #28
    43a0:	d40b      	bmi.n	43ba <fp_display+0x6c2>
    43a2:	19a2      	adds	r2, r4, r6
    43a4:	1b16      	subs	r6, r2, r4
    43a6:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
    43aa:	2b30      	cmp	r3, #48	; 0x30
    43ac:	d0fa      	beq.n	43a4 <fp_display+0x6ac>
    43ae:	2b3e      	cmp	r3, #62	; 0x3e
    43b0:	d0f8      	beq.n	43a4 <fp_display+0x6ac>
    43b2:	2b2e      	cmp	r3, #46	; 0x2e
    43b4:	bf08      	it	eq
    43b6:	f106 36ff 	addeq.w	r6, r6, #4294967295
    43ba:	f89d 3014 	ldrb.w	r3, [sp, #20]
    43be:	2d00      	cmp	r5, #0
    43c0:	55a3      	strb	r3, [r4, r6]
    43c2:	bfb8      	it	lt
    43c4:	426d      	neglt	r5, r5
    43c6:	f106 0302 	add.w	r3, r6, #2
    43ca:	f106 0201 	add.w	r2, r6, #1
    43ce:	bfb5      	itete	lt
    43d0:	212d      	movlt	r1, #45	; 0x2d
    43d2:	212b      	movge	r1, #43	; 0x2b
    43d4:	461e      	movlt	r6, r3
    43d6:	461e      	movge	r6, r3
    43d8:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
    43dc:	54a1      	strb	r1, [r4, r2]
    43de:	db0a      	blt.n	43f6 <fp_display+0x6fe>
    43e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    43e4:	fb95 f2f2 	sdiv	r2, r5, r2
    43e8:	f102 0130 	add.w	r1, r2, #48	; 0x30
    43ec:	54e1      	strb	r1, [r4, r3]
    43ee:	494e      	ldr	r1, [pc, #312]	; (4528 <fp_display+0x830>)
    43f0:	1c5e      	adds	r6, r3, #1
    43f2:	fb01 5502 	mla	r5, r1, r2, r5
    43f6:	2d63      	cmp	r5, #99	; 0x63
    43f8:	dd0a      	ble.n	4410 <fp_display+0x718>
    43fa:	2364      	movs	r3, #100	; 0x64
    43fc:	fb95 f3f3 	sdiv	r3, r5, r3
    4400:	f103 0230 	add.w	r2, r3, #48	; 0x30
    4404:	55a2      	strb	r2, [r4, r6]
    4406:	f06f 0263 	mvn.w	r2, #99	; 0x63
    440a:	fb02 5503 	mla	r5, r2, r3, r5
    440e:	3601      	adds	r6, #1
    4410:	230a      	movs	r3, #10
    4412:	fb95 f3f3 	sdiv	r3, r5, r3
    4416:	f103 0230 	add.w	r2, r3, #48	; 0x30
    441a:	55a2      	strb	r2, [r4, r6]
    441c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    4420:	3530      	adds	r5, #48	; 0x30
    4422:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
    4426:	4434      	add	r4, r6
    4428:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    442c:	7063      	strb	r3, [r4, #1]
    442e:	1cb0      	adds	r0, r6, #2
    4430:	e0df      	b.n	45f2 <fp_display+0x8fa>
    4432:	1d2a      	adds	r2, r5, #4
    4434:	f6ff af7e 	blt.w	4334 <fp_display+0x63c>
    4438:	43ea      	mvns	r2, r5
    443a:	4413      	add	r3, r2
    443c:	f8cb 3000 	str.w	r3, [fp]
    4440:	9a06      	ldr	r2, [sp, #24]
    4442:	2d00      	cmp	r5, #0
    4444:	f8db 3000 	ldr.w	r3, [fp]
    4448:	f402 6700 	and.w	r7, r2, #2048	; 0x800
    444c:	da4c      	bge.n	44e8 <fp_display+0x7f0>
    444e:	f1c5 0800 	rsb	r8, r5, #0
    4452:	1c5a      	adds	r2, r3, #1
    4454:	4590      	cmp	r8, r2
    4456:	dd09      	ble.n	446c <fp_display+0x774>
    4458:	2330      	movs	r3, #48	; 0x30
    445a:	7023      	strb	r3, [r4, #0]
    445c:	232e      	movs	r3, #46	; 0x2e
    445e:	7063      	strb	r3, [r4, #1]
    4460:	f8db 3000 	ldr.w	r3, [fp]
    4464:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    4466:	2602      	movs	r6, #2
    4468:	6013      	str	r3, [r2, #0]
    446a:	e038      	b.n	44de <fp_display+0x7e6>
    446c:	442b      	add	r3, r5
    446e:	1c9e      	adds	r6, r3, #2
    4470:	2e12      	cmp	r6, #18
    4472:	bfc1      	itttt	gt
    4474:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    4476:	3b11      	subgt	r3, #17
    4478:	6013      	strgt	r3, [r2, #0]
    447a:	2613      	movgt	r6, #19
    447c:	b95f      	cbnz	r7, 4496 <fp_display+0x79e>
    447e:	4620      	mov	r0, r4
    4480:	4631      	mov	r1, r6
    4482:	f7ff fbcb 	bl	3c1c <fp_round>
    4486:	b130      	cbz	r0, 4496 <fp_display+0x79e>
    4488:	ea7f 0805 	mvns.w	r8, r5
    448c:	f106 0601 	add.w	r6, r6, #1
    4490:	d101      	bne.n	4496 <fp_display+0x79e>
    4492:	7863      	ldrb	r3, [r4, #1]
    4494:	e00d      	b.n	44b2 <fp_display+0x7ba>
    4496:	f1b8 0f01 	cmp.w	r8, #1
    449a:	eb04 0306 	add.w	r3, r4, r6
    449e:	d10c      	bne.n	44ba <fp_display+0x7c2>
    44a0:	1b1a      	subs	r2, r3, r4
    44a2:	2a00      	cmp	r2, #0
    44a4:	dd03      	ble.n	44ae <fp_display+0x7b6>
    44a6:	f813 2901 	ldrb.w	r2, [r3], #-1
    44aa:	709a      	strb	r2, [r3, #2]
    44ac:	e7f8      	b.n	44a0 <fp_display+0x7a8>
    44ae:	3601      	adds	r6, #1
    44b0:	2330      	movs	r3, #48	; 0x30
    44b2:	7023      	strb	r3, [r4, #0]
    44b4:	232e      	movs	r3, #46	; 0x2e
    44b6:	7063      	strb	r3, [r4, #1]
    44b8:	e011      	b.n	44de <fp_display+0x7e6>
    44ba:	1b1a      	subs	r2, r3, r4
    44bc:	2a00      	cmp	r2, #0
    44be:	dd03      	ble.n	44c8 <fp_display+0x7d0>
    44c0:	f813 2901 	ldrb.w	r2, [r3], #-1
    44c4:	70da      	strb	r2, [r3, #3]
    44c6:	e7f8      	b.n	44ba <fp_display+0x7c2>
    44c8:	2330      	movs	r3, #48	; 0x30
    44ca:	7023      	strb	r3, [r4, #0]
    44cc:	232e      	movs	r3, #46	; 0x2e
    44ce:	7063      	strb	r3, [r4, #1]
    44d0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    44d2:	233c      	movs	r3, #60	; 0x3c
    44d4:	70a3      	strb	r3, [r4, #2]
    44d6:	f108 33ff 	add.w	r3, r8, #4294967295
    44da:	3602      	adds	r6, #2
    44dc:	6013      	str	r3, [r2, #0]
    44de:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    44e0:	681b      	ldr	r3, [r3, #0]
    44e2:	2b00      	cmp	r3, #0
    44e4:	dc38      	bgt.n	4558 <fp_display+0x860>
    44e6:	e06c      	b.n	45c2 <fp_display+0x8ca>
    44e8:	eb05 0803 	add.w	r8, r5, r3
    44ec:	f108 0602 	add.w	r6, r8, #2
    44f0:	2e12      	cmp	r6, #18
    44f2:	dd50      	ble.n	4596 <fp_display+0x89e>
    44f4:	b9d7      	cbnz	r7, 452c <fp_display+0x834>
    44f6:	4620      	mov	r0, r4
    44f8:	2113      	movs	r1, #19
    44fa:	f7ff fb8f 	bl	3c1c <fp_round>
    44fe:	b1a8      	cbz	r0, 452c <fp_display+0x834>
    4500:	3501      	adds	r5, #1
    4502:	2614      	movs	r6, #20
    4504:	e013      	b.n	452e <fp_display+0x836>
    4506:	bf00      	nop
    4508:	00007688 	.word	0x00007688
    450c:	fffffc01 	.word	0xfffffc01
    4510:	00007694 	.word	0x00007694
    4514:	0000768c 	.word	0x0000768c
    4518:	000076ab 	.word	0x000076ab
    451c:	0000769c 	.word	0x0000769c
    4520:	000076ba 	.word	0x000076ba
    4524:	00007507 	.word	0x00007507
    4528:	fffffc18 	.word	0xfffffc18
    452c:	2613      	movs	r6, #19
    452e:	1e72      	subs	r2, r6, #1
    4530:	4295      	cmp	r5, r2
    4532:	4623      	mov	r3, r4
    4534:	da14      	bge.n	4560 <fp_display+0x868>
    4536:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    453a:	f803 2c01 	strb.w	r2, [r3, #-1]
    453e:	1b1a      	subs	r2, r3, r4
    4540:	42aa      	cmp	r2, r5
    4542:	ddf8      	ble.n	4536 <fp_display+0x83e>
    4544:	1963      	adds	r3, r4, r5
    4546:	222e      	movs	r2, #46	; 0x2e
    4548:	705a      	strb	r2, [r3, #1]
    454a:	f8db 3000 	ldr.w	r3, [fp]
    454e:	441d      	add	r5, r3
    4550:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    4552:	3d11      	subs	r5, #17
    4554:	601d      	str	r5, [r3, #0]
    4556:	b3a5      	cbz	r5, 45c2 <fp_display+0x8ca>
    4558:	233e      	movs	r3, #62	; 0x3e
    455a:	55a3      	strb	r3, [r4, r6]
    455c:	3601      	adds	r6, #1
    455e:	e030      	b.n	45c2 <fp_display+0x8ca>
    4560:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    4564:	f803 1c01 	strb.w	r1, [r3, #-1]
    4568:	1b19      	subs	r1, r3, r4
    456a:	4291      	cmp	r1, r2
    456c:	dbf8      	blt.n	4560 <fp_display+0x868>
    456e:	19a3      	adds	r3, r4, r6
    4570:	223c      	movs	r2, #60	; 0x3c
    4572:	f803 2c01 	strb.w	r2, [r3, #-1]
    4576:	1bad      	subs	r5, r5, r6
    4578:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    457a:	222e      	movs	r2, #46	; 0x2e
    457c:	3502      	adds	r5, #2
    457e:	601d      	str	r5, [r3, #0]
    4580:	55a2      	strb	r2, [r4, r6]
    4582:	f8db 2000 	ldr.w	r2, [fp]
    4586:	1c73      	adds	r3, r6, #1
    4588:	b1d2      	cbz	r2, 45c0 <fp_display+0x8c8>
    458a:	992b      	ldr	r1, [sp, #172]	; 0xac
    458c:	3602      	adds	r6, #2
    458e:	600a      	str	r2, [r1, #0]
    4590:	223e      	movs	r2, #62	; 0x3e
    4592:	54e2      	strb	r2, [r4, r3]
    4594:	e015      	b.n	45c2 <fp_display+0x8ca>
    4596:	b93f      	cbnz	r7, 45a8 <fp_display+0x8b0>
    4598:	4620      	mov	r0, r4
    459a:	4631      	mov	r1, r6
    459c:	f7ff fb3e 	bl	3c1c <fp_round>
    45a0:	b110      	cbz	r0, 45a8 <fp_display+0x8b0>
    45a2:	3501      	adds	r5, #1
    45a4:	f108 0603 	add.w	r6, r8, #3
    45a8:	4623      	mov	r3, r4
    45aa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    45ae:	f803 2c01 	strb.w	r2, [r3, #-1]
    45b2:	1b1a      	subs	r2, r3, r4
    45b4:	42aa      	cmp	r2, r5
    45b6:	ddf8      	ble.n	45aa <fp_display+0x8b2>
    45b8:	4425      	add	r5, r4
    45ba:	232e      	movs	r3, #46	; 0x2e
    45bc:	706b      	strb	r3, [r5, #1]
    45be:	e000      	b.n	45c2 <fp_display+0x8ca>
    45c0:	461e      	mov	r6, r3
    45c2:	b16f      	cbz	r7, 45e0 <fp_display+0x8e8>
    45c4:	9b06      	ldr	r3, [sp, #24]
    45c6:	0718      	lsls	r0, r3, #28
    45c8:	d412      	bmi.n	45f0 <fp_display+0x8f8>
    45ca:	19a0      	adds	r0, r4, r6
    45cc:	1b06      	subs	r6, r0, r4
    45ce:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
    45d2:	2b30      	cmp	r3, #48	; 0x30
    45d4:	d0fa      	beq.n	45cc <fp_display+0x8d4>
    45d6:	2b3e      	cmp	r3, #62	; 0x3e
    45d8:	d0f8      	beq.n	45cc <fp_display+0x8d4>
    45da:	2b2e      	cmp	r3, #46	; 0x2e
    45dc:	d108      	bne.n	45f0 <fp_display+0x8f8>
    45de:	e005      	b.n	45ec <fp_display+0x8f4>
    45e0:	f8db 3000 	ldr.w	r3, [fp]
    45e4:	b923      	cbnz	r3, 45f0 <fp_display+0x8f8>
    45e6:	9b06      	ldr	r3, [sp, #24]
    45e8:	0719      	lsls	r1, r3, #28
    45ea:	d401      	bmi.n	45f0 <fp_display+0x8f8>
    45ec:	1e70      	subs	r0, r6, #1
    45ee:	e000      	b.n	45f2 <fp_display+0x8fa>
    45f0:	4630      	mov	r0, r6
    45f2:	b01f      	add	sp, #124	; 0x7c
    45f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000045f8 <_initio>:
    45f8:	b510      	push	{r4, lr}
    45fa:	2100      	movs	r1, #0
    45fc:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4600:	4822      	ldr	r0, [pc, #136]	; (468c <_initio+0x94>)
    4602:	f7ff fa7b 	bl	3afc <memset>
    4606:	20c0      	movs	r0, #192	; 0xc0
    4608:	f7ff faf8 	bl	3bfc <_Csys_alloc>
    460c:	4c20      	ldr	r4, [pc, #128]	; (4690 <_initio+0x98>)
    460e:	2100      	movs	r1, #0
    4610:	22c0      	movs	r2, #192	; 0xc0
    4612:	6020      	str	r0, [r4, #0]
    4614:	f7ff fa72 	bl	3afc <memset>
    4618:	6820      	ldr	r0, [r4, #0]
    461a:	2300      	movs	r3, #0
    461c:	4c1b      	ldr	r4, [pc, #108]	; (468c <_initio+0x94>)
    461e:	2228      	movs	r2, #40	; 0x28
    4620:	2118      	movs	r1, #24
    4622:	fb02 4203 	mla	r2, r2, r3, r4
    4626:	fb01 0103 	mla	r1, r1, r3, r0
    462a:	3301      	adds	r3, #1
    462c:	2b08      	cmp	r3, #8
    462e:	6251      	str	r1, [r2, #36]	; 0x24
    4630:	d1f4      	bne.n	461c <_initio+0x24>
    4632:	4622      	mov	r2, r4
    4634:	4917      	ldr	r1, [pc, #92]	; (4694 <_initio+0x9c>)
    4636:	2000      	movs	r0, #0
    4638:	f001 f8d1 	bl	57de <_fdopen>
    463c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4640:	4620      	mov	r0, r4
    4642:	2100      	movs	r1, #0
    4644:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4648:	f000 ff38 	bl	54bc <setvbuf>
    464c:	f104 0228 	add.w	r2, r4, #40	; 0x28
    4650:	4911      	ldr	r1, [pc, #68]	; (4698 <_initio+0xa0>)
    4652:	2001      	movs	r0, #1
    4654:	f001 f8c3 	bl	57de <_fdopen>
    4658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    465c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4660:	2100      	movs	r1, #0
    4662:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4666:	f000 ff29 	bl	54bc <setvbuf>
    466a:	f104 0250 	add.w	r2, r4, #80	; 0x50
    466e:	490a      	ldr	r1, [pc, #40]	; (4698 <_initio+0xa0>)
    4670:	2002      	movs	r0, #2
    4672:	f001 f8b4 	bl	57de <_fdopen>
    4676:	f104 0050 	add.w	r0, r4, #80	; 0x50
    467a:	2100      	movs	r1, #0
    467c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4688:	f000 bf18 	b.w	54bc <setvbuf>
    468c:	10001ed0 	.word	0x10001ed0
    4690:	10001ecc 	.word	0x10001ecc
    4694:	000076bc 	.word	0x000076bc
    4698:	000076be 	.word	0x000076be

0000469c <__vfprintf>:
    469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46a0:	4604      	mov	r4, r0
    46a2:	b0ad      	sub	sp, #180	; 0xb4
    46a4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    46a8:	f8dd 80dc 	ldr.w	r8, [sp, #220]	; 0xdc
    46ac:	2200      	movs	r2, #0
    46ae:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    46b0:	9205      	str	r2, [sp, #20]
    46b2:	7818      	ldrb	r0, [r3, #0]
    46b4:	1c5d      	adds	r5, r3, #1
    46b6:	2800      	cmp	r0, #0
    46b8:	f000 863d 	beq.w	5336 <__vfprintf+0xc9a>
    46bc:	2825      	cmp	r0, #37	; 0x25
    46be:	d102      	bne.n	46c6 <__vfprintf+0x2a>
    46c0:	462a      	mov	r2, r5
    46c2:	2700      	movs	r7, #0
    46c4:	e023      	b.n	470e <__vfprintf+0x72>
    46c6:	9b05      	ldr	r3, [sp, #20]
    46c8:	ea4f 7be3 	mov.w	fp, r3, asr #31
    46cc:	461a      	mov	r2, r3
    46ce:	1c5e      	adds	r6, r3, #1
    46d0:	465b      	mov	r3, fp
    46d2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    46d6:	4552      	cmp	r2, sl
    46d8:	eb73 030b 	sbcs.w	r3, r3, fp
    46dc:	f280 8627 	bge.w	532e <__vfprintf+0xc92>
    46e0:	68a3      	ldr	r3, [r4, #8]
    46e2:	3b01      	subs	r3, #1
    46e4:	2b00      	cmp	r3, #0
    46e6:	60a3      	str	r3, [r4, #8]
    46e8:	db05      	blt.n	46f6 <__vfprintf+0x5a>
    46ea:	6823      	ldr	r3, [r4, #0]
    46ec:	1c5a      	adds	r2, r3, #1
    46ee:	6022      	str	r2, [r4, #0]
    46f0:	7018      	strb	r0, [r3, #0]
    46f2:	f000 be1c 	b.w	532e <__vfprintf+0xc92>
    46f6:	4621      	mov	r1, r4
    46f8:	f000 ffd0 	bl	569c <__flsbuf>
    46fc:	f000 be17 	b.w	532e <__vfprintf+0xc92>
    4700:	d90b      	bls.n	471a <__vfprintf+0x7e>
    4702:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
    4706:	d111      	bne.n	472c <__vfprintf+0x90>
    4708:	f047 0701 	orr.w	r7, r7, #1
    470c:	462a      	mov	r2, r5
    470e:	f815 9b01 	ldrb.w	r9, [r5], #1
    4712:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
    4716:	d1f3      	bne.n	4700 <__vfprintf+0x64>
    4718:	e00e      	b.n	4738 <__vfprintf+0x9c>
    471a:	f1b9 0f20 	cmp.w	r9, #32
    471e:	d00e      	beq.n	473e <__vfprintf+0xa2>
    4720:	f1b9 0f23 	cmp.w	r9, #35	; 0x23
    4724:	d10e      	bne.n	4744 <__vfprintf+0xa8>
    4726:	f047 0708 	orr.w	r7, r7, #8
    472a:	e7ef      	b.n	470c <__vfprintf+0x70>
    472c:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    4730:	d108      	bne.n	4744 <__vfprintf+0xa8>
    4732:	f447 7700 	orr.w	r7, r7, #512	; 0x200
    4736:	e7e9      	b.n	470c <__vfprintf+0x70>
    4738:	f047 0702 	orr.w	r7, r7, #2
    473c:	e7e6      	b.n	470c <__vfprintf+0x70>
    473e:	f047 0704 	orr.w	r7, r7, #4
    4742:	e7e3      	b.n	470c <__vfprintf+0x70>
    4744:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    4748:	d001      	beq.n	474e <__vfprintf+0xb2>
    474a:	2300      	movs	r3, #0
    474c:	e00d      	b.n	476a <__vfprintf+0xce>
    474e:	f8d8 3000 	ldr.w	r3, [r8]
    4752:	f108 0104 	add.w	r1, r8, #4
    4756:	2b00      	cmp	r3, #0
    4758:	bfbc      	itt	lt
    475a:	425b      	neglt	r3, r3
    475c:	f087 0701 	eorlt.w	r7, r7, #1
    4760:	1c95      	adds	r5, r2, #2
    4762:	f892 9001 	ldrb.w	r9, [r2, #1]
    4766:	4688      	mov	r8, r1
    4768:	e00a      	b.n	4780 <__vfprintf+0xe4>
    476a:	f1a9 0230 	sub.w	r2, r9, #48	; 0x30
    476e:	b2d1      	uxtb	r1, r2
    4770:	2909      	cmp	r1, #9
    4772:	d805      	bhi.n	4780 <__vfprintf+0xe4>
    4774:	210a      	movs	r1, #10
    4776:	fb01 2303 	mla	r3, r1, r3, r2
    477a:	f815 9b01 	ldrb.w	r9, [r5], #1
    477e:	e7f4      	b.n	476a <__vfprintf+0xce>
    4780:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4784:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
    4788:	930f      	str	r3, [sp, #60]	; 0x3c
    478a:	d124      	bne.n	47d6 <__vfprintf+0x13a>
    478c:	f895 9000 	ldrb.w	r9, [r5]
    4790:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    4794:	d003      	beq.n	479e <__vfprintf+0x102>
    4796:	2300      	movs	r3, #0
    4798:	3501      	adds	r5, #1
    479a:	9306      	str	r3, [sp, #24]
    479c:	e008      	b.n	47b0 <__vfprintf+0x114>
    479e:	f8d8 3000 	ldr.w	r3, [r8]
    47a2:	f895 9001 	ldrb.w	r9, [r5, #1]
    47a6:	9306      	str	r3, [sp, #24]
    47a8:	f108 0804 	add.w	r8, r8, #4
    47ac:	3502      	adds	r5, #2
    47ae:	e00c      	b.n	47ca <__vfprintf+0x12e>
    47b0:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    47b4:	b2da      	uxtb	r2, r3
    47b6:	2a09      	cmp	r2, #9
    47b8:	d807      	bhi.n	47ca <__vfprintf+0x12e>
    47ba:	9906      	ldr	r1, [sp, #24]
    47bc:	220a      	movs	r2, #10
    47be:	fb02 3301 	mla	r3, r2, r1, r3
    47c2:	f815 9b01 	ldrb.w	r9, [r5], #1
    47c6:	9306      	str	r3, [sp, #24]
    47c8:	e7f2      	b.n	47b0 <__vfprintf+0x114>
    47ca:	9b06      	ldr	r3, [sp, #24]
    47cc:	2b00      	cmp	r3, #0
    47ce:	db02      	blt.n	47d6 <__vfprintf+0x13a>
    47d0:	f047 0710 	orr.w	r7, r7, #16
    47d4:	e001      	b.n	47da <__vfprintf+0x13e>
    47d6:	2300      	movs	r3, #0
    47d8:	9306      	str	r3, [sp, #24]
    47da:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    47de:	d10d      	bne.n	47fc <__vfprintf+0x160>
    47e0:	f895 9000 	ldrb.w	r9, [r5]
    47e4:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    47e8:	bf03      	ittte	eq
    47ea:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    47ee:	f047 0760 	orreq.w	r7, r7, #96	; 0x60
    47f2:	3502      	addeq	r5, #2
    47f4:	3501      	addne	r5, #1
    47f6:	bf18      	it	ne
    47f8:	f047 0720 	orrne.w	r7, r7, #32
    47fc:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
    4800:	d002      	beq.n	4808 <__vfprintf+0x16c>
    4802:	f1b9 0f71 	cmp.w	r9, #113	; 0x71
    4806:	d104      	bne.n	4812 <__vfprintf+0x176>
    4808:	f895 9000 	ldrb.w	r9, [r5]
    480c:	f047 0760 	orr.w	r7, r7, #96	; 0x60
    4810:	e01f      	b.n	4852 <__vfprintf+0x1b6>
    4812:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    4816:	d10e      	bne.n	4836 <__vfprintf+0x19a>
    4818:	f895 9000 	ldrb.w	r9, [r5]
    481c:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    4820:	bf03      	ittte	eq
    4822:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    4826:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
    482a:	3502      	addeq	r5, #2
    482c:	3501      	addne	r5, #1
    482e:	bf18      	it	ne
    4830:	f047 0780 	orrne.w	r7, r7, #128	; 0x80
    4834:	e00e      	b.n	4854 <__vfprintf+0x1b8>
    4836:	f1b9 0f6a 	cmp.w	r9, #106	; 0x6a
    483a:	d102      	bne.n	4842 <__vfprintf+0x1a6>
    483c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    4840:	e005      	b.n	484e <__vfprintf+0x1b2>
    4842:	f1b9 0f7a 	cmp.w	r9, #122	; 0x7a
    4846:	d002      	beq.n	484e <__vfprintf+0x1b2>
    4848:	f1b9 0f74 	cmp.w	r9, #116	; 0x74
    484c:	d102      	bne.n	4854 <__vfprintf+0x1b8>
    484e:	f895 9000 	ldrb.w	r9, [r5]
    4852:	3501      	adds	r5, #1
    4854:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    4858:	dc25      	bgt.n	48a6 <__vfprintf+0x20a>
    485a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    485e:	f280 826e 	bge.w	4d3e <__vfprintf+0x6a2>
    4862:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    4866:	f000 826a 	beq.w	4d3e <__vfprintf+0x6a2>
    486a:	dc0c      	bgt.n	4886 <__vfprintf+0x1ea>
    486c:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    4870:	f000 825f 	beq.w	4d32 <__vfprintf+0x696>
    4874:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    4878:	f000 8261 	beq.w	4d3e <__vfprintf+0x6a2>
    487c:	f1b9 0f00 	cmp.w	r9, #0
    4880:	f000 80b4 	beq.w	49ec <__vfprintf+0x350>
    4884:	e031      	b.n	48ea <__vfprintf+0x24e>
    4886:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    488a:	f000 8252 	beq.w	4d32 <__vfprintf+0x696>
    488e:	dc04      	bgt.n	489a <__vfprintf+0x1fe>
    4890:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    4894:	f000 8171 	beq.w	4b7a <__vfprintf+0x4de>
    4898:	e027      	b.n	48ea <__vfprintf+0x24e>
    489a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
    489e:	d01e      	beq.n	48de <__vfprintf+0x242>
    48a0:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    48a4:	e00c      	b.n	48c0 <__vfprintf+0x224>
    48a6:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    48aa:	f000 81b4 	beq.w	4c16 <__vfprintf+0x57a>
    48ae:	dc0a      	bgt.n	48c6 <__vfprintf+0x22a>
    48b0:	f1b9 0f6e 	cmp.w	r9, #110	; 0x6e
    48b4:	f000 809f 	beq.w	49f6 <__vfprintf+0x35a>
    48b8:	f300 81b6 	bgt.w	4c28 <__vfprintf+0x58c>
    48bc:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    48c0:	f000 81f4 	beq.w	4cac <__vfprintf+0x610>
    48c4:	e011      	b.n	48ea <__vfprintf+0x24e>
    48c6:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    48ca:	f000 81cd 	beq.w	4c68 <__vfprintf+0x5cc>
    48ce:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    48d2:	f000 8179 	beq.w	4bc8 <__vfprintf+0x52c>
    48d6:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
    48da:	d106      	bne.n	48ea <__vfprintf+0x24e>
    48dc:	e0ae      	b.n	4a3c <__vfprintf+0x3a0>
    48de:	f108 0304 	add.w	r3, r8, #4
    48e2:	930e      	str	r3, [sp, #56]	; 0x38
    48e4:	f8d8 9000 	ldr.w	r9, [r8]
    48e8:	e001      	b.n	48ee <__vfprintf+0x252>
    48ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    48ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    48f0:	f103 3aff 	add.w	sl, r3, #4294967295
    48f4:	f017 0301 	ands.w	r3, r7, #1
    48f8:	9306      	str	r3, [sp, #24]
    48fa:	d12e      	bne.n	495a <__vfprintf+0x2be>
    48fc:	f417 7f00 	tst.w	r7, #512	; 0x200
    4900:	bf14      	ite	ne
    4902:	f04f 0830 	movne.w	r8, #48	; 0x30
    4906:	f04f 0820 	moveq.w	r8, #32
    490a:	2600      	movs	r6, #0
    490c:	2700      	movs	r7, #0
    490e:	9b05      	ldr	r3, [sp, #20]
    4910:	199a      	adds	r2, r3, r6
    4912:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4914:	f1a3 0a02 	sub.w	sl, r3, #2
    4918:	ebba 0a06 	subs.w	sl, sl, r6
    491c:	d41c      	bmi.n	4958 <__vfprintf+0x2bc>
    491e:	9b05      	ldr	r3, [sp, #20]
    4920:	18f0      	adds	r0, r6, r3
    4922:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    4926:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    492a:	4290      	cmp	r0, r2
    492c:	eb71 0303 	sbcs.w	r3, r1, r3
    4930:	da0e      	bge.n	4950 <__vfprintf+0x2b4>
    4932:	68a2      	ldr	r2, [r4, #8]
    4934:	3a01      	subs	r2, #1
    4936:	2a00      	cmp	r2, #0
    4938:	60a2      	str	r2, [r4, #8]
    493a:	db05      	blt.n	4948 <__vfprintf+0x2ac>
    493c:	6822      	ldr	r2, [r4, #0]
    493e:	1c51      	adds	r1, r2, #1
    4940:	6021      	str	r1, [r4, #0]
    4942:	f882 8000 	strb.w	r8, [r2]
    4946:	e003      	b.n	4950 <__vfprintf+0x2b4>
    4948:	4640      	mov	r0, r8
    494a:	4621      	mov	r1, r4
    494c:	f000 fea6 	bl	569c <__flsbuf>
    4950:	3601      	adds	r6, #1
    4952:	f147 0700 	adc.w	r7, r7, #0
    4956:	e7da      	b.n	490e <__vfprintf+0x272>
    4958:	9205      	str	r2, [sp, #20]
    495a:	9b05      	ldr	r3, [sp, #20]
    495c:	17d9      	asrs	r1, r3, #31
    495e:	461a      	mov	r2, r3
    4960:	f103 0b01 	add.w	fp, r3, #1
    4964:	460b      	mov	r3, r1
    4966:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    496a:	4282      	cmp	r2, r0
    496c:	418b      	sbcs	r3, r1
    496e:	da0e      	bge.n	498e <__vfprintf+0x2f2>
    4970:	68a3      	ldr	r3, [r4, #8]
    4972:	3b01      	subs	r3, #1
    4974:	2b00      	cmp	r3, #0
    4976:	60a3      	str	r3, [r4, #8]
    4978:	db05      	blt.n	4986 <__vfprintf+0x2ea>
    497a:	6823      	ldr	r3, [r4, #0]
    497c:	1c5a      	adds	r2, r3, #1
    497e:	6022      	str	r2, [r4, #0]
    4980:	f883 9000 	strb.w	r9, [r3]
    4984:	e003      	b.n	498e <__vfprintf+0x2f2>
    4986:	4648      	mov	r0, r9
    4988:	4621      	mov	r1, r4
    498a:	f000 fe87 	bl	569c <__flsbuf>
    498e:	9b06      	ldr	r3, [sp, #24]
    4990:	b91b      	cbnz	r3, 499a <__vfprintf+0x2fe>
    4992:	f8cd b014 	str.w	fp, [sp, #20]
    4996:	f000 bcc7 	b.w	5328 <__vfprintf+0xc8c>
    499a:	2600      	movs	r6, #0
    499c:	2700      	movs	r7, #0
    499e:	43f3      	mvns	r3, r6
    49a0:	eb13 0f0a 	cmn.w	r3, sl
    49a4:	d41b      	bmi.n	49de <__vfprintf+0x342>
    49a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    49aa:	eb16 020b 	adds.w	r2, r6, fp
    49ae:	eb47 73eb 	adc.w	r3, r7, fp, asr #31
    49b2:	4282      	cmp	r2, r0
    49b4:	418b      	sbcs	r3, r1
    49b6:	da0e      	bge.n	49d6 <__vfprintf+0x33a>
    49b8:	68a3      	ldr	r3, [r4, #8]
    49ba:	3b01      	subs	r3, #1
    49bc:	2b00      	cmp	r3, #0
    49be:	60a3      	str	r3, [r4, #8]
    49c0:	db05      	blt.n	49ce <__vfprintf+0x332>
    49c2:	6823      	ldr	r3, [r4, #0]
    49c4:	1c5a      	adds	r2, r3, #1
    49c6:	6022      	str	r2, [r4, #0]
    49c8:	2220      	movs	r2, #32
    49ca:	701a      	strb	r2, [r3, #0]
    49cc:	e003      	b.n	49d6 <__vfprintf+0x33a>
    49ce:	2020      	movs	r0, #32
    49d0:	4621      	mov	r1, r4
    49d2:	f000 fe63 	bl	569c <__flsbuf>
    49d6:	3601      	adds	r6, #1
    49d8:	f147 0700 	adc.w	r7, r7, #0
    49dc:	e7df      	b.n	499e <__vfprintf+0x302>
    49de:	465b      	mov	r3, fp
    49e0:	f1ba 0f00 	cmp.w	sl, #0
    49e4:	bfa8      	it	ge
    49e6:	4453      	addge	r3, sl
    49e8:	f000 bc9d 	b.w	5326 <__vfprintf+0xc8a>
    49ec:	3d01      	subs	r5, #1
    49ee:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    49f2:	f000 bc99 	b.w	5328 <__vfprintf+0xc8c>
    49f6:	f108 0304 	add.w	r3, r8, #4
    49fa:	f017 0f40 	tst.w	r7, #64	; 0x40
    49fe:	930e      	str	r3, [sp, #56]	; 0x38
    4a00:	f8d8 3000 	ldr.w	r3, [r8]
    4a04:	d006      	beq.n	4a14 <__vfprintf+0x378>
    4a06:	9a05      	ldr	r2, [sp, #20]
    4a08:	4610      	mov	r0, r2
    4a0a:	17d1      	asrs	r1, r2, #31
    4a0c:	e9c3 0100 	strd	r0, r1, [r3]
    4a10:	f000 bc8a 	b.w	5328 <__vfprintf+0xc8c>
    4a14:	06be      	lsls	r6, r7, #26
    4a16:	d40d      	bmi.n	4a34 <__vfprintf+0x398>
    4a18:	05f8      	lsls	r0, r7, #23
    4a1a:	d504      	bpl.n	4a26 <__vfprintf+0x38a>
    4a1c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    4a20:	701a      	strb	r2, [r3, #0]
    4a22:	f000 bc81 	b.w	5328 <__vfprintf+0xc8c>
    4a26:	0639      	lsls	r1, r7, #24
    4a28:	d504      	bpl.n	4a34 <__vfprintf+0x398>
    4a2a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    4a2e:	801a      	strh	r2, [r3, #0]
    4a30:	f000 bc7a 	b.w	5328 <__vfprintf+0xc8c>
    4a34:	9a05      	ldr	r2, [sp, #20]
    4a36:	601a      	str	r2, [r3, #0]
    4a38:	f000 bc76 	b.w	5328 <__vfprintf+0xc8c>
    4a3c:	f108 0304 	add.w	r3, r8, #4
    4a40:	930e      	str	r3, [sp, #56]	; 0x38
    4a42:	f8d8 9000 	ldr.w	r9, [r8]
    4a46:	4bab      	ldr	r3, [pc, #684]	; (4cf4 <__vfprintf+0x658>)
    4a48:	f1b9 0f00 	cmp.w	r9, #0
    4a4c:	bf08      	it	eq
    4a4e:	4699      	moveq	r9, r3
    4a50:	4648      	mov	r0, r9
    4a52:	f000 fd81 	bl	5558 <strlen>
    4a56:	06fa      	lsls	r2, r7, #27
    4a58:	4682      	mov	sl, r0
    4a5a:	d503      	bpl.n	4a64 <__vfprintf+0x3c8>
    4a5c:	9b06      	ldr	r3, [sp, #24]
    4a5e:	4298      	cmp	r0, r3
    4a60:	bfa8      	it	ge
    4a62:	469a      	movge	sl, r3
    4a64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4a66:	ebca 0b03 	rsb	fp, sl, r3
    4a6a:	f017 0301 	ands.w	r3, r7, #1
    4a6e:	9306      	str	r3, [sp, #24]
    4a70:	d131      	bne.n	4ad6 <__vfprintf+0x43a>
    4a72:	f417 7f00 	tst.w	r7, #512	; 0x200
    4a76:	bf14      	ite	ne
    4a78:	f04f 0830 	movne.w	r8, #48	; 0x30
    4a7c:	f04f 0820 	moveq.w	r8, #32
    4a80:	2600      	movs	r6, #0
    4a82:	2700      	movs	r7, #0
    4a84:	f10b 32ff 	add.w	r2, fp, #4294967295
    4a88:	1b91      	subs	r1, r2, r6
    4a8a:	2900      	cmp	r1, #0
    4a8c:	db1c      	blt.n	4ac8 <__vfprintf+0x42c>
    4a8e:	9b05      	ldr	r3, [sp, #20]
    4a90:	18f0      	adds	r0, r6, r3
    4a92:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    4a96:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    4a9a:	4290      	cmp	r0, r2
    4a9c:	eb71 0303 	sbcs.w	r3, r1, r3
    4aa0:	da0e      	bge.n	4ac0 <__vfprintf+0x424>
    4aa2:	68a2      	ldr	r2, [r4, #8]
    4aa4:	3a01      	subs	r2, #1
    4aa6:	2a00      	cmp	r2, #0
    4aa8:	60a2      	str	r2, [r4, #8]
    4aaa:	db05      	blt.n	4ab8 <__vfprintf+0x41c>
    4aac:	6822      	ldr	r2, [r4, #0]
    4aae:	1c51      	adds	r1, r2, #1
    4ab0:	6021      	str	r1, [r4, #0]
    4ab2:	f882 8000 	strb.w	r8, [r2]
    4ab6:	e003      	b.n	4ac0 <__vfprintf+0x424>
    4ab8:	4640      	mov	r0, r8
    4aba:	4621      	mov	r1, r4
    4abc:	f000 fdee 	bl	569c <__flsbuf>
    4ac0:	3601      	adds	r6, #1
    4ac2:	f147 0700 	adc.w	r7, r7, #0
    4ac6:	e7dd      	b.n	4a84 <__vfprintf+0x3e8>
    4ac8:	9b05      	ldr	r3, [sp, #20]
    4aca:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    4ace:	445b      	add	r3, fp
    4ad0:	9305      	str	r3, [sp, #20]
    4ad2:	ebcb 0b02 	rsb	fp, fp, r2
    4ad6:	2600      	movs	r6, #0
    4ad8:	2700      	movs	r7, #0
    4ada:	45b2      	cmp	sl, r6
    4adc:	9b05      	ldr	r3, [sp, #20]
    4ade:	dd1c      	ble.n	4b1a <__vfprintf+0x47e>
    4ae0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4ae4:	18f2      	adds	r2, r6, r3
    4ae6:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    4aea:	4282      	cmp	r2, r0
    4aec:	418b      	sbcs	r3, r1
    4aee:	da10      	bge.n	4b12 <__vfprintf+0x476>
    4af0:	68a3      	ldr	r3, [r4, #8]
    4af2:	3b01      	subs	r3, #1
    4af4:	2b00      	cmp	r3, #0
    4af6:	60a3      	str	r3, [r4, #8]
    4af8:	eb09 0306 	add.w	r3, r9, r6
    4afc:	db05      	blt.n	4b0a <__vfprintf+0x46e>
    4afe:	6822      	ldr	r2, [r4, #0]
    4b00:	1c51      	adds	r1, r2, #1
    4b02:	6021      	str	r1, [r4, #0]
    4b04:	781b      	ldrb	r3, [r3, #0]
    4b06:	7013      	strb	r3, [r2, #0]
    4b08:	e003      	b.n	4b12 <__vfprintf+0x476>
    4b0a:	7818      	ldrb	r0, [r3, #0]
    4b0c:	4621      	mov	r1, r4
    4b0e:	f000 fdc5 	bl	569c <__flsbuf>
    4b12:	3601      	adds	r6, #1
    4b14:	f147 0700 	adc.w	r7, r7, #0
    4b18:	e7df      	b.n	4ada <__vfprintf+0x43e>
    4b1a:	f1ba 0f00 	cmp.w	sl, #0
    4b1e:	bfa8      	it	ge
    4b20:	4453      	addge	r3, sl
    4b22:	9305      	str	r3, [sp, #20]
    4b24:	9b06      	ldr	r3, [sp, #24]
    4b26:	2b00      	cmp	r3, #0
    4b28:	f000 83fe 	beq.w	5328 <__vfprintf+0xc8c>
    4b2c:	2600      	movs	r6, #0
    4b2e:	2700      	movs	r7, #0
    4b30:	43f3      	mvns	r3, r6
    4b32:	eb13 0f0b 	cmn.w	r3, fp
    4b36:	9b05      	ldr	r3, [sp, #20]
    4b38:	d41a      	bmi.n	4b70 <__vfprintf+0x4d4>
    4b3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4b3e:	18f2      	adds	r2, r6, r3
    4b40:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    4b44:	4282      	cmp	r2, r0
    4b46:	418b      	sbcs	r3, r1
    4b48:	da0e      	bge.n	4b68 <__vfprintf+0x4cc>
    4b4a:	68a3      	ldr	r3, [r4, #8]
    4b4c:	3b01      	subs	r3, #1
    4b4e:	2b00      	cmp	r3, #0
    4b50:	60a3      	str	r3, [r4, #8]
    4b52:	db05      	blt.n	4b60 <__vfprintf+0x4c4>
    4b54:	6823      	ldr	r3, [r4, #0]
    4b56:	1c5a      	adds	r2, r3, #1
    4b58:	6022      	str	r2, [r4, #0]
    4b5a:	2220      	movs	r2, #32
    4b5c:	701a      	strb	r2, [r3, #0]
    4b5e:	e003      	b.n	4b68 <__vfprintf+0x4cc>
    4b60:	2020      	movs	r0, #32
    4b62:	4621      	mov	r1, r4
    4b64:	f000 fd9a 	bl	569c <__flsbuf>
    4b68:	3601      	adds	r6, #1
    4b6a:	f147 0700 	adc.w	r7, r7, #0
    4b6e:	e7df      	b.n	4b30 <__vfprintf+0x494>
    4b70:	f1bb 0f00 	cmp.w	fp, #0
    4b74:	bfa8      	it	ge
    4b76:	445b      	addge	r3, fp
    4b78:	e3d5      	b.n	5326 <__vfprintf+0xc8a>
    4b7a:	067b      	lsls	r3, r7, #25
    4b7c:	d509      	bpl.n	4b92 <__vfprintf+0x4f6>
    4b7e:	f108 0807 	add.w	r8, r8, #7
    4b82:	f028 0807 	bic.w	r8, r8, #7
    4b86:	f108 0308 	add.w	r3, r8, #8
    4b8a:	930e      	str	r3, [sp, #56]	; 0x38
    4b8c:	e9d8 2300 	ldrd	r2, r3, [r8]
    4b90:	e005      	b.n	4b9e <__vfprintf+0x502>
    4b92:	f108 0304 	add.w	r3, r8, #4
    4b96:	f8d8 2000 	ldr.w	r2, [r8]
    4b9a:	930e      	str	r3, [sp, #56]	; 0x38
    4b9c:	2300      	movs	r3, #0
    4b9e:	063e      	lsls	r6, r7, #24
    4ba0:	d501      	bpl.n	4ba6 <__vfprintf+0x50a>
    4ba2:	b292      	uxth	r2, r2
    4ba4:	e003      	b.n	4bae <__vfprintf+0x512>
    4ba6:	05f8      	lsls	r0, r7, #23
    4ba8:	d502      	bpl.n	4bb0 <__vfprintf+0x514>
    4baa:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4bae:	2300      	movs	r3, #0
    4bb0:	4951      	ldr	r1, [pc, #324]	; (4cf8 <__vfprintf+0x65c>)
    4bb2:	f017 0f08 	tst.w	r7, #8
    4bb6:	4851      	ldr	r0, [pc, #324]	; (4cfc <__vfprintf+0x660>)
    4bb8:	bf08      	it	eq
    4bba:	4608      	moveq	r0, r1
    4bbc:	06f9      	lsls	r1, r7, #27
    4bbe:	f140 80d6 	bpl.w	4d6e <__vfprintf+0x6d2>
    4bc2:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4bc6:	e0d2      	b.n	4d6e <__vfprintf+0x6d2>
    4bc8:	067b      	lsls	r3, r7, #25
    4bca:	d509      	bpl.n	4be0 <__vfprintf+0x544>
    4bcc:	f108 0807 	add.w	r8, r8, #7
    4bd0:	f028 0807 	bic.w	r8, r8, #7
    4bd4:	f108 0308 	add.w	r3, r8, #8
    4bd8:	930e      	str	r3, [sp, #56]	; 0x38
    4bda:	e9d8 2300 	ldrd	r2, r3, [r8]
    4bde:	e005      	b.n	4bec <__vfprintf+0x550>
    4be0:	f108 0304 	add.w	r3, r8, #4
    4be4:	f8d8 2000 	ldr.w	r2, [r8]
    4be8:	930e      	str	r3, [sp, #56]	; 0x38
    4bea:	2300      	movs	r3, #0
    4bec:	063e      	lsls	r6, r7, #24
    4bee:	d501      	bpl.n	4bf4 <__vfprintf+0x558>
    4bf0:	b292      	uxth	r2, r2
    4bf2:	e003      	b.n	4bfc <__vfprintf+0x560>
    4bf4:	05f8      	lsls	r0, r7, #23
    4bf6:	d502      	bpl.n	4bfe <__vfprintf+0x562>
    4bf8:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4bfc:	2300      	movs	r3, #0
    4bfe:	493e      	ldr	r1, [pc, #248]	; (4cf8 <__vfprintf+0x65c>)
    4c00:	f017 0f08 	tst.w	r7, #8
    4c04:	483e      	ldr	r0, [pc, #248]	; (4d00 <__vfprintf+0x664>)
    4c06:	bf08      	it	eq
    4c08:	4608      	moveq	r0, r1
    4c0a:	06f9      	lsls	r1, r7, #27
    4c0c:	f140 80b1 	bpl.w	4d72 <__vfprintf+0x6d6>
    4c10:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4c14:	e0ad      	b.n	4d72 <__vfprintf+0x6d6>
    4c16:	f108 0304 	add.w	r3, r8, #4
    4c1a:	930e      	str	r3, [sp, #56]	; 0x38
    4c1c:	f8d8 2000 	ldr.w	r2, [r8]
    4c20:	2300      	movs	r3, #0
    4c22:	4938      	ldr	r1, [pc, #224]	; (4d04 <__vfprintf+0x668>)
    4c24:	4836      	ldr	r0, [pc, #216]	; (4d00 <__vfprintf+0x664>)
    4c26:	e0a7      	b.n	4d78 <__vfprintf+0x6dc>
    4c28:	067e      	lsls	r6, r7, #25
    4c2a:	d509      	bpl.n	4c40 <__vfprintf+0x5a4>
    4c2c:	f108 0807 	add.w	r8, r8, #7
    4c30:	f028 0807 	bic.w	r8, r8, #7
    4c34:	f108 0308 	add.w	r3, r8, #8
    4c38:	930e      	str	r3, [sp, #56]	; 0x38
    4c3a:	e9d8 2300 	ldrd	r2, r3, [r8]
    4c3e:	e005      	b.n	4c4c <__vfprintf+0x5b0>
    4c40:	f108 0304 	add.w	r3, r8, #4
    4c44:	f8d8 2000 	ldr.w	r2, [r8]
    4c48:	930e      	str	r3, [sp, #56]	; 0x38
    4c4a:	2300      	movs	r3, #0
    4c4c:	0638      	lsls	r0, r7, #24
    4c4e:	d501      	bpl.n	4c54 <__vfprintf+0x5b8>
    4c50:	b292      	uxth	r2, r2
    4c52:	e003      	b.n	4c5c <__vfprintf+0x5c0>
    4c54:	05f9      	lsls	r1, r7, #23
    4c56:	d502      	bpl.n	4c5e <__vfprintf+0x5c2>
    4c58:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4c5c:	2300      	movs	r3, #0
    4c5e:	f017 0f08 	tst.w	r7, #8
    4c62:	4925      	ldr	r1, [pc, #148]	; (4cf8 <__vfprintf+0x65c>)
    4c64:	4828      	ldr	r0, [pc, #160]	; (4d08 <__vfprintf+0x66c>)
    4c66:	e059      	b.n	4d1c <__vfprintf+0x680>
    4c68:	067e      	lsls	r6, r7, #25
    4c6a:	d509      	bpl.n	4c80 <__vfprintf+0x5e4>
    4c6c:	f108 0807 	add.w	r8, r8, #7
    4c70:	f028 0807 	bic.w	r8, r8, #7
    4c74:	f108 0308 	add.w	r3, r8, #8
    4c78:	930e      	str	r3, [sp, #56]	; 0x38
    4c7a:	e9d8 2300 	ldrd	r2, r3, [r8]
    4c7e:	e005      	b.n	4c8c <__vfprintf+0x5f0>
    4c80:	f108 0304 	add.w	r3, r8, #4
    4c84:	f8d8 2000 	ldr.w	r2, [r8]
    4c88:	930e      	str	r3, [sp, #56]	; 0x38
    4c8a:	2300      	movs	r3, #0
    4c8c:	0638      	lsls	r0, r7, #24
    4c8e:	d501      	bpl.n	4c94 <__vfprintf+0x5f8>
    4c90:	b292      	uxth	r2, r2
    4c92:	e003      	b.n	4c9c <__vfprintf+0x600>
    4c94:	05f9      	lsls	r1, r7, #23
    4c96:	d502      	bpl.n	4c9e <__vfprintf+0x602>
    4c98:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4c9c:	2300      	movs	r3, #0
    4c9e:	f017 0110 	ands.w	r1, r7, #16
    4ca2:	d068      	beq.n	4d76 <__vfprintf+0x6da>
    4ca4:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4ca8:	2100      	movs	r1, #0
    4caa:	e064      	b.n	4d76 <__vfprintf+0x6da>
    4cac:	067b      	lsls	r3, r7, #25
    4cae:	d509      	bpl.n	4cc4 <__vfprintf+0x628>
    4cb0:	f108 0807 	add.w	r8, r8, #7
    4cb4:	f028 0807 	bic.w	r8, r8, #7
    4cb8:	f108 0308 	add.w	r3, r8, #8
    4cbc:	930e      	str	r3, [sp, #56]	; 0x38
    4cbe:	e9d8 2300 	ldrd	r2, r3, [r8]
    4cc2:	e005      	b.n	4cd0 <__vfprintf+0x634>
    4cc4:	f8d8 2000 	ldr.w	r2, [r8]
    4cc8:	f108 0304 	add.w	r3, r8, #4
    4ccc:	930e      	str	r3, [sp, #56]	; 0x38
    4cce:	17d3      	asrs	r3, r2, #31
    4cd0:	063e      	lsls	r6, r7, #24
    4cd2:	d501      	bpl.n	4cd8 <__vfprintf+0x63c>
    4cd4:	b212      	sxth	r2, r2
    4cd6:	e002      	b.n	4cde <__vfprintf+0x642>
    4cd8:	05f8      	lsls	r0, r7, #23
    4cda:	d501      	bpl.n	4ce0 <__vfprintf+0x644>
    4cdc:	b252      	sxtb	r2, r2
    4cde:	17d3      	asrs	r3, r2, #31
    4ce0:	2a00      	cmp	r2, #0
    4ce2:	f173 0100 	sbcs.w	r1, r3, #0
    4ce6:	da13      	bge.n	4d10 <__vfprintf+0x674>
    4ce8:	4252      	negs	r2, r2
    4cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4cee:	4807      	ldr	r0, [pc, #28]	; (4d0c <__vfprintf+0x670>)
    4cf0:	e018      	b.n	4d24 <__vfprintf+0x688>
    4cf2:	bf00      	nop
    4cf4:	000076c0 	.word	0x000076c0
    4cf8:	00007507 	.word	0x00007507
    4cfc:	000076c7 	.word	0x000076c7
    4d00:	000076ca 	.word	0x000076ca
    4d04:	000076e0 	.word	0x000076e0
    4d08:	000076cd 	.word	0x000076cd
    4d0c:	000076ba 	.word	0x000076ba
    4d10:	07b9      	lsls	r1, r7, #30
    4d12:	d406      	bmi.n	4d22 <__vfprintf+0x686>
    4d14:	49b6      	ldr	r1, [pc, #728]	; (4ff0 <__vfprintf+0x954>)
    4d16:	48b7      	ldr	r0, [pc, #732]	; (4ff4 <__vfprintf+0x958>)
    4d18:	f017 0f04 	tst.w	r7, #4
    4d1c:	bf08      	it	eq
    4d1e:	4608      	moveq	r0, r1
    4d20:	e000      	b.n	4d24 <__vfprintf+0x688>
    4d22:	48b5      	ldr	r0, [pc, #724]	; (4ff8 <__vfprintf+0x95c>)
    4d24:	f017 0110 	ands.w	r1, r7, #16
    4d28:	d026      	beq.n	4d78 <__vfprintf+0x6dc>
    4d2a:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4d2e:	2100      	movs	r1, #0
    4d30:	e022      	b.n	4d78 <__vfprintf+0x6dc>
    4d32:	06fb      	lsls	r3, r7, #27
    4d34:	bf5e      	ittt	pl
    4d36:	230d      	movpl	r3, #13
    4d38:	f047 0710 	orrpl.w	r7, r7, #16
    4d3c:	9306      	strpl	r3, [sp, #24]
    4d3e:	9b06      	ldr	r3, [sp, #24]
    4d40:	f017 0f10 	tst.w	r7, #16
    4d44:	f108 0807 	add.w	r8, r8, #7
    4d48:	bf08      	it	eq
    4d4a:	2306      	moveq	r3, #6
    4d4c:	f028 0807 	bic.w	r8, r8, #7
    4d50:	9306      	str	r3, [sp, #24]
    4d52:	2100      	movs	r1, #0
    4d54:	f108 0308 	add.w	r3, r8, #8
    4d58:	930e      	str	r3, [sp, #56]	; 0x38
    4d5a:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
    4d5e:	e9d8 2300 	ldrd	r2, r3, [r8]
    4d62:	4608      	mov	r0, r1
    4d64:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
    4d68:	2200      	movs	r2, #0
    4d6a:	2300      	movs	r3, #0
    4d6c:	e004      	b.n	4d78 <__vfprintf+0x6dc>
    4d6e:	49a3      	ldr	r1, [pc, #652]	; (4ffc <__vfprintf+0x960>)
    4d70:	e002      	b.n	4d78 <__vfprintf+0x6dc>
    4d72:	49a3      	ldr	r1, [pc, #652]	; (5000 <__vfprintf+0x964>)
    4d74:	e000      	b.n	4d78 <__vfprintf+0x6dc>
    4d76:	489e      	ldr	r0, [pc, #632]	; (4ff0 <__vfprintf+0x954>)
    4d78:	9e05      	ldr	r6, [sp, #20]
    4d7a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    4d7e:	ebba 0a06 	subs.w	sl, sl, r6
    4d82:	eb6b 7be6 	sbc.w	fp, fp, r6, asr #31
    4d86:	e9cd ab08 	strd	sl, fp, [sp, #32]
    4d8a:	9e06      	ldr	r6, [sp, #24]
    4d8c:	901f      	str	r0, [sp, #124]	; 0x7c
    4d8e:	f04f 30ff 	mov.w	r0, #4294967295
    4d92:	9020      	str	r0, [sp, #128]	; 0x80
    4d94:	9021      	str	r0, [sp, #132]	; 0x84
    4d96:	961e      	str	r6, [sp, #120]	; 0x78
    4d98:	2000      	movs	r0, #0
    4d9a:	f04f 0e55 	mov.w	lr, #85	; 0x55
    4d9e:	ae24      	add	r6, sp, #144	; 0x90
    4da0:	f800 e006 	strb.w	lr, [r0, r6]
    4da4:	3001      	adds	r0, #1
    4da6:	2820      	cmp	r0, #32
    4da8:	d1f7      	bne.n	4d9a <__vfprintf+0x6fe>
    4daa:	f417 6f82 	tst.w	r7, #1040	; 0x410
    4dae:	bf04      	itt	eq
    4db0:	2001      	moveq	r0, #1
    4db2:	901e      	streq	r0, [sp, #120]	; 0x78
    4db4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    4db8:	dc1b      	bgt.n	4df2 <__vfprintf+0x756>
    4dba:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    4dbe:	f280 80d4 	bge.w	4f6a <__vfprintf+0x8ce>
    4dc2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    4dc6:	f000 80d0 	beq.w	4f6a <__vfprintf+0x8ce>
    4dca:	dc08      	bgt.n	4dde <__vfprintf+0x742>
    4dcc:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    4dd0:	f000 80cb 	beq.w	4f6a <__vfprintf+0x8ce>
    4dd4:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    4dd8:	f040 80d7 	bne.w	4f8a <__vfprintf+0x8ee>
    4ddc:	e0c5      	b.n	4f6a <__vfprintf+0x8ce>
    4dde:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    4de2:	f000 80c2 	beq.w	4f6a <__vfprintf+0x8ce>
    4de6:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    4dea:	d017      	beq.n	4e1c <__vfprintf+0x780>
    4dec:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    4df0:	e011      	b.n	4e16 <__vfprintf+0x77a>
    4df2:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    4df6:	d014      	beq.n	4e22 <__vfprintf+0x786>
    4df8:	dc08      	bgt.n	4e0c <__vfprintf+0x770>
    4dfa:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    4dfe:	d00d      	beq.n	4e1c <__vfprintf+0x780>
    4e00:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
    4e04:	f040 80c1 	bne.w	4f8a <__vfprintf+0x8ee>
    4e08:	2100      	movs	r1, #0
    4e0a:	e020      	b.n	4e4e <__vfprintf+0x7b2>
    4e0c:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    4e10:	d004      	beq.n	4e1c <__vfprintf+0x780>
    4e12:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    4e16:	f040 80b8 	bne.w	4f8a <__vfprintf+0x8ee>
    4e1a:	e002      	b.n	4e22 <__vfprintf+0x786>
    4e1c:	f04f 0e00 	mov.w	lr, #0
    4e20:	e027      	b.n	4e72 <__vfprintf+0x7d6>
    4e22:	2000      	movs	r0, #0
    4e24:	ea52 0e03 	orrs.w	lr, r2, r3
    4e28:	4606      	mov	r6, r0
    4e2a:	f000 80af 	beq.w	4f8c <__vfprintf+0x8f0>
    4e2e:	f002 060f 	and.w	r6, r2, #15
    4e32:	f811 e006 	ldrb.w	lr, [r1, r6]
    4e36:	ae24      	add	r6, sp, #144	; 0x90
    4e38:	f800 e006 	strb.w	lr, [r0, r6]
    4e3c:	0916      	lsrs	r6, r2, #4
    4e3e:	ea46 7603 	orr.w	r6, r6, r3, lsl #28
    4e42:	ea4f 1e13 	mov.w	lr, r3, lsr #4
    4e46:	4632      	mov	r2, r6
    4e48:	4673      	mov	r3, lr
    4e4a:	3001      	adds	r0, #1
    4e4c:	e7ea      	b.n	4e24 <__vfprintf+0x788>
    4e4e:	ea52 0003 	orrs.w	r0, r2, r3
    4e52:	460e      	mov	r6, r1
    4e54:	f000 809a 	beq.w	4f8c <__vfprintf+0x8f0>
    4e58:	f002 0007 	and.w	r0, r2, #7
    4e5c:	3030      	adds	r0, #48	; 0x30
    4e5e:	ae24      	add	r6, sp, #144	; 0x90
    4e60:	5588      	strb	r0, [r1, r6]
    4e62:	08d0      	lsrs	r0, r2, #3
    4e64:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
    4e68:	08de      	lsrs	r6, r3, #3
    4e6a:	4602      	mov	r2, r0
    4e6c:	4633      	mov	r3, r6
    4e6e:	3101      	adds	r1, #1
    4e70:	e7ed      	b.n	4e4e <__vfprintf+0x7b2>
    4e72:	ea52 0103 	orrs.w	r1, r2, r3
    4e76:	4676      	mov	r6, lr
    4e78:	f000 8088 	beq.w	4f8c <__vfprintf+0x8f0>
    4e7c:	0891      	lsrs	r1, r2, #2
    4e7e:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
    4e82:	9118      	str	r1, [sp, #96]	; 0x60
    4e84:	0899      	lsrs	r1, r3, #2
    4e86:	9119      	str	r1, [sp, #100]	; 0x64
    4e88:	0859      	lsrs	r1, r3, #1
    4e8a:	ea4f 0032 	mov.w	r0, r2, rrx
    4e8e:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    4e92:	eb18 0800 	adds.w	r8, r8, r0
    4e96:	4640      	mov	r0, r8
    4e98:	eb49 0901 	adc.w	r9, r9, r1
    4e9c:	4649      	mov	r1, r9
    4e9e:	0906      	lsrs	r6, r0, #4
    4ea0:	ea46 7609 	orr.w	r6, r6, r9, lsl #28
    4ea4:	9610      	str	r6, [sp, #64]	; 0x40
    4ea6:	090e      	lsrs	r6, r1, #4
    4ea8:	9611      	str	r6, [sp, #68]	; 0x44
    4eaa:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
    4eae:	eb18 0800 	adds.w	r8, r8, r0
    4eb2:	4640      	mov	r0, r8
    4eb4:	eb49 0901 	adc.w	r9, r9, r1
    4eb8:	4649      	mov	r1, r9
    4eba:	0a06      	lsrs	r6, r0, #8
    4ebc:	ea46 6609 	orr.w	r6, r6, r9, lsl #24
    4ec0:	9612      	str	r6, [sp, #72]	; 0x48
    4ec2:	0a0e      	lsrs	r6, r1, #8
    4ec4:	9613      	str	r6, [sp, #76]	; 0x4c
    4ec6:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    4eca:	eb18 0800 	adds.w	r8, r8, r0
    4ece:	4640      	mov	r0, r8
    4ed0:	eb49 0901 	adc.w	r9, r9, r1
    4ed4:	4649      	mov	r1, r9
    4ed6:	0c06      	lsrs	r6, r0, #16
    4ed8:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
    4edc:	9614      	str	r6, [sp, #80]	; 0x50
    4ede:	0c0e      	lsrs	r6, r1, #16
    4ee0:	9615      	str	r6, [sp, #84]	; 0x54
    4ee2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    4ee6:	eb18 0800 	adds.w	r8, r8, r0
    4eea:	eb49 0901 	adc.w	r9, r9, r1
    4eee:	4640      	mov	r0, r8
    4ef0:	4649      	mov	r1, r9
    4ef2:	2600      	movs	r6, #0
    4ef4:	961b      	str	r6, [sp, #108]	; 0x6c
    4ef6:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    4efa:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    4efe:	eb18 0800 	adds.w	r8, r8, r0
    4f02:	eb49 0901 	adc.w	r9, r9, r1
    4f06:	4640      	mov	r0, r8
    4f08:	4649      	mov	r1, r9
    4f0a:	08c6      	lsrs	r6, r0, #3
    4f0c:	08c9      	lsrs	r1, r1, #3
    4f0e:	1d90      	adds	r0, r2, #6
    4f10:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
    4f14:	910d      	str	r1, [sp, #52]	; 0x34
    4f16:	f143 0100 	adc.w	r1, r3, #0
    4f1a:	230a      	movs	r3, #10
    4f1c:	fba6 8903 	umull	r8, r9, r6, r3
    4f20:	960c      	str	r6, [sp, #48]	; 0x30
    4f22:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4f24:	ebb0 0008 	subs.w	r0, r0, r8
    4f28:	fb03 9906 	mla	r9, r3, r6, r9
    4f2c:	ea4f 1610 	mov.w	r6, r0, lsr #4
    4f30:	eb61 0109 	sbc.w	r1, r1, r9
    4f34:	ea46 7601 	orr.w	r6, r6, r1, lsl #28
    4f38:	0909      	lsrs	r1, r1, #4
    4f3a:	9616      	str	r6, [sp, #88]	; 0x58
    4f3c:	9117      	str	r1, [sp, #92]	; 0x5c
    4f3e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    4f42:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
    4f46:	eb10 0008 	adds.w	r0, r0, r8
    4f4a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4f4e:	f102 0230 	add.w	r2, r2, #48	; 0x30
    4f52:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    4f56:	eb41 0109 	adc.w	r1, r1, r9
    4f5a:	ab24      	add	r3, sp, #144	; 0x90
    4f5c:	f80e 2003 	strb.w	r2, [lr, r3]
    4f60:	f10e 0e01 	add.w	lr, lr, #1
    4f64:	4602      	mov	r2, r0
    4f66:	460b      	mov	r3, r1
    4f68:	e783      	b.n	4e72 <__vfprintf+0x7d6>
    4f6a:	ab1f      	add	r3, sp, #124	; 0x7c
    4f6c:	9300      	str	r3, [sp, #0]
    4f6e:	ab1e      	add	r3, sp, #120	; 0x78
    4f70:	9301      	str	r3, [sp, #4]
    4f72:	ab20      	add	r3, sp, #128	; 0x80
    4f74:	9302      	str	r3, [sp, #8]
    4f76:	ab21      	add	r3, sp, #132	; 0x84
    4f78:	9303      	str	r3, [sp, #12]
    4f7a:	9e38      	ldr	r6, [sp, #224]	; 0xe0
    4f7c:	4648      	mov	r0, r9
    4f7e:	a922      	add	r1, sp, #136	; 0x88
    4f80:	aa24      	add	r2, sp, #144	; 0x90
    4f82:	463b      	mov	r3, r7
    4f84:	47b0      	blx	r6
    4f86:	4606      	mov	r6, r0
    4f88:	e000      	b.n	4f8c <__vfprintf+0x8f0>
    4f8a:	2600      	movs	r6, #0
    4f8c:	f417 6380 	ands.w	r3, r7, #1024	; 0x400
    4f90:	931c      	str	r3, [sp, #112]	; 0x70
    4f92:	d00e      	beq.n	4fb2 <__vfprintf+0x916>
    4f94:	2300      	movs	r3, #0
    4f96:	931e      	str	r3, [sp, #120]	; 0x78
    4f98:	9b20      	ldr	r3, [sp, #128]	; 0x80
    4f9a:	2b00      	cmp	r3, #0
    4f9c:	bfc4      	itt	gt
    4f9e:	f103 33ff 	addgt.w	r3, r3, #4294967295
    4fa2:	931e      	strgt	r3, [sp, #120]	; 0x78
    4fa4:	9b21      	ldr	r3, [sp, #132]	; 0x84
    4fa6:	2b00      	cmp	r3, #0
    4fa8:	dd08      	ble.n	4fbc <__vfprintf+0x920>
    4faa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    4fac:	3b01      	subs	r3, #1
    4fae:	4413      	add	r3, r2
    4fb0:	e003      	b.n	4fba <__vfprintf+0x91e>
    4fb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    4fb4:	1b9b      	subs	r3, r3, r6
    4fb6:	bf48      	it	mi
    4fb8:	2300      	movmi	r3, #0
    4fba:	931e      	str	r3, [sp, #120]	; 0x78
    4fbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    4fbe:	981f      	ldr	r0, [sp, #124]	; 0x7c
    4fc0:	eb06 0803 	add.w	r8, r6, r3
    4fc4:	f000 fac8 	bl	5558 <strlen>
    4fc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4fca:	ebc8 0b03 	rsb	fp, r8, r3
    4fce:	f007 0301 	and.w	r3, r7, #1
    4fd2:	930f      	str	r3, [sp, #60]	; 0x3c
    4fd4:	f240 2301 	movw	r3, #513	; 0x201
    4fd8:	403b      	ands	r3, r7
    4fda:	ebc0 0b0b 	rsb	fp, r0, fp
    4fde:	b18b      	cbz	r3, 5004 <__vfprintf+0x968>
    4fe0:	f04f 0a00 	mov.w	sl, #0
    4fe4:	f04f 0800 	mov.w	r8, #0
    4fe8:	f04f 0900 	mov.w	r9, #0
    4fec:	e040      	b.n	5070 <__vfprintf+0x9d4>
    4fee:	bf00      	nop
    4ff0:	00007507 	.word	0x00007507
    4ff4:	0000768a 	.word	0x0000768a
    4ff8:	00007688 	.word	0x00007688
    4ffc:	000076cf 	.word	0x000076cf
    5000:	000076e0 	.word	0x000076e0
    5004:	f04f 0800 	mov.w	r8, #0
    5008:	f04f 0900 	mov.w	r9, #0
    500c:	f10b 33ff 	add.w	r3, fp, #4294967295
    5010:	ebc8 0203 	rsb	r2, r8, r3
    5014:	2a00      	cmp	r2, #0
    5016:	db19      	blt.n	504c <__vfprintf+0x9b0>
    5018:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    501c:	4590      	cmp	r8, r2
    501e:	eb79 0303 	sbcs.w	r3, r9, r3
    5022:	da0e      	bge.n	5042 <__vfprintf+0x9a6>
    5024:	68a3      	ldr	r3, [r4, #8]
    5026:	3b01      	subs	r3, #1
    5028:	2b00      	cmp	r3, #0
    502a:	60a3      	str	r3, [r4, #8]
    502c:	db05      	blt.n	503a <__vfprintf+0x99e>
    502e:	6823      	ldr	r3, [r4, #0]
    5030:	1c5a      	adds	r2, r3, #1
    5032:	6022      	str	r2, [r4, #0]
    5034:	2220      	movs	r2, #32
    5036:	701a      	strb	r2, [r3, #0]
    5038:	e003      	b.n	5042 <__vfprintf+0x9a6>
    503a:	2020      	movs	r0, #32
    503c:	4621      	mov	r1, r4
    503e:	f000 fb2d 	bl	569c <__flsbuf>
    5042:	f118 0801 	adds.w	r8, r8, #1
    5046:	f149 0900 	adc.w	r9, r9, #0
    504a:	e7df      	b.n	500c <__vfprintf+0x970>
    504c:	ea2b 7aeb 	bic.w	sl, fp, fp, asr #31
    5050:	ebca 0b03 	rsb	fp, sl, r3
    5054:	e7c6      	b.n	4fe4 <__vfprintf+0x948>
    5056:	eb18 020a 	adds.w	r2, r8, sl
    505a:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    505e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5062:	4282      	cmp	r2, r0
    5064:	418b      	sbcs	r3, r1
    5066:	db0e      	blt.n	5086 <__vfprintf+0x9ea>
    5068:	f118 0801 	adds.w	r8, r8, #1
    506c:	f149 0900 	adc.w	r9, r9, #0
    5070:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    5072:	eb0a 0308 	add.w	r3, sl, r8
    5076:	1c51      	adds	r1, r2, #1
    5078:	911f      	str	r1, [sp, #124]	; 0x7c
    507a:	f892 e000 	ldrb.w	lr, [r2]
    507e:	f1be 0f00 	cmp.w	lr, #0
    5082:	d1e8      	bne.n	5056 <__vfprintf+0x9ba>
    5084:	e00f      	b.n	50a6 <__vfprintf+0xa0a>
    5086:	68a3      	ldr	r3, [r4, #8]
    5088:	3b01      	subs	r3, #1
    508a:	2b00      	cmp	r3, #0
    508c:	60a3      	str	r3, [r4, #8]
    508e:	db05      	blt.n	509c <__vfprintf+0xa00>
    5090:	6823      	ldr	r3, [r4, #0]
    5092:	1c5a      	adds	r2, r3, #1
    5094:	6022      	str	r2, [r4, #0]
    5096:	f883 e000 	strb.w	lr, [r3]
    509a:	e7e5      	b.n	5068 <__vfprintf+0x9cc>
    509c:	4670      	mov	r0, lr
    509e:	4621      	mov	r1, r4
    50a0:	f000 fafc 	bl	569c <__flsbuf>
    50a4:	e7e0      	b.n	5068 <__vfprintf+0x9cc>
    50a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    50a8:	469a      	mov	sl, r3
    50aa:	2a00      	cmp	r2, #0
    50ac:	d135      	bne.n	511a <__vfprintf+0xa7e>
    50ae:	f417 7f00 	tst.w	r7, #512	; 0x200
    50b2:	bf14      	ite	ne
    50b4:	2730      	movne	r7, #48	; 0x30
    50b6:	2720      	moveq	r7, #32
    50b8:	2000      	movs	r0, #0
    50ba:	2100      	movs	r1, #0
    50bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    50c0:	9906      	ldr	r1, [sp, #24]
    50c2:	f10b 32ff 	add.w	r2, fp, #4294967295
    50c6:	1a51      	subs	r1, r2, r1
    50c8:	2900      	cmp	r1, #0
    50ca:	db20      	blt.n	510e <__vfprintf+0xa72>
    50cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    50d0:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    50d4:	18c0      	adds	r0, r0, r3
    50d6:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
    50da:	4540      	cmp	r0, r8
    50dc:	eb71 0209 	sbcs.w	r2, r1, r9
    50e0:	da0f      	bge.n	5102 <__vfprintf+0xa66>
    50e2:	68a2      	ldr	r2, [r4, #8]
    50e4:	3a01      	subs	r2, #1
    50e6:	2a00      	cmp	r2, #0
    50e8:	60a2      	str	r2, [r4, #8]
    50ea:	db04      	blt.n	50f6 <__vfprintf+0xa5a>
    50ec:	6822      	ldr	r2, [r4, #0]
    50ee:	1c51      	adds	r1, r2, #1
    50f0:	6021      	str	r1, [r4, #0]
    50f2:	7017      	strb	r7, [r2, #0]
    50f4:	e005      	b.n	5102 <__vfprintf+0xa66>
    50f6:	4638      	mov	r0, r7
    50f8:	4621      	mov	r1, r4
    50fa:	931d      	str	r3, [sp, #116]	; 0x74
    50fc:	f000 face 	bl	569c <__flsbuf>
    5100:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5102:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    5106:	3001      	adds	r0, #1
    5108:	f141 0100 	adc.w	r1, r1, #0
    510c:	e7d6      	b.n	50bc <__vfprintf+0xa20>
    510e:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    5112:	eb03 0a0b 	add.w	sl, r3, fp
    5116:	ebcb 0b02 	rsb	fp, fp, r2
    511a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    511c:	2b00      	cmp	r3, #0
    511e:	d07c      	beq.n	521a <__vfprintf+0xb7e>
    5120:	2700      	movs	r7, #0
    5122:	42b7      	cmp	r7, r6
    5124:	f280 80d5 	bge.w	52d2 <__vfprintf+0xc36>
    5128:	ab24      	add	r3, sp, #144	; 0x90
    512a:	f817 e003 	ldrb.w	lr, [r7, r3]
    512e:	f1be 0f3c 	cmp.w	lr, #60	; 0x3c
    5132:	d007      	beq.n	5144 <__vfprintf+0xaa8>
    5134:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
    5138:	d151      	bne.n	51de <__vfprintf+0xb42>
    513a:	f04f 0800 	mov.w	r8, #0
    513e:	f04f 0900 	mov.w	r9, #0
    5142:	e034      	b.n	51ae <__vfprintf+0xb12>
    5144:	f04f 0800 	mov.w	r8, #0
    5148:	f04f 0900 	mov.w	r9, #0
    514c:	9a20      	ldr	r2, [sp, #128]	; 0x80
    514e:	eb0a 0308 	add.w	r3, sl, r8
    5152:	3a01      	subs	r2, #1
    5154:	2a00      	cmp	r2, #0
    5156:	9220      	str	r2, [sp, #128]	; 0x80
    5158:	db5c      	blt.n	5214 <__vfprintf+0xb78>
    515a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    515e:	eb18 020a 	adds.w	r2, r8, sl
    5162:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    5166:	4282      	cmp	r2, r0
    5168:	418b      	sbcs	r3, r1
    516a:	da0e      	bge.n	518a <__vfprintf+0xaee>
    516c:	68a3      	ldr	r3, [r4, #8]
    516e:	3b01      	subs	r3, #1
    5170:	2b00      	cmp	r3, #0
    5172:	60a3      	str	r3, [r4, #8]
    5174:	db05      	blt.n	5182 <__vfprintf+0xae6>
    5176:	6823      	ldr	r3, [r4, #0]
    5178:	1c5a      	adds	r2, r3, #1
    517a:	6022      	str	r2, [r4, #0]
    517c:	2230      	movs	r2, #48	; 0x30
    517e:	701a      	strb	r2, [r3, #0]
    5180:	e003      	b.n	518a <__vfprintf+0xaee>
    5182:	2030      	movs	r0, #48	; 0x30
    5184:	4621      	mov	r1, r4
    5186:	f000 fa89 	bl	569c <__flsbuf>
    518a:	f118 0801 	adds.w	r8, r8, #1
    518e:	f149 0900 	adc.w	r9, r9, #0
    5192:	e7db      	b.n	514c <__vfprintf+0xab0>
    5194:	eb18 020a 	adds.w	r2, r8, sl
    5198:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    519c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    51a0:	4282      	cmp	r2, r0
    51a2:	418b      	sbcs	r3, r1
    51a4:	db0b      	blt.n	51be <__vfprintf+0xb22>
    51a6:	f118 0801 	adds.w	r8, r8, #1
    51aa:	f149 0900 	adc.w	r9, r9, #0
    51ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
    51b0:	eb0a 0308 	add.w	r3, sl, r8
    51b4:	3a01      	subs	r2, #1
    51b6:	2a00      	cmp	r2, #0
    51b8:	9221      	str	r2, [sp, #132]	; 0x84
    51ba:	daeb      	bge.n	5194 <__vfprintf+0xaf8>
    51bc:	e02a      	b.n	5214 <__vfprintf+0xb78>
    51be:	68a3      	ldr	r3, [r4, #8]
    51c0:	3b01      	subs	r3, #1
    51c2:	2b00      	cmp	r3, #0
    51c4:	60a3      	str	r3, [r4, #8]
    51c6:	db05      	blt.n	51d4 <__vfprintf+0xb38>
    51c8:	6823      	ldr	r3, [r4, #0]
    51ca:	1c5a      	adds	r2, r3, #1
    51cc:	6022      	str	r2, [r4, #0]
    51ce:	2230      	movs	r2, #48	; 0x30
    51d0:	701a      	strb	r2, [r3, #0]
    51d2:	e7e8      	b.n	51a6 <__vfprintf+0xb0a>
    51d4:	4621      	mov	r1, r4
    51d6:	2030      	movs	r0, #48	; 0x30
    51d8:	f000 fa60 	bl	569c <__flsbuf>
    51dc:	e7e3      	b.n	51a6 <__vfprintf+0xb0a>
    51de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    51e2:	ea4f 79ea 	mov.w	r9, sl, asr #31
    51e6:	4582      	cmp	sl, r0
    51e8:	eb79 0201 	sbcs.w	r2, r9, r1
    51ec:	f10a 0301 	add.w	r3, sl, #1
    51f0:	da10      	bge.n	5214 <__vfprintf+0xb78>
    51f2:	68a2      	ldr	r2, [r4, #8]
    51f4:	3a01      	subs	r2, #1
    51f6:	2a00      	cmp	r2, #0
    51f8:	60a2      	str	r2, [r4, #8]
    51fa:	db05      	blt.n	5208 <__vfprintf+0xb6c>
    51fc:	6822      	ldr	r2, [r4, #0]
    51fe:	1c51      	adds	r1, r2, #1
    5200:	6021      	str	r1, [r4, #0]
    5202:	f882 e000 	strb.w	lr, [r2]
    5206:	e005      	b.n	5214 <__vfprintf+0xb78>
    5208:	4670      	mov	r0, lr
    520a:	4621      	mov	r1, r4
    520c:	9306      	str	r3, [sp, #24]
    520e:	f000 fa45 	bl	569c <__flsbuf>
    5212:	9b06      	ldr	r3, [sp, #24]
    5214:	3701      	adds	r7, #1
    5216:	469a      	mov	sl, r3
    5218:	e783      	b.n	5122 <__vfprintf+0xa86>
    521a:	f04f 0800 	mov.w	r8, #0
    521e:	f04f 0900 	mov.w	r9, #0
    5222:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5224:	eb0a 0708 	add.w	r7, sl, r8
    5228:	3b01      	subs	r3, #1
    522a:	2b00      	cmp	r3, #0
    522c:	931e      	str	r3, [sp, #120]	; 0x78
    522e:	db1c      	blt.n	526a <__vfprintf+0xbce>
    5230:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5234:	eb18 020a 	adds.w	r2, r8, sl
    5238:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    523c:	4282      	cmp	r2, r0
    523e:	418b      	sbcs	r3, r1
    5240:	da0e      	bge.n	5260 <__vfprintf+0xbc4>
    5242:	68a3      	ldr	r3, [r4, #8]
    5244:	3b01      	subs	r3, #1
    5246:	2b00      	cmp	r3, #0
    5248:	60a3      	str	r3, [r4, #8]
    524a:	db05      	blt.n	5258 <__vfprintf+0xbbc>
    524c:	6823      	ldr	r3, [r4, #0]
    524e:	1c5a      	adds	r2, r3, #1
    5250:	6022      	str	r2, [r4, #0]
    5252:	2230      	movs	r2, #48	; 0x30
    5254:	701a      	strb	r2, [r3, #0]
    5256:	e003      	b.n	5260 <__vfprintf+0xbc4>
    5258:	2030      	movs	r0, #48	; 0x30
    525a:	4621      	mov	r1, r4
    525c:	f000 fa1e 	bl	569c <__flsbuf>
    5260:	f118 0801 	adds.w	r8, r8, #1
    5264:	f149 0900 	adc.w	r9, r9, #0
    5268:	e7db      	b.n	5222 <__vfprintf+0xb86>
    526a:	ab2c      	add	r3, sp, #176	; 0xb0
    526c:	eb03 0a06 	add.w	sl, r3, r6
    5270:	f1aa 0a21 	sub.w	sl, sl, #33	; 0x21
    5274:	f04f 0800 	mov.w	r8, #0
    5278:	f04f 0900 	mov.w	r9, #0
    527c:	ebc8 0306 	rsb	r3, r8, r6
    5280:	2b00      	cmp	r3, #0
    5282:	dd20      	ble.n	52c6 <__vfprintf+0xc2a>
    5284:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5288:	eb18 0207 	adds.w	r2, r8, r7
    528c:	eb49 73e7 	adc.w	r3, r9, r7, asr #31
    5290:	4282      	cmp	r2, r0
    5292:	418b      	sbcs	r3, r1
    5294:	da10      	bge.n	52b8 <__vfprintf+0xc1c>
    5296:	68a3      	ldr	r3, [r4, #8]
    5298:	3b01      	subs	r3, #1
    529a:	2b00      	cmp	r3, #0
    529c:	60a3      	str	r3, [r4, #8]
    529e:	db06      	blt.n	52ae <__vfprintf+0xc12>
    52a0:	6823      	ldr	r3, [r4, #0]
    52a2:	1c5a      	adds	r2, r3, #1
    52a4:	6022      	str	r2, [r4, #0]
    52a6:	f89a 2000 	ldrb.w	r2, [sl]
    52aa:	701a      	strb	r2, [r3, #0]
    52ac:	e004      	b.n	52b8 <__vfprintf+0xc1c>
    52ae:	f89a 0000 	ldrb.w	r0, [sl]
    52b2:	4621      	mov	r1, r4
    52b4:	f000 f9f2 	bl	569c <__flsbuf>
    52b8:	f118 0801 	adds.w	r8, r8, #1
    52bc:	f10a 3aff 	add.w	sl, sl, #4294967295
    52c0:	f149 0900 	adc.w	r9, r9, #0
    52c4:	e7da      	b.n	527c <__vfprintf+0xbe0>
    52c6:	2e00      	cmp	r6, #0
    52c8:	bfac      	ite	ge
    52ca:	eb07 0a06 	addge.w	sl, r7, r6
    52ce:	f107 0a00 	addlt.w	sl, r7, #0
    52d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    52d4:	b32b      	cbz	r3, 5322 <__vfprintf+0xc86>
    52d6:	2600      	movs	r6, #0
    52d8:	2700      	movs	r7, #0
    52da:	43f3      	mvns	r3, r6
    52dc:	eb13 0f0b 	cmn.w	r3, fp
    52e0:	d41b      	bmi.n	531a <__vfprintf+0xc7e>
    52e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    52e6:	eb16 020a 	adds.w	r2, r6, sl
    52ea:	eb47 73ea 	adc.w	r3, r7, sl, asr #31
    52ee:	4282      	cmp	r2, r0
    52f0:	418b      	sbcs	r3, r1
    52f2:	da0e      	bge.n	5312 <__vfprintf+0xc76>
    52f4:	68a3      	ldr	r3, [r4, #8]
    52f6:	3b01      	subs	r3, #1
    52f8:	2b00      	cmp	r3, #0
    52fa:	60a3      	str	r3, [r4, #8]
    52fc:	db05      	blt.n	530a <__vfprintf+0xc6e>
    52fe:	6823      	ldr	r3, [r4, #0]
    5300:	1c5a      	adds	r2, r3, #1
    5302:	6022      	str	r2, [r4, #0]
    5304:	2220      	movs	r2, #32
    5306:	701a      	strb	r2, [r3, #0]
    5308:	e003      	b.n	5312 <__vfprintf+0xc76>
    530a:	2020      	movs	r0, #32
    530c:	4621      	mov	r1, r4
    530e:	f000 f9c5 	bl	569c <__flsbuf>
    5312:	3601      	adds	r6, #1
    5314:	f147 0700 	adc.w	r7, r7, #0
    5318:	e7df      	b.n	52da <__vfprintf+0xc3e>
    531a:	f1bb 0f00 	cmp.w	fp, #0
    531e:	bfa8      	it	ge
    5320:	44da      	addge	sl, fp
    5322:	9b05      	ldr	r3, [sp, #20]
    5324:	4453      	add	r3, sl
    5326:	9305      	str	r3, [sp, #20]
    5328:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    532c:	9e05      	ldr	r6, [sp, #20]
    532e:	9605      	str	r6, [sp, #20]
    5330:	462b      	mov	r3, r5
    5332:	f7ff b9be 	b.w	46b2 <__vfprintf+0x16>
    5336:	9805      	ldr	r0, [sp, #20]
    5338:	b02d      	add	sp, #180	; 0xb4
    533a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    533e:	bf00      	nop

00005340 <ch_val>:
    5340:	4b0a      	ldr	r3, [pc, #40]	; (536c <ch_val+0x2c>)
    5342:	4403      	add	r3, r0
    5344:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
    5348:	069a      	lsls	r2, r3, #26
    534a:	d501      	bpl.n	5350 <ch_val+0x10>
    534c:	3830      	subs	r0, #48	; 0x30
    534e:	e008      	b.n	5362 <ch_val+0x22>
    5350:	071a      	lsls	r2, r3, #28
    5352:	d501      	bpl.n	5358 <ch_val+0x18>
    5354:	3857      	subs	r0, #87	; 0x57
    5356:	e004      	b.n	5362 <ch_val+0x22>
    5358:	06db      	lsls	r3, r3, #27
    535a:	bf4c      	ite	mi
    535c:	3837      	submi	r0, #55	; 0x37
    535e:	f04f 30ff 	movpl.w	r0, #4294967295
    5362:	4288      	cmp	r0, r1
    5364:	bfa8      	it	ge
    5366:	f04f 30ff 	movge.w	r0, #4294967295
    536a:	4770      	bx	lr
    536c:	00007508 	.word	0x00007508

00005370 <_strtoul>:
    5370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5374:	4680      	mov	r8, r0
    5376:	4689      	mov	r9, r1
    5378:	4616      	mov	r6, r2
    537a:	4603      	mov	r3, r0
    537c:	461d      	mov	r5, r3
    537e:	f815 0b01 	ldrb.w	r0, [r5], #1
    5382:	b1d0      	cbz	r0, 53ba <_strtoul+0x4a>
    5384:	4a27      	ldr	r2, [pc, #156]	; (5424 <_strtoul+0xb4>)
    5386:	4402      	add	r2, r0
    5388:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
    538c:	07d2      	lsls	r2, r2, #31
    538e:	d501      	bpl.n	5394 <_strtoul+0x24>
    5390:	462b      	mov	r3, r5
    5392:	e7f3      	b.n	537c <_strtoul+0xc>
    5394:	2830      	cmp	r0, #48	; 0x30
    5396:	d110      	bne.n	53ba <_strtoul+0x4a>
    5398:	7858      	ldrb	r0, [r3, #1]
    539a:	1c9d      	adds	r5, r3, #2
    539c:	f000 02df 	and.w	r2, r0, #223	; 0xdf
    53a0:	2a58      	cmp	r2, #88	; 0x58
    53a2:	d106      	bne.n	53b2 <_strtoul+0x42>
    53a4:	f036 0710 	bics.w	r7, r6, #16
    53a8:	d13a      	bne.n	5420 <_strtoul+0xb0>
    53aa:	1cdd      	adds	r5, r3, #3
    53ac:	7898      	ldrb	r0, [r3, #2]
    53ae:	2610      	movs	r6, #16
    53b0:	e008      	b.n	53c4 <_strtoul+0x54>
    53b2:	2701      	movs	r7, #1
    53b4:	b936      	cbnz	r6, 53c4 <_strtoul+0x54>
    53b6:	2608      	movs	r6, #8
    53b8:	e004      	b.n	53c4 <_strtoul+0x54>
    53ba:	b10e      	cbz	r6, 53c0 <_strtoul+0x50>
    53bc:	2700      	movs	r7, #0
    53be:	e001      	b.n	53c4 <_strtoul+0x54>
    53c0:	4637      	mov	r7, r6
    53c2:	260a      	movs	r6, #10
    53c4:	2400      	movs	r4, #0
    53c6:	46a2      	mov	sl, r4
    53c8:	46a3      	mov	fp, r4
    53ca:	4631      	mov	r1, r6
    53cc:	f7ff ffb8 	bl	5340 <ch_val>
    53d0:	2800      	cmp	r0, #0
    53d2:	db0e      	blt.n	53f2 <_strtoul+0x82>
    53d4:	fb06 0004 	mla	r0, r6, r4, r0
    53d8:	0c03      	lsrs	r3, r0, #16
    53da:	fb06 3a0a 	mla	sl, r6, sl, r3
    53de:	f5ba 3f80 	cmp.w	sl, #65536	; 0x10000
    53e2:	b284      	uxth	r4, r0
    53e4:	bf28      	it	cs
    53e6:	f04f 0b01 	movcs.w	fp, #1
    53ea:	f815 0b01 	ldrb.w	r0, [r5], #1
    53ee:	2701      	movs	r7, #1
    53f0:	e7eb      	b.n	53ca <_strtoul+0x5a>
    53f2:	f1b9 0f00 	cmp.w	r9, #0
    53f6:	d005      	beq.n	5404 <_strtoul+0x94>
    53f8:	b10f      	cbz	r7, 53fe <_strtoul+0x8e>
    53fa:	3d01      	subs	r5, #1
    53fc:	e000      	b.n	5400 <_strtoul+0x90>
    53fe:	4645      	mov	r5, r8
    5400:	f8c9 5000 	str.w	r5, [r9]
    5404:	f1bb 0f00 	cmp.w	fp, #0
    5408:	d006      	beq.n	5418 <_strtoul+0xa8>
    540a:	4b07      	ldr	r3, [pc, #28]	; (5428 <_strtoul+0xb8>)
    540c:	2222      	movs	r2, #34	; 0x22
    540e:	601a      	str	r2, [r3, #0]
    5410:	f04f 30ff 	mov.w	r0, #4294967295
    5414:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5418:	ea44 400a 	orr.w	r0, r4, sl, lsl #16
    541c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5420:	2701      	movs	r7, #1
    5422:	e7cf      	b.n	53c4 <_strtoul+0x54>
    5424:	00007508 	.word	0x00007508
    5428:	10000c90 	.word	0x10000c90

0000542c <strtol>:
    542c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    542e:	460e      	mov	r6, r1
    5430:	4607      	mov	r7, r0
    5432:	4601      	mov	r1, r0
    5434:	460d      	mov	r5, r1
    5436:	f815 3b01 	ldrb.w	r3, [r5], #1
    543a:	b17b      	cbz	r3, 545c <strtol+0x30>
    543c:	4817      	ldr	r0, [pc, #92]	; (549c <strtol+0x70>)
    543e:	4418      	add	r0, r3
    5440:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
    5444:	f014 0401 	ands.w	r4, r4, #1
    5448:	d001      	beq.n	544e <strtol+0x22>
    544a:	4629      	mov	r1, r5
    544c:	e7f2      	b.n	5434 <strtol+0x8>
    544e:	2b2b      	cmp	r3, #43	; 0x2b
    5450:	d006      	beq.n	5460 <strtol+0x34>
    5452:	2b2d      	cmp	r3, #45	; 0x2d
    5454:	d102      	bne.n	545c <strtol+0x30>
    5456:	f44f 7400 	mov.w	r4, #512	; 0x200
    545a:	e001      	b.n	5460 <strtol+0x34>
    545c:	460d      	mov	r5, r1
    545e:	2400      	movs	r4, #0
    5460:	4628      	mov	r0, r5
    5462:	a901      	add	r1, sp, #4
    5464:	f7ff ff84 	bl	5370 <_strtoul>
    5468:	b126      	cbz	r6, 5474 <strtol+0x48>
    546a:	9b01      	ldr	r3, [sp, #4]
    546c:	42ab      	cmp	r3, r5
    546e:	bf08      	it	eq
    5470:	463b      	moveq	r3, r7
    5472:	6033      	str	r3, [r6, #0]
    5474:	05a3      	lsls	r3, r4, #22
    5476:	d508      	bpl.n	548a <strtol+0x5e>
    5478:	4240      	negs	r0, r0
    547a:	2800      	cmp	r0, #0
    547c:	dd0c      	ble.n	5498 <strtol+0x6c>
    547e:	4b08      	ldr	r3, [pc, #32]	; (54a0 <strtol+0x74>)
    5480:	2222      	movs	r2, #34	; 0x22
    5482:	601a      	str	r2, [r3, #0]
    5484:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    5488:	e006      	b.n	5498 <strtol+0x6c>
    548a:	2800      	cmp	r0, #0
    548c:	bfbf      	itttt	lt
    548e:	4b04      	ldrlt	r3, [pc, #16]	; (54a0 <strtol+0x74>)
    5490:	2222      	movlt	r2, #34	; 0x22
    5492:	601a      	strlt	r2, [r3, #0]
    5494:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
    5498:	b003      	add	sp, #12
    549a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    549c:	00007508 	.word	0x00007508
    54a0:	10000c90 	.word	0x10000c90

000054a4 <atoi>:
    54a4:	b538      	push	{r3, r4, r5, lr}
    54a6:	4c04      	ldr	r4, [pc, #16]	; (54b8 <atoi+0x14>)
    54a8:	2100      	movs	r1, #0
    54aa:	6825      	ldr	r5, [r4, #0]
    54ac:	220a      	movs	r2, #10
    54ae:	f7ff ffbd 	bl	542c <strtol>
    54b2:	6025      	str	r5, [r4, #0]
    54b4:	bd38      	pop	{r3, r4, r5, pc}
    54b6:	bf00      	nop
    54b8:	10000c90 	.word	0x10000c90

000054bc <setvbuf>:
    54bc:	b570      	push	{r4, r5, r6, lr}
    54be:	68c4      	ldr	r4, [r0, #12]
    54c0:	07a5      	lsls	r5, r4, #30
    54c2:	d017      	beq.n	54f4 <setvbuf+0x38>
    54c4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    54c8:	d009      	beq.n	54de <setvbuf+0x22>
    54ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    54ce:	d003      	beq.n	54d8 <setvbuf+0x1c>
    54d0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    54d4:	d10e      	bne.n	54f4 <setvbuf+0x38>
    54d6:	e002      	b.n	54de <setvbuf+0x22>
    54d8:	6a41      	ldr	r1, [r0, #36]	; 0x24
    54da:	2301      	movs	r3, #1
    54dc:	e003      	b.n	54e6 <setvbuf+0x2a>
    54de:	4d06      	ldr	r5, [pc, #24]	; (54f8 <setvbuf+0x3c>)
    54e0:	1e5e      	subs	r6, r3, #1
    54e2:	42ae      	cmp	r6, r5
    54e4:	d806      	bhi.n	54f4 <setvbuf+0x38>
    54e6:	4314      	orrs	r4, r2
    54e8:	6101      	str	r1, [r0, #16]
    54ea:	6001      	str	r1, [r0, #0]
    54ec:	61c3      	str	r3, [r0, #28]
    54ee:	60c4      	str	r4, [r0, #12]
    54f0:	2000      	movs	r0, #0
    54f2:	bd70      	pop	{r4, r5, r6, pc}
    54f4:	2001      	movs	r0, #1
    54f6:	bd70      	pop	{r4, r5, r6, pc}
    54f8:	00fffffe 	.word	0x00fffffe

000054fc <strchr>:
    54fc:	b510      	push	{r4, lr}
    54fe:	4603      	mov	r3, r0
    5500:	f810 2b01 	ldrb.w	r2, [r0], #1
    5504:	b2cc      	uxtb	r4, r1
    5506:	42a2      	cmp	r2, r4
    5508:	d003      	beq.n	5512 <strchr+0x16>
    550a:	2a00      	cmp	r2, #0
    550c:	d1f7      	bne.n	54fe <strchr+0x2>
    550e:	4610      	mov	r0, r2
    5510:	bd10      	pop	{r4, pc}
    5512:	4618      	mov	r0, r3
    5514:	bd10      	pop	{r4, pc}

00005516 <strcpy>:
    5516:	ea40 0301 	orr.w	r3, r0, r1
    551a:	079b      	lsls	r3, r3, #30
    551c:	b510      	push	{r4, lr}
    551e:	d113      	bne.n	5548 <strcpy+0x32>
    5520:	4602      	mov	r2, r0
    5522:	3904      	subs	r1, #4
    5524:	f851 3f04 	ldr.w	r3, [r1, #4]!
    5528:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
    552c:	ea24 0403 	bic.w	r4, r4, r3
    5530:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    5534:	d102      	bne.n	553c <strcpy+0x26>
    5536:	f842 3b04 	str.w	r3, [r2], #4
    553a:	e7f3      	b.n	5524 <strcpy+0xe>
    553c:	b2d9      	uxtb	r1, r3
    553e:	f802 1b01 	strb.w	r1, [r2], #1
    5542:	b141      	cbz	r1, 5556 <strcpy+0x40>
    5544:	121b      	asrs	r3, r3, #8
    5546:	e7f9      	b.n	553c <strcpy+0x26>
    5548:	1e42      	subs	r2, r0, #1
    554a:	f811 3b01 	ldrb.w	r3, [r1], #1
    554e:	f802 3f01 	strb.w	r3, [r2, #1]!
    5552:	2b00      	cmp	r3, #0
    5554:	d1f9      	bne.n	554a <strcpy+0x34>
    5556:	bd10      	pop	{r4, pc}

00005558 <strlen>:
    5558:	b510      	push	{r4, lr}
    555a:	1c42      	adds	r2, r0, #1
    555c:	0783      	lsls	r3, r0, #30
    555e:	d005      	beq.n	556c <strlen+0x14>
    5560:	f810 3b01 	ldrb.w	r3, [r0], #1
    5564:	2b00      	cmp	r3, #0
    5566:	d1f9      	bne.n	555c <strlen+0x4>
    5568:	1a80      	subs	r0, r0, r2
    556a:	bd10      	pop	{r4, pc}
    556c:	4603      	mov	r3, r0
    556e:	f850 1b04 	ldr.w	r1, [r0], #4
    5572:	f1a1 3401 	sub.w	r4, r1, #16843009	; 0x1010101
    5576:	ea24 0401 	bic.w	r4, r4, r1
    557a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    557e:	d0f5      	beq.n	556c <strlen+0x14>
    5580:	f011 0fff 	tst.w	r1, #255	; 0xff
    5584:	d00a      	beq.n	559c <strlen+0x44>
    5586:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
    558a:	d005      	beq.n	5598 <strlen+0x40>
    558c:	f411 0f7f 	tst.w	r1, #16711680	; 0xff0000
    5590:	bf14      	ite	ne
    5592:	4603      	movne	r3, r0
    5594:	3303      	addeq	r3, #3
    5596:	e002      	b.n	559e <strlen+0x46>
    5598:	3302      	adds	r3, #2
    559a:	e000      	b.n	559e <strlen+0x46>
    559c:	3301      	adds	r3, #1
    559e:	1a98      	subs	r0, r3, r2
    55a0:	bd10      	pop	{r4, pc}

000055a2 <strncpy>:
    55a2:	ea40 0301 	orr.w	r3, r0, r1
    55a6:	b570      	push	{r4, r5, r6, lr}
    55a8:	079d      	lsls	r5, r3, #30
    55aa:	d111      	bne.n	55d0 <strncpy+0x2e>
    55ac:	460e      	mov	r6, r1
    55ae:	4603      	mov	r3, r0
    55b0:	2a03      	cmp	r2, #3
    55b2:	4631      	mov	r1, r6
    55b4:	d90d      	bls.n	55d2 <strncpy+0x30>
    55b6:	f856 5b04 	ldr.w	r5, [r6], #4
    55ba:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    55be:	ea24 0405 	bic.w	r4, r4, r5
    55c2:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    55c6:	d104      	bne.n	55d2 <strncpy+0x30>
    55c8:	f843 5b04 	str.w	r5, [r3], #4
    55cc:	3a04      	subs	r2, #4
    55ce:	e7ef      	b.n	55b0 <strncpy+0xe>
    55d0:	4603      	mov	r3, r0
    55d2:	3a01      	subs	r2, #1
    55d4:	1c54      	adds	r4, r2, #1
    55d6:	d00f      	beq.n	55f8 <strncpy+0x56>
    55d8:	f811 4b01 	ldrb.w	r4, [r1], #1
    55dc:	1e55      	subs	r5, r2, #1
    55de:	f803 4b01 	strb.w	r4, [r3], #1
    55e2:	b93c      	cbnz	r4, 55f4 <strncpy+0x52>
    55e4:	441a      	add	r2, r3
    55e6:	4293      	cmp	r3, r2
    55e8:	d003      	beq.n	55f2 <strncpy+0x50>
    55ea:	2100      	movs	r1, #0
    55ec:	f803 1b01 	strb.w	r1, [r3], #1
    55f0:	e7f9      	b.n	55e6 <strncpy+0x44>
    55f2:	bd70      	pop	{r4, r5, r6, pc}
    55f4:	462a      	mov	r2, r5
    55f6:	e7ed      	b.n	55d4 <strncpy+0x32>
    55f8:	bd70      	pop	{r4, r5, r6, pc}

000055fa <strstr>:
    55fa:	b510      	push	{r4, lr}
    55fc:	2300      	movs	r3, #0
    55fe:	5cca      	ldrb	r2, [r1, r3]
    5600:	b14a      	cbz	r2, 5616 <strstr+0x1c>
    5602:	5cc4      	ldrb	r4, [r0, r3]
    5604:	4294      	cmp	r4, r2
    5606:	d101      	bne.n	560c <strstr+0x12>
    5608:	3301      	adds	r3, #1
    560a:	e7f8      	b.n	55fe <strstr+0x4>
    560c:	f810 3b01 	ldrb.w	r3, [r0], #1
    5610:	2b00      	cmp	r3, #0
    5612:	d1f3      	bne.n	55fc <strstr+0x2>
    5614:	4618      	mov	r0, r3
    5616:	bd10      	pop	{r4, pc}

00005618 <_sbrk>:
    5618:	b538      	push	{r3, r4, r5, lr}
    561a:	4b0c      	ldr	r3, [pc, #48]	; (564c <_sbrk+0x34>)
    561c:	681a      	ldr	r2, [r3, #0]
    561e:	b90a      	cbnz	r2, 5624 <_sbrk+0xc>
    5620:	4a0b      	ldr	r2, [pc, #44]	; (5650 <_sbrk+0x38>)
    5622:	601a      	str	r2, [r3, #0]
    5624:	1cc4      	adds	r4, r0, #3
    5626:	681d      	ldr	r5, [r3, #0]
    5628:	f024 0403 	bic.w	r4, r4, #3
    562c:	442c      	add	r4, r5
    562e:	4620      	mov	r0, r4
    5630:	f000 fac8 	bl	5bc4 <__check_heap_overflow>
    5634:	b918      	cbnz	r0, 563e <_sbrk+0x26>
    5636:	4b05      	ldr	r3, [pc, #20]	; (564c <_sbrk+0x34>)
    5638:	4628      	mov	r0, r5
    563a:	601c      	str	r4, [r3, #0]
    563c:	bd38      	pop	{r3, r4, r5, pc}
    563e:	4b05      	ldr	r3, [pc, #20]	; (5654 <_sbrk+0x3c>)
    5640:	220c      	movs	r2, #12
    5642:	601a      	str	r2, [r3, #0]
    5644:	f04f 30ff 	mov.w	r0, #4294967295
    5648:	bd38      	pop	{r3, r4, r5, pc}
    564a:	bf00      	nop
    564c:	10002014 	.word	0x10002014
    5650:	10002018 	.word	0x10002018
    5654:	10000c90 	.word	0x10000c90

00005658 <_deferredlazyseek>:
    5658:	68c3      	ldr	r3, [r0, #12]
    565a:	b510      	push	{r4, lr}
    565c:	f023 0320 	bic.w	r3, r3, #32
    5660:	60c3      	str	r3, [r0, #12]
    5662:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5664:	6982      	ldr	r2, [r0, #24]
    5666:	685b      	ldr	r3, [r3, #4]
    5668:	4604      	mov	r4, r0
    566a:	429a      	cmp	r2, r3
    566c:	d00f      	beq.n	568e <_deferredlazyseek+0x36>
    566e:	f000 f8eb 	bl	5848 <_fflush>
    5672:	68e3      	ldr	r3, [r4, #12]
    5674:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5676:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    567a:	f023 0310 	bic.w	r3, r3, #16
    567e:	f043 0310 	orr.w	r3, r3, #16
    5682:	60e3      	str	r3, [r4, #12]
    5684:	6853      	ldr	r3, [r2, #4]
    5686:	61a3      	str	r3, [r4, #24]
    5688:	6923      	ldr	r3, [r4, #16]
    568a:	6093      	str	r3, [r2, #8]
    568c:	6023      	str	r3, [r4, #0]
    568e:	68e3      	ldr	r3, [r4, #12]
    5690:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    5694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    5698:	60e3      	str	r3, [r4, #12]
    569a:	bd10      	pop	{r4, pc}

0000569c <__flsbuf>:
    569c:	68cb      	ldr	r3, [r1, #12]
    569e:	b570      	push	{r4, r5, r6, lr}
    56a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
    56a4:	069b      	lsls	r3, r3, #26
    56a6:	4605      	mov	r5, r0
    56a8:	460c      	mov	r4, r1
    56aa:	60ca      	str	r2, [r1, #12]
    56ac:	d502      	bpl.n	56b4 <__flsbuf+0x18>
    56ae:	4608      	mov	r0, r1
    56b0:	f7ff ffd2 	bl	5658 <_deferredlazyseek>
    56b4:	68a1      	ldr	r1, [r4, #8]
    56b6:	68e3      	ldr	r3, [r4, #12]
    56b8:	1c4e      	adds	r6, r1, #1
    56ba:	da0d      	bge.n	56d8 <__flsbuf+0x3c>
    56bc:	0598      	lsls	r0, r3, #22
    56be:	d40b      	bmi.n	56d8 <__flsbuf+0x3c>
    56c0:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
    56c4:	60e3      	str	r3, [r4, #12]
    56c6:	f06f 0201 	mvn.w	r2, #1
    56ca:	6823      	ldr	r3, [r4, #0]
    56cc:	1a52      	subs	r2, r2, r1
    56ce:	60a2      	str	r2, [r4, #8]
    56d0:	1c5a      	adds	r2, r3, #1
    56d2:	6022      	str	r2, [r4, #0]
    56d4:	701d      	strb	r5, [r3, #0]
    56d6:	e056      	b.n	5786 <__flsbuf+0xea>
    56d8:	f241 028a 	movw	r2, #4234	; 0x108a
    56dc:	401a      	ands	r2, r3
    56de:	2a02      	cmp	r2, #2
    56e0:	461e      	mov	r6, r3
    56e2:	d005      	beq.n	56f0 <__flsbuf+0x54>
    56e4:	2200      	movs	r2, #0
    56e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    56ea:	60a2      	str	r2, [r4, #8]
    56ec:	60e3      	str	r3, [r4, #12]
    56ee:	e052      	b.n	5796 <__flsbuf+0xfa>
    56f0:	f24a 0110 	movw	r1, #40976	; 0xa010
    56f4:	4019      	ands	r1, r3
    56f6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    56fa:	d10a      	bne.n	5712 <__flsbuf+0x76>
    56fc:	2100      	movs	r1, #0
    56fe:	4620      	mov	r0, r4
    5700:	f000 f9a8 	bl	5a54 <fseek>
    5704:	68e3      	ldr	r3, [r4, #12]
    5706:	0699      	lsls	r1, r3, #26
    5708:	d502      	bpl.n	5710 <__flsbuf+0x74>
    570a:	4620      	mov	r0, r4
    570c:	f7ff ffa4 	bl	5658 <_deferredlazyseek>
    5710:	68e6      	ldr	r6, [r4, #12]
    5712:	f446 3390 	orr.w	r3, r6, #73728	; 0x12000
    5716:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    571a:	60e3      	str	r3, [r4, #12]
    571c:	d11c      	bne.n	5758 <__flsbuf+0xbc>
    571e:	6960      	ldr	r0, [r4, #20]
    5720:	f000 ff06 	bl	6530 <__sys_istty>
    5724:	b150      	cbz	r0, 573c <__flsbuf+0xa0>
    5726:	0572      	lsls	r2, r6, #21
    5728:	d508      	bpl.n	573c <__flsbuf+0xa0>
    572a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    572c:	6123      	str	r3, [r4, #16]
    572e:	6023      	str	r3, [r4, #0]
    5730:	2301      	movs	r3, #1
    5732:	61e3      	str	r3, [r4, #28]
    5734:	f446 3392 	orr.w	r3, r6, #74752	; 0x12400
    5738:	60e3      	str	r3, [r4, #12]
    573a:	e00d      	b.n	5758 <__flsbuf+0xbc>
    573c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    5740:	f7fe fa5c 	bl	3bfc <_Csys_alloc>
    5744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    5748:	68e2      	ldr	r2, [r4, #12]
    574a:	61e3      	str	r3, [r4, #28]
    574c:	f446 3394 	orr.w	r3, r6, #75776	; 0x12800
    5750:	431a      	orrs	r2, r3
    5752:	6120      	str	r0, [r4, #16]
    5754:	6020      	str	r0, [r4, #0]
    5756:	60e2      	str	r2, [r4, #12]
    5758:	f413 6f10 	tst.w	r3, #2304	; 0x900
    575c:	6821      	ldr	r1, [r4, #0]
    575e:	6926      	ldr	r6, [r4, #16]
    5760:	d01c      	beq.n	579c <__flsbuf+0x100>
    5762:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5764:	689b      	ldr	r3, [r3, #8]
    5766:	428b      	cmp	r3, r1
    5768:	bf2c      	ite	cs
    576a:	ebc6 0103 	rsbcs	r1, r6, r3
    576e:	ebc6 0101 	rsbcc	r1, r6, r1
    5772:	b951      	cbnz	r1, 578a <__flsbuf+0xee>
    5774:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5776:	1c72      	adds	r2, r6, #1
    5778:	609a      	str	r2, [r3, #8]
    577a:	6022      	str	r2, [r4, #0]
    577c:	69e2      	ldr	r2, [r4, #28]
    577e:	1e51      	subs	r1, r2, #1
    5780:	60a1      	str	r1, [r4, #8]
    5782:	60da      	str	r2, [r3, #12]
    5784:	7035      	strb	r5, [r6, #0]
    5786:	b2e8      	uxtb	r0, r5
    5788:	bd70      	pop	{r4, r5, r6, pc}
    578a:	4630      	mov	r0, r6
    578c:	4622      	mov	r2, r4
    578e:	f000 f8db 	bl	5948 <_Cwritebuf>
    5792:	2800      	cmp	r0, #0
    5794:	d0ee      	beq.n	5774 <__flsbuf+0xd8>
    5796:	f04f 30ff 	mov.w	r0, #4294967295
    579a:	bd70      	pop	{r4, r5, r6, pc}
    579c:	1c4a      	adds	r2, r1, #1
    579e:	b2ed      	uxtb	r5, r5
    57a0:	6022      	str	r2, [r4, #0]
    57a2:	700d      	strb	r5, [r1, #0]
    57a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57a6:	6821      	ldr	r1, [r4, #0]
    57a8:	6882      	ldr	r2, [r0, #8]
    57aa:	428a      	cmp	r2, r1
    57ac:	bf2c      	ite	cs
    57ae:	ebc6 0102 	rsbcs	r1, r6, r2
    57b2:	ebc6 0101 	rsbcc	r1, r6, r1
    57b6:	69e2      	ldr	r2, [r4, #28]
    57b8:	055b      	lsls	r3, r3, #21
    57ba:	60c2      	str	r2, [r0, #12]
    57bc:	d403      	bmi.n	57c6 <__flsbuf+0x12a>
    57be:	2d0a      	cmp	r5, #10
    57c0:	d001      	beq.n	57c6 <__flsbuf+0x12a>
    57c2:	4291      	cmp	r1, r2
    57c4:	db09      	blt.n	57da <__flsbuf+0x13e>
    57c6:	2300      	movs	r3, #0
    57c8:	6086      	str	r6, [r0, #8]
    57ca:	4622      	mov	r2, r4
    57cc:	6026      	str	r6, [r4, #0]
    57ce:	60a3      	str	r3, [r4, #8]
    57d0:	4630      	mov	r0, r6
    57d2:	f000 f8b9 	bl	5948 <_Cwritebuf>
    57d6:	2800      	cmp	r0, #0
    57d8:	d1dd      	bne.n	5796 <__flsbuf+0xfa>
    57da:	4628      	mov	r0, r5
    57dc:	bd70      	pop	{r4, r5, r6, pc}

000057de <_fdopen>:
    57de:	b570      	push	{r4, r5, r6, lr}
    57e0:	460d      	mov	r5, r1
    57e2:	4606      	mov	r6, r0
    57e4:	4610      	mov	r0, r2
    57e6:	4614      	mov	r4, r2
    57e8:	f000 f8e6 	bl	59b8 <fclose>
    57ec:	782b      	ldrb	r3, [r5, #0]
    57ee:	2b72      	cmp	r3, #114	; 0x72
    57f0:	d00a      	beq.n	5808 <_fdopen+0x2a>
    57f2:	2b77      	cmp	r3, #119	; 0x77
    57f4:	d005      	beq.n	5802 <_fdopen+0x24>
    57f6:	2b61      	cmp	r3, #97	; 0x61
    57f8:	d123      	bne.n	5842 <_fdopen+0x64>
    57fa:	2308      	movs	r3, #8
    57fc:	f248 0202 	movw	r2, #32770	; 0x8002
    5800:	e004      	b.n	580c <_fdopen+0x2e>
    5802:	2304      	movs	r3, #4
    5804:	2202      	movs	r2, #2
    5806:	e001      	b.n	580c <_fdopen+0x2e>
    5808:	2300      	movs	r3, #0
    580a:	2201      	movs	r2, #1
    580c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    5810:	292b      	cmp	r1, #43	; 0x2b
    5812:	d006      	beq.n	5822 <_fdopen+0x44>
    5814:	2962      	cmp	r1, #98	; 0x62
    5816:	d109      	bne.n	582c <_fdopen+0x4e>
    5818:	f042 0204 	orr.w	r2, r2, #4
    581c:	f043 0301 	orr.w	r3, r3, #1
    5820:	e7f4      	b.n	580c <_fdopen+0x2e>
    5822:	f042 0203 	orr.w	r2, r2, #3
    5826:	f043 0302 	orr.w	r3, r3, #2
    582a:	e7ef      	b.n	580c <_fdopen+0x2e>
    582c:	071b      	lsls	r3, r3, #28
    582e:	60e2      	str	r2, [r4, #12]
    5830:	6166      	str	r6, [r4, #20]
    5832:	4620      	mov	r0, r4
    5834:	d507      	bpl.n	5846 <_fdopen+0x68>
    5836:	2100      	movs	r1, #0
    5838:	2202      	movs	r2, #2
    583a:	f000 f90b 	bl	5a54 <fseek>
    583e:	4620      	mov	r0, r4
    5840:	bd70      	pop	{r4, r5, r6, pc}
    5842:	2000      	movs	r0, #0
    5844:	bd70      	pop	{r4, r5, r6, pc}
    5846:	bd70      	pop	{r4, r5, r6, pc}

00005848 <_fflush>:
    5848:	b538      	push	{r3, r4, r5, lr}
    584a:	4604      	mov	r4, r0
    584c:	6a42      	ldr	r2, [r0, #36]	; 0x24
    584e:	6905      	ldr	r5, [r0, #16]
    5850:	6803      	ldr	r3, [r0, #0]
    5852:	68c0      	ldr	r0, [r0, #12]
    5854:	6891      	ldr	r1, [r2, #8]
    5856:	f420 2200 	bic.w	r2, r0, #524288	; 0x80000
    585a:	60e2      	str	r2, [r4, #12]
    585c:	f000 0282 	and.w	r2, r0, #130	; 0x82
    5860:	2a02      	cmp	r2, #2
    5862:	d002      	beq.n	586a <_fflush+0x22>
    5864:	f04f 30ff 	mov.w	r0, #4294967295
    5868:	bd38      	pop	{r3, r4, r5, pc}
    586a:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
    586e:	d016      	beq.n	589e <_fflush+0x56>
    5870:	4299      	cmp	r1, r3
    5872:	bf38      	it	cc
    5874:	4619      	movcc	r1, r3
    5876:	42a9      	cmp	r1, r5
    5878:	d109      	bne.n	588e <_fflush+0x46>
    587a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    587c:	2000      	movs	r0, #0
    587e:	609d      	str	r5, [r3, #8]
    5880:	68e3      	ldr	r3, [r4, #12]
    5882:	6025      	str	r5, [r4, #0]
    5884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5888:	60a0      	str	r0, [r4, #8]
    588a:	60e3      	str	r3, [r4, #12]
    588c:	bd38      	pop	{r3, r4, r5, pc}
    588e:	4628      	mov	r0, r5
    5890:	1b49      	subs	r1, r1, r5
    5892:	4622      	mov	r2, r4
    5894:	f000 f858 	bl	5948 <_Cwritebuf>
    5898:	2800      	cmp	r0, #0
    589a:	d0ee      	beq.n	587a <_fflush+0x32>
    589c:	e7e2      	b.n	5864 <_fflush+0x1c>
    589e:	bd38      	pop	{r3, r4, r5, pc}

000058a0 <_frexpl>:
    58a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58a2:	4615      	mov	r5, r2
    58a4:	2300      	movs	r3, #0
    58a6:	2200      	movs	r2, #0
    58a8:	4606      	mov	r6, r0
    58aa:	460f      	mov	r7, r1
    58ac:	f000 fd80 	bl	63b0 <__aeabi_dcmpeq>
    58b0:	b120      	cbz	r0, 58bc <_frexpl+0x1c>
    58b2:	2300      	movs	r3, #0
    58b4:	602b      	str	r3, [r5, #0]
    58b6:	2000      	movs	r0, #0
    58b8:	2100      	movs	r1, #0
    58ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58bc:	f3c7 530a 	ubfx	r3, r7, #20, #11
    58c0:	4630      	mov	r0, r6
    58c2:	4639      	mov	r1, r7
    58c4:	f2a3 34fe 	subw	r4, r3, #1022	; 0x3fe
    58c8:	b98b      	cbnz	r3, 58ee <_frexpl+0x4e>
    58ca:	4632      	mov	r2, r6
    58cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
    58d0:	0fd7      	lsrs	r7, r2, #31
    58d2:	f403 2600 	and.w	r6, r3, #524288	; 0x80000
    58d6:	ea47 0343 	orr.w	r3, r7, r3, lsl #1
    58da:	f3c3 0313 	ubfx	r3, r3, #0, #20
    58de:	0052      	lsls	r2, r2, #1
    58e0:	b11e      	cbz	r6, 58ea <_frexpl+0x4a>
    58e2:	f363 0113 	bfi	r1, r3, #0, #20
    58e6:	4610      	mov	r0, r2
    58e8:	e001      	b.n	58ee <_frexpl+0x4e>
    58ea:	3c01      	subs	r4, #1
    58ec:	e7f0      	b.n	58d0 <_frexpl+0x30>
    58ee:	f240 33fe 	movw	r3, #1022	; 0x3fe
    58f2:	602c      	str	r4, [r5, #0]
    58f4:	f363 511e 	bfi	r1, r3, #20, #11
    58f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000058fc <_ldexpl>:
    58fc:	b570      	push	{r4, r5, r6, lr}
    58fe:	2300      	movs	r3, #0
    5900:	4616      	mov	r6, r2
    5902:	2200      	movs	r2, #0
    5904:	4604      	mov	r4, r0
    5906:	460d      	mov	r5, r1
    5908:	f000 fd52 	bl	63b0 <__aeabi_dcmpeq>
    590c:	b110      	cbz	r0, 5914 <_ldexpl+0x18>
    590e:	2000      	movs	r0, #0
    5910:	2100      	movs	r1, #0
    5912:	bd70      	pop	{r4, r5, r6, pc}
    5914:	f240 73fe 	movw	r3, #2046	; 0x7fe
    5918:	f3c5 520a 	ubfx	r2, r5, #20, #11
    591c:	4432      	add	r2, r6
    591e:	429a      	cmp	r2, r3
    5920:	4620      	mov	r0, r4
    5922:	4629      	mov	r1, r5
    5924:	dd06      	ble.n	5934 <_ldexpl+0x38>
    5926:	4b06      	ldr	r3, [pc, #24]	; (5940 <_ldexpl+0x44>)
    5928:	2222      	movs	r2, #34	; 0x22
    592a:	601a      	str	r2, [r3, #0]
    592c:	4b05      	ldr	r3, [pc, #20]	; (5944 <_ldexpl+0x48>)
    592e:	e9d3 0100 	ldrd	r0, r1, [r3]
    5932:	bd70      	pop	{r4, r5, r6, pc}
    5934:	2a00      	cmp	r2, #0
    5936:	ddea      	ble.n	590e <_ldexpl+0x12>
    5938:	f362 511e 	bfi	r1, r2, #20, #11
    593c:	bd70      	pop	{r4, r5, r6, pc}
    593e:	bf00      	nop
    5940:	10000c90 	.word	0x10000c90
    5944:	000076f8 	.word	0x000076f8

00005948 <_Cwritebuf>:
    5948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    594c:	68d5      	ldr	r5, [r2, #12]
    594e:	4680      	mov	r8, r0
    5950:	02eb      	lsls	r3, r5, #11
    5952:	460e      	mov	r6, r1
    5954:	4614      	mov	r4, r2
    5956:	6957      	ldr	r7, [r2, #20]
    5958:	d505      	bpl.n	5966 <_Cwritebuf+0x1e>
    595a:	4638      	mov	r0, r7
    595c:	f000 fde5 	bl	652a <__sys_flen>
    5960:	f045 0510 	orr.w	r5, r5, #16
    5964:	61a0      	str	r0, [r4, #24]
    5966:	4b13      	ldr	r3, [pc, #76]	; (59b4 <_Cwritebuf+0x6c>)
    5968:	402b      	ands	r3, r5
    596a:	b153      	cbz	r3, 5982 <_Cwritebuf+0x3a>
    596c:	4638      	mov	r0, r7
    596e:	69a1      	ldr	r1, [r4, #24]
    5970:	f000 fde4 	bl	653c <__sys_seek>
    5974:	2800      	cmp	r0, #0
    5976:	db14      	blt.n	59a2 <_Cwritebuf+0x5a>
    5978:	f425 3500 	bic.w	r5, r5, #131072	; 0x20000
    597c:	f025 0510 	bic.w	r5, r5, #16
    5980:	60e5      	str	r5, [r4, #12]
    5982:	4632      	mov	r2, r6
    5984:	4638      	mov	r0, r7
    5986:	4641      	mov	r1, r8
    5988:	f000 fdde 	bl	6548 <__sys_write>
    598c:	1b80      	subs	r0, r0, r6
    598e:	bf18      	it	ne
    5990:	f04f 30ff 	movne.w	r0, #4294967295
    5994:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
    5998:	1af6      	subs	r6, r6, r3
    599a:	69a3      	ldr	r3, [r4, #24]
    599c:	441e      	add	r6, r3
    599e:	61a6      	str	r6, [r4, #24]
    59a0:	b128      	cbz	r0, 59ae <_Cwritebuf+0x66>
    59a2:	68e3      	ldr	r3, [r4, #12]
    59a4:	f04f 30ff 	mov.w	r0, #4294967295
    59a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    59ac:	60e3      	str	r3, [r4, #12]
    59ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59b2:	bf00      	nop
    59b4:	00020010 	.word	0x00020010

000059b8 <fclose>:
    59b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59bc:	f100 050c 	add.w	r5, r0, #12
    59c0:	e895 01a0 	ldmia.w	r5, {r5, r7, r8}
    59c4:	07a9      	lsls	r1, r5, #30
    59c6:	b088      	sub	sp, #32
    59c8:	4604      	mov	r4, r0
    59ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
    59cc:	d025      	beq.n	5a1a <fclose+0x62>
    59ce:	072a      	lsls	r2, r5, #28
    59d0:	d416      	bmi.n	5a00 <fclose+0x48>
    59d2:	f000 f827 	bl	5a24 <fflush>
    59d6:	4640      	mov	r0, r8
    59d8:	f000 fda4 	bl	6524 <__sys_close>
    59dc:	052b      	lsls	r3, r5, #20
    59de:	d502      	bpl.n	59e6 <fclose+0x2e>
    59e0:	4638      	mov	r0, r7
    59e2:	f7fe f8f3 	bl	3bcc <free>
    59e6:	0dad      	lsrs	r5, r5, #22
    59e8:	05ad      	lsls	r5, r5, #22
    59ea:	f115 4fa5 	cmn.w	r5, #1384120320	; 0x52800000
    59ee:	d107      	bne.n	5a00 <fclose+0x48>
    59f0:	4668      	mov	r0, sp
    59f2:	6a21      	ldr	r1, [r4, #32]
    59f4:	2220      	movs	r2, #32
    59f6:	f000 fda4 	bl	6542 <__sys_tmpnam>
    59fa:	4668      	mov	r0, sp
    59fc:	f000 f8d8 	bl	5bb0 <remove>
    5a00:	2100      	movs	r1, #0
    5a02:	2218      	movs	r2, #24
    5a04:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5a06:	f7fe f879 	bl	3afc <memset>
    5a0a:	4620      	mov	r0, r4
    5a0c:	2100      	movs	r1, #0
    5a0e:	2228      	movs	r2, #40	; 0x28
    5a10:	f7fe f874 	bl	3afc <memset>
    5a14:	6266      	str	r6, [r4, #36]	; 0x24
    5a16:	2000      	movs	r0, #0
    5a18:	e001      	b.n	5a1e <fclose+0x66>
    5a1a:	f04f 30ff 	mov.w	r0, #4294967295
    5a1e:	b008      	add	sp, #32
    5a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005a24 <fflush>:
    5a24:	b538      	push	{r3, r4, r5, lr}
    5a26:	4604      	mov	r4, r0
    5a28:	b118      	cbz	r0, 5a32 <fflush+0xe>
    5a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5a2e:	f000 b8d5 	b.w	5bdc <_do_fflush>
    5a32:	4605      	mov	r5, r0
    5a34:	4806      	ldr	r0, [pc, #24]	; (5a50 <fflush+0x2c>)
    5a36:	4420      	add	r0, r4
    5a38:	f000 f8d0 	bl	5bdc <_do_fflush>
    5a3c:	3428      	adds	r4, #40	; 0x28
    5a3e:	2800      	cmp	r0, #0
    5a40:	bf18      	it	ne
    5a42:	f04f 35ff 	movne.w	r5, #4294967295
    5a46:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
    5a4a:	d1f3      	bne.n	5a34 <fflush+0x10>
    5a4c:	4628      	mov	r0, r5
    5a4e:	bd38      	pop	{r3, r4, r5, pc}
    5a50:	10001ed0 	.word	0x10001ed0

00005a54 <fseek>:
    5a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5a58:	68c6      	ldr	r6, [r0, #12]
    5a5a:	4b41      	ldr	r3, [pc, #260]	; (5b60 <fseek+0x10c>)
    5a5c:	4604      	mov	r4, r0
    5a5e:	4033      	ands	r3, r6
    5a60:	460d      	mov	r5, r1
    5a62:	4690      	mov	r8, r2
    5a64:	f8d0 9014 	ldr.w	r9, [r0, #20]
    5a68:	2b00      	cmp	r3, #0
    5a6a:	d075      	beq.n	5b58 <fseek+0x104>
    5a6c:	4648      	mov	r0, r9
    5a6e:	f000 fd5f 	bl	6530 <__sys_istty>
    5a72:	4607      	mov	r7, r0
    5a74:	2800      	cmp	r0, #0
    5a76:	d16f      	bne.n	5b58 <fseek+0x104>
    5a78:	f1b8 0f01 	cmp.w	r8, #1
    5a7c:	d006      	beq.n	5a8c <fseek+0x38>
    5a7e:	f1b8 0f02 	cmp.w	r8, #2
    5a82:	d008      	beq.n	5a96 <fseek+0x42>
    5a84:	f1b8 0f00 	cmp.w	r8, #0
    5a88:	d166      	bne.n	5b58 <fseek+0x104>
    5a8a:	e029      	b.n	5ae0 <fseek+0x8c>
    5a8c:	4620      	mov	r0, r4
    5a8e:	f000 f869 	bl	5b64 <ftell>
    5a92:	4405      	add	r5, r0
    5a94:	e024      	b.n	5ae0 <fseek+0x8c>
    5a96:	4648      	mov	r0, r9
    5a98:	f000 fd47 	bl	652a <__sys_flen>
    5a9c:	f1b0 0e00 	subs.w	lr, r0, #0
    5aa0:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    5aa4:	da04      	bge.n	5ab0 <fseek+0x5c>
    5aa6:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    5aaa:	60e1      	str	r1, [r4, #12]
    5aac:	2701      	movs	r7, #1
    5aae:	e054      	b.n	5b5a <fseek+0x106>
    5ab0:	6823      	ldr	r3, [r4, #0]
    5ab2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5ab4:	461a      	mov	r2, r3
    5ab6:	69a3      	ldr	r3, [r4, #24]
    5ab8:	4619      	mov	r1, r3
    5aba:	6883      	ldr	r3, [r0, #8]
    5abc:	4293      	cmp	r3, r2
    5abe:	bf2c      	ite	cs
    5ac0:	18c9      	addcs	r1, r1, r3
    5ac2:	1889      	addcc	r1, r1, r2
    5ac4:	6923      	ldr	r3, [r4, #16]
    5ac6:	f01c 0f20 	tst.w	ip, #32
    5aca:	eba1 0303 	sub.w	r3, r1, r3
    5ace:	d003      	beq.n	5ad8 <fseek+0x84>
    5ad0:	6842      	ldr	r2, [r0, #4]
    5ad2:	4293      	cmp	r3, r2
    5ad4:	bfb8      	it	lt
    5ad6:	4613      	movlt	r3, r2
    5ad8:	4573      	cmp	r3, lr
    5ada:	bfac      	ite	ge
    5adc:	18ed      	addge	r5, r5, r3
    5ade:	4475      	addlt	r5, lr
    5ae0:	2d00      	cmp	r5, #0
    5ae2:	db39      	blt.n	5b58 <fseek+0x104>
    5ae4:	f416 5f00 	tst.w	r6, #8192	; 0x2000
    5ae8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5aea:	d004      	beq.n	5af6 <fseek+0xa2>
    5aec:	6823      	ldr	r3, [r4, #0]
    5aee:	6891      	ldr	r1, [r2, #8]
    5af0:	4299      	cmp	r1, r3
    5af2:	bf38      	it	cc
    5af4:	6093      	strcc	r3, [r2, #8]
    5af6:	69a1      	ldr	r1, [r4, #24]
    5af8:	428d      	cmp	r5, r1
    5afa:	db10      	blt.n	5b1e <fseek+0xca>
    5afc:	6890      	ldr	r0, [r2, #8]
    5afe:	6823      	ldr	r3, [r4, #0]
    5b00:	f8d4 e010 	ldr.w	lr, [r4, #16]
    5b04:	4283      	cmp	r3, r0
    5b06:	bf38      	it	cc
    5b08:	4603      	movcc	r3, r0
    5b0a:	1858      	adds	r0, r3, r1
    5b0c:	ebce 0000 	rsb	r0, lr, r0
    5b10:	4285      	cmp	r5, r0
    5b12:	dc04      	bgt.n	5b1e <fseek+0xca>
    5b14:	68d0      	ldr	r0, [r2, #12]
    5b16:	eb01 0c00 	add.w	ip, r1, r0
    5b1a:	4565      	cmp	r5, ip
    5b1c:	db06      	blt.n	5b2c <fseek+0xd8>
    5b1e:	2300      	movs	r3, #0
    5b20:	60a3      	str	r3, [r4, #8]
    5b22:	6063      	str	r3, [r4, #4]
    5b24:	f046 0620 	orr.w	r6, r6, #32
    5b28:	6055      	str	r5, [r2, #4]
    5b2a:	e00f      	b.n	5b4c <fseek+0xf8>
    5b2c:	1a6d      	subs	r5, r5, r1
    5b2e:	07b1      	lsls	r1, r6, #30
    5b30:	bf44      	itt	mi
    5b32:	1a28      	submi	r0, r5, r0
    5b34:	60a0      	strmi	r0, [r4, #8]
    5b36:	07f2      	lsls	r2, r6, #31
    5b38:	bf44      	itt	mi
    5b3a:	ebc3 030e 	rsbmi	r3, r3, lr
    5b3e:	195b      	addmi	r3, r3, r5
    5b40:	4475      	add	r5, lr
    5b42:	bf48      	it	mi
    5b44:	6063      	strmi	r3, [r4, #4]
    5b46:	6025      	str	r5, [r4, #0]
    5b48:	f026 0620 	bic.w	r6, r6, #32
    5b4c:	f426 2603 	bic.w	r6, r6, #536576	; 0x83000
    5b50:	f026 0640 	bic.w	r6, r6, #64	; 0x40
    5b54:	60e6      	str	r6, [r4, #12]
    5b56:	e000      	b.n	5b5a <fseek+0x106>
    5b58:	2702      	movs	r7, #2
    5b5a:	4638      	mov	r0, r7
    5b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5b60:	00100003 	.word	0x00100003

00005b64 <ftell>:
    5b64:	68c3      	ldr	r3, [r0, #12]
    5b66:	079a      	lsls	r2, r3, #30
    5b68:	d105      	bne.n	5b76 <ftell+0x12>
    5b6a:	4b10      	ldr	r3, [pc, #64]	; (5bac <ftell+0x48>)
    5b6c:	2221      	movs	r2, #33	; 0x21
    5b6e:	601a      	str	r2, [r3, #0]
    5b70:	f04f 30ff 	mov.w	r0, #4294967295
    5b74:	4770      	bx	lr
    5b76:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    5b7a:	f003 0320 	and.w	r3, r3, #32
    5b7e:	d00a      	beq.n	5b96 <ftell+0x32>
    5b80:	b113      	cbz	r3, 5b88 <ftell+0x24>
    5b82:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5b84:	6858      	ldr	r0, [r3, #4]
    5b86:	e004      	b.n	5b92 <ftell+0x2e>
    5b88:	6802      	ldr	r2, [r0, #0]
    5b8a:	6983      	ldr	r3, [r0, #24]
    5b8c:	6900      	ldr	r0, [r0, #16]
    5b8e:	4413      	add	r3, r2
    5b90:	1a18      	subs	r0, r3, r0
    5b92:	3801      	subs	r0, #1
    5b94:	4770      	bx	lr
    5b96:	b113      	cbz	r3, 5b9e <ftell+0x3a>
    5b98:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5b9a:	6858      	ldr	r0, [r3, #4]
    5b9c:	4770      	bx	lr
    5b9e:	6802      	ldr	r2, [r0, #0]
    5ba0:	6983      	ldr	r3, [r0, #24]
    5ba2:	6900      	ldr	r0, [r0, #16]
    5ba4:	4413      	add	r3, r2
    5ba6:	1a18      	subs	r0, r3, r0
    5ba8:	4770      	bx	lr
    5baa:	bf00      	nop
    5bac:	10000c90 	.word	0x10000c90

00005bb0 <remove>:
    5bb0:	b510      	push	{r4, lr}
    5bb2:	4604      	mov	r4, r0
    5bb4:	f7ff fcd0 	bl	5558 <strlen>
    5bb8:	4601      	mov	r1, r0
    5bba:	4620      	mov	r0, r4
    5bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5bc0:	f000 bcb9 	b.w	6536 <__sys_remove>

00005bc4 <__check_heap_overflow>:
    5bc4:	4b04      	ldr	r3, [pc, #16]	; (5bd8 <__check_heap_overflow+0x14>)
    5bc6:	b123      	cbz	r3, 5bd2 <__check_heap_overflow+0xe>
    5bc8:	4298      	cmp	r0, r3
    5bca:	bf34      	ite	cc
    5bcc:	2000      	movcc	r0, #0
    5bce:	2001      	movcs	r0, #1
    5bd0:	4770      	bx	lr
    5bd2:	4618      	mov	r0, r3
    5bd4:	4770      	bx	lr
    5bd6:	bf00      	nop
    5bd8:	00000000 	.word	0x00000000

00005bdc <_do_fflush>:
    5bdc:	68c2      	ldr	r2, [r0, #12]
    5bde:	b570      	push	{r4, r5, r6, lr}
    5be0:	f012 0303 	ands.w	r3, r2, #3
    5be4:	4604      	mov	r4, r0
    5be6:	d019      	beq.n	5c1c <_do_fflush+0x40>
    5be8:	0693      	lsls	r3, r2, #26
    5bea:	d504      	bpl.n	5bf6 <_do_fflush+0x1a>
    5bec:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5bee:	685d      	ldr	r5, [r3, #4]
    5bf0:	f7ff fd32 	bl	5658 <_deferredlazyseek>
    5bf4:	e004      	b.n	5c00 <_do_fflush+0x24>
    5bf6:	6805      	ldr	r5, [r0, #0]
    5bf8:	6983      	ldr	r3, [r0, #24]
    5bfa:	442b      	add	r3, r5
    5bfc:	6905      	ldr	r5, [r0, #16]
    5bfe:	1b5d      	subs	r5, r3, r5
    5c00:	68e3      	ldr	r3, [r4, #12]
    5c02:	4620      	mov	r0, r4
    5c04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    5c08:	60e3      	str	r3, [r4, #12]
    5c0a:	f7ff fe1d 	bl	5848 <_fflush>
    5c0e:	4606      	mov	r6, r0
    5c10:	4629      	mov	r1, r5
    5c12:	4620      	mov	r0, r4
    5c14:	2200      	movs	r2, #0
    5c16:	f7ff ff1d 	bl	5a54 <fseek>
    5c1a:	4633      	mov	r3, r6
    5c1c:	4618      	mov	r0, r3
    5c1e:	bd70      	pop	{r4, r5, r6, pc}

00005c20 <__aeabi_uldivmod>:
    5c20:	f05f 0c00 	movs.w	ip, #0

00005c24 <__bhs_ldivmod1>:
    5c24:	b530      	push	{r4, r5, lr}
    5c26:	001c      	movs	r4, r3
    5c28:	d122      	bne.n	5c70 <ldiv64>
    5c2a:	0012      	movs	r2, r2
    5c2c:	d06f      	beq.n	5d0e <ldiv_divzero>
    5c2e:	4291      	cmp	r1, r2
    5c30:	d306      	bcc.n	5c40 <ldiv32>
    5c32:	4605      	mov	r5, r0
    5c34:	4608      	mov	r0, r1
    5c36:	2100      	movs	r1, #0
    5c38:	f000 f86f 	bl	5d1a <udiv6432>
    5c3c:	4604      	mov	r4, r0
    5c3e:	4628      	mov	r0, r5

00005c40 <ldiv32>:
    5c40:	f000 f86b 	bl	5d1a <udiv6432>
    5c44:	460a      	mov	r2, r1
    5c46:	4621      	mov	r1, r4

00005c48 <ldiv_return>:
    5c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5c4c:	f01c 4f40 	tst.w	ip, #3221225472	; 0xc0000000
    5c50:	bf08      	it	eq
    5c52:	4770      	bxeq	lr
    5c54:	d503      	bpl.n	5c5e <ldiv_sign>
    5c56:	4249      	negs	r1, r1
    5c58:	4240      	negs	r0, r0
    5c5a:	f161 0100 	sbc.w	r1, r1, #0

00005c5e <ldiv_sign>:
    5c5e:	ea5f 0c8c 	movs.w	ip, ip, lsl #2
    5c62:	bf38      	it	cc
    5c64:	4770      	bxcc	lr
    5c66:	425b      	negs	r3, r3
    5c68:	4252      	negs	r2, r2
    5c6a:	f163 0300 	sbc.w	r3, r3, #0
    5c6e:	4770      	bx	lr

00005c70 <ldiv64>:
    5c70:	d442      	bmi.n	5cf8 <ldiv_res01>
    5c72:	0c1c      	lsrs	r4, r3, #16
    5c74:	bf04      	itt	eq
    5c76:	041b      	lsleq	r3, r3, #16
    5c78:	f10c 0c10 	addeq.w	ip, ip, #16
    5c7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    5c80:	bf04      	itt	eq
    5c82:	021b      	lsleq	r3, r3, #8
    5c84:	f10c 0c08 	addeq.w	ip, ip, #8
    5c88:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    5c8c:	bf04      	itt	eq
    5c8e:	011b      	lsleq	r3, r3, #4
    5c90:	f10c 0c04 	addeq.w	ip, ip, #4
    5c94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    5c98:	bf04      	itt	eq
    5c9a:	f10c 0c02 	addeq.w	ip, ip, #2
    5c9e:	ea5f 0383 	movseq.w	r3, r3, lsl #2
    5ca2:	bf5c      	itt	pl
    5ca4:	f10c 0c01 	addpl.w	ip, ip, #1
    5ca8:	005b      	lslpl	r3, r3, #1
    5caa:	f1cc 0e20 	rsb	lr, ip, #32
    5cae:	fa22 f40e 	lsr.w	r4, r2, lr
    5cb2:	4323      	orrs	r3, r4
    5cb4:	fa02 f20c 	lsl.w	r2, r2, ip
    5cb8:	fa00 f50c 	lsl.w	r5, r0, ip
    5cbc:	fa20 f00e 	lsr.w	r0, r0, lr
    5cc0:	fa01 f40c 	lsl.w	r4, r1, ip
    5cc4:	4320      	orrs	r0, r4
    5cc6:	fa21 f10e 	lsr.w	r1, r1, lr
    5cca:	4614      	mov	r4, r2
    5ccc:	461a      	mov	r2, r3
    5cce:	f000 f824 	bl	5d1a <udiv6432>
    5cd2:	fba4 2300 	umull	r2, r3, r4, r0
    5cd6:	1aaa      	subs	r2, r5, r2
    5cd8:	eb71 0303 	sbcs.w	r3, r1, r3
    5cdc:	bf3c      	itt	cc
    5cde:	191b      	addcc	r3, r3, r4
    5ce0:	3801      	subcc	r0, #1
    5ce2:	f1cc 0e20 	rsb	lr, ip, #32
    5ce6:	fa22 f20c 	lsr.w	r2, r2, ip
    5cea:	fa03 f40e 	lsl.w	r4, r3, lr
    5cee:	4322      	orrs	r2, r4
    5cf0:	fa23 f30c 	lsr.w	r3, r3, ip
    5cf4:	2100      	movs	r1, #0
    5cf6:	e7a7      	b.n	5c48 <ldiv_return>

00005cf8 <ldiv_res01>:
    5cf8:	1a82      	subs	r2, r0, r2
    5cfa:	eb71 0303 	sbcs.w	r3, r1, r3
    5cfe:	bf3c      	itt	cc
    5d00:	4602      	movcc	r2, r0
    5d02:	460b      	movcc	r3, r1
    5d04:	f04f 0100 	mov.w	r1, #0
    5d08:	f141 0000 	adc.w	r0, r1, #0
    5d0c:	e79c      	b.n	5c48 <ldiv_return>

00005d0e <ldiv_divzero>:
    5d0e:	2000      	movs	r0, #0
    5d10:	2100      	movs	r1, #0
    5d12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5d16:	f000 b83d 	b.w	5d94 <__aeabi_idiv0>

00005d1a <udiv6432>:
    5d1a:	2304      	movs	r3, #4
    5d1c:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    5d20:	d209      	bcs.n	5d36 <udiv6432_entry>

00005d22 <udiv6432_loop1>:
    5d22:	0209      	lsls	r1, r1, #8
    5d24:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
    5d28:	0200      	lsls	r0, r0, #8
    5d2a:	3b01      	subs	r3, #1
    5d2c:	bf08      	it	eq
    5d2e:	4770      	bxeq	lr
    5d30:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    5d34:	d3f5      	bcc.n	5d22 <udiv6432_loop1>

00005d36 <udiv6432_entry>:
    5d36:	1800      	adds	r0, r0, r0

00005d38 <udiv6432_loop>:
    5d38:	4149      	adcs	r1, r1
    5d3a:	bf34      	ite	cc
    5d3c:	4291      	cmpcc	r1, r2
    5d3e:	1a89      	subcs	r1, r1, r2
    5d40:	4140      	adcs	r0, r0
    5d42:	4149      	adcs	r1, r1
    5d44:	bf34      	ite	cc
    5d46:	4291      	cmpcc	r1, r2
    5d48:	1a89      	subcs	r1, r1, r2
    5d4a:	4140      	adcs	r0, r0
    5d4c:	4149      	adcs	r1, r1
    5d4e:	bf34      	ite	cc
    5d50:	4291      	cmpcc	r1, r2
    5d52:	1a89      	subcs	r1, r1, r2
    5d54:	4140      	adcs	r0, r0
    5d56:	4149      	adcs	r1, r1
    5d58:	bf34      	ite	cc
    5d5a:	4291      	cmpcc	r1, r2
    5d5c:	1a89      	subcs	r1, r1, r2
    5d5e:	4140      	adcs	r0, r0
    5d60:	4149      	adcs	r1, r1
    5d62:	bf34      	ite	cc
    5d64:	4291      	cmpcc	r1, r2
    5d66:	1a89      	subcs	r1, r1, r2
    5d68:	4140      	adcs	r0, r0
    5d6a:	4149      	adcs	r1, r1
    5d6c:	bf34      	ite	cc
    5d6e:	4291      	cmpcc	r1, r2
    5d70:	1a89      	subcs	r1, r1, r2
    5d72:	4140      	adcs	r0, r0
    5d74:	4149      	adcs	r1, r1
    5d76:	bf34      	ite	cc
    5d78:	4291      	cmpcc	r1, r2
    5d7a:	1a89      	subcs	r1, r1, r2
    5d7c:	4140      	adcs	r0, r0
    5d7e:	4149      	adcs	r1, r1
    5d80:	bf34      	ite	cc
    5d82:	4291      	cmpcc	r1, r2
    5d84:	1a89      	subcs	r1, r1, r2
    5d86:	4140      	adcs	r0, r0
    5d88:	f1a3 0301 	sub.w	r3, r3, #1
    5d8c:	f013 0f0f 	tst.w	r3, #15
    5d90:	d1d2      	bne.n	5d38 <udiv6432_loop>
    5d92:	4770      	bx	lr

00005d94 <__aeabi_idiv0>:
    5d94:	4770      	bx	lr
	...

00005d98 <__aeabi_dmul>:
    5d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d9c:	f3c1 540a 	ubfx	r4, r1, #20, #11
    5da0:	2c00      	cmp	r4, #0
    5da2:	d054      	beq.n	5e4e <__aeabi_dmul+0xb6>
    5da4:	f240 76ff 	movw	r6, #2047	; 0x7ff
    5da8:	42b4      	cmp	r4, r6
    5daa:	d050      	beq.n	5e4e <__aeabi_dmul+0xb6>
    5dac:	f3c3 550a 	ubfx	r5, r3, #20, #11
    5db0:	2d00      	cmp	r5, #0
    5db2:	d04c      	beq.n	5e4e <__aeabi_dmul+0xb6>
    5db4:	42b5      	cmp	r5, r6
    5db6:	d04a      	beq.n	5e4e <__aeabi_dmul+0xb6>
    5db8:	f3c1 0e13 	ubfx	lr, r1, #0, #20
    5dbc:	ea4f 2ac2 	mov.w	sl, r2, lsl #11
    5dc0:	f44e 1e80 	orr.w	lr, lr, #1048576	; 0x100000
    5dc4:	fbae 670a 	umull	r6, r7, lr, sl
    5dc8:	fbaa ab00 	umull	sl, fp, sl, r0
    5dcc:	eb16 080b 	adds.w	r8, r6, fp
    5dd0:	463e      	mov	r6, r7
    5dd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
    5dd6:	ea42 22c3 	orr.w	r2, r2, r3, lsl #11
    5dda:	f04f 0900 	mov.w	r9, #0
    5dde:	f149 0900 	adc.w	r9, r9, #0
    5de2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    5de6:	fbe0 8902 	umlal	r8, r9, r0, r2
    5dea:	2700      	movs	r7, #0
    5dec:	eb16 0609 	adds.w	r6, r6, r9
    5df0:	f147 0700 	adc.w	r7, r7, #0
    5df4:	fbee 6702 	umlal	r6, r7, lr, r2
    5df8:	404b      	eors	r3, r1
    5dfa:	f5b7 1f80 	cmp.w	r7, #1048576	; 0x100000
    5dfe:	442c      	add	r4, r5
    5e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    5e04:	ea48 089a 	orr.w	r8, r8, sl, lsr #2
    5e08:	d24b      	bcs.n	5ea2 <__aeabi_dmul+0x10a>
    5e0a:	19b6      	adds	r6, r6, r6
    5e0c:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    5e10:	417f      	adcs	r7, r7
    5e12:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
    5e16:	4316      	orrs	r6, r2
    5e18:	ea4f 0848 	mov.w	r8, r8, lsl #1
    5e1c:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    5e20:	18b6      	adds	r6, r6, r2
    5e22:	f240 72fd 	movw	r2, #2045	; 0x7fd
    5e26:	f147 0700 	adc.w	r7, r7, #0
    5e2a:	f1b8 4f00 	cmp.w	r8, #2147483648	; 0x80000000
    5e2e:	4635      	mov	r5, r6
    5e30:	bf08      	it	eq
    5e32:	f026 0501 	biceq.w	r5, r6, #1
    5e36:	4294      	cmp	r4, r2
    5e38:	d936      	bls.n	5ea8 <__aeabi_dmul+0x110>
    5e3a:	2c00      	cmp	r4, #0
    5e3c:	bfa4      	itt	ge
    5e3e:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    5e42:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    5e46:	2000      	movs	r0, #0
    5e48:	4619      	mov	r1, r3
    5e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e4e:	ea83 0201 	eor.w	r2, r3, r1
    5e52:	0049      	lsls	r1, r1, #1
    5e54:	f511 1f00 	cmn.w	r1, #2097152	; 0x200000
    5e58:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
    5e5c:	d213      	bcs.n	5e86 <__aeabi_dmul+0xee>
    5e5e:	005b      	lsls	r3, r3, #1
    5e60:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    5e64:	d317      	bcc.n	5e96 <__aeabi_dmul+0xfe>
    5e66:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    5e6a:	d80d      	bhi.n	5e88 <__aeabi_dmul+0xf0>
    5e6c:	0d49      	lsrs	r1, r1, #21
    5e6e:	0549      	lsls	r1, r1, #21
    5e70:	2000      	movs	r0, #0
    5e72:	b169      	cbz	r1, 5e90 <__aeabi_dmul+0xf8>
    5e74:	0d5b      	lsrs	r3, r3, #21
    5e76:	055b      	lsls	r3, r3, #21
    5e78:	b153      	cbz	r3, 5e90 <__aeabi_dmul+0xf8>
    5e7a:	f042 42ff 	orr.w	r2, r2, #2139095040	; 0x7f800000
    5e7e:	f442 01e0 	orr.w	r1, r2, #7340032	; 0x700000
    5e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e86:	d00a      	beq.n	5e9e <__aeabi_dmul+0x106>
    5e88:	2000      	movs	r0, #0
    5e8a:	490a      	ldr	r1, [pc, #40]	; (5eb4 <__aeabi_dmul+0x11c>)
    5e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e90:	4908      	ldr	r1, [pc, #32]	; (5eb4 <__aeabi_dmul+0x11c>)
    5e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e96:	2000      	movs	r0, #0
    5e98:	4611      	mov	r1, r2
    5e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e9e:	005b      	lsls	r3, r3, #1
    5ea0:	e7e1      	b.n	5e66 <__aeabi_dmul+0xce>
    5ea2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    5ea6:	e7b9      	b.n	5e1c <__aeabi_dmul+0x84>
    5ea8:	433b      	orrs	r3, r7
    5eaa:	eb03 5104 	add.w	r1, r3, r4, lsl #20
    5eae:	4628      	mov	r0, r5
    5eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5eb4:	7ff80000 	.word	0x7ff80000

00005eb8 <__aeabi_ddiv>:
    5eb8:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
    5ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ec0:	f1bc 0f00 	cmp.w	ip, #0
    5ec4:	d053      	beq.n	5f6e <__aeabi_ddiv+0xb6>
    5ec6:	f240 74ff 	movw	r4, #2047	; 0x7ff
    5eca:	45a4      	cmp	ip, r4
    5ecc:	d04f      	beq.n	5f6e <__aeabi_ddiv+0xb6>
    5ece:	f3c3 580a 	ubfx	r8, r3, #20, #11
    5ed2:	f1b8 0f00 	cmp.w	r8, #0
    5ed6:	d04a      	beq.n	5f6e <__aeabi_ddiv+0xb6>
    5ed8:	45a0      	cmp	r8, r4
    5eda:	d048      	beq.n	5f6e <__aeabi_ddiv+0xb6>
    5edc:	ea4f 5a50 	mov.w	sl, r0, lsr #21
    5ee0:	ea4f 5952 	mov.w	r9, r2, lsr #21
    5ee4:	02c4      	lsls	r4, r0, #11
    5ee6:	02d6      	lsls	r6, r2, #11
    5ee8:	ea4a 20c1 	orr.w	r0, sl, r1, lsl #11
    5eec:	ea49 22c3 	orr.w	r2, r9, r3, lsl #11
    5ef0:	f040 4500 	orr.w	r5, r0, #2147483648	; 0x80000000
    5ef4:	f042 4700 	orr.w	r7, r2, #2147483648	; 0x80000000
    5ef8:	42bd      	cmp	r5, r7
    5efa:	bf08      	it	eq
    5efc:	42b4      	cmpeq	r4, r6
    5efe:	ebc8 0c0c 	rsb	ip, r8, ip
    5f02:	ea83 0801 	eor.w	r8, r3, r1
    5f06:	d25d      	bcs.n	5fc4 <__aeabi_ddiv+0x10c>
    5f08:	f20c 3cfd 	addw	ip, ip, #1021	; 0x3fd
    5f0c:	0879      	lsrs	r1, r7, #1
    5f0e:	ea4f 0036 	mov.w	r0, r6, rrx
    5f12:	2334      	movs	r3, #52	; 0x34
    5f14:	2200      	movs	r2, #0
    5f16:	e000      	b.n	5f1a <__aeabi_ddiv+0x62>
    5f18:	3b01      	subs	r3, #1
    5f1a:	428d      	cmp	r5, r1
    5f1c:	bf08      	it	eq
    5f1e:	4284      	cmpeq	r4, r0
    5f20:	ea4f 0242 	mov.w	r2, r2, lsl #1
    5f24:	d304      	bcc.n	5f30 <__aeabi_ddiv+0x78>
    5f26:	1a24      	subs	r4, r4, r0
    5f28:	eb65 0501 	sbc.w	r5, r5, r1
    5f2c:	f042 0201 	orr.w	r2, r2, #1
    5f30:	1924      	adds	r4, r4, r4
    5f32:	416d      	adcs	r5, r5
    5f34:	2b20      	cmp	r3, #32
    5f36:	d062      	beq.n	5ffe <__aeabi_ddiv+0x146>
    5f38:	2b00      	cmp	r3, #0
    5f3a:	d1ed      	bne.n	5f18 <__aeabi_ddiv+0x60>
    5f3c:	428d      	cmp	r5, r1
    5f3e:	bf08      	it	eq
    5f40:	4284      	cmpeq	r4, r0
    5f42:	d303      	bcc.n	5f4c <__aeabi_ddiv+0x94>
    5f44:	3201      	adds	r2, #1
    5f46:	bf08      	it	eq
    5f48:	f10e 0e01 	addeq.w	lr, lr, #1
    5f4c:	f240 71fd 	movw	r1, #2045	; 0x7fd
    5f50:	458c      	cmp	ip, r1
    5f52:	f008 4300 	and.w	r3, r8, #2147483648	; 0x80000000
    5f56:	d93b      	bls.n	5fd0 <__aeabi_ddiv+0x118>
    5f58:	f1bc 0f00 	cmp.w	ip, #0
    5f5c:	bfa4      	itt	ge
    5f5e:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    5f62:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    5f66:	2000      	movs	r0, #0
    5f68:	4619      	mov	r1, r3
    5f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f6e:	004a      	lsls	r2, r1, #1
    5f70:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    5f74:	d81c      	bhi.n	5fb0 <__aeabi_ddiv+0xf8>
    5f76:	005c      	lsls	r4, r3, #1
    5f78:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5f7c:	d818      	bhi.n	5fb0 <__aeabi_ddiv+0xf8>
    5f7e:	ea43 0001 	orr.w	r0, r3, r1
    5f82:	f3c0 500a 	ubfx	r0, r0, #20, #11
    5f86:	0545      	lsls	r5, r0, #21
    5f88:	b1b0      	cbz	r0, 5fb8 <__aeabi_ddiv+0x100>
    5f8a:	0d50      	lsrs	r0, r2, #21
    5f8c:	4059      	eors	r1, r3
    5f8e:	0540      	lsls	r0, r0, #21
    5f90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    5f94:	b1a0      	cbz	r0, 5fc0 <__aeabi_ddiv+0x108>
    5f96:	0d60      	lsrs	r0, r4, #21
    5f98:	0540      	lsls	r0, r0, #21
    5f9a:	b348      	cbz	r0, 5ff0 <__aeabi_ddiv+0x138>
    5f9c:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5fa0:	d11d      	bne.n	5fde <__aeabi_ddiv+0x126>
    5fa2:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    5fa6:	d003      	beq.n	5fb0 <__aeabi_ddiv+0xf8>
    5fa8:	2200      	movs	r2, #0
    5faa:	4610      	mov	r0, r2
    5fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fb0:	2000      	movs	r0, #0
    5fb2:	4914      	ldr	r1, [pc, #80]	; (6004 <__aeabi_ddiv+0x14c>)
    5fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fb8:	4912      	ldr	r1, [pc, #72]	; (6004 <__aeabi_ddiv+0x14c>)
    5fba:	4628      	mov	r0, r5
    5fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fc4:	086d      	lsrs	r5, r5, #1
    5fc6:	ea4f 0434 	mov.w	r4, r4, rrx
    5fca:	f20c 3cfe 	addw	ip, ip, #1022	; 0x3fe
    5fce:	e79d      	b.n	5f0c <__aeabi_ddiv+0x54>
    5fd0:	eb03 530c 	add.w	r3, r3, ip, lsl #20
    5fd4:	eb03 010e 	add.w	r1, r3, lr
    5fd8:	4610      	mov	r0, r2
    5fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fde:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    5fe2:	2200      	movs	r2, #0
    5fe4:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    5fe8:	4610      	mov	r0, r2
    5fea:	4619      	mov	r1, r3
    5fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ff0:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    5ff4:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    5ff8:	4619      	mov	r1, r3
    5ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ffe:	4696      	mov	lr, r2
    6000:	e78a      	b.n	5f18 <__aeabi_ddiv+0x60>
    6002:	bf00      	nop
    6004:	7ff80000 	.word	0x7ff80000

00006008 <__aeabi_dsub>:
    6008:	b5f0      	push	{r4, r5, r6, r7, lr}
    600a:	ea93 0401 	eors.w	r4, r3, r1
    600e:	460d      	mov	r5, r1
    6010:	f100 80cc 	bmi.w	61ac <__aeabi_dsub+0x1a4>
    6014:	4299      	cmp	r1, r3
    6016:	4606      	mov	r6, r0
    6018:	d270      	bcs.n	60fc <__aeabi_dsub+0xf4>
    601a:	4056      	eors	r6, r2
    601c:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    6020:	4072      	eors	r2, r6
    6022:	4056      	eors	r6, r2
    6024:	404d      	eors	r5, r1
    6026:	404b      	eors	r3, r1
    6028:	f240 70ff 	movw	r0, #2047	; 0x7ff
    602c:	0d2c      	lsrs	r4, r5, #20
    602e:	f424 6100 	bic.w	r1, r4, #2048	; 0x800
    6032:	4281      	cmp	r1, r0
    6034:	eba4 5713 	sub.w	r7, r4, r3, lsr #20
    6038:	f000 8096 	beq.w	6168 <__aeabi_dsub+0x160>
    603c:	428f      	cmp	r7, r1
    603e:	f000 8099 	beq.w	6174 <__aeabi_dsub+0x16c>
    6042:	f3c5 0513 	ubfx	r5, r5, #0, #20
    6046:	f3c3 0313 	ubfx	r3, r3, #0, #20
    604a:	2f1f      	cmp	r7, #31
    604c:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
    6050:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    6054:	d857      	bhi.n	6106 <__aeabi_dsub+0xfe>
    6056:	f1c7 0020 	rsb	r0, r7, #32
    605a:	fa03 fe00 	lsl.w	lr, r3, r0
    605e:	fa22 f107 	lsr.w	r1, r2, r7
    6062:	ea4e 0101 	orr.w	r1, lr, r1
    6066:	40fb      	lsrs	r3, r7
    6068:	1a71      	subs	r1, r6, r1
    606a:	1aed      	subs	r5, r5, r3
    606c:	428e      	cmp	r6, r1
    606e:	bf38      	it	cc
    6070:	f105 35ff 	addcc.w	r5, r5, #4294967295
    6074:	fa12 f300 	lsls.w	r3, r2, r0
    6078:	d006      	beq.n	6088 <__aeabi_dsub+0x80>
    607a:	3901      	subs	r1, #1
    607c:	1c4f      	adds	r7, r1, #1
    607e:	f1c3 0300 	rsb	r3, r3, #0
    6082:	bf08      	it	eq
    6084:	f105 35ff 	addeq.w	r5, r5, #4294967295
    6088:	f415 1fc0 	tst.w	r5, #1572864	; 0x180000
    608c:	d158      	bne.n	6140 <__aeabi_dsub+0x138>
    608e:	0fdb      	lsrs	r3, r3, #31
    6090:	0fca      	lsrs	r2, r1, #31
    6092:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    6096:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    609a:	ea53 0502 	orrs.w	r5, r3, r2
    609e:	f000 809a 	beq.w	61d6 <__aeabi_dsub+0x1ce>
    60a2:	0b51      	lsrs	r1, r2, #13
    60a4:	f1a4 0502 	sub.w	r5, r4, #2
    60a8:	d108      	bne.n	60bc <__aeabi_dsub+0xb4>
    60aa:	0e19      	lsrs	r1, r3, #24
    60ac:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
    60b0:	0b51      	lsrs	r1, r2, #13
    60b2:	f1a5 0508 	sub.w	r5, r5, #8
    60b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    60ba:	d0f6      	beq.n	60aa <__aeabi_dsub+0xa2>
    60bc:	0c51      	lsrs	r1, r2, #17
    60be:	d104      	bne.n	60ca <__aeabi_dsub+0xc2>
    60c0:	0f19      	lsrs	r1, r3, #28
    60c2:	3d04      	subs	r5, #4
    60c4:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    60c8:	011b      	lsls	r3, r3, #4
    60ca:	0cd1      	lsrs	r1, r2, #19
    60cc:	d104      	bne.n	60d8 <__aeabi_dsub+0xd0>
    60ce:	0f99      	lsrs	r1, r3, #30
    60d0:	3d02      	subs	r5, #2
    60d2:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
    60d6:	009b      	lsls	r3, r3, #2
    60d8:	0d11      	lsrs	r1, r2, #20
    60da:	d104      	bne.n	60e6 <__aeabi_dsub+0xde>
    60dc:	0fd9      	lsrs	r1, r3, #31
    60de:	3d01      	subs	r5, #1
    60e0:	ea41 0242 	orr.w	r2, r1, r2, lsl #1
    60e4:	005b      	lsls	r3, r3, #1
    60e6:	0ae4      	lsrs	r4, r4, #11
    60e8:	ebb4 2fd5 	cmp.w	r4, r5, lsr #11
    60ec:	f04f 0000 	mov.w	r0, #0
    60f0:	bf06      	itte	eq
    60f2:	eb02 5105 	addeq.w	r1, r2, r5, lsl #20
    60f6:	4618      	moveq	r0, r3
    60f8:	07e1      	lslne	r1, r4, #31
    60fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60fc:	4290      	cmp	r0, r2
    60fe:	d893      	bhi.n	6028 <__aeabi_dsub+0x20>
    6100:	4299      	cmp	r1, r3
    6102:	d191      	bne.n	6028 <__aeabi_dsub+0x20>
    6104:	e789      	b.n	601a <__aeabi_dsub+0x12>
    6106:	2f35      	cmp	r7, #53	; 0x35
    6108:	d826      	bhi.n	6158 <__aeabi_dsub+0x150>
    610a:	f1a7 0020 	sub.w	r0, r7, #32
    610e:	fa23 f100 	lsr.w	r1, r3, r0
    6112:	1a71      	subs	r1, r6, r1
    6114:	428e      	cmp	r6, r1
    6116:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    611a:	fa22 f000 	lsr.w	r0, r2, r0
    611e:	bf38      	it	cc
    6120:	f105 35ff 	addcc.w	r5, r5, #4294967295
    6124:	40bb      	lsls	r3, r7
    6126:	0612      	lsls	r2, r2, #24
    6128:	ea43 0300 	orr.w	r3, r3, r0
    612c:	d048      	beq.n	61c0 <__aeabi_dsub+0x1b8>
    612e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    6132:	3901      	subs	r1, #1
    6134:	1c4e      	adds	r6, r1, #1
    6136:	f1c3 0300 	rsb	r3, r3, #0
    613a:	bf08      	it	eq
    613c:	f105 35ff 	addeq.w	r5, r5, #4294967295
    6140:	02e8      	lsls	r0, r5, #11
    6142:	d42e      	bmi.n	61a2 <__aeabi_dsub+0x19a>
    6144:	3c01      	subs	r4, #1
    6146:	0562      	lsls	r2, r4, #21
    6148:	d037      	beq.n	61ba <__aeabi_dsub+0x1b2>
    614a:	0fde      	lsrs	r6, r3, #31
    614c:	0fca      	lsrs	r2, r1, #31
    614e:	ea42 0545 	orr.w	r5, r2, r5, lsl #1
    6152:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
    6156:	005b      	lsls	r3, r3, #1
    6158:	2b00      	cmp	r3, #0
    615a:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    615e:	db11      	blt.n	6184 <__aeabi_dsub+0x17c>
    6160:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    6164:	4630      	mov	r0, r6
    6166:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6168:	032b      	lsls	r3, r5, #12
    616a:	d117      	bne.n	619c <__aeabi_dsub+0x194>
    616c:	b387      	cbz	r7, 61d0 <__aeabi_dsub+0x1c8>
    616e:	4630      	mov	r0, r6
    6170:	4629      	mov	r1, r5
    6172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6174:	f240 73fe 	movw	r3, #2046	; 0x7fe
    6178:	429f      	cmp	r7, r3
    617a:	d8f5      	bhi.n	6168 <__aeabi_dsub+0x160>
    617c:	b99f      	cbnz	r7, 61a6 <__aeabi_dsub+0x19e>
    617e:	4639      	mov	r1, r7
    6180:	4638      	mov	r0, r7
    6182:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6184:	3601      	adds	r6, #1
    6186:	bf08      	it	eq
    6188:	3501      	addeq	r5, #1
    618a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    618e:	bf08      	it	eq
    6190:	f026 0601 	biceq.w	r6, r6, #1
    6194:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    6198:	4630      	mov	r0, r6
    619a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    619c:	2000      	movs	r0, #0
    619e:	490f      	ldr	r1, [pc, #60]	; (61dc <__aeabi_dsub+0x1d4>)
    61a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61a2:	460e      	mov	r6, r1
    61a4:	e7d8      	b.n	6158 <__aeabi_dsub+0x150>
    61a6:	4629      	mov	r1, r5
    61a8:	4630      	mov	r0, r6
    61aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61ac:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    61b0:	462b      	mov	r3, r5
    61b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    61b6:	f000 b813 	b.w	61e0 <__aeabi_dadd>
    61ba:	0521      	lsls	r1, r4, #20
    61bc:	4610      	mov	r0, r2
    61be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61c0:	2b00      	cmp	r3, #0
    61c2:	d1b6      	bne.n	6132 <__aeabi_dsub+0x12a>
    61c4:	02ea      	lsls	r2, r5, #11
    61c6:	d5bd      	bpl.n	6144 <__aeabi_dsub+0x13c>
    61c8:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    61cc:	460e      	mov	r6, r1
    61ce:	e7c7      	b.n	6160 <__aeabi_dsub+0x158>
    61d0:	4902      	ldr	r1, [pc, #8]	; (61dc <__aeabi_dsub+0x1d4>)
    61d2:	4638      	mov	r0, r7
    61d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61d6:	4629      	mov	r1, r5
    61d8:	4628      	mov	r0, r5
    61da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61dc:	7ff80000 	.word	0x7ff80000

000061e0 <__aeabi_dadd>:
    61e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    61e2:	ea93 0601 	eors.w	r6, r3, r1
    61e6:	460c      	mov	r4, r1
    61e8:	f100 8087 	bmi.w	62fa <__aeabi_dadd+0x11a>
    61ec:	4299      	cmp	r1, r3
    61ee:	4605      	mov	r5, r0
    61f0:	d339      	bcc.n	6266 <__aeabi_dadd+0x86>
    61f2:	f240 70ff 	movw	r0, #2047	; 0x7ff
    61f6:	0d26      	lsrs	r6, r4, #20
    61f8:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    61fc:	4281      	cmp	r1, r0
    61fe:	d03f      	beq.n	6280 <__aeabi_dadd+0xa0>
    6200:	eba6 5713 	sub.w	r7, r6, r3, lsr #20
    6204:	428f      	cmp	r7, r1
    6206:	d04c      	beq.n	62a2 <__aeabi_dadd+0xc2>
    6208:	f3c4 0413 	ubfx	r4, r4, #0, #20
    620c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6210:	2f1f      	cmp	r7, #31
    6212:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    6216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    621a:	d838      	bhi.n	628e <__aeabi_dadd+0xae>
    621c:	f1c7 0020 	rsb	r0, r7, #32
    6220:	fa03 fe00 	lsl.w	lr, r3, r0
    6224:	fa22 f107 	lsr.w	r1, r2, r7
    6228:	40fb      	lsrs	r3, r7
    622a:	ea4e 0101 	orr.w	r1, lr, r1
    622e:	441c      	add	r4, r3
    6230:	186d      	adds	r5, r5, r1
    6232:	bf28      	it	cs
    6234:	3401      	addcs	r4, #1
    6236:	fa02 f300 	lsl.w	r3, r2, r0
    623a:	02a2      	lsls	r2, r4, #10
    623c:	d529      	bpl.n	6292 <__aeabi_dadd+0xb2>
    623e:	3501      	adds	r5, #1
    6240:	bf08      	it	eq
    6242:	3401      	addeq	r4, #1
    6244:	b90b      	cbnz	r3, 624a <__aeabi_dadd+0x6a>
    6246:	f025 0502 	bic.w	r5, r5, #2
    624a:	0533      	lsls	r3, r6, #20
    624c:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    6250:	005a      	lsls	r2, r3, #1
    6252:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    6256:	f04f 0000 	mov.w	r0, #0
    625a:	d240      	bcs.n	62de <__aeabi_dadd+0xfe>
    625c:	07e4      	lsls	r4, r4, #31
    625e:	4619      	mov	r1, r3
    6260:	ea44 0055 	orr.w	r0, r4, r5, lsr #1
    6264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6266:	f240 70ff 	movw	r0, #2047	; 0x7ff
    626a:	4074      	eors	r4, r6
    626c:	4073      	eors	r3, r6
    626e:	0d26      	lsrs	r6, r4, #20
    6270:	4055      	eors	r5, r2
    6272:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    6276:	406a      	eors	r2, r5
    6278:	4281      	cmp	r1, r0
    627a:	ea85 0502 	eor.w	r5, r5, r2
    627e:	d1bf      	bne.n	6200 <__aeabi_dadd+0x20>
    6280:	0323      	lsls	r3, r4, #12
    6282:	f04f 0000 	mov.w	r0, #0
    6286:	d136      	bne.n	62f6 <__aeabi_dadd+0x116>
    6288:	4621      	mov	r1, r4
    628a:	4628      	mov	r0, r5
    628c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    628e:	2f35      	cmp	r7, #53	; 0x35
    6290:	d911      	bls.n	62b6 <__aeabi_dadd+0xd6>
    6292:	2b00      	cmp	r3, #0
    6294:	f106 36ff 	add.w	r6, r6, #4294967295
    6298:	db24      	blt.n	62e4 <__aeabi_dadd+0x104>
    629a:	eb04 5106 	add.w	r1, r4, r6, lsl #20
    629e:	4628      	mov	r0, r5
    62a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62a2:	f240 73fe 	movw	r3, #2046	; 0x7fe
    62a6:	429f      	cmp	r7, r3
    62a8:	d8ea      	bhi.n	6280 <__aeabi_dadd+0xa0>
    62aa:	2f00      	cmp	r7, #0
    62ac:	d1ec      	bne.n	6288 <__aeabi_dadd+0xa8>
    62ae:	f004 4100 	and.w	r1, r4, #2147483648	; 0x80000000
    62b2:	4638      	mov	r0, r7
    62b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62b6:	f1a7 0120 	sub.w	r1, r7, #32
    62ba:	fa23 f001 	lsr.w	r0, r3, r1
    62be:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    62c2:	40bb      	lsls	r3, r7
    62c4:	fa22 f101 	lsr.w	r1, r2, r1
    62c8:	182d      	adds	r5, r5, r0
    62ca:	ea43 0301 	orr.w	r3, r3, r1
    62ce:	d31b      	bcc.n	6308 <__aeabi_dadd+0x128>
    62d0:	0612      	lsls	r2, r2, #24
    62d2:	f104 0401 	add.w	r4, r4, #1
    62d6:	d0b0      	beq.n	623a <__aeabi_dadd+0x5a>
    62d8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    62dc:	e7ad      	b.n	623a <__aeabi_dadd+0x5a>
    62de:	3601      	adds	r6, #1
    62e0:	0531      	lsls	r1, r6, #20
    62e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62e4:	3501      	adds	r5, #1
    62e6:	bf08      	it	eq
    62e8:	3401      	addeq	r4, #1
    62ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    62ee:	bf08      	it	eq
    62f0:	f025 0501 	biceq.w	r5, r5, #1
    62f4:	e7d1      	b.n	629a <__aeabi_dadd+0xba>
    62f6:	4906      	ldr	r1, [pc, #24]	; (6310 <__aeabi_dadd+0x130>)
    62f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62fa:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    62fe:	462b      	mov	r3, r5
    6300:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    6304:	f7ff be80 	b.w	6008 <__aeabi_dsub>
    6308:	0612      	lsls	r2, r2, #24
    630a:	d1e5      	bne.n	62d8 <__aeabi_dadd+0xf8>
    630c:	e7c1      	b.n	6292 <__aeabi_dadd+0xb2>
    630e:	bf00      	nop
    6310:	7ff80000 	.word	0x7ff80000

00006314 <__aeabi_d2iz>:
    6314:	02cb      	lsls	r3, r1, #11
    6316:	0d0a      	lsrs	r2, r1, #20
    6318:	ea43 5050 	orr.w	r0, r3, r0, lsr #21
    631c:	f5c2 6383 	rsb	r3, r2, #1048	; 0x418
    6320:	3306      	adds	r3, #6
    6322:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    6326:	2bff      	cmp	r3, #255	; 0xff
    6328:	fa20 f003 	lsr.w	r0, r0, r3
    632c:	d90f      	bls.n	634e <__aeabi_d2iz+0x3a>
    632e:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    6332:	d00d      	beq.n	6350 <__aeabi_d2iz+0x3c>
    6334:	f011 4080 	ands.w	r0, r1, #1073741824	; 0x40000000
    6338:	d009      	beq.n	634e <__aeabi_d2iz+0x3a>
    633a:	004b      	lsls	r3, r1, #1
    633c:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    6340:	d804      	bhi.n	634c <__aeabi_d2iz+0x38>
    6342:	0fc8      	lsrs	r0, r1, #31
    6344:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    6348:	3801      	subs	r0, #1
    634a:	4770      	bx	lr
    634c:	2000      	movs	r0, #0
    634e:	4770      	bx	lr
    6350:	4240      	negs	r0, r0
    6352:	4770      	bx	lr

00006354 <__bhs_ui2d>:
    6354:	b1f0      	cbz	r0, 6394 <__bhs_ui2d+0x40>
    6356:	0c03      	lsrs	r3, r0, #16
    6358:	bf0c      	ite	eq
    635a:	0400      	lsleq	r0, r0, #16
    635c:	f101 7180 	addne.w	r1, r1, #16777216	; 0x1000000
    6360:	0e03      	lsrs	r3, r0, #24
    6362:	bf0c      	ite	eq
    6364:	0200      	lsleq	r0, r0, #8
    6366:	f501 0100 	addne.w	r1, r1, #8388608	; 0x800000
    636a:	0f03      	lsrs	r3, r0, #28
    636c:	bf0c      	ite	eq
    636e:	0100      	lsleq	r0, r0, #4
    6370:	f501 0180 	addne.w	r1, r1, #4194304	; 0x400000
    6374:	0f83      	lsrs	r3, r0, #30
    6376:	bf0c      	ite	eq
    6378:	0080      	lsleq	r0, r0, #2
    637a:	f501 1100 	addne.w	r1, r1, #2097152	; 0x200000
    637e:	2800      	cmp	r0, #0
    6380:	bfac      	ite	ge
    6382:	0040      	lslge	r0, r0, #1
    6384:	f501 1180 	addlt.w	r1, r1, #1048576	; 0x100000
    6388:	eb01 23e0 	add.w	r3, r1, r0, asr #11
    638c:	0542      	lsls	r2, r0, #21
    638e:	4610      	mov	r0, r2
    6390:	4619      	mov	r1, r3
    6392:	4770      	bx	lr
    6394:	4603      	mov	r3, r0
    6396:	4619      	mov	r1, r3
    6398:	4770      	bx	lr
    639a:	bf00      	nop

0000639c <__aeabi_i2d>:
    639c:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
    63a0:	0fc3      	lsrs	r3, r0, #31
    63a2:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
    63a6:	18d0      	adds	r0, r2, r3
    63a8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    63ac:	f7ff bfd2 	b.w	6354 <__bhs_ui2d>

000063b0 <__aeabi_dcmpeq>:
    63b0:	b510      	push	{r4, lr}
    63b2:	004c      	lsls	r4, r1, #1
    63b4:	ea54 0e00 	orrs.w	lr, r4, r0
    63b8:	d102      	bne.n	63c0 <__aeabi_dcmpeq+0x10>
    63ba:	ea52 0e43 	orrs.w	lr, r2, r3, lsl #1
    63be:	d00b      	beq.n	63d8 <__aeabi_dcmpeq+0x28>
    63c0:	4299      	cmp	r1, r3
    63c2:	d001      	beq.n	63c8 <__aeabi_dcmpeq+0x18>
    63c4:	2000      	movs	r0, #0
    63c6:	bd10      	pop	{r4, pc}
    63c8:	4290      	cmp	r0, r2
    63ca:	d1fb      	bne.n	63c4 <__aeabi_dcmpeq+0x14>
    63cc:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    63d0:	bf8c      	ite	hi
    63d2:	2000      	movhi	r0, #0
    63d4:	2001      	movls	r0, #1
    63d6:	bd10      	pop	{r4, pc}
    63d8:	2001      	movs	r0, #1
    63da:	bd10      	pop	{r4, pc}

000063dc <__aeabi_dcmplt>:
    63dc:	b430      	push	{r4, r5}
    63de:	ea53 0401 	orrs.w	r4, r3, r1
    63e2:	d409      	bmi.n	63f8 <__aeabi_dcmplt+0x1c>
    63e4:	005c      	lsls	r4, r3, #1
    63e6:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    63ea:	d802      	bhi.n	63f2 <__aeabi_dcmplt+0x16>
    63ec:	4299      	cmp	r1, r3
    63ee:	d317      	bcc.n	6420 <__aeabi_dcmplt+0x44>
    63f0:	d019      	beq.n	6426 <__aeabi_dcmplt+0x4a>
    63f2:	2000      	movs	r0, #0
    63f4:	bc30      	pop	{r4, r5}
    63f6:	4770      	bx	lr
    63f8:	004d      	lsls	r5, r1, #1
    63fa:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    63fe:	d8f8      	bhi.n	63f2 <__aeabi_dcmplt+0x16>
    6400:	005c      	lsls	r4, r3, #1
    6402:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    6406:	d8f4      	bhi.n	63f2 <__aeabi_dcmplt+0x16>
    6408:	4305      	orrs	r5, r0
    640a:	d101      	bne.n	6410 <__aeabi_dcmplt+0x34>
    640c:	4314      	orrs	r4, r2
    640e:	d010      	beq.n	6432 <__aeabi_dcmplt+0x56>
    6410:	4299      	cmp	r1, r3
    6412:	d805      	bhi.n	6420 <__aeabi_dcmplt+0x44>
    6414:	d1ed      	bne.n	63f2 <__aeabi_dcmplt+0x16>
    6416:	4290      	cmp	r0, r2
    6418:	bf94      	ite	ls
    641a:	2000      	movls	r0, #0
    641c:	2001      	movhi	r0, #1
    641e:	e7e9      	b.n	63f4 <__aeabi_dcmplt+0x18>
    6420:	2001      	movs	r0, #1
    6422:	bc30      	pop	{r4, r5}
    6424:	4770      	bx	lr
    6426:	4290      	cmp	r0, r2
    6428:	bf2c      	ite	cs
    642a:	2000      	movcs	r0, #0
    642c:	2001      	movcc	r0, #1
    642e:	bc30      	pop	{r4, r5}
    6430:	4770      	bx	lr
    6432:	4620      	mov	r0, r4
    6434:	e7de      	b.n	63f4 <__aeabi_dcmplt+0x18>
    6436:	bf00      	nop

00006438 <__aeabi_dcmple>:
    6438:	b430      	push	{r4, r5}
    643a:	ea53 0401 	orrs.w	r4, r3, r1
    643e:	d409      	bmi.n	6454 <__aeabi_dcmple+0x1c>
    6440:	005c      	lsls	r4, r3, #1
    6442:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    6446:	d802      	bhi.n	644e <__aeabi_dcmple+0x16>
    6448:	4299      	cmp	r1, r3
    644a:	d319      	bcc.n	6480 <__aeabi_dcmple+0x48>
    644c:	d01b      	beq.n	6486 <__aeabi_dcmple+0x4e>
    644e:	2000      	movs	r0, #0
    6450:	bc30      	pop	{r4, r5}
    6452:	4770      	bx	lr
    6454:	004c      	lsls	r4, r1, #1
    6456:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    645a:	d8f8      	bhi.n	644e <__aeabi_dcmple+0x16>
    645c:	005d      	lsls	r5, r3, #1
    645e:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    6462:	d8f4      	bhi.n	644e <__aeabi_dcmple+0x16>
    6464:	4299      	cmp	r1, r3
    6466:	d80b      	bhi.n	6480 <__aeabi_dcmple+0x48>
    6468:	d008      	beq.n	647c <__aeabi_dcmple+0x44>
    646a:	ea54 0300 	orrs.w	r3, r4, r0
    646e:	d1ee      	bne.n	644e <__aeabi_dcmple+0x16>
    6470:	ea55 0302 	orrs.w	r3, r5, r2
    6474:	bf0c      	ite	eq
    6476:	2001      	moveq	r0, #1
    6478:	2000      	movne	r0, #0
    647a:	e7e9      	b.n	6450 <__aeabi_dcmple+0x18>
    647c:	4290      	cmp	r0, r2
    647e:	d3f4      	bcc.n	646a <__aeabi_dcmple+0x32>
    6480:	bc30      	pop	{r4, r5}
    6482:	2001      	movs	r0, #1
    6484:	4770      	bx	lr
    6486:	4290      	cmp	r0, r2
    6488:	bf8c      	ite	hi
    648a:	2000      	movhi	r0, #0
    648c:	2001      	movls	r0, #1
    648e:	bc30      	pop	{r4, r5}
    6490:	4770      	bx	lr
    6492:	bf00      	nop

00006494 <__aeabi_dcmpge>:
    6494:	b430      	push	{r4, r5}
    6496:	ea53 0401 	orrs.w	r4, r3, r1
    649a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    649e:	d408      	bmi.n	64b2 <__aeabi_dcmpge+0x1e>
    64a0:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    64a4:	d802      	bhi.n	64ac <__aeabi_dcmpge+0x18>
    64a6:	4299      	cmp	r1, r3
    64a8:	d818      	bhi.n	64dc <__aeabi_dcmpge+0x48>
    64aa:	d01a      	beq.n	64e2 <__aeabi_dcmpge+0x4e>
    64ac:	2000      	movs	r0, #0
    64ae:	bc30      	pop	{r4, r5}
    64b0:	4770      	bx	lr
    64b2:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    64b6:	d8f9      	bhi.n	64ac <__aeabi_dcmpge+0x18>
    64b8:	005d      	lsls	r5, r3, #1
    64ba:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    64be:	d8f5      	bhi.n	64ac <__aeabi_dcmpge+0x18>
    64c0:	4299      	cmp	r1, r3
    64c2:	d30b      	bcc.n	64dc <__aeabi_dcmpge+0x48>
    64c4:	d008      	beq.n	64d8 <__aeabi_dcmpge+0x44>
    64c6:	ea54 0300 	orrs.w	r3, r4, r0
    64ca:	d1ef      	bne.n	64ac <__aeabi_dcmpge+0x18>
    64cc:	ea55 0302 	orrs.w	r3, r5, r2
    64d0:	bf0c      	ite	eq
    64d2:	2001      	moveq	r0, #1
    64d4:	2000      	movne	r0, #0
    64d6:	e7ea      	b.n	64ae <__aeabi_dcmpge+0x1a>
    64d8:	4290      	cmp	r0, r2
    64da:	d8f4      	bhi.n	64c6 <__aeabi_dcmpge+0x32>
    64dc:	bc30      	pop	{r4, r5}
    64de:	2001      	movs	r0, #1
    64e0:	4770      	bx	lr
    64e2:	4290      	cmp	r0, r2
    64e4:	bf34      	ite	cc
    64e6:	2000      	movcc	r0, #0
    64e8:	2001      	movcs	r0, #1
    64ea:	bc30      	pop	{r4, r5}
    64ec:	4770      	bx	lr
    64ee:	bf00      	nop

000064f0 <__aeabi_lowlevel_memset>:
    64f0:	4603      	mov	r3, r0
    64f2:	f013 0f03 	tst.w	r3, #3
    64f6:	d10e      	bne.n	6516 <memset1a>
    64f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    64fc:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    6500:	ea41 4101 	orr.w	r1, r1, r1, lsl #16

00006504 <__bhs_memset4>:
    6504:	3a04      	subs	r2, #4

00006506 <memset4>:
    6506:	bf24      	itt	cs
    6508:	f843 1b04 	strcs.w	r1, [r3], #4
    650c:	f1b2 0204 	subscs.w	r2, r2, #4
    6510:	d2f9      	bcs.n	6506 <memset4>

00006512 <memset1>:
    6512:	f102 0204 	add.w	r2, r2, #4

00006516 <memset1a>:
    6516:	3a01      	subs	r2, #1
    6518:	bf24      	itt	cs
    651a:	f803 1b01 	strbcs.w	r1, [r3], #1
    651e:	e7fa      	bcs.n	6516 <memset1a>
    6520:	4770      	bx	lr

00006522 <__sys_appexit>:
    6522:	e7fe      	b.n	6522 <__sys_appexit>

00006524 <__sys_close>:
    6524:	f04f 30ff 	mov.w	r0, #4294967295
    6528:	4770      	bx	lr

0000652a <__sys_flen>:
    652a:	f04f 30ff 	mov.w	r0, #4294967295
    652e:	4770      	bx	lr

00006530 <__sys_istty>:
    6530:	f04f 30ff 	mov.w	r0, #4294967295
    6534:	4770      	bx	lr

00006536 <__sys_remove>:
    6536:	f04f 30ff 	mov.w	r0, #4294967295
    653a:	4770      	bx	lr

0000653c <__sys_seek>:
    653c:	f04f 30ff 	mov.w	r0, #4294967295
    6540:	4770      	bx	lr

00006542 <__sys_tmpnam>:
    6542:	f04f 30ff 	mov.w	r0, #4294967295
    6546:	4770      	bx	lr

00006548 <__sys_write>:
    6548:	4610      	mov	r0, r2
    654a:	4770      	bx	lr
    654c:	2e383731 	.word	0x2e383731
    6550:	332e3336 	.word	0x332e3336
    6554:	31382e30 	.word	0x31382e30
    6558:	00000000 	.word	0x00000000
    655c:	65746e69 	.word	0x65746e69
    6560:	74656e72 	.word	0x74656e72
    6564:	00000000 	.word	0x00000000
    6568:	61646f76 	.word	0x61646f76
    656c:	656e6f66 	.word	0x656e6f66
    6570:	00000000 	.word	0x00000000
    6574:	656c694d 	.word	0x656c694d
    6578:	3a656761 	.word	0x3a656761
    657c:	0a642520 	.word	0x0a642520
    6580:	00000000 	.word	0x00000000
    6584:	5f726570 	.word	0x5f726570
    6588:	6f6e6769 	.word	0x6f6e6769
    658c:	7265706e 	.word	0x7265706e
    6590:	5f646f69 	.word	0x5f646f69
    6594:	3a6c6176 	.word	0x3a6c6176
    6598:	0a642520 	.word	0x0a642520
    659c:	00000000 	.word	0x00000000
    65a0:	5f726570 	.word	0x5f726570
    65a4:	6f6e6769 	.word	0x6f6e6769
    65a8:	65706666 	.word	0x65706666
    65ac:	646f6972 	.word	0x646f6972
    65b0:	6c61765f 	.word	0x6c61765f
    65b4:	6425203a 	.word	0x6425203a
    65b8:	6570202c 	.word	0x6570202c
    65bc:	67695f72 	.word	0x67695f72
    65c0:	66666f6e 	.word	0x66666f6e
    65c4:	69726570 	.word	0x69726570
    65c8:	765f646f 	.word	0x765f646f
    65cc:	6f286c61 	.word	0x6f286c61
    65d0:	69676972 	.word	0x69676972
    65d4:	296c616e 	.word	0x296c616e
    65d8:	6425203a 	.word	0x6425203a
    65dc:	0000000a 	.word	0x0000000a
    65e0:	5f726570 	.word	0x5f726570
    65e4:	6f6e6769 	.word	0x6f6e6769
    65e8:	616f726e 	.word	0x616f726e
    65ec:	676e696d 	.word	0x676e696d
    65f0:	69726570 	.word	0x69726570
    65f4:	765f646f 	.word	0x765f646f
    65f8:	203a6c61 	.word	0x203a6c61
    65fc:	000a6425 	.word	0x000a6425
    6600:	5f726570 	.word	0x5f726570
    6604:	6f6e6769 	.word	0x6f6e6769
    6608:	6f726666 	.word	0x6f726666
    660c:	6e696d61 	.word	0x6e696d61
    6610:	72657067 	.word	0x72657067
    6614:	5f646f69 	.word	0x5f646f69
    6618:	3a6c6176 	.word	0x3a6c6176
    661c:	0a642520 	.word	0x0a642520
    6620:	00000000 	.word	0x00000000
    6624:	5f726570 	.word	0x5f726570
    6628:	70776f6c 	.word	0x70776f6c
    662c:	6a5f776f 	.word	0x6a5f776f
    6630:	5f747375 	.word	0x5f747375
    6634:	656b6177 	.word	0x656b6177
    6638:	6425203a 	.word	0x6425203a
    663c:	0000000a 	.word	0x0000000a
    6640:	5f726570 	.word	0x5f726570
    6644:	70776f6c 	.word	0x70776f6c
    6648:	635f776f 	.word	0x635f776f
    664c:	65636e61 	.word	0x65636e61
    6650:	25203a6c 	.word	0x25203a6c
    6654:	00000a64 	.word	0x00000a64
    6658:	5f726570 	.word	0x5f726570
    665c:	70776f6c 	.word	0x70776f6c
    6660:	705f776f 	.word	0x705f776f
    6664:	6f697265 	.word	0x6f697265
    6668:	726f2864 	.word	0x726f2864
    666c:	6e696769 	.word	0x6e696769
    6670:	3a296c61 	.word	0x3a296c61
    6674:	0a642520 	.word	0x0a642520
    6678:	00000000 	.word	0x00000000
    667c:	5f726570 	.word	0x5f726570
    6680:	70776f6c 	.word	0x70776f6c
    6684:	705f776f 	.word	0x705f776f
    6688:	6f697265 	.word	0x6f697265
    668c:	25203a64 	.word	0x25203a64
    6690:	00000a64 	.word	0x00000a64
    6694:	5f726570 	.word	0x5f726570
    6698:	70776f6c 	.word	0x70776f6c
    669c:	6d5f776f 	.word	0x6d5f776f
    66a0:	3a65646f 	.word	0x3a65646f
    66a4:	0a642520 	.word	0x0a642520
    66a8:	00000000 	.word	0x00000000
    66ac:	5f726570 	.word	0x5f726570
    66b0:	66666f63 	.word	0x66666f63
    66b4:	635f6565 	.word	0x635f6565
    66b8:	746e756f 	.word	0x746e756f
    66bc:	203a7265 	.word	0x203a7265
    66c0:	000a6425 	.word	0x000a6425
    66c4:	3e2d2d2d 	.word	0x3e2d2d2d
    66c8:	0d732520 	.word	0x0d732520
    66cc:	0000000a 	.word	0x0000000a
    66d0:	0a0d7325 	.word	0x0a0d7325
    66d4:	00000000 	.word	0x00000000
    66d8:	512b5441 	.word	0x512b5441
    66dc:	3d445249 	.word	0x3d445249
    66e0:	2c312c31 	.word	0x2c312c31
    66e4:	31312c30 	.word	0x31312c30
    66e8:	00003030 	.word	0x00003030
    66ec:	65746e45 	.word	0x65746e45
    66f0:	20646572 	.word	0x20646572
    66f4:	63656843 	.word	0x63656843
    66f8:	4d53476b 	.word	0x4d53476b
    66fc:	66667542 	.word	0x66667542
    6700:	00007265 	.word	0x00007265
    6704:	512b5441 	.word	0x512b5441
    6708:	3d445249 	.word	0x3d445249
    670c:	2c312c31 	.word	0x2c312c31
    6710:	30332c30 	.word	0x30332c30
    6714:	00000030 	.word	0x00000030
    6718:	54455323 	.word	0x54455323
    671c:	0000003b 	.word	0x0000003b
    6720:	7373654d 	.word	0x7373654d
    6724:	20656761 	.word	0x20656761
    6728:	6d6f7246 	.word	0x6d6f7246
    672c:	72655320 	.word	0x72655320
    6730:	20726576 	.word	0x20726576
    6734:	0000203a 	.word	0x0000203a
    6738:	65746e45 	.word	0x65746e45
    673c:	20646572 	.word	0x20646572
    6740:	64616572 	.word	0x64616572
    6744:	736d7320 	.word	0x736d7320
    6748:	0000002e 	.word	0x0000002e
    674c:	00005441 	.word	0x00005441
    6750:	432b5441 	.word	0x432b5441
    6754:	3d52474d 	.word	0x3d52474d
    6758:	00000031 	.word	0x00000031
    675c:	432b5441 	.word	0x432b5441
    6760:	3d44474d 	.word	0x3d44474d
    6764:	00342c31 	.word	0x00342c31
    6768:	7373654d 	.word	0x7373654d
    676c:	20656761 	.word	0x20656761
    6770:	6d6f7246 	.word	0x6d6f7246
    6774:	534d5320 	.word	0x534d5320
    6778:	00203a20 	.word	0x00203a20
    677c:	65746e45 	.word	0x65746e45
    6780:	20646572 	.word	0x20646572
    6784:	5f4d5347 	.word	0x5f4d5347
    6788:	6e6e6f43 	.word	0x6e6e6f43
    678c:	54746365 	.word	0x54746365
    6790:	6972546f 	.word	0x6972546f
    6794:	6770556f 	.word	0x6770556f
    6798:	65646172 	.word	0x65646172
    679c:	76726553 	.word	0x76726553
    67a0:	00007265 	.word	0x00007265
    67a4:	00495441 	.word	0x00495441
    67a8:	512b5441 	.word	0x512b5441
    67ac:	43474649 	.word	0x43474649
    67b0:	313d544e 	.word	0x313d544e
    67b4:	00000000 	.word	0x00000000
    67b8:	512b5441 	.word	0x512b5441
    67bc:	47534349 	.word	0x47534349
    67c0:	2c313d50 	.word	0x2c313d50
    67c4:	22732522 	.word	0x22732522
    67c8:	7325222c 	.word	0x7325222c
    67cc:	25222c22 	.word	0x25222c22
    67d0:	00002273 	.word	0x00002273
    67d4:	512b5441 	.word	0x512b5441
    67d8:	58554d49 	.word	0x58554d49
    67dc:	0000303d 	.word	0x0000303d
    67e0:	512b5441 	.word	0x512b5441
    67e4:	54414256 	.word	0x54414256
    67e8:	2c303d54 	.word	0x2c303d54
    67ec:	30303533 	.word	0x30303533
    67f0:	0000302c 	.word	0x0000302c
    67f4:	512b5441 	.word	0x512b5441
    67f8:	54414256 	.word	0x54414256
    67fc:	2c313d54 	.word	0x2c313d54
    6800:	30303333 	.word	0x30303333
    6804:	0000302c 	.word	0x0000302c
    6808:	512b5441 	.word	0x512b5441
    680c:	4f485349 	.word	0x4f485349
    6810:	3d415257 	.word	0x3d415257
    6814:	00000031 	.word	0x00000031
    6818:	512b5441 	.word	0x512b5441
    681c:	4f485349 	.word	0x4f485349
    6820:	3d545057 	.word	0x3d545057
    6824:	00000031 	.word	0x00000031
    6828:	512b5441 	.word	0x512b5441
    682c:	49444e49 	.word	0x49444e49
    6830:	0000303d 	.word	0x0000303d
    6834:	512b5441 	.word	0x512b5441
    6838:	41454849 	.word	0x41454849
    683c:	00313d44 	.word	0x00313d44
    6840:	512b5441 	.word	0x512b5441
    6844:	444f4d49 	.word	0x444f4d49
    6848:	00303d45 	.word	0x00303d45
    684c:	512b5441 	.word	0x512b5441
    6850:	534e4449 	.word	0x534e4449
    6854:	313d5049 	.word	0x313d5049
    6858:	00000000 	.word	0x00000000
    685c:	512b5441 	.word	0x512b5441
    6860:	534e4449 	.word	0x534e4449
    6864:	303d5049 	.word	0x303d5049
    6868:	00000000 	.word	0x00000000
    686c:	512b5441 	.word	0x512b5441
    6870:	4c435047 	.word	0x4c435047
    6874:	3d535341 	.word	0x3d535341
    6878:	00003231 	.word	0x00003231
    687c:	512b5441 	.word	0x512b5441
    6880:	45504f49 	.word	0x45504f49
    6884:	54223d4e 	.word	0x54223d4e
    6888:	2c225043 	.word	0x2c225043
    688c:	22732522 	.word	0x22732522
    6890:	0064252c 	.word	0x0064252c
    6894:	4c494146 	.word	0x4c494146
    6898:	00000000 	.word	0x00000000
    689c:	4e4e4f43 	.word	0x4e4e4f43
    68a0:	20544345 	.word	0x20544345
    68a4:	00004b4f 	.word	0x00004b4f
    68a8:	45524c41 	.word	0x45524c41
    68ac:	20594441 	.word	0x20594441
    68b0:	4e4e4f43 	.word	0x4e4e4f43
    68b4:	00544345 	.word	0x00544345
    68b8:	6e6e6f43 	.word	0x6e6e6f43
    68bc:	65746365 	.word	0x65746365
    68c0:	6f742064 	.word	0x6f742064
    68c4:	65687420 	.word	0x65687420
    68c8:	72657320 	.word	0x72657320
    68cc:	2e726576 	.word	0x2e726576
    68d0:	00000000 	.word	0x00000000
    68d4:	504f4951 	.word	0x504f4951
    68d8:	66204e45 	.word	0x66204e45
    68dc:	656c6961 	.word	0x656c6961
    68e0:	00002e64 	.word	0x00002e64
    68e4:	64726148 	.word	0x64726148
    68e8:	73657220 	.word	0x73657220
    68ec:	69747465 	.word	0x69747465
    68f0:	6d20676e 	.word	0x6d20676e
    68f4:	6c75646f 	.word	0x6c75646f
    68f8:	00002e65 	.word	0x00002e65
    68fc:	6e6e6f63 	.word	0x6e6e6f63
    6900:	69746365 	.word	0x69746365
    6904:	61466e6f 	.word	0x61466e6f
    6908:	6f436c69 	.word	0x6f436c69
    690c:	20746e75 	.word	0x20746e75
    6910:	3034203e 	.word	0x3034203e
    6914:	73657220 	.word	0x73657220
    6918:	74726174 	.word	0x74726174
    691c:	20676e69 	.word	0x20676e69
    6920:	75646f6d 	.word	0x75646f6d
    6924:	002e656c 	.word	0x002e656c
    6928:	65746e45 	.word	0x65746e45
    692c:	20646572 	.word	0x20646572
    6930:	5f4d5347 	.word	0x5f4d5347
    6934:	6e6e6f43 	.word	0x6e6e6f43
    6938:	54746365 	.word	0x54746365
    693c:	6972546f 	.word	0x6972546f
    6940:	6770556f 	.word	0x6770556f
    6944:	65646172 	.word	0x65646172
    6948:	76726553 	.word	0x76726553
    694c:	72547265 	.word	0x72547265
    6950:	70736e61 	.word	0x70736e61
    6954:	6e657261 	.word	0x6e657261
    6958:	00000074 	.word	0x00000074
    695c:	512b5441 	.word	0x512b5441
    6960:	46435449 	.word	0x46435449
    6964:	2c333d47 	.word	0x2c333d47
    6968:	30312c31 	.word	0x30312c31
    696c:	0000312c 	.word	0x0000312c
    6970:	512b5441 	.word	0x512b5441
    6974:	4c435047 	.word	0x4c435047
    6978:	3d535341 	.word	0x3d535341
    697c:	00000038 	.word	0x00000038
    6980:	512b5441 	.word	0x512b5441
    6984:	45504f49 	.word	0x45504f49
    6988:	54223d4e 	.word	0x54223d4e
    698c:	2c225043 	.word	0x2c225043
    6990:	22732522 	.word	0x22732522
    6994:	0d64252c 	.word	0x0d64252c
    6998:	00000000 	.word	0x00000000
    699c:	65746e45 	.word	0x65746e45
    69a0:	20646572 	.word	0x20646572
    69a4:	6e6e6f43 	.word	0x6e6e6f43
    69a8:	6f746365 	.word	0x6f746365
    69ac:	6f697254 	.word	0x6f697254
    69b0:	00000000 	.word	0x00000000
    69b4:	512b5441 	.word	0x512b5441
    69b8:	49444e49 	.word	0x49444e49
    69bc:	0000313d 	.word	0x0000313d
    69c0:	65746e45 	.word	0x65746e45
    69c4:	20646572 	.word	0x20646572
    69c8:	5f4d5347 	.word	0x5f4d5347
    69cc:	646e6553 	.word	0x646e6553
    69d0:	65536f54 	.word	0x65536f54
    69d4:	72657672 	.word	0x72657672
    69d8:	00504354 	.word	0x00504354
    69dc:	512b5441 	.word	0x512b5441
    69e0:	4e455349 	.word	0x4e455349
    69e4:	64253d44 	.word	0x64253d44
    69e8:	00000000 	.word	0x00000000
    69ec:	646e6553 	.word	0x646e6553
    69f0:	204b4f20 	.word	0x204b4f20
    69f4:	6c696877 	.word	0x6c696877
    69f8:	2e676e69 	.word	0x2e676e69
    69fc:	0000002e 	.word	0x0000002e
    6a00:	444e4553 	.word	0x444e4553
    6a04:	004b4f20 	.word	0x004b4f20
    6a08:	61746144 	.word	0x61746144
    6a0c:	6e657320 	.word	0x6e657320
    6a10:	00002e74 	.word	0x00002e74
    6a14:	4f525245 	.word	0x4f525245
    6a18:	00000052 	.word	0x00000052
    6a1c:	61746144 	.word	0x61746144
    6a20:	69616620 	.word	0x69616620
    6a24:	00002e6c 	.word	0x00002e6c
    6a28:	3b54535b 	.word	0x3b54535b
    6a2c:	30377325 	.word	0x30377325
    6a30:	3232723b 	.word	0x3232723b
    6a34:	503b3634 	.word	0x503b3634
    6a38:	322d3536 	.word	0x322d3536
    6a3c:	30373530 	.word	0x30373530
    6a40:	2d343032 	.word	0x2d343032
    6a44:	73253b31 	.word	0x73253b31
    6a48:	5d73253b 	.word	0x5d73253b
    6a4c:	00000000 	.word	0x00000000
    6a50:	65746e45 	.word	0x65746e45
    6a54:	20646572 	.word	0x20646572
    6a58:	5f4d5347 	.word	0x5f4d5347
    6a5c:	5f504354 	.word	0x5f504354
    6a60:	646e6553 	.word	0x646e6553
    6a64:	00000000 	.word	0x00000000
    6a68:	512b5441 	.word	0x512b5441
    6a6c:	44574f50 	.word	0x44574f50
    6a70:	0000303d 	.word	0x0000303d
    6a74:	00004b4f 	.word	0x00004b4f
    6a78:	432b5441 	.word	0x432b5441
    6a7c:	3d45454d 	.word	0x3d45454d
    6a80:	00000032 	.word	0x00000032
    6a84:	432b5441 	.word	0x432b5441
    6a88:	3d46474d 	.word	0x3d46474d
    6a8c:	00000031 	.word	0x00000031
    6a90:	432b5441 	.word	0x432b5441
    6a94:	3d494d4e 	.word	0x3d494d4e
    6a98:	2c312c32 	.word	0x2c312c32
    6a9c:	2c302c30 	.word	0x2c302c30
    6aa0:	00000030 	.word	0x00000030
    6aa4:	206d6953 	.word	0x206d6953
    6aa8:	64726163 	.word	0x64726163
    6aac:	61657220 	.word	0x61657220
    6ab0:	2e2e7964 	.word	0x2e2e7964
    6ab4:	0000000d 	.word	0x0000000d
    6ab8:	206d6953 	.word	0x206d6953
    6abc:	20746f6e 	.word	0x20746f6e
    6ac0:	64616572 	.word	0x64616572
    6ac4:	000d2179 	.word	0x000d2179
    6ac8:	432b5441 	.word	0x432b5441
    6acc:	00005153 	.word	0x00005153
    6ad0:	432b5441 	.word	0x432b5441
    6ad4:	3f474552 	.word	0x3f474552
    6ad8:	00000000 	.word	0x00000000
    6adc:	4552432b 	.word	0x4552432b
    6ae0:	00000047 	.word	0x00000047
    6ae4:	0000352c 	.word	0x0000352c
    6ae8:	0000312c 	.word	0x0000312c
    6aec:	002c352c 	.word	0x002c352c
    6af0:	65746e45 	.word	0x65746e45
    6af4:	20646572 	.word	0x20646572
    6af8:	63656863 	.word	0x63656863
    6afc:	6973206b 	.word	0x6973206b
    6b00:	6163206d 	.word	0x6163206d
    6b04:	002e6472 	.word	0x002e6472
    6b08:	432b5441 	.word	0x432b5441
    6b0c:	3f4e4950 	.word	0x3f4e4950
    6b10:	00000000 	.word	0x00000000
    6b14:	44414552 	.word	0x44414552
    6b18:	00000059 	.word	0x00000059
    6b1c:	472b5441 	.word	0x472b5441
    6b20:	00004e53 	.word	0x00004e53
    6b24:	49454d49 	.word	0x49454d49
    6b28:	00203a20 	.word	0x00203a20
    6b2c:	432b5441 	.word	0x432b5441
    6b30:	00494d49 	.word	0x00494d49
    6b34:	49534d49 	.word	0x49534d49
    6b38:	00203a20 	.word	0x00203a20
    6b3c:	31455441 	.word	0x31455441
    6b40:	00000000 	.word	0x00000000
    6b44:	4f484345 	.word	0x4f484345
    6b48:	004e4f20 	.word	0x004e4f20
    6b4c:	492b5441 	.word	0x492b5441
    6b50:	313d5250 	.word	0x313d5250
    6b54:	30323531 	.word	0x30323531
    6b58:	00000030 	.word	0x00000030
    6b5c:	74746553 	.word	0x74746553
    6b60:	20676e69 	.word	0x20676e69
    6b64:	20535047 	.word	0x20535047
    6b68:	64756162 	.word	0x64756162
    6b6c:	74617220 	.word	0x74617220
    6b70:	00002065 	.word	0x00002065
    6b74:	30455441 	.word	0x30455441
    6b78:	00000000 	.word	0x00000000
    6b7c:	4f484345 	.word	0x4f484345
    6b80:	46464f20 	.word	0x46464f20
    6b84:	00000000 	.word	0x00000000
    6b88:	512b5441 	.word	0x512b5441
    6b8c:	4f4c4349 	.word	0x4f4c4349
    6b90:	00004553 	.word	0x00004553
    6b94:	534f4c43 	.word	0x534f4c43
    6b98:	43542045 	.word	0x43542045
    6b9c:	6f632050 	.word	0x6f632050
    6ba0:	63656e6e 	.word	0x63656e6e
    6ba4:	6e6f6974 	.word	0x6e6f6974
    6ba8:	00000020 	.word	0x00000020
    6bac:	65746e45 	.word	0x65746e45
    6bb0:	20646572 	.word	0x20646572
    6bb4:	656e6547 	.word	0x656e6547
    6bb8:	65746172 	.word	0x65746172
    6bbc:	73654d54 	.word	0x73654d54
    6bc0:	65676173 	.word	0x65676173
    6bc4:	00002928 	.word	0x00002928
    6bc8:	6c727473 	.word	0x6c727473
    6bcc:	6c286e65 	.word	0x6c286e65
    6bd0:	5f747361 	.word	0x5f747361
    6bd4:	696c6176 	.word	0x696c6176
    6bd8:	70675f64 	.word	0x70675f64
    6bdc:	29636d72 	.word	0x29636d72
    6be0:	25203a20 	.word	0x25203a20
    6be4:	00000d64 	.word	0x00000d64
    6be8:	7325545b 	.word	0x7325545b
    6bec:	474f4e2d 	.word	0x474f4e2d
    6bf0:	00005350 	.word	0x00005350
    6bf4:	20535047 	.word	0x20535047
    6bf8:	696c6156 	.word	0x696c6156
    6bfc:	203a2064 	.word	0x203a2064
    6c00:	6c727473 	.word	0x6c727473
    6c04:	6c286e65 	.word	0x6c286e65
    6c08:	5f747361 	.word	0x5f747361
    6c0c:	696c6176 	.word	0x696c6176
    6c10:	70675f64 	.word	0x70675f64
    6c14:	29636d72 	.word	0x29636d72
    6c18:	25203a20 	.word	0x25203a20
    6c1c:	6c202c64 	.word	0x6c202c64
    6c20:	5f747361 	.word	0x5f747361
    6c24:	696c6176 	.word	0x696c6176
    6c28:	70675f64 	.word	0x70675f64
    6c2c:	3a636d72 	.word	0x3a636d72
    6c30:	25203a20 	.word	0x25203a20
    6c34:	00000d73 	.word	0x00000d73
    6c38:	0000002c 	.word	0x0000002c
    6c3c:	00005825 	.word	0x00005825
    6c40:	65657053 	.word	0x65657053
    6c44:	54532064 	.word	0x54532064
    6c48:	203a2052 	.word	0x203a2052
    6c4c:	00000000 	.word	0x00000000
    6c50:	20726944 	.word	0x20726944
    6c54:	20525453 	.word	0x20525453
    6c58:	0000203a 	.word	0x0000203a
    6c5c:	00006425 	.word	0x00006425
    6c60:	0000004e 	.word	0x0000004e
    6c64:	00000057 	.word	0x00000057
    6c68:	00000053 	.word	0x00000053
    6c6c:	00000045 	.word	0x00000045
    6c70:	454d5f54 	.word	0x454d5f54
    6c74:	47415353 	.word	0x47415353
    6c78:	00003a45 	.word	0x00003a45
    6c7c:	7325545b 	.word	0x7325545b
    6c80:	73257325 	.word	0x73257325
    6c84:	73257325 	.word	0x73257325
    6c88:	73257325 	.word	0x73257325
    6c8c:	64256425 	.word	0x64256425
    6c90:	73257325 	.word	0x73257325
    6c94:	00000000 	.word	0x00000000
    6c98:	302d7325 	.word	0x302d7325
    6c9c:	253a3032 	.word	0x253a3032
    6ca0:	00000064 	.word	0x00000064
    6ca4:	313b7325 	.word	0x313b7325
    6ca8:	253a3430 	.word	0x253a3430
    6cac:	00000058 	.word	0x00000058
    6cb0:	253b7325 	.word	0x253b7325
    6cb4:	00000073 	.word	0x00000073
    6cb8:	303b7325 	.word	0x303b7325
    6cbc:	253a3232 	.word	0x253a3232
    6cc0:	00000073 	.word	0x00000073
    6cc4:	313b7325 	.word	0x313b7325
    6cc8:	253a3230 	.word	0x253a3230
    6ccc:	00000073 	.word	0x00000073
    6cd0:	313b7325 	.word	0x313b7325
    6cd4:	253a3530 	.word	0x253a3530
    6cd8:	00000064 	.word	0x00000064
    6cdc:	303b7325 	.word	0x303b7325
    6ce0:	253a3332 	.word	0x253a3332
    6ce4:	00005d64 	.word	0x00005d64
    6ce8:	65746e45 	.word	0x65746e45
    6cec:	20646572 	.word	0x20646572
    6cf0:	6e616843 	.word	0x6e616843
    6cf4:	43206567 	.word	0x43206567
    6cf8:	69666e6f 	.word	0x69666e6f
    6cfc:	61727567 	.word	0x61727567
    6d00:	6e6f6974 	.word	0x6e6f6974
    6d04:	00000000 	.word	0x00000000
    6d08:	54455323 	.word	0x54455323
    6d0c:	0000003b 	.word	0x0000003b
    6d10:	61726150 	.word	0x61726150
    6d14:	3a20316d 	.word	0x3a20316d
    6d18:	2c732520 	.word	0x2c732520
    6d1c:	72615020 	.word	0x72615020
    6d20:	20326d61 	.word	0x20326d61
    6d24:	7325203a 	.word	0x7325203a
    6d28:	6150202c 	.word	0x6150202c
    6d2c:	336d6172 	.word	0x336d6172
    6d30:	25203a20 	.word	0x25203a20
    6d34:	50202c73 	.word	0x50202c73
    6d38:	6d617261 	.word	0x6d617261
    6d3c:	203a2034 	.word	0x203a2034
    6d40:	202c7325 	.word	0x202c7325
    6d44:	61726150 	.word	0x61726150
    6d48:	3a20356d 	.word	0x3a20356d
    6d4c:	0d732520 	.word	0x0d732520
    6d50:	00000000 	.word	0x00000000
    6d54:	00000031 	.word	0x00000031
    6d58:	00003130 	.word	0x00003130
    6d5c:	502d5049 	.word	0x502d5049
    6d60:	2074726f 	.word	0x2074726f
    6d64:	75716552 	.word	0x75716552
    6d68:	2c747365 	.word	0x2c747365
    6d6c:	20504920 	.word	0x20504920
    6d70:	7325203a 	.word	0x7325203a
    6d74:	6f50202c 	.word	0x6f50202c
    6d78:	3a207472 	.word	0x3a207472
    6d7c:	0d732520 	.word	0x0d732520
    6d80:	00000000 	.word	0x00000000
    6d84:	00003231 	.word	0x00003231
    6d88:	65736552 	.word	0x65736552
    6d8c:	65722074 	.word	0x65722074
    6d90:	73657571 	.word	0x73657571
    6d94:	65722074 	.word	0x65722074
    6d98:	76696563 	.word	0x76696563
    6d9c:	202c6465 	.word	0x202c6465
    6da0:	65736572 	.word	0x65736572
    6da4:	00002e74 	.word	0x00002e74
    6da8:	00003532 	.word	0x00003532
    6dac:	204e5041 	.word	0x204e5041
    6db0:	75716552 	.word	0x75716552
    6db4:	2c747365 	.word	0x2c747365
    6db8:	4e504120 	.word	0x4e504120
    6dbc:	25203a20 	.word	0x25203a20
    6dc0:	55202c73 	.word	0x55202c73
    6dc4:	20524553 	.word	0x20524553
    6dc8:	7325203a 	.word	0x7325203a
    6dcc:	4150202c 	.word	0x4150202c
    6dd0:	3a205353 	.word	0x3a205353
    6dd4:	0d732520 	.word	0x0d732520
    6dd8:	00000000 	.word	0x00000000
    6ddc:	00000034 	.word	0x00000034
    6de0:	00003430 	.word	0x00003430
    6de4:	00000030 	.word	0x00000030
    6de8:	61647055 	.word	0x61647055
    6dec:	50206574 	.word	0x50206574
    6df0:	6f697265 	.word	0x6f697265
    6df4:	68432064 	.word	0x68432064
    6df8:	65676e61 	.word	0x65676e61
    6dfc:	71655220 	.word	0x71655220
    6e00:	74736575 	.word	0x74736575
    6e04:	4e4f202c 	.word	0x4e4f202c
    6e08:	25203a20 	.word	0x25203a20
    6e0c:	4f202c73 	.word	0x4f202c73
    6e10:	3a204646 	.word	0x3a204646
    6e14:	0d732520 	.word	0x0d732520
    6e18:	00000000 	.word	0x00000000
    6e1c:	61647055 	.word	0x61647055
    6e20:	50206574 	.word	0x50206574
    6e24:	6f697265 	.word	0x6f697265
    6e28:	6f522864 	.word	0x6f522864
    6e2c:	6e696d61 	.word	0x6e696d61
    6e30:	43202967 	.word	0x43202967
    6e34:	676e6168 	.word	0x676e6168
    6e38:	65522065 	.word	0x65522065
    6e3c:	73657571 	.word	0x73657571
    6e40:	4f202c74 	.word	0x4f202c74
    6e44:	203a204e 	.word	0x203a204e
    6e48:	202c7325 	.word	0x202c7325
    6e4c:	2046464f 	.word	0x2046464f
    6e50:	7325203a 	.word	0x7325203a
    6e54:	0000000d 	.word	0x0000000d
    6e58:	00003131 	.word	0x00003131
    6e5c:	6e616843 	.word	0x6e616843
    6e60:	4d206567 	.word	0x4d206567
    6e64:	61656c69 	.word	0x61656c69
    6e68:	002e6567 	.word	0x002e6567
    6e6c:	00003233 	.word	0x00003233
    6e70:	20776f4c 	.word	0x20776f4c
    6e74:	65776f70 	.word	0x65776f70
    6e78:	6f6d2072 	.word	0x6f6d2072
    6e7c:	002e6564 	.word	0x002e6564
    6e80:	00003333 	.word	0x00003333
    6e84:	20776f4c 	.word	0x20776f4c
    6e88:	65776f70 	.word	0x65776f70
    6e8c:	61772072 	.word	0x61772072
    6e90:	7520656b 	.word	0x7520656b
    6e94:	65702070 	.word	0x65702070
    6e98:	646f6972 	.word	0x646f6972
    6e9c:	0000002e 	.word	0x0000002e
    6ea0:	00003433 	.word	0x00003433
    6ea4:	20776f4c 	.word	0x20776f4c
    6ea8:	65776f70 	.word	0x65776f70
    6eac:	6f6d2072 	.word	0x6f6d2072
    6eb0:	73206564 	.word	0x73206564
    6eb4:	63656c65 	.word	0x63656c65
    6eb8:	6e6f6974 	.word	0x6e6f6974
    6ebc:	45454420 	.word	0x45454420
    6ec0:	4f502050 	.word	0x4f502050
    6ec4:	20524557 	.word	0x20524557
    6ec8:	4e574f44 	.word	0x4e574f44
    6ecc:	20737620 	.word	0x20737620
    6ed0:	45574f50 	.word	0x45574f50
    6ed4:	4f442052 	.word	0x4f442052
    6ed8:	00004e57 	.word	0x00004e57
    6edc:	00003332 	.word	0x00003332
    6ee0:	646e6553 	.word	0x646e6553
    6ee4:	6f702020 	.word	0x6f702020
    6ee8:	69746973 	.word	0x69746973
    6eec:	00006e6f 	.word	0x00006e6f
    6ef0:	00000000 	.word	0x00000000
    6ef4:	54455340 	.word	0x54455340
    6ef8:	3773253b 	.word	0x3773253b
    6efc:	73253b30 	.word	0x73253b30
    6f00:	00000000 	.word	0x00000000
    6f04:	7774654e 	.word	0x7774654e
    6f08:	206b726f 	.word	0x206b726f
    6f0c:	69676572 	.word	0x69676572
    6f10:	61727473 	.word	0x61727473
    6f14:	6e6f6974 	.word	0x6e6f6974
    6f18:	72726520 	.word	0x72726520
    6f1c:	0000726f 	.word	0x0000726f
    6f20:	69676552 	.word	0x69676552
    6f24:	72657473 	.word	0x72657473
    6f28:	74206465 	.word	0x74206465
    6f2c:	7367206f 	.word	0x7367206f
    6f30:	656e206d 	.word	0x656e206d
    6f34:	726f7774 	.word	0x726f7774
    6f38:	00002e6b 	.word	0x00002e6b
    6f3c:	6e676953 	.word	0x6e676953
    6f40:	53206c61 	.word	0x53206c61
    6f44:	6e657274 	.word	0x6e657274
    6f48:	20687467 	.word	0x20687467
    6f4c:	6425203a 	.word	0x6425203a
    6f50:	0000000a 	.word	0x0000000a
    6f54:	6c6c6548 	.word	0x6c6c6548
    6f58:	3650206f 	.word	0x3650206f
    6f5c:	30322035 	.word	0x30322035
    6f60:	35303531 	.word	0x35303531
    6f64:	002e3032 	.word	0x002e3032
    6f68:	74737953 	.word	0x74737953
    6f6c:	6f436d65 	.word	0x6f436d65
    6f70:	6c436572 	.word	0x6c436572
    6f74:	206b636f 	.word	0x206b636f
    6f78:	6425203d 	.word	0x6425203d
    6f7c:	0a7a4820 	.word	0x0a7a4820
    6f80:	00000000 	.word	0x00000000
    6f84:	52504545 	.word	0x52504545
    6f88:	49204d4f 	.word	0x49204d4f
    6f8c:	2074696e 	.word	0x2074696e
    6f90:	6f727245 	.word	0x6f727245
    6f94:	00002e72 	.word	0x00002e72
    6f98:	52504545 	.word	0x52504545
    6f9c:	49204d4f 	.word	0x49204d4f
    6fa0:	2074696e 	.word	0x2074696e
    6fa4:	002e6b4f 	.word	0x002e6b4f
    6fa8:	73736461 	.word	0x73736461
    6fac:	61736461 	.word	0x61736461
    6fb0:	64617364 	.word	0x64617364
    6fb4:	73646173 	.word	0x73646173
    6fb8:	61736461 	.word	0x61736461
    6fbc:	00000000 	.word	0x00000000
    6fc0:	20435243 	.word	0x20435243
    6fc4:	6120666f 	.word	0x6120666f
    6fc8:	61737364 	.word	0x61737364
    6fcc:	64617364 	.word	0x64617364
    6fd0:	73646173 	.word	0x73646173
    6fd4:	61736461 	.word	0x61736461
    6fd8:	20617364 	.word	0x20617364
    6fdc:	3a207369 	.word	0x3a207369
    6fe0:	25203d20 	.word	0x25203d20
    6fe4:	0a0d2064 	.word	0x0a0d2064
    6fe8:	00000000 	.word	0x00000000
    6fec:	74696e49 	.word	0x74696e49
    6ff0:	696c6169 	.word	0x696c6169
    6ff4:	676e697a 	.word	0x676e697a
    6ff8:	72655320 	.word	0x72655320
    6ffc:	20726576 	.word	0x20726576
    7000:	6e6e6f43 	.word	0x6e6e6f43
    7004:	69746365 	.word	0x69746365
    7008:	00006e6f 	.word	0x00006e6f
    700c:	74737953 	.word	0x74737953
    7010:	69206d65 	.word	0x69206d65
    7014:	6567616d 	.word	0x6567616d
    7018:	67707520 	.word	0x67707520
    701c:	65646172 	.word	0x65646172
    7020:	71657220 	.word	0x71657220
    7024:	74736575 	.word	0x74736575
    7028:	00006465 	.word	0x00006465
    702c:	61697254 	.word	0x61697254
    7030:	0000006c 	.word	0x0000006c
    7034:	76726553 	.word	0x76726553
    7038:	43207265 	.word	0x43207265
    703c:	656e6e6f 	.word	0x656e6e6f
    7040:	6f697463 	.word	0x6f697463
    7044:	7345206e 	.word	0x7345206e
    7048:	6c626174 	.word	0x6c626174
    704c:	65687369 	.word	0x65687369
    7050:	6f742064 	.word	0x6f742064
    7054:	67705520 	.word	0x67705520
    7058:	65646172 	.word	0x65646172
    705c:	72657320 	.word	0x72657320
    7060:	00726576 	.word	0x00726576
    7064:	6e776f44 	.word	0x6e776f44
    7068:	64616f6c 	.word	0x64616f6c
    706c:	6e696620 	.word	0x6e696620
    7070:	65687369 	.word	0x65687369
    7074:	00002064 	.word	0x00002064
    7078:	61697254 	.word	0x61697254
    707c:	6e65206c 	.word	0x6e65206c
    7080:	00000064 	.word	0x00000064
    7084:	696e6946 	.word	0x696e6946
    7088:	64656873 	.word	0x64656873
    708c:	67707520 	.word	0x67707520
    7090:	69646172 	.word	0x69646172
    7094:	0000676e 	.word	0x0000676e
    7098:	6d697250 	.word	0x6d697250
    709c:	20797261 	.word	0x20797261
    70a0:	67616d49 	.word	0x67616d49
    70a4:	69732065 	.word	0x69732065
    70a8:	2073657a 	.word	0x2073657a
    70ac:	25783028 	.word	0x25783028
    70b0:	3d3d2058 	.word	0x3d3d2058
    70b4:	25783020 	.word	0x25783020
    70b8:	000d2958 	.word	0x000d2958
    70bc:	6f636553 	.word	0x6f636553
    70c0:	7261646e 	.word	0x7261646e
    70c4:	6d492079 	.word	0x6d492079
    70c8:	20656761 	.word	0x20656761
    70cc:	657a6973 	.word	0x657a6973
    70d0:	30282073 	.word	0x30282073
    70d4:	20582578 	.word	0x20582578
    70d8:	30203d3d 	.word	0x30203d3d
    70dc:	29582578 	.word	0x29582578
    70e0:	0000000d 	.word	0x0000000d
    70e4:	68746f42 	.word	0x68746f42
    70e8:	616d6920 	.word	0x616d6920
    70ec:	20736567 	.word	0x20736567
    70f0:	20657261 	.word	0x20657261
    70f4:	61766e69 	.word	0x61766e69
    70f8:	0064696c 	.word	0x0064696c
    70fc:	6d697250 	.word	0x6d697250
    7100:	20797261 	.word	0x20797261
    7104:	67616d49 	.word	0x67616d49
    7108:	65762065 	.word	0x65762065
    710c:	6f697372 	.word	0x6f697372
    7110:	203d206e 	.word	0x203d206e
    7114:	58257830 	.word	0x58257830
    7118:	0000000d 	.word	0x0000000d
    711c:	6f636553 	.word	0x6f636553
    7120:	7261646e 	.word	0x7261646e
    7124:	6d492079 	.word	0x6d492079
    7128:	20656761 	.word	0x20656761
    712c:	73726576 	.word	0x73726576
    7130:	206e6f69 	.word	0x206e6f69
    7134:	7830203d 	.word	0x7830203d
    7138:	000d5825 	.word	0x000d5825
    713c:	63656843 	.word	0x63656843
    7140:	676e696b 	.word	0x676e696b
    7144:	43524320 	.word	0x43524320
    7148:	00000000 	.word	0x00000000
    714c:	6d697250 	.word	0x6d697250
    7150:	20797261 	.word	0x20797261
    7154:	67616d49 	.word	0x67616d49
    7158:	79742065 	.word	0x79742065
    715c:	3d206570 	.word	0x3d206570
    7160:	2c642520 	.word	0x2c642520
    7164:	72657620 	.word	0x72657620
    7168:	6e6f6973 	.word	0x6e6f6973
    716c:	30203d20 	.word	0x30203d20
    7170:	32302578 	.word	0x32302578
    7174:	00000d58 	.word	0x00000d58
    7178:	6f636553 	.word	0x6f636553
    717c:	7261646e 	.word	0x7261646e
    7180:	6d492079 	.word	0x6d492079
    7184:	20656761 	.word	0x20656761
    7188:	65707974 	.word	0x65707974
    718c:	25203d20 	.word	0x25203d20
    7190:	76202c64 	.word	0x76202c64
    7194:	69737265 	.word	0x69737265
    7198:	3d206e6f 	.word	0x3d206e6f
    719c:	25783020 	.word	0x25783020
    71a0:	0d583230 	.word	0x0d583230
    71a4:	00000000 	.word	0x00000000
    71a8:	63656843 	.word	0x63656843
    71ac:	676e696b 	.word	0x676e696b
    71b0:	20666920 	.word	0x20666920
    71b4:	67726174 	.word	0x67726174
    71b8:	6d207465 	.word	0x6d207465
    71bc:	726f6d65 	.word	0x726f6d65
    71c0:	73692079 	.word	0x73692079
    71c4:	616c6220 	.word	0x616c6220
    71c8:	00006b6e 	.word	0x00006b6e
    71cc:	67726154 	.word	0x67726154
    71d0:	73207465 	.word	0x73207465
    71d4:	6f746365 	.word	0x6f746365
    71d8:	25282072 	.word	0x25282072
    71dc:	69202964 	.word	0x69202964
    71e0:	6f6e2073 	.word	0x6f6e2073
    71e4:	6c622074 	.word	0x6c622074
    71e8:	206b6e61 	.word	0x206b6e61
    71ec:	72646461 	.word	0x72646461
    71f0:	7830203a 	.word	0x7830203a
    71f4:	202c5825 	.word	0x202c5825
    71f8:	58257830 	.word	0x58257830
    71fc:	00000000 	.word	0x00000000
    7200:	67726154 	.word	0x67726154
    7204:	73207465 	.word	0x73207465
    7208:	6f746365 	.word	0x6f746365
    720c:	25282072 	.word	0x25282072
    7210:	69202964 	.word	0x69202964
    7214:	6c622073 	.word	0x6c622073
    7218:	206b6e61 	.word	0x206b6e61
    721c:	00000000 	.word	0x00000000
    7220:	72617453 	.word	0x72617453
    7224:	676e6974 	.word	0x676e6974
    7228:	776f6420 	.word	0x776f6420
    722c:	616f6c6e 	.word	0x616f6c6e
    7230:	00000064 	.word	0x00000064
    7234:	61746f54 	.word	0x61746f54
    7238:	20796c6c 	.word	0x20796c6c
    723c:	65636572 	.word	0x65636572
    7240:	64657669 	.word	0x64657669
    7244:	25203a20 	.word	0x25203a20
    7248:	20202064 	.word	0x20202064
    724c:	6d617266 	.word	0x6d617266
    7250:	656c2065 	.word	0x656c2065
    7254:	6874676e 	.word	0x6874676e
    7258:	25203a20 	.word	0x25203a20
    725c:	000a0d64 	.word	0x000a0d64
    7260:	61746f54 	.word	0x61746f54
    7264:	20796c6c 	.word	0x20796c6c
    7268:	6425203a 	.word	0x6425203a
    726c:	6c662020 	.word	0x6c662020
    7270:	57687361 	.word	0x57687361
    7274:	65746972 	.word	0x65746972
    7278:	65646e49 	.word	0x65646e49
    727c:	203a2078 	.word	0x203a2078
    7280:	0a0d6425 	.word	0x0a0d6425
    7284:	00000000 	.word	0x00000000
    7288:	70657270 	.word	0x70657270
    728c:	64657261 	.word	0x64657261
    7290:	00000020 	.word	0x00000020
    7294:	79706f43 	.word	0x79706f43
    7298:	6d615220 	.word	0x6d615220
    729c:	73657220 	.word	0x73657220
    72a0:	20746c75 	.word	0x20746c75
    72a4:	65646f63 	.word	0x65646f63
    72a8:	25203a20 	.word	0x25203a20
    72ac:	000a0d64 	.word	0x000a0d64
    72b0:	69706f63 	.word	0x69706f63
    72b4:	00206465 	.word	0x00206465
    72b8:	49323375 	.word	0x49323375
    72bc:	435f5041 	.word	0x435f5041
    72c0:	61706d6f 	.word	0x61706d6f
    72c4:	3a206572 	.word	0x3a206572
    72c8:	20642520 	.word	0x20642520
    72cc:	6f727720 	.word	0x6f727720
    72d0:	25206574 	.word	0x25206574
    72d4:	0a0d2064 	.word	0x0a0d2064
    72d8:	00000000 	.word	0x00000000
    72dc:	69726576 	.word	0x69726576
    72e0:	64656966 	.word	0x64656966
    72e4:	00000020 	.word	0x00000020
    72e8:	69726576 	.word	0x69726576
    72ec:	61636966 	.word	0x61636966
    72f0:	6e6f6974 	.word	0x6e6f6974
    72f4:	69616620 	.word	0x69616620
    72f8:	2064656c 	.word	0x2064656c
    72fc:	00000000 	.word	0x00000000
    7300:	00000a0d 	.word	0x00000a0d
    7304:	78323025 	.word	0x78323025
    7308:	00000000 	.word	0x00000000
    730c:	73252020 	.word	0x73252020
    7310:	00000a0d 	.word	0x00000a0d
    7314:	32302520 	.word	0x32302520
    7318:	00000078 	.word	0x00000078
    731c:	00202020 	.word	0x00202020
    7320:	00445049 	.word	0x00445049
    7324:	5043542c 	.word	0x5043542c
    7328:	0000002c 	.word	0x0000002c
    732c:	00000a0d 	.word	0x00000a0d
    7330:	3a504354 	.word	0x3a504354
    7334:	00000000 	.word	0x00000000
    7338:	72617453 	.word	0x72617453
    733c:	6f642074 	.word	0x6f642074
    7340:	6f6c6e77 	.word	0x6f6c6e77
    7344:	6e696461 	.word	0x6e696461
    7348:	00000067 	.word	0x00000067
    734c:	6e6e6f43 	.word	0x6e6e6f43
    7350:	69746365 	.word	0x69746365
    7354:	7320676e 	.word	0x7320676e
    7358:	65746174 	.word	0x65746174
    735c:	6d697420 	.word	0x6d697420
    7360:	65207265 	.word	0x65207265
    7364:	72697078 	.word	0x72697078
    7368:	73206465 	.word	0x73206465
    736c:	69646e65 	.word	0x69646e65
    7370:	2020676e 	.word	0x2020676e
    7374:	2077656e 	.word	0x2077656e
    7378:	75716572 	.word	0x75716572
    737c:	20747365 	.word	0x20747365
    7380:	00000020 	.word	0x00000020
    7384:	72206f4e 	.word	0x72206f4e
    7388:	796c7065 	.word	0x796c7065
    738c:	76696720 	.word	0x76696720
    7390:	70752065 	.word	0x70752065
    7394:	67707520 	.word	0x67707520
    7398:	69646172 	.word	0x69646172
    739c:	0000676e 	.word	0x0000676e
    73a0:	65636552 	.word	0x65636552
    73a4:	64657669 	.word	0x64657669
    73a8:	544f4520 	.word	0x544f4520
    73ac:	00000020 	.word	0x00000020
    73b0:	736f6c43 	.word	0x736f6c43
    73b4:	20676e69 	.word	0x20676e69
    73b8:	20504354 	.word	0x20504354
    73bc:	6e6e6f63 	.word	0x6e6e6f63
    73c0:	69746365 	.word	0x69746365
    73c4:	00206e6f 	.word	0x00206e6f
    73c8:	65747962 	.word	0x65747962
    73cc:	756f6320 	.word	0x756f6320
    73d0:	203a746e 	.word	0x203a746e
    73d4:	202c6425 	.word	0x202c6425
    73d8:	6b636170 	.word	0x6b636170
    73dc:	6c207465 	.word	0x6c207465
    73e0:	25206e65 	.word	0x25206e65
    73e4:	000a0d64 	.word	0x000a0d64
    73e8:	656c6966 	.word	0x656c6966
    73ec:	7a697320 	.word	0x7a697320
    73f0:	30203a65 	.word	0x30203a65
    73f4:	2c582578 	.word	0x2c582578
    73f8:	43524320 	.word	0x43524320
    73fc:	7830203a 	.word	0x7830203a
    7400:	0a0d5825 	.word	0x0a0d5825
    7404:	00000000 	.word	0x00000000
    7408:	636c6143 	.word	0x636c6143
    740c:	74616c75 	.word	0x74616c75
    7410:	49206465 	.word	0x49206465
    7414:	6567616d 	.word	0x6567616d
    7418:	43524320 	.word	0x43524320
    741c:	7830203a 	.word	0x7830203a
    7420:	0a0d5825 	.word	0x0a0d5825
    7424:	00000000 	.word	0x00000000
    7428:	6d617266 	.word	0x6d617266
    742c:	756e2065 	.word	0x756e2065
    7430:	7265626d 	.word	0x7265626d
    7434:	20203a20 	.word	0x20203a20
    7438:	0a0d6425 	.word	0x0a0d6425
    743c:	00000000 	.word	0x00000000
    7440:	636c6163 	.word	0x636c6163
    7444:	65616c75 	.word	0x65616c75
    7448:	63206474 	.word	0x63206474
    744c:	3a206372 	.word	0x3a206372
    7450:	25783020 	.word	0x25783020
    7454:	000a0d58 	.word	0x000a0d58
    7458:	65636552 	.word	0x65636552
    745c:	64657669 	.word	0x64657669
    7460:	66206120 	.word	0x66206120
    7464:	656d6172 	.word	0x656d6172
    7468:	00000020 	.word	0x00000020
    746c:	646e6553 	.word	0x646e6553
    7470:	20676e69 	.word	0x20676e69
    7474:	4b434120 	.word	0x4b434120
    7478:	00000020 	.word	0x00000020
    747c:	20435243 	.word	0x20435243
    7480:	6374616d 	.word	0x6374616d
    7484:	20736568 	.word	0x20736568
    7488:	00000000 	.word	0x00000000
    748c:	20435243 	.word	0x20435243
    7490:	73656f64 	.word	0x73656f64
    7494:	746f6e20 	.word	0x746f6e20
    7498:	74616d20 	.word	0x74616d20
    749c:	20206863 	.word	0x20206863
    74a0:	204b414e 	.word	0x204b414e
    74a4:	00676e69 	.word	0x00676e69
    74a8:	656d6954 	.word	0x656d6954
    74ac:	74756f20 	.word	0x74756f20
    74b0:	206e6920 	.word	0x206e6920
    74b4:	45434552 	.word	0x45434552
    74b8:	4e495649 	.word	0x4e495649
    74bc:	20202047 	.word	0x20202047
    74c0:	00000000 	.word	0x00000000
    74c4:	6e776f44 	.word	0x6e776f44
    74c8:	64616f6c 	.word	0x64616f6c
    74cc:	6f727020 	.word	0x6f727020
    74d0:	73736563 	.word	0x73736563
    74d4:	69616620 	.word	0x69616620
    74d8:	2064656c 	.word	0x2064656c
    74dc:	69766967 	.word	0x69766967
    74e0:	7520676e 	.word	0x7520676e
    74e4:	70752070 	.word	0x70752070
    74e8:	64617267 	.word	0x64617267
    74ec:	00676e69 	.word	0x00676e69
    74f0:	202a2a2a 	.word	0x202a2a2a
    74f4:	7973435f 	.word	0x7973435f
    74f8:	6c615f73 	.word	0x6c615f73
    74fc:	20636f6c 	.word	0x20636f6c
    7500:	6c696166 	.word	0x6c696166
    7504:	000a6465 	.word	0x000a6465

00007508 <__ctype>:
	...
    7588:	40404040 40404040 41414140 40404141     @@@@@@@@@AAAAA@@
    7598:	40404040 40404040 40404040 40404040     @@@@@@@@@@@@@@@@
    75a8:	02020205 02020202 02020202 02020202     ................
    75b8:	20202020 20202020 02022020 02020202               ......
    75c8:	90909002 10909090 10101010 10101010     ................
    75d8:	10101010 10101010 02101010 02020202     ................
    75e8:	88888802 08888888 08080808 08080808     ................
    75f8:	08080808 08080808 02080808 40020202     ...............@
	...
    7688:	0020002b 63257830 00642570 63255830     +. .0x%cp%d.0X%c
    7698:	00642550 63257830 2a2e252e 70786c6c     P%d.0x%c.%.*llxp
    76a8:	30006425 2e632558 6c2a2e25 2550586c     %d.0X%c.%.*llXP%
    76b8:	002d0064 00770072 6c756e28 3000296c     d.-.r.w.(null).0
    76c8:	78300058 30003000 34333231 38373635     X.0x.0.012345678
    76d8:	43424139 00464544 33323130 37363534     9ABCDEF.01234567
    76e8:	62613938 66656463 00000000 00000000     89abcdef........

000076f8 <__huge_vall>:
    76f8:	ffffffff 7fefffff                       ........
