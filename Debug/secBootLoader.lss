
secBootLoader.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 80 00 10 71 01 00 00 e9 01 00 00 f1 01 00 00     ....q...........
      10:	f9 01 00 00 01 02 00 00 09 02 00 00 00 00 00 00     ................
	...
      2c:	11 02 00 00 19 02 00 00 00 00 00 00 21 02 00 00     ............!...
      3c:	29 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     )...1...1...1...
      4c:	31 02 00 00 31 02 00 00 4d 0b 00 00 55 0c 00 00     1...1...M...U...
      5c:	5d 0d 00 00 69 0e 00 00 31 02 00 00 31 02 00 00     ]...i...1...1...
      6c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      7c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      8c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      9c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      ac:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      bc:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...

000000cc <__data_section_table>:
      cc:	00004478 	.word	0x00004478
      d0:	10000000 	.word	0x10000000
      d4:	00000008 	.word	0x00000008
      d8:	00004478 	.word	0x00004478
      dc:	2007c000 	.word	0x2007c000
      e0:	00000000 	.word	0x00000000

000000e4 <__bss_section_table>:
      e4:	10000008 	.word	0x10000008
      e8:	000010a8 	.word	0x000010a8
      ec:	2007c000 	.word	0x2007c000
      f0:	00000000 	.word	0x00000000

000000f4 <data_init>:
// are written as separate functions rather than being inlined within the
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
      f4:	b480      	push	{r7}
      f6:	b089      	sub	sp, #36	; 0x24
      f8:	af00      	add	r7, sp, #0
      fa:	60f8      	str	r0, [r7, #12]
      fc:	60b9      	str	r1, [r7, #8]
      fe:	607a      	str	r2, [r7, #4]
    unsigned int *pulDest = (unsigned int*) start;
     100:	68bb      	ldr	r3, [r7, #8]
     102:	61fb      	str	r3, [r7, #28]
    unsigned int *pulSrc = (unsigned int*) romstart;
     104:	68fb      	ldr	r3, [r7, #12]
     106:	61bb      	str	r3, [r7, #24]
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
     108:	2300      	movs	r3, #0
     10a:	617b      	str	r3, [r7, #20]
     10c:	e00a      	b.n	124 <data_init+0x30>
        *pulDest++ = *pulSrc++;
     10e:	69fb      	ldr	r3, [r7, #28]
     110:	1d1a      	adds	r2, r3, #4
     112:	61fa      	str	r2, [r7, #28]
     114:	69ba      	ldr	r2, [r7, #24]
     116:	1d11      	adds	r1, r2, #4
     118:	61b9      	str	r1, [r7, #24]
     11a:	6812      	ldr	r2, [r2, #0]
     11c:	601a      	str	r2, [r3, #0]
__attribute__ ((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
     11e:	697b      	ldr	r3, [r7, #20]
     120:	3304      	adds	r3, #4
     122:	617b      	str	r3, [r7, #20]
     124:	697a      	ldr	r2, [r7, #20]
     126:	687b      	ldr	r3, [r7, #4]
     128:	429a      	cmp	r2, r3
     12a:	d3f0      	bcc.n	10e <data_init+0x1a>
        *pulDest++ = *pulSrc++;
}
     12c:	3724      	adds	r7, #36	; 0x24
     12e:	46bd      	mov	sp, r7
     130:	f85d 7b04 	ldr.w	r7, [sp], #4
     134:	4770      	bx	lr
     136:	bf00      	nop

00000138 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
     138:	b480      	push	{r7}
     13a:	b085      	sub	sp, #20
     13c:	af00      	add	r7, sp, #0
     13e:	6078      	str	r0, [r7, #4]
     140:	6039      	str	r1, [r7, #0]
    unsigned int *pulDest = (unsigned int*) start;
     142:	687b      	ldr	r3, [r7, #4]
     144:	60fb      	str	r3, [r7, #12]
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
     146:	2300      	movs	r3, #0
     148:	60bb      	str	r3, [r7, #8]
     14a:	e007      	b.n	15c <bss_init+0x24>
        *pulDest++ = 0;
     14c:	68fb      	ldr	r3, [r7, #12]
     14e:	1d1a      	adds	r2, r3, #4
     150:	60fa      	str	r2, [r7, #12]
     152:	2200      	movs	r2, #0
     154:	601a      	str	r2, [r3, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
     156:	68bb      	ldr	r3, [r7, #8]
     158:	3304      	adds	r3, #4
     15a:	60bb      	str	r3, [r7, #8]
     15c:	68ba      	ldr	r2, [r7, #8]
     15e:	683b      	ldr	r3, [r7, #0]
     160:	429a      	cmp	r2, r3
     162:	d3f3      	bcc.n	14c <bss_init+0x14>
        *pulDest++ = 0;
}
     164:	3714      	adds	r7, #20
     166:	46bd      	mov	sp, r7
     168:	f85d 7b04 	ldr.w	r7, [sp], #4
     16c:	4770      	bx	lr
     16e:	bf00      	nop

00000170 <ResetISR>:
// Sets up a simple runtime environment and initializes the C/C++
// library.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void
ResetISR(void) {
     170:	b580      	push	{r7, lr}
     172:	b084      	sub	sp, #16
     174:	af00      	add	r7, sp, #0
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
     176:	4b19      	ldr	r3, [pc, #100]	; (1dc <ResetISR+0x6c>)
     178:	60fb      	str	r3, [r7, #12]

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
     17a:	e013      	b.n	1a4 <ResetISR+0x34>
        LoadAddr = *SectionTableAddr++;
     17c:	68fb      	ldr	r3, [r7, #12]
     17e:	1d1a      	adds	r2, r3, #4
     180:	60fa      	str	r2, [r7, #12]
     182:	681b      	ldr	r3, [r3, #0]
     184:	60bb      	str	r3, [r7, #8]
        ExeAddr = *SectionTableAddr++;
     186:	68fb      	ldr	r3, [r7, #12]
     188:	1d1a      	adds	r2, r3, #4
     18a:	60fa      	str	r2, [r7, #12]
     18c:	681b      	ldr	r3, [r3, #0]
     18e:	607b      	str	r3, [r7, #4]
        SectionLen = *SectionTableAddr++;
     190:	68fb      	ldr	r3, [r7, #12]
     192:	1d1a      	adds	r2, r3, #4
     194:	60fa      	str	r2, [r7, #12]
     196:	681b      	ldr	r3, [r3, #0]
     198:	603b      	str	r3, [r7, #0]
        data_init(LoadAddr, ExeAddr, SectionLen);
     19a:	68b8      	ldr	r0, [r7, #8]
     19c:	6879      	ldr	r1, [r7, #4]
     19e:	683a      	ldr	r2, [r7, #0]
     1a0:	f7ff ffa8 	bl	f4 <data_init>

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
     1a4:	68fb      	ldr	r3, [r7, #12]
     1a6:	4a0e      	ldr	r2, [pc, #56]	; (1e0 <ResetISR+0x70>)
     1a8:	4293      	cmp	r3, r2
     1aa:	d3e7      	bcc.n	17c <ResetISR+0xc>
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
     1ac:	e00d      	b.n	1ca <ResetISR+0x5a>
        ExeAddr = *SectionTableAddr++;
     1ae:	68fb      	ldr	r3, [r7, #12]
     1b0:	1d1a      	adds	r2, r3, #4
     1b2:	60fa      	str	r2, [r7, #12]
     1b4:	681b      	ldr	r3, [r3, #0]
     1b6:	607b      	str	r3, [r7, #4]
        SectionLen = *SectionTableAddr++;
     1b8:	68fb      	ldr	r3, [r7, #12]
     1ba:	1d1a      	adds	r2, r3, #4
     1bc:	60fa      	str	r2, [r7, #12]
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	603b      	str	r3, [r7, #0]
        bss_init(ExeAddr, SectionLen);
     1c2:	6878      	ldr	r0, [r7, #4]
     1c4:	6839      	ldr	r1, [r7, #0]
     1c6:	f7ff ffb7 	bl	138 <bss_init>
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
     1ca:	68fb      	ldr	r3, [r7, #12]
     1cc:	4a05      	ldr	r2, [pc, #20]	; (1e4 <ResetISR+0x74>)
     1ce:	4293      	cmp	r3, r2
     1d0:	d3ed      	bcc.n	1ae <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
    }

#if defined (__USE_CMSIS) || defined (__USE_LPCOPEN)
    SystemInit();
     1d2:	f001 fb57 	bl	1884 <SystemInit>
    __libc_init_array();
#endif

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main() ;
     1d6:	f001 fbc5 	bl	1964 <__main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
     1da:	e7fe      	b.n	1da <ResetISR+0x6a>
     1dc:	000000cc 	.word	0x000000cc
     1e0:	000000e4 	.word	0x000000e4
     1e4:	000000f4 	.word	0x000000f4

000001e8 <NMI_Handler>:
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void)
{ while(1) {}
     1e8:	b480      	push	{r7}
     1ea:	af00      	add	r7, sp, #0
     1ec:	e7fe      	b.n	1ec <NMI_Handler+0x4>
     1ee:	bf00      	nop

000001f0 <HardFault_Handler>:
}

__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void)
{ while(1) {}
     1f0:	b480      	push	{r7}
     1f2:	af00      	add	r7, sp, #0
     1f4:	e7fe      	b.n	1f4 <HardFault_Handler+0x4>
     1f6:	bf00      	nop

000001f8 <MemManage_Handler>:
}

__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void)
{ while(1) {}
     1f8:	b480      	push	{r7}
     1fa:	af00      	add	r7, sp, #0
     1fc:	e7fe      	b.n	1fc <MemManage_Handler+0x4>
     1fe:	bf00      	nop

00000200 <BusFault_Handler>:
}

__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void)
{ while(1) {}
     200:	b480      	push	{r7}
     202:	af00      	add	r7, sp, #0
     204:	e7fe      	b.n	204 <BusFault_Handler+0x4>
     206:	bf00      	nop

00000208 <UsageFault_Handler>:
}

__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void)
{ while(1) {}
     208:	b480      	push	{r7}
     20a:	af00      	add	r7, sp, #0
     20c:	e7fe      	b.n	20c <UsageFault_Handler+0x4>
     20e:	bf00      	nop

00000210 <SVC_Handler>:
}

__attribute__ ((section(".after_vectors")))
void SVC_Handler(void)
{ while(1) {}
     210:	b480      	push	{r7}
     212:	af00      	add	r7, sp, #0
     214:	e7fe      	b.n	214 <SVC_Handler+0x4>
     216:	bf00      	nop

00000218 <DebugMon_Handler>:
}

__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void)
{ while(1) {}
     218:	b480      	push	{r7}
     21a:	af00      	add	r7, sp, #0
     21c:	e7fe      	b.n	21c <DebugMon_Handler+0x4>
     21e:	bf00      	nop

00000220 <PendSV_Handler>:
}

__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void)
{ while(1) {}
     220:	b480      	push	{r7}
     222:	af00      	add	r7, sp, #0
     224:	e7fe      	b.n	224 <PendSV_Handler+0x4>
     226:	bf00      	nop

00000228 <SysTick_Handler>:
}

__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void)
{ while(1) {}
     228:	b480      	push	{r7}
     22a:	af00      	add	r7, sp, #0
     22c:	e7fe      	b.n	22c <SysTick_Handler+0x4>
     22e:	bf00      	nop

00000230 <ADC_IRQHandler>:
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void)
{ while(1) {}
     230:	b480      	push	{r7}
     232:	af00      	add	r7, sp, #0
     234:	e7fe      	b.n	234 <ADC_IRQHandler+0x4>
     236:	bf00      	nop
     238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     23c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     24c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     25c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     26c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     27c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     28c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     29c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000002fc <CRP_WORD>:
     2fc:	ffff ffff                                   ....

00000300 <u16CRC_Calc16>:
**
** Returned value:  16-bit CRC
**
******************************************************************************/
uint16_t u16CRC_Calc16(const uint8_t *pu8Data, int16_t i16Len)
{
     300:	b480      	push	{r7}
     302:	b085      	sub	sp, #20
     304:	af00      	add	r7, sp, #0
     306:	6078      	str	r0, [r7, #4]
     308:	460b      	mov	r3, r1
     30a:	807b      	strh	r3, [r7, #2]
	uint8_t i;
	uint16_t u16CRC = 0;
     30c:	2300      	movs	r3, #0
     30e:	81bb      	strh	r3, [r7, #12]

    while(--i16Len >= 0)
     310:	e022      	b.n	358 <u16CRC_Calc16+0x58>
    {
    	i = 8;
     312:	2308      	movs	r3, #8
     314:	73fb      	strb	r3, [r7, #15]
    	u16CRC = u16CRC ^ (((uint16_t)*pu8Data++) << 8);
     316:	687b      	ldr	r3, [r7, #4]
     318:	1c5a      	adds	r2, r3, #1
     31a:	607a      	str	r2, [r7, #4]
     31c:	781b      	ldrb	r3, [r3, #0]
     31e:	021b      	lsls	r3, r3, #8
     320:	b29a      	uxth	r2, r3
     322:	89bb      	ldrh	r3, [r7, #12]
     324:	4053      	eors	r3, r2
     326:	b29b      	uxth	r3, r3
     328:	81bb      	strh	r3, [r7, #12]

    	do
        {
    		if (u16CRC & 0x8000)
     32a:	89bb      	ldrh	r3, [r7, #12]
     32c:	b21b      	sxth	r3, r3
     32e:	2b00      	cmp	r3, #0
     330:	da09      	bge.n	346 <u16CRC_Calc16+0x46>
    		{
    			u16CRC = u16CRC << 1 ^ 0x1021;
     332:	89bb      	ldrh	r3, [r7, #12]
     334:	005b      	lsls	r3, r3, #1
     336:	b29b      	uxth	r3, r3
     338:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
     33c:	f083 0301 	eor.w	r3, r3, #1
     340:	b29b      	uxth	r3, r3
     342:	81bb      	strh	r3, [r7, #12]
     344:	e002      	b.n	34c <u16CRC_Calc16+0x4c>
    		}
    		else
    		{
    			u16CRC = u16CRC << 1;
     346:	89bb      	ldrh	r3, [r7, #12]
     348:	005b      	lsls	r3, r3, #1
     34a:	81bb      	strh	r3, [r7, #12]
    		}
        }
    	while(--i);
     34c:	7bfb      	ldrb	r3, [r7, #15]
     34e:	3b01      	subs	r3, #1
     350:	73fb      	strb	r3, [r7, #15]
     352:	7bfb      	ldrb	r3, [r7, #15]
     354:	2b00      	cmp	r3, #0
     356:	d1e8      	bne.n	32a <u16CRC_Calc16+0x2a>
uint16_t u16CRC_Calc16(const uint8_t *pu8Data, int16_t i16Len)
{
	uint8_t i;
	uint16_t u16CRC = 0;

    while(--i16Len >= 0)
     358:	887b      	ldrh	r3, [r7, #2]
     35a:	3b01      	subs	r3, #1
     35c:	b29b      	uxth	r3, r3
     35e:	807b      	strh	r3, [r7, #2]
     360:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
     364:	2b00      	cmp	r3, #0
     366:	dad4      	bge.n	312 <u16CRC_Calc16+0x12>
    			u16CRC = u16CRC << 1;
    		}
        }
    	while(--i);
    }
    return u16CRC;
     368:	89bb      	ldrh	r3, [r7, #12]
}
     36a:	4618      	mov	r0, r3
     36c:	3714      	adds	r7, #20
     36e:	46bd      	mov	sp, r7
     370:	f85d 7b04 	ldr.w	r7, [sp], #4
     374:	4770      	bx	lr
     376:	bf00      	nop

00000378 <u32IAP_PrepareSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_PrepareSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
     378:	b580      	push	{r7, lr}
     37a:	b08e      	sub	sp, #56	; 0x38
     37c:	af00      	add	r7, sp, #0
     37e:	6078      	str	r0, [r7, #4]
     380:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
     382:	683a      	ldr	r2, [r7, #0]
     384:	687b      	ldr	r3, [r7, #4]
     386:	429a      	cmp	r2, r3
     388:	d202      	bcs.n	390 <u32IAP_PrepareSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
     38a:	230c      	movs	r3, #12
     38c:	637b      	str	r3, [r7, #52]	; 0x34
     38e:	e00f      	b.n	3b0 <u32IAP_PrepareSectors+0x38>
	}
	else
	{
		au32Command[0] = IAP_CMD_PREPARE_SECTORS;
     390:	2332      	movs	r3, #50	; 0x32
     392:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
     394:	687b      	ldr	r3, [r7, #4]
     396:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
     398:	683b      	ldr	r3, [r7, #0]
     39a:	617b      	str	r3, [r7, #20]

		IAP_EXECUTE_CMD(au32Command, au32Result);
     39c:	f107 010c 	add.w	r1, r7, #12
     3a0:	f107 0220 	add.w	r2, r7, #32
     3a4:	4b05      	ldr	r3, [pc, #20]	; (3bc <u32IAP_PrepareSectors+0x44>)
     3a6:	4608      	mov	r0, r1
     3a8:	4611      	mov	r1, r2
     3aa:	4798      	blx	r3

		u32Status = au32Result[0];
     3ac:	6a3b      	ldr	r3, [r7, #32]
     3ae:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
     3b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
     3b2:	4618      	mov	r0, r3
     3b4:	3738      	adds	r7, #56	; 0x38
     3b6:	46bd      	mov	sp, r7
     3b8:	bd80      	pop	{r7, pc}
     3ba:	bf00      	nop
     3bc:	1fff1ff1 	.word	0x1fff1ff1

000003c0 <u32IAP_EraseSectors>:
*
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_EraseSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
     3c0:	b580      	push	{r7, lr}
     3c2:	b08e      	sub	sp, #56	; 0x38
     3c4:	af00      	add	r7, sp, #0
     3c6:	6078      	str	r0, [r7, #4]
     3c8:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
     3ca:	683a      	ldr	r2, [r7, #0]
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	429a      	cmp	r2, r3
     3d0:	d202      	bcs.n	3d8 <u32IAP_EraseSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
     3d2:	230c      	movs	r3, #12
     3d4:	637b      	str	r3, [r7, #52]	; 0x34
     3d6:	e018      	b.n	40a <u32IAP_EraseSectors+0x4a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     3d8:	b672      	cpsid	i
	}
	else
	{
		__disable_irq();
		au32Command[0] = IAP_CMD_ERASE_SECTORS;
     3da:	2334      	movs	r3, #52	; 0x34
     3dc:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
     3de:	687b      	ldr	r3, [r7, #4]
     3e0:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
     3e2:	683b      	ldr	r3, [r7, #0]
     3e4:	617b      	str	r3, [r7, #20]
		au32Command[3] = SystemCoreClock / 1000UL;	/* Core clock frequency in kHz */
     3e6:	4b0b      	ldr	r3, [pc, #44]	; (414 <u32IAP_EraseSectors+0x54>)
     3e8:	681b      	ldr	r3, [r3, #0]
     3ea:	4a0b      	ldr	r2, [pc, #44]	; (418 <u32IAP_EraseSectors+0x58>)
     3ec:	fba2 2303 	umull	r2, r3, r2, r3
     3f0:	099b      	lsrs	r3, r3, #6
     3f2:	61bb      	str	r3, [r7, #24]

		IAP_EXECUTE_CMD(au32Command, au32Result);
     3f4:	f107 010c 	add.w	r1, r7, #12
     3f8:	f107 0220 	add.w	r2, r7, #32
     3fc:	4b07      	ldr	r3, [pc, #28]	; (41c <u32IAP_EraseSectors+0x5c>)
     3fe:	4608      	mov	r0, r1
     400:	4611      	mov	r1, r2
     402:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     404:	b662      	cpsie	i

		__enable_irq();
		u32Status = au32Result[0];
     406:	6a3b      	ldr	r3, [r7, #32]
     408:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
     40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
     40c:	4618      	mov	r0, r3
     40e:	3738      	adds	r7, #56	; 0x38
     410:	46bd      	mov	sp, r7
     412:	bd80      	pop	{r7, pc}
     414:	10000004 	.word	0x10000004
     418:	10624dd3 	.word	0x10624dd3
     41c:	1fff1ff1 	.word	0x1fff1ff1

00000420 <u32IAP_BlankCheckSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_BlankCheckSectors(uint32_t u32StartSector, uint32_t u32EndSector, uint32_t *pu32Result)
{
     420:	b580      	push	{r7, lr}
     422:	b090      	sub	sp, #64	; 0x40
     424:	af00      	add	r7, sp, #0
     426:	60f8      	str	r0, [r7, #12]
     428:	60b9      	str	r1, [r7, #8]
     42a:	607a      	str	r2, [r7, #4]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
     42c:	68ba      	ldr	r2, [r7, #8]
     42e:	68fb      	ldr	r3, [r7, #12]
     430:	429a      	cmp	r2, r3
     432:	d202      	bcs.n	43a <u32IAP_BlankCheckSectors+0x1a>
	{
		u32Status = IAP_STA_INVALD_PARAM;
     434:	230c      	movs	r3, #12
     436:	63fb      	str	r3, [r7, #60]	; 0x3c
     438:	e019      	b.n	46e <u32IAP_BlankCheckSectors+0x4e>
	}
	else
	{
		au32Command[0] = IAP_CMD_BLANK_CHECK_SECTORS;
     43a:	2335      	movs	r3, #53	; 0x35
     43c:	617b      	str	r3, [r7, #20]
		au32Command[1] = u32StartSector;
     43e:	68fb      	ldr	r3, [r7, #12]
     440:	61bb      	str	r3, [r7, #24]
		au32Command[2] = u32EndSector;
     442:	68bb      	ldr	r3, [r7, #8]
     444:	61fb      	str	r3, [r7, #28]

		IAP_EXECUTE_CMD(au32Command, au32Result);
     446:	f107 0114 	add.w	r1, r7, #20
     44a:	f107 0228 	add.w	r2, r7, #40	; 0x28
     44e:	4b0a      	ldr	r3, [pc, #40]	; (478 <u32IAP_BlankCheckSectors+0x58>)
     450:	4608      	mov	r0, r1
     452:	4611      	mov	r1, r2
     454:	4798      	blx	r3

		if (au32Result[0] == IAP_STA_SECTOR_NOT_BLANK)
     456:	6abb      	ldr	r3, [r7, #40]	; 0x28
     458:	2b08      	cmp	r3, #8
     45a:	d106      	bne.n	46a <u32IAP_BlankCheckSectors+0x4a>
		{
			*pu32Result       = au32Result[0];
     45c:	6aba      	ldr	r2, [r7, #40]	; 0x28
     45e:	687b      	ldr	r3, [r7, #4]
     460:	601a      	str	r2, [r3, #0]
			*(pu32Result + 1) = au32Result[1];
     462:	687b      	ldr	r3, [r7, #4]
     464:	3304      	adds	r3, #4
     466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     468:	601a      	str	r2, [r3, #0]
		}
		u32Status = au32Result[0];
     46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     46c:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	return ( u32Status );
     46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
     470:	4618      	mov	r0, r3
     472:	3740      	adds	r7, #64	; 0x40
     474:	46bd      	mov	sp, r7
     476:	bd80      	pop	{r7, pc}
     478:	1fff1ff1 	.word	0x1fff1ff1

0000047c <u32IAP_ReadPartID>:
*
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_ReadPartID(uint32_t *pu32PartID)
{
     47c:	b580      	push	{r7, lr}
     47e:	b08c      	sub	sp, #48	; 0x30
     480:	af00      	add	r7, sp, #0
     482:	6078      	str	r0, [r7, #4]
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	au32Command[0] = IAP_CMD_READ_PART_ID;
     484:	2336      	movs	r3, #54	; 0x36
     486:	60bb      	str	r3, [r7, #8]

	IAP_EXECUTE_CMD(au32Command, au32Result);
     488:	f107 0108 	add.w	r1, r7, #8
     48c:	f107 021c 	add.w	r2, r7, #28
     490:	4b05      	ldr	r3, [pc, #20]	; (4a8 <u32IAP_ReadPartID+0x2c>)
     492:	4608      	mov	r0, r1
     494:	4611      	mov	r1, r2
     496:	4798      	blx	r3

	*pu32PartID = au32Result[1];
     498:	6a3a      	ldr	r2, [r7, #32]
     49a:	687b      	ldr	r3, [r7, #4]
     49c:	601a      	str	r2, [r3, #0]

	return ( au32Result[0] );
     49e:	69fb      	ldr	r3, [r7, #28]
}
     4a0:	4618      	mov	r0, r3
     4a2:	3730      	adds	r7, #48	; 0x30
     4a4:	46bd      	mov	sp, r7
     4a6:	bd80      	pop	{r7, pc}
     4a8:	1fff1ff1 	.word	0x1fff1ff1

000004ac <u32IAP_ReadBootVersion>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_ReadBootVersion(uint32_t *pu32Major, uint32_t *pu32Minor)
{
     4ac:	b580      	push	{r7, lr}
     4ae:	b08c      	sub	sp, #48	; 0x30
     4b0:	af00      	add	r7, sp, #0
     4b2:	6078      	str	r0, [r7, #4]
     4b4:	6039      	str	r1, [r7, #0]
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	au32Command[0] = IAP_CMD_READ_BOOT_ROM_VERSION;
     4b6:	2337      	movs	r3, #55	; 0x37
     4b8:	60bb      	str	r3, [r7, #8]

	IAP_EXECUTE_CMD(au32Command, au32Result);
     4ba:	f107 0108 	add.w	r1, r7, #8
     4be:	f107 021c 	add.w	r2, r7, #28
     4c2:	4b09      	ldr	r3, [pc, #36]	; (4e8 <u32IAP_ReadBootVersion+0x3c>)
     4c4:	4608      	mov	r0, r1
     4c6:	4611      	mov	r1, r2
     4c8:	4798      	blx	r3

	*pu32Major = (au32Result[1] & 0x0000FF00UL) >> 8;
     4ca:	6a3b      	ldr	r3, [r7, #32]
     4cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
     4d0:	0a1a      	lsrs	r2, r3, #8
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	601a      	str	r2, [r3, #0]
	*pu32Minor = au32Result[1] & 0x000000FFUL;
     4d6:	6a3b      	ldr	r3, [r7, #32]
     4d8:	b2da      	uxtb	r2, r3
     4da:	683b      	ldr	r3, [r7, #0]
     4dc:	601a      	str	r2, [r3, #0]

	return ( au32Result[0] );
     4de:	69fb      	ldr	r3, [r7, #28]
}
     4e0:	4618      	mov	r0, r3
     4e2:	3730      	adds	r7, #48	; 0x30
     4e4:	46bd      	mov	sp, r7
     4e6:	bd80      	pop	{r7, pc}
     4e8:	1fff1ff1 	.word	0x1fff1ff1

000004ec <u32IAP_ReadSerialNumber>:
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
void u32IAP_ReadSerialNumber(uint32_t *pu32byte0, uint32_t *pu32byte1,
								 uint32_t *pu32byte2, uint32_t *pu32byte3)
{
     4ec:	b580      	push	{r7, lr}
     4ee:	b08e      	sub	sp, #56	; 0x38
     4f0:	af00      	add	r7, sp, #0
     4f2:	60f8      	str	r0, [r7, #12]
     4f4:	60b9      	str	r1, [r7, #8]
     4f6:	607a      	str	r2, [r7, #4]
     4f8:	603b      	str	r3, [r7, #0]
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	au32Command[0] = IAP_CMD_READ_SERIAL_NUMBER;
     4fa:	233a      	movs	r3, #58	; 0x3a
     4fc:	613b      	str	r3, [r7, #16]

	IAP_EXECUTE_CMD(au32Command, au32Result);
     4fe:	f107 0110 	add.w	r1, r7, #16
     502:	f107 0224 	add.w	r2, r7, #36	; 0x24
     506:	4b0a      	ldr	r3, [pc, #40]	; (530 <u32IAP_ReadSerialNumber+0x44>)
     508:	4608      	mov	r0, r1
     50a:	4611      	mov	r1, r2
     50c:	4798      	blx	r3

	*pu32byte0 = au32Result[0];
     50e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     510:	68fb      	ldr	r3, [r7, #12]
     512:	601a      	str	r2, [r3, #0]
	*pu32byte1 = au32Result[1];
     514:	6aba      	ldr	r2, [r7, #40]	; 0x28
     516:	68bb      	ldr	r3, [r7, #8]
     518:	601a      	str	r2, [r3, #0]
	*pu32byte2 = au32Result[2];
     51a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	601a      	str	r2, [r3, #0]
	*pu32byte3 = au32Result[3];
     520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     522:	683b      	ldr	r3, [r7, #0]
     524:	601a      	str	r2, [r3, #0]

	return;
     526:	bf00      	nop
}
     528:	3738      	adds	r7, #56	; 0x38
     52a:	46bd      	mov	sp, r7
     52c:	bd80      	pop	{r7, pc}
     52e:	bf00      	nop
     530:	1fff1ff1 	.word	0x1fff1ff1

00000534 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     534:	b480      	push	{r7}
     536:	b083      	sub	sp, #12
     538:	af00      	add	r7, sp, #0
     53a:	4603      	mov	r3, r0
     53c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     53e:	4908      	ldr	r1, [pc, #32]	; (560 <NVIC_EnableIRQ+0x2c>)
     540:	f997 3007 	ldrsb.w	r3, [r7, #7]
     544:	095b      	lsrs	r3, r3, #5
     546:	79fa      	ldrb	r2, [r7, #7]
     548:	f002 021f 	and.w	r2, r2, #31
     54c:	2001      	movs	r0, #1
     54e:	fa00 f202 	lsl.w	r2, r0, r2
     552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     556:	370c      	adds	r7, #12
     558:	46bd      	mov	sp, r7
     55a:	f85d 7b04 	ldr.w	r7, [sp], #4
     55e:	4770      	bx	lr
     560:	e000e100 	.word	0xe000e100

00000564 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     564:	b480      	push	{r7}
     566:	b083      	sub	sp, #12
     568:	af00      	add	r7, sp, #0
     56a:	4603      	mov	r3, r0
     56c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     56e:	4909      	ldr	r1, [pc, #36]	; (594 <NVIC_DisableIRQ+0x30>)
     570:	f997 3007 	ldrsb.w	r3, [r7, #7]
     574:	095b      	lsrs	r3, r3, #5
     576:	79fa      	ldrb	r2, [r7, #7]
     578:	f002 021f 	and.w	r2, r2, #31
     57c:	2001      	movs	r0, #1
     57e:	fa00 f202 	lsl.w	r2, r0, r2
     582:	3320      	adds	r3, #32
     584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     588:	370c      	adds	r7, #12
     58a:	46bd      	mov	sp, r7
     58c:	f85d 7b04 	ldr.w	r7, [sp], #4
     590:	4770      	bx	lr
     592:	bf00      	nop
     594:	e000e100 	.word	0xe000e100

00000598 <main>:
void enter_serial_isp( void );
int CheckApplicationImageValidity( uint32_t* pImageAddr );



int main(void) {
     598:	b580      	push	{r7, lr}
     59a:	b082      	sub	sp, #8
     59c:	af00      	add	r7, sp, #0


	uint32_t imageAddr;

	SystemInit();
     59e:	f001 f971 	bl	1884 <SystemInit>
	LPC_SC->CLKSRCSEL |= 0x01;//0x01;
     5a2:	4a19      	ldr	r2, [pc, #100]	; (608 <main+0x70>)
     5a4:	4b18      	ldr	r3, [pc, #96]	; (608 <main+0x70>)
     5a6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
     5aa:	f043 0301 	orr.w	r3, r3, #1
     5ae:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	LPC_SC->PLL0CFG   |= 0x01; // Select external osc. as main clock.
     5b2:	4a15      	ldr	r2, [pc, #84]	; (608 <main+0x70>)
     5b4:	4b14      	ldr	r3, [pc, #80]	; (608 <main+0x70>)
     5b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
     5ba:	f043 0301 	orr.w	r3, r3, #1
     5be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	LPC_SC->CCLKCFG    = 0x03; // Main PLL is divided by 8
     5c2:	4b11      	ldr	r3, [pc, #68]	; (608 <main+0x70>)
     5c4:	2203      	movs	r2, #3
     5c6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	SystemCoreClockUpdate();
     5ca:	f001 f905 	bl	17d8 <SystemCoreClockUpdate>

	UARTInit(PORT_TRACE, 115200);
     5ce:	2000      	movs	r0, #0
     5d0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     5d4:	f000 fccc 	bl	f70 <UARTInit>

	TraceEndl ("Bootloader is starting");
     5d8:	480c      	ldr	r0, [pc, #48]	; (60c <main+0x74>)
     5da:	f000 fa5f 	bl	a9c <TraceEndl>
	TraceEndl ("Checking application image's validity");
     5de:	480c      	ldr	r0, [pc, #48]	; (610 <main+0x78>)
     5e0:	f000 fa5c 	bl	a9c <TraceEndl>

	// Check to see if there is a user application in the LPC1768's flash memory.
	if( CheckApplicationImageValidity( &imageAddr ) )
     5e4:	1d3b      	adds	r3, r7, #4
     5e6:	4618      	mov	r0, r3
     5e8:	f000 f816 	bl	618 <CheckApplicationImageValidity>
     5ec:	4603      	mov	r3, r0
     5ee:	2b00      	cmp	r3, #0
     5f0:	d003      	beq.n	5fa <main+0x62>
	{
		ExecuteApplicationImage( imageAddr );
     5f2:	687b      	ldr	r3, [r7, #4]
     5f4:	4618      	mov	r0, r3
     5f6:	f000 fa25 	bl	a44 <ExecuteApplicationImage>
	}

	TraceEndl ("Unable to locate any valid image to run");
     5fa:	4806      	ldr	r0, [pc, #24]	; (614 <main+0x7c>)
     5fc:	f000 fa4e 	bl	a9c <TraceEndl>

	// Valid application does not exists. Get one from UART 0
	enter_serial_isp();
     600:	f000 f954 	bl	8ac <enter_serial_isp>

	while ( 1 );	// assert should not get here
     604:	e7fe      	b.n	604 <main+0x6c>
     606:	bf00      	nop
     608:	400fc000 	.word	0x400fc000
     60c:	000041e4 	.word	0x000041e4
     610:	000041fc 	.word	0x000041fc
     614:	00004224 	.word	0x00004224

00000618 <CheckApplicationImageValidity>:
** Returned value:	TRUE if application is valid
** 					FALSE   not valid
**
******************************************************************************/
int CheckApplicationImageValidity( uint32_t* pImageAddr )
{
     618:	b580      	push	{r7, lr}
     61a:	b0ba      	sub	sp, #232	; 0xe8
     61c:	af00      	add	r7, sp, #0
     61e:	6078      	str	r0, [r7, #4]
	uint32_t	result, reason;
	uint32_t 	priImageVer = 0;
     620:	2300      	movs	r3, #0
     622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	uint32_t 	secImageVer = 0;
     626:	2300      	movs	r3, #0
     628:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	unsigned char isPriBlank  = FALSE;
     62c:	2300      	movs	r3, #0
     62e:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	unsigned char isSecBlank  = FALSE;
     632:	2300      	movs	r3, #0
     634:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
	unsigned char isPriValid  = FALSE;
     638:	2300      	movs	r3, #0
     63a:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
	unsigned char isSecValid  = FALSE;
     63e:	2300      	movs	r3, #0
     640:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4

	char buffer[200];
	int count;


	result = u32IAP_BlankCheckSectors( PRIMARY_IMAGE_START_SEC,
     644:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
     648:	2010      	movs	r0, #16
     64a:	2110      	movs	r1, #16
     64c:	461a      	mov	r2, r3
     64e:	f7ff fee7 	bl	420 <u32IAP_BlankCheckSectors>
     652:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
								       PRIMARY_IMAGE_START_SEC, &reason );
	if( result != IAP_STA_SECTOR_NOT_BLANK )
     656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
     65a:	2b08      	cmp	r3, #8
     65c:	d002      	beq.n	664 <CheckApplicationImageValidity+0x4c>
	{
		isPriBlank = TRUE;
     65e:	2301      	movs	r3, #1
     660:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	}

	result = u32IAP_BlankCheckSectors( SECONDARY_IMAGE_START_SEC,
     664:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
     668:	2016      	movs	r0, #22
     66a:	2116      	movs	r1, #22
     66c:	461a      	mov	r2, r3
     66e:	f7ff fed7 	bl	420 <u32IAP_BlankCheckSectors>
     672:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
			                           SECONDARY_IMAGE_START_SEC, &reason );
	if( result != IAP_STA_SECTOR_NOT_BLANK )
     676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
     67a:	2b08      	cmp	r3, #8
     67c:	d002      	beq.n	684 <CheckApplicationImageValidity+0x6c>
	{
		isSecBlank = TRUE;
     67e:	2301      	movs	r3, #1
     680:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
	}

	// check versions
	priImageVer	= *( (uint32_t *) (PRIMARY_IMAGE_LOAD_ADDR   + IMAGE_VERSION_OFFSET) );
     684:	4b78      	ldr	r3, [pc, #480]	; (868 <CheckApplicationImageValidity+0x250>)
     686:	681b      	ldr	r3, [r3, #0]
     688:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	secImageVer	= *( (uint32_t *) (SECONDARY_IMAGE_LOAD_ADDR + IMAGE_VERSION_OFFSET) );
     68c:	4b77      	ldr	r3, [pc, #476]	; (86c <CheckApplicationImageValidity+0x254>)
     68e:	681b      	ldr	r3, [r3, #0]
     690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8


	// size of the image is placed in an image at offset IMAGE_SIZE_OFFSET and when an
	// image is flashed to validate the image the image size is written to

	if( !isPriBlank || (priImageVer != 0xFFFFFFFF) )
     694:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
     698:	2b00      	cmp	r3, #0
     69a:	d004      	beq.n	6a6 <CheckApplicationImageValidity+0x8e>
     69c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
     6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
     6a4:	d016      	beq.n	6d4 <CheckApplicationImageValidity+0xbc>
	{
		/* validation for the primary is only check against 0xFFFFFFFF */
		if( (*( (uint32_t *) (PRIMARY_IMAGE_LOAD_ADDR + IMAGE_SIZE_OFFSET))) != 0xFFFFFFFF )
     6a6:	4b72      	ldr	r3, [pc, #456]	; (870 <CheckApplicationImageValidity+0x258>)
     6a8:	681b      	ldr	r3, [r3, #0]
     6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
     6ae:	d002      	beq.n	6b6 <CheckApplicationImageValidity+0x9e>
			// (*( (uint32_t *) (PRIMARY_IMAGE_LOAD_ADDR + IMAGE_SIZE_CHECK_OFFSET))) )
				isPriValid = TRUE;
     6b0:	2301      	movs	r3, #1
     6b2:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5

		sprintf(buffer,"Primary Image sizes (0x%X == 0x%X)\r",
     6b6:	4b6e      	ldr	r3, [pc, #440]	; (870 <CheckApplicationImageValidity+0x258>)
     6b8:	681a      	ldr	r2, [r3, #0]
     6ba:	4b6e      	ldr	r3, [pc, #440]	; (874 <CheckApplicationImageValidity+0x25c>)
     6bc:	681b      	ldr	r3, [r3, #0]
     6be:	f107 0108 	add.w	r1, r7, #8
     6c2:	4608      	mov	r0, r1
     6c4:	496c      	ldr	r1, [pc, #432]	; (878 <CheckApplicationImageValidity+0x260>)
     6c6:	f001 f98f 	bl	19e8 <sprintf>
				*( (uint32_t *) (PRIMARY_IMAGE_LOAD_ADDR + IMAGE_SIZE_OFFSET)),
				*( (uint32_t *) (PRIMARY_IMAGE_LOAD_ADDR + IMAGE_SIZE_CHECK_OFFSET))
						);
		TraceEndl (buffer);
     6ca:	f107 0308 	add.w	r3, r7, #8
     6ce:	4618      	mov	r0, r3
     6d0:	f000 f9e4 	bl	a9c <TraceEndl>
	}

	if( !isSecBlank || (secImageVer != 0xFFFFFFFF) )
     6d4:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
     6d8:	2b00      	cmp	r3, #0
     6da:	d004      	beq.n	6e6 <CheckApplicationImageValidity+0xce>
     6dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
     6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
     6e4:	d019      	beq.n	71a <CheckApplicationImageValidity+0x102>
	{
		count = sprintf(buffer,"Secondary Image sizes (0x%X == 0x%X)\r",
     6e6:	4b65      	ldr	r3, [pc, #404]	; (87c <CheckApplicationImageValidity+0x264>)
     6e8:	681a      	ldr	r2, [r3, #0]
     6ea:	4b65      	ldr	r3, [pc, #404]	; (880 <CheckApplicationImageValidity+0x268>)
     6ec:	681b      	ldr	r3, [r3, #0]
     6ee:	f107 0108 	add.w	r1, r7, #8
     6f2:	4608      	mov	r0, r1
     6f4:	4963      	ldr	r1, [pc, #396]	; (884 <CheckApplicationImageValidity+0x26c>)
     6f6:	f001 f977 	bl	19e8 <sprintf>
     6fa:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
				*( (uint32_t *) (SECONDARY_IMAGE_LOAD_ADDR + IMAGE_SIZE_OFFSET)),
				*( (uint32_t *) (SECONDARY_IMAGE_LOAD_ADDR + IMAGE_SIZE_CHECK_OFFSET))
						);
		TraceEndl(buffer);
     6fe:	f107 0308 	add.w	r3, r7, #8
     702:	4618      	mov	r0, r3
     704:	f000 f9ca 	bl	a9c <TraceEndl>
		/* if size is the same for both offsets, the image is valid */
		if( (*( (uint32_t *) (SECONDARY_IMAGE_LOAD_ADDR + IMAGE_SIZE_OFFSET))) ==
     708:	4b5c      	ldr	r3, [pc, #368]	; (87c <CheckApplicationImageValidity+0x264>)
     70a:	681a      	ldr	r2, [r3, #0]
			(*( (uint32_t *) (SECONDARY_IMAGE_LOAD_ADDR + IMAGE_SIZE_CHECK_OFFSET))) )
     70c:	4b5c      	ldr	r3, [pc, #368]	; (880 <CheckApplicationImageValidity+0x268>)
     70e:	681b      	ldr	r3, [r3, #0]
				*( (uint32_t *) (SECONDARY_IMAGE_LOAD_ADDR + IMAGE_SIZE_OFFSET)),
				*( (uint32_t *) (SECONDARY_IMAGE_LOAD_ADDR + IMAGE_SIZE_CHECK_OFFSET))
						);
		TraceEndl(buffer);
		/* if size is the same for both offsets, the image is valid */
		if( (*( (uint32_t *) (SECONDARY_IMAGE_LOAD_ADDR + IMAGE_SIZE_OFFSET))) ==
     710:	429a      	cmp	r2, r3
     712:	d102      	bne.n	71a <CheckApplicationImageValidity+0x102>
			(*( (uint32_t *) (SECONDARY_IMAGE_LOAD_ADDR + IMAGE_SIZE_CHECK_OFFSET))) )
				isSecValid = TRUE;
     714:	2301      	movs	r3, #1
     716:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
	}

	// Both images are not valid so return
	if( !isPriValid && !isSecValid )
     71a:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
     71e:	2b00      	cmp	r3, #0
     720:	d10b      	bne.n	73a <CheckApplicationImageValidity+0x122>
     722:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
     726:	2b00      	cmp	r3, #0
     728:	d107      	bne.n	73a <CheckApplicationImageValidity+0x122>
	{
		TraceEndl ("Both images are invalid");
     72a:	4857      	ldr	r0, [pc, #348]	; (888 <CheckApplicationImageValidity+0x270>)
     72c:	f000 f9b6 	bl	a9c <TraceEndl>
		*pImageAddr = 0;
     730:	687b      	ldr	r3, [r7, #4]
     732:	2200      	movs	r2, #0
     734:	601a      	str	r2, [r3, #0]
		return ( FALSE );
     736:	2300      	movs	r3, #0
     738:	e092      	b.n	860 <CheckApplicationImageValidity+0x248>
	}
	count = sprintf(buffer,"Primary Image version = 0x%X\r", priImageVer );
     73a:	f107 0308 	add.w	r3, r7, #8
     73e:	4618      	mov	r0, r3
     740:	4952      	ldr	r1, [pc, #328]	; (88c <CheckApplicationImageValidity+0x274>)
     742:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
     746:	f001 f94f 	bl	19e8 <sprintf>
     74a:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
	TraceEndl (buffer);
     74e:	f107 0308 	add.w	r3, r7, #8
     752:	4618      	mov	r0, r3
     754:	f000 f9a2 	bl	a9c <TraceEndl>

	count = sprintf(buffer,"Secondary Image version = 0x%X\r", secImageVer );
     758:	f107 0308 	add.w	r3, r7, #8
     75c:	4618      	mov	r0, r3
     75e:	494c      	ldr	r1, [pc, #304]	; (890 <CheckApplicationImageValidity+0x278>)
     760:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
     764:	f001 f940 	bl	19e8 <sprintf>
     768:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
	TraceEndl (buffer);
     76c:	f107 0308 	add.w	r3, r7, #8
     770:	4618      	mov	r0, r3
     772:	f000 f993 	bl	a9c <TraceEndl>

	TraceEndl ("Checking CRC");
     776:	4847      	ldr	r0, [pc, #284]	; (894 <CheckApplicationImageValidity+0x27c>)
     778:	f000 f990 	bl	a9c <TraceEndl>
	for ( count = 0; count < 100000000; count++)
     77c:	2300      	movs	r3, #0
     77e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
     782:	e015      	b.n	7b0 <CheckApplicationImageValidity+0x198>
		if( count % 1000000 == 0)
     784:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
     788:	4b43      	ldr	r3, [pc, #268]	; (898 <CheckApplicationImageValidity+0x280>)
     78a:	fb83 1302 	smull	r1, r3, r3, r2
     78e:	1499      	asrs	r1, r3, #18
     790:	17d3      	asrs	r3, r2, #31
     792:	1acb      	subs	r3, r1, r3
     794:	4941      	ldr	r1, [pc, #260]	; (89c <CheckApplicationImageValidity+0x284>)
     796:	fb01 f303 	mul.w	r3, r1, r3
     79a:	1ad3      	subs	r3, r2, r3
     79c:	2b00      	cmp	r3, #0
     79e:	d102      	bne.n	7a6 <CheckApplicationImageValidity+0x18e>
			TracePutc( '.' );
     7a0:	202e      	movs	r0, #46	; 0x2e
     7a2:	f000 f993 	bl	acc <TracePutc>

	count = sprintf(buffer,"Secondary Image version = 0x%X\r", secImageVer );
	TraceEndl (buffer);

	TraceEndl ("Checking CRC");
	for ( count = 0; count < 100000000; count++)
     7a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
     7aa:	3301      	adds	r3, #1
     7ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
     7b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
     7b4:	4a3a      	ldr	r2, [pc, #232]	; (8a0 <CheckApplicationImageValidity+0x288>)
     7b6:	4293      	cmp	r3, r2
     7b8:	dde4      	ble.n	784 <CheckApplicationImageValidity+0x16c>
		if( count % 1000000 == 0)
			TracePutc( '.' );

	count = sprintf(buffer,"Primary Image type = %d, version = 0x%02X\r",
     7ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
     7be:	0e1a      	lsrs	r2, r3, #24
     7c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
     7c4:	b2db      	uxtb	r3, r3
     7c6:	f107 0108 	add.w	r1, r7, #8
     7ca:	4608      	mov	r0, r1
     7cc:	4935      	ldr	r1, [pc, #212]	; (8a4 <CheckApplicationImageValidity+0x28c>)
     7ce:	f001 f90b 	bl	19e8 <sprintf>
     7d2:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
			                                (priImageVer & 0xFF000000) >> 24,
											(priImageVer & 0x000000FF));
	TraceEndl( buffer );
     7d6:	f107 0308 	add.w	r3, r7, #8
     7da:	4618      	mov	r0, r3
     7dc:	f000 f95e 	bl	a9c <TraceEndl>

	sprintf(buffer,"Secondary Image type = %d, version = 0x%02X\r",
     7e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
     7e4:	0e1a      	lsrs	r2, r3, #24
     7e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
     7ea:	b2db      	uxtb	r3, r3
     7ec:	f107 0108 	add.w	r1, r7, #8
     7f0:	4608      	mov	r0, r1
     7f2:	492d      	ldr	r1, [pc, #180]	; (8a8 <CheckApplicationImageValidity+0x290>)
     7f4:	f001 f8f8 	bl	19e8 <sprintf>
			                                (secImageVer & 0xFF000000) >> 24,
											(secImageVer & 0x000000FF));
	TraceEndl( buffer );
     7f8:	f107 0308 	add.w	r3, r7, #8
     7fc:	4618      	mov	r0, r3
     7fe:	f000 f94d 	bl	a9c <TraceEndl>

    // Primary only valid
	if( isPriValid && !isSecValid )
     802:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
     806:	2b00      	cmp	r3, #0
     808:	d009      	beq.n	81e <CheckApplicationImageValidity+0x206>
     80a:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
     80e:	2b00      	cmp	r3, #0
     810:	d105      	bne.n	81e <CheckApplicationImageValidity+0x206>
	{
		*pImageAddr = PRIMARY_IMAGE_LOAD_ADDR;
     812:	687b      	ldr	r3, [r7, #4]
     814:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     818:	601a      	str	r2, [r3, #0]
		return ( TRUE );
     81a:	2301      	movs	r3, #1
     81c:	e020      	b.n	860 <CheckApplicationImageValidity+0x248>
	}

	// Secondary only valid
	if( !isPriValid && isSecValid )
     81e:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
     822:	2b00      	cmp	r3, #0
     824:	d109      	bne.n	83a <CheckApplicationImageValidity+0x222>
     826:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
     82a:	2b00      	cmp	r3, #0
     82c:	d005      	beq.n	83a <CheckApplicationImageValidity+0x222>
	{
		*pImageAddr = SECONDARY_IMAGE_LOAD_ADDR;
     82e:	687b      	ldr	r3, [r7, #4]
     830:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     834:	601a      	str	r2, [r3, #0]
		return ( TRUE );
     836:	2301      	movs	r3, #1
     838:	e012      	b.n	860 <CheckApplicationImageValidity+0x248>
	}

	// Both valid their types
	if( (priImageVer & 0x000000FF) >= (secImageVer & 0x000000FF) )
     83a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
     83e:	b2da      	uxtb	r2, r3
     840:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
     844:	b2db      	uxtb	r3, r3
     846:	429a      	cmp	r2, r3
     848:	d305      	bcc.n	856 <CheckApplicationImageValidity+0x23e>
	{
		*pImageAddr = PRIMARY_IMAGE_LOAD_ADDR;
     84a:	687b      	ldr	r3, [r7, #4]
     84c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     850:	601a      	str	r2, [r3, #0]
		return ( TRUE );
     852:	2301      	movs	r3, #1
     854:	e004      	b.n	860 <CheckApplicationImageValidity+0x248>
	}else
	{
		*pImageAddr = SECONDARY_IMAGE_LOAD_ADDR;
     856:	687b      	ldr	r3, [r7, #4]
     858:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     85c:	601a      	str	r2, [r3, #0]
		return ( TRUE );
     85e:	2301      	movs	r3, #1
#endif

	{
	    return (TRUE);
	}
}
     860:	4618      	mov	r0, r3
     862:	37e8      	adds	r7, #232	; 0xe8
     864:	46bd      	mov	sp, r7
     866:	bd80      	pop	{r7, pc}
     868:	000102f8 	.word	0x000102f8
     86c:	000402f8 	.word	0x000402f8
     870:	000102f4 	.word	0x000102f4
     874:	0003fff8 	.word	0x0003fff8
     878:	0000424c 	.word	0x0000424c
     87c:	000402f4 	.word	0x000402f4
     880:	0006fff8 	.word	0x0006fff8
     884:	00004270 	.word	0x00004270
     888:	00004298 	.word	0x00004298
     88c:	000042b0 	.word	0x000042b0
     890:	000042d0 	.word	0x000042d0
     894:	000042f0 	.word	0x000042f0
     898:	431bde83 	.word	0x431bde83
     89c:	000f4240 	.word	0x000f4240
     8a0:	05f5e0ff 	.word	0x05f5e0ff
     8a4:	00004300 	.word	0x00004300
     8a8:	0000432c 	.word	0x0000432c

000008ac <enter_serial_isp>:

void enter_serial_isp( void ) {
     8ac:	b5b0      	push	{r4, r5, r7, lr}
     8ae:	b0ba      	sub	sp, #232	; 0xe8
     8b0:	af04      	add	r7, sp, #16
	char buffer[200];
	uint32_t ints[4];


	cmd = MENU;
     8b2:	4b59      	ldr	r3, [pc, #356]	; (a18 <enter_serial_isp+0x16c>)
     8b4:	2201      	movs	r2, #1
     8b6:	701a      	strb	r2, [r3, #0]
	while (1) {

		switch (cmd) {
     8b8:	4b57      	ldr	r3, [pc, #348]	; (a18 <enter_serial_isp+0x16c>)
     8ba:	781b      	ldrb	r3, [r3, #0]
     8bc:	2b04      	cmp	r3, #4
     8be:	d8fb      	bhi.n	8b8 <enter_serial_isp+0xc>
     8c0:	a201      	add	r2, pc, #4	; (adr r2, 8c8 <enter_serial_isp+0x1c>)
     8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     8c6:	bf00      	nop
     8c8:	000008dd 	.word	0x000008dd
     8cc:	000008e5 	.word	0x000008e5
     8d0:	000009cd 	.word	0x000009cd
     8d4:	000009f5 	.word	0x000009f5
     8d8:	00000a0f 	.word	0x00000a0f
		case READY:


			cmd = ERASE_FLASH;
     8dc:	4b4e      	ldr	r3, [pc, #312]	; (a18 <enter_serial_isp+0x16c>)
     8de:	2202      	movs	r2, #2
     8e0:	701a      	strb	r2, [r3, #0]
			break;
     8e2:	e098      	b.n	a16 <enter_serial_isp+0x16a>

		case MENU:

			NVIC_DisableIRQ(UART0_IRQn);
     8e4:	2005      	movs	r0, #5
     8e6:	f7ff fe3d 	bl	564 <NVIC_DisableIRQ>
			/*	Print Boot Version onto the LCD */
			if (u32IAP_ReadBootVersion(&ints[0], &ints[1])
     8ea:	463a      	mov	r2, r7
     8ec:	463b      	mov	r3, r7
     8ee:	3304      	adds	r3, #4
     8f0:	4610      	mov	r0, r2
     8f2:	4619      	mov	r1, r3
     8f4:	f7ff fdda 	bl	4ac <u32IAP_ReadBootVersion>
     8f8:	4603      	mov	r3, r0
     8fa:	2b00      	cmp	r3, #0
     8fc:	d10f      	bne.n	91e <enter_serial_isp+0x72>
					== IAP_STA_CMD_SUCCESS) {

				sprintf(buffer, "Boot Code version %d.%d", ints[0],
     8fe:	683a      	ldr	r2, [r7, #0]
     900:	687b      	ldr	r3, [r7, #4]
     902:	f107 0110 	add.w	r1, r7, #16
     906:	4608      	mov	r0, r1
     908:	4944      	ldr	r1, [pc, #272]	; (a1c <enter_serial_isp+0x170>)
     90a:	f001 f86d 	bl	19e8 <sprintf>
						ints[1]);
				NVIC_EnableIRQ(UART0_IRQn);
     90e:	2005      	movs	r0, #5
     910:	f7ff fe10 	bl	534 <NVIC_EnableIRQ>
				TraceEndl(buffer);
     914:	f107 0310 	add.w	r3, r7, #16
     918:	4618      	mov	r0, r3
     91a:	f000 f8bf 	bl	a9c <TraceEndl>
			}

			NVIC_DisableIRQ(UART0_IRQn);
     91e:	2005      	movs	r0, #5
     920:	f7ff fe20 	bl	564 <NVIC_DisableIRQ>

			if (u32IAP_ReadPartID(&ints[0]) == IAP_STA_CMD_SUCCESS) {
     924:	463b      	mov	r3, r7
     926:	4618      	mov	r0, r3
     928:	f7ff fda8 	bl	47c <u32IAP_ReadPartID>
     92c:	4603      	mov	r3, r0
     92e:	2b00      	cmp	r3, #0
     930:	d118      	bne.n	964 <enter_serial_isp+0xb8>
				snprintf((char *) string, MAX_STRING_SIZE, "Part ID: %d (%#x)",
     932:	683c      	ldr	r4, [r7, #0]
     934:	683b      	ldr	r3, [r7, #0]
     936:	9300      	str	r3, [sp, #0]
     938:	4839      	ldr	r0, [pc, #228]	; (a20 <enter_serial_isp+0x174>)
     93a:	2132      	movs	r1, #50	; 0x32
     93c:	4a39      	ldr	r2, [pc, #228]	; (a24 <enter_serial_isp+0x178>)
     93e:	4623      	mov	r3, r4
     940:	f001 fd0a 	bl	2358 <snprintf>
						ints[0], ints[0]);

				sprintf(buffer, "Part ID: %d (%#x)", ints[0], ints[0]);
     944:	683a      	ldr	r2, [r7, #0]
     946:	683b      	ldr	r3, [r7, #0]
     948:	f107 0110 	add.w	r1, r7, #16
     94c:	4608      	mov	r0, r1
     94e:	4935      	ldr	r1, [pc, #212]	; (a24 <enter_serial_isp+0x178>)
     950:	f001 f84a 	bl	19e8 <sprintf>
				NVIC_EnableIRQ(UART0_IRQn);
     954:	2005      	movs	r0, #5
     956:	f7ff fded 	bl	534 <NVIC_EnableIRQ>
				TraceEndl(buffer);
     95a:	f107 0310 	add.w	r3, r7, #16
     95e:	4618      	mov	r0, r3
     960:	f000 f89c 	bl	a9c <TraceEndl>
			}

			NVIC_DisableIRQ(UART0_IRQn);
     964:	2005      	movs	r0, #5
     966:	f7ff fdfd 	bl	564 <NVIC_DisableIRQ>

			u32IAP_ReadSerialNumber(&ints[0], &ints[1], &ints[2], &ints[3]);
     96a:	4638      	mov	r0, r7
     96c:	463b      	mov	r3, r7
     96e:	1d19      	adds	r1, r3, #4
     970:	463b      	mov	r3, r7
     972:	f103 0208 	add.w	r2, r3, #8
     976:	463b      	mov	r3, r7
     978:	330c      	adds	r3, #12
     97a:	f7ff fdb7 	bl	4ec <u32IAP_ReadSerialNumber>
			snprintf((char *) string, MAX_STRING_SIZE,
     97e:	683c      	ldr	r4, [r7, #0]
     980:	6879      	ldr	r1, [r7, #4]
     982:	68ba      	ldr	r2, [r7, #8]
     984:	68fb      	ldr	r3, [r7, #12]
     986:	9100      	str	r1, [sp, #0]
     988:	9201      	str	r2, [sp, #4]
     98a:	9302      	str	r3, [sp, #8]
     98c:	4824      	ldr	r0, [pc, #144]	; (a20 <enter_serial_isp+0x174>)
     98e:	2132      	movs	r1, #50	; 0x32
     990:	4a25      	ldr	r2, [pc, #148]	; (a28 <enter_serial_isp+0x17c>)
     992:	4623      	mov	r3, r4
     994:	f001 fce0 	bl	2358 <snprintf>
					"Serial #: %08X:%08X:%08X:%08X", ints[0], ints[1], ints[2],
					ints[3]);

			sprintf(buffer, "Serial #: %08X:%08X:%08X:%08X\n", ints[0],
     998:	683d      	ldr	r5, [r7, #0]
     99a:	687c      	ldr	r4, [r7, #4]
     99c:	68ba      	ldr	r2, [r7, #8]
     99e:	68fb      	ldr	r3, [r7, #12]
     9a0:	f107 0110 	add.w	r1, r7, #16
     9a4:	9200      	str	r2, [sp, #0]
     9a6:	9301      	str	r3, [sp, #4]
     9a8:	4608      	mov	r0, r1
     9aa:	4920      	ldr	r1, [pc, #128]	; (a2c <enter_serial_isp+0x180>)
     9ac:	462a      	mov	r2, r5
     9ae:	4623      	mov	r3, r4
     9b0:	f001 f81a 	bl	19e8 <sprintf>
					ints[1], ints[2], ints[3]);
			NVIC_EnableIRQ(UART0_IRQn);
     9b4:	2005      	movs	r0, #5
     9b6:	f7ff fdbd 	bl	534 <NVIC_EnableIRQ>
			TraceEndl(buffer);
     9ba:	f107 0310 	add.w	r3, r7, #16
     9be:	4618      	mov	r0, r3
     9c0:	f000 f86c 	bl	a9c <TraceEndl>


			cmd = READY;
     9c4:	4b14      	ldr	r3, [pc, #80]	; (a18 <enter_serial_isp+0x16c>)
     9c6:	2200      	movs	r2, #0
     9c8:	701a      	strb	r2, [r3, #0]
			break;
     9ca:	e024      	b.n	a16 <enter_serial_isp+0x16a>

		case ERASE_FLASH:
			NVIC_DisableIRQ(UART0_IRQn);
     9cc:	2005      	movs	r0, #5
     9ce:	f7ff fdc9 	bl	564 <NVIC_DisableIRQ>
			/*	Erase the images stored in flash */
			if ((u32IAP_PrepareSectors(16, 20) == IAP_STA_CMD_SUCCESS)
     9d2:	2010      	movs	r0, #16
     9d4:	2114      	movs	r1, #20
     9d6:	f7ff fccf 	bl	378 <u32IAP_PrepareSectors>
     9da:	4603      	mov	r3, r0
     9dc:	2b00      	cmp	r3, #0
     9de:	d103      	bne.n	9e8 <enter_serial_isp+0x13c>
					&& (u32IAP_EraseSectors(16, 20) == IAP_STA_CMD_SUCCESS)) {
     9e0:	2010      	movs	r0, #16
     9e2:	2114      	movs	r1, #20
     9e4:	f7ff fcec 	bl	3c0 <u32IAP_EraseSectors>


			} else {

			}
			NVIC_EnableIRQ(UART0_IRQn);
     9e8:	2005      	movs	r0, #5
     9ea:	f7ff fda3 	bl	534 <NVIC_EnableIRQ>
			TraceEndl("ERASE_FLASH");
     9ee:	4810      	ldr	r0, [pc, #64]	; (a30 <enter_serial_isp+0x184>)
     9f0:	f000 f854 	bl	a9c <TraceEndl>

		case FLASH_IMG:
			/*	Clear the received data counter using in the load_mage function */
			received_data = 0;
     9f4:	4b0f      	ldr	r3, [pc, #60]	; (a34 <enter_serial_isp+0x188>)
     9f6:	2200      	movs	r2, #0
     9f8:	601a      	str	r2, [r3, #0]

			/*	Store a new image into flash */
			vXmodem1k_Client(&load_image);
     9fa:	480f      	ldr	r0, [pc, #60]	; (a38 <enter_serial_isp+0x18c>)
     9fc:	f000 fd9c 	bl	1538 <vXmodem1k_Client>

			TraceEndl( "FLASH_IMG");
     a00:	480e      	ldr	r0, [pc, #56]	; (a3c <enter_serial_isp+0x190>)
     a02:	f000 f84b 	bl	a9c <TraceEndl>
			cmd = SHOW;
     a06:	4b04      	ldr	r3, [pc, #16]	; (a18 <enter_serial_isp+0x16c>)
     a08:	2204      	movs	r2, #4
     a0a:	701a      	strb	r2, [r3, #0]
			break;
     a0c:	e003      	b.n	a16 <enter_serial_isp+0x16a>

		case SHOW:

			TraceEndl( "SHOW");
     a0e:	480c      	ldr	r0, [pc, #48]	; (a40 <enter_serial_isp+0x194>)
     a10:	f000 f844 	bl	a9c <TraceEndl>
			while (1)
				;
     a14:	e7fe      	b.n	a14 <enter_serial_isp+0x168>
			cmd = READY;
			break;
		}

	}
     a16:	e74f      	b.n	8b8 <enter_serial_isp+0xc>
     a18:	1000044c 	.word	0x1000044c
     a1c:	0000435c 	.word	0x0000435c
     a20:	10000008 	.word	0x10000008
     a24:	00004374 	.word	0x00004374
     a28:	00004388 	.word	0x00004388
     a2c:	000043a8 	.word	0x000043a8
     a30:	000043c8 	.word	0x000043c8
     a34:	1000003c 	.word	0x1000003c
     a38:	00000a75 	.word	0x00000a75
     a3c:	000043d4 	.word	0x000043d4
     a40:	000043e0 	.word	0x000043e0

00000a44 <ExecuteApplicationImage>:
}


void ExecuteApplicationImage( unsigned int start_address )
{
     a44:	b580      	push	{r7, lr}
     a46:	b084      	sub	sp, #16
     a48:	af00      	add	r7, sp, #0
     a4a:	6078      	str	r0, [r7, #4]
	unsigned *p;	// used for loading address of reset handler from user flash

	/* Change the Vector Table to the
	in case the user application uses interrupts */

	SCB->VTOR = (start_address & 0x1FFFFF80);
     a4c:	4a08      	ldr	r2, [pc, #32]	; (a70 <ExecuteApplicationImage+0x2c>)
     a4e:	687b      	ldr	r3, [r7, #4]
     a50:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
     a54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     a58:	6093      	str	r3, [r2, #8]

	// Load contents of second word of user flash - the reset handler address
	// in the applications vector table
	p = (unsigned *)(start_address + 4);
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	3304      	adds	r3, #4
     a5e:	60fb      	str	r3, [r7, #12]

	// Set user_code_entry to be the address contained in that second word
	// of user flash
	user_code_entry = (void *) *p;
     a60:	68fb      	ldr	r3, [r7, #12]
     a62:	681b      	ldr	r3, [r3, #0]
     a64:	60bb      	str	r3, [r7, #8]

	// Jump to user application
    user_code_entry();
     a66:	68bb      	ldr	r3, [r7, #8]
     a68:	4798      	blx	r3
}
     a6a:	3710      	adds	r7, #16
     a6c:	46bd      	mov	sp, r7
     a6e:	bd80      	pop	{r7, pc}
     a70:	e000ed00 	.word	0xe000ed00

00000a74 <load_image>:

static uint32_t load_image(uint8_t *data, uint16_t length){
     a74:	b580      	push	{r7, lr}
     a76:	b082      	sub	sp, #8
     a78:	af00      	add	r7, sp, #0
     a7a:	6078      	str	r0, [r7, #4]
     a7c:	460b      	mov	r3, r1
     a7e:	807b      	strh	r3, [r7, #2]

	if(length > 0)
     a80:	887b      	ldrh	r3, [r7, #2]
     a82:	2b00      	cmp	r3, #0
     a84:	d005      	beq.n	a92 <load_image+0x1e>
	{
		/*	Prepare Sectors to be flashed */
		// TODO arrange sectors for primary image
		if(u32IAP_PrepareSectors(16, 20) == IAP_STA_CMD_SUCCESS){
     a86:	2010      	movs	r0, #16
     a88:	2114      	movs	r1, #20
     a8a:	f7ff fc75 	bl	378 <u32IAP_PrepareSectors>
//				}
//			}
		}
		/*	Error in the IAP functions */
		//  GLCD_DisplayString(5, 26, 0, "FAIL (RESET & ERASE IMAGE)");
		return ( 0 );
     a8e:	2300      	movs	r3, #0
     a90:	e000      	b.n	a94 <load_image+0x20>

	}else{
		return ( 0 );
     a92:	2300      	movs	r3, #0
	}
}
     a94:	4618      	mov	r0, r3
     a96:	3708      	adds	r7, #8
     a98:	46bd      	mov	sp, r7
     a9a:	bd80      	pop	{r7, pc}

00000a9c <TraceEndl>:
{
	UARTSend(PORT_TRACE, (unsigned char*)msg, strlen(msg));
}

void TraceEndl( char* msg)
{
     a9c:	b580      	push	{r7, lr}
     a9e:	b082      	sub	sp, #8
     aa0:	af00      	add	r7, sp, #0
     aa2:	6078      	str	r0, [r7, #4]
	UARTSend(PORT_TRACE, (unsigned char*)msg, strlen(msg));
     aa4:	6878      	ldr	r0, [r7, #4]
     aa6:	f002 fb4f 	bl	3148 <strlen>
     aaa:	4603      	mov	r3, r0
     aac:	2000      	movs	r0, #0
     aae:	6879      	ldr	r1, [r7, #4]
     ab0:	461a      	mov	r2, r3
     ab2:	f000 fbe7 	bl	1284 <UARTSend>
	UARTSend(PORT_TRACE, (unsigned char*)"\r", 1);
     ab6:	2000      	movs	r0, #0
     ab8:	4903      	ldr	r1, [pc, #12]	; (ac8 <TraceEndl+0x2c>)
     aba:	2201      	movs	r2, #1
     abc:	f000 fbe2 	bl	1284 <UARTSend>
}
     ac0:	3708      	adds	r7, #8
     ac2:	46bd      	mov	sp, r7
     ac4:	bd80      	pop	{r7, pc}
     ac6:	bf00      	nop
     ac8:	000043e8 	.word	0x000043e8

00000acc <TracePutc>:

void TracePutc( char c )
{
     acc:	b580      	push	{r7, lr}
     ace:	b082      	sub	sp, #8
     ad0:	af00      	add	r7, sp, #0
     ad2:	4603      	mov	r3, r0
     ad4:	71fb      	strb	r3, [r7, #7]
	UARTSend(PORT_TRACE, (unsigned char*)&c, 1L);
     ad6:	1dfb      	adds	r3, r7, #7
     ad8:	2000      	movs	r0, #0
     ada:	4619      	mov	r1, r3
     adc:	2201      	movs	r2, #1
     ade:	f000 fbd1 	bl	1284 <UARTSend>
}
     ae2:	3708      	adds	r7, #8
     ae4:	46bd      	mov	sp, r7
     ae6:	bd80      	pop	{r7, pc}

00000ae8 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     ae8:	b480      	push	{r7}
     aea:	b083      	sub	sp, #12
     aec:	af00      	add	r7, sp, #0
     aee:	4603      	mov	r3, r0
     af0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     af2:	4908      	ldr	r1, [pc, #32]	; (b14 <NVIC_EnableIRQ+0x2c>)
     af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
     af8:	095b      	lsrs	r3, r3, #5
     afa:	79fa      	ldrb	r2, [r7, #7]
     afc:	f002 021f 	and.w	r2, r2, #31
     b00:	2001      	movs	r0, #1
     b02:	fa00 f202 	lsl.w	r2, r0, r2
     b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     b0a:	370c      	adds	r7, #12
     b0c:	46bd      	mov	sp, r7
     b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
     b12:	4770      	bx	lr
     b14:	e000e100 	.word	0xe000e100

00000b18 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     b18:	b480      	push	{r7}
     b1a:	b083      	sub	sp, #12
     b1c:	af00      	add	r7, sp, #0
     b1e:	4603      	mov	r3, r0
     b20:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     b22:	4909      	ldr	r1, [pc, #36]	; (b48 <NVIC_DisableIRQ+0x30>)
     b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
     b28:	095b      	lsrs	r3, r3, #5
     b2a:	79fa      	ldrb	r2, [r7, #7]
     b2c:	f002 021f 	and.w	r2, r2, #31
     b30:	2001      	movs	r0, #1
     b32:	fa00 f202 	lsl.w	r2, r0, r2
     b36:	3320      	adds	r3, #32
     b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     b3c:	370c      	adds	r7, #12
     b3e:	46bd      	mov	sp, r7
     b40:	f85d 7b04 	ldr.w	r7, [sp], #4
     b44:	4770      	bx	lr
     b46:	bf00      	nop
     b48:	e000e100 	.word	0xe000e100

00000b4c <UART0_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART0_IRQHandler(void) {
     b4c:	b480      	push	{r7}
     b4e:	b083      	sub	sp, #12
     b50:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART0->IIR;
     b52:	4b3b      	ldr	r3, [pc, #236]	; (c40 <UART0_IRQHandler+0xf4>)
     b54:	689b      	ldr	r3, [r3, #8]
     b56:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
     b58:	79bb      	ldrb	r3, [r7, #6]
     b5a:	085b      	lsrs	r3, r3, #1
     b5c:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
     b5e:	79bb      	ldrb	r3, [r7, #6]
     b60:	f003 0307 	and.w	r3, r3, #7
     b64:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
     b66:	79bb      	ldrb	r3, [r7, #6]
     b68:	2b03      	cmp	r3, #3
     b6a:	d12c      	bne.n	bc6 <UART0_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART0->LSR;
     b6c:	4b34      	ldr	r3, [pc, #208]	; (c40 <UART0_IRQHandler+0xf4>)
     b6e:	7d1b      	ldrb	r3, [r3, #20]
     b70:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
     b72:	797b      	ldrb	r3, [r7, #5]
     b74:	f003 039e 	and.w	r3, r3, #158	; 0x9e
     b78:	2b00      	cmp	r3, #0
     b7a:	d006      	beq.n	b8a <UART0_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART0Status = LSRValue;
     b7c:	797b      	ldrb	r3, [r7, #5]
     b7e:	4a31      	ldr	r2, [pc, #196]	; (c44 <UART0_IRQHandler+0xf8>)
     b80:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART0->RBR; /* Dummy read on RX to clear
     b82:	4b2f      	ldr	r3, [pc, #188]	; (c40 <UART0_IRQHandler+0xf4>)
     b84:	781b      	ldrb	r3, [r3, #0]
     b86:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
     b88:	e055      	b.n	c36 <UART0_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
     b8a:	797b      	ldrb	r3, [r7, #5]
     b8c:	f003 0301 	and.w	r3, r3, #1
     b90:	2b00      	cmp	r3, #0
     b92:	d050      	beq.n	c36 <UART0_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART0Buffer[UART0Count] = LPC_UART0->RBR;
     b94:	4b2c      	ldr	r3, [pc, #176]	; (c48 <UART0_IRQHandler+0xfc>)
     b96:	881b      	ldrh	r3, [r3, #0]
     b98:	b29b      	uxth	r3, r3
     b9a:	461a      	mov	r2, r3
     b9c:	4b28      	ldr	r3, [pc, #160]	; (c40 <UART0_IRQHandler+0xf4>)
     b9e:	781b      	ldrb	r3, [r3, #0]
     ba0:	b2d9      	uxtb	r1, r3
     ba2:	4b2a      	ldr	r3, [pc, #168]	; (c4c <UART0_IRQHandler+0x100>)
     ba4:	5499      	strb	r1, [r3, r2]
			UART0Count++;
     ba6:	4b28      	ldr	r3, [pc, #160]	; (c48 <UART0_IRQHandler+0xfc>)
     ba8:	881b      	ldrh	r3, [r3, #0]
     baa:	b29b      	uxth	r3, r3
     bac:	3301      	adds	r3, #1
     bae:	b29a      	uxth	r2, r3
     bb0:	4b25      	ldr	r3, [pc, #148]	; (c48 <UART0_IRQHandler+0xfc>)
     bb2:	801a      	strh	r2, [r3, #0]
			if (UART0Count == BUFSIZE) {
     bb4:	4b24      	ldr	r3, [pc, #144]	; (c48 <UART0_IRQHandler+0xfc>)
     bb6:	881b      	ldrh	r3, [r3, #0]
     bb8:	b29b      	uxth	r3, r3
     bba:	2bff      	cmp	r3, #255	; 0xff
     bbc:	d13b      	bne.n	c36 <UART0_IRQHandler+0xea>
				UART0Count = 0; /* buffer overflow */
     bbe:	4b22      	ldr	r3, [pc, #136]	; (c48 <UART0_IRQHandler+0xfc>)
     bc0:	2200      	movs	r2, #0
     bc2:	801a      	strh	r2, [r3, #0]
     bc4:	e037      	b.n	c36 <UART0_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
     bc6:	79bb      	ldrb	r3, [r7, #6]
     bc8:	2b02      	cmp	r3, #2
     bca:	d118      	bne.n	bfe <UART0_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART0Buffer[UART0Count] = LPC_UART0->RBR;
     bcc:	4b1e      	ldr	r3, [pc, #120]	; (c48 <UART0_IRQHandler+0xfc>)
     bce:	881b      	ldrh	r3, [r3, #0]
     bd0:	b29b      	uxth	r3, r3
     bd2:	461a      	mov	r2, r3
     bd4:	4b1a      	ldr	r3, [pc, #104]	; (c40 <UART0_IRQHandler+0xf4>)
     bd6:	781b      	ldrb	r3, [r3, #0]
     bd8:	b2d9      	uxtb	r1, r3
     bda:	4b1c      	ldr	r3, [pc, #112]	; (c4c <UART0_IRQHandler+0x100>)
     bdc:	5499      	strb	r1, [r3, r2]
		UART0Count++;
     bde:	4b1a      	ldr	r3, [pc, #104]	; (c48 <UART0_IRQHandler+0xfc>)
     be0:	881b      	ldrh	r3, [r3, #0]
     be2:	b29b      	uxth	r3, r3
     be4:	3301      	adds	r3, #1
     be6:	b29a      	uxth	r2, r3
     be8:	4b17      	ldr	r3, [pc, #92]	; (c48 <UART0_IRQHandler+0xfc>)
     bea:	801a      	strh	r2, [r3, #0]
		if (UART0Count == BUFSIZE) {
     bec:	4b16      	ldr	r3, [pc, #88]	; (c48 <UART0_IRQHandler+0xfc>)
     bee:	881b      	ldrh	r3, [r3, #0]
     bf0:	b29b      	uxth	r3, r3
     bf2:	2bff      	cmp	r3, #255	; 0xff
     bf4:	d11f      	bne.n	c36 <UART0_IRQHandler+0xea>
			UART0Count = 0; /* buffer overflow */
     bf6:	4b14      	ldr	r3, [pc, #80]	; (c48 <UART0_IRQHandler+0xfc>)
     bf8:	2200      	movs	r2, #0
     bfa:	801a      	strh	r2, [r3, #0]
     bfc:	e01b      	b.n	c36 <UART0_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
     bfe:	79bb      	ldrb	r3, [r7, #6]
     c00:	2b06      	cmp	r3, #6
     c02:	d106      	bne.n	c12 <UART0_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART0Status |= 0x100; /* Bit 9 as the CTI error */
     c04:	4b0f      	ldr	r3, [pc, #60]	; (c44 <UART0_IRQHandler+0xf8>)
     c06:	681b      	ldr	r3, [r3, #0]
     c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     c0c:	4a0d      	ldr	r2, [pc, #52]	; (c44 <UART0_IRQHandler+0xf8>)
     c0e:	6013      	str	r3, [r2, #0]
     c10:	e011      	b.n	c36 <UART0_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
     c12:	79bb      	ldrb	r3, [r7, #6]
     c14:	2b01      	cmp	r3, #1
     c16:	d10e      	bne.n	c36 <UART0_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART0->LSR; /* Check status in the LSR to see if
     c18:	4b09      	ldr	r3, [pc, #36]	; (c40 <UART0_IRQHandler+0xf4>)
     c1a:	7d1b      	ldrb	r3, [r3, #20]
     c1c:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
     c1e:	797b      	ldrb	r3, [r7, #5]
     c20:	f003 0320 	and.w	r3, r3, #32
     c24:	2b00      	cmp	r3, #0
     c26:	d003      	beq.n	c30 <UART0_IRQHandler+0xe4>
			UART0TxEmpty = 1;
     c28:	4b09      	ldr	r3, [pc, #36]	; (c50 <UART0_IRQHandler+0x104>)
     c2a:	2201      	movs	r2, #1
     c2c:	701a      	strb	r2, [r3, #0]
     c2e:	e002      	b.n	c36 <UART0_IRQHandler+0xea>
		} else {
			UART0TxEmpty = 0;
     c30:	4b07      	ldr	r3, [pc, #28]	; (c50 <UART0_IRQHandler+0x104>)
     c32:	2200      	movs	r2, #0
     c34:	701a      	strb	r2, [r3, #0]
		}
	}
}
     c36:	370c      	adds	r7, #12
     c38:	46bd      	mov	sp, r7
     c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
     c3e:	4770      	bx	lr
     c40:	4000c000 	.word	0x4000c000
     c44:	10000f60 	.word	0x10000f60
     c48:	10000040 	.word	0x10000040
     c4c:	10000560 	.word	0x10000560
     c50:	10000000 	.word	0x10000000

00000c54 <UART1_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART1_IRQHandler(void) {
     c54:	b480      	push	{r7}
     c56:	b083      	sub	sp, #12
     c58:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART1->IIR;
     c5a:	4b3b      	ldr	r3, [pc, #236]	; (d48 <UART1_IRQHandler+0xf4>)
     c5c:	689b      	ldr	r3, [r3, #8]
     c5e:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
     c60:	79bb      	ldrb	r3, [r7, #6]
     c62:	085b      	lsrs	r3, r3, #1
     c64:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
     c66:	79bb      	ldrb	r3, [r7, #6]
     c68:	f003 0307 	and.w	r3, r3, #7
     c6c:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
     c6e:	79bb      	ldrb	r3, [r7, #6]
     c70:	2b03      	cmp	r3, #3
     c72:	d12c      	bne.n	cce <UART1_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART1->LSR;
     c74:	4b34      	ldr	r3, [pc, #208]	; (d48 <UART1_IRQHandler+0xf4>)
     c76:	7d1b      	ldrb	r3, [r3, #20]
     c78:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
     c7a:	797b      	ldrb	r3, [r7, #5]
     c7c:	f003 039e 	and.w	r3, r3, #158	; 0x9e
     c80:	2b00      	cmp	r3, #0
     c82:	d006      	beq.n	c92 <UART1_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART1Status = LSRValue;
     c84:	797b      	ldrb	r3, [r7, #5]
     c86:	4a31      	ldr	r2, [pc, #196]	; (d4c <UART1_IRQHandler+0xf8>)
     c88:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART1->RBR; /* Dummy read on RX to clear
     c8a:	4b2f      	ldr	r3, [pc, #188]	; (d48 <UART1_IRQHandler+0xf4>)
     c8c:	781b      	ldrb	r3, [r3, #0]
     c8e:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
     c90:	e055      	b.n	d3e <UART1_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
     c92:	797b      	ldrb	r3, [r7, #5]
     c94:	f003 0301 	and.w	r3, r3, #1
     c98:	2b00      	cmp	r3, #0
     c9a:	d050      	beq.n	d3e <UART1_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART1Buffer[UART1Count] = LPC_UART1->RBR;
     c9c:	4b2c      	ldr	r3, [pc, #176]	; (d50 <UART1_IRQHandler+0xfc>)
     c9e:	881b      	ldrh	r3, [r3, #0]
     ca0:	b29b      	uxth	r3, r3
     ca2:	461a      	mov	r2, r3
     ca4:	4b28      	ldr	r3, [pc, #160]	; (d48 <UART1_IRQHandler+0xf4>)
     ca6:	781b      	ldrb	r3, [r3, #0]
     ca8:	b2d9      	uxtb	r1, r3
     caa:	4b2a      	ldr	r3, [pc, #168]	; (d54 <UART1_IRQHandler+0x100>)
     cac:	5499      	strb	r1, [r3, r2]
			UART1Count++;
     cae:	4b28      	ldr	r3, [pc, #160]	; (d50 <UART1_IRQHandler+0xfc>)
     cb0:	881b      	ldrh	r3, [r3, #0]
     cb2:	b29b      	uxth	r3, r3
     cb4:	3301      	adds	r3, #1
     cb6:	b29a      	uxth	r2, r3
     cb8:	4b25      	ldr	r3, [pc, #148]	; (d50 <UART1_IRQHandler+0xfc>)
     cba:	801a      	strh	r2, [r3, #0]
			if (UART1Count == BUFSIZE) {
     cbc:	4b24      	ldr	r3, [pc, #144]	; (d50 <UART1_IRQHandler+0xfc>)
     cbe:	881b      	ldrh	r3, [r3, #0]
     cc0:	b29b      	uxth	r3, r3
     cc2:	2bff      	cmp	r3, #255	; 0xff
     cc4:	d13b      	bne.n	d3e <UART1_IRQHandler+0xea>
				UART1Count = 0; /* buffer overflow */
     cc6:	4b22      	ldr	r3, [pc, #136]	; (d50 <UART1_IRQHandler+0xfc>)
     cc8:	2200      	movs	r2, #0
     cca:	801a      	strh	r2, [r3, #0]
     ccc:	e037      	b.n	d3e <UART1_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
     cce:	79bb      	ldrb	r3, [r7, #6]
     cd0:	2b02      	cmp	r3, #2
     cd2:	d118      	bne.n	d06 <UART1_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART1Buffer[UART1Count] = LPC_UART1->RBR;
     cd4:	4b1e      	ldr	r3, [pc, #120]	; (d50 <UART1_IRQHandler+0xfc>)
     cd6:	881b      	ldrh	r3, [r3, #0]
     cd8:	b29b      	uxth	r3, r3
     cda:	461a      	mov	r2, r3
     cdc:	4b1a      	ldr	r3, [pc, #104]	; (d48 <UART1_IRQHandler+0xf4>)
     cde:	781b      	ldrb	r3, [r3, #0]
     ce0:	b2d9      	uxtb	r1, r3
     ce2:	4b1c      	ldr	r3, [pc, #112]	; (d54 <UART1_IRQHandler+0x100>)
     ce4:	5499      	strb	r1, [r3, r2]
		UART1Count++;
     ce6:	4b1a      	ldr	r3, [pc, #104]	; (d50 <UART1_IRQHandler+0xfc>)
     ce8:	881b      	ldrh	r3, [r3, #0]
     cea:	b29b      	uxth	r3, r3
     cec:	3301      	adds	r3, #1
     cee:	b29a      	uxth	r2, r3
     cf0:	4b17      	ldr	r3, [pc, #92]	; (d50 <UART1_IRQHandler+0xfc>)
     cf2:	801a      	strh	r2, [r3, #0]
		if (UART1Count == BUFSIZE) {
     cf4:	4b16      	ldr	r3, [pc, #88]	; (d50 <UART1_IRQHandler+0xfc>)
     cf6:	881b      	ldrh	r3, [r3, #0]
     cf8:	b29b      	uxth	r3, r3
     cfa:	2bff      	cmp	r3, #255	; 0xff
     cfc:	d11f      	bne.n	d3e <UART1_IRQHandler+0xea>
			UART1Count = 0; /* buffer overflow */
     cfe:	4b14      	ldr	r3, [pc, #80]	; (d50 <UART1_IRQHandler+0xfc>)
     d00:	2200      	movs	r2, #0
     d02:	801a      	strh	r2, [r3, #0]
     d04:	e01b      	b.n	d3e <UART1_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
     d06:	79bb      	ldrb	r3, [r7, #6]
     d08:	2b06      	cmp	r3, #6
     d0a:	d106      	bne.n	d1a <UART1_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART1Status |= 0x100; /* Bit 9 as the CTI error */
     d0c:	4b0f      	ldr	r3, [pc, #60]	; (d4c <UART1_IRQHandler+0xf8>)
     d0e:	681b      	ldr	r3, [r3, #0]
     d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     d14:	4a0d      	ldr	r2, [pc, #52]	; (d4c <UART1_IRQHandler+0xf8>)
     d16:	6013      	str	r3, [r2, #0]
     d18:	e011      	b.n	d3e <UART1_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
     d1a:	79bb      	ldrb	r3, [r7, #6]
     d1c:	2b01      	cmp	r3, #1
     d1e:	d10e      	bne.n	d3e <UART1_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART1->LSR; /* Check status in the LSR to see if
     d20:	4b09      	ldr	r3, [pc, #36]	; (d48 <UART1_IRQHandler+0xf4>)
     d22:	7d1b      	ldrb	r3, [r3, #20]
     d24:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
     d26:	797b      	ldrb	r3, [r7, #5]
     d28:	f003 0320 	and.w	r3, r3, #32
     d2c:	2b00      	cmp	r3, #0
     d2e:	d003      	beq.n	d38 <UART1_IRQHandler+0xe4>
			UART1TxEmpty = 1;
     d30:	4b09      	ldr	r3, [pc, #36]	; (d58 <UART1_IRQHandler+0x104>)
     d32:	2201      	movs	r2, #1
     d34:	701a      	strb	r2, [r3, #0]
     d36:	e002      	b.n	d3e <UART1_IRQHandler+0xea>
		} else {
			UART1TxEmpty = 0;
     d38:	4b07      	ldr	r3, [pc, #28]	; (d58 <UART1_IRQHandler+0x104>)
     d3a:	2200      	movs	r2, #0
     d3c:	701a      	strb	r2, [r3, #0]
		}
	}

}
     d3e:	370c      	adds	r7, #12
     d40:	46bd      	mov	sp, r7
     d42:	f85d 7b04 	ldr.w	r7, [sp], #4
     d46:	4770      	bx	lr
     d48:	40010000 	.word	0x40010000
     d4c:	10000660 	.word	0x10000660
     d50:	10000042 	.word	0x10000042
     d54:	10000454 	.word	0x10000454
     d58:	10000001 	.word	0x10000001

00000d5c <UART2_IRQHandler>:

void UART2_IRQHandler(void) {
     d5c:	b480      	push	{r7}
     d5e:	b083      	sub	sp, #12
     d60:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;
	IIRValue = LPC_UART2->IIR;
     d62:	4b3c      	ldr	r3, [pc, #240]	; (e54 <UART2_IRQHandler+0xf8>)
     d64:	689b      	ldr	r3, [r3, #8]
     d66:	71bb      	strb	r3, [r7, #6]
	IIRValue >>= 1; /* skip pending bit in IIR */
     d68:	79bb      	ldrb	r3, [r7, #6]
     d6a:	085b      	lsrs	r3, r3, #1
     d6c:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
     d6e:	79bb      	ldrb	r3, [r7, #6]
     d70:	f003 0307 	and.w	r3, r3, #7
     d74:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
     d76:	79bb      	ldrb	r3, [r7, #6]
     d78:	2b03      	cmp	r3, #3
     d7a:	d12d      	bne.n	dd8 <UART2_IRQHandler+0x7c>
	{
		LSRValue = LPC_UART2->LSR;
     d7c:	4b35      	ldr	r3, [pc, #212]	; (e54 <UART2_IRQHandler+0xf8>)
     d7e:	7d1b      	ldrb	r3, [r3, #20]
     d80:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
     d82:	797b      	ldrb	r3, [r7, #5]
     d84:	f003 039e 	and.w	r3, r3, #158	; 0x9e
     d88:	2b00      	cmp	r3, #0
     d8a:	d006      	beq.n	d9a <UART2_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART2Status = LSRValue;
     d8c:	797b      	ldrb	r3, [r7, #5]
     d8e:	4a32      	ldr	r2, [pc, #200]	; (e58 <UART2_IRQHandler+0xfc>)
     d90:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART2->RBR; /* Dummy read on RX to clear
     d92:	4b30      	ldr	r3, [pc, #192]	; (e54 <UART2_IRQHandler+0xf8>)
     d94:	781b      	ldrb	r3, [r3, #0]
     d96:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
     d98:	e057      	b.n	e4a <UART2_IRQHandler+0xee>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
     d9a:	797b      	ldrb	r3, [r7, #5]
     d9c:	f003 0301 	and.w	r3, r3, #1
     da0:	2b00      	cmp	r3, #0
     da2:	d052      	beq.n	e4a <UART2_IRQHandler+0xee>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART2Buffer[UART2Count] = LPC_UART2->RBR;
     da4:	4b2d      	ldr	r3, [pc, #180]	; (e5c <UART2_IRQHandler+0x100>)
     da6:	881b      	ldrh	r3, [r3, #0]
     da8:	b29b      	uxth	r3, r3
     daa:	461a      	mov	r2, r3
     dac:	4b29      	ldr	r3, [pc, #164]	; (e54 <UART2_IRQHandler+0xf8>)
     dae:	781b      	ldrb	r3, [r3, #0]
     db0:	b2d9      	uxtb	r1, r3
     db2:	4b2b      	ldr	r3, [pc, #172]	; (e60 <UART2_IRQHandler+0x104>)
     db4:	5499      	strb	r1, [r3, r2]
			UART2Count++;
     db6:	4b29      	ldr	r3, [pc, #164]	; (e5c <UART2_IRQHandler+0x100>)
     db8:	881b      	ldrh	r3, [r3, #0]
     dba:	b29b      	uxth	r3, r3
     dbc:	3301      	adds	r3, #1
     dbe:	b29a      	uxth	r2, r3
     dc0:	4b26      	ldr	r3, [pc, #152]	; (e5c <UART2_IRQHandler+0x100>)
     dc2:	801a      	strh	r2, [r3, #0]
			if (UART2Count >= UART2_BUFFSIZE) {
     dc4:	4b25      	ldr	r3, [pc, #148]	; (e5c <UART2_IRQHandler+0x100>)
     dc6:	881b      	ldrh	r3, [r3, #0]
     dc8:	b29b      	uxth	r3, r3
     dca:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
     dce:	d33c      	bcc.n	e4a <UART2_IRQHandler+0xee>
				UART2Count = 0; /* buffer overflow */
     dd0:	4b22      	ldr	r3, [pc, #136]	; (e5c <UART2_IRQHandler+0x100>)
     dd2:	2200      	movs	r2, #0
     dd4:	801a      	strh	r2, [r3, #0]
     dd6:	e038      	b.n	e4a <UART2_IRQHandler+0xee>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
     dd8:	79bb      	ldrb	r3, [r7, #6]
     dda:	2b02      	cmp	r3, #2
     ddc:	d119      	bne.n	e12 <UART2_IRQHandler+0xb6>
	{
		/* Receive Data Available */
		UART2Buffer[UART2Count] = LPC_UART2->RBR;
     dde:	4b1f      	ldr	r3, [pc, #124]	; (e5c <UART2_IRQHandler+0x100>)
     de0:	881b      	ldrh	r3, [r3, #0]
     de2:	b29b      	uxth	r3, r3
     de4:	461a      	mov	r2, r3
     de6:	4b1b      	ldr	r3, [pc, #108]	; (e54 <UART2_IRQHandler+0xf8>)
     de8:	781b      	ldrb	r3, [r3, #0]
     dea:	b2d9      	uxtb	r1, r3
     dec:	4b1c      	ldr	r3, [pc, #112]	; (e60 <UART2_IRQHandler+0x104>)
     dee:	5499      	strb	r1, [r3, r2]
		UART2Count++;
     df0:	4b1a      	ldr	r3, [pc, #104]	; (e5c <UART2_IRQHandler+0x100>)
     df2:	881b      	ldrh	r3, [r3, #0]
     df4:	b29b      	uxth	r3, r3
     df6:	3301      	adds	r3, #1
     df8:	b29a      	uxth	r2, r3
     dfa:	4b18      	ldr	r3, [pc, #96]	; (e5c <UART2_IRQHandler+0x100>)
     dfc:	801a      	strh	r2, [r3, #0]
		if (UART2Count >= UART2_BUFFSIZE) {
     dfe:	4b17      	ldr	r3, [pc, #92]	; (e5c <UART2_IRQHandler+0x100>)
     e00:	881b      	ldrh	r3, [r3, #0]
     e02:	b29b      	uxth	r3, r3
     e04:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
     e08:	d31f      	bcc.n	e4a <UART2_IRQHandler+0xee>
			UART2Count = 0; /* buffer overflow */
     e0a:	4b14      	ldr	r3, [pc, #80]	; (e5c <UART2_IRQHandler+0x100>)
     e0c:	2200      	movs	r2, #0
     e0e:	801a      	strh	r2, [r3, #0]
     e10:	e01b      	b.n	e4a <UART2_IRQHandler+0xee>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
     e12:	79bb      	ldrb	r3, [r7, #6]
     e14:	2b06      	cmp	r3, #6
     e16:	d106      	bne.n	e26 <UART2_IRQHandler+0xca>
	{
		/* Character Time-out indicator */
		UART2Status |= 0x100; /* Bit 9 as the CTI error */
     e18:	4b0f      	ldr	r3, [pc, #60]	; (e58 <UART2_IRQHandler+0xfc>)
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     e20:	4a0d      	ldr	r2, [pc, #52]	; (e58 <UART2_IRQHandler+0xfc>)
     e22:	6013      	str	r3, [r2, #0]
     e24:	e011      	b.n	e4a <UART2_IRQHandler+0xee>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
     e26:	79bb      	ldrb	r3, [r7, #6]
     e28:	2b01      	cmp	r3, #1
     e2a:	d10e      	bne.n	e4a <UART2_IRQHandler+0xee>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART2->LSR; /* Check status in the LSR to see if
     e2c:	4b09      	ldr	r3, [pc, #36]	; (e54 <UART2_IRQHandler+0xf8>)
     e2e:	7d1b      	ldrb	r3, [r3, #20]
     e30:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
     e32:	797b      	ldrb	r3, [r7, #5]
     e34:	f003 0320 	and.w	r3, r3, #32
     e38:	2b00      	cmp	r3, #0
     e3a:	d003      	beq.n	e44 <UART2_IRQHandler+0xe8>
			UART2TxEmpty = 1;
     e3c:	4b09      	ldr	r3, [pc, #36]	; (e64 <UART2_IRQHandler+0x108>)
     e3e:	2201      	movs	r2, #1
     e40:	701a      	strb	r2, [r3, #0]
     e42:	e002      	b.n	e4a <UART2_IRQHandler+0xee>
		} else {
			UART2TxEmpty = 0;
     e44:	4b07      	ldr	r3, [pc, #28]	; (e64 <UART2_IRQHandler+0x108>)
     e46:	2200      	movs	r2, #0
     e48:	701a      	strb	r2, [r3, #0]
		}
	}
}
     e4a:	370c      	adds	r7, #12
     e4c:	46bd      	mov	sp, r7
     e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
     e52:	4770      	bx	lr
     e54:	40098000 	.word	0x40098000
     e58:	10000554 	.word	0x10000554
     e5c:	10000044 	.word	0x10000044
     e60:	10000768 	.word	0x10000768
     e64:	10000003 	.word	0x10000003

00000e68 <UART3_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART3_IRQHandler(void) {
     e68:	b480      	push	{r7}
     e6a:	b083      	sub	sp, #12
     e6c:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART3->IIR;
     e6e:	4b3b      	ldr	r3, [pc, #236]	; (f5c <UART3_IRQHandler+0xf4>)
     e70:	689b      	ldr	r3, [r3, #8]
     e72:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
     e74:	79bb      	ldrb	r3, [r7, #6]
     e76:	085b      	lsrs	r3, r3, #1
     e78:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
     e7a:	79bb      	ldrb	r3, [r7, #6]
     e7c:	f003 0307 	and.w	r3, r3, #7
     e80:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
     e82:	79bb      	ldrb	r3, [r7, #6]
     e84:	2b03      	cmp	r3, #3
     e86:	d12c      	bne.n	ee2 <UART3_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART3->LSR;
     e88:	4b34      	ldr	r3, [pc, #208]	; (f5c <UART3_IRQHandler+0xf4>)
     e8a:	7d1b      	ldrb	r3, [r3, #20]
     e8c:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
     e8e:	797b      	ldrb	r3, [r7, #5]
     e90:	f003 039e 	and.w	r3, r3, #158	; 0x9e
     e94:	2b00      	cmp	r3, #0
     e96:	d006      	beq.n	ea6 <UART3_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART3Status = LSRValue;
     e98:	797b      	ldrb	r3, [r7, #5]
     e9a:	4a31      	ldr	r2, [pc, #196]	; (f60 <UART3_IRQHandler+0xf8>)
     e9c:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART3->RBR; /* Dummy read on RX to clear
     e9e:	4b2f      	ldr	r3, [pc, #188]	; (f5c <UART3_IRQHandler+0xf4>)
     ea0:	781b      	ldrb	r3, [r3, #0]
     ea2:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
     ea4:	e055      	b.n	f52 <UART3_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
     ea6:	797b      	ldrb	r3, [r7, #5]
     ea8:	f003 0301 	and.w	r3, r3, #1
     eac:	2b00      	cmp	r3, #0
     eae:	d050      	beq.n	f52 <UART3_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART3Buffer[UART3Count] = LPC_UART3->RBR;
     eb0:	4b2c      	ldr	r3, [pc, #176]	; (f64 <UART3_IRQHandler+0xfc>)
     eb2:	881b      	ldrh	r3, [r3, #0]
     eb4:	b29b      	uxth	r3, r3
     eb6:	461a      	mov	r2, r3
     eb8:	4b28      	ldr	r3, [pc, #160]	; (f5c <UART3_IRQHandler+0xf4>)
     eba:	781b      	ldrb	r3, [r3, #0]
     ebc:	b2d9      	uxtb	r1, r3
     ebe:	4b2a      	ldr	r3, [pc, #168]	; (f68 <UART3_IRQHandler+0x100>)
     ec0:	5499      	strb	r1, [r3, r2]
			UART3Count++;
     ec2:	4b28      	ldr	r3, [pc, #160]	; (f64 <UART3_IRQHandler+0xfc>)
     ec4:	881b      	ldrh	r3, [r3, #0]
     ec6:	b29b      	uxth	r3, r3
     ec8:	3301      	adds	r3, #1
     eca:	b29a      	uxth	r2, r3
     ecc:	4b25      	ldr	r3, [pc, #148]	; (f64 <UART3_IRQHandler+0xfc>)
     ece:	801a      	strh	r2, [r3, #0]
			if (UART3Count == BUFSIZE) {
     ed0:	4b24      	ldr	r3, [pc, #144]	; (f64 <UART3_IRQHandler+0xfc>)
     ed2:	881b      	ldrh	r3, [r3, #0]
     ed4:	b29b      	uxth	r3, r3
     ed6:	2bff      	cmp	r3, #255	; 0xff
     ed8:	d13b      	bne.n	f52 <UART3_IRQHandler+0xea>
				UART3Count = 0; /* buffer overflow */
     eda:	4b22      	ldr	r3, [pc, #136]	; (f64 <UART3_IRQHandler+0xfc>)
     edc:	2200      	movs	r2, #0
     ede:	801a      	strh	r2, [r3, #0]
     ee0:	e037      	b.n	f52 <UART3_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
     ee2:	79bb      	ldrb	r3, [r7, #6]
     ee4:	2b02      	cmp	r3, #2
     ee6:	d118      	bne.n	f1a <UART3_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART3Buffer[UART3Count] = LPC_UART3->RBR;
     ee8:	4b1e      	ldr	r3, [pc, #120]	; (f64 <UART3_IRQHandler+0xfc>)
     eea:	881b      	ldrh	r3, [r3, #0]
     eec:	b29b      	uxth	r3, r3
     eee:	461a      	mov	r2, r3
     ef0:	4b1a      	ldr	r3, [pc, #104]	; (f5c <UART3_IRQHandler+0xf4>)
     ef2:	781b      	ldrb	r3, [r3, #0]
     ef4:	b2d9      	uxtb	r1, r3
     ef6:	4b1c      	ldr	r3, [pc, #112]	; (f68 <UART3_IRQHandler+0x100>)
     ef8:	5499      	strb	r1, [r3, r2]
		UART3Count++;
     efa:	4b1a      	ldr	r3, [pc, #104]	; (f64 <UART3_IRQHandler+0xfc>)
     efc:	881b      	ldrh	r3, [r3, #0]
     efe:	b29b      	uxth	r3, r3
     f00:	3301      	adds	r3, #1
     f02:	b29a      	uxth	r2, r3
     f04:	4b17      	ldr	r3, [pc, #92]	; (f64 <UART3_IRQHandler+0xfc>)
     f06:	801a      	strh	r2, [r3, #0]
		if (UART3Count == BUFSIZE) {
     f08:	4b16      	ldr	r3, [pc, #88]	; (f64 <UART3_IRQHandler+0xfc>)
     f0a:	881b      	ldrh	r3, [r3, #0]
     f0c:	b29b      	uxth	r3, r3
     f0e:	2bff      	cmp	r3, #255	; 0xff
     f10:	d11f      	bne.n	f52 <UART3_IRQHandler+0xea>
			UART3Count = 0; /* buffer overflow */
     f12:	4b14      	ldr	r3, [pc, #80]	; (f64 <UART3_IRQHandler+0xfc>)
     f14:	2200      	movs	r2, #0
     f16:	801a      	strh	r2, [r3, #0]
     f18:	e01b      	b.n	f52 <UART3_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
     f1a:	79bb      	ldrb	r3, [r7, #6]
     f1c:	2b06      	cmp	r3, #6
     f1e:	d106      	bne.n	f2e <UART3_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART3Status |= 0x100; /* Bit 9 as the CTI error */
     f20:	4b0f      	ldr	r3, [pc, #60]	; (f60 <UART3_IRQHandler+0xf8>)
     f22:	681b      	ldr	r3, [r3, #0]
     f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     f28:	4a0d      	ldr	r2, [pc, #52]	; (f60 <UART3_IRQHandler+0xf8>)
     f2a:	6013      	str	r3, [r2, #0]
     f2c:	e011      	b.n	f52 <UART3_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
     f2e:	79bb      	ldrb	r3, [r7, #6]
     f30:	2b01      	cmp	r3, #1
     f32:	d10e      	bne.n	f52 <UART3_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART3->LSR; /* Check status in the LSR to see if
     f34:	4b09      	ldr	r3, [pc, #36]	; (f5c <UART3_IRQHandler+0xf4>)
     f36:	7d1b      	ldrb	r3, [r3, #20]
     f38:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
     f3a:	797b      	ldrb	r3, [r7, #5]
     f3c:	f003 0320 	and.w	r3, r3, #32
     f40:	2b00      	cmp	r3, #0
     f42:	d003      	beq.n	f4c <UART3_IRQHandler+0xe4>
			UART3TxEmpty = 1;
     f44:	4b09      	ldr	r3, [pc, #36]	; (f6c <UART3_IRQHandler+0x104>)
     f46:	2201      	movs	r2, #1
     f48:	701a      	strb	r2, [r3, #0]
     f4a:	e002      	b.n	f52 <UART3_IRQHandler+0xea>
		} else {
			UART3TxEmpty = 0;
     f4c:	4b07      	ldr	r3, [pc, #28]	; (f6c <UART3_IRQHandler+0x104>)
     f4e:	2200      	movs	r2, #0
     f50:	701a      	strb	r2, [r3, #0]
		}
	}
}
     f52:	370c      	adds	r7, #12
     f54:	46bd      	mov	sp, r7
     f56:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5a:	4770      	bx	lr
     f5c:	4009c000 	.word	0x4009c000
     f60:	1000055c 	.word	0x1000055c
     f64:	10000046 	.word	0x10000046
     f68:	10000668 	.word	0x10000668
     f6c:	10000002 	.word	0x10000002

00000f70 <UARTInit>:
 ** Returned value:		true or false, return false only if the
 **						interrupt handler can't be installed to the
 **						VIC table
 **
 *****************************************************************************/
uint32_t UARTInit(uint32_t PortNum, uint32_t baudrate) {
     f70:	b580      	push	{r7, lr}
     f72:	b086      	sub	sp, #24
     f74:	af00      	add	r7, sp, #0
     f76:	6078      	str	r0, [r7, #4]
     f78:	6039      	str	r1, [r7, #0]
	uint32_t Fdiv;
	uint32_t pclkdiv, pclk;
	if (PortNum == 0) {
     f7a:	687b      	ldr	r3, [r7, #4]
     f7c:	2b00      	cmp	r3, #0
     f7e:	d15b      	bne.n	1038 <UARTInit+0xc8>
		LPC_PINCON->PINSEL0 &= ~0x000000F0;
     f80:	4aa3      	ldr	r2, [pc, #652]	; (1210 <UARTInit+0x2a0>)
     f82:	4ba3      	ldr	r3, [pc, #652]	; (1210 <UARTInit+0x2a0>)
     f84:	681b      	ldr	r3, [r3, #0]
     f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     f8a:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00000050; /* RxD0 is P0.3 and TxD0 is P0.2 */
     f8c:	4aa0      	ldr	r2, [pc, #640]	; (1210 <UARTInit+0x2a0>)
     f8e:	4ba0      	ldr	r3, [pc, #640]	; (1210 <UARTInit+0x2a0>)
     f90:	681b      	ldr	r3, [r3, #0]
     f92:	f043 0350 	orr.w	r3, r3, #80	; 0x50
     f96:	6013      	str	r3, [r2, #0]
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART0 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
     f98:	4b9e      	ldr	r3, [pc, #632]	; (1214 <UARTInit+0x2a4>)
     f9a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
     f9e:	099b      	lsrs	r3, r3, #6
     fa0:	f003 0303 	and.w	r3, r3, #3
     fa4:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
     fa6:	693b      	ldr	r3, [r7, #16]
     fa8:	2b02      	cmp	r3, #2
     faa:	d00c      	beq.n	fc6 <UARTInit+0x56>
     fac:	2b03      	cmp	r3, #3
     fae:	d00f      	beq.n	fd0 <UARTInit+0x60>
     fb0:	2b01      	cmp	r3, #1
     fb2:	d004      	beq.n	fbe <UARTInit+0x4e>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
     fb4:	4b98      	ldr	r3, [pc, #608]	; (1218 <UARTInit+0x2a8>)
     fb6:	681b      	ldr	r3, [r3, #0]
     fb8:	089b      	lsrs	r3, r3, #2
     fba:	617b      	str	r3, [r7, #20]
			break;
     fbc:	e00d      	b.n	fda <UARTInit+0x6a>
		case 0x01:
			pclk = SystemCoreClock;
     fbe:	4b96      	ldr	r3, [pc, #600]	; (1218 <UARTInit+0x2a8>)
     fc0:	681b      	ldr	r3, [r3, #0]
     fc2:	617b      	str	r3, [r7, #20]
			break;
     fc4:	e009      	b.n	fda <UARTInit+0x6a>
		case 0x02:
			pclk = SystemCoreClock / 2;
     fc6:	4b94      	ldr	r3, [pc, #592]	; (1218 <UARTInit+0x2a8>)
     fc8:	681b      	ldr	r3, [r3, #0]
     fca:	085b      	lsrs	r3, r3, #1
     fcc:	617b      	str	r3, [r7, #20]
			break;
     fce:	e004      	b.n	fda <UARTInit+0x6a>
		case 0x03:
			pclk = SystemCoreClock / 8;
     fd0:	4b91      	ldr	r3, [pc, #580]	; (1218 <UARTInit+0x2a8>)
     fd2:	681b      	ldr	r3, [r3, #0]
     fd4:	08db      	lsrs	r3, r3, #3
     fd6:	617b      	str	r3, [r7, #20]
			break;
     fd8:	bf00      	nop
		}
		LPC_UART0->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
     fda:	4b90      	ldr	r3, [pc, #576]	; (121c <UARTInit+0x2ac>)
     fdc:	2283      	movs	r2, #131	; 0x83
     fde:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
     fe0:	697b      	ldr	r3, [r7, #20]
     fe2:	091a      	lsrs	r2, r3, #4
     fe4:	683b      	ldr	r3, [r7, #0]
     fe6:	fbb2 f3f3 	udiv	r3, r2, r3
     fea:	60fb      	str	r3, [r7, #12]
		if (baudrate == 115200){
     fec:	683b      	ldr	r3, [r7, #0]
     fee:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
     ff2:	d10a      	bne.n	100a <UARTInit+0x9a>
			LPC_UART0->DLM = 0;
     ff4:	4b89      	ldr	r3, [pc, #548]	; (121c <UARTInit+0x2ac>)
     ff6:	2200      	movs	r2, #0
     ff8:	711a      	strb	r2, [r3, #4]
			LPC_UART0->DLL = 9;
     ffa:	4b88      	ldr	r3, [pc, #544]	; (121c <UARTInit+0x2ac>)
     ffc:	2209      	movs	r2, #9
     ffe:	701a      	strb	r2, [r3, #0]
			LPC_UART0->FDR=1<<0|1<<5;
    1000:	4b86      	ldr	r3, [pc, #536]	; (121c <UARTInit+0x2ac>)
    1002:	2221      	movs	r2, #33	; 0x21
    1004:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    1008:	e008      	b.n	101c <UARTInit+0xac>
		}else{
			LPC_UART0->DLM = Fdiv / 256;
    100a:	4a84      	ldr	r2, [pc, #528]	; (121c <UARTInit+0x2ac>)
    100c:	68fb      	ldr	r3, [r7, #12]
    100e:	0a1b      	lsrs	r3, r3, #8
    1010:	b2db      	uxtb	r3, r3
    1012:	7113      	strb	r3, [r2, #4]
			LPC_UART0->DLL = Fdiv % 256;
    1014:	4b81      	ldr	r3, [pc, #516]	; (121c <UARTInit+0x2ac>)
    1016:	68fa      	ldr	r2, [r7, #12]
    1018:	b2d2      	uxtb	r2, r2
    101a:	701a      	strb	r2, [r3, #0]
		}
		LPC_UART0->LCR = 0x03; /* DLAB = 0 */
    101c:	4b7f      	ldr	r3, [pc, #508]	; (121c <UARTInit+0x2ac>)
    101e:	2203      	movs	r2, #3
    1020:	731a      	strb	r2, [r3, #12]
		LPC_UART0->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    1022:	4b7e      	ldr	r3, [pc, #504]	; (121c <UARTInit+0x2ac>)
    1024:	2207      	movs	r2, #7
    1026:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART0_IRQn);
    1028:	2005      	movs	r0, #5
    102a:	f7ff fd5d 	bl	ae8 <NVIC_EnableIRQ>
		LPC_UART0->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART0 interrupt */
    102e:	4b7b      	ldr	r3, [pc, #492]	; (121c <UARTInit+0x2ac>)
    1030:	2207      	movs	r2, #7
    1032:	605a      	str	r2, [r3, #4]
		return (TRUE);
    1034:	2301      	movs	r3, #1
    1036:	e11d      	b.n	1274 <UARTInit+0x304>
	} else if (PortNum == 1) {
    1038:	687b      	ldr	r3, [r7, #4]
    103a:	2b01      	cmp	r3, #1
    103c:	d157      	bne.n	10ee <UARTInit+0x17e>
		NVIC_DisableIRQ(UART1_IRQn);
    103e:	2006      	movs	r0, #6
    1040:	f7ff fd6a 	bl	b18 <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 4;
    1044:	4a73      	ldr	r2, [pc, #460]	; (1214 <UARTInit+0x2a4>)
    1046:	4b73      	ldr	r3, [pc, #460]	; (1214 <UARTInit+0x2a4>)
    1048:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    104c:	f043 0310 	orr.w	r3, r3, #16
    1050:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL4 &= ~0x0000000F;
    1054:	4a6e      	ldr	r2, [pc, #440]	; (1210 <UARTInit+0x2a0>)
    1056:	4b6e      	ldr	r3, [pc, #440]	; (1210 <UARTInit+0x2a0>)
    1058:	691b      	ldr	r3, [r3, #16]
    105a:	f023 030f 	bic.w	r3, r3, #15
    105e:	6113      	str	r3, [r2, #16]
		LPC_PINCON->PINSEL4 |= 0x0000000A; /* Enable RxD1 P0.16, TxD1 P0.15 */
    1060:	4a6b      	ldr	r2, [pc, #428]	; (1210 <UARTInit+0x2a0>)
    1062:	4b6b      	ldr	r3, [pc, #428]	; (1210 <UARTInit+0x2a0>)
    1064:	691b      	ldr	r3, [r3, #16]
    1066:	f043 030a 	orr.w	r3, r3, #10
    106a:	6113      	str	r3, [r2, #16]

		//| 1<<25; //Enable PCUART1
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 8,9 are for UART1 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
    106c:	4b69      	ldr	r3, [pc, #420]	; (1214 <UARTInit+0x2a4>)
    106e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    1072:	0a1b      	lsrs	r3, r3, #8
    1074:	f003 0303 	and.w	r3, r3, #3
    1078:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    107a:	693b      	ldr	r3, [r7, #16]
    107c:	2b02      	cmp	r3, #2
    107e:	d00c      	beq.n	109a <UARTInit+0x12a>
    1080:	2b03      	cmp	r3, #3
    1082:	d00f      	beq.n	10a4 <UARTInit+0x134>
    1084:	2b01      	cmp	r3, #1
    1086:	d004      	beq.n	1092 <UARTInit+0x122>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    1088:	4b63      	ldr	r3, [pc, #396]	; (1218 <UARTInit+0x2a8>)
    108a:	681b      	ldr	r3, [r3, #0]
    108c:	089b      	lsrs	r3, r3, #2
    108e:	617b      	str	r3, [r7, #20]
			break;
    1090:	e00d      	b.n	10ae <UARTInit+0x13e>
		case 0x01:
			pclk = SystemCoreClock;
    1092:	4b61      	ldr	r3, [pc, #388]	; (1218 <UARTInit+0x2a8>)
    1094:	681b      	ldr	r3, [r3, #0]
    1096:	617b      	str	r3, [r7, #20]
			break;
    1098:	e009      	b.n	10ae <UARTInit+0x13e>
		case 0x02:
			pclk = SystemCoreClock / 2;
    109a:	4b5f      	ldr	r3, [pc, #380]	; (1218 <UARTInit+0x2a8>)
    109c:	681b      	ldr	r3, [r3, #0]
    109e:	085b      	lsrs	r3, r3, #1
    10a0:	617b      	str	r3, [r7, #20]
			break;
    10a2:	e004      	b.n	10ae <UARTInit+0x13e>
		case 0x03:
			pclk = SystemCoreClock / 8;
    10a4:	4b5c      	ldr	r3, [pc, #368]	; (1218 <UARTInit+0x2a8>)
    10a6:	681b      	ldr	r3, [r3, #0]
    10a8:	08db      	lsrs	r3, r3, #3
    10aa:	617b      	str	r3, [r7, #20]
			break;
    10ac:	bf00      	nop
		}
		LPC_UART1->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    10ae:	4b5c      	ldr	r3, [pc, #368]	; (1220 <UARTInit+0x2b0>)
    10b0:	2283      	movs	r2, #131	; 0x83
    10b2:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    10b4:	697b      	ldr	r3, [r7, #20]
    10b6:	091a      	lsrs	r2, r3, #4
    10b8:	683b      	ldr	r3, [r7, #0]
    10ba:	fbb2 f3f3 	udiv	r3, r2, r3
    10be:	60fb      	str	r3, [r7, #12]
		LPC_UART1->DLM = Fdiv / 256;
    10c0:	4a57      	ldr	r2, [pc, #348]	; (1220 <UARTInit+0x2b0>)
    10c2:	68fb      	ldr	r3, [r7, #12]
    10c4:	0a1b      	lsrs	r3, r3, #8
    10c6:	b2db      	uxtb	r3, r3
    10c8:	7113      	strb	r3, [r2, #4]
		LPC_UART1->DLL = Fdiv % 256;
    10ca:	4b55      	ldr	r3, [pc, #340]	; (1220 <UARTInit+0x2b0>)
    10cc:	68fa      	ldr	r2, [r7, #12]
    10ce:	b2d2      	uxtb	r2, r2
    10d0:	701a      	strb	r2, [r3, #0]
		LPC_UART1->LCR = 0x03; /* DLAB = 0 */
    10d2:	4b53      	ldr	r3, [pc, #332]	; (1220 <UARTInit+0x2b0>)
    10d4:	2203      	movs	r2, #3
    10d6:	731a      	strb	r2, [r3, #12]
		LPC_UART1->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    10d8:	4b51      	ldr	r3, [pc, #324]	; (1220 <UARTInit+0x2b0>)
    10da:	2207      	movs	r2, #7
    10dc:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART1_IRQn);
    10de:	2006      	movs	r0, #6
    10e0:	f7ff fd02 	bl	ae8 <NVIC_EnableIRQ>
		LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART1 interrupt */
    10e4:	4b4e      	ldr	r3, [pc, #312]	; (1220 <UARTInit+0x2b0>)
    10e6:	2207      	movs	r2, #7
    10e8:	605a      	str	r2, [r3, #4]
		return (TRUE);
    10ea:	2301      	movs	r3, #1
    10ec:	e0c2      	b.n	1274 <UARTInit+0x304>
	} else if (PortNum == 2) {
    10ee:	687b      	ldr	r3, [r7, #4]
    10f0:	2b02      	cmp	r3, #2
    10f2:	d157      	bne.n	11a4 <UARTInit+0x234>
		NVIC_DisableIRQ(UART2_IRQn);
    10f4:	2007      	movs	r0, #7
    10f6:	f7ff fd0f 	bl	b18 <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 24; // UART 2 PCONP bit 24
    10fa:	4a46      	ldr	r2, [pc, #280]	; (1214 <UARTInit+0x2a4>)
    10fc:	4b45      	ldr	r3, [pc, #276]	; (1214 <UARTInit+0x2a4>)
    10fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1106:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL0 &= ~0x00F00000;
    110a:	4a41      	ldr	r2, [pc, #260]	; (1210 <UARTInit+0x2a0>)
    110c:	4b40      	ldr	r3, [pc, #256]	; (1210 <UARTInit+0x2a0>)
    110e:	681b      	ldr	r3, [r3, #0]
    1110:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    1114:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00500000; /* Enable TxD2 on 0.10, RxD2 on 0.11 */
    1116:	4a3e      	ldr	r2, [pc, #248]	; (1210 <UARTInit+0x2a0>)
    1118:	4b3d      	ldr	r3, [pc, #244]	; (1210 <UARTInit+0x2a0>)
    111a:	681b      	ldr	r3, [r3, #0]
    111c:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
    1120:	6013      	str	r3, [r2, #0]
		pclkdiv = (LPC_SC->PCLKSEL0 >> 16) & 0x03;
    1122:	4b3c      	ldr	r3, [pc, #240]	; (1214 <UARTInit+0x2a4>)
    1124:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    1128:	0c1b      	lsrs	r3, r3, #16
    112a:	f003 0303 	and.w	r3, r3, #3
    112e:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    1130:	693b      	ldr	r3, [r7, #16]
    1132:	2b02      	cmp	r3, #2
    1134:	d00c      	beq.n	1150 <UARTInit+0x1e0>
    1136:	2b03      	cmp	r3, #3
    1138:	d00f      	beq.n	115a <UARTInit+0x1ea>
    113a:	2b01      	cmp	r3, #1
    113c:	d004      	beq.n	1148 <UARTInit+0x1d8>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    113e:	4b36      	ldr	r3, [pc, #216]	; (1218 <UARTInit+0x2a8>)
    1140:	681b      	ldr	r3, [r3, #0]
    1142:	089b      	lsrs	r3, r3, #2
    1144:	617b      	str	r3, [r7, #20]
			break;
    1146:	e00d      	b.n	1164 <UARTInit+0x1f4>
		case 0x01:
			pclk = SystemCoreClock;
    1148:	4b33      	ldr	r3, [pc, #204]	; (1218 <UARTInit+0x2a8>)
    114a:	681b      	ldr	r3, [r3, #0]
    114c:	617b      	str	r3, [r7, #20]
			break;
    114e:	e009      	b.n	1164 <UARTInit+0x1f4>
		case 0x02:
			pclk = SystemCoreClock / 2;
    1150:	4b31      	ldr	r3, [pc, #196]	; (1218 <UARTInit+0x2a8>)
    1152:	681b      	ldr	r3, [r3, #0]
    1154:	085b      	lsrs	r3, r3, #1
    1156:	617b      	str	r3, [r7, #20]
			break;
    1158:	e004      	b.n	1164 <UARTInit+0x1f4>
		case 0x03:
			pclk = SystemCoreClock / 8;
    115a:	4b2f      	ldr	r3, [pc, #188]	; (1218 <UARTInit+0x2a8>)
    115c:	681b      	ldr	r3, [r3, #0]
    115e:	08db      	lsrs	r3, r3, #3
    1160:	617b      	str	r3, [r7, #20]
			break;
    1162:	bf00      	nop
		}
		LPC_UART2->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    1164:	4b2f      	ldr	r3, [pc, #188]	; (1224 <UARTInit+0x2b4>)
    1166:	2283      	movs	r2, #131	; 0x83
    1168:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    116a:	697b      	ldr	r3, [r7, #20]
    116c:	091a      	lsrs	r2, r3, #4
    116e:	683b      	ldr	r3, [r7, #0]
    1170:	fbb2 f3f3 	udiv	r3, r2, r3
    1174:	60fb      	str	r3, [r7, #12]
		LPC_UART2->DLM = Fdiv / 256;
    1176:	4a2b      	ldr	r2, [pc, #172]	; (1224 <UARTInit+0x2b4>)
    1178:	68fb      	ldr	r3, [r7, #12]
    117a:	0a1b      	lsrs	r3, r3, #8
    117c:	b2db      	uxtb	r3, r3
    117e:	7113      	strb	r3, [r2, #4]
		LPC_UART2->DLL = Fdiv % 256;
    1180:	4b28      	ldr	r3, [pc, #160]	; (1224 <UARTInit+0x2b4>)
    1182:	68fa      	ldr	r2, [r7, #12]
    1184:	b2d2      	uxtb	r2, r2
    1186:	701a      	strb	r2, [r3, #0]
		LPC_UART2->LCR = 0x03; /* DLAB = 0 */
    1188:	4b26      	ldr	r3, [pc, #152]	; (1224 <UARTInit+0x2b4>)
    118a:	2203      	movs	r2, #3
    118c:	731a      	strb	r2, [r3, #12]
		LPC_UART2->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    118e:	4b25      	ldr	r3, [pc, #148]	; (1224 <UARTInit+0x2b4>)
    1190:	2207      	movs	r2, #7
    1192:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART2_IRQn);
    1194:	2007      	movs	r0, #7
    1196:	f7ff fca7 	bl	ae8 <NVIC_EnableIRQ>
		LPC_UART2->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART2 interrupt */
    119a:	4b22      	ldr	r3, [pc, #136]	; (1224 <UARTInit+0x2b4>)
    119c:	2207      	movs	r2, #7
    119e:	605a      	str	r2, [r3, #4]
		//LPC_UART2->IER = IER_THRE; /* Polling */
		//LPC_UART2->TER = (1 << 7);
		return (TRUE);
    11a0:	2301      	movs	r3, #1
    11a2:	e067      	b.n	1274 <UARTInit+0x304>
	} else if (PortNum == 3) {
    11a4:	687b      	ldr	r3, [r7, #4]
    11a6:	2b03      	cmp	r3, #3
    11a8:	d163      	bne.n	1272 <UARTInit+0x302>
		LPC_PINCON->PINSEL0 &= ~0x0000000F;
    11aa:	4a19      	ldr	r2, [pc, #100]	; (1210 <UARTInit+0x2a0>)
    11ac:	4b18      	ldr	r3, [pc, #96]	; (1210 <UARTInit+0x2a0>)
    11ae:	681b      	ldr	r3, [r3, #0]
    11b0:	f023 030f 	bic.w	r3, r3, #15
    11b4:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x0000000A; /* RxD3 is P0.1 and TxD3 is P0.0 */
    11b6:	4a16      	ldr	r2, [pc, #88]	; (1210 <UARTInit+0x2a0>)
    11b8:	4b15      	ldr	r3, [pc, #84]	; (1210 <UARTInit+0x2a0>)
    11ba:	681b      	ldr	r3, [r3, #0]
    11bc:	f043 030a 	orr.w	r3, r3, #10
    11c0:	6013      	str	r3, [r2, #0]
		LPC_SC->PCONP |= 1 << 4 | 1 << 25; //Enable PCUART1
    11c2:	4a14      	ldr	r2, [pc, #80]	; (1214 <UARTInit+0x2a4>)
    11c4:	4b13      	ldr	r3, [pc, #76]	; (1214 <UARTInit+0x2a4>)
    11c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    11ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    11ce:	f043 0310 	orr.w	r3, r3, #16
    11d2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART3 */
		pclkdiv = (LPC_SC->PCLKSEL1 >> 18) & 0x03;
    11d6:	4b0f      	ldr	r3, [pc, #60]	; (1214 <UARTInit+0x2a4>)
    11d8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
    11dc:	0c9b      	lsrs	r3, r3, #18
    11de:	f003 0303 	and.w	r3, r3, #3
    11e2:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    11e4:	693b      	ldr	r3, [r7, #16]
    11e6:	2b02      	cmp	r3, #2
    11e8:	d00c      	beq.n	1204 <UARTInit+0x294>
    11ea:	2b03      	cmp	r3, #3
    11ec:	d01c      	beq.n	1228 <UARTInit+0x2b8>
    11ee:	2b01      	cmp	r3, #1
    11f0:	d004      	beq.n	11fc <UARTInit+0x28c>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    11f2:	4b09      	ldr	r3, [pc, #36]	; (1218 <UARTInit+0x2a8>)
    11f4:	681b      	ldr	r3, [r3, #0]
    11f6:	089b      	lsrs	r3, r3, #2
    11f8:	617b      	str	r3, [r7, #20]
			break;
    11fa:	e01a      	b.n	1232 <UARTInit+0x2c2>
		case 0x01:
			pclk = SystemCoreClock;
    11fc:	4b06      	ldr	r3, [pc, #24]	; (1218 <UARTInit+0x2a8>)
    11fe:	681b      	ldr	r3, [r3, #0]
    1200:	617b      	str	r3, [r7, #20]
			break;
    1202:	e016      	b.n	1232 <UARTInit+0x2c2>
		case 0x02:
			pclk = SystemCoreClock / 2;
    1204:	4b04      	ldr	r3, [pc, #16]	; (1218 <UARTInit+0x2a8>)
    1206:	681b      	ldr	r3, [r3, #0]
    1208:	085b      	lsrs	r3, r3, #1
    120a:	617b      	str	r3, [r7, #20]
			break;
    120c:	e011      	b.n	1232 <UARTInit+0x2c2>
    120e:	bf00      	nop
    1210:	4002c000 	.word	0x4002c000
    1214:	400fc000 	.word	0x400fc000
    1218:	10000004 	.word	0x10000004
    121c:	4000c000 	.word	0x4000c000
    1220:	40010000 	.word	0x40010000
    1224:	40098000 	.word	0x40098000
		case 0x03:
			pclk = SystemCoreClock / 8;
    1228:	4b14      	ldr	r3, [pc, #80]	; (127c <UARTInit+0x30c>)
    122a:	681b      	ldr	r3, [r3, #0]
    122c:	08db      	lsrs	r3, r3, #3
    122e:	617b      	str	r3, [r7, #20]
			break;
    1230:	bf00      	nop
		}
		LPC_UART3->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    1232:	4b13      	ldr	r3, [pc, #76]	; (1280 <UARTInit+0x310>)
    1234:	2283      	movs	r2, #131	; 0x83
    1236:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    1238:	697b      	ldr	r3, [r7, #20]
    123a:	091a      	lsrs	r2, r3, #4
    123c:	683b      	ldr	r3, [r7, #0]
    123e:	fbb2 f3f3 	udiv	r3, r2, r3
    1242:	60fb      	str	r3, [r7, #12]
		LPC_UART3->DLM = Fdiv / 256;
    1244:	4a0e      	ldr	r2, [pc, #56]	; (1280 <UARTInit+0x310>)
    1246:	68fb      	ldr	r3, [r7, #12]
    1248:	0a1b      	lsrs	r3, r3, #8
    124a:	b2db      	uxtb	r3, r3
    124c:	7113      	strb	r3, [r2, #4]
		LPC_UART3->DLL = Fdiv % 256;
    124e:	4b0c      	ldr	r3, [pc, #48]	; (1280 <UARTInit+0x310>)
    1250:	68fa      	ldr	r2, [r7, #12]
    1252:	b2d2      	uxtb	r2, r2
    1254:	701a      	strb	r2, [r3, #0]
		LPC_UART3->LCR = 0x03; /* DLAB = 0 */
    1256:	4b0a      	ldr	r3, [pc, #40]	; (1280 <UARTInit+0x310>)
    1258:	2203      	movs	r2, #3
    125a:	731a      	strb	r2, [r3, #12]
		LPC_UART3->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    125c:	4b08      	ldr	r3, [pc, #32]	; (1280 <UARTInit+0x310>)
    125e:	2207      	movs	r2, #7
    1260:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART3_IRQn);
    1262:	2008      	movs	r0, #8
    1264:	f7ff fc40 	bl	ae8 <NVIC_EnableIRQ>
		LPC_UART3->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART3 interrupt */
    1268:	4b05      	ldr	r3, [pc, #20]	; (1280 <UARTInit+0x310>)
    126a:	2207      	movs	r2, #7
    126c:	605a      	str	r2, [r3, #4]
		return (TRUE);
    126e:	2301      	movs	r3, #1
    1270:	e000      	b.n	1274 <UARTInit+0x304>
	}
	return (FALSE);
    1272:	2300      	movs	r3, #0
}
    1274:	4618      	mov	r0, r3
    1276:	3718      	adds	r7, #24
    1278:	46bd      	mov	sp, r7
    127a:	bd80      	pop	{r7, pc}
    127c:	10000004 	.word	0x10000004
    1280:	4009c000 	.word	0x4009c000

00001284 <UARTSend>:
 **
 ** parameters:			portNum, buffer pointer, and data length
 ** Returned value:		None
 **
 *****************************************************************************/
void UARTSend(uint32_t portNum, uint8_t *buffer, uint32_t Length) {
    1284:	b480      	push	{r7}
    1286:	b087      	sub	sp, #28
    1288:	af00      	add	r7, sp, #0
    128a:	60f8      	str	r0, [r7, #12]
    128c:	60b9      	str	r1, [r7, #8]
    128e:	607a      	str	r2, [r7, #4]
	uint8_t *BufferPtr = buffer;
    1290:	68bb      	ldr	r3, [r7, #8]
    1292:	613b      	str	r3, [r7, #16]
	int index = 0;
    1294:	2300      	movs	r3, #0
    1296:	617b      	str	r3, [r7, #20]
	if (portNum == 0) {
    1298:	68fb      	ldr	r3, [r7, #12]
    129a:	2b00      	cmp	r3, #0
    129c:	d11b      	bne.n	12d6 <UARTSend+0x52>
		while (Length != 0) {
    129e:	e016      	b.n	12ce <UARTSend+0x4a>
			/* THRE status, contain valid data */
			while (!(UART0TxEmpty & 0x01));
    12a0:	bf00      	nop
    12a2:	4b3e      	ldr	r3, [pc, #248]	; (139c <UARTSend+0x118>)
    12a4:	781b      	ldrb	r3, [r3, #0]
    12a6:	b2db      	uxtb	r3, r3
    12a8:	f003 0301 	and.w	r3, r3, #1
    12ac:	2b00      	cmp	r3, #0
    12ae:	d0f8      	beq.n	12a2 <UARTSend+0x1e>
			LPC_UART0->THR = BufferPtr[index];
    12b0:	493b      	ldr	r1, [pc, #236]	; (13a0 <UARTSend+0x11c>)
    12b2:	697b      	ldr	r3, [r7, #20]
    12b4:	693a      	ldr	r2, [r7, #16]
    12b6:	4413      	add	r3, r2
    12b8:	781b      	ldrb	r3, [r3, #0]
    12ba:	700b      	strb	r3, [r1, #0]
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
    12bc:	4b37      	ldr	r3, [pc, #220]	; (139c <UARTSend+0x118>)
    12be:	2200      	movs	r2, #0
    12c0:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    12c2:	697b      	ldr	r3, [r7, #20]
    12c4:	3301      	adds	r3, #1
    12c6:	617b      	str	r3, [r7, #20]
			Length--;
    12c8:	687b      	ldr	r3, [r7, #4]
    12ca:	3b01      	subs	r3, #1
    12cc:	607b      	str	r3, [r7, #4]
 *****************************************************************************/
void UARTSend(uint32_t portNum, uint8_t *buffer, uint32_t Length) {
	uint8_t *BufferPtr = buffer;
	int index = 0;
	if (portNum == 0) {
		while (Length != 0) {
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	2b00      	cmp	r3, #0
    12d2:	d1e5      	bne.n	12a0 <UARTSend+0x1c>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    12d4:	e05c      	b.n	1390 <UARTSend+0x10c>
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
    12d6:	68fb      	ldr	r3, [r7, #12]
    12d8:	2b01      	cmp	r3, #1
    12da:	d11b      	bne.n	1314 <UARTSend+0x90>
		while (Length != 0) {
    12dc:	e016      	b.n	130c <UARTSend+0x88>
			/* THRE status, contain valid data */
			while (!(UART1TxEmpty & 0x01));
    12de:	bf00      	nop
    12e0:	4b30      	ldr	r3, [pc, #192]	; (13a4 <UARTSend+0x120>)
    12e2:	781b      	ldrb	r3, [r3, #0]
    12e4:	b2db      	uxtb	r3, r3
    12e6:	f003 0301 	and.w	r3, r3, #1
    12ea:	2b00      	cmp	r3, #0
    12ec:	d0f8      	beq.n	12e0 <UARTSend+0x5c>
			LPC_UART1->THR = BufferPtr[index];
    12ee:	492e      	ldr	r1, [pc, #184]	; (13a8 <UARTSend+0x124>)
    12f0:	697b      	ldr	r3, [r7, #20]
    12f2:	693a      	ldr	r2, [r7, #16]
    12f4:	4413      	add	r3, r2
    12f6:	781b      	ldrb	r3, [r3, #0]
    12f8:	700b      	strb	r3, [r1, #0]
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
    12fa:	4b2a      	ldr	r3, [pc, #168]	; (13a4 <UARTSend+0x120>)
    12fc:	2200      	movs	r2, #0
    12fe:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    1300:	697b      	ldr	r3, [r7, #20]
    1302:	3301      	adds	r3, #1
    1304:	617b      	str	r3, [r7, #20]
			Length--;
    1306:	687b      	ldr	r3, [r7, #4]
    1308:	3b01      	subs	r3, #1
    130a:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
		while (Length != 0) {
    130c:	687b      	ldr	r3, [r7, #4]
    130e:	2b00      	cmp	r3, #0
    1310:	d1e5      	bne.n	12de <UARTSend+0x5a>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    1312:	e03d      	b.n	1390 <UARTSend+0x10c>
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
    1314:	68fb      	ldr	r3, [r7, #12]
    1316:	2b02      	cmp	r3, #2
    1318:	d11b      	bne.n	1352 <UARTSend+0xce>
		while (Length != 0) {
    131a:	e016      	b.n	134a <UARTSend+0xc6>
			/* THRE status, contain valid data */
			while (!(UART2TxEmpty & 0x01));
    131c:	bf00      	nop
    131e:	4b23      	ldr	r3, [pc, #140]	; (13ac <UARTSend+0x128>)
    1320:	781b      	ldrb	r3, [r3, #0]
    1322:	b2db      	uxtb	r3, r3
    1324:	f003 0301 	and.w	r3, r3, #1
    1328:	2b00      	cmp	r3, #0
    132a:	d0f8      	beq.n	131e <UARTSend+0x9a>
			LPC_UART2->THR = BufferPtr[index];
    132c:	4920      	ldr	r1, [pc, #128]	; (13b0 <UARTSend+0x12c>)
    132e:	697b      	ldr	r3, [r7, #20]
    1330:	693a      	ldr	r2, [r7, #16]
    1332:	4413      	add	r3, r2
    1334:	781b      	ldrb	r3, [r3, #0]
    1336:	700b      	strb	r3, [r1, #0]
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
    1338:	4b1c      	ldr	r3, [pc, #112]	; (13ac <UARTSend+0x128>)
    133a:	2200      	movs	r2, #0
    133c:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    133e:	697b      	ldr	r3, [r7, #20]
    1340:	3301      	adds	r3, #1
    1342:	617b      	str	r3, [r7, #20]
			Length--;
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	3b01      	subs	r3, #1
    1348:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
		while (Length != 0) {
    134a:	687b      	ldr	r3, [r7, #4]
    134c:	2b00      	cmp	r3, #0
    134e:	d1e5      	bne.n	131c <UARTSend+0x98>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    1350:	e01e      	b.n	1390 <UARTSend+0x10c>
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
    1352:	68fb      	ldr	r3, [r7, #12]
    1354:	2b03      	cmp	r3, #3
    1356:	d11a      	bne.n	138e <UARTSend+0x10a>
		while (Length != 0) {
    1358:	e016      	b.n	1388 <UARTSend+0x104>
			/* THRE status, contain valid data */
			while (!(UART3TxEmpty & 0x01));
    135a:	bf00      	nop
    135c:	4b15      	ldr	r3, [pc, #84]	; (13b4 <UARTSend+0x130>)
    135e:	781b      	ldrb	r3, [r3, #0]
    1360:	b2db      	uxtb	r3, r3
    1362:	f003 0301 	and.w	r3, r3, #1
    1366:	2b00      	cmp	r3, #0
    1368:	d0f8      	beq.n	135c <UARTSend+0xd8>
			LPC_UART3->THR = BufferPtr[index];
    136a:	4913      	ldr	r1, [pc, #76]	; (13b8 <UARTSend+0x134>)
    136c:	697b      	ldr	r3, [r7, #20]
    136e:	693a      	ldr	r2, [r7, #16]
    1370:	4413      	add	r3, r2
    1372:	781b      	ldrb	r3, [r3, #0]
    1374:	700b      	strb	r3, [r1, #0]
			UART3TxEmpty = 0; /* not empty in the THR until it shifts out */
    1376:	4b0f      	ldr	r3, [pc, #60]	; (13b4 <UARTSend+0x130>)
    1378:	2200      	movs	r2, #0
    137a:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    137c:	697b      	ldr	r3, [r7, #20]
    137e:	3301      	adds	r3, #1
    1380:	617b      	str	r3, [r7, #20]
			Length--;
    1382:	687b      	ldr	r3, [r7, #4]
    1384:	3b01      	subs	r3, #1
    1386:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
		while (Length != 0) {
    1388:	687b      	ldr	r3, [r7, #4]
    138a:	2b00      	cmp	r3, #0
    138c:	d1e5      	bne.n	135a <UARTSend+0xd6>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    138e:	bf00      	nop
}
    1390:	371c      	adds	r7, #28
    1392:	46bd      	mov	sp, r7
    1394:	f85d 7b04 	ldr.w	r7, [sp], #4
    1398:	4770      	bx	lr
    139a:	bf00      	nop
    139c:	10000000 	.word	0x10000000
    13a0:	4000c000 	.word	0x4000c000
    13a4:	10000001 	.word	0x10000001
    13a8:	40010000 	.word	0x40010000
    13ac:	10000003 	.word	0x10000003
    13b0:	40098000 	.word	0x40098000
    13b4:	10000002 	.word	0x10000002
    13b8:	4009c000 	.word	0x4009c000

000013bc <ReadUart>:

uint8_t ReadUart(uint8_t *veri, uint8_t PortNum) {
    13bc:	b480      	push	{r7}
    13be:	b089      	sub	sp, #36	; 0x24
    13c0:	af00      	add	r7, sp, #0
    13c2:	6078      	str	r0, [r7, #4]
    13c4:	460b      	mov	r3, r1
    13c6:	70fb      	strb	r3, [r7, #3]
	uint8_t *veri_ptr = veri;
    13c8:	687b      	ldr	r3, [r7, #4]
    13ca:	61fb      	str	r3, [r7, #28]
	uint16_t buff_count = 0;
    13cc:	2300      	movs	r3, #0
    13ce:	837b      	strh	r3, [r7, #26]
	if (PortNum == 0) {
    13d0:	78fb      	ldrb	r3, [r7, #3]
    13d2:	2b00      	cmp	r3, #0
    13d4:	d124      	bne.n	1420 <ReadUart+0x64>
		if (UART0Count > 0) {
    13d6:	4b50      	ldr	r3, [pc, #320]	; (1518 <ReadUart+0x15c>)
    13d8:	881b      	ldrh	r3, [r3, #0]
    13da:	b29b      	uxth	r3, r3
    13dc:	2b00      	cmp	r3, #0
    13de:	d01f      	beq.n	1420 <ReadUart+0x64>
			while (buff_count < UART0Count) {
    13e0:	e00b      	b.n	13fa <ReadUart+0x3e>
				*veri_ptr = UART0Buffer[buff_count];
    13e2:	8b7b      	ldrh	r3, [r7, #26]
    13e4:	4a4d      	ldr	r2, [pc, #308]	; (151c <ReadUart+0x160>)
    13e6:	5cd3      	ldrb	r3, [r2, r3]
    13e8:	b2da      	uxtb	r2, r3
    13ea:	69fb      	ldr	r3, [r7, #28]
    13ec:	701a      	strb	r2, [r3, #0]
				buff_count++;
    13ee:	8b7b      	ldrh	r3, [r7, #26]
    13f0:	3301      	adds	r3, #1
    13f2:	837b      	strh	r3, [r7, #26]
				veri_ptr++;
    13f4:	69fb      	ldr	r3, [r7, #28]
    13f6:	3301      	adds	r3, #1
    13f8:	61fb      	str	r3, [r7, #28]
uint8_t ReadUart(uint8_t *veri, uint8_t PortNum) {
	uint8_t *veri_ptr = veri;
	uint16_t buff_count = 0;
	if (PortNum == 0) {
		if (UART0Count > 0) {
			while (buff_count < UART0Count) {
    13fa:	4b47      	ldr	r3, [pc, #284]	; (1518 <ReadUart+0x15c>)
    13fc:	881b      	ldrh	r3, [r3, #0]
    13fe:	b29b      	uxth	r3, r3
    1400:	8b7a      	ldrh	r2, [r7, #26]
    1402:	429a      	cmp	r2, r3
    1404:	d3ed      	bcc.n	13e2 <ReadUart+0x26>
				*veri_ptr = UART0Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    1406:	69fb      	ldr	r3, [r7, #28]
    1408:	2200      	movs	r2, #0
    140a:	701a      	strb	r2, [r3, #0]
			int len = UART0Count;
    140c:	4b42      	ldr	r3, [pc, #264]	; (1518 <ReadUart+0x15c>)
    140e:	881b      	ldrh	r3, [r3, #0]
    1410:	b29b      	uxth	r3, r3
    1412:	617b      	str	r3, [r7, #20]
			UART0Count = 0;
    1414:	4b40      	ldr	r3, [pc, #256]	; (1518 <ReadUart+0x15c>)
    1416:	2200      	movs	r2, #0
    1418:	801a      	strh	r2, [r3, #0]
			return len;
    141a:	697b      	ldr	r3, [r7, #20]
    141c:	b2db      	uxtb	r3, r3
    141e:	e074      	b.n	150a <ReadUart+0x14e>
		}
	}
	if (PortNum == 1) {
    1420:	78fb      	ldrb	r3, [r7, #3]
    1422:	2b01      	cmp	r3, #1
    1424:	d124      	bne.n	1470 <ReadUart+0xb4>
		if (UART1Count > 0) {
    1426:	4b3e      	ldr	r3, [pc, #248]	; (1520 <ReadUart+0x164>)
    1428:	881b      	ldrh	r3, [r3, #0]
    142a:	b29b      	uxth	r3, r3
    142c:	2b00      	cmp	r3, #0
    142e:	d06b      	beq.n	1508 <ReadUart+0x14c>
			while (buff_count < UART1Count) {
    1430:	e00b      	b.n	144a <ReadUart+0x8e>
				*veri_ptr = UART1Buffer[buff_count];
    1432:	8b7b      	ldrh	r3, [r7, #26]
    1434:	4a3b      	ldr	r2, [pc, #236]	; (1524 <ReadUart+0x168>)
    1436:	5cd3      	ldrb	r3, [r2, r3]
    1438:	b2da      	uxtb	r2, r3
    143a:	69fb      	ldr	r3, [r7, #28]
    143c:	701a      	strb	r2, [r3, #0]
				buff_count++;
    143e:	8b7b      	ldrh	r3, [r7, #26]
    1440:	3301      	adds	r3, #1
    1442:	837b      	strh	r3, [r7, #26]
				veri_ptr++;
    1444:	69fb      	ldr	r3, [r7, #28]
    1446:	3301      	adds	r3, #1
    1448:	61fb      	str	r3, [r7, #28]
			return len;
		}
	}
	if (PortNum == 1) {
		if (UART1Count > 0) {
			while (buff_count < UART1Count) {
    144a:	4b35      	ldr	r3, [pc, #212]	; (1520 <ReadUart+0x164>)
    144c:	881b      	ldrh	r3, [r3, #0]
    144e:	b29b      	uxth	r3, r3
    1450:	8b7a      	ldrh	r2, [r7, #26]
    1452:	429a      	cmp	r2, r3
    1454:	d3ed      	bcc.n	1432 <ReadUart+0x76>
				*veri_ptr = UART1Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    1456:	69fb      	ldr	r3, [r7, #28]
    1458:	2200      	movs	r2, #0
    145a:	701a      	strb	r2, [r3, #0]
			int len = UART1Count;
    145c:	4b30      	ldr	r3, [pc, #192]	; (1520 <ReadUart+0x164>)
    145e:	881b      	ldrh	r3, [r3, #0]
    1460:	b29b      	uxth	r3, r3
    1462:	613b      	str	r3, [r7, #16]
			UART1Count = 0;
    1464:	4b2e      	ldr	r3, [pc, #184]	; (1520 <ReadUart+0x164>)
    1466:	2200      	movs	r2, #0
    1468:	801a      	strh	r2, [r3, #0]
			return len;
    146a:	693b      	ldr	r3, [r7, #16]
    146c:	b2db      	uxtb	r3, r3
    146e:	e04c      	b.n	150a <ReadUart+0x14e>
		}
	}//GPS Port
	else if (PortNum == 2) {
    1470:	78fb      	ldrb	r3, [r7, #3]
    1472:	2b02      	cmp	r3, #2
    1474:	d120      	bne.n	14b8 <ReadUart+0xfc>
		if (UART2Count > 0) {
    1476:	4b2c      	ldr	r3, [pc, #176]	; (1528 <ReadUart+0x16c>)
    1478:	881b      	ldrh	r3, [r3, #0]
    147a:	b29b      	uxth	r3, r3
    147c:	2b00      	cmp	r3, #0
    147e:	d043      	beq.n	1508 <ReadUart+0x14c>
			while (buff_count < UART2Count) {
    1480:	e00b      	b.n	149a <ReadUart+0xde>
				*veri_ptr = UART2Buffer[buff_count];
    1482:	8b7b      	ldrh	r3, [r7, #26]
    1484:	4a29      	ldr	r2, [pc, #164]	; (152c <ReadUart+0x170>)
    1486:	5cd3      	ldrb	r3, [r2, r3]
    1488:	b2da      	uxtb	r2, r3
    148a:	69fb      	ldr	r3, [r7, #28]
    148c:	701a      	strb	r2, [r3, #0]
				buff_count++;
    148e:	8b7b      	ldrh	r3, [r7, #26]
    1490:	3301      	adds	r3, #1
    1492:	837b      	strh	r3, [r7, #26]
				veri_ptr++;
    1494:	69fb      	ldr	r3, [r7, #28]
    1496:	3301      	adds	r3, #1
    1498:	61fb      	str	r3, [r7, #28]
			return len;
		}
	}//GPS Port
	else if (PortNum == 2) {
		if (UART2Count > 0) {
			while (buff_count < UART2Count) {
    149a:	4b23      	ldr	r3, [pc, #140]	; (1528 <ReadUart+0x16c>)
    149c:	881b      	ldrh	r3, [r3, #0]
    149e:	b29b      	uxth	r3, r3
    14a0:	8b7a      	ldrh	r2, [r7, #26]
    14a2:	429a      	cmp	r2, r3
    14a4:	d3ed      	bcc.n	1482 <ReadUart+0xc6>
				*veri_ptr = UART2Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    14a6:	69fb      	ldr	r3, [r7, #28]
    14a8:	2200      	movs	r2, #0
    14aa:	701a      	strb	r2, [r3, #0]
			UART2Count = 0;
    14ac:	4b1e      	ldr	r3, [pc, #120]	; (1528 <ReadUart+0x16c>)
    14ae:	2200      	movs	r2, #0
    14b0:	801a      	strh	r2, [r3, #0]
			return buff_count;
    14b2:	8b7b      	ldrh	r3, [r7, #26]
    14b4:	b2db      	uxtb	r3, r3
    14b6:	e028      	b.n	150a <ReadUart+0x14e>
		}
	} else if (PortNum == 3) {
    14b8:	78fb      	ldrb	r3, [r7, #3]
    14ba:	2b03      	cmp	r3, #3
    14bc:	d124      	bne.n	1508 <ReadUart+0x14c>
		if (UART3Count > 0) {
    14be:	4b1c      	ldr	r3, [pc, #112]	; (1530 <ReadUart+0x174>)
    14c0:	881b      	ldrh	r3, [r3, #0]
    14c2:	b29b      	uxth	r3, r3
    14c4:	2b00      	cmp	r3, #0
    14c6:	d01f      	beq.n	1508 <ReadUart+0x14c>
			while (buff_count < UART3Count) {
    14c8:	e00b      	b.n	14e2 <ReadUart+0x126>
				*veri_ptr = UART3Buffer[buff_count];
    14ca:	8b7b      	ldrh	r3, [r7, #26]
    14cc:	4a19      	ldr	r2, [pc, #100]	; (1534 <ReadUart+0x178>)
    14ce:	5cd3      	ldrb	r3, [r2, r3]
    14d0:	b2da      	uxtb	r2, r3
    14d2:	69fb      	ldr	r3, [r7, #28]
    14d4:	701a      	strb	r2, [r3, #0]
				buff_count++;
    14d6:	8b7b      	ldrh	r3, [r7, #26]
    14d8:	3301      	adds	r3, #1
    14da:	837b      	strh	r3, [r7, #26]
				veri_ptr++;
    14dc:	69fb      	ldr	r3, [r7, #28]
    14de:	3301      	adds	r3, #1
    14e0:	61fb      	str	r3, [r7, #28]
			UART2Count = 0;
			return buff_count;
		}
	} else if (PortNum == 3) {
		if (UART3Count > 0) {
			while (buff_count < UART3Count) {
    14e2:	4b13      	ldr	r3, [pc, #76]	; (1530 <ReadUart+0x174>)
    14e4:	881b      	ldrh	r3, [r3, #0]
    14e6:	b29b      	uxth	r3, r3
    14e8:	8b7a      	ldrh	r2, [r7, #26]
    14ea:	429a      	cmp	r2, r3
    14ec:	d3ed      	bcc.n	14ca <ReadUart+0x10e>
				*veri_ptr = UART3Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    14ee:	69fb      	ldr	r3, [r7, #28]
    14f0:	2200      	movs	r2, #0
    14f2:	701a      	strb	r2, [r3, #0]
			int len = UART3Count;
    14f4:	4b0e      	ldr	r3, [pc, #56]	; (1530 <ReadUart+0x174>)
    14f6:	881b      	ldrh	r3, [r3, #0]
    14f8:	b29b      	uxth	r3, r3
    14fa:	60fb      	str	r3, [r7, #12]
			UART3Count = 0;
    14fc:	4b0c      	ldr	r3, [pc, #48]	; (1530 <ReadUart+0x174>)
    14fe:	2200      	movs	r2, #0
    1500:	801a      	strh	r2, [r3, #0]
			return len;
    1502:	68fb      	ldr	r3, [r7, #12]
    1504:	b2db      	uxtb	r3, r3
    1506:	e000      	b.n	150a <ReadUart+0x14e>
		}
	}
	return 0;
    1508:	2300      	movs	r3, #0
}
    150a:	4618      	mov	r0, r3
    150c:	3724      	adds	r7, #36	; 0x24
    150e:	46bd      	mov	sp, r7
    1510:	f85d 7b04 	ldr.w	r7, [sp], #4
    1514:	4770      	bx	lr
    1516:	bf00      	nop
    1518:	10000040 	.word	0x10000040
    151c:	10000560 	.word	0x10000560
    1520:	10000042 	.word	0x10000042
    1524:	10000454 	.word	0x10000454
    1528:	10000044 	.word	0x10000044
    152c:	10000768 	.word	0x10000768
    1530:	10000046 	.word	0x10000046
    1534:	10000668 	.word	0x10000668

00001538 <vXmodem1k_Client>:
 **
 ** Returned value:  None
 **
 *****************************************************************************/
void vXmodem1k_Client(uint32_t (*pu32Xmodem1kRxPacketCallback)(uint8_t *pu8Data, uint16_t u16Len))
{
    1538:	b580      	push	{r7, lr}
    153a:	b08a      	sub	sp, #40	; 0x28
    153c:	af00      	add	r7, sp, #0
    153e:	6078      	str	r0, [r7, #4]
	uint32_t u32InProgress = 1;
    1540:	2301      	movs	r3, #1
    1542:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t u32State = STATE_IDLE;
    1544:	2300      	movs	r3, #0
    1546:	623b      	str	r3, [r7, #32]
	uint32_t u32PktLen;
	uint16_t u16CRC;

	/* Prepare UART for RX/TX */

	while(u32InProgress)
    1548:	e0fe      	b.n	1748 <vXmodem1k_Client+0x210>
	{
		switch (u32State)
    154a:	6a3b      	ldr	r3, [r7, #32]
    154c:	2b01      	cmp	r3, #1
    154e:	d014      	beq.n	157a <vXmodem1k_Client+0x42>
    1550:	2b01      	cmp	r3, #1
    1552:	d302      	bcc.n	155a <vXmodem1k_Client+0x22>
    1554:	2b02      	cmp	r3, #2
    1556:	d046      	beq.n	15e6 <vXmodem1k_Client+0xae>
    1558:	e0f5      	b.n	1746 <vXmodem1k_Client+0x20e>
		{
			case STATE_IDLE:
			{
				/* Send command to server indicating we are ready to receive */
				uint8_t u8Cmd = POLL;
    155a:	2343      	movs	r3, #67	; 0x43
    155c:	757b      	strb	r3, [r7, #21]
				UARTSend(UART_NUM, &u8Cmd, 1);
    155e:	f107 0315 	add.w	r3, r7, #21
    1562:	2000      	movs	r0, #0
    1564:	4619      	mov	r1, r3
    1566:	2201      	movs	r2, #1
    1568:	f7ff fe8c 	bl	1284 <UARTSend>

				/* Start timeout to send another poll if we do not get a response */
				vTimerStart(POLL_PERIOD_ms);
    156c:	f640 30b8 	movw	r0, #3000	; 0xbb8
    1570:	f000 f8f4 	bl	175c <vTimerStart>

				/* Wait for a response */
				u32State = STATE_CONNECTING;
    1574:	2301      	movs	r3, #1
    1576:	623b      	str	r3, [r7, #32]
			}
			break;
    1578:	e0e6      	b.n	1748 <vXmodem1k_Client+0x210>
			case STATE_CONNECTING:
			{
				uint8_t u8Data;

				/* Check if a character has been received on the UART */
				if (ReadUart(&u8Data, UART_NUM) )
    157a:	f107 0314 	add.w	r3, r7, #20
    157e:	4618      	mov	r0, r3
    1580:	2100      	movs	r1, #0
    1582:	f7ff ff1b 	bl	13bc <ReadUart>
    1586:	4603      	mov	r3, r0
    1588:	2b00      	cmp	r3, #0
    158a:	d017      	beq.n	15bc <vXmodem1k_Client+0x84>
				{
					/* Expecting a start of packet character */
					if ((u8Data == STX) || (u8Data == SOH))
    158c:	7d3b      	ldrb	r3, [r7, #20]
    158e:	2b02      	cmp	r3, #2
    1590:	d002      	beq.n	1598 <vXmodem1k_Client+0x60>
    1592:	7d3b      	ldrb	r3, [r7, #20]
    1594:	2b01      	cmp	r3, #1
    1596:	d125      	bne.n	15e4 <vXmodem1k_Client+0xac>
					{
						if (u8Data == STX)
    1598:	7d3b      	ldrb	r3, [r7, #20]
    159a:	2b02      	cmp	r3, #2
    159c:	d103      	bne.n	15a6 <vXmodem1k_Client+0x6e>
						{
							/* STX indicates long payload packet is being transmitted */
							u32PktLen = LONG_PACKET_PAYLOAD_LEN;
    159e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    15a2:	61bb      	str	r3, [r7, #24]
    15a4:	e001      	b.n	15aa <vXmodem1k_Client+0x72>
						}
						else
						{
							/* SOH indicates short payload packet is being transmitted */
							u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    15a6:	2380      	movs	r3, #128	; 0x80
    15a8:	61bb      	str	r3, [r7, #24]
						}
						u32ByteCount = 1;
    15aa:	2301      	movs	r3, #1
    15ac:	61fb      	str	r3, [r7, #28]

						/* Start packet timeout */
						vTimerStart(PACKET_TIMEOUT_PERIOD_ms);
    15ae:	f641 3058 	movw	r0, #7000	; 0x1b58
    15b2:	f000 f8d3 	bl	175c <vTimerStart>

						/* Wait for a further characters */
						u32State = STATE_RECEIVING;
    15b6:	2302      	movs	r3, #2
    15b8:	623b      	str	r3, [r7, #32]
    15ba:	e0c5      	b.n	1748 <vXmodem1k_Client+0x210>
					}
				}
				else /* No data received yet, check poll command timeout */
				{
					if ((LPC_TIM0->TCR & 0x01) == 0)
    15bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    15c0:	685b      	ldr	r3, [r3, #4]
    15c2:	f003 0301 	and.w	r3, r3, #1
    15c6:	2b00      	cmp	r3, #0
    15c8:	d10c      	bne.n	15e4 <vXmodem1k_Client+0xac>
					{
						/* Timeout expired following poll command transmission so try again.. */
						uint8_t u8Cmd = POLL;
    15ca:	2343      	movs	r3, #67	; 0x43
    15cc:	74fb      	strb	r3, [r7, #19]
						UARTSend(UART_NUM, &u8Cmd, 1);
    15ce:	f107 0313 	add.w	r3, r7, #19
    15d2:	2000      	movs	r0, #0
    15d4:	4619      	mov	r1, r3
    15d6:	2201      	movs	r2, #1
    15d8:	f7ff fe54 	bl	1284 <UARTSend>

						/* Restart timeout to send another poll if we do not get a response */
						vTimerStart(POLL_PERIOD_ms);
    15dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
    15e0:	f000 f8bc 	bl	175c <vTimerStart>
					}
				}
			}
			break;
    15e4:	e0b0      	b.n	1748 <vXmodem1k_Client+0x210>
			case STATE_RECEIVING:
			{
				uint8_t u8Data;

				/* Check if a character has been received on the UART */
				if (ReadUart(&u8Data, UART_NUM) )
    15e6:	f107 0312 	add.w	r3, r7, #18
    15ea:	4618      	mov	r0, r3
    15ec:	2100      	movs	r1, #0
    15ee:	f7ff fee5 	bl	13bc <ReadUart>
    15f2:	4603      	mov	r3, r0
    15f4:	2b00      	cmp	r3, #0
    15f6:	f000 80a5 	beq.w	1744 <vXmodem1k_Client+0x20c>
				{
					/* Position of received byte determines action we take */
					if (u32ByteCount == 0)
    15fa:	69fb      	ldr	r3, [r7, #28]
    15fc:	2b00      	cmp	r3, #0
    15fe:	d129      	bne.n	1654 <vXmodem1k_Client+0x11c>
					{
						/* Expecting a start of packet character */
						if ((u8Data == STX) || (u8Data == SOH))
    1600:	7cbb      	ldrb	r3, [r7, #18]
    1602:	2b02      	cmp	r3, #2
    1604:	d002      	beq.n	160c <vXmodem1k_Client+0xd4>
    1606:	7cbb      	ldrb	r3, [r7, #18]
    1608:	2b01      	cmp	r3, #1
    160a:	d10f      	bne.n	162c <vXmodem1k_Client+0xf4>
						{
							if (u8Data == STX)
    160c:	7cbb      	ldrb	r3, [r7, #18]
    160e:	2b02      	cmp	r3, #2
    1610:	d103      	bne.n	161a <vXmodem1k_Client+0xe2>
							{
								/* STX indicates long payload packet is being transmitted */
								u32PktLen = LONG_PACKET_PAYLOAD_LEN;
    1612:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1616:	61bb      	str	r3, [r7, #24]
    1618:	e001      	b.n	161e <vXmodem1k_Client+0xe6>
							}
							else
							{
								/* SOH indicates short payload packet is being transmitted */
								u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    161a:	2380      	movs	r3, #128	; 0x80
    161c:	61bb      	str	r3, [r7, #24]
							}
							u32ByteCount = 1;
    161e:	2301      	movs	r3, #1
    1620:	61fb      	str	r3, [r7, #28]

							/* Start packet timeout */
							vTimerStart(PACKET_TIMEOUT_PERIOD_ms);
    1622:	f641 3058 	movw	r0, #7000	; 0x1b58
    1626:	f000 f899 	bl	175c <vTimerStart>
    162a:	e08b      	b.n	1744 <vXmodem1k_Client+0x20c>
						}
						else if (u8Data == EOT)
    162c:	7cbb      	ldrb	r3, [r7, #18]
    162e:	2b04      	cmp	r3, #4
    1630:	f040 8088 	bne.w	1744 <vXmodem1k_Client+0x20c>
						{
							/* Server indicating transmission is complete */
							uint8_t u8Cmd = ACK;
    1634:	2306      	movs	r3, #6
    1636:	747b      	strb	r3, [r7, #17]
							UARTSend(UART_NUM, &u8Cmd, 1);
    1638:	f107 0311 	add.w	r3, r7, #17
    163c:	2000      	movs	r0, #0
    163e:	4619      	mov	r1, r3
    1640:	2201      	movs	r2, #1
    1642:	f7ff fe1f 	bl	1284 <UARTSend>

							/* Close xmodem client */
							u32InProgress = 0;
    1646:	2300      	movs	r3, #0
    1648:	627b      	str	r3, [r7, #36]	; 0x24

							/* Call the call back function to indicated a complete transmission */
							/* If length == 0, then EOT */
							pu32Xmodem1kRxPacketCallback(&au8RxBuffer[0], 0);
    164a:	687b      	ldr	r3, [r7, #4]
    164c:	4842      	ldr	r0, [pc, #264]	; (1758 <vXmodem1k_Client+0x220>)
    164e:	2100      	movs	r1, #0
    1650:	4798      	blx	r3
    1652:	e077      	b.n	1744 <vXmodem1k_Client+0x20c>
						else
						{
							/* TODO - Unexpected character, do what...? */
						}
					}
					else if (u32ByteCount == 1)
    1654:	69fb      	ldr	r3, [r7, #28]
    1656:	2b01      	cmp	r3, #1
    1658:	d103      	bne.n	1662 <vXmodem1k_Client+0x12a>
					{
						/* Byte 1 is the packet number - should be different from last one we received */
						u32ByteCount++;
    165a:	69fb      	ldr	r3, [r7, #28]
    165c:	3301      	adds	r3, #1
    165e:	61fb      	str	r3, [r7, #28]
    1660:	e070      	b.n	1744 <vXmodem1k_Client+0x20c>
					}
					else if (u32ByteCount == 2)
    1662:	69fb      	ldr	r3, [r7, #28]
    1664:	2b02      	cmp	r3, #2
    1666:	d103      	bne.n	1670 <vXmodem1k_Client+0x138>
					{
						/* Byte 2 is the packet number inverted - check for error with last byte */
						u32ByteCount++;
    1668:	69fb      	ldr	r3, [r7, #28]
    166a:	3301      	adds	r3, #1
    166c:	61fb      	str	r3, [r7, #28]
    166e:	e069      	b.n	1744 <vXmodem1k_Client+0x20c>
					}
					else if (((u32ByteCount == 131 ) && (u32PktLen == SHORT_PACKET_PAYLOAD_LEN)) ||
    1670:	69fb      	ldr	r3, [r7, #28]
    1672:	2b83      	cmp	r3, #131	; 0x83
    1674:	d102      	bne.n	167c <vXmodem1k_Client+0x144>
    1676:	69bb      	ldr	r3, [r7, #24]
    1678:	2b80      	cmp	r3, #128	; 0x80
    167a:	d008      	beq.n	168e <vXmodem1k_Client+0x156>
    167c:	69fb      	ldr	r3, [r7, #28]
    167e:	f240 4203 	movw	r2, #1027	; 0x403
    1682:	4293      	cmp	r3, r2
    1684:	d109      	bne.n	169a <vXmodem1k_Client+0x162>
							 ((u32ByteCount == 1027) && (u32PktLen == LONG_PACKET_PAYLOAD_LEN)))
    1686:	69bb      	ldr	r3, [r7, #24]
    1688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    168c:	d105      	bne.n	169a <vXmodem1k_Client+0x162>
					{
						/* If payload is short byte 131 is the MS byte of the packet CRC, if payload
						   is long byte 1027 is the MS byte of the packet CRC. */
						u16CRC = u8Data;
    168e:	7cbb      	ldrb	r3, [r7, #18]
    1690:	82fb      	strh	r3, [r7, #22]
						u32ByteCount++;
    1692:	69fb      	ldr	r3, [r7, #28]
    1694:	3301      	adds	r3, #1
    1696:	61fb      	str	r3, [r7, #28]
    1698:	e054      	b.n	1744 <vXmodem1k_Client+0x20c>
					}
					else if (((u32ByteCount == 132)  && (u32PktLen == SHORT_PACKET_PAYLOAD_LEN)) ||
    169a:	69fb      	ldr	r3, [r7, #28]
    169c:	2b84      	cmp	r3, #132	; 0x84
    169e:	d102      	bne.n	16a6 <vXmodem1k_Client+0x16e>
    16a0:	69bb      	ldr	r3, [r7, #24]
    16a2:	2b80      	cmp	r3, #128	; 0x80
    16a4:	d008      	beq.n	16b8 <vXmodem1k_Client+0x180>
    16a6:	69fb      	ldr	r3, [r7, #28]
    16a8:	f240 4204 	movw	r2, #1028	; 0x404
    16ac:	4293      	cmp	r3, r2
    16ae:	d140      	bne.n	1732 <vXmodem1k_Client+0x1fa>
					         ((u32ByteCount == 1028) && (u32PktLen == LONG_PACKET_PAYLOAD_LEN)))
    16b0:	69bb      	ldr	r3, [r7, #24]
    16b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    16b6:	d13c      	bne.n	1732 <vXmodem1k_Client+0x1fa>
					{
						/* If payload is short byte 132 is the LS byte of the packet CRC, if payload
						   is long byte 1028 is the LS byte of the packet CRC. */
						u16CRC <<= 8;
    16b8:	8afb      	ldrh	r3, [r7, #22]
    16ba:	021b      	lsls	r3, r3, #8
    16bc:	82fb      	strh	r3, [r7, #22]
						u16CRC  |= u8Data;
    16be:	7cbb      	ldrb	r3, [r7, #18]
    16c0:	b29a      	uxth	r2, r3
    16c2:	8afb      	ldrh	r3, [r7, #22]
    16c4:	4313      	orrs	r3, r2
    16c6:	82fb      	strh	r3, [r7, #22]

						/* Check the received CRC against the CRC we generate on the packet data */
						if (u16CRC_Calc16(&au8RxBuffer[0], u32PktLen) == u16CRC)
    16c8:	69bb      	ldr	r3, [r7, #24]
    16ca:	b29b      	uxth	r3, r3
    16cc:	b21b      	sxth	r3, r3
    16ce:	4822      	ldr	r0, [pc, #136]	; (1758 <vXmodem1k_Client+0x220>)
    16d0:	4619      	mov	r1, r3
    16d2:	f7fe fe15 	bl	300 <u16CRC_Calc16>
    16d6:	4603      	mov	r3, r0
    16d8:	461a      	mov	r2, r3
    16da:	8afb      	ldrh	r3, [r7, #22]
    16dc:	4293      	cmp	r3, r2
    16de:	d11c      	bne.n	171a <vXmodem1k_Client+0x1e2>
						{
							uint8_t u8Cmd;

							/* Have now received full packet, call handler BEFORE sending ACK to application
							   can process data before more is sent. */
							if (pu32Xmodem1kRxPacketCallback(&au8RxBuffer[0], u32PktLen) != 0)
    16e0:	69bb      	ldr	r3, [r7, #24]
    16e2:	b29a      	uxth	r2, r3
    16e4:	687b      	ldr	r3, [r7, #4]
    16e6:	481c      	ldr	r0, [pc, #112]	; (1758 <vXmodem1k_Client+0x220>)
    16e8:	4611      	mov	r1, r2
    16ea:	4798      	blx	r3
    16ec:	4603      	mov	r3, r0
    16ee:	2b00      	cmp	r3, #0
    16f0:	d009      	beq.n	1706 <vXmodem1k_Client+0x1ce>
							{
								/* Packet handled successfully, send ACK to server indicating we are ready for next packet */
								u8Cmd = ACK;
    16f2:	2306      	movs	r3, #6
    16f4:	743b      	strb	r3, [r7, #16]
								UARTSend(UART_NUM, &u8Cmd, 1);
    16f6:	f107 0310 	add.w	r3, r7, #16
    16fa:	2000      	movs	r0, #0
    16fc:	4619      	mov	r1, r3
    16fe:	2201      	movs	r2, #1
    1700:	f7ff fdc0 	bl	1284 <UARTSend>
    1704:	e012      	b.n	172c <vXmodem1k_Client+0x1f4>
							}
							else
							{
								/* Something went wrong with packet handler, all we can do is send NAK causing the
								   packet to be retransmitted by the server.. */
								u8Cmd = NAK;
    1706:	2315      	movs	r3, #21
    1708:	743b      	strb	r3, [r7, #16]
								UARTSend(UART_NUM, &u8Cmd, 1);
    170a:	f107 0310 	add.w	r3, r7, #16
    170e:	2000      	movs	r0, #0
    1710:	4619      	mov	r1, r3
    1712:	2201      	movs	r2, #1
    1714:	f7ff fdb6 	bl	1284 <UARTSend>
    1718:	e008      	b.n	172c <vXmodem1k_Client+0x1f4>
							}
						}
						else /* Error CRC calculated does not match that received */
						{
							/* Indicate problem to server - should result in packet being resent.. */
							uint8_t u8Cmd = NAK;
    171a:	2315      	movs	r3, #21
    171c:	73fb      	strb	r3, [r7, #15]
							UARTSend(UART_NUM, &u8Cmd, 1);
    171e:	f107 030f 	add.w	r3, r7, #15
    1722:	2000      	movs	r0, #0
    1724:	4619      	mov	r1, r3
    1726:	2201      	movs	r2, #1
    1728:	f7ff fdac 	bl	1284 <UARTSend>
						}
						u32ByteCount = 0;
    172c:	2300      	movs	r3, #0
    172e:	61fb      	str	r3, [r7, #28]
    1730:	e008      	b.n	1744 <vXmodem1k_Client+0x20c>
					}
					else
					{
						/* Must be payload data so store */
						au8RxBuffer[u32ByteCount - PACKET_HEADER_LEN] = u8Data;
    1732:	69fb      	ldr	r3, [r7, #28]
    1734:	3b03      	subs	r3, #3
    1736:	7cb9      	ldrb	r1, [r7, #18]
    1738:	4a07      	ldr	r2, [pc, #28]	; (1758 <vXmodem1k_Client+0x220>)
    173a:	54d1      	strb	r1, [r2, r3]
						u32ByteCount++;
    173c:	69fb      	ldr	r3, [r7, #28]
    173e:	3301      	adds	r3, #1
    1740:	61fb      	str	r3, [r7, #28]
    1742:	e7ff      	b.n	1744 <vXmodem1k_Client+0x20c>
				else
				{
					/* TODO - Check packet timeout */
				}
			}
			break;
    1744:	e000      	b.n	1748 <vXmodem1k_Client+0x210>

			default:
				break;
    1746:	bf00      	nop
	uint32_t u32PktLen;
	uint16_t u16CRC;

	/* Prepare UART for RX/TX */

	while(u32InProgress)
    1748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    174a:	2b00      	cmp	r3, #0
    174c:	f47f aefd 	bne.w	154a <vXmodem1k_Client+0x12>

			default:
				break;
		}
	}
}
    1750:	3728      	adds	r7, #40	; 0x28
    1752:	46bd      	mov	sp, r7
    1754:	bd80      	pop	{r7, pc}
    1756:	bf00      	nop
    1758:	10000048 	.word	0x10000048

0000175c <vTimerStart>:
 **
 ** Returned value:  None
 **
 *****************************************************************************/
static void vTimerStart(uint32_t u32Periodms)
{
    175c:	b480      	push	{r7}
    175e:	b083      	sub	sp, #12
    1760:	af00      	add	r7, sp, #0
    1762:	6078      	str	r0, [r7, #4]
	/* Enable the timer clock */
	LPC_SC->PCONP |= (1UL << 1);
    1764:	4a19      	ldr	r2, [pc, #100]	; (17cc <vTimerStart+0x70>)
    1766:	4b19      	ldr	r3, [pc, #100]	; (17cc <vTimerStart+0x70>)
    1768:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    176c:	f043 0302 	orr.w	r3, r3, #2
    1770:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

	/* Configure the timer so that we can poll for a match */
	LPC_TIM0->TCR = 0x02;		/* reset timer */
    1774:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    1778:	2202      	movs	r2, #2
    177a:	605a      	str	r2, [r3, #4]
	LPC_TIM0->PR  = 0x00;		/* set prescaler to zero */
    177c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    1780:	2200      	movs	r2, #0
    1782:	60da      	str	r2, [r3, #12]
	LPC_TIM0->MR0 = u32Periodms * ((SystemCoreClock / 4 / (LPC_TIM0->PR + 1)) / 1000UL);
    1784:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    1788:	4b11      	ldr	r3, [pc, #68]	; (17d0 <vTimerStart+0x74>)
    178a:	681b      	ldr	r3, [r3, #0]
    178c:	4a11      	ldr	r2, [pc, #68]	; (17d4 <vTimerStart+0x78>)
    178e:	fba2 2303 	umull	r2, r3, r2, r3
    1792:	0a1a      	lsrs	r2, r3, #8
    1794:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    1798:	68db      	ldr	r3, [r3, #12]
    179a:	3301      	adds	r3, #1
    179c:	fbb2 f3f3 	udiv	r3, r2, r3
    17a0:	687a      	ldr	r2, [r7, #4]
    17a2:	fb02 f303 	mul.w	r3, r2, r3
    17a6:	618b      	str	r3, [r1, #24]
	LPC_TIM0->IR  = 0xFF;		/* reset all interrupts */
    17a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    17ac:	22ff      	movs	r2, #255	; 0xff
    17ae:	601a      	str	r2, [r3, #0]
	LPC_TIM0->MCR = 0x04;		/* stop timer on match */
    17b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    17b4:	2204      	movs	r2, #4
    17b6:	615a      	str	r2, [r3, #20]
	LPC_TIM0->TCR = 0x01;		/* start timer */
    17b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    17bc:	2201      	movs	r2, #1
    17be:	605a      	str	r2, [r3, #4]
}
    17c0:	370c      	adds	r7, #12
    17c2:	46bd      	mov	sp, r7
    17c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    17c8:	4770      	bx	lr
    17ca:	bf00      	nop
    17cc:	400fc000 	.word	0x400fc000
    17d0:	10000004 	.word	0x10000004
    17d4:	10624dd3 	.word	0x10624dd3

000017d8 <SystemCoreClockUpdate>:

/*----------------------------------------------------------------------------
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
    17d8:	b538      	push	{r3, r4, r5, lr}

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    17da:	4b24      	ldr	r3, [pc, #144]	; (186c <SystemCoreClockUpdate+0x94>)
    17dc:	4c24      	ldr	r4, [pc, #144]	; (1870 <SystemCoreClockUpdate+0x98>)
    17de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    17e2:	f3c2 6201 	ubfx	r2, r2, #24, #2
    17e6:	2a03      	cmp	r2, #3
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    17e8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    17ec:	f002 0203 	and.w	r2, r2, #3
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    17f0:	d128      	bne.n	1844 <SystemCoreClockUpdate+0x6c>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    17f2:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    17f6:	2a01      	cmp	r2, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    17f8:	f3c1 010e 	ubfx	r1, r1, #0, #15
    17fc:	f101 0101 	add.w	r1, r1, #1
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    1800:	d009      	beq.n	1816 <SystemCoreClockUpdate+0x3e>
    1802:	2a02      	cmp	r2, #2
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    1804:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    1808:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    180c:	f3c2 4207 	ubfx	r2, r2, #16, #8
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    1810:	d009      	beq.n	1826 <SystemCoreClockUpdate+0x4e>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = (IRC_OSC * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    1812:	4818      	ldr	r0, [pc, #96]	; (1874 <SystemCoreClockUpdate+0x9c>)
    1814:	e009      	b.n	182a <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    1816:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    181a:	4817      	ldr	r0, [pc, #92]	; (1878 <SystemCoreClockUpdate+0xa0>)
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
    181c:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    1820:	f3c2 4207 	ubfx	r2, r2, #16, #8
    1824:	e001      	b.n	182a <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    1826:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
    182a:	3201      	adds	r2, #1
    182c:	2300      	movs	r3, #0
    182e:	fba1 0100 	umull	r0, r1, r1, r0
    1832:	f002 f841 	bl	38b8 <__aeabi_uldivmod>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    1836:	b2ea      	uxtb	r2, r5
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    1838:	3201      	adds	r2, #1
    183a:	2300      	movs	r3, #0
    183c:	f002 f83c 	bl	38b8 <__aeabi_uldivmod>
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
    1840:	6020      	str	r0, [r4, #0]
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    1842:	bd38      	pop	{r3, r4, r5, pc}
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    1844:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    1848:	2a01      	cmp	r2, #1
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    184a:	b2db      	uxtb	r3, r3
    184c:	f103 0301 	add.w	r3, r3, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    1850:	d003      	beq.n	185a <SystemCoreClockUpdate+0x82>
    1852:	2a02      	cmp	r2, #2
    1854:	d003      	beq.n	185e <SystemCoreClockUpdate+0x86>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    1856:	4a09      	ldr	r2, [pc, #36]	; (187c <SystemCoreClockUpdate+0xa4>)
    1858:	e003      	b.n	1862 <SystemCoreClockUpdate+0x8a>
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    185a:	4a09      	ldr	r2, [pc, #36]	; (1880 <SystemCoreClockUpdate+0xa8>)
    185c:	e001      	b.n	1862 <SystemCoreClockUpdate+0x8a>
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    185e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
    1862:	fbb2 f3f3 	udiv	r3, r2, r3
    1866:	6023      	str	r3, [r4, #0]
    1868:	bd38      	pop	{r3, r4, r5, pc}
    186a:	bf00      	nop
    186c:	400fc000 	.word	0x400fc000
    1870:	10000004 	.word	0x10000004
    1874:	007a1200 	.word	0x007a1200
    1878:	016e3600 	.word	0x016e3600
    187c:	003d0900 	.word	0x003d0900
    1880:	00b71b00 	.word	0x00b71b00

00001884 <SystemInit>:
 *         Initialize the System.
 */
void SystemInit (void)
{
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
    1884:	4b34      	ldr	r3, [pc, #208]	; (1958 <SystemInit+0xd4>)
    1886:	2220      	movs	r2, #32
    1888:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    188c:	461a      	mov	r2, r3
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    188e:	f8d2 11a0 	ldr.w	r1, [r2, #416]	; 0x1a0
    1892:	4b31      	ldr	r3, [pc, #196]	; (1958 <SystemInit+0xd4>)
    1894:	0648      	lsls	r0, r1, #25
    1896:	d5fa      	bpl.n	188e <SystemInit+0xa>
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    1898:	2203      	movs	r2, #3
    189a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    189e:	2200      	movs	r2, #0
    18a0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    18a4:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    18a8:	4a2c      	ldr	r2, [pc, #176]	; (195c <SystemInit+0xd8>)
  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    18aa:	2001      	movs	r0, #1
    18ac:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    18b0:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    18b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
  LPC_SC->PLL0FEED  = 0x55;
    18b6:	2255      	movs	r2, #85	; 0x55

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    18b8:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    18bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    18c0:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    18c4:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    18c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    18cc:	4b22      	ldr	r3, [pc, #136]	; (1958 <SystemInit+0xd4>)
    18ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    18d2:	0151      	lsls	r1, r2, #5
    18d4:	d5fa      	bpl.n	18cc <SystemInit+0x48>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    18d6:	2203      	movs	r2, #3
    18d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    18dc:	22aa      	movs	r2, #170	; 0xaa
    18de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    18e2:	2255      	movs	r2, #85	; 0x55
    18e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    18e8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
    18ec:	4a1a      	ldr	r2, [pc, #104]	; (1958 <SystemInit+0xd4>)
    18ee:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
    18f2:	d0f9      	beq.n	18e8 <SystemInit+0x64>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
    18f4:	2323      	movs	r3, #35	; 0x23
    18f6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0xAA;
    18fa:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PLL1FEED  = 0x55;
    18fc:	2355      	movs	r3, #85	; 0x55

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    18fe:	2001      	movs	r0, #1
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
  LPC_SC->PLL1FEED  = 0xAA;
    1900:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    1904:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    1908:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    190c:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    1910:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    1914:	4b10      	ldr	r3, [pc, #64]	; (1958 <SystemInit+0xd4>)
    1916:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    191a:	0552      	lsls	r2, r2, #21
    191c:	d5fa      	bpl.n	1914 <SystemInit+0x90>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    191e:	2203      	movs	r2, #3
    1920:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    1924:	22aa      	movs	r2, #170	; 0xaa
    1926:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    192a:	2255      	movs	r2, #85	; 0x55
    192c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    1930:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    1934:	4a08      	ldr	r2, [pc, #32]	; (1958 <SystemInit+0xd4>)
    1936:	f411 7f40 	tst.w	r1, #768	; 0x300
    193a:	d0f9      	beq.n	1930 <SystemInit+0xac>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    193c:	4b08      	ldr	r3, [pc, #32]	; (1960 <SystemInit+0xdc>)
    193e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    1942:	2300      	movs	r3, #0
    1944:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = (LPC_SC->FLASHCFG & ~0x0000F000) | FLASHCFG_Val;
    1948:	6813      	ldr	r3, [r2, #0]
    194a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
    194e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1952:	6013      	str	r3, [r2, #0]
    1954:	4770      	bx	lr
    1956:	bf00      	nop
    1958:	400fc000 	.word	0x400fc000
    195c:	00050063 	.word	0x00050063
    1960:	042887de 	.word	0x042887de

00001964 <__main>:
    1964:	b508      	push	{r3, lr}
    1966:	2000      	movs	r0, #0
    1968:	4601      	mov	r1, r0
    196a:	4602      	mov	r2, r0
    196c:	f000 fd28 	bl	23c0 <_initio>
    1970:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1974:	f7fe be10 	b.w	598 <main>

00001978 <fp_round>:
    1978:	5c42      	ldrb	r2, [r0, r1]
    197a:	1843      	adds	r3, r0, r1
    197c:	2a34      	cmp	r2, #52	; 0x34
    197e:	dc01      	bgt.n	1984 <fp_round+0xc>
    1980:	2000      	movs	r0, #0
    1982:	4770      	bx	lr
    1984:	2a35      	cmp	r2, #53	; 0x35
    1986:	d106      	bne.n	1996 <fp_round+0x1e>
    1988:	4619      	mov	r1, r3
    198a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    198e:	2a30      	cmp	r2, #48	; 0x30
    1990:	d0fb      	beq.n	198a <fp_round+0x12>
    1992:	2a00      	cmp	r2, #0
    1994:	d0f4      	beq.n	1980 <fp_round+0x8>
    1996:	461a      	mov	r2, r3
    1998:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    199c:	2939      	cmp	r1, #57	; 0x39
    199e:	d102      	bne.n	19a6 <fp_round+0x2e>
    19a0:	2130      	movs	r1, #48	; 0x30
    19a2:	7011      	strb	r1, [r2, #0]
    19a4:	e7f8      	b.n	1998 <fp_round+0x20>
    19a6:	3101      	adds	r1, #1
    19a8:	7011      	strb	r1, [r2, #0]
    19aa:	7802      	ldrb	r2, [r0, #0]
    19ac:	2a30      	cmp	r2, #48	; 0x30
    19ae:	d0e7      	beq.n	1980 <fp_round+0x8>
    19b0:	1a1a      	subs	r2, r3, r0
    19b2:	2a00      	cmp	r2, #0
    19b4:	db03      	blt.n	19be <fp_round+0x46>
    19b6:	f813 2901 	ldrb.w	r2, [r3], #-1
    19ba:	709a      	strb	r2, [r3, #2]
    19bc:	e7f8      	b.n	19b0 <fp_round+0x38>
    19be:	2001      	movs	r0, #1
    19c0:	4770      	bx	lr

000019c2 <pr_dec.constprop.1>:
    19c2:	b510      	push	{r4, lr}
    19c4:	1f8c      	subs	r4, r1, #6
    19c6:	42a1      	cmp	r1, r4
    19c8:	d00d      	beq.n	19e6 <pr_dec.constprop.1+0x24>
    19ca:	230a      	movs	r3, #10
    19cc:	fb90 f3f3 	sdiv	r3, r0, r3
    19d0:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    19d4:	3030      	adds	r0, #48	; 0x30
    19d6:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
    19da:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    19de:	f801 0901 	strb.w	r0, [r1], #-1
    19e2:	4618      	mov	r0, r3
    19e4:	e7ef      	b.n	19c6 <pr_dec.constprop.1+0x4>
    19e6:	bd10      	pop	{r4, pc}

000019e8 <sprintf>:
    19e8:	b40e      	push	{r1, r2, r3}
    19ea:	b530      	push	{r4, r5, lr}
    19ec:	4605      	mov	r5, r0
    19ee:	b090      	sub	sp, #64	; 0x40
    19f0:	ab13      	add	r3, sp, #76	; 0x4c
    19f2:	f853 4b04 	ldr.w	r4, [r3], #4
    19f6:	2100      	movs	r1, #0
    19f8:	2228      	movs	r2, #40	; 0x28
    19fa:	a806      	add	r0, sp, #24
    19fc:	9305      	str	r3, [sp, #20]
    19fe:	f001 fbc8 	bl	3192 <memset>
    1a02:	230a      	movs	r3, #10
    1a04:	9309      	str	r3, [sp, #36]	; 0x24
    1a06:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    1a0a:	9308      	str	r3, [sp, #32]
    1a0c:	9b05      	ldr	r3, [sp, #20]
    1a0e:	9400      	str	r4, [sp, #0]
    1a10:	9301      	str	r3, [sp, #4]
    1a12:	4b0f      	ldr	r3, [pc, #60]	; (1a50 <sprintf+0x68>)
    1a14:	a806      	add	r0, sp, #24
    1a16:	9302      	str	r3, [sp, #8]
    1a18:	f04f 32ff 	mov.w	r2, #4294967295
    1a1c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    1a20:	9506      	str	r5, [sp, #24]
    1a22:	f000 fd1f 	bl	2464 <__vfprintf>
    1a26:	9b08      	ldr	r3, [sp, #32]
    1a28:	4604      	mov	r4, r0
    1a2a:	3b01      	subs	r3, #1
    1a2c:	2b00      	cmp	r3, #0
    1a2e:	9308      	str	r3, [sp, #32]
    1a30:	db03      	blt.n	1a3a <sprintf+0x52>
    1a32:	9b06      	ldr	r3, [sp, #24]
    1a34:	2200      	movs	r2, #0
    1a36:	701a      	strb	r2, [r3, #0]
    1a38:	e003      	b.n	1a42 <sprintf+0x5a>
    1a3a:	2000      	movs	r0, #0
    1a3c:	a906      	add	r1, sp, #24
    1a3e:	f001 fbcc 	bl	31da <__flsbuf>
    1a42:	4620      	mov	r0, r4
    1a44:	b010      	add	sp, #64	; 0x40
    1a46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1a4a:	b003      	add	sp, #12
    1a4c:	4770      	bx	lr
    1a4e:	bf00      	nop
    1a50:	00001a59 	.word	0x00001a59
    1a54:	00000000 	.word	0x00000000

00001a58 <fp_display>:
    1a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a5c:	4614      	mov	r4, r2
    1a5e:	f647 72f0 	movw	r2, #32752	; 0x7ff0
    1a62:	684e      	ldr	r6, [r1, #4]
    1a64:	b09f      	sub	sp, #124	; 0x7c
    1a66:	9306      	str	r3, [sp, #24]
    1a68:	f3c6 430f 	ubfx	r3, r6, #16, #16
    1a6c:	f023 030f 	bic.w	r3, r3, #15
    1a70:	045b      	lsls	r3, r3, #17
    1a72:	680f      	ldr	r7, [r1, #0]
    1a74:	0c5b      	lsrs	r3, r3, #17
    1a76:	4293      	cmp	r3, r2
    1a78:	9005      	str	r0, [sp, #20]
    1a7a:	f8dd b0a4 	ldr.w	fp, [sp, #164]	; 0xa4
    1a7e:	9708      	str	r7, [sp, #32]
    1a80:	9607      	str	r6, [sp, #28]
    1a82:	d127      	bne.n	1ad4 <fp_display+0x7c>
    1a84:	2300      	movs	r3, #0
    1a86:	70e3      	strb	r3, [r4, #3]
    1a88:	f3c6 0313 	ubfx	r3, r6, #0, #20
    1a8c:	433b      	orrs	r3, r7
    1a8e:	f04f 036e 	mov.w	r3, #110	; 0x6e
    1a92:	d115      	bne.n	1ac0 <fp_display+0x68>
    1a94:	2269      	movs	r2, #105	; 0x69
    1a96:	7063      	strb	r3, [r4, #1]
    1a98:	2e00      	cmp	r6, #0
    1a9a:	f04f 0366 	mov.w	r3, #102	; 0x66
    1a9e:	7022      	strb	r2, [r4, #0]
    1aa0:	70a3      	strb	r3, [r4, #2]
    1aa2:	da01      	bge.n	1aa8 <fp_display+0x50>
    1aa4:	4b84      	ldr	r3, [pc, #528]	; (1cb8 <fp_display+0x260>)
    1aa6:	e010      	b.n	1aca <fp_display+0x72>
    1aa8:	9b06      	ldr	r3, [sp, #24]
    1aaa:	079a      	lsls	r2, r3, #30
    1aac:	d406      	bmi.n	1abc <fp_display+0x64>
    1aae:	4a83      	ldr	r2, [pc, #524]	; (1cbc <fp_display+0x264>)
    1ab0:	f013 0f04 	tst.w	r3, #4
    1ab4:	4b82      	ldr	r3, [pc, #520]	; (1cc0 <fp_display+0x268>)
    1ab6:	bf08      	it	eq
    1ab8:	4613      	moveq	r3, r2
    1aba:	e006      	b.n	1aca <fp_display+0x72>
    1abc:	4b81      	ldr	r3, [pc, #516]	; (1cc4 <fp_display+0x26c>)
    1abe:	e004      	b.n	1aca <fp_display+0x72>
    1ac0:	7023      	strb	r3, [r4, #0]
    1ac2:	2261      	movs	r2, #97	; 0x61
    1ac4:	70a3      	strb	r3, [r4, #2]
    1ac6:	4b7d      	ldr	r3, [pc, #500]	; (1cbc <fp_display+0x264>)
    1ac8:	7062      	strb	r2, [r4, #1]
    1aca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1acc:	2003      	movs	r0, #3
    1ace:	6013      	str	r3, [r2, #0]
    1ad0:	f000 bc3f 	b.w	2352 <fp_display+0x8fa>
    1ad4:	9b05      	ldr	r3, [sp, #20]
    1ad6:	f023 0320 	bic.w	r3, r3, #32
    1ada:	2b41      	cmp	r3, #65	; 0x41
    1adc:	f000 8244 	beq.w	1f68 <fp_display+0x510>
    1ae0:	4638      	mov	r0, r7
    1ae2:	4631      	mov	r1, r6
    1ae4:	2200      	movs	r2, #0
    1ae6:	2300      	movs	r3, #0
    1ae8:	f002 fac4 	bl	4074 <__aeabi_dcmplt>
    1aec:	b138      	cbz	r0, 1afe <fp_display+0xa6>
    1aee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    1af2:	9a08      	ldr	r2, [sp, #32]
    1af4:	461e      	mov	r6, r3
    1af6:	2301      	movs	r3, #1
    1af8:	4617      	mov	r7, r2
    1afa:	9309      	str	r3, [sp, #36]	; 0x24
    1afc:	e000      	b.n	1b00 <fp_display+0xa8>
    1afe:	9009      	str	r0, [sp, #36]	; 0x24
    1b00:	4638      	mov	r0, r7
    1b02:	4631      	mov	r1, r6
    1b04:	2200      	movs	r2, #0
    1b06:	2300      	movs	r3, #0
    1b08:	f002 fa9e 	bl	4048 <__aeabi_dcmpeq>
    1b0c:	2800      	cmp	r0, #0
    1b0e:	f040 820d 	bne.w	1f2c <fp_display+0x4d4>
    1b12:	f240 152d 	movw	r5, #301	; 0x12d
    1b16:	aa11      	add	r2, sp, #68	; 0x44
    1b18:	4638      	mov	r0, r7
    1b1a:	4631      	mov	r1, r6
    1b1c:	f001 fc5f 	bl	33de <_frexpl>
    1b20:	9a11      	ldr	r2, [sp, #68]	; 0x44
    1b22:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    1b26:	4355      	muls	r5, r2
    1b28:	f5a5 53ab 	sub.w	r3, r5, #5472	; 0x1560
    1b2c:	3b1c      	subs	r3, #28
    1b2e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    1b32:	fb93 f5f5 	sdiv	r5, r3, r5
    1b36:	2000      	movs	r0, #0
    1b38:	4963      	ldr	r1, [pc, #396]	; (1cc8 <fp_display+0x270>)
    1b3a:	1aaa      	subs	r2, r5, r2
    1b3c:	f001 fc7c 	bl	3438 <_ldexpl>
    1b40:	2d00      	cmp	r5, #0
    1b42:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    1b46:	da06      	bge.n	1b56 <fp_display+0xfe>
    1b48:	a355      	add	r3, pc, #340	; (adr r3, 1ca0 <fp_display+0x248>)
    1b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b4e:	426e      	negs	r6, r5
    1b50:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    1b54:	e006      	b.n	1b64 <fp_display+0x10c>
    1b56:	4b5d      	ldr	r3, [pc, #372]	; (1ccc <fp_display+0x274>)
    1b58:	f04f 0200 	mov.w	r2, #0
    1b5c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    1b60:	d016      	beq.n	1b90 <fp_display+0x138>
    1b62:	462e      	mov	r6, r5
    1b64:	07f3      	lsls	r3, r6, #31
    1b66:	d509      	bpl.n	1b7c <fp_display+0x124>
    1b68:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    1b6c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    1b70:	f001 ff5e 	bl	3a30 <__aeabi_dmul>
    1b74:	2e01      	cmp	r6, #1
    1b76:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    1b7a:	d009      	beq.n	1b90 <fp_display+0x138>
    1b7c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    1b80:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    1b84:	f001 ff54 	bl	3a30 <__aeabi_dmul>
    1b88:	1076      	asrs	r6, r6, #1
    1b8a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    1b8e:	e7e9      	b.n	1b64 <fp_display+0x10c>
    1b90:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    1b94:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    1b98:	f001 ffda 	bl	3b50 <__aeabi_ddiv>
    1b9c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    1ba0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    1ba4:	a340      	add	r3, pc, #256	; (adr r3, 1ca8 <fp_display+0x250>)
    1ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
    1baa:	f002 fa63 	bl	4074 <__aeabi_dcmplt>
    1bae:	b188      	cbz	r0, 1bd4 <fp_display+0x17c>
    1bb0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    1bb4:	2200      	movs	r2, #0
    1bb6:	4b46      	ldr	r3, [pc, #280]	; (1cd0 <fp_display+0x278>)
    1bb8:	f001 ff3a 	bl	3a30 <__aeabi_dmul>
    1bbc:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    1bc0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    1bc4:	2200      	movs	r2, #0
    1bc6:	4b42      	ldr	r3, [pc, #264]	; (1cd0 <fp_display+0x278>)
    1bc8:	f001 ffc2 	bl	3b50 <__aeabi_ddiv>
    1bcc:	3d01      	subs	r5, #1
    1bce:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    1bd2:	e7e5      	b.n	1ba0 <fp_display+0x148>
    1bd4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    1bd8:	a335      	add	r3, pc, #212	; (adr r3, 1cb0 <fp_display+0x258>)
    1bda:	e9d3 2300 	ldrd	r2, r3, [r3]
    1bde:	f002 faa5 	bl	412c <__aeabi_dcmpge>
    1be2:	b188      	cbz	r0, 1c08 <fp_display+0x1b0>
    1be4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    1be8:	2200      	movs	r2, #0
    1bea:	4b39      	ldr	r3, [pc, #228]	; (1cd0 <fp_display+0x278>)
    1bec:	f001 ffb0 	bl	3b50 <__aeabi_ddiv>
    1bf0:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    1bf4:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    1bf8:	2200      	movs	r2, #0
    1bfa:	4b35      	ldr	r3, [pc, #212]	; (1cd0 <fp_display+0x278>)
    1bfc:	f001 ff18 	bl	3a30 <__aeabi_dmul>
    1c00:	3501      	adds	r5, #1
    1c02:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    1c06:	e7e5      	b.n	1bd4 <fp_display+0x17c>
    1c08:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    1c0c:	f002 f9ce 	bl	3fac <__aeabi_d2iz>
    1c10:	426b      	negs	r3, r5
    1c12:	ea13 0325 	ands.w	r3, r3, r5, asr #32
    1c16:	bf38      	it	cc
    1c18:	462b      	movcc	r3, r5
    1c1a:	4682      	mov	sl, r0
    1c1c:	930e      	str	r3, [sp, #56]	; 0x38
    1c1e:	4650      	mov	r0, sl
    1c20:	f002 fa08 	bl	4034 <__aeabi_i2d>
    1c24:	9a11      	ldr	r2, [sp, #68]	; 0x44
    1c26:	1aaa      	subs	r2, r5, r2
    1c28:	f001 fc06 	bl	3438 <_ldexpl>
    1c2c:	2200      	movs	r2, #0
    1c2e:	2300      	movs	r3, #0
    1c30:	2d00      	cmp	r5, #0
    1c32:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    1c36:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    1c3a:	da4b      	bge.n	1cd4 <fp_display+0x27c>
    1c3c:	a118      	add	r1, pc, #96	; (adr r1, 1ca0 <fp_display+0x248>)
    1c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
    1c42:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    1c46:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    1c4a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    1c4e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    1c52:	f04f 0800 	mov.w	r8, #0
    1c56:	4642      	mov	r2, r8
    1c58:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    1c5c:	464b      	mov	r3, r9
    1c5e:	f002 f81f 	bl	3ca0 <__aeabi_dsub>
    1c62:	4602      	mov	r2, r0
    1c64:	460b      	mov	r3, r1
    1c66:	4630      	mov	r0, r6
    1c68:	4639      	mov	r1, r7
    1c6a:	f002 f905 	bl	3e78 <__aeabi_dadd>
    1c6e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    1c72:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    1c76:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    1c7a:	2200      	movs	r2, #0
    1c7c:	4b13      	ldr	r3, [pc, #76]	; (1ccc <fp_display+0x274>)
    1c7e:	f001 fed7 	bl	3a30 <__aeabi_dmul>
    1c82:	4602      	mov	r2, r0
    1c84:	460b      	mov	r3, r1
    1c86:	2000      	movs	r0, #0
    1c88:	490f      	ldr	r1, [pc, #60]	; (1cc8 <fp_display+0x270>)
    1c8a:	f002 f809 	bl	3ca0 <__aeabi_dsub>
    1c8e:	2200      	movs	r2, #0
    1c90:	4b0e      	ldr	r3, [pc, #56]	; (1ccc <fp_display+0x274>)
    1c92:	f001 ff5d 	bl	3b50 <__aeabi_ddiv>
    1c96:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    1c9a:	e024      	b.n	1ce6 <fp_display+0x28e>
    1c9c:	f3af 8000 	nop.w
    1ca0:	9999999a 	.word	0x9999999a
    1ca4:	3fc99999 	.word	0x3fc99999
    1ca8:	00000000 	.word	0x00000000
    1cac:	40f86a00 	.word	0x40f86a00
    1cb0:	00000000 	.word	0x00000000
    1cb4:	412e8480 	.word	0x412e8480
    1cb8:	0000441e 	.word	0x0000441e
    1cbc:	0000446c 	.word	0x0000446c
    1cc0:	000043ee 	.word	0x000043ee
    1cc4:	000043ec 	.word	0x000043ec
    1cc8:	3ff00000 	.word	0x3ff00000
    1ccc:	40140000 	.word	0x40140000
    1cd0:	40240000 	.word	0x40240000
    1cd4:	49ae      	ldr	r1, [pc, #696]	; (1f90 <fp_display+0x538>)
    1cd6:	f04f 0000 	mov.w	r0, #0
    1cda:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    1cde:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    1ce2:	f000 8089 	beq.w	1df8 <fp_display+0x3a0>
    1ce6:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    1cea:	f01c 0f01 	tst.w	ip, #1
    1cee:	d048      	beq.n	1d82 <fp_display+0x32a>
    1cf0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    1cf4:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    1cf8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    1cfc:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    1d00:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    1d04:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    1d08:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    1d0c:	f001 fe90 	bl	3a30 <__aeabi_dmul>
    1d10:	4632      	mov	r2, r6
    1d12:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    1d16:	463b      	mov	r3, r7
    1d18:	4640      	mov	r0, r8
    1d1a:	4649      	mov	r1, r9
    1d1c:	f002 f8ac 	bl	3e78 <__aeabi_dadd>
    1d20:	4602      	mov	r2, r0
    1d22:	460b      	mov	r3, r1
    1d24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1d28:	f001 fe82 	bl	3a30 <__aeabi_dmul>
    1d2c:	4602      	mov	r2, r0
    1d2e:	460b      	mov	r3, r1
    1d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1d34:	f002 f8a0 	bl	3e78 <__aeabi_dadd>
    1d38:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    1d3c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    1d40:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    1d44:	f001 fe74 	bl	3a30 <__aeabi_dmul>
    1d48:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    1d4c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    1d50:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    1d54:	f04f 0800 	mov.w	r8, #0
    1d58:	4642      	mov	r2, r8
    1d5a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    1d5e:	464b      	mov	r3, r9
    1d60:	f001 ff9e 	bl	3ca0 <__aeabi_dsub>
    1d64:	4602      	mov	r2, r0
    1d66:	460b      	mov	r3, r1
    1d68:	4630      	mov	r0, r6
    1d6a:	4639      	mov	r1, r7
    1d6c:	f002 f884 	bl	3e78 <__aeabi_dadd>
    1d70:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    1d74:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    1d78:	f1bc 0f01 	cmp.w	ip, #1
    1d7c:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
    1d80:	d03a      	beq.n	1df8 <fp_display+0x3a0>
    1d82:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    1d86:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    1d8a:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    1d8e:	4602      	mov	r2, r0
    1d90:	460b      	mov	r3, r1
    1d92:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    1d96:	f002 f86f 	bl	3e78 <__aeabi_dadd>
    1d9a:	4632      	mov	r2, r6
    1d9c:	463b      	mov	r3, r7
    1d9e:	f002 f86b 	bl	3e78 <__aeabi_dadd>
    1da2:	4602      	mov	r2, r0
    1da4:	460b      	mov	r3, r1
    1da6:	4640      	mov	r0, r8
    1da8:	4649      	mov	r1, r9
    1daa:	f001 fe41 	bl	3a30 <__aeabi_dmul>
    1dae:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    1db2:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    1db6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    1dba:	f001 fe39 	bl	3a30 <__aeabi_dmul>
    1dbe:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    1dc2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    1dc6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    1dca:	f04f 0800 	mov.w	r8, #0
    1dce:	4642      	mov	r2, r8
    1dd0:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    1dd4:	464b      	mov	r3, r9
    1dd6:	f001 ff63 	bl	3ca0 <__aeabi_dsub>
    1dda:	4602      	mov	r2, r0
    1ddc:	460b      	mov	r3, r1
    1dde:	4630      	mov	r0, r6
    1de0:	4639      	mov	r1, r7
    1de2:	f002 f849 	bl	3e78 <__aeabi_dadd>
    1de6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    1dea:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    1dee:	ea4f 0c6c 	mov.w	ip, ip, asr #1
    1df2:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    1df6:	e778      	b.n	1cea <fp_display+0x292>
    1df8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    1dfc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    1e00:	f002 f966 	bl	40d0 <__aeabi_dcmple>
    1e04:	b910      	cbnz	r0, 1e0c <fp_display+0x3b4>
    1e06:	f10a 3aff 	add.w	sl, sl, #4294967295
    1e0a:	e708      	b.n	1c1e <fp_display+0x1c6>
    1e0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    1e10:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    1e14:	f001 ff44 	bl	3ca0 <__aeabi_dsub>
    1e18:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    1e1c:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    1e20:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    1e24:	f001 ff3c 	bl	3ca0 <__aeabi_dsub>
    1e28:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    1e2c:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    1e30:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    1e34:	f001 fe8c 	bl	3b50 <__aeabi_ddiv>
    1e38:	a353      	add	r3, pc, #332	; (adr r3, 1f88 <fp_display+0x530>)
    1e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e3e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    1e42:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    1e46:	f001 fdf3 	bl	3a30 <__aeabi_dmul>
    1e4a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    1e4e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    1e52:	f002 f8ab 	bl	3fac <__aeabi_d2iz>
    1e56:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    1e5a:	4680      	mov	r8, r0
    1e5c:	f002 f8ea 	bl	4034 <__aeabi_i2d>
    1e60:	4602      	mov	r2, r0
    1e62:	460b      	mov	r3, r1
    1e64:	4630      	mov	r0, r6
    1e66:	4639      	mov	r1, r7
    1e68:	f001 ff1a 	bl	3ca0 <__aeabi_dsub>
    1e6c:	a346      	add	r3, pc, #280	; (adr r3, 1f88 <fp_display+0x530>)
    1e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e72:	f001 fddd 	bl	3a30 <__aeabi_dmul>
    1e76:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    1e7a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    1e7e:	f002 f895 	bl	3fac <__aeabi_d2iz>
    1e82:	4606      	mov	r6, r0
    1e84:	2e00      	cmp	r6, #0
    1e86:	da06      	bge.n	1e96 <fp_display+0x43e>
    1e88:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
    1e8c:	f506 7610 	add.w	r6, r6, #576	; 0x240
    1e90:	f108 38ff 	add.w	r8, r8, #4294967295
    1e94:	e7f6      	b.n	1e84 <fp_display+0x42c>
    1e96:	4b3f      	ldr	r3, [pc, #252]	; (1f94 <fp_display+0x53c>)
    1e98:	429e      	cmp	r6, r3
    1e9a:	dd06      	ble.n	1eaa <fp_display+0x452>
    1e9c:	f5a6 2674 	sub.w	r6, r6, #999424	; 0xf4000
    1ea0:	f5a6 7610 	sub.w	r6, r6, #576	; 0x240
    1ea4:	f108 0801 	add.w	r8, r8, #1
    1ea8:	e7f5      	b.n	1e96 <fp_display+0x43e>
    1eaa:	f1b8 0f00 	cmp.w	r8, #0
    1eae:	da06      	bge.n	1ebe <fp_display+0x466>
    1eb0:	f508 2874 	add.w	r8, r8, #999424	; 0xf4000
    1eb4:	f508 7810 	add.w	r8, r8, #576	; 0x240
    1eb8:	f10a 3aff 	add.w	sl, sl, #4294967295
    1ebc:	e7f5      	b.n	1eaa <fp_display+0x452>
    1ebe:	4598      	cmp	r8, r3
    1ec0:	dd06      	ble.n	1ed0 <fp_display+0x478>
    1ec2:	f5a8 2874 	sub.w	r8, r8, #999424	; 0xf4000
    1ec6:	f5a8 7810 	sub.w	r8, r8, #576	; 0x240
    1eca:	f10a 0a01 	add.w	sl, sl, #1
    1ece:	e7f6      	b.n	1ebe <fp_display+0x466>
    1ed0:	4b31      	ldr	r3, [pc, #196]	; (1f98 <fp_display+0x540>)
    1ed2:	4650      	mov	r0, sl
    1ed4:	459a      	cmp	sl, r3
    1ed6:	dc11      	bgt.n	1efc <fp_display+0x4a4>
    1ed8:	3301      	adds	r3, #1
    1eda:	fb98 f2f3 	sdiv	r2, r8, r3
    1ede:	fb96 f3f3 	sdiv	r3, r6, r3
    1ee2:	482e      	ldr	r0, [pc, #184]	; (1f9c <fp_display+0x544>)
    1ee4:	210a      	movs	r1, #10
    1ee6:	fb00 8802 	mla	r8, r0, r2, r8
    1eea:	fb00 6603 	mla	r6, r0, r3, r6
    1eee:	fb01 2a0a 	mla	sl, r1, sl, r2
    1ef2:	fb01 3808 	mla	r8, r1, r8, r3
    1ef6:	434e      	muls	r6, r1
    1ef8:	3d01      	subs	r5, #1
    1efa:	e01c      	b.n	1f36 <fp_display+0x4de>
    1efc:	4b25      	ldr	r3, [pc, #148]	; (1f94 <fp_display+0x53c>)
    1efe:	459a      	cmp	sl, r3
    1f00:	dd19      	ble.n	1f36 <fp_display+0x4de>
    1f02:	220a      	movs	r2, #10
    1f04:	fb9a faf2 	sdiv	sl, sl, r2
    1f08:	f06f 0309 	mvn.w	r3, #9
    1f0c:	fb03 000a 	mla	r0, r3, sl, r0
    1f10:	4923      	ldr	r1, [pc, #140]	; (1fa0 <fp_display+0x548>)
    1f12:	3501      	adds	r5, #1
    1f14:	fb01 8000 	mla	r0, r1, r0, r8
    1f18:	fb90 f8f2 	sdiv	r8, r0, r2
    1f1c:	fb03 0308 	mla	r3, r3, r8, r0
    1f20:	fb01 6603 	mla	r6, r1, r3, r6
    1f24:	3605      	adds	r6, #5
    1f26:	fb96 f6f2 	sdiv	r6, r6, r2
    1f2a:	e004      	b.n	1f36 <fp_display+0x4de>
    1f2c:	2600      	movs	r6, #0
    1f2e:	46b0      	mov	r8, r6
    1f30:	46b2      	mov	sl, r6
    1f32:	f06f 0504 	mvn.w	r5, #4
    1f36:	4621      	mov	r1, r4
    1f38:	2730      	movs	r7, #48	; 0x30
    1f3a:	f801 7b06 	strb.w	r7, [r1], #6
    1f3e:	4650      	mov	r0, sl
    1f40:	f7ff fd3f 	bl	19c2 <pr_dec.constprop.1>
    1f44:	4640      	mov	r0, r8
    1f46:	f104 010c 	add.w	r1, r4, #12
    1f4a:	f7ff fd3a 	bl	19c2 <pr_dec.constprop.1>
    1f4e:	4630      	mov	r0, r6
    1f50:	f104 0112 	add.w	r1, r4, #18
    1f54:	f7ff fd35 	bl	19c2 <pr_dec.constprop.1>
    1f58:	2300      	movs	r3, #0
    1f5a:	7523      	strb	r3, [r4, #20]
    1f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1f5e:	3505      	adds	r5, #5
    1f60:	74e7      	strb	r7, [r4, #19]
    1f62:	ea43 0585 	orr.w	r5, r3, r5, lsl #2
    1f66:	e000      	b.n	1f6a <fp_display+0x512>
    1f68:	2500      	movs	r5, #0
    1f6a:	07ef      	lsls	r7, r5, #31
    1f6c:	d501      	bpl.n	1f72 <fp_display+0x51a>
    1f6e:	4b0d      	ldr	r3, [pc, #52]	; (1fa4 <fp_display+0x54c>)
    1f70:	e01f      	b.n	1fb2 <fp_display+0x55a>
    1f72:	9b06      	ldr	r3, [sp, #24]
    1f74:	079e      	lsls	r6, r3, #30
    1f76:	d41b      	bmi.n	1fb0 <fp_display+0x558>
    1f78:	4a0b      	ldr	r2, [pc, #44]	; (1fa8 <fp_display+0x550>)
    1f7a:	f013 0f04 	tst.w	r3, #4
    1f7e:	4b0b      	ldr	r3, [pc, #44]	; (1fac <fp_display+0x554>)
    1f80:	bf08      	it	eq
    1f82:	4613      	moveq	r3, r2
    1f84:	e015      	b.n	1fb2 <fp_display+0x55a>
    1f86:	bf00      	nop
    1f88:	00000000 	.word	0x00000000
    1f8c:	412e8480 	.word	0x412e8480
    1f90:	40140000 	.word	0x40140000
    1f94:	000f423f 	.word	0x000f423f
    1f98:	0001869f 	.word	0x0001869f
    1f9c:	fffe7960 	.word	0xfffe7960
    1fa0:	000f4240 	.word	0x000f4240
    1fa4:	0000441e 	.word	0x0000441e
    1fa8:	0000446c 	.word	0x0000446c
    1fac:	000043ee 	.word	0x000043ee
    1fb0:	4bad      	ldr	r3, [pc, #692]	; (2268 <fp_display+0x810>)
    1fb2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1fb4:	f025 0501 	bic.w	r5, r5, #1
    1fb8:	6013      	str	r3, [r2, #0]
    1fba:	2304      	movs	r3, #4
    1fbc:	fb95 f5f3 	sdiv	r5, r5, r3
    1fc0:	9b05      	ldr	r3, [sp, #20]
    1fc2:	f8db 6000 	ldr.w	r6, [fp]
    1fc6:	2b61      	cmp	r3, #97	; 0x61
    1fc8:	d010      	beq.n	1fec <fp_display+0x594>
    1fca:	dc06      	bgt.n	1fda <fp_display+0x582>
    1fcc:	2b45      	cmp	r3, #69	; 0x45
    1fce:	d067      	beq.n	20a0 <fp_display+0x648>
    1fd0:	2b47      	cmp	r3, #71	; 0x47
    1fd2:	d048      	beq.n	2066 <fp_display+0x60e>
    1fd4:	2b41      	cmp	r3, #65	; 0x41
    1fd6:	d144      	bne.n	2062 <fp_display+0x60a>
    1fd8:	e008      	b.n	1fec <fp_display+0x594>
    1fda:	9b05      	ldr	r3, [sp, #20]
    1fdc:	2b66      	cmp	r3, #102	; 0x66
    1fde:	f000 80df 	beq.w	21a0 <fp_display+0x748>
    1fe2:	2b67      	cmp	r3, #103	; 0x67
    1fe4:	d03f      	beq.n	2066 <fp_display+0x60e>
    1fe6:	2b65      	cmp	r3, #101	; 0x65
    1fe8:	d13b      	bne.n	2062 <fp_display+0x60a>
    1fea:	e059      	b.n	20a0 <fp_display+0x648>
    1fec:	9b07      	ldr	r3, [sp, #28]
    1fee:	2000      	movs	r0, #0
    1ff0:	f3c3 0113 	ubfx	r1, r3, #0, #20
    1ff4:	9b08      	ldr	r3, [sp, #32]
    1ff6:	4318      	orrs	r0, r3
    1ff8:	9b07      	ldr	r3, [sp, #28]
    1ffa:	f3c3 520a 	ubfx	r2, r3, #20, #11
    1ffe:	b112      	cbz	r2, 2006 <fp_display+0x5ae>
    2000:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
    2004:	e004      	b.n	2010 <fp_display+0x5b8>
    2006:	ea50 0301 	orrs.w	r3, r0, r1
    200a:	4b98      	ldr	r3, [pc, #608]	; (226c <fp_display+0x814>)
    200c:	bf08      	it	eq
    200e:	2300      	moveq	r3, #0
    2010:	2a00      	cmp	r2, #0
    2012:	bf0c      	ite	eq
    2014:	2230      	moveq	r2, #48	; 0x30
    2016:	2231      	movne	r2, #49	; 0x31
    2018:	b966      	cbnz	r6, 2034 <fp_display+0x5dc>
    201a:	9d06      	ldr	r5, [sp, #24]
    201c:	072d      	lsls	r5, r5, #28
    201e:	d409      	bmi.n	2034 <fp_display+0x5dc>
    2020:	9d05      	ldr	r5, [sp, #20]
    2022:	4620      	mov	r0, r4
    2024:	4992      	ldr	r1, [pc, #584]	; (2270 <fp_display+0x818>)
    2026:	4c93      	ldr	r4, [pc, #588]	; (2274 <fp_display+0x81c>)
    2028:	2d61      	cmp	r5, #97	; 0x61
    202a:	bf08      	it	eq
    202c:	4621      	moveq	r1, r4
    202e:	f7ff fcdb 	bl	19e8 <sprintf>
    2032:	e00c      	b.n	204e <fp_display+0x5f6>
    2034:	e9cd 0100 	strd	r0, r1, [sp]
    2038:	9302      	str	r3, [sp, #8]
    203a:	4620      	mov	r0, r4
    203c:	4b8e      	ldr	r3, [pc, #568]	; (2278 <fp_display+0x820>)
    203e:	498f      	ldr	r1, [pc, #572]	; (227c <fp_display+0x824>)
    2040:	9c05      	ldr	r4, [sp, #20]
    2042:	2c61      	cmp	r4, #97	; 0x61
    2044:	bf18      	it	ne
    2046:	4619      	movne	r1, r3
    2048:	4633      	mov	r3, r6
    204a:	f7ff fccd 	bl	19e8 <sprintf>
    204e:	4a8c      	ldr	r2, [pc, #560]	; (2280 <fp_display+0x828>)
    2050:	4b8c      	ldr	r3, [pc, #560]	; (2284 <fp_display+0x82c>)
    2052:	9907      	ldr	r1, [sp, #28]
    2054:	ea33 0321 	bics.w	r3, r3, r1, asr #32
    2058:	bf28      	it	cs
    205a:	4613      	movcs	r3, r2
    205c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    205e:	6013      	str	r3, [r2, #0]
    2060:	e177      	b.n	2352 <fp_display+0x8fa>
    2062:	2367      	movs	r3, #103	; 0x67
    2064:	9305      	str	r3, [sp, #20]
    2066:	9b06      	ldr	r3, [sp, #24]
    2068:	2e00      	cmp	r6, #0
    206a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    206e:	9306      	str	r3, [sp, #24]
    2070:	bfdc      	itt	le
    2072:	2301      	movle	r3, #1
    2074:	f8cb 3000 	strle.w	r3, [fp]
    2078:	f8db 1000 	ldr.w	r1, [fp]
    207c:	4620      	mov	r0, r4
    207e:	2911      	cmp	r1, #17
    2080:	bfd4      	ite	le
    2082:	3101      	addle	r1, #1
    2084:	2112      	movgt	r1, #18
    2086:	f7ff fc77 	bl	1978 <fp_round>
    208a:	f8db 3000 	ldr.w	r3, [fp]
    208e:	4405      	add	r5, r0
    2090:	429d      	cmp	r5, r3
    2092:	db7e      	blt.n	2192 <fp_display+0x73a>
    2094:	3b01      	subs	r3, #1
    2096:	f8cb 3000 	str.w	r3, [fp]
    209a:	9b05      	ldr	r3, [sp, #20]
    209c:	3b02      	subs	r3, #2
    209e:	9305      	str	r3, [sp, #20]
    20a0:	f8db 3000 	ldr.w	r3, [fp]
    20a4:	2b11      	cmp	r3, #17
    20a6:	bfc1      	itttt	gt
    20a8:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    20aa:	3b11      	subgt	r3, #17
    20ac:	6013      	strgt	r3, [r2, #0]
    20ae:	2311      	movgt	r3, #17
    20b0:	bfc8      	it	gt
    20b2:	f8cb 3000 	strgt.w	r3, [fp]
    20b6:	9b06      	ldr	r3, [sp, #24]
    20b8:	f8db 6000 	ldr.w	r6, [fp]
    20bc:	f413 6700 	ands.w	r7, r3, #2048	; 0x800
    20c0:	f106 0602 	add.w	r6, r6, #2
    20c4:	d104      	bne.n	20d0 <fp_display+0x678>
    20c6:	4620      	mov	r0, r4
    20c8:	4631      	mov	r1, r6
    20ca:	f7ff fc55 	bl	1978 <fp_round>
    20ce:	4405      	add	r5, r0
    20d0:	7863      	ldrb	r3, [r4, #1]
    20d2:	7023      	strb	r3, [r4, #0]
    20d4:	f8db 3000 	ldr.w	r3, [fp]
    20d8:	b923      	cbnz	r3, 20e4 <fp_display+0x68c>
    20da:	f640 0308 	movw	r3, #2056	; 0x808
    20de:	9a06      	ldr	r2, [sp, #24]
    20e0:	4013      	ands	r3, r2
    20e2:	b113      	cbz	r3, 20ea <fp_display+0x692>
    20e4:	232e      	movs	r3, #46	; 0x2e
    20e6:	7063      	strb	r3, [r4, #1]
    20e8:	e000      	b.n	20ec <fp_display+0x694>
    20ea:	2601      	movs	r6, #1
    20ec:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    20ee:	681b      	ldr	r3, [r3, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	bfc2      	ittt	gt
    20f4:	233e      	movgt	r3, #62	; 0x3e
    20f6:	55a3      	strbgt	r3, [r4, r6]
    20f8:	3601      	addgt	r6, #1
    20fa:	b177      	cbz	r7, 211a <fp_display+0x6c2>
    20fc:	9b06      	ldr	r3, [sp, #24]
    20fe:	071f      	lsls	r7, r3, #28
    2100:	d40b      	bmi.n	211a <fp_display+0x6c2>
    2102:	19a2      	adds	r2, r4, r6
    2104:	1b16      	subs	r6, r2, r4
    2106:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
    210a:	2b30      	cmp	r3, #48	; 0x30
    210c:	d0fa      	beq.n	2104 <fp_display+0x6ac>
    210e:	2b3e      	cmp	r3, #62	; 0x3e
    2110:	d0f8      	beq.n	2104 <fp_display+0x6ac>
    2112:	2b2e      	cmp	r3, #46	; 0x2e
    2114:	bf08      	it	eq
    2116:	f106 36ff 	addeq.w	r6, r6, #4294967295
    211a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    211e:	2d00      	cmp	r5, #0
    2120:	55a3      	strb	r3, [r4, r6]
    2122:	bfb8      	it	lt
    2124:	426d      	neglt	r5, r5
    2126:	f106 0302 	add.w	r3, r6, #2
    212a:	f106 0201 	add.w	r2, r6, #1
    212e:	bfb5      	itete	lt
    2130:	212d      	movlt	r1, #45	; 0x2d
    2132:	212b      	movge	r1, #43	; 0x2b
    2134:	461e      	movlt	r6, r3
    2136:	461e      	movge	r6, r3
    2138:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
    213c:	54a1      	strb	r1, [r4, r2]
    213e:	db0a      	blt.n	2156 <fp_display+0x6fe>
    2140:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2144:	fb95 f2f2 	sdiv	r2, r5, r2
    2148:	f102 0130 	add.w	r1, r2, #48	; 0x30
    214c:	54e1      	strb	r1, [r4, r3]
    214e:	494e      	ldr	r1, [pc, #312]	; (2288 <fp_display+0x830>)
    2150:	1c5e      	adds	r6, r3, #1
    2152:	fb01 5502 	mla	r5, r1, r2, r5
    2156:	2d63      	cmp	r5, #99	; 0x63
    2158:	dd0a      	ble.n	2170 <fp_display+0x718>
    215a:	2364      	movs	r3, #100	; 0x64
    215c:	fb95 f3f3 	sdiv	r3, r5, r3
    2160:	f103 0230 	add.w	r2, r3, #48	; 0x30
    2164:	55a2      	strb	r2, [r4, r6]
    2166:	f06f 0263 	mvn.w	r2, #99	; 0x63
    216a:	fb02 5503 	mla	r5, r2, r3, r5
    216e:	3601      	adds	r6, #1
    2170:	230a      	movs	r3, #10
    2172:	fb95 f3f3 	sdiv	r3, r5, r3
    2176:	f103 0230 	add.w	r2, r3, #48	; 0x30
    217a:	55a2      	strb	r2, [r4, r6]
    217c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    2180:	3530      	adds	r5, #48	; 0x30
    2182:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
    2186:	4434      	add	r4, r6
    2188:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    218c:	7063      	strb	r3, [r4, #1]
    218e:	1cb0      	adds	r0, r6, #2
    2190:	e0df      	b.n	2352 <fp_display+0x8fa>
    2192:	1d2a      	adds	r2, r5, #4
    2194:	f6ff af7e 	blt.w	2094 <fp_display+0x63c>
    2198:	43ea      	mvns	r2, r5
    219a:	4413      	add	r3, r2
    219c:	f8cb 3000 	str.w	r3, [fp]
    21a0:	9a06      	ldr	r2, [sp, #24]
    21a2:	2d00      	cmp	r5, #0
    21a4:	f8db 3000 	ldr.w	r3, [fp]
    21a8:	f402 6700 	and.w	r7, r2, #2048	; 0x800
    21ac:	da4c      	bge.n	2248 <fp_display+0x7f0>
    21ae:	f1c5 0800 	rsb	r8, r5, #0
    21b2:	1c5a      	adds	r2, r3, #1
    21b4:	4590      	cmp	r8, r2
    21b6:	dd09      	ble.n	21cc <fp_display+0x774>
    21b8:	2330      	movs	r3, #48	; 0x30
    21ba:	7023      	strb	r3, [r4, #0]
    21bc:	232e      	movs	r3, #46	; 0x2e
    21be:	7063      	strb	r3, [r4, #1]
    21c0:	f8db 3000 	ldr.w	r3, [fp]
    21c4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    21c6:	2602      	movs	r6, #2
    21c8:	6013      	str	r3, [r2, #0]
    21ca:	e038      	b.n	223e <fp_display+0x7e6>
    21cc:	442b      	add	r3, r5
    21ce:	1c9e      	adds	r6, r3, #2
    21d0:	2e12      	cmp	r6, #18
    21d2:	bfc1      	itttt	gt
    21d4:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    21d6:	3b11      	subgt	r3, #17
    21d8:	6013      	strgt	r3, [r2, #0]
    21da:	2613      	movgt	r6, #19
    21dc:	b95f      	cbnz	r7, 21f6 <fp_display+0x79e>
    21de:	4620      	mov	r0, r4
    21e0:	4631      	mov	r1, r6
    21e2:	f7ff fbc9 	bl	1978 <fp_round>
    21e6:	b130      	cbz	r0, 21f6 <fp_display+0x79e>
    21e8:	ea7f 0805 	mvns.w	r8, r5
    21ec:	f106 0601 	add.w	r6, r6, #1
    21f0:	d101      	bne.n	21f6 <fp_display+0x79e>
    21f2:	7863      	ldrb	r3, [r4, #1]
    21f4:	e00d      	b.n	2212 <fp_display+0x7ba>
    21f6:	f1b8 0f01 	cmp.w	r8, #1
    21fa:	eb04 0306 	add.w	r3, r4, r6
    21fe:	d10c      	bne.n	221a <fp_display+0x7c2>
    2200:	1b1a      	subs	r2, r3, r4
    2202:	2a00      	cmp	r2, #0
    2204:	dd03      	ble.n	220e <fp_display+0x7b6>
    2206:	f813 2901 	ldrb.w	r2, [r3], #-1
    220a:	709a      	strb	r2, [r3, #2]
    220c:	e7f8      	b.n	2200 <fp_display+0x7a8>
    220e:	3601      	adds	r6, #1
    2210:	2330      	movs	r3, #48	; 0x30
    2212:	7023      	strb	r3, [r4, #0]
    2214:	232e      	movs	r3, #46	; 0x2e
    2216:	7063      	strb	r3, [r4, #1]
    2218:	e011      	b.n	223e <fp_display+0x7e6>
    221a:	1b1a      	subs	r2, r3, r4
    221c:	2a00      	cmp	r2, #0
    221e:	dd03      	ble.n	2228 <fp_display+0x7d0>
    2220:	f813 2901 	ldrb.w	r2, [r3], #-1
    2224:	70da      	strb	r2, [r3, #3]
    2226:	e7f8      	b.n	221a <fp_display+0x7c2>
    2228:	2330      	movs	r3, #48	; 0x30
    222a:	7023      	strb	r3, [r4, #0]
    222c:	232e      	movs	r3, #46	; 0x2e
    222e:	7063      	strb	r3, [r4, #1]
    2230:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    2232:	233c      	movs	r3, #60	; 0x3c
    2234:	70a3      	strb	r3, [r4, #2]
    2236:	f108 33ff 	add.w	r3, r8, #4294967295
    223a:	3602      	adds	r6, #2
    223c:	6013      	str	r3, [r2, #0]
    223e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    2240:	681b      	ldr	r3, [r3, #0]
    2242:	2b00      	cmp	r3, #0
    2244:	dc38      	bgt.n	22b8 <fp_display+0x860>
    2246:	e06c      	b.n	2322 <fp_display+0x8ca>
    2248:	eb05 0803 	add.w	r8, r5, r3
    224c:	f108 0602 	add.w	r6, r8, #2
    2250:	2e12      	cmp	r6, #18
    2252:	dd50      	ble.n	22f6 <fp_display+0x89e>
    2254:	b9d7      	cbnz	r7, 228c <fp_display+0x834>
    2256:	4620      	mov	r0, r4
    2258:	2113      	movs	r1, #19
    225a:	f7ff fb8d 	bl	1978 <fp_round>
    225e:	b1a8      	cbz	r0, 228c <fp_display+0x834>
    2260:	3501      	adds	r5, #1
    2262:	2614      	movs	r6, #20
    2264:	e013      	b.n	228e <fp_display+0x836>
    2266:	bf00      	nop
    2268:	000043ec 	.word	0x000043ec
    226c:	fffffc01 	.word	0xfffffc01
    2270:	000043f8 	.word	0x000043f8
    2274:	000043f0 	.word	0x000043f0
    2278:	0000440f 	.word	0x0000440f
    227c:	00004400 	.word	0x00004400
    2280:	0000441e 	.word	0x0000441e
    2284:	0000446c 	.word	0x0000446c
    2288:	fffffc18 	.word	0xfffffc18
    228c:	2613      	movs	r6, #19
    228e:	1e72      	subs	r2, r6, #1
    2290:	4295      	cmp	r5, r2
    2292:	4623      	mov	r3, r4
    2294:	da14      	bge.n	22c0 <fp_display+0x868>
    2296:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    229a:	f803 2c01 	strb.w	r2, [r3, #-1]
    229e:	1b1a      	subs	r2, r3, r4
    22a0:	42aa      	cmp	r2, r5
    22a2:	ddf8      	ble.n	2296 <fp_display+0x83e>
    22a4:	1963      	adds	r3, r4, r5
    22a6:	222e      	movs	r2, #46	; 0x2e
    22a8:	705a      	strb	r2, [r3, #1]
    22aa:	f8db 3000 	ldr.w	r3, [fp]
    22ae:	441d      	add	r5, r3
    22b0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    22b2:	3d11      	subs	r5, #17
    22b4:	601d      	str	r5, [r3, #0]
    22b6:	b3a5      	cbz	r5, 2322 <fp_display+0x8ca>
    22b8:	233e      	movs	r3, #62	; 0x3e
    22ba:	55a3      	strb	r3, [r4, r6]
    22bc:	3601      	adds	r6, #1
    22be:	e030      	b.n	2322 <fp_display+0x8ca>
    22c0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    22c4:	f803 1c01 	strb.w	r1, [r3, #-1]
    22c8:	1b19      	subs	r1, r3, r4
    22ca:	4291      	cmp	r1, r2
    22cc:	dbf8      	blt.n	22c0 <fp_display+0x868>
    22ce:	19a3      	adds	r3, r4, r6
    22d0:	223c      	movs	r2, #60	; 0x3c
    22d2:	f803 2c01 	strb.w	r2, [r3, #-1]
    22d6:	1bad      	subs	r5, r5, r6
    22d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    22da:	222e      	movs	r2, #46	; 0x2e
    22dc:	3502      	adds	r5, #2
    22de:	601d      	str	r5, [r3, #0]
    22e0:	55a2      	strb	r2, [r4, r6]
    22e2:	f8db 2000 	ldr.w	r2, [fp]
    22e6:	1c73      	adds	r3, r6, #1
    22e8:	b1d2      	cbz	r2, 2320 <fp_display+0x8c8>
    22ea:	992b      	ldr	r1, [sp, #172]	; 0xac
    22ec:	3602      	adds	r6, #2
    22ee:	600a      	str	r2, [r1, #0]
    22f0:	223e      	movs	r2, #62	; 0x3e
    22f2:	54e2      	strb	r2, [r4, r3]
    22f4:	e015      	b.n	2322 <fp_display+0x8ca>
    22f6:	b93f      	cbnz	r7, 2308 <fp_display+0x8b0>
    22f8:	4620      	mov	r0, r4
    22fa:	4631      	mov	r1, r6
    22fc:	f7ff fb3c 	bl	1978 <fp_round>
    2300:	b110      	cbz	r0, 2308 <fp_display+0x8b0>
    2302:	3501      	adds	r5, #1
    2304:	f108 0603 	add.w	r6, r8, #3
    2308:	4623      	mov	r3, r4
    230a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    230e:	f803 2c01 	strb.w	r2, [r3, #-1]
    2312:	1b1a      	subs	r2, r3, r4
    2314:	42aa      	cmp	r2, r5
    2316:	ddf8      	ble.n	230a <fp_display+0x8b2>
    2318:	4425      	add	r5, r4
    231a:	232e      	movs	r3, #46	; 0x2e
    231c:	706b      	strb	r3, [r5, #1]
    231e:	e000      	b.n	2322 <fp_display+0x8ca>
    2320:	461e      	mov	r6, r3
    2322:	b16f      	cbz	r7, 2340 <fp_display+0x8e8>
    2324:	9b06      	ldr	r3, [sp, #24]
    2326:	0718      	lsls	r0, r3, #28
    2328:	d412      	bmi.n	2350 <fp_display+0x8f8>
    232a:	19a0      	adds	r0, r4, r6
    232c:	1b06      	subs	r6, r0, r4
    232e:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
    2332:	2b30      	cmp	r3, #48	; 0x30
    2334:	d0fa      	beq.n	232c <fp_display+0x8d4>
    2336:	2b3e      	cmp	r3, #62	; 0x3e
    2338:	d0f8      	beq.n	232c <fp_display+0x8d4>
    233a:	2b2e      	cmp	r3, #46	; 0x2e
    233c:	d108      	bne.n	2350 <fp_display+0x8f8>
    233e:	e005      	b.n	234c <fp_display+0x8f4>
    2340:	f8db 3000 	ldr.w	r3, [fp]
    2344:	b923      	cbnz	r3, 2350 <fp_display+0x8f8>
    2346:	9b06      	ldr	r3, [sp, #24]
    2348:	0719      	lsls	r1, r3, #28
    234a:	d401      	bmi.n	2350 <fp_display+0x8f8>
    234c:	1e70      	subs	r0, r6, #1
    234e:	e000      	b.n	2352 <fp_display+0x8fa>
    2350:	4630      	mov	r0, r6
    2352:	b01f      	add	sp, #124	; 0x7c
    2354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002358 <snprintf>:
    2358:	b40c      	push	{r2, r3}
    235a:	b570      	push	{r4, r5, r6, lr}
    235c:	4604      	mov	r4, r0
    235e:	460d      	mov	r5, r1
    2360:	b090      	sub	sp, #64	; 0x40
    2362:	ab14      	add	r3, sp, #80	; 0x50
    2364:	f853 6b04 	ldr.w	r6, [r3], #4
    2368:	2100      	movs	r1, #0
    236a:	2228      	movs	r2, #40	; 0x28
    236c:	a806      	add	r0, sp, #24
    236e:	9305      	str	r3, [sp, #20]
    2370:	f000 ff0f 	bl	3192 <memset>
    2374:	230a      	movs	r3, #10
    2376:	9309      	str	r3, [sp, #36]	; 0x24
    2378:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    237c:	9308      	str	r3, [sp, #32]
    237e:	9b05      	ldr	r3, [sp, #20]
    2380:	9406      	str	r4, [sp, #24]
    2382:	9301      	str	r3, [sp, #4]
    2384:	4b0d      	ldr	r3, [pc, #52]	; (23bc <snprintf+0x64>)
    2386:	2400      	movs	r4, #0
    2388:	9302      	str	r3, [sp, #8]
    238a:	1e6a      	subs	r2, r5, #1
    238c:	4623      	mov	r3, r4
    238e:	9600      	str	r6, [sp, #0]
    2390:	a806      	add	r0, sp, #24
    2392:	f000 f867 	bl	2464 <__vfprintf>
    2396:	9b08      	ldr	r3, [sp, #32]
    2398:	4605      	mov	r5, r0
    239a:	3b01      	subs	r3, #1
    239c:	42a3      	cmp	r3, r4
    239e:	9308      	str	r3, [sp, #32]
    23a0:	db02      	blt.n	23a8 <snprintf+0x50>
    23a2:	9b06      	ldr	r3, [sp, #24]
    23a4:	701c      	strb	r4, [r3, #0]
    23a6:	e003      	b.n	23b0 <snprintf+0x58>
    23a8:	4620      	mov	r0, r4
    23aa:	a906      	add	r1, sp, #24
    23ac:	f000 ff15 	bl	31da <__flsbuf>
    23b0:	4628      	mov	r0, r5
    23b2:	b010      	add	sp, #64	; 0x40
    23b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    23b8:	b002      	add	sp, #8
    23ba:	4770      	bx	lr
    23bc:	00001a59 	.word	0x00001a59

000023c0 <_initio>:
    23c0:	b510      	push	{r4, lr}
    23c2:	2100      	movs	r1, #0
    23c4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    23c8:	4822      	ldr	r0, [pc, #136]	; (2454 <_initio+0x94>)
    23ca:	f000 fee2 	bl	3192 <memset>
    23ce:	20c0      	movs	r0, #192	; 0xc0
    23d0:	f001 f90e 	bl	35f0 <_Csys_alloc>
    23d4:	4c20      	ldr	r4, [pc, #128]	; (2458 <_initio+0x98>)
    23d6:	2100      	movs	r1, #0
    23d8:	22c0      	movs	r2, #192	; 0xc0
    23da:	6020      	str	r0, [r4, #0]
    23dc:	f000 fed9 	bl	3192 <memset>
    23e0:	6820      	ldr	r0, [r4, #0]
    23e2:	2300      	movs	r3, #0
    23e4:	4c1b      	ldr	r4, [pc, #108]	; (2454 <_initio+0x94>)
    23e6:	2228      	movs	r2, #40	; 0x28
    23e8:	2118      	movs	r1, #24
    23ea:	fb02 4203 	mla	r2, r2, r3, r4
    23ee:	fb01 0103 	mla	r1, r1, r3, r0
    23f2:	3301      	adds	r3, #1
    23f4:	2b08      	cmp	r3, #8
    23f6:	6251      	str	r1, [r2, #36]	; 0x24
    23f8:	d1f4      	bne.n	23e4 <_initio+0x24>
    23fa:	4622      	mov	r2, r4
    23fc:	4917      	ldr	r1, [pc, #92]	; (245c <_initio+0x9c>)
    23fe:	2000      	movs	r0, #0
    2400:	f000 ff8c 	bl	331c <_fdopen>
    2404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    2408:	4620      	mov	r0, r4
    240a:	2100      	movs	r1, #0
    240c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2410:	f000 fe7a 	bl	3108 <setvbuf>
    2414:	f104 0228 	add.w	r2, r4, #40	; 0x28
    2418:	4911      	ldr	r1, [pc, #68]	; (2460 <_initio+0xa0>)
    241a:	2001      	movs	r0, #1
    241c:	f000 ff7e 	bl	331c <_fdopen>
    2420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    2424:	f104 0028 	add.w	r0, r4, #40	; 0x28
    2428:	2100      	movs	r1, #0
    242a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    242e:	f000 fe6b 	bl	3108 <setvbuf>
    2432:	f104 0250 	add.w	r2, r4, #80	; 0x50
    2436:	490a      	ldr	r1, [pc, #40]	; (2460 <_initio+0xa0>)
    2438:	2002      	movs	r0, #2
    243a:	f000 ff6f 	bl	331c <_fdopen>
    243e:	f104 0050 	add.w	r0, r4, #80	; 0x50
    2442:	2100      	movs	r1, #0
    2444:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    244c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2450:	f000 be5a 	b.w	3108 <setvbuf>
    2454:	10000f68 	.word	0x10000f68
    2458:	10000f64 	.word	0x10000f64
    245c:	00004420 	.word	0x00004420
    2460:	00004422 	.word	0x00004422

00002464 <__vfprintf>:
    2464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2468:	4604      	mov	r4, r0
    246a:	b0ad      	sub	sp, #180	; 0xb4
    246c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    2470:	f8dd 80dc 	ldr.w	r8, [sp, #220]	; 0xdc
    2474:	2200      	movs	r2, #0
    2476:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    2478:	9205      	str	r2, [sp, #20]
    247a:	7818      	ldrb	r0, [r3, #0]
    247c:	1c5d      	adds	r5, r3, #1
    247e:	2800      	cmp	r0, #0
    2480:	f000 863d 	beq.w	30fe <__vfprintf+0xc9a>
    2484:	2825      	cmp	r0, #37	; 0x25
    2486:	d102      	bne.n	248e <__vfprintf+0x2a>
    2488:	462a      	mov	r2, r5
    248a:	2700      	movs	r7, #0
    248c:	e023      	b.n	24d6 <__vfprintf+0x72>
    248e:	9b05      	ldr	r3, [sp, #20]
    2490:	ea4f 7be3 	mov.w	fp, r3, asr #31
    2494:	461a      	mov	r2, r3
    2496:	1c5e      	adds	r6, r3, #1
    2498:	465b      	mov	r3, fp
    249a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    249e:	4552      	cmp	r2, sl
    24a0:	eb73 030b 	sbcs.w	r3, r3, fp
    24a4:	f280 8627 	bge.w	30f6 <__vfprintf+0xc92>
    24a8:	68a3      	ldr	r3, [r4, #8]
    24aa:	3b01      	subs	r3, #1
    24ac:	2b00      	cmp	r3, #0
    24ae:	60a3      	str	r3, [r4, #8]
    24b0:	db05      	blt.n	24be <__vfprintf+0x5a>
    24b2:	6823      	ldr	r3, [r4, #0]
    24b4:	1c5a      	adds	r2, r3, #1
    24b6:	6022      	str	r2, [r4, #0]
    24b8:	7018      	strb	r0, [r3, #0]
    24ba:	f000 be1c 	b.w	30f6 <__vfprintf+0xc92>
    24be:	4621      	mov	r1, r4
    24c0:	f000 fe8b 	bl	31da <__flsbuf>
    24c4:	f000 be17 	b.w	30f6 <__vfprintf+0xc92>
    24c8:	d90b      	bls.n	24e2 <__vfprintf+0x7e>
    24ca:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
    24ce:	d111      	bne.n	24f4 <__vfprintf+0x90>
    24d0:	f047 0701 	orr.w	r7, r7, #1
    24d4:	462a      	mov	r2, r5
    24d6:	f815 9b01 	ldrb.w	r9, [r5], #1
    24da:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
    24de:	d1f3      	bne.n	24c8 <__vfprintf+0x64>
    24e0:	e00e      	b.n	2500 <__vfprintf+0x9c>
    24e2:	f1b9 0f20 	cmp.w	r9, #32
    24e6:	d00e      	beq.n	2506 <__vfprintf+0xa2>
    24e8:	f1b9 0f23 	cmp.w	r9, #35	; 0x23
    24ec:	d10e      	bne.n	250c <__vfprintf+0xa8>
    24ee:	f047 0708 	orr.w	r7, r7, #8
    24f2:	e7ef      	b.n	24d4 <__vfprintf+0x70>
    24f4:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    24f8:	d108      	bne.n	250c <__vfprintf+0xa8>
    24fa:	f447 7700 	orr.w	r7, r7, #512	; 0x200
    24fe:	e7e9      	b.n	24d4 <__vfprintf+0x70>
    2500:	f047 0702 	orr.w	r7, r7, #2
    2504:	e7e6      	b.n	24d4 <__vfprintf+0x70>
    2506:	f047 0704 	orr.w	r7, r7, #4
    250a:	e7e3      	b.n	24d4 <__vfprintf+0x70>
    250c:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    2510:	d001      	beq.n	2516 <__vfprintf+0xb2>
    2512:	2300      	movs	r3, #0
    2514:	e00d      	b.n	2532 <__vfprintf+0xce>
    2516:	f8d8 3000 	ldr.w	r3, [r8]
    251a:	f108 0104 	add.w	r1, r8, #4
    251e:	2b00      	cmp	r3, #0
    2520:	bfbc      	itt	lt
    2522:	425b      	neglt	r3, r3
    2524:	f087 0701 	eorlt.w	r7, r7, #1
    2528:	1c95      	adds	r5, r2, #2
    252a:	f892 9001 	ldrb.w	r9, [r2, #1]
    252e:	4688      	mov	r8, r1
    2530:	e00a      	b.n	2548 <__vfprintf+0xe4>
    2532:	f1a9 0230 	sub.w	r2, r9, #48	; 0x30
    2536:	b2d1      	uxtb	r1, r2
    2538:	2909      	cmp	r1, #9
    253a:	d805      	bhi.n	2548 <__vfprintf+0xe4>
    253c:	210a      	movs	r1, #10
    253e:	fb01 2303 	mla	r3, r1, r3, r2
    2542:	f815 9b01 	ldrb.w	r9, [r5], #1
    2546:	e7f4      	b.n	2532 <__vfprintf+0xce>
    2548:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    254c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
    2550:	930f      	str	r3, [sp, #60]	; 0x3c
    2552:	d124      	bne.n	259e <__vfprintf+0x13a>
    2554:	f895 9000 	ldrb.w	r9, [r5]
    2558:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    255c:	d003      	beq.n	2566 <__vfprintf+0x102>
    255e:	2300      	movs	r3, #0
    2560:	3501      	adds	r5, #1
    2562:	9306      	str	r3, [sp, #24]
    2564:	e008      	b.n	2578 <__vfprintf+0x114>
    2566:	f8d8 3000 	ldr.w	r3, [r8]
    256a:	f895 9001 	ldrb.w	r9, [r5, #1]
    256e:	9306      	str	r3, [sp, #24]
    2570:	f108 0804 	add.w	r8, r8, #4
    2574:	3502      	adds	r5, #2
    2576:	e00c      	b.n	2592 <__vfprintf+0x12e>
    2578:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    257c:	b2da      	uxtb	r2, r3
    257e:	2a09      	cmp	r2, #9
    2580:	d807      	bhi.n	2592 <__vfprintf+0x12e>
    2582:	9906      	ldr	r1, [sp, #24]
    2584:	220a      	movs	r2, #10
    2586:	fb02 3301 	mla	r3, r2, r1, r3
    258a:	f815 9b01 	ldrb.w	r9, [r5], #1
    258e:	9306      	str	r3, [sp, #24]
    2590:	e7f2      	b.n	2578 <__vfprintf+0x114>
    2592:	9b06      	ldr	r3, [sp, #24]
    2594:	2b00      	cmp	r3, #0
    2596:	db02      	blt.n	259e <__vfprintf+0x13a>
    2598:	f047 0710 	orr.w	r7, r7, #16
    259c:	e001      	b.n	25a2 <__vfprintf+0x13e>
    259e:	2300      	movs	r3, #0
    25a0:	9306      	str	r3, [sp, #24]
    25a2:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    25a6:	d10d      	bne.n	25c4 <__vfprintf+0x160>
    25a8:	f895 9000 	ldrb.w	r9, [r5]
    25ac:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    25b0:	bf03      	ittte	eq
    25b2:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    25b6:	f047 0760 	orreq.w	r7, r7, #96	; 0x60
    25ba:	3502      	addeq	r5, #2
    25bc:	3501      	addne	r5, #1
    25be:	bf18      	it	ne
    25c0:	f047 0720 	orrne.w	r7, r7, #32
    25c4:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
    25c8:	d002      	beq.n	25d0 <__vfprintf+0x16c>
    25ca:	f1b9 0f71 	cmp.w	r9, #113	; 0x71
    25ce:	d104      	bne.n	25da <__vfprintf+0x176>
    25d0:	f895 9000 	ldrb.w	r9, [r5]
    25d4:	f047 0760 	orr.w	r7, r7, #96	; 0x60
    25d8:	e01f      	b.n	261a <__vfprintf+0x1b6>
    25da:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    25de:	d10e      	bne.n	25fe <__vfprintf+0x19a>
    25e0:	f895 9000 	ldrb.w	r9, [r5]
    25e4:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    25e8:	bf03      	ittte	eq
    25ea:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    25ee:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
    25f2:	3502      	addeq	r5, #2
    25f4:	3501      	addne	r5, #1
    25f6:	bf18      	it	ne
    25f8:	f047 0780 	orrne.w	r7, r7, #128	; 0x80
    25fc:	e00e      	b.n	261c <__vfprintf+0x1b8>
    25fe:	f1b9 0f6a 	cmp.w	r9, #106	; 0x6a
    2602:	d102      	bne.n	260a <__vfprintf+0x1a6>
    2604:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    2608:	e005      	b.n	2616 <__vfprintf+0x1b2>
    260a:	f1b9 0f7a 	cmp.w	r9, #122	; 0x7a
    260e:	d002      	beq.n	2616 <__vfprintf+0x1b2>
    2610:	f1b9 0f74 	cmp.w	r9, #116	; 0x74
    2614:	d102      	bne.n	261c <__vfprintf+0x1b8>
    2616:	f895 9000 	ldrb.w	r9, [r5]
    261a:	3501      	adds	r5, #1
    261c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    2620:	dc25      	bgt.n	266e <__vfprintf+0x20a>
    2622:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    2626:	f280 826e 	bge.w	2b06 <__vfprintf+0x6a2>
    262a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    262e:	f000 826a 	beq.w	2b06 <__vfprintf+0x6a2>
    2632:	dc0c      	bgt.n	264e <__vfprintf+0x1ea>
    2634:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    2638:	f000 825f 	beq.w	2afa <__vfprintf+0x696>
    263c:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    2640:	f000 8261 	beq.w	2b06 <__vfprintf+0x6a2>
    2644:	f1b9 0f00 	cmp.w	r9, #0
    2648:	f000 80b4 	beq.w	27b4 <__vfprintf+0x350>
    264c:	e031      	b.n	26b2 <__vfprintf+0x24e>
    264e:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    2652:	f000 8252 	beq.w	2afa <__vfprintf+0x696>
    2656:	dc04      	bgt.n	2662 <__vfprintf+0x1fe>
    2658:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    265c:	f000 8171 	beq.w	2942 <__vfprintf+0x4de>
    2660:	e027      	b.n	26b2 <__vfprintf+0x24e>
    2662:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
    2666:	d01e      	beq.n	26a6 <__vfprintf+0x242>
    2668:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    266c:	e00c      	b.n	2688 <__vfprintf+0x224>
    266e:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    2672:	f000 81b4 	beq.w	29de <__vfprintf+0x57a>
    2676:	dc0a      	bgt.n	268e <__vfprintf+0x22a>
    2678:	f1b9 0f6e 	cmp.w	r9, #110	; 0x6e
    267c:	f000 809f 	beq.w	27be <__vfprintf+0x35a>
    2680:	f300 81b6 	bgt.w	29f0 <__vfprintf+0x58c>
    2684:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    2688:	f000 81f4 	beq.w	2a74 <__vfprintf+0x610>
    268c:	e011      	b.n	26b2 <__vfprintf+0x24e>
    268e:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    2692:	f000 81cd 	beq.w	2a30 <__vfprintf+0x5cc>
    2696:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    269a:	f000 8179 	beq.w	2990 <__vfprintf+0x52c>
    269e:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
    26a2:	d106      	bne.n	26b2 <__vfprintf+0x24e>
    26a4:	e0ae      	b.n	2804 <__vfprintf+0x3a0>
    26a6:	f108 0304 	add.w	r3, r8, #4
    26aa:	930e      	str	r3, [sp, #56]	; 0x38
    26ac:	f8d8 9000 	ldr.w	r9, [r8]
    26b0:	e001      	b.n	26b6 <__vfprintf+0x252>
    26b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    26b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    26b8:	f103 3aff 	add.w	sl, r3, #4294967295
    26bc:	f017 0301 	ands.w	r3, r7, #1
    26c0:	9306      	str	r3, [sp, #24]
    26c2:	d12e      	bne.n	2722 <__vfprintf+0x2be>
    26c4:	f417 7f00 	tst.w	r7, #512	; 0x200
    26c8:	bf14      	ite	ne
    26ca:	f04f 0830 	movne.w	r8, #48	; 0x30
    26ce:	f04f 0820 	moveq.w	r8, #32
    26d2:	2600      	movs	r6, #0
    26d4:	2700      	movs	r7, #0
    26d6:	9b05      	ldr	r3, [sp, #20]
    26d8:	199a      	adds	r2, r3, r6
    26da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    26dc:	f1a3 0a02 	sub.w	sl, r3, #2
    26e0:	ebba 0a06 	subs.w	sl, sl, r6
    26e4:	d41c      	bmi.n	2720 <__vfprintf+0x2bc>
    26e6:	9b05      	ldr	r3, [sp, #20]
    26e8:	18f0      	adds	r0, r6, r3
    26ea:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    26ee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    26f2:	4290      	cmp	r0, r2
    26f4:	eb71 0303 	sbcs.w	r3, r1, r3
    26f8:	da0e      	bge.n	2718 <__vfprintf+0x2b4>
    26fa:	68a2      	ldr	r2, [r4, #8]
    26fc:	3a01      	subs	r2, #1
    26fe:	2a00      	cmp	r2, #0
    2700:	60a2      	str	r2, [r4, #8]
    2702:	db05      	blt.n	2710 <__vfprintf+0x2ac>
    2704:	6822      	ldr	r2, [r4, #0]
    2706:	1c51      	adds	r1, r2, #1
    2708:	6021      	str	r1, [r4, #0]
    270a:	f882 8000 	strb.w	r8, [r2]
    270e:	e003      	b.n	2718 <__vfprintf+0x2b4>
    2710:	4640      	mov	r0, r8
    2712:	4621      	mov	r1, r4
    2714:	f000 fd61 	bl	31da <__flsbuf>
    2718:	3601      	adds	r6, #1
    271a:	f147 0700 	adc.w	r7, r7, #0
    271e:	e7da      	b.n	26d6 <__vfprintf+0x272>
    2720:	9205      	str	r2, [sp, #20]
    2722:	9b05      	ldr	r3, [sp, #20]
    2724:	17d9      	asrs	r1, r3, #31
    2726:	461a      	mov	r2, r3
    2728:	f103 0b01 	add.w	fp, r3, #1
    272c:	460b      	mov	r3, r1
    272e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    2732:	4282      	cmp	r2, r0
    2734:	418b      	sbcs	r3, r1
    2736:	da0e      	bge.n	2756 <__vfprintf+0x2f2>
    2738:	68a3      	ldr	r3, [r4, #8]
    273a:	3b01      	subs	r3, #1
    273c:	2b00      	cmp	r3, #0
    273e:	60a3      	str	r3, [r4, #8]
    2740:	db05      	blt.n	274e <__vfprintf+0x2ea>
    2742:	6823      	ldr	r3, [r4, #0]
    2744:	1c5a      	adds	r2, r3, #1
    2746:	6022      	str	r2, [r4, #0]
    2748:	f883 9000 	strb.w	r9, [r3]
    274c:	e003      	b.n	2756 <__vfprintf+0x2f2>
    274e:	4648      	mov	r0, r9
    2750:	4621      	mov	r1, r4
    2752:	f000 fd42 	bl	31da <__flsbuf>
    2756:	9b06      	ldr	r3, [sp, #24]
    2758:	b91b      	cbnz	r3, 2762 <__vfprintf+0x2fe>
    275a:	f8cd b014 	str.w	fp, [sp, #20]
    275e:	f000 bcc7 	b.w	30f0 <__vfprintf+0xc8c>
    2762:	2600      	movs	r6, #0
    2764:	2700      	movs	r7, #0
    2766:	43f3      	mvns	r3, r6
    2768:	eb13 0f0a 	cmn.w	r3, sl
    276c:	d41b      	bmi.n	27a6 <__vfprintf+0x342>
    276e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    2772:	eb16 020b 	adds.w	r2, r6, fp
    2776:	eb47 73eb 	adc.w	r3, r7, fp, asr #31
    277a:	4282      	cmp	r2, r0
    277c:	418b      	sbcs	r3, r1
    277e:	da0e      	bge.n	279e <__vfprintf+0x33a>
    2780:	68a3      	ldr	r3, [r4, #8]
    2782:	3b01      	subs	r3, #1
    2784:	2b00      	cmp	r3, #0
    2786:	60a3      	str	r3, [r4, #8]
    2788:	db05      	blt.n	2796 <__vfprintf+0x332>
    278a:	6823      	ldr	r3, [r4, #0]
    278c:	1c5a      	adds	r2, r3, #1
    278e:	6022      	str	r2, [r4, #0]
    2790:	2220      	movs	r2, #32
    2792:	701a      	strb	r2, [r3, #0]
    2794:	e003      	b.n	279e <__vfprintf+0x33a>
    2796:	2020      	movs	r0, #32
    2798:	4621      	mov	r1, r4
    279a:	f000 fd1e 	bl	31da <__flsbuf>
    279e:	3601      	adds	r6, #1
    27a0:	f147 0700 	adc.w	r7, r7, #0
    27a4:	e7df      	b.n	2766 <__vfprintf+0x302>
    27a6:	465b      	mov	r3, fp
    27a8:	f1ba 0f00 	cmp.w	sl, #0
    27ac:	bfa8      	it	ge
    27ae:	4453      	addge	r3, sl
    27b0:	f000 bc9d 	b.w	30ee <__vfprintf+0xc8a>
    27b4:	3d01      	subs	r5, #1
    27b6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    27ba:	f000 bc99 	b.w	30f0 <__vfprintf+0xc8c>
    27be:	f108 0304 	add.w	r3, r8, #4
    27c2:	f017 0f40 	tst.w	r7, #64	; 0x40
    27c6:	930e      	str	r3, [sp, #56]	; 0x38
    27c8:	f8d8 3000 	ldr.w	r3, [r8]
    27cc:	d006      	beq.n	27dc <__vfprintf+0x378>
    27ce:	9a05      	ldr	r2, [sp, #20]
    27d0:	4610      	mov	r0, r2
    27d2:	17d1      	asrs	r1, r2, #31
    27d4:	e9c3 0100 	strd	r0, r1, [r3]
    27d8:	f000 bc8a 	b.w	30f0 <__vfprintf+0xc8c>
    27dc:	06be      	lsls	r6, r7, #26
    27de:	d40d      	bmi.n	27fc <__vfprintf+0x398>
    27e0:	05f8      	lsls	r0, r7, #23
    27e2:	d504      	bpl.n	27ee <__vfprintf+0x38a>
    27e4:	f89d 2014 	ldrb.w	r2, [sp, #20]
    27e8:	701a      	strb	r2, [r3, #0]
    27ea:	f000 bc81 	b.w	30f0 <__vfprintf+0xc8c>
    27ee:	0639      	lsls	r1, r7, #24
    27f0:	d504      	bpl.n	27fc <__vfprintf+0x398>
    27f2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    27f6:	801a      	strh	r2, [r3, #0]
    27f8:	f000 bc7a 	b.w	30f0 <__vfprintf+0xc8c>
    27fc:	9a05      	ldr	r2, [sp, #20]
    27fe:	601a      	str	r2, [r3, #0]
    2800:	f000 bc76 	b.w	30f0 <__vfprintf+0xc8c>
    2804:	f108 0304 	add.w	r3, r8, #4
    2808:	930e      	str	r3, [sp, #56]	; 0x38
    280a:	f8d8 9000 	ldr.w	r9, [r8]
    280e:	4bab      	ldr	r3, [pc, #684]	; (2abc <__vfprintf+0x658>)
    2810:	f1b9 0f00 	cmp.w	r9, #0
    2814:	bf08      	it	eq
    2816:	4699      	moveq	r9, r3
    2818:	4648      	mov	r0, r9
    281a:	f000 fc95 	bl	3148 <strlen>
    281e:	06fa      	lsls	r2, r7, #27
    2820:	4682      	mov	sl, r0
    2822:	d503      	bpl.n	282c <__vfprintf+0x3c8>
    2824:	9b06      	ldr	r3, [sp, #24]
    2826:	4298      	cmp	r0, r3
    2828:	bfa8      	it	ge
    282a:	469a      	movge	sl, r3
    282c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    282e:	ebca 0b03 	rsb	fp, sl, r3
    2832:	f017 0301 	ands.w	r3, r7, #1
    2836:	9306      	str	r3, [sp, #24]
    2838:	d131      	bne.n	289e <__vfprintf+0x43a>
    283a:	f417 7f00 	tst.w	r7, #512	; 0x200
    283e:	bf14      	ite	ne
    2840:	f04f 0830 	movne.w	r8, #48	; 0x30
    2844:	f04f 0820 	moveq.w	r8, #32
    2848:	2600      	movs	r6, #0
    284a:	2700      	movs	r7, #0
    284c:	f10b 32ff 	add.w	r2, fp, #4294967295
    2850:	1b91      	subs	r1, r2, r6
    2852:	2900      	cmp	r1, #0
    2854:	db1c      	blt.n	2890 <__vfprintf+0x42c>
    2856:	9b05      	ldr	r3, [sp, #20]
    2858:	18f0      	adds	r0, r6, r3
    285a:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    285e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    2862:	4290      	cmp	r0, r2
    2864:	eb71 0303 	sbcs.w	r3, r1, r3
    2868:	da0e      	bge.n	2888 <__vfprintf+0x424>
    286a:	68a2      	ldr	r2, [r4, #8]
    286c:	3a01      	subs	r2, #1
    286e:	2a00      	cmp	r2, #0
    2870:	60a2      	str	r2, [r4, #8]
    2872:	db05      	blt.n	2880 <__vfprintf+0x41c>
    2874:	6822      	ldr	r2, [r4, #0]
    2876:	1c51      	adds	r1, r2, #1
    2878:	6021      	str	r1, [r4, #0]
    287a:	f882 8000 	strb.w	r8, [r2]
    287e:	e003      	b.n	2888 <__vfprintf+0x424>
    2880:	4640      	mov	r0, r8
    2882:	4621      	mov	r1, r4
    2884:	f000 fca9 	bl	31da <__flsbuf>
    2888:	3601      	adds	r6, #1
    288a:	f147 0700 	adc.w	r7, r7, #0
    288e:	e7dd      	b.n	284c <__vfprintf+0x3e8>
    2890:	9b05      	ldr	r3, [sp, #20]
    2892:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    2896:	445b      	add	r3, fp
    2898:	9305      	str	r3, [sp, #20]
    289a:	ebcb 0b02 	rsb	fp, fp, r2
    289e:	2600      	movs	r6, #0
    28a0:	2700      	movs	r7, #0
    28a2:	45b2      	cmp	sl, r6
    28a4:	9b05      	ldr	r3, [sp, #20]
    28a6:	dd1c      	ble.n	28e2 <__vfprintf+0x47e>
    28a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    28ac:	18f2      	adds	r2, r6, r3
    28ae:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    28b2:	4282      	cmp	r2, r0
    28b4:	418b      	sbcs	r3, r1
    28b6:	da10      	bge.n	28da <__vfprintf+0x476>
    28b8:	68a3      	ldr	r3, [r4, #8]
    28ba:	3b01      	subs	r3, #1
    28bc:	2b00      	cmp	r3, #0
    28be:	60a3      	str	r3, [r4, #8]
    28c0:	eb09 0306 	add.w	r3, r9, r6
    28c4:	db05      	blt.n	28d2 <__vfprintf+0x46e>
    28c6:	6822      	ldr	r2, [r4, #0]
    28c8:	1c51      	adds	r1, r2, #1
    28ca:	6021      	str	r1, [r4, #0]
    28cc:	781b      	ldrb	r3, [r3, #0]
    28ce:	7013      	strb	r3, [r2, #0]
    28d0:	e003      	b.n	28da <__vfprintf+0x476>
    28d2:	7818      	ldrb	r0, [r3, #0]
    28d4:	4621      	mov	r1, r4
    28d6:	f000 fc80 	bl	31da <__flsbuf>
    28da:	3601      	adds	r6, #1
    28dc:	f147 0700 	adc.w	r7, r7, #0
    28e0:	e7df      	b.n	28a2 <__vfprintf+0x43e>
    28e2:	f1ba 0f00 	cmp.w	sl, #0
    28e6:	bfa8      	it	ge
    28e8:	4453      	addge	r3, sl
    28ea:	9305      	str	r3, [sp, #20]
    28ec:	9b06      	ldr	r3, [sp, #24]
    28ee:	2b00      	cmp	r3, #0
    28f0:	f000 83fe 	beq.w	30f0 <__vfprintf+0xc8c>
    28f4:	2600      	movs	r6, #0
    28f6:	2700      	movs	r7, #0
    28f8:	43f3      	mvns	r3, r6
    28fa:	eb13 0f0b 	cmn.w	r3, fp
    28fe:	9b05      	ldr	r3, [sp, #20]
    2900:	d41a      	bmi.n	2938 <__vfprintf+0x4d4>
    2902:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    2906:	18f2      	adds	r2, r6, r3
    2908:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    290c:	4282      	cmp	r2, r0
    290e:	418b      	sbcs	r3, r1
    2910:	da0e      	bge.n	2930 <__vfprintf+0x4cc>
    2912:	68a3      	ldr	r3, [r4, #8]
    2914:	3b01      	subs	r3, #1
    2916:	2b00      	cmp	r3, #0
    2918:	60a3      	str	r3, [r4, #8]
    291a:	db05      	blt.n	2928 <__vfprintf+0x4c4>
    291c:	6823      	ldr	r3, [r4, #0]
    291e:	1c5a      	adds	r2, r3, #1
    2920:	6022      	str	r2, [r4, #0]
    2922:	2220      	movs	r2, #32
    2924:	701a      	strb	r2, [r3, #0]
    2926:	e003      	b.n	2930 <__vfprintf+0x4cc>
    2928:	2020      	movs	r0, #32
    292a:	4621      	mov	r1, r4
    292c:	f000 fc55 	bl	31da <__flsbuf>
    2930:	3601      	adds	r6, #1
    2932:	f147 0700 	adc.w	r7, r7, #0
    2936:	e7df      	b.n	28f8 <__vfprintf+0x494>
    2938:	f1bb 0f00 	cmp.w	fp, #0
    293c:	bfa8      	it	ge
    293e:	445b      	addge	r3, fp
    2940:	e3d5      	b.n	30ee <__vfprintf+0xc8a>
    2942:	067b      	lsls	r3, r7, #25
    2944:	d509      	bpl.n	295a <__vfprintf+0x4f6>
    2946:	f108 0807 	add.w	r8, r8, #7
    294a:	f028 0807 	bic.w	r8, r8, #7
    294e:	f108 0308 	add.w	r3, r8, #8
    2952:	930e      	str	r3, [sp, #56]	; 0x38
    2954:	e9d8 2300 	ldrd	r2, r3, [r8]
    2958:	e005      	b.n	2966 <__vfprintf+0x502>
    295a:	f108 0304 	add.w	r3, r8, #4
    295e:	f8d8 2000 	ldr.w	r2, [r8]
    2962:	930e      	str	r3, [sp, #56]	; 0x38
    2964:	2300      	movs	r3, #0
    2966:	063e      	lsls	r6, r7, #24
    2968:	d501      	bpl.n	296e <__vfprintf+0x50a>
    296a:	b292      	uxth	r2, r2
    296c:	e003      	b.n	2976 <__vfprintf+0x512>
    296e:	05f8      	lsls	r0, r7, #23
    2970:	d502      	bpl.n	2978 <__vfprintf+0x514>
    2972:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    2976:	2300      	movs	r3, #0
    2978:	4951      	ldr	r1, [pc, #324]	; (2ac0 <__vfprintf+0x65c>)
    297a:	f017 0f08 	tst.w	r7, #8
    297e:	4851      	ldr	r0, [pc, #324]	; (2ac4 <__vfprintf+0x660>)
    2980:	bf08      	it	eq
    2982:	4608      	moveq	r0, r1
    2984:	06f9      	lsls	r1, r7, #27
    2986:	f140 80d6 	bpl.w	2b36 <__vfprintf+0x6d2>
    298a:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    298e:	e0d2      	b.n	2b36 <__vfprintf+0x6d2>
    2990:	067b      	lsls	r3, r7, #25
    2992:	d509      	bpl.n	29a8 <__vfprintf+0x544>
    2994:	f108 0807 	add.w	r8, r8, #7
    2998:	f028 0807 	bic.w	r8, r8, #7
    299c:	f108 0308 	add.w	r3, r8, #8
    29a0:	930e      	str	r3, [sp, #56]	; 0x38
    29a2:	e9d8 2300 	ldrd	r2, r3, [r8]
    29a6:	e005      	b.n	29b4 <__vfprintf+0x550>
    29a8:	f108 0304 	add.w	r3, r8, #4
    29ac:	f8d8 2000 	ldr.w	r2, [r8]
    29b0:	930e      	str	r3, [sp, #56]	; 0x38
    29b2:	2300      	movs	r3, #0
    29b4:	063e      	lsls	r6, r7, #24
    29b6:	d501      	bpl.n	29bc <__vfprintf+0x558>
    29b8:	b292      	uxth	r2, r2
    29ba:	e003      	b.n	29c4 <__vfprintf+0x560>
    29bc:	05f8      	lsls	r0, r7, #23
    29be:	d502      	bpl.n	29c6 <__vfprintf+0x562>
    29c0:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    29c4:	2300      	movs	r3, #0
    29c6:	493e      	ldr	r1, [pc, #248]	; (2ac0 <__vfprintf+0x65c>)
    29c8:	f017 0f08 	tst.w	r7, #8
    29cc:	483e      	ldr	r0, [pc, #248]	; (2ac8 <__vfprintf+0x664>)
    29ce:	bf08      	it	eq
    29d0:	4608      	moveq	r0, r1
    29d2:	06f9      	lsls	r1, r7, #27
    29d4:	f140 80b1 	bpl.w	2b3a <__vfprintf+0x6d6>
    29d8:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    29dc:	e0ad      	b.n	2b3a <__vfprintf+0x6d6>
    29de:	f108 0304 	add.w	r3, r8, #4
    29e2:	930e      	str	r3, [sp, #56]	; 0x38
    29e4:	f8d8 2000 	ldr.w	r2, [r8]
    29e8:	2300      	movs	r3, #0
    29ea:	4938      	ldr	r1, [pc, #224]	; (2acc <__vfprintf+0x668>)
    29ec:	4836      	ldr	r0, [pc, #216]	; (2ac8 <__vfprintf+0x664>)
    29ee:	e0a7      	b.n	2b40 <__vfprintf+0x6dc>
    29f0:	067e      	lsls	r6, r7, #25
    29f2:	d509      	bpl.n	2a08 <__vfprintf+0x5a4>
    29f4:	f108 0807 	add.w	r8, r8, #7
    29f8:	f028 0807 	bic.w	r8, r8, #7
    29fc:	f108 0308 	add.w	r3, r8, #8
    2a00:	930e      	str	r3, [sp, #56]	; 0x38
    2a02:	e9d8 2300 	ldrd	r2, r3, [r8]
    2a06:	e005      	b.n	2a14 <__vfprintf+0x5b0>
    2a08:	f108 0304 	add.w	r3, r8, #4
    2a0c:	f8d8 2000 	ldr.w	r2, [r8]
    2a10:	930e      	str	r3, [sp, #56]	; 0x38
    2a12:	2300      	movs	r3, #0
    2a14:	0638      	lsls	r0, r7, #24
    2a16:	d501      	bpl.n	2a1c <__vfprintf+0x5b8>
    2a18:	b292      	uxth	r2, r2
    2a1a:	e003      	b.n	2a24 <__vfprintf+0x5c0>
    2a1c:	05f9      	lsls	r1, r7, #23
    2a1e:	d502      	bpl.n	2a26 <__vfprintf+0x5c2>
    2a20:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    2a24:	2300      	movs	r3, #0
    2a26:	f017 0f08 	tst.w	r7, #8
    2a2a:	4925      	ldr	r1, [pc, #148]	; (2ac0 <__vfprintf+0x65c>)
    2a2c:	4828      	ldr	r0, [pc, #160]	; (2ad0 <__vfprintf+0x66c>)
    2a2e:	e059      	b.n	2ae4 <__vfprintf+0x680>
    2a30:	067e      	lsls	r6, r7, #25
    2a32:	d509      	bpl.n	2a48 <__vfprintf+0x5e4>
    2a34:	f108 0807 	add.w	r8, r8, #7
    2a38:	f028 0807 	bic.w	r8, r8, #7
    2a3c:	f108 0308 	add.w	r3, r8, #8
    2a40:	930e      	str	r3, [sp, #56]	; 0x38
    2a42:	e9d8 2300 	ldrd	r2, r3, [r8]
    2a46:	e005      	b.n	2a54 <__vfprintf+0x5f0>
    2a48:	f108 0304 	add.w	r3, r8, #4
    2a4c:	f8d8 2000 	ldr.w	r2, [r8]
    2a50:	930e      	str	r3, [sp, #56]	; 0x38
    2a52:	2300      	movs	r3, #0
    2a54:	0638      	lsls	r0, r7, #24
    2a56:	d501      	bpl.n	2a5c <__vfprintf+0x5f8>
    2a58:	b292      	uxth	r2, r2
    2a5a:	e003      	b.n	2a64 <__vfprintf+0x600>
    2a5c:	05f9      	lsls	r1, r7, #23
    2a5e:	d502      	bpl.n	2a66 <__vfprintf+0x602>
    2a60:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    2a64:	2300      	movs	r3, #0
    2a66:	f017 0110 	ands.w	r1, r7, #16
    2a6a:	d068      	beq.n	2b3e <__vfprintf+0x6da>
    2a6c:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    2a70:	2100      	movs	r1, #0
    2a72:	e064      	b.n	2b3e <__vfprintf+0x6da>
    2a74:	067b      	lsls	r3, r7, #25
    2a76:	d509      	bpl.n	2a8c <__vfprintf+0x628>
    2a78:	f108 0807 	add.w	r8, r8, #7
    2a7c:	f028 0807 	bic.w	r8, r8, #7
    2a80:	f108 0308 	add.w	r3, r8, #8
    2a84:	930e      	str	r3, [sp, #56]	; 0x38
    2a86:	e9d8 2300 	ldrd	r2, r3, [r8]
    2a8a:	e005      	b.n	2a98 <__vfprintf+0x634>
    2a8c:	f8d8 2000 	ldr.w	r2, [r8]
    2a90:	f108 0304 	add.w	r3, r8, #4
    2a94:	930e      	str	r3, [sp, #56]	; 0x38
    2a96:	17d3      	asrs	r3, r2, #31
    2a98:	063e      	lsls	r6, r7, #24
    2a9a:	d501      	bpl.n	2aa0 <__vfprintf+0x63c>
    2a9c:	b212      	sxth	r2, r2
    2a9e:	e002      	b.n	2aa6 <__vfprintf+0x642>
    2aa0:	05f8      	lsls	r0, r7, #23
    2aa2:	d501      	bpl.n	2aa8 <__vfprintf+0x644>
    2aa4:	b252      	sxtb	r2, r2
    2aa6:	17d3      	asrs	r3, r2, #31
    2aa8:	2a00      	cmp	r2, #0
    2aaa:	f173 0100 	sbcs.w	r1, r3, #0
    2aae:	da13      	bge.n	2ad8 <__vfprintf+0x674>
    2ab0:	4252      	negs	r2, r2
    2ab2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2ab6:	4807      	ldr	r0, [pc, #28]	; (2ad4 <__vfprintf+0x670>)
    2ab8:	e018      	b.n	2aec <__vfprintf+0x688>
    2aba:	bf00      	nop
    2abc:	00004424 	.word	0x00004424
    2ac0:	0000446c 	.word	0x0000446c
    2ac4:	0000442b 	.word	0x0000442b
    2ac8:	0000442e 	.word	0x0000442e
    2acc:	00004444 	.word	0x00004444
    2ad0:	00004431 	.word	0x00004431
    2ad4:	0000441e 	.word	0x0000441e
    2ad8:	07b9      	lsls	r1, r7, #30
    2ada:	d406      	bmi.n	2aea <__vfprintf+0x686>
    2adc:	49b6      	ldr	r1, [pc, #728]	; (2db8 <__vfprintf+0x954>)
    2ade:	48b7      	ldr	r0, [pc, #732]	; (2dbc <__vfprintf+0x958>)
    2ae0:	f017 0f04 	tst.w	r7, #4
    2ae4:	bf08      	it	eq
    2ae6:	4608      	moveq	r0, r1
    2ae8:	e000      	b.n	2aec <__vfprintf+0x688>
    2aea:	48b5      	ldr	r0, [pc, #724]	; (2dc0 <__vfprintf+0x95c>)
    2aec:	f017 0110 	ands.w	r1, r7, #16
    2af0:	d026      	beq.n	2b40 <__vfprintf+0x6dc>
    2af2:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    2af6:	2100      	movs	r1, #0
    2af8:	e022      	b.n	2b40 <__vfprintf+0x6dc>
    2afa:	06fb      	lsls	r3, r7, #27
    2afc:	bf5e      	ittt	pl
    2afe:	230d      	movpl	r3, #13
    2b00:	f047 0710 	orrpl.w	r7, r7, #16
    2b04:	9306      	strpl	r3, [sp, #24]
    2b06:	9b06      	ldr	r3, [sp, #24]
    2b08:	f017 0f10 	tst.w	r7, #16
    2b0c:	f108 0807 	add.w	r8, r8, #7
    2b10:	bf08      	it	eq
    2b12:	2306      	moveq	r3, #6
    2b14:	f028 0807 	bic.w	r8, r8, #7
    2b18:	9306      	str	r3, [sp, #24]
    2b1a:	2100      	movs	r1, #0
    2b1c:	f108 0308 	add.w	r3, r8, #8
    2b20:	930e      	str	r3, [sp, #56]	; 0x38
    2b22:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
    2b26:	e9d8 2300 	ldrd	r2, r3, [r8]
    2b2a:	4608      	mov	r0, r1
    2b2c:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
    2b30:	2200      	movs	r2, #0
    2b32:	2300      	movs	r3, #0
    2b34:	e004      	b.n	2b40 <__vfprintf+0x6dc>
    2b36:	49a3      	ldr	r1, [pc, #652]	; (2dc4 <__vfprintf+0x960>)
    2b38:	e002      	b.n	2b40 <__vfprintf+0x6dc>
    2b3a:	49a3      	ldr	r1, [pc, #652]	; (2dc8 <__vfprintf+0x964>)
    2b3c:	e000      	b.n	2b40 <__vfprintf+0x6dc>
    2b3e:	489e      	ldr	r0, [pc, #632]	; (2db8 <__vfprintf+0x954>)
    2b40:	9e05      	ldr	r6, [sp, #20]
    2b42:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    2b46:	ebba 0a06 	subs.w	sl, sl, r6
    2b4a:	eb6b 7be6 	sbc.w	fp, fp, r6, asr #31
    2b4e:	e9cd ab08 	strd	sl, fp, [sp, #32]
    2b52:	9e06      	ldr	r6, [sp, #24]
    2b54:	901f      	str	r0, [sp, #124]	; 0x7c
    2b56:	f04f 30ff 	mov.w	r0, #4294967295
    2b5a:	9020      	str	r0, [sp, #128]	; 0x80
    2b5c:	9021      	str	r0, [sp, #132]	; 0x84
    2b5e:	961e      	str	r6, [sp, #120]	; 0x78
    2b60:	2000      	movs	r0, #0
    2b62:	f04f 0e55 	mov.w	lr, #85	; 0x55
    2b66:	ae24      	add	r6, sp, #144	; 0x90
    2b68:	f800 e006 	strb.w	lr, [r0, r6]
    2b6c:	3001      	adds	r0, #1
    2b6e:	2820      	cmp	r0, #32
    2b70:	d1f7      	bne.n	2b62 <__vfprintf+0x6fe>
    2b72:	f417 6f82 	tst.w	r7, #1040	; 0x410
    2b76:	bf04      	itt	eq
    2b78:	2001      	moveq	r0, #1
    2b7a:	901e      	streq	r0, [sp, #120]	; 0x78
    2b7c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    2b80:	dc1b      	bgt.n	2bba <__vfprintf+0x756>
    2b82:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    2b86:	f280 80d4 	bge.w	2d32 <__vfprintf+0x8ce>
    2b8a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    2b8e:	f000 80d0 	beq.w	2d32 <__vfprintf+0x8ce>
    2b92:	dc08      	bgt.n	2ba6 <__vfprintf+0x742>
    2b94:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    2b98:	f000 80cb 	beq.w	2d32 <__vfprintf+0x8ce>
    2b9c:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    2ba0:	f040 80d7 	bne.w	2d52 <__vfprintf+0x8ee>
    2ba4:	e0c5      	b.n	2d32 <__vfprintf+0x8ce>
    2ba6:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    2baa:	f000 80c2 	beq.w	2d32 <__vfprintf+0x8ce>
    2bae:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    2bb2:	d017      	beq.n	2be4 <__vfprintf+0x780>
    2bb4:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    2bb8:	e011      	b.n	2bde <__vfprintf+0x77a>
    2bba:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    2bbe:	d014      	beq.n	2bea <__vfprintf+0x786>
    2bc0:	dc08      	bgt.n	2bd4 <__vfprintf+0x770>
    2bc2:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    2bc6:	d00d      	beq.n	2be4 <__vfprintf+0x780>
    2bc8:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
    2bcc:	f040 80c1 	bne.w	2d52 <__vfprintf+0x8ee>
    2bd0:	2100      	movs	r1, #0
    2bd2:	e020      	b.n	2c16 <__vfprintf+0x7b2>
    2bd4:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    2bd8:	d004      	beq.n	2be4 <__vfprintf+0x780>
    2bda:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    2bde:	f040 80b8 	bne.w	2d52 <__vfprintf+0x8ee>
    2be2:	e002      	b.n	2bea <__vfprintf+0x786>
    2be4:	f04f 0e00 	mov.w	lr, #0
    2be8:	e027      	b.n	2c3a <__vfprintf+0x7d6>
    2bea:	2000      	movs	r0, #0
    2bec:	ea52 0e03 	orrs.w	lr, r2, r3
    2bf0:	4606      	mov	r6, r0
    2bf2:	f000 80af 	beq.w	2d54 <__vfprintf+0x8f0>
    2bf6:	f002 060f 	and.w	r6, r2, #15
    2bfa:	f811 e006 	ldrb.w	lr, [r1, r6]
    2bfe:	ae24      	add	r6, sp, #144	; 0x90
    2c00:	f800 e006 	strb.w	lr, [r0, r6]
    2c04:	0916      	lsrs	r6, r2, #4
    2c06:	ea46 7603 	orr.w	r6, r6, r3, lsl #28
    2c0a:	ea4f 1e13 	mov.w	lr, r3, lsr #4
    2c0e:	4632      	mov	r2, r6
    2c10:	4673      	mov	r3, lr
    2c12:	3001      	adds	r0, #1
    2c14:	e7ea      	b.n	2bec <__vfprintf+0x788>
    2c16:	ea52 0003 	orrs.w	r0, r2, r3
    2c1a:	460e      	mov	r6, r1
    2c1c:	f000 809a 	beq.w	2d54 <__vfprintf+0x8f0>
    2c20:	f002 0007 	and.w	r0, r2, #7
    2c24:	3030      	adds	r0, #48	; 0x30
    2c26:	ae24      	add	r6, sp, #144	; 0x90
    2c28:	5588      	strb	r0, [r1, r6]
    2c2a:	08d0      	lsrs	r0, r2, #3
    2c2c:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
    2c30:	08de      	lsrs	r6, r3, #3
    2c32:	4602      	mov	r2, r0
    2c34:	4633      	mov	r3, r6
    2c36:	3101      	adds	r1, #1
    2c38:	e7ed      	b.n	2c16 <__vfprintf+0x7b2>
    2c3a:	ea52 0103 	orrs.w	r1, r2, r3
    2c3e:	4676      	mov	r6, lr
    2c40:	f000 8088 	beq.w	2d54 <__vfprintf+0x8f0>
    2c44:	0891      	lsrs	r1, r2, #2
    2c46:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
    2c4a:	9118      	str	r1, [sp, #96]	; 0x60
    2c4c:	0899      	lsrs	r1, r3, #2
    2c4e:	9119      	str	r1, [sp, #100]	; 0x64
    2c50:	0859      	lsrs	r1, r3, #1
    2c52:	ea4f 0032 	mov.w	r0, r2, rrx
    2c56:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    2c5a:	eb18 0800 	adds.w	r8, r8, r0
    2c5e:	4640      	mov	r0, r8
    2c60:	eb49 0901 	adc.w	r9, r9, r1
    2c64:	4649      	mov	r1, r9
    2c66:	0906      	lsrs	r6, r0, #4
    2c68:	ea46 7609 	orr.w	r6, r6, r9, lsl #28
    2c6c:	9610      	str	r6, [sp, #64]	; 0x40
    2c6e:	090e      	lsrs	r6, r1, #4
    2c70:	9611      	str	r6, [sp, #68]	; 0x44
    2c72:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
    2c76:	eb18 0800 	adds.w	r8, r8, r0
    2c7a:	4640      	mov	r0, r8
    2c7c:	eb49 0901 	adc.w	r9, r9, r1
    2c80:	4649      	mov	r1, r9
    2c82:	0a06      	lsrs	r6, r0, #8
    2c84:	ea46 6609 	orr.w	r6, r6, r9, lsl #24
    2c88:	9612      	str	r6, [sp, #72]	; 0x48
    2c8a:	0a0e      	lsrs	r6, r1, #8
    2c8c:	9613      	str	r6, [sp, #76]	; 0x4c
    2c8e:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    2c92:	eb18 0800 	adds.w	r8, r8, r0
    2c96:	4640      	mov	r0, r8
    2c98:	eb49 0901 	adc.w	r9, r9, r1
    2c9c:	4649      	mov	r1, r9
    2c9e:	0c06      	lsrs	r6, r0, #16
    2ca0:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
    2ca4:	9614      	str	r6, [sp, #80]	; 0x50
    2ca6:	0c0e      	lsrs	r6, r1, #16
    2ca8:	9615      	str	r6, [sp, #84]	; 0x54
    2caa:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    2cae:	eb18 0800 	adds.w	r8, r8, r0
    2cb2:	eb49 0901 	adc.w	r9, r9, r1
    2cb6:	4640      	mov	r0, r8
    2cb8:	4649      	mov	r1, r9
    2cba:	2600      	movs	r6, #0
    2cbc:	961b      	str	r6, [sp, #108]	; 0x6c
    2cbe:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    2cc2:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    2cc6:	eb18 0800 	adds.w	r8, r8, r0
    2cca:	eb49 0901 	adc.w	r9, r9, r1
    2cce:	4640      	mov	r0, r8
    2cd0:	4649      	mov	r1, r9
    2cd2:	08c6      	lsrs	r6, r0, #3
    2cd4:	08c9      	lsrs	r1, r1, #3
    2cd6:	1d90      	adds	r0, r2, #6
    2cd8:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
    2cdc:	910d      	str	r1, [sp, #52]	; 0x34
    2cde:	f143 0100 	adc.w	r1, r3, #0
    2ce2:	230a      	movs	r3, #10
    2ce4:	fba6 8903 	umull	r8, r9, r6, r3
    2ce8:	960c      	str	r6, [sp, #48]	; 0x30
    2cea:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    2cec:	ebb0 0008 	subs.w	r0, r0, r8
    2cf0:	fb03 9906 	mla	r9, r3, r6, r9
    2cf4:	ea4f 1610 	mov.w	r6, r0, lsr #4
    2cf8:	eb61 0109 	sbc.w	r1, r1, r9
    2cfc:	ea46 7601 	orr.w	r6, r6, r1, lsl #28
    2d00:	0909      	lsrs	r1, r1, #4
    2d02:	9616      	str	r6, [sp, #88]	; 0x58
    2d04:	9117      	str	r1, [sp, #92]	; 0x5c
    2d06:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    2d0a:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
    2d0e:	eb10 0008 	adds.w	r0, r0, r8
    2d12:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    2d16:	f102 0230 	add.w	r2, r2, #48	; 0x30
    2d1a:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    2d1e:	eb41 0109 	adc.w	r1, r1, r9
    2d22:	ab24      	add	r3, sp, #144	; 0x90
    2d24:	f80e 2003 	strb.w	r2, [lr, r3]
    2d28:	f10e 0e01 	add.w	lr, lr, #1
    2d2c:	4602      	mov	r2, r0
    2d2e:	460b      	mov	r3, r1
    2d30:	e783      	b.n	2c3a <__vfprintf+0x7d6>
    2d32:	ab1f      	add	r3, sp, #124	; 0x7c
    2d34:	9300      	str	r3, [sp, #0]
    2d36:	ab1e      	add	r3, sp, #120	; 0x78
    2d38:	9301      	str	r3, [sp, #4]
    2d3a:	ab20      	add	r3, sp, #128	; 0x80
    2d3c:	9302      	str	r3, [sp, #8]
    2d3e:	ab21      	add	r3, sp, #132	; 0x84
    2d40:	9303      	str	r3, [sp, #12]
    2d42:	9e38      	ldr	r6, [sp, #224]	; 0xe0
    2d44:	4648      	mov	r0, r9
    2d46:	a922      	add	r1, sp, #136	; 0x88
    2d48:	aa24      	add	r2, sp, #144	; 0x90
    2d4a:	463b      	mov	r3, r7
    2d4c:	47b0      	blx	r6
    2d4e:	4606      	mov	r6, r0
    2d50:	e000      	b.n	2d54 <__vfprintf+0x8f0>
    2d52:	2600      	movs	r6, #0
    2d54:	f417 6380 	ands.w	r3, r7, #1024	; 0x400
    2d58:	931c      	str	r3, [sp, #112]	; 0x70
    2d5a:	d00e      	beq.n	2d7a <__vfprintf+0x916>
    2d5c:	2300      	movs	r3, #0
    2d5e:	931e      	str	r3, [sp, #120]	; 0x78
    2d60:	9b20      	ldr	r3, [sp, #128]	; 0x80
    2d62:	2b00      	cmp	r3, #0
    2d64:	bfc4      	itt	gt
    2d66:	f103 33ff 	addgt.w	r3, r3, #4294967295
    2d6a:	931e      	strgt	r3, [sp, #120]	; 0x78
    2d6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    2d6e:	2b00      	cmp	r3, #0
    2d70:	dd08      	ble.n	2d84 <__vfprintf+0x920>
    2d72:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    2d74:	3b01      	subs	r3, #1
    2d76:	4413      	add	r3, r2
    2d78:	e003      	b.n	2d82 <__vfprintf+0x91e>
    2d7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2d7c:	1b9b      	subs	r3, r3, r6
    2d7e:	bf48      	it	mi
    2d80:	2300      	movmi	r3, #0
    2d82:	931e      	str	r3, [sp, #120]	; 0x78
    2d84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2d86:	981f      	ldr	r0, [sp, #124]	; 0x7c
    2d88:	eb06 0803 	add.w	r8, r6, r3
    2d8c:	f000 f9dc 	bl	3148 <strlen>
    2d90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2d92:	ebc8 0b03 	rsb	fp, r8, r3
    2d96:	f007 0301 	and.w	r3, r7, #1
    2d9a:	930f      	str	r3, [sp, #60]	; 0x3c
    2d9c:	f240 2301 	movw	r3, #513	; 0x201
    2da0:	403b      	ands	r3, r7
    2da2:	ebc0 0b0b 	rsb	fp, r0, fp
    2da6:	b18b      	cbz	r3, 2dcc <__vfprintf+0x968>
    2da8:	f04f 0a00 	mov.w	sl, #0
    2dac:	f04f 0800 	mov.w	r8, #0
    2db0:	f04f 0900 	mov.w	r9, #0
    2db4:	e040      	b.n	2e38 <__vfprintf+0x9d4>
    2db6:	bf00      	nop
    2db8:	0000446c 	.word	0x0000446c
    2dbc:	000043ee 	.word	0x000043ee
    2dc0:	000043ec 	.word	0x000043ec
    2dc4:	00004433 	.word	0x00004433
    2dc8:	00004444 	.word	0x00004444
    2dcc:	f04f 0800 	mov.w	r8, #0
    2dd0:	f04f 0900 	mov.w	r9, #0
    2dd4:	f10b 33ff 	add.w	r3, fp, #4294967295
    2dd8:	ebc8 0203 	rsb	r2, r8, r3
    2ddc:	2a00      	cmp	r2, #0
    2dde:	db19      	blt.n	2e14 <__vfprintf+0x9b0>
    2de0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    2de4:	4590      	cmp	r8, r2
    2de6:	eb79 0303 	sbcs.w	r3, r9, r3
    2dea:	da0e      	bge.n	2e0a <__vfprintf+0x9a6>
    2dec:	68a3      	ldr	r3, [r4, #8]
    2dee:	3b01      	subs	r3, #1
    2df0:	2b00      	cmp	r3, #0
    2df2:	60a3      	str	r3, [r4, #8]
    2df4:	db05      	blt.n	2e02 <__vfprintf+0x99e>
    2df6:	6823      	ldr	r3, [r4, #0]
    2df8:	1c5a      	adds	r2, r3, #1
    2dfa:	6022      	str	r2, [r4, #0]
    2dfc:	2220      	movs	r2, #32
    2dfe:	701a      	strb	r2, [r3, #0]
    2e00:	e003      	b.n	2e0a <__vfprintf+0x9a6>
    2e02:	2020      	movs	r0, #32
    2e04:	4621      	mov	r1, r4
    2e06:	f000 f9e8 	bl	31da <__flsbuf>
    2e0a:	f118 0801 	adds.w	r8, r8, #1
    2e0e:	f149 0900 	adc.w	r9, r9, #0
    2e12:	e7df      	b.n	2dd4 <__vfprintf+0x970>
    2e14:	ea2b 7aeb 	bic.w	sl, fp, fp, asr #31
    2e18:	ebca 0b03 	rsb	fp, sl, r3
    2e1c:	e7c6      	b.n	2dac <__vfprintf+0x948>
    2e1e:	eb18 020a 	adds.w	r2, r8, sl
    2e22:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    2e26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    2e2a:	4282      	cmp	r2, r0
    2e2c:	418b      	sbcs	r3, r1
    2e2e:	db0e      	blt.n	2e4e <__vfprintf+0x9ea>
    2e30:	f118 0801 	adds.w	r8, r8, #1
    2e34:	f149 0900 	adc.w	r9, r9, #0
    2e38:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    2e3a:	eb0a 0308 	add.w	r3, sl, r8
    2e3e:	1c51      	adds	r1, r2, #1
    2e40:	911f      	str	r1, [sp, #124]	; 0x7c
    2e42:	f892 e000 	ldrb.w	lr, [r2]
    2e46:	f1be 0f00 	cmp.w	lr, #0
    2e4a:	d1e8      	bne.n	2e1e <__vfprintf+0x9ba>
    2e4c:	e00f      	b.n	2e6e <__vfprintf+0xa0a>
    2e4e:	68a3      	ldr	r3, [r4, #8]
    2e50:	3b01      	subs	r3, #1
    2e52:	2b00      	cmp	r3, #0
    2e54:	60a3      	str	r3, [r4, #8]
    2e56:	db05      	blt.n	2e64 <__vfprintf+0xa00>
    2e58:	6823      	ldr	r3, [r4, #0]
    2e5a:	1c5a      	adds	r2, r3, #1
    2e5c:	6022      	str	r2, [r4, #0]
    2e5e:	f883 e000 	strb.w	lr, [r3]
    2e62:	e7e5      	b.n	2e30 <__vfprintf+0x9cc>
    2e64:	4670      	mov	r0, lr
    2e66:	4621      	mov	r1, r4
    2e68:	f000 f9b7 	bl	31da <__flsbuf>
    2e6c:	e7e0      	b.n	2e30 <__vfprintf+0x9cc>
    2e6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2e70:	469a      	mov	sl, r3
    2e72:	2a00      	cmp	r2, #0
    2e74:	d135      	bne.n	2ee2 <__vfprintf+0xa7e>
    2e76:	f417 7f00 	tst.w	r7, #512	; 0x200
    2e7a:	bf14      	ite	ne
    2e7c:	2730      	movne	r7, #48	; 0x30
    2e7e:	2720      	moveq	r7, #32
    2e80:	2000      	movs	r0, #0
    2e82:	2100      	movs	r1, #0
    2e84:	e9cd 0106 	strd	r0, r1, [sp, #24]
    2e88:	9906      	ldr	r1, [sp, #24]
    2e8a:	f10b 32ff 	add.w	r2, fp, #4294967295
    2e8e:	1a51      	subs	r1, r2, r1
    2e90:	2900      	cmp	r1, #0
    2e92:	db20      	blt.n	2ed6 <__vfprintf+0xa72>
    2e94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    2e98:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    2e9c:	18c0      	adds	r0, r0, r3
    2e9e:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
    2ea2:	4540      	cmp	r0, r8
    2ea4:	eb71 0209 	sbcs.w	r2, r1, r9
    2ea8:	da0f      	bge.n	2eca <__vfprintf+0xa66>
    2eaa:	68a2      	ldr	r2, [r4, #8]
    2eac:	3a01      	subs	r2, #1
    2eae:	2a00      	cmp	r2, #0
    2eb0:	60a2      	str	r2, [r4, #8]
    2eb2:	db04      	blt.n	2ebe <__vfprintf+0xa5a>
    2eb4:	6822      	ldr	r2, [r4, #0]
    2eb6:	1c51      	adds	r1, r2, #1
    2eb8:	6021      	str	r1, [r4, #0]
    2eba:	7017      	strb	r7, [r2, #0]
    2ebc:	e005      	b.n	2eca <__vfprintf+0xa66>
    2ebe:	4638      	mov	r0, r7
    2ec0:	4621      	mov	r1, r4
    2ec2:	931d      	str	r3, [sp, #116]	; 0x74
    2ec4:	f000 f989 	bl	31da <__flsbuf>
    2ec8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2eca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    2ece:	3001      	adds	r0, #1
    2ed0:	f141 0100 	adc.w	r1, r1, #0
    2ed4:	e7d6      	b.n	2e84 <__vfprintf+0xa20>
    2ed6:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    2eda:	eb03 0a0b 	add.w	sl, r3, fp
    2ede:	ebcb 0b02 	rsb	fp, fp, r2
    2ee2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2ee4:	2b00      	cmp	r3, #0
    2ee6:	d07c      	beq.n	2fe2 <__vfprintf+0xb7e>
    2ee8:	2700      	movs	r7, #0
    2eea:	42b7      	cmp	r7, r6
    2eec:	f280 80d5 	bge.w	309a <__vfprintf+0xc36>
    2ef0:	ab24      	add	r3, sp, #144	; 0x90
    2ef2:	f817 e003 	ldrb.w	lr, [r7, r3]
    2ef6:	f1be 0f3c 	cmp.w	lr, #60	; 0x3c
    2efa:	d007      	beq.n	2f0c <__vfprintf+0xaa8>
    2efc:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
    2f00:	d151      	bne.n	2fa6 <__vfprintf+0xb42>
    2f02:	f04f 0800 	mov.w	r8, #0
    2f06:	f04f 0900 	mov.w	r9, #0
    2f0a:	e034      	b.n	2f76 <__vfprintf+0xb12>
    2f0c:	f04f 0800 	mov.w	r8, #0
    2f10:	f04f 0900 	mov.w	r9, #0
    2f14:	9a20      	ldr	r2, [sp, #128]	; 0x80
    2f16:	eb0a 0308 	add.w	r3, sl, r8
    2f1a:	3a01      	subs	r2, #1
    2f1c:	2a00      	cmp	r2, #0
    2f1e:	9220      	str	r2, [sp, #128]	; 0x80
    2f20:	db5c      	blt.n	2fdc <__vfprintf+0xb78>
    2f22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    2f26:	eb18 020a 	adds.w	r2, r8, sl
    2f2a:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    2f2e:	4282      	cmp	r2, r0
    2f30:	418b      	sbcs	r3, r1
    2f32:	da0e      	bge.n	2f52 <__vfprintf+0xaee>
    2f34:	68a3      	ldr	r3, [r4, #8]
    2f36:	3b01      	subs	r3, #1
    2f38:	2b00      	cmp	r3, #0
    2f3a:	60a3      	str	r3, [r4, #8]
    2f3c:	db05      	blt.n	2f4a <__vfprintf+0xae6>
    2f3e:	6823      	ldr	r3, [r4, #0]
    2f40:	1c5a      	adds	r2, r3, #1
    2f42:	6022      	str	r2, [r4, #0]
    2f44:	2230      	movs	r2, #48	; 0x30
    2f46:	701a      	strb	r2, [r3, #0]
    2f48:	e003      	b.n	2f52 <__vfprintf+0xaee>
    2f4a:	2030      	movs	r0, #48	; 0x30
    2f4c:	4621      	mov	r1, r4
    2f4e:	f000 f944 	bl	31da <__flsbuf>
    2f52:	f118 0801 	adds.w	r8, r8, #1
    2f56:	f149 0900 	adc.w	r9, r9, #0
    2f5a:	e7db      	b.n	2f14 <__vfprintf+0xab0>
    2f5c:	eb18 020a 	adds.w	r2, r8, sl
    2f60:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    2f64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    2f68:	4282      	cmp	r2, r0
    2f6a:	418b      	sbcs	r3, r1
    2f6c:	db0b      	blt.n	2f86 <__vfprintf+0xb22>
    2f6e:	f118 0801 	adds.w	r8, r8, #1
    2f72:	f149 0900 	adc.w	r9, r9, #0
    2f76:	9a21      	ldr	r2, [sp, #132]	; 0x84
    2f78:	eb0a 0308 	add.w	r3, sl, r8
    2f7c:	3a01      	subs	r2, #1
    2f7e:	2a00      	cmp	r2, #0
    2f80:	9221      	str	r2, [sp, #132]	; 0x84
    2f82:	daeb      	bge.n	2f5c <__vfprintf+0xaf8>
    2f84:	e02a      	b.n	2fdc <__vfprintf+0xb78>
    2f86:	68a3      	ldr	r3, [r4, #8]
    2f88:	3b01      	subs	r3, #1
    2f8a:	2b00      	cmp	r3, #0
    2f8c:	60a3      	str	r3, [r4, #8]
    2f8e:	db05      	blt.n	2f9c <__vfprintf+0xb38>
    2f90:	6823      	ldr	r3, [r4, #0]
    2f92:	1c5a      	adds	r2, r3, #1
    2f94:	6022      	str	r2, [r4, #0]
    2f96:	2230      	movs	r2, #48	; 0x30
    2f98:	701a      	strb	r2, [r3, #0]
    2f9a:	e7e8      	b.n	2f6e <__vfprintf+0xb0a>
    2f9c:	4621      	mov	r1, r4
    2f9e:	2030      	movs	r0, #48	; 0x30
    2fa0:	f000 f91b 	bl	31da <__flsbuf>
    2fa4:	e7e3      	b.n	2f6e <__vfprintf+0xb0a>
    2fa6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    2faa:	ea4f 79ea 	mov.w	r9, sl, asr #31
    2fae:	4582      	cmp	sl, r0
    2fb0:	eb79 0201 	sbcs.w	r2, r9, r1
    2fb4:	f10a 0301 	add.w	r3, sl, #1
    2fb8:	da10      	bge.n	2fdc <__vfprintf+0xb78>
    2fba:	68a2      	ldr	r2, [r4, #8]
    2fbc:	3a01      	subs	r2, #1
    2fbe:	2a00      	cmp	r2, #0
    2fc0:	60a2      	str	r2, [r4, #8]
    2fc2:	db05      	blt.n	2fd0 <__vfprintf+0xb6c>
    2fc4:	6822      	ldr	r2, [r4, #0]
    2fc6:	1c51      	adds	r1, r2, #1
    2fc8:	6021      	str	r1, [r4, #0]
    2fca:	f882 e000 	strb.w	lr, [r2]
    2fce:	e005      	b.n	2fdc <__vfprintf+0xb78>
    2fd0:	4670      	mov	r0, lr
    2fd2:	4621      	mov	r1, r4
    2fd4:	9306      	str	r3, [sp, #24]
    2fd6:	f000 f900 	bl	31da <__flsbuf>
    2fda:	9b06      	ldr	r3, [sp, #24]
    2fdc:	3701      	adds	r7, #1
    2fde:	469a      	mov	sl, r3
    2fe0:	e783      	b.n	2eea <__vfprintf+0xa86>
    2fe2:	f04f 0800 	mov.w	r8, #0
    2fe6:	f04f 0900 	mov.w	r9, #0
    2fea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2fec:	eb0a 0708 	add.w	r7, sl, r8
    2ff0:	3b01      	subs	r3, #1
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	931e      	str	r3, [sp, #120]	; 0x78
    2ff6:	db1c      	blt.n	3032 <__vfprintf+0xbce>
    2ff8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    2ffc:	eb18 020a 	adds.w	r2, r8, sl
    3000:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    3004:	4282      	cmp	r2, r0
    3006:	418b      	sbcs	r3, r1
    3008:	da0e      	bge.n	3028 <__vfprintf+0xbc4>
    300a:	68a3      	ldr	r3, [r4, #8]
    300c:	3b01      	subs	r3, #1
    300e:	2b00      	cmp	r3, #0
    3010:	60a3      	str	r3, [r4, #8]
    3012:	db05      	blt.n	3020 <__vfprintf+0xbbc>
    3014:	6823      	ldr	r3, [r4, #0]
    3016:	1c5a      	adds	r2, r3, #1
    3018:	6022      	str	r2, [r4, #0]
    301a:	2230      	movs	r2, #48	; 0x30
    301c:	701a      	strb	r2, [r3, #0]
    301e:	e003      	b.n	3028 <__vfprintf+0xbc4>
    3020:	2030      	movs	r0, #48	; 0x30
    3022:	4621      	mov	r1, r4
    3024:	f000 f8d9 	bl	31da <__flsbuf>
    3028:	f118 0801 	adds.w	r8, r8, #1
    302c:	f149 0900 	adc.w	r9, r9, #0
    3030:	e7db      	b.n	2fea <__vfprintf+0xb86>
    3032:	ab2c      	add	r3, sp, #176	; 0xb0
    3034:	eb03 0a06 	add.w	sl, r3, r6
    3038:	f1aa 0a21 	sub.w	sl, sl, #33	; 0x21
    303c:	f04f 0800 	mov.w	r8, #0
    3040:	f04f 0900 	mov.w	r9, #0
    3044:	ebc8 0306 	rsb	r3, r8, r6
    3048:	2b00      	cmp	r3, #0
    304a:	dd20      	ble.n	308e <__vfprintf+0xc2a>
    304c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    3050:	eb18 0207 	adds.w	r2, r8, r7
    3054:	eb49 73e7 	adc.w	r3, r9, r7, asr #31
    3058:	4282      	cmp	r2, r0
    305a:	418b      	sbcs	r3, r1
    305c:	da10      	bge.n	3080 <__vfprintf+0xc1c>
    305e:	68a3      	ldr	r3, [r4, #8]
    3060:	3b01      	subs	r3, #1
    3062:	2b00      	cmp	r3, #0
    3064:	60a3      	str	r3, [r4, #8]
    3066:	db06      	blt.n	3076 <__vfprintf+0xc12>
    3068:	6823      	ldr	r3, [r4, #0]
    306a:	1c5a      	adds	r2, r3, #1
    306c:	6022      	str	r2, [r4, #0]
    306e:	f89a 2000 	ldrb.w	r2, [sl]
    3072:	701a      	strb	r2, [r3, #0]
    3074:	e004      	b.n	3080 <__vfprintf+0xc1c>
    3076:	f89a 0000 	ldrb.w	r0, [sl]
    307a:	4621      	mov	r1, r4
    307c:	f000 f8ad 	bl	31da <__flsbuf>
    3080:	f118 0801 	adds.w	r8, r8, #1
    3084:	f10a 3aff 	add.w	sl, sl, #4294967295
    3088:	f149 0900 	adc.w	r9, r9, #0
    308c:	e7da      	b.n	3044 <__vfprintf+0xbe0>
    308e:	2e00      	cmp	r6, #0
    3090:	bfac      	ite	ge
    3092:	eb07 0a06 	addge.w	sl, r7, r6
    3096:	f107 0a00 	addlt.w	sl, r7, #0
    309a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    309c:	b32b      	cbz	r3, 30ea <__vfprintf+0xc86>
    309e:	2600      	movs	r6, #0
    30a0:	2700      	movs	r7, #0
    30a2:	43f3      	mvns	r3, r6
    30a4:	eb13 0f0b 	cmn.w	r3, fp
    30a8:	d41b      	bmi.n	30e2 <__vfprintf+0xc7e>
    30aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    30ae:	eb16 020a 	adds.w	r2, r6, sl
    30b2:	eb47 73ea 	adc.w	r3, r7, sl, asr #31
    30b6:	4282      	cmp	r2, r0
    30b8:	418b      	sbcs	r3, r1
    30ba:	da0e      	bge.n	30da <__vfprintf+0xc76>
    30bc:	68a3      	ldr	r3, [r4, #8]
    30be:	3b01      	subs	r3, #1
    30c0:	2b00      	cmp	r3, #0
    30c2:	60a3      	str	r3, [r4, #8]
    30c4:	db05      	blt.n	30d2 <__vfprintf+0xc6e>
    30c6:	6823      	ldr	r3, [r4, #0]
    30c8:	1c5a      	adds	r2, r3, #1
    30ca:	6022      	str	r2, [r4, #0]
    30cc:	2220      	movs	r2, #32
    30ce:	701a      	strb	r2, [r3, #0]
    30d0:	e003      	b.n	30da <__vfprintf+0xc76>
    30d2:	2020      	movs	r0, #32
    30d4:	4621      	mov	r1, r4
    30d6:	f000 f880 	bl	31da <__flsbuf>
    30da:	3601      	adds	r6, #1
    30dc:	f147 0700 	adc.w	r7, r7, #0
    30e0:	e7df      	b.n	30a2 <__vfprintf+0xc3e>
    30e2:	f1bb 0f00 	cmp.w	fp, #0
    30e6:	bfa8      	it	ge
    30e8:	44da      	addge	sl, fp
    30ea:	9b05      	ldr	r3, [sp, #20]
    30ec:	4453      	add	r3, sl
    30ee:	9305      	str	r3, [sp, #20]
    30f0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    30f4:	9e05      	ldr	r6, [sp, #20]
    30f6:	9605      	str	r6, [sp, #20]
    30f8:	462b      	mov	r3, r5
    30fa:	f7ff b9be 	b.w	247a <__vfprintf+0x16>
    30fe:	9805      	ldr	r0, [sp, #20]
    3100:	b02d      	add	sp, #180	; 0xb4
    3102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3106:	bf00      	nop

00003108 <setvbuf>:
    3108:	b570      	push	{r4, r5, r6, lr}
    310a:	68c4      	ldr	r4, [r0, #12]
    310c:	07a5      	lsls	r5, r4, #30
    310e:	d017      	beq.n	3140 <setvbuf+0x38>
    3110:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    3114:	d009      	beq.n	312a <setvbuf+0x22>
    3116:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    311a:	d003      	beq.n	3124 <setvbuf+0x1c>
    311c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    3120:	d10e      	bne.n	3140 <setvbuf+0x38>
    3122:	e002      	b.n	312a <setvbuf+0x22>
    3124:	6a41      	ldr	r1, [r0, #36]	; 0x24
    3126:	2301      	movs	r3, #1
    3128:	e003      	b.n	3132 <setvbuf+0x2a>
    312a:	4d06      	ldr	r5, [pc, #24]	; (3144 <setvbuf+0x3c>)
    312c:	1e5e      	subs	r6, r3, #1
    312e:	42ae      	cmp	r6, r5
    3130:	d806      	bhi.n	3140 <setvbuf+0x38>
    3132:	4314      	orrs	r4, r2
    3134:	6101      	str	r1, [r0, #16]
    3136:	6001      	str	r1, [r0, #0]
    3138:	61c3      	str	r3, [r0, #28]
    313a:	60c4      	str	r4, [r0, #12]
    313c:	2000      	movs	r0, #0
    313e:	bd70      	pop	{r4, r5, r6, pc}
    3140:	2001      	movs	r0, #1
    3142:	bd70      	pop	{r4, r5, r6, pc}
    3144:	00fffffe 	.word	0x00fffffe

00003148 <strlen>:
    3148:	b510      	push	{r4, lr}
    314a:	1c42      	adds	r2, r0, #1
    314c:	0783      	lsls	r3, r0, #30
    314e:	d005      	beq.n	315c <strlen+0x14>
    3150:	f810 3b01 	ldrb.w	r3, [r0], #1
    3154:	2b00      	cmp	r3, #0
    3156:	d1f9      	bne.n	314c <strlen+0x4>
    3158:	1a80      	subs	r0, r0, r2
    315a:	bd10      	pop	{r4, pc}
    315c:	4603      	mov	r3, r0
    315e:	f850 1b04 	ldr.w	r1, [r0], #4
    3162:	f1a1 3401 	sub.w	r4, r1, #16843009	; 0x1010101
    3166:	ea24 0401 	bic.w	r4, r4, r1
    316a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    316e:	d0f5      	beq.n	315c <strlen+0x14>
    3170:	f011 0fff 	tst.w	r1, #255	; 0xff
    3174:	d00a      	beq.n	318c <strlen+0x44>
    3176:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
    317a:	d005      	beq.n	3188 <strlen+0x40>
    317c:	f411 0f7f 	tst.w	r1, #16711680	; 0xff0000
    3180:	bf14      	ite	ne
    3182:	4603      	movne	r3, r0
    3184:	3303      	addeq	r3, #3
    3186:	e002      	b.n	318e <strlen+0x46>
    3188:	3302      	adds	r3, #2
    318a:	e000      	b.n	318e <strlen+0x46>
    318c:	3301      	adds	r3, #1
    318e:	1a98      	subs	r0, r3, r2
    3190:	bd10      	pop	{r4, pc}

00003192 <memset>:
    3192:	f000 bff9 	b.w	4188 <__aeabi_lowlevel_memset>

00003196 <_deferredlazyseek>:
    3196:	68c3      	ldr	r3, [r0, #12]
    3198:	b510      	push	{r4, lr}
    319a:	f023 0320 	bic.w	r3, r3, #32
    319e:	60c3      	str	r3, [r0, #12]
    31a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    31a2:	6982      	ldr	r2, [r0, #24]
    31a4:	685b      	ldr	r3, [r3, #4]
    31a6:	4604      	mov	r4, r0
    31a8:	429a      	cmp	r2, r3
    31aa:	d00f      	beq.n	31cc <_deferredlazyseek+0x36>
    31ac:	f000 f8eb 	bl	3386 <_fflush>
    31b0:	68e3      	ldr	r3, [r4, #12]
    31b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    31b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    31b8:	f023 0310 	bic.w	r3, r3, #16
    31bc:	f043 0310 	orr.w	r3, r3, #16
    31c0:	60e3      	str	r3, [r4, #12]
    31c2:	6853      	ldr	r3, [r2, #4]
    31c4:	61a3      	str	r3, [r4, #24]
    31c6:	6923      	ldr	r3, [r4, #16]
    31c8:	6093      	str	r3, [r2, #8]
    31ca:	6023      	str	r3, [r4, #0]
    31cc:	68e3      	ldr	r3, [r4, #12]
    31ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    31d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    31d6:	60e3      	str	r3, [r4, #12]
    31d8:	bd10      	pop	{r4, pc}

000031da <__flsbuf>:
    31da:	68cb      	ldr	r3, [r1, #12]
    31dc:	b570      	push	{r4, r5, r6, lr}
    31de:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
    31e2:	069b      	lsls	r3, r3, #26
    31e4:	4605      	mov	r5, r0
    31e6:	460c      	mov	r4, r1
    31e8:	60ca      	str	r2, [r1, #12]
    31ea:	d502      	bpl.n	31f2 <__flsbuf+0x18>
    31ec:	4608      	mov	r0, r1
    31ee:	f7ff ffd2 	bl	3196 <_deferredlazyseek>
    31f2:	68a1      	ldr	r1, [r4, #8]
    31f4:	68e3      	ldr	r3, [r4, #12]
    31f6:	1c4e      	adds	r6, r1, #1
    31f8:	da0d      	bge.n	3216 <__flsbuf+0x3c>
    31fa:	0598      	lsls	r0, r3, #22
    31fc:	d40b      	bmi.n	3216 <__flsbuf+0x3c>
    31fe:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
    3202:	60e3      	str	r3, [r4, #12]
    3204:	f06f 0201 	mvn.w	r2, #1
    3208:	6823      	ldr	r3, [r4, #0]
    320a:	1a52      	subs	r2, r2, r1
    320c:	60a2      	str	r2, [r4, #8]
    320e:	1c5a      	adds	r2, r3, #1
    3210:	6022      	str	r2, [r4, #0]
    3212:	701d      	strb	r5, [r3, #0]
    3214:	e056      	b.n	32c4 <__flsbuf+0xea>
    3216:	f241 028a 	movw	r2, #4234	; 0x108a
    321a:	401a      	ands	r2, r3
    321c:	2a02      	cmp	r2, #2
    321e:	461e      	mov	r6, r3
    3220:	d005      	beq.n	322e <__flsbuf+0x54>
    3222:	2200      	movs	r2, #0
    3224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3228:	60a2      	str	r2, [r4, #8]
    322a:	60e3      	str	r3, [r4, #12]
    322c:	e052      	b.n	32d4 <__flsbuf+0xfa>
    322e:	f24a 0110 	movw	r1, #40976	; 0xa010
    3232:	4019      	ands	r1, r3
    3234:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    3238:	d10a      	bne.n	3250 <__flsbuf+0x76>
    323a:	2100      	movs	r1, #0
    323c:	4620      	mov	r0, r4
    323e:	f000 fa35 	bl	36ac <fseek>
    3242:	68e3      	ldr	r3, [r4, #12]
    3244:	0699      	lsls	r1, r3, #26
    3246:	d502      	bpl.n	324e <__flsbuf+0x74>
    3248:	4620      	mov	r0, r4
    324a:	f7ff ffa4 	bl	3196 <_deferredlazyseek>
    324e:	68e6      	ldr	r6, [r4, #12]
    3250:	f446 3390 	orr.w	r3, r6, #73728	; 0x12000
    3254:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    3258:	60e3      	str	r3, [r4, #12]
    325a:	d11c      	bne.n	3296 <__flsbuf+0xbc>
    325c:	6960      	ldr	r0, [r4, #20]
    325e:	f000 ffb3 	bl	41c8 <__sys_istty>
    3262:	b150      	cbz	r0, 327a <__flsbuf+0xa0>
    3264:	0572      	lsls	r2, r6, #21
    3266:	d508      	bpl.n	327a <__flsbuf+0xa0>
    3268:	6a63      	ldr	r3, [r4, #36]	; 0x24
    326a:	6123      	str	r3, [r4, #16]
    326c:	6023      	str	r3, [r4, #0]
    326e:	2301      	movs	r3, #1
    3270:	61e3      	str	r3, [r4, #28]
    3272:	f446 3392 	orr.w	r3, r6, #74752	; 0x12400
    3276:	60e3      	str	r3, [r4, #12]
    3278:	e00d      	b.n	3296 <__flsbuf+0xbc>
    327a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    327e:	f000 f9b7 	bl	35f0 <_Csys_alloc>
    3282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3286:	68e2      	ldr	r2, [r4, #12]
    3288:	61e3      	str	r3, [r4, #28]
    328a:	f446 3394 	orr.w	r3, r6, #75776	; 0x12800
    328e:	431a      	orrs	r2, r3
    3290:	6120      	str	r0, [r4, #16]
    3292:	6020      	str	r0, [r4, #0]
    3294:	60e2      	str	r2, [r4, #12]
    3296:	f413 6f10 	tst.w	r3, #2304	; 0x900
    329a:	6821      	ldr	r1, [r4, #0]
    329c:	6926      	ldr	r6, [r4, #16]
    329e:	d01c      	beq.n	32da <__flsbuf+0x100>
    32a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    32a2:	689b      	ldr	r3, [r3, #8]
    32a4:	428b      	cmp	r3, r1
    32a6:	bf2c      	ite	cs
    32a8:	ebc6 0103 	rsbcs	r1, r6, r3
    32ac:	ebc6 0101 	rsbcc	r1, r6, r1
    32b0:	b951      	cbnz	r1, 32c8 <__flsbuf+0xee>
    32b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    32b4:	1c72      	adds	r2, r6, #1
    32b6:	609a      	str	r2, [r3, #8]
    32b8:	6022      	str	r2, [r4, #0]
    32ba:	69e2      	ldr	r2, [r4, #28]
    32bc:	1e51      	subs	r1, r2, #1
    32be:	60a1      	str	r1, [r4, #8]
    32c0:	60da      	str	r2, [r3, #12]
    32c2:	7035      	strb	r5, [r6, #0]
    32c4:	b2e8      	uxtb	r0, r5
    32c6:	bd70      	pop	{r4, r5, r6, pc}
    32c8:	4630      	mov	r0, r6
    32ca:	4622      	mov	r2, r4
    32cc:	f000 f8da 	bl	3484 <_Cwritebuf>
    32d0:	2800      	cmp	r0, #0
    32d2:	d0ee      	beq.n	32b2 <__flsbuf+0xd8>
    32d4:	f04f 30ff 	mov.w	r0, #4294967295
    32d8:	bd70      	pop	{r4, r5, r6, pc}
    32da:	1c4a      	adds	r2, r1, #1
    32dc:	b2ed      	uxtb	r5, r5
    32de:	6022      	str	r2, [r4, #0]
    32e0:	700d      	strb	r5, [r1, #0]
    32e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    32e4:	6821      	ldr	r1, [r4, #0]
    32e6:	6882      	ldr	r2, [r0, #8]
    32e8:	428a      	cmp	r2, r1
    32ea:	bf2c      	ite	cs
    32ec:	ebc6 0102 	rsbcs	r1, r6, r2
    32f0:	ebc6 0101 	rsbcc	r1, r6, r1
    32f4:	69e2      	ldr	r2, [r4, #28]
    32f6:	055b      	lsls	r3, r3, #21
    32f8:	60c2      	str	r2, [r0, #12]
    32fa:	d403      	bmi.n	3304 <__flsbuf+0x12a>
    32fc:	2d0a      	cmp	r5, #10
    32fe:	d001      	beq.n	3304 <__flsbuf+0x12a>
    3300:	4291      	cmp	r1, r2
    3302:	db09      	blt.n	3318 <__flsbuf+0x13e>
    3304:	2300      	movs	r3, #0
    3306:	6086      	str	r6, [r0, #8]
    3308:	4622      	mov	r2, r4
    330a:	6026      	str	r6, [r4, #0]
    330c:	60a3      	str	r3, [r4, #8]
    330e:	4630      	mov	r0, r6
    3310:	f000 f8b8 	bl	3484 <_Cwritebuf>
    3314:	2800      	cmp	r0, #0
    3316:	d1dd      	bne.n	32d4 <__flsbuf+0xfa>
    3318:	4628      	mov	r0, r5
    331a:	bd70      	pop	{r4, r5, r6, pc}

0000331c <_fdopen>:
    331c:	b570      	push	{r4, r5, r6, lr}
    331e:	460d      	mov	r5, r1
    3320:	4606      	mov	r6, r0
    3322:	4610      	mov	r0, r2
    3324:	4614      	mov	r4, r2
    3326:	f000 f973 	bl	3610 <fclose>
    332a:	782b      	ldrb	r3, [r5, #0]
    332c:	2b72      	cmp	r3, #114	; 0x72
    332e:	d00a      	beq.n	3346 <_fdopen+0x2a>
    3330:	2b77      	cmp	r3, #119	; 0x77
    3332:	d005      	beq.n	3340 <_fdopen+0x24>
    3334:	2b61      	cmp	r3, #97	; 0x61
    3336:	d123      	bne.n	3380 <_fdopen+0x64>
    3338:	2308      	movs	r3, #8
    333a:	f248 0202 	movw	r2, #32770	; 0x8002
    333e:	e004      	b.n	334a <_fdopen+0x2e>
    3340:	2304      	movs	r3, #4
    3342:	2202      	movs	r2, #2
    3344:	e001      	b.n	334a <_fdopen+0x2e>
    3346:	2300      	movs	r3, #0
    3348:	2201      	movs	r2, #1
    334a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    334e:	292b      	cmp	r1, #43	; 0x2b
    3350:	d006      	beq.n	3360 <_fdopen+0x44>
    3352:	2962      	cmp	r1, #98	; 0x62
    3354:	d109      	bne.n	336a <_fdopen+0x4e>
    3356:	f042 0204 	orr.w	r2, r2, #4
    335a:	f043 0301 	orr.w	r3, r3, #1
    335e:	e7f4      	b.n	334a <_fdopen+0x2e>
    3360:	f042 0203 	orr.w	r2, r2, #3
    3364:	f043 0302 	orr.w	r3, r3, #2
    3368:	e7ef      	b.n	334a <_fdopen+0x2e>
    336a:	071b      	lsls	r3, r3, #28
    336c:	60e2      	str	r2, [r4, #12]
    336e:	6166      	str	r6, [r4, #20]
    3370:	4620      	mov	r0, r4
    3372:	d507      	bpl.n	3384 <_fdopen+0x68>
    3374:	2100      	movs	r1, #0
    3376:	2202      	movs	r2, #2
    3378:	f000 f998 	bl	36ac <fseek>
    337c:	4620      	mov	r0, r4
    337e:	bd70      	pop	{r4, r5, r6, pc}
    3380:	2000      	movs	r0, #0
    3382:	bd70      	pop	{r4, r5, r6, pc}
    3384:	bd70      	pop	{r4, r5, r6, pc}

00003386 <_fflush>:
    3386:	b538      	push	{r3, r4, r5, lr}
    3388:	4604      	mov	r4, r0
    338a:	6a42      	ldr	r2, [r0, #36]	; 0x24
    338c:	6905      	ldr	r5, [r0, #16]
    338e:	6803      	ldr	r3, [r0, #0]
    3390:	68c0      	ldr	r0, [r0, #12]
    3392:	6891      	ldr	r1, [r2, #8]
    3394:	f420 2200 	bic.w	r2, r0, #524288	; 0x80000
    3398:	60e2      	str	r2, [r4, #12]
    339a:	f000 0282 	and.w	r2, r0, #130	; 0x82
    339e:	2a02      	cmp	r2, #2
    33a0:	d002      	beq.n	33a8 <_fflush+0x22>
    33a2:	f04f 30ff 	mov.w	r0, #4294967295
    33a6:	bd38      	pop	{r3, r4, r5, pc}
    33a8:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
    33ac:	d016      	beq.n	33dc <_fflush+0x56>
    33ae:	4299      	cmp	r1, r3
    33b0:	bf38      	it	cc
    33b2:	4619      	movcc	r1, r3
    33b4:	42a9      	cmp	r1, r5
    33b6:	d109      	bne.n	33cc <_fflush+0x46>
    33b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    33ba:	2000      	movs	r0, #0
    33bc:	609d      	str	r5, [r3, #8]
    33be:	68e3      	ldr	r3, [r4, #12]
    33c0:	6025      	str	r5, [r4, #0]
    33c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    33c6:	60a0      	str	r0, [r4, #8]
    33c8:	60e3      	str	r3, [r4, #12]
    33ca:	bd38      	pop	{r3, r4, r5, pc}
    33cc:	4628      	mov	r0, r5
    33ce:	1b49      	subs	r1, r1, r5
    33d0:	4622      	mov	r2, r4
    33d2:	f000 f857 	bl	3484 <_Cwritebuf>
    33d6:	2800      	cmp	r0, #0
    33d8:	d0ee      	beq.n	33b8 <_fflush+0x32>
    33da:	e7e2      	b.n	33a2 <_fflush+0x1c>
    33dc:	bd38      	pop	{r3, r4, r5, pc}

000033de <_frexpl>:
    33de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33e0:	4615      	mov	r5, r2
    33e2:	2300      	movs	r3, #0
    33e4:	2200      	movs	r2, #0
    33e6:	4606      	mov	r6, r0
    33e8:	460f      	mov	r7, r1
    33ea:	f000 fe2d 	bl	4048 <__aeabi_dcmpeq>
    33ee:	b120      	cbz	r0, 33fa <_frexpl+0x1c>
    33f0:	2300      	movs	r3, #0
    33f2:	602b      	str	r3, [r5, #0]
    33f4:	2000      	movs	r0, #0
    33f6:	2100      	movs	r1, #0
    33f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33fa:	f3c7 530a 	ubfx	r3, r7, #20, #11
    33fe:	4630      	mov	r0, r6
    3400:	4639      	mov	r1, r7
    3402:	f2a3 34fe 	subw	r4, r3, #1022	; 0x3fe
    3406:	b98b      	cbnz	r3, 342c <_frexpl+0x4e>
    3408:	4632      	mov	r2, r6
    340a:	f3c7 0313 	ubfx	r3, r7, #0, #20
    340e:	0fd7      	lsrs	r7, r2, #31
    3410:	f403 2600 	and.w	r6, r3, #524288	; 0x80000
    3414:	ea47 0343 	orr.w	r3, r7, r3, lsl #1
    3418:	f3c3 0313 	ubfx	r3, r3, #0, #20
    341c:	0052      	lsls	r2, r2, #1
    341e:	b11e      	cbz	r6, 3428 <_frexpl+0x4a>
    3420:	f363 0113 	bfi	r1, r3, #0, #20
    3424:	4610      	mov	r0, r2
    3426:	e001      	b.n	342c <_frexpl+0x4e>
    3428:	3c01      	subs	r4, #1
    342a:	e7f0      	b.n	340e <_frexpl+0x30>
    342c:	f240 33fe 	movw	r3, #1022	; 0x3fe
    3430:	602c      	str	r4, [r5, #0]
    3432:	f363 511e 	bfi	r1, r3, #20, #11
    3436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003438 <_ldexpl>:
    3438:	b570      	push	{r4, r5, r6, lr}
    343a:	2300      	movs	r3, #0
    343c:	4616      	mov	r6, r2
    343e:	2200      	movs	r2, #0
    3440:	4604      	mov	r4, r0
    3442:	460d      	mov	r5, r1
    3444:	f000 fe00 	bl	4048 <__aeabi_dcmpeq>
    3448:	b110      	cbz	r0, 3450 <_ldexpl+0x18>
    344a:	2000      	movs	r0, #0
    344c:	2100      	movs	r1, #0
    344e:	bd70      	pop	{r4, r5, r6, pc}
    3450:	f240 73fe 	movw	r3, #2046	; 0x7fe
    3454:	f3c5 520a 	ubfx	r2, r5, #20, #11
    3458:	4432      	add	r2, r6
    345a:	429a      	cmp	r2, r3
    345c:	4620      	mov	r0, r4
    345e:	4629      	mov	r1, r5
    3460:	dd06      	ble.n	3470 <_ldexpl+0x38>
    3462:	4b06      	ldr	r3, [pc, #24]	; (347c <_ldexpl+0x44>)
    3464:	2222      	movs	r2, #34	; 0x22
    3466:	601a      	str	r2, [r3, #0]
    3468:	4b05      	ldr	r3, [pc, #20]	; (3480 <_ldexpl+0x48>)
    346a:	e9d3 0100 	ldrd	r0, r1, [r3]
    346e:	bd70      	pop	{r4, r5, r6, pc}
    3470:	2a00      	cmp	r2, #0
    3472:	ddea      	ble.n	344a <_ldexpl+0x12>
    3474:	f362 511e 	bfi	r1, r2, #20, #11
    3478:	bd70      	pop	{r4, r5, r6, pc}
    347a:	bf00      	nop
    347c:	10000448 	.word	0x10000448
    3480:	00004470 	.word	0x00004470

00003484 <_Cwritebuf>:
    3484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3488:	68d5      	ldr	r5, [r2, #12]
    348a:	4680      	mov	r8, r0
    348c:	02eb      	lsls	r3, r5, #11
    348e:	460e      	mov	r6, r1
    3490:	4614      	mov	r4, r2
    3492:	6957      	ldr	r7, [r2, #20]
    3494:	d505      	bpl.n	34a2 <_Cwritebuf+0x1e>
    3496:	4638      	mov	r0, r7
    3498:	f000 fe93 	bl	41c2 <__sys_flen>
    349c:	f045 0510 	orr.w	r5, r5, #16
    34a0:	61a0      	str	r0, [r4, #24]
    34a2:	4b13      	ldr	r3, [pc, #76]	; (34f0 <_Cwritebuf+0x6c>)
    34a4:	402b      	ands	r3, r5
    34a6:	b153      	cbz	r3, 34be <_Cwritebuf+0x3a>
    34a8:	4638      	mov	r0, r7
    34aa:	69a1      	ldr	r1, [r4, #24]
    34ac:	f000 fe92 	bl	41d4 <__sys_seek>
    34b0:	2800      	cmp	r0, #0
    34b2:	db14      	blt.n	34de <_Cwritebuf+0x5a>
    34b4:	f425 3500 	bic.w	r5, r5, #131072	; 0x20000
    34b8:	f025 0510 	bic.w	r5, r5, #16
    34bc:	60e5      	str	r5, [r4, #12]
    34be:	4632      	mov	r2, r6
    34c0:	4638      	mov	r0, r7
    34c2:	4641      	mov	r1, r8
    34c4:	f000 fe8c 	bl	41e0 <__sys_write>
    34c8:	1b80      	subs	r0, r0, r6
    34ca:	bf18      	it	ne
    34cc:	f04f 30ff 	movne.w	r0, #4294967295
    34d0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
    34d4:	1af6      	subs	r6, r6, r3
    34d6:	69a3      	ldr	r3, [r4, #24]
    34d8:	441e      	add	r6, r3
    34da:	61a6      	str	r6, [r4, #24]
    34dc:	b128      	cbz	r0, 34ea <_Cwritebuf+0x66>
    34de:	68e3      	ldr	r3, [r4, #12]
    34e0:	f04f 30ff 	mov.w	r0, #4294967295
    34e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    34e8:	60e3      	str	r3, [r4, #12]
    34ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34ee:	bf00      	nop
    34f0:	00020010 	.word	0x00020010

000034f4 <malloc>:
    34f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34f6:	4b31      	ldr	r3, [pc, #196]	; (35bc <malloc+0xc8>)
    34f8:	1cc5      	adds	r5, r0, #3
    34fa:	681c      	ldr	r4, [r3, #0]
    34fc:	08ad      	lsrs	r5, r5, #2
    34fe:	b198      	cbz	r0, 3528 <malloc+0x34>
    3500:	461f      	mov	r7, r3
    3502:	2600      	movs	r6, #0
    3504:	f105 0e0a 	add.w	lr, r5, #10
    3508:	f105 0c03 	add.w	ip, r5, #3
    350c:	e005      	b.n	351a <malloc+0x26>
    350e:	6823      	ldr	r3, [r4, #0]
    3510:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    3514:	d014      	beq.n	3540 <malloc+0x4c>
    3516:	4626      	mov	r6, r4
    3518:	68a4      	ldr	r4, [r4, #8]
    351a:	2c00      	cmp	r4, #0
    351c:	d1f7      	bne.n	350e <malloc+0x1a>
    351e:	300c      	adds	r0, #12
    3520:	f000 f97c 	bl	381c <_sbrk>
    3524:	1c43      	adds	r3, r0, #1
    3526:	d110      	bne.n	354a <malloc+0x56>
    3528:	2000      	movs	r0, #0
    352a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    352c:	6811      	ldr	r1, [r2, #0]
    352e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    3532:	d115      	bne.n	3560 <malloc+0x6c>
    3534:	6851      	ldr	r1, [r2, #4]
    3536:	440b      	add	r3, r1
    3538:	3303      	adds	r3, #3
    353a:	6063      	str	r3, [r4, #4]
    353c:	6893      	ldr	r3, [r2, #8]
    353e:	60a3      	str	r3, [r4, #8]
    3540:	68a2      	ldr	r2, [r4, #8]
    3542:	6863      	ldr	r3, [r4, #4]
    3544:	2a00      	cmp	r2, #0
    3546:	d1f1      	bne.n	352c <malloc+0x38>
    3548:	e00a      	b.n	3560 <malloc+0x6c>
    354a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    354e:	e880 0028 	stmia.w	r0, {r3, r5}
    3552:	6084      	str	r4, [r0, #8]
    3554:	b90e      	cbnz	r6, 355a <malloc+0x66>
    3556:	6038      	str	r0, [r7, #0]
    3558:	e000      	b.n	355c <malloc+0x68>
    355a:	60b0      	str	r0, [r6, #8]
    355c:	300c      	adds	r0, #12
    355e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3560:	42ab      	cmp	r3, r5
    3562:	db07      	blt.n	3574 <malloc+0x80>
    3564:	459c      	cmp	ip, r3
    3566:	db05      	blt.n	3574 <malloc+0x80>
    3568:	4620      	mov	r0, r4
    356a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    356e:	f840 3b0c 	str.w	r3, [r0], #12
    3572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3574:	4573      	cmp	r3, lr
    3576:	d911      	bls.n	359c <malloc+0xa8>
    3578:	4620      	mov	r0, r4
    357a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    357e:	6065      	str	r5, [r4, #4]
    3580:	f840 1b0c 	str.w	r1, [r0], #12
    3584:	eb00 0185 	add.w	r1, r0, r5, lsl #2
    3588:	60a1      	str	r1, [r4, #8]
    358a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    358e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    3592:	1b5d      	subs	r5, r3, r5
    3594:	3d03      	subs	r5, #3
    3596:	604d      	str	r5, [r1, #4]
    3598:	608a      	str	r2, [r1, #8]
    359a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    359c:	2a00      	cmp	r2, #0
    359e:	d1ba      	bne.n	3516 <malloc+0x22>
    35a0:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    35a4:	f000 f93a 	bl	381c <_sbrk>
    35a8:	3001      	adds	r0, #1
    35aa:	d0bd      	beq.n	3528 <malloc+0x34>
    35ac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    35b0:	e884 0028 	stmia.w	r4, {r3, r5}
    35b4:	f104 000c 	add.w	r0, r4, #12
    35b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35ba:	bf00      	nop
    35bc:	100010a8 	.word	0x100010a8

000035c0 <free>:
    35c0:	b1a8      	cbz	r0, 35ee <free+0x2e>
    35c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    35c6:	f840 3c0c 	str.w	r3, [r0, #-12]
    35ca:	f850 2c04 	ldr.w	r2, [r0, #-4]
    35ce:	b172      	cbz	r2, 35ee <free+0x2e>
    35d0:	6813      	ldr	r3, [r2, #0]
    35d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    35d6:	d10a      	bne.n	35ee <free+0x2e>
    35d8:	6853      	ldr	r3, [r2, #4]
    35da:	f850 1c08 	ldr.w	r1, [r0, #-8]
    35de:	440b      	add	r3, r1
    35e0:	3303      	adds	r3, #3
    35e2:	f840 3c08 	str.w	r3, [r0, #-8]
    35e6:	6893      	ldr	r3, [r2, #8]
    35e8:	f840 3c04 	str.w	r3, [r0, #-4]
    35ec:	e7ed      	b.n	35ca <free+0xa>
    35ee:	4770      	bx	lr

000035f0 <_Csys_alloc>:
    35f0:	b510      	push	{r4, lr}
    35f2:	f7ff ff7f 	bl	34f4 <malloc>
    35f6:	4604      	mov	r4, r0
    35f8:	b928      	cbnz	r0, 3606 <_Csys_alloc+0x16>
    35fa:	4904      	ldr	r1, [pc, #16]	; (360c <_Csys_alloc+0x1c>)
    35fc:	2217      	movs	r2, #23
    35fe:	f000 fdef 	bl	41e0 <__sys_write>
    3602:	f000 fdda 	bl	41ba <__sys_appexit>
    3606:	4620      	mov	r0, r4
    3608:	bd10      	pop	{r4, pc}
    360a:	bf00      	nop
    360c:	00004455 	.word	0x00004455

00003610 <fclose>:
    3610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3614:	f100 050c 	add.w	r5, r0, #12
    3618:	e895 01a0 	ldmia.w	r5, {r5, r7, r8}
    361c:	07a9      	lsls	r1, r5, #30
    361e:	b088      	sub	sp, #32
    3620:	4604      	mov	r4, r0
    3622:	6a46      	ldr	r6, [r0, #36]	; 0x24
    3624:	d025      	beq.n	3672 <fclose+0x62>
    3626:	072a      	lsls	r2, r5, #28
    3628:	d416      	bmi.n	3658 <fclose+0x48>
    362a:	f000 f827 	bl	367c <fflush>
    362e:	4640      	mov	r0, r8
    3630:	f000 fdc4 	bl	41bc <__sys_close>
    3634:	052b      	lsls	r3, r5, #20
    3636:	d502      	bpl.n	363e <fclose+0x2e>
    3638:	4638      	mov	r0, r7
    363a:	f7ff ffc1 	bl	35c0 <free>
    363e:	0dad      	lsrs	r5, r5, #22
    3640:	05ad      	lsls	r5, r5, #22
    3642:	f115 4fa5 	cmn.w	r5, #1384120320	; 0x52800000
    3646:	d107      	bne.n	3658 <fclose+0x48>
    3648:	4668      	mov	r0, sp
    364a:	6a21      	ldr	r1, [r4, #32]
    364c:	2220      	movs	r2, #32
    364e:	f000 fdc4 	bl	41da <__sys_tmpnam>
    3652:	4668      	mov	r0, sp
    3654:	f000 f8d8 	bl	3808 <remove>
    3658:	2100      	movs	r1, #0
    365a:	2218      	movs	r2, #24
    365c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    365e:	f7ff fd98 	bl	3192 <memset>
    3662:	4620      	mov	r0, r4
    3664:	2100      	movs	r1, #0
    3666:	2228      	movs	r2, #40	; 0x28
    3668:	f7ff fd93 	bl	3192 <memset>
    366c:	6266      	str	r6, [r4, #36]	; 0x24
    366e:	2000      	movs	r0, #0
    3670:	e001      	b.n	3676 <fclose+0x66>
    3672:	f04f 30ff 	mov.w	r0, #4294967295
    3676:	b008      	add	sp, #32
    3678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000367c <fflush>:
    367c:	b538      	push	{r3, r4, r5, lr}
    367e:	4604      	mov	r4, r0
    3680:	b118      	cbz	r0, 368a <fflush+0xe>
    3682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3686:	f000 b8e9 	b.w	385c <_do_fflush>
    368a:	4605      	mov	r5, r0
    368c:	4806      	ldr	r0, [pc, #24]	; (36a8 <fflush+0x2c>)
    368e:	4420      	add	r0, r4
    3690:	f000 f8e4 	bl	385c <_do_fflush>
    3694:	3428      	adds	r4, #40	; 0x28
    3696:	2800      	cmp	r0, #0
    3698:	bf18      	it	ne
    369a:	f04f 35ff 	movne.w	r5, #4294967295
    369e:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
    36a2:	d1f3      	bne.n	368c <fflush+0x10>
    36a4:	4628      	mov	r0, r5
    36a6:	bd38      	pop	{r3, r4, r5, pc}
    36a8:	10000f68 	.word	0x10000f68

000036ac <fseek>:
    36ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    36b0:	68c6      	ldr	r6, [r0, #12]
    36b2:	4b41      	ldr	r3, [pc, #260]	; (37b8 <fseek+0x10c>)
    36b4:	4604      	mov	r4, r0
    36b6:	4033      	ands	r3, r6
    36b8:	460d      	mov	r5, r1
    36ba:	4690      	mov	r8, r2
    36bc:	f8d0 9014 	ldr.w	r9, [r0, #20]
    36c0:	2b00      	cmp	r3, #0
    36c2:	d075      	beq.n	37b0 <fseek+0x104>
    36c4:	4648      	mov	r0, r9
    36c6:	f000 fd7f 	bl	41c8 <__sys_istty>
    36ca:	4607      	mov	r7, r0
    36cc:	2800      	cmp	r0, #0
    36ce:	d16f      	bne.n	37b0 <fseek+0x104>
    36d0:	f1b8 0f01 	cmp.w	r8, #1
    36d4:	d006      	beq.n	36e4 <fseek+0x38>
    36d6:	f1b8 0f02 	cmp.w	r8, #2
    36da:	d008      	beq.n	36ee <fseek+0x42>
    36dc:	f1b8 0f00 	cmp.w	r8, #0
    36e0:	d166      	bne.n	37b0 <fseek+0x104>
    36e2:	e029      	b.n	3738 <fseek+0x8c>
    36e4:	4620      	mov	r0, r4
    36e6:	f000 f869 	bl	37bc <ftell>
    36ea:	4405      	add	r5, r0
    36ec:	e024      	b.n	3738 <fseek+0x8c>
    36ee:	4648      	mov	r0, r9
    36f0:	f000 fd67 	bl	41c2 <__sys_flen>
    36f4:	f1b0 0e00 	subs.w	lr, r0, #0
    36f8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    36fc:	da04      	bge.n	3708 <fseek+0x5c>
    36fe:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    3702:	60e1      	str	r1, [r4, #12]
    3704:	2701      	movs	r7, #1
    3706:	e054      	b.n	37b2 <fseek+0x106>
    3708:	6823      	ldr	r3, [r4, #0]
    370a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    370c:	461a      	mov	r2, r3
    370e:	69a3      	ldr	r3, [r4, #24]
    3710:	4619      	mov	r1, r3
    3712:	6883      	ldr	r3, [r0, #8]
    3714:	4293      	cmp	r3, r2
    3716:	bf2c      	ite	cs
    3718:	18c9      	addcs	r1, r1, r3
    371a:	1889      	addcc	r1, r1, r2
    371c:	6923      	ldr	r3, [r4, #16]
    371e:	f01c 0f20 	tst.w	ip, #32
    3722:	eba1 0303 	sub.w	r3, r1, r3
    3726:	d003      	beq.n	3730 <fseek+0x84>
    3728:	6842      	ldr	r2, [r0, #4]
    372a:	4293      	cmp	r3, r2
    372c:	bfb8      	it	lt
    372e:	4613      	movlt	r3, r2
    3730:	4573      	cmp	r3, lr
    3732:	bfac      	ite	ge
    3734:	18ed      	addge	r5, r5, r3
    3736:	4475      	addlt	r5, lr
    3738:	2d00      	cmp	r5, #0
    373a:	db39      	blt.n	37b0 <fseek+0x104>
    373c:	f416 5f00 	tst.w	r6, #8192	; 0x2000
    3740:	6a62      	ldr	r2, [r4, #36]	; 0x24
    3742:	d004      	beq.n	374e <fseek+0xa2>
    3744:	6823      	ldr	r3, [r4, #0]
    3746:	6891      	ldr	r1, [r2, #8]
    3748:	4299      	cmp	r1, r3
    374a:	bf38      	it	cc
    374c:	6093      	strcc	r3, [r2, #8]
    374e:	69a1      	ldr	r1, [r4, #24]
    3750:	428d      	cmp	r5, r1
    3752:	db10      	blt.n	3776 <fseek+0xca>
    3754:	6890      	ldr	r0, [r2, #8]
    3756:	6823      	ldr	r3, [r4, #0]
    3758:	f8d4 e010 	ldr.w	lr, [r4, #16]
    375c:	4283      	cmp	r3, r0
    375e:	bf38      	it	cc
    3760:	4603      	movcc	r3, r0
    3762:	1858      	adds	r0, r3, r1
    3764:	ebce 0000 	rsb	r0, lr, r0
    3768:	4285      	cmp	r5, r0
    376a:	dc04      	bgt.n	3776 <fseek+0xca>
    376c:	68d0      	ldr	r0, [r2, #12]
    376e:	eb01 0c00 	add.w	ip, r1, r0
    3772:	4565      	cmp	r5, ip
    3774:	db06      	blt.n	3784 <fseek+0xd8>
    3776:	2300      	movs	r3, #0
    3778:	60a3      	str	r3, [r4, #8]
    377a:	6063      	str	r3, [r4, #4]
    377c:	f046 0620 	orr.w	r6, r6, #32
    3780:	6055      	str	r5, [r2, #4]
    3782:	e00f      	b.n	37a4 <fseek+0xf8>
    3784:	1a6d      	subs	r5, r5, r1
    3786:	07b1      	lsls	r1, r6, #30
    3788:	bf44      	itt	mi
    378a:	1a28      	submi	r0, r5, r0
    378c:	60a0      	strmi	r0, [r4, #8]
    378e:	07f2      	lsls	r2, r6, #31
    3790:	bf44      	itt	mi
    3792:	ebc3 030e 	rsbmi	r3, r3, lr
    3796:	195b      	addmi	r3, r3, r5
    3798:	4475      	add	r5, lr
    379a:	bf48      	it	mi
    379c:	6063      	strmi	r3, [r4, #4]
    379e:	6025      	str	r5, [r4, #0]
    37a0:	f026 0620 	bic.w	r6, r6, #32
    37a4:	f426 2603 	bic.w	r6, r6, #536576	; 0x83000
    37a8:	f026 0640 	bic.w	r6, r6, #64	; 0x40
    37ac:	60e6      	str	r6, [r4, #12]
    37ae:	e000      	b.n	37b2 <fseek+0x106>
    37b0:	2702      	movs	r7, #2
    37b2:	4638      	mov	r0, r7
    37b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    37b8:	00100003 	.word	0x00100003

000037bc <ftell>:
    37bc:	68c3      	ldr	r3, [r0, #12]
    37be:	079a      	lsls	r2, r3, #30
    37c0:	d105      	bne.n	37ce <ftell+0x12>
    37c2:	4b10      	ldr	r3, [pc, #64]	; (3804 <ftell+0x48>)
    37c4:	2221      	movs	r2, #33	; 0x21
    37c6:	601a      	str	r2, [r3, #0]
    37c8:	f04f 30ff 	mov.w	r0, #4294967295
    37cc:	4770      	bx	lr
    37ce:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    37d2:	f003 0320 	and.w	r3, r3, #32
    37d6:	d00a      	beq.n	37ee <ftell+0x32>
    37d8:	b113      	cbz	r3, 37e0 <ftell+0x24>
    37da:	6a43      	ldr	r3, [r0, #36]	; 0x24
    37dc:	6858      	ldr	r0, [r3, #4]
    37de:	e004      	b.n	37ea <ftell+0x2e>
    37e0:	6802      	ldr	r2, [r0, #0]
    37e2:	6983      	ldr	r3, [r0, #24]
    37e4:	6900      	ldr	r0, [r0, #16]
    37e6:	4413      	add	r3, r2
    37e8:	1a18      	subs	r0, r3, r0
    37ea:	3801      	subs	r0, #1
    37ec:	4770      	bx	lr
    37ee:	b113      	cbz	r3, 37f6 <ftell+0x3a>
    37f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    37f2:	6858      	ldr	r0, [r3, #4]
    37f4:	4770      	bx	lr
    37f6:	6802      	ldr	r2, [r0, #0]
    37f8:	6983      	ldr	r3, [r0, #24]
    37fa:	6900      	ldr	r0, [r0, #16]
    37fc:	4413      	add	r3, r2
    37fe:	1a18      	subs	r0, r3, r0
    3800:	4770      	bx	lr
    3802:	bf00      	nop
    3804:	10000448 	.word	0x10000448

00003808 <remove>:
    3808:	b510      	push	{r4, lr}
    380a:	4604      	mov	r4, r0
    380c:	f7ff fc9c 	bl	3148 <strlen>
    3810:	4601      	mov	r1, r0
    3812:	4620      	mov	r0, r4
    3814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3818:	f000 bcd9 	b.w	41ce <__sys_remove>

0000381c <_sbrk>:
    381c:	b538      	push	{r3, r4, r5, lr}
    381e:	4b0c      	ldr	r3, [pc, #48]	; (3850 <_sbrk+0x34>)
    3820:	681a      	ldr	r2, [r3, #0]
    3822:	b90a      	cbnz	r2, 3828 <_sbrk+0xc>
    3824:	4a0b      	ldr	r2, [pc, #44]	; (3854 <_sbrk+0x38>)
    3826:	601a      	str	r2, [r3, #0]
    3828:	1cc4      	adds	r4, r0, #3
    382a:	681d      	ldr	r5, [r3, #0]
    382c:	f024 0403 	bic.w	r4, r4, #3
    3830:	442c      	add	r4, r5
    3832:	4620      	mov	r0, r4
    3834:	f000 f834 	bl	38a0 <__check_heap_overflow>
    3838:	b918      	cbnz	r0, 3842 <_sbrk+0x26>
    383a:	4b05      	ldr	r3, [pc, #20]	; (3850 <_sbrk+0x34>)
    383c:	4628      	mov	r0, r5
    383e:	601c      	str	r4, [r3, #0]
    3840:	bd38      	pop	{r3, r4, r5, pc}
    3842:	4b05      	ldr	r3, [pc, #20]	; (3858 <_sbrk+0x3c>)
    3844:	220c      	movs	r2, #12
    3846:	601a      	str	r2, [r3, #0]
    3848:	f04f 30ff 	mov.w	r0, #4294967295
    384c:	bd38      	pop	{r3, r4, r5, pc}
    384e:	bf00      	nop
    3850:	100010ac 	.word	0x100010ac
    3854:	100010b0 	.word	0x100010b0
    3858:	10000448 	.word	0x10000448

0000385c <_do_fflush>:
    385c:	68c2      	ldr	r2, [r0, #12]
    385e:	b570      	push	{r4, r5, r6, lr}
    3860:	f012 0303 	ands.w	r3, r2, #3
    3864:	4604      	mov	r4, r0
    3866:	d019      	beq.n	389c <_do_fflush+0x40>
    3868:	0693      	lsls	r3, r2, #26
    386a:	d504      	bpl.n	3876 <_do_fflush+0x1a>
    386c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    386e:	685d      	ldr	r5, [r3, #4]
    3870:	f7ff fc91 	bl	3196 <_deferredlazyseek>
    3874:	e004      	b.n	3880 <_do_fflush+0x24>
    3876:	6805      	ldr	r5, [r0, #0]
    3878:	6983      	ldr	r3, [r0, #24]
    387a:	442b      	add	r3, r5
    387c:	6905      	ldr	r5, [r0, #16]
    387e:	1b5d      	subs	r5, r3, r5
    3880:	68e3      	ldr	r3, [r4, #12]
    3882:	4620      	mov	r0, r4
    3884:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    3888:	60e3      	str	r3, [r4, #12]
    388a:	f7ff fd7c 	bl	3386 <_fflush>
    388e:	4606      	mov	r6, r0
    3890:	4629      	mov	r1, r5
    3892:	4620      	mov	r0, r4
    3894:	2200      	movs	r2, #0
    3896:	f7ff ff09 	bl	36ac <fseek>
    389a:	4633      	mov	r3, r6
    389c:	4618      	mov	r0, r3
    389e:	bd70      	pop	{r4, r5, r6, pc}

000038a0 <__check_heap_overflow>:
    38a0:	4b04      	ldr	r3, [pc, #16]	; (38b4 <__check_heap_overflow+0x14>)
    38a2:	b123      	cbz	r3, 38ae <__check_heap_overflow+0xe>
    38a4:	4298      	cmp	r0, r3
    38a6:	bf34      	ite	cc
    38a8:	2000      	movcc	r0, #0
    38aa:	2001      	movcs	r0, #1
    38ac:	4770      	bx	lr
    38ae:	4618      	mov	r0, r3
    38b0:	4770      	bx	lr
    38b2:	bf00      	nop
    38b4:	00000000 	.word	0x00000000

000038b8 <__aeabi_uldivmod>:
    38b8:	f05f 0c00 	movs.w	ip, #0

000038bc <__bhs_ldivmod1>:
    38bc:	b530      	push	{r4, r5, lr}
    38be:	001c      	movs	r4, r3
    38c0:	d122      	bne.n	3908 <ldiv64>
    38c2:	0012      	movs	r2, r2
    38c4:	d06f      	beq.n	39a6 <ldiv_divzero>
    38c6:	4291      	cmp	r1, r2
    38c8:	d306      	bcc.n	38d8 <ldiv32>
    38ca:	4605      	mov	r5, r0
    38cc:	4608      	mov	r0, r1
    38ce:	2100      	movs	r1, #0
    38d0:	f000 f86f 	bl	39b2 <udiv6432>
    38d4:	4604      	mov	r4, r0
    38d6:	4628      	mov	r0, r5

000038d8 <ldiv32>:
    38d8:	f000 f86b 	bl	39b2 <udiv6432>
    38dc:	460a      	mov	r2, r1
    38de:	4621      	mov	r1, r4

000038e0 <ldiv_return>:
    38e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    38e4:	f01c 4f40 	tst.w	ip, #3221225472	; 0xc0000000
    38e8:	bf08      	it	eq
    38ea:	4770      	bxeq	lr
    38ec:	d503      	bpl.n	38f6 <ldiv_sign>
    38ee:	4249      	negs	r1, r1
    38f0:	4240      	negs	r0, r0
    38f2:	f161 0100 	sbc.w	r1, r1, #0

000038f6 <ldiv_sign>:
    38f6:	ea5f 0c8c 	movs.w	ip, ip, lsl #2
    38fa:	bf38      	it	cc
    38fc:	4770      	bxcc	lr
    38fe:	425b      	negs	r3, r3
    3900:	4252      	negs	r2, r2
    3902:	f163 0300 	sbc.w	r3, r3, #0
    3906:	4770      	bx	lr

00003908 <ldiv64>:
    3908:	d442      	bmi.n	3990 <ldiv_res01>
    390a:	0c1c      	lsrs	r4, r3, #16
    390c:	bf04      	itt	eq
    390e:	041b      	lsleq	r3, r3, #16
    3910:	f10c 0c10 	addeq.w	ip, ip, #16
    3914:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    3918:	bf04      	itt	eq
    391a:	021b      	lsleq	r3, r3, #8
    391c:	f10c 0c08 	addeq.w	ip, ip, #8
    3920:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    3924:	bf04      	itt	eq
    3926:	011b      	lsleq	r3, r3, #4
    3928:	f10c 0c04 	addeq.w	ip, ip, #4
    392c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    3930:	bf04      	itt	eq
    3932:	f10c 0c02 	addeq.w	ip, ip, #2
    3936:	ea5f 0383 	movseq.w	r3, r3, lsl #2
    393a:	bf5c      	itt	pl
    393c:	f10c 0c01 	addpl.w	ip, ip, #1
    3940:	005b      	lslpl	r3, r3, #1
    3942:	f1cc 0e20 	rsb	lr, ip, #32
    3946:	fa22 f40e 	lsr.w	r4, r2, lr
    394a:	4323      	orrs	r3, r4
    394c:	fa02 f20c 	lsl.w	r2, r2, ip
    3950:	fa00 f50c 	lsl.w	r5, r0, ip
    3954:	fa20 f00e 	lsr.w	r0, r0, lr
    3958:	fa01 f40c 	lsl.w	r4, r1, ip
    395c:	4320      	orrs	r0, r4
    395e:	fa21 f10e 	lsr.w	r1, r1, lr
    3962:	4614      	mov	r4, r2
    3964:	461a      	mov	r2, r3
    3966:	f000 f824 	bl	39b2 <udiv6432>
    396a:	fba4 2300 	umull	r2, r3, r4, r0
    396e:	1aaa      	subs	r2, r5, r2
    3970:	eb71 0303 	sbcs.w	r3, r1, r3
    3974:	bf3c      	itt	cc
    3976:	191b      	addcc	r3, r3, r4
    3978:	3801      	subcc	r0, #1
    397a:	f1cc 0e20 	rsb	lr, ip, #32
    397e:	fa22 f20c 	lsr.w	r2, r2, ip
    3982:	fa03 f40e 	lsl.w	r4, r3, lr
    3986:	4322      	orrs	r2, r4
    3988:	fa23 f30c 	lsr.w	r3, r3, ip
    398c:	2100      	movs	r1, #0
    398e:	e7a7      	b.n	38e0 <ldiv_return>

00003990 <ldiv_res01>:
    3990:	1a82      	subs	r2, r0, r2
    3992:	eb71 0303 	sbcs.w	r3, r1, r3
    3996:	bf3c      	itt	cc
    3998:	4602      	movcc	r2, r0
    399a:	460b      	movcc	r3, r1
    399c:	f04f 0100 	mov.w	r1, #0
    39a0:	f141 0000 	adc.w	r0, r1, #0
    39a4:	e79c      	b.n	38e0 <ldiv_return>

000039a6 <ldiv_divzero>:
    39a6:	2000      	movs	r0, #0
    39a8:	2100      	movs	r1, #0
    39aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    39ae:	f000 b83d 	b.w	3a2c <__aeabi_idiv0>

000039b2 <udiv6432>:
    39b2:	2304      	movs	r3, #4
    39b4:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    39b8:	d209      	bcs.n	39ce <udiv6432_entry>

000039ba <udiv6432_loop1>:
    39ba:	0209      	lsls	r1, r1, #8
    39bc:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
    39c0:	0200      	lsls	r0, r0, #8
    39c2:	3b01      	subs	r3, #1
    39c4:	bf08      	it	eq
    39c6:	4770      	bxeq	lr
    39c8:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    39cc:	d3f5      	bcc.n	39ba <udiv6432_loop1>

000039ce <udiv6432_entry>:
    39ce:	1800      	adds	r0, r0, r0

000039d0 <udiv6432_loop>:
    39d0:	4149      	adcs	r1, r1
    39d2:	bf34      	ite	cc
    39d4:	4291      	cmpcc	r1, r2
    39d6:	1a89      	subcs	r1, r1, r2
    39d8:	4140      	adcs	r0, r0
    39da:	4149      	adcs	r1, r1
    39dc:	bf34      	ite	cc
    39de:	4291      	cmpcc	r1, r2
    39e0:	1a89      	subcs	r1, r1, r2
    39e2:	4140      	adcs	r0, r0
    39e4:	4149      	adcs	r1, r1
    39e6:	bf34      	ite	cc
    39e8:	4291      	cmpcc	r1, r2
    39ea:	1a89      	subcs	r1, r1, r2
    39ec:	4140      	adcs	r0, r0
    39ee:	4149      	adcs	r1, r1
    39f0:	bf34      	ite	cc
    39f2:	4291      	cmpcc	r1, r2
    39f4:	1a89      	subcs	r1, r1, r2
    39f6:	4140      	adcs	r0, r0
    39f8:	4149      	adcs	r1, r1
    39fa:	bf34      	ite	cc
    39fc:	4291      	cmpcc	r1, r2
    39fe:	1a89      	subcs	r1, r1, r2
    3a00:	4140      	adcs	r0, r0
    3a02:	4149      	adcs	r1, r1
    3a04:	bf34      	ite	cc
    3a06:	4291      	cmpcc	r1, r2
    3a08:	1a89      	subcs	r1, r1, r2
    3a0a:	4140      	adcs	r0, r0
    3a0c:	4149      	adcs	r1, r1
    3a0e:	bf34      	ite	cc
    3a10:	4291      	cmpcc	r1, r2
    3a12:	1a89      	subcs	r1, r1, r2
    3a14:	4140      	adcs	r0, r0
    3a16:	4149      	adcs	r1, r1
    3a18:	bf34      	ite	cc
    3a1a:	4291      	cmpcc	r1, r2
    3a1c:	1a89      	subcs	r1, r1, r2
    3a1e:	4140      	adcs	r0, r0
    3a20:	f1a3 0301 	sub.w	r3, r3, #1
    3a24:	f013 0f0f 	tst.w	r3, #15
    3a28:	d1d2      	bne.n	39d0 <udiv6432_loop>
    3a2a:	4770      	bx	lr

00003a2c <__aeabi_idiv0>:
    3a2c:	4770      	bx	lr
	...

00003a30 <__aeabi_dmul>:
    3a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a34:	f3c1 540a 	ubfx	r4, r1, #20, #11
    3a38:	2c00      	cmp	r4, #0
    3a3a:	d054      	beq.n	3ae6 <__aeabi_dmul+0xb6>
    3a3c:	f240 76ff 	movw	r6, #2047	; 0x7ff
    3a40:	42b4      	cmp	r4, r6
    3a42:	d050      	beq.n	3ae6 <__aeabi_dmul+0xb6>
    3a44:	f3c3 550a 	ubfx	r5, r3, #20, #11
    3a48:	2d00      	cmp	r5, #0
    3a4a:	d04c      	beq.n	3ae6 <__aeabi_dmul+0xb6>
    3a4c:	42b5      	cmp	r5, r6
    3a4e:	d04a      	beq.n	3ae6 <__aeabi_dmul+0xb6>
    3a50:	f3c1 0e13 	ubfx	lr, r1, #0, #20
    3a54:	ea4f 2ac2 	mov.w	sl, r2, lsl #11
    3a58:	f44e 1e80 	orr.w	lr, lr, #1048576	; 0x100000
    3a5c:	fbae 670a 	umull	r6, r7, lr, sl
    3a60:	fbaa ab00 	umull	sl, fp, sl, r0
    3a64:	eb16 080b 	adds.w	r8, r6, fp
    3a68:	463e      	mov	r6, r7
    3a6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    3a6e:	ea42 22c3 	orr.w	r2, r2, r3, lsl #11
    3a72:	f04f 0900 	mov.w	r9, #0
    3a76:	f149 0900 	adc.w	r9, r9, #0
    3a7a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    3a7e:	fbe0 8902 	umlal	r8, r9, r0, r2
    3a82:	2700      	movs	r7, #0
    3a84:	eb16 0609 	adds.w	r6, r6, r9
    3a88:	f147 0700 	adc.w	r7, r7, #0
    3a8c:	fbee 6702 	umlal	r6, r7, lr, r2
    3a90:	404b      	eors	r3, r1
    3a92:	f5b7 1f80 	cmp.w	r7, #1048576	; 0x100000
    3a96:	442c      	add	r4, r5
    3a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    3a9c:	ea48 089a 	orr.w	r8, r8, sl, lsr #2
    3aa0:	d24b      	bcs.n	3b3a <__aeabi_dmul+0x10a>
    3aa2:	19b6      	adds	r6, r6, r6
    3aa4:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    3aa8:	417f      	adcs	r7, r7
    3aaa:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
    3aae:	4316      	orrs	r6, r2
    3ab0:	ea4f 0848 	mov.w	r8, r8, lsl #1
    3ab4:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    3ab8:	18b6      	adds	r6, r6, r2
    3aba:	f240 72fd 	movw	r2, #2045	; 0x7fd
    3abe:	f147 0700 	adc.w	r7, r7, #0
    3ac2:	f1b8 4f00 	cmp.w	r8, #2147483648	; 0x80000000
    3ac6:	4635      	mov	r5, r6
    3ac8:	bf08      	it	eq
    3aca:	f026 0501 	biceq.w	r5, r6, #1
    3ace:	4294      	cmp	r4, r2
    3ad0:	d936      	bls.n	3b40 <__aeabi_dmul+0x110>
    3ad2:	2c00      	cmp	r4, #0
    3ad4:	bfa4      	itt	ge
    3ad6:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    3ada:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    3ade:	2000      	movs	r0, #0
    3ae0:	4619      	mov	r1, r3
    3ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ae6:	ea83 0201 	eor.w	r2, r3, r1
    3aea:	0049      	lsls	r1, r1, #1
    3aec:	f511 1f00 	cmn.w	r1, #2097152	; 0x200000
    3af0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
    3af4:	d213      	bcs.n	3b1e <__aeabi_dmul+0xee>
    3af6:	005b      	lsls	r3, r3, #1
    3af8:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    3afc:	d317      	bcc.n	3b2e <__aeabi_dmul+0xfe>
    3afe:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    3b02:	d80d      	bhi.n	3b20 <__aeabi_dmul+0xf0>
    3b04:	0d49      	lsrs	r1, r1, #21
    3b06:	0549      	lsls	r1, r1, #21
    3b08:	2000      	movs	r0, #0
    3b0a:	b169      	cbz	r1, 3b28 <__aeabi_dmul+0xf8>
    3b0c:	0d5b      	lsrs	r3, r3, #21
    3b0e:	055b      	lsls	r3, r3, #21
    3b10:	b153      	cbz	r3, 3b28 <__aeabi_dmul+0xf8>
    3b12:	f042 42ff 	orr.w	r2, r2, #2139095040	; 0x7f800000
    3b16:	f442 01e0 	orr.w	r1, r2, #7340032	; 0x700000
    3b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b1e:	d00a      	beq.n	3b36 <__aeabi_dmul+0x106>
    3b20:	2000      	movs	r0, #0
    3b22:	490a      	ldr	r1, [pc, #40]	; (3b4c <__aeabi_dmul+0x11c>)
    3b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b28:	4908      	ldr	r1, [pc, #32]	; (3b4c <__aeabi_dmul+0x11c>)
    3b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b2e:	2000      	movs	r0, #0
    3b30:	4611      	mov	r1, r2
    3b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b36:	005b      	lsls	r3, r3, #1
    3b38:	e7e1      	b.n	3afe <__aeabi_dmul+0xce>
    3b3a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    3b3e:	e7b9      	b.n	3ab4 <__aeabi_dmul+0x84>
    3b40:	433b      	orrs	r3, r7
    3b42:	eb03 5104 	add.w	r1, r3, r4, lsl #20
    3b46:	4628      	mov	r0, r5
    3b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b4c:	7ff80000 	.word	0x7ff80000

00003b50 <__aeabi_ddiv>:
    3b50:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
    3b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b58:	f1bc 0f00 	cmp.w	ip, #0
    3b5c:	d053      	beq.n	3c06 <__aeabi_ddiv+0xb6>
    3b5e:	f240 74ff 	movw	r4, #2047	; 0x7ff
    3b62:	45a4      	cmp	ip, r4
    3b64:	d04f      	beq.n	3c06 <__aeabi_ddiv+0xb6>
    3b66:	f3c3 580a 	ubfx	r8, r3, #20, #11
    3b6a:	f1b8 0f00 	cmp.w	r8, #0
    3b6e:	d04a      	beq.n	3c06 <__aeabi_ddiv+0xb6>
    3b70:	45a0      	cmp	r8, r4
    3b72:	d048      	beq.n	3c06 <__aeabi_ddiv+0xb6>
    3b74:	ea4f 5a50 	mov.w	sl, r0, lsr #21
    3b78:	ea4f 5952 	mov.w	r9, r2, lsr #21
    3b7c:	02c4      	lsls	r4, r0, #11
    3b7e:	02d6      	lsls	r6, r2, #11
    3b80:	ea4a 20c1 	orr.w	r0, sl, r1, lsl #11
    3b84:	ea49 22c3 	orr.w	r2, r9, r3, lsl #11
    3b88:	f040 4500 	orr.w	r5, r0, #2147483648	; 0x80000000
    3b8c:	f042 4700 	orr.w	r7, r2, #2147483648	; 0x80000000
    3b90:	42bd      	cmp	r5, r7
    3b92:	bf08      	it	eq
    3b94:	42b4      	cmpeq	r4, r6
    3b96:	ebc8 0c0c 	rsb	ip, r8, ip
    3b9a:	ea83 0801 	eor.w	r8, r3, r1
    3b9e:	d25d      	bcs.n	3c5c <__aeabi_ddiv+0x10c>
    3ba0:	f20c 3cfd 	addw	ip, ip, #1021	; 0x3fd
    3ba4:	0879      	lsrs	r1, r7, #1
    3ba6:	ea4f 0036 	mov.w	r0, r6, rrx
    3baa:	2334      	movs	r3, #52	; 0x34
    3bac:	2200      	movs	r2, #0
    3bae:	e000      	b.n	3bb2 <__aeabi_ddiv+0x62>
    3bb0:	3b01      	subs	r3, #1
    3bb2:	428d      	cmp	r5, r1
    3bb4:	bf08      	it	eq
    3bb6:	4284      	cmpeq	r4, r0
    3bb8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    3bbc:	d304      	bcc.n	3bc8 <__aeabi_ddiv+0x78>
    3bbe:	1a24      	subs	r4, r4, r0
    3bc0:	eb65 0501 	sbc.w	r5, r5, r1
    3bc4:	f042 0201 	orr.w	r2, r2, #1
    3bc8:	1924      	adds	r4, r4, r4
    3bca:	416d      	adcs	r5, r5
    3bcc:	2b20      	cmp	r3, #32
    3bce:	d062      	beq.n	3c96 <__aeabi_ddiv+0x146>
    3bd0:	2b00      	cmp	r3, #0
    3bd2:	d1ed      	bne.n	3bb0 <__aeabi_ddiv+0x60>
    3bd4:	428d      	cmp	r5, r1
    3bd6:	bf08      	it	eq
    3bd8:	4284      	cmpeq	r4, r0
    3bda:	d303      	bcc.n	3be4 <__aeabi_ddiv+0x94>
    3bdc:	3201      	adds	r2, #1
    3bde:	bf08      	it	eq
    3be0:	f10e 0e01 	addeq.w	lr, lr, #1
    3be4:	f240 71fd 	movw	r1, #2045	; 0x7fd
    3be8:	458c      	cmp	ip, r1
    3bea:	f008 4300 	and.w	r3, r8, #2147483648	; 0x80000000
    3bee:	d93b      	bls.n	3c68 <__aeabi_ddiv+0x118>
    3bf0:	f1bc 0f00 	cmp.w	ip, #0
    3bf4:	bfa4      	itt	ge
    3bf6:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    3bfa:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    3bfe:	2000      	movs	r0, #0
    3c00:	4619      	mov	r1, r3
    3c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c06:	004a      	lsls	r2, r1, #1
    3c08:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    3c0c:	d81c      	bhi.n	3c48 <__aeabi_ddiv+0xf8>
    3c0e:	005c      	lsls	r4, r3, #1
    3c10:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    3c14:	d818      	bhi.n	3c48 <__aeabi_ddiv+0xf8>
    3c16:	ea43 0001 	orr.w	r0, r3, r1
    3c1a:	f3c0 500a 	ubfx	r0, r0, #20, #11
    3c1e:	0545      	lsls	r5, r0, #21
    3c20:	b1b0      	cbz	r0, 3c50 <__aeabi_ddiv+0x100>
    3c22:	0d50      	lsrs	r0, r2, #21
    3c24:	4059      	eors	r1, r3
    3c26:	0540      	lsls	r0, r0, #21
    3c28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3c2c:	b1a0      	cbz	r0, 3c58 <__aeabi_ddiv+0x108>
    3c2e:	0d60      	lsrs	r0, r4, #21
    3c30:	0540      	lsls	r0, r0, #21
    3c32:	b348      	cbz	r0, 3c88 <__aeabi_ddiv+0x138>
    3c34:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    3c38:	d11d      	bne.n	3c76 <__aeabi_ddiv+0x126>
    3c3a:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    3c3e:	d003      	beq.n	3c48 <__aeabi_ddiv+0xf8>
    3c40:	2200      	movs	r2, #0
    3c42:	4610      	mov	r0, r2
    3c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c48:	2000      	movs	r0, #0
    3c4a:	4914      	ldr	r1, [pc, #80]	; (3c9c <__aeabi_ddiv+0x14c>)
    3c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c50:	4912      	ldr	r1, [pc, #72]	; (3c9c <__aeabi_ddiv+0x14c>)
    3c52:	4628      	mov	r0, r5
    3c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c5c:	086d      	lsrs	r5, r5, #1
    3c5e:	ea4f 0434 	mov.w	r4, r4, rrx
    3c62:	f20c 3cfe 	addw	ip, ip, #1022	; 0x3fe
    3c66:	e79d      	b.n	3ba4 <__aeabi_ddiv+0x54>
    3c68:	eb03 530c 	add.w	r3, r3, ip, lsl #20
    3c6c:	eb03 010e 	add.w	r1, r3, lr
    3c70:	4610      	mov	r0, r2
    3c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c76:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    3c7a:	2200      	movs	r2, #0
    3c7c:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    3c80:	4610      	mov	r0, r2
    3c82:	4619      	mov	r1, r3
    3c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c88:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    3c8c:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    3c90:	4619      	mov	r1, r3
    3c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c96:	4696      	mov	lr, r2
    3c98:	e78a      	b.n	3bb0 <__aeabi_ddiv+0x60>
    3c9a:	bf00      	nop
    3c9c:	7ff80000 	.word	0x7ff80000

00003ca0 <__aeabi_dsub>:
    3ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ca2:	ea93 0401 	eors.w	r4, r3, r1
    3ca6:	460d      	mov	r5, r1
    3ca8:	f100 80cc 	bmi.w	3e44 <__aeabi_dsub+0x1a4>
    3cac:	4299      	cmp	r1, r3
    3cae:	4606      	mov	r6, r0
    3cb0:	d270      	bcs.n	3d94 <__aeabi_dsub+0xf4>
    3cb2:	4056      	eors	r6, r2
    3cb4:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    3cb8:	4072      	eors	r2, r6
    3cba:	4056      	eors	r6, r2
    3cbc:	404d      	eors	r5, r1
    3cbe:	404b      	eors	r3, r1
    3cc0:	f240 70ff 	movw	r0, #2047	; 0x7ff
    3cc4:	0d2c      	lsrs	r4, r5, #20
    3cc6:	f424 6100 	bic.w	r1, r4, #2048	; 0x800
    3cca:	4281      	cmp	r1, r0
    3ccc:	eba4 5713 	sub.w	r7, r4, r3, lsr #20
    3cd0:	f000 8096 	beq.w	3e00 <__aeabi_dsub+0x160>
    3cd4:	428f      	cmp	r7, r1
    3cd6:	f000 8099 	beq.w	3e0c <__aeabi_dsub+0x16c>
    3cda:	f3c5 0513 	ubfx	r5, r5, #0, #20
    3cde:	f3c3 0313 	ubfx	r3, r3, #0, #20
    3ce2:	2f1f      	cmp	r7, #31
    3ce4:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
    3ce8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    3cec:	d857      	bhi.n	3d9e <__aeabi_dsub+0xfe>
    3cee:	f1c7 0020 	rsb	r0, r7, #32
    3cf2:	fa03 fe00 	lsl.w	lr, r3, r0
    3cf6:	fa22 f107 	lsr.w	r1, r2, r7
    3cfa:	ea4e 0101 	orr.w	r1, lr, r1
    3cfe:	40fb      	lsrs	r3, r7
    3d00:	1a71      	subs	r1, r6, r1
    3d02:	1aed      	subs	r5, r5, r3
    3d04:	428e      	cmp	r6, r1
    3d06:	bf38      	it	cc
    3d08:	f105 35ff 	addcc.w	r5, r5, #4294967295
    3d0c:	fa12 f300 	lsls.w	r3, r2, r0
    3d10:	d006      	beq.n	3d20 <__aeabi_dsub+0x80>
    3d12:	3901      	subs	r1, #1
    3d14:	1c4f      	adds	r7, r1, #1
    3d16:	f1c3 0300 	rsb	r3, r3, #0
    3d1a:	bf08      	it	eq
    3d1c:	f105 35ff 	addeq.w	r5, r5, #4294967295
    3d20:	f415 1fc0 	tst.w	r5, #1572864	; 0x180000
    3d24:	d158      	bne.n	3dd8 <__aeabi_dsub+0x138>
    3d26:	0fdb      	lsrs	r3, r3, #31
    3d28:	0fca      	lsrs	r2, r1, #31
    3d2a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    3d2e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    3d32:	ea53 0502 	orrs.w	r5, r3, r2
    3d36:	f000 809a 	beq.w	3e6e <__aeabi_dsub+0x1ce>
    3d3a:	0b51      	lsrs	r1, r2, #13
    3d3c:	f1a4 0502 	sub.w	r5, r4, #2
    3d40:	d108      	bne.n	3d54 <__aeabi_dsub+0xb4>
    3d42:	0e19      	lsrs	r1, r3, #24
    3d44:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
    3d48:	0b51      	lsrs	r1, r2, #13
    3d4a:	f1a5 0508 	sub.w	r5, r5, #8
    3d4e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3d52:	d0f6      	beq.n	3d42 <__aeabi_dsub+0xa2>
    3d54:	0c51      	lsrs	r1, r2, #17
    3d56:	d104      	bne.n	3d62 <__aeabi_dsub+0xc2>
    3d58:	0f19      	lsrs	r1, r3, #28
    3d5a:	3d04      	subs	r5, #4
    3d5c:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    3d60:	011b      	lsls	r3, r3, #4
    3d62:	0cd1      	lsrs	r1, r2, #19
    3d64:	d104      	bne.n	3d70 <__aeabi_dsub+0xd0>
    3d66:	0f99      	lsrs	r1, r3, #30
    3d68:	3d02      	subs	r5, #2
    3d6a:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
    3d6e:	009b      	lsls	r3, r3, #2
    3d70:	0d11      	lsrs	r1, r2, #20
    3d72:	d104      	bne.n	3d7e <__aeabi_dsub+0xde>
    3d74:	0fd9      	lsrs	r1, r3, #31
    3d76:	3d01      	subs	r5, #1
    3d78:	ea41 0242 	orr.w	r2, r1, r2, lsl #1
    3d7c:	005b      	lsls	r3, r3, #1
    3d7e:	0ae4      	lsrs	r4, r4, #11
    3d80:	ebb4 2fd5 	cmp.w	r4, r5, lsr #11
    3d84:	f04f 0000 	mov.w	r0, #0
    3d88:	bf06      	itte	eq
    3d8a:	eb02 5105 	addeq.w	r1, r2, r5, lsl #20
    3d8e:	4618      	moveq	r0, r3
    3d90:	07e1      	lslne	r1, r4, #31
    3d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d94:	4290      	cmp	r0, r2
    3d96:	d893      	bhi.n	3cc0 <__aeabi_dsub+0x20>
    3d98:	4299      	cmp	r1, r3
    3d9a:	d191      	bne.n	3cc0 <__aeabi_dsub+0x20>
    3d9c:	e789      	b.n	3cb2 <__aeabi_dsub+0x12>
    3d9e:	2f35      	cmp	r7, #53	; 0x35
    3da0:	d826      	bhi.n	3df0 <__aeabi_dsub+0x150>
    3da2:	f1a7 0020 	sub.w	r0, r7, #32
    3da6:	fa23 f100 	lsr.w	r1, r3, r0
    3daa:	1a71      	subs	r1, r6, r1
    3dac:	428e      	cmp	r6, r1
    3dae:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    3db2:	fa22 f000 	lsr.w	r0, r2, r0
    3db6:	bf38      	it	cc
    3db8:	f105 35ff 	addcc.w	r5, r5, #4294967295
    3dbc:	40bb      	lsls	r3, r7
    3dbe:	0612      	lsls	r2, r2, #24
    3dc0:	ea43 0300 	orr.w	r3, r3, r0
    3dc4:	d048      	beq.n	3e58 <__aeabi_dsub+0x1b8>
    3dc6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3dca:	3901      	subs	r1, #1
    3dcc:	1c4e      	adds	r6, r1, #1
    3dce:	f1c3 0300 	rsb	r3, r3, #0
    3dd2:	bf08      	it	eq
    3dd4:	f105 35ff 	addeq.w	r5, r5, #4294967295
    3dd8:	02e8      	lsls	r0, r5, #11
    3dda:	d42e      	bmi.n	3e3a <__aeabi_dsub+0x19a>
    3ddc:	3c01      	subs	r4, #1
    3dde:	0562      	lsls	r2, r4, #21
    3de0:	d037      	beq.n	3e52 <__aeabi_dsub+0x1b2>
    3de2:	0fde      	lsrs	r6, r3, #31
    3de4:	0fca      	lsrs	r2, r1, #31
    3de6:	ea42 0545 	orr.w	r5, r2, r5, lsl #1
    3dea:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
    3dee:	005b      	lsls	r3, r3, #1
    3df0:	2b00      	cmp	r3, #0
    3df2:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    3df6:	db11      	blt.n	3e1c <__aeabi_dsub+0x17c>
    3df8:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    3dfc:	4630      	mov	r0, r6
    3dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e00:	032b      	lsls	r3, r5, #12
    3e02:	d117      	bne.n	3e34 <__aeabi_dsub+0x194>
    3e04:	b387      	cbz	r7, 3e68 <__aeabi_dsub+0x1c8>
    3e06:	4630      	mov	r0, r6
    3e08:	4629      	mov	r1, r5
    3e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e0c:	f240 73fe 	movw	r3, #2046	; 0x7fe
    3e10:	429f      	cmp	r7, r3
    3e12:	d8f5      	bhi.n	3e00 <__aeabi_dsub+0x160>
    3e14:	b99f      	cbnz	r7, 3e3e <__aeabi_dsub+0x19e>
    3e16:	4639      	mov	r1, r7
    3e18:	4638      	mov	r0, r7
    3e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e1c:	3601      	adds	r6, #1
    3e1e:	bf08      	it	eq
    3e20:	3501      	addeq	r5, #1
    3e22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    3e26:	bf08      	it	eq
    3e28:	f026 0601 	biceq.w	r6, r6, #1
    3e2c:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    3e30:	4630      	mov	r0, r6
    3e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e34:	2000      	movs	r0, #0
    3e36:	490f      	ldr	r1, [pc, #60]	; (3e74 <__aeabi_dsub+0x1d4>)
    3e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e3a:	460e      	mov	r6, r1
    3e3c:	e7d8      	b.n	3df0 <__aeabi_dsub+0x150>
    3e3e:	4629      	mov	r1, r5
    3e40:	4630      	mov	r0, r6
    3e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e44:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    3e48:	462b      	mov	r3, r5
    3e4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3e4e:	f000 b813 	b.w	3e78 <__aeabi_dadd>
    3e52:	0521      	lsls	r1, r4, #20
    3e54:	4610      	mov	r0, r2
    3e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e58:	2b00      	cmp	r3, #0
    3e5a:	d1b6      	bne.n	3dca <__aeabi_dsub+0x12a>
    3e5c:	02ea      	lsls	r2, r5, #11
    3e5e:	d5bd      	bpl.n	3ddc <__aeabi_dsub+0x13c>
    3e60:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    3e64:	460e      	mov	r6, r1
    3e66:	e7c7      	b.n	3df8 <__aeabi_dsub+0x158>
    3e68:	4902      	ldr	r1, [pc, #8]	; (3e74 <__aeabi_dsub+0x1d4>)
    3e6a:	4638      	mov	r0, r7
    3e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e6e:	4629      	mov	r1, r5
    3e70:	4628      	mov	r0, r5
    3e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e74:	7ff80000 	.word	0x7ff80000

00003e78 <__aeabi_dadd>:
    3e78:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e7a:	ea93 0601 	eors.w	r6, r3, r1
    3e7e:	460c      	mov	r4, r1
    3e80:	f100 8087 	bmi.w	3f92 <__aeabi_dadd+0x11a>
    3e84:	4299      	cmp	r1, r3
    3e86:	4605      	mov	r5, r0
    3e88:	d339      	bcc.n	3efe <__aeabi_dadd+0x86>
    3e8a:	f240 70ff 	movw	r0, #2047	; 0x7ff
    3e8e:	0d26      	lsrs	r6, r4, #20
    3e90:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    3e94:	4281      	cmp	r1, r0
    3e96:	d03f      	beq.n	3f18 <__aeabi_dadd+0xa0>
    3e98:	eba6 5713 	sub.w	r7, r6, r3, lsr #20
    3e9c:	428f      	cmp	r7, r1
    3e9e:	d04c      	beq.n	3f3a <__aeabi_dadd+0xc2>
    3ea0:	f3c4 0413 	ubfx	r4, r4, #0, #20
    3ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    3ea8:	2f1f      	cmp	r7, #31
    3eaa:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    3eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    3eb2:	d838      	bhi.n	3f26 <__aeabi_dadd+0xae>
    3eb4:	f1c7 0020 	rsb	r0, r7, #32
    3eb8:	fa03 fe00 	lsl.w	lr, r3, r0
    3ebc:	fa22 f107 	lsr.w	r1, r2, r7
    3ec0:	40fb      	lsrs	r3, r7
    3ec2:	ea4e 0101 	orr.w	r1, lr, r1
    3ec6:	441c      	add	r4, r3
    3ec8:	186d      	adds	r5, r5, r1
    3eca:	bf28      	it	cs
    3ecc:	3401      	addcs	r4, #1
    3ece:	fa02 f300 	lsl.w	r3, r2, r0
    3ed2:	02a2      	lsls	r2, r4, #10
    3ed4:	d529      	bpl.n	3f2a <__aeabi_dadd+0xb2>
    3ed6:	3501      	adds	r5, #1
    3ed8:	bf08      	it	eq
    3eda:	3401      	addeq	r4, #1
    3edc:	b90b      	cbnz	r3, 3ee2 <__aeabi_dadd+0x6a>
    3ede:	f025 0502 	bic.w	r5, r5, #2
    3ee2:	0533      	lsls	r3, r6, #20
    3ee4:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    3ee8:	005a      	lsls	r2, r3, #1
    3eea:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    3eee:	f04f 0000 	mov.w	r0, #0
    3ef2:	d240      	bcs.n	3f76 <__aeabi_dadd+0xfe>
    3ef4:	07e4      	lsls	r4, r4, #31
    3ef6:	4619      	mov	r1, r3
    3ef8:	ea44 0055 	orr.w	r0, r4, r5, lsr #1
    3efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3efe:	f240 70ff 	movw	r0, #2047	; 0x7ff
    3f02:	4074      	eors	r4, r6
    3f04:	4073      	eors	r3, r6
    3f06:	0d26      	lsrs	r6, r4, #20
    3f08:	4055      	eors	r5, r2
    3f0a:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    3f0e:	406a      	eors	r2, r5
    3f10:	4281      	cmp	r1, r0
    3f12:	ea85 0502 	eor.w	r5, r5, r2
    3f16:	d1bf      	bne.n	3e98 <__aeabi_dadd+0x20>
    3f18:	0323      	lsls	r3, r4, #12
    3f1a:	f04f 0000 	mov.w	r0, #0
    3f1e:	d136      	bne.n	3f8e <__aeabi_dadd+0x116>
    3f20:	4621      	mov	r1, r4
    3f22:	4628      	mov	r0, r5
    3f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f26:	2f35      	cmp	r7, #53	; 0x35
    3f28:	d911      	bls.n	3f4e <__aeabi_dadd+0xd6>
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	f106 36ff 	add.w	r6, r6, #4294967295
    3f30:	db24      	blt.n	3f7c <__aeabi_dadd+0x104>
    3f32:	eb04 5106 	add.w	r1, r4, r6, lsl #20
    3f36:	4628      	mov	r0, r5
    3f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f3a:	f240 73fe 	movw	r3, #2046	; 0x7fe
    3f3e:	429f      	cmp	r7, r3
    3f40:	d8ea      	bhi.n	3f18 <__aeabi_dadd+0xa0>
    3f42:	2f00      	cmp	r7, #0
    3f44:	d1ec      	bne.n	3f20 <__aeabi_dadd+0xa8>
    3f46:	f004 4100 	and.w	r1, r4, #2147483648	; 0x80000000
    3f4a:	4638      	mov	r0, r7
    3f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f4e:	f1a7 0120 	sub.w	r1, r7, #32
    3f52:	fa23 f001 	lsr.w	r0, r3, r1
    3f56:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    3f5a:	40bb      	lsls	r3, r7
    3f5c:	fa22 f101 	lsr.w	r1, r2, r1
    3f60:	182d      	adds	r5, r5, r0
    3f62:	ea43 0301 	orr.w	r3, r3, r1
    3f66:	d31b      	bcc.n	3fa0 <__aeabi_dadd+0x128>
    3f68:	0612      	lsls	r2, r2, #24
    3f6a:	f104 0401 	add.w	r4, r4, #1
    3f6e:	d0b0      	beq.n	3ed2 <__aeabi_dadd+0x5a>
    3f70:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3f74:	e7ad      	b.n	3ed2 <__aeabi_dadd+0x5a>
    3f76:	3601      	adds	r6, #1
    3f78:	0531      	lsls	r1, r6, #20
    3f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f7c:	3501      	adds	r5, #1
    3f7e:	bf08      	it	eq
    3f80:	3401      	addeq	r4, #1
    3f82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    3f86:	bf08      	it	eq
    3f88:	f025 0501 	biceq.w	r5, r5, #1
    3f8c:	e7d1      	b.n	3f32 <__aeabi_dadd+0xba>
    3f8e:	4906      	ldr	r1, [pc, #24]	; (3fa8 <__aeabi_dadd+0x130>)
    3f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f92:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    3f96:	462b      	mov	r3, r5
    3f98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3f9c:	f7ff be80 	b.w	3ca0 <__aeabi_dsub>
    3fa0:	0612      	lsls	r2, r2, #24
    3fa2:	d1e5      	bne.n	3f70 <__aeabi_dadd+0xf8>
    3fa4:	e7c1      	b.n	3f2a <__aeabi_dadd+0xb2>
    3fa6:	bf00      	nop
    3fa8:	7ff80000 	.word	0x7ff80000

00003fac <__aeabi_d2iz>:
    3fac:	02cb      	lsls	r3, r1, #11
    3fae:	0d0a      	lsrs	r2, r1, #20
    3fb0:	ea43 5050 	orr.w	r0, r3, r0, lsr #21
    3fb4:	f5c2 6383 	rsb	r3, r2, #1048	; 0x418
    3fb8:	3306      	adds	r3, #6
    3fba:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    3fbe:	2bff      	cmp	r3, #255	; 0xff
    3fc0:	fa20 f003 	lsr.w	r0, r0, r3
    3fc4:	d90f      	bls.n	3fe6 <__aeabi_d2iz+0x3a>
    3fc6:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    3fca:	d00d      	beq.n	3fe8 <__aeabi_d2iz+0x3c>
    3fcc:	f011 4080 	ands.w	r0, r1, #1073741824	; 0x40000000
    3fd0:	d009      	beq.n	3fe6 <__aeabi_d2iz+0x3a>
    3fd2:	004b      	lsls	r3, r1, #1
    3fd4:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    3fd8:	d804      	bhi.n	3fe4 <__aeabi_d2iz+0x38>
    3fda:	0fc8      	lsrs	r0, r1, #31
    3fdc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    3fe0:	3801      	subs	r0, #1
    3fe2:	4770      	bx	lr
    3fe4:	2000      	movs	r0, #0
    3fe6:	4770      	bx	lr
    3fe8:	4240      	negs	r0, r0
    3fea:	4770      	bx	lr

00003fec <__bhs_ui2d>:
    3fec:	b1f0      	cbz	r0, 402c <__bhs_ui2d+0x40>
    3fee:	0c03      	lsrs	r3, r0, #16
    3ff0:	bf0c      	ite	eq
    3ff2:	0400      	lsleq	r0, r0, #16
    3ff4:	f101 7180 	addne.w	r1, r1, #16777216	; 0x1000000
    3ff8:	0e03      	lsrs	r3, r0, #24
    3ffa:	bf0c      	ite	eq
    3ffc:	0200      	lsleq	r0, r0, #8
    3ffe:	f501 0100 	addne.w	r1, r1, #8388608	; 0x800000
    4002:	0f03      	lsrs	r3, r0, #28
    4004:	bf0c      	ite	eq
    4006:	0100      	lsleq	r0, r0, #4
    4008:	f501 0180 	addne.w	r1, r1, #4194304	; 0x400000
    400c:	0f83      	lsrs	r3, r0, #30
    400e:	bf0c      	ite	eq
    4010:	0080      	lsleq	r0, r0, #2
    4012:	f501 1100 	addne.w	r1, r1, #2097152	; 0x200000
    4016:	2800      	cmp	r0, #0
    4018:	bfac      	ite	ge
    401a:	0040      	lslge	r0, r0, #1
    401c:	f501 1180 	addlt.w	r1, r1, #1048576	; 0x100000
    4020:	eb01 23e0 	add.w	r3, r1, r0, asr #11
    4024:	0542      	lsls	r2, r0, #21
    4026:	4610      	mov	r0, r2
    4028:	4619      	mov	r1, r3
    402a:	4770      	bx	lr
    402c:	4603      	mov	r3, r0
    402e:	4619      	mov	r1, r3
    4030:	4770      	bx	lr
    4032:	bf00      	nop

00004034 <__aeabi_i2d>:
    4034:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
    4038:	0fc3      	lsrs	r3, r0, #31
    403a:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
    403e:	18d0      	adds	r0, r2, r3
    4040:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4044:	f7ff bfd2 	b.w	3fec <__bhs_ui2d>

00004048 <__aeabi_dcmpeq>:
    4048:	b510      	push	{r4, lr}
    404a:	004c      	lsls	r4, r1, #1
    404c:	ea54 0e00 	orrs.w	lr, r4, r0
    4050:	d102      	bne.n	4058 <__aeabi_dcmpeq+0x10>
    4052:	ea52 0e43 	orrs.w	lr, r2, r3, lsl #1
    4056:	d00b      	beq.n	4070 <__aeabi_dcmpeq+0x28>
    4058:	4299      	cmp	r1, r3
    405a:	d001      	beq.n	4060 <__aeabi_dcmpeq+0x18>
    405c:	2000      	movs	r0, #0
    405e:	bd10      	pop	{r4, pc}
    4060:	4290      	cmp	r0, r2
    4062:	d1fb      	bne.n	405c <__aeabi_dcmpeq+0x14>
    4064:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    4068:	bf8c      	ite	hi
    406a:	2000      	movhi	r0, #0
    406c:	2001      	movls	r0, #1
    406e:	bd10      	pop	{r4, pc}
    4070:	2001      	movs	r0, #1
    4072:	bd10      	pop	{r4, pc}

00004074 <__aeabi_dcmplt>:
    4074:	b430      	push	{r4, r5}
    4076:	ea53 0401 	orrs.w	r4, r3, r1
    407a:	d409      	bmi.n	4090 <__aeabi_dcmplt+0x1c>
    407c:	005c      	lsls	r4, r3, #1
    407e:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    4082:	d802      	bhi.n	408a <__aeabi_dcmplt+0x16>
    4084:	4299      	cmp	r1, r3
    4086:	d317      	bcc.n	40b8 <__aeabi_dcmplt+0x44>
    4088:	d019      	beq.n	40be <__aeabi_dcmplt+0x4a>
    408a:	2000      	movs	r0, #0
    408c:	bc30      	pop	{r4, r5}
    408e:	4770      	bx	lr
    4090:	004d      	lsls	r5, r1, #1
    4092:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    4096:	d8f8      	bhi.n	408a <__aeabi_dcmplt+0x16>
    4098:	005c      	lsls	r4, r3, #1
    409a:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    409e:	d8f4      	bhi.n	408a <__aeabi_dcmplt+0x16>
    40a0:	4305      	orrs	r5, r0
    40a2:	d101      	bne.n	40a8 <__aeabi_dcmplt+0x34>
    40a4:	4314      	orrs	r4, r2
    40a6:	d010      	beq.n	40ca <__aeabi_dcmplt+0x56>
    40a8:	4299      	cmp	r1, r3
    40aa:	d805      	bhi.n	40b8 <__aeabi_dcmplt+0x44>
    40ac:	d1ed      	bne.n	408a <__aeabi_dcmplt+0x16>
    40ae:	4290      	cmp	r0, r2
    40b0:	bf94      	ite	ls
    40b2:	2000      	movls	r0, #0
    40b4:	2001      	movhi	r0, #1
    40b6:	e7e9      	b.n	408c <__aeabi_dcmplt+0x18>
    40b8:	2001      	movs	r0, #1
    40ba:	bc30      	pop	{r4, r5}
    40bc:	4770      	bx	lr
    40be:	4290      	cmp	r0, r2
    40c0:	bf2c      	ite	cs
    40c2:	2000      	movcs	r0, #0
    40c4:	2001      	movcc	r0, #1
    40c6:	bc30      	pop	{r4, r5}
    40c8:	4770      	bx	lr
    40ca:	4620      	mov	r0, r4
    40cc:	e7de      	b.n	408c <__aeabi_dcmplt+0x18>
    40ce:	bf00      	nop

000040d0 <__aeabi_dcmple>:
    40d0:	b430      	push	{r4, r5}
    40d2:	ea53 0401 	orrs.w	r4, r3, r1
    40d6:	d409      	bmi.n	40ec <__aeabi_dcmple+0x1c>
    40d8:	005c      	lsls	r4, r3, #1
    40da:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    40de:	d802      	bhi.n	40e6 <__aeabi_dcmple+0x16>
    40e0:	4299      	cmp	r1, r3
    40e2:	d319      	bcc.n	4118 <__aeabi_dcmple+0x48>
    40e4:	d01b      	beq.n	411e <__aeabi_dcmple+0x4e>
    40e6:	2000      	movs	r0, #0
    40e8:	bc30      	pop	{r4, r5}
    40ea:	4770      	bx	lr
    40ec:	004c      	lsls	r4, r1, #1
    40ee:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    40f2:	d8f8      	bhi.n	40e6 <__aeabi_dcmple+0x16>
    40f4:	005d      	lsls	r5, r3, #1
    40f6:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    40fa:	d8f4      	bhi.n	40e6 <__aeabi_dcmple+0x16>
    40fc:	4299      	cmp	r1, r3
    40fe:	d80b      	bhi.n	4118 <__aeabi_dcmple+0x48>
    4100:	d008      	beq.n	4114 <__aeabi_dcmple+0x44>
    4102:	ea54 0300 	orrs.w	r3, r4, r0
    4106:	d1ee      	bne.n	40e6 <__aeabi_dcmple+0x16>
    4108:	ea55 0302 	orrs.w	r3, r5, r2
    410c:	bf0c      	ite	eq
    410e:	2001      	moveq	r0, #1
    4110:	2000      	movne	r0, #0
    4112:	e7e9      	b.n	40e8 <__aeabi_dcmple+0x18>
    4114:	4290      	cmp	r0, r2
    4116:	d3f4      	bcc.n	4102 <__aeabi_dcmple+0x32>
    4118:	bc30      	pop	{r4, r5}
    411a:	2001      	movs	r0, #1
    411c:	4770      	bx	lr
    411e:	4290      	cmp	r0, r2
    4120:	bf8c      	ite	hi
    4122:	2000      	movhi	r0, #0
    4124:	2001      	movls	r0, #1
    4126:	bc30      	pop	{r4, r5}
    4128:	4770      	bx	lr
    412a:	bf00      	nop

0000412c <__aeabi_dcmpge>:
    412c:	b430      	push	{r4, r5}
    412e:	ea53 0401 	orrs.w	r4, r3, r1
    4132:	ea4f 0441 	mov.w	r4, r1, lsl #1
    4136:	d408      	bmi.n	414a <__aeabi_dcmpge+0x1e>
    4138:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    413c:	d802      	bhi.n	4144 <__aeabi_dcmpge+0x18>
    413e:	4299      	cmp	r1, r3
    4140:	d818      	bhi.n	4174 <__aeabi_dcmpge+0x48>
    4142:	d01a      	beq.n	417a <__aeabi_dcmpge+0x4e>
    4144:	2000      	movs	r0, #0
    4146:	bc30      	pop	{r4, r5}
    4148:	4770      	bx	lr
    414a:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    414e:	d8f9      	bhi.n	4144 <__aeabi_dcmpge+0x18>
    4150:	005d      	lsls	r5, r3, #1
    4152:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    4156:	d8f5      	bhi.n	4144 <__aeabi_dcmpge+0x18>
    4158:	4299      	cmp	r1, r3
    415a:	d30b      	bcc.n	4174 <__aeabi_dcmpge+0x48>
    415c:	d008      	beq.n	4170 <__aeabi_dcmpge+0x44>
    415e:	ea54 0300 	orrs.w	r3, r4, r0
    4162:	d1ef      	bne.n	4144 <__aeabi_dcmpge+0x18>
    4164:	ea55 0302 	orrs.w	r3, r5, r2
    4168:	bf0c      	ite	eq
    416a:	2001      	moveq	r0, #1
    416c:	2000      	movne	r0, #0
    416e:	e7ea      	b.n	4146 <__aeabi_dcmpge+0x1a>
    4170:	4290      	cmp	r0, r2
    4172:	d8f4      	bhi.n	415e <__aeabi_dcmpge+0x32>
    4174:	bc30      	pop	{r4, r5}
    4176:	2001      	movs	r0, #1
    4178:	4770      	bx	lr
    417a:	4290      	cmp	r0, r2
    417c:	bf34      	ite	cc
    417e:	2000      	movcc	r0, #0
    4180:	2001      	movcs	r0, #1
    4182:	bc30      	pop	{r4, r5}
    4184:	4770      	bx	lr
    4186:	bf00      	nop

00004188 <__aeabi_lowlevel_memset>:
    4188:	4603      	mov	r3, r0
    418a:	f013 0f03 	tst.w	r3, #3
    418e:	d10e      	bne.n	41ae <memset1a>
    4190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    4194:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    4198:	ea41 4101 	orr.w	r1, r1, r1, lsl #16

0000419c <__bhs_memset4>:
    419c:	3a04      	subs	r2, #4

0000419e <memset4>:
    419e:	bf24      	itt	cs
    41a0:	f843 1b04 	strcs.w	r1, [r3], #4
    41a4:	f1b2 0204 	subscs.w	r2, r2, #4
    41a8:	d2f9      	bcs.n	419e <memset4>

000041aa <memset1>:
    41aa:	f102 0204 	add.w	r2, r2, #4

000041ae <memset1a>:
    41ae:	3a01      	subs	r2, #1
    41b0:	bf24      	itt	cs
    41b2:	f803 1b01 	strbcs.w	r1, [r3], #1
    41b6:	e7fa      	bcs.n	41ae <memset1a>
    41b8:	4770      	bx	lr

000041ba <__sys_appexit>:
    41ba:	e7fe      	b.n	41ba <__sys_appexit>

000041bc <__sys_close>:
    41bc:	f04f 30ff 	mov.w	r0, #4294967295
    41c0:	4770      	bx	lr

000041c2 <__sys_flen>:
    41c2:	f04f 30ff 	mov.w	r0, #4294967295
    41c6:	4770      	bx	lr

000041c8 <__sys_istty>:
    41c8:	f04f 30ff 	mov.w	r0, #4294967295
    41cc:	4770      	bx	lr

000041ce <__sys_remove>:
    41ce:	f04f 30ff 	mov.w	r0, #4294967295
    41d2:	4770      	bx	lr

000041d4 <__sys_seek>:
    41d4:	f04f 30ff 	mov.w	r0, #4294967295
    41d8:	4770      	bx	lr

000041da <__sys_tmpnam>:
    41da:	f04f 30ff 	mov.w	r0, #4294967295
    41de:	4770      	bx	lr

000041e0 <__sys_write>:
    41e0:	4610      	mov	r0, r2
    41e2:	4770      	bx	lr
    41e4:	746f6f42 	.word	0x746f6f42
    41e8:	64616f6c 	.word	0x64616f6c
    41ec:	69207265 	.word	0x69207265
    41f0:	74732073 	.word	0x74732073
    41f4:	69747261 	.word	0x69747261
    41f8:	0000676e 	.word	0x0000676e
    41fc:	63656843 	.word	0x63656843
    4200:	676e696b 	.word	0x676e696b
    4204:	70706120 	.word	0x70706120
    4208:	6163696c 	.word	0x6163696c
    420c:	6e6f6974 	.word	0x6e6f6974
    4210:	616d6920 	.word	0x616d6920
    4214:	73276567 	.word	0x73276567
    4218:	6c617620 	.word	0x6c617620
    421c:	74696469 	.word	0x74696469
    4220:	00000079 	.word	0x00000079
    4224:	62616e55 	.word	0x62616e55
    4228:	7420656c 	.word	0x7420656c
    422c:	6f6c206f 	.word	0x6f6c206f
    4230:	65746163 	.word	0x65746163
    4234:	796e6120 	.word	0x796e6120
    4238:	6c617620 	.word	0x6c617620
    423c:	69206469 	.word	0x69206469
    4240:	6567616d 	.word	0x6567616d
    4244:	206f7420 	.word	0x206f7420
    4248:	006e7572 	.word	0x006e7572
    424c:	6d697250 	.word	0x6d697250
    4250:	20797261 	.word	0x20797261
    4254:	67616d49 	.word	0x67616d49
    4258:	69732065 	.word	0x69732065
    425c:	2073657a 	.word	0x2073657a
    4260:	25783028 	.word	0x25783028
    4264:	3d3d2058 	.word	0x3d3d2058
    4268:	25783020 	.word	0x25783020
    426c:	000d2958 	.word	0x000d2958
    4270:	6f636553 	.word	0x6f636553
    4274:	7261646e 	.word	0x7261646e
    4278:	6d492079 	.word	0x6d492079
    427c:	20656761 	.word	0x20656761
    4280:	657a6973 	.word	0x657a6973
    4284:	30282073 	.word	0x30282073
    4288:	20582578 	.word	0x20582578
    428c:	30203d3d 	.word	0x30203d3d
    4290:	29582578 	.word	0x29582578
    4294:	0000000d 	.word	0x0000000d
    4298:	68746f42 	.word	0x68746f42
    429c:	616d6920 	.word	0x616d6920
    42a0:	20736567 	.word	0x20736567
    42a4:	20657261 	.word	0x20657261
    42a8:	61766e69 	.word	0x61766e69
    42ac:	0064696c 	.word	0x0064696c
    42b0:	6d697250 	.word	0x6d697250
    42b4:	20797261 	.word	0x20797261
    42b8:	67616d49 	.word	0x67616d49
    42bc:	65762065 	.word	0x65762065
    42c0:	6f697372 	.word	0x6f697372
    42c4:	203d206e 	.word	0x203d206e
    42c8:	58257830 	.word	0x58257830
    42cc:	0000000d 	.word	0x0000000d
    42d0:	6f636553 	.word	0x6f636553
    42d4:	7261646e 	.word	0x7261646e
    42d8:	6d492079 	.word	0x6d492079
    42dc:	20656761 	.word	0x20656761
    42e0:	73726576 	.word	0x73726576
    42e4:	206e6f69 	.word	0x206e6f69
    42e8:	7830203d 	.word	0x7830203d
    42ec:	000d5825 	.word	0x000d5825
    42f0:	63656843 	.word	0x63656843
    42f4:	676e696b 	.word	0x676e696b
    42f8:	43524320 	.word	0x43524320
    42fc:	00000000 	.word	0x00000000
    4300:	6d697250 	.word	0x6d697250
    4304:	20797261 	.word	0x20797261
    4308:	67616d49 	.word	0x67616d49
    430c:	79742065 	.word	0x79742065
    4310:	3d206570 	.word	0x3d206570
    4314:	2c642520 	.word	0x2c642520
    4318:	72657620 	.word	0x72657620
    431c:	6e6f6973 	.word	0x6e6f6973
    4320:	30203d20 	.word	0x30203d20
    4324:	32302578 	.word	0x32302578
    4328:	00000d58 	.word	0x00000d58
    432c:	6f636553 	.word	0x6f636553
    4330:	7261646e 	.word	0x7261646e
    4334:	6d492079 	.word	0x6d492079
    4338:	20656761 	.word	0x20656761
    433c:	65707974 	.word	0x65707974
    4340:	25203d20 	.word	0x25203d20
    4344:	76202c64 	.word	0x76202c64
    4348:	69737265 	.word	0x69737265
    434c:	3d206e6f 	.word	0x3d206e6f
    4350:	25783020 	.word	0x25783020
    4354:	0d583230 	.word	0x0d583230
    4358:	00000000 	.word	0x00000000
    435c:	746f6f42 	.word	0x746f6f42
    4360:	646f4320 	.word	0x646f4320
    4364:	65762065 	.word	0x65762065
    4368:	6f697372 	.word	0x6f697372
    436c:	6425206e 	.word	0x6425206e
    4370:	0064252e 	.word	0x0064252e
    4374:	74726150 	.word	0x74726150
    4378:	3a444920 	.word	0x3a444920
    437c:	20642520 	.word	0x20642520
    4380:	78232528 	.word	0x78232528
    4384:	00000029 	.word	0x00000029
    4388:	69726553 	.word	0x69726553
    438c:	23206c61 	.word	0x23206c61
    4390:	3025203a 	.word	0x3025203a
    4394:	253a5838 	.word	0x253a5838
    4398:	3a583830 	.word	0x3a583830
    439c:	58383025 	.word	0x58383025
    43a0:	3830253a 	.word	0x3830253a
    43a4:	00000058 	.word	0x00000058
    43a8:	69726553 	.word	0x69726553
    43ac:	23206c61 	.word	0x23206c61
    43b0:	3025203a 	.word	0x3025203a
    43b4:	253a5838 	.word	0x253a5838
    43b8:	3a583830 	.word	0x3a583830
    43bc:	58383025 	.word	0x58383025
    43c0:	3830253a 	.word	0x3830253a
    43c4:	00000a58 	.word	0x00000a58
    43c8:	53415245 	.word	0x53415245
    43cc:	4c465f45 	.word	0x4c465f45
    43d0:	00485341 	.word	0x00485341
    43d4:	53414c46 	.word	0x53414c46
    43d8:	4d495f48 	.word	0x4d495f48
    43dc:	00000047 	.word	0x00000047
    43e0:	574f4853 	.word	0x574f4853
    43e4:	00000000 	.word	0x00000000
    43e8:	0000000d 	.word	0x0000000d
    43ec:	0020002b 	.word	0x0020002b
    43f0:	63257830 	.word	0x63257830
    43f4:	00642570 	.word	0x00642570
    43f8:	63255830 	.word	0x63255830
    43fc:	00642550 	.word	0x00642550
    4400:	63257830 	.word	0x63257830
    4404:	2a2e252e 	.word	0x2a2e252e
    4408:	70786c6c 	.word	0x70786c6c
    440c:	30006425 	.word	0x30006425
    4410:	2e632558 	.word	0x2e632558
    4414:	6c2a2e25 	.word	0x6c2a2e25
    4418:	2550586c 	.word	0x2550586c
    441c:	002d0064 	.word	0x002d0064
    4420:	00770072 	.word	0x00770072
    4424:	6c756e28 	.word	0x6c756e28
    4428:	3000296c 	.word	0x3000296c
    442c:	78300058 	.word	0x78300058
    4430:	30003000 	.word	0x30003000
    4434:	34333231 	.word	0x34333231
    4438:	38373635 	.word	0x38373635
    443c:	43424139 	.word	0x43424139
    4440:	00464544 	.word	0x00464544
    4444:	33323130 	.word	0x33323130
    4448:	37363534 	.word	0x37363534
    444c:	62613938 	.word	0x62613938
    4450:	66656463 	.word	0x66656463
    4454:	00          	.byte	0x00
    4455:	2a          	.byte	0x2a
    4456:	2a2a      	.short	0x2a2a
    4458:	73435f20 	.word	0x73435f20
    445c:	615f7379 	.word	0x615f7379
    4460:	636f6c6c 	.word	0x636f6c6c
    4464:	69616620 	.word	0x69616620
    4468:	0a64656c 	.word	0x0a64656c
    446c:	00000000 	.word	0x00000000

00004470 <__huge_vall>:
    4470:	ffffffff 7fefffff                       ........
