
secBootLoader.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
	is_gps_valid = 0;
	return FAIL;
}


double GPS_CalculateDistance() {
       0:	00 80 00 10 71 01 00 00 e9 01 00 00 f1 01 00 00     ....q...........
	char buffer[200];
	double local_prev_lat = 0;
      10:	f9 01 00 00 01 02 00 00 09 02 00 00 00 00 00 00     ................
	...
	double local_last_lat = 0;
	int count = sprintf(buffer,"Last Lat : %.10f, Last Lon= %.10f,Prev Lat : %.10f, Prev Lon= %.10f\r\r", last_lat,last_lon,prev_lat,prev_lon);
      2c:	11 02 00 00 19 02 00 00 00 00 00 00 21 02 00 00     ............!...
      3c:	09 26 00 00 81 31 00 00 31 02 00 00 31 02 00 00     .&...1..1...1...
      4c:	31 02 00 00 31 02 00 00 6d 27 00 00 75 28 00 00     1...1...m'..u(..
      5c:	7d 29 00 00 89 2a 00 00 31 02 00 00 4d 13 00 00     })...*..1...M...
	UARTSend(PORT_TRACE, buffer, count);
      6c:	91 16 00 00 31 02 00 00 31 02 00 00 31 02 00 00     ....1...1...1...
	if (is_gps_valid == 0 || last_lat == 0 || last_lon == 0 || prev_lat == 0 || prev_lon == 0){
      7c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      8c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      9c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      ac:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      bc:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...

000000cc <__data_section_table>:
      cc:	000074c8 	.word	0x000074c8
      d0:	10000000 	.word	0x10000000
      d4:	0000001c 	.word	0x0000001c
      d8:	000074c8 	.word	0x000074c8
      dc:	2007c000 	.word	0x2007c000
      e0:	00000000 	.word	0x00000000

000000e4 <__bss_section_table>:
      e4:	10000020 	.word	0x10000020
		TraceNL("GPS_CalculateDistance returns..");
      e8:	00001b38 	.word	0x00001b38
		return 0;
      ec:	2007c000 	.word	0x2007c000
      f0:	00000000 	.word	0x00000000

000000f4 <data_init>:
      f4:	b480      	push	{r7}
	}
	/////// Convert ddMM to degrees
	double R = 6371000; // m
      f6:	b089      	sub	sp, #36	; 0x24
      f8:	af00      	add	r7, sp, #0
      fa:	60f8      	str	r0, [r7, #12]
      fc:	60b9      	str	r1, [r7, #8]
      fe:	607a      	str	r2, [r7, #4]
	double dLat = (last_lat-prev_lat) * 0.0174532925; // To Radian
     100:	68bb      	ldr	r3, [r7, #8]
     102:	61fb      	str	r3, [r7, #28]
     104:	68fb      	ldr	r3, [r7, #12]
     106:	61bb      	str	r3, [r7, #24]
     108:	2300      	movs	r3, #0
     10a:	617b      	str	r3, [r7, #20]
     10c:	e00a      	b.n	124 <data_init+0x30>
     10e:	69fb      	ldr	r3, [r7, #28]
     110:	1d1a      	adds	r2, r3, #4
     112:	61fa      	str	r2, [r7, #28]
     114:	69ba      	ldr	r2, [r7, #24]
     116:	1d11      	adds	r1, r2, #4
     118:	61b9      	str	r1, [r7, #24]
     11a:	6812      	ldr	r2, [r2, #0]
     11c:	601a      	str	r2, [r3, #0]
     11e:	697b      	ldr	r3, [r7, #20]
     120:	3304      	adds	r3, #4
     122:	617b      	str	r3, [r7, #20]
     124:	697a      	ldr	r2, [r7, #20]
     126:	687b      	ldr	r3, [r7, #4]
     128:	429a      	cmp	r2, r3
	double dLon = (last_lon-prev_lon) * 0.0174532925; //To Radian
     12a:	d3f0      	bcc.n	10e <data_init+0x1a>
     12c:	3724      	adds	r7, #36	; 0x24
     12e:	46bd      	mov	sp, r7
     130:	f85d 7b04 	ldr.w	r7, [sp], #4
     134:	4770      	bx	lr
     136:	bf00      	nop

00000138 <bss_init>:
     138:	b480      	push	{r7}
     13a:	b085      	sub	sp, #20
     13c:	af00      	add	r7, sp, #0
     13e:	6078      	str	r0, [r7, #4]
     140:	6039      	str	r1, [r7, #0]
     142:	687b      	ldr	r3, [r7, #4]
     144:	60fb      	str	r3, [r7, #12]
     146:	2300      	movs	r3, #0
     148:	60bb      	str	r3, [r7, #8]
     14a:	e007      	b.n	15c <bss_init+0x24>
     14c:	68fb      	ldr	r3, [r7, #12]
     14e:	1d1a      	adds	r2, r3, #4
     150:	60fa      	str	r2, [r7, #12]
     152:	2200      	movs	r2, #0
	local_prev_lat = prev_lat * 0.0174532925;
     154:	601a      	str	r2, [r3, #0]
     156:	68bb      	ldr	r3, [r7, #8]
     158:	3304      	adds	r3, #4
     15a:	60bb      	str	r3, [r7, #8]
     15c:	68ba      	ldr	r2, [r7, #8]
     15e:	683b      	ldr	r3, [r7, #0]
     160:	429a      	cmp	r2, r3
     162:	d3f3      	bcc.n	14c <bss_init+0x14>
     164:	3714      	adds	r7, #20
     166:	46bd      	mov	sp, r7
     168:	f85d 7b04 	ldr.w	r7, [sp], #4
     16c:	4770      	bx	lr
     16e:	bf00      	nop

00000170 <ResetISR>:
     170:	b580      	push	{r7, lr}
     172:	b084      	sub	sp, #16
	local_last_lat = last_lat * 0.0174532925;
     174:	af00      	add	r7, sp, #0
     176:	4b19      	ldr	r3, [pc, #100]	; (1dc <ResetISR+0x6c>)
     178:	60fb      	str	r3, [r7, #12]
     17a:	e013      	b.n	1a4 <ResetISR+0x34>
     17c:	68fb      	ldr	r3, [r7, #12]
     17e:	1d1a      	adds	r2, r3, #4
     180:	60fa      	str	r2, [r7, #12]
     182:	681b      	ldr	r3, [r3, #0]
     184:	60bb      	str	r3, [r7, #8]
     186:	68fb      	ldr	r3, [r7, #12]
     188:	1d1a      	adds	r2, r3, #4
     18a:	60fa      	str	r2, [r7, #12]
     18c:	681b      	ldr	r3, [r3, #0]
     18e:	607b      	str	r3, [r7, #4]
     190:	68fb      	ldr	r3, [r7, #12]
     192:	1d1a      	adds	r2, r3, #4
	double a = sin(dLat/2) * sin(dLat/2) + sin(dLon/2) * sin(dLon/2) * cos(local_last_lat) * cos(local_last_lat);
     194:	60fa      	str	r2, [r7, #12]
     196:	681b      	ldr	r3, [r3, #0]
     198:	603b      	str	r3, [r7, #0]
     19a:	68b8      	ldr	r0, [r7, #8]
     19c:	6879      	ldr	r1, [r7, #4]
     19e:	683a      	ldr	r2, [r7, #0]
     1a0:	f7ff ffa8 	bl	f4 <data_init>
     1a4:	68fb      	ldr	r3, [r7, #12]
     1a6:	4a0e      	ldr	r2, [pc, #56]	; (1e0 <ResetISR+0x70>)
     1a8:	4293      	cmp	r3, r2
     1aa:	d3e7      	bcc.n	17c <ResetISR+0xc>
     1ac:	e00d      	b.n	1ca <ResetISR+0x5a>
     1ae:	68fb      	ldr	r3, [r7, #12]
     1b0:	1d1a      	adds	r2, r3, #4
     1b2:	60fa      	str	r2, [r7, #12]
     1b4:	681b      	ldr	r3, [r3, #0]
     1b6:	607b      	str	r3, [r7, #4]
     1b8:	68fb      	ldr	r3, [r7, #12]
     1ba:	1d1a      	adds	r2, r3, #4
     1bc:	60fa      	str	r2, [r7, #12]
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	603b      	str	r3, [r7, #0]
     1c2:	6878      	ldr	r0, [r7, #4]
     1c4:	6839      	ldr	r1, [r7, #0]
     1c6:	f7ff ffb7 	bl	138 <bss_init>
     1ca:	68fb      	ldr	r3, [r7, #12]
     1cc:	4a05      	ldr	r2, [pc, #20]	; (1e4 <ResetISR+0x74>)
     1ce:	4293      	cmp	r3, r2
     1d0:	d3ed      	bcc.n	1ae <ResetISR+0x3e>
     1d2:	f003 fb37 	bl	3844 <SystemInit>
     1d6:	f003 fba5 	bl	3924 <__main>
     1da:	e7fe      	b.n	1da <ResetISR+0x6a>
     1dc:	000000cc 	.word	0x000000cc
     1e0:	000000e4 	.word	0x000000e4
     1e4:	000000f4 	.word	0x000000f4

000001e8 <NMI_Handler>:
     1e8:	b480      	push	{r7}
     1ea:	af00      	add	r7, sp, #0
     1ec:	e7fe      	b.n	1ec <NMI_Handler+0x4>
     1ee:	bf00      	nop

000001f0 <HardFault_Handler>:
     1f0:	b480      	push	{r7}
     1f2:	af00      	add	r7, sp, #0
     1f4:	e7fe      	b.n	1f4 <HardFault_Handler+0x4>
     1f6:	bf00      	nop

000001f8 <MemManage_Handler>:
     1f8:	b480      	push	{r7}
     1fa:	af00      	add	r7, sp, #0
     1fc:	e7fe      	b.n	1fc <MemManage_Handler+0x4>
     1fe:	bf00      	nop

00000200 <BusFault_Handler>:
     200:	b480      	push	{r7}
     202:	af00      	add	r7, sp, #0
     204:	e7fe      	b.n	204 <BusFault_Handler+0x4>
     206:	bf00      	nop

00000208 <UsageFault_Handler>:
     208:	b480      	push	{r7}
     20a:	af00      	add	r7, sp, #0
     20c:	e7fe      	b.n	20c <UsageFault_Handler+0x4>
     20e:	bf00      	nop

00000210 <SVC_Handler>:
     210:	b480      	push	{r7}
     212:	af00      	add	r7, sp, #0
     214:	e7fe      	b.n	214 <SVC_Handler+0x4>
     216:	bf00      	nop

00000218 <DebugMon_Handler>:
     218:	b480      	push	{r7}
     21a:	af00      	add	r7, sp, #0
     21c:	e7fe      	b.n	21c <DebugMon_Handler+0x4>
     21e:	bf00      	nop

00000220 <PendSV_Handler>:
     220:	b480      	push	{r7}
     222:	af00      	add	r7, sp, #0
     224:	e7fe      	b.n	224 <PendSV_Handler+0x4>
     226:	bf00      	nop
     228:	b480      	push	{r7}
     22a:	af00      	add	r7, sp, #0
     22c:	e7fe      	b.n	22c <PendSV_Handler+0xc>
     22e:	bf00      	nop

00000230 <ADC_IRQHandler>:
     230:	b480      	push	{r7}
     232:	af00      	add	r7, sp, #0
     234:	e7fe      	b.n	234 <ADC_IRQHandler+0x4>
     236:	bf00      	nop
     238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     23c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     24c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     25c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     26c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     27c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	double c = 2 * atan2(sqrt(a), sqrt(1-a));
     280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     28c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     29c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	double d = R * c;
     2c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	if (d > 50000) {
     2dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
		TraceNL("GPS_CalculateDistance greater than 50000, returning 0.");
     2f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
		return 0;
     2f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000002fc <CRP_WORD>:
     2fc:	ffff ffff                                   ....

00000300 <LoadParams>:
     300:	b580      	push	{r7, lr}
     302:	b0b2      	sub	sp, #200	; 0xc8
     304:	af00      	add	r7, sp, #0
     306:	4b54      	ldr	r3, [pc, #336]	; (458 <LoadParams+0x158>)
     308:	681b      	ldr	r3, [r3, #0]
     30a:	2200      	movs	r2, #0
     30c:	461a      	mov	r2, r3
     30e:	4610      	mov	r0, r2
     310:	4952      	ldr	r1, [pc, #328]	; (45c <LoadParams+0x15c>)
     312:	f000 fb2b 	bl	96c <EEPROM_LoadString>
     316:	4b51      	ldr	r3, [pc, #324]	; (45c <LoadParams+0x15c>)
     318:	781b      	ldrb	r3, [r3, #0]
     31a:	3380      	adds	r3, #128	; 0x80
     31c:	4a50      	ldr	r2, [pc, #320]	; (460 <LoadParams+0x160>)
     31e:	5cd3      	ldrb	r3, [r2, r3]
     320:	f003 0338 	and.w	r3, r3, #56	; 0x38
     324:	2b00      	cmp	r3, #0
     326:	d00c      	beq.n	342 <LoadParams+0x42>
     328:	484c      	ldr	r0, [pc, #304]	; (45c <LoadParams+0x15c>)
     32a:	f005 f835 	bl	5398 <strlen>
     32e:	4603      	mov	r3, r0
     330:	2b04      	cmp	r3, #4
     332:	d906      	bls.n	342 <LoadParams+0x42>
     334:	4849      	ldr	r0, [pc, #292]	; (45c <LoadParams+0x15c>)
     336:	212e      	movs	r1, #46	; 0x2e
     338:	f005 f800 	bl	533c <strchr>
	}
	TraceNL("*****************");
     33c:	4603      	mov	r3, r0
     33e:	2b00      	cmp	r3, #0
     340:	d103      	bne.n	34a <LoadParams+0x4a>
	TraceNL("*******");
     342:	4846      	ldr	r0, [pc, #280]	; (45c <LoadParams+0x15c>)
     344:	4947      	ldr	r1, [pc, #284]	; (464 <LoadParams+0x164>)
     346:	f005 f806 	bl	5356 <strcpy>
	TraceNL("**");
     34a:	4b47      	ldr	r3, [pc, #284]	; (468 <LoadParams+0x168>)
     34c:	681b      	ldr	r3, [r3, #0]
	TraceNL("*");
     34e:	2200      	movs	r2, #0
     350:	461a      	mov	r2, r3
     352:	4610      	mov	r0, r2
	count = sprintf(buffer,"GPS Distance= %.10f\r", d);
     354:	f000 fa98 	bl	888 <EEPROM_LoadInt64>
     358:	4602      	mov	r2, r0
     35a:	460b      	mov	r3, r1
     35c:	4b43      	ldr	r3, [pc, #268]	; (46c <LoadParams+0x16c>)
     35e:	601a      	str	r2, [r3, #0]
     360:	4b42      	ldr	r3, [pc, #264]	; (46c <LoadParams+0x16c>)
     362:	681b      	ldr	r3, [r3, #0]
     364:	2b00      	cmp	r3, #0
	UARTSend(PORT_TRACE, buffer, count);
     366:	d005      	beq.n	374 <LoadParams+0x74>
     368:	4b40      	ldr	r3, [pc, #256]	; (46c <LoadParams+0x16c>)
     36a:	681b      	ldr	r3, [r3, #0]
     36c:	f64f 72ff 	movw	r2, #65535	; 0xffff
     370:	4293      	cmp	r3, r2
     372:	d103      	bne.n	37c <LoadParams+0x7c>
     374:	4b3d      	ldr	r3, [pc, #244]	; (46c <LoadParams+0x16c>)
	TraceNL("*****************");
     376:	f241 72c1 	movw	r2, #6081	; 0x17c1
     37a:	601a      	str	r2, [r3, #0]
	TraceNL("*******");
     37c:	4b3c      	ldr	r3, [pc, #240]	; (470 <LoadParams+0x170>)
     37e:	681b      	ldr	r3, [r3, #0]
     380:	2200      	movs	r2, #0
	TraceNL("**");
     382:	461a      	mov	r2, r3
     384:	4610      	mov	r0, r2
     386:	493b      	ldr	r1, [pc, #236]	; (474 <LoadParams+0x174>)
	TraceNL("*");
     388:	f000 faf0 	bl	96c <EEPROM_LoadString>
     38c:	4b39      	ldr	r3, [pc, #228]	; (474 <LoadParams+0x174>)
	/*if (d < 1)
		d=0;*///Active in production
	return d;
     38e:	781b      	ldrb	r3, [r3, #0]
     390:	3380      	adds	r3, #128	; 0x80
}
     392:	4a33      	ldr	r2, [pc, #204]	; (460 <LoadParams+0x160>)
     394:	5cd3      	ldrb	r3, [r2, r3]
     396:	f003 0338 	and.w	r3, r3, #56	; 0x38
     39a:	2b00      	cmp	r3, #0
     39c:	d005      	beq.n	3aa <LoadParams+0xaa>
     39e:	4835      	ldr	r0, [pc, #212]	; (474 <LoadParams+0x174>)
     3a0:	f004 fffa 	bl	5398 <strlen>
     3a4:	4603      	mov	r3, r0
     3a6:	2b02      	cmp	r3, #2
     3a8:	d803      	bhi.n	3b2 <LoadParams+0xb2>
     3aa:	4832      	ldr	r0, [pc, #200]	; (474 <LoadParams+0x174>)
     3ac:	4932      	ldr	r1, [pc, #200]	; (478 <LoadParams+0x178>)
     3ae:	f004 ffd2 	bl	5356 <strcpy>
     3b2:	4b32      	ldr	r3, [pc, #200]	; (47c <LoadParams+0x17c>)
	//LOAD APN
	EEPROM_LoadString(cal_apn, per_apn_val);
	if (isalnum(per_apn_val[0]) == 0 || strlen(per_apn_val) < 3)
		strcpy(per_apn_val, "internet");//Default value
	//LOAD APN User
	EEPROM_LoadString(cal_apn_user, per_apnuser_val);
     3b4:	681b      	ldr	r3, [r3, #0]
     3b6:	2200      	movs	r2, #0
     3b8:	461a      	mov	r2, r3
     3ba:	4610      	mov	r0, r2
     3bc:	4930      	ldr	r1, [pc, #192]	; (480 <LoadParams+0x180>)
     3be:	f000 fad5 	bl	96c <EEPROM_LoadString>
	if (isalnum(per_apnuser_val[0]) == 0 || strlen(per_apnuser_val) < 3)
     3c2:	4b2f      	ldr	r3, [pc, #188]	; (480 <LoadParams+0x180>)
     3c4:	781b      	ldrb	r3, [r3, #0]
     3c6:	3380      	adds	r3, #128	; 0x80
     3c8:	4a25      	ldr	r2, [pc, #148]	; (460 <LoadParams+0x160>)
     3ca:	5cd3      	ldrb	r3, [r2, r3]
     3cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
     3d0:	2b00      	cmp	r3, #0
     3d2:	d005      	beq.n	3e0 <LoadParams+0xe0>
     3d4:	482a      	ldr	r0, [pc, #168]	; (480 <LoadParams+0x180>)
     3d6:	f004 ffdf 	bl	5398 <strlen>
     3da:	4603      	mov	r3, r0
     3dc:	2b02      	cmp	r3, #2
     3de:	d803      	bhi.n	3e8 <LoadParams+0xe8>
		strcpy(per_apnuser_val, "vodafone");//Default value
     3e0:	4827      	ldr	r0, [pc, #156]	; (480 <LoadParams+0x180>)
     3e2:	4928      	ldr	r1, [pc, #160]	; (484 <LoadParams+0x184>)
     3e4:	f004 ffb7 	bl	5356 <strcpy>
	//LOAD APN Pass
	EEPROM_LoadString(cal_apn_pass, per_apnpass_val);
     3e8:	4b27      	ldr	r3, [pc, #156]	; (488 <LoadParams+0x188>)
     3ea:	681b      	ldr	r3, [r3, #0]
     3ec:	2200      	movs	r2, #0
     3ee:	461a      	mov	r2, r3
     3f0:	4610      	mov	r0, r2
     3f2:	4926      	ldr	r1, [pc, #152]	; (48c <LoadParams+0x18c>)
     3f4:	f000 faba 	bl	96c <EEPROM_LoadString>
	if (isalnum(per_apnpass_val[0]) == 0 || strlen(per_apnpass_val) < 3)
     3f8:	4b24      	ldr	r3, [pc, #144]	; (48c <LoadParams+0x18c>)
     3fa:	781b      	ldrb	r3, [r3, #0]
     3fc:	3380      	adds	r3, #128	; 0x80
     3fe:	4a18      	ldr	r2, [pc, #96]	; (460 <LoadParams+0x160>)
     400:	5cd3      	ldrb	r3, [r2, r3]
     402:	f003 0338 	and.w	r3, r3, #56	; 0x38
     406:	2b00      	cmp	r3, #0
     408:	d005      	beq.n	416 <LoadParams+0x116>
     40a:	4820      	ldr	r0, [pc, #128]	; (48c <LoadParams+0x18c>)
     40c:	f004 ffc4 	bl	5398 <strlen>
     410:	4603      	mov	r3, r0
     412:	2b02      	cmp	r3, #2
     414:	d803      	bhi.n	41e <LoadParams+0x11e>
		strcpy(per_apnpass_val, "vodafone");//Default value
     416:	481d      	ldr	r0, [pc, #116]	; (48c <LoadParams+0x18c>)
     418:	491a      	ldr	r1, [pc, #104]	; (484 <LoadParams+0x184>)
     41a:	f004 ff9c 	bl	5356 <strcpy>

	//LOAD Mileage
	per_mileage_val = EEPROM_LoadInt64(cal_mileage);
     41e:	4b1c      	ldr	r3, [pc, #112]	; (490 <LoadParams+0x190>)
     420:	681b      	ldr	r3, [r3, #0]
     422:	2200      	movs	r2, #0
     424:	461a      	mov	r2, r3
     426:	4610      	mov	r0, r2
     428:	f000 fa2e 	bl	888 <EEPROM_LoadInt64>
     42c:	4602      	mov	r2, r0
     42e:	460b      	mov	r3, r1
     430:	4918      	ldr	r1, [pc, #96]	; (494 <LoadParams+0x194>)
     432:	e9c1 2300 	strd	r2, r3, [r1]
	sprintf(buffer, "Mileage: %d\n", (int)per_mileage_val);
     436:	4b17      	ldr	r3, [pc, #92]	; (494 <LoadParams+0x194>)
     438:	e9d3 2300 	ldrd	r2, r3, [r3]
     43c:	463b      	mov	r3, r7
     43e:	4618      	mov	r0, r3
     440:	4915      	ldr	r1, [pc, #84]	; (498 <LoadParams+0x198>)
     442:	f003 fb41 	bl	3ac8 <sprintf>
	TraceNL(buffer);
     446:	463b      	mov	r3, r7
     448:	4618      	mov	r0, r3
     44a:	f002 f911 	bl	2670 <TraceNL>
	LoadTimings();
     44e:	f000 f825 	bl	49c <LoadTimings>

	//MODE 0 = Deep Power Down
	//MODE 1 = Power Down
}
     452:	37c8      	adds	r7, #200	; 0xc8
     454:	46bd      	mov	sp, r7
     456:	bd80      	pop	{r7, pc}
     458:	10000bb8 	.word	0x10000bb8
     45c:	10000b38 	.word	0x10000b38
     460:	000072d4 	.word	0x000072d4
     464:	0000638c 	.word	0x0000638c
     468:	10000bb4 	.word	0x10000bb4
     46c:	10000ba8 	.word	0x10000ba8
     470:	10000bf0 	.word	0x10000bf0
     474:	10000bf4 	.word	0x10000bf4
     478:	0000639c 	.word	0x0000639c
     47c:	10000ba4 	.word	0x10000ba4
     480:	10000b88 	.word	0x10000b88
     484:	000063a8 	.word	0x000063a8
     488:	10000b2c 	.word	0x10000b2c
     48c:	10000bd8 	.word	0x10000bd8
     490:	10000b78 	.word	0x10000b78
     494:	10000bc8 	.word	0x10000bc8
     498:	000063b4 	.word	0x000063b4

0000049c <LoadTimings>:

void LoadTimings() {
     49c:	b580      	push	{r7, lr}
     49e:	b0b4      	sub	sp, #208	; 0xd0
     4a0:	af00      	add	r7, sp, #0
	char buffer[200];
	//LOAD Ignition On Period
	per_ignonperiod_val = EEPROM_LoadInt64(cal_ign_on_period);
     4a2:	4b98      	ldr	r3, [pc, #608]	; (704 <LoadTimings+0x268>)
     4a4:	681b      	ldr	r3, [r3, #0]
     4a6:	2200      	movs	r2, #0
     4a8:	461a      	mov	r2, r3
     4aa:	4610      	mov	r0, r2
     4ac:	f000 f9ec 	bl	888 <EEPROM_LoadInt64>
     4b0:	4602      	mov	r2, r0
     4b2:	460b      	mov	r3, r1
     4b4:	4b94      	ldr	r3, [pc, #592]	; (708 <LoadTimings+0x26c>)
     4b6:	601a      	str	r2, [r3, #0]
	if (per_ignonperiod_val == 0 || per_ignonperiod_val > 14400)
     4b8:	4b93      	ldr	r3, [pc, #588]	; (708 <LoadTimings+0x26c>)
     4ba:	681b      	ldr	r3, [r3, #0]
     4bc:	2b00      	cmp	r3, #0
     4be:	d004      	beq.n	4ca <LoadTimings+0x2e>
     4c0:	4b91      	ldr	r3, [pc, #580]	; (708 <LoadTimings+0x26c>)
     4c2:	681b      	ldr	r3, [r3, #0]
     4c4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     4c8:	dd02      	ble.n	4d0 <LoadTimings+0x34>
		per_ignonperiod_val = 60;
     4ca:	4b8f      	ldr	r3, [pc, #572]	; (708 <LoadTimings+0x26c>)
     4cc:	223c      	movs	r2, #60	; 0x3c
     4ce:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignonperiod_val: %d\n", (int)per_ignonperiod_val);
     4d0:	4b8d      	ldr	r3, [pc, #564]	; (708 <LoadTimings+0x26c>)
     4d2:	681b      	ldr	r3, [r3, #0]
     4d4:	1d3a      	adds	r2, r7, #4
     4d6:	4610      	mov	r0, r2
     4d8:	498c      	ldr	r1, [pc, #560]	; (70c <LoadTimings+0x270>)
     4da:	461a      	mov	r2, r3
     4dc:	f003 faf4 	bl	3ac8 <sprintf>
	TraceNL(buffer);
     4e0:	1d3b      	adds	r3, r7, #4
     4e2:	4618      	mov	r0, r3
     4e4:	f002 f8c4 	bl	2670 <TraceNL>
	//LOAD Ignition Off Period
	per_ignoffperiod_val = (int)EEPROM_LoadInt64(cal_ign_off_period);
     4e8:	4b89      	ldr	r3, [pc, #548]	; (710 <LoadTimings+0x274>)
     4ea:	681b      	ldr	r3, [r3, #0]
     4ec:	2200      	movs	r2, #0
     4ee:	461a      	mov	r2, r3
     4f0:	4610      	mov	r0, r2
     4f2:	f000 f9c9 	bl	888 <EEPROM_LoadInt64>
     4f6:	4602      	mov	r2, r0
     4f8:	460b      	mov	r3, r1
     4fa:	4b86      	ldr	r3, [pc, #536]	; (714 <LoadTimings+0x278>)
     4fc:	601a      	str	r2, [r3, #0]
	int original_per_ignoffperiod_val = per_ignoffperiod_val;
     4fe:	4b85      	ldr	r3, [pc, #532]	; (714 <LoadTimings+0x278>)
     500:	681b      	ldr	r3, [r3, #0]
     502:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (per_ignoffperiod_val == 0 || per_ignoffperiod_val > 14400) //4 hours max.
     506:	4b83      	ldr	r3, [pc, #524]	; (714 <LoadTimings+0x278>)
     508:	681b      	ldr	r3, [r3, #0]
     50a:	2b00      	cmp	r3, #0
     50c:	d004      	beq.n	518 <LoadTimings+0x7c>
     50e:	4b81      	ldr	r3, [pc, #516]	; (714 <LoadTimings+0x278>)
     510:	681b      	ldr	r3, [r3, #0]
     512:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     516:	dd02      	ble.n	51e <LoadTimings+0x82>
		per_ignoffperiod_val = 120;
     518:	4b7e      	ldr	r3, [pc, #504]	; (714 <LoadTimings+0x278>)
     51a:	2278      	movs	r2, #120	; 0x78
     51c:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignoffperiod_val: %d, per_ignoffperiod_val(original): %d\n", (int)per_ignoffperiod_val,(int)original_per_ignoffperiod_val);
     51e:	4b7d      	ldr	r3, [pc, #500]	; (714 <LoadTimings+0x278>)
     520:	681b      	ldr	r3, [r3, #0]
     522:	1d3a      	adds	r2, r7, #4
     524:	4610      	mov	r0, r2
     526:	497c      	ldr	r1, [pc, #496]	; (718 <LoadTimings+0x27c>)
     528:	461a      	mov	r2, r3
     52a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
     52e:	f003 facb 	bl	3ac8 <sprintf>
	TraceNL(buffer);
     532:	1d3b      	adds	r3, r7, #4
     534:	4618      	mov	r0, r3
     536:	f002 f89b 	bl	2670 <TraceNL>
	//LOAD Ignition On Roaming Period
	per_ignonroamingperiod_val = (int)EEPROM_LoadInt64(cal_ign_on_roaming_period);
     53a:	4b78      	ldr	r3, [pc, #480]	; (71c <LoadTimings+0x280>)
     53c:	681b      	ldr	r3, [r3, #0]
     53e:	2200      	movs	r2, #0
     540:	461a      	mov	r2, r3
     542:	4610      	mov	r0, r2
     544:	f000 f9a0 	bl	888 <EEPROM_LoadInt64>
     548:	4602      	mov	r2, r0
     54a:	460b      	mov	r3, r1
     54c:	4b74      	ldr	r3, [pc, #464]	; (720 <LoadTimings+0x284>)
     54e:	601a      	str	r2, [r3, #0]
	if (per_ignonroamingperiod_val == 0 || per_ignonroamingperiod_val > 14400)
     550:	4b73      	ldr	r3, [pc, #460]	; (720 <LoadTimings+0x284>)
     552:	681b      	ldr	r3, [r3, #0]
     554:	2b00      	cmp	r3, #0
     556:	d004      	beq.n	562 <LoadTimings+0xc6>
     558:	4b71      	ldr	r3, [pc, #452]	; (720 <LoadTimings+0x284>)
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     560:	dd03      	ble.n	56a <LoadTimings+0xce>
		per_ignonroamingperiod_val = 1800;
     562:	4b6f      	ldr	r3, [pc, #444]	; (720 <LoadTimings+0x284>)
     564:	f44f 62e1 	mov.w	r2, #1800	; 0x708
     568:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignonroamingperiod_val: %d\n", (int)per_ignonroamingperiod_val);
     56a:	4b6d      	ldr	r3, [pc, #436]	; (720 <LoadTimings+0x284>)
     56c:	681b      	ldr	r3, [r3, #0]
     56e:	1d3a      	adds	r2, r7, #4
     570:	4610      	mov	r0, r2
     572:	496c      	ldr	r1, [pc, #432]	; (724 <LoadTimings+0x288>)
     574:	461a      	mov	r2, r3
     576:	f003 faa7 	bl	3ac8 <sprintf>
	TraceNL(buffer);
     57a:	1d3b      	adds	r3, r7, #4
     57c:	4618      	mov	r0, r3
     57e:	f002 f877 	bl	2670 <TraceNL>
	//LOAD Ignition Off Roaming Period
	per_ignoffroamingperiod_val = (int)EEPROM_LoadInt64(cal_ign_off_roaming_period);
     582:	4b69      	ldr	r3, [pc, #420]	; (728 <LoadTimings+0x28c>)
     584:	681b      	ldr	r3, [r3, #0]
     586:	2200      	movs	r2, #0
     588:	461a      	mov	r2, r3
     58a:	4610      	mov	r0, r2
     58c:	f000 f97c 	bl	888 <EEPROM_LoadInt64>
     590:	4602      	mov	r2, r0
     592:	460b      	mov	r3, r1
     594:	4b65      	ldr	r3, [pc, #404]	; (72c <LoadTimings+0x290>)
     596:	601a      	str	r2, [r3, #0]
	if (per_ignoffroamingperiod_val == 0 || per_ignoffroamingperiod_val > 14400)
     598:	4b64      	ldr	r3, [pc, #400]	; (72c <LoadTimings+0x290>)
     59a:	681b      	ldr	r3, [r3, #0]
     59c:	2b00      	cmp	r3, #0
     59e:	d004      	beq.n	5aa <LoadTimings+0x10e>
     5a0:	4b62      	ldr	r3, [pc, #392]	; (72c <LoadTimings+0x290>)
     5a2:	681b      	ldr	r3, [r3, #0]
     5a4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     5a8:	dd03      	ble.n	5b2 <LoadTimings+0x116>
		per_ignoffroamingperiod_val = 7200;
     5aa:	4b60      	ldr	r3, [pc, #384]	; (72c <LoadTimings+0x290>)
     5ac:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
     5b0:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignoffroamingperiod_val: %d\n", (int)per_ignoffroamingperiod_val);
     5b2:	4b5e      	ldr	r3, [pc, #376]	; (72c <LoadTimings+0x290>)
     5b4:	681b      	ldr	r3, [r3, #0]
     5b6:	1d3a      	adds	r2, r7, #4
     5b8:	4610      	mov	r0, r2
     5ba:	495d      	ldr	r1, [pc, #372]	; (730 <LoadTimings+0x294>)
     5bc:	461a      	mov	r2, r3
     5be:	f003 fa83 	bl	3ac8 <sprintf>
	TraceNL(buffer);
     5c2:	1d3b      	adds	r3, r7, #4
     5c4:	4618      	mov	r0, r3
     5c6:	f002 f853 	bl	2670 <TraceNL>
	per_lowpow_just_wake = (int)EEPROM_LoadInt64(cal_lowpow_just_wake);
     5ca:	4b5a      	ldr	r3, [pc, #360]	; (734 <LoadTimings+0x298>)
     5cc:	681b      	ldr	r3, [r3, #0]
     5ce:	2200      	movs	r2, #0
     5d0:	461a      	mov	r2, r3
     5d2:	4610      	mov	r0, r2
     5d4:	f000 f958 	bl	888 <EEPROM_LoadInt64>
     5d8:	4602      	mov	r2, r0
     5da:	460b      	mov	r3, r1
     5dc:	4b56      	ldr	r3, [pc, #344]	; (738 <LoadTimings+0x29c>)
     5de:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_just_wake: %d\n", (int)per_lowpow_just_wake);
     5e0:	4b55      	ldr	r3, [pc, #340]	; (738 <LoadTimings+0x29c>)
     5e2:	681b      	ldr	r3, [r3, #0]
     5e4:	1d3a      	adds	r2, r7, #4
     5e6:	4610      	mov	r0, r2
     5e8:	4954      	ldr	r1, [pc, #336]	; (73c <LoadTimings+0x2a0>)
     5ea:	461a      	mov	r2, r3
     5ec:	f003 fa6c 	bl	3ac8 <sprintf>
	TraceNL(buffer);
     5f0:	1d3b      	adds	r3, r7, #4
     5f2:	4618      	mov	r0, r3
     5f4:	f002 f83c 	bl	2670 <TraceNL>
	per_lowpow_cancel = (int)EEPROM_LoadInt64(cal_lowpow_cancel);
     5f8:	4b51      	ldr	r3, [pc, #324]	; (740 <LoadTimings+0x2a4>)
     5fa:	681b      	ldr	r3, [r3, #0]
     5fc:	2200      	movs	r2, #0
     5fe:	461a      	mov	r2, r3
     600:	4610      	mov	r0, r2
     602:	f000 f941 	bl	888 <EEPROM_LoadInt64>
     606:	4602      	mov	r2, r0
     608:	460b      	mov	r3, r1
     60a:	4b4e      	ldr	r3, [pc, #312]	; (744 <LoadTimings+0x2a8>)
     60c:	601a      	str	r2, [r3, #0]
	if (per_lowpow_cancel > 2)
     60e:	4b4d      	ldr	r3, [pc, #308]	; (744 <LoadTimings+0x2a8>)
     610:	681b      	ldr	r3, [r3, #0]
     612:	2b02      	cmp	r3, #2
     614:	dd02      	ble.n	61c <LoadTimings+0x180>
		per_lowpow_cancel = 0;
     616:	4b4b      	ldr	r3, [pc, #300]	; (744 <LoadTimings+0x2a8>)
     618:	2200      	movs	r2, #0
     61a:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_cancel: %d\n", (int)per_lowpow_cancel);
     61c:	4b49      	ldr	r3, [pc, #292]	; (744 <LoadTimings+0x2a8>)
     61e:	681b      	ldr	r3, [r3, #0]
     620:	1d3a      	adds	r2, r7, #4
     622:	4610      	mov	r0, r2
     624:	4948      	ldr	r1, [pc, #288]	; (748 <LoadTimings+0x2ac>)
     626:	461a      	mov	r2, r3
     628:	f003 fa4e 	bl	3ac8 <sprintf>
	TraceNL(buffer);
     62c:	1d3b      	adds	r3, r7, #4
     62e:	4618      	mov	r0, r3
     630:	f002 f81e 	bl	2670 <TraceNL>
	//LOAD Low Power Wake Up Period
	per_lowpow_period = (int)EEPROM_LoadInt64(cal_lowpow_period);
     634:	4b45      	ldr	r3, [pc, #276]	; (74c <LoadTimings+0x2b0>)
     636:	681b      	ldr	r3, [r3, #0]
     638:	2200      	movs	r2, #0
     63a:	461a      	mov	r2, r3
     63c:	4610      	mov	r0, r2
     63e:	f000 f923 	bl	888 <EEPROM_LoadInt64>
     642:	4602      	mov	r2, r0
     644:	460b      	mov	r3, r1
     646:	4b42      	ldr	r3, [pc, #264]	; (750 <LoadTimings+0x2b4>)
     648:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_period(original): %d\n", (int)per_lowpow_period);
     64a:	4b41      	ldr	r3, [pc, #260]	; (750 <LoadTimings+0x2b4>)
     64c:	681b      	ldr	r3, [r3, #0]
     64e:	1d3a      	adds	r2, r7, #4
     650:	4610      	mov	r0, r2
     652:	4940      	ldr	r1, [pc, #256]	; (754 <LoadTimings+0x2b8>)
     654:	461a      	mov	r2, r3
     656:	f003 fa37 	bl	3ac8 <sprintf>
	TraceNL(buffer);
     65a:	1d3b      	adds	r3, r7, #4
     65c:	4618      	mov	r0, r3
     65e:	f002 f807 	bl	2670 <TraceNL>
	if (per_lowpow_period < 1 || per_lowpow_period > 2880){ //No period more than 2 days.
     662:	4b3b      	ldr	r3, [pc, #236]	; (750 <LoadTimings+0x2b4>)
     664:	681b      	ldr	r3, [r3, #0]
     666:	2b00      	cmp	r3, #0
     668:	dd04      	ble.n	674 <LoadTimings+0x1d8>
     66a:	4b39      	ldr	r3, [pc, #228]	; (750 <LoadTimings+0x2b4>)
     66c:	681b      	ldr	r3, [r3, #0]
     66e:	f5b3 6f34 	cmp.w	r3, #2880	; 0xb40
     672:	dd02      	ble.n	67a <LoadTimings+0x1de>
		per_lowpow_period = 59;
     674:	4b36      	ldr	r3, [pc, #216]	; (750 <LoadTimings+0x2b4>)
     676:	223b      	movs	r2, #59	; 0x3b
     678:	601a      	str	r2, [r3, #0]
		#endif
		#ifdef CABINET_DEMO
			per_lowpow_period = 15; //59;//1Hour
		#endif
	}
	sprintf(buffer, "per_lowpow_period: %d\n", (int)per_lowpow_period);
     67a:	4b35      	ldr	r3, [pc, #212]	; (750 <LoadTimings+0x2b4>)
     67c:	681b      	ldr	r3, [r3, #0]
     67e:	1d3a      	adds	r2, r7, #4
     680:	4610      	mov	r0, r2
     682:	4935      	ldr	r1, [pc, #212]	; (758 <LoadTimings+0x2bc>)
     684:	461a      	mov	r2, r3
     686:	f003 fa1f 	bl	3ac8 <sprintf>
	TraceNL(buffer);
     68a:	1d3b      	adds	r3, r7, #4
     68c:	4618      	mov	r0, r3
     68e:	f001 ffef 	bl	2670 <TraceNL>
	per_lowpow_mode = (int)EEPROM_LoadInt64(cal_lowpow_mode);
     692:	4b32      	ldr	r3, [pc, #200]	; (75c <LoadTimings+0x2c0>)
     694:	681b      	ldr	r3, [r3, #0]
     696:	2200      	movs	r2, #0
     698:	461a      	mov	r2, r3
     69a:	4610      	mov	r0, r2
     69c:	f000 f8f4 	bl	888 <EEPROM_LoadInt64>
     6a0:	4602      	mov	r2, r0
     6a2:	460b      	mov	r3, r1
     6a4:	4b2e      	ldr	r3, [pc, #184]	; (760 <LoadTimings+0x2c4>)
     6a6:	601a      	str	r2, [r3, #0]
	if (per_lowpow_mode > 2){
     6a8:	4b2d      	ldr	r3, [pc, #180]	; (760 <LoadTimings+0x2c4>)
     6aa:	681b      	ldr	r3, [r3, #0]
     6ac:	2b02      	cmp	r3, #2
     6ae:	dd02      	ble.n	6b6 <LoadTimings+0x21a>
		per_lowpow_mode = 0;
     6b0:	4b2b      	ldr	r3, [pc, #172]	; (760 <LoadTimings+0x2c4>)
     6b2:	2200      	movs	r2, #0
     6b4:	601a      	str	r2, [r3, #0]
		#ifdef CABINET_DEMO
			per_lowpow_mode = 1; //Light sleep
		#endif
	}
	sprintf(buffer, "per_lowpow_mode: %d\n", (int)per_lowpow_mode);
     6b6:	4b2a      	ldr	r3, [pc, #168]	; (760 <LoadTimings+0x2c4>)
     6b8:	681b      	ldr	r3, [r3, #0]
     6ba:	1d3a      	adds	r2, r7, #4
     6bc:	4610      	mov	r0, r2
     6be:	4929      	ldr	r1, [pc, #164]	; (764 <LoadTimings+0x2c8>)
     6c0:	461a      	mov	r2, r3
     6c2:	f003 fa01 	bl	3ac8 <sprintf>
	TraceNL(buffer);
     6c6:	1d3b      	adds	r3, r7, #4
     6c8:	4618      	mov	r0, r3
     6ca:	f001 ffd1 	bl	2670 <TraceNL>
	per_coffe_counter = (int)EEPROM_LoadInt64(cal_coffee_counter);
     6ce:	4b26      	ldr	r3, [pc, #152]	; (768 <LoadTimings+0x2cc>)
     6d0:	681b      	ldr	r3, [r3, #0]
     6d2:	2200      	movs	r2, #0
     6d4:	461a      	mov	r2, r3
     6d6:	4610      	mov	r0, r2
     6d8:	f000 f8d6 	bl	888 <EEPROM_LoadInt64>
     6dc:	4602      	mov	r2, r0
     6de:	460b      	mov	r3, r1
     6e0:	4b22      	ldr	r3, [pc, #136]	; (76c <LoadTimings+0x2d0>)
     6e2:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_coffee_counter: %d\n", (int)per_coffe_counter);
     6e4:	4b21      	ldr	r3, [pc, #132]	; (76c <LoadTimings+0x2d0>)
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	1d3a      	adds	r2, r7, #4
     6ea:	4610      	mov	r0, r2
     6ec:	4920      	ldr	r1, [pc, #128]	; (770 <LoadTimings+0x2d4>)
     6ee:	461a      	mov	r2, r3
     6f0:	f003 f9ea 	bl	3ac8 <sprintf>
	TraceNL(buffer);
     6f4:	1d3b      	adds	r3, r7, #4
     6f6:	4618      	mov	r0, r3
     6f8:	f001 ffba 	bl	2670 <TraceNL>
}
     6fc:	37d0      	adds	r7, #208	; 0xd0
     6fe:	46bd      	mov	sp, r7
     700:	bd80      	pop	{r7, pc}
     702:	bf00      	nop
     704:	10000b60 	.word	0x10000b60
     708:	10000b68 	.word	0x10000b68
     70c:	000063c4 	.word	0x000063c4
     710:	10000bd0 	.word	0x10000bd0
     714:	10000b30 	.word	0x10000b30
     718:	000063e0 	.word	0x000063e0
     71c:	10000b80 	.word	0x10000b80
     720:	10000b64 	.word	0x10000b64
     724:	00006420 	.word	0x00006420
     728:	10000bb0 	.word	0x10000bb0
     72c:	10000bd4 	.word	0x10000bd4
     730:	00006440 	.word	0x00006440
     734:	10000bbc 	.word	0x10000bbc
     738:	10000b7c 	.word	0x10000b7c
     73c:	00006464 	.word	0x00006464
     740:	10000b84 	.word	0x10000b84
     744:	10000bc0 	.word	0x10000bc0
     748:	00006480 	.word	0x00006480
     74c:	10000bec 	.word	0x10000bec
     750:	10000b28 	.word	0x10000b28
     754:	00006498 	.word	0x00006498
     758:	000064bc 	.word	0x000064bc
     75c:	10000b6c 	.word	0x10000b6c
     760:	10000b70 	.word	0x10000b70
     764:	000064d4 	.word	0x000064d4
     768:	10000b74 	.word	0x10000b74
     76c:	10000bc4 	.word	0x10000bc4
     770:	000064ec 	.word	0x000064ec

00000774 <EEPROM_Init>:

void PersistParams() {
	EEPROM_SaveInt64(cal_mileage,per_mileage_val);
}

uint8_t EEPROM_Init() {
     774:	b580      	push	{r7, lr}
     776:	af00      	add	r7, sp, #0
	//Initialize EEPROM Memory Map -- 256x8
	test.StartPos = 0;
     778:	4b33      	ldr	r3, [pc, #204]	; (848 <EEPROM_Init+0xd4>)
     77a:	2200      	movs	r2, #0
     77c:	805a      	strh	r2, [r3, #2]
	test.Length = 2;
     77e:	4b32      	ldr	r3, [pc, #200]	; (848 <EEPROM_Init+0xd4>)
     780:	2202      	movs	r2, #2
     782:	801a      	strh	r2, [r3, #0]
	//Calibration test, ip, port, apn, apn_user, apn_pass, ign_on_period, ign_off_period, ign_on_roaming_period, ign_off_roaming_period, mileage;
	cal_port.StartPos = 6;
     784:	4b31      	ldr	r3, [pc, #196]	; (84c <EEPROM_Init+0xd8>)
     786:	2206      	movs	r2, #6
     788:	805a      	strh	r2, [r3, #2]
	cal_port.Length = 2;
     78a:	4b30      	ldr	r3, [pc, #192]	; (84c <EEPROM_Init+0xd8>)
     78c:	2202      	movs	r2, #2
     78e:	801a      	strh	r2, [r3, #0]
	cal_apn.StartPos = 8;
     790:	4b2f      	ldr	r3, [pc, #188]	; (850 <EEPROM_Init+0xdc>)
     792:	2208      	movs	r2, #8
     794:	805a      	strh	r2, [r3, #2]
	cal_apn.Length = 25;
     796:	4b2e      	ldr	r3, [pc, #184]	; (850 <EEPROM_Init+0xdc>)
     798:	2219      	movs	r2, #25
     79a:	801a      	strh	r2, [r3, #0]
	cal_apn_user.StartPos = 33;
     79c:	4b2d      	ldr	r3, [pc, #180]	; (854 <EEPROM_Init+0xe0>)
     79e:	2221      	movs	r2, #33	; 0x21
     7a0:	805a      	strh	r2, [r3, #2]
	cal_apn_user.Length = 12;
     7a2:	4b2c      	ldr	r3, [pc, #176]	; (854 <EEPROM_Init+0xe0>)
     7a4:	220c      	movs	r2, #12
     7a6:	801a      	strh	r2, [r3, #0]
	cal_apn_pass.StartPos = 45;
     7a8:	4b2b      	ldr	r3, [pc, #172]	; (858 <EEPROM_Init+0xe4>)
     7aa:	222d      	movs	r2, #45	; 0x2d
     7ac:	805a      	strh	r2, [r3, #2]
	cal_apn_pass.Length = 12;
     7ae:	4b2a      	ldr	r3, [pc, #168]	; (858 <EEPROM_Init+0xe4>)
     7b0:	220c      	movs	r2, #12
     7b2:	801a      	strh	r2, [r3, #0]
	cal_ign_on_period.StartPos = 57;
     7b4:	4b29      	ldr	r3, [pc, #164]	; (85c <EEPROM_Init+0xe8>)
     7b6:	2239      	movs	r2, #57	; 0x39
     7b8:	805a      	strh	r2, [r3, #2]
	cal_ign_on_period.Length = 2;
     7ba:	4b28      	ldr	r3, [pc, #160]	; (85c <EEPROM_Init+0xe8>)
     7bc:	2202      	movs	r2, #2
     7be:	801a      	strh	r2, [r3, #0]
	cal_lowpow_period.StartPos = 59;
     7c0:	4b27      	ldr	r3, [pc, #156]	; (860 <EEPROM_Init+0xec>)
     7c2:	223b      	movs	r2, #59	; 0x3b
     7c4:	805a      	strh	r2, [r3, #2]
	cal_lowpow_period.Length = 2;
     7c6:	4b26      	ldr	r3, [pc, #152]	; (860 <EEPROM_Init+0xec>)
     7c8:	2202      	movs	r2, #2
     7ca:	801a      	strh	r2, [r3, #0]
	cal_ign_on_roaming_period.StartPos = 61;
     7cc:	4b25      	ldr	r3, [pc, #148]	; (864 <EEPROM_Init+0xf0>)
     7ce:	223d      	movs	r2, #61	; 0x3d
     7d0:	805a      	strh	r2, [r3, #2]
	cal_ign_on_roaming_period.Length = 2;
     7d2:	4b24      	ldr	r3, [pc, #144]	; (864 <EEPROM_Init+0xf0>)
     7d4:	2202      	movs	r2, #2
     7d6:	801a      	strh	r2, [r3, #0]
	cal_ign_off_roaming_period.StartPos = 63;
     7d8:	4b23      	ldr	r3, [pc, #140]	; (868 <EEPROM_Init+0xf4>)
     7da:	223f      	movs	r2, #63	; 0x3f
     7dc:	805a      	strh	r2, [r3, #2]
	cal_ign_off_roaming_period.Length = 2;
     7de:	4b22      	ldr	r3, [pc, #136]	; (868 <EEPROM_Init+0xf4>)
     7e0:	2202      	movs	r2, #2
     7e2:	801a      	strh	r2, [r3, #0]
	cal_mileage.StartPos = 65;
     7e4:	4b21      	ldr	r3, [pc, #132]	; (86c <EEPROM_Init+0xf8>)
     7e6:	2241      	movs	r2, #65	; 0x41
     7e8:	805a      	strh	r2, [r3, #2]
	cal_mileage.Length = 8;
     7ea:	4b20      	ldr	r3, [pc, #128]	; (86c <EEPROM_Init+0xf8>)
     7ec:	2208      	movs	r2, #8
     7ee:	801a      	strh	r2, [r3, #0]
	cal_ip.StartPos = 73;
     7f0:	4b1f      	ldr	r3, [pc, #124]	; (870 <EEPROM_Init+0xfc>)
     7f2:	2249      	movs	r2, #73	; 0x49
     7f4:	805a      	strh	r2, [r3, #2]
	cal_ip.Length = 25;
     7f6:	4b1e      	ldr	r3, [pc, #120]	; (870 <EEPROM_Init+0xfc>)
     7f8:	2219      	movs	r2, #25
     7fa:	801a      	strh	r2, [r3, #0]
	cal_ign_off_period.StartPos = 98;
     7fc:	4b1d      	ldr	r3, [pc, #116]	; (874 <EEPROM_Init+0x100>)
     7fe:	2262      	movs	r2, #98	; 0x62
     800:	805a      	strh	r2, [r3, #2]
	cal_ign_off_period.Length = 2;
     802:	4b1c      	ldr	r3, [pc, #112]	; (874 <EEPROM_Init+0x100>)
     804:	2202      	movs	r2, #2
     806:	801a      	strh	r2, [r3, #0]
	cal_lowpow_just_wake.StartPos = 100;
     808:	4b1b      	ldr	r3, [pc, #108]	; (878 <EEPROM_Init+0x104>)
     80a:	2264      	movs	r2, #100	; 0x64
     80c:	805a      	strh	r2, [r3, #2]
	cal_lowpow_just_wake.Length = 2;
     80e:	4b1a      	ldr	r3, [pc, #104]	; (878 <EEPROM_Init+0x104>)
     810:	2202      	movs	r2, #2
     812:	801a      	strh	r2, [r3, #0]
	cal_lowpow_cancel.StartPos = 102;
     814:	4b19      	ldr	r3, [pc, #100]	; (87c <EEPROM_Init+0x108>)
     816:	2266      	movs	r2, #102	; 0x66
     818:	805a      	strh	r2, [r3, #2]
	cal_lowpow_cancel.Length = 2;
     81a:	4b18      	ldr	r3, [pc, #96]	; (87c <EEPROM_Init+0x108>)
     81c:	2202      	movs	r2, #2
     81e:	801a      	strh	r2, [r3, #0]
	cal_lowpow_mode.StartPos = 104;
     820:	4b17      	ldr	r3, [pc, #92]	; (880 <EEPROM_Init+0x10c>)
     822:	2268      	movs	r2, #104	; 0x68
     824:	805a      	strh	r2, [r3, #2]
	cal_lowpow_mode.Length = 2;
     826:	4b16      	ldr	r3, [pc, #88]	; (880 <EEPROM_Init+0x10c>)
     828:	2202      	movs	r2, #2
     82a:	801a      	strh	r2, [r3, #0]
	cal_coffee_counter.StartPos = 106;
     82c:	4b15      	ldr	r3, [pc, #84]	; (884 <EEPROM_Init+0x110>)
     82e:	226a      	movs	r2, #106	; 0x6a
     830:	805a      	strh	r2, [r3, #2]
	cal_coffee_counter.Length = 2;
     832:	4b14      	ldr	r3, [pc, #80]	; (884 <EEPROM_Init+0x110>)
     834:	2202      	movs	r2, #2
     836:	801a      	strh	r2, [r3, #0]
 	return I2CInit(1,((uint32_t)I2CMASTER) == 0);
     838:	2001      	movs	r0, #1
     83a:	2100      	movs	r1, #0
     83c:	f001 f91a 	bl	1a74 <I2CInit>
     840:	4603      	mov	r3, r0
     842:	b2db      	uxtb	r3, r3
}
     844:	4618      	mov	r0, r3
     846:	bd80      	pop	{r7, pc}
     848:	10000ba0 	.word	0x10000ba0
     84c:	10000bb4 	.word	0x10000bb4
     850:	10000bf0 	.word	0x10000bf0
     854:	10000ba4 	.word	0x10000ba4
     858:	10000b2c 	.word	0x10000b2c
     85c:	10000b60 	.word	0x10000b60
     860:	10000bec 	.word	0x10000bec
     864:	10000b80 	.word	0x10000b80
     868:	10000bb0 	.word	0x10000bb0
     86c:	10000b78 	.word	0x10000b78
     870:	10000bb8 	.word	0x10000bb8
     874:	10000bd0 	.word	0x10000bd0
     878:	10000bbc 	.word	0x10000bbc
     87c:	10000b84 	.word	0x10000b84
     880:	10000b6c 	.word	0x10000b6c
     884:	10000b74 	.word	0x10000b74

00000888 <EEPROM_LoadInt64>:

uint64_t EEPROM_LoadInt64(Calibration cal) {
     888:	b580      	push	{r7, lr}
     88a:	b086      	sub	sp, #24
     88c:	af00      	add	r7, sp, #0
     88e:	6078      	str	r0, [r7, #4]
	int index = 0;
     890:	2300      	movs	r3, #0
     892:	617b      	str	r3, [r7, #20]
	uint64_t result = 0;
     894:	f04f 0200 	mov.w	r2, #0
     898:	f04f 0300 	mov.w	r3, #0
     89c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for (index=0; index < cal.Length; index++) {
     8a0:	2300      	movs	r3, #0
     8a2:	617b      	str	r3, [r7, #20]
     8a4:	e055      	b.n	952 <EEPROM_LoadInt64+0xca>
		if (cal.Length > 2)
     8a6:	88bb      	ldrh	r3, [r7, #4]
     8a8:	2b02      	cmp	r3, #2
     8aa:	d926      	bls.n	8fa <EEPROM_LoadInt64+0x72>
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFFFFFF);
     8ac:	88fb      	ldrh	r3, [r7, #6]
     8ae:	b2da      	uxtb	r2, r3
     8b0:	697b      	ldr	r3, [r7, #20]
     8b2:	b2db      	uxtb	r3, r3
     8b4:	4413      	add	r3, r2
     8b6:	b2db      	uxtb	r3, r3
     8b8:	2001      	movs	r0, #1
     8ba:	4619      	mov	r1, r3
     8bc:	f001 f9c0 	bl	1c40 <i2c_read>
     8c0:	4603      	mov	r3, r0
     8c2:	461a      	mov	r2, r3
     8c4:	88bb      	ldrh	r3, [r7, #4]
     8c6:	4619      	mov	r1, r3
     8c8:	697b      	ldr	r3, [r7, #20]
     8ca:	1acb      	subs	r3, r1, r3
     8cc:	3b01      	subs	r3, #1
     8ce:	00db      	lsls	r3, r3, #3
     8d0:	fa02 f303 	lsl.w	r3, r2, r3
     8d4:	461a      	mov	r2, r3
     8d6:	f04f 0300 	mov.w	r3, #0
     8da:	f04f 30ff 	mov.w	r0, #4294967295
     8de:	f04f 0100 	mov.w	r1, #0
     8e2:	ea02 0200 	and.w	r2, r2, r0
     8e6:	ea03 0301 	and.w	r3, r3, r1
     8ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     8ee:	1812      	adds	r2, r2, r0
     8f0:	eb43 0301 	adc.w	r3, r3, r1
     8f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
     8f8:	e025      	b.n	946 <EEPROM_LoadInt64+0xbe>
		else
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFF);
     8fa:	88fb      	ldrh	r3, [r7, #6]
     8fc:	b2da      	uxtb	r2, r3
     8fe:	697b      	ldr	r3, [r7, #20]
     900:	b2db      	uxtb	r3, r3
     902:	4413      	add	r3, r2
     904:	b2db      	uxtb	r3, r3
     906:	2001      	movs	r0, #1
     908:	4619      	mov	r1, r3
     90a:	f001 f999 	bl	1c40 <i2c_read>
     90e:	4603      	mov	r3, r0
     910:	461a      	mov	r2, r3
     912:	88bb      	ldrh	r3, [r7, #4]
     914:	4619      	mov	r1, r3
     916:	697b      	ldr	r3, [r7, #20]
     918:	1acb      	subs	r3, r1, r3
     91a:	3b01      	subs	r3, #1
     91c:	00db      	lsls	r3, r3, #3
     91e:	fa02 f303 	lsl.w	r3, r2, r3
     922:	461a      	mov	r2, r3
     924:	f04f 0300 	mov.w	r3, #0
     928:	f64f 70ff 	movw	r0, #65535	; 0xffff
     92c:	f04f 0100 	mov.w	r1, #0
     930:	ea02 0200 	and.w	r2, r2, r0
     934:	ea03 0301 	and.w	r3, r3, r1
     938:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     93c:	1812      	adds	r2, r2, r0
     93e:	eb43 0301 	adc.w	r3, r3, r1
     942:	e9c7 2302 	strd	r2, r3, [r7, #8]
		DelayMs(10);
     946:	200a      	movs	r0, #10
     948:	f001 fe6c 	bl	2624 <DelayMs>
}

uint64_t EEPROM_LoadInt64(Calibration cal) {
	int index = 0;
	uint64_t result = 0;
	for (index=0; index < cal.Length; index++) {
     94c:	697b      	ldr	r3, [r7, #20]
     94e:	3301      	adds	r3, #1
     950:	617b      	str	r3, [r7, #20]
     952:	88bb      	ldrh	r3, [r7, #4]
     954:	461a      	mov	r2, r3
     956:	697b      	ldr	r3, [r7, #20]
     958:	429a      	cmp	r2, r3
     95a:	dca4      	bgt.n	8a6 <EEPROM_LoadInt64+0x1e>
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFFFFFF);
		else
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFF);
		DelayMs(10);
	}
	return result;
     95c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
     960:	4610      	mov	r0, r2
     962:	4619      	mov	r1, r3
     964:	3718      	adds	r7, #24
     966:	46bd      	mov	sp, r7
     968:	bd80      	pop	{r7, pc}
     96a:	bf00      	nop

0000096c <EEPROM_LoadString>:
	i2c_write(1,cal.StartPos + index, '\0');
	DelayMs(10);
	return 1;
}

void EEPROM_LoadString(Calibration cal,  char* str){
     96c:	b590      	push	{r4, r7, lr}
     96e:	b085      	sub	sp, #20
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
     974:	6039      	str	r1, [r7, #0]
	int index = 0;
     976:	2300      	movs	r3, #0
     978:	60fb      	str	r3, [r7, #12]
	for (index=0; index < cal.Length; index++) {
     97a:	2300      	movs	r3, #0
     97c:	60fb      	str	r3, [r7, #12]
     97e:	e01b      	b.n	9b8 <EEPROM_LoadString+0x4c>
		str[index] = i2c_read(1,cal.StartPos + index);
     980:	68fb      	ldr	r3, [r7, #12]
     982:	683a      	ldr	r2, [r7, #0]
     984:	18d4      	adds	r4, r2, r3
     986:	88fb      	ldrh	r3, [r7, #6]
     988:	b2da      	uxtb	r2, r3
     98a:	68fb      	ldr	r3, [r7, #12]
     98c:	b2db      	uxtb	r3, r3
     98e:	4413      	add	r3, r2
     990:	b2db      	uxtb	r3, r3
     992:	2001      	movs	r0, #1
     994:	4619      	mov	r1, r3
     996:	f001 f953 	bl	1c40 <i2c_read>
     99a:	4603      	mov	r3, r0
     99c:	7023      	strb	r3, [r4, #0]
		DelayMs(10);
     99e:	200a      	movs	r0, #10
     9a0:	f001 fe40 	bl	2624 <DelayMs>
		if (str[index] == '\0')
     9a4:	68fb      	ldr	r3, [r7, #12]
     9a6:	683a      	ldr	r2, [r7, #0]
     9a8:	4413      	add	r3, r2
     9aa:	781b      	ldrb	r3, [r3, #0]
     9ac:	2b00      	cmp	r3, #0
     9ae:	d100      	bne.n	9b2 <EEPROM_LoadString+0x46>
			break;
     9b0:	e007      	b.n	9c2 <EEPROM_LoadString+0x56>
	return 1;
}

void EEPROM_LoadString(Calibration cal,  char* str){
	int index = 0;
	for (index=0; index < cal.Length; index++) {
     9b2:	68fb      	ldr	r3, [r7, #12]
     9b4:	3301      	adds	r3, #1
     9b6:	60fb      	str	r3, [r7, #12]
     9b8:	88bb      	ldrh	r3, [r7, #4]
     9ba:	461a      	mov	r2, r3
     9bc:	68fb      	ldr	r3, [r7, #12]
     9be:	429a      	cmp	r2, r3
     9c0:	dcde      	bgt.n	980 <EEPROM_LoadString+0x14>
		str[index] = i2c_read(1,cal.StartPos + index);
		DelayMs(10);
		if (str[index] == '\0')
			break;
	}
}
     9c2:	3714      	adds	r7, #20
     9c4:	46bd      	mov	sp, r7
     9c6:	bd90      	pop	{r4, r7, pc}

000009c8 <GSM_SendAt>:
unsigned long int last_hard_reset = -1;
int connectionFailCount = 0;
#define LBS 1

uint16_t GSM_SendAt( char* cmd, char *response, int delay )
{
     9c8:	b580      	push	{r7, lr}
     9ca:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
     9ce:	af00      	add	r7, sp, #0
     9d0:	f107 030c 	add.w	r3, r7, #12
     9d4:	6018      	str	r0, [r3, #0]
     9d6:	f107 0308 	add.w	r3, r7, #8
     9da:	6019      	str	r1, [r3, #0]
     9dc:	1d3b      	adds	r3, r7, #4
     9de:	601a      	str	r2, [r3, #0]
//	}*/

	char buffer[1000];
	uint16_t	len;

	sprintf( buffer, "---> %s\r\n", cmd );
     9e0:	f107 0210 	add.w	r2, r7, #16
     9e4:	f107 030c 	add.w	r3, r7, #12
     9e8:	4610      	mov	r0, r2
     9ea:	4924      	ldr	r1, [pc, #144]	; (a7c <GSM_SendAt+0xb4>)
     9ec:	681a      	ldr	r2, [r3, #0]
     9ee:	f003 f86b 	bl	3ac8 <sprintf>
	TraceDumpHex( buffer, strlen( buffer ) );
     9f2:	f107 0310 	add.w	r3, r7, #16
     9f6:	4618      	mov	r0, r3
     9f8:	f004 fcce 	bl	5398 <strlen>
     9fc:	4602      	mov	r2, r0
     9fe:	f107 0310 	add.w	r3, r7, #16
     a02:	4618      	mov	r0, r3
     a04:	4611      	mov	r1, r2
     a06:	f001 fe75 	bl	26f4 <TraceDumpHex>

	int count = sprintf( buffer, "%s\r\n", cmd );
     a0a:	f107 0210 	add.w	r2, r7, #16
     a0e:	f107 030c 	add.w	r3, r7, #12
     a12:	4610      	mov	r0, r2
     a14:	491a      	ldr	r1, [pc, #104]	; (a80 <GSM_SendAt+0xb8>)
     a16:	681a      	ldr	r2, [r3, #0]
     a18:	f003 f856 	bl	3ac8 <sprintf>
     a1c:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc
	UARTSend( PORT_GSM, buffer, count );
     a20:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
     a24:	f107 0210 	add.w	r2, r7, #16
     a28:	2001      	movs	r0, #1
     a2a:	4611      	mov	r1, r2
     a2c:	461a      	mov	r2, r3
     a2e:	f002 fa39 	bl	2ea4 <UARTSend>

	DelayMs( delay );
     a32:	1d3b      	adds	r3, r7, #4
     a34:	681b      	ldr	r3, [r3, #0]
     a36:	4618      	mov	r0, r3
     a38:	f001 fdf4 	bl	2624 <DelayMs>

	len = ReadUart( response, PORT_GSM );
     a3c:	f107 0308 	add.w	r3, r7, #8
     a40:	6818      	ldr	r0, [r3, #0]
     a42:	2101      	movs	r1, #1
     a44:	f002 faca 	bl	2fdc <ReadUart>
     a48:	4603      	mov	r3, r0
     a4a:	f8a7 33fa 	strh.w	r3, [r7, #1018]	; 0x3fa
	response[len] = '\0';
     a4e:	f8b7 33fa 	ldrh.w	r3, [r7, #1018]	; 0x3fa
     a52:	f107 0208 	add.w	r2, r7, #8
     a56:	6812      	ldr	r2, [r2, #0]
     a58:	4413      	add	r3, r2
     a5a:	2200      	movs	r2, #0
     a5c:	701a      	strb	r2, [r3, #0]

	TraceDumpHex( response, len );
     a5e:	f8b7 23fa 	ldrh.w	r2, [r7, #1018]	; 0x3fa
     a62:	f107 0308 	add.w	r3, r7, #8
     a66:	6818      	ldr	r0, [r3, #0]
     a68:	4611      	mov	r1, r2
     a6a:	f001 fe43 	bl	26f4 <TraceDumpHex>

    return ( len );
     a6e:	f8b7 33fa 	ldrh.w	r3, [r7, #1018]	; 0x3fa
}
     a72:	4618      	mov	r0, r3
     a74:	f507 6780 	add.w	r7, r7, #1024	; 0x400
     a78:	46bd      	mov	sp, r7
     a7a:	bd80      	pop	{r7, pc}
     a7c:	00006504 	.word	0x00006504
     a80:	00006510 	.word	0x00006510

00000a84 <GSM_TCP_Recv>:



int16_t GSM_TCP_Recv( char* pDataBuf, int16_t maxBytes )
{
     a84:	b580      	push	{r7, lr}
     a86:	b082      	sub	sp, #8
     a88:	af00      	add	r7, sp, #0
     a8a:	6078      	str	r0, [r7, #4]
     a8c:	460b      	mov	r3, r1
     a8e:	807b      	strh	r3, [r7, #2]
	Trace( "Entered GSM_TCP_Recv" );
     a90:	4807      	ldr	r0, [pc, #28]	; (ab0 <GSM_TCP_Recv+0x2c>)
     a92:	f001 fddd 	bl	2650 <Trace>

	return ( GSM_SendAt( "AT+QIRD=1,1,0,200", pDataBuf, 1000 ) );
     a96:	4807      	ldr	r0, [pc, #28]	; (ab4 <GSM_TCP_Recv+0x30>)
     a98:	6879      	ldr	r1, [r7, #4]
     a9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     a9e:	f7ff ff93 	bl	9c8 <GSM_SendAt>
     aa2:	4603      	mov	r3, r0
     aa4:	b29b      	uxth	r3, r3
     aa6:	b21b      	sxth	r3, r3
}
     aa8:	4618      	mov	r0, r3
     aaa:	3708      	adds	r7, #8
     aac:	46bd      	mov	sp, r7
     aae:	bd80      	pop	{r7, pc}
     ab0:	00006518 	.word	0x00006518
     ab4:	00006530 	.word	0x00006530

00000ab8 <GSM_ConnectToTrioUpgradeServer>:
	OK*/
}


int GSM_ConnectToTrioUpgradeServer(char *ip, char *port)
{
     ab8:	b580      	push	{r7, lr}
     aba:	b0e2      	sub	sp, #392	; 0x188
     abc:	af02      	add	r7, sp, #8
     abe:	1d3b      	adds	r3, r7, #4
     ac0:	6018      	str	r0, [r3, #0]
     ac2:	463b      	mov	r3, r7
     ac4:	6019      	str	r1, [r3, #0]
	char buffer[200];
	char response[150];

	TraceNL("Entered GSM_ConnectToTrioUpgradeServer");
     ac6:	48bb      	ldr	r0, [pc, #748]	; (db4 <GSM_ConnectToTrioUpgradeServer+0x2fc>)
     ac8:	f001 fdd2 	bl	2670 <TraceNL>

	int init_result = GSM_InitModule();
     acc:	f000 fa7e 	bl	fcc <GSM_InitModule>
     ad0:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	if (init_result == FAIL){
     ad4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
     ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
     adc:	d109      	bne.n	af2 <GSM_ConnectToTrioUpgradeServer+0x3a>
		GSM_ShutdownModule();
     ade:	f000 fa43 	bl	f68 <GSM_ShutdownModule>
		DelayMs(2000);
     ae2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     ae6:	f001 fd9d 	bl	2624 <DelayMs>
		init_result = GSM_InitModule();
     aea:	f000 fa6f 	bl	fcc <GSM_InitModule>
     aee:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	}

	WDTFeed();
     af2:	f002 fb7b 	bl	31ec <WDTFeed>

	if(init_result == FAIL)
     af6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
     afa:	f1b3 3fff 	cmp.w	r3, #4294967295
     afe:	d102      	bne.n	b06 <GSM_ConnectToTrioUpgradeServer+0x4e>
		return ( init_result );
     b00:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
     b04:	e150      	b.n	da8 <GSM_ConnectToTrioUpgradeServer+0x2f0>

	GSM_EchoOFF();
     b06:	f000 fba5 	bl	1254 <GSM_EchoOFF>
	GSM_GetImei();
     b0a:	f000 fb27 	bl	115c <GSM_GetImei>
	GSM_GetImsi(); //
     b0e:	f000 fb45 	bl	119c <GSM_GetImsi>
	int conn_stat = GSM_GetRegStat();
     b12:	f000 facf 	bl	10b4 <GSM_GetRegStat>
     b16:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170

	GSM_SendAt("ATI", response, 500);
     b1a:	f107 0308 	add.w	r3, r7, #8
     b1e:	48a6      	ldr	r0, [pc, #664]	; (db8 <GSM_ConnectToTrioUpgradeServer+0x300>)
     b20:	4619      	mov	r1, r3
     b22:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     b26:	f7ff ff4f 	bl	9c8 <GSM_SendAt>
	WDTFeed();
     b2a:	f002 fb5f 	bl	31ec <WDTFeed>
	GSM_SendAt("AT+QIFGCNT=1", response, 500);
     b2e:	f107 0308 	add.w	r3, r7, #8
     b32:	48a2      	ldr	r0, [pc, #648]	; (dbc <GSM_ConnectToTrioUpgradeServer+0x304>)
     b34:	4619      	mov	r1, r3
     b36:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     b3a:	f7ff ff45 	bl	9c8 <GSM_SendAt>

	memset(buffer, 0, sizeof(buffer));
     b3e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
     b42:	4618      	mov	r0, r3
     b44:	2100      	movs	r1, #0
     b46:	22c8      	movs	r2, #200	; 0xc8
     b48:	f002 fef6 	bl	3938 <memset>
	sprintf(buffer, "AT+QICSGP=1,\"%s\",\"%s\",\"%s\"", per_apn_val, per_apnuser_val, per_apnpass_val);
     b4c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
     b50:	4b9b      	ldr	r3, [pc, #620]	; (dc0 <GSM_ConnectToTrioUpgradeServer+0x308>)
     b52:	9300      	str	r3, [sp, #0]
     b54:	4610      	mov	r0, r2
     b56:	499b      	ldr	r1, [pc, #620]	; (dc4 <GSM_ConnectToTrioUpgradeServer+0x30c>)
     b58:	4a9b      	ldr	r2, [pc, #620]	; (dc8 <GSM_ConnectToTrioUpgradeServer+0x310>)
     b5a:	4b9c      	ldr	r3, [pc, #624]	; (dcc <GSM_ConnectToTrioUpgradeServer+0x314>)
     b5c:	f002 ffb4 	bl	3ac8 <sprintf>

	GSM_SendAt(buffer, response, 100);
     b60:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
     b64:	f107 0308 	add.w	r3, r7, #8
     b68:	4610      	mov	r0, r2
     b6a:	4619      	mov	r1, r3
     b6c:	2264      	movs	r2, #100	; 0x64
     b6e:	f7ff ff2b 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QIMUX=0", response, 100);
     b72:	f107 0308 	add.w	r3, r7, #8
     b76:	4896      	ldr	r0, [pc, #600]	; (dd0 <GSM_ConnectToTrioUpgradeServer+0x318>)
     b78:	4619      	mov	r1, r3
     b7a:	2264      	movs	r2, #100	; 0x64
     b7c:	f7ff ff24 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QVBATT=0,3500,0", response, 100); //Disable low power shut down and warning.
     b80:	f107 0308 	add.w	r3, r7, #8
     b84:	4893      	ldr	r0, [pc, #588]	; (dd4 <GSM_ConnectToTrioUpgradeServer+0x31c>)
     b86:	4619      	mov	r1, r3
     b88:	2264      	movs	r2, #100	; 0x64
     b8a:	f7ff ff1d 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QVBATT=1,3300,0",response,100); // Disable 3.3 volt cutoff.
     b8e:	f107 0308 	add.w	r3, r7, #8
     b92:	4891      	ldr	r0, [pc, #580]	; (dd8 <GSM_ConnectToTrioUpgradeServer+0x320>)
     b94:	4619      	mov	r1, r3
     b96:	2264      	movs	r2, #100	; 0x64
     b98:	f7ff ff16 	bl	9c8 <GSM_SendAt>

	GSM_SendAt("AT+QISHOWRA=1", response, 100); // show remote address
     b9c:	f107 0308 	add.w	r3, r7, #8
     ba0:	488e      	ldr	r0, [pc, #568]	; (ddc <GSM_ConnectToTrioUpgradeServer+0x324>)
     ba2:	4619      	mov	r1, r3
     ba4:	2264      	movs	r2, #100	; 0x64
     ba6:	f7ff ff0f 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QISHOWPT=1", response, 100); // show protocol type ,TCP, or UDP
     baa:	f107 0308 	add.w	r3, r7, #8
     bae:	488c      	ldr	r0, [pc, #560]	; (de0 <GSM_ConnectToTrioUpgradeServer+0x328>)
     bb0:	4619      	mov	r1, r3
     bb2:	2264      	movs	r2, #100	; 0x64
     bb4:	f7ff ff08 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QINDI=0", response, 100);    //  disable indicator
     bb8:	f107 0308 	add.w	r3, r7, #8
     bbc:	4889      	ldr	r0, [pc, #548]	; (de4 <GSM_ConnectToTrioUpgradeServer+0x32c>)
     bbe:	4619      	mov	r1, r3
     bc0:	2264      	movs	r2, #100	; 0x64
     bc2:	f7ff ff01 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QIHEAD=1", response, 100);    //
     bc6:	f107 0308 	add.w	r3, r7, #8
     bca:	4887      	ldr	r0, [pc, #540]	; (de8 <GSM_ConnectToTrioUpgradeServer+0x330>)
     bcc:	4619      	mov	r1, r3
     bce:	2264      	movs	r2, #100	; 0x64
     bd0:	f7ff fefa 	bl	9c8 <GSM_SendAt>

	//GSM_SendAt("AT+QIMODE=1", response, 100); //Transparent Mode
	GSM_SendAt("AT+QIMODE=0", response, 100);   //Non Transparent Mode
     bd4:	f107 0308 	add.w	r3, r7, #8
     bd8:	4884      	ldr	r0, [pc, #528]	; (dec <GSM_ConnectToTrioUpgradeServer+0x334>)
     bda:	4619      	mov	r1, r3
     bdc:	2264      	movs	r2, #100	; 0x64
     bde:	f7ff fef3 	bl	9c8 <GSM_SendAt>
	//GSM_SendAt("AT+QINDI=1", response, 100);  //Alert when data received.


	//GSM_SendAt("AT+QITCFG=3,1,512,1", response, 500); //Transparent mode configuration

	memset(buffer, 0, sizeof(buffer));
     be2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
     be6:	4618      	mov	r0, r3
     be8:	2100      	movs	r1, #0
     bea:	22c8      	movs	r2, #200	; 0xc8
     bec:	f002 fea4 	bl	3938 <memset>
	if (isalpha(per_ip_val[0])){ //DNS
     bf0:	4b7f      	ldr	r3, [pc, #508]	; (df0 <GSM_ConnectToTrioUpgradeServer+0x338>)
     bf2:	781b      	ldrb	r3, [r3, #0]
     bf4:	3380      	adds	r3, #128	; 0x80
     bf6:	4a7f      	ldr	r2, [pc, #508]	; (df4 <GSM_ConnectToTrioUpgradeServer+0x33c>)
     bf8:	5cd3      	ldrb	r3, [r2, r3]
     bfa:	f003 0318 	and.w	r3, r3, #24
     bfe:	2b00      	cmp	r3, #0
     c00:	d013      	beq.n	c2a <GSM_ConnectToTrioUpgradeServer+0x172>
		GSM_SendAt("AT+QIDNSIP=1", response, 100);
     c02:	f107 0308 	add.w	r3, r7, #8
     c06:	487c      	ldr	r0, [pc, #496]	; (df8 <GSM_ConnectToTrioUpgradeServer+0x340>)
     c08:	4619      	mov	r1, r3
     c0a:	2264      	movs	r2, #100	; 0x64
     c0c:	f7ff fedc 	bl	9c8 <GSM_SendAt>
		TraceDumpHex( response, strlen(response) );
     c10:	f107 0308 	add.w	r3, r7, #8
     c14:	4618      	mov	r0, r3
     c16:	f004 fbbf 	bl	5398 <strlen>
     c1a:	4602      	mov	r2, r0
     c1c:	f107 0308 	add.w	r3, r7, #8
     c20:	4618      	mov	r0, r3
     c22:	4611      	mov	r1, r2
     c24:	f001 fd66 	bl	26f4 <TraceDumpHex>
     c28:	e006      	b.n	c38 <GSM_ConnectToTrioUpgradeServer+0x180>
	}else
		GSM_SendAt("AT+QIDNSIP=0", response, 100);
     c2a:	f107 0308 	add.w	r3, r7, #8
     c2e:	4873      	ldr	r0, [pc, #460]	; (dfc <GSM_ConnectToTrioUpgradeServer+0x344>)
     c30:	4619      	mov	r1, r3
     c32:	2264      	movs	r2, #100	; 0x64
     c34:	f7ff fec8 	bl	9c8 <GSM_SendAt>


	////Low Power/////
	GSM_SendAt("AT+QGPCLASS=8", response, 100); // 1 Tx timeslots
     c38:	f107 0308 	add.w	r3, r7, #8
     c3c:	4870      	ldr	r0, [pc, #448]	; (e00 <GSM_ConnectToTrioUpgradeServer+0x348>)
     c3e:	4619      	mov	r1, r3
     c40:	2264      	movs	r2, #100	; 0x64
     c42:	f7ff fec1 	bl	9c8 <GSM_SendAt>
//	TraceDumpHex( response, strlen(response) );
	//GSM_SendAt("AT+CDETXPW=900,1,255,2", response, 100);
	//////////////////
	GSM_SendAt("AT",response,100);
     c46:	f107 0308 	add.w	r3, r7, #8
     c4a:	486e      	ldr	r0, [pc, #440]	; (e04 <GSM_ConnectToTrioUpgradeServer+0x34c>)
     c4c:	4619      	mov	r1, r3
     c4e:	2264      	movs	r2, #100	; 0x64
     c50:	f7ff feba 	bl	9c8 <GSM_SendAt>

	int cmd_count = sprintf(buffer, "AT+QIOPEN=\"TCP\",\"%s\",%d", static_update_server_ip, 5007L);
     c54:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
     c58:	4618      	mov	r0, r3
     c5a:	496b      	ldr	r1, [pc, #428]	; (e08 <GSM_ConnectToTrioUpgradeServer+0x350>)
     c5c:	4a6b      	ldr	r2, [pc, #428]	; (e0c <GSM_ConnectToTrioUpgradeServer+0x354>)
     c5e:	f241 338f 	movw	r3, #5007	; 0x138f
     c62:	f002 ff31 	bl	3ac8 <sprintf>
     c66:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
	//GSM_SendAt("AT+QIOPEN=\"TCP\",\"178.63.30.80\",6081", response, 2000);

	GSM_SendAt( buffer, response, 100);
     c6a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
     c6e:	f107 0308 	add.w	r3, r7, #8
     c72:	4610      	mov	r0, r2
     c74:	4619      	mov	r1, r3
     c76:	2264      	movs	r2, #100	; 0x64
     c78:	f7ff fea6 	bl	9c8 <GSM_SendAt>
	//UARTSend(PORT_GSM, buffer, cmd_count);

	//UARTSend(PORT_TRACE, buffer, cmd_count);
	int server_conn_count = 0;
     c7c:	2300      	movs	r3, #0
     c7e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	int server_conn_result = FAIL;
     c82:	f04f 33ff 	mov.w	r3, #4294967295
     c86:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

	while(1){
		int recLen = ReadUart(response, PORT_GSM);
     c8a:	f107 0308 	add.w	r3, r7, #8
     c8e:	4618      	mov	r0, r3
     c90:	2101      	movs	r1, #1
     c92:	f002 f9a3 	bl	2fdc <ReadUart>
     c96:	4603      	mov	r3, r0
     c98:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		if( recLen )
     c9c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
     ca0:	2b00      	cmp	r3, #0
     ca2:	d026      	beq.n	cf2 <GSM_ConnectToTrioUpgradeServer+0x23a>
		{
//			TraceDumpHex( response, strlen(response) );
			if (strstr(response,"FAIL") != NULL/* || strstr(response,"ERROR") != NULL*/){ //ERROR is about format ignore
     ca4:	f107 0308 	add.w	r3, r7, #8
     ca8:	4618      	mov	r0, r3
     caa:	4959      	ldr	r1, [pc, #356]	; (e10 <GSM_ConnectToTrioUpgradeServer+0x358>)
     cac:	f004 fbc5 	bl	543a <strstr>
     cb0:	4603      	mov	r3, r0
     cb2:	2b00      	cmp	r3, #0
     cb4:	d000      	beq.n	cb8 <GSM_ConnectToTrioUpgradeServer+0x200>
				//UARTSend(PORT_GSM, buffer, cmd_count); //Testing AT to server problem
				break;
     cb6:	e02d      	b.n	d14 <GSM_ConnectToTrioUpgradeServer+0x25c>
			}
			else if (strstr(response,"CONNECT OK") != NULL || strstr(response,"ALREADY CONNECT") != NULL){
     cb8:	f107 0308 	add.w	r3, r7, #8
     cbc:	4618      	mov	r0, r3
     cbe:	4955      	ldr	r1, [pc, #340]	; (e14 <GSM_ConnectToTrioUpgradeServer+0x35c>)
     cc0:	f004 fbbb 	bl	543a <strstr>
     cc4:	4603      	mov	r3, r0
     cc6:	2b00      	cmp	r3, #0
     cc8:	d108      	bne.n	cdc <GSM_ConnectToTrioUpgradeServer+0x224>
     cca:	f107 0308 	add.w	r3, r7, #8
     cce:	4618      	mov	r0, r3
     cd0:	4951      	ldr	r1, [pc, #324]	; (e18 <GSM_ConnectToTrioUpgradeServer+0x360>)
     cd2:	f004 fbb2 	bl	543a <strstr>
     cd6:	4603      	mov	r3, r0
     cd8:	2b00      	cmp	r3, #0
     cda:	d00a      	beq.n	cf2 <GSM_ConnectToTrioUpgradeServer+0x23a>
				//UARTSend( PORT_TRACE, response, cmd_count );
				TraceDumpHex( response, recLen );
     cdc:	f107 0308 	add.w	r3, r7, #8
     ce0:	4618      	mov	r0, r3
     ce2:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
     ce6:	f001 fd05 	bl	26f4 <TraceDumpHex>
				server_conn_result = SUCCESS;
     cea:	2300      	movs	r3, #0
     cec:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
				break;
     cf0:	e010      	b.n	d14 <GSM_ConnectToTrioUpgradeServer+0x25c>
			}
		}

		WDTFeed();
     cf2:	f002 fa7b 	bl	31ec <WDTFeed>
		DelayMs(300);
     cf6:	f44f 7096 	mov.w	r0, #300	; 0x12c
     cfa:	f001 fc93 	bl	2624 <DelayMs>
		server_conn_count++;
     cfe:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
     d02:	3301      	adds	r3, #1
     d04:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
		if (server_conn_count > 30)
     d08:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
     d0c:	2b1e      	cmp	r3, #30
     d0e:	dd00      	ble.n	d12 <GSM_ConnectToTrioUpgradeServer+0x25a>
			break;
     d10:	e000      	b.n	d14 <GSM_ConnectToTrioUpgradeServer+0x25c>
	}
     d12:	e7ba      	b.n	c8a <GSM_ConnectToTrioUpgradeServer+0x1d2>

	//GSM_SendAt(buffer, response, 2000);
	if (server_conn_result == SUCCESS) {
     d14:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
     d18:	2b00      	cmp	r3, #0
     d1a:	d107      	bne.n	d2c <GSM_ConnectToTrioUpgradeServer+0x274>
		TraceNL("Connected to the server.");
     d1c:	483f      	ldr	r0, [pc, #252]	; (e1c <GSM_ConnectToTrioUpgradeServer+0x364>)
     d1e:	f001 fca7 	bl	2670 <TraceNL>
		connectionFailCount = 0;
     d22:	4b3f      	ldr	r3, [pc, #252]	; (e20 <GSM_ConnectToTrioUpgradeServer+0x368>)
     d24:	2200      	movs	r2, #0
     d26:	601a      	str	r2, [r3, #0]
		return SUCCESS;
     d28:	2300      	movs	r3, #0
     d2a:	e03d      	b.n	da8 <GSM_ConnectToTrioUpgradeServer+0x2f0>
	}

	TraceNL("QIOPEN failed.");
     d2c:	483d      	ldr	r0, [pc, #244]	; (e24 <GSM_ConnectToTrioUpgradeServer+0x36c>)
     d2e:	f001 fc9f 	bl	2670 <TraceNL>
	connectionFailCount++;
     d32:	4b3b      	ldr	r3, [pc, #236]	; (e20 <GSM_ConnectToTrioUpgradeServer+0x368>)
     d34:	681b      	ldr	r3, [r3, #0]
     d36:	3301      	adds	r3, #1
     d38:	4a39      	ldr	r2, [pc, #228]	; (e20 <GSM_ConnectToTrioUpgradeServer+0x368>)
     d3a:	6013      	str	r3, [r2, #0]
	if (connectionFailCount > 40 && connectionFailCount % 200 == 0) //10 minutes.
     d3c:	4b38      	ldr	r3, [pc, #224]	; (e20 <GSM_ConnectToTrioUpgradeServer+0x368>)
     d3e:	681b      	ldr	r3, [r3, #0]
     d40:	2b28      	cmp	r3, #40	; 0x28
     d42:	dd17      	ble.n	d74 <GSM_ConnectToTrioUpgradeServer+0x2bc>
     d44:	4b36      	ldr	r3, [pc, #216]	; (e20 <GSM_ConnectToTrioUpgradeServer+0x368>)
     d46:	681a      	ldr	r2, [r3, #0]
     d48:	4b37      	ldr	r3, [pc, #220]	; (e28 <GSM_ConnectToTrioUpgradeServer+0x370>)
     d4a:	fb83 1302 	smull	r1, r3, r3, r2
     d4e:	1199      	asrs	r1, r3, #6
     d50:	17d3      	asrs	r3, r2, #31
     d52:	1acb      	subs	r3, r1, r3
     d54:	21c8      	movs	r1, #200	; 0xc8
     d56:	fb01 f303 	mul.w	r3, r1, r3
     d5a:	1ad3      	subs	r3, r2, r3
     d5c:	2b00      	cmp	r3, #0
     d5e:	d109      	bne.n	d74 <GSM_ConnectToTrioUpgradeServer+0x2bc>
	{
		TraceNL("Hard resetting module.");
     d60:	4832      	ldr	r0, [pc, #200]	; (e2c <GSM_ConnectToTrioUpgradeServer+0x374>)
     d62:	f001 fc85 	bl	2670 <TraceNL>
		GSM_InitModule(); //Restarts and initializes module.
     d66:	f000 f931 	bl	fcc <GSM_InitModule>
		last_hard_reset = STT_Value;
     d6a:	4b31      	ldr	r3, [pc, #196]	; (e30 <GSM_ConnectToTrioUpgradeServer+0x378>)
     d6c:	681b      	ldr	r3, [r3, #0]
     d6e:	4a31      	ldr	r2, [pc, #196]	; (e34 <GSM_ConnectToTrioUpgradeServer+0x37c>)
     d70:	6013      	str	r3, [r2, #0]
     d72:	e017      	b.n	da4 <GSM_ConnectToTrioUpgradeServer+0x2ec>
	}
	else if (connectionFailCount > 30 && connectionFailCount % 20 == 0){ //100 in production
     d74:	4b2a      	ldr	r3, [pc, #168]	; (e20 <GSM_ConnectToTrioUpgradeServer+0x368>)
     d76:	681b      	ldr	r3, [r3, #0]
     d78:	2b1e      	cmp	r3, #30
     d7a:	dd13      	ble.n	da4 <GSM_ConnectToTrioUpgradeServer+0x2ec>
     d7c:	4b28      	ldr	r3, [pc, #160]	; (e20 <GSM_ConnectToTrioUpgradeServer+0x368>)
     d7e:	6819      	ldr	r1, [r3, #0]
     d80:	4b2d      	ldr	r3, [pc, #180]	; (e38 <GSM_ConnectToTrioUpgradeServer+0x380>)
     d82:	fb83 2301 	smull	r2, r3, r3, r1
     d86:	10da      	asrs	r2, r3, #3
     d88:	17cb      	asrs	r3, r1, #31
     d8a:	1ad2      	subs	r2, r2, r3
     d8c:	4613      	mov	r3, r2
     d8e:	009b      	lsls	r3, r3, #2
     d90:	4413      	add	r3, r2
     d92:	009b      	lsls	r3, r3, #2
     d94:	1aca      	subs	r2, r1, r3
     d96:	2a00      	cmp	r2, #0
     d98:	d104      	bne.n	da4 <GSM_ConnectToTrioUpgradeServer+0x2ec>
		TraceNL("connectionFailCount > 40 restarting module.");
     d9a:	4828      	ldr	r0, [pc, #160]	; (e3c <GSM_ConnectToTrioUpgradeServer+0x384>)
     d9c:	f001 fc68 	bl	2670 <TraceNL>
		GSM_InitModule(); //Restarts and initializes module.
     da0:	f000 f914 	bl	fcc <GSM_InitModule>
	}
	return FAIL;
     da4:	f04f 33ff 	mov.w	r3, #4294967295
}
     da8:	4618      	mov	r0, r3
     daa:	f507 77c0 	add.w	r7, r7, #384	; 0x180
     dae:	46bd      	mov	sp, r7
     db0:	bd80      	pop	{r7, pc}
     db2:	bf00      	nop
     db4:	000065d4 	.word	0x000065d4
     db8:	000065fc 	.word	0x000065fc
     dbc:	00006600 	.word	0x00006600
     dc0:	10000bd8 	.word	0x10000bd8
     dc4:	00006610 	.word	0x00006610
     dc8:	10000bf4 	.word	0x10000bf4
     dcc:	10000b88 	.word	0x10000b88
     dd0:	0000662c 	.word	0x0000662c
     dd4:	00006638 	.word	0x00006638
     dd8:	0000664c 	.word	0x0000664c
     ddc:	00006660 	.word	0x00006660
     de0:	00006670 	.word	0x00006670
     de4:	00006680 	.word	0x00006680
     de8:	0000668c 	.word	0x0000668c
     dec:	00006698 	.word	0x00006698
     df0:	10000b38 	.word	0x10000b38
     df4:	000072d4 	.word	0x000072d4
     df8:	000066a4 	.word	0x000066a4
     dfc:	000066b4 	.word	0x000066b4
     e00:	000066c4 	.word	0x000066c4
     e04:	000065a4 	.word	0x000065a4
     e08:	000066d4 	.word	0x000066d4
     e0c:	10000000 	.word	0x10000000
     e10:	000066ec 	.word	0x000066ec
     e14:	000066f4 	.word	0x000066f4
     e18:	00006700 	.word	0x00006700
     e1c:	00006710 	.word	0x00006710
     e20:	10000020 	.word	0x10000020
     e24:	0000672c 	.word	0x0000672c
     e28:	51eb851f 	.word	0x51eb851f
     e2c:	0000673c 	.word	0x0000673c
     e30:	10000bac 	.word	0x10000bac
     e34:	10000010 	.word	0x10000010
     e38:	66666667 	.word	0x66666667
     e3c:	00006754 	.word	0x00006754

00000e40 <GSM_TCP_Send>:
** Returned value:	greater than 0 to indicate number of characters transferred
**
**                  a value less than 0 is error code, tobe defined later.
******************************************************************************/
int GSM_TCP_Send( unsigned char* msg, uint16_t len )
{
     e40:	b580      	push	{r7, lr}
     e42:	b0e8      	sub	sp, #416	; 0x1a0
     e44:	af00      	add	r7, sp, #0
     e46:	1d3b      	adds	r3, r7, #4
     e48:	6018      	str	r0, [r3, #0]
     e4a:	460a      	mov	r2, r1
     e4c:	1cbb      	adds	r3, r7, #2
     e4e:	801a      	strh	r2, [r3, #0]
	char response[200];
	char buffer[200];

	TraceNL("Entered GSM_TCP_Send");
     e50:	4836      	ldr	r0, [pc, #216]	; (f2c <GSM_TCP_Send+0xec>)
     e52:	f001 fc0d 	bl	2670 <TraceNL>

	GSM_SendAt( "AT", response, 100 ); //Empty buffer
     e56:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
     e5a:	4835      	ldr	r0, [pc, #212]	; (f30 <GSM_TCP_Send+0xf0>)
     e5c:	4619      	mov	r1, r3
     e5e:	2264      	movs	r2, #100	; 0x64
     e60:	f7ff fdb2 	bl	9c8 <GSM_SendAt>

	int count = sprintf( buffer, "AT+QISEND=%d", len );
     e64:	1cbb      	adds	r3, r7, #2
     e66:	881b      	ldrh	r3, [r3, #0]
     e68:	f107 0208 	add.w	r2, r7, #8
     e6c:	4610      	mov	r0, r2
     e6e:	4931      	ldr	r1, [pc, #196]	; (f34 <GSM_TCP_Send+0xf4>)
     e70:	461a      	mov	r2, r3
     e72:	f002 fe29 	bl	3ac8 <sprintf>
     e76:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
	GSM_SendAt( buffer, response, 100 );
     e7a:	f107 0208 	add.w	r2, r7, #8
     e7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
     e82:	4610      	mov	r0, r2
     e84:	4619      	mov	r1, r3
     e86:	2264      	movs	r2, #100	; 0x64
     e88:	f7ff fd9e 	bl	9c8 <GSM_SendAt>

	if( strchr(response, '>') != NULL )
     e8c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
     e90:	4618      	mov	r0, r3
     e92:	213e      	movs	r1, #62	; 0x3e
     e94:	f004 fa52 	bl	533c <strchr>
     e98:	4603      	mov	r3, r0
     e9a:	2b00      	cmp	r3, #0
     e9c:	d03b      	beq.n	f16 <GSM_TCP_Send+0xd6>
	{
		UARTSend( PORT_GSM, msg, len );
     e9e:	1cbb      	adds	r3, r7, #2
     ea0:	881a      	ldrh	r2, [r3, #0]
     ea2:	1d3b      	adds	r3, r7, #4
     ea4:	2001      	movs	r0, #1
     ea6:	6819      	ldr	r1, [r3, #0]
     ea8:	f001 fffc 	bl	2ea4 <UARTSend>

		DelayMs( 300 );
     eac:	f44f 7096 	mov.w	r0, #300	; 0x12c
     eb0:	f001 fbb8 	bl	2624 <DelayMs>

		ReadUart( response, PORT_GSM );
     eb4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
     eb8:	4618      	mov	r0, r3
     eba:	2101      	movs	r1, #1
     ebc:	f002 f88e 	bl	2fdc <ReadUart>
		int sendOkCheck = 0;
     ec0:	2300      	movs	r3, #0
     ec2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

		while( strstr( response, "SEND OK" ) == NULL )
     ec6:	e017      	b.n	ef8 <GSM_TCP_Send+0xb8>
		{
			TraceNL( "Send OK whiling.." );
     ec8:	481b      	ldr	r0, [pc, #108]	; (f38 <GSM_TCP_Send+0xf8>)
     eca:	f001 fbd1 	bl	2670 <TraceNL>
			if ( sendOkCheck > 20 )
     ece:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
     ed2:	2b14      	cmp	r3, #20
     ed4:	dd02      	ble.n	edc <GSM_TCP_Send+0x9c>
				return ( FAIL );
     ed6:	f04f 33ff 	mov.w	r3, #4294967295
     eda:	e021      	b.n	f20 <GSM_TCP_Send+0xe0>

			DelayMs( 100 );
     edc:	2064      	movs	r0, #100	; 0x64
     ede:	f001 fba1 	bl	2624 <DelayMs>
			ReadUart( response, PORT_GSM );
     ee2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
     ee6:	4618      	mov	r0, r3
     ee8:	2101      	movs	r1, #1
     eea:	f002 f877 	bl	2fdc <ReadUart>

			sendOkCheck++;
     eee:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
     ef2:	3301      	adds	r3, #1
     ef4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
		DelayMs( 300 );

		ReadUart( response, PORT_GSM );
		int sendOkCheck = 0;

		while( strstr( response, "SEND OK" ) == NULL )
     ef8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
     efc:	4618      	mov	r0, r3
     efe:	490f      	ldr	r1, [pc, #60]	; (f3c <GSM_TCP_Send+0xfc>)
     f00:	f004 fa9b 	bl	543a <strstr>
     f04:	4603      	mov	r3, r0
     f06:	2b00      	cmp	r3, #0
     f08:	d0de      	beq.n	ec8 <GSM_TCP_Send+0x88>
			DelayMs( 100 );
			ReadUart( response, PORT_GSM );

			sendOkCheck++;
		}
		TraceNL( "Data sent." );
     f0a:	480d      	ldr	r0, [pc, #52]	; (f40 <GSM_TCP_Send+0x100>)
     f0c:	f001 fbb0 	bl	2670 <TraceNL>
		return ( len );
     f10:	1cbb      	adds	r3, r7, #2
     f12:	881b      	ldrh	r3, [r3, #0]
     f14:	e004      	b.n	f20 <GSM_TCP_Send+0xe0>
	}
	TraceNL( "Data fail." );
     f16:	480b      	ldr	r0, [pc, #44]	; (f44 <GSM_TCP_Send+0x104>)
     f18:	f001 fbaa 	bl	2670 <TraceNL>
	return ( FAIL );
     f1c:	f04f 33ff 	mov.w	r3, #4294967295
}
     f20:	4618      	mov	r0, r3
     f22:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
     f26:	46bd      	mov	sp, r7
     f28:	bd80      	pop	{r7, pc}
     f2a:	bf00      	nop
     f2c:	00006898 	.word	0x00006898
     f30:	000065a4 	.word	0x000065a4
     f34:	00006824 	.word	0x00006824
     f38:	00006834 	.word	0x00006834
     f3c:	00006848 	.word	0x00006848
     f40:	00006850 	.word	0x00006850
     f44:	00006864 	.word	0x00006864

00000f48 <GSM_TogglePwrKey>:

void GSM_TogglePwrKey() {
     f48:	b580      	push	{r7, lr}
     f4a:	af00      	add	r7, sp, #0
	//Toggle PWR_KEY
	LPC_GPIO2->FIOSET = (1 << 3);
     f4c:	4b05      	ldr	r3, [pc, #20]	; (f64 <GSM_TogglePwrKey+0x1c>)
     f4e:	2208      	movs	r2, #8
     f50:	619a      	str	r2, [r3, #24]
	DelayMs(2000);
     f52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     f56:	f001 fb65 	bl	2624 <DelayMs>
	LPC_GPIO2->FIOCLR = (1 << 3);
     f5a:	4b02      	ldr	r3, [pc, #8]	; (f64 <GSM_TogglePwrKey+0x1c>)
     f5c:	2208      	movs	r2, #8
     f5e:	61da      	str	r2, [r3, #28]
}
     f60:	bd80      	pop	{r7, pc}
     f62:	bf00      	nop
     f64:	2009c040 	.word	0x2009c040

00000f68 <GSM_ShutdownModule>:

int GSM_ShutdownModule() {
     f68:	b580      	push	{r7, lr}
     f6a:	b09a      	sub	sp, #104	; 0x68
     f6c:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+QPOWD=0", response, 500);
     f6e:	1d3b      	adds	r3, r7, #4
     f70:	4813      	ldr	r0, [pc, #76]	; (fc0 <GSM_ShutdownModule+0x58>)
     f72:	4619      	mov	r1, r3
     f74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     f78:	f7ff fd26 	bl	9c8 <GSM_SendAt>
	DelayMs(1000);
     f7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     f80:	f001 fb50 	bl	2624 <DelayMs>
	memset(response, 0, sizeof(response));
     f84:	1d3b      	adds	r3, r7, #4
     f86:	4618      	mov	r0, r3
     f88:	2100      	movs	r1, #0
     f8a:	2264      	movs	r2, #100	; 0x64
     f8c:	f002 fcd4 	bl	3938 <memset>
	GSM_SendAt("AT", response, 500);
     f90:	1d3b      	adds	r3, r7, #4
     f92:	480c      	ldr	r0, [pc, #48]	; (fc4 <GSM_ShutdownModule+0x5c>)
     f94:	4619      	mov	r1, r3
     f96:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     f9a:	f7ff fd15 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "OK") == NULL) {
     f9e:	1d3b      	adds	r3, r7, #4
     fa0:	4618      	mov	r0, r3
     fa2:	4909      	ldr	r1, [pc, #36]	; (fc8 <GSM_ShutdownModule+0x60>)
     fa4:	f004 fa49 	bl	543a <strstr>
     fa8:	4603      	mov	r3, r0
     faa:	2b00      	cmp	r3, #0
     fac:	d101      	bne.n	fb2 <GSM_ShutdownModule+0x4a>
		return ( SUCCESS );
     fae:	2300      	movs	r3, #0
     fb0:	e001      	b.n	fb6 <GSM_ShutdownModule+0x4e>
	}
	return ( FAIL );
     fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
     fb6:	4618      	mov	r0, r3
     fb8:	3768      	adds	r7, #104	; 0x68
     fba:	46bd      	mov	sp, r7
     fbc:	bd80      	pop	{r7, pc}
     fbe:	bf00      	nop
     fc0:	000068b0 	.word	0x000068b0
     fc4:	000065a4 	.word	0x000065a4
     fc8:	000068bc 	.word	0x000068bc

00000fcc <GSM_InitModule>:
	LPC_GPIO2->FIOCLR = (1 << 2);

	return ( SUCCESS );
}

int GSM_InitModule() {
     fcc:	b580      	push	{r7, lr}
     fce:	b09c      	sub	sp, #112	; 0x70
     fd0:	af00      	add	r7, sp, #0
	//Unset EMERG
	char response[100];
	LPC_GPIO2->FIOCLR = (1 << 2);
     fd2:	4b30      	ldr	r3, [pc, #192]	; (1094 <GSM_InitModule+0xc8>)
     fd4:	2204      	movs	r2, #4
     fd6:	61da      	str	r2, [r3, #28]
	DelayMs(1000);
     fd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     fdc:	f001 fb22 	bl	2624 <DelayMs>
	GSM_TogglePwrKey();
     fe0:	f7ff ffb2 	bl	f48 <GSM_TogglePwrKey>
	int i = 0;
     fe4:	2300      	movs	r3, #0
     fe6:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (i = 0; i < 20; i++) {
     fe8:	2300      	movs	r3, #0
     fea:	66fb      	str	r3, [r7, #108]	; 0x6c
     fec:	e048      	b.n	1080 <GSM_InitModule+0xb4>
		GSM_SendAt("AT", response, 500);
     fee:	1d3b      	adds	r3, r7, #4
     ff0:	4829      	ldr	r0, [pc, #164]	; (1098 <GSM_InitModule+0xcc>)
     ff2:	4619      	mov	r1, r3
     ff4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     ff8:	f7ff fce6 	bl	9c8 <GSM_SendAt>

//		TraceDumpHex( response, strlen(response) );
		if (strstr(response, "OK") != NULL) {
     ffc:	1d3b      	adds	r3, r7, #4
     ffe:	4618      	mov	r0, r3
    1000:	4926      	ldr	r1, [pc, #152]	; (109c <GSM_InitModule+0xd0>)
    1002:	f004 fa1a 	bl	543a <strstr>
    1006:	4603      	mov	r3, r0
    1008:	2b00      	cmp	r3, #0
    100a:	d036      	beq.n	107a <GSM_InitModule+0xae>
			GSM_SendAt("AT+CMEE=2", response, 500);
    100c:	1d3b      	adds	r3, r7, #4
    100e:	4824      	ldr	r0, [pc, #144]	; (10a0 <GSM_InitModule+0xd4>)
    1010:	4619      	mov	r1, r3
    1012:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1016:	f7ff fcd7 	bl	9c8 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			DelayMs(500);
    101a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    101e:	f001 fb01 	bl	2624 <DelayMs>
			//Init SMS
			//SMS Text Mode
			GSM_SendAt("AT+CMGF=1", response, 500);
    1022:	1d3b      	adds	r3, r7, #4
    1024:	481f      	ldr	r0, [pc, #124]	; (10a4 <GSM_InitModule+0xd8>)
    1026:	4619      	mov	r1, r3
    1028:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    102c:	f7ff fccc 	bl	9c8 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			//Initialize SMS, if not new messages does not cause +CMTI
			GSM_SendAt("AT+CNMI=2,1,0,0,0", response, 500);
    1030:	1d3b      	adds	r3, r7, #4
    1032:	481d      	ldr	r0, [pc, #116]	; (10a8 <GSM_InitModule+0xdc>)
    1034:	4619      	mov	r1, r3
    1036:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    103a:	f7ff fcc5 	bl	9c8 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			int sim_check = FAIL;
    103e:	f04f 33ff 	mov.w	r3, #4294967295
    1042:	66bb      	str	r3, [r7, #104]	; 0x68
			for(;i<40;i++){
    1044:	e014      	b.n	1070 <GSM_InitModule+0xa4>
				sim_check = GSM_CheckSimCard();
    1046:	f000 f867 	bl	1118 <GSM_CheckSimCard>
    104a:	66b8      	str	r0, [r7, #104]	; 0x68
				if (sim_check == SUCCESS){
    104c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    104e:	2b00      	cmp	r3, #0
    1050:	d103      	bne.n	105a <GSM_InitModule+0x8e>
					TraceNL("Sim card ready..\r");
    1052:	4816      	ldr	r0, [pc, #88]	; (10ac <GSM_InitModule+0xe0>)
    1054:	f001 fb0c 	bl	2670 <TraceNL>
					break;
    1058:	e00d      	b.n	1076 <GSM_InitModule+0xaa>
				}
				else
					TraceNL("Sim not ready!\r");
    105a:	4815      	ldr	r0, [pc, #84]	; (10b0 <GSM_InitModule+0xe4>)
    105c:	f001 fb08 	bl	2670 <TraceNL>
				DelayMs(200);
    1060:	20c8      	movs	r0, #200	; 0xc8
    1062:	f001 fadf 	bl	2624 <DelayMs>
				WDTFeed();
    1066:	f002 f8c1 	bl	31ec <WDTFeed>
//			TraceDumpHex( response, strlen(response) );
			//Initialize SMS, if not new messages does not cause +CMTI
			GSM_SendAt("AT+CNMI=2,1,0,0,0", response, 500);
//			TraceDumpHex( response, strlen(response) );
			int sim_check = FAIL;
			for(;i<40;i++){
    106a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    106c:	3301      	adds	r3, #1
    106e:	66fb      	str	r3, [r7, #108]	; 0x6c
    1070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1072:	2b27      	cmp	r3, #39	; 0x27
    1074:	dde7      	ble.n	1046 <GSM_InitModule+0x7a>
				else
					TraceNL("Sim not ready!\r");
				DelayMs(200);
				WDTFeed();
			}
			return sim_check;
    1076:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1078:	e007      	b.n	108a <GSM_InitModule+0xbe>
	char response[100];
	LPC_GPIO2->FIOCLR = (1 << 2);
	DelayMs(1000);
	GSM_TogglePwrKey();
	int i = 0;
	for (i = 0; i < 20; i++) {
    107a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    107c:	3301      	adds	r3, #1
    107e:	66fb      	str	r3, [r7, #108]	; 0x6c
    1080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1082:	2b13      	cmp	r3, #19
    1084:	ddb3      	ble.n	fee <GSM_InitModule+0x22>
				WDTFeed();
			}
			return sim_check;
		}
	}
	return FAIL;
    1086:	f04f 33ff 	mov.w	r3, #4294967295
}
    108a:	4618      	mov	r0, r3
    108c:	3770      	adds	r7, #112	; 0x70
    108e:	46bd      	mov	sp, r7
    1090:	bd80      	pop	{r7, pc}
    1092:	bf00      	nop
    1094:	2009c040 	.word	0x2009c040
    1098:	000065a4 	.word	0x000065a4
    109c:	000068bc 	.word	0x000068bc
    10a0:	000068c0 	.word	0x000068c0
    10a4:	000068cc 	.word	0x000068cc
    10a8:	000068d8 	.word	0x000068d8
    10ac:	000068ec 	.word	0x000068ec
    10b0:	00006900 	.word	0x00006900

000010b4 <GSM_GetRegStat>:
	UTIL_GetPartOfString(response, csq_str, ':', ',', 0, 0);
	return atoi(csq_str);
}


int GSM_GetRegStat(){
    10b4:	b580      	push	{r7, lr}
    10b6:	b09e      	sub	sp, #120	; 0x78
    10b8:	af00      	add	r7, sp, #0
	char csq_str[20];
	char response[100];
	GSM_SendAt("AT+CREG?", response, 100);
    10ba:	463b      	mov	r3, r7
    10bc:	4812      	ldr	r0, [pc, #72]	; (1108 <GSM_GetRegStat+0x54>)
    10be:	4619      	mov	r1, r3
    10c0:	2264      	movs	r2, #100	; 0x64
    10c2:	f7ff fc81 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "+CREG") != NULL && ((strstr(response, ",5") != NULL) || (strstr(response, ",1") != NULL))) {
    10c6:	463b      	mov	r3, r7
    10c8:	4618      	mov	r0, r3
    10ca:	4910      	ldr	r1, [pc, #64]	; (110c <GSM_GetRegStat+0x58>)
    10cc:	f004 f9b5 	bl	543a <strstr>
    10d0:	4603      	mov	r3, r0
    10d2:	2b00      	cmp	r3, #0
    10d4:	d011      	beq.n	10fa <GSM_GetRegStat+0x46>
    10d6:	463b      	mov	r3, r7
    10d8:	4618      	mov	r0, r3
    10da:	490d      	ldr	r1, [pc, #52]	; (1110 <GSM_GetRegStat+0x5c>)
    10dc:	f004 f9ad 	bl	543a <strstr>
    10e0:	4603      	mov	r3, r0
    10e2:	2b00      	cmp	r3, #0
    10e4:	d107      	bne.n	10f6 <GSM_GetRegStat+0x42>
    10e6:	463b      	mov	r3, r7
    10e8:	4618      	mov	r0, r3
    10ea:	490a      	ldr	r1, [pc, #40]	; (1114 <GSM_GetRegStat+0x60>)
    10ec:	f004 f9a5 	bl	543a <strstr>
    10f0:	4603      	mov	r3, r0
    10f2:	2b00      	cmp	r3, #0
    10f4:	d001      	beq.n	10fa <GSM_GetRegStat+0x46>
		return SUCCESS;
    10f6:	2300      	movs	r3, #0
    10f8:	e001      	b.n	10fe <GSM_GetRegStat+0x4a>
	}
	return FAIL;
    10fa:	f04f 33ff 	mov.w	r3, #4294967295
}
    10fe:	4618      	mov	r0, r3
    1100:	3778      	adds	r7, #120	; 0x78
    1102:	46bd      	mov	sp, r7
    1104:	bd80      	pop	{r7, pc}
    1106:	bf00      	nop
    1108:	00006918 	.word	0x00006918
    110c:	00006924 	.word	0x00006924
    1110:	0000692c 	.word	0x0000692c
    1114:	00006930 	.word	0x00006930

00001118 <GSM_CheckSimCard>:
	return FAIL;
}



int GSM_CheckSimCard() {
    1118:	b580      	push	{r7, lr}
    111a:	b09a      	sub	sp, #104	; 0x68
    111c:	af00      	add	r7, sp, #0
	TraceNL("Entered check sim card.");
    111e:	480c      	ldr	r0, [pc, #48]	; (1150 <GSM_CheckSimCard+0x38>)
    1120:	f001 faa6 	bl	2670 <TraceNL>
	char response[100];
	GSM_SendAt("AT+CPIN?", response, 250);
    1124:	1d3b      	adds	r3, r7, #4
    1126:	480b      	ldr	r0, [pc, #44]	; (1154 <GSM_CheckSimCard+0x3c>)
    1128:	4619      	mov	r1, r3
    112a:	22fa      	movs	r2, #250	; 0xfa
    112c:	f7ff fc4c 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "READY") != NULL)
    1130:	1d3b      	adds	r3, r7, #4
    1132:	4618      	mov	r0, r3
    1134:	4908      	ldr	r1, [pc, #32]	; (1158 <GSM_CheckSimCard+0x40>)
    1136:	f004 f980 	bl	543a <strstr>
    113a:	4603      	mov	r3, r0
    113c:	2b00      	cmp	r3, #0
    113e:	d001      	beq.n	1144 <GSM_CheckSimCard+0x2c>
		return ( SUCCESS );
    1140:	2300      	movs	r3, #0
    1142:	e001      	b.n	1148 <GSM_CheckSimCard+0x30>
	return ( FAIL );
    1144:	f04f 33ff 	mov.w	r3, #4294967295
}
    1148:	4618      	mov	r0, r3
    114a:	3768      	adds	r7, #104	; 0x68
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}
    1150:	00006938 	.word	0x00006938
    1154:	00006950 	.word	0x00006950
    1158:	0000695c 	.word	0x0000695c

0000115c <GSM_GetImei>:

void GSM_GetImei() {
    115c:	b580      	push	{r7, lr}
    115e:	b09a      	sub	sp, #104	; 0x68
    1160:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+GSN", response, 500);
    1162:	1d3b      	adds	r3, r7, #4
    1164:	480a      	ldr	r0, [pc, #40]	; (1190 <GSM_GetImei+0x34>)
    1166:	4619      	mov	r1, r3
    1168:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    116c:	f7ff fc2c 	bl	9c8 <GSM_SendAt>
	TraceNL("IMEI : ");
    1170:	4808      	ldr	r0, [pc, #32]	; (1194 <GSM_GetImei+0x38>)
    1172:	f001 fa7d 	bl	2670 <TraceNL>
	strncpy(imei, response + 9, 15);
    1176:	1d3b      	adds	r3, r7, #4
    1178:	3309      	adds	r3, #9
    117a:	4807      	ldr	r0, [pc, #28]	; (1198 <GSM_GetImei+0x3c>)
    117c:	4619      	mov	r1, r3
    117e:	220f      	movs	r2, #15
    1180:	f004 f92f 	bl	53e2 <strncpy>
	TraceNL(imei);
    1184:	4804      	ldr	r0, [pc, #16]	; (1198 <GSM_GetImei+0x3c>)
    1186:	f001 fa73 	bl	2670 <TraceNL>
}
    118a:	3768      	adds	r7, #104	; 0x68
    118c:	46bd      	mov	sp, r7
    118e:	bd80      	pop	{r7, pc}
    1190:	00006964 	.word	0x00006964
    1194:	0000696c 	.word	0x0000696c
    1198:	10000e0c 	.word	0x10000e0c

0000119c <GSM_GetImsi>:

void GSM_GetImsi() {
    119c:	b590      	push	{r4, r7, lr}
    119e:	b09d      	sub	sp, #116	; 0x74
    11a0:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+CIMI", response, 500);
    11a2:	463b      	mov	r3, r7
    11a4:	4827      	ldr	r0, [pc, #156]	; (1244 <GSM_GetImsi+0xa8>)
    11a6:	4619      	mov	r1, r3
    11a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    11ac:	f7ff fc0c 	bl	9c8 <GSM_SendAt>
	Trace("IMSI : ");
    11b0:	4825      	ldr	r0, [pc, #148]	; (1248 <GSM_GetImsi+0xac>)
    11b2:	f001 fa4d 	bl	2650 <Trace>
	int i;
	int index = 0;
    11b6:	2300      	movs	r3, #0
    11b8:	66bb      	str	r3, [r7, #104]	; 0x68
	int is_start = 0;
    11ba:	2300      	movs	r3, #0
    11bc:	667b      	str	r3, [r7, #100]	; 0x64
	for (i = 0; i < strlen(response); i++) {
    11be:	2300      	movs	r3, #0
    11c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    11c2:	e02c      	b.n	121e <GSM_GetImsi+0x82>
		if (index > 19)
    11c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    11c6:	2b13      	cmp	r3, #19
    11c8:	dd00      	ble.n	11cc <GSM_GetImsi+0x30>
			break;
    11ca:	e030      	b.n	122e <GSM_GetImsi+0x92>
		if ( isdigit(response[i]))
    11cc:	463a      	mov	r2, r7
    11ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    11d0:	4413      	add	r3, r2
    11d2:	781b      	ldrb	r3, [r3, #0]
    11d4:	3380      	adds	r3, #128	; 0x80
    11d6:	4a1d      	ldr	r2, [pc, #116]	; (124c <GSM_GetImsi+0xb0>)
    11d8:	5cd3      	ldrb	r3, [r2, r3]
    11da:	f003 0320 	and.w	r3, r3, #32
    11de:	2b00      	cmp	r3, #0
    11e0:	d001      	beq.n	11e6 <GSM_GetImsi+0x4a>
			is_start = 1;
    11e2:	2301      	movs	r3, #1
    11e4:	667b      	str	r3, [r7, #100]	; 0x64
		if (is_start == 1 && response[i] == '\n')
    11e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    11e8:	2b01      	cmp	r3, #1
    11ea:	d106      	bne.n	11fa <GSM_GetImsi+0x5e>
    11ec:	463a      	mov	r2, r7
    11ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    11f0:	4413      	add	r3, r2
    11f2:	781b      	ldrb	r3, [r3, #0]
    11f4:	2b0a      	cmp	r3, #10
    11f6:	d100      	bne.n	11fa <GSM_GetImsi+0x5e>
			break;
    11f8:	e019      	b.n	122e <GSM_GetImsi+0x92>
		if (is_start == 1) {
    11fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    11fc:	2b01      	cmp	r3, #1
    11fe:	d10b      	bne.n	1218 <GSM_GetImsi+0x7c>
			imsi[index] = response[i];
    1200:	463a      	mov	r2, r7
    1202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1204:	4413      	add	r3, r2
    1206:	7819      	ldrb	r1, [r3, #0]
    1208:	4a11      	ldr	r2, [pc, #68]	; (1250 <GSM_GetImsi+0xb4>)
    120a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    120c:	4413      	add	r3, r2
    120e:	460a      	mov	r2, r1
    1210:	701a      	strb	r2, [r3, #0]
			index++;
    1212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1214:	3301      	adds	r3, #1
    1216:	66bb      	str	r3, [r7, #104]	; 0x68
	GSM_SendAt("AT+CIMI", response, 500);
	Trace("IMSI : ");
	int i;
	int index = 0;
	int is_start = 0;
	for (i = 0; i < strlen(response); i++) {
    1218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    121a:	3301      	adds	r3, #1
    121c:	66fb      	str	r3, [r7, #108]	; 0x6c
    121e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    1220:	463b      	mov	r3, r7
    1222:	4618      	mov	r0, r3
    1224:	f004 f8b8 	bl	5398 <strlen>
    1228:	4603      	mov	r3, r0
    122a:	429c      	cmp	r4, r3
    122c:	d3ca      	bcc.n	11c4 <GSM_GetImsi+0x28>
		if (is_start == 1) {
			imsi[index] = response[i];
			index++;
		}
	}
	imsi[index - 1] = '\0';
    122e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1230:	3b01      	subs	r3, #1
    1232:	4a07      	ldr	r2, [pc, #28]	; (1250 <GSM_GetImsi+0xb4>)
    1234:	2100      	movs	r1, #0
    1236:	54d1      	strb	r1, [r2, r3]
	TraceNL(imsi);
    1238:	4805      	ldr	r0, [pc, #20]	; (1250 <GSM_GetImsi+0xb4>)
    123a:	f001 fa19 	bl	2670 <TraceNL>
}
    123e:	3774      	adds	r7, #116	; 0x74
    1240:	46bd      	mov	sp, r7
    1242:	bd90      	pop	{r4, r7, pc}
    1244:	00006974 	.word	0x00006974
    1248:	0000697c 	.word	0x0000697c
    124c:	000072d4 	.word	0x000072d4
    1250:	10000df8 	.word	0x10000df8

00001254 <GSM_EchoOFF>:
	TraceNL("ECHO ON");
}


void GSM_EchoOFF( )
{
    1254:	b580      	push	{r7, lr}
    1256:	b09a      	sub	sp, #104	; 0x68
    1258:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("ATE0", response, 500);
    125a:	1d3b      	adds	r3, r7, #4
    125c:	4805      	ldr	r0, [pc, #20]	; (1274 <GSM_EchoOFF+0x20>)
    125e:	4619      	mov	r1, r3
    1260:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1264:	f7ff fbb0 	bl	9c8 <GSM_SendAt>
	TraceNL("ECHO OFF");
    1268:	4803      	ldr	r0, [pc, #12]	; (1278 <GSM_EchoOFF+0x24>)
    126a:	f001 fa01 	bl	2670 <TraceNL>
}
    126e:	3768      	adds	r7, #104	; 0x68
    1270:	46bd      	mov	sp, r7
    1272:	bd80      	pop	{r7, pc}
    1274:	00006994 	.word	0x00006994
    1278:	0000699c 	.word	0x0000699c

0000127c <GSM_TCP_Close>:

void GSM_TCP_Close( void )
{
    127c:	b580      	push	{r7, lr}
    127e:	b0b2      	sub	sp, #200	; 0xc8
    1280:	af00      	add	r7, sp, #0
	char response[200];
	GSM_SendAt("AT+QICLOSE", response, 500);
    1282:	463b      	mov	r3, r7
    1284:	4805      	ldr	r0, [pc, #20]	; (129c <GSM_TCP_Close+0x20>)
    1286:	4619      	mov	r1, r3
    1288:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    128c:	f7ff fb9c 	bl	9c8 <GSM_SendAt>
	TraceNL("CLOSE TCP connection ");
    1290:	4803      	ldr	r0, [pc, #12]	; (12a0 <GSM_TCP_Close+0x24>)
    1292:	f001 f9ed 	bl	2670 <TraceNL>

}
    1296:	37c8      	adds	r7, #200	; 0xc8
    1298:	46bd      	mov	sp, r7
    129a:	bd80      	pop	{r7, pc}
    129c:	000069a8 	.word	0x000069a8
    12a0:	000069b4 	.word	0x000069b4

000012a4 <u16CRC_Calc16>:
**
** Returned value:  16-bit CRC
**
******************************************************************************/
uint16_t u16CRC_Calc16(const uint8_t *pu8Data, int16_t i16Len)
{
    12a4:	b480      	push	{r7}
    12a6:	b085      	sub	sp, #20
    12a8:	af00      	add	r7, sp, #0
    12aa:	6078      	str	r0, [r7, #4]
    12ac:	460b      	mov	r3, r1
    12ae:	807b      	strh	r3, [r7, #2]
	uint8_t i;
	uint16_t u16CRC = 0;
    12b0:	2300      	movs	r3, #0
    12b2:	81bb      	strh	r3, [r7, #12]

    while(--i16Len >= 0)
    12b4:	e022      	b.n	12fc <u16CRC_Calc16+0x58>
    {
    	i = 8;
    12b6:	2308      	movs	r3, #8
    12b8:	73fb      	strb	r3, [r7, #15]
    	u16CRC = u16CRC ^ (((uint16_t)*pu8Data++) << 8);
    12ba:	687b      	ldr	r3, [r7, #4]
    12bc:	1c5a      	adds	r2, r3, #1
    12be:	607a      	str	r2, [r7, #4]
    12c0:	781b      	ldrb	r3, [r3, #0]
    12c2:	021b      	lsls	r3, r3, #8
    12c4:	b29a      	uxth	r2, r3
    12c6:	89bb      	ldrh	r3, [r7, #12]
    12c8:	4053      	eors	r3, r2
    12ca:	b29b      	uxth	r3, r3
    12cc:	81bb      	strh	r3, [r7, #12]

    	do
        {
    		if (u16CRC & 0x8000)
    12ce:	89bb      	ldrh	r3, [r7, #12]
    12d0:	b21b      	sxth	r3, r3
    12d2:	2b00      	cmp	r3, #0
    12d4:	da09      	bge.n	12ea <u16CRC_Calc16+0x46>
    		{
    			u16CRC = u16CRC << 1 ^ 0x1021;
    12d6:	89bb      	ldrh	r3, [r7, #12]
    12d8:	005b      	lsls	r3, r3, #1
    12da:	b29b      	uxth	r3, r3
    12dc:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
    12e0:	f083 0301 	eor.w	r3, r3, #1
    12e4:	b29b      	uxth	r3, r3
    12e6:	81bb      	strh	r3, [r7, #12]
    12e8:	e002      	b.n	12f0 <u16CRC_Calc16+0x4c>
    		}
    		else
    		{
    			u16CRC = u16CRC << 1;
    12ea:	89bb      	ldrh	r3, [r7, #12]
    12ec:	005b      	lsls	r3, r3, #1
    12ee:	81bb      	strh	r3, [r7, #12]
    		}
        }
    	while(--i);
    12f0:	7bfb      	ldrb	r3, [r7, #15]
    12f2:	3b01      	subs	r3, #1
    12f4:	73fb      	strb	r3, [r7, #15]
    12f6:	7bfb      	ldrb	r3, [r7, #15]
    12f8:	2b00      	cmp	r3, #0
    12fa:	d1e8      	bne.n	12ce <u16CRC_Calc16+0x2a>
uint16_t u16CRC_Calc16(const uint8_t *pu8Data, int16_t i16Len)
{
	uint8_t i;
	uint16_t u16CRC = 0;

    while(--i16Len >= 0)
    12fc:	887b      	ldrh	r3, [r7, #2]
    12fe:	3b01      	subs	r3, #1
    1300:	b29b      	uxth	r3, r3
    1302:	807b      	strh	r3, [r7, #2]
    1304:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    1308:	2b00      	cmp	r3, #0
    130a:	dad4      	bge.n	12b6 <u16CRC_Calc16+0x12>
    			u16CRC = u16CRC << 1;
    		}
        }
    	while(--i);
    }
    return u16CRC;
    130c:	89bb      	ldrh	r3, [r7, #12]
}
    130e:	4618      	mov	r0, r3
    1310:	3714      	adds	r7, #20
    1312:	46bd      	mov	sp, r7
    1314:	f85d 7b04 	ldr.w	r7, [sp], #4
    1318:	4770      	bx	lr
    131a:	bf00      	nop

0000131c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    131c:	b480      	push	{r7}
    131e:	b083      	sub	sp, #12
    1320:	af00      	add	r7, sp, #0
    1322:	4603      	mov	r3, r0
    1324:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1326:	4908      	ldr	r1, [pc, #32]	; (1348 <NVIC_EnableIRQ+0x2c>)
    1328:	f997 3007 	ldrsb.w	r3, [r7, #7]
    132c:	095b      	lsrs	r3, r3, #5
    132e:	79fa      	ldrb	r2, [r7, #7]
    1330:	f002 021f 	and.w	r2, r2, #31
    1334:	2001      	movs	r0, #1
    1336:	fa00 f202 	lsl.w	r2, r0, r2
    133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    133e:	370c      	adds	r7, #12
    1340:	46bd      	mov	sp, r7
    1342:	f85d 7b04 	ldr.w	r7, [sp], #4
    1346:	4770      	bx	lr
    1348:	e000e100 	.word	0xe000e100

0000134c <I2C0_IRQHandler>:

volatile uint32_t RdIndex_1,RdIndex_0 = 0;
volatile uint32_t WrIndex_1,WrIndex_0 = 0;


void I2C0_IRQHandler(void) {
    134c:	b480      	push	{r7}
    134e:	b083      	sub	sp, #12
    1350:	af00      	add	r7, sp, #0
	uint8_t StatValue;
	/* this handler deals with master read and master write only */
	StatValue = LPC_I2C0->I2STAT;
    1352:	4ba9      	ldr	r3, [pc, #676]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    1354:	685b      	ldr	r3, [r3, #4]
    1356:	71fb      	strb	r3, [r7, #7]
	switch (StatValue) {
    1358:	79fb      	ldrb	r3, [r7, #7]
    135a:	3b08      	subs	r3, #8
    135c:	2b50      	cmp	r3, #80	; 0x50
    135e:	f200 8184 	bhi.w	166a <I2C0_IRQHandler+0x31e>
    1362:	a201      	add	r2, pc, #4	; (adr r2, 1368 <I2C0_IRQHandler+0x1c>)
    1364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1368:	000014ad 	.word	0x000014ad
    136c:	0000166b 	.word	0x0000166b
    1370:	0000166b 	.word	0x0000166b
    1374:	0000166b 	.word	0x0000166b
    1378:	0000166b 	.word	0x0000166b
    137c:	0000166b 	.word	0x0000166b
    1380:	0000166b 	.word	0x0000166b
    1384:	0000166b 	.word	0x0000166b
    1388:	000014cf 	.word	0x000014cf
    138c:	0000166b 	.word	0x0000166b
    1390:	0000166b 	.word	0x0000166b
    1394:	0000166b 	.word	0x0000166b
    1398:	0000166b 	.word	0x0000166b
    139c:	0000166b 	.word	0x0000166b
    13a0:	0000166b 	.word	0x0000166b
    13a4:	0000166b 	.word	0x0000166b
    13a8:	000014f9 	.word	0x000014f9
    13ac:	0000166b 	.word	0x0000166b
    13b0:	0000166b 	.word	0x0000166b
    13b4:	0000166b 	.word	0x0000166b
    13b8:	0000166b 	.word	0x0000166b
    13bc:	0000166b 	.word	0x0000166b
    13c0:	0000166b 	.word	0x0000166b
    13c4:	0000166b 	.word	0x0000166b
    13c8:	0000165d 	.word	0x0000165d
    13cc:	0000166b 	.word	0x0000166b
    13d0:	0000166b 	.word	0x0000166b
    13d4:	0000166b 	.word	0x0000166b
    13d8:	0000166b 	.word	0x0000166b
    13dc:	0000166b 	.word	0x0000166b
    13e0:	0000166b 	.word	0x0000166b
    13e4:	0000166b 	.word	0x0000166b
    13e8:	00001523 	.word	0x00001523
    13ec:	0000166b 	.word	0x0000166b
    13f0:	0000166b 	.word	0x0000166b
    13f4:	0000166b 	.word	0x0000166b
    13f8:	0000166b 	.word	0x0000166b
    13fc:	0000166b 	.word	0x0000166b
    1400:	0000166b 	.word	0x0000166b
    1404:	0000166b 	.word	0x0000166b
    1408:	00001569 	.word	0x00001569
    140c:	0000166b 	.word	0x0000166b
    1410:	0000166b 	.word	0x0000166b
    1414:	0000166b 	.word	0x0000166b
    1418:	0000166b 	.word	0x0000166b
    141c:	0000166b 	.word	0x0000166b
    1420:	0000166b 	.word	0x0000166b
    1424:	0000166b 	.word	0x0000166b
    1428:	0000166b 	.word	0x0000166b
    142c:	0000166b 	.word	0x0000166b
    1430:	0000166b 	.word	0x0000166b
    1434:	0000166b 	.word	0x0000166b
    1438:	0000166b 	.word	0x0000166b
    143c:	0000166b 	.word	0x0000166b
    1440:	0000166b 	.word	0x0000166b
    1444:	0000166b 	.word	0x0000166b
    1448:	000015e9 	.word	0x000015e9
    144c:	0000166b 	.word	0x0000166b
    1450:	0000166b 	.word	0x0000166b
    1454:	0000166b 	.word	0x0000166b
    1458:	0000166b 	.word	0x0000166b
    145c:	0000166b 	.word	0x0000166b
    1460:	0000166b 	.word	0x0000166b
    1464:	0000166b 	.word	0x0000166b
    1468:	0000165d 	.word	0x0000165d
    146c:	0000166b 	.word	0x0000166b
    1470:	0000166b 	.word	0x0000166b
    1474:	0000166b 	.word	0x0000166b
    1478:	0000166b 	.word	0x0000166b
    147c:	0000166b 	.word	0x0000166b
    1480:	0000166b 	.word	0x0000166b
    1484:	0000166b 	.word	0x0000166b
    1488:	00001615 	.word	0x00001615
    148c:	0000166b 	.word	0x0000166b
    1490:	0000166b 	.word	0x0000166b
    1494:	0000166b 	.word	0x0000166b
    1498:	0000166b 	.word	0x0000166b
    149c:	0000166b 	.word	0x0000166b
    14a0:	0000166b 	.word	0x0000166b
    14a4:	0000166b 	.word	0x0000166b
    14a8:	00001615 	.word	0x00001615
		case 0x08: /* A Start condition is issued. */
			LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    14ac:	4952      	ldr	r1, [pc, #328]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    14ae:	4b53      	ldr	r3, [pc, #332]	; (15fc <I2C0_IRQHandler+0x2b0>)
    14b0:	681b      	ldr	r3, [r3, #0]
    14b2:	1c5a      	adds	r2, r3, #1
    14b4:	4851      	ldr	r0, [pc, #324]	; (15fc <I2C0_IRQHandler+0x2b0>)
    14b6:	6002      	str	r2, [r0, #0]
    14b8:	4a51      	ldr	r2, [pc, #324]	; (1600 <I2C0_IRQHandler+0x2b4>)
    14ba:	5cd3      	ldrb	r3, [r2, r3]
    14bc:	b2db      	uxtb	r3, r3
    14be:	608b      	str	r3, [r1, #8]
			LPC_I2C0->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    14c0:	4b4d      	ldr	r3, [pc, #308]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    14c2:	2228      	movs	r2, #40	; 0x28
    14c4:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = I2C_STARTED;
    14c6:	4b4f      	ldr	r3, [pc, #316]	; (1604 <I2C0_IRQHandler+0x2b8>)
    14c8:	2201      	movs	r2, #1
    14ca:	601a      	str	r2, [r3, #0]
			break;
    14cc:	e0d1      	b.n	1672 <I2C0_IRQHandler+0x326>
		case 0x10: /* A repeated started is issued */
			if (!I2C0_Cmd) {
    14ce:	4b4e      	ldr	r3, [pc, #312]	; (1608 <I2C0_IRQHandler+0x2bc>)
    14d0:	681b      	ldr	r3, [r3, #0]
    14d2:	2b00      	cmp	r3, #0
    14d4:	d109      	bne.n	14ea <I2C0_IRQHandler+0x19e>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    14d6:	4948      	ldr	r1, [pc, #288]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    14d8:	4b48      	ldr	r3, [pc, #288]	; (15fc <I2C0_IRQHandler+0x2b0>)
    14da:	681b      	ldr	r3, [r3, #0]
    14dc:	1c5a      	adds	r2, r3, #1
    14de:	4847      	ldr	r0, [pc, #284]	; (15fc <I2C0_IRQHandler+0x2b0>)
    14e0:	6002      	str	r2, [r0, #0]
    14e2:	4a47      	ldr	r2, [pc, #284]	; (1600 <I2C0_IRQHandler+0x2b4>)
    14e4:	5cd3      	ldrb	r3, [r2, r3]
    14e6:	b2db      	uxtb	r3, r3
    14e8:	608b      	str	r3, [r1, #8]
			}
			LPC_I2C0->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    14ea:	4b43      	ldr	r3, [pc, #268]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    14ec:	2228      	movs	r2, #40	; 0x28
    14ee:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = I2C_RESTARTED;
    14f0:	4b44      	ldr	r3, [pc, #272]	; (1604 <I2C0_IRQHandler+0x2b8>)
    14f2:	2202      	movs	r2, #2
    14f4:	601a      	str	r2, [r3, #0]
			break;
    14f6:	e0bc      	b.n	1672 <I2C0_IRQHandler+0x326>
		case 0x18: /* Regardless, it's a ACK */
			if (I2C0_MasterState == I2C_STARTED) {
    14f8:	4b42      	ldr	r3, [pc, #264]	; (1604 <I2C0_IRQHandler+0x2b8>)
    14fa:	681b      	ldr	r3, [r3, #0]
    14fc:	2b01      	cmp	r3, #1
    14fe:	d10c      	bne.n	151a <I2C0_IRQHandler+0x1ce>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    1500:	493d      	ldr	r1, [pc, #244]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    1502:	4b3e      	ldr	r3, [pc, #248]	; (15fc <I2C0_IRQHandler+0x2b0>)
    1504:	681b      	ldr	r3, [r3, #0]
    1506:	1c5a      	adds	r2, r3, #1
    1508:	483c      	ldr	r0, [pc, #240]	; (15fc <I2C0_IRQHandler+0x2b0>)
    150a:	6002      	str	r2, [r0, #0]
    150c:	4a3c      	ldr	r2, [pc, #240]	; (1600 <I2C0_IRQHandler+0x2b4>)
    150e:	5cd3      	ldrb	r3, [r2, r3]
    1510:	b2db      	uxtb	r3, r3
    1512:	608b      	str	r3, [r1, #8]
				I2C0_MasterState = DATA_ACK;
    1514:	4b3b      	ldr	r3, [pc, #236]	; (1604 <I2C0_IRQHandler+0x2b8>)
    1516:	2204      	movs	r2, #4
    1518:	601a      	str	r2, [r3, #0]
			}
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    151a:	4b37      	ldr	r3, [pc, #220]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    151c:	2208      	movs	r2, #8
    151e:	619a      	str	r2, [r3, #24]
			break;
    1520:	e0a7      	b.n	1672 <I2C0_IRQHandler+0x326>
		case 0x28: /* Data byte has been transmitted, regardless ACK or NACK */
			 if ( WrIndex_0 < I2C0_WriteLength )
    1522:	4b36      	ldr	r3, [pc, #216]	; (15fc <I2C0_IRQHandler+0x2b0>)
    1524:	681a      	ldr	r2, [r3, #0]
    1526:	4b39      	ldr	r3, [pc, #228]	; (160c <I2C0_IRQHandler+0x2c0>)
    1528:	681b      	ldr	r3, [r3, #0]
    152a:	429a      	cmp	r2, r3
    152c:	d20a      	bcs.n	1544 <I2C0_IRQHandler+0x1f8>
				{
				  LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++]; /* this should be the last one */
    152e:	4932      	ldr	r1, [pc, #200]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    1530:	4b32      	ldr	r3, [pc, #200]	; (15fc <I2C0_IRQHandler+0x2b0>)
    1532:	681b      	ldr	r3, [r3, #0]
    1534:	1c5a      	adds	r2, r3, #1
    1536:	4831      	ldr	r0, [pc, #196]	; (15fc <I2C0_IRQHandler+0x2b0>)
    1538:	6002      	str	r2, [r0, #0]
    153a:	4a31      	ldr	r2, [pc, #196]	; (1600 <I2C0_IRQHandler+0x2b4>)
    153c:	5cd3      	ldrb	r3, [r2, r3]
    153e:	b2db      	uxtb	r3, r3
    1540:	608b      	str	r3, [r1, #8]
    1542:	e00d      	b.n	1560 <I2C0_IRQHandler+0x214>
				}
				else
				{
				  if ( I2C0_ReadLength != 0 )
    1544:	4b32      	ldr	r3, [pc, #200]	; (1610 <I2C0_IRQHandler+0x2c4>)
    1546:	681b      	ldr	r3, [r3, #0]
    1548:	2b00      	cmp	r3, #0
    154a:	d003      	beq.n	1554 <I2C0_IRQHandler+0x208>
				  {
						LPC_I2C0->I2CONSET = I2CONSET_STA;   /* Set Repeated-start flag */
    154c:	4b2a      	ldr	r3, [pc, #168]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    154e:	2220      	movs	r2, #32
    1550:	601a      	str	r2, [r3, #0]
    1552:	e005      	b.n	1560 <I2C0_IRQHandler+0x214>
				  }
				  else
				  {
						LPC_I2C0->I2CONSET = I2CONSET_STO;      /* Set Stop flag */
    1554:	4b28      	ldr	r3, [pc, #160]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    1556:	2210      	movs	r2, #16
    1558:	601a      	str	r2, [r3, #0]
						I2C0_MasterState = I2C_IDLE;
    155a:	4b2a      	ldr	r3, [pc, #168]	; (1604 <I2C0_IRQHandler+0x2b8>)
    155c:	2200      	movs	r2, #0
    155e:	601a      	str	r2, [r3, #0]
				  }
				}
				LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    1560:	4b25      	ldr	r3, [pc, #148]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    1562:	2208      	movs	r2, #8
    1564:	619a      	str	r2, [r3, #24]
				break;
    1566:	e084      	b.n	1672 <I2C0_IRQHandler+0x326>
		case 0x30:
			if (WrIndex_0 != I2C0_WriteLength) {
    1568:	4b24      	ldr	r3, [pc, #144]	; (15fc <I2C0_IRQHandler+0x2b0>)
    156a:	681a      	ldr	r2, [r3, #0]
    156c:	4b27      	ldr	r3, [pc, #156]	; (160c <I2C0_IRQHandler+0x2c0>)
    156e:	681b      	ldr	r3, [r3, #0]
    1570:	429a      	cmp	r2, r3
    1572:	d024      	beq.n	15be <I2C0_IRQHandler+0x272>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[1 + WrIndex_0]; /* this should be the last one */
    1574:	4a20      	ldr	r2, [pc, #128]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    1576:	4b21      	ldr	r3, [pc, #132]	; (15fc <I2C0_IRQHandler+0x2b0>)
    1578:	681b      	ldr	r3, [r3, #0]
    157a:	3301      	adds	r3, #1
    157c:	4920      	ldr	r1, [pc, #128]	; (1600 <I2C0_IRQHandler+0x2b4>)
    157e:	5ccb      	ldrb	r3, [r1, r3]
    1580:	b2db      	uxtb	r3, r3
    1582:	6093      	str	r3, [r2, #8]
				WrIndex_0++;
    1584:	4b1d      	ldr	r3, [pc, #116]	; (15fc <I2C0_IRQHandler+0x2b0>)
    1586:	681b      	ldr	r3, [r3, #0]
    1588:	3301      	adds	r3, #1
    158a:	4a1c      	ldr	r2, [pc, #112]	; (15fc <I2C0_IRQHandler+0x2b0>)
    158c:	6013      	str	r3, [r2, #0]
				if (WrIndex_0 != I2C0_WriteLength) {
    158e:	4b1b      	ldr	r3, [pc, #108]	; (15fc <I2C0_IRQHandler+0x2b0>)
    1590:	681a      	ldr	r2, [r3, #0]
    1592:	4b1e      	ldr	r3, [pc, #120]	; (160c <I2C0_IRQHandler+0x2c0>)
    1594:	681b      	ldr	r3, [r3, #0]
    1596:	429a      	cmp	r2, r3
    1598:	d003      	beq.n	15a2 <I2C0_IRQHandler+0x256>
					I2C0_MasterState = DATA_ACK;
    159a:	4b1a      	ldr	r3, [pc, #104]	; (1604 <I2C0_IRQHandler+0x2b8>)
    159c:	2204      	movs	r2, #4
    159e:	601a      	str	r2, [r3, #0]
    15a0:	e01e      	b.n	15e0 <I2C0_IRQHandler+0x294>
				} else {
					I2C0_MasterState = DATA_NACK;
    15a2:	4b18      	ldr	r3, [pc, #96]	; (1604 <I2C0_IRQHandler+0x2b8>)
    15a4:	2205      	movs	r2, #5
    15a6:	601a      	str	r2, [r3, #0]
					if (I2C0_ReadLength != 0) {
    15a8:	4b19      	ldr	r3, [pc, #100]	; (1610 <I2C0_IRQHandler+0x2c4>)
    15aa:	681b      	ldr	r3, [r3, #0]
    15ac:	2b00      	cmp	r3, #0
    15ae:	d017      	beq.n	15e0 <I2C0_IRQHandler+0x294>
						LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    15b0:	4b11      	ldr	r3, [pc, #68]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    15b2:	2220      	movs	r2, #32
    15b4:	601a      	str	r2, [r3, #0]
						I2C0_MasterState = I2C_REPEATED_START;
    15b6:	4b13      	ldr	r3, [pc, #76]	; (1604 <I2C0_IRQHandler+0x2b8>)
    15b8:	2203      	movs	r2, #3
    15ba:	601a      	str	r2, [r3, #0]
    15bc:	e010      	b.n	15e0 <I2C0_IRQHandler+0x294>
					}
				}
			} else {
				if (I2C0_ReadLength != 0) {
    15be:	4b14      	ldr	r3, [pc, #80]	; (1610 <I2C0_IRQHandler+0x2c4>)
    15c0:	681b      	ldr	r3, [r3, #0]
    15c2:	2b00      	cmp	r3, #0
    15c4:	d006      	beq.n	15d4 <I2C0_IRQHandler+0x288>
					LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    15c6:	4b0c      	ldr	r3, [pc, #48]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    15c8:	2220      	movs	r2, #32
    15ca:	601a      	str	r2, [r3, #0]
					I2C0_MasterState = I2C_REPEATED_START;
    15cc:	4b0d      	ldr	r3, [pc, #52]	; (1604 <I2C0_IRQHandler+0x2b8>)
    15ce:	2203      	movs	r2, #3
    15d0:	601a      	str	r2, [r3, #0]
    15d2:	e005      	b.n	15e0 <I2C0_IRQHandler+0x294>
				} else {
					I2C0_MasterState = DATA_NACK;
    15d4:	4b0b      	ldr	r3, [pc, #44]	; (1604 <I2C0_IRQHandler+0x2b8>)
    15d6:	2205      	movs	r2, #5
    15d8:	601a      	str	r2, [r3, #0]
					LPC_I2C0->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    15da:	4b07      	ldr	r3, [pc, #28]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    15dc:	2210      	movs	r2, #16
    15de:	601a      	str	r2, [r3, #0]
				}
			}
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    15e0:	4b05      	ldr	r3, [pc, #20]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    15e2:	2208      	movs	r2, #8
    15e4:	619a      	str	r2, [r3, #24]
			break;
    15e6:	e044      	b.n	1672 <I2C0_IRQHandler+0x326>
		case 0x40: /* Master Receive, SLA_R has been sent */
			LPC_I2C0->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    15e8:	4b03      	ldr	r3, [pc, #12]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    15ea:	2204      	movs	r2, #4
    15ec:	601a      	str	r2, [r3, #0]
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    15ee:	4b02      	ldr	r3, [pc, #8]	; (15f8 <I2C0_IRQHandler+0x2ac>)
    15f0:	2208      	movs	r2, #8
    15f2:	619a      	str	r2, [r3, #24]
			break;
    15f4:	e03d      	b.n	1672 <I2C0_IRQHandler+0x326>
    15f6:	bf00      	nop
    15f8:	4001c000 	.word	0x4001c000
    15fc:	1000002c 	.word	0x1000002c
    1600:	10000ecc 	.word	0x10000ecc
    1604:	10000024 	.word	0x10000024
    1608:	10000eec 	.word	0x10000eec
    160c:	10000ea8 	.word	0x10000ea8
    1610:	10000e50 	.word	0x10000e50
		case 0x50: /* Data byte has been received, regardless following ACK or NACK */
		case 0x58:
			I2C0_MasterBuffer[3 + RdIndex_0] = LPC_I2C0->I2DAT;
    1614:	4b19      	ldr	r3, [pc, #100]	; (167c <I2C0_IRQHandler+0x330>)
    1616:	681b      	ldr	r3, [r3, #0]
    1618:	3303      	adds	r3, #3
    161a:	4a19      	ldr	r2, [pc, #100]	; (1680 <I2C0_IRQHandler+0x334>)
    161c:	6892      	ldr	r2, [r2, #8]
    161e:	b2d1      	uxtb	r1, r2
    1620:	4a18      	ldr	r2, [pc, #96]	; (1684 <I2C0_IRQHandler+0x338>)
    1622:	54d1      	strb	r1, [r2, r3]
			RdIndex_0++;
    1624:	4b15      	ldr	r3, [pc, #84]	; (167c <I2C0_IRQHandler+0x330>)
    1626:	681b      	ldr	r3, [r3, #0]
    1628:	3301      	adds	r3, #1
    162a:	4a14      	ldr	r2, [pc, #80]	; (167c <I2C0_IRQHandler+0x330>)
    162c:	6013      	str	r3, [r2, #0]
			if (RdIndex_0 != I2C0_ReadLength) {
    162e:	4b13      	ldr	r3, [pc, #76]	; (167c <I2C0_IRQHandler+0x330>)
    1630:	681a      	ldr	r2, [r3, #0]
    1632:	4b15      	ldr	r3, [pc, #84]	; (1688 <I2C0_IRQHandler+0x33c>)
    1634:	681b      	ldr	r3, [r3, #0]
    1636:	429a      	cmp	r2, r3
    1638:	d003      	beq.n	1642 <I2C0_IRQHandler+0x2f6>
				I2C0_MasterState = DATA_ACK;
    163a:	4b14      	ldr	r3, [pc, #80]	; (168c <I2C0_IRQHandler+0x340>)
    163c:	2204      	movs	r2, #4
    163e:	601a      	str	r2, [r3, #0]
    1640:	e005      	b.n	164e <I2C0_IRQHandler+0x302>
			} else {
				RdIndex_0 = 0;
    1642:	4b0e      	ldr	r3, [pc, #56]	; (167c <I2C0_IRQHandler+0x330>)
    1644:	2200      	movs	r2, #0
    1646:	601a      	str	r2, [r3, #0]
				I2C0_MasterState = DATA_NACK;
    1648:	4b10      	ldr	r3, [pc, #64]	; (168c <I2C0_IRQHandler+0x340>)
    164a:	2205      	movs	r2, #5
    164c:	601a      	str	r2, [r3, #0]
			}
			LPC_I2C0->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    164e:	4b0c      	ldr	r3, [pc, #48]	; (1680 <I2C0_IRQHandler+0x334>)
    1650:	2204      	movs	r2, #4
    1652:	601a      	str	r2, [r3, #0]
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    1654:	4b0a      	ldr	r3, [pc, #40]	; (1680 <I2C0_IRQHandler+0x334>)
    1656:	2208      	movs	r2, #8
    1658:	619a      	str	r2, [r3, #24]
			break;
    165a:	e00a      	b.n	1672 <I2C0_IRQHandler+0x326>
		case 0x20: /* regardless, it's a NACK */
		case 0x48:
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    165c:	4b08      	ldr	r3, [pc, #32]	; (1680 <I2C0_IRQHandler+0x334>)
    165e:	2208      	movs	r2, #8
    1660:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = DATA_NACK;
    1662:	4b0a      	ldr	r3, [pc, #40]	; (168c <I2C0_IRQHandler+0x340>)
    1664:	2205      	movs	r2, #5
    1666:	601a      	str	r2, [r3, #0]
			break;
    1668:	e003      	b.n	1672 <I2C0_IRQHandler+0x326>
		case 0x38: /* Arbitration lost, in this example, we don't
		 deal with multiple master situation */
		default:
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    166a:	4b05      	ldr	r3, [pc, #20]	; (1680 <I2C0_IRQHandler+0x334>)
    166c:	2208      	movs	r2, #8
    166e:	619a      	str	r2, [r3, #24]
			break;
    1670:	bf00      	nop
	}
}
    1672:	370c      	adds	r7, #12
    1674:	46bd      	mov	sp, r7
    1676:	f85d 7b04 	ldr.w	r7, [sp], #4
    167a:	4770      	bx	lr
    167c:	10000028 	.word	0x10000028
    1680:	4001c000 	.word	0x4001c000
    1684:	10000ecc 	.word	0x10000ecc
    1688:	10000e50 	.word	0x10000e50
    168c:	10000024 	.word	0x10000024

00001690 <I2C1_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void I2C1_IRQHandler(void) {
    1690:	b480      	push	{r7}
    1692:	b083      	sub	sp, #12
    1694:	af00      	add	r7, sp, #0
	uint8_t StatValue;
	/* this handler deals with master read and master write only */
	StatValue = LPC_I2C1->I2STAT;
    1696:	4bae      	ldr	r3, [pc, #696]	; (1950 <I2C1_IRQHandler+0x2c0>)
    1698:	685b      	ldr	r3, [r3, #4]
    169a:	71fb      	strb	r3, [r7, #7]
	switch (StatValue) {
    169c:	79fb      	ldrb	r3, [r7, #7]
    169e:	3b08      	subs	r3, #8
    16a0:	2b50      	cmp	r3, #80	; 0x50
    16a2:	f200 814b 	bhi.w	193c <I2C1_IRQHandler+0x2ac>
    16a6:	a201      	add	r2, pc, #4	; (adr r2, 16ac <I2C1_IRQHandler+0x1c>)
    16a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    16ac:	000017f1 	.word	0x000017f1
    16b0:	0000193d 	.word	0x0000193d
    16b4:	0000193d 	.word	0x0000193d
    16b8:	0000193d 	.word	0x0000193d
    16bc:	0000193d 	.word	0x0000193d
    16c0:	0000193d 	.word	0x0000193d
    16c4:	0000193d 	.word	0x0000193d
    16c8:	0000193d 	.word	0x0000193d
    16cc:	00001809 	.word	0x00001809
    16d0:	0000193d 	.word	0x0000193d
    16d4:	0000193d 	.word	0x0000193d
    16d8:	0000193d 	.word	0x0000193d
    16dc:	0000193d 	.word	0x0000193d
    16e0:	0000193d 	.word	0x0000193d
    16e4:	0000193d 	.word	0x0000193d
    16e8:	0000193d 	.word	0x0000193d
    16ec:	00001829 	.word	0x00001829
    16f0:	0000193d 	.word	0x0000193d
    16f4:	0000193d 	.word	0x0000193d
    16f8:	0000193d 	.word	0x0000193d
    16fc:	0000193d 	.word	0x0000193d
    1700:	0000193d 	.word	0x0000193d
    1704:	0000193d 	.word	0x0000193d
    1708:	0000193d 	.word	0x0000193d
    170c:	0000192f 	.word	0x0000192f
    1710:	0000193d 	.word	0x0000193d
    1714:	0000193d 	.word	0x0000193d
    1718:	0000193d 	.word	0x0000193d
    171c:	0000193d 	.word	0x0000193d
    1720:	0000193d 	.word	0x0000193d
    1724:	0000193d 	.word	0x0000193d
    1728:	0000193d 	.word	0x0000193d
    172c:	00001859 	.word	0x00001859
    1730:	0000193d 	.word	0x0000193d
    1734:	0000193d 	.word	0x0000193d
    1738:	0000193d 	.word	0x0000193d
    173c:	0000193d 	.word	0x0000193d
    1740:	0000193d 	.word	0x0000193d
    1744:	0000193d 	.word	0x0000193d
    1748:	0000193d 	.word	0x0000193d
    174c:	00001859 	.word	0x00001859
    1750:	0000193d 	.word	0x0000193d
    1754:	0000193d 	.word	0x0000193d
    1758:	0000193d 	.word	0x0000193d
    175c:	0000193d 	.word	0x0000193d
    1760:	0000193d 	.word	0x0000193d
    1764:	0000193d 	.word	0x0000193d
    1768:	0000193d 	.word	0x0000193d
    176c:	0000193d 	.word	0x0000193d
    1770:	0000193d 	.word	0x0000193d
    1774:	0000193d 	.word	0x0000193d
    1778:	0000193d 	.word	0x0000193d
    177c:	0000193d 	.word	0x0000193d
    1780:	0000193d 	.word	0x0000193d
    1784:	0000193d 	.word	0x0000193d
    1788:	0000193d 	.word	0x0000193d
    178c:	000018d9 	.word	0x000018d9
    1790:	0000193d 	.word	0x0000193d
    1794:	0000193d 	.word	0x0000193d
    1798:	0000193d 	.word	0x0000193d
    179c:	0000193d 	.word	0x0000193d
    17a0:	0000193d 	.word	0x0000193d
    17a4:	0000193d 	.word	0x0000193d
    17a8:	0000193d 	.word	0x0000193d
    17ac:	0000192f 	.word	0x0000192f
    17b0:	0000193d 	.word	0x0000193d
    17b4:	0000193d 	.word	0x0000193d
    17b8:	0000193d 	.word	0x0000193d
    17bc:	0000193d 	.word	0x0000193d
    17c0:	0000193d 	.word	0x0000193d
    17c4:	0000193d 	.word	0x0000193d
    17c8:	0000193d 	.word	0x0000193d
    17cc:	000018e7 	.word	0x000018e7
    17d0:	0000193d 	.word	0x0000193d
    17d4:	0000193d 	.word	0x0000193d
    17d8:	0000193d 	.word	0x0000193d
    17dc:	0000193d 	.word	0x0000193d
    17e0:	0000193d 	.word	0x0000193d
    17e4:	0000193d 	.word	0x0000193d
    17e8:	0000193d 	.word	0x0000193d
    17ec:	000018e7 	.word	0x000018e7
	case 0x08: /* A Start condition is issued. */
		LPC_I2C1->I2DAT = I2C1_MasterBuffer[0];
    17f0:	4b57      	ldr	r3, [pc, #348]	; (1950 <I2C1_IRQHandler+0x2c0>)
    17f2:	4a58      	ldr	r2, [pc, #352]	; (1954 <I2C1_IRQHandler+0x2c4>)
    17f4:	7812      	ldrb	r2, [r2, #0]
    17f6:	b2d2      	uxtb	r2, r2
    17f8:	609a      	str	r2, [r3, #8]
		LPC_I2C1->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    17fa:	4b55      	ldr	r3, [pc, #340]	; (1950 <I2C1_IRQHandler+0x2c0>)
    17fc:	2228      	movs	r2, #40	; 0x28
    17fe:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = I2C_STARTED;
    1800:	4b55      	ldr	r3, [pc, #340]	; (1958 <I2C1_IRQHandler+0x2c8>)
    1802:	2201      	movs	r2, #1
    1804:	601a      	str	r2, [r3, #0]
		break;
    1806:	e09d      	b.n	1944 <I2C1_IRQHandler+0x2b4>
	case 0x10: /* A repeated started is issued */
		if (!I2C1_Cmd) {
    1808:	4b54      	ldr	r3, [pc, #336]	; (195c <I2C1_IRQHandler+0x2cc>)
    180a:	681b      	ldr	r3, [r3, #0]
    180c:	2b00      	cmp	r3, #0
    180e:	d104      	bne.n	181a <I2C1_IRQHandler+0x18a>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[2];
    1810:	4b4f      	ldr	r3, [pc, #316]	; (1950 <I2C1_IRQHandler+0x2c0>)
    1812:	4a50      	ldr	r2, [pc, #320]	; (1954 <I2C1_IRQHandler+0x2c4>)
    1814:	7892      	ldrb	r2, [r2, #2]
    1816:	b2d2      	uxtb	r2, r2
    1818:	609a      	str	r2, [r3, #8]
		}
		LPC_I2C1->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    181a:	4b4d      	ldr	r3, [pc, #308]	; (1950 <I2C1_IRQHandler+0x2c0>)
    181c:	2228      	movs	r2, #40	; 0x28
    181e:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = I2C_RESTARTED;
    1820:	4b4d      	ldr	r3, [pc, #308]	; (1958 <I2C1_IRQHandler+0x2c8>)
    1822:	2202      	movs	r2, #2
    1824:	601a      	str	r2, [r3, #0]
		break;
    1826:	e08d      	b.n	1944 <I2C1_IRQHandler+0x2b4>
	case 0x18: /* Regardless, it's a ACK */
		if (I2C1_MasterState == I2C_STARTED) {
    1828:	4b4b      	ldr	r3, [pc, #300]	; (1958 <I2C1_IRQHandler+0x2c8>)
    182a:	681b      	ldr	r3, [r3, #0]
    182c:	2b01      	cmp	r3, #1
    182e:	d10f      	bne.n	1850 <I2C1_IRQHandler+0x1c0>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[1 + WrIndex_1];
    1830:	4a47      	ldr	r2, [pc, #284]	; (1950 <I2C1_IRQHandler+0x2c0>)
    1832:	4b4b      	ldr	r3, [pc, #300]	; (1960 <I2C1_IRQHandler+0x2d0>)
    1834:	681b      	ldr	r3, [r3, #0]
    1836:	3301      	adds	r3, #1
    1838:	4946      	ldr	r1, [pc, #280]	; (1954 <I2C1_IRQHandler+0x2c4>)
    183a:	5ccb      	ldrb	r3, [r1, r3]
    183c:	b2db      	uxtb	r3, r3
    183e:	6093      	str	r3, [r2, #8]
			WrIndex_1++;
    1840:	4b47      	ldr	r3, [pc, #284]	; (1960 <I2C1_IRQHandler+0x2d0>)
    1842:	681b      	ldr	r3, [r3, #0]
    1844:	3301      	adds	r3, #1
    1846:	4a46      	ldr	r2, [pc, #280]	; (1960 <I2C1_IRQHandler+0x2d0>)
    1848:	6013      	str	r3, [r2, #0]
			I2C1_MasterState = DATA_ACK;
    184a:	4b43      	ldr	r3, [pc, #268]	; (1958 <I2C1_IRQHandler+0x2c8>)
    184c:	2204      	movs	r2, #4
    184e:	601a      	str	r2, [r3, #0]
		}
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    1850:	4b3f      	ldr	r3, [pc, #252]	; (1950 <I2C1_IRQHandler+0x2c0>)
    1852:	2208      	movs	r2, #8
    1854:	619a      	str	r2, [r3, #24]
		break;
    1856:	e075      	b.n	1944 <I2C1_IRQHandler+0x2b4>
	case 0x28: /* Data byte has been transmitted, regardless ACK or NACK */
	case 0x30:
		if (WrIndex_1 != I2C1_WriteLength) {
    1858:	4b41      	ldr	r3, [pc, #260]	; (1960 <I2C1_IRQHandler+0x2d0>)
    185a:	681a      	ldr	r2, [r3, #0]
    185c:	4b41      	ldr	r3, [pc, #260]	; (1964 <I2C1_IRQHandler+0x2d4>)
    185e:	681b      	ldr	r3, [r3, #0]
    1860:	429a      	cmp	r2, r3
    1862:	d024      	beq.n	18ae <I2C1_IRQHandler+0x21e>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[1 + WrIndex_1]; /* this should be the last one */
    1864:	4a3a      	ldr	r2, [pc, #232]	; (1950 <I2C1_IRQHandler+0x2c0>)
    1866:	4b3e      	ldr	r3, [pc, #248]	; (1960 <I2C1_IRQHandler+0x2d0>)
    1868:	681b      	ldr	r3, [r3, #0]
    186a:	3301      	adds	r3, #1
    186c:	4939      	ldr	r1, [pc, #228]	; (1954 <I2C1_IRQHandler+0x2c4>)
    186e:	5ccb      	ldrb	r3, [r1, r3]
    1870:	b2db      	uxtb	r3, r3
    1872:	6093      	str	r3, [r2, #8]
			WrIndex_1++;
    1874:	4b3a      	ldr	r3, [pc, #232]	; (1960 <I2C1_IRQHandler+0x2d0>)
    1876:	681b      	ldr	r3, [r3, #0]
    1878:	3301      	adds	r3, #1
    187a:	4a39      	ldr	r2, [pc, #228]	; (1960 <I2C1_IRQHandler+0x2d0>)
    187c:	6013      	str	r3, [r2, #0]
			if (WrIndex_1 != I2C1_WriteLength) {
    187e:	4b38      	ldr	r3, [pc, #224]	; (1960 <I2C1_IRQHandler+0x2d0>)
    1880:	681a      	ldr	r2, [r3, #0]
    1882:	4b38      	ldr	r3, [pc, #224]	; (1964 <I2C1_IRQHandler+0x2d4>)
    1884:	681b      	ldr	r3, [r3, #0]
    1886:	429a      	cmp	r2, r3
    1888:	d003      	beq.n	1892 <I2C1_IRQHandler+0x202>
				I2C1_MasterState = DATA_ACK;
    188a:	4b33      	ldr	r3, [pc, #204]	; (1958 <I2C1_IRQHandler+0x2c8>)
    188c:	2204      	movs	r2, #4
    188e:	601a      	str	r2, [r3, #0]
    1890:	e01e      	b.n	18d0 <I2C1_IRQHandler+0x240>
			} else {
				I2C1_MasterState = DATA_NACK;
    1892:	4b31      	ldr	r3, [pc, #196]	; (1958 <I2C1_IRQHandler+0x2c8>)
    1894:	2205      	movs	r2, #5
    1896:	601a      	str	r2, [r3, #0]
				if (I2C1_ReadLength != 0) {
    1898:	4b33      	ldr	r3, [pc, #204]	; (1968 <I2C1_IRQHandler+0x2d8>)
    189a:	681b      	ldr	r3, [r3, #0]
    189c:	2b00      	cmp	r3, #0
    189e:	d017      	beq.n	18d0 <I2C1_IRQHandler+0x240>
					LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    18a0:	4b2b      	ldr	r3, [pc, #172]	; (1950 <I2C1_IRQHandler+0x2c0>)
    18a2:	2220      	movs	r2, #32
    18a4:	601a      	str	r2, [r3, #0]
					I2C1_MasterState = I2C_REPEATED_START;
    18a6:	4b2c      	ldr	r3, [pc, #176]	; (1958 <I2C1_IRQHandler+0x2c8>)
    18a8:	2203      	movs	r2, #3
    18aa:	601a      	str	r2, [r3, #0]
    18ac:	e010      	b.n	18d0 <I2C1_IRQHandler+0x240>
				}
			}
		} else {
			if (I2C1_ReadLength != 0) {
    18ae:	4b2e      	ldr	r3, [pc, #184]	; (1968 <I2C1_IRQHandler+0x2d8>)
    18b0:	681b      	ldr	r3, [r3, #0]
    18b2:	2b00      	cmp	r3, #0
    18b4:	d006      	beq.n	18c4 <I2C1_IRQHandler+0x234>
				LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    18b6:	4b26      	ldr	r3, [pc, #152]	; (1950 <I2C1_IRQHandler+0x2c0>)
    18b8:	2220      	movs	r2, #32
    18ba:	601a      	str	r2, [r3, #0]
				I2C1_MasterState = I2C_REPEATED_START;
    18bc:	4b26      	ldr	r3, [pc, #152]	; (1958 <I2C1_IRQHandler+0x2c8>)
    18be:	2203      	movs	r2, #3
    18c0:	601a      	str	r2, [r3, #0]
    18c2:	e005      	b.n	18d0 <I2C1_IRQHandler+0x240>
			} else {
				I2C1_MasterState = DATA_NACK;
    18c4:	4b24      	ldr	r3, [pc, #144]	; (1958 <I2C1_IRQHandler+0x2c8>)
    18c6:	2205      	movs	r2, #5
    18c8:	601a      	str	r2, [r3, #0]
				LPC_I2C1->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    18ca:	4b21      	ldr	r3, [pc, #132]	; (1950 <I2C1_IRQHandler+0x2c0>)
    18cc:	2210      	movs	r2, #16
    18ce:	601a      	str	r2, [r3, #0]
			}
		}
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    18d0:	4b1f      	ldr	r3, [pc, #124]	; (1950 <I2C1_IRQHandler+0x2c0>)
    18d2:	2208      	movs	r2, #8
    18d4:	619a      	str	r2, [r3, #24]
		break;
    18d6:	e035      	b.n	1944 <I2C1_IRQHandler+0x2b4>
	case 0x40: /* Master Receive, SLA_R has been sent */
		LPC_I2C1->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    18d8:	4b1d      	ldr	r3, [pc, #116]	; (1950 <I2C1_IRQHandler+0x2c0>)
    18da:	2204      	movs	r2, #4
    18dc:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    18de:	4b1c      	ldr	r3, [pc, #112]	; (1950 <I2C1_IRQHandler+0x2c0>)
    18e0:	2208      	movs	r2, #8
    18e2:	619a      	str	r2, [r3, #24]
		break;
    18e4:	e02e      	b.n	1944 <I2C1_IRQHandler+0x2b4>
	case 0x50: /* Data byte has been received, regardless following ACK or NACK */
	case 0x58:
		I2C1_MasterBuffer[3 + RdIndex_1] = LPC_I2C1->I2DAT;
    18e6:	4b21      	ldr	r3, [pc, #132]	; (196c <I2C1_IRQHandler+0x2dc>)
    18e8:	681b      	ldr	r3, [r3, #0]
    18ea:	3303      	adds	r3, #3
    18ec:	4a18      	ldr	r2, [pc, #96]	; (1950 <I2C1_IRQHandler+0x2c0>)
    18ee:	6892      	ldr	r2, [r2, #8]
    18f0:	b2d1      	uxtb	r1, r2
    18f2:	4a18      	ldr	r2, [pc, #96]	; (1954 <I2C1_IRQHandler+0x2c4>)
    18f4:	54d1      	strb	r1, [r2, r3]
		RdIndex_1++;
    18f6:	4b1d      	ldr	r3, [pc, #116]	; (196c <I2C1_IRQHandler+0x2dc>)
    18f8:	681b      	ldr	r3, [r3, #0]
    18fa:	3301      	adds	r3, #1
    18fc:	4a1b      	ldr	r2, [pc, #108]	; (196c <I2C1_IRQHandler+0x2dc>)
    18fe:	6013      	str	r3, [r2, #0]
		if (RdIndex_1 != I2C1_ReadLength) {
    1900:	4b1a      	ldr	r3, [pc, #104]	; (196c <I2C1_IRQHandler+0x2dc>)
    1902:	681a      	ldr	r2, [r3, #0]
    1904:	4b18      	ldr	r3, [pc, #96]	; (1968 <I2C1_IRQHandler+0x2d8>)
    1906:	681b      	ldr	r3, [r3, #0]
    1908:	429a      	cmp	r2, r3
    190a:	d003      	beq.n	1914 <I2C1_IRQHandler+0x284>
			I2C1_MasterState = DATA_ACK;
    190c:	4b12      	ldr	r3, [pc, #72]	; (1958 <I2C1_IRQHandler+0x2c8>)
    190e:	2204      	movs	r2, #4
    1910:	601a      	str	r2, [r3, #0]
    1912:	e005      	b.n	1920 <I2C1_IRQHandler+0x290>
		} else {
			RdIndex_1 = 0;
    1914:	4b15      	ldr	r3, [pc, #84]	; (196c <I2C1_IRQHandler+0x2dc>)
    1916:	2200      	movs	r2, #0
    1918:	601a      	str	r2, [r3, #0]
			I2C1_MasterState = DATA_NACK;
    191a:	4b0f      	ldr	r3, [pc, #60]	; (1958 <I2C1_IRQHandler+0x2c8>)
    191c:	2205      	movs	r2, #5
    191e:	601a      	str	r2, [r3, #0]
		}
		LPC_I2C1->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    1920:	4b0b      	ldr	r3, [pc, #44]	; (1950 <I2C1_IRQHandler+0x2c0>)
    1922:	2204      	movs	r2, #4
    1924:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    1926:	4b0a      	ldr	r3, [pc, #40]	; (1950 <I2C1_IRQHandler+0x2c0>)
    1928:	2208      	movs	r2, #8
    192a:	619a      	str	r2, [r3, #24]
		break;
    192c:	e00a      	b.n	1944 <I2C1_IRQHandler+0x2b4>
	case 0x20: /* regardless, it's a NACK */
	case 0x48:
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    192e:	4b08      	ldr	r3, [pc, #32]	; (1950 <I2C1_IRQHandler+0x2c0>)
    1930:	2208      	movs	r2, #8
    1932:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = DATA_NACK;
    1934:	4b08      	ldr	r3, [pc, #32]	; (1958 <I2C1_IRQHandler+0x2c8>)
    1936:	2205      	movs	r2, #5
    1938:	601a      	str	r2, [r3, #0]
		break;
    193a:	e003      	b.n	1944 <I2C1_IRQHandler+0x2b4>
	case 0x38: /* Arbitration lost, in this example, we don't
	 deal with multiple master situation */
	default:
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    193c:	4b04      	ldr	r3, [pc, #16]	; (1950 <I2C1_IRQHandler+0x2c0>)
    193e:	2208      	movs	r2, #8
    1940:	619a      	str	r2, [r3, #24]
		break;
    1942:	bf00      	nop
	}
}
    1944:	370c      	adds	r7, #12
    1946:	46bd      	mov	sp, r7
    1948:	f85d 7b04 	ldr.w	r7, [sp], #4
    194c:	4770      	bx	lr
    194e:	bf00      	nop
    1950:	4005c000 	.word	0x4005c000
    1954:	10000eac 	.word	0x10000eac
    1958:	10000e84 	.word	0x10000e84
    195c:	10000e80 	.word	0x10000e80
    1960:	10000ef0 	.word	0x10000ef0
    1964:	10000e40 	.word	0x10000e40
    1968:	10000e54 	.word	0x10000e54
    196c:	10000e44 	.word	0x10000e44

00001970 <I2CStart>:
 **
 ** parameters:			None
 ** Returned value:		true or false, return false if timed out
 **
 *****************************************************************************/
uint32_t I2CStart(uint8_t port) {
    1970:	b480      	push	{r7}
    1972:	b085      	sub	sp, #20
    1974:	af00      	add	r7, sp, #0
    1976:	4603      	mov	r3, r0
    1978:	71fb      	strb	r3, [r7, #7]
	uint32_t timeout = 0;
    197a:	2300      	movs	r3, #0
    197c:	60fb      	str	r3, [r7, #12]
	uint32_t retVal = 0;
    197e:	2300      	movs	r3, #0
    1980:	60bb      	str	r3, [r7, #8]
	if (port == 0){
    1982:	79fb      	ldrb	r3, [r7, #7]
    1984:	2b00      	cmp	r3, #0
    1986:	d116      	bne.n	19b6 <I2CStart+0x46>
			/*--- Issue a start condition ---*/
			LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Start flag */
    1988:	4b1b      	ldr	r3, [pc, #108]	; (19f8 <I2CStart+0x88>)
    198a:	2220      	movs	r2, #32
    198c:	601a      	str	r2, [r3, #0]
			/*--- Wait until START transmitted ---*/
			while (1) {
				if (I2C0_MasterState == I2C_STARTED) {
    198e:	4b1b      	ldr	r3, [pc, #108]	; (19fc <I2CStart+0x8c>)
    1990:	681b      	ldr	r3, [r3, #0]
    1992:	2b01      	cmp	r3, #1
    1994:	d102      	bne.n	199c <I2CStart+0x2c>
					retVal = 1;
    1996:	2301      	movs	r3, #1
    1998:	60bb      	str	r3, [r7, #8]
					break;
    199a:	e00a      	b.n	19b2 <I2CStart+0x42>
				}
				if (timeout >= MAX_TIMEOUT) {
    199c:	68fb      	ldr	r3, [r7, #12]
    199e:	4a18      	ldr	r2, [pc, #96]	; (1a00 <I2CStart+0x90>)
    19a0:	4293      	cmp	r3, r2
    19a2:	d902      	bls.n	19aa <I2CStart+0x3a>
					retVal = 0;
    19a4:	2300      	movs	r3, #0
    19a6:	60bb      	str	r3, [r7, #8]
					break;
    19a8:	e003      	b.n	19b2 <I2CStart+0x42>
				}
				timeout++;
    19aa:	68fb      	ldr	r3, [r7, #12]
    19ac:	3301      	adds	r3, #1
    19ae:	60fb      	str	r3, [r7, #12]
			}
    19b0:	e7ed      	b.n	198e <I2CStart+0x1e>
			return (retVal);
    19b2:	68bb      	ldr	r3, [r7, #8]
    19b4:	e01a      	b.n	19ec <I2CStart+0x7c>
		}
	else if (port == 1){
    19b6:	79fb      	ldrb	r3, [r7, #7]
    19b8:	2b01      	cmp	r3, #1
    19ba:	d116      	bne.n	19ea <I2CStart+0x7a>
		/*--- Issue a start condition ---*/
		LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Start flag */
    19bc:	4b11      	ldr	r3, [pc, #68]	; (1a04 <I2CStart+0x94>)
    19be:	2220      	movs	r2, #32
    19c0:	601a      	str	r2, [r3, #0]
		/*--- Wait until START transmitted ---*/
		while (1) {
			if (I2C1_MasterState == I2C_STARTED) {
    19c2:	4b11      	ldr	r3, [pc, #68]	; (1a08 <I2CStart+0x98>)
    19c4:	681b      	ldr	r3, [r3, #0]
    19c6:	2b01      	cmp	r3, #1
    19c8:	d102      	bne.n	19d0 <I2CStart+0x60>
				retVal = 1;
    19ca:	2301      	movs	r3, #1
    19cc:	60bb      	str	r3, [r7, #8]
				break;
    19ce:	e00a      	b.n	19e6 <I2CStart+0x76>
			}
			if (timeout >= MAX_TIMEOUT) {
    19d0:	68fb      	ldr	r3, [r7, #12]
    19d2:	4a0b      	ldr	r2, [pc, #44]	; (1a00 <I2CStart+0x90>)
    19d4:	4293      	cmp	r3, r2
    19d6:	d902      	bls.n	19de <I2CStart+0x6e>
				retVal = 0;
    19d8:	2300      	movs	r3, #0
    19da:	60bb      	str	r3, [r7, #8]
				break;
    19dc:	e003      	b.n	19e6 <I2CStart+0x76>
			}
			timeout++;
    19de:	68fb      	ldr	r3, [r7, #12]
    19e0:	3301      	adds	r3, #1
    19e2:	60fb      	str	r3, [r7, #12]
		}
    19e4:	e7ed      	b.n	19c2 <I2CStart+0x52>
		return (retVal);
    19e6:	68bb      	ldr	r3, [r7, #8]
    19e8:	e000      	b.n	19ec <I2CStart+0x7c>
	}
	return 0;
    19ea:	2300      	movs	r3, #0
}
    19ec:	4618      	mov	r0, r3
    19ee:	3714      	adds	r7, #20
    19f0:	46bd      	mov	sp, r7
    19f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    19f6:	4770      	bx	lr
    19f8:	4001c000 	.word	0x4001c000
    19fc:	10000024 	.word	0x10000024
    1a00:	00fffffe 	.word	0x00fffffe
    1a04:	4005c000 	.word	0x4005c000
    1a08:	10000e84 	.word	0x10000e84

00001a0c <I2CStop>:
 **
 ** parameters:			None
 ** Returned value:		true or never return
 **
 *****************************************************************************/
uint32_t I2CStop(uint8_t port) {
    1a0c:	b480      	push	{r7}
    1a0e:	b083      	sub	sp, #12
    1a10:	af00      	add	r7, sp, #0
    1a12:	4603      	mov	r3, r0
    1a14:	71fb      	strb	r3, [r7, #7]
	if (port == 0){
    1a16:	79fb      	ldrb	r3, [r7, #7]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d10e      	bne.n	1a3a <I2CStop+0x2e>
		LPC_I2C0->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    1a1c:	4b13      	ldr	r3, [pc, #76]	; (1a6c <I2CStop+0x60>)
    1a1e:	2210      	movs	r2, #16
    1a20:	601a      	str	r2, [r3, #0]
		LPC_I2C0->I2CONCLR = I2CONCLR_SIC; /* Clear SI flag */
    1a22:	4b12      	ldr	r3, [pc, #72]	; (1a6c <I2CStop+0x60>)
    1a24:	2208      	movs	r2, #8
    1a26:	619a      	str	r2, [r3, #24]
		/*--- Wait for STOP detected ---*/
		while (LPC_I2C0->I2CONSET & I2CONSET_STO);
    1a28:	bf00      	nop
    1a2a:	4b10      	ldr	r3, [pc, #64]	; (1a6c <I2CStop+0x60>)
    1a2c:	681b      	ldr	r3, [r3, #0]
    1a2e:	f003 0310 	and.w	r3, r3, #16
    1a32:	2b00      	cmp	r3, #0
    1a34:	d1f9      	bne.n	1a2a <I2CStop+0x1e>
		return 1;
    1a36:	2301      	movs	r3, #1
    1a38:	e012      	b.n	1a60 <I2CStop+0x54>
	}else if(port == 1){
    1a3a:	79fb      	ldrb	r3, [r7, #7]
    1a3c:	2b01      	cmp	r3, #1
    1a3e:	d10e      	bne.n	1a5e <I2CStop+0x52>
		LPC_I2C1->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    1a40:	4b0b      	ldr	r3, [pc, #44]	; (1a70 <I2CStop+0x64>)
    1a42:	2210      	movs	r2, #16
    1a44:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC; /* Clear SI flag */
    1a46:	4b0a      	ldr	r3, [pc, #40]	; (1a70 <I2CStop+0x64>)
    1a48:	2208      	movs	r2, #8
    1a4a:	619a      	str	r2, [r3, #24]
		/*--- Wait for STOP detected ---*/
		while (LPC_I2C1->I2CONSET & I2CONSET_STO);
    1a4c:	bf00      	nop
    1a4e:	4b08      	ldr	r3, [pc, #32]	; (1a70 <I2CStop+0x64>)
    1a50:	681b      	ldr	r3, [r3, #0]
    1a52:	f003 0310 	and.w	r3, r3, #16
    1a56:	2b00      	cmp	r3, #0
    1a58:	d1f9      	bne.n	1a4e <I2CStop+0x42>
		return 1;
    1a5a:	2301      	movs	r3, #1
    1a5c:	e000      	b.n	1a60 <I2CStop+0x54>
	}
	return 0;
    1a5e:	2300      	movs	r3, #0
}
    1a60:	4618      	mov	r0, r3
    1a62:	370c      	adds	r7, #12
    1a64:	46bd      	mov	sp, r7
    1a66:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a6a:	4770      	bx	lr
    1a6c:	4001c000 	.word	0x4001c000
    1a70:	4005c000 	.word	0x4005c000

00001a74 <I2CInit>:
 ** parameters:			I2c mode is either MASTER or SLAVE
 ** Returned value:		true or false, return false if the I2C
 **				interrupt handler was not installed correctly
 **
 *****************************************************************************/
uint32_t I2CInit(uint8_t port,uint32_t I2cMode) {
    1a74:	b580      	push	{r7, lr}
    1a76:	b082      	sub	sp, #8
    1a78:	af00      	add	r7, sp, #0
    1a7a:	4603      	mov	r3, r0
    1a7c:	6039      	str	r1, [r7, #0]
    1a7e:	71fb      	strb	r3, [r7, #7]
	if (port == 0){
    1a80:	79fb      	ldrb	r3, [r7, #7]
    1a82:	2b00      	cmp	r3, #0
    1a84:	d12a      	bne.n	1adc <I2CInit+0x68>
		LPC_SC->PCONP |= (1 << 7);
    1a86:	4a34      	ldr	r2, [pc, #208]	; (1b58 <I2CInit+0xe4>)
    1a88:	4b33      	ldr	r3, [pc, #204]	; (1b58 <I2CInit+0xe4>)
    1a8a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1a92:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	    //LPC_PINCON->PINSEL1 &= ~0x03C00000;
	    //LPC_PINCON->PINSEL1 |=  0x01400000;
		/* set PIO0.27 and PIO0.28 to I2C0 SDA and SCL */
		/* function to 01 on both SDA and SCL. */
		LPC_PINCON->PINSEL1 &= ~((0x03<<22)|(0x03<<24));
    1a96:	4a31      	ldr	r2, [pc, #196]	; (1b5c <I2CInit+0xe8>)
    1a98:	4b30      	ldr	r3, [pc, #192]	; (1b5c <I2CInit+0xe8>)
    1a9a:	685b      	ldr	r3, [r3, #4]
    1a9c:	f023 7370 	bic.w	r3, r3, #62914560	; 0x3c00000
    1aa0:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINSEL1 |= ((0x01<<22)|(0x01<<24));
    1aa2:	4a2e      	ldr	r2, [pc, #184]	; (1b5c <I2CInit+0xe8>)
    1aa4:	4b2d      	ldr	r3, [pc, #180]	; (1b5c <I2CInit+0xe8>)
    1aa6:	685b      	ldr	r3, [r3, #4]
    1aa8:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
    1aac:	6053      	str	r3, [r2, #4]
	    //LPC_SC->PCLKSEL0 &= ~(3 << 14); // clear bits
	    //LPC_SC->PCLKSEL0 |=  (3 << 14); // set to "01" (full speed)
		//PINMODE is not required for P0.27, P0.28 these are dedicated open drain I2C pins.
		/*--- Clear flags ---*/
		LPC_I2C0->I2CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC
    1aae:	4b2c      	ldr	r3, [pc, #176]	; (1b60 <I2CInit+0xec>)
    1ab0:	226c      	movs	r2, #108	; 0x6c
    1ab2:	619a      	str	r2, [r3, #24]
				| I2CONCLR_I2ENC;
		/*--- Reset registers ---*/
		LPC_PINCON->I2CPADCFG &= ~((0x1<<0)|(0x1<<2));
    1ab4:	4a29      	ldr	r2, [pc, #164]	; (1b5c <I2CInit+0xe8>)
    1ab6:	4b29      	ldr	r3, [pc, #164]	; (1b5c <I2CInit+0xe8>)
    1ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    1aba:	f023 0305 	bic.w	r3, r3, #5
    1abe:	67d3      	str	r3, [r2, #124]	; 0x7c
		LPC_I2C0->I2SCLL   = I2SCLL_SCLL;
    1ac0:	4b27      	ldr	r3, [pc, #156]	; (1b60 <I2CInit+0xec>)
    1ac2:	2280      	movs	r2, #128	; 0x80
    1ac4:	615a      	str	r2, [r3, #20]
		LPC_I2C0->I2SCLH   = I2SCLH_SCLH;
    1ac6:	4b26      	ldr	r3, [pc, #152]	; (1b60 <I2CInit+0xec>)
    1ac8:	2280      	movs	r2, #128	; 0x80
    1aca:	611a      	str	r2, [r3, #16]
		/* Install interrupt handler */
		NVIC_EnableIRQ(I2C0_IRQn);
    1acc:	200a      	movs	r0, #10
    1ace:	f7ff fc25 	bl	131c <NVIC_EnableIRQ>
		LPC_I2C0->I2CONSET = I2CONSET_I2EN;
    1ad2:	4b23      	ldr	r3, [pc, #140]	; (1b60 <I2CInit+0xec>)
    1ad4:	2240      	movs	r2, #64	; 0x40
    1ad6:	601a      	str	r2, [r3, #0]
		return (1);
    1ad8:	2301      	movs	r3, #1
    1ada:	e039      	b.n	1b50 <I2CInit+0xdc>
	}
	else if (port == 1){
    1adc:	79fb      	ldrb	r3, [r7, #7]
    1ade:	2b01      	cmp	r3, #1
    1ae0:	d136      	bne.n	1b50 <I2CInit+0xdc>
		LPC_SC->PCONP |= (1 << 19);
    1ae2:	4a1d      	ldr	r2, [pc, #116]	; (1b58 <I2CInit+0xe4>)
    1ae4:	4b1c      	ldr	r3, [pc, #112]	; (1b58 <I2CInit+0xe4>)
    1ae6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1aea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1aee:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		/* set PIO0.19 and PIO0.20 to I2C1 SDA and SCL */
		/* function to 11 on both SDA and SCL. */
		LPC_PINCON->PINSEL1 &= ~((0x3 << 6) | (0x3 << 8));
    1af2:	4a1a      	ldr	r2, [pc, #104]	; (1b5c <I2CInit+0xe8>)
    1af4:	4b19      	ldr	r3, [pc, #100]	; (1b5c <I2CInit+0xe8>)
    1af6:	685b      	ldr	r3, [r3, #4]
    1af8:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
    1afc:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINSEL1 |= ((0x3 << 6) | (0x3 << 8));
    1afe:	4a17      	ldr	r2, [pc, #92]	; (1b5c <I2CInit+0xe8>)
    1b00:	4b16      	ldr	r3, [pc, #88]	; (1b5c <I2CInit+0xe8>)
    1b02:	685b      	ldr	r3, [r3, #4]
    1b04:	f443 7370 	orr.w	r3, r3, #960	; 0x3c0
    1b08:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINMODE1 &= ~((0x3 << 6) | (0x3 << 8));
    1b0a:	4a14      	ldr	r2, [pc, #80]	; (1b5c <I2CInit+0xe8>)
    1b0c:	4b13      	ldr	r3, [pc, #76]	; (1b5c <I2CInit+0xe8>)
    1b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1b10:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
    1b14:	6453      	str	r3, [r2, #68]	; 0x44
		LPC_PINCON->PINMODE1 |= ((0x2 << 6) | (0x2 << 8)); /* No pull-up no pull-down */
    1b16:	4a11      	ldr	r2, [pc, #68]	; (1b5c <I2CInit+0xe8>)
    1b18:	4b10      	ldr	r3, [pc, #64]	; (1b5c <I2CInit+0xe8>)
    1b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1b1c:	f443 7320 	orr.w	r3, r3, #640	; 0x280
    1b20:	6453      	str	r3, [r2, #68]	; 0x44
		LPC_PINCON->PINMODE_OD0 |= ((0x1 << 19) | (0x1 << 20));
    1b22:	4a0e      	ldr	r2, [pc, #56]	; (1b5c <I2CInit+0xe8>)
    1b24:	4b0d      	ldr	r3, [pc, #52]	; (1b5c <I2CInit+0xe8>)
    1b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    1b28:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
    1b2c:	6693      	str	r3, [r2, #104]	; 0x68

		/*--- Clear flags ---*/
		LPC_I2C1->I2CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC
    1b2e:	4b0d      	ldr	r3, [pc, #52]	; (1b64 <I2CInit+0xf0>)
    1b30:	226c      	movs	r2, #108	; 0x6c
    1b32:	619a      	str	r2, [r3, #24]
				| I2CONCLR_I2ENC;

		/*--- Reset registers ---*/
		LPC_I2C1->I2SCLL = I2SCLL_SCLL;
    1b34:	4b0b      	ldr	r3, [pc, #44]	; (1b64 <I2CInit+0xf0>)
    1b36:	2280      	movs	r2, #128	; 0x80
    1b38:	615a      	str	r2, [r3, #20]
		LPC_I2C1->I2SCLH = I2SCLH_SCLH;
    1b3a:	4b0a      	ldr	r3, [pc, #40]	; (1b64 <I2CInit+0xf0>)
    1b3c:	2280      	movs	r2, #128	; 0x80
    1b3e:	611a      	str	r2, [r3, #16]

		/* Install interrupt handler */
		NVIC_EnableIRQ(I2C1_IRQn);
    1b40:	200b      	movs	r0, #11
    1b42:	f7ff fbeb 	bl	131c <NVIC_EnableIRQ>

		LPC_I2C1->I2CONSET = I2CONSET_I2EN;
    1b46:	4b07      	ldr	r3, [pc, #28]	; (1b64 <I2CInit+0xf0>)
    1b48:	2240      	movs	r2, #64	; 0x40
    1b4a:	601a      	str	r2, [r3, #0]
		return (1);
    1b4c:	2301      	movs	r3, #1
    1b4e:	e7ff      	b.n	1b50 <I2CInit+0xdc>
	}
}
    1b50:	4618      	mov	r0, r3
    1b52:	3708      	adds	r7, #8
    1b54:	46bd      	mov	sp, r7
    1b56:	bd80      	pop	{r7, pc}
    1b58:	400fc000 	.word	0x400fc000
    1b5c:	4002c000 	.word	0x4002c000
    1b60:	4001c000 	.word	0x4001c000
    1b64:	4005c000 	.word	0x4005c000

00001b68 <I2CEngine>:
 ** Returned value:		true or false, return false only if the
 **				start condition can never be generated and
 **				timed out.
 **
 *****************************************************************************/
uint32_t I2CEngine(uint8_t port) {
    1b68:	b580      	push	{r7, lr}
    1b6a:	b084      	sub	sp, #16
    1b6c:	af00      	add	r7, sp, #0
    1b6e:	4603      	mov	r3, r0
    1b70:	71fb      	strb	r3, [r7, #7]
	int timeout = 0;
    1b72:	2300      	movs	r3, #0
    1b74:	60fb      	str	r3, [r7, #12]
	if (port == 0){
    1b76:	79fb      	ldrb	r3, [r7, #7]
    1b78:	2b00      	cmp	r3, #0
    1b7a:	d12a      	bne.n	1bd2 <I2CEngine+0x6a>
			I2C0_MasterState = I2C_IDLE;
    1b7c:	4b2a      	ldr	r3, [pc, #168]	; (1c28 <I2CEngine+0xc0>)
    1b7e:	2200      	movs	r2, #0
    1b80:	601a      	str	r2, [r3, #0]
			RdIndex_0 = 0;
    1b82:	4b2a      	ldr	r3, [pc, #168]	; (1c2c <I2CEngine+0xc4>)
    1b84:	2200      	movs	r2, #0
    1b86:	601a      	str	r2, [r3, #0]
			WrIndex_0 = 0;
    1b88:	4b29      	ldr	r3, [pc, #164]	; (1c30 <I2CEngine+0xc8>)
    1b8a:	2200      	movs	r2, #0
    1b8c:	601a      	str	r2, [r3, #0]
			if (I2CStart(port) != 1) {
    1b8e:	79fb      	ldrb	r3, [r7, #7]
    1b90:	4618      	mov	r0, r3
    1b92:	f7ff feed 	bl	1970 <I2CStart>
    1b96:	4603      	mov	r3, r0
    1b98:	2b01      	cmp	r3, #1
    1b9a:	d005      	beq.n	1ba8 <I2CEngine+0x40>
				I2CStop(port);
    1b9c:	79fb      	ldrb	r3, [r7, #7]
    1b9e:	4618      	mov	r0, r3
    1ba0:	f7ff ff34 	bl	1a0c <I2CStop>
				return (0);
    1ba4:	2300      	movs	r3, #0
    1ba6:	e03a      	b.n	1c1e <I2CEngine+0xb6>
			}

			while (1) {
				if (I2C0_MasterState == DATA_NACK) {
    1ba8:	4b1f      	ldr	r3, [pc, #124]	; (1c28 <I2CEngine+0xc0>)
    1baa:	681b      	ldr	r3, [r3, #0]
    1bac:	2b05      	cmp	r3, #5
    1bae:	d104      	bne.n	1bba <I2CEngine+0x52>
					I2CStop(port);
    1bb0:	79fb      	ldrb	r3, [r7, #7]
    1bb2:	4618      	mov	r0, r3
    1bb4:	f7ff ff2a 	bl	1a0c <I2CStop>
					break;
    1bb8:	e009      	b.n	1bce <I2CEngine+0x66>
				}
				if (timeout >= 0xFFFF) {
    1bba:	68fb      	ldr	r3, [r7, #12]
    1bbc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    1bc0:	4293      	cmp	r3, r2
    1bc2:	dd00      	ble.n	1bc6 <I2CEngine+0x5e>
					break;
    1bc4:	e003      	b.n	1bce <I2CEngine+0x66>
				}
				timeout++;
    1bc6:	68fb      	ldr	r3, [r7, #12]
    1bc8:	3301      	adds	r3, #1
    1bca:	60fb      	str	r3, [r7, #12]
			}
    1bcc:	e7ec      	b.n	1ba8 <I2CEngine+0x40>
			return (1);
    1bce:	2301      	movs	r3, #1
    1bd0:	e025      	b.n	1c1e <I2CEngine+0xb6>
		}
	else if (port == 1){
    1bd2:	79fb      	ldrb	r3, [r7, #7]
    1bd4:	2b01      	cmp	r3, #1
    1bd6:	d121      	bne.n	1c1c <I2CEngine+0xb4>
		I2C1_MasterState = I2C_IDLE;
    1bd8:	4b16      	ldr	r3, [pc, #88]	; (1c34 <I2CEngine+0xcc>)
    1bda:	2200      	movs	r2, #0
    1bdc:	601a      	str	r2, [r3, #0]
		RdIndex_1 = 0;
    1bde:	4b16      	ldr	r3, [pc, #88]	; (1c38 <I2CEngine+0xd0>)
    1be0:	2200      	movs	r2, #0
    1be2:	601a      	str	r2, [r3, #0]
		WrIndex_1 = 0;
    1be4:	4b15      	ldr	r3, [pc, #84]	; (1c3c <I2CEngine+0xd4>)
    1be6:	2200      	movs	r2, #0
    1be8:	601a      	str	r2, [r3, #0]
		if (I2CStart(port) != 1) {
    1bea:	79fb      	ldrb	r3, [r7, #7]
    1bec:	4618      	mov	r0, r3
    1bee:	f7ff febf 	bl	1970 <I2CStart>
    1bf2:	4603      	mov	r3, r0
    1bf4:	2b01      	cmp	r3, #1
    1bf6:	d005      	beq.n	1c04 <I2CEngine+0x9c>
			I2CStop(port);
    1bf8:	79fb      	ldrb	r3, [r7, #7]
    1bfa:	4618      	mov	r0, r3
    1bfc:	f7ff ff06 	bl	1a0c <I2CStop>
			return (0);
    1c00:	2300      	movs	r3, #0
    1c02:	e00c      	b.n	1c1e <I2CEngine+0xb6>
		}

		while (1) {
			if (I2C1_MasterState == DATA_NACK) {
    1c04:	4b0b      	ldr	r3, [pc, #44]	; (1c34 <I2CEngine+0xcc>)
    1c06:	681b      	ldr	r3, [r3, #0]
    1c08:	2b05      	cmp	r3, #5
    1c0a:	d106      	bne.n	1c1a <I2CEngine+0xb2>
				I2CStop(port);
    1c0c:	79fb      	ldrb	r3, [r7, #7]
    1c0e:	4618      	mov	r0, r3
    1c10:	f7ff fefc 	bl	1a0c <I2CStop>
				break;
    1c14:	bf00      	nop
			}
		}
		return (1);
    1c16:	2301      	movs	r3, #1
    1c18:	e001      	b.n	1c1e <I2CEngine+0xb6>
		while (1) {
			if (I2C1_MasterState == DATA_NACK) {
				I2CStop(port);
				break;
			}
		}
    1c1a:	e7f3      	b.n	1c04 <I2CEngine+0x9c>
		return (1);
	}
	return 0;
    1c1c:	2300      	movs	r3, #0
}
    1c1e:	4618      	mov	r0, r3
    1c20:	3710      	adds	r7, #16
    1c22:	46bd      	mov	sp, r7
    1c24:	bd80      	pop	{r7, pc}
    1c26:	bf00      	nop
    1c28:	10000024 	.word	0x10000024
    1c2c:	10000028 	.word	0x10000028
    1c30:	1000002c 	.word	0x1000002c
    1c34:	10000e84 	.word	0x10000e84
    1c38:	10000e44 	.word	0x10000e44
    1c3c:	10000ef0 	.word	0x10000ef0

00001c40 <i2c_read>:
			return 0;
	}
	return 0;
}

uint8_t i2c_read(uint8_t port, uint8_t register_addr) {
    1c40:	b580      	push	{r7, lr}
    1c42:	b084      	sub	sp, #16
    1c44:	af00      	add	r7, sp, #0
    1c46:	4603      	mov	r3, r0
    1c48:	460a      	mov	r2, r1
    1c4a:	71fb      	strb	r3, [r7, #7]
    1c4c:	4613      	mov	r3, r2
    1c4e:	71bb      	strb	r3, [r7, #6]
	int i;
	/* clear buffer */
	if (port == 0){
    1c50:	79fb      	ldrb	r3, [r7, #7]
    1c52:	2b00      	cmp	r3, #0
    1c54:	d128      	bne.n	1ca8 <i2c_read+0x68>
		for (i = 0; i < BUFSIZE; i++) {
    1c56:	2300      	movs	r3, #0
    1c58:	60fb      	str	r3, [r7, #12]
    1c5a:	e007      	b.n	1c6c <i2c_read+0x2c>
			I2C0_MasterBuffer[i] = 0;
    1c5c:	4a2a      	ldr	r2, [pc, #168]	; (1d08 <i2c_read+0xc8>)
    1c5e:	68fb      	ldr	r3, [r7, #12]
    1c60:	4413      	add	r3, r2
    1c62:	2200      	movs	r2, #0
    1c64:	701a      	strb	r2, [r3, #0]

uint8_t i2c_read(uint8_t port, uint8_t register_addr) {
	int i;
	/* clear buffer */
	if (port == 0){
		for (i = 0; i < BUFSIZE; i++) {
    1c66:	68fb      	ldr	r3, [r7, #12]
    1c68:	3301      	adds	r3, #1
    1c6a:	60fb      	str	r3, [r7, #12]
    1c6c:	68fb      	ldr	r3, [r7, #12]
    1c6e:	2b1f      	cmp	r3, #31
    1c70:	ddf4      	ble.n	1c5c <i2c_read+0x1c>
			I2C0_MasterBuffer[i] = 0;
		}
		I2C0_WriteLength = 2;
    1c72:	4b26      	ldr	r3, [pc, #152]	; (1d0c <i2c_read+0xcc>)
    1c74:	2202      	movs	r2, #2
    1c76:	601a      	str	r2, [r3, #0]
		I2C0_ReadLength = 1;
    1c78:	4b25      	ldr	r3, [pc, #148]	; (1d10 <i2c_read+0xd0>)
    1c7a:	2201      	movs	r2, #1
    1c7c:	601a      	str	r2, [r3, #0]
		I2C0_MasterBuffer[0] = 0x3A;//ADR_BYTE_MMA7455;
    1c7e:	4b22      	ldr	r3, [pc, #136]	; (1d08 <i2c_read+0xc8>)
    1c80:	223a      	movs	r2, #58	; 0x3a
    1c82:	701a      	strb	r2, [r3, #0]
		I2C0_MasterBuffer[1] = register_addr;
    1c84:	4a20      	ldr	r2, [pc, #128]	; (1d08 <i2c_read+0xc8>)
    1c86:	79bb      	ldrb	r3, [r7, #6]
    1c88:	7053      	strb	r3, [r2, #1]
		I2C0_MasterBuffer[2] = 0x3B;//ADR_BYTE_MMA7455 | RD_BIT;
    1c8a:	4b1f      	ldr	r3, [pc, #124]	; (1d08 <i2c_read+0xc8>)
    1c8c:	223b      	movs	r2, #59	; 0x3b
    1c8e:	709a      	strb	r2, [r3, #2]
		I2CEngine(port);
    1c90:	79fb      	ldrb	r3, [r7, #7]
    1c92:	4618      	mov	r0, r3
    1c94:	f7ff ff68 	bl	1b68 <I2CEngine>
		I2CStop(port);
    1c98:	79fb      	ldrb	r3, [r7, #7]
    1c9a:	4618      	mov	r0, r3
    1c9c:	f7ff feb6 	bl	1a0c <I2CStop>
		return (I2C0_MasterBuffer[3]);
    1ca0:	4b19      	ldr	r3, [pc, #100]	; (1d08 <i2c_read+0xc8>)
    1ca2:	78db      	ldrb	r3, [r3, #3]
    1ca4:	b2db      	uxtb	r3, r3
    1ca6:	e02b      	b.n	1d00 <i2c_read+0xc0>
	}
	else if (port == 1){
    1ca8:	79fb      	ldrb	r3, [r7, #7]
    1caa:	2b01      	cmp	r3, #1
    1cac:	d128      	bne.n	1d00 <i2c_read+0xc0>
		for (i = 0; i < BUFSIZE; i++) {
    1cae:	2300      	movs	r3, #0
    1cb0:	60fb      	str	r3, [r7, #12]
    1cb2:	e007      	b.n	1cc4 <i2c_read+0x84>
			I2C1_MasterBuffer[i] = 0;
    1cb4:	4a17      	ldr	r2, [pc, #92]	; (1d14 <i2c_read+0xd4>)
    1cb6:	68fb      	ldr	r3, [r7, #12]
    1cb8:	4413      	add	r3, r2
    1cba:	2200      	movs	r2, #0
    1cbc:	701a      	strb	r2, [r3, #0]
		I2CEngine(port);
		I2CStop(port);
		return (I2C0_MasterBuffer[3]);
	}
	else if (port == 1){
		for (i = 0; i < BUFSIZE; i++) {
    1cbe:	68fb      	ldr	r3, [r7, #12]
    1cc0:	3301      	adds	r3, #1
    1cc2:	60fb      	str	r3, [r7, #12]
    1cc4:	68fb      	ldr	r3, [r7, #12]
    1cc6:	2b1f      	cmp	r3, #31
    1cc8:	ddf4      	ble.n	1cb4 <i2c_read+0x74>
			I2C1_MasterBuffer[i] = 0;
		}
		I2C1_WriteLength = 2;
    1cca:	4b13      	ldr	r3, [pc, #76]	; (1d18 <i2c_read+0xd8>)
    1ccc:	2202      	movs	r2, #2
    1cce:	601a      	str	r2, [r3, #0]
		I2C1_ReadLength = 1;
    1cd0:	4b12      	ldr	r3, [pc, #72]	; (1d1c <i2c_read+0xdc>)
    1cd2:	2201      	movs	r2, #1
    1cd4:	601a      	str	r2, [r3, #0]
		I2C1_MasterBuffer[0] = ADR_BYTE_24AA02;
    1cd6:	4b0f      	ldr	r3, [pc, #60]	; (1d14 <i2c_read+0xd4>)
    1cd8:	22a0      	movs	r2, #160	; 0xa0
    1cda:	701a      	strb	r2, [r3, #0]
		I2C1_MasterBuffer[1] = register_addr;
    1cdc:	4a0d      	ldr	r2, [pc, #52]	; (1d14 <i2c_read+0xd4>)
    1cde:	79bb      	ldrb	r3, [r7, #6]
    1ce0:	7053      	strb	r3, [r2, #1]
		I2C1_MasterBuffer[2] = ADR_BYTE_24AA02 | RD_BIT;
    1ce2:	4b0c      	ldr	r3, [pc, #48]	; (1d14 <i2c_read+0xd4>)
    1ce4:	22a1      	movs	r2, #161	; 0xa1
    1ce6:	709a      	strb	r2, [r3, #2]
		I2CEngine(port);
    1ce8:	79fb      	ldrb	r3, [r7, #7]
    1cea:	4618      	mov	r0, r3
    1cec:	f7ff ff3c 	bl	1b68 <I2CEngine>
		I2CStop(port);
    1cf0:	79fb      	ldrb	r3, [r7, #7]
    1cf2:	4618      	mov	r0, r3
    1cf4:	f7ff fe8a 	bl	1a0c <I2CStop>
		return (I2C1_MasterBuffer[3]);
    1cf8:	4b06      	ldr	r3, [pc, #24]	; (1d14 <i2c_read+0xd4>)
    1cfa:	78db      	ldrb	r3, [r3, #3]
    1cfc:	b2db      	uxtb	r3, r3
    1cfe:	e7ff      	b.n	1d00 <i2c_read+0xc0>
	}
}
    1d00:	4618      	mov	r0, r3
    1d02:	3710      	adds	r7, #16
    1d04:	46bd      	mov	sp, r7
    1d06:	bd80      	pop	{r7, pc}
    1d08:	10000ecc 	.word	0x10000ecc
    1d0c:	10000ea8 	.word	0x10000ea8
    1d10:	10000e50 	.word	0x10000e50
    1d14:	10000eac 	.word	0x10000eac
    1d18:	10000e40 	.word	0x10000e40
    1d1c:	10000e54 	.word	0x10000e54

00001d20 <u32IAP_PrepareSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_PrepareSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
    1d20:	b580      	push	{r7, lr}
    1d22:	b08e      	sub	sp, #56	; 0x38
    1d24:	af00      	add	r7, sp, #0
    1d26:	6078      	str	r0, [r7, #4]
    1d28:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1d2a:	683a      	ldr	r2, [r7, #0]
    1d2c:	687b      	ldr	r3, [r7, #4]
    1d2e:	429a      	cmp	r2, r3
    1d30:	d202      	bcs.n	1d38 <u32IAP_PrepareSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1d32:	230c      	movs	r3, #12
    1d34:	637b      	str	r3, [r7, #52]	; 0x34
    1d36:	e00f      	b.n	1d58 <u32IAP_PrepareSectors+0x38>
	}
	else
	{
		au32Command[0] = IAP_CMD_PREPARE_SECTORS;
    1d38:	2332      	movs	r3, #50	; 0x32
    1d3a:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
    1d3c:	687b      	ldr	r3, [r7, #4]
    1d3e:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
    1d40:	683b      	ldr	r3, [r7, #0]
    1d42:	617b      	str	r3, [r7, #20]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1d44:	f107 010c 	add.w	r1, r7, #12
    1d48:	f107 0220 	add.w	r2, r7, #32
    1d4c:	4b05      	ldr	r3, [pc, #20]	; (1d64 <u32IAP_PrepareSectors+0x44>)
    1d4e:	4608      	mov	r0, r1
    1d50:	4611      	mov	r1, r2
    1d52:	4798      	blx	r3

		u32Status = au32Result[0];
    1d54:	6a3b      	ldr	r3, [r7, #32]
    1d56:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
    1d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    1d5a:	4618      	mov	r0, r3
    1d5c:	3738      	adds	r7, #56	; 0x38
    1d5e:	46bd      	mov	sp, r7
    1d60:	bd80      	pop	{r7, pc}
    1d62:	bf00      	nop
    1d64:	1fff1ff1 	.word	0x1fff1ff1

00001d68 <u32IAP_CopyRAMToFlash>:
*
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_CopyRAMToFlash(uint32_t u32DstAddr, uint32_t u32SrcAddr, uint32_t u32Len)
{
    1d68:	b580      	push	{r7, lr}
    1d6a:	b08e      	sub	sp, #56	; 0x38
    1d6c:	af00      	add	r7, sp, #0
    1d6e:	60f8      	str	r0, [r7, #12]
    1d70:	60b9      	str	r1, [r7, #8]
    1d72:	607a      	str	r2, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1d74:	b672      	cpsid	i
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	__disable_irq();
	au32Command[0] = IAP_CMD_COPY_RAM_TO_FLASH;
    1d76:	2333      	movs	r3, #51	; 0x33
    1d78:	613b      	str	r3, [r7, #16]
	au32Command[1] = u32DstAddr;
    1d7a:	68fb      	ldr	r3, [r7, #12]
    1d7c:	617b      	str	r3, [r7, #20]
	au32Command[2] = u32SrcAddr;
    1d7e:	68bb      	ldr	r3, [r7, #8]
    1d80:	61bb      	str	r3, [r7, #24]
	au32Command[3] = u32Len;
    1d82:	687b      	ldr	r3, [r7, #4]
    1d84:	61fb      	str	r3, [r7, #28]
	au32Command[4] = SystemCoreClock / 1000UL;	/* Core clock frequency in kHz */
    1d86:	4b0a      	ldr	r3, [pc, #40]	; (1db0 <u32IAP_CopyRAMToFlash+0x48>)
    1d88:	681b      	ldr	r3, [r3, #0]
    1d8a:	4a0a      	ldr	r2, [pc, #40]	; (1db4 <u32IAP_CopyRAMToFlash+0x4c>)
    1d8c:	fba2 2303 	umull	r2, r3, r2, r3
    1d90:	099b      	lsrs	r3, r3, #6
    1d92:	623b      	str	r3, [r7, #32]

	IAP_EXECUTE_CMD(au32Command, au32Result);
    1d94:	f107 0110 	add.w	r1, r7, #16
    1d98:	f107 0224 	add.w	r2, r7, #36	; 0x24
    1d9c:	4b06      	ldr	r3, [pc, #24]	; (1db8 <u32IAP_CopyRAMToFlash+0x50>)
    1d9e:	4608      	mov	r0, r1
    1da0:	4611      	mov	r1, r2
    1da2:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1da4:	b662      	cpsie	i

	__enable_irq();
	return ( au32Result[0] );
    1da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1da8:	4618      	mov	r0, r3
    1daa:	3738      	adds	r7, #56	; 0x38
    1dac:	46bd      	mov	sp, r7
    1dae:	bd80      	pop	{r7, pc}
    1db0:	10000018 	.word	0x10000018
    1db4:	10624dd3 	.word	0x10624dd3
    1db8:	1fff1ff1 	.word	0x1fff1ff1

00001dbc <u32IAP_EraseSectors>:
*
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_EraseSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
    1dbc:	b580      	push	{r7, lr}
    1dbe:	b08e      	sub	sp, #56	; 0x38
    1dc0:	af00      	add	r7, sp, #0
    1dc2:	6078      	str	r0, [r7, #4]
    1dc4:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1dc6:	683a      	ldr	r2, [r7, #0]
    1dc8:	687b      	ldr	r3, [r7, #4]
    1dca:	429a      	cmp	r2, r3
    1dcc:	d202      	bcs.n	1dd4 <u32IAP_EraseSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1dce:	230c      	movs	r3, #12
    1dd0:	637b      	str	r3, [r7, #52]	; 0x34
    1dd2:	e018      	b.n	1e06 <u32IAP_EraseSectors+0x4a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1dd4:	b672      	cpsid	i
	}
	else
	{
		__disable_irq();
		au32Command[0] = IAP_CMD_ERASE_SECTORS;
    1dd6:	2334      	movs	r3, #52	; 0x34
    1dd8:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
    1dda:	687b      	ldr	r3, [r7, #4]
    1ddc:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
    1dde:	683b      	ldr	r3, [r7, #0]
    1de0:	617b      	str	r3, [r7, #20]
		au32Command[3] = SystemCoreClock / 1000UL;	/* Core clock frequency in kHz */
    1de2:	4b0b      	ldr	r3, [pc, #44]	; (1e10 <u32IAP_EraseSectors+0x54>)
    1de4:	681b      	ldr	r3, [r3, #0]
    1de6:	4a0b      	ldr	r2, [pc, #44]	; (1e14 <u32IAP_EraseSectors+0x58>)
    1de8:	fba2 2303 	umull	r2, r3, r2, r3
    1dec:	099b      	lsrs	r3, r3, #6
    1dee:	61bb      	str	r3, [r7, #24]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1df0:	f107 010c 	add.w	r1, r7, #12
    1df4:	f107 0220 	add.w	r2, r7, #32
    1df8:	4b07      	ldr	r3, [pc, #28]	; (1e18 <u32IAP_EraseSectors+0x5c>)
    1dfa:	4608      	mov	r0, r1
    1dfc:	4611      	mov	r1, r2
    1dfe:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1e00:	b662      	cpsie	i

		__enable_irq();
		u32Status = au32Result[0];
    1e02:	6a3b      	ldr	r3, [r7, #32]
    1e04:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
    1e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    1e08:	4618      	mov	r0, r3
    1e0a:	3738      	adds	r7, #56	; 0x38
    1e0c:	46bd      	mov	sp, r7
    1e0e:	bd80      	pop	{r7, pc}
    1e10:	10000018 	.word	0x10000018
    1e14:	10624dd3 	.word	0x10624dd3
    1e18:	1fff1ff1 	.word	0x1fff1ff1

00001e1c <u32IAP_BlankCheckSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_BlankCheckSectors(uint32_t u32StartSector, uint32_t u32EndSector, uint32_t *pu32Result)
{
    1e1c:	b580      	push	{r7, lr}
    1e1e:	b090      	sub	sp, #64	; 0x40
    1e20:	af00      	add	r7, sp, #0
    1e22:	60f8      	str	r0, [r7, #12]
    1e24:	60b9      	str	r1, [r7, #8]
    1e26:	607a      	str	r2, [r7, #4]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1e28:	68ba      	ldr	r2, [r7, #8]
    1e2a:	68fb      	ldr	r3, [r7, #12]
    1e2c:	429a      	cmp	r2, r3
    1e2e:	d202      	bcs.n	1e36 <u32IAP_BlankCheckSectors+0x1a>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1e30:	230c      	movs	r3, #12
    1e32:	63fb      	str	r3, [r7, #60]	; 0x3c
    1e34:	e019      	b.n	1e6a <u32IAP_BlankCheckSectors+0x4e>
	}
	else
	{
		au32Command[0] = IAP_CMD_BLANK_CHECK_SECTORS;
    1e36:	2335      	movs	r3, #53	; 0x35
    1e38:	617b      	str	r3, [r7, #20]
		au32Command[1] = u32StartSector;
    1e3a:	68fb      	ldr	r3, [r7, #12]
    1e3c:	61bb      	str	r3, [r7, #24]
		au32Command[2] = u32EndSector;
    1e3e:	68bb      	ldr	r3, [r7, #8]
    1e40:	61fb      	str	r3, [r7, #28]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1e42:	f107 0114 	add.w	r1, r7, #20
    1e46:	f107 0228 	add.w	r2, r7, #40	; 0x28
    1e4a:	4b0a      	ldr	r3, [pc, #40]	; (1e74 <u32IAP_BlankCheckSectors+0x58>)
    1e4c:	4608      	mov	r0, r1
    1e4e:	4611      	mov	r1, r2
    1e50:	4798      	blx	r3

		if (au32Result[0] == IAP_STA_SECTOR_NOT_BLANK)
    1e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1e54:	2b08      	cmp	r3, #8
    1e56:	d106      	bne.n	1e66 <u32IAP_BlankCheckSectors+0x4a>
		{
			*pu32Result       = au32Result[0];
    1e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	601a      	str	r2, [r3, #0]
			*(pu32Result + 1) = au32Result[1];
    1e5e:	687b      	ldr	r3, [r7, #4]
    1e60:	3304      	adds	r3, #4
    1e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1e64:	601a      	str	r2, [r3, #0]
		}
		u32Status = au32Result[0];
    1e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1e68:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	return ( u32Status );
    1e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1e6c:	4618      	mov	r0, r3
    1e6e:	3740      	adds	r7, #64	; 0x40
    1e70:	46bd      	mov	sp, r7
    1e72:	bd80      	pop	{r7, pc}
    1e74:	1fff1ff1 	.word	0x1fff1ff1

00001e78 <u32IAP_Compare>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_Compare(uint32_t u32DstAddr, uint32_t u32SrcAddr, uint32_t u32Len, uint32_t *pu32Offset)
{
    1e78:	b580      	push	{r7, lr}
    1e7a:	b08e      	sub	sp, #56	; 0x38
    1e7c:	af00      	add	r7, sp, #0
    1e7e:	60f8      	str	r0, [r7, #12]
    1e80:	60b9      	str	r1, [r7, #8]
    1e82:	607a      	str	r2, [r7, #4]
    1e84:	603b      	str	r3, [r7, #0]
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	au32Command[0] = IAP_CMD_COMPARE;
    1e86:	2338      	movs	r3, #56	; 0x38
    1e88:	613b      	str	r3, [r7, #16]
	au32Command[1] = u32DstAddr;
    1e8a:	68fb      	ldr	r3, [r7, #12]
    1e8c:	617b      	str	r3, [r7, #20]
	au32Command[2] = u32SrcAddr;
    1e8e:	68bb      	ldr	r3, [r7, #8]
    1e90:	61bb      	str	r3, [r7, #24]
	au32Command[3] = u32Len;
    1e92:	687b      	ldr	r3, [r7, #4]
    1e94:	61fb      	str	r3, [r7, #28]

	IAP_EXECUTE_CMD(au32Command, au32Result);
    1e96:	f107 0110 	add.w	r1, r7, #16
    1e9a:	f107 0224 	add.w	r2, r7, #36	; 0x24
    1e9e:	4b09      	ldr	r3, [pc, #36]	; (1ec4 <u32IAP_Compare+0x4c>)
    1ea0:	4608      	mov	r0, r1
    1ea2:	4611      	mov	r1, r2
    1ea4:	4798      	blx	r3

	if (au32Result[0] == IAP_STA_COMPARE_ERROR)
    1ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ea8:	2b0a      	cmp	r3, #10
    1eaa:	d105      	bne.n	1eb8 <u32IAP_Compare+0x40>
	{
		if (pu32Offset != 0)
    1eac:	683b      	ldr	r3, [r7, #0]
    1eae:	2b00      	cmp	r3, #0
    1eb0:	d002      	beq.n	1eb8 <u32IAP_Compare+0x40>
		{
			*pu32Offset = au32Result[1];
    1eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1eb4:	683b      	ldr	r3, [r7, #0]
    1eb6:	601a      	str	r2, [r3, #0]
		}
	}
	return ( au32Result[0] );
    1eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1eba:	4618      	mov	r0, r3
    1ebc:	3738      	adds	r7, #56	; 0x38
    1ebe:	46bd      	mov	sp, r7
    1ec0:	bd80      	pop	{r7, pc}
    1ec2:	bf00      	nop
    1ec4:	1fff1ff1 	.word	0x1fff1ff1

00001ec8 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1ec8:	b480      	push	{r7}
    1eca:	b083      	sub	sp, #12
    1ecc:	af00      	add	r7, sp, #0
    1ece:	4603      	mov	r3, r0
    1ed0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1ed2:	4908      	ldr	r1, [pc, #32]	; (1ef4 <NVIC_EnableIRQ+0x2c>)
    1ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1ed8:	095b      	lsrs	r3, r3, #5
    1eda:	79fa      	ldrb	r2, [r7, #7]
    1edc:	f002 021f 	and.w	r2, r2, #31
    1ee0:	2001      	movs	r0, #1
    1ee2:	fa00 f202 	lsl.w	r2, r0, r2
    1ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1eea:	370c      	adds	r7, #12
    1eec:	46bd      	mov	sp, r7
    1eee:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ef2:	4770      	bx	lr
    1ef4:	e000e100 	.word	0xe000e100

00001ef8 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1ef8:	b480      	push	{r7}
    1efa:	b083      	sub	sp, #12
    1efc:	af00      	add	r7, sp, #0
    1efe:	4603      	mov	r3, r0
    1f00:	6039      	str	r1, [r7, #0]
    1f02:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    1f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1f08:	2b00      	cmp	r3, #0
    1f0a:	da0b      	bge.n	1f24 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    1f0c:	490d      	ldr	r1, [pc, #52]	; (1f44 <NVIC_SetPriority+0x4c>)
    1f0e:	79fb      	ldrb	r3, [r7, #7]
    1f10:	f003 030f 	and.w	r3, r3, #15
    1f14:	3b04      	subs	r3, #4
    1f16:	683a      	ldr	r2, [r7, #0]
    1f18:	b2d2      	uxtb	r2, r2
    1f1a:	00d2      	lsls	r2, r2, #3
    1f1c:	b2d2      	uxtb	r2, r2
    1f1e:	440b      	add	r3, r1
    1f20:	761a      	strb	r2, [r3, #24]
    1f22:	e009      	b.n	1f38 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    1f24:	4908      	ldr	r1, [pc, #32]	; (1f48 <NVIC_SetPriority+0x50>)
    1f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1f2a:	683a      	ldr	r2, [r7, #0]
    1f2c:	b2d2      	uxtb	r2, r2
    1f2e:	00d2      	lsls	r2, r2, #3
    1f30:	b2d2      	uxtb	r2, r2
    1f32:	440b      	add	r3, r1
    1f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    1f38:	370c      	adds	r7, #12
    1f3a:	46bd      	mov	sp, r7
    1f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f40:	4770      	bx	lr
    1f42:	bf00      	nop
    1f44:	e000ed00 	.word	0xe000ed00
    1f48:	e000e100 	.word	0xe000e100

00001f4c <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
    1f4c:	b580      	push	{r7, lr}
    1f4e:	b082      	sub	sp, #8
    1f50:	af00      	add	r7, sp, #0
    1f52:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
    1f54:	687b      	ldr	r3, [r7, #4]
    1f56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    1f5a:	d301      	bcc.n	1f60 <SysTick_Config+0x14>
    1f5c:	2301      	movs	r3, #1
    1f5e:	e011      	b.n	1f84 <SysTick_Config+0x38>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
    1f60:	4a0a      	ldr	r2, [pc, #40]	; (1f8c <SysTick_Config+0x40>)
    1f62:	687b      	ldr	r3, [r7, #4]
    1f64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1f68:	3b01      	subs	r3, #1
    1f6a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
    1f6c:	f04f 30ff 	mov.w	r0, #4294967295
    1f70:	211f      	movs	r1, #31
    1f72:	f7ff ffc1 	bl	1ef8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    1f76:	4b05      	ldr	r3, [pc, #20]	; (1f8c <SysTick_Config+0x40>)
    1f78:	2200      	movs	r2, #0
    1f7a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
    1f7c:	4b03      	ldr	r3, [pc, #12]	; (1f8c <SysTick_Config+0x40>)
    1f7e:	2207      	movs	r2, #7
    1f80:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
    1f82:	2300      	movs	r3, #0
}
    1f84:	4618      	mov	r0, r3
    1f86:	3708      	adds	r7, #8
    1f88:	46bd      	mov	sp, r7
    1f8a:	bd80      	pop	{r7, pc}
    1f8c:	e000e010 	.word	0xe000e010

00001f90 <ConfigurePins>:
int extPowerPinVal = 0;
char cell_buf[15];
short is_cell_only = 1;


void ConfigurePins() {
    1f90:	b580      	push	{r7, lr}
    1f92:	b082      	sub	sp, #8
    1f94:	af00      	add	r7, sp, #0
	//PWRKEY & EMERG_OFF
	LPC_PINCON->PINSEL4 &= ~(0xFFFF); // Reset P2[0..7] = GPIO
    1f96:	4a34      	ldr	r2, [pc, #208]	; (2068 <ConfigurePins+0xd8>)
    1f98:	4b33      	ldr	r3, [pc, #204]	; (2068 <ConfigurePins+0xd8>)
    1f9a:	691b      	ldr	r3, [r3, #16]
    1f9c:	0c1b      	lsrs	r3, r3, #16
    1f9e:	041b      	lsls	r3, r3, #16
    1fa0:	6113      	str	r3, [r2, #16]
	LPC_GPIO2->FIODIR |= 0xFF; // P2[0..7] =
    1fa2:	4a32      	ldr	r2, [pc, #200]	; (206c <ConfigurePins+0xdc>)
    1fa4:	4b31      	ldr	r3, [pc, #196]	; (206c <ConfigurePins+0xdc>)
    1fa6:	681b      	ldr	r3, [r3, #0]
    1fa8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1fac:	6013      	str	r3, [r2, #0]
	LPC_PINCON->PINSEL9 &= ~(0xFFFF); // Reset P4[24..31] = GPIO
    1fae:	4a2e      	ldr	r2, [pc, #184]	; (2068 <ConfigurePins+0xd8>)
    1fb0:	4b2d      	ldr	r3, [pc, #180]	; (2068 <ConfigurePins+0xd8>)
    1fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1fb4:	0c1b      	lsrs	r3, r3, #16
    1fb6:	041b      	lsls	r3, r3, #16
    1fb8:	6253      	str	r3, [r2, #36]	; 0x24
	LPC_GPIO4->FIODIR = (1 << 28) | (1 << 29);
    1fba:	4b2d      	ldr	r3, [pc, #180]	; (2070 <ConfigurePins+0xe0>)
    1fbc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    1fc0:	601a      	str	r2, [r3, #0]
	LPC_GPIO0->FIODIR &= (1 << 7); //P0[7] DIN 1 as input --> Default mode pull up enabled.
    1fc2:	4a2c      	ldr	r2, [pc, #176]	; (2074 <ConfigurePins+0xe4>)
    1fc4:	4b2b      	ldr	r3, [pc, #172]	; (2074 <ConfigurePins+0xe4>)
    1fc6:	681b      	ldr	r3, [r3, #0]
    1fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1fcc:	6013      	str	r3, [r2, #0]
	LPC_GPIO0->FIODIR &= ~(1 << 29 | 1 << 30); //P0[30] as input
    1fce:	4a29      	ldr	r2, [pc, #164]	; (2074 <ConfigurePins+0xe4>)
    1fd0:	4b28      	ldr	r3, [pc, #160]	; (2074 <ConfigurePins+0xe4>)
    1fd2:	681b      	ldr	r3, [r3, #0]
    1fd4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
    1fd8:	6013      	str	r3, [r2, #0]
	LPC_GPIO0->FIODIR |= (1 << 5);
    1fda:	4a26      	ldr	r2, [pc, #152]	; (2074 <ConfigurePins+0xe4>)
    1fdc:	4b25      	ldr	r3, [pc, #148]	; (2074 <ConfigurePins+0xe4>)
    1fde:	681b      	ldr	r3, [r3, #0]
    1fe0:	f043 0320 	orr.w	r3, r3, #32
    1fe4:	6013      	str	r3, [r2, #0]
	//Init ADC
	uint32_t u32PCLKDIV, u32PCLK;
	LPC_SC->PCONP |= (1 << 12);
    1fe6:	4a24      	ldr	r2, [pc, #144]	; (2078 <ConfigurePins+0xe8>)
    1fe8:	4b23      	ldr	r3, [pc, #140]	; (2078 <ConfigurePins+0xe8>)
    1fea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1fee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1ff2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	u32PCLKDIV = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
    1ff6:	4b20      	ldr	r3, [pc, #128]	; (2078 <ConfigurePins+0xe8>)
    1ff8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    1ffc:	099b      	lsrs	r3, r3, #6
    1ffe:	f003 0303 	and.w	r3, r3, #3
    2002:	607b      	str	r3, [r7, #4]
	switch (u32PCLKDIV) {
    2004:	687b      	ldr	r3, [r7, #4]
    2006:	2b02      	cmp	r3, #2
    2008:	d009      	beq.n	201e <ConfigurePins+0x8e>
    200a:	2b03      	cmp	r3, #3
    200c:	d00a      	beq.n	2024 <ConfigurePins+0x94>
    200e:	2b01      	cmp	r3, #1
    2010:	d002      	beq.n	2018 <ConfigurePins+0x88>
	case 0x00:
	default:
		u32PCLK = 12000000 / 4;
    2012:	4b1a      	ldr	r3, [pc, #104]	; (207c <ConfigurePins+0xec>)
    2014:	603b      	str	r3, [r7, #0]
		break;
    2016:	e008      	b.n	202a <ConfigurePins+0x9a>
	case 0x01:
		u32PCLK = 12000000;
    2018:	4b19      	ldr	r3, [pc, #100]	; (2080 <ConfigurePins+0xf0>)
    201a:	603b      	str	r3, [r7, #0]
		break;
    201c:	e005      	b.n	202a <ConfigurePins+0x9a>
	case 0x02:
		u32PCLK = 12000000 / 2;
    201e:	4b19      	ldr	r3, [pc, #100]	; (2084 <ConfigurePins+0xf4>)
    2020:	603b      	str	r3, [r7, #0]
		break;
    2022:	e002      	b.n	202a <ConfigurePins+0x9a>
	case 0x03:
		u32PCLK = 12000000 / 8;
    2024:	4b18      	ldr	r3, [pc, #96]	; (2088 <ConfigurePins+0xf8>)
    2026:	603b      	str	r3, [r7, #0]
		break;
    2028:	bf00      	nop
	//LPC_ADC->ADCR = (1 << 3) | ((u32PCLK / 12000000 - 1) << 8) | (0 << 16) | (0
	//		<< 17) | (1 << 21) | (0 << 24) | (0 << 27);
	//LPC_PINCON->PINSEL1 |= (1U << 20);
	///ADC//
	//External Power Pin
	LPC_GPIO0->FIODIR &= ~(1 << 22);
    202a:	4a12      	ldr	r2, [pc, #72]	; (2074 <ConfigurePins+0xe4>)
    202c:	4b11      	ldr	r3, [pc, #68]	; (2074 <ConfigurePins+0xe4>)
    202e:	681b      	ldr	r3, [r3, #0]
    2030:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    2034:	6013      	str	r3, [r2, #0]
	//Ignition Pin
	LPC_GPIO0->FIODIR &= ~(1 << 21);
    2036:	4a0f      	ldr	r2, [pc, #60]	; (2074 <ConfigurePins+0xe4>)
    2038:	4b0e      	ldr	r3, [pc, #56]	; (2074 <ConfigurePins+0xe4>)
    203a:	681b      	ldr	r3, [r3, #0]
    203c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
    2040:	6013      	str	r3, [r2, #0]
	#ifdef brisa
		DIGITAL_IN1_PIN = 21;
	#endif
	LPC_GPIOINT->IO0IntEnR |= (1 << 22); // Rising edge
    2042:	4a12      	ldr	r2, [pc, #72]	; (208c <ConfigurePins+0xfc>)
    2044:	4b11      	ldr	r3, [pc, #68]	; (208c <ConfigurePins+0xfc>)
    2046:	691b      	ldr	r3, [r3, #16]
    2048:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    204c:	6113      	str	r3, [r2, #16]
	LPC_GPIOINT->IO0IntEnF |= (1 << 22); // Falling edge
    204e:	4a0f      	ldr	r2, [pc, #60]	; (208c <ConfigurePins+0xfc>)
    2050:	4b0e      	ldr	r3, [pc, #56]	; (208c <ConfigurePins+0xfc>)
    2052:	695b      	ldr	r3, [r3, #20]
    2054:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    2058:	6153      	str	r3, [r2, #20]
	NVIC_EnableIRQ(EINT3_IRQn);
    205a:	2015      	movs	r0, #21
    205c:	f7ff ff34 	bl	1ec8 <NVIC_EnableIRQ>
}
    2060:	3708      	adds	r7, #8
    2062:	46bd      	mov	sp, r7
    2064:	bd80      	pop	{r7, pc}
    2066:	bf00      	nop
    2068:	4002c000 	.word	0x4002c000
    206c:	2009c040 	.word	0x2009c040
    2070:	2009c080 	.word	0x2009c080
    2074:	2009c000 	.word	0x2009c000
    2078:	400fc000 	.word	0x400fc000
    207c:	002dc6c0 	.word	0x002dc6c0
    2080:	00b71b00 	.word	0x00b71b00
    2084:	005b8d80 	.word	0x005b8d80
    2088:	0016e360 	.word	0x0016e360
    208c:	40028080 	.word	0x40028080

00002090 <main>:
			is_conn = GSM_ConnectToTrio();
	}
	return is_conn;
}

int main(void) {
    2090:	b580      	push	{r7, lr}
    2092:	b0b8      	sub	sp, #224	; 0xe0
    2094:	af00      	add	r7, sp, #0
	char buffer[200];
	device_power_state = high_power_state;
    2096:	4b6b      	ldr	r3, [pc, #428]	; (2244 <main+0x1b4>)
    2098:	2201      	movs	r2, #1
    209a:	701a      	strb	r2, [r3, #0]
	SystemInit();
    209c:	f001 fbd2 	bl	3844 <SystemInit>
	LPC_SC->CLKSRCSEL |= 0x01;//0x01;
    20a0:	4a69      	ldr	r2, [pc, #420]	; (2248 <main+0x1b8>)
    20a2:	4b69      	ldr	r3, [pc, #420]	; (2248 <main+0x1b8>)
    20a4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    20a8:	f043 0301 	orr.w	r3, r3, #1
    20ac:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	LPC_SC->PLL0CFG |= 0x01; // Select external osc. as main clock.
    20b0:	4a65      	ldr	r2, [pc, #404]	; (2248 <main+0x1b8>)
    20b2:	4b65      	ldr	r3, [pc, #404]	; (2248 <main+0x1b8>)
    20b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    20b8:	f043 0301 	orr.w	r3, r3, #1
    20bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	LPC_SC->CCLKCFG = 0x03; // Main PLL is divided by 8
    20c0:	4b61      	ldr	r3, [pc, #388]	; (2248 <main+0x1b8>)
    20c2:	2203      	movs	r2, #3
    20c4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	SystemCoreClockUpdate();
    20c8:	f001 fb66 	bl	3798 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000 - 1); // Generate f each 1 ms, used to enable DelayMs function?
    20cc:	4b5f      	ldr	r3, [pc, #380]	; (224c <main+0x1bc>)
    20ce:	681b      	ldr	r3, [r3, #0]
    20d0:	4a5f      	ldr	r2, [pc, #380]	; (2250 <main+0x1c0>)
    20d2:	fba2 2303 	umull	r2, r3, r2, r3
    20d6:	099b      	lsrs	r3, r3, #6
    20d8:	3b01      	subs	r3, #1
    20da:	4618      	mov	r0, r3
    20dc:	f7ff ff36 	bl	1f4c <SysTick_Config>
	WDTInit(WDT_FEED_30_SECS);
    20e0:	485c      	ldr	r0, [pc, #368]	; (2254 <main+0x1c4>)
    20e2:	f001 f865 	bl	31b0 <WDTInit>

	ConfigurePins();
    20e6:	f7ff ff53 	bl	1f90 <ConfigurePins>
	UARTInit(PORT_TRACE, 115200);
    20ea:	2000      	movs	r0, #0
    20ec:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    20f0:	f000 fd4e 	bl	2b90 <UARTInit>
	UARTInit(PORT_GSM, Baudrate);
    20f4:	2001      	movs	r0, #1
    20f6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    20fa:	f000 fd49 	bl	2b90 <UARTInit>
	UARTInit(PORT_GPS, Baudrate);
    20fe:	2002      	movs	r0, #2
    2100:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    2104:	f000 fd44 	bl	2b90 <UARTInit>
	TraceNL("Hello P65 20150520.");
    2108:	4853      	ldr	r0, [pc, #332]	; (2258 <main+0x1c8>)
    210a:	f000 fab1 	bl	2670 <TraceNL>
	sprintf(buffer, "SystemCoreClock = %d Hz\n", SystemCoreClock);
    210e:	4b4f      	ldr	r3, [pc, #316]	; (224c <main+0x1bc>)
    2110:	681b      	ldr	r3, [r3, #0]
    2112:	1d3a      	adds	r2, r7, #4
    2114:	4610      	mov	r0, r2
    2116:	4951      	ldr	r1, [pc, #324]	; (225c <main+0x1cc>)
    2118:	461a      	mov	r2, r3
    211a:	f001 fcd5 	bl	3ac8 <sprintf>
	//UARTSend(PORT_TRACE, buffer, count);
	Trace(buffer);
    211e:	1d3b      	adds	r3, r7, #4
    2120:	4618      	mov	r0, r3
    2122:	f000 fa95 	bl	2650 <Trace>
	if (EEPROM_Init() == 0) /* initialize I2c */{
    2126:	f7fe fb25 	bl	774 <EEPROM_Init>
    212a:	4603      	mov	r3, r0
    212c:	2b00      	cmp	r3, #0
    212e:	d103      	bne.n	2138 <main+0xa8>
		TraceNL("EEPROM Init Error."); /* Fatal error */
    2130:	484b      	ldr	r0, [pc, #300]	; (2260 <main+0x1d0>)
    2132:	f000 fa9d 	bl	2670 <TraceNL>
    2136:	e002      	b.n	213e <main+0xae>
	} else {
		TraceNL("EEPROM Init Ok.");
    2138:	484a      	ldr	r0, [pc, #296]	; (2264 <main+0x1d4>)
    213a:	f000 fa99 	bl	2670 <TraceNL>
	}


	uint16_t crc = u16CRC_Calc16("adssadsadsadsadsadsa", 20);
    213e:	484a      	ldr	r0, [pc, #296]	; (2268 <main+0x1d8>)
    2140:	2114      	movs	r1, #20
    2142:	f7ff f8af 	bl	12a4 <u16CRC_Calc16>
    2146:	4603      	mov	r3, r0
    2148:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8

	sprintf(buffer, "CRC of adssadsadsadsadsadsa is : = %d \r\n", crc);
    214c:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
    2150:	1d3a      	adds	r2, r7, #4
    2152:	4610      	mov	r0, r2
    2154:	4945      	ldr	r1, [pc, #276]	; (226c <main+0x1dc>)
    2156:	461a      	mov	r2, r3
    2158:	f001 fcb6 	bl	3ac8 <sprintf>
	Trace(buffer);
    215c:	1d3b      	adds	r3, r7, #4
    215e:	4618      	mov	r0, r3
    2160:	f000 fa76 	bl	2650 <Trace>
	LoadParams();
    2164:	f7fe f8cc 	bl	300 <LoadParams>
	unsigned long int lastGPSLedToggle = 0;
    2168:	2300      	movs	r3, #0
    216a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	memset(buffer, 0xAA, sizeof(buffer));
    216e:	1d3b      	adds	r3, r7, #4
    2170:	4618      	mov	r0, r3
    2172:	21aa      	movs	r1, #170	; 0xaa
    2174:	22c8      	movs	r2, #200	; 0xc8
    2176:	f001 fbdf 	bl	3938 <memset>
	//u32BootLoader_ProgramFlash(buffer,0x30000,16);
	WDTFeed();
    217a:	f001 f837 	bl	31ec <WDTFeed>
	int is_sent = SUCCESS;
    217e:	2300      	movs	r3, #0
    2180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

	int is_last_speed_zero = 1;
    2184:	2301      	movs	r3, #1
    2186:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	int count ;

	device_power_state = high_power_state;
    218a:	4b2e      	ldr	r3, [pc, #184]	; (2244 <main+0x1b4>)
    218c:	2201      	movs	r2, #1
    218e:	701a      	strb	r2, [r3, #0]

	/// TODO set a timer in order of update failure to return to older

	TraceNL( "Initializing Server Connection" );
    2190:	4837      	ldr	r0, [pc, #220]	; (2270 <main+0x1e0>)
    2192:	f000 fa6d 	bl	2670 <TraceNL>

	if( IsUpgradeRequested() )
    2196:	f000 f87f 	bl	2298 <IsUpgradeRequested>
    219a:	4603      	mov	r3, r0
    219c:	2b00      	cmp	r3, #0
    219e:	d04d      	beq.n	223c <main+0x1ac>
	{
		TraceNL( "System image upgrade requested" );
    21a0:	4834      	ldr	r0, [pc, #208]	; (2274 <main+0x1e4>)
    21a2:	f000 fa65 	bl	2670 <TraceNL>
		int8_t 	trials = 1;
    21a6:	2301      	movs	r3, #1
    21a8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		while( trials-- > 0 )
    21ac:	e039      	b.n	2222 <main+0x192>
		{
			TraceNL( "Trial" );
    21ae:	4832      	ldr	r0, [pc, #200]	; (2278 <main+0x1e8>)
    21b0:	f000 fa5e 	bl	2670 <TraceNL>
			 * 	Setup a server connection
			 *
			 */

			// InitializeServerConn();
			if( GSM_ConnectToTrioUpgradeServer() == SUCCESS )
    21b4:	f7fe fc80 	bl	ab8 <GSM_ConnectToTrioUpgradeServer>
    21b8:	4603      	mov	r3, r0
    21ba:	2b00      	cmp	r3, #0
    21bc:	d12e      	bne.n	221c <main+0x18c>
			{
				TraceNL( "Server Connection Established to Upgrade server" );
    21be:	482f      	ldr	r0, [pc, #188]	; (227c <main+0x1ec>)
    21c0:	f000 fa56 	bl	2670 <TraceNL>

				//GSM_SendToServerTCP( "[ST;70;r2246;P65-20150204-1;;HELLO]" );

				WDTFeed( );
    21c4:	f001 f812 	bl	31ec <WDTFeed>

				DownloadSecondaryImage();
    21c8:	f000 f876 	bl	22b8 <DownloadSecondaryImage>

				WDTFeed( );
    21cc:	f001 f80e 	bl	31ec <WDTFeed>
				TraceNL( "Download finished " );
    21d0:	482b      	ldr	r0, [pc, #172]	; (2280 <main+0x1f0>)
    21d2:	f000 fa4d 	bl	2670 <TraceNL>
				ExecuteApplicationImage( SECONDARY_IMAGE_LOAD_ADDR );
    21d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    21da:	f000 f8d1 	bl	2380 <ExecuteApplicationImage>

				for ( count = 0; count < 100000000; count++)
    21de:	2300      	movs	r3, #0
    21e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    21e4:	e015      	b.n	2212 <main+0x182>
					if( count % 10000000 == 0)
    21e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
    21ea:	4b26      	ldr	r3, [pc, #152]	; (2284 <main+0x1f4>)
    21ec:	fb83 1302 	smull	r1, r3, r3, r2
    21f0:	1599      	asrs	r1, r3, #22
    21f2:	17d3      	asrs	r3, r2, #31
    21f4:	1acb      	subs	r3, r1, r3
    21f6:	4924      	ldr	r1, [pc, #144]	; (2288 <main+0x1f8>)
    21f8:	fb01 f303 	mul.w	r3, r1, r3
    21fc:	1ad3      	subs	r3, r2, r3
    21fe:	2b00      	cmp	r3, #0
    2200:	d102      	bne.n	2208 <main+0x178>
						TracePutc( '.' );
    2202:	202e      	movs	r0, #46	; 0x2e
    2204:	f000 fa4c 	bl	26a0 <TracePutc>

				WDTFeed( );
				TraceNL( "Download finished " );
				ExecuteApplicationImage( SECONDARY_IMAGE_LOAD_ADDR );

				for ( count = 0; count < 100000000; count++)
    2208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    220c:	3301      	adds	r3, #1
    220e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    2212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    2216:	4a1d      	ldr	r2, [pc, #116]	; (228c <main+0x1fc>)
    2218:	4293      	cmp	r3, r2
    221a:	dde4      	ble.n	21e6 <main+0x156>
					if( count % 10000000 == 0)
						TracePutc( '.' );
			}
			TraceNL( "Trial end" );
    221c:	481c      	ldr	r0, [pc, #112]	; (2290 <main+0x200>)
    221e:	f000 fa27 	bl	2670 <TraceNL>

	if( IsUpgradeRequested() )
	{
		TraceNL( "System image upgrade requested" );
		int8_t 	trials = 1;
		while( trials-- > 0 )
    2222:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
    2226:	b2d3      	uxtb	r3, r2
    2228:	3b01      	subs	r3, #1
    222a:	b2db      	uxtb	r3, r3
    222c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    2230:	b253      	sxtb	r3, r2
    2232:	2b00      	cmp	r3, #0
    2234:	dcbb      	bgt.n	21ae <main+0x11e>
					if( count % 10000000 == 0)
						TracePutc( '.' );
			}
			TraceNL( "Trial end" );
		}
		TraceNL( "Finished upgrading" );
    2236:	4817      	ldr	r0, [pc, #92]	; (2294 <main+0x204>)
    2238:	f000 fa1a 	bl	2670 <TraceNL>
//	// Valid application does not exists. Get one from UART 0
//	enter_serial_isp();
//
//	while ( 1 );	// assert should not get here
//	return (0);
}
    223c:	4618      	mov	r0, r3
    223e:	37e0      	adds	r7, #224	; 0xe0
    2240:	46bd      	mov	sp, r7
    2242:	bd80      	pop	{r7, pc}
    2244:	10000de8 	.word	0x10000de8
    2248:	400fc000 	.word	0x400fc000
    224c:	10000018 	.word	0x10000018
    2250:	10624dd3 	.word	0x10624dd3
    2254:	0c6aea15 	.word	0x0c6aea15
    2258:	00006d74 	.word	0x00006d74
    225c:	00006d88 	.word	0x00006d88
    2260:	00006da4 	.word	0x00006da4
    2264:	00006db8 	.word	0x00006db8
    2268:	00006dc8 	.word	0x00006dc8
    226c:	00006de0 	.word	0x00006de0
    2270:	00006e0c 	.word	0x00006e0c
    2274:	00006e2c 	.word	0x00006e2c
    2278:	00006e4c 	.word	0x00006e4c
    227c:	00006e54 	.word	0x00006e54
    2280:	00006e84 	.word	0x00006e84
    2284:	6b5fca6b 	.word	0x6b5fca6b
    2288:	00989680 	.word	0x00989680
    228c:	05f5e0ff 	.word	0x05f5e0ff
    2290:	00006e98 	.word	0x00006e98
    2294:	00006ea4 	.word	0x00006ea4

00002298 <IsUpgradeRequested>:
** Returned value:	TRUE	upgrade is requested
** 					FALSE   upgrade is not requested
**
******************************************************************************/
uint32_t	IsUpgradeRequested( void )
{
    2298:	b480      	push	{r7}
    229a:	af00      	add	r7, sp, #0
	// TODO for test purposes allways upgrade requested later change
	if( (*( (uint32_t *) UPGRADE_PARAMETERS_ADDR) ) == 0xFFFFFFFF )
    229c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
    22a0:	681b      	ldr	r3, [r3, #0]
    22a2:	f1b3 3fff 	cmp.w	r3, #4294967295
    22a6:	d101      	bne.n	22ac <IsUpgradeRequested+0x14>
	{
		return TRUE;
    22a8:	2301      	movs	r3, #1
    22aa:	e000      	b.n	22ae <IsUpgradeRequested+0x16>
	}

	return FALSE;
    22ac:	2300      	movs	r3, #0
}
    22ae:	4618      	mov	r0, r3
    22b0:	46bd      	mov	sp, r7
    22b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    22b6:	4770      	bx	lr

000022b8 <DownloadSecondaryImage>:


void DownloadSecondaryImage( void )
{
    22b8:	b590      	push	{r4, r7, lr}
    22ba:	b0a3      	sub	sp, #140	; 0x8c
    22bc:	af02      	add	r7, sp, #8
	uint32_t	reason[5];
	uint32_t	i;

	char buff[100];

	i = SECONDARY_IMAGE_START_SEC;
    22be:	2316      	movs	r3, #22
    22c0:	67fb      	str	r3, [r7, #124]	; 0x7c
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    22c2:	e00a      	b.n	22da <DownloadSecondaryImage+0x22>
	{
		u32IAP_PrepareSectors( i, i );
    22c4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    22c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    22c8:	f7ff fd2a 	bl	1d20 <u32IAP_PrepareSectors>
		u32IAP_EraseSectors( i, i );
    22cc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    22ce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    22d0:	f7ff fd74 	bl	1dbc <u32IAP_EraseSectors>
	uint32_t	i;

	char buff[100];

	i = SECONDARY_IMAGE_START_SEC;
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    22d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    22d6:	3301      	adds	r3, #1
    22d8:	67fb      	str	r3, [r7, #124]	; 0x7c
    22da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    22dc:	2b1b      	cmp	r3, #27
    22de:	d9f1      	bls.n	22c4 <DownloadSecondaryImage+0xc>
	{
		u32IAP_PrepareSectors( i, i );
		u32IAP_EraseSectors( i, i );
	}
	TraceNL( "Checking if target memory is blank" );
    22e0:	4821      	ldr	r0, [pc, #132]	; (2368 <DownloadSecondaryImage+0xb0>)
    22e2:	f000 f9c5 	bl	2670 <TraceNL>


	i = SECONDARY_IMAGE_START_SEC;
    22e6:	2316      	movs	r3, #22
    22e8:	67fb      	str	r3, [r7, #124]	; 0x7c
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    22ea:	e02d      	b.n	2348 <DownloadSecondaryImage+0x90>
	{
		if( u32IAP_BlankCheckSectors( i, i, &reason[0] )== IAP_STA_SECTOR_NOT_BLANK )
    22ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
    22f0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    22f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    22f4:	461a      	mov	r2, r3
    22f6:	f7ff fd91 	bl	1e1c <u32IAP_BlankCheckSectors>
    22fa:	4603      	mov	r3, r0
    22fc:	2b08      	cmp	r3, #8
    22fe:	d116      	bne.n	232e <DownloadSecondaryImage+0x76>
		{
			sprintf(buff, "Target sector (%d) is not blank addr: 0x%X, 0x%X", i, reason[0], reason[1] );
    2300:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    2302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    2304:	1d3a      	adds	r2, r7, #4
    2306:	9300      	str	r3, [sp, #0]
    2308:	4610      	mov	r0, r2
    230a:	4918      	ldr	r1, [pc, #96]	; (236c <DownloadSecondaryImage+0xb4>)
    230c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    230e:	4623      	mov	r3, r4
    2310:	f001 fbda 	bl	3ac8 <sprintf>
			TraceNL( buff );
    2314:	1d3b      	adds	r3, r7, #4
    2316:	4618      	mov	r0, r3
    2318:	f000 f9aa 	bl	2670 <TraceNL>
			u32IAP_PrepareSectors( i, i );
    231c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    231e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    2320:	f7ff fcfe 	bl	1d20 <u32IAP_PrepareSectors>
			u32IAP_EraseSectors( i, i);
    2324:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    2326:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    2328:	f7ff fd48 	bl	1dbc <u32IAP_EraseSectors>
    232c:	e009      	b.n	2342 <DownloadSecondaryImage+0x8a>

		}else
		{
			sprintf(buff, "Target sector (%d) is blank ", i );
    232e:	1d3b      	adds	r3, r7, #4
    2330:	4618      	mov	r0, r3
    2332:	490f      	ldr	r1, [pc, #60]	; (2370 <DownloadSecondaryImage+0xb8>)
    2334:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    2336:	f001 fbc7 	bl	3ac8 <sprintf>
			TraceNL( buff );
    233a:	1d3b      	adds	r3, r7, #4
    233c:	4618      	mov	r0, r3
    233e:	f000 f997 	bl	2670 <TraceNL>
	}
	TraceNL( "Checking if target memory is blank" );


	i = SECONDARY_IMAGE_START_SEC;
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    2342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    2344:	3301      	adds	r3, #1
    2346:	67fb      	str	r3, [r7, #124]	; 0x7c
    2348:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    234a:	2b1b      	cmp	r3, #27
    234c:	d9ce      	bls.n	22ec <DownloadSecondaryImage+0x34>
			TraceNL( buff );
		}
	}

	/*	Clear the received data counter using in the load_mage function */
	received_data = 0;
    234e:	4b09      	ldr	r3, [pc, #36]	; (2374 <DownloadSecondaryImage+0xbc>)
    2350:	2200      	movs	r2, #0
    2352:	601a      	str	r2, [r3, #0]

	TraceNL( "Starting download" );
    2354:	4808      	ldr	r0, [pc, #32]	; (2378 <DownloadSecondaryImage+0xc0>)
    2356:	f000 f98b 	bl	2670 <TraceNL>
	/*	Store a new image into flash */
	XModem1K_Client( &load_image );
    235a:	4808      	ldr	r0, [pc, #32]	; (237c <DownloadSecondaryImage+0xc4>)
    235c:	f000 fffc 	bl	3358 <XModem1K_Client>
}
    2360:	3784      	adds	r7, #132	; 0x84
    2362:	46bd      	mov	sp, r7
    2364:	bd90      	pop	{r4, r7, pc}
    2366:	bf00      	nop
    2368:	00006fc8 	.word	0x00006fc8
    236c:	00006fec 	.word	0x00006fec
    2370:	00007020 	.word	0x00007020
    2374:	10000134 	.word	0x10000134
    2378:	00007040 	.word	0x00007040
    237c:	000023b1 	.word	0x000023b1

00002380 <ExecuteApplicationImage>:

}


void ExecuteApplicationImage( unsigned int startAddress )
{
    2380:	b580      	push	{r7, lr}
    2382:	b084      	sub	sp, #16
    2384:	af00      	add	r7, sp, #0
    2386:	6078      	str	r0, [r7, #4]
	unsigned *p;	// used for loading address of reset handler from user flash

	/* Change the Vector Table to the
	in case the user application uses interrupts */

	SCB->VTOR = (startAddress & 0x1FFFFF80);
    2388:	4a08      	ldr	r2, [pc, #32]	; (23ac <ExecuteApplicationImage+0x2c>)
    238a:	687b      	ldr	r3, [r7, #4]
    238c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    2390:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2394:	6093      	str	r3, [r2, #8]

	// Load contents of second word of user flash - the reset handler address
	// in the applications vector table
	p = (unsigned *)(startAddress + 4);
    2396:	687b      	ldr	r3, [r7, #4]
    2398:	3304      	adds	r3, #4
    239a:	60fb      	str	r3, [r7, #12]

	// Set user_code_entry to be the address contained in that second word
	// of user flash
	user_code_entry = (void *) *p;
    239c:	68fb      	ldr	r3, [r7, #12]
    239e:	681b      	ldr	r3, [r3, #0]
    23a0:	60bb      	str	r3, [r7, #8]

	// Jump to user application
    user_code_entry();
    23a2:	68bb      	ldr	r3, [r7, #8]
    23a4:	4798      	blx	r3
}
    23a6:	3710      	adds	r7, #16
    23a8:	46bd      	mov	sp, r7
    23aa:	bd80      	pop	{r7, pc}
    23ac:	e000ed00 	.word	0xe000ed00

000023b0 <load_image>:

static uint32_t load_image(uint8_t *data, uint16_t length){
    23b0:	b580      	push	{r7, lr}
    23b2:	b0c4      	sub	sp, #272	; 0x110
    23b4:	af00      	add	r7, sp, #0
    23b6:	1d3b      	adds	r3, r7, #4
    23b8:	6018      	str	r0, [r3, #0]
    23ba:	460a      	mov	r2, r1
    23bc:	1cbb      	adds	r3, r7, #2
    23be:	801a      	strh	r2, [r3, #0]
	char buffer[250];
	uint32_t rc;
	int i;


	sprintf(buffer, "Totally : %d  lenght : %d\r\n",
    23c0:	4b83      	ldr	r3, [pc, #524]	; (25d0 <load_image+0x220>)
    23c2:	681a      	ldr	r2, [r3, #0]
    23c4:	1cbb      	adds	r3, r7, #2
    23c6:	881b      	ldrh	r3, [r3, #0]
    23c8:	f107 0108 	add.w	r1, r7, #8
    23cc:	4608      	mov	r0, r1
    23ce:	4981      	ldr	r1, [pc, #516]	; (25d4 <load_image+0x224>)
    23d0:	f001 fb7a 	bl	3ac8 <sprintf>
			received_data, length);

	TraceDumpHex(buffer, strlen(buffer));
    23d4:	f107 0308 	add.w	r3, r7, #8
    23d8:	4618      	mov	r0, r3
    23da:	f002 ffdd 	bl	5398 <strlen>
    23de:	4602      	mov	r2, r0
    23e0:	f107 0308 	add.w	r3, r7, #8
    23e4:	4618      	mov	r0, r3
    23e6:	4611      	mov	r1, r2
    23e8:	f000 f984 	bl	26f4 <TraceDumpHex>

	if( length == 0 && flashWriteIndex == 0 )
    23ec:	1cbb      	adds	r3, r7, #2
    23ee:	881b      	ldrh	r3, [r3, #0]
    23f0:	2b00      	cmp	r3, #0
    23f2:	d105      	bne.n	2400 <load_image+0x50>
    23f4:	4b78      	ldr	r3, [pc, #480]	; (25d8 <load_image+0x228>)
    23f6:	681b      	ldr	r3, [r3, #0]
    23f8:	2b00      	cmp	r3, #0
    23fa:	d101      	bne.n	2400 <load_image+0x50>
	{
		// Finished and all previous data has been written
		return ( 2 ); // return non zero to indicate success
    23fc:	2302      	movs	r3, #2
    23fe:	e0e2      	b.n	25c6 <load_image+0x216>
	}


	for( i = 0; i < length; i++ )
    2400:	2300      	movs	r3, #0
    2402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    2406:	e011      	b.n	242c <load_image+0x7c>
	{
		flashWriteBuffer[flashWriteIndex++] = data[i];
    2408:	4b73      	ldr	r3, [pc, #460]	; (25d8 <load_image+0x228>)
    240a:	681b      	ldr	r3, [r3, #0]
    240c:	1c5a      	adds	r2, r3, #1
    240e:	4972      	ldr	r1, [pc, #456]	; (25d8 <load_image+0x228>)
    2410:	600a      	str	r2, [r1, #0]
    2412:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    2416:	1d39      	adds	r1, r7, #4
    2418:	6809      	ldr	r1, [r1, #0]
    241a:	440a      	add	r2, r1
    241c:	7811      	ldrb	r1, [r2, #0]
    241e:	4a6f      	ldr	r2, [pc, #444]	; (25dc <load_image+0x22c>)
    2420:	54d1      	strb	r1, [r2, r3]
		// Finished and all previous data has been written
		return ( 2 ); // return non zero to indicate success
	}


	for( i = 0; i < length; i++ )
    2422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2426:	3301      	adds	r3, #1
    2428:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    242c:	1cbb      	adds	r3, r7, #2
    242e:	881a      	ldrh	r2, [r3, #0]
    2430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2434:	429a      	cmp	r2, r3
    2436:	dce7      	bgt.n	2408 <load_image+0x58>
	{
		flashWriteBuffer[flashWriteIndex++] = data[i];
	}

	if( length == 0 && (flashWriteIndex % FLASH_SECTOR_SIZE) )
    2438:	1cbb      	adds	r3, r7, #2
    243a:	881b      	ldrh	r3, [r3, #0]
    243c:	2b00      	cmp	r3, #0
    243e:	d11a      	bne.n	2476 <load_image+0xc6>
    2440:	4b65      	ldr	r3, [pc, #404]	; (25d8 <load_image+0x228>)
    2442:	681b      	ldr	r3, [r3, #0]
    2444:	b2db      	uxtb	r3, r3
    2446:	2b00      	cmp	r3, #0
    2448:	d015      	beq.n	2476 <load_image+0xc6>
	{
		for( i = flashWriteIndex; i < FLASH_SECTOR_SIZE; i++ )
    244a:	4b63      	ldr	r3, [pc, #396]	; (25d8 <load_image+0x228>)
    244c:	681b      	ldr	r3, [r3, #0]
    244e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    2452:	e00c      	b.n	246e <load_image+0xbe>
		{
			flashWriteBuffer[flashWriteIndex++] = 0xFF;
    2454:	4b60      	ldr	r3, [pc, #384]	; (25d8 <load_image+0x228>)
    2456:	681b      	ldr	r3, [r3, #0]
    2458:	1c5a      	adds	r2, r3, #1
    245a:	495f      	ldr	r1, [pc, #380]	; (25d8 <load_image+0x228>)
    245c:	600a      	str	r2, [r1, #0]
    245e:	4a5f      	ldr	r2, [pc, #380]	; (25dc <load_image+0x22c>)
    2460:	21ff      	movs	r1, #255	; 0xff
    2462:	54d1      	strb	r1, [r2, r3]
		flashWriteBuffer[flashWriteIndex++] = data[i];
	}

	if( length == 0 && (flashWriteIndex % FLASH_SECTOR_SIZE) )
	{
		for( i = flashWriteIndex; i < FLASH_SECTOR_SIZE; i++ )
    2464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2468:	3301      	adds	r3, #1
    246a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    246e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2472:	2bff      	cmp	r3, #255	; 0xff
    2474:	ddee      	ble.n	2454 <load_image+0xa4>

	}



	if( flashWriteIndex && ((flashWriteIndex % FLASH_SECTOR_SIZE) == 0) )
    2476:	4b58      	ldr	r3, [pc, #352]	; (25d8 <load_image+0x228>)
    2478:	681b      	ldr	r3, [r3, #0]
    247a:	2b00      	cmp	r3, #0
    247c:	f000 80a2 	beq.w	25c4 <load_image+0x214>
    2480:	4b55      	ldr	r3, [pc, #340]	; (25d8 <load_image+0x228>)
    2482:	681b      	ldr	r3, [r3, #0]
    2484:	b2db      	uxtb	r3, r3
    2486:	2b00      	cmp	r3, #0
    2488:	f040 809c 	bne.w	25c4 <load_image+0x214>
	{
		sprintf(buffer, "Totally : %d  flashWriteIndex : %d\r\n",
    248c:	4b50      	ldr	r3, [pc, #320]	; (25d0 <load_image+0x220>)
    248e:	681a      	ldr	r2, [r3, #0]
    2490:	4b51      	ldr	r3, [pc, #324]	; (25d8 <load_image+0x228>)
    2492:	681b      	ldr	r3, [r3, #0]
    2494:	f107 0108 	add.w	r1, r7, #8
    2498:	4608      	mov	r0, r1
    249a:	4951      	ldr	r1, [pc, #324]	; (25e0 <load_image+0x230>)
    249c:	f001 fb14 	bl	3ac8 <sprintf>
//		TraceDumpHex(buffer, strlen(buffer));
//		TraceDumpHex(flashWriteBuffer, flashWriteIndex);

		/*	Prepare Sectors to be flashed */
		// TODO arrange sectors for primary image
		if (u32IAP_PrepareSectors(22, 27) == IAP_STA_CMD_SUCCESS) {
    24a0:	2016      	movs	r0, #22
    24a2:	211b      	movs	r1, #27
    24a4:	f7ff fc3c 	bl	1d20 <u32IAP_PrepareSectors>
    24a8:	4603      	mov	r3, r0
    24aa:	2b00      	cmp	r3, #0
    24ac:	f040 808a 	bne.w	25c4 <load_image+0x214>
			TraceNL("prepare ");
    24b0:	484c      	ldr	r0, [pc, #304]	; (25e4 <load_image+0x234>)
    24b2:	f000 f8dd 	bl	2670 <TraceNL>

			rc = u32IAP_CopyRAMToFlash(
    24b6:	4b46      	ldr	r3, [pc, #280]	; (25d0 <load_image+0x220>)
    24b8:	681b      	ldr	r3, [r3, #0]
    24ba:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
    24be:	4947      	ldr	r1, [pc, #284]	; (25dc <load_image+0x22c>)
    24c0:	4b45      	ldr	r3, [pc, #276]	; (25d8 <load_image+0x228>)
    24c2:	681b      	ldr	r3, [r3, #0]
    24c4:	4610      	mov	r0, r2
    24c6:	461a      	mov	r2, r3
    24c8:	f7ff fc4e 	bl	1d68 <u32IAP_CopyRAMToFlash>
    24cc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
					SECONDARY_IMAGE_LOAD_ADDR + received_data,
					(uint32_t) flashWriteBuffer,
					flashWriteIndex
					);

			sprintf( buffer, "Copy Ram result code : %d\r\n", rc );
    24d0:	f107 0308 	add.w	r3, r7, #8
    24d4:	4618      	mov	r0, r3
    24d6:	4944      	ldr	r1, [pc, #272]	; (25e8 <load_image+0x238>)
    24d8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    24dc:	f001 faf4 	bl	3ac8 <sprintf>
			TraceNL( buffer );
    24e0:	f107 0308 	add.w	r3, r7, #8
    24e4:	4618      	mov	r0, r3
    24e6:	f000 f8c3 	bl	2670 <TraceNL>
			/*	Copy data (already) located in RAM to flash */
			if (rc == IAP_STA_CMD_SUCCESS) {
    24ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    24ee:	2b00      	cmp	r3, #0
    24f0:	d168      	bne.n	25c4 <load_image+0x214>
				TraceNL( "copied " );
    24f2:	483e      	ldr	r0, [pc, #248]	; (25ec <load_image+0x23c>)
    24f4:	f000 f8bc 	bl	2670 <TraceNL>

				rc = u32IAP_Compare( SECONDARY_IMAGE_LOAD_ADDR + received_data,
    24f8:	4b35      	ldr	r3, [pc, #212]	; (25d0 <load_image+0x220>)
    24fa:	681b      	ldr	r3, [r3, #0]
    24fc:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
    2500:	4936      	ldr	r1, [pc, #216]	; (25dc <load_image+0x22c>)
    2502:	4b35      	ldr	r3, [pc, #212]	; (25d8 <load_image+0x228>)
    2504:	681b      	ldr	r3, [r3, #0]
    2506:	4610      	mov	r0, r2
    2508:	461a      	mov	r2, r3
    250a:	2300      	movs	r3, #0
    250c:	f7ff fcb4 	bl	1e78 <u32IAP_Compare>
    2510:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
						             (uint32_t) flashWriteBuffer,
									 flashWriteIndex, 0
									);
				sprintf( buffer, "u32IAP_Compare : %d  wrote %d \r\n", rc , flashWriteIndex );
    2514:	4b30      	ldr	r3, [pc, #192]	; (25d8 <load_image+0x228>)
    2516:	681b      	ldr	r3, [r3, #0]
    2518:	f107 0208 	add.w	r2, r7, #8
    251c:	4610      	mov	r0, r2
    251e:	4934      	ldr	r1, [pc, #208]	; (25f0 <load_image+0x240>)
    2520:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    2524:	f001 fad0 	bl	3ac8 <sprintf>
				TraceNL( buffer );
    2528:	f107 0308 	add.w	r3, r7, #8
    252c:	4618      	mov	r0, r3
    252e:	f000 f89f 	bl	2670 <TraceNL>

				/*	Verify the flash contents with the contents in RAM */
				if (rc == IAP_STA_CMD_SUCCESS) {
    2532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    2536:	2b00      	cmp	r3, #0
    2538:	d10e      	bne.n	2558 <load_image+0x1a8>
					/*	Update and Print Received bytes counter */
					received_data += flashWriteIndex;
    253a:	4b25      	ldr	r3, [pc, #148]	; (25d0 <load_image+0x220>)
    253c:	681a      	ldr	r2, [r3, #0]
    253e:	4b26      	ldr	r3, [pc, #152]	; (25d8 <load_image+0x228>)
    2540:	681b      	ldr	r3, [r3, #0]
    2542:	4413      	add	r3, r2
    2544:	4a22      	ldr	r2, [pc, #136]	; (25d0 <load_image+0x220>)
    2546:	6013      	str	r3, [r2, #0]
					//snprintf((char *)string, MAX_STRING_SIZE, "Received %d of %d bytes", received_data, BMP->bmp_size);
					TraceNL( "verified " );
    2548:	482a      	ldr	r0, [pc, #168]	; (25f4 <load_image+0x244>)
    254a:	f000 f891 	bl	2670 <TraceNL>

					flashWriteIndex = 0;
    254e:	4b22      	ldr	r3, [pc, #136]	; (25d8 <load_image+0x228>)
    2550:	2200      	movs	r2, #0
    2552:	601a      	str	r2, [r3, #0]
					return (1);
    2554:	2301      	movs	r3, #1
    2556:	e036      	b.n	25c6 <load_image+0x216>
				} else {
					int count;
					TraceDumpHex( SECONDARY_IMAGE_LOAD_ADDR + received_data, flashWriteIndex);
    2558:	4b1d      	ldr	r3, [pc, #116]	; (25d0 <load_image+0x220>)
    255a:	681b      	ldr	r3, [r3, #0]
    255c:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
    2560:	4b1d      	ldr	r3, [pc, #116]	; (25d8 <load_image+0x228>)
    2562:	681b      	ldr	r3, [r3, #0]
    2564:	4610      	mov	r0, r2
    2566:	4619      	mov	r1, r3
    2568:	f000 f8c4 	bl	26f4 <TraceDumpHex>

					received_data += flashWriteIndex;
    256c:	4b18      	ldr	r3, [pc, #96]	; (25d0 <load_image+0x220>)
    256e:	681a      	ldr	r2, [r3, #0]
    2570:	4b19      	ldr	r3, [pc, #100]	; (25d8 <load_image+0x228>)
    2572:	681b      	ldr	r3, [r3, #0]
    2574:	4413      	add	r3, r2
    2576:	4a16      	ldr	r2, [pc, #88]	; (25d0 <load_image+0x220>)
    2578:	6013      	str	r3, [r2, #0]
					//snprintf((char *)string, MAX_STRING_SIZE, "Received %d of %d bytes", received_data, BMP->bmp_size);
					TraceNL( "verification failed " );
    257a:	481f      	ldr	r0, [pc, #124]	; (25f8 <load_image+0x248>)
    257c:	f000 f878 	bl	2670 <TraceNL>

					for ( count = 0; count < 100000000; count++)
    2580:	2300      	movs	r3, #0
    2582:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    2586:	e015      	b.n	25b4 <load_image+0x204>
						if( count % 10000000 == 0)
    2588:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
    258c:	4b1b      	ldr	r3, [pc, #108]	; (25fc <load_image+0x24c>)
    258e:	fb83 1302 	smull	r1, r3, r3, r2
    2592:	1599      	asrs	r1, r3, #22
    2594:	17d3      	asrs	r3, r2, #31
    2596:	1acb      	subs	r3, r1, r3
    2598:	4919      	ldr	r1, [pc, #100]	; (2600 <load_image+0x250>)
    259a:	fb01 f303 	mul.w	r3, r1, r3
    259e:	1ad3      	subs	r3, r2, r3
    25a0:	2b00      	cmp	r3, #0
    25a2:	d102      	bne.n	25aa <load_image+0x1fa>
							TracePutc( '.' );
    25a4:	202e      	movs	r0, #46	; 0x2e
    25a6:	f000 f87b 	bl	26a0 <TracePutc>

					received_data += flashWriteIndex;
					//snprintf((char *)string, MAX_STRING_SIZE, "Received %d of %d bytes", received_data, BMP->bmp_size);
					TraceNL( "verification failed " );

					for ( count = 0; count < 100000000; count++)
    25aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    25ae:	3301      	adds	r3, #1
    25b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    25b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    25b8:	4a12      	ldr	r2, [pc, #72]	; (2604 <load_image+0x254>)
    25ba:	4293      	cmp	r3, r2
    25bc:	dde4      	ble.n	2588 <load_image+0x1d8>
						if( count % 10000000 == 0)
							TracePutc( '.' );

					flashWriteIndex = 0;
    25be:	4b06      	ldr	r3, [pc, #24]	; (25d8 <load_image+0x228>)
    25c0:	2200      	movs	r2, #0
    25c2:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}

	return (0);
    25c4:	2300      	movs	r3, #0
}
    25c6:	4618      	mov	r0, r3
    25c8:	f507 7788 	add.w	r7, r7, #272	; 0x110
    25cc:	46bd      	mov	sp, r7
    25ce:	bd80      	pop	{r7, pc}
    25d0:	10000134 	.word	0x10000134
    25d4:	00007054 	.word	0x00007054
    25d8:	10000130 	.word	0x10000130
    25dc:	10000030 	.word	0x10000030
    25e0:	00007070 	.word	0x00007070
    25e4:	00007098 	.word	0x00007098
    25e8:	000070a4 	.word	0x000070a4
    25ec:	000070c0 	.word	0x000070c0
    25f0:	000070c8 	.word	0x000070c8
    25f4:	000070ec 	.word	0x000070ec
    25f8:	000070f8 	.word	0x000070f8
    25fc:	6b5fca6b 	.word	0x6b5fca6b
    2600:	00989680 	.word	0x00989680
    2604:	05f5e0ff 	.word	0x05f5e0ff

00002608 <SysTick_Handler>:
 *  Created on: 14 Kas 2012
 *      Author: trio
 */
#include <LPC17xx.h>
#include "timer.h"
void SysTick_Handler(void) {
    2608:	b480      	push	{r7}
    260a:	af00      	add	r7, sp, #0
	STT_Value++;
    260c:	4b04      	ldr	r3, [pc, #16]	; (2620 <SysTick_Handler+0x18>)
    260e:	681b      	ldr	r3, [r3, #0]
    2610:	3301      	adds	r3, #1
    2612:	4a03      	ldr	r2, [pc, #12]	; (2620 <SysTick_Handler+0x18>)
    2614:	6013      	str	r3, [r2, #0]
}
    2616:	46bd      	mov	sp, r7
    2618:	f85d 7b04 	ldr.w	r7, [sp], #4
    261c:	4770      	bx	lr
    261e:	bf00      	nop
    2620:	10000bac 	.word	0x10000bac

00002624 <DelayMs>:

void DelayMs(unsigned int t) // 65536 max.
{
    2624:	b480      	push	{r7}
    2626:	b085      	sub	sp, #20
    2628:	af00      	add	r7, sp, #0
    262a:	6078      	str	r0, [r7, #4]
	unsigned long temp;
	temp = STT_Value;
    262c:	4b07      	ldr	r3, [pc, #28]	; (264c <DelayMs+0x28>)
    262e:	681b      	ldr	r3, [r3, #0]
    2630:	60fb      	str	r3, [r7, #12]
	while ((STT_Value - temp) < t);
    2632:	bf00      	nop
    2634:	4b05      	ldr	r3, [pc, #20]	; (264c <DelayMs+0x28>)
    2636:	681a      	ldr	r2, [r3, #0]
    2638:	68fb      	ldr	r3, [r7, #12]
    263a:	1ad2      	subs	r2, r2, r3
    263c:	687b      	ldr	r3, [r7, #4]
    263e:	429a      	cmp	r2, r3
    2640:	d3f8      	bcc.n	2634 <DelayMs+0x10>
}
    2642:	3714      	adds	r7, #20
    2644:	46bd      	mov	sp, r7
    2646:	f85d 7b04 	ldr.w	r7, [sp], #4
    264a:	4770      	bx	lr
    264c:	10000bac 	.word	0x10000bac

00002650 <Trace>:
#include <string.h>
#include <trace.h>


void Trace( char* msg)
{
    2650:	b580      	push	{r7, lr}
    2652:	b082      	sub	sp, #8
    2654:	af00      	add	r7, sp, #0
    2656:	6078      	str	r0, [r7, #4]

	UARTSend(PORT_TRACE, (unsigned char*)msg, strlen(msg));
    2658:	6878      	ldr	r0, [r7, #4]
    265a:	f002 fe9d 	bl	5398 <strlen>
    265e:	4603      	mov	r3, r0
    2660:	2000      	movs	r0, #0
    2662:	6879      	ldr	r1, [r7, #4]
    2664:	461a      	mov	r2, r3
    2666:	f000 fc1d 	bl	2ea4 <UARTSend>

}
    266a:	3708      	adds	r7, #8
    266c:	46bd      	mov	sp, r7
    266e:	bd80      	pop	{r7, pc}

00002670 <TraceNL>:

void TraceNL( char* msg)
{
    2670:	b580      	push	{r7, lr}
    2672:	b082      	sub	sp, #8
    2674:	af00      	add	r7, sp, #0
    2676:	6078      	str	r0, [r7, #4]
	UARTSend(PORT_TRACE, (unsigned char*)msg, strlen(msg));
    2678:	6878      	ldr	r0, [r7, #4]
    267a:	f002 fe8d 	bl	5398 <strlen>
    267e:	4603      	mov	r3, r0
    2680:	2000      	movs	r0, #0
    2682:	6879      	ldr	r1, [r7, #4]
    2684:	461a      	mov	r2, r3
    2686:	f000 fc0d 	bl	2ea4 <UARTSend>
	UARTSend(PORT_TRACE, (unsigned char*)"\r\n", 2);
    268a:	2000      	movs	r0, #0
    268c:	4903      	ldr	r1, [pc, #12]	; (269c <TraceNL+0x2c>)
    268e:	2202      	movs	r2, #2
    2690:	f000 fc08 	bl	2ea4 <UARTSend>
}
    2694:	3708      	adds	r7, #8
    2696:	46bd      	mov	sp, r7
    2698:	bd80      	pop	{r7, pc}
    269a:	bf00      	nop
    269c:	00007110 	.word	0x00007110

000026a0 <TracePutc>:

void TracePutc( char c )
{
    26a0:	b580      	push	{r7, lr}
    26a2:	b082      	sub	sp, #8
    26a4:	af00      	add	r7, sp, #0
    26a6:	4603      	mov	r3, r0
    26a8:	71fb      	strb	r3, [r7, #7]
	UARTSend(PORT_TRACE, (unsigned char*)&c, 1L);
    26aa:	1dfb      	adds	r3, r7, #7
    26ac:	2000      	movs	r0, #0
    26ae:	4619      	mov	r1, r3
    26b0:	2201      	movs	r2, #1
    26b2:	f000 fbf7 	bl	2ea4 <UARTSend>
}
    26b6:	3708      	adds	r7, #8
    26b8:	46bd      	mov	sp, r7
    26ba:	bd80      	pop	{r7, pc}

000026bc <TracePutcHex>:

void TracePutcHex( char c )
{
    26bc:	b580      	push	{r7, lr}
    26be:	b086      	sub	sp, #24
    26c0:	af00      	add	r7, sp, #0
    26c2:	4603      	mov	r3, r0
    26c4:	71fb      	strb	r3, [r7, #7]
	unsigned char  buff[10];
    int count;
	count = sprintf( buff, "%02x", c);
    26c6:	79fb      	ldrb	r3, [r7, #7]
    26c8:	f107 0208 	add.w	r2, r7, #8
    26cc:	4610      	mov	r0, r2
    26ce:	4908      	ldr	r1, [pc, #32]	; (26f0 <TracePutcHex+0x34>)
    26d0:	461a      	mov	r2, r3
    26d2:	f001 f9f9 	bl	3ac8 <sprintf>
    26d6:	6178      	str	r0, [r7, #20]
	UARTSend( PORT_TRACE, buff, count );
    26d8:	697b      	ldr	r3, [r7, #20]
    26da:	f107 0208 	add.w	r2, r7, #8
    26de:	2000      	movs	r0, #0
    26e0:	4611      	mov	r1, r2
    26e2:	461a      	mov	r2, r3
    26e4:	f000 fbde 	bl	2ea4 <UARTSend>

}
    26e8:	3718      	adds	r7, #24
    26ea:	46bd      	mov	sp, r7
    26ec:	bd80      	pop	{r7, pc}
    26ee:	bf00      	nop
    26f0:	00007114 	.word	0x00007114

000026f4 <TraceDumpHex>:

void TraceDumpHex( char* pMsg, int len )
{
    26f4:	b480      	push	{r7}
    26f6:	b083      	sub	sp, #12
    26f8:	af00      	add	r7, sp, #0
    26fa:	6078      	str	r0, [r7, #4]
    26fc:	6039      	str	r1, [r7, #0]
        i++;
    }
	count = sprintf(buffer, "  %s\r\n", buff);
	UARTSend( PORT_TRACE, buffer, count);
#endif
}
    26fe:	370c      	adds	r7, #12
    2700:	46bd      	mov	sp, r7
    2702:	f85d 7b04 	ldr.w	r7, [sp], #4
    2706:	4770      	bx	lr

00002708 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    2708:	b480      	push	{r7}
    270a:	b083      	sub	sp, #12
    270c:	af00      	add	r7, sp, #0
    270e:	4603      	mov	r3, r0
    2710:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    2712:	4908      	ldr	r1, [pc, #32]	; (2734 <NVIC_EnableIRQ+0x2c>)
    2714:	f997 3007 	ldrsb.w	r3, [r7, #7]
    2718:	095b      	lsrs	r3, r3, #5
    271a:	79fa      	ldrb	r2, [r7, #7]
    271c:	f002 021f 	and.w	r2, r2, #31
    2720:	2001      	movs	r0, #1
    2722:	fa00 f202 	lsl.w	r2, r0, r2
    2726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    272a:	370c      	adds	r7, #12
    272c:	46bd      	mov	sp, r7
    272e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2732:	4770      	bx	lr
    2734:	e000e100 	.word	0xe000e100

00002738 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
    2738:	b480      	push	{r7}
    273a:	b083      	sub	sp, #12
    273c:	af00      	add	r7, sp, #0
    273e:	4603      	mov	r3, r0
    2740:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2742:	4909      	ldr	r1, [pc, #36]	; (2768 <NVIC_DisableIRQ+0x30>)
    2744:	f997 3007 	ldrsb.w	r3, [r7, #7]
    2748:	095b      	lsrs	r3, r3, #5
    274a:	79fa      	ldrb	r2, [r7, #7]
    274c:	f002 021f 	and.w	r2, r2, #31
    2750:	2001      	movs	r0, #1
    2752:	fa00 f202 	lsl.w	r2, r0, r2
    2756:	3320      	adds	r3, #32
    2758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    275c:	370c      	adds	r7, #12
    275e:	46bd      	mov	sp, r7
    2760:	f85d 7b04 	ldr.w	r7, [sp], #4
    2764:	4770      	bx	lr
    2766:	bf00      	nop
    2768:	e000e100 	.word	0xe000e100

0000276c <UART0_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART0_IRQHandler(void) {
    276c:	b480      	push	{r7}
    276e:	b083      	sub	sp, #12
    2770:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART0->IIR;
    2772:	4b3b      	ldr	r3, [pc, #236]	; (2860 <UART0_IRQHandler+0xf4>)
    2774:	689b      	ldr	r3, [r3, #8]
    2776:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    2778:	79bb      	ldrb	r3, [r7, #6]
    277a:	085b      	lsrs	r3, r3, #1
    277c:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    277e:	79bb      	ldrb	r3, [r7, #6]
    2780:	f003 0307 	and.w	r3, r3, #7
    2784:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    2786:	79bb      	ldrb	r3, [r7, #6]
    2788:	2b03      	cmp	r3, #3
    278a:	d12c      	bne.n	27e6 <UART0_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART0->LSR;
    278c:	4b34      	ldr	r3, [pc, #208]	; (2860 <UART0_IRQHandler+0xf4>)
    278e:	7d1b      	ldrb	r3, [r3, #20]
    2790:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2792:	797b      	ldrb	r3, [r7, #5]
    2794:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2798:	2b00      	cmp	r3, #0
    279a:	d006      	beq.n	27aa <UART0_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART0Status = LSRValue;
    279c:	797b      	ldrb	r3, [r7, #5]
    279e:	4a31      	ldr	r2, [pc, #196]	; (2864 <UART0_IRQHandler+0xf8>)
    27a0:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART0->RBR; /* Dummy read on RX to clear
    27a2:	4b2f      	ldr	r3, [pc, #188]	; (2860 <UART0_IRQHandler+0xf4>)
    27a4:	781b      	ldrb	r3, [r3, #0]
    27a6:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    27a8:	e055      	b.n	2856 <UART0_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    27aa:	797b      	ldrb	r3, [r7, #5]
    27ac:	f003 0301 	and.w	r3, r3, #1
    27b0:	2b00      	cmp	r3, #0
    27b2:	d050      	beq.n	2856 <UART0_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART0Buffer[UART0Count] = LPC_UART0->RBR;
    27b4:	4b2c      	ldr	r3, [pc, #176]	; (2868 <UART0_IRQHandler+0xfc>)
    27b6:	881b      	ldrh	r3, [r3, #0]
    27b8:	b29b      	uxth	r3, r3
    27ba:	461a      	mov	r2, r3
    27bc:	4b28      	ldr	r3, [pc, #160]	; (2860 <UART0_IRQHandler+0xf4>)
    27be:	781b      	ldrb	r3, [r3, #0]
    27c0:	b2d9      	uxtb	r1, r3
    27c2:	4b2a      	ldr	r3, [pc, #168]	; (286c <UART0_IRQHandler+0x100>)
    27c4:	5499      	strb	r1, [r3, r2]
			UART0Count++;
    27c6:	4b28      	ldr	r3, [pc, #160]	; (2868 <UART0_IRQHandler+0xfc>)
    27c8:	881b      	ldrh	r3, [r3, #0]
    27ca:	b29b      	uxth	r3, r3
    27cc:	3301      	adds	r3, #1
    27ce:	b29a      	uxth	r2, r3
    27d0:	4b25      	ldr	r3, [pc, #148]	; (2868 <UART0_IRQHandler+0xfc>)
    27d2:	801a      	strh	r2, [r3, #0]
			if (UART0Count == BUFSIZE) {
    27d4:	4b24      	ldr	r3, [pc, #144]	; (2868 <UART0_IRQHandler+0xfc>)
    27d6:	881b      	ldrh	r3, [r3, #0]
    27d8:	b29b      	uxth	r3, r3
    27da:	2bff      	cmp	r3, #255	; 0xff
    27dc:	d13b      	bne.n	2856 <UART0_IRQHandler+0xea>
				UART0Count = 0; /* buffer overflow */
    27de:	4b22      	ldr	r3, [pc, #136]	; (2868 <UART0_IRQHandler+0xfc>)
    27e0:	2200      	movs	r2, #0
    27e2:	801a      	strh	r2, [r3, #0]
    27e4:	e037      	b.n	2856 <UART0_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    27e6:	79bb      	ldrb	r3, [r7, #6]
    27e8:	2b02      	cmp	r3, #2
    27ea:	d118      	bne.n	281e <UART0_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART0Buffer[UART0Count] = LPC_UART0->RBR;
    27ec:	4b1e      	ldr	r3, [pc, #120]	; (2868 <UART0_IRQHandler+0xfc>)
    27ee:	881b      	ldrh	r3, [r3, #0]
    27f0:	b29b      	uxth	r3, r3
    27f2:	461a      	mov	r2, r3
    27f4:	4b1a      	ldr	r3, [pc, #104]	; (2860 <UART0_IRQHandler+0xf4>)
    27f6:	781b      	ldrb	r3, [r3, #0]
    27f8:	b2d9      	uxtb	r1, r3
    27fa:	4b1c      	ldr	r3, [pc, #112]	; (286c <UART0_IRQHandler+0x100>)
    27fc:	5499      	strb	r1, [r3, r2]
		UART0Count++;
    27fe:	4b1a      	ldr	r3, [pc, #104]	; (2868 <UART0_IRQHandler+0xfc>)
    2800:	881b      	ldrh	r3, [r3, #0]
    2802:	b29b      	uxth	r3, r3
    2804:	3301      	adds	r3, #1
    2806:	b29a      	uxth	r2, r3
    2808:	4b17      	ldr	r3, [pc, #92]	; (2868 <UART0_IRQHandler+0xfc>)
    280a:	801a      	strh	r2, [r3, #0]
		if (UART0Count == BUFSIZE) {
    280c:	4b16      	ldr	r3, [pc, #88]	; (2868 <UART0_IRQHandler+0xfc>)
    280e:	881b      	ldrh	r3, [r3, #0]
    2810:	b29b      	uxth	r3, r3
    2812:	2bff      	cmp	r3, #255	; 0xff
    2814:	d11f      	bne.n	2856 <UART0_IRQHandler+0xea>
			UART0Count = 0; /* buffer overflow */
    2816:	4b14      	ldr	r3, [pc, #80]	; (2868 <UART0_IRQHandler+0xfc>)
    2818:	2200      	movs	r2, #0
    281a:	801a      	strh	r2, [r3, #0]
    281c:	e01b      	b.n	2856 <UART0_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    281e:	79bb      	ldrb	r3, [r7, #6]
    2820:	2b06      	cmp	r3, #6
    2822:	d106      	bne.n	2832 <UART0_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART0Status |= 0x100; /* Bit 9 as the CTI error */
    2824:	4b0f      	ldr	r3, [pc, #60]	; (2864 <UART0_IRQHandler+0xf8>)
    2826:	681b      	ldr	r3, [r3, #0]
    2828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    282c:	4a0d      	ldr	r2, [pc, #52]	; (2864 <UART0_IRQHandler+0xf8>)
    282e:	6013      	str	r3, [r2, #0]
    2830:	e011      	b.n	2856 <UART0_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2832:	79bb      	ldrb	r3, [r7, #6]
    2834:	2b01      	cmp	r3, #1
    2836:	d10e      	bne.n	2856 <UART0_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART0->LSR; /* Check status in the LSR to see if
    2838:	4b09      	ldr	r3, [pc, #36]	; (2860 <UART0_IRQHandler+0xf4>)
    283a:	7d1b      	ldrb	r3, [r3, #20]
    283c:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    283e:	797b      	ldrb	r3, [r7, #5]
    2840:	f003 0320 	and.w	r3, r3, #32
    2844:	2b00      	cmp	r3, #0
    2846:	d003      	beq.n	2850 <UART0_IRQHandler+0xe4>
			UART0TxEmpty = 1;
    2848:	4b09      	ldr	r3, [pc, #36]	; (2870 <UART0_IRQHandler+0x104>)
    284a:	2201      	movs	r2, #1
    284c:	701a      	strb	r2, [r3, #0]
    284e:	e002      	b.n	2856 <UART0_IRQHandler+0xea>
		} else {
			UART0TxEmpty = 0;
    2850:	4b07      	ldr	r3, [pc, #28]	; (2870 <UART0_IRQHandler+0x104>)
    2852:	2200      	movs	r2, #0
    2854:	701a      	strb	r2, [r3, #0]
		}
	}
}
    2856:	370c      	adds	r7, #12
    2858:	46bd      	mov	sp, r7
    285a:	f85d 7b04 	ldr.w	r7, [sp], #4
    285e:	4770      	bx	lr
    2860:	4000c000 	.word	0x4000c000
    2864:	10001a04 	.word	0x10001a04
    2868:	10000138 	.word	0x10000138
    286c:	10001004 	.word	0x10001004
    2870:	10000014 	.word	0x10000014

00002874 <UART1_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART1_IRQHandler(void) {
    2874:	b480      	push	{r7}
    2876:	b083      	sub	sp, #12
    2878:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART1->IIR;
    287a:	4b3b      	ldr	r3, [pc, #236]	; (2968 <UART1_IRQHandler+0xf4>)
    287c:	689b      	ldr	r3, [r3, #8]
    287e:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    2880:	79bb      	ldrb	r3, [r7, #6]
    2882:	085b      	lsrs	r3, r3, #1
    2884:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    2886:	79bb      	ldrb	r3, [r7, #6]
    2888:	f003 0307 	and.w	r3, r3, #7
    288c:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    288e:	79bb      	ldrb	r3, [r7, #6]
    2890:	2b03      	cmp	r3, #3
    2892:	d12c      	bne.n	28ee <UART1_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART1->LSR;
    2894:	4b34      	ldr	r3, [pc, #208]	; (2968 <UART1_IRQHandler+0xf4>)
    2896:	7d1b      	ldrb	r3, [r3, #20]
    2898:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    289a:	797b      	ldrb	r3, [r7, #5]
    289c:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    28a0:	2b00      	cmp	r3, #0
    28a2:	d006      	beq.n	28b2 <UART1_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART1Status = LSRValue;
    28a4:	797b      	ldrb	r3, [r7, #5]
    28a6:	4a31      	ldr	r2, [pc, #196]	; (296c <UART1_IRQHandler+0xf8>)
    28a8:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART1->RBR; /* Dummy read on RX to clear
    28aa:	4b2f      	ldr	r3, [pc, #188]	; (2968 <UART1_IRQHandler+0xf4>)
    28ac:	781b      	ldrb	r3, [r3, #0]
    28ae:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    28b0:	e055      	b.n	295e <UART1_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    28b2:	797b      	ldrb	r3, [r7, #5]
    28b4:	f003 0301 	and.w	r3, r3, #1
    28b8:	2b00      	cmp	r3, #0
    28ba:	d050      	beq.n	295e <UART1_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART1Buffer[UART1Count] = LPC_UART1->RBR;
    28bc:	4b2c      	ldr	r3, [pc, #176]	; (2970 <UART1_IRQHandler+0xfc>)
    28be:	881b      	ldrh	r3, [r3, #0]
    28c0:	b29b      	uxth	r3, r3
    28c2:	461a      	mov	r2, r3
    28c4:	4b28      	ldr	r3, [pc, #160]	; (2968 <UART1_IRQHandler+0xf4>)
    28c6:	781b      	ldrb	r3, [r3, #0]
    28c8:	b2d9      	uxtb	r1, r3
    28ca:	4b2a      	ldr	r3, [pc, #168]	; (2974 <UART1_IRQHandler+0x100>)
    28cc:	5499      	strb	r1, [r3, r2]
			UART1Count++;
    28ce:	4b28      	ldr	r3, [pc, #160]	; (2970 <UART1_IRQHandler+0xfc>)
    28d0:	881b      	ldrh	r3, [r3, #0]
    28d2:	b29b      	uxth	r3, r3
    28d4:	3301      	adds	r3, #1
    28d6:	b29a      	uxth	r2, r3
    28d8:	4b25      	ldr	r3, [pc, #148]	; (2970 <UART1_IRQHandler+0xfc>)
    28da:	801a      	strh	r2, [r3, #0]
			if (UART1Count == BUFSIZE) {
    28dc:	4b24      	ldr	r3, [pc, #144]	; (2970 <UART1_IRQHandler+0xfc>)
    28de:	881b      	ldrh	r3, [r3, #0]
    28e0:	b29b      	uxth	r3, r3
    28e2:	2bff      	cmp	r3, #255	; 0xff
    28e4:	d13b      	bne.n	295e <UART1_IRQHandler+0xea>
				UART1Count = 0; /* buffer overflow */
    28e6:	4b22      	ldr	r3, [pc, #136]	; (2970 <UART1_IRQHandler+0xfc>)
    28e8:	2200      	movs	r2, #0
    28ea:	801a      	strh	r2, [r3, #0]
    28ec:	e037      	b.n	295e <UART1_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    28ee:	79bb      	ldrb	r3, [r7, #6]
    28f0:	2b02      	cmp	r3, #2
    28f2:	d118      	bne.n	2926 <UART1_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART1Buffer[UART1Count] = LPC_UART1->RBR;
    28f4:	4b1e      	ldr	r3, [pc, #120]	; (2970 <UART1_IRQHandler+0xfc>)
    28f6:	881b      	ldrh	r3, [r3, #0]
    28f8:	b29b      	uxth	r3, r3
    28fa:	461a      	mov	r2, r3
    28fc:	4b1a      	ldr	r3, [pc, #104]	; (2968 <UART1_IRQHandler+0xf4>)
    28fe:	781b      	ldrb	r3, [r3, #0]
    2900:	b2d9      	uxtb	r1, r3
    2902:	4b1c      	ldr	r3, [pc, #112]	; (2974 <UART1_IRQHandler+0x100>)
    2904:	5499      	strb	r1, [r3, r2]
		UART1Count++;
    2906:	4b1a      	ldr	r3, [pc, #104]	; (2970 <UART1_IRQHandler+0xfc>)
    2908:	881b      	ldrh	r3, [r3, #0]
    290a:	b29b      	uxth	r3, r3
    290c:	3301      	adds	r3, #1
    290e:	b29a      	uxth	r2, r3
    2910:	4b17      	ldr	r3, [pc, #92]	; (2970 <UART1_IRQHandler+0xfc>)
    2912:	801a      	strh	r2, [r3, #0]
		if (UART1Count == BUFSIZE) {
    2914:	4b16      	ldr	r3, [pc, #88]	; (2970 <UART1_IRQHandler+0xfc>)
    2916:	881b      	ldrh	r3, [r3, #0]
    2918:	b29b      	uxth	r3, r3
    291a:	2bff      	cmp	r3, #255	; 0xff
    291c:	d11f      	bne.n	295e <UART1_IRQHandler+0xea>
			UART1Count = 0; /* buffer overflow */
    291e:	4b14      	ldr	r3, [pc, #80]	; (2970 <UART1_IRQHandler+0xfc>)
    2920:	2200      	movs	r2, #0
    2922:	801a      	strh	r2, [r3, #0]
    2924:	e01b      	b.n	295e <UART1_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2926:	79bb      	ldrb	r3, [r7, #6]
    2928:	2b06      	cmp	r3, #6
    292a:	d106      	bne.n	293a <UART1_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART1Status |= 0x100; /* Bit 9 as the CTI error */
    292c:	4b0f      	ldr	r3, [pc, #60]	; (296c <UART1_IRQHandler+0xf8>)
    292e:	681b      	ldr	r3, [r3, #0]
    2930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2934:	4a0d      	ldr	r2, [pc, #52]	; (296c <UART1_IRQHandler+0xf8>)
    2936:	6013      	str	r3, [r2, #0]
    2938:	e011      	b.n	295e <UART1_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    293a:	79bb      	ldrb	r3, [r7, #6]
    293c:	2b01      	cmp	r3, #1
    293e:	d10e      	bne.n	295e <UART1_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART1->LSR; /* Check status in the LSR to see if
    2940:	4b09      	ldr	r3, [pc, #36]	; (2968 <UART1_IRQHandler+0xf4>)
    2942:	7d1b      	ldrb	r3, [r3, #20]
    2944:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    2946:	797b      	ldrb	r3, [r7, #5]
    2948:	f003 0320 	and.w	r3, r3, #32
    294c:	2b00      	cmp	r3, #0
    294e:	d003      	beq.n	2958 <UART1_IRQHandler+0xe4>
			UART1TxEmpty = 1;
    2950:	4b09      	ldr	r3, [pc, #36]	; (2978 <UART1_IRQHandler+0x104>)
    2952:	2201      	movs	r2, #1
    2954:	701a      	strb	r2, [r3, #0]
    2956:	e002      	b.n	295e <UART1_IRQHandler+0xea>
		} else {
			UART1TxEmpty = 0;
    2958:	4b07      	ldr	r3, [pc, #28]	; (2978 <UART1_IRQHandler+0x104>)
    295a:	2200      	movs	r2, #0
    295c:	701a      	strb	r2, [r3, #0]
		}
	}

}
    295e:	370c      	adds	r7, #12
    2960:	46bd      	mov	sp, r7
    2962:	f85d 7b04 	ldr.w	r7, [sp], #4
    2966:	4770      	bx	lr
    2968:	40010000 	.word	0x40010000
    296c:	10001104 	.word	0x10001104
    2970:	1000013a 	.word	0x1000013a
    2974:	10000ef8 	.word	0x10000ef8
    2978:	10000015 	.word	0x10000015

0000297c <UART2_IRQHandler>:

void UART2_IRQHandler(void) {
    297c:	b480      	push	{r7}
    297e:	b083      	sub	sp, #12
    2980:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;
	IIRValue = LPC_UART2->IIR;
    2982:	4b3c      	ldr	r3, [pc, #240]	; (2a74 <UART2_IRQHandler+0xf8>)
    2984:	689b      	ldr	r3, [r3, #8]
    2986:	71bb      	strb	r3, [r7, #6]
	IIRValue >>= 1; /* skip pending bit in IIR */
    2988:	79bb      	ldrb	r3, [r7, #6]
    298a:	085b      	lsrs	r3, r3, #1
    298c:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    298e:	79bb      	ldrb	r3, [r7, #6]
    2990:	f003 0307 	and.w	r3, r3, #7
    2994:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    2996:	79bb      	ldrb	r3, [r7, #6]
    2998:	2b03      	cmp	r3, #3
    299a:	d12d      	bne.n	29f8 <UART2_IRQHandler+0x7c>
	{
		LSRValue = LPC_UART2->LSR;
    299c:	4b35      	ldr	r3, [pc, #212]	; (2a74 <UART2_IRQHandler+0xf8>)
    299e:	7d1b      	ldrb	r3, [r3, #20]
    29a0:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    29a2:	797b      	ldrb	r3, [r7, #5]
    29a4:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    29a8:	2b00      	cmp	r3, #0
    29aa:	d006      	beq.n	29ba <UART2_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART2Status = LSRValue;
    29ac:	797b      	ldrb	r3, [r7, #5]
    29ae:	4a32      	ldr	r2, [pc, #200]	; (2a78 <UART2_IRQHandler+0xfc>)
    29b0:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART2->RBR; /* Dummy read on RX to clear
    29b2:	4b30      	ldr	r3, [pc, #192]	; (2a74 <UART2_IRQHandler+0xf8>)
    29b4:	781b      	ldrb	r3, [r3, #0]
    29b6:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    29b8:	e057      	b.n	2a6a <UART2_IRQHandler+0xee>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    29ba:	797b      	ldrb	r3, [r7, #5]
    29bc:	f003 0301 	and.w	r3, r3, #1
    29c0:	2b00      	cmp	r3, #0
    29c2:	d052      	beq.n	2a6a <UART2_IRQHandler+0xee>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART2Buffer[UART2Count] = LPC_UART2->RBR;
    29c4:	4b2d      	ldr	r3, [pc, #180]	; (2a7c <UART2_IRQHandler+0x100>)
    29c6:	881b      	ldrh	r3, [r3, #0]
    29c8:	b29b      	uxth	r3, r3
    29ca:	461a      	mov	r2, r3
    29cc:	4b29      	ldr	r3, [pc, #164]	; (2a74 <UART2_IRQHandler+0xf8>)
    29ce:	781b      	ldrb	r3, [r3, #0]
    29d0:	b2d9      	uxtb	r1, r3
    29d2:	4b2b      	ldr	r3, [pc, #172]	; (2a80 <UART2_IRQHandler+0x104>)
    29d4:	5499      	strb	r1, [r3, r2]
			UART2Count++;
    29d6:	4b29      	ldr	r3, [pc, #164]	; (2a7c <UART2_IRQHandler+0x100>)
    29d8:	881b      	ldrh	r3, [r3, #0]
    29da:	b29b      	uxth	r3, r3
    29dc:	3301      	adds	r3, #1
    29de:	b29a      	uxth	r2, r3
    29e0:	4b26      	ldr	r3, [pc, #152]	; (2a7c <UART2_IRQHandler+0x100>)
    29e2:	801a      	strh	r2, [r3, #0]
			if (UART2Count >= UART2_BUFFSIZE) {
    29e4:	4b25      	ldr	r3, [pc, #148]	; (2a7c <UART2_IRQHandler+0x100>)
    29e6:	881b      	ldrh	r3, [r3, #0]
    29e8:	b29b      	uxth	r3, r3
    29ea:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    29ee:	d33c      	bcc.n	2a6a <UART2_IRQHandler+0xee>
				UART2Count = 0; /* buffer overflow */
    29f0:	4b22      	ldr	r3, [pc, #136]	; (2a7c <UART2_IRQHandler+0x100>)
    29f2:	2200      	movs	r2, #0
    29f4:	801a      	strh	r2, [r3, #0]
    29f6:	e038      	b.n	2a6a <UART2_IRQHandler+0xee>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    29f8:	79bb      	ldrb	r3, [r7, #6]
    29fa:	2b02      	cmp	r3, #2
    29fc:	d119      	bne.n	2a32 <UART2_IRQHandler+0xb6>
	{
		/* Receive Data Available */
		UART2Buffer[UART2Count] = LPC_UART2->RBR;
    29fe:	4b1f      	ldr	r3, [pc, #124]	; (2a7c <UART2_IRQHandler+0x100>)
    2a00:	881b      	ldrh	r3, [r3, #0]
    2a02:	b29b      	uxth	r3, r3
    2a04:	461a      	mov	r2, r3
    2a06:	4b1b      	ldr	r3, [pc, #108]	; (2a74 <UART2_IRQHandler+0xf8>)
    2a08:	781b      	ldrb	r3, [r3, #0]
    2a0a:	b2d9      	uxtb	r1, r3
    2a0c:	4b1c      	ldr	r3, [pc, #112]	; (2a80 <UART2_IRQHandler+0x104>)
    2a0e:	5499      	strb	r1, [r3, r2]
		UART2Count++;
    2a10:	4b1a      	ldr	r3, [pc, #104]	; (2a7c <UART2_IRQHandler+0x100>)
    2a12:	881b      	ldrh	r3, [r3, #0]
    2a14:	b29b      	uxth	r3, r3
    2a16:	3301      	adds	r3, #1
    2a18:	b29a      	uxth	r2, r3
    2a1a:	4b18      	ldr	r3, [pc, #96]	; (2a7c <UART2_IRQHandler+0x100>)
    2a1c:	801a      	strh	r2, [r3, #0]
		if (UART2Count >= UART2_BUFFSIZE) {
    2a1e:	4b17      	ldr	r3, [pc, #92]	; (2a7c <UART2_IRQHandler+0x100>)
    2a20:	881b      	ldrh	r3, [r3, #0]
    2a22:	b29b      	uxth	r3, r3
    2a24:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    2a28:	d31f      	bcc.n	2a6a <UART2_IRQHandler+0xee>
			UART2Count = 0; /* buffer overflow */
    2a2a:	4b14      	ldr	r3, [pc, #80]	; (2a7c <UART2_IRQHandler+0x100>)
    2a2c:	2200      	movs	r2, #0
    2a2e:	801a      	strh	r2, [r3, #0]
    2a30:	e01b      	b.n	2a6a <UART2_IRQHandler+0xee>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2a32:	79bb      	ldrb	r3, [r7, #6]
    2a34:	2b06      	cmp	r3, #6
    2a36:	d106      	bne.n	2a46 <UART2_IRQHandler+0xca>
	{
		/* Character Time-out indicator */
		UART2Status |= 0x100; /* Bit 9 as the CTI error */
    2a38:	4b0f      	ldr	r3, [pc, #60]	; (2a78 <UART2_IRQHandler+0xfc>)
    2a3a:	681b      	ldr	r3, [r3, #0]
    2a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2a40:	4a0d      	ldr	r2, [pc, #52]	; (2a78 <UART2_IRQHandler+0xfc>)
    2a42:	6013      	str	r3, [r2, #0]
    2a44:	e011      	b.n	2a6a <UART2_IRQHandler+0xee>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2a46:	79bb      	ldrb	r3, [r7, #6]
    2a48:	2b01      	cmp	r3, #1
    2a4a:	d10e      	bne.n	2a6a <UART2_IRQHandler+0xee>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART2->LSR; /* Check status in the LSR to see if
    2a4c:	4b09      	ldr	r3, [pc, #36]	; (2a74 <UART2_IRQHandler+0xf8>)
    2a4e:	7d1b      	ldrb	r3, [r3, #20]
    2a50:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    2a52:	797b      	ldrb	r3, [r7, #5]
    2a54:	f003 0320 	and.w	r3, r3, #32
    2a58:	2b00      	cmp	r3, #0
    2a5a:	d003      	beq.n	2a64 <UART2_IRQHandler+0xe8>
			UART2TxEmpty = 1;
    2a5c:	4b09      	ldr	r3, [pc, #36]	; (2a84 <UART2_IRQHandler+0x108>)
    2a5e:	2201      	movs	r2, #1
    2a60:	701a      	strb	r2, [r3, #0]
    2a62:	e002      	b.n	2a6a <UART2_IRQHandler+0xee>
		} else {
			UART2TxEmpty = 0;
    2a64:	4b07      	ldr	r3, [pc, #28]	; (2a84 <UART2_IRQHandler+0x108>)
    2a66:	2200      	movs	r2, #0
    2a68:	701a      	strb	r2, [r3, #0]
		}
	}
}
    2a6a:	370c      	adds	r7, #12
    2a6c:	46bd      	mov	sp, r7
    2a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a72:	4770      	bx	lr
    2a74:	40098000 	.word	0x40098000
    2a78:	10000ff8 	.word	0x10000ff8
    2a7c:	1000013c 	.word	0x1000013c
    2a80:	1000120c 	.word	0x1000120c
    2a84:	10000017 	.word	0x10000017

00002a88 <UART3_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART3_IRQHandler(void) {
    2a88:	b480      	push	{r7}
    2a8a:	b083      	sub	sp, #12
    2a8c:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART3->IIR;
    2a8e:	4b3b      	ldr	r3, [pc, #236]	; (2b7c <UART3_IRQHandler+0xf4>)
    2a90:	689b      	ldr	r3, [r3, #8]
    2a92:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    2a94:	79bb      	ldrb	r3, [r7, #6]
    2a96:	085b      	lsrs	r3, r3, #1
    2a98:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    2a9a:	79bb      	ldrb	r3, [r7, #6]
    2a9c:	f003 0307 	and.w	r3, r3, #7
    2aa0:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    2aa2:	79bb      	ldrb	r3, [r7, #6]
    2aa4:	2b03      	cmp	r3, #3
    2aa6:	d12c      	bne.n	2b02 <UART3_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART3->LSR;
    2aa8:	4b34      	ldr	r3, [pc, #208]	; (2b7c <UART3_IRQHandler+0xf4>)
    2aaa:	7d1b      	ldrb	r3, [r3, #20]
    2aac:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2aae:	797b      	ldrb	r3, [r7, #5]
    2ab0:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2ab4:	2b00      	cmp	r3, #0
    2ab6:	d006      	beq.n	2ac6 <UART3_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART3Status = LSRValue;
    2ab8:	797b      	ldrb	r3, [r7, #5]
    2aba:	4a31      	ldr	r2, [pc, #196]	; (2b80 <UART3_IRQHandler+0xf8>)
    2abc:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART3->RBR; /* Dummy read on RX to clear
    2abe:	4b2f      	ldr	r3, [pc, #188]	; (2b7c <UART3_IRQHandler+0xf4>)
    2ac0:	781b      	ldrb	r3, [r3, #0]
    2ac2:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2ac4:	e055      	b.n	2b72 <UART3_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    2ac6:	797b      	ldrb	r3, [r7, #5]
    2ac8:	f003 0301 	and.w	r3, r3, #1
    2acc:	2b00      	cmp	r3, #0
    2ace:	d050      	beq.n	2b72 <UART3_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART3Buffer[UART3Count] = LPC_UART3->RBR;
    2ad0:	4b2c      	ldr	r3, [pc, #176]	; (2b84 <UART3_IRQHandler+0xfc>)
    2ad2:	881b      	ldrh	r3, [r3, #0]
    2ad4:	b29b      	uxth	r3, r3
    2ad6:	461a      	mov	r2, r3
    2ad8:	4b28      	ldr	r3, [pc, #160]	; (2b7c <UART3_IRQHandler+0xf4>)
    2ada:	781b      	ldrb	r3, [r3, #0]
    2adc:	b2d9      	uxtb	r1, r3
    2ade:	4b2a      	ldr	r3, [pc, #168]	; (2b88 <UART3_IRQHandler+0x100>)
    2ae0:	5499      	strb	r1, [r3, r2]
			UART3Count++;
    2ae2:	4b28      	ldr	r3, [pc, #160]	; (2b84 <UART3_IRQHandler+0xfc>)
    2ae4:	881b      	ldrh	r3, [r3, #0]
    2ae6:	b29b      	uxth	r3, r3
    2ae8:	3301      	adds	r3, #1
    2aea:	b29a      	uxth	r2, r3
    2aec:	4b25      	ldr	r3, [pc, #148]	; (2b84 <UART3_IRQHandler+0xfc>)
    2aee:	801a      	strh	r2, [r3, #0]
			if (UART3Count == BUFSIZE) {
    2af0:	4b24      	ldr	r3, [pc, #144]	; (2b84 <UART3_IRQHandler+0xfc>)
    2af2:	881b      	ldrh	r3, [r3, #0]
    2af4:	b29b      	uxth	r3, r3
    2af6:	2bff      	cmp	r3, #255	; 0xff
    2af8:	d13b      	bne.n	2b72 <UART3_IRQHandler+0xea>
				UART3Count = 0; /* buffer overflow */
    2afa:	4b22      	ldr	r3, [pc, #136]	; (2b84 <UART3_IRQHandler+0xfc>)
    2afc:	2200      	movs	r2, #0
    2afe:	801a      	strh	r2, [r3, #0]
    2b00:	e037      	b.n	2b72 <UART3_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2b02:	79bb      	ldrb	r3, [r7, #6]
    2b04:	2b02      	cmp	r3, #2
    2b06:	d118      	bne.n	2b3a <UART3_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART3Buffer[UART3Count] = LPC_UART3->RBR;
    2b08:	4b1e      	ldr	r3, [pc, #120]	; (2b84 <UART3_IRQHandler+0xfc>)
    2b0a:	881b      	ldrh	r3, [r3, #0]
    2b0c:	b29b      	uxth	r3, r3
    2b0e:	461a      	mov	r2, r3
    2b10:	4b1a      	ldr	r3, [pc, #104]	; (2b7c <UART3_IRQHandler+0xf4>)
    2b12:	781b      	ldrb	r3, [r3, #0]
    2b14:	b2d9      	uxtb	r1, r3
    2b16:	4b1c      	ldr	r3, [pc, #112]	; (2b88 <UART3_IRQHandler+0x100>)
    2b18:	5499      	strb	r1, [r3, r2]
		UART3Count++;
    2b1a:	4b1a      	ldr	r3, [pc, #104]	; (2b84 <UART3_IRQHandler+0xfc>)
    2b1c:	881b      	ldrh	r3, [r3, #0]
    2b1e:	b29b      	uxth	r3, r3
    2b20:	3301      	adds	r3, #1
    2b22:	b29a      	uxth	r2, r3
    2b24:	4b17      	ldr	r3, [pc, #92]	; (2b84 <UART3_IRQHandler+0xfc>)
    2b26:	801a      	strh	r2, [r3, #0]
		if (UART3Count == BUFSIZE) {
    2b28:	4b16      	ldr	r3, [pc, #88]	; (2b84 <UART3_IRQHandler+0xfc>)
    2b2a:	881b      	ldrh	r3, [r3, #0]
    2b2c:	b29b      	uxth	r3, r3
    2b2e:	2bff      	cmp	r3, #255	; 0xff
    2b30:	d11f      	bne.n	2b72 <UART3_IRQHandler+0xea>
			UART3Count = 0; /* buffer overflow */
    2b32:	4b14      	ldr	r3, [pc, #80]	; (2b84 <UART3_IRQHandler+0xfc>)
    2b34:	2200      	movs	r2, #0
    2b36:	801a      	strh	r2, [r3, #0]
    2b38:	e01b      	b.n	2b72 <UART3_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2b3a:	79bb      	ldrb	r3, [r7, #6]
    2b3c:	2b06      	cmp	r3, #6
    2b3e:	d106      	bne.n	2b4e <UART3_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART3Status |= 0x100; /* Bit 9 as the CTI error */
    2b40:	4b0f      	ldr	r3, [pc, #60]	; (2b80 <UART3_IRQHandler+0xf8>)
    2b42:	681b      	ldr	r3, [r3, #0]
    2b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2b48:	4a0d      	ldr	r2, [pc, #52]	; (2b80 <UART3_IRQHandler+0xf8>)
    2b4a:	6013      	str	r3, [r2, #0]
    2b4c:	e011      	b.n	2b72 <UART3_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2b4e:	79bb      	ldrb	r3, [r7, #6]
    2b50:	2b01      	cmp	r3, #1
    2b52:	d10e      	bne.n	2b72 <UART3_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART3->LSR; /* Check status in the LSR to see if
    2b54:	4b09      	ldr	r3, [pc, #36]	; (2b7c <UART3_IRQHandler+0xf4>)
    2b56:	7d1b      	ldrb	r3, [r3, #20]
    2b58:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    2b5a:	797b      	ldrb	r3, [r7, #5]
    2b5c:	f003 0320 	and.w	r3, r3, #32
    2b60:	2b00      	cmp	r3, #0
    2b62:	d003      	beq.n	2b6c <UART3_IRQHandler+0xe4>
			UART3TxEmpty = 1;
    2b64:	4b09      	ldr	r3, [pc, #36]	; (2b8c <UART3_IRQHandler+0x104>)
    2b66:	2201      	movs	r2, #1
    2b68:	701a      	strb	r2, [r3, #0]
    2b6a:	e002      	b.n	2b72 <UART3_IRQHandler+0xea>
		} else {
			UART3TxEmpty = 0;
    2b6c:	4b07      	ldr	r3, [pc, #28]	; (2b8c <UART3_IRQHandler+0x104>)
    2b6e:	2200      	movs	r2, #0
    2b70:	701a      	strb	r2, [r3, #0]
		}
	}
}
    2b72:	370c      	adds	r7, #12
    2b74:	46bd      	mov	sp, r7
    2b76:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b7a:	4770      	bx	lr
    2b7c:	4009c000 	.word	0x4009c000
    2b80:	10001000 	.word	0x10001000
    2b84:	1000013e 	.word	0x1000013e
    2b88:	1000110c 	.word	0x1000110c
    2b8c:	10000016 	.word	0x10000016

00002b90 <UARTInit>:
 ** Returned value:		true or false, return false only if the
 **						interrupt handler can't be installed to the
 **						VIC table
 **
 *****************************************************************************/
uint32_t UARTInit(uint32_t PortNum, uint32_t baudrate) {
    2b90:	b580      	push	{r7, lr}
    2b92:	b086      	sub	sp, #24
    2b94:	af00      	add	r7, sp, #0
    2b96:	6078      	str	r0, [r7, #4]
    2b98:	6039      	str	r1, [r7, #0]
	uint32_t Fdiv;
	uint32_t pclkdiv, pclk;
	if (PortNum == 0) {
    2b9a:	687b      	ldr	r3, [r7, #4]
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	d15b      	bne.n	2c58 <UARTInit+0xc8>
		LPC_PINCON->PINSEL0 &= ~0x000000F0;
    2ba0:	4aa3      	ldr	r2, [pc, #652]	; (2e30 <UARTInit+0x2a0>)
    2ba2:	4ba3      	ldr	r3, [pc, #652]	; (2e30 <UARTInit+0x2a0>)
    2ba4:	681b      	ldr	r3, [r3, #0]
    2ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2baa:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00000050; /* RxD0 is P0.3 and TxD0 is P0.2 */
    2bac:	4aa0      	ldr	r2, [pc, #640]	; (2e30 <UARTInit+0x2a0>)
    2bae:	4ba0      	ldr	r3, [pc, #640]	; (2e30 <UARTInit+0x2a0>)
    2bb0:	681b      	ldr	r3, [r3, #0]
    2bb2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    2bb6:	6013      	str	r3, [r2, #0]
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART0 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
    2bb8:	4b9e      	ldr	r3, [pc, #632]	; (2e34 <UARTInit+0x2a4>)
    2bba:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2bbe:	099b      	lsrs	r3, r3, #6
    2bc0:	f003 0303 	and.w	r3, r3, #3
    2bc4:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2bc6:	693b      	ldr	r3, [r7, #16]
    2bc8:	2b02      	cmp	r3, #2
    2bca:	d00c      	beq.n	2be6 <UARTInit+0x56>
    2bcc:	2b03      	cmp	r3, #3
    2bce:	d00f      	beq.n	2bf0 <UARTInit+0x60>
    2bd0:	2b01      	cmp	r3, #1
    2bd2:	d004      	beq.n	2bde <UARTInit+0x4e>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2bd4:	4b98      	ldr	r3, [pc, #608]	; (2e38 <UARTInit+0x2a8>)
    2bd6:	681b      	ldr	r3, [r3, #0]
    2bd8:	089b      	lsrs	r3, r3, #2
    2bda:	617b      	str	r3, [r7, #20]
			break;
    2bdc:	e00d      	b.n	2bfa <UARTInit+0x6a>
		case 0x01:
			pclk = SystemCoreClock;
    2bde:	4b96      	ldr	r3, [pc, #600]	; (2e38 <UARTInit+0x2a8>)
    2be0:	681b      	ldr	r3, [r3, #0]
    2be2:	617b      	str	r3, [r7, #20]
			break;
    2be4:	e009      	b.n	2bfa <UARTInit+0x6a>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2be6:	4b94      	ldr	r3, [pc, #592]	; (2e38 <UARTInit+0x2a8>)
    2be8:	681b      	ldr	r3, [r3, #0]
    2bea:	085b      	lsrs	r3, r3, #1
    2bec:	617b      	str	r3, [r7, #20]
			break;
    2bee:	e004      	b.n	2bfa <UARTInit+0x6a>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2bf0:	4b91      	ldr	r3, [pc, #580]	; (2e38 <UARTInit+0x2a8>)
    2bf2:	681b      	ldr	r3, [r3, #0]
    2bf4:	08db      	lsrs	r3, r3, #3
    2bf6:	617b      	str	r3, [r7, #20]
			break;
    2bf8:	bf00      	nop
		}
		LPC_UART0->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2bfa:	4b90      	ldr	r3, [pc, #576]	; (2e3c <UARTInit+0x2ac>)
    2bfc:	2283      	movs	r2, #131	; 0x83
    2bfe:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2c00:	697b      	ldr	r3, [r7, #20]
    2c02:	091a      	lsrs	r2, r3, #4
    2c04:	683b      	ldr	r3, [r7, #0]
    2c06:	fbb2 f3f3 	udiv	r3, r2, r3
    2c0a:	60fb      	str	r3, [r7, #12]
		if (baudrate == 115200){
    2c0c:	683b      	ldr	r3, [r7, #0]
    2c0e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2c12:	d10a      	bne.n	2c2a <UARTInit+0x9a>
			LPC_UART0->DLM = 0;
    2c14:	4b89      	ldr	r3, [pc, #548]	; (2e3c <UARTInit+0x2ac>)
    2c16:	2200      	movs	r2, #0
    2c18:	711a      	strb	r2, [r3, #4]
			LPC_UART0->DLL = 9;
    2c1a:	4b88      	ldr	r3, [pc, #544]	; (2e3c <UARTInit+0x2ac>)
    2c1c:	2209      	movs	r2, #9
    2c1e:	701a      	strb	r2, [r3, #0]
			LPC_UART0->FDR=1<<0|1<<5;
    2c20:	4b86      	ldr	r3, [pc, #536]	; (2e3c <UARTInit+0x2ac>)
    2c22:	2221      	movs	r2, #33	; 0x21
    2c24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    2c28:	e008      	b.n	2c3c <UARTInit+0xac>
		}else{
			LPC_UART0->DLM = Fdiv / 256;
    2c2a:	4a84      	ldr	r2, [pc, #528]	; (2e3c <UARTInit+0x2ac>)
    2c2c:	68fb      	ldr	r3, [r7, #12]
    2c2e:	0a1b      	lsrs	r3, r3, #8
    2c30:	b2db      	uxtb	r3, r3
    2c32:	7113      	strb	r3, [r2, #4]
			LPC_UART0->DLL = Fdiv % 256;
    2c34:	4b81      	ldr	r3, [pc, #516]	; (2e3c <UARTInit+0x2ac>)
    2c36:	68fa      	ldr	r2, [r7, #12]
    2c38:	b2d2      	uxtb	r2, r2
    2c3a:	701a      	strb	r2, [r3, #0]
		}
		LPC_UART0->LCR = 0x03; /* DLAB = 0 */
    2c3c:	4b7f      	ldr	r3, [pc, #508]	; (2e3c <UARTInit+0x2ac>)
    2c3e:	2203      	movs	r2, #3
    2c40:	731a      	strb	r2, [r3, #12]
		LPC_UART0->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2c42:	4b7e      	ldr	r3, [pc, #504]	; (2e3c <UARTInit+0x2ac>)
    2c44:	2207      	movs	r2, #7
    2c46:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART0_IRQn);
    2c48:	2005      	movs	r0, #5
    2c4a:	f7ff fd5d 	bl	2708 <NVIC_EnableIRQ>
		LPC_UART0->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART0 interrupt */
    2c4e:	4b7b      	ldr	r3, [pc, #492]	; (2e3c <UARTInit+0x2ac>)
    2c50:	2207      	movs	r2, #7
    2c52:	605a      	str	r2, [r3, #4]
		return (TRUE);
    2c54:	2301      	movs	r3, #1
    2c56:	e11d      	b.n	2e94 <UARTInit+0x304>
	} else if (PortNum == 1) {
    2c58:	687b      	ldr	r3, [r7, #4]
    2c5a:	2b01      	cmp	r3, #1
    2c5c:	d157      	bne.n	2d0e <UARTInit+0x17e>
		NVIC_DisableIRQ(UART1_IRQn);
    2c5e:	2006      	movs	r0, #6
    2c60:	f7ff fd6a 	bl	2738 <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 4;
    2c64:	4a73      	ldr	r2, [pc, #460]	; (2e34 <UARTInit+0x2a4>)
    2c66:	4b73      	ldr	r3, [pc, #460]	; (2e34 <UARTInit+0x2a4>)
    2c68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2c6c:	f043 0310 	orr.w	r3, r3, #16
    2c70:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL4 &= ~0x0000000F;
    2c74:	4a6e      	ldr	r2, [pc, #440]	; (2e30 <UARTInit+0x2a0>)
    2c76:	4b6e      	ldr	r3, [pc, #440]	; (2e30 <UARTInit+0x2a0>)
    2c78:	691b      	ldr	r3, [r3, #16]
    2c7a:	f023 030f 	bic.w	r3, r3, #15
    2c7e:	6113      	str	r3, [r2, #16]
		LPC_PINCON->PINSEL4 |= 0x0000000A; /* Enable RxD1 P0.16, TxD1 P0.15 */
    2c80:	4a6b      	ldr	r2, [pc, #428]	; (2e30 <UARTInit+0x2a0>)
    2c82:	4b6b      	ldr	r3, [pc, #428]	; (2e30 <UARTInit+0x2a0>)
    2c84:	691b      	ldr	r3, [r3, #16]
    2c86:	f043 030a 	orr.w	r3, r3, #10
    2c8a:	6113      	str	r3, [r2, #16]

		//| 1<<25; //Enable PCUART1
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 8,9 are for UART1 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
    2c8c:	4b69      	ldr	r3, [pc, #420]	; (2e34 <UARTInit+0x2a4>)
    2c8e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2c92:	0a1b      	lsrs	r3, r3, #8
    2c94:	f003 0303 	and.w	r3, r3, #3
    2c98:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2c9a:	693b      	ldr	r3, [r7, #16]
    2c9c:	2b02      	cmp	r3, #2
    2c9e:	d00c      	beq.n	2cba <UARTInit+0x12a>
    2ca0:	2b03      	cmp	r3, #3
    2ca2:	d00f      	beq.n	2cc4 <UARTInit+0x134>
    2ca4:	2b01      	cmp	r3, #1
    2ca6:	d004      	beq.n	2cb2 <UARTInit+0x122>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2ca8:	4b63      	ldr	r3, [pc, #396]	; (2e38 <UARTInit+0x2a8>)
    2caa:	681b      	ldr	r3, [r3, #0]
    2cac:	089b      	lsrs	r3, r3, #2
    2cae:	617b      	str	r3, [r7, #20]
			break;
    2cb0:	e00d      	b.n	2cce <UARTInit+0x13e>
		case 0x01:
			pclk = SystemCoreClock;
    2cb2:	4b61      	ldr	r3, [pc, #388]	; (2e38 <UARTInit+0x2a8>)
    2cb4:	681b      	ldr	r3, [r3, #0]
    2cb6:	617b      	str	r3, [r7, #20]
			break;
    2cb8:	e009      	b.n	2cce <UARTInit+0x13e>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2cba:	4b5f      	ldr	r3, [pc, #380]	; (2e38 <UARTInit+0x2a8>)
    2cbc:	681b      	ldr	r3, [r3, #0]
    2cbe:	085b      	lsrs	r3, r3, #1
    2cc0:	617b      	str	r3, [r7, #20]
			break;
    2cc2:	e004      	b.n	2cce <UARTInit+0x13e>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2cc4:	4b5c      	ldr	r3, [pc, #368]	; (2e38 <UARTInit+0x2a8>)
    2cc6:	681b      	ldr	r3, [r3, #0]
    2cc8:	08db      	lsrs	r3, r3, #3
    2cca:	617b      	str	r3, [r7, #20]
			break;
    2ccc:	bf00      	nop
		}
		LPC_UART1->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2cce:	4b5c      	ldr	r3, [pc, #368]	; (2e40 <UARTInit+0x2b0>)
    2cd0:	2283      	movs	r2, #131	; 0x83
    2cd2:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2cd4:	697b      	ldr	r3, [r7, #20]
    2cd6:	091a      	lsrs	r2, r3, #4
    2cd8:	683b      	ldr	r3, [r7, #0]
    2cda:	fbb2 f3f3 	udiv	r3, r2, r3
    2cde:	60fb      	str	r3, [r7, #12]
		LPC_UART1->DLM = Fdiv / 256;
    2ce0:	4a57      	ldr	r2, [pc, #348]	; (2e40 <UARTInit+0x2b0>)
    2ce2:	68fb      	ldr	r3, [r7, #12]
    2ce4:	0a1b      	lsrs	r3, r3, #8
    2ce6:	b2db      	uxtb	r3, r3
    2ce8:	7113      	strb	r3, [r2, #4]
		LPC_UART1->DLL = Fdiv % 256;
    2cea:	4b55      	ldr	r3, [pc, #340]	; (2e40 <UARTInit+0x2b0>)
    2cec:	68fa      	ldr	r2, [r7, #12]
    2cee:	b2d2      	uxtb	r2, r2
    2cf0:	701a      	strb	r2, [r3, #0]
		LPC_UART1->LCR = 0x03; /* DLAB = 0 */
    2cf2:	4b53      	ldr	r3, [pc, #332]	; (2e40 <UARTInit+0x2b0>)
    2cf4:	2203      	movs	r2, #3
    2cf6:	731a      	strb	r2, [r3, #12]
		LPC_UART1->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2cf8:	4b51      	ldr	r3, [pc, #324]	; (2e40 <UARTInit+0x2b0>)
    2cfa:	2207      	movs	r2, #7
    2cfc:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART1_IRQn);
    2cfe:	2006      	movs	r0, #6
    2d00:	f7ff fd02 	bl	2708 <NVIC_EnableIRQ>
		LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART1 interrupt */
    2d04:	4b4e      	ldr	r3, [pc, #312]	; (2e40 <UARTInit+0x2b0>)
    2d06:	2207      	movs	r2, #7
    2d08:	605a      	str	r2, [r3, #4]
		return (TRUE);
    2d0a:	2301      	movs	r3, #1
    2d0c:	e0c2      	b.n	2e94 <UARTInit+0x304>
	} else if (PortNum == 2) {
    2d0e:	687b      	ldr	r3, [r7, #4]
    2d10:	2b02      	cmp	r3, #2
    2d12:	d157      	bne.n	2dc4 <UARTInit+0x234>
		NVIC_DisableIRQ(UART2_IRQn);
    2d14:	2007      	movs	r0, #7
    2d16:	f7ff fd0f 	bl	2738 <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 24; // UART 2 PCONP bit 24
    2d1a:	4a46      	ldr	r2, [pc, #280]	; (2e34 <UARTInit+0x2a4>)
    2d1c:	4b45      	ldr	r3, [pc, #276]	; (2e34 <UARTInit+0x2a4>)
    2d1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2d26:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL0 &= ~0x00F00000;
    2d2a:	4a41      	ldr	r2, [pc, #260]	; (2e30 <UARTInit+0x2a0>)
    2d2c:	4b40      	ldr	r3, [pc, #256]	; (2e30 <UARTInit+0x2a0>)
    2d2e:	681b      	ldr	r3, [r3, #0]
    2d30:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    2d34:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00500000; /* Enable TxD2 on 0.10, RxD2 on 0.11 */
    2d36:	4a3e      	ldr	r2, [pc, #248]	; (2e30 <UARTInit+0x2a0>)
    2d38:	4b3d      	ldr	r3, [pc, #244]	; (2e30 <UARTInit+0x2a0>)
    2d3a:	681b      	ldr	r3, [r3, #0]
    2d3c:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
    2d40:	6013      	str	r3, [r2, #0]
		pclkdiv = (LPC_SC->PCLKSEL0 >> 16) & 0x03;
    2d42:	4b3c      	ldr	r3, [pc, #240]	; (2e34 <UARTInit+0x2a4>)
    2d44:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2d48:	0c1b      	lsrs	r3, r3, #16
    2d4a:	f003 0303 	and.w	r3, r3, #3
    2d4e:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2d50:	693b      	ldr	r3, [r7, #16]
    2d52:	2b02      	cmp	r3, #2
    2d54:	d00c      	beq.n	2d70 <UARTInit+0x1e0>
    2d56:	2b03      	cmp	r3, #3
    2d58:	d00f      	beq.n	2d7a <UARTInit+0x1ea>
    2d5a:	2b01      	cmp	r3, #1
    2d5c:	d004      	beq.n	2d68 <UARTInit+0x1d8>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2d5e:	4b36      	ldr	r3, [pc, #216]	; (2e38 <UARTInit+0x2a8>)
    2d60:	681b      	ldr	r3, [r3, #0]
    2d62:	089b      	lsrs	r3, r3, #2
    2d64:	617b      	str	r3, [r7, #20]
			break;
    2d66:	e00d      	b.n	2d84 <UARTInit+0x1f4>
		case 0x01:
			pclk = SystemCoreClock;
    2d68:	4b33      	ldr	r3, [pc, #204]	; (2e38 <UARTInit+0x2a8>)
    2d6a:	681b      	ldr	r3, [r3, #0]
    2d6c:	617b      	str	r3, [r7, #20]
			break;
    2d6e:	e009      	b.n	2d84 <UARTInit+0x1f4>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2d70:	4b31      	ldr	r3, [pc, #196]	; (2e38 <UARTInit+0x2a8>)
    2d72:	681b      	ldr	r3, [r3, #0]
    2d74:	085b      	lsrs	r3, r3, #1
    2d76:	617b      	str	r3, [r7, #20]
			break;
    2d78:	e004      	b.n	2d84 <UARTInit+0x1f4>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2d7a:	4b2f      	ldr	r3, [pc, #188]	; (2e38 <UARTInit+0x2a8>)
    2d7c:	681b      	ldr	r3, [r3, #0]
    2d7e:	08db      	lsrs	r3, r3, #3
    2d80:	617b      	str	r3, [r7, #20]
			break;
    2d82:	bf00      	nop
		}
		LPC_UART2->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2d84:	4b2f      	ldr	r3, [pc, #188]	; (2e44 <UARTInit+0x2b4>)
    2d86:	2283      	movs	r2, #131	; 0x83
    2d88:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2d8a:	697b      	ldr	r3, [r7, #20]
    2d8c:	091a      	lsrs	r2, r3, #4
    2d8e:	683b      	ldr	r3, [r7, #0]
    2d90:	fbb2 f3f3 	udiv	r3, r2, r3
    2d94:	60fb      	str	r3, [r7, #12]
		LPC_UART2->DLM = Fdiv / 256;
    2d96:	4a2b      	ldr	r2, [pc, #172]	; (2e44 <UARTInit+0x2b4>)
    2d98:	68fb      	ldr	r3, [r7, #12]
    2d9a:	0a1b      	lsrs	r3, r3, #8
    2d9c:	b2db      	uxtb	r3, r3
    2d9e:	7113      	strb	r3, [r2, #4]
		LPC_UART2->DLL = Fdiv % 256;
    2da0:	4b28      	ldr	r3, [pc, #160]	; (2e44 <UARTInit+0x2b4>)
    2da2:	68fa      	ldr	r2, [r7, #12]
    2da4:	b2d2      	uxtb	r2, r2
    2da6:	701a      	strb	r2, [r3, #0]
		LPC_UART2->LCR = 0x03; /* DLAB = 0 */
    2da8:	4b26      	ldr	r3, [pc, #152]	; (2e44 <UARTInit+0x2b4>)
    2daa:	2203      	movs	r2, #3
    2dac:	731a      	strb	r2, [r3, #12]
		LPC_UART2->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2dae:	4b25      	ldr	r3, [pc, #148]	; (2e44 <UARTInit+0x2b4>)
    2db0:	2207      	movs	r2, #7
    2db2:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART2_IRQn);
    2db4:	2007      	movs	r0, #7
    2db6:	f7ff fca7 	bl	2708 <NVIC_EnableIRQ>
		LPC_UART2->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART2 interrupt */
    2dba:	4b22      	ldr	r3, [pc, #136]	; (2e44 <UARTInit+0x2b4>)
    2dbc:	2207      	movs	r2, #7
    2dbe:	605a      	str	r2, [r3, #4]
		//LPC_UART2->IER = IER_THRE; /* Polling */
		//LPC_UART2->TER = (1 << 7);
		return (TRUE);
    2dc0:	2301      	movs	r3, #1
    2dc2:	e067      	b.n	2e94 <UARTInit+0x304>
	} else if (PortNum == 3) {
    2dc4:	687b      	ldr	r3, [r7, #4]
    2dc6:	2b03      	cmp	r3, #3
    2dc8:	d163      	bne.n	2e92 <UARTInit+0x302>
		LPC_PINCON->PINSEL0 &= ~0x0000000F;
    2dca:	4a19      	ldr	r2, [pc, #100]	; (2e30 <UARTInit+0x2a0>)
    2dcc:	4b18      	ldr	r3, [pc, #96]	; (2e30 <UARTInit+0x2a0>)
    2dce:	681b      	ldr	r3, [r3, #0]
    2dd0:	f023 030f 	bic.w	r3, r3, #15
    2dd4:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x0000000A; /* RxD3 is P0.1 and TxD3 is P0.0 */
    2dd6:	4a16      	ldr	r2, [pc, #88]	; (2e30 <UARTInit+0x2a0>)
    2dd8:	4b15      	ldr	r3, [pc, #84]	; (2e30 <UARTInit+0x2a0>)
    2dda:	681b      	ldr	r3, [r3, #0]
    2ddc:	f043 030a 	orr.w	r3, r3, #10
    2de0:	6013      	str	r3, [r2, #0]
		LPC_SC->PCONP |= 1 << 4 | 1 << 25; //Enable PCUART1
    2de2:	4a14      	ldr	r2, [pc, #80]	; (2e34 <UARTInit+0x2a4>)
    2de4:	4b13      	ldr	r3, [pc, #76]	; (2e34 <UARTInit+0x2a4>)
    2de6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2dea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    2dee:	f043 0310 	orr.w	r3, r3, #16
    2df2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART3 */
		pclkdiv = (LPC_SC->PCLKSEL1 >> 18) & 0x03;
    2df6:	4b0f      	ldr	r3, [pc, #60]	; (2e34 <UARTInit+0x2a4>)
    2df8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
    2dfc:	0c9b      	lsrs	r3, r3, #18
    2dfe:	f003 0303 	and.w	r3, r3, #3
    2e02:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2e04:	693b      	ldr	r3, [r7, #16]
    2e06:	2b02      	cmp	r3, #2
    2e08:	d00c      	beq.n	2e24 <UARTInit+0x294>
    2e0a:	2b03      	cmp	r3, #3
    2e0c:	d01c      	beq.n	2e48 <UARTInit+0x2b8>
    2e0e:	2b01      	cmp	r3, #1
    2e10:	d004      	beq.n	2e1c <UARTInit+0x28c>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2e12:	4b09      	ldr	r3, [pc, #36]	; (2e38 <UARTInit+0x2a8>)
    2e14:	681b      	ldr	r3, [r3, #0]
    2e16:	089b      	lsrs	r3, r3, #2
    2e18:	617b      	str	r3, [r7, #20]
			break;
    2e1a:	e01a      	b.n	2e52 <UARTInit+0x2c2>
		case 0x01:
			pclk = SystemCoreClock;
    2e1c:	4b06      	ldr	r3, [pc, #24]	; (2e38 <UARTInit+0x2a8>)
    2e1e:	681b      	ldr	r3, [r3, #0]
    2e20:	617b      	str	r3, [r7, #20]
			break;
    2e22:	e016      	b.n	2e52 <UARTInit+0x2c2>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2e24:	4b04      	ldr	r3, [pc, #16]	; (2e38 <UARTInit+0x2a8>)
    2e26:	681b      	ldr	r3, [r3, #0]
    2e28:	085b      	lsrs	r3, r3, #1
    2e2a:	617b      	str	r3, [r7, #20]
			break;
    2e2c:	e011      	b.n	2e52 <UARTInit+0x2c2>
    2e2e:	bf00      	nop
    2e30:	4002c000 	.word	0x4002c000
    2e34:	400fc000 	.word	0x400fc000
    2e38:	10000018 	.word	0x10000018
    2e3c:	4000c000 	.word	0x4000c000
    2e40:	40010000 	.word	0x40010000
    2e44:	40098000 	.word	0x40098000
		case 0x03:
			pclk = SystemCoreClock / 8;
    2e48:	4b14      	ldr	r3, [pc, #80]	; (2e9c <UARTInit+0x30c>)
    2e4a:	681b      	ldr	r3, [r3, #0]
    2e4c:	08db      	lsrs	r3, r3, #3
    2e4e:	617b      	str	r3, [r7, #20]
			break;
    2e50:	bf00      	nop
		}
		LPC_UART3->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2e52:	4b13      	ldr	r3, [pc, #76]	; (2ea0 <UARTInit+0x310>)
    2e54:	2283      	movs	r2, #131	; 0x83
    2e56:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2e58:	697b      	ldr	r3, [r7, #20]
    2e5a:	091a      	lsrs	r2, r3, #4
    2e5c:	683b      	ldr	r3, [r7, #0]
    2e5e:	fbb2 f3f3 	udiv	r3, r2, r3
    2e62:	60fb      	str	r3, [r7, #12]
		LPC_UART3->DLM = Fdiv / 256;
    2e64:	4a0e      	ldr	r2, [pc, #56]	; (2ea0 <UARTInit+0x310>)
    2e66:	68fb      	ldr	r3, [r7, #12]
    2e68:	0a1b      	lsrs	r3, r3, #8
    2e6a:	b2db      	uxtb	r3, r3
    2e6c:	7113      	strb	r3, [r2, #4]
		LPC_UART3->DLL = Fdiv % 256;
    2e6e:	4b0c      	ldr	r3, [pc, #48]	; (2ea0 <UARTInit+0x310>)
    2e70:	68fa      	ldr	r2, [r7, #12]
    2e72:	b2d2      	uxtb	r2, r2
    2e74:	701a      	strb	r2, [r3, #0]
		LPC_UART3->LCR = 0x03; /* DLAB = 0 */
    2e76:	4b0a      	ldr	r3, [pc, #40]	; (2ea0 <UARTInit+0x310>)
    2e78:	2203      	movs	r2, #3
    2e7a:	731a      	strb	r2, [r3, #12]
		LPC_UART3->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2e7c:	4b08      	ldr	r3, [pc, #32]	; (2ea0 <UARTInit+0x310>)
    2e7e:	2207      	movs	r2, #7
    2e80:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART3_IRQn);
    2e82:	2008      	movs	r0, #8
    2e84:	f7ff fc40 	bl	2708 <NVIC_EnableIRQ>
		LPC_UART3->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART3 interrupt */
    2e88:	4b05      	ldr	r3, [pc, #20]	; (2ea0 <UARTInit+0x310>)
    2e8a:	2207      	movs	r2, #7
    2e8c:	605a      	str	r2, [r3, #4]
		return (TRUE);
    2e8e:	2301      	movs	r3, #1
    2e90:	e000      	b.n	2e94 <UARTInit+0x304>
	}
	return (FALSE);
    2e92:	2300      	movs	r3, #0
}
    2e94:	4618      	mov	r0, r3
    2e96:	3718      	adds	r7, #24
    2e98:	46bd      	mov	sp, r7
    2e9a:	bd80      	pop	{r7, pc}
    2e9c:	10000018 	.word	0x10000018
    2ea0:	4009c000 	.word	0x4009c000

00002ea4 <UARTSend>:
 **
 ** parameters:			portNum, buffer pointer, and data length
 ** Returned value:		None
 **
 *****************************************************************************/
void UARTSend(uint32_t portNum, uint8_t *buffer, uint32_t Length) {
    2ea4:	b480      	push	{r7}
    2ea6:	b087      	sub	sp, #28
    2ea8:	af00      	add	r7, sp, #0
    2eaa:	60f8      	str	r0, [r7, #12]
    2eac:	60b9      	str	r1, [r7, #8]
    2eae:	607a      	str	r2, [r7, #4]
	uint8_t *BufferPtr = buffer;
    2eb0:	68bb      	ldr	r3, [r7, #8]
    2eb2:	613b      	str	r3, [r7, #16]
	int index = 0;
    2eb4:	2300      	movs	r3, #0
    2eb6:	617b      	str	r3, [r7, #20]
	if (portNum == 0) {
    2eb8:	68fb      	ldr	r3, [r7, #12]
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d11b      	bne.n	2ef6 <UARTSend+0x52>
		while (Length != 0) {
    2ebe:	e016      	b.n	2eee <UARTSend+0x4a>
			/* THRE status, contain valid data */
			while (!(UART0TxEmpty & 0x01));
    2ec0:	bf00      	nop
    2ec2:	4b3e      	ldr	r3, [pc, #248]	; (2fbc <UARTSend+0x118>)
    2ec4:	781b      	ldrb	r3, [r3, #0]
    2ec6:	b2db      	uxtb	r3, r3
    2ec8:	f003 0301 	and.w	r3, r3, #1
    2ecc:	2b00      	cmp	r3, #0
    2ece:	d0f8      	beq.n	2ec2 <UARTSend+0x1e>
			LPC_UART0->THR = BufferPtr[index];
    2ed0:	493b      	ldr	r1, [pc, #236]	; (2fc0 <UARTSend+0x11c>)
    2ed2:	697b      	ldr	r3, [r7, #20]
    2ed4:	693a      	ldr	r2, [r7, #16]
    2ed6:	4413      	add	r3, r2
    2ed8:	781b      	ldrb	r3, [r3, #0]
    2eda:	700b      	strb	r3, [r1, #0]
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
    2edc:	4b37      	ldr	r3, [pc, #220]	; (2fbc <UARTSend+0x118>)
    2ede:	2200      	movs	r2, #0
    2ee0:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    2ee2:	697b      	ldr	r3, [r7, #20]
    2ee4:	3301      	adds	r3, #1
    2ee6:	617b      	str	r3, [r7, #20]
			Length--;
    2ee8:	687b      	ldr	r3, [r7, #4]
    2eea:	3b01      	subs	r3, #1
    2eec:	607b      	str	r3, [r7, #4]
 *****************************************************************************/
void UARTSend(uint32_t portNum, uint8_t *buffer, uint32_t Length) {
	uint8_t *BufferPtr = buffer;
	int index = 0;
	if (portNum == 0) {
		while (Length != 0) {
    2eee:	687b      	ldr	r3, [r7, #4]
    2ef0:	2b00      	cmp	r3, #0
    2ef2:	d1e5      	bne.n	2ec0 <UARTSend+0x1c>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    2ef4:	e05c      	b.n	2fb0 <UARTSend+0x10c>
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
    2ef6:	68fb      	ldr	r3, [r7, #12]
    2ef8:	2b01      	cmp	r3, #1
    2efa:	d11b      	bne.n	2f34 <UARTSend+0x90>
		while (Length != 0) {
    2efc:	e016      	b.n	2f2c <UARTSend+0x88>
			/* THRE status, contain valid data */
			while (!(UART1TxEmpty & 0x01));
    2efe:	bf00      	nop
    2f00:	4b30      	ldr	r3, [pc, #192]	; (2fc4 <UARTSend+0x120>)
    2f02:	781b      	ldrb	r3, [r3, #0]
    2f04:	b2db      	uxtb	r3, r3
    2f06:	f003 0301 	and.w	r3, r3, #1
    2f0a:	2b00      	cmp	r3, #0
    2f0c:	d0f8      	beq.n	2f00 <UARTSend+0x5c>
			LPC_UART1->THR = BufferPtr[index];
    2f0e:	492e      	ldr	r1, [pc, #184]	; (2fc8 <UARTSend+0x124>)
    2f10:	697b      	ldr	r3, [r7, #20]
    2f12:	693a      	ldr	r2, [r7, #16]
    2f14:	4413      	add	r3, r2
    2f16:	781b      	ldrb	r3, [r3, #0]
    2f18:	700b      	strb	r3, [r1, #0]
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
    2f1a:	4b2a      	ldr	r3, [pc, #168]	; (2fc4 <UARTSend+0x120>)
    2f1c:	2200      	movs	r2, #0
    2f1e:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    2f20:	697b      	ldr	r3, [r7, #20]
    2f22:	3301      	adds	r3, #1
    2f24:	617b      	str	r3, [r7, #20]
			Length--;
    2f26:	687b      	ldr	r3, [r7, #4]
    2f28:	3b01      	subs	r3, #1
    2f2a:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
		while (Length != 0) {
    2f2c:	687b      	ldr	r3, [r7, #4]
    2f2e:	2b00      	cmp	r3, #0
    2f30:	d1e5      	bne.n	2efe <UARTSend+0x5a>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    2f32:	e03d      	b.n	2fb0 <UARTSend+0x10c>
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
    2f34:	68fb      	ldr	r3, [r7, #12]
    2f36:	2b02      	cmp	r3, #2
    2f38:	d11b      	bne.n	2f72 <UARTSend+0xce>
		while (Length != 0) {
    2f3a:	e016      	b.n	2f6a <UARTSend+0xc6>
			/* THRE status, contain valid data */
			while (!(UART2TxEmpty & 0x01));
    2f3c:	bf00      	nop
    2f3e:	4b23      	ldr	r3, [pc, #140]	; (2fcc <UARTSend+0x128>)
    2f40:	781b      	ldrb	r3, [r3, #0]
    2f42:	b2db      	uxtb	r3, r3
    2f44:	f003 0301 	and.w	r3, r3, #1
    2f48:	2b00      	cmp	r3, #0
    2f4a:	d0f8      	beq.n	2f3e <UARTSend+0x9a>
			LPC_UART2->THR = BufferPtr[index];
    2f4c:	4920      	ldr	r1, [pc, #128]	; (2fd0 <UARTSend+0x12c>)
    2f4e:	697b      	ldr	r3, [r7, #20]
    2f50:	693a      	ldr	r2, [r7, #16]
    2f52:	4413      	add	r3, r2
    2f54:	781b      	ldrb	r3, [r3, #0]
    2f56:	700b      	strb	r3, [r1, #0]
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
    2f58:	4b1c      	ldr	r3, [pc, #112]	; (2fcc <UARTSend+0x128>)
    2f5a:	2200      	movs	r2, #0
    2f5c:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    2f5e:	697b      	ldr	r3, [r7, #20]
    2f60:	3301      	adds	r3, #1
    2f62:	617b      	str	r3, [r7, #20]
			Length--;
    2f64:	687b      	ldr	r3, [r7, #4]
    2f66:	3b01      	subs	r3, #1
    2f68:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
		while (Length != 0) {
    2f6a:	687b      	ldr	r3, [r7, #4]
    2f6c:	2b00      	cmp	r3, #0
    2f6e:	d1e5      	bne.n	2f3c <UARTSend+0x98>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    2f70:	e01e      	b.n	2fb0 <UARTSend+0x10c>
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
    2f72:	68fb      	ldr	r3, [r7, #12]
    2f74:	2b03      	cmp	r3, #3
    2f76:	d11a      	bne.n	2fae <UARTSend+0x10a>
		while (Length != 0) {
    2f78:	e016      	b.n	2fa8 <UARTSend+0x104>
			/* THRE status, contain valid data */
			while (!(UART3TxEmpty & 0x01));
    2f7a:	bf00      	nop
    2f7c:	4b15      	ldr	r3, [pc, #84]	; (2fd4 <UARTSend+0x130>)
    2f7e:	781b      	ldrb	r3, [r3, #0]
    2f80:	b2db      	uxtb	r3, r3
    2f82:	f003 0301 	and.w	r3, r3, #1
    2f86:	2b00      	cmp	r3, #0
    2f88:	d0f8      	beq.n	2f7c <UARTSend+0xd8>
			LPC_UART3->THR = BufferPtr[index];
    2f8a:	4913      	ldr	r1, [pc, #76]	; (2fd8 <UARTSend+0x134>)
    2f8c:	697b      	ldr	r3, [r7, #20]
    2f8e:	693a      	ldr	r2, [r7, #16]
    2f90:	4413      	add	r3, r2
    2f92:	781b      	ldrb	r3, [r3, #0]
    2f94:	700b      	strb	r3, [r1, #0]
			UART3TxEmpty = 0; /* not empty in the THR until it shifts out */
    2f96:	4b0f      	ldr	r3, [pc, #60]	; (2fd4 <UARTSend+0x130>)
    2f98:	2200      	movs	r2, #0
    2f9a:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    2f9c:	697b      	ldr	r3, [r7, #20]
    2f9e:	3301      	adds	r3, #1
    2fa0:	617b      	str	r3, [r7, #20]
			Length--;
    2fa2:	687b      	ldr	r3, [r7, #4]
    2fa4:	3b01      	subs	r3, #1
    2fa6:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
		while (Length != 0) {
    2fa8:	687b      	ldr	r3, [r7, #4]
    2faa:	2b00      	cmp	r3, #0
    2fac:	d1e5      	bne.n	2f7a <UARTSend+0xd6>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    2fae:	bf00      	nop
}
    2fb0:	371c      	adds	r7, #28
    2fb2:	46bd      	mov	sp, r7
    2fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fb8:	4770      	bx	lr
    2fba:	bf00      	nop
    2fbc:	10000014 	.word	0x10000014
    2fc0:	4000c000 	.word	0x4000c000
    2fc4:	10000015 	.word	0x10000015
    2fc8:	40010000 	.word	0x40010000
    2fcc:	10000017 	.word	0x10000017
    2fd0:	40098000 	.word	0x40098000
    2fd4:	10000016 	.word	0x10000016
    2fd8:	4009c000 	.word	0x4009c000

00002fdc <ReadUart>:

uint16_t ReadUart( uint8_t *veri, uint8_t PortNum )
{
    2fdc:	b480      	push	{r7}
    2fde:	b087      	sub	sp, #28
    2fe0:	af00      	add	r7, sp, #0
    2fe2:	6078      	str	r0, [r7, #4]
    2fe4:	460b      	mov	r3, r1
    2fe6:	70fb      	strb	r3, [r7, #3]
	uint8_t *veri_ptr = veri;
    2fe8:	687b      	ldr	r3, [r7, #4]
    2fea:	617b      	str	r3, [r7, #20]
	uint16_t buff_count = 0;
    2fec:	2300      	movs	r3, #0
    2fee:	827b      	strh	r3, [r7, #18]
	if (PortNum == 0) {
    2ff0:	78fb      	ldrb	r3, [r7, #3]
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	d122      	bne.n	303c <ReadUart+0x60>
		if (UART0Count > 0) {
    2ff6:	4b4e      	ldr	r3, [pc, #312]	; (3130 <ReadUart+0x154>)
    2ff8:	881b      	ldrh	r3, [r3, #0]
    2ffa:	b29b      	uxth	r3, r3
    2ffc:	2b00      	cmp	r3, #0
    2ffe:	d01d      	beq.n	303c <ReadUart+0x60>
			while (buff_count < UART0Count) {
    3000:	e00b      	b.n	301a <ReadUart+0x3e>
				*veri_ptr = UART0Buffer[buff_count];
    3002:	8a7b      	ldrh	r3, [r7, #18]
    3004:	4a4b      	ldr	r2, [pc, #300]	; (3134 <ReadUart+0x158>)
    3006:	5cd3      	ldrb	r3, [r2, r3]
    3008:	b2da      	uxtb	r2, r3
    300a:	697b      	ldr	r3, [r7, #20]
    300c:	701a      	strb	r2, [r3, #0]
				buff_count++;
    300e:	8a7b      	ldrh	r3, [r7, #18]
    3010:	3301      	adds	r3, #1
    3012:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    3014:	697b      	ldr	r3, [r7, #20]
    3016:	3301      	adds	r3, #1
    3018:	617b      	str	r3, [r7, #20]
{
	uint8_t *veri_ptr = veri;
	uint16_t buff_count = 0;
	if (PortNum == 0) {
		if (UART0Count > 0) {
			while (buff_count < UART0Count) {
    301a:	4b45      	ldr	r3, [pc, #276]	; (3130 <ReadUart+0x154>)
    301c:	881b      	ldrh	r3, [r3, #0]
    301e:	b29b      	uxth	r3, r3
    3020:	8a7a      	ldrh	r2, [r7, #18]
    3022:	429a      	cmp	r2, r3
    3024:	d3ed      	bcc.n	3002 <ReadUart+0x26>
				*veri_ptr = UART0Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    3026:	697b      	ldr	r3, [r7, #20]
    3028:	2200      	movs	r2, #0
    302a:	701a      	strb	r2, [r3, #0]
			uint16_t len = UART0Count;
    302c:	4b40      	ldr	r3, [pc, #256]	; (3130 <ReadUart+0x154>)
    302e:	881b      	ldrh	r3, [r3, #0]
    3030:	823b      	strh	r3, [r7, #16]
			UART0Count = 0;
    3032:	4b3f      	ldr	r3, [pc, #252]	; (3130 <ReadUart+0x154>)
    3034:	2200      	movs	r2, #0
    3036:	801a      	strh	r2, [r3, #0]
			return ( len );
    3038:	8a3b      	ldrh	r3, [r7, #16]
    303a:	e073      	b.n	3124 <ReadUart+0x148>
		}
	}
	if (PortNum == 1) {
    303c:	78fb      	ldrb	r3, [r7, #3]
    303e:	2b01      	cmp	r3, #1
    3040:	d124      	bne.n	308c <ReadUart+0xb0>



		if (UART1Count > 0) {
    3042:	4b3d      	ldr	r3, [pc, #244]	; (3138 <ReadUart+0x15c>)
    3044:	881b      	ldrh	r3, [r3, #0]
    3046:	b29b      	uxth	r3, r3
    3048:	2b00      	cmp	r3, #0
    304a:	d06a      	beq.n	3122 <ReadUart+0x146>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    304c:	b672      	cpsid	i

			__disable_irq();

			while (buff_count < UART1Count) {
    304e:	e00b      	b.n	3068 <ReadUart+0x8c>
				*veri_ptr = UART1Buffer[buff_count];
    3050:	8a7b      	ldrh	r3, [r7, #18]
    3052:	4a3a      	ldr	r2, [pc, #232]	; (313c <ReadUart+0x160>)
    3054:	5cd3      	ldrb	r3, [r2, r3]
    3056:	b2da      	uxtb	r2, r3
    3058:	697b      	ldr	r3, [r7, #20]
    305a:	701a      	strb	r2, [r3, #0]
				buff_count++;
    305c:	8a7b      	ldrh	r3, [r7, #18]
    305e:	3301      	adds	r3, #1
    3060:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    3062:	697b      	ldr	r3, [r7, #20]
    3064:	3301      	adds	r3, #1
    3066:	617b      	str	r3, [r7, #20]

		if (UART1Count > 0) {

			__disable_irq();

			while (buff_count < UART1Count) {
    3068:	4b33      	ldr	r3, [pc, #204]	; (3138 <ReadUart+0x15c>)
    306a:	881b      	ldrh	r3, [r3, #0]
    306c:	b29b      	uxth	r3, r3
    306e:	8a7a      	ldrh	r2, [r7, #18]
    3070:	429a      	cmp	r2, r3
    3072:	d3ed      	bcc.n	3050 <ReadUart+0x74>
				*veri_ptr = UART1Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    3074:	697b      	ldr	r3, [r7, #20]
    3076:	2200      	movs	r2, #0
    3078:	701a      	strb	r2, [r3, #0]
			uint16_t len = UART1Count;
    307a:	4b2f      	ldr	r3, [pc, #188]	; (3138 <ReadUart+0x15c>)
    307c:	881b      	ldrh	r3, [r3, #0]
    307e:	81fb      	strh	r3, [r7, #14]
			UART1Count = 0;
    3080:	4b2d      	ldr	r3, [pc, #180]	; (3138 <ReadUart+0x15c>)
    3082:	2200      	movs	r2, #0
    3084:	801a      	strh	r2, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3086:	b662      	cpsie	i

			__enable_irq();
			return ( len );
    3088:	89fb      	ldrh	r3, [r7, #14]
    308a:	e04b      	b.n	3124 <ReadUart+0x148>
		}
	}//GPS Port
	else if (PortNum == 2) {
    308c:	78fb      	ldrb	r3, [r7, #3]
    308e:	2b02      	cmp	r3, #2
    3090:	d11f      	bne.n	30d2 <ReadUart+0xf6>
		if (UART2Count > 0) {
    3092:	4b2b      	ldr	r3, [pc, #172]	; (3140 <ReadUart+0x164>)
    3094:	881b      	ldrh	r3, [r3, #0]
    3096:	b29b      	uxth	r3, r3
    3098:	2b00      	cmp	r3, #0
    309a:	d042      	beq.n	3122 <ReadUart+0x146>
			while (buff_count < UART2Count) {
    309c:	e00b      	b.n	30b6 <ReadUart+0xda>
				*veri_ptr = UART2Buffer[buff_count];
    309e:	8a7b      	ldrh	r3, [r7, #18]
    30a0:	4a28      	ldr	r2, [pc, #160]	; (3144 <ReadUart+0x168>)
    30a2:	5cd3      	ldrb	r3, [r2, r3]
    30a4:	b2da      	uxtb	r2, r3
    30a6:	697b      	ldr	r3, [r7, #20]
    30a8:	701a      	strb	r2, [r3, #0]
				buff_count++;
    30aa:	8a7b      	ldrh	r3, [r7, #18]
    30ac:	3301      	adds	r3, #1
    30ae:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    30b0:	697b      	ldr	r3, [r7, #20]
    30b2:	3301      	adds	r3, #1
    30b4:	617b      	str	r3, [r7, #20]
			return ( len );
		}
	}//GPS Port
	else if (PortNum == 2) {
		if (UART2Count > 0) {
			while (buff_count < UART2Count) {
    30b6:	4b22      	ldr	r3, [pc, #136]	; (3140 <ReadUart+0x164>)
    30b8:	881b      	ldrh	r3, [r3, #0]
    30ba:	b29b      	uxth	r3, r3
    30bc:	8a7a      	ldrh	r2, [r7, #18]
    30be:	429a      	cmp	r2, r3
    30c0:	d3ed      	bcc.n	309e <ReadUart+0xc2>
				*veri_ptr = UART2Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    30c2:	697b      	ldr	r3, [r7, #20]
    30c4:	2200      	movs	r2, #0
    30c6:	701a      	strb	r2, [r3, #0]
			UART2Count = 0;
    30c8:	4b1d      	ldr	r3, [pc, #116]	; (3140 <ReadUart+0x164>)
    30ca:	2200      	movs	r2, #0
    30cc:	801a      	strh	r2, [r3, #0]
			return buff_count;
    30ce:	8a7b      	ldrh	r3, [r7, #18]
    30d0:	e028      	b.n	3124 <ReadUart+0x148>
		}
	} else if (PortNum == 3) {
    30d2:	78fb      	ldrb	r3, [r7, #3]
    30d4:	2b03      	cmp	r3, #3
    30d6:	d124      	bne.n	3122 <ReadUart+0x146>
		if (UART3Count > 0) {
    30d8:	4b1b      	ldr	r3, [pc, #108]	; (3148 <ReadUart+0x16c>)
    30da:	881b      	ldrh	r3, [r3, #0]
    30dc:	b29b      	uxth	r3, r3
    30de:	2b00      	cmp	r3, #0
    30e0:	d01f      	beq.n	3122 <ReadUart+0x146>
			while (buff_count < UART3Count) {
    30e2:	e00b      	b.n	30fc <ReadUart+0x120>
				*veri_ptr = UART3Buffer[buff_count];
    30e4:	8a7b      	ldrh	r3, [r7, #18]
    30e6:	4a19      	ldr	r2, [pc, #100]	; (314c <ReadUart+0x170>)
    30e8:	5cd3      	ldrb	r3, [r2, r3]
    30ea:	b2da      	uxtb	r2, r3
    30ec:	697b      	ldr	r3, [r7, #20]
    30ee:	701a      	strb	r2, [r3, #0]
				buff_count++;
    30f0:	8a7b      	ldrh	r3, [r7, #18]
    30f2:	3301      	adds	r3, #1
    30f4:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    30f6:	697b      	ldr	r3, [r7, #20]
    30f8:	3301      	adds	r3, #1
    30fa:	617b      	str	r3, [r7, #20]
			UART2Count = 0;
			return buff_count;
		}
	} else if (PortNum == 3) {
		if (UART3Count > 0) {
			while (buff_count < UART3Count) {
    30fc:	4b12      	ldr	r3, [pc, #72]	; (3148 <ReadUart+0x16c>)
    30fe:	881b      	ldrh	r3, [r3, #0]
    3100:	b29b      	uxth	r3, r3
    3102:	8a7a      	ldrh	r2, [r7, #18]
    3104:	429a      	cmp	r2, r3
    3106:	d3ed      	bcc.n	30e4 <ReadUart+0x108>
				*veri_ptr = UART3Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    3108:	697b      	ldr	r3, [r7, #20]
    310a:	2200      	movs	r2, #0
    310c:	701a      	strb	r2, [r3, #0]
			int len = UART3Count;
    310e:	4b0e      	ldr	r3, [pc, #56]	; (3148 <ReadUart+0x16c>)
    3110:	881b      	ldrh	r3, [r3, #0]
    3112:	b29b      	uxth	r3, r3
    3114:	60bb      	str	r3, [r7, #8]
			UART3Count = 0;
    3116:	4b0c      	ldr	r3, [pc, #48]	; (3148 <ReadUart+0x16c>)
    3118:	2200      	movs	r2, #0
    311a:	801a      	strh	r2, [r3, #0]
			return len;
    311c:	68bb      	ldr	r3, [r7, #8]
    311e:	b29b      	uxth	r3, r3
    3120:	e000      	b.n	3124 <ReadUart+0x148>
		}
	}
	return 0;
    3122:	2300      	movs	r3, #0
}
    3124:	4618      	mov	r0, r3
    3126:	371c      	adds	r7, #28
    3128:	46bd      	mov	sp, r7
    312a:	f85d 7b04 	ldr.w	r7, [sp], #4
    312e:	4770      	bx	lr
    3130:	10000138 	.word	0x10000138
    3134:	10001004 	.word	0x10001004
    3138:	1000013a 	.word	0x1000013a
    313c:	10000ef8 	.word	0x10000ef8
    3140:	1000013c 	.word	0x1000013c
    3144:	1000120c 	.word	0x1000120c
    3148:	1000013e 	.word	0x1000013e
    314c:	1000110c 	.word	0x1000110c

00003150 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3150:	b480      	push	{r7}
    3152:	b083      	sub	sp, #12
    3154:	af00      	add	r7, sp, #0
    3156:	4603      	mov	r3, r0
    3158:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    315a:	4908      	ldr	r1, [pc, #32]	; (317c <NVIC_EnableIRQ+0x2c>)
    315c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    3160:	095b      	lsrs	r3, r3, #5
    3162:	79fa      	ldrb	r2, [r7, #7]
    3164:	f002 021f 	and.w	r2, r2, #31
    3168:	2001      	movs	r0, #1
    316a:	fa00 f202 	lsl.w	r2, r0, r2
    316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3172:	370c      	adds	r7, #12
    3174:	46bd      	mov	sp, r7
    3176:	f85d 7b04 	ldr.w	r7, [sp], #4
    317a:	4770      	bx	lr
    317c:	e000e100 	.word	0xe000e100

00003180 <WDT_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void WDT_IRQHandler(void) {
    3180:	b480      	push	{r7}
    3182:	af00      	add	r7, sp, #0
	LPC_WDT->WDMOD &= ~WDTOF; /* clear the time-out terrupt flag */
    3184:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3188:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    318c:	781b      	ldrb	r3, [r3, #0]
    318e:	b2db      	uxtb	r3, r3
    3190:	f023 0304 	bic.w	r3, r3, #4
    3194:	b2db      	uxtb	r3, r3
    3196:	7013      	strb	r3, [r2, #0]
	wdt_counter++;
    3198:	4b04      	ldr	r3, [pc, #16]	; (31ac <WDT_IRQHandler+0x2c>)
    319a:	681b      	ldr	r3, [r3, #0]
    319c:	3301      	adds	r3, #1
    319e:	4a03      	ldr	r2, [pc, #12]	; (31ac <WDT_IRQHandler+0x2c>)
    31a0:	6013      	str	r3, [r2, #0]
	return;
    31a2:	bf00      	nop
}
    31a4:	46bd      	mov	sp, r7
    31a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    31aa:	4770      	bx	lr
    31ac:	10001a08 	.word	0x10001a08

000031b0 <WDTInit>:
	//WDT_SetTimeOutRTC(300 * 1000 * 1000);
	LPC_WDT->WDMOD = 0x3;
	//WDTFeed();
}

uint32_t WDTInit(uint32_t feed) {
    31b0:	b580      	push	{r7, lr}
    31b2:	b082      	sub	sp, #8
    31b4:	af00      	add	r7, sp, #0
    31b6:	6078      	str	r0, [r7, #4]
	wdt_counter = 0;
    31b8:	4b0b      	ldr	r3, [pc, #44]	; (31e8 <WDTInit+0x38>)
    31ba:	2200      	movs	r2, #0
    31bc:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(WDT_IRQn);
    31be:	2000      	movs	r0, #0
    31c0:	f7ff ffc6 	bl	3150 <NVIC_EnableIRQ>
	LPC_WDT->WDCLKSEL = 0x1;//0x0 = IRC (Internal RC Oscillator) ,0x1 = APB Peripheral clock
    31c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31c8:	2201      	movs	r2, #1
    31ca:	611a      	str	r2, [r3, #16]
	//IRC is active even in Deep Sleep, and WDT Interrupt can wake up MCU in this mode.
	LPC_WDT->WDTC = feed; /* once WDEN is set, the WDT will start after feeding */
    31cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	6053      	str	r3, [r2, #4]
	LPC_WDT->WDMOD = 0x3;
    31d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31d8:	2203      	movs	r2, #3
    31da:	701a      	strb	r2, [r3, #0]
	WDTFeed();
    31dc:	f000 f806 	bl	31ec <WDTFeed>
}
    31e0:	4618      	mov	r0, r3
    31e2:	3708      	adds	r7, #8
    31e4:	46bd      	mov	sp, r7
    31e6:	bd80      	pop	{r7, pc}
    31e8:	10001a08 	.word	0x10001a08

000031ec <WDTFeed>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void WDTFeed(void) {
    31ec:	b480      	push	{r7}
    31ee:	af00      	add	r7, sp, #0
	LPC_WDT->WDFEED = 0xAA; /* Feeding sequence */
    31f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31f4:	22aa      	movs	r2, #170	; 0xaa
    31f6:	721a      	strb	r2, [r3, #8]
	LPC_WDT->WDFEED = 0x55;
    31f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31fc:	2255      	movs	r2, #85	; 0x55
    31fe:	721a      	strb	r2, [r3, #8]
	return;
    3200:	bf00      	nop
}
    3202:	46bd      	mov	sp, r7
    3204:	f85d 7b04 	ldr.w	r7, [sp], #4
    3208:	4770      	bx	lr
    320a:	bf00      	nop

0000320c <XModemReadByte>:
//	(*pByte) = receiveBuf[dataIndex++];
//	return (1);
//}


uint8_t XModemReadByte( unsigned char* pByte) {
    320c:	b580      	push	{r7, lr}
    320e:	b08a      	sub	sp, #40	; 0x28
    3210:	af00      	add	r7, sp, #0
    3212:	6078      	str	r0, [r7, #4]
	char* pnewline;
	char asciiLen[10];
	unsigned int len, i;
	unsigned dataoffset;

	if (dataIndex >= dataLen) {
    3214:	4b49      	ldr	r3, [pc, #292]	; (333c <XModemReadByte+0x130>)
    3216:	881a      	ldrh	r2, [r3, #0]
    3218:	4b49      	ldr	r3, [pc, #292]	; (3340 <XModemReadByte+0x134>)
    321a:	881b      	ldrh	r3, [r3, #0]
    321c:	429a      	cmp	r2, r3
    321e:	d37c      	bcc.n	331a <XModemReadByte+0x10e>
		// all buffer consumed read more from TCP connection
		dataLen = GSM_TCP_Recv( receiveBuf, 1500 );
    3220:	4848      	ldr	r0, [pc, #288]	; (3344 <XModemReadByte+0x138>)
    3222:	f240 51dc 	movw	r1, #1500	; 0x5dc
    3226:	f7fd fc2d 	bl	a84 <GSM_TCP_Recv>
    322a:	4603      	mov	r3, r0
    322c:	b29a      	uxth	r2, r3
    322e:	4b44      	ldr	r3, [pc, #272]	; (3340 <XModemReadByte+0x134>)
    3230:	801a      	strh	r2, [r3, #0]
		receiveBuf[dataLen] = '\0';
    3232:	4b43      	ldr	r3, [pc, #268]	; (3340 <XModemReadByte+0x134>)
    3234:	881b      	ldrh	r3, [r3, #0]
    3236:	461a      	mov	r2, r3
    3238:	4b42      	ldr	r3, [pc, #264]	; (3344 <XModemReadByte+0x138>)
    323a:	2100      	movs	r1, #0
    323c:	5499      	strb	r1, [r3, r2]

		// find the length of the message between
		// ",TCP," and "\r\n"
		pdata = strstr( receiveBuf, "IPD" );
    323e:	4841      	ldr	r0, [pc, #260]	; (3344 <XModemReadByte+0x138>)
    3240:	4941      	ldr	r1, [pc, #260]	; (3348 <XModemReadByte+0x13c>)
    3242:	f002 f8fa 	bl	543a <strstr>
    3246:	4603      	mov	r3, r0
    3248:	627b      	str	r3, [r7, #36]	; 0x24
		if (pdata == NULL)
    324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    324c:	2b00      	cmp	r3, #0
    324e:	d117      	bne.n	3280 <XModemReadByte+0x74>
		{
			pdata = strstr( receiveBuf, ",TCP," );
    3250:	483c      	ldr	r0, [pc, #240]	; (3344 <XModemReadByte+0x138>)
    3252:	493e      	ldr	r1, [pc, #248]	; (334c <XModemReadByte+0x140>)
    3254:	f002 f8f1 	bl	543a <strstr>
    3258:	4603      	mov	r3, r0
    325a:	627b      	str	r3, [r7, #36]	; 0x24
			if (pdata == NULL) {
    325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    325e:	2b00      	cmp	r3, #0
    3260:	d101      	bne.n	3266 <XModemReadByte+0x5a>
				return (0);
    3262:	2300      	movs	r3, #0
    3264:	e065      	b.n	3332 <XModemReadByte+0x126>
			}

			pnewline = strstr(pdata, "\r\n");
    3266:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3268:	4939      	ldr	r1, [pc, #228]	; (3350 <XModemReadByte+0x144>)
    326a:	f002 f8e6 	bl	543a <strstr>
    326e:	4603      	mov	r3, r0
    3270:	623b      	str	r3, [r7, #32]
			dataoffset = 2;
    3272:	2302      	movs	r3, #2
    3274:	61bb      	str	r3, [r7, #24]
			if (pnewline == NULL) {
    3276:	6a3b      	ldr	r3, [r7, #32]
    3278:	2b00      	cmp	r3, #0
    327a:	d10e      	bne.n	329a <XModemReadByte+0x8e>
				return (0);
    327c:	2300      	movs	r3, #0
    327e:	e058      	b.n	3332 <XModemReadByte+0x126>
			}

		} else
		{
			pnewline = strstr( pdata, "TCP:" );
    3280:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3282:	4934      	ldr	r1, [pc, #208]	; (3354 <XModemReadByte+0x148>)
    3284:	f002 f8d9 	bl	543a <strstr>
    3288:	4603      	mov	r3, r0
    328a:	623b      	str	r3, [r7, #32]
			if (pnewline == NULL) {
    328c:	6a3b      	ldr	r3, [r7, #32]
    328e:	2b00      	cmp	r3, #0
    3290:	d101      	bne.n	3296 <XModemReadByte+0x8a>
				return (0);
    3292:	2300      	movs	r3, #0
    3294:	e04d      	b.n	3332 <XModemReadByte+0x126>
			}
			dataoffset = 4;
    3296:	2304      	movs	r3, #4
    3298:	61bb      	str	r3, [r7, #24]
		}

		strncpy( asciiLen, pdata + 3, pnewline - pdata );
    329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    329c:	1cd9      	adds	r1, r3, #3
    329e:	6a3a      	ldr	r2, [r7, #32]
    32a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32a2:	1ad3      	subs	r3, r2, r3
    32a4:	f107 0208 	add.w	r2, r7, #8
    32a8:	4610      	mov	r0, r2
    32aa:	461a      	mov	r2, r3
    32ac:	f002 f899 	bl	53e2 <strncpy>

		asciiLen[pnewline - pdata] = '\0';
    32b0:	6a3a      	ldr	r2, [r7, #32]
    32b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32b4:	1ad3      	subs	r3, r2, r3
    32b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
    32ba:	4413      	add	r3, r2
    32bc:	2200      	movs	r2, #0
    32be:	f803 2c20 	strb.w	r2, [r3, #-32]

		len = atoi(asciiLen);
    32c2:	f107 0308 	add.w	r3, r7, #8
    32c6:	4618      	mov	r0, r3
    32c8:	f002 f80c 	bl	52e4 <atoi>
    32cc:	4603      	mov	r3, r0
    32ce:	617b      	str	r3, [r7, #20]

//		int count = sprintf(asciiLen, "%d", len );
//		asciiLen[count] = '\0';
//		TraceDumpHex(asciiLen, strlen(asciiLen));

		for (i = 0; i < len; i++) {
    32d0:	2300      	movs	r3, #0
    32d2:	61fb      	str	r3, [r7, #28]
    32d4:	e00d      	b.n	32f2 <XModemReadByte+0xe6>
			receiveBuf[i] = *(pnewline + dataoffset + i);
    32d6:	69ba      	ldr	r2, [r7, #24]
    32d8:	69fb      	ldr	r3, [r7, #28]
    32da:	4413      	add	r3, r2
    32dc:	6a3a      	ldr	r2, [r7, #32]
    32de:	4413      	add	r3, r2
    32e0:	7819      	ldrb	r1, [r3, #0]
    32e2:	4a18      	ldr	r2, [pc, #96]	; (3344 <XModemReadByte+0x138>)
    32e4:	69fb      	ldr	r3, [r7, #28]
    32e6:	4413      	add	r3, r2
    32e8:	460a      	mov	r2, r1
    32ea:	701a      	strb	r2, [r3, #0]

//		int count = sprintf(asciiLen, "%d", len );
//		asciiLen[count] = '\0';
//		TraceDumpHex(asciiLen, strlen(asciiLen));

		for (i = 0; i < len; i++) {
    32ec:	69fb      	ldr	r3, [r7, #28]
    32ee:	3301      	adds	r3, #1
    32f0:	61fb      	str	r3, [r7, #28]
    32f2:	69fa      	ldr	r2, [r7, #28]
    32f4:	697b      	ldr	r3, [r7, #20]
    32f6:	429a      	cmp	r2, r3
    32f8:	d3ed      	bcc.n	32d6 <XModemReadByte+0xca>
			receiveBuf[i] = *(pnewline + dataoffset + i);
		}
		dataLen   = len;
    32fa:	697b      	ldr	r3, [r7, #20]
    32fc:	b29a      	uxth	r2, r3
    32fe:	4b10      	ldr	r3, [pc, #64]	; (3340 <XModemReadByte+0x134>)
    3300:	801a      	strh	r2, [r3, #0]
		dataIndex = 0;
    3302:	4b0e      	ldr	r3, [pc, #56]	; (333c <XModemReadByte+0x130>)
    3304:	2200      	movs	r2, #0
    3306:	801a      	strh	r2, [r3, #0]
		if( dataLen <= 0 ) {
    3308:	4b0d      	ldr	r3, [pc, #52]	; (3340 <XModemReadByte+0x134>)
    330a:	881b      	ldrh	r3, [r3, #0]
    330c:	2b00      	cmp	r3, #0
    330e:	d104      	bne.n	331a <XModemReadByte+0x10e>
			dataLen = 0;
    3310:	4b0b      	ldr	r3, [pc, #44]	; (3340 <XModemReadByte+0x134>)
    3312:	2200      	movs	r2, #0
    3314:	801a      	strh	r2, [r3, #0]
			return (0);  // no data available
    3316:	2300      	movs	r3, #0
    3318:	e00b      	b.n	3332 <XModemReadByte+0x126>
		}
	}

	(*pByte) = receiveBuf[dataIndex++];
    331a:	4b08      	ldr	r3, [pc, #32]	; (333c <XModemReadByte+0x130>)
    331c:	881b      	ldrh	r3, [r3, #0]
    331e:	1c5a      	adds	r2, r3, #1
    3320:	b291      	uxth	r1, r2
    3322:	4a06      	ldr	r2, [pc, #24]	; (333c <XModemReadByte+0x130>)
    3324:	8011      	strh	r1, [r2, #0]
    3326:	461a      	mov	r2, r3
    3328:	4b06      	ldr	r3, [pc, #24]	; (3344 <XModemReadByte+0x138>)
    332a:	5c9a      	ldrb	r2, [r3, r2]
    332c:	687b      	ldr	r3, [r7, #4]
    332e:	701a      	strb	r2, [r3, #0]
	return (1);
    3330:	2301      	movs	r3, #1
}
    3332:	4618      	mov	r0, r3
    3334:	3728      	adds	r7, #40	; 0x28
    3336:	46bd      	mov	sp, r7
    3338:	bd80      	pop	{r7, pc}
    333a:	bf00      	nop
    333c:	10000b1e 	.word	0x10000b1e
    3340:	10000b1c 	.word	0x10000b1c
    3344:	10000540 	.word	0x10000540
    3348:	0000711c 	.word	0x0000711c
    334c:	00007120 	.word	0x00007120
    3350:	00007128 	.word	0x00007128
    3354:	0000712c 	.word	0x0000712c

00003358 <XModem1K_Client>:


int XModem1K_Client(
		uint32_t (*pu32Xmodem1kRxPacketCallback)(uint8_t *pu8Data,
				uint16_t u16Len)) {
    3358:	b580      	push	{r7, lr}
    335a:	b0be      	sub	sp, #248	; 0xf8
    335c:	af00      	add	r7, sp, #0
    335e:	6078      	str	r0, [r7, #4]
	uint32_t u32InProgress = 1;
    3360:	2301      	movs	r3, #1
    3362:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	uint32_t u32State = STATE_IDLE;
    3366:	2300      	movs	r3, #0
    3368:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint32_t u32ByteCount;
	uint32_t u32PktLen;
	uint16_t u16CRC, calculatedCRC;
	uint16_t frameNum = 0;
    336c:	2300      	movs	r3, #0
    336e:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8

	uint32_t trials;

	/* Prepare UART for RX/TX */

	while (u32InProgress) {
    3372:	e1a7      	b.n	36c4 <XModem1K_Client+0x36c>
		WDTFeed();
    3374:	f7ff ff3a 	bl	31ec <WDTFeed>
		switch (u32State) {
    3378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    337c:	2b01      	cmp	r3, #1
    337e:	d01e      	beq.n	33be <XModem1K_Client+0x66>
    3380:	2b01      	cmp	r3, #1
    3382:	d302      	bcc.n	338a <XModem1K_Client+0x32>
    3384:	2b02      	cmp	r3, #2
    3386:	d060      	beq.n	344a <XModem1K_Client+0xf2>
    3388:	e19b      	b.n	36c2 <XModem1K_Client+0x36a>
		case STATE_IDLE: {

			/* Send command to server indicating we are ready to receive */
			uint8_t u8Cmd = POLL;
    338a:	2343      	movs	r3, #67	; 0x43
    338c:	74fb      	strb	r3, [r7, #19]

			TraceNL( "Start downloading" );
    338e:	48d2      	ldr	r0, [pc, #840]	; (36d8 <XModem1K_Client+0x380>)
    3390:	f7ff f96e 	bl	2670 <TraceNL>
			TracePutcHex( u8Cmd );
    3394:	7cfb      	ldrb	r3, [r7, #19]
    3396:	4618      	mov	r0, r3
    3398:	f7ff f990 	bl	26bc <TracePutcHex>
			GSM_TCP_Send(&u8Cmd, 1);
    339c:	f107 0313 	add.w	r3, r7, #19
    33a0:	4618      	mov	r0, r3
    33a2:	2101      	movs	r1, #1
    33a4:	f7fd fd4c 	bl	e40 <GSM_TCP_Send>

			/* Start timeout to send another poll if we do not get a response */
			vTimerStart(POLL_PERIOD_ms);
    33a8:	f644 6020 	movw	r0, #20000	; 0x4e20
    33ac:	f000 f9b6 	bl	371c <vTimerStart>
			trials   = DOWNLOAD_MAX_TRIALS;
    33b0:	230a      	movs	r3, #10
    33b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

			u32State = STATE_CONNECTING;
    33b6:	2301      	movs	r3, #1
    33b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		}
			break;
    33bc:	e182      	b.n	36c4 <XModem1K_Client+0x36c>

		case STATE_CONNECTING: {
			uint8_t u8Data;

			/* Check if a character has been received on the UART */
			if( XModemReadByte( &u8Data ) )
    33be:	f107 0312 	add.w	r3, r7, #18
    33c2:	4618      	mov	r0, r3
    33c4:	f7ff ff22 	bl	320c <XModemReadByte>
    33c8:	4603      	mov	r3, r0
    33ca:	2b00      	cmp	r3, #0
    33cc:	d010      	beq.n	33f0 <XModem1K_Client+0x98>
			{
				/* Expecting a start of packet character */
				if( u8Data == SOH )
    33ce:	7cbb      	ldrb	r3, [r7, #18]
    33d0:	2b01      	cmp	r3, #1
    33d2:	d139      	bne.n	3448 <XModem1K_Client+0xf0>
				{
					/* SOH indicates short pay load packet is being transmitted */
					u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    33d4:	2380      	movs	r3, #128	; 0x80
    33d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
					u32ByteCount = 1;
    33da:	2301      	movs	r3, #1
    33dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

					/* Start packet timeout */
					vTimerStart( PACKET_TIMEOUT_PERIOD_ms);
    33e0:	f644 6020 	movw	r0, #20000	; 0x4e20
    33e4:	f000 f99a 	bl	371c <vTimerStart>

					/* Wait for a further characters */
					u32State = STATE_RECEIVING;
    33e8:	2302      	movs	r3, #2
    33ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    33ee:	e169      	b.n	36c4 <XModem1K_Client+0x36c>
				}
			} else /* No data received yet, check poll command timeout */
			{
				if ((LPC_TIM0->TCR & 0x01) == 0) {
    33f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    33f4:	685b      	ldr	r3, [r3, #4]
    33f6:	f003 0301 	and.w	r3, r3, #1
    33fa:	2b00      	cmp	r3, #0
    33fc:	f040 8162 	bne.w	36c4 <XModem1K_Client+0x36c>
					/* Timeout expired following poll command transmission so try again.. */
					uint8_t u8Cmd = POLL;
    3400:	2343      	movs	r3, #67	; 0x43
    3402:	747b      	strb	r3, [r7, #17]

					if (trials-- > 0) {
    3404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    3408:	1e5a      	subs	r2, r3, #1
    340a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
    340e:	2b00      	cmp	r3, #0
    3410:	d014      	beq.n	343c <XModem1K_Client+0xe4>
						TraceNL("Connecting state timer expired sending  new request  ");
    3412:	48b2      	ldr	r0, [pc, #712]	; (36dc <XModem1K_Client+0x384>)
    3414:	f7ff f92c 	bl	2670 <TraceNL>
						TracePutcHex( u8Cmd );
    3418:	7c7b      	ldrb	r3, [r7, #17]
    341a:	4618      	mov	r0, r3
    341c:	f7ff f94e 	bl	26bc <TracePutcHex>
						TraceNL("\r\n");
    3420:	48af      	ldr	r0, [pc, #700]	; (36e0 <XModem1K_Client+0x388>)
    3422:	f7ff f925 	bl	2670 <TraceNL>
						GSM_TCP_Send(&u8Cmd, 1);
    3426:	f107 0311 	add.w	r3, r7, #17
    342a:	4618      	mov	r0, r3
    342c:	2101      	movs	r1, #1
    342e:	f7fd fd07 	bl	e40 <GSM_TCP_Send>

					/*
					 * Restart timeout to send another poll
					 * if we do not get a response
					 */
					vTimerStart( POLL_PERIOD_ms);
    3432:	f644 6020 	movw	r0, #20000	; 0x4e20
    3436:	f000 f971 	bl	371c <vTimerStart>
    343a:	e005      	b.n	3448 <XModem1K_Client+0xf0>
						TraceNL("Connecting state timer expired sending  new request  ");
						TracePutcHex( u8Cmd );
						TraceNL("\r\n");
						GSM_TCP_Send(&u8Cmd, 1);
					} else {
						TraceNL("No reply give up upgrading");
    343c:	48a9      	ldr	r0, [pc, #676]	; (36e4 <XModem1K_Client+0x38c>)
    343e:	f7ff f917 	bl	2670 <TraceNL>
						return ( DOWNLOAD_ERR_TIMEOUT );
    3442:	f04f 33ff 	mov.w	r3, #4294967295
    3446:	e142      	b.n	36ce <XModem1K_Client+0x376>
					 */
					vTimerStart( POLL_PERIOD_ms);
				}
			}
		}
			break;
    3448:	e13c      	b.n	36c4 <XModem1K_Client+0x36c>

		case STATE_RECEIVING: {
			uint8_t u8Data;

			/* Check if a character has been received on the UART */
			if( XModemReadByte( &u8Data ) )
    344a:	f107 0310 	add.w	r3, r7, #16
    344e:	4618      	mov	r0, r3
    3450:	f7ff fedc 	bl	320c <XModemReadByte>
    3454:	4603      	mov	r3, r0
    3456:	2b00      	cmp	r3, #0
    3458:	f000 810b 	beq.w	3672 <XModem1K_Client+0x31a>
			{
				// TracePutcHex( u8Data );
				/* Position of received byte determines action we take */
				if( u32ByteCount == 0 )
    345c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3460:	2b00      	cmp	r3, #0
    3462:	d13e      	bne.n	34e2 <XModem1K_Client+0x18a>
				{
					/* Expecting a start of packet character */
					if( u8Data == SOH ) {
    3464:	7c3b      	ldrb	r3, [r7, #16]
    3466:	2b01      	cmp	r3, #1
    3468:	d10a      	bne.n	3480 <XModem1K_Client+0x128>
						/* SOH indicates short pay load packet is being transmitted */
						u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    346a:	2380      	movs	r3, #128	; 0x80
    346c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
						u32ByteCount = 1;
    3470:	2301      	movs	r3, #1
    3472:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

						/* Start packet timeout */
						vTimerStart(PACKET_TIMEOUT_PERIOD_ms);
    3476:	f644 6020 	movw	r0, #20000	; 0x4e20
    347a:	f000 f94f 	bl	371c <vTimerStart>
    347e:	e11f      	b.n	36c0 <XModem1K_Client+0x368>
					} else if (u8Data == EOT) {
    3480:	7c3b      	ldrb	r3, [r7, #16]
    3482:	2b04      	cmp	r3, #4
    3484:	f040 811c 	bne.w	36c0 <XModem1K_Client+0x368>
						TraceNL("Received EOT ");
    3488:	4897      	ldr	r0, [pc, #604]	; (36e8 <XModem1K_Client+0x390>)
    348a:	f7ff f8f1 	bl	2670 <TraceNL>
						/* Server indicating transmission is complete */
						TraceNL("Closing TCP connection ");
    348e:	4897      	ldr	r0, [pc, #604]	; (36ec <XModem1K_Client+0x394>)
    3490:	f7ff f8ee 	bl	2670 <TraceNL>
						GSM_TCP_Close( );
    3494:	f7fd fef2 	bl	127c <GSM_TCP_Close>

						u32InProgress = 0;
    3498:	2300      	movs	r3, #0
    349a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

						sprintf( buffer, "byte count: %d, packet len %d\r\n", u32ByteCount, u32PktLen);
    349e:	f107 0314 	add.w	r3, r7, #20
    34a2:	4618      	mov	r0, r3
    34a4:	4992      	ldr	r1, [pc, #584]	; (36f0 <XModem1K_Client+0x398>)
    34a6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    34aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    34ae:	f000 fb0b 	bl	3ac8 <sprintf>
						TraceDumpHex( buffer, strlen( buffer ) );
    34b2:	f107 0314 	add.w	r3, r7, #20
    34b6:	4618      	mov	r0, r3
    34b8:	f001 ff6e 	bl	5398 <strlen>
    34bc:	4602      	mov	r2, r0
    34be:	f107 0314 	add.w	r3, r7, #20
    34c2:	4618      	mov	r0, r3
    34c4:	4611      	mov	r1, r2
    34c6:	f7ff f915 	bl	26f4 <TraceDumpHex>

						/* Call the call back function to indicated a complete transmission */
						/* If length == 0, then EOT */
						pu32Xmodem1kRxPacketCallback(&au8RxBuffer[0], 0);
    34ca:	687b      	ldr	r3, [r7, #4]
    34cc:	4889      	ldr	r0, [pc, #548]	; (36f4 <XModem1K_Client+0x39c>)
    34ce:	2100      	movs	r1, #0
    34d0:	4798      	blx	r3

					    // We should have completed the image reception now dump it to see if any problem.
						TraceDumpHex( SECONDARY_IMAGE_LOAD_ADDR, 20000 );
    34d2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    34d6:	f644 6120 	movw	r1, #20000	; 0x4e20
    34da:	f7ff f90b 	bl	26f4 <TraceDumpHex>

						return ( 0 );
    34de:	2300      	movs	r3, #0
    34e0:	e0f5      	b.n	36ce <XModem1K_Client+0x376>

					} else {
						// Unexpected char ignore it
					}
				} else if (u32ByteCount == 1) {
    34e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    34e6:	2b01      	cmp	r3, #1
    34e8:	d108      	bne.n	34fc <XModem1K_Client+0x1a4>
					/* Byte 1 is the packet number - should be different from last one we received */
					frameNum = u8Data;
    34ea:	7c3b      	ldrb	r3, [r7, #16]
    34ec:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
					u32ByteCount++;
    34f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    34f4:	3301      	adds	r3, #1
    34f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    34fa:	e0e1      	b.n	36c0 <XModem1K_Client+0x368>
				} else if (u32ByteCount == 2) {
    34fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3500:	2b02      	cmp	r3, #2
    3502:	d11f      	bne.n	3544 <XModem1K_Client+0x1ec>
					/* Byte 2 is the packet number inverted - check for error with last byte */
					frameNum <<= 8;
    3504:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
    3508:	021b      	lsls	r3, r3, #8
    350a:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
					frameNum |= u8Data;
    350e:	7c3b      	ldrb	r3, [r7, #16]
    3510:	b29a      	uxth	r2, r3
    3512:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
    3516:	4313      	orrs	r3, r2
    3518:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
					sprintf( buffer, "frame number :  %d\r\n", frameNum );
    351c:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
    3520:	f107 0214 	add.w	r2, r7, #20
    3524:	4610      	mov	r0, r2
    3526:	4974      	ldr	r1, [pc, #464]	; (36f8 <XModem1K_Client+0x3a0>)
    3528:	461a      	mov	r2, r3
    352a:	f000 facd 	bl	3ac8 <sprintf>
				    TraceNL( buffer );
    352e:	f107 0314 	add.w	r3, r7, #20
    3532:	4618      	mov	r0, r3
    3534:	f7ff f89c 	bl	2670 <TraceNL>

					u32ByteCount++;
    3538:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    353c:	3301      	adds	r3, #1
    353e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    3542:	e0bd      	b.n	36c0 <XModem1K_Client+0x368>
				} else if( ((u32ByteCount == 131) && (u32PktLen == SHORT_PACKET_PAYLOAD_LEN)) )
    3544:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3548:	2b83      	cmp	r3, #131	; 0x83
    354a:	d10c      	bne.n	3566 <XModem1K_Client+0x20e>
    354c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    3550:	2b80      	cmp	r3, #128	; 0x80
    3552:	d108      	bne.n	3566 <XModem1K_Client+0x20e>
				{
					/* If pay load is short byte 131 is the MS byte of the packet CRC, if pay load
					 is long byte 1027 is the MS byte of the packet CRC. */
					u16CRC = u8Data;
    3554:	7c3b      	ldrb	r3, [r7, #16]
    3556:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
					u32ByteCount++;
    355a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    355e:	3301      	adds	r3, #1
    3560:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    3564:	e084      	b.n	3670 <XModem1K_Client+0x318>

				}
				else if( (u32ByteCount == 132) && (u32PktLen == SHORT_PACKET_PAYLOAD_LEN) )
    3566:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    356a:	2b84      	cmp	r3, #132	; 0x84
    356c:	d174      	bne.n	3658 <XModem1K_Client+0x300>
    356e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    3572:	2b80      	cmp	r3, #128	; 0x80
    3574:	d170      	bne.n	3658 <XModem1K_Client+0x300>
				{
					/* If pay load is short byte 132 is the LS byte of the packet CRC, if pay load
					 is long byte 1028 is the LS byte of the packet CRC. */
					u16CRC <<= 8;
    3576:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
    357a:	021b      	lsls	r3, r3, #8
    357c:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
					u16CRC |= u8Data;
    3580:	7c3b      	ldrb	r3, [r7, #16]
    3582:	b29a      	uxth	r2, r3
    3584:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
    3588:	4313      	orrs	r3, r2
    358a:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea

					calculatedCRC = u16CRC_Calc16( &au8RxBuffer[0], u32PktLen );
    358e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    3592:	b29b      	uxth	r3, r3
    3594:	b21b      	sxth	r3, r3
    3596:	4857      	ldr	r0, [pc, #348]	; (36f4 <XModem1K_Client+0x39c>)
    3598:	4619      	mov	r1, r3
    359a:	f7fd fe83 	bl	12a4 <u16CRC_Calc16>
    359e:	4603      	mov	r3, r0
    35a0:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
					sprintf( buffer, "calculaetd crc : 0x%X\r\n", calculatedCRC );
    35a4:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
    35a8:	f107 0214 	add.w	r2, r7, #20
    35ac:	4610      	mov	r0, r2
    35ae:	4953      	ldr	r1, [pc, #332]	; (36fc <XModem1K_Client+0x3a4>)
    35b0:	461a      	mov	r2, r3
    35b2:	f000 fa89 	bl	3ac8 <sprintf>
				    TraceNL( buffer );
    35b6:	f107 0314 	add.w	r3, r7, #20
    35ba:	4618      	mov	r0, r3
    35bc:	f7ff f858 	bl	2670 <TraceNL>

					/* Check the received CRC against the CRC we generate on the packet data */
					if( calculatedCRC == u16CRC )
    35c0:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
    35c4:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
    35c8:	429a      	cmp	r2, r3
    35ca:	d136      	bne.n	363a <XModem1K_Client+0x2e2>
//					if( 1 )
					{
						uint8_t u8Cmd;

						TraceNL("CRC matches ");
    35cc:	484c      	ldr	r0, [pc, #304]	; (3700 <XModem1K_Client+0x3a8>)
    35ce:	f7ff f84f 	bl	2670 <TraceNL>
						/* Have now received full packet, call handler
						 * BEFORE sending ACK to application
						 can process data before more is sent. */
						if( pu32Xmodem1kRxPacketCallback(&au8RxBuffer[0], u32PktLen) != 0 )
    35d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    35d6:	b29a      	uxth	r2, r3
    35d8:	687b      	ldr	r3, [r7, #4]
    35da:	4846      	ldr	r0, [pc, #280]	; (36f4 <XModem1K_Client+0x39c>)
    35dc:	4611      	mov	r1, r2
    35de:	4798      	blx	r3
    35e0:	4603      	mov	r3, r0
    35e2:	2b00      	cmp	r3, #0
    35e4:	d012      	beq.n	360c <XModem1K_Client+0x2b4>
						{
							/* Packet handled successfully, send ACK to server indicating
							 *  we are ready for next packet */
							u8Cmd = ACK;
    35e6:	2306      	movs	r3, #6
    35e8:	73fb      	strb	r3, [r7, #15]
							TraceNL("Received a frame ");
    35ea:	4846      	ldr	r0, [pc, #280]	; (3704 <XModem1K_Client+0x3ac>)
    35ec:	f7ff f840 	bl	2670 <TraceNL>
							TraceNL("Sending  ACK ");
    35f0:	4845      	ldr	r0, [pc, #276]	; (3708 <XModem1K_Client+0x3b0>)
    35f2:	f7ff f83d 	bl	2670 <TraceNL>
							GSM_TCP_Send( &u8Cmd, 1 );
    35f6:	f107 030f 	add.w	r3, r7, #15
    35fa:	4618      	mov	r0, r3
    35fc:	2101      	movs	r1, #1
    35fe:	f7fd fc1f 	bl	e40 <GSM_TCP_Send>
							DelayMs( 1000 );
    3602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3606:	f7ff f80d 	bl	2624 <DelayMs>
    360a:	e021      	b.n	3650 <XModem1K_Client+0x2f8>
						} else
						{
							/* Something went wrong with packet handler,
							 * all we can do is send NAK causing the
							 packet to be retransmitted by the server.. */
							u8Cmd = ACK;
    360c:	2306      	movs	r3, #6
    360e:	73fb      	strb	r3, [r7, #15]
							TraceNL("Sending  NACK");
    3610:	483e      	ldr	r0, [pc, #248]	; (370c <XModem1K_Client+0x3b4>)
    3612:	f7ff f82d 	bl	2670 <TraceNL>
							TracePutcHex( u8Cmd );
    3616:	7bfb      	ldrb	r3, [r7, #15]
    3618:	4618      	mov	r0, r3
    361a:	f7ff f84f 	bl	26bc <TracePutcHex>
							TraceNL("\r\n");
    361e:	4830      	ldr	r0, [pc, #192]	; (36e0 <XModem1K_Client+0x388>)
    3620:	f7ff f826 	bl	2670 <TraceNL>

							GSM_TCP_Send(&u8Cmd, 1);
    3624:	f107 030f 	add.w	r3, r7, #15
    3628:	4618      	mov	r0, r3
    362a:	2101      	movs	r1, #1
    362c:	f7fd fc08 	bl	e40 <GSM_TCP_Send>
							DelayMs( 1000 );
    3630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3634:	f7fe fff6 	bl	2624 <DelayMs>
    3638:	e00a      	b.n	3650 <XModem1K_Client+0x2f8>
						}
					} else /* Error CRC calculated does not match that received */
					{
						/* Indicate problem to server - should result in packet being resent.. */
						uint8_t u8Cmd = NAK;
    363a:	2315      	movs	r3, #21
    363c:	73bb      	strb	r3, [r7, #14]
						TraceNL("CRC does not match  NACKing");
    363e:	4834      	ldr	r0, [pc, #208]	; (3710 <XModem1K_Client+0x3b8>)
    3640:	f7ff f816 	bl	2670 <TraceNL>
						GSM_TCP_Send(&u8Cmd, 1);
    3644:	f107 030e 	add.w	r3, r7, #14
    3648:	4618      	mov	r0, r3
    364a:	2101      	movs	r1, #1
    364c:	f7fd fbf8 	bl	e40 <GSM_TCP_Send>
					}
					u32ByteCount = 0;
    3650:	2300      	movs	r3, #0
    3652:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
					u16CRC = u8Data;
					u32ByteCount++;

				}
				else if( (u32ByteCount == 132) && (u32PktLen == SHORT_PACKET_PAYLOAD_LEN) )
				{
    3656:	e00b      	b.n	3670 <XModem1K_Client+0x318>
					}
					u32ByteCount = 0;

				} else {
					/* Must be pay load data so store */
					au8RxBuffer[u32ByteCount - PACKET_HEADER_LEN] = u8Data;
    3658:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    365c:	3b03      	subs	r3, #3
    365e:	7c39      	ldrb	r1, [r7, #16]
    3660:	4a24      	ldr	r2, [pc, #144]	; (36f4 <XModem1K_Client+0x39c>)
    3662:	54d1      	strb	r1, [r2, r3]
					u32ByteCount++;
    3664:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3668:	3301      	adds	r3, #1
    366a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    366e:	e027      	b.n	36c0 <XModem1K_Client+0x368>
    3670:	e026      	b.n	36c0 <XModem1K_Client+0x368>
				}
			}
			else
			{
				if( (LPC_TIM0->TCR & 0x01) == 0 )
    3672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3676:	685b      	ldr	r3, [r3, #4]
    3678:	f003 0301 	and.w	r3, r3, #1
    367c:	2b00      	cmp	r3, #0
    367e:	d11f      	bne.n	36c0 <XModem1K_Client+0x368>
				{
					/* Timeout expired no data received stop upgrade  */
					if (trials-- > 0)
    3680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    3684:	1e5a      	subs	r2, r3, #1
    3686:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
    368a:	2b00      	cmp	r3, #0
    368c:	d012      	beq.n	36b4 <XModem1K_Client+0x35c>
					{
						TraceNL("Time out in RECEIVING   ");
    368e:	4821      	ldr	r0, [pc, #132]	; (3714 <XModem1K_Client+0x3bc>)
    3690:	f7fe ffee 	bl	2670 <TraceNL>
						uint8_t u8Cmd = NAK;
    3694:	2315      	movs	r3, #21
    3696:	737b      	strb	r3, [r7, #13]
						GSM_TCP_Send(&u8Cmd, 1);
    3698:	f107 030d 	add.w	r3, r7, #13
    369c:	4618      	mov	r0, r3
    369e:	2101      	movs	r1, #1
    36a0:	f7fd fbce 	bl	e40 <GSM_TCP_Send>

						u32ByteCount = 0;
    36a4:	2300      	movs	r3, #0
    36a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
						vTimerStart( POLL_PERIOD_ms);
    36aa:	f644 6020 	movw	r0, #20000	; 0x4e20
    36ae:	f000 f835 	bl	371c <vTimerStart>
    36b2:	e005      	b.n	36c0 <XModem1K_Client+0x368>
					} else {
						// no more trying giving up upgrading
						TraceNL("Download process failed giving up upgrading");
    36b4:	4818      	ldr	r0, [pc, #96]	; (3718 <XModem1K_Client+0x3c0>)
    36b6:	f7fe ffdb 	bl	2670 <TraceNL>
						return ( DOWNLOAD_ERR_TIMEOUT );
    36ba:	f04f 33ff 	mov.w	r3, #4294967295
    36be:	e006      	b.n	36ce <XModem1K_Client+0x376>
					}
				}
			}
		}
			break;
    36c0:	e000      	b.n	36c4 <XModem1K_Client+0x36c>

		default:
			break;
    36c2:	bf00      	nop

	uint32_t trials;

	/* Prepare UART for RX/TX */

	while (u32InProgress) {
    36c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    36c8:	2b00      	cmp	r3, #0
    36ca:	f47f ae53 	bne.w	3374 <XModem1K_Client+0x1c>

		default:
			break;
		}
	}
}
    36ce:	4618      	mov	r0, r3
    36d0:	37f8      	adds	r7, #248	; 0xf8
    36d2:	46bd      	mov	sp, r7
    36d4:	bd80      	pop	{r7, pc}
    36d6:	bf00      	nop
    36d8:	00007134 	.word	0x00007134
    36dc:	00007148 	.word	0x00007148
    36e0:	00007128 	.word	0x00007128
    36e4:	00007180 	.word	0x00007180
    36e8:	0000719c 	.word	0x0000719c
    36ec:	000071ac 	.word	0x000071ac
    36f0:	000071c4 	.word	0x000071c4
    36f4:	10000140 	.word	0x10000140
    36f8:	000071e4 	.word	0x000071e4
    36fc:	000071fc 	.word	0x000071fc
    3700:	00007214 	.word	0x00007214
    3704:	00007224 	.word	0x00007224
    3708:	00007238 	.word	0x00007238
    370c:	00007248 	.word	0x00007248
    3710:	00007258 	.word	0x00007258
    3714:	00007274 	.word	0x00007274
    3718:	00007290 	.word	0x00007290

0000371c <vTimerStart>:
 ** Parameters:	     None
 **
 ** Returned value:  None
 **
 *****************************************************************************/
static void vTimerStart(uint32_t u32Periodms) {
    371c:	b480      	push	{r7}
    371e:	b083      	sub	sp, #12
    3720:	af00      	add	r7, sp, #0
    3722:	6078      	str	r0, [r7, #4]
	/* Enable the timer clock */
	LPC_SC->PCONP |= (1UL << 1);
    3724:	4a19      	ldr	r2, [pc, #100]	; (378c <vTimerStart+0x70>)
    3726:	4b19      	ldr	r3, [pc, #100]	; (378c <vTimerStart+0x70>)
    3728:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    372c:	f043 0302 	orr.w	r3, r3, #2
    3730:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

	/* Configure the timer so that we can poll for a match */
	LPC_TIM0->TCR = 0x02; /* reset timer */
    3734:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3738:	2202      	movs	r2, #2
    373a:	605a      	str	r2, [r3, #4]
	LPC_TIM0->PR = 0x00; /* set prescaler to zero */
    373c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3740:	2200      	movs	r2, #0
    3742:	60da      	str	r2, [r3, #12]
	LPC_TIM0->MR0 = u32Periodms
    3744:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
			* ((SystemCoreClock / 4 / (LPC_TIM0->PR + 1)) / 1000UL);
    3748:	4b11      	ldr	r3, [pc, #68]	; (3790 <vTimerStart+0x74>)
    374a:	681b      	ldr	r3, [r3, #0]
    374c:	4a11      	ldr	r2, [pc, #68]	; (3794 <vTimerStart+0x78>)
    374e:	fba2 2303 	umull	r2, r3, r2, r3
    3752:	0a1a      	lsrs	r2, r3, #8
    3754:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3758:	68db      	ldr	r3, [r3, #12]
    375a:	3301      	adds	r3, #1
    375c:	fbb2 f3f3 	udiv	r3, r2, r3
    3760:	687a      	ldr	r2, [r7, #4]
    3762:	fb02 f303 	mul.w	r3, r2, r3
	LPC_SC->PCONP |= (1UL << 1);

	/* Configure the timer so that we can poll for a match */
	LPC_TIM0->TCR = 0x02; /* reset timer */
	LPC_TIM0->PR = 0x00; /* set prescaler to zero */
	LPC_TIM0->MR0 = u32Periodms
    3766:	618b      	str	r3, [r1, #24]
			* ((SystemCoreClock / 4 / (LPC_TIM0->PR + 1)) / 1000UL);
	LPC_TIM0->IR = 0xFF; /* reset all interrupts */
    3768:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    376c:	22ff      	movs	r2, #255	; 0xff
    376e:	601a      	str	r2, [r3, #0]
	LPC_TIM0->MCR = 0x04; /* stop timer on match */
    3770:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3774:	2204      	movs	r2, #4
    3776:	615a      	str	r2, [r3, #20]
	LPC_TIM0->TCR = 0x01; /* start timer */
    3778:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    377c:	2201      	movs	r2, #1
    377e:	605a      	str	r2, [r3, #4]
}
    3780:	370c      	adds	r7, #12
    3782:	46bd      	mov	sp, r7
    3784:	f85d 7b04 	ldr.w	r7, [sp], #4
    3788:	4770      	bx	lr
    378a:	bf00      	nop
    378c:	400fc000 	.word	0x400fc000
    3790:	10000018 	.word	0x10000018
    3794:	10624dd3 	.word	0x10624dd3

00003798 <SystemCoreClockUpdate>:

/*----------------------------------------------------------------------------
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
    3798:	b538      	push	{r3, r4, r5, lr}

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    379a:	4b24      	ldr	r3, [pc, #144]	; (382c <SystemCoreClockUpdate+0x94>)
    379c:	4c24      	ldr	r4, [pc, #144]	; (3830 <SystemCoreClockUpdate+0x98>)
    379e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    37a2:	f3c2 6201 	ubfx	r2, r2, #24, #2
    37a6:	2a03      	cmp	r2, #3
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    37a8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    37ac:	f002 0203 	and.w	r2, r2, #3
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    37b0:	d128      	bne.n	3804 <SystemCoreClockUpdate+0x6c>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    37b2:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    37b6:	2a01      	cmp	r2, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    37b8:	f3c1 010e 	ubfx	r1, r1, #0, #15
    37bc:	f101 0101 	add.w	r1, r1, #1
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    37c0:	d009      	beq.n	37d6 <SystemCoreClockUpdate+0x3e>
    37c2:	2a02      	cmp	r2, #2
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    37c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    37c8:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    37cc:	f3c2 4207 	ubfx	r2, r2, #16, #8
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    37d0:	d009      	beq.n	37e6 <SystemCoreClockUpdate+0x4e>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = (IRC_OSC * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    37d2:	4818      	ldr	r0, [pc, #96]	; (3834 <SystemCoreClockUpdate+0x9c>)
    37d4:	e009      	b.n	37ea <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    37d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    37da:	4817      	ldr	r0, [pc, #92]	; (3838 <SystemCoreClockUpdate+0xa0>)
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
    37dc:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    37e0:	f3c2 4207 	ubfx	r2, r2, #16, #8
    37e4:	e001      	b.n	37ea <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    37e6:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
    37ea:	3201      	adds	r2, #1
    37ec:	2300      	movs	r3, #0
    37ee:	fba1 0100 	umull	r0, r1, r1, r0
    37f2:	f002 f935 	bl	5a60 <__aeabi_uldivmod>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    37f6:	b2ea      	uxtb	r2, r5
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    37f8:	3201      	adds	r2, #1
    37fa:	2300      	movs	r3, #0
    37fc:	f002 f930 	bl	5a60 <__aeabi_uldivmod>
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
    3800:	6020      	str	r0, [r4, #0]
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    3802:	bd38      	pop	{r3, r4, r5, pc}
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3804:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3808:	2a01      	cmp	r2, #1
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    380a:	b2db      	uxtb	r3, r3
    380c:	f103 0301 	add.w	r3, r3, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3810:	d003      	beq.n	381a <SystemCoreClockUpdate+0x82>
    3812:	2a02      	cmp	r2, #2
    3814:	d003      	beq.n	381e <SystemCoreClockUpdate+0x86>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3816:	4a09      	ldr	r2, [pc, #36]	; (383c <SystemCoreClockUpdate+0xa4>)
    3818:	e003      	b.n	3822 <SystemCoreClockUpdate+0x8a>
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    381a:	4a09      	ldr	r2, [pc, #36]	; (3840 <SystemCoreClockUpdate+0xa8>)
    381c:	e001      	b.n	3822 <SystemCoreClockUpdate+0x8a>
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    381e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
    3822:	fbb2 f3f3 	udiv	r3, r2, r3
    3826:	6023      	str	r3, [r4, #0]
    3828:	bd38      	pop	{r3, r4, r5, pc}
    382a:	bf00      	nop
    382c:	400fc000 	.word	0x400fc000
    3830:	10000018 	.word	0x10000018
    3834:	007a1200 	.word	0x007a1200
    3838:	016e3600 	.word	0x016e3600
    383c:	003d0900 	.word	0x003d0900
    3840:	00b71b00 	.word	0x00b71b00

00003844 <SystemInit>:
 *         Initialize the System.
 */
void SystemInit (void)
{
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
    3844:	4b34      	ldr	r3, [pc, #208]	; (3918 <SystemInit+0xd4>)
    3846:	2220      	movs	r2, #32
    3848:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    384c:	461a      	mov	r2, r3
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    384e:	f8d2 11a0 	ldr.w	r1, [r2, #416]	; 0x1a0
    3852:	4b31      	ldr	r3, [pc, #196]	; (3918 <SystemInit+0xd4>)
    3854:	0648      	lsls	r0, r1, #25
    3856:	d5fa      	bpl.n	384e <SystemInit+0xa>
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    3858:	2203      	movs	r2, #3
    385a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    385e:	2200      	movs	r2, #0
    3860:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    3864:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    3868:	4a2c      	ldr	r2, [pc, #176]	; (391c <SystemInit+0xd8>)
  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    386a:	2001      	movs	r0, #1
    386c:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    3870:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    3872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
  LPC_SC->PLL0FEED  = 0x55;
    3876:	2255      	movs	r2, #85	; 0x55

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    3878:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    387c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    3880:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    3884:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    388c:	4b22      	ldr	r3, [pc, #136]	; (3918 <SystemInit+0xd4>)
    388e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3892:	0151      	lsls	r1, r2, #5
    3894:	d5fa      	bpl.n	388c <SystemInit+0x48>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    3896:	2203      	movs	r2, #3
    3898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    389c:	22aa      	movs	r2, #170	; 0xaa
    389e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    38a2:	2255      	movs	r2, #85	; 0x55
    38a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    38a8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
    38ac:	4a1a      	ldr	r2, [pc, #104]	; (3918 <SystemInit+0xd4>)
    38ae:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
    38b2:	d0f9      	beq.n	38a8 <SystemInit+0x64>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
    38b4:	2323      	movs	r3, #35	; 0x23
    38b6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0xAA;
    38ba:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PLL1FEED  = 0x55;
    38bc:	2355      	movs	r3, #85	; 0x55

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    38be:	2001      	movs	r0, #1
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
  LPC_SC->PLL1FEED  = 0xAA;
    38c0:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    38c4:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    38c8:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    38cc:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    38d0:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    38d4:	4b10      	ldr	r3, [pc, #64]	; (3918 <SystemInit+0xd4>)
    38d6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    38da:	0552      	lsls	r2, r2, #21
    38dc:	d5fa      	bpl.n	38d4 <SystemInit+0x90>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    38de:	2203      	movs	r2, #3
    38e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    38e4:	22aa      	movs	r2, #170	; 0xaa
    38e6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    38ea:	2255      	movs	r2, #85	; 0x55
    38ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    38f0:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    38f4:	4a08      	ldr	r2, [pc, #32]	; (3918 <SystemInit+0xd4>)
    38f6:	f411 7f40 	tst.w	r1, #768	; 0x300
    38fa:	d0f9      	beq.n	38f0 <SystemInit+0xac>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    38fc:	4b08      	ldr	r3, [pc, #32]	; (3920 <SystemInit+0xdc>)
    38fe:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    3902:	2300      	movs	r3, #0
    3904:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = (LPC_SC->FLASHCFG & ~0x0000F000) | FLASHCFG_Val;
    3908:	6813      	ldr	r3, [r2, #0]
    390a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
    390e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    3912:	6013      	str	r3, [r2, #0]
    3914:	4770      	bx	lr
    3916:	bf00      	nop
    3918:	400fc000 	.word	0x400fc000
    391c:	00050063 	.word	0x00050063
    3920:	042887de 	.word	0x042887de

00003924 <__main>:
    3924:	b508      	push	{r3, lr}
    3926:	2000      	movs	r0, #0
    3928:	4601      	mov	r1, r0
    392a:	4602      	mov	r2, r0
    392c:	f000 fd84 	bl	4438 <_initio>
    3930:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3934:	f7fe bbac 	b.w	2090 <main>

00003938 <memset>:
    3938:	f002 bcfa 	b.w	6330 <__aeabi_lowlevel_memset>

0000393c <malloc>:
    393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    393e:	4b31      	ldr	r3, [pc, #196]	; (3a04 <malloc+0xc8>)
    3940:	1cc5      	adds	r5, r0, #3
    3942:	681c      	ldr	r4, [r3, #0]
    3944:	08ad      	lsrs	r5, r5, #2
    3946:	b198      	cbz	r0, 3970 <malloc+0x34>
    3948:	461f      	mov	r7, r3
    394a:	2600      	movs	r6, #0
    394c:	f105 0e0a 	add.w	lr, r5, #10
    3950:	f105 0c03 	add.w	ip, r5, #3
    3954:	e005      	b.n	3962 <malloc+0x26>
    3956:	6823      	ldr	r3, [r4, #0]
    3958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    395c:	d014      	beq.n	3988 <malloc+0x4c>
    395e:	4626      	mov	r6, r4
    3960:	68a4      	ldr	r4, [r4, #8]
    3962:	2c00      	cmp	r4, #0
    3964:	d1f7      	bne.n	3956 <malloc+0x1a>
    3966:	300c      	adds	r0, #12
    3968:	f001 fd76 	bl	5458 <_sbrk>
    396c:	1c43      	adds	r3, r0, #1
    396e:	d110      	bne.n	3992 <malloc+0x56>
    3970:	2000      	movs	r0, #0
    3972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3974:	6811      	ldr	r1, [r2, #0]
    3976:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    397a:	d115      	bne.n	39a8 <malloc+0x6c>
    397c:	6851      	ldr	r1, [r2, #4]
    397e:	440b      	add	r3, r1
    3980:	3303      	adds	r3, #3
    3982:	6063      	str	r3, [r4, #4]
    3984:	6893      	ldr	r3, [r2, #8]
    3986:	60a3      	str	r3, [r4, #8]
    3988:	68a2      	ldr	r2, [r4, #8]
    398a:	6863      	ldr	r3, [r4, #4]
    398c:	2a00      	cmp	r2, #0
    398e:	d1f1      	bne.n	3974 <malloc+0x38>
    3990:	e00a      	b.n	39a8 <malloc+0x6c>
    3992:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    3996:	e880 0028 	stmia.w	r0, {r3, r5}
    399a:	6084      	str	r4, [r0, #8]
    399c:	b90e      	cbnz	r6, 39a2 <malloc+0x66>
    399e:	6038      	str	r0, [r7, #0]
    39a0:	e000      	b.n	39a4 <malloc+0x68>
    39a2:	60b0      	str	r0, [r6, #8]
    39a4:	300c      	adds	r0, #12
    39a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39a8:	42ab      	cmp	r3, r5
    39aa:	db07      	blt.n	39bc <malloc+0x80>
    39ac:	459c      	cmp	ip, r3
    39ae:	db05      	blt.n	39bc <malloc+0x80>
    39b0:	4620      	mov	r0, r4
    39b2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    39b6:	f840 3b0c 	str.w	r3, [r0], #12
    39ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39bc:	4573      	cmp	r3, lr
    39be:	d911      	bls.n	39e4 <malloc+0xa8>
    39c0:	4620      	mov	r0, r4
    39c2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    39c6:	6065      	str	r5, [r4, #4]
    39c8:	f840 1b0c 	str.w	r1, [r0], #12
    39cc:	eb00 0185 	add.w	r1, r0, r5, lsl #2
    39d0:	60a1      	str	r1, [r4, #8]
    39d2:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    39d6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    39da:	1b5d      	subs	r5, r3, r5
    39dc:	3d03      	subs	r5, #3
    39de:	604d      	str	r5, [r1, #4]
    39e0:	608a      	str	r2, [r1, #8]
    39e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39e4:	2a00      	cmp	r2, #0
    39e6:	d1ba      	bne.n	395e <malloc+0x22>
    39e8:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    39ec:	f001 fd34 	bl	5458 <_sbrk>
    39f0:	3001      	adds	r0, #1
    39f2:	d0bd      	beq.n	3970 <malloc+0x34>
    39f4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    39f8:	e884 0028 	stmia.w	r4, {r3, r5}
    39fc:	f104 000c 	add.w	r0, r4, #12
    3a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a02:	bf00      	nop
    3a04:	10001b50 	.word	0x10001b50

00003a08 <free>:
    3a08:	b1a8      	cbz	r0, 3a36 <free+0x2e>
    3a0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3a0e:	f840 3c0c 	str.w	r3, [r0, #-12]
    3a12:	f850 2c04 	ldr.w	r2, [r0, #-4]
    3a16:	b172      	cbz	r2, 3a36 <free+0x2e>
    3a18:	6813      	ldr	r3, [r2, #0]
    3a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    3a1e:	d10a      	bne.n	3a36 <free+0x2e>
    3a20:	6853      	ldr	r3, [r2, #4]
    3a22:	f850 1c08 	ldr.w	r1, [r0, #-8]
    3a26:	440b      	add	r3, r1
    3a28:	3303      	adds	r3, #3
    3a2a:	f840 3c08 	str.w	r3, [r0, #-8]
    3a2e:	6893      	ldr	r3, [r2, #8]
    3a30:	f840 3c04 	str.w	r3, [r0, #-4]
    3a34:	e7ed      	b.n	3a12 <free+0xa>
    3a36:	4770      	bx	lr

00003a38 <_Csys_alloc>:
    3a38:	b510      	push	{r4, lr}
    3a3a:	f7ff ff7f 	bl	393c <malloc>
    3a3e:	4604      	mov	r4, r0
    3a40:	b928      	cbnz	r0, 3a4e <_Csys_alloc+0x16>
    3a42:	4904      	ldr	r1, [pc, #16]	; (3a54 <_Csys_alloc+0x1c>)
    3a44:	2217      	movs	r2, #23
    3a46:	f002 fc9f 	bl	6388 <__sys_write>
    3a4a:	f002 fc8a 	bl	6362 <__sys_appexit>
    3a4e:	4620      	mov	r0, r4
    3a50:	bd10      	pop	{r4, pc}
    3a52:	bf00      	nop
    3a54:	000072bc 	.word	0x000072bc

00003a58 <fp_round>:
    3a58:	5c42      	ldrb	r2, [r0, r1]
    3a5a:	1843      	adds	r3, r0, r1
    3a5c:	2a34      	cmp	r2, #52	; 0x34
    3a5e:	dc01      	bgt.n	3a64 <fp_round+0xc>
    3a60:	2000      	movs	r0, #0
    3a62:	4770      	bx	lr
    3a64:	2a35      	cmp	r2, #53	; 0x35
    3a66:	d106      	bne.n	3a76 <fp_round+0x1e>
    3a68:	4619      	mov	r1, r3
    3a6a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    3a6e:	2a30      	cmp	r2, #48	; 0x30
    3a70:	d0fb      	beq.n	3a6a <fp_round+0x12>
    3a72:	2a00      	cmp	r2, #0
    3a74:	d0f4      	beq.n	3a60 <fp_round+0x8>
    3a76:	461a      	mov	r2, r3
    3a78:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    3a7c:	2939      	cmp	r1, #57	; 0x39
    3a7e:	d102      	bne.n	3a86 <fp_round+0x2e>
    3a80:	2130      	movs	r1, #48	; 0x30
    3a82:	7011      	strb	r1, [r2, #0]
    3a84:	e7f8      	b.n	3a78 <fp_round+0x20>
    3a86:	3101      	adds	r1, #1
    3a88:	7011      	strb	r1, [r2, #0]
    3a8a:	7802      	ldrb	r2, [r0, #0]
    3a8c:	2a30      	cmp	r2, #48	; 0x30
    3a8e:	d0e7      	beq.n	3a60 <fp_round+0x8>
    3a90:	1a1a      	subs	r2, r3, r0
    3a92:	2a00      	cmp	r2, #0
    3a94:	db03      	blt.n	3a9e <fp_round+0x46>
    3a96:	f813 2901 	ldrb.w	r2, [r3], #-1
    3a9a:	709a      	strb	r2, [r3, #2]
    3a9c:	e7f8      	b.n	3a90 <fp_round+0x38>
    3a9e:	2001      	movs	r0, #1
    3aa0:	4770      	bx	lr

00003aa2 <pr_dec.constprop.1>:
    3aa2:	b510      	push	{r4, lr}
    3aa4:	1f8c      	subs	r4, r1, #6
    3aa6:	42a1      	cmp	r1, r4
    3aa8:	d00d      	beq.n	3ac6 <pr_dec.constprop.1+0x24>
    3aaa:	230a      	movs	r3, #10
    3aac:	fb90 f3f3 	sdiv	r3, r0, r3
    3ab0:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    3ab4:	3030      	adds	r0, #48	; 0x30
    3ab6:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
    3aba:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    3abe:	f801 0901 	strb.w	r0, [r1], #-1
    3ac2:	4618      	mov	r0, r3
    3ac4:	e7ef      	b.n	3aa6 <pr_dec.constprop.1+0x4>
    3ac6:	bd10      	pop	{r4, pc}

00003ac8 <sprintf>:
    3ac8:	b40e      	push	{r1, r2, r3}
    3aca:	b530      	push	{r4, r5, lr}
    3acc:	4605      	mov	r5, r0
    3ace:	b090      	sub	sp, #64	; 0x40
    3ad0:	ab13      	add	r3, sp, #76	; 0x4c
    3ad2:	f853 4b04 	ldr.w	r4, [r3], #4
    3ad6:	2100      	movs	r1, #0
    3ad8:	2228      	movs	r2, #40	; 0x28
    3ada:	a806      	add	r0, sp, #24
    3adc:	9305      	str	r3, [sp, #20]
    3ade:	f7ff ff2b 	bl	3938 <memset>
    3ae2:	230a      	movs	r3, #10
    3ae4:	9309      	str	r3, [sp, #36]	; 0x24
    3ae6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    3aea:	9308      	str	r3, [sp, #32]
    3aec:	9b05      	ldr	r3, [sp, #20]
    3aee:	9400      	str	r4, [sp, #0]
    3af0:	9301      	str	r3, [sp, #4]
    3af2:	4b0f      	ldr	r3, [pc, #60]	; (3b30 <sprintf+0x68>)
    3af4:	a806      	add	r0, sp, #24
    3af6:	9302      	str	r3, [sp, #8]
    3af8:	f04f 32ff 	mov.w	r2, #4294967295
    3afc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    3b00:	9506      	str	r5, [sp, #24]
    3b02:	f000 fceb 	bl	44dc <__vfprintf>
    3b06:	9b08      	ldr	r3, [sp, #32]
    3b08:	4604      	mov	r4, r0
    3b0a:	3b01      	subs	r3, #1
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	9308      	str	r3, [sp, #32]
    3b10:	db03      	blt.n	3b1a <sprintf+0x52>
    3b12:	9b06      	ldr	r3, [sp, #24]
    3b14:	2200      	movs	r2, #0
    3b16:	701a      	strb	r2, [r3, #0]
    3b18:	e003      	b.n	3b22 <sprintf+0x5a>
    3b1a:	2000      	movs	r0, #0
    3b1c:	a906      	add	r1, sp, #24
    3b1e:	f001 fcdd 	bl	54dc <__flsbuf>
    3b22:	4620      	mov	r0, r4
    3b24:	b010      	add	sp, #64	; 0x40
    3b26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3b2a:	b003      	add	sp, #12
    3b2c:	4770      	bx	lr
    3b2e:	bf00      	nop
    3b30:	00003b39 	.word	0x00003b39
    3b34:	00000000 	.word	0x00000000

00003b38 <fp_display>:
    3b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b3c:	4614      	mov	r4, r2
    3b3e:	f647 72f0 	movw	r2, #32752	; 0x7ff0
    3b42:	684e      	ldr	r6, [r1, #4]
    3b44:	b09f      	sub	sp, #124	; 0x7c
    3b46:	9306      	str	r3, [sp, #24]
    3b48:	f3c6 430f 	ubfx	r3, r6, #16, #16
    3b4c:	f023 030f 	bic.w	r3, r3, #15
    3b50:	045b      	lsls	r3, r3, #17
    3b52:	680f      	ldr	r7, [r1, #0]
    3b54:	0c5b      	lsrs	r3, r3, #17
    3b56:	4293      	cmp	r3, r2
    3b58:	9005      	str	r0, [sp, #20]
    3b5a:	f8dd b0a4 	ldr.w	fp, [sp, #164]	; 0xa4
    3b5e:	9708      	str	r7, [sp, #32]
    3b60:	9607      	str	r6, [sp, #28]
    3b62:	d127      	bne.n	3bb4 <fp_display+0x7c>
    3b64:	2300      	movs	r3, #0
    3b66:	70e3      	strb	r3, [r4, #3]
    3b68:	f3c6 0313 	ubfx	r3, r6, #0, #20
    3b6c:	433b      	orrs	r3, r7
    3b6e:	f04f 036e 	mov.w	r3, #110	; 0x6e
    3b72:	d115      	bne.n	3ba0 <fp_display+0x68>
    3b74:	2269      	movs	r2, #105	; 0x69
    3b76:	7063      	strb	r3, [r4, #1]
    3b78:	2e00      	cmp	r6, #0
    3b7a:	f04f 0366 	mov.w	r3, #102	; 0x66
    3b7e:	7022      	strb	r2, [r4, #0]
    3b80:	70a3      	strb	r3, [r4, #2]
    3b82:	da01      	bge.n	3b88 <fp_display+0x50>
    3b84:	4b84      	ldr	r3, [pc, #528]	; (3d98 <fp_display+0x260>)
    3b86:	e010      	b.n	3baa <fp_display+0x72>
    3b88:	9b06      	ldr	r3, [sp, #24]
    3b8a:	079a      	lsls	r2, r3, #30
    3b8c:	d406      	bmi.n	3b9c <fp_display+0x64>
    3b8e:	4a83      	ldr	r2, [pc, #524]	; (3d9c <fp_display+0x264>)
    3b90:	f013 0f04 	tst.w	r3, #4
    3b94:	4b82      	ldr	r3, [pc, #520]	; (3da0 <fp_display+0x268>)
    3b96:	bf08      	it	eq
    3b98:	4613      	moveq	r3, r2
    3b9a:	e006      	b.n	3baa <fp_display+0x72>
    3b9c:	4b81      	ldr	r3, [pc, #516]	; (3da4 <fp_display+0x26c>)
    3b9e:	e004      	b.n	3baa <fp_display+0x72>
    3ba0:	7023      	strb	r3, [r4, #0]
    3ba2:	2261      	movs	r2, #97	; 0x61
    3ba4:	70a3      	strb	r3, [r4, #2]
    3ba6:	4b7d      	ldr	r3, [pc, #500]	; (3d9c <fp_display+0x264>)
    3ba8:	7062      	strb	r2, [r4, #1]
    3baa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    3bac:	2003      	movs	r0, #3
    3bae:	6013      	str	r3, [r2, #0]
    3bb0:	f000 bc3f 	b.w	4432 <fp_display+0x8fa>
    3bb4:	9b05      	ldr	r3, [sp, #20]
    3bb6:	f023 0320 	bic.w	r3, r3, #32
    3bba:	2b41      	cmp	r3, #65	; 0x41
    3bbc:	f000 8244 	beq.w	4048 <fp_display+0x510>
    3bc0:	4638      	mov	r0, r7
    3bc2:	4631      	mov	r1, r6
    3bc4:	2200      	movs	r2, #0
    3bc6:	2300      	movs	r3, #0
    3bc8:	f002 fb28 	bl	621c <__aeabi_dcmplt>
    3bcc:	b138      	cbz	r0, 3bde <fp_display+0xa6>
    3bce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    3bd2:	9a08      	ldr	r2, [sp, #32]
    3bd4:	461e      	mov	r6, r3
    3bd6:	2301      	movs	r3, #1
    3bd8:	4617      	mov	r7, r2
    3bda:	9309      	str	r3, [sp, #36]	; 0x24
    3bdc:	e000      	b.n	3be0 <fp_display+0xa8>
    3bde:	9009      	str	r0, [sp, #36]	; 0x24
    3be0:	4638      	mov	r0, r7
    3be2:	4631      	mov	r1, r6
    3be4:	2200      	movs	r2, #0
    3be6:	2300      	movs	r3, #0
    3be8:	f002 fb02 	bl	61f0 <__aeabi_dcmpeq>
    3bec:	2800      	cmp	r0, #0
    3bee:	f040 820d 	bne.w	400c <fp_display+0x4d4>
    3bf2:	f240 152d 	movw	r5, #301	; 0x12d
    3bf6:	aa11      	add	r2, sp, #68	; 0x44
    3bf8:	4638      	mov	r0, r7
    3bfa:	4631      	mov	r1, r6
    3bfc:	f001 fd70 	bl	56e0 <_frexpl>
    3c00:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3c02:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3c06:	4355      	muls	r5, r2
    3c08:	f5a5 53ab 	sub.w	r3, r5, #5472	; 0x1560
    3c0c:	3b1c      	subs	r3, #28
    3c0e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    3c12:	fb93 f5f5 	sdiv	r5, r3, r5
    3c16:	2000      	movs	r0, #0
    3c18:	4963      	ldr	r1, [pc, #396]	; (3da8 <fp_display+0x270>)
    3c1a:	1aaa      	subs	r2, r5, r2
    3c1c:	f001 fd8e 	bl	573c <_ldexpl>
    3c20:	2d00      	cmp	r5, #0
    3c22:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3c26:	da06      	bge.n	3c36 <fp_display+0xfe>
    3c28:	a355      	add	r3, pc, #340	; (adr r3, 3d80 <fp_display+0x248>)
    3c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c2e:	426e      	negs	r6, r5
    3c30:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    3c34:	e006      	b.n	3c44 <fp_display+0x10c>
    3c36:	4b5d      	ldr	r3, [pc, #372]	; (3dac <fp_display+0x274>)
    3c38:	f04f 0200 	mov.w	r2, #0
    3c3c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    3c40:	d016      	beq.n	3c70 <fp_display+0x138>
    3c42:	462e      	mov	r6, r5
    3c44:	07f3      	lsls	r3, r6, #31
    3c46:	d509      	bpl.n	3c5c <fp_display+0x124>
    3c48:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3c4c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3c50:	f001 ffc2 	bl	5bd8 <__aeabi_dmul>
    3c54:	2e01      	cmp	r6, #1
    3c56:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3c5a:	d009      	beq.n	3c70 <fp_display+0x138>
    3c5c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3c60:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3c64:	f001 ffb8 	bl	5bd8 <__aeabi_dmul>
    3c68:	1076      	asrs	r6, r6, #1
    3c6a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    3c6e:	e7e9      	b.n	3c44 <fp_display+0x10c>
    3c70:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3c74:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    3c78:	f002 f83e 	bl	5cf8 <__aeabi_ddiv>
    3c7c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3c80:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3c84:	a340      	add	r3, pc, #256	; (adr r3, 3d88 <fp_display+0x250>)
    3c86:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c8a:	f002 fac7 	bl	621c <__aeabi_dcmplt>
    3c8e:	b188      	cbz	r0, 3cb4 <fp_display+0x17c>
    3c90:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3c94:	2200      	movs	r2, #0
    3c96:	4b46      	ldr	r3, [pc, #280]	; (3db0 <fp_display+0x278>)
    3c98:	f001 ff9e 	bl	5bd8 <__aeabi_dmul>
    3c9c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3ca0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3ca4:	2200      	movs	r2, #0
    3ca6:	4b42      	ldr	r3, [pc, #264]	; (3db0 <fp_display+0x278>)
    3ca8:	f002 f826 	bl	5cf8 <__aeabi_ddiv>
    3cac:	3d01      	subs	r5, #1
    3cae:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3cb2:	e7e5      	b.n	3c80 <fp_display+0x148>
    3cb4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3cb8:	a335      	add	r3, pc, #212	; (adr r3, 3d90 <fp_display+0x258>)
    3cba:	e9d3 2300 	ldrd	r2, r3, [r3]
    3cbe:	f002 fb09 	bl	62d4 <__aeabi_dcmpge>
    3cc2:	b188      	cbz	r0, 3ce8 <fp_display+0x1b0>
    3cc4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3cc8:	2200      	movs	r2, #0
    3cca:	4b39      	ldr	r3, [pc, #228]	; (3db0 <fp_display+0x278>)
    3ccc:	f002 f814 	bl	5cf8 <__aeabi_ddiv>
    3cd0:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3cd4:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3cd8:	2200      	movs	r2, #0
    3cda:	4b35      	ldr	r3, [pc, #212]	; (3db0 <fp_display+0x278>)
    3cdc:	f001 ff7c 	bl	5bd8 <__aeabi_dmul>
    3ce0:	3501      	adds	r5, #1
    3ce2:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3ce6:	e7e5      	b.n	3cb4 <fp_display+0x17c>
    3ce8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3cec:	f002 fa32 	bl	6154 <__aeabi_d2iz>
    3cf0:	426b      	negs	r3, r5
    3cf2:	ea13 0325 	ands.w	r3, r3, r5, asr #32
    3cf6:	bf38      	it	cc
    3cf8:	462b      	movcc	r3, r5
    3cfa:	4682      	mov	sl, r0
    3cfc:	930e      	str	r3, [sp, #56]	; 0x38
    3cfe:	4650      	mov	r0, sl
    3d00:	f002 fa6c 	bl	61dc <__aeabi_i2d>
    3d04:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3d06:	1aaa      	subs	r2, r5, r2
    3d08:	f001 fd18 	bl	573c <_ldexpl>
    3d0c:	2200      	movs	r2, #0
    3d0e:	2300      	movs	r3, #0
    3d10:	2d00      	cmp	r5, #0
    3d12:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3d16:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    3d1a:	da4b      	bge.n	3db4 <fp_display+0x27c>
    3d1c:	a118      	add	r1, pc, #96	; (adr r1, 3d80 <fp_display+0x248>)
    3d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
    3d22:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    3d26:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    3d2a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    3d2e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3d32:	f04f 0800 	mov.w	r8, #0
    3d36:	4642      	mov	r2, r8
    3d38:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    3d3c:	464b      	mov	r3, r9
    3d3e:	f002 f883 	bl	5e48 <__aeabi_dsub>
    3d42:	4602      	mov	r2, r0
    3d44:	460b      	mov	r3, r1
    3d46:	4630      	mov	r0, r6
    3d48:	4639      	mov	r1, r7
    3d4a:	f002 f969 	bl	6020 <__aeabi_dadd>
    3d4e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    3d52:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    3d56:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3d5a:	2200      	movs	r2, #0
    3d5c:	4b13      	ldr	r3, [pc, #76]	; (3dac <fp_display+0x274>)
    3d5e:	f001 ff3b 	bl	5bd8 <__aeabi_dmul>
    3d62:	4602      	mov	r2, r0
    3d64:	460b      	mov	r3, r1
    3d66:	2000      	movs	r0, #0
    3d68:	490f      	ldr	r1, [pc, #60]	; (3da8 <fp_display+0x270>)
    3d6a:	f002 f86d 	bl	5e48 <__aeabi_dsub>
    3d6e:	2200      	movs	r2, #0
    3d70:	4b0e      	ldr	r3, [pc, #56]	; (3dac <fp_display+0x274>)
    3d72:	f001 ffc1 	bl	5cf8 <__aeabi_ddiv>
    3d76:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    3d7a:	e024      	b.n	3dc6 <fp_display+0x28e>
    3d7c:	f3af 8000 	nop.w
    3d80:	9999999a 	.word	0x9999999a
    3d84:	3fc99999 	.word	0x3fc99999
    3d88:	00000000 	.word	0x00000000
    3d8c:	40f86a00 	.word	0x40f86a00
    3d90:	00000000 	.word	0x00000000
    3d94:	412e8480 	.word	0x412e8480
    3d98:	00007486 	.word	0x00007486
    3d9c:	000072d3 	.word	0x000072d3
    3da0:	00007456 	.word	0x00007456
    3da4:	00007454 	.word	0x00007454
    3da8:	3ff00000 	.word	0x3ff00000
    3dac:	40140000 	.word	0x40140000
    3db0:	40240000 	.word	0x40240000
    3db4:	49ae      	ldr	r1, [pc, #696]	; (4070 <fp_display+0x538>)
    3db6:	f04f 0000 	mov.w	r0, #0
    3dba:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    3dbe:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    3dc2:	f000 8089 	beq.w	3ed8 <fp_display+0x3a0>
    3dc6:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    3dca:	f01c 0f01 	tst.w	ip, #1
    3dce:	d048      	beq.n	3e62 <fp_display+0x32a>
    3dd0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3dd4:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    3dd8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    3ddc:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    3de0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    3de4:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    3de8:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    3dec:	f001 fef4 	bl	5bd8 <__aeabi_dmul>
    3df0:	4632      	mov	r2, r6
    3df2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    3df6:	463b      	mov	r3, r7
    3df8:	4640      	mov	r0, r8
    3dfa:	4649      	mov	r1, r9
    3dfc:	f002 f910 	bl	6020 <__aeabi_dadd>
    3e00:	4602      	mov	r2, r0
    3e02:	460b      	mov	r3, r1
    3e04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    3e08:	f001 fee6 	bl	5bd8 <__aeabi_dmul>
    3e0c:	4602      	mov	r2, r0
    3e0e:	460b      	mov	r3, r1
    3e10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    3e14:	f002 f904 	bl	6020 <__aeabi_dadd>
    3e18:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    3e1c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3e20:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3e24:	f001 fed8 	bl	5bd8 <__aeabi_dmul>
    3e28:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3e2c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    3e30:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3e34:	f04f 0800 	mov.w	r8, #0
    3e38:	4642      	mov	r2, r8
    3e3a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    3e3e:	464b      	mov	r3, r9
    3e40:	f002 f802 	bl	5e48 <__aeabi_dsub>
    3e44:	4602      	mov	r2, r0
    3e46:	460b      	mov	r3, r1
    3e48:	4630      	mov	r0, r6
    3e4a:	4639      	mov	r1, r7
    3e4c:	f002 f8e8 	bl	6020 <__aeabi_dadd>
    3e50:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    3e54:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    3e58:	f1bc 0f01 	cmp.w	ip, #1
    3e5c:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
    3e60:	d03a      	beq.n	3ed8 <fp_display+0x3a0>
    3e62:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3e66:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    3e6a:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    3e6e:	4602      	mov	r2, r0
    3e70:	460b      	mov	r3, r1
    3e72:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    3e76:	f002 f8d3 	bl	6020 <__aeabi_dadd>
    3e7a:	4632      	mov	r2, r6
    3e7c:	463b      	mov	r3, r7
    3e7e:	f002 f8cf 	bl	6020 <__aeabi_dadd>
    3e82:	4602      	mov	r2, r0
    3e84:	460b      	mov	r3, r1
    3e86:	4640      	mov	r0, r8
    3e88:	4649      	mov	r1, r9
    3e8a:	f001 fea5 	bl	5bd8 <__aeabi_dmul>
    3e8e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    3e92:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3e96:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3e9a:	f001 fe9d 	bl	5bd8 <__aeabi_dmul>
    3e9e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    3ea2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    3ea6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3eaa:	f04f 0800 	mov.w	r8, #0
    3eae:	4642      	mov	r2, r8
    3eb0:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    3eb4:	464b      	mov	r3, r9
    3eb6:	f001 ffc7 	bl	5e48 <__aeabi_dsub>
    3eba:	4602      	mov	r2, r0
    3ebc:	460b      	mov	r3, r1
    3ebe:	4630      	mov	r0, r6
    3ec0:	4639      	mov	r1, r7
    3ec2:	f002 f8ad 	bl	6020 <__aeabi_dadd>
    3ec6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    3eca:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    3ece:	ea4f 0c6c 	mov.w	ip, ip, asr #1
    3ed2:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    3ed6:	e778      	b.n	3dca <fp_display+0x292>
    3ed8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3edc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    3ee0:	f002 f9ca 	bl	6278 <__aeabi_dcmple>
    3ee4:	b910      	cbnz	r0, 3eec <fp_display+0x3b4>
    3ee6:	f10a 3aff 	add.w	sl, sl, #4294967295
    3eea:	e708      	b.n	3cfe <fp_display+0x1c6>
    3eec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    3ef0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3ef4:	f001 ffa8 	bl	5e48 <__aeabi_dsub>
    3ef8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3efc:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    3f00:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3f04:	f001 ffa0 	bl	5e48 <__aeabi_dsub>
    3f08:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3f0c:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    3f10:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3f14:	f001 fef0 	bl	5cf8 <__aeabi_ddiv>
    3f18:	a353      	add	r3, pc, #332	; (adr r3, 4068 <fp_display+0x530>)
    3f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f1e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3f22:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3f26:	f001 fe57 	bl	5bd8 <__aeabi_dmul>
    3f2a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3f2e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3f32:	f002 f90f 	bl	6154 <__aeabi_d2iz>
    3f36:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    3f3a:	4680      	mov	r8, r0
    3f3c:	f002 f94e 	bl	61dc <__aeabi_i2d>
    3f40:	4602      	mov	r2, r0
    3f42:	460b      	mov	r3, r1
    3f44:	4630      	mov	r0, r6
    3f46:	4639      	mov	r1, r7
    3f48:	f001 ff7e 	bl	5e48 <__aeabi_dsub>
    3f4c:	a346      	add	r3, pc, #280	; (adr r3, 4068 <fp_display+0x530>)
    3f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f52:	f001 fe41 	bl	5bd8 <__aeabi_dmul>
    3f56:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3f5a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3f5e:	f002 f8f9 	bl	6154 <__aeabi_d2iz>
    3f62:	4606      	mov	r6, r0
    3f64:	2e00      	cmp	r6, #0
    3f66:	da06      	bge.n	3f76 <fp_display+0x43e>
    3f68:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
    3f6c:	f506 7610 	add.w	r6, r6, #576	; 0x240
    3f70:	f108 38ff 	add.w	r8, r8, #4294967295
    3f74:	e7f6      	b.n	3f64 <fp_display+0x42c>
    3f76:	4b3f      	ldr	r3, [pc, #252]	; (4074 <fp_display+0x53c>)
    3f78:	429e      	cmp	r6, r3
    3f7a:	dd06      	ble.n	3f8a <fp_display+0x452>
    3f7c:	f5a6 2674 	sub.w	r6, r6, #999424	; 0xf4000
    3f80:	f5a6 7610 	sub.w	r6, r6, #576	; 0x240
    3f84:	f108 0801 	add.w	r8, r8, #1
    3f88:	e7f5      	b.n	3f76 <fp_display+0x43e>
    3f8a:	f1b8 0f00 	cmp.w	r8, #0
    3f8e:	da06      	bge.n	3f9e <fp_display+0x466>
    3f90:	f508 2874 	add.w	r8, r8, #999424	; 0xf4000
    3f94:	f508 7810 	add.w	r8, r8, #576	; 0x240
    3f98:	f10a 3aff 	add.w	sl, sl, #4294967295
    3f9c:	e7f5      	b.n	3f8a <fp_display+0x452>
    3f9e:	4598      	cmp	r8, r3
    3fa0:	dd06      	ble.n	3fb0 <fp_display+0x478>
    3fa2:	f5a8 2874 	sub.w	r8, r8, #999424	; 0xf4000
    3fa6:	f5a8 7810 	sub.w	r8, r8, #576	; 0x240
    3faa:	f10a 0a01 	add.w	sl, sl, #1
    3fae:	e7f6      	b.n	3f9e <fp_display+0x466>
    3fb0:	4b31      	ldr	r3, [pc, #196]	; (4078 <fp_display+0x540>)
    3fb2:	4650      	mov	r0, sl
    3fb4:	459a      	cmp	sl, r3
    3fb6:	dc11      	bgt.n	3fdc <fp_display+0x4a4>
    3fb8:	3301      	adds	r3, #1
    3fba:	fb98 f2f3 	sdiv	r2, r8, r3
    3fbe:	fb96 f3f3 	sdiv	r3, r6, r3
    3fc2:	482e      	ldr	r0, [pc, #184]	; (407c <fp_display+0x544>)
    3fc4:	210a      	movs	r1, #10
    3fc6:	fb00 8802 	mla	r8, r0, r2, r8
    3fca:	fb00 6603 	mla	r6, r0, r3, r6
    3fce:	fb01 2a0a 	mla	sl, r1, sl, r2
    3fd2:	fb01 3808 	mla	r8, r1, r8, r3
    3fd6:	434e      	muls	r6, r1
    3fd8:	3d01      	subs	r5, #1
    3fda:	e01c      	b.n	4016 <fp_display+0x4de>
    3fdc:	4b25      	ldr	r3, [pc, #148]	; (4074 <fp_display+0x53c>)
    3fde:	459a      	cmp	sl, r3
    3fe0:	dd19      	ble.n	4016 <fp_display+0x4de>
    3fe2:	220a      	movs	r2, #10
    3fe4:	fb9a faf2 	sdiv	sl, sl, r2
    3fe8:	f06f 0309 	mvn.w	r3, #9
    3fec:	fb03 000a 	mla	r0, r3, sl, r0
    3ff0:	4923      	ldr	r1, [pc, #140]	; (4080 <fp_display+0x548>)
    3ff2:	3501      	adds	r5, #1
    3ff4:	fb01 8000 	mla	r0, r1, r0, r8
    3ff8:	fb90 f8f2 	sdiv	r8, r0, r2
    3ffc:	fb03 0308 	mla	r3, r3, r8, r0
    4000:	fb01 6603 	mla	r6, r1, r3, r6
    4004:	3605      	adds	r6, #5
    4006:	fb96 f6f2 	sdiv	r6, r6, r2
    400a:	e004      	b.n	4016 <fp_display+0x4de>
    400c:	2600      	movs	r6, #0
    400e:	46b0      	mov	r8, r6
    4010:	46b2      	mov	sl, r6
    4012:	f06f 0504 	mvn.w	r5, #4
    4016:	4621      	mov	r1, r4
    4018:	2730      	movs	r7, #48	; 0x30
    401a:	f801 7b06 	strb.w	r7, [r1], #6
    401e:	4650      	mov	r0, sl
    4020:	f7ff fd3f 	bl	3aa2 <pr_dec.constprop.1>
    4024:	4640      	mov	r0, r8
    4026:	f104 010c 	add.w	r1, r4, #12
    402a:	f7ff fd3a 	bl	3aa2 <pr_dec.constprop.1>
    402e:	4630      	mov	r0, r6
    4030:	f104 0112 	add.w	r1, r4, #18
    4034:	f7ff fd35 	bl	3aa2 <pr_dec.constprop.1>
    4038:	2300      	movs	r3, #0
    403a:	7523      	strb	r3, [r4, #20]
    403c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    403e:	3505      	adds	r5, #5
    4040:	74e7      	strb	r7, [r4, #19]
    4042:	ea43 0585 	orr.w	r5, r3, r5, lsl #2
    4046:	e000      	b.n	404a <fp_display+0x512>
    4048:	2500      	movs	r5, #0
    404a:	07ef      	lsls	r7, r5, #31
    404c:	d501      	bpl.n	4052 <fp_display+0x51a>
    404e:	4b0d      	ldr	r3, [pc, #52]	; (4084 <fp_display+0x54c>)
    4050:	e01f      	b.n	4092 <fp_display+0x55a>
    4052:	9b06      	ldr	r3, [sp, #24]
    4054:	079e      	lsls	r6, r3, #30
    4056:	d41b      	bmi.n	4090 <fp_display+0x558>
    4058:	4a0b      	ldr	r2, [pc, #44]	; (4088 <fp_display+0x550>)
    405a:	f013 0f04 	tst.w	r3, #4
    405e:	4b0b      	ldr	r3, [pc, #44]	; (408c <fp_display+0x554>)
    4060:	bf08      	it	eq
    4062:	4613      	moveq	r3, r2
    4064:	e015      	b.n	4092 <fp_display+0x55a>
    4066:	bf00      	nop
    4068:	00000000 	.word	0x00000000
    406c:	412e8480 	.word	0x412e8480
    4070:	40140000 	.word	0x40140000
    4074:	000f423f 	.word	0x000f423f
    4078:	0001869f 	.word	0x0001869f
    407c:	fffe7960 	.word	0xfffe7960
    4080:	000f4240 	.word	0x000f4240
    4084:	00007486 	.word	0x00007486
    4088:	000072d3 	.word	0x000072d3
    408c:	00007456 	.word	0x00007456
    4090:	4bad      	ldr	r3, [pc, #692]	; (4348 <fp_display+0x810>)
    4092:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    4094:	f025 0501 	bic.w	r5, r5, #1
    4098:	6013      	str	r3, [r2, #0]
    409a:	2304      	movs	r3, #4
    409c:	fb95 f5f3 	sdiv	r5, r5, r3
    40a0:	9b05      	ldr	r3, [sp, #20]
    40a2:	f8db 6000 	ldr.w	r6, [fp]
    40a6:	2b61      	cmp	r3, #97	; 0x61
    40a8:	d010      	beq.n	40cc <fp_display+0x594>
    40aa:	dc06      	bgt.n	40ba <fp_display+0x582>
    40ac:	2b45      	cmp	r3, #69	; 0x45
    40ae:	d067      	beq.n	4180 <fp_display+0x648>
    40b0:	2b47      	cmp	r3, #71	; 0x47
    40b2:	d048      	beq.n	4146 <fp_display+0x60e>
    40b4:	2b41      	cmp	r3, #65	; 0x41
    40b6:	d144      	bne.n	4142 <fp_display+0x60a>
    40b8:	e008      	b.n	40cc <fp_display+0x594>
    40ba:	9b05      	ldr	r3, [sp, #20]
    40bc:	2b66      	cmp	r3, #102	; 0x66
    40be:	f000 80df 	beq.w	4280 <fp_display+0x748>
    40c2:	2b67      	cmp	r3, #103	; 0x67
    40c4:	d03f      	beq.n	4146 <fp_display+0x60e>
    40c6:	2b65      	cmp	r3, #101	; 0x65
    40c8:	d13b      	bne.n	4142 <fp_display+0x60a>
    40ca:	e059      	b.n	4180 <fp_display+0x648>
    40cc:	9b07      	ldr	r3, [sp, #28]
    40ce:	2000      	movs	r0, #0
    40d0:	f3c3 0113 	ubfx	r1, r3, #0, #20
    40d4:	9b08      	ldr	r3, [sp, #32]
    40d6:	4318      	orrs	r0, r3
    40d8:	9b07      	ldr	r3, [sp, #28]
    40da:	f3c3 520a 	ubfx	r2, r3, #20, #11
    40de:	b112      	cbz	r2, 40e6 <fp_display+0x5ae>
    40e0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
    40e4:	e004      	b.n	40f0 <fp_display+0x5b8>
    40e6:	ea50 0301 	orrs.w	r3, r0, r1
    40ea:	4b98      	ldr	r3, [pc, #608]	; (434c <fp_display+0x814>)
    40ec:	bf08      	it	eq
    40ee:	2300      	moveq	r3, #0
    40f0:	2a00      	cmp	r2, #0
    40f2:	bf0c      	ite	eq
    40f4:	2230      	moveq	r2, #48	; 0x30
    40f6:	2231      	movne	r2, #49	; 0x31
    40f8:	b966      	cbnz	r6, 4114 <fp_display+0x5dc>
    40fa:	9d06      	ldr	r5, [sp, #24]
    40fc:	072d      	lsls	r5, r5, #28
    40fe:	d409      	bmi.n	4114 <fp_display+0x5dc>
    4100:	9d05      	ldr	r5, [sp, #20]
    4102:	4620      	mov	r0, r4
    4104:	4992      	ldr	r1, [pc, #584]	; (4350 <fp_display+0x818>)
    4106:	4c93      	ldr	r4, [pc, #588]	; (4354 <fp_display+0x81c>)
    4108:	2d61      	cmp	r5, #97	; 0x61
    410a:	bf08      	it	eq
    410c:	4621      	moveq	r1, r4
    410e:	f7ff fcdb 	bl	3ac8 <sprintf>
    4112:	e00c      	b.n	412e <fp_display+0x5f6>
    4114:	e9cd 0100 	strd	r0, r1, [sp]
    4118:	9302      	str	r3, [sp, #8]
    411a:	4620      	mov	r0, r4
    411c:	4b8e      	ldr	r3, [pc, #568]	; (4358 <fp_display+0x820>)
    411e:	498f      	ldr	r1, [pc, #572]	; (435c <fp_display+0x824>)
    4120:	9c05      	ldr	r4, [sp, #20]
    4122:	2c61      	cmp	r4, #97	; 0x61
    4124:	bf18      	it	ne
    4126:	4619      	movne	r1, r3
    4128:	4633      	mov	r3, r6
    412a:	f7ff fccd 	bl	3ac8 <sprintf>
    412e:	4a8c      	ldr	r2, [pc, #560]	; (4360 <fp_display+0x828>)
    4130:	4b8c      	ldr	r3, [pc, #560]	; (4364 <fp_display+0x82c>)
    4132:	9907      	ldr	r1, [sp, #28]
    4134:	ea33 0321 	bics.w	r3, r3, r1, asr #32
    4138:	bf28      	it	cs
    413a:	4613      	movcs	r3, r2
    413c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    413e:	6013      	str	r3, [r2, #0]
    4140:	e177      	b.n	4432 <fp_display+0x8fa>
    4142:	2367      	movs	r3, #103	; 0x67
    4144:	9305      	str	r3, [sp, #20]
    4146:	9b06      	ldr	r3, [sp, #24]
    4148:	2e00      	cmp	r6, #0
    414a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    414e:	9306      	str	r3, [sp, #24]
    4150:	bfdc      	itt	le
    4152:	2301      	movle	r3, #1
    4154:	f8cb 3000 	strle.w	r3, [fp]
    4158:	f8db 1000 	ldr.w	r1, [fp]
    415c:	4620      	mov	r0, r4
    415e:	2911      	cmp	r1, #17
    4160:	bfd4      	ite	le
    4162:	3101      	addle	r1, #1
    4164:	2112      	movgt	r1, #18
    4166:	f7ff fc77 	bl	3a58 <fp_round>
    416a:	f8db 3000 	ldr.w	r3, [fp]
    416e:	4405      	add	r5, r0
    4170:	429d      	cmp	r5, r3
    4172:	db7e      	blt.n	4272 <fp_display+0x73a>
    4174:	3b01      	subs	r3, #1
    4176:	f8cb 3000 	str.w	r3, [fp]
    417a:	9b05      	ldr	r3, [sp, #20]
    417c:	3b02      	subs	r3, #2
    417e:	9305      	str	r3, [sp, #20]
    4180:	f8db 3000 	ldr.w	r3, [fp]
    4184:	2b11      	cmp	r3, #17
    4186:	bfc1      	itttt	gt
    4188:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    418a:	3b11      	subgt	r3, #17
    418c:	6013      	strgt	r3, [r2, #0]
    418e:	2311      	movgt	r3, #17
    4190:	bfc8      	it	gt
    4192:	f8cb 3000 	strgt.w	r3, [fp]
    4196:	9b06      	ldr	r3, [sp, #24]
    4198:	f8db 6000 	ldr.w	r6, [fp]
    419c:	f413 6700 	ands.w	r7, r3, #2048	; 0x800
    41a0:	f106 0602 	add.w	r6, r6, #2
    41a4:	d104      	bne.n	41b0 <fp_display+0x678>
    41a6:	4620      	mov	r0, r4
    41a8:	4631      	mov	r1, r6
    41aa:	f7ff fc55 	bl	3a58 <fp_round>
    41ae:	4405      	add	r5, r0
    41b0:	7863      	ldrb	r3, [r4, #1]
    41b2:	7023      	strb	r3, [r4, #0]
    41b4:	f8db 3000 	ldr.w	r3, [fp]
    41b8:	b923      	cbnz	r3, 41c4 <fp_display+0x68c>
    41ba:	f640 0308 	movw	r3, #2056	; 0x808
    41be:	9a06      	ldr	r2, [sp, #24]
    41c0:	4013      	ands	r3, r2
    41c2:	b113      	cbz	r3, 41ca <fp_display+0x692>
    41c4:	232e      	movs	r3, #46	; 0x2e
    41c6:	7063      	strb	r3, [r4, #1]
    41c8:	e000      	b.n	41cc <fp_display+0x694>
    41ca:	2601      	movs	r6, #1
    41cc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    41ce:	681b      	ldr	r3, [r3, #0]
    41d0:	2b00      	cmp	r3, #0
    41d2:	bfc2      	ittt	gt
    41d4:	233e      	movgt	r3, #62	; 0x3e
    41d6:	55a3      	strbgt	r3, [r4, r6]
    41d8:	3601      	addgt	r6, #1
    41da:	b177      	cbz	r7, 41fa <fp_display+0x6c2>
    41dc:	9b06      	ldr	r3, [sp, #24]
    41de:	071f      	lsls	r7, r3, #28
    41e0:	d40b      	bmi.n	41fa <fp_display+0x6c2>
    41e2:	19a2      	adds	r2, r4, r6
    41e4:	1b16      	subs	r6, r2, r4
    41e6:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
    41ea:	2b30      	cmp	r3, #48	; 0x30
    41ec:	d0fa      	beq.n	41e4 <fp_display+0x6ac>
    41ee:	2b3e      	cmp	r3, #62	; 0x3e
    41f0:	d0f8      	beq.n	41e4 <fp_display+0x6ac>
    41f2:	2b2e      	cmp	r3, #46	; 0x2e
    41f4:	bf08      	it	eq
    41f6:	f106 36ff 	addeq.w	r6, r6, #4294967295
    41fa:	f89d 3014 	ldrb.w	r3, [sp, #20]
    41fe:	2d00      	cmp	r5, #0
    4200:	55a3      	strb	r3, [r4, r6]
    4202:	bfb8      	it	lt
    4204:	426d      	neglt	r5, r5
    4206:	f106 0302 	add.w	r3, r6, #2
    420a:	f106 0201 	add.w	r2, r6, #1
    420e:	bfb5      	itete	lt
    4210:	212d      	movlt	r1, #45	; 0x2d
    4212:	212b      	movge	r1, #43	; 0x2b
    4214:	461e      	movlt	r6, r3
    4216:	461e      	movge	r6, r3
    4218:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
    421c:	54a1      	strb	r1, [r4, r2]
    421e:	db0a      	blt.n	4236 <fp_display+0x6fe>
    4220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4224:	fb95 f2f2 	sdiv	r2, r5, r2
    4228:	f102 0130 	add.w	r1, r2, #48	; 0x30
    422c:	54e1      	strb	r1, [r4, r3]
    422e:	494e      	ldr	r1, [pc, #312]	; (4368 <fp_display+0x830>)
    4230:	1c5e      	adds	r6, r3, #1
    4232:	fb01 5502 	mla	r5, r1, r2, r5
    4236:	2d63      	cmp	r5, #99	; 0x63
    4238:	dd0a      	ble.n	4250 <fp_display+0x718>
    423a:	2364      	movs	r3, #100	; 0x64
    423c:	fb95 f3f3 	sdiv	r3, r5, r3
    4240:	f103 0230 	add.w	r2, r3, #48	; 0x30
    4244:	55a2      	strb	r2, [r4, r6]
    4246:	f06f 0263 	mvn.w	r2, #99	; 0x63
    424a:	fb02 5503 	mla	r5, r2, r3, r5
    424e:	3601      	adds	r6, #1
    4250:	230a      	movs	r3, #10
    4252:	fb95 f3f3 	sdiv	r3, r5, r3
    4256:	f103 0230 	add.w	r2, r3, #48	; 0x30
    425a:	55a2      	strb	r2, [r4, r6]
    425c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    4260:	3530      	adds	r5, #48	; 0x30
    4262:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
    4266:	4434      	add	r4, r6
    4268:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    426c:	7063      	strb	r3, [r4, #1]
    426e:	1cb0      	adds	r0, r6, #2
    4270:	e0df      	b.n	4432 <fp_display+0x8fa>
    4272:	1d2a      	adds	r2, r5, #4
    4274:	f6ff af7e 	blt.w	4174 <fp_display+0x63c>
    4278:	43ea      	mvns	r2, r5
    427a:	4413      	add	r3, r2
    427c:	f8cb 3000 	str.w	r3, [fp]
    4280:	9a06      	ldr	r2, [sp, #24]
    4282:	2d00      	cmp	r5, #0
    4284:	f8db 3000 	ldr.w	r3, [fp]
    4288:	f402 6700 	and.w	r7, r2, #2048	; 0x800
    428c:	da4c      	bge.n	4328 <fp_display+0x7f0>
    428e:	f1c5 0800 	rsb	r8, r5, #0
    4292:	1c5a      	adds	r2, r3, #1
    4294:	4590      	cmp	r8, r2
    4296:	dd09      	ble.n	42ac <fp_display+0x774>
    4298:	2330      	movs	r3, #48	; 0x30
    429a:	7023      	strb	r3, [r4, #0]
    429c:	232e      	movs	r3, #46	; 0x2e
    429e:	7063      	strb	r3, [r4, #1]
    42a0:	f8db 3000 	ldr.w	r3, [fp]
    42a4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    42a6:	2602      	movs	r6, #2
    42a8:	6013      	str	r3, [r2, #0]
    42aa:	e038      	b.n	431e <fp_display+0x7e6>
    42ac:	442b      	add	r3, r5
    42ae:	1c9e      	adds	r6, r3, #2
    42b0:	2e12      	cmp	r6, #18
    42b2:	bfc1      	itttt	gt
    42b4:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    42b6:	3b11      	subgt	r3, #17
    42b8:	6013      	strgt	r3, [r2, #0]
    42ba:	2613      	movgt	r6, #19
    42bc:	b95f      	cbnz	r7, 42d6 <fp_display+0x79e>
    42be:	4620      	mov	r0, r4
    42c0:	4631      	mov	r1, r6
    42c2:	f7ff fbc9 	bl	3a58 <fp_round>
    42c6:	b130      	cbz	r0, 42d6 <fp_display+0x79e>
    42c8:	ea7f 0805 	mvns.w	r8, r5
    42cc:	f106 0601 	add.w	r6, r6, #1
    42d0:	d101      	bne.n	42d6 <fp_display+0x79e>
    42d2:	7863      	ldrb	r3, [r4, #1]
    42d4:	e00d      	b.n	42f2 <fp_display+0x7ba>
    42d6:	f1b8 0f01 	cmp.w	r8, #1
    42da:	eb04 0306 	add.w	r3, r4, r6
    42de:	d10c      	bne.n	42fa <fp_display+0x7c2>
    42e0:	1b1a      	subs	r2, r3, r4
    42e2:	2a00      	cmp	r2, #0
    42e4:	dd03      	ble.n	42ee <fp_display+0x7b6>
    42e6:	f813 2901 	ldrb.w	r2, [r3], #-1
    42ea:	709a      	strb	r2, [r3, #2]
    42ec:	e7f8      	b.n	42e0 <fp_display+0x7a8>
    42ee:	3601      	adds	r6, #1
    42f0:	2330      	movs	r3, #48	; 0x30
    42f2:	7023      	strb	r3, [r4, #0]
    42f4:	232e      	movs	r3, #46	; 0x2e
    42f6:	7063      	strb	r3, [r4, #1]
    42f8:	e011      	b.n	431e <fp_display+0x7e6>
    42fa:	1b1a      	subs	r2, r3, r4
    42fc:	2a00      	cmp	r2, #0
    42fe:	dd03      	ble.n	4308 <fp_display+0x7d0>
    4300:	f813 2901 	ldrb.w	r2, [r3], #-1
    4304:	70da      	strb	r2, [r3, #3]
    4306:	e7f8      	b.n	42fa <fp_display+0x7c2>
    4308:	2330      	movs	r3, #48	; 0x30
    430a:	7023      	strb	r3, [r4, #0]
    430c:	232e      	movs	r3, #46	; 0x2e
    430e:	7063      	strb	r3, [r4, #1]
    4310:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    4312:	233c      	movs	r3, #60	; 0x3c
    4314:	70a3      	strb	r3, [r4, #2]
    4316:	f108 33ff 	add.w	r3, r8, #4294967295
    431a:	3602      	adds	r6, #2
    431c:	6013      	str	r3, [r2, #0]
    431e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    4320:	681b      	ldr	r3, [r3, #0]
    4322:	2b00      	cmp	r3, #0
    4324:	dc38      	bgt.n	4398 <fp_display+0x860>
    4326:	e06c      	b.n	4402 <fp_display+0x8ca>
    4328:	eb05 0803 	add.w	r8, r5, r3
    432c:	f108 0602 	add.w	r6, r8, #2
    4330:	2e12      	cmp	r6, #18
    4332:	dd50      	ble.n	43d6 <fp_display+0x89e>
    4334:	b9d7      	cbnz	r7, 436c <fp_display+0x834>
    4336:	4620      	mov	r0, r4
    4338:	2113      	movs	r1, #19
    433a:	f7ff fb8d 	bl	3a58 <fp_round>
    433e:	b1a8      	cbz	r0, 436c <fp_display+0x834>
    4340:	3501      	adds	r5, #1
    4342:	2614      	movs	r6, #20
    4344:	e013      	b.n	436e <fp_display+0x836>
    4346:	bf00      	nop
    4348:	00007454 	.word	0x00007454
    434c:	fffffc01 	.word	0xfffffc01
    4350:	00007460 	.word	0x00007460
    4354:	00007458 	.word	0x00007458
    4358:	00007477 	.word	0x00007477
    435c:	00007468 	.word	0x00007468
    4360:	00007486 	.word	0x00007486
    4364:	000072d3 	.word	0x000072d3
    4368:	fffffc18 	.word	0xfffffc18
    436c:	2613      	movs	r6, #19
    436e:	1e72      	subs	r2, r6, #1
    4370:	4295      	cmp	r5, r2
    4372:	4623      	mov	r3, r4
    4374:	da14      	bge.n	43a0 <fp_display+0x868>
    4376:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    437a:	f803 2c01 	strb.w	r2, [r3, #-1]
    437e:	1b1a      	subs	r2, r3, r4
    4380:	42aa      	cmp	r2, r5
    4382:	ddf8      	ble.n	4376 <fp_display+0x83e>
    4384:	1963      	adds	r3, r4, r5
    4386:	222e      	movs	r2, #46	; 0x2e
    4388:	705a      	strb	r2, [r3, #1]
    438a:	f8db 3000 	ldr.w	r3, [fp]
    438e:	441d      	add	r5, r3
    4390:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    4392:	3d11      	subs	r5, #17
    4394:	601d      	str	r5, [r3, #0]
    4396:	b3a5      	cbz	r5, 4402 <fp_display+0x8ca>
    4398:	233e      	movs	r3, #62	; 0x3e
    439a:	55a3      	strb	r3, [r4, r6]
    439c:	3601      	adds	r6, #1
    439e:	e030      	b.n	4402 <fp_display+0x8ca>
    43a0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    43a4:	f803 1c01 	strb.w	r1, [r3, #-1]
    43a8:	1b19      	subs	r1, r3, r4
    43aa:	4291      	cmp	r1, r2
    43ac:	dbf8      	blt.n	43a0 <fp_display+0x868>
    43ae:	19a3      	adds	r3, r4, r6
    43b0:	223c      	movs	r2, #60	; 0x3c
    43b2:	f803 2c01 	strb.w	r2, [r3, #-1]
    43b6:	1bad      	subs	r5, r5, r6
    43b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    43ba:	222e      	movs	r2, #46	; 0x2e
    43bc:	3502      	adds	r5, #2
    43be:	601d      	str	r5, [r3, #0]
    43c0:	55a2      	strb	r2, [r4, r6]
    43c2:	f8db 2000 	ldr.w	r2, [fp]
    43c6:	1c73      	adds	r3, r6, #1
    43c8:	b1d2      	cbz	r2, 4400 <fp_display+0x8c8>
    43ca:	992b      	ldr	r1, [sp, #172]	; 0xac
    43cc:	3602      	adds	r6, #2
    43ce:	600a      	str	r2, [r1, #0]
    43d0:	223e      	movs	r2, #62	; 0x3e
    43d2:	54e2      	strb	r2, [r4, r3]
    43d4:	e015      	b.n	4402 <fp_display+0x8ca>
    43d6:	b93f      	cbnz	r7, 43e8 <fp_display+0x8b0>
    43d8:	4620      	mov	r0, r4
    43da:	4631      	mov	r1, r6
    43dc:	f7ff fb3c 	bl	3a58 <fp_round>
    43e0:	b110      	cbz	r0, 43e8 <fp_display+0x8b0>
    43e2:	3501      	adds	r5, #1
    43e4:	f108 0603 	add.w	r6, r8, #3
    43e8:	4623      	mov	r3, r4
    43ea:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    43ee:	f803 2c01 	strb.w	r2, [r3, #-1]
    43f2:	1b1a      	subs	r2, r3, r4
    43f4:	42aa      	cmp	r2, r5
    43f6:	ddf8      	ble.n	43ea <fp_display+0x8b2>
    43f8:	4425      	add	r5, r4
    43fa:	232e      	movs	r3, #46	; 0x2e
    43fc:	706b      	strb	r3, [r5, #1]
    43fe:	e000      	b.n	4402 <fp_display+0x8ca>
    4400:	461e      	mov	r6, r3
    4402:	b16f      	cbz	r7, 4420 <fp_display+0x8e8>
    4404:	9b06      	ldr	r3, [sp, #24]
    4406:	0718      	lsls	r0, r3, #28
    4408:	d412      	bmi.n	4430 <fp_display+0x8f8>
    440a:	19a0      	adds	r0, r4, r6
    440c:	1b06      	subs	r6, r0, r4
    440e:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
    4412:	2b30      	cmp	r3, #48	; 0x30
    4414:	d0fa      	beq.n	440c <fp_display+0x8d4>
    4416:	2b3e      	cmp	r3, #62	; 0x3e
    4418:	d0f8      	beq.n	440c <fp_display+0x8d4>
    441a:	2b2e      	cmp	r3, #46	; 0x2e
    441c:	d108      	bne.n	4430 <fp_display+0x8f8>
    441e:	e005      	b.n	442c <fp_display+0x8f4>
    4420:	f8db 3000 	ldr.w	r3, [fp]
    4424:	b923      	cbnz	r3, 4430 <fp_display+0x8f8>
    4426:	9b06      	ldr	r3, [sp, #24]
    4428:	0719      	lsls	r1, r3, #28
    442a:	d401      	bmi.n	4430 <fp_display+0x8f8>
    442c:	1e70      	subs	r0, r6, #1
    442e:	e000      	b.n	4432 <fp_display+0x8fa>
    4430:	4630      	mov	r0, r6
    4432:	b01f      	add	sp, #124	; 0x7c
    4434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004438 <_initio>:
    4438:	b510      	push	{r4, lr}
    443a:	2100      	movs	r1, #0
    443c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4440:	4822      	ldr	r0, [pc, #136]	; (44cc <_initio+0x94>)
    4442:	f7ff fa79 	bl	3938 <memset>
    4446:	20c0      	movs	r0, #192	; 0xc0
    4448:	f7ff faf6 	bl	3a38 <_Csys_alloc>
    444c:	4c20      	ldr	r4, [pc, #128]	; (44d0 <_initio+0x98>)
    444e:	2100      	movs	r1, #0
    4450:	22c0      	movs	r2, #192	; 0xc0
    4452:	6020      	str	r0, [r4, #0]
    4454:	f7ff fa70 	bl	3938 <memset>
    4458:	6820      	ldr	r0, [r4, #0]
    445a:	2300      	movs	r3, #0
    445c:	4c1b      	ldr	r4, [pc, #108]	; (44cc <_initio+0x94>)
    445e:	2228      	movs	r2, #40	; 0x28
    4460:	2118      	movs	r1, #24
    4462:	fb02 4203 	mla	r2, r2, r3, r4
    4466:	fb01 0103 	mla	r1, r1, r3, r0
    446a:	3301      	adds	r3, #1
    446c:	2b08      	cmp	r3, #8
    446e:	6251      	str	r1, [r2, #36]	; 0x24
    4470:	d1f4      	bne.n	445c <_initio+0x24>
    4472:	4622      	mov	r2, r4
    4474:	4917      	ldr	r1, [pc, #92]	; (44d4 <_initio+0x9c>)
    4476:	2000      	movs	r0, #0
    4478:	f001 f8d1 	bl	561e <_fdopen>
    447c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4480:	4620      	mov	r0, r4
    4482:	2100      	movs	r1, #0
    4484:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4488:	f000 ff38 	bl	52fc <setvbuf>
    448c:	f104 0228 	add.w	r2, r4, #40	; 0x28
    4490:	4911      	ldr	r1, [pc, #68]	; (44d8 <_initio+0xa0>)
    4492:	2001      	movs	r0, #1
    4494:	f001 f8c3 	bl	561e <_fdopen>
    4498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    449c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    44a0:	2100      	movs	r1, #0
    44a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    44a6:	f000 ff29 	bl	52fc <setvbuf>
    44aa:	f104 0250 	add.w	r2, r4, #80	; 0x50
    44ae:	490a      	ldr	r1, [pc, #40]	; (44d8 <_initio+0xa0>)
    44b0:	2002      	movs	r0, #2
    44b2:	f001 f8b4 	bl	561e <_fdopen>
    44b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
    44ba:	2100      	movs	r1, #0
    44bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    44c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    44c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    44c8:	f000 bf18 	b.w	52fc <setvbuf>
    44cc:	10001a10 	.word	0x10001a10
    44d0:	10001a0c 	.word	0x10001a0c
    44d4:	00007488 	.word	0x00007488
    44d8:	0000748a 	.word	0x0000748a

000044dc <__vfprintf>:
    44dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44e0:	4604      	mov	r4, r0
    44e2:	b0ad      	sub	sp, #180	; 0xb4
    44e4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    44e8:	f8dd 80dc 	ldr.w	r8, [sp, #220]	; 0xdc
    44ec:	2200      	movs	r2, #0
    44ee:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    44f0:	9205      	str	r2, [sp, #20]
    44f2:	7818      	ldrb	r0, [r3, #0]
    44f4:	1c5d      	adds	r5, r3, #1
    44f6:	2800      	cmp	r0, #0
    44f8:	f000 863d 	beq.w	5176 <__vfprintf+0xc9a>
    44fc:	2825      	cmp	r0, #37	; 0x25
    44fe:	d102      	bne.n	4506 <__vfprintf+0x2a>
    4500:	462a      	mov	r2, r5
    4502:	2700      	movs	r7, #0
    4504:	e023      	b.n	454e <__vfprintf+0x72>
    4506:	9b05      	ldr	r3, [sp, #20]
    4508:	ea4f 7be3 	mov.w	fp, r3, asr #31
    450c:	461a      	mov	r2, r3
    450e:	1c5e      	adds	r6, r3, #1
    4510:	465b      	mov	r3, fp
    4512:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    4516:	4552      	cmp	r2, sl
    4518:	eb73 030b 	sbcs.w	r3, r3, fp
    451c:	f280 8627 	bge.w	516e <__vfprintf+0xc92>
    4520:	68a3      	ldr	r3, [r4, #8]
    4522:	3b01      	subs	r3, #1
    4524:	2b00      	cmp	r3, #0
    4526:	60a3      	str	r3, [r4, #8]
    4528:	db05      	blt.n	4536 <__vfprintf+0x5a>
    452a:	6823      	ldr	r3, [r4, #0]
    452c:	1c5a      	adds	r2, r3, #1
    452e:	6022      	str	r2, [r4, #0]
    4530:	7018      	strb	r0, [r3, #0]
    4532:	f000 be1c 	b.w	516e <__vfprintf+0xc92>
    4536:	4621      	mov	r1, r4
    4538:	f000 ffd0 	bl	54dc <__flsbuf>
    453c:	f000 be17 	b.w	516e <__vfprintf+0xc92>
    4540:	d90b      	bls.n	455a <__vfprintf+0x7e>
    4542:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
    4546:	d111      	bne.n	456c <__vfprintf+0x90>
    4548:	f047 0701 	orr.w	r7, r7, #1
    454c:	462a      	mov	r2, r5
    454e:	f815 9b01 	ldrb.w	r9, [r5], #1
    4552:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
    4556:	d1f3      	bne.n	4540 <__vfprintf+0x64>
    4558:	e00e      	b.n	4578 <__vfprintf+0x9c>
    455a:	f1b9 0f20 	cmp.w	r9, #32
    455e:	d00e      	beq.n	457e <__vfprintf+0xa2>
    4560:	f1b9 0f23 	cmp.w	r9, #35	; 0x23
    4564:	d10e      	bne.n	4584 <__vfprintf+0xa8>
    4566:	f047 0708 	orr.w	r7, r7, #8
    456a:	e7ef      	b.n	454c <__vfprintf+0x70>
    456c:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    4570:	d108      	bne.n	4584 <__vfprintf+0xa8>
    4572:	f447 7700 	orr.w	r7, r7, #512	; 0x200
    4576:	e7e9      	b.n	454c <__vfprintf+0x70>
    4578:	f047 0702 	orr.w	r7, r7, #2
    457c:	e7e6      	b.n	454c <__vfprintf+0x70>
    457e:	f047 0704 	orr.w	r7, r7, #4
    4582:	e7e3      	b.n	454c <__vfprintf+0x70>
    4584:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    4588:	d001      	beq.n	458e <__vfprintf+0xb2>
    458a:	2300      	movs	r3, #0
    458c:	e00d      	b.n	45aa <__vfprintf+0xce>
    458e:	f8d8 3000 	ldr.w	r3, [r8]
    4592:	f108 0104 	add.w	r1, r8, #4
    4596:	2b00      	cmp	r3, #0
    4598:	bfbc      	itt	lt
    459a:	425b      	neglt	r3, r3
    459c:	f087 0701 	eorlt.w	r7, r7, #1
    45a0:	1c95      	adds	r5, r2, #2
    45a2:	f892 9001 	ldrb.w	r9, [r2, #1]
    45a6:	4688      	mov	r8, r1
    45a8:	e00a      	b.n	45c0 <__vfprintf+0xe4>
    45aa:	f1a9 0230 	sub.w	r2, r9, #48	; 0x30
    45ae:	b2d1      	uxtb	r1, r2
    45b0:	2909      	cmp	r1, #9
    45b2:	d805      	bhi.n	45c0 <__vfprintf+0xe4>
    45b4:	210a      	movs	r1, #10
    45b6:	fb01 2303 	mla	r3, r1, r3, r2
    45ba:	f815 9b01 	ldrb.w	r9, [r5], #1
    45be:	e7f4      	b.n	45aa <__vfprintf+0xce>
    45c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    45c4:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
    45c8:	930f      	str	r3, [sp, #60]	; 0x3c
    45ca:	d124      	bne.n	4616 <__vfprintf+0x13a>
    45cc:	f895 9000 	ldrb.w	r9, [r5]
    45d0:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    45d4:	d003      	beq.n	45de <__vfprintf+0x102>
    45d6:	2300      	movs	r3, #0
    45d8:	3501      	adds	r5, #1
    45da:	9306      	str	r3, [sp, #24]
    45dc:	e008      	b.n	45f0 <__vfprintf+0x114>
    45de:	f8d8 3000 	ldr.w	r3, [r8]
    45e2:	f895 9001 	ldrb.w	r9, [r5, #1]
    45e6:	9306      	str	r3, [sp, #24]
    45e8:	f108 0804 	add.w	r8, r8, #4
    45ec:	3502      	adds	r5, #2
    45ee:	e00c      	b.n	460a <__vfprintf+0x12e>
    45f0:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    45f4:	b2da      	uxtb	r2, r3
    45f6:	2a09      	cmp	r2, #9
    45f8:	d807      	bhi.n	460a <__vfprintf+0x12e>
    45fa:	9906      	ldr	r1, [sp, #24]
    45fc:	220a      	movs	r2, #10
    45fe:	fb02 3301 	mla	r3, r2, r1, r3
    4602:	f815 9b01 	ldrb.w	r9, [r5], #1
    4606:	9306      	str	r3, [sp, #24]
    4608:	e7f2      	b.n	45f0 <__vfprintf+0x114>
    460a:	9b06      	ldr	r3, [sp, #24]
    460c:	2b00      	cmp	r3, #0
    460e:	db02      	blt.n	4616 <__vfprintf+0x13a>
    4610:	f047 0710 	orr.w	r7, r7, #16
    4614:	e001      	b.n	461a <__vfprintf+0x13e>
    4616:	2300      	movs	r3, #0
    4618:	9306      	str	r3, [sp, #24]
    461a:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    461e:	d10d      	bne.n	463c <__vfprintf+0x160>
    4620:	f895 9000 	ldrb.w	r9, [r5]
    4624:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    4628:	bf03      	ittte	eq
    462a:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    462e:	f047 0760 	orreq.w	r7, r7, #96	; 0x60
    4632:	3502      	addeq	r5, #2
    4634:	3501      	addne	r5, #1
    4636:	bf18      	it	ne
    4638:	f047 0720 	orrne.w	r7, r7, #32
    463c:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
    4640:	d002      	beq.n	4648 <__vfprintf+0x16c>
    4642:	f1b9 0f71 	cmp.w	r9, #113	; 0x71
    4646:	d104      	bne.n	4652 <__vfprintf+0x176>
    4648:	f895 9000 	ldrb.w	r9, [r5]
    464c:	f047 0760 	orr.w	r7, r7, #96	; 0x60
    4650:	e01f      	b.n	4692 <__vfprintf+0x1b6>
    4652:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    4656:	d10e      	bne.n	4676 <__vfprintf+0x19a>
    4658:	f895 9000 	ldrb.w	r9, [r5]
    465c:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    4660:	bf03      	ittte	eq
    4662:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    4666:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
    466a:	3502      	addeq	r5, #2
    466c:	3501      	addne	r5, #1
    466e:	bf18      	it	ne
    4670:	f047 0780 	orrne.w	r7, r7, #128	; 0x80
    4674:	e00e      	b.n	4694 <__vfprintf+0x1b8>
    4676:	f1b9 0f6a 	cmp.w	r9, #106	; 0x6a
    467a:	d102      	bne.n	4682 <__vfprintf+0x1a6>
    467c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    4680:	e005      	b.n	468e <__vfprintf+0x1b2>
    4682:	f1b9 0f7a 	cmp.w	r9, #122	; 0x7a
    4686:	d002      	beq.n	468e <__vfprintf+0x1b2>
    4688:	f1b9 0f74 	cmp.w	r9, #116	; 0x74
    468c:	d102      	bne.n	4694 <__vfprintf+0x1b8>
    468e:	f895 9000 	ldrb.w	r9, [r5]
    4692:	3501      	adds	r5, #1
    4694:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    4698:	dc25      	bgt.n	46e6 <__vfprintf+0x20a>
    469a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    469e:	f280 826e 	bge.w	4b7e <__vfprintf+0x6a2>
    46a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    46a6:	f000 826a 	beq.w	4b7e <__vfprintf+0x6a2>
    46aa:	dc0c      	bgt.n	46c6 <__vfprintf+0x1ea>
    46ac:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    46b0:	f000 825f 	beq.w	4b72 <__vfprintf+0x696>
    46b4:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    46b8:	f000 8261 	beq.w	4b7e <__vfprintf+0x6a2>
    46bc:	f1b9 0f00 	cmp.w	r9, #0
    46c0:	f000 80b4 	beq.w	482c <__vfprintf+0x350>
    46c4:	e031      	b.n	472a <__vfprintf+0x24e>
    46c6:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    46ca:	f000 8252 	beq.w	4b72 <__vfprintf+0x696>
    46ce:	dc04      	bgt.n	46da <__vfprintf+0x1fe>
    46d0:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    46d4:	f000 8171 	beq.w	49ba <__vfprintf+0x4de>
    46d8:	e027      	b.n	472a <__vfprintf+0x24e>
    46da:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
    46de:	d01e      	beq.n	471e <__vfprintf+0x242>
    46e0:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    46e4:	e00c      	b.n	4700 <__vfprintf+0x224>
    46e6:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    46ea:	f000 81b4 	beq.w	4a56 <__vfprintf+0x57a>
    46ee:	dc0a      	bgt.n	4706 <__vfprintf+0x22a>
    46f0:	f1b9 0f6e 	cmp.w	r9, #110	; 0x6e
    46f4:	f000 809f 	beq.w	4836 <__vfprintf+0x35a>
    46f8:	f300 81b6 	bgt.w	4a68 <__vfprintf+0x58c>
    46fc:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    4700:	f000 81f4 	beq.w	4aec <__vfprintf+0x610>
    4704:	e011      	b.n	472a <__vfprintf+0x24e>
    4706:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    470a:	f000 81cd 	beq.w	4aa8 <__vfprintf+0x5cc>
    470e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    4712:	f000 8179 	beq.w	4a08 <__vfprintf+0x52c>
    4716:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
    471a:	d106      	bne.n	472a <__vfprintf+0x24e>
    471c:	e0ae      	b.n	487c <__vfprintf+0x3a0>
    471e:	f108 0304 	add.w	r3, r8, #4
    4722:	930e      	str	r3, [sp, #56]	; 0x38
    4724:	f8d8 9000 	ldr.w	r9, [r8]
    4728:	e001      	b.n	472e <__vfprintf+0x252>
    472a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    472e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4730:	f103 3aff 	add.w	sl, r3, #4294967295
    4734:	f017 0301 	ands.w	r3, r7, #1
    4738:	9306      	str	r3, [sp, #24]
    473a:	d12e      	bne.n	479a <__vfprintf+0x2be>
    473c:	f417 7f00 	tst.w	r7, #512	; 0x200
    4740:	bf14      	ite	ne
    4742:	f04f 0830 	movne.w	r8, #48	; 0x30
    4746:	f04f 0820 	moveq.w	r8, #32
    474a:	2600      	movs	r6, #0
    474c:	2700      	movs	r7, #0
    474e:	9b05      	ldr	r3, [sp, #20]
    4750:	199a      	adds	r2, r3, r6
    4752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4754:	f1a3 0a02 	sub.w	sl, r3, #2
    4758:	ebba 0a06 	subs.w	sl, sl, r6
    475c:	d41c      	bmi.n	4798 <__vfprintf+0x2bc>
    475e:	9b05      	ldr	r3, [sp, #20]
    4760:	18f0      	adds	r0, r6, r3
    4762:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    4766:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    476a:	4290      	cmp	r0, r2
    476c:	eb71 0303 	sbcs.w	r3, r1, r3
    4770:	da0e      	bge.n	4790 <__vfprintf+0x2b4>
    4772:	68a2      	ldr	r2, [r4, #8]
    4774:	3a01      	subs	r2, #1
    4776:	2a00      	cmp	r2, #0
    4778:	60a2      	str	r2, [r4, #8]
    477a:	db05      	blt.n	4788 <__vfprintf+0x2ac>
    477c:	6822      	ldr	r2, [r4, #0]
    477e:	1c51      	adds	r1, r2, #1
    4780:	6021      	str	r1, [r4, #0]
    4782:	f882 8000 	strb.w	r8, [r2]
    4786:	e003      	b.n	4790 <__vfprintf+0x2b4>
    4788:	4640      	mov	r0, r8
    478a:	4621      	mov	r1, r4
    478c:	f000 fea6 	bl	54dc <__flsbuf>
    4790:	3601      	adds	r6, #1
    4792:	f147 0700 	adc.w	r7, r7, #0
    4796:	e7da      	b.n	474e <__vfprintf+0x272>
    4798:	9205      	str	r2, [sp, #20]
    479a:	9b05      	ldr	r3, [sp, #20]
    479c:	17d9      	asrs	r1, r3, #31
    479e:	461a      	mov	r2, r3
    47a0:	f103 0b01 	add.w	fp, r3, #1
    47a4:	460b      	mov	r3, r1
    47a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    47aa:	4282      	cmp	r2, r0
    47ac:	418b      	sbcs	r3, r1
    47ae:	da0e      	bge.n	47ce <__vfprintf+0x2f2>
    47b0:	68a3      	ldr	r3, [r4, #8]
    47b2:	3b01      	subs	r3, #1
    47b4:	2b00      	cmp	r3, #0
    47b6:	60a3      	str	r3, [r4, #8]
    47b8:	db05      	blt.n	47c6 <__vfprintf+0x2ea>
    47ba:	6823      	ldr	r3, [r4, #0]
    47bc:	1c5a      	adds	r2, r3, #1
    47be:	6022      	str	r2, [r4, #0]
    47c0:	f883 9000 	strb.w	r9, [r3]
    47c4:	e003      	b.n	47ce <__vfprintf+0x2f2>
    47c6:	4648      	mov	r0, r9
    47c8:	4621      	mov	r1, r4
    47ca:	f000 fe87 	bl	54dc <__flsbuf>
    47ce:	9b06      	ldr	r3, [sp, #24]
    47d0:	b91b      	cbnz	r3, 47da <__vfprintf+0x2fe>
    47d2:	f8cd b014 	str.w	fp, [sp, #20]
    47d6:	f000 bcc7 	b.w	5168 <__vfprintf+0xc8c>
    47da:	2600      	movs	r6, #0
    47dc:	2700      	movs	r7, #0
    47de:	43f3      	mvns	r3, r6
    47e0:	eb13 0f0a 	cmn.w	r3, sl
    47e4:	d41b      	bmi.n	481e <__vfprintf+0x342>
    47e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    47ea:	eb16 020b 	adds.w	r2, r6, fp
    47ee:	eb47 73eb 	adc.w	r3, r7, fp, asr #31
    47f2:	4282      	cmp	r2, r0
    47f4:	418b      	sbcs	r3, r1
    47f6:	da0e      	bge.n	4816 <__vfprintf+0x33a>
    47f8:	68a3      	ldr	r3, [r4, #8]
    47fa:	3b01      	subs	r3, #1
    47fc:	2b00      	cmp	r3, #0
    47fe:	60a3      	str	r3, [r4, #8]
    4800:	db05      	blt.n	480e <__vfprintf+0x332>
    4802:	6823      	ldr	r3, [r4, #0]
    4804:	1c5a      	adds	r2, r3, #1
    4806:	6022      	str	r2, [r4, #0]
    4808:	2220      	movs	r2, #32
    480a:	701a      	strb	r2, [r3, #0]
    480c:	e003      	b.n	4816 <__vfprintf+0x33a>
    480e:	2020      	movs	r0, #32
    4810:	4621      	mov	r1, r4
    4812:	f000 fe63 	bl	54dc <__flsbuf>
    4816:	3601      	adds	r6, #1
    4818:	f147 0700 	adc.w	r7, r7, #0
    481c:	e7df      	b.n	47de <__vfprintf+0x302>
    481e:	465b      	mov	r3, fp
    4820:	f1ba 0f00 	cmp.w	sl, #0
    4824:	bfa8      	it	ge
    4826:	4453      	addge	r3, sl
    4828:	f000 bc9d 	b.w	5166 <__vfprintf+0xc8a>
    482c:	3d01      	subs	r5, #1
    482e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    4832:	f000 bc99 	b.w	5168 <__vfprintf+0xc8c>
    4836:	f108 0304 	add.w	r3, r8, #4
    483a:	f017 0f40 	tst.w	r7, #64	; 0x40
    483e:	930e      	str	r3, [sp, #56]	; 0x38
    4840:	f8d8 3000 	ldr.w	r3, [r8]
    4844:	d006      	beq.n	4854 <__vfprintf+0x378>
    4846:	9a05      	ldr	r2, [sp, #20]
    4848:	4610      	mov	r0, r2
    484a:	17d1      	asrs	r1, r2, #31
    484c:	e9c3 0100 	strd	r0, r1, [r3]
    4850:	f000 bc8a 	b.w	5168 <__vfprintf+0xc8c>
    4854:	06be      	lsls	r6, r7, #26
    4856:	d40d      	bmi.n	4874 <__vfprintf+0x398>
    4858:	05f8      	lsls	r0, r7, #23
    485a:	d504      	bpl.n	4866 <__vfprintf+0x38a>
    485c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    4860:	701a      	strb	r2, [r3, #0]
    4862:	f000 bc81 	b.w	5168 <__vfprintf+0xc8c>
    4866:	0639      	lsls	r1, r7, #24
    4868:	d504      	bpl.n	4874 <__vfprintf+0x398>
    486a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    486e:	801a      	strh	r2, [r3, #0]
    4870:	f000 bc7a 	b.w	5168 <__vfprintf+0xc8c>
    4874:	9a05      	ldr	r2, [sp, #20]
    4876:	601a      	str	r2, [r3, #0]
    4878:	f000 bc76 	b.w	5168 <__vfprintf+0xc8c>
    487c:	f108 0304 	add.w	r3, r8, #4
    4880:	930e      	str	r3, [sp, #56]	; 0x38
    4882:	f8d8 9000 	ldr.w	r9, [r8]
    4886:	4bab      	ldr	r3, [pc, #684]	; (4b34 <__vfprintf+0x658>)
    4888:	f1b9 0f00 	cmp.w	r9, #0
    488c:	bf08      	it	eq
    488e:	4699      	moveq	r9, r3
    4890:	4648      	mov	r0, r9
    4892:	f000 fd81 	bl	5398 <strlen>
    4896:	06fa      	lsls	r2, r7, #27
    4898:	4682      	mov	sl, r0
    489a:	d503      	bpl.n	48a4 <__vfprintf+0x3c8>
    489c:	9b06      	ldr	r3, [sp, #24]
    489e:	4298      	cmp	r0, r3
    48a0:	bfa8      	it	ge
    48a2:	469a      	movge	sl, r3
    48a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    48a6:	ebca 0b03 	rsb	fp, sl, r3
    48aa:	f017 0301 	ands.w	r3, r7, #1
    48ae:	9306      	str	r3, [sp, #24]
    48b0:	d131      	bne.n	4916 <__vfprintf+0x43a>
    48b2:	f417 7f00 	tst.w	r7, #512	; 0x200
    48b6:	bf14      	ite	ne
    48b8:	f04f 0830 	movne.w	r8, #48	; 0x30
    48bc:	f04f 0820 	moveq.w	r8, #32
    48c0:	2600      	movs	r6, #0
    48c2:	2700      	movs	r7, #0
    48c4:	f10b 32ff 	add.w	r2, fp, #4294967295
    48c8:	1b91      	subs	r1, r2, r6
    48ca:	2900      	cmp	r1, #0
    48cc:	db1c      	blt.n	4908 <__vfprintf+0x42c>
    48ce:	9b05      	ldr	r3, [sp, #20]
    48d0:	18f0      	adds	r0, r6, r3
    48d2:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    48d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    48da:	4290      	cmp	r0, r2
    48dc:	eb71 0303 	sbcs.w	r3, r1, r3
    48e0:	da0e      	bge.n	4900 <__vfprintf+0x424>
    48e2:	68a2      	ldr	r2, [r4, #8]
    48e4:	3a01      	subs	r2, #1
    48e6:	2a00      	cmp	r2, #0
    48e8:	60a2      	str	r2, [r4, #8]
    48ea:	db05      	blt.n	48f8 <__vfprintf+0x41c>
    48ec:	6822      	ldr	r2, [r4, #0]
    48ee:	1c51      	adds	r1, r2, #1
    48f0:	6021      	str	r1, [r4, #0]
    48f2:	f882 8000 	strb.w	r8, [r2]
    48f6:	e003      	b.n	4900 <__vfprintf+0x424>
    48f8:	4640      	mov	r0, r8
    48fa:	4621      	mov	r1, r4
    48fc:	f000 fdee 	bl	54dc <__flsbuf>
    4900:	3601      	adds	r6, #1
    4902:	f147 0700 	adc.w	r7, r7, #0
    4906:	e7dd      	b.n	48c4 <__vfprintf+0x3e8>
    4908:	9b05      	ldr	r3, [sp, #20]
    490a:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    490e:	445b      	add	r3, fp
    4910:	9305      	str	r3, [sp, #20]
    4912:	ebcb 0b02 	rsb	fp, fp, r2
    4916:	2600      	movs	r6, #0
    4918:	2700      	movs	r7, #0
    491a:	45b2      	cmp	sl, r6
    491c:	9b05      	ldr	r3, [sp, #20]
    491e:	dd1c      	ble.n	495a <__vfprintf+0x47e>
    4920:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4924:	18f2      	adds	r2, r6, r3
    4926:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    492a:	4282      	cmp	r2, r0
    492c:	418b      	sbcs	r3, r1
    492e:	da10      	bge.n	4952 <__vfprintf+0x476>
    4930:	68a3      	ldr	r3, [r4, #8]
    4932:	3b01      	subs	r3, #1
    4934:	2b00      	cmp	r3, #0
    4936:	60a3      	str	r3, [r4, #8]
    4938:	eb09 0306 	add.w	r3, r9, r6
    493c:	db05      	blt.n	494a <__vfprintf+0x46e>
    493e:	6822      	ldr	r2, [r4, #0]
    4940:	1c51      	adds	r1, r2, #1
    4942:	6021      	str	r1, [r4, #0]
    4944:	781b      	ldrb	r3, [r3, #0]
    4946:	7013      	strb	r3, [r2, #0]
    4948:	e003      	b.n	4952 <__vfprintf+0x476>
    494a:	7818      	ldrb	r0, [r3, #0]
    494c:	4621      	mov	r1, r4
    494e:	f000 fdc5 	bl	54dc <__flsbuf>
    4952:	3601      	adds	r6, #1
    4954:	f147 0700 	adc.w	r7, r7, #0
    4958:	e7df      	b.n	491a <__vfprintf+0x43e>
    495a:	f1ba 0f00 	cmp.w	sl, #0
    495e:	bfa8      	it	ge
    4960:	4453      	addge	r3, sl
    4962:	9305      	str	r3, [sp, #20]
    4964:	9b06      	ldr	r3, [sp, #24]
    4966:	2b00      	cmp	r3, #0
    4968:	f000 83fe 	beq.w	5168 <__vfprintf+0xc8c>
    496c:	2600      	movs	r6, #0
    496e:	2700      	movs	r7, #0
    4970:	43f3      	mvns	r3, r6
    4972:	eb13 0f0b 	cmn.w	r3, fp
    4976:	9b05      	ldr	r3, [sp, #20]
    4978:	d41a      	bmi.n	49b0 <__vfprintf+0x4d4>
    497a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    497e:	18f2      	adds	r2, r6, r3
    4980:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    4984:	4282      	cmp	r2, r0
    4986:	418b      	sbcs	r3, r1
    4988:	da0e      	bge.n	49a8 <__vfprintf+0x4cc>
    498a:	68a3      	ldr	r3, [r4, #8]
    498c:	3b01      	subs	r3, #1
    498e:	2b00      	cmp	r3, #0
    4990:	60a3      	str	r3, [r4, #8]
    4992:	db05      	blt.n	49a0 <__vfprintf+0x4c4>
    4994:	6823      	ldr	r3, [r4, #0]
    4996:	1c5a      	adds	r2, r3, #1
    4998:	6022      	str	r2, [r4, #0]
    499a:	2220      	movs	r2, #32
    499c:	701a      	strb	r2, [r3, #0]
    499e:	e003      	b.n	49a8 <__vfprintf+0x4cc>
    49a0:	2020      	movs	r0, #32
    49a2:	4621      	mov	r1, r4
    49a4:	f000 fd9a 	bl	54dc <__flsbuf>
    49a8:	3601      	adds	r6, #1
    49aa:	f147 0700 	adc.w	r7, r7, #0
    49ae:	e7df      	b.n	4970 <__vfprintf+0x494>
    49b0:	f1bb 0f00 	cmp.w	fp, #0
    49b4:	bfa8      	it	ge
    49b6:	445b      	addge	r3, fp
    49b8:	e3d5      	b.n	5166 <__vfprintf+0xc8a>
    49ba:	067b      	lsls	r3, r7, #25
    49bc:	d509      	bpl.n	49d2 <__vfprintf+0x4f6>
    49be:	f108 0807 	add.w	r8, r8, #7
    49c2:	f028 0807 	bic.w	r8, r8, #7
    49c6:	f108 0308 	add.w	r3, r8, #8
    49ca:	930e      	str	r3, [sp, #56]	; 0x38
    49cc:	e9d8 2300 	ldrd	r2, r3, [r8]
    49d0:	e005      	b.n	49de <__vfprintf+0x502>
    49d2:	f108 0304 	add.w	r3, r8, #4
    49d6:	f8d8 2000 	ldr.w	r2, [r8]
    49da:	930e      	str	r3, [sp, #56]	; 0x38
    49dc:	2300      	movs	r3, #0
    49de:	063e      	lsls	r6, r7, #24
    49e0:	d501      	bpl.n	49e6 <__vfprintf+0x50a>
    49e2:	b292      	uxth	r2, r2
    49e4:	e003      	b.n	49ee <__vfprintf+0x512>
    49e6:	05f8      	lsls	r0, r7, #23
    49e8:	d502      	bpl.n	49f0 <__vfprintf+0x514>
    49ea:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    49ee:	2300      	movs	r3, #0
    49f0:	4951      	ldr	r1, [pc, #324]	; (4b38 <__vfprintf+0x65c>)
    49f2:	f017 0f08 	tst.w	r7, #8
    49f6:	4851      	ldr	r0, [pc, #324]	; (4b3c <__vfprintf+0x660>)
    49f8:	bf08      	it	eq
    49fa:	4608      	moveq	r0, r1
    49fc:	06f9      	lsls	r1, r7, #27
    49fe:	f140 80d6 	bpl.w	4bae <__vfprintf+0x6d2>
    4a02:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4a06:	e0d2      	b.n	4bae <__vfprintf+0x6d2>
    4a08:	067b      	lsls	r3, r7, #25
    4a0a:	d509      	bpl.n	4a20 <__vfprintf+0x544>
    4a0c:	f108 0807 	add.w	r8, r8, #7
    4a10:	f028 0807 	bic.w	r8, r8, #7
    4a14:	f108 0308 	add.w	r3, r8, #8
    4a18:	930e      	str	r3, [sp, #56]	; 0x38
    4a1a:	e9d8 2300 	ldrd	r2, r3, [r8]
    4a1e:	e005      	b.n	4a2c <__vfprintf+0x550>
    4a20:	f108 0304 	add.w	r3, r8, #4
    4a24:	f8d8 2000 	ldr.w	r2, [r8]
    4a28:	930e      	str	r3, [sp, #56]	; 0x38
    4a2a:	2300      	movs	r3, #0
    4a2c:	063e      	lsls	r6, r7, #24
    4a2e:	d501      	bpl.n	4a34 <__vfprintf+0x558>
    4a30:	b292      	uxth	r2, r2
    4a32:	e003      	b.n	4a3c <__vfprintf+0x560>
    4a34:	05f8      	lsls	r0, r7, #23
    4a36:	d502      	bpl.n	4a3e <__vfprintf+0x562>
    4a38:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4a3c:	2300      	movs	r3, #0
    4a3e:	493e      	ldr	r1, [pc, #248]	; (4b38 <__vfprintf+0x65c>)
    4a40:	f017 0f08 	tst.w	r7, #8
    4a44:	483e      	ldr	r0, [pc, #248]	; (4b40 <__vfprintf+0x664>)
    4a46:	bf08      	it	eq
    4a48:	4608      	moveq	r0, r1
    4a4a:	06f9      	lsls	r1, r7, #27
    4a4c:	f140 80b1 	bpl.w	4bb2 <__vfprintf+0x6d6>
    4a50:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4a54:	e0ad      	b.n	4bb2 <__vfprintf+0x6d6>
    4a56:	f108 0304 	add.w	r3, r8, #4
    4a5a:	930e      	str	r3, [sp, #56]	; 0x38
    4a5c:	f8d8 2000 	ldr.w	r2, [r8]
    4a60:	2300      	movs	r3, #0
    4a62:	4938      	ldr	r1, [pc, #224]	; (4b44 <__vfprintf+0x668>)
    4a64:	4836      	ldr	r0, [pc, #216]	; (4b40 <__vfprintf+0x664>)
    4a66:	e0a7      	b.n	4bb8 <__vfprintf+0x6dc>
    4a68:	067e      	lsls	r6, r7, #25
    4a6a:	d509      	bpl.n	4a80 <__vfprintf+0x5a4>
    4a6c:	f108 0807 	add.w	r8, r8, #7
    4a70:	f028 0807 	bic.w	r8, r8, #7
    4a74:	f108 0308 	add.w	r3, r8, #8
    4a78:	930e      	str	r3, [sp, #56]	; 0x38
    4a7a:	e9d8 2300 	ldrd	r2, r3, [r8]
    4a7e:	e005      	b.n	4a8c <__vfprintf+0x5b0>
    4a80:	f108 0304 	add.w	r3, r8, #4
    4a84:	f8d8 2000 	ldr.w	r2, [r8]
    4a88:	930e      	str	r3, [sp, #56]	; 0x38
    4a8a:	2300      	movs	r3, #0
    4a8c:	0638      	lsls	r0, r7, #24
    4a8e:	d501      	bpl.n	4a94 <__vfprintf+0x5b8>
    4a90:	b292      	uxth	r2, r2
    4a92:	e003      	b.n	4a9c <__vfprintf+0x5c0>
    4a94:	05f9      	lsls	r1, r7, #23
    4a96:	d502      	bpl.n	4a9e <__vfprintf+0x5c2>
    4a98:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4a9c:	2300      	movs	r3, #0
    4a9e:	f017 0f08 	tst.w	r7, #8
    4aa2:	4925      	ldr	r1, [pc, #148]	; (4b38 <__vfprintf+0x65c>)
    4aa4:	4828      	ldr	r0, [pc, #160]	; (4b48 <__vfprintf+0x66c>)
    4aa6:	e059      	b.n	4b5c <__vfprintf+0x680>
    4aa8:	067e      	lsls	r6, r7, #25
    4aaa:	d509      	bpl.n	4ac0 <__vfprintf+0x5e4>
    4aac:	f108 0807 	add.w	r8, r8, #7
    4ab0:	f028 0807 	bic.w	r8, r8, #7
    4ab4:	f108 0308 	add.w	r3, r8, #8
    4ab8:	930e      	str	r3, [sp, #56]	; 0x38
    4aba:	e9d8 2300 	ldrd	r2, r3, [r8]
    4abe:	e005      	b.n	4acc <__vfprintf+0x5f0>
    4ac0:	f108 0304 	add.w	r3, r8, #4
    4ac4:	f8d8 2000 	ldr.w	r2, [r8]
    4ac8:	930e      	str	r3, [sp, #56]	; 0x38
    4aca:	2300      	movs	r3, #0
    4acc:	0638      	lsls	r0, r7, #24
    4ace:	d501      	bpl.n	4ad4 <__vfprintf+0x5f8>
    4ad0:	b292      	uxth	r2, r2
    4ad2:	e003      	b.n	4adc <__vfprintf+0x600>
    4ad4:	05f9      	lsls	r1, r7, #23
    4ad6:	d502      	bpl.n	4ade <__vfprintf+0x602>
    4ad8:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4adc:	2300      	movs	r3, #0
    4ade:	f017 0110 	ands.w	r1, r7, #16
    4ae2:	d068      	beq.n	4bb6 <__vfprintf+0x6da>
    4ae4:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4ae8:	2100      	movs	r1, #0
    4aea:	e064      	b.n	4bb6 <__vfprintf+0x6da>
    4aec:	067b      	lsls	r3, r7, #25
    4aee:	d509      	bpl.n	4b04 <__vfprintf+0x628>
    4af0:	f108 0807 	add.w	r8, r8, #7
    4af4:	f028 0807 	bic.w	r8, r8, #7
    4af8:	f108 0308 	add.w	r3, r8, #8
    4afc:	930e      	str	r3, [sp, #56]	; 0x38
    4afe:	e9d8 2300 	ldrd	r2, r3, [r8]
    4b02:	e005      	b.n	4b10 <__vfprintf+0x634>
    4b04:	f8d8 2000 	ldr.w	r2, [r8]
    4b08:	f108 0304 	add.w	r3, r8, #4
    4b0c:	930e      	str	r3, [sp, #56]	; 0x38
    4b0e:	17d3      	asrs	r3, r2, #31
    4b10:	063e      	lsls	r6, r7, #24
    4b12:	d501      	bpl.n	4b18 <__vfprintf+0x63c>
    4b14:	b212      	sxth	r2, r2
    4b16:	e002      	b.n	4b1e <__vfprintf+0x642>
    4b18:	05f8      	lsls	r0, r7, #23
    4b1a:	d501      	bpl.n	4b20 <__vfprintf+0x644>
    4b1c:	b252      	sxtb	r2, r2
    4b1e:	17d3      	asrs	r3, r2, #31
    4b20:	2a00      	cmp	r2, #0
    4b22:	f173 0100 	sbcs.w	r1, r3, #0
    4b26:	da13      	bge.n	4b50 <__vfprintf+0x674>
    4b28:	4252      	negs	r2, r2
    4b2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4b2e:	4807      	ldr	r0, [pc, #28]	; (4b4c <__vfprintf+0x670>)
    4b30:	e018      	b.n	4b64 <__vfprintf+0x688>
    4b32:	bf00      	nop
    4b34:	0000748c 	.word	0x0000748c
    4b38:	000072d3 	.word	0x000072d3
    4b3c:	00007493 	.word	0x00007493
    4b40:	00007496 	.word	0x00007496
    4b44:	000074ac 	.word	0x000074ac
    4b48:	00007499 	.word	0x00007499
    4b4c:	00007486 	.word	0x00007486
    4b50:	07b9      	lsls	r1, r7, #30
    4b52:	d406      	bmi.n	4b62 <__vfprintf+0x686>
    4b54:	49b6      	ldr	r1, [pc, #728]	; (4e30 <__vfprintf+0x954>)
    4b56:	48b7      	ldr	r0, [pc, #732]	; (4e34 <__vfprintf+0x958>)
    4b58:	f017 0f04 	tst.w	r7, #4
    4b5c:	bf08      	it	eq
    4b5e:	4608      	moveq	r0, r1
    4b60:	e000      	b.n	4b64 <__vfprintf+0x688>
    4b62:	48b5      	ldr	r0, [pc, #724]	; (4e38 <__vfprintf+0x95c>)
    4b64:	f017 0110 	ands.w	r1, r7, #16
    4b68:	d026      	beq.n	4bb8 <__vfprintf+0x6dc>
    4b6a:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4b6e:	2100      	movs	r1, #0
    4b70:	e022      	b.n	4bb8 <__vfprintf+0x6dc>
    4b72:	06fb      	lsls	r3, r7, #27
    4b74:	bf5e      	ittt	pl
    4b76:	230d      	movpl	r3, #13
    4b78:	f047 0710 	orrpl.w	r7, r7, #16
    4b7c:	9306      	strpl	r3, [sp, #24]
    4b7e:	9b06      	ldr	r3, [sp, #24]
    4b80:	f017 0f10 	tst.w	r7, #16
    4b84:	f108 0807 	add.w	r8, r8, #7
    4b88:	bf08      	it	eq
    4b8a:	2306      	moveq	r3, #6
    4b8c:	f028 0807 	bic.w	r8, r8, #7
    4b90:	9306      	str	r3, [sp, #24]
    4b92:	2100      	movs	r1, #0
    4b94:	f108 0308 	add.w	r3, r8, #8
    4b98:	930e      	str	r3, [sp, #56]	; 0x38
    4b9a:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
    4b9e:	e9d8 2300 	ldrd	r2, r3, [r8]
    4ba2:	4608      	mov	r0, r1
    4ba4:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
    4ba8:	2200      	movs	r2, #0
    4baa:	2300      	movs	r3, #0
    4bac:	e004      	b.n	4bb8 <__vfprintf+0x6dc>
    4bae:	49a3      	ldr	r1, [pc, #652]	; (4e3c <__vfprintf+0x960>)
    4bb0:	e002      	b.n	4bb8 <__vfprintf+0x6dc>
    4bb2:	49a3      	ldr	r1, [pc, #652]	; (4e40 <__vfprintf+0x964>)
    4bb4:	e000      	b.n	4bb8 <__vfprintf+0x6dc>
    4bb6:	489e      	ldr	r0, [pc, #632]	; (4e30 <__vfprintf+0x954>)
    4bb8:	9e05      	ldr	r6, [sp, #20]
    4bba:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    4bbe:	ebba 0a06 	subs.w	sl, sl, r6
    4bc2:	eb6b 7be6 	sbc.w	fp, fp, r6, asr #31
    4bc6:	e9cd ab08 	strd	sl, fp, [sp, #32]
    4bca:	9e06      	ldr	r6, [sp, #24]
    4bcc:	901f      	str	r0, [sp, #124]	; 0x7c
    4bce:	f04f 30ff 	mov.w	r0, #4294967295
    4bd2:	9020      	str	r0, [sp, #128]	; 0x80
    4bd4:	9021      	str	r0, [sp, #132]	; 0x84
    4bd6:	961e      	str	r6, [sp, #120]	; 0x78
    4bd8:	2000      	movs	r0, #0
    4bda:	f04f 0e55 	mov.w	lr, #85	; 0x55
    4bde:	ae24      	add	r6, sp, #144	; 0x90
    4be0:	f800 e006 	strb.w	lr, [r0, r6]
    4be4:	3001      	adds	r0, #1
    4be6:	2820      	cmp	r0, #32
    4be8:	d1f7      	bne.n	4bda <__vfprintf+0x6fe>
    4bea:	f417 6f82 	tst.w	r7, #1040	; 0x410
    4bee:	bf04      	itt	eq
    4bf0:	2001      	moveq	r0, #1
    4bf2:	901e      	streq	r0, [sp, #120]	; 0x78
    4bf4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    4bf8:	dc1b      	bgt.n	4c32 <__vfprintf+0x756>
    4bfa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    4bfe:	f280 80d4 	bge.w	4daa <__vfprintf+0x8ce>
    4c02:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    4c06:	f000 80d0 	beq.w	4daa <__vfprintf+0x8ce>
    4c0a:	dc08      	bgt.n	4c1e <__vfprintf+0x742>
    4c0c:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    4c10:	f000 80cb 	beq.w	4daa <__vfprintf+0x8ce>
    4c14:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    4c18:	f040 80d7 	bne.w	4dca <__vfprintf+0x8ee>
    4c1c:	e0c5      	b.n	4daa <__vfprintf+0x8ce>
    4c1e:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    4c22:	f000 80c2 	beq.w	4daa <__vfprintf+0x8ce>
    4c26:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    4c2a:	d017      	beq.n	4c5c <__vfprintf+0x780>
    4c2c:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    4c30:	e011      	b.n	4c56 <__vfprintf+0x77a>
    4c32:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    4c36:	d014      	beq.n	4c62 <__vfprintf+0x786>
    4c38:	dc08      	bgt.n	4c4c <__vfprintf+0x770>
    4c3a:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    4c3e:	d00d      	beq.n	4c5c <__vfprintf+0x780>
    4c40:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
    4c44:	f040 80c1 	bne.w	4dca <__vfprintf+0x8ee>
    4c48:	2100      	movs	r1, #0
    4c4a:	e020      	b.n	4c8e <__vfprintf+0x7b2>
    4c4c:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    4c50:	d004      	beq.n	4c5c <__vfprintf+0x780>
    4c52:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    4c56:	f040 80b8 	bne.w	4dca <__vfprintf+0x8ee>
    4c5a:	e002      	b.n	4c62 <__vfprintf+0x786>
    4c5c:	f04f 0e00 	mov.w	lr, #0
    4c60:	e027      	b.n	4cb2 <__vfprintf+0x7d6>
    4c62:	2000      	movs	r0, #0
    4c64:	ea52 0e03 	orrs.w	lr, r2, r3
    4c68:	4606      	mov	r6, r0
    4c6a:	f000 80af 	beq.w	4dcc <__vfprintf+0x8f0>
    4c6e:	f002 060f 	and.w	r6, r2, #15
    4c72:	f811 e006 	ldrb.w	lr, [r1, r6]
    4c76:	ae24      	add	r6, sp, #144	; 0x90
    4c78:	f800 e006 	strb.w	lr, [r0, r6]
    4c7c:	0916      	lsrs	r6, r2, #4
    4c7e:	ea46 7603 	orr.w	r6, r6, r3, lsl #28
    4c82:	ea4f 1e13 	mov.w	lr, r3, lsr #4
    4c86:	4632      	mov	r2, r6
    4c88:	4673      	mov	r3, lr
    4c8a:	3001      	adds	r0, #1
    4c8c:	e7ea      	b.n	4c64 <__vfprintf+0x788>
    4c8e:	ea52 0003 	orrs.w	r0, r2, r3
    4c92:	460e      	mov	r6, r1
    4c94:	f000 809a 	beq.w	4dcc <__vfprintf+0x8f0>
    4c98:	f002 0007 	and.w	r0, r2, #7
    4c9c:	3030      	adds	r0, #48	; 0x30
    4c9e:	ae24      	add	r6, sp, #144	; 0x90
    4ca0:	5588      	strb	r0, [r1, r6]
    4ca2:	08d0      	lsrs	r0, r2, #3
    4ca4:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
    4ca8:	08de      	lsrs	r6, r3, #3
    4caa:	4602      	mov	r2, r0
    4cac:	4633      	mov	r3, r6
    4cae:	3101      	adds	r1, #1
    4cb0:	e7ed      	b.n	4c8e <__vfprintf+0x7b2>
    4cb2:	ea52 0103 	orrs.w	r1, r2, r3
    4cb6:	4676      	mov	r6, lr
    4cb8:	f000 8088 	beq.w	4dcc <__vfprintf+0x8f0>
    4cbc:	0891      	lsrs	r1, r2, #2
    4cbe:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
    4cc2:	9118      	str	r1, [sp, #96]	; 0x60
    4cc4:	0899      	lsrs	r1, r3, #2
    4cc6:	9119      	str	r1, [sp, #100]	; 0x64
    4cc8:	0859      	lsrs	r1, r3, #1
    4cca:	ea4f 0032 	mov.w	r0, r2, rrx
    4cce:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    4cd2:	eb18 0800 	adds.w	r8, r8, r0
    4cd6:	4640      	mov	r0, r8
    4cd8:	eb49 0901 	adc.w	r9, r9, r1
    4cdc:	4649      	mov	r1, r9
    4cde:	0906      	lsrs	r6, r0, #4
    4ce0:	ea46 7609 	orr.w	r6, r6, r9, lsl #28
    4ce4:	9610      	str	r6, [sp, #64]	; 0x40
    4ce6:	090e      	lsrs	r6, r1, #4
    4ce8:	9611      	str	r6, [sp, #68]	; 0x44
    4cea:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
    4cee:	eb18 0800 	adds.w	r8, r8, r0
    4cf2:	4640      	mov	r0, r8
    4cf4:	eb49 0901 	adc.w	r9, r9, r1
    4cf8:	4649      	mov	r1, r9
    4cfa:	0a06      	lsrs	r6, r0, #8
    4cfc:	ea46 6609 	orr.w	r6, r6, r9, lsl #24
    4d00:	9612      	str	r6, [sp, #72]	; 0x48
    4d02:	0a0e      	lsrs	r6, r1, #8
    4d04:	9613      	str	r6, [sp, #76]	; 0x4c
    4d06:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    4d0a:	eb18 0800 	adds.w	r8, r8, r0
    4d0e:	4640      	mov	r0, r8
    4d10:	eb49 0901 	adc.w	r9, r9, r1
    4d14:	4649      	mov	r1, r9
    4d16:	0c06      	lsrs	r6, r0, #16
    4d18:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
    4d1c:	9614      	str	r6, [sp, #80]	; 0x50
    4d1e:	0c0e      	lsrs	r6, r1, #16
    4d20:	9615      	str	r6, [sp, #84]	; 0x54
    4d22:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    4d26:	eb18 0800 	adds.w	r8, r8, r0
    4d2a:	eb49 0901 	adc.w	r9, r9, r1
    4d2e:	4640      	mov	r0, r8
    4d30:	4649      	mov	r1, r9
    4d32:	2600      	movs	r6, #0
    4d34:	961b      	str	r6, [sp, #108]	; 0x6c
    4d36:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    4d3a:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    4d3e:	eb18 0800 	adds.w	r8, r8, r0
    4d42:	eb49 0901 	adc.w	r9, r9, r1
    4d46:	4640      	mov	r0, r8
    4d48:	4649      	mov	r1, r9
    4d4a:	08c6      	lsrs	r6, r0, #3
    4d4c:	08c9      	lsrs	r1, r1, #3
    4d4e:	1d90      	adds	r0, r2, #6
    4d50:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
    4d54:	910d      	str	r1, [sp, #52]	; 0x34
    4d56:	f143 0100 	adc.w	r1, r3, #0
    4d5a:	230a      	movs	r3, #10
    4d5c:	fba6 8903 	umull	r8, r9, r6, r3
    4d60:	960c      	str	r6, [sp, #48]	; 0x30
    4d62:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4d64:	ebb0 0008 	subs.w	r0, r0, r8
    4d68:	fb03 9906 	mla	r9, r3, r6, r9
    4d6c:	ea4f 1610 	mov.w	r6, r0, lsr #4
    4d70:	eb61 0109 	sbc.w	r1, r1, r9
    4d74:	ea46 7601 	orr.w	r6, r6, r1, lsl #28
    4d78:	0909      	lsrs	r1, r1, #4
    4d7a:	9616      	str	r6, [sp, #88]	; 0x58
    4d7c:	9117      	str	r1, [sp, #92]	; 0x5c
    4d7e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    4d82:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
    4d86:	eb10 0008 	adds.w	r0, r0, r8
    4d8a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4d8e:	f102 0230 	add.w	r2, r2, #48	; 0x30
    4d92:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    4d96:	eb41 0109 	adc.w	r1, r1, r9
    4d9a:	ab24      	add	r3, sp, #144	; 0x90
    4d9c:	f80e 2003 	strb.w	r2, [lr, r3]
    4da0:	f10e 0e01 	add.w	lr, lr, #1
    4da4:	4602      	mov	r2, r0
    4da6:	460b      	mov	r3, r1
    4da8:	e783      	b.n	4cb2 <__vfprintf+0x7d6>
    4daa:	ab1f      	add	r3, sp, #124	; 0x7c
    4dac:	9300      	str	r3, [sp, #0]
    4dae:	ab1e      	add	r3, sp, #120	; 0x78
    4db0:	9301      	str	r3, [sp, #4]
    4db2:	ab20      	add	r3, sp, #128	; 0x80
    4db4:	9302      	str	r3, [sp, #8]
    4db6:	ab21      	add	r3, sp, #132	; 0x84
    4db8:	9303      	str	r3, [sp, #12]
    4dba:	9e38      	ldr	r6, [sp, #224]	; 0xe0
    4dbc:	4648      	mov	r0, r9
    4dbe:	a922      	add	r1, sp, #136	; 0x88
    4dc0:	aa24      	add	r2, sp, #144	; 0x90
    4dc2:	463b      	mov	r3, r7
    4dc4:	47b0      	blx	r6
    4dc6:	4606      	mov	r6, r0
    4dc8:	e000      	b.n	4dcc <__vfprintf+0x8f0>
    4dca:	2600      	movs	r6, #0
    4dcc:	f417 6380 	ands.w	r3, r7, #1024	; 0x400
    4dd0:	931c      	str	r3, [sp, #112]	; 0x70
    4dd2:	d00e      	beq.n	4df2 <__vfprintf+0x916>
    4dd4:	2300      	movs	r3, #0
    4dd6:	931e      	str	r3, [sp, #120]	; 0x78
    4dd8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    4dda:	2b00      	cmp	r3, #0
    4ddc:	bfc4      	itt	gt
    4dde:	f103 33ff 	addgt.w	r3, r3, #4294967295
    4de2:	931e      	strgt	r3, [sp, #120]	; 0x78
    4de4:	9b21      	ldr	r3, [sp, #132]	; 0x84
    4de6:	2b00      	cmp	r3, #0
    4de8:	dd08      	ble.n	4dfc <__vfprintf+0x920>
    4dea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    4dec:	3b01      	subs	r3, #1
    4dee:	4413      	add	r3, r2
    4df0:	e003      	b.n	4dfa <__vfprintf+0x91e>
    4df2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    4df4:	1b9b      	subs	r3, r3, r6
    4df6:	bf48      	it	mi
    4df8:	2300      	movmi	r3, #0
    4dfa:	931e      	str	r3, [sp, #120]	; 0x78
    4dfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    4dfe:	981f      	ldr	r0, [sp, #124]	; 0x7c
    4e00:	eb06 0803 	add.w	r8, r6, r3
    4e04:	f000 fac8 	bl	5398 <strlen>
    4e08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4e0a:	ebc8 0b03 	rsb	fp, r8, r3
    4e0e:	f007 0301 	and.w	r3, r7, #1
    4e12:	930f      	str	r3, [sp, #60]	; 0x3c
    4e14:	f240 2301 	movw	r3, #513	; 0x201
    4e18:	403b      	ands	r3, r7
    4e1a:	ebc0 0b0b 	rsb	fp, r0, fp
    4e1e:	b18b      	cbz	r3, 4e44 <__vfprintf+0x968>
    4e20:	f04f 0a00 	mov.w	sl, #0
    4e24:	f04f 0800 	mov.w	r8, #0
    4e28:	f04f 0900 	mov.w	r9, #0
    4e2c:	e040      	b.n	4eb0 <__vfprintf+0x9d4>
    4e2e:	bf00      	nop
    4e30:	000072d3 	.word	0x000072d3
    4e34:	00007456 	.word	0x00007456
    4e38:	00007454 	.word	0x00007454
    4e3c:	0000749b 	.word	0x0000749b
    4e40:	000074ac 	.word	0x000074ac
    4e44:	f04f 0800 	mov.w	r8, #0
    4e48:	f04f 0900 	mov.w	r9, #0
    4e4c:	f10b 33ff 	add.w	r3, fp, #4294967295
    4e50:	ebc8 0203 	rsb	r2, r8, r3
    4e54:	2a00      	cmp	r2, #0
    4e56:	db19      	blt.n	4e8c <__vfprintf+0x9b0>
    4e58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    4e5c:	4590      	cmp	r8, r2
    4e5e:	eb79 0303 	sbcs.w	r3, r9, r3
    4e62:	da0e      	bge.n	4e82 <__vfprintf+0x9a6>
    4e64:	68a3      	ldr	r3, [r4, #8]
    4e66:	3b01      	subs	r3, #1
    4e68:	2b00      	cmp	r3, #0
    4e6a:	60a3      	str	r3, [r4, #8]
    4e6c:	db05      	blt.n	4e7a <__vfprintf+0x99e>
    4e6e:	6823      	ldr	r3, [r4, #0]
    4e70:	1c5a      	adds	r2, r3, #1
    4e72:	6022      	str	r2, [r4, #0]
    4e74:	2220      	movs	r2, #32
    4e76:	701a      	strb	r2, [r3, #0]
    4e78:	e003      	b.n	4e82 <__vfprintf+0x9a6>
    4e7a:	2020      	movs	r0, #32
    4e7c:	4621      	mov	r1, r4
    4e7e:	f000 fb2d 	bl	54dc <__flsbuf>
    4e82:	f118 0801 	adds.w	r8, r8, #1
    4e86:	f149 0900 	adc.w	r9, r9, #0
    4e8a:	e7df      	b.n	4e4c <__vfprintf+0x970>
    4e8c:	ea2b 7aeb 	bic.w	sl, fp, fp, asr #31
    4e90:	ebca 0b03 	rsb	fp, sl, r3
    4e94:	e7c6      	b.n	4e24 <__vfprintf+0x948>
    4e96:	eb18 020a 	adds.w	r2, r8, sl
    4e9a:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    4e9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4ea2:	4282      	cmp	r2, r0
    4ea4:	418b      	sbcs	r3, r1
    4ea6:	db0e      	blt.n	4ec6 <__vfprintf+0x9ea>
    4ea8:	f118 0801 	adds.w	r8, r8, #1
    4eac:	f149 0900 	adc.w	r9, r9, #0
    4eb0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    4eb2:	eb0a 0308 	add.w	r3, sl, r8
    4eb6:	1c51      	adds	r1, r2, #1
    4eb8:	911f      	str	r1, [sp, #124]	; 0x7c
    4eba:	f892 e000 	ldrb.w	lr, [r2]
    4ebe:	f1be 0f00 	cmp.w	lr, #0
    4ec2:	d1e8      	bne.n	4e96 <__vfprintf+0x9ba>
    4ec4:	e00f      	b.n	4ee6 <__vfprintf+0xa0a>
    4ec6:	68a3      	ldr	r3, [r4, #8]
    4ec8:	3b01      	subs	r3, #1
    4eca:	2b00      	cmp	r3, #0
    4ecc:	60a3      	str	r3, [r4, #8]
    4ece:	db05      	blt.n	4edc <__vfprintf+0xa00>
    4ed0:	6823      	ldr	r3, [r4, #0]
    4ed2:	1c5a      	adds	r2, r3, #1
    4ed4:	6022      	str	r2, [r4, #0]
    4ed6:	f883 e000 	strb.w	lr, [r3]
    4eda:	e7e5      	b.n	4ea8 <__vfprintf+0x9cc>
    4edc:	4670      	mov	r0, lr
    4ede:	4621      	mov	r1, r4
    4ee0:	f000 fafc 	bl	54dc <__flsbuf>
    4ee4:	e7e0      	b.n	4ea8 <__vfprintf+0x9cc>
    4ee6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4ee8:	469a      	mov	sl, r3
    4eea:	2a00      	cmp	r2, #0
    4eec:	d135      	bne.n	4f5a <__vfprintf+0xa7e>
    4eee:	f417 7f00 	tst.w	r7, #512	; 0x200
    4ef2:	bf14      	ite	ne
    4ef4:	2730      	movne	r7, #48	; 0x30
    4ef6:	2720      	moveq	r7, #32
    4ef8:	2000      	movs	r0, #0
    4efa:	2100      	movs	r1, #0
    4efc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    4f00:	9906      	ldr	r1, [sp, #24]
    4f02:	f10b 32ff 	add.w	r2, fp, #4294967295
    4f06:	1a51      	subs	r1, r2, r1
    4f08:	2900      	cmp	r1, #0
    4f0a:	db20      	blt.n	4f4e <__vfprintf+0xa72>
    4f0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    4f10:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    4f14:	18c0      	adds	r0, r0, r3
    4f16:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
    4f1a:	4540      	cmp	r0, r8
    4f1c:	eb71 0209 	sbcs.w	r2, r1, r9
    4f20:	da0f      	bge.n	4f42 <__vfprintf+0xa66>
    4f22:	68a2      	ldr	r2, [r4, #8]
    4f24:	3a01      	subs	r2, #1
    4f26:	2a00      	cmp	r2, #0
    4f28:	60a2      	str	r2, [r4, #8]
    4f2a:	db04      	blt.n	4f36 <__vfprintf+0xa5a>
    4f2c:	6822      	ldr	r2, [r4, #0]
    4f2e:	1c51      	adds	r1, r2, #1
    4f30:	6021      	str	r1, [r4, #0]
    4f32:	7017      	strb	r7, [r2, #0]
    4f34:	e005      	b.n	4f42 <__vfprintf+0xa66>
    4f36:	4638      	mov	r0, r7
    4f38:	4621      	mov	r1, r4
    4f3a:	931d      	str	r3, [sp, #116]	; 0x74
    4f3c:	f000 face 	bl	54dc <__flsbuf>
    4f40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4f42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    4f46:	3001      	adds	r0, #1
    4f48:	f141 0100 	adc.w	r1, r1, #0
    4f4c:	e7d6      	b.n	4efc <__vfprintf+0xa20>
    4f4e:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    4f52:	eb03 0a0b 	add.w	sl, r3, fp
    4f56:	ebcb 0b02 	rsb	fp, fp, r2
    4f5a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	d07c      	beq.n	505a <__vfprintf+0xb7e>
    4f60:	2700      	movs	r7, #0
    4f62:	42b7      	cmp	r7, r6
    4f64:	f280 80d5 	bge.w	5112 <__vfprintf+0xc36>
    4f68:	ab24      	add	r3, sp, #144	; 0x90
    4f6a:	f817 e003 	ldrb.w	lr, [r7, r3]
    4f6e:	f1be 0f3c 	cmp.w	lr, #60	; 0x3c
    4f72:	d007      	beq.n	4f84 <__vfprintf+0xaa8>
    4f74:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
    4f78:	d151      	bne.n	501e <__vfprintf+0xb42>
    4f7a:	f04f 0800 	mov.w	r8, #0
    4f7e:	f04f 0900 	mov.w	r9, #0
    4f82:	e034      	b.n	4fee <__vfprintf+0xb12>
    4f84:	f04f 0800 	mov.w	r8, #0
    4f88:	f04f 0900 	mov.w	r9, #0
    4f8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
    4f8e:	eb0a 0308 	add.w	r3, sl, r8
    4f92:	3a01      	subs	r2, #1
    4f94:	2a00      	cmp	r2, #0
    4f96:	9220      	str	r2, [sp, #128]	; 0x80
    4f98:	db5c      	blt.n	5054 <__vfprintf+0xb78>
    4f9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4f9e:	eb18 020a 	adds.w	r2, r8, sl
    4fa2:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    4fa6:	4282      	cmp	r2, r0
    4fa8:	418b      	sbcs	r3, r1
    4faa:	da0e      	bge.n	4fca <__vfprintf+0xaee>
    4fac:	68a3      	ldr	r3, [r4, #8]
    4fae:	3b01      	subs	r3, #1
    4fb0:	2b00      	cmp	r3, #0
    4fb2:	60a3      	str	r3, [r4, #8]
    4fb4:	db05      	blt.n	4fc2 <__vfprintf+0xae6>
    4fb6:	6823      	ldr	r3, [r4, #0]
    4fb8:	1c5a      	adds	r2, r3, #1
    4fba:	6022      	str	r2, [r4, #0]
    4fbc:	2230      	movs	r2, #48	; 0x30
    4fbe:	701a      	strb	r2, [r3, #0]
    4fc0:	e003      	b.n	4fca <__vfprintf+0xaee>
    4fc2:	2030      	movs	r0, #48	; 0x30
    4fc4:	4621      	mov	r1, r4
    4fc6:	f000 fa89 	bl	54dc <__flsbuf>
    4fca:	f118 0801 	adds.w	r8, r8, #1
    4fce:	f149 0900 	adc.w	r9, r9, #0
    4fd2:	e7db      	b.n	4f8c <__vfprintf+0xab0>
    4fd4:	eb18 020a 	adds.w	r2, r8, sl
    4fd8:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    4fdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4fe0:	4282      	cmp	r2, r0
    4fe2:	418b      	sbcs	r3, r1
    4fe4:	db0b      	blt.n	4ffe <__vfprintf+0xb22>
    4fe6:	f118 0801 	adds.w	r8, r8, #1
    4fea:	f149 0900 	adc.w	r9, r9, #0
    4fee:	9a21      	ldr	r2, [sp, #132]	; 0x84
    4ff0:	eb0a 0308 	add.w	r3, sl, r8
    4ff4:	3a01      	subs	r2, #1
    4ff6:	2a00      	cmp	r2, #0
    4ff8:	9221      	str	r2, [sp, #132]	; 0x84
    4ffa:	daeb      	bge.n	4fd4 <__vfprintf+0xaf8>
    4ffc:	e02a      	b.n	5054 <__vfprintf+0xb78>
    4ffe:	68a3      	ldr	r3, [r4, #8]
    5000:	3b01      	subs	r3, #1
    5002:	2b00      	cmp	r3, #0
    5004:	60a3      	str	r3, [r4, #8]
    5006:	db05      	blt.n	5014 <__vfprintf+0xb38>
    5008:	6823      	ldr	r3, [r4, #0]
    500a:	1c5a      	adds	r2, r3, #1
    500c:	6022      	str	r2, [r4, #0]
    500e:	2230      	movs	r2, #48	; 0x30
    5010:	701a      	strb	r2, [r3, #0]
    5012:	e7e8      	b.n	4fe6 <__vfprintf+0xb0a>
    5014:	4621      	mov	r1, r4
    5016:	2030      	movs	r0, #48	; 0x30
    5018:	f000 fa60 	bl	54dc <__flsbuf>
    501c:	e7e3      	b.n	4fe6 <__vfprintf+0xb0a>
    501e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5022:	ea4f 79ea 	mov.w	r9, sl, asr #31
    5026:	4582      	cmp	sl, r0
    5028:	eb79 0201 	sbcs.w	r2, r9, r1
    502c:	f10a 0301 	add.w	r3, sl, #1
    5030:	da10      	bge.n	5054 <__vfprintf+0xb78>
    5032:	68a2      	ldr	r2, [r4, #8]
    5034:	3a01      	subs	r2, #1
    5036:	2a00      	cmp	r2, #0
    5038:	60a2      	str	r2, [r4, #8]
    503a:	db05      	blt.n	5048 <__vfprintf+0xb6c>
    503c:	6822      	ldr	r2, [r4, #0]
    503e:	1c51      	adds	r1, r2, #1
    5040:	6021      	str	r1, [r4, #0]
    5042:	f882 e000 	strb.w	lr, [r2]
    5046:	e005      	b.n	5054 <__vfprintf+0xb78>
    5048:	4670      	mov	r0, lr
    504a:	4621      	mov	r1, r4
    504c:	9306      	str	r3, [sp, #24]
    504e:	f000 fa45 	bl	54dc <__flsbuf>
    5052:	9b06      	ldr	r3, [sp, #24]
    5054:	3701      	adds	r7, #1
    5056:	469a      	mov	sl, r3
    5058:	e783      	b.n	4f62 <__vfprintf+0xa86>
    505a:	f04f 0800 	mov.w	r8, #0
    505e:	f04f 0900 	mov.w	r9, #0
    5062:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5064:	eb0a 0708 	add.w	r7, sl, r8
    5068:	3b01      	subs	r3, #1
    506a:	2b00      	cmp	r3, #0
    506c:	931e      	str	r3, [sp, #120]	; 0x78
    506e:	db1c      	blt.n	50aa <__vfprintf+0xbce>
    5070:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5074:	eb18 020a 	adds.w	r2, r8, sl
    5078:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    507c:	4282      	cmp	r2, r0
    507e:	418b      	sbcs	r3, r1
    5080:	da0e      	bge.n	50a0 <__vfprintf+0xbc4>
    5082:	68a3      	ldr	r3, [r4, #8]
    5084:	3b01      	subs	r3, #1
    5086:	2b00      	cmp	r3, #0
    5088:	60a3      	str	r3, [r4, #8]
    508a:	db05      	blt.n	5098 <__vfprintf+0xbbc>
    508c:	6823      	ldr	r3, [r4, #0]
    508e:	1c5a      	adds	r2, r3, #1
    5090:	6022      	str	r2, [r4, #0]
    5092:	2230      	movs	r2, #48	; 0x30
    5094:	701a      	strb	r2, [r3, #0]
    5096:	e003      	b.n	50a0 <__vfprintf+0xbc4>
    5098:	2030      	movs	r0, #48	; 0x30
    509a:	4621      	mov	r1, r4
    509c:	f000 fa1e 	bl	54dc <__flsbuf>
    50a0:	f118 0801 	adds.w	r8, r8, #1
    50a4:	f149 0900 	adc.w	r9, r9, #0
    50a8:	e7db      	b.n	5062 <__vfprintf+0xb86>
    50aa:	ab2c      	add	r3, sp, #176	; 0xb0
    50ac:	eb03 0a06 	add.w	sl, r3, r6
    50b0:	f1aa 0a21 	sub.w	sl, sl, #33	; 0x21
    50b4:	f04f 0800 	mov.w	r8, #0
    50b8:	f04f 0900 	mov.w	r9, #0
    50bc:	ebc8 0306 	rsb	r3, r8, r6
    50c0:	2b00      	cmp	r3, #0
    50c2:	dd20      	ble.n	5106 <__vfprintf+0xc2a>
    50c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    50c8:	eb18 0207 	adds.w	r2, r8, r7
    50cc:	eb49 73e7 	adc.w	r3, r9, r7, asr #31
    50d0:	4282      	cmp	r2, r0
    50d2:	418b      	sbcs	r3, r1
    50d4:	da10      	bge.n	50f8 <__vfprintf+0xc1c>
    50d6:	68a3      	ldr	r3, [r4, #8]
    50d8:	3b01      	subs	r3, #1
    50da:	2b00      	cmp	r3, #0
    50dc:	60a3      	str	r3, [r4, #8]
    50de:	db06      	blt.n	50ee <__vfprintf+0xc12>
    50e0:	6823      	ldr	r3, [r4, #0]
    50e2:	1c5a      	adds	r2, r3, #1
    50e4:	6022      	str	r2, [r4, #0]
    50e6:	f89a 2000 	ldrb.w	r2, [sl]
    50ea:	701a      	strb	r2, [r3, #0]
    50ec:	e004      	b.n	50f8 <__vfprintf+0xc1c>
    50ee:	f89a 0000 	ldrb.w	r0, [sl]
    50f2:	4621      	mov	r1, r4
    50f4:	f000 f9f2 	bl	54dc <__flsbuf>
    50f8:	f118 0801 	adds.w	r8, r8, #1
    50fc:	f10a 3aff 	add.w	sl, sl, #4294967295
    5100:	f149 0900 	adc.w	r9, r9, #0
    5104:	e7da      	b.n	50bc <__vfprintf+0xbe0>
    5106:	2e00      	cmp	r6, #0
    5108:	bfac      	ite	ge
    510a:	eb07 0a06 	addge.w	sl, r7, r6
    510e:	f107 0a00 	addlt.w	sl, r7, #0
    5112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5114:	b32b      	cbz	r3, 5162 <__vfprintf+0xc86>
    5116:	2600      	movs	r6, #0
    5118:	2700      	movs	r7, #0
    511a:	43f3      	mvns	r3, r6
    511c:	eb13 0f0b 	cmn.w	r3, fp
    5120:	d41b      	bmi.n	515a <__vfprintf+0xc7e>
    5122:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5126:	eb16 020a 	adds.w	r2, r6, sl
    512a:	eb47 73ea 	adc.w	r3, r7, sl, asr #31
    512e:	4282      	cmp	r2, r0
    5130:	418b      	sbcs	r3, r1
    5132:	da0e      	bge.n	5152 <__vfprintf+0xc76>
    5134:	68a3      	ldr	r3, [r4, #8]
    5136:	3b01      	subs	r3, #1
    5138:	2b00      	cmp	r3, #0
    513a:	60a3      	str	r3, [r4, #8]
    513c:	db05      	blt.n	514a <__vfprintf+0xc6e>
    513e:	6823      	ldr	r3, [r4, #0]
    5140:	1c5a      	adds	r2, r3, #1
    5142:	6022      	str	r2, [r4, #0]
    5144:	2220      	movs	r2, #32
    5146:	701a      	strb	r2, [r3, #0]
    5148:	e003      	b.n	5152 <__vfprintf+0xc76>
    514a:	2020      	movs	r0, #32
    514c:	4621      	mov	r1, r4
    514e:	f000 f9c5 	bl	54dc <__flsbuf>
    5152:	3601      	adds	r6, #1
    5154:	f147 0700 	adc.w	r7, r7, #0
    5158:	e7df      	b.n	511a <__vfprintf+0xc3e>
    515a:	f1bb 0f00 	cmp.w	fp, #0
    515e:	bfa8      	it	ge
    5160:	44da      	addge	sl, fp
    5162:	9b05      	ldr	r3, [sp, #20]
    5164:	4453      	add	r3, sl
    5166:	9305      	str	r3, [sp, #20]
    5168:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    516c:	9e05      	ldr	r6, [sp, #20]
    516e:	9605      	str	r6, [sp, #20]
    5170:	462b      	mov	r3, r5
    5172:	f7ff b9be 	b.w	44f2 <__vfprintf+0x16>
    5176:	9805      	ldr	r0, [sp, #20]
    5178:	b02d      	add	sp, #180	; 0xb4
    517a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    517e:	bf00      	nop

00005180 <ch_val>:
    5180:	4b0a      	ldr	r3, [pc, #40]	; (51ac <ch_val+0x2c>)
    5182:	4403      	add	r3, r0
    5184:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
    5188:	069a      	lsls	r2, r3, #26
    518a:	d501      	bpl.n	5190 <ch_val+0x10>
    518c:	3830      	subs	r0, #48	; 0x30
    518e:	e008      	b.n	51a2 <ch_val+0x22>
    5190:	071a      	lsls	r2, r3, #28
    5192:	d501      	bpl.n	5198 <ch_val+0x18>
    5194:	3857      	subs	r0, #87	; 0x57
    5196:	e004      	b.n	51a2 <ch_val+0x22>
    5198:	06db      	lsls	r3, r3, #27
    519a:	bf4c      	ite	mi
    519c:	3837      	submi	r0, #55	; 0x37
    519e:	f04f 30ff 	movpl.w	r0, #4294967295
    51a2:	4288      	cmp	r0, r1
    51a4:	bfa8      	it	ge
    51a6:	f04f 30ff 	movge.w	r0, #4294967295
    51aa:	4770      	bx	lr
    51ac:	000072d4 	.word	0x000072d4

000051b0 <_strtoul>:
    51b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51b4:	4680      	mov	r8, r0
    51b6:	4689      	mov	r9, r1
    51b8:	4616      	mov	r6, r2
    51ba:	4603      	mov	r3, r0
    51bc:	461d      	mov	r5, r3
    51be:	f815 0b01 	ldrb.w	r0, [r5], #1
    51c2:	b1d0      	cbz	r0, 51fa <_strtoul+0x4a>
    51c4:	4a27      	ldr	r2, [pc, #156]	; (5264 <_strtoul+0xb4>)
    51c6:	4402      	add	r2, r0
    51c8:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
    51cc:	07d2      	lsls	r2, r2, #31
    51ce:	d501      	bpl.n	51d4 <_strtoul+0x24>
    51d0:	462b      	mov	r3, r5
    51d2:	e7f3      	b.n	51bc <_strtoul+0xc>
    51d4:	2830      	cmp	r0, #48	; 0x30
    51d6:	d110      	bne.n	51fa <_strtoul+0x4a>
    51d8:	7858      	ldrb	r0, [r3, #1]
    51da:	1c9d      	adds	r5, r3, #2
    51dc:	f000 02df 	and.w	r2, r0, #223	; 0xdf
    51e0:	2a58      	cmp	r2, #88	; 0x58
    51e2:	d106      	bne.n	51f2 <_strtoul+0x42>
    51e4:	f036 0710 	bics.w	r7, r6, #16
    51e8:	d13a      	bne.n	5260 <_strtoul+0xb0>
    51ea:	1cdd      	adds	r5, r3, #3
    51ec:	7898      	ldrb	r0, [r3, #2]
    51ee:	2610      	movs	r6, #16
    51f0:	e008      	b.n	5204 <_strtoul+0x54>
    51f2:	2701      	movs	r7, #1
    51f4:	b936      	cbnz	r6, 5204 <_strtoul+0x54>
    51f6:	2608      	movs	r6, #8
    51f8:	e004      	b.n	5204 <_strtoul+0x54>
    51fa:	b10e      	cbz	r6, 5200 <_strtoul+0x50>
    51fc:	2700      	movs	r7, #0
    51fe:	e001      	b.n	5204 <_strtoul+0x54>
    5200:	4637      	mov	r7, r6
    5202:	260a      	movs	r6, #10
    5204:	2400      	movs	r4, #0
    5206:	46a2      	mov	sl, r4
    5208:	46a3      	mov	fp, r4
    520a:	4631      	mov	r1, r6
    520c:	f7ff ffb8 	bl	5180 <ch_val>
    5210:	2800      	cmp	r0, #0
    5212:	db0e      	blt.n	5232 <_strtoul+0x82>
    5214:	fb06 0004 	mla	r0, r6, r4, r0
    5218:	0c03      	lsrs	r3, r0, #16
    521a:	fb06 3a0a 	mla	sl, r6, sl, r3
    521e:	f5ba 3f80 	cmp.w	sl, #65536	; 0x10000
    5222:	b284      	uxth	r4, r0
    5224:	bf28      	it	cs
    5226:	f04f 0b01 	movcs.w	fp, #1
    522a:	f815 0b01 	ldrb.w	r0, [r5], #1
    522e:	2701      	movs	r7, #1
    5230:	e7eb      	b.n	520a <_strtoul+0x5a>
    5232:	f1b9 0f00 	cmp.w	r9, #0
    5236:	d005      	beq.n	5244 <_strtoul+0x94>
    5238:	b10f      	cbz	r7, 523e <_strtoul+0x8e>
    523a:	3d01      	subs	r5, #1
    523c:	e000      	b.n	5240 <_strtoul+0x90>
    523e:	4645      	mov	r5, r8
    5240:	f8c9 5000 	str.w	r5, [r9]
    5244:	f1bb 0f00 	cmp.w	fp, #0
    5248:	d006      	beq.n	5258 <_strtoul+0xa8>
    524a:	4b07      	ldr	r3, [pc, #28]	; (5268 <_strtoul+0xb8>)
    524c:	2222      	movs	r2, #34	; 0x22
    524e:	601a      	str	r2, [r3, #0]
    5250:	f04f 30ff 	mov.w	r0, #4294967295
    5254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5258:	ea44 400a 	orr.w	r0, r4, sl, lsl #16
    525c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5260:	2701      	movs	r7, #1
    5262:	e7cf      	b.n	5204 <_strtoul+0x54>
    5264:	000072d4 	.word	0x000072d4
    5268:	10000b20 	.word	0x10000b20

0000526c <strtol>:
    526c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    526e:	460e      	mov	r6, r1
    5270:	4607      	mov	r7, r0
    5272:	4601      	mov	r1, r0
    5274:	460d      	mov	r5, r1
    5276:	f815 3b01 	ldrb.w	r3, [r5], #1
    527a:	b17b      	cbz	r3, 529c <strtol+0x30>
    527c:	4817      	ldr	r0, [pc, #92]	; (52dc <strtol+0x70>)
    527e:	4418      	add	r0, r3
    5280:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
    5284:	f014 0401 	ands.w	r4, r4, #1
    5288:	d001      	beq.n	528e <strtol+0x22>
    528a:	4629      	mov	r1, r5
    528c:	e7f2      	b.n	5274 <strtol+0x8>
    528e:	2b2b      	cmp	r3, #43	; 0x2b
    5290:	d006      	beq.n	52a0 <strtol+0x34>
    5292:	2b2d      	cmp	r3, #45	; 0x2d
    5294:	d102      	bne.n	529c <strtol+0x30>
    5296:	f44f 7400 	mov.w	r4, #512	; 0x200
    529a:	e001      	b.n	52a0 <strtol+0x34>
    529c:	460d      	mov	r5, r1
    529e:	2400      	movs	r4, #0
    52a0:	4628      	mov	r0, r5
    52a2:	a901      	add	r1, sp, #4
    52a4:	f7ff ff84 	bl	51b0 <_strtoul>
    52a8:	b126      	cbz	r6, 52b4 <strtol+0x48>
    52aa:	9b01      	ldr	r3, [sp, #4]
    52ac:	42ab      	cmp	r3, r5
    52ae:	bf08      	it	eq
    52b0:	463b      	moveq	r3, r7
    52b2:	6033      	str	r3, [r6, #0]
    52b4:	05a3      	lsls	r3, r4, #22
    52b6:	d508      	bpl.n	52ca <strtol+0x5e>
    52b8:	4240      	negs	r0, r0
    52ba:	2800      	cmp	r0, #0
    52bc:	dd0c      	ble.n	52d8 <strtol+0x6c>
    52be:	4b08      	ldr	r3, [pc, #32]	; (52e0 <strtol+0x74>)
    52c0:	2222      	movs	r2, #34	; 0x22
    52c2:	601a      	str	r2, [r3, #0]
    52c4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    52c8:	e006      	b.n	52d8 <strtol+0x6c>
    52ca:	2800      	cmp	r0, #0
    52cc:	bfbf      	itttt	lt
    52ce:	4b04      	ldrlt	r3, [pc, #16]	; (52e0 <strtol+0x74>)
    52d0:	2222      	movlt	r2, #34	; 0x22
    52d2:	601a      	strlt	r2, [r3, #0]
    52d4:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
    52d8:	b003      	add	sp, #12
    52da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52dc:	000072d4 	.word	0x000072d4
    52e0:	10000b20 	.word	0x10000b20

000052e4 <atoi>:
    52e4:	b538      	push	{r3, r4, r5, lr}
    52e6:	4c04      	ldr	r4, [pc, #16]	; (52f8 <atoi+0x14>)
    52e8:	2100      	movs	r1, #0
    52ea:	6825      	ldr	r5, [r4, #0]
    52ec:	220a      	movs	r2, #10
    52ee:	f7ff ffbd 	bl	526c <strtol>
    52f2:	6025      	str	r5, [r4, #0]
    52f4:	bd38      	pop	{r3, r4, r5, pc}
    52f6:	bf00      	nop
    52f8:	10000b20 	.word	0x10000b20

000052fc <setvbuf>:
    52fc:	b570      	push	{r4, r5, r6, lr}
    52fe:	68c4      	ldr	r4, [r0, #12]
    5300:	07a5      	lsls	r5, r4, #30
    5302:	d017      	beq.n	5334 <setvbuf+0x38>
    5304:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    5308:	d009      	beq.n	531e <setvbuf+0x22>
    530a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    530e:	d003      	beq.n	5318 <setvbuf+0x1c>
    5310:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    5314:	d10e      	bne.n	5334 <setvbuf+0x38>
    5316:	e002      	b.n	531e <setvbuf+0x22>
    5318:	6a41      	ldr	r1, [r0, #36]	; 0x24
    531a:	2301      	movs	r3, #1
    531c:	e003      	b.n	5326 <setvbuf+0x2a>
    531e:	4d06      	ldr	r5, [pc, #24]	; (5338 <setvbuf+0x3c>)
    5320:	1e5e      	subs	r6, r3, #1
    5322:	42ae      	cmp	r6, r5
    5324:	d806      	bhi.n	5334 <setvbuf+0x38>
    5326:	4314      	orrs	r4, r2
    5328:	6101      	str	r1, [r0, #16]
    532a:	6001      	str	r1, [r0, #0]
    532c:	61c3      	str	r3, [r0, #28]
    532e:	60c4      	str	r4, [r0, #12]
    5330:	2000      	movs	r0, #0
    5332:	bd70      	pop	{r4, r5, r6, pc}
    5334:	2001      	movs	r0, #1
    5336:	bd70      	pop	{r4, r5, r6, pc}
    5338:	00fffffe 	.word	0x00fffffe

0000533c <strchr>:
    533c:	b510      	push	{r4, lr}
    533e:	4603      	mov	r3, r0
    5340:	f810 2b01 	ldrb.w	r2, [r0], #1
    5344:	b2cc      	uxtb	r4, r1
    5346:	42a2      	cmp	r2, r4
    5348:	d003      	beq.n	5352 <strchr+0x16>
    534a:	2a00      	cmp	r2, #0
    534c:	d1f7      	bne.n	533e <strchr+0x2>
    534e:	4610      	mov	r0, r2
    5350:	bd10      	pop	{r4, pc}
    5352:	4618      	mov	r0, r3
    5354:	bd10      	pop	{r4, pc}

00005356 <strcpy>:
    5356:	ea40 0301 	orr.w	r3, r0, r1
    535a:	079b      	lsls	r3, r3, #30
    535c:	b510      	push	{r4, lr}
    535e:	d113      	bne.n	5388 <strcpy+0x32>
    5360:	4602      	mov	r2, r0
    5362:	3904      	subs	r1, #4
    5364:	f851 3f04 	ldr.w	r3, [r1, #4]!
    5368:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
    536c:	ea24 0403 	bic.w	r4, r4, r3
    5370:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    5374:	d102      	bne.n	537c <strcpy+0x26>
    5376:	f842 3b04 	str.w	r3, [r2], #4
    537a:	e7f3      	b.n	5364 <strcpy+0xe>
    537c:	b2d9      	uxtb	r1, r3
    537e:	f802 1b01 	strb.w	r1, [r2], #1
    5382:	b141      	cbz	r1, 5396 <strcpy+0x40>
    5384:	121b      	asrs	r3, r3, #8
    5386:	e7f9      	b.n	537c <strcpy+0x26>
    5388:	1e42      	subs	r2, r0, #1
    538a:	f811 3b01 	ldrb.w	r3, [r1], #1
    538e:	f802 3f01 	strb.w	r3, [r2, #1]!
    5392:	2b00      	cmp	r3, #0
    5394:	d1f9      	bne.n	538a <strcpy+0x34>
    5396:	bd10      	pop	{r4, pc}

00005398 <strlen>:
    5398:	b510      	push	{r4, lr}
    539a:	1c42      	adds	r2, r0, #1
    539c:	0783      	lsls	r3, r0, #30
    539e:	d005      	beq.n	53ac <strlen+0x14>
    53a0:	f810 3b01 	ldrb.w	r3, [r0], #1
    53a4:	2b00      	cmp	r3, #0
    53a6:	d1f9      	bne.n	539c <strlen+0x4>
    53a8:	1a80      	subs	r0, r0, r2
    53aa:	bd10      	pop	{r4, pc}
    53ac:	4603      	mov	r3, r0
    53ae:	f850 1b04 	ldr.w	r1, [r0], #4
    53b2:	f1a1 3401 	sub.w	r4, r1, #16843009	; 0x1010101
    53b6:	ea24 0401 	bic.w	r4, r4, r1
    53ba:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    53be:	d0f5      	beq.n	53ac <strlen+0x14>
    53c0:	f011 0fff 	tst.w	r1, #255	; 0xff
    53c4:	d00a      	beq.n	53dc <strlen+0x44>
    53c6:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
    53ca:	d005      	beq.n	53d8 <strlen+0x40>
    53cc:	f411 0f7f 	tst.w	r1, #16711680	; 0xff0000
    53d0:	bf14      	ite	ne
    53d2:	4603      	movne	r3, r0
    53d4:	3303      	addeq	r3, #3
    53d6:	e002      	b.n	53de <strlen+0x46>
    53d8:	3302      	adds	r3, #2
    53da:	e000      	b.n	53de <strlen+0x46>
    53dc:	3301      	adds	r3, #1
    53de:	1a98      	subs	r0, r3, r2
    53e0:	bd10      	pop	{r4, pc}

000053e2 <strncpy>:
    53e2:	ea40 0301 	orr.w	r3, r0, r1
    53e6:	b570      	push	{r4, r5, r6, lr}
    53e8:	079d      	lsls	r5, r3, #30
    53ea:	d111      	bne.n	5410 <strncpy+0x2e>
    53ec:	460e      	mov	r6, r1
    53ee:	4603      	mov	r3, r0
    53f0:	2a03      	cmp	r2, #3
    53f2:	4631      	mov	r1, r6
    53f4:	d90d      	bls.n	5412 <strncpy+0x30>
    53f6:	f856 5b04 	ldr.w	r5, [r6], #4
    53fa:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    53fe:	ea24 0405 	bic.w	r4, r4, r5
    5402:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    5406:	d104      	bne.n	5412 <strncpy+0x30>
    5408:	f843 5b04 	str.w	r5, [r3], #4
    540c:	3a04      	subs	r2, #4
    540e:	e7ef      	b.n	53f0 <strncpy+0xe>
    5410:	4603      	mov	r3, r0
    5412:	3a01      	subs	r2, #1
    5414:	1c54      	adds	r4, r2, #1
    5416:	d00f      	beq.n	5438 <strncpy+0x56>
    5418:	f811 4b01 	ldrb.w	r4, [r1], #1
    541c:	1e55      	subs	r5, r2, #1
    541e:	f803 4b01 	strb.w	r4, [r3], #1
    5422:	b93c      	cbnz	r4, 5434 <strncpy+0x52>
    5424:	441a      	add	r2, r3
    5426:	4293      	cmp	r3, r2
    5428:	d003      	beq.n	5432 <strncpy+0x50>
    542a:	2100      	movs	r1, #0
    542c:	f803 1b01 	strb.w	r1, [r3], #1
    5430:	e7f9      	b.n	5426 <strncpy+0x44>
    5432:	bd70      	pop	{r4, r5, r6, pc}
    5434:	462a      	mov	r2, r5
    5436:	e7ed      	b.n	5414 <strncpy+0x32>
    5438:	bd70      	pop	{r4, r5, r6, pc}

0000543a <strstr>:
    543a:	b510      	push	{r4, lr}
    543c:	2300      	movs	r3, #0
    543e:	5cca      	ldrb	r2, [r1, r3]
    5440:	b14a      	cbz	r2, 5456 <strstr+0x1c>
    5442:	5cc4      	ldrb	r4, [r0, r3]
    5444:	4294      	cmp	r4, r2
    5446:	d101      	bne.n	544c <strstr+0x12>
    5448:	3301      	adds	r3, #1
    544a:	e7f8      	b.n	543e <strstr+0x4>
    544c:	f810 3b01 	ldrb.w	r3, [r0], #1
    5450:	2b00      	cmp	r3, #0
    5452:	d1f3      	bne.n	543c <strstr+0x2>
    5454:	4618      	mov	r0, r3
    5456:	bd10      	pop	{r4, pc}

00005458 <_sbrk>:
    5458:	b538      	push	{r3, r4, r5, lr}
    545a:	4b0c      	ldr	r3, [pc, #48]	; (548c <_sbrk+0x34>)
    545c:	681a      	ldr	r2, [r3, #0]
    545e:	b90a      	cbnz	r2, 5464 <_sbrk+0xc>
    5460:	4a0b      	ldr	r2, [pc, #44]	; (5490 <_sbrk+0x38>)
    5462:	601a      	str	r2, [r3, #0]
    5464:	1cc4      	adds	r4, r0, #3
    5466:	681d      	ldr	r5, [r3, #0]
    5468:	f024 0403 	bic.w	r4, r4, #3
    546c:	442c      	add	r4, r5
    546e:	4620      	mov	r0, r4
    5470:	f000 fac8 	bl	5a04 <__check_heap_overflow>
    5474:	b918      	cbnz	r0, 547e <_sbrk+0x26>
    5476:	4b05      	ldr	r3, [pc, #20]	; (548c <_sbrk+0x34>)
    5478:	4628      	mov	r0, r5
    547a:	601c      	str	r4, [r3, #0]
    547c:	bd38      	pop	{r3, r4, r5, pc}
    547e:	4b05      	ldr	r3, [pc, #20]	; (5494 <_sbrk+0x3c>)
    5480:	220c      	movs	r2, #12
    5482:	601a      	str	r2, [r3, #0]
    5484:	f04f 30ff 	mov.w	r0, #4294967295
    5488:	bd38      	pop	{r3, r4, r5, pc}
    548a:	bf00      	nop
    548c:	10001b54 	.word	0x10001b54
    5490:	10001b58 	.word	0x10001b58
    5494:	10000b20 	.word	0x10000b20

00005498 <_deferredlazyseek>:
    5498:	68c3      	ldr	r3, [r0, #12]
    549a:	b510      	push	{r4, lr}
    549c:	f023 0320 	bic.w	r3, r3, #32
    54a0:	60c3      	str	r3, [r0, #12]
    54a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    54a4:	6982      	ldr	r2, [r0, #24]
    54a6:	685b      	ldr	r3, [r3, #4]
    54a8:	4604      	mov	r4, r0
    54aa:	429a      	cmp	r2, r3
    54ac:	d00f      	beq.n	54ce <_deferredlazyseek+0x36>
    54ae:	f000 f8eb 	bl	5688 <_fflush>
    54b2:	68e3      	ldr	r3, [r4, #12]
    54b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    54b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    54ba:	f023 0310 	bic.w	r3, r3, #16
    54be:	f043 0310 	orr.w	r3, r3, #16
    54c2:	60e3      	str	r3, [r4, #12]
    54c4:	6853      	ldr	r3, [r2, #4]
    54c6:	61a3      	str	r3, [r4, #24]
    54c8:	6923      	ldr	r3, [r4, #16]
    54ca:	6093      	str	r3, [r2, #8]
    54cc:	6023      	str	r3, [r4, #0]
    54ce:	68e3      	ldr	r3, [r4, #12]
    54d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    54d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    54d8:	60e3      	str	r3, [r4, #12]
    54da:	bd10      	pop	{r4, pc}

000054dc <__flsbuf>:
    54dc:	68cb      	ldr	r3, [r1, #12]
    54de:	b570      	push	{r4, r5, r6, lr}
    54e0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
    54e4:	069b      	lsls	r3, r3, #26
    54e6:	4605      	mov	r5, r0
    54e8:	460c      	mov	r4, r1
    54ea:	60ca      	str	r2, [r1, #12]
    54ec:	d502      	bpl.n	54f4 <__flsbuf+0x18>
    54ee:	4608      	mov	r0, r1
    54f0:	f7ff ffd2 	bl	5498 <_deferredlazyseek>
    54f4:	68a1      	ldr	r1, [r4, #8]
    54f6:	68e3      	ldr	r3, [r4, #12]
    54f8:	1c4e      	adds	r6, r1, #1
    54fa:	da0d      	bge.n	5518 <__flsbuf+0x3c>
    54fc:	0598      	lsls	r0, r3, #22
    54fe:	d40b      	bmi.n	5518 <__flsbuf+0x3c>
    5500:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
    5504:	60e3      	str	r3, [r4, #12]
    5506:	f06f 0201 	mvn.w	r2, #1
    550a:	6823      	ldr	r3, [r4, #0]
    550c:	1a52      	subs	r2, r2, r1
    550e:	60a2      	str	r2, [r4, #8]
    5510:	1c5a      	adds	r2, r3, #1
    5512:	6022      	str	r2, [r4, #0]
    5514:	701d      	strb	r5, [r3, #0]
    5516:	e056      	b.n	55c6 <__flsbuf+0xea>
    5518:	f241 028a 	movw	r2, #4234	; 0x108a
    551c:	401a      	ands	r2, r3
    551e:	2a02      	cmp	r2, #2
    5520:	461e      	mov	r6, r3
    5522:	d005      	beq.n	5530 <__flsbuf+0x54>
    5524:	2200      	movs	r2, #0
    5526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    552a:	60a2      	str	r2, [r4, #8]
    552c:	60e3      	str	r3, [r4, #12]
    552e:	e052      	b.n	55d6 <__flsbuf+0xfa>
    5530:	f24a 0110 	movw	r1, #40976	; 0xa010
    5534:	4019      	ands	r1, r3
    5536:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    553a:	d10a      	bne.n	5552 <__flsbuf+0x76>
    553c:	2100      	movs	r1, #0
    553e:	4620      	mov	r0, r4
    5540:	f000 f9a8 	bl	5894 <fseek>
    5544:	68e3      	ldr	r3, [r4, #12]
    5546:	0699      	lsls	r1, r3, #26
    5548:	d502      	bpl.n	5550 <__flsbuf+0x74>
    554a:	4620      	mov	r0, r4
    554c:	f7ff ffa4 	bl	5498 <_deferredlazyseek>
    5550:	68e6      	ldr	r6, [r4, #12]
    5552:	f446 3390 	orr.w	r3, r6, #73728	; 0x12000
    5556:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    555a:	60e3      	str	r3, [r4, #12]
    555c:	d11c      	bne.n	5598 <__flsbuf+0xbc>
    555e:	6960      	ldr	r0, [r4, #20]
    5560:	f000 ff06 	bl	6370 <__sys_istty>
    5564:	b150      	cbz	r0, 557c <__flsbuf+0xa0>
    5566:	0572      	lsls	r2, r6, #21
    5568:	d508      	bpl.n	557c <__flsbuf+0xa0>
    556a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    556c:	6123      	str	r3, [r4, #16]
    556e:	6023      	str	r3, [r4, #0]
    5570:	2301      	movs	r3, #1
    5572:	61e3      	str	r3, [r4, #28]
    5574:	f446 3392 	orr.w	r3, r6, #74752	; 0x12400
    5578:	60e3      	str	r3, [r4, #12]
    557a:	e00d      	b.n	5598 <__flsbuf+0xbc>
    557c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    5580:	f7fe fa5a 	bl	3a38 <_Csys_alloc>
    5584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    5588:	68e2      	ldr	r2, [r4, #12]
    558a:	61e3      	str	r3, [r4, #28]
    558c:	f446 3394 	orr.w	r3, r6, #75776	; 0x12800
    5590:	431a      	orrs	r2, r3
    5592:	6120      	str	r0, [r4, #16]
    5594:	6020      	str	r0, [r4, #0]
    5596:	60e2      	str	r2, [r4, #12]
    5598:	f413 6f10 	tst.w	r3, #2304	; 0x900
    559c:	6821      	ldr	r1, [r4, #0]
    559e:	6926      	ldr	r6, [r4, #16]
    55a0:	d01c      	beq.n	55dc <__flsbuf+0x100>
    55a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    55a4:	689b      	ldr	r3, [r3, #8]
    55a6:	428b      	cmp	r3, r1
    55a8:	bf2c      	ite	cs
    55aa:	ebc6 0103 	rsbcs	r1, r6, r3
    55ae:	ebc6 0101 	rsbcc	r1, r6, r1
    55b2:	b951      	cbnz	r1, 55ca <__flsbuf+0xee>
    55b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    55b6:	1c72      	adds	r2, r6, #1
    55b8:	609a      	str	r2, [r3, #8]
    55ba:	6022      	str	r2, [r4, #0]
    55bc:	69e2      	ldr	r2, [r4, #28]
    55be:	1e51      	subs	r1, r2, #1
    55c0:	60a1      	str	r1, [r4, #8]
    55c2:	60da      	str	r2, [r3, #12]
    55c4:	7035      	strb	r5, [r6, #0]
    55c6:	b2e8      	uxtb	r0, r5
    55c8:	bd70      	pop	{r4, r5, r6, pc}
    55ca:	4630      	mov	r0, r6
    55cc:	4622      	mov	r2, r4
    55ce:	f000 f8db 	bl	5788 <_Cwritebuf>
    55d2:	2800      	cmp	r0, #0
    55d4:	d0ee      	beq.n	55b4 <__flsbuf+0xd8>
    55d6:	f04f 30ff 	mov.w	r0, #4294967295
    55da:	bd70      	pop	{r4, r5, r6, pc}
    55dc:	1c4a      	adds	r2, r1, #1
    55de:	b2ed      	uxtb	r5, r5
    55e0:	6022      	str	r2, [r4, #0]
    55e2:	700d      	strb	r5, [r1, #0]
    55e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    55e6:	6821      	ldr	r1, [r4, #0]
    55e8:	6882      	ldr	r2, [r0, #8]
    55ea:	428a      	cmp	r2, r1
    55ec:	bf2c      	ite	cs
    55ee:	ebc6 0102 	rsbcs	r1, r6, r2
    55f2:	ebc6 0101 	rsbcc	r1, r6, r1
    55f6:	69e2      	ldr	r2, [r4, #28]
    55f8:	055b      	lsls	r3, r3, #21
    55fa:	60c2      	str	r2, [r0, #12]
    55fc:	d403      	bmi.n	5606 <__flsbuf+0x12a>
    55fe:	2d0a      	cmp	r5, #10
    5600:	d001      	beq.n	5606 <__flsbuf+0x12a>
    5602:	4291      	cmp	r1, r2
    5604:	db09      	blt.n	561a <__flsbuf+0x13e>
    5606:	2300      	movs	r3, #0
    5608:	6086      	str	r6, [r0, #8]
    560a:	4622      	mov	r2, r4
    560c:	6026      	str	r6, [r4, #0]
    560e:	60a3      	str	r3, [r4, #8]
    5610:	4630      	mov	r0, r6
    5612:	f000 f8b9 	bl	5788 <_Cwritebuf>
    5616:	2800      	cmp	r0, #0
    5618:	d1dd      	bne.n	55d6 <__flsbuf+0xfa>
    561a:	4628      	mov	r0, r5
    561c:	bd70      	pop	{r4, r5, r6, pc}

0000561e <_fdopen>:
    561e:	b570      	push	{r4, r5, r6, lr}
    5620:	460d      	mov	r5, r1
    5622:	4606      	mov	r6, r0
    5624:	4610      	mov	r0, r2
    5626:	4614      	mov	r4, r2
    5628:	f000 f8e6 	bl	57f8 <fclose>
    562c:	782b      	ldrb	r3, [r5, #0]
    562e:	2b72      	cmp	r3, #114	; 0x72
    5630:	d00a      	beq.n	5648 <_fdopen+0x2a>
    5632:	2b77      	cmp	r3, #119	; 0x77
    5634:	d005      	beq.n	5642 <_fdopen+0x24>
    5636:	2b61      	cmp	r3, #97	; 0x61
    5638:	d123      	bne.n	5682 <_fdopen+0x64>
    563a:	2308      	movs	r3, #8
    563c:	f248 0202 	movw	r2, #32770	; 0x8002
    5640:	e004      	b.n	564c <_fdopen+0x2e>
    5642:	2304      	movs	r3, #4
    5644:	2202      	movs	r2, #2
    5646:	e001      	b.n	564c <_fdopen+0x2e>
    5648:	2300      	movs	r3, #0
    564a:	2201      	movs	r2, #1
    564c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    5650:	292b      	cmp	r1, #43	; 0x2b
    5652:	d006      	beq.n	5662 <_fdopen+0x44>
    5654:	2962      	cmp	r1, #98	; 0x62
    5656:	d109      	bne.n	566c <_fdopen+0x4e>
    5658:	f042 0204 	orr.w	r2, r2, #4
    565c:	f043 0301 	orr.w	r3, r3, #1
    5660:	e7f4      	b.n	564c <_fdopen+0x2e>
    5662:	f042 0203 	orr.w	r2, r2, #3
    5666:	f043 0302 	orr.w	r3, r3, #2
    566a:	e7ef      	b.n	564c <_fdopen+0x2e>
    566c:	071b      	lsls	r3, r3, #28
    566e:	60e2      	str	r2, [r4, #12]
    5670:	6166      	str	r6, [r4, #20]
    5672:	4620      	mov	r0, r4
    5674:	d507      	bpl.n	5686 <_fdopen+0x68>
    5676:	2100      	movs	r1, #0
    5678:	2202      	movs	r2, #2
    567a:	f000 f90b 	bl	5894 <fseek>
    567e:	4620      	mov	r0, r4
    5680:	bd70      	pop	{r4, r5, r6, pc}
    5682:	2000      	movs	r0, #0
    5684:	bd70      	pop	{r4, r5, r6, pc}
    5686:	bd70      	pop	{r4, r5, r6, pc}

00005688 <_fflush>:
    5688:	b538      	push	{r3, r4, r5, lr}
    568a:	4604      	mov	r4, r0
    568c:	6a42      	ldr	r2, [r0, #36]	; 0x24
    568e:	6905      	ldr	r5, [r0, #16]
    5690:	6803      	ldr	r3, [r0, #0]
    5692:	68c0      	ldr	r0, [r0, #12]
    5694:	6891      	ldr	r1, [r2, #8]
    5696:	f420 2200 	bic.w	r2, r0, #524288	; 0x80000
    569a:	60e2      	str	r2, [r4, #12]
    569c:	f000 0282 	and.w	r2, r0, #130	; 0x82
    56a0:	2a02      	cmp	r2, #2
    56a2:	d002      	beq.n	56aa <_fflush+0x22>
    56a4:	f04f 30ff 	mov.w	r0, #4294967295
    56a8:	bd38      	pop	{r3, r4, r5, pc}
    56aa:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
    56ae:	d016      	beq.n	56de <_fflush+0x56>
    56b0:	4299      	cmp	r1, r3
    56b2:	bf38      	it	cc
    56b4:	4619      	movcc	r1, r3
    56b6:	42a9      	cmp	r1, r5
    56b8:	d109      	bne.n	56ce <_fflush+0x46>
    56ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    56bc:	2000      	movs	r0, #0
    56be:	609d      	str	r5, [r3, #8]
    56c0:	68e3      	ldr	r3, [r4, #12]
    56c2:	6025      	str	r5, [r4, #0]
    56c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    56c8:	60a0      	str	r0, [r4, #8]
    56ca:	60e3      	str	r3, [r4, #12]
    56cc:	bd38      	pop	{r3, r4, r5, pc}
    56ce:	4628      	mov	r0, r5
    56d0:	1b49      	subs	r1, r1, r5
    56d2:	4622      	mov	r2, r4
    56d4:	f000 f858 	bl	5788 <_Cwritebuf>
    56d8:	2800      	cmp	r0, #0
    56da:	d0ee      	beq.n	56ba <_fflush+0x32>
    56dc:	e7e2      	b.n	56a4 <_fflush+0x1c>
    56de:	bd38      	pop	{r3, r4, r5, pc}

000056e0 <_frexpl>:
    56e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56e2:	4615      	mov	r5, r2
    56e4:	2300      	movs	r3, #0
    56e6:	2200      	movs	r2, #0
    56e8:	4606      	mov	r6, r0
    56ea:	460f      	mov	r7, r1
    56ec:	f000 fd80 	bl	61f0 <__aeabi_dcmpeq>
    56f0:	b120      	cbz	r0, 56fc <_frexpl+0x1c>
    56f2:	2300      	movs	r3, #0
    56f4:	602b      	str	r3, [r5, #0]
    56f6:	2000      	movs	r0, #0
    56f8:	2100      	movs	r1, #0
    56fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56fc:	f3c7 530a 	ubfx	r3, r7, #20, #11
    5700:	4630      	mov	r0, r6
    5702:	4639      	mov	r1, r7
    5704:	f2a3 34fe 	subw	r4, r3, #1022	; 0x3fe
    5708:	b98b      	cbnz	r3, 572e <_frexpl+0x4e>
    570a:	4632      	mov	r2, r6
    570c:	f3c7 0313 	ubfx	r3, r7, #0, #20
    5710:	0fd7      	lsrs	r7, r2, #31
    5712:	f403 2600 	and.w	r6, r3, #524288	; 0x80000
    5716:	ea47 0343 	orr.w	r3, r7, r3, lsl #1
    571a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    571e:	0052      	lsls	r2, r2, #1
    5720:	b11e      	cbz	r6, 572a <_frexpl+0x4a>
    5722:	f363 0113 	bfi	r1, r3, #0, #20
    5726:	4610      	mov	r0, r2
    5728:	e001      	b.n	572e <_frexpl+0x4e>
    572a:	3c01      	subs	r4, #1
    572c:	e7f0      	b.n	5710 <_frexpl+0x30>
    572e:	f240 33fe 	movw	r3, #1022	; 0x3fe
    5732:	602c      	str	r4, [r5, #0]
    5734:	f363 511e 	bfi	r1, r3, #20, #11
    5738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000573c <_ldexpl>:
    573c:	b570      	push	{r4, r5, r6, lr}
    573e:	2300      	movs	r3, #0
    5740:	4616      	mov	r6, r2
    5742:	2200      	movs	r2, #0
    5744:	4604      	mov	r4, r0
    5746:	460d      	mov	r5, r1
    5748:	f000 fd52 	bl	61f0 <__aeabi_dcmpeq>
    574c:	b110      	cbz	r0, 5754 <_ldexpl+0x18>
    574e:	2000      	movs	r0, #0
    5750:	2100      	movs	r1, #0
    5752:	bd70      	pop	{r4, r5, r6, pc}
    5754:	f240 73fe 	movw	r3, #2046	; 0x7fe
    5758:	f3c5 520a 	ubfx	r2, r5, #20, #11
    575c:	4432      	add	r2, r6
    575e:	429a      	cmp	r2, r3
    5760:	4620      	mov	r0, r4
    5762:	4629      	mov	r1, r5
    5764:	dd06      	ble.n	5774 <_ldexpl+0x38>
    5766:	4b06      	ldr	r3, [pc, #24]	; (5780 <_ldexpl+0x44>)
    5768:	2222      	movs	r2, #34	; 0x22
    576a:	601a      	str	r2, [r3, #0]
    576c:	4b05      	ldr	r3, [pc, #20]	; (5784 <_ldexpl+0x48>)
    576e:	e9d3 0100 	ldrd	r0, r1, [r3]
    5772:	bd70      	pop	{r4, r5, r6, pc}
    5774:	2a00      	cmp	r2, #0
    5776:	ddea      	ble.n	574e <_ldexpl+0x12>
    5778:	f362 511e 	bfi	r1, r2, #20, #11
    577c:	bd70      	pop	{r4, r5, r6, pc}
    577e:	bf00      	nop
    5780:	10000b20 	.word	0x10000b20
    5784:	000074c0 	.word	0x000074c0

00005788 <_Cwritebuf>:
    5788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    578c:	68d5      	ldr	r5, [r2, #12]
    578e:	4680      	mov	r8, r0
    5790:	02eb      	lsls	r3, r5, #11
    5792:	460e      	mov	r6, r1
    5794:	4614      	mov	r4, r2
    5796:	6957      	ldr	r7, [r2, #20]
    5798:	d505      	bpl.n	57a6 <_Cwritebuf+0x1e>
    579a:	4638      	mov	r0, r7
    579c:	f000 fde5 	bl	636a <__sys_flen>
    57a0:	f045 0510 	orr.w	r5, r5, #16
    57a4:	61a0      	str	r0, [r4, #24]
    57a6:	4b13      	ldr	r3, [pc, #76]	; (57f4 <_Cwritebuf+0x6c>)
    57a8:	402b      	ands	r3, r5
    57aa:	b153      	cbz	r3, 57c2 <_Cwritebuf+0x3a>
    57ac:	4638      	mov	r0, r7
    57ae:	69a1      	ldr	r1, [r4, #24]
    57b0:	f000 fde4 	bl	637c <__sys_seek>
    57b4:	2800      	cmp	r0, #0
    57b6:	db14      	blt.n	57e2 <_Cwritebuf+0x5a>
    57b8:	f425 3500 	bic.w	r5, r5, #131072	; 0x20000
    57bc:	f025 0510 	bic.w	r5, r5, #16
    57c0:	60e5      	str	r5, [r4, #12]
    57c2:	4632      	mov	r2, r6
    57c4:	4638      	mov	r0, r7
    57c6:	4641      	mov	r1, r8
    57c8:	f000 fdde 	bl	6388 <__sys_write>
    57cc:	1b80      	subs	r0, r0, r6
    57ce:	bf18      	it	ne
    57d0:	f04f 30ff 	movne.w	r0, #4294967295
    57d4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
    57d8:	1af6      	subs	r6, r6, r3
    57da:	69a3      	ldr	r3, [r4, #24]
    57dc:	441e      	add	r6, r3
    57de:	61a6      	str	r6, [r4, #24]
    57e0:	b128      	cbz	r0, 57ee <_Cwritebuf+0x66>
    57e2:	68e3      	ldr	r3, [r4, #12]
    57e4:	f04f 30ff 	mov.w	r0, #4294967295
    57e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    57ec:	60e3      	str	r3, [r4, #12]
    57ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57f2:	bf00      	nop
    57f4:	00020010 	.word	0x00020010

000057f8 <fclose>:
    57f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57fc:	f100 050c 	add.w	r5, r0, #12
    5800:	e895 01a0 	ldmia.w	r5, {r5, r7, r8}
    5804:	07a9      	lsls	r1, r5, #30
    5806:	b088      	sub	sp, #32
    5808:	4604      	mov	r4, r0
    580a:	6a46      	ldr	r6, [r0, #36]	; 0x24
    580c:	d025      	beq.n	585a <fclose+0x62>
    580e:	072a      	lsls	r2, r5, #28
    5810:	d416      	bmi.n	5840 <fclose+0x48>
    5812:	f000 f827 	bl	5864 <fflush>
    5816:	4640      	mov	r0, r8
    5818:	f000 fda4 	bl	6364 <__sys_close>
    581c:	052b      	lsls	r3, r5, #20
    581e:	d502      	bpl.n	5826 <fclose+0x2e>
    5820:	4638      	mov	r0, r7
    5822:	f7fe f8f1 	bl	3a08 <free>
    5826:	0dad      	lsrs	r5, r5, #22
    5828:	05ad      	lsls	r5, r5, #22
    582a:	f115 4fa5 	cmn.w	r5, #1384120320	; 0x52800000
    582e:	d107      	bne.n	5840 <fclose+0x48>
    5830:	4668      	mov	r0, sp
    5832:	6a21      	ldr	r1, [r4, #32]
    5834:	2220      	movs	r2, #32
    5836:	f000 fda4 	bl	6382 <__sys_tmpnam>
    583a:	4668      	mov	r0, sp
    583c:	f000 f8d8 	bl	59f0 <remove>
    5840:	2100      	movs	r1, #0
    5842:	2218      	movs	r2, #24
    5844:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5846:	f7fe f877 	bl	3938 <memset>
    584a:	4620      	mov	r0, r4
    584c:	2100      	movs	r1, #0
    584e:	2228      	movs	r2, #40	; 0x28
    5850:	f7fe f872 	bl	3938 <memset>
    5854:	6266      	str	r6, [r4, #36]	; 0x24
    5856:	2000      	movs	r0, #0
    5858:	e001      	b.n	585e <fclose+0x66>
    585a:	f04f 30ff 	mov.w	r0, #4294967295
    585e:	b008      	add	sp, #32
    5860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005864 <fflush>:
    5864:	b538      	push	{r3, r4, r5, lr}
    5866:	4604      	mov	r4, r0
    5868:	b118      	cbz	r0, 5872 <fflush+0xe>
    586a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    586e:	f000 b8d5 	b.w	5a1c <_do_fflush>
    5872:	4605      	mov	r5, r0
    5874:	4806      	ldr	r0, [pc, #24]	; (5890 <fflush+0x2c>)
    5876:	4420      	add	r0, r4
    5878:	f000 f8d0 	bl	5a1c <_do_fflush>
    587c:	3428      	adds	r4, #40	; 0x28
    587e:	2800      	cmp	r0, #0
    5880:	bf18      	it	ne
    5882:	f04f 35ff 	movne.w	r5, #4294967295
    5886:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
    588a:	d1f3      	bne.n	5874 <fflush+0x10>
    588c:	4628      	mov	r0, r5
    588e:	bd38      	pop	{r3, r4, r5, pc}
    5890:	10001a10 	.word	0x10001a10

00005894 <fseek>:
    5894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5898:	68c6      	ldr	r6, [r0, #12]
    589a:	4b41      	ldr	r3, [pc, #260]	; (59a0 <fseek+0x10c>)
    589c:	4604      	mov	r4, r0
    589e:	4033      	ands	r3, r6
    58a0:	460d      	mov	r5, r1
    58a2:	4690      	mov	r8, r2
    58a4:	f8d0 9014 	ldr.w	r9, [r0, #20]
    58a8:	2b00      	cmp	r3, #0
    58aa:	d075      	beq.n	5998 <fseek+0x104>
    58ac:	4648      	mov	r0, r9
    58ae:	f000 fd5f 	bl	6370 <__sys_istty>
    58b2:	4607      	mov	r7, r0
    58b4:	2800      	cmp	r0, #0
    58b6:	d16f      	bne.n	5998 <fseek+0x104>
    58b8:	f1b8 0f01 	cmp.w	r8, #1
    58bc:	d006      	beq.n	58cc <fseek+0x38>
    58be:	f1b8 0f02 	cmp.w	r8, #2
    58c2:	d008      	beq.n	58d6 <fseek+0x42>
    58c4:	f1b8 0f00 	cmp.w	r8, #0
    58c8:	d166      	bne.n	5998 <fseek+0x104>
    58ca:	e029      	b.n	5920 <fseek+0x8c>
    58cc:	4620      	mov	r0, r4
    58ce:	f000 f869 	bl	59a4 <ftell>
    58d2:	4405      	add	r5, r0
    58d4:	e024      	b.n	5920 <fseek+0x8c>
    58d6:	4648      	mov	r0, r9
    58d8:	f000 fd47 	bl	636a <__sys_flen>
    58dc:	f1b0 0e00 	subs.w	lr, r0, #0
    58e0:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    58e4:	da04      	bge.n	58f0 <fseek+0x5c>
    58e6:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    58ea:	60e1      	str	r1, [r4, #12]
    58ec:	2701      	movs	r7, #1
    58ee:	e054      	b.n	599a <fseek+0x106>
    58f0:	6823      	ldr	r3, [r4, #0]
    58f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    58f4:	461a      	mov	r2, r3
    58f6:	69a3      	ldr	r3, [r4, #24]
    58f8:	4619      	mov	r1, r3
    58fa:	6883      	ldr	r3, [r0, #8]
    58fc:	4293      	cmp	r3, r2
    58fe:	bf2c      	ite	cs
    5900:	18c9      	addcs	r1, r1, r3
    5902:	1889      	addcc	r1, r1, r2
    5904:	6923      	ldr	r3, [r4, #16]
    5906:	f01c 0f20 	tst.w	ip, #32
    590a:	eba1 0303 	sub.w	r3, r1, r3
    590e:	d003      	beq.n	5918 <fseek+0x84>
    5910:	6842      	ldr	r2, [r0, #4]
    5912:	4293      	cmp	r3, r2
    5914:	bfb8      	it	lt
    5916:	4613      	movlt	r3, r2
    5918:	4573      	cmp	r3, lr
    591a:	bfac      	ite	ge
    591c:	18ed      	addge	r5, r5, r3
    591e:	4475      	addlt	r5, lr
    5920:	2d00      	cmp	r5, #0
    5922:	db39      	blt.n	5998 <fseek+0x104>
    5924:	f416 5f00 	tst.w	r6, #8192	; 0x2000
    5928:	6a62      	ldr	r2, [r4, #36]	; 0x24
    592a:	d004      	beq.n	5936 <fseek+0xa2>
    592c:	6823      	ldr	r3, [r4, #0]
    592e:	6891      	ldr	r1, [r2, #8]
    5930:	4299      	cmp	r1, r3
    5932:	bf38      	it	cc
    5934:	6093      	strcc	r3, [r2, #8]
    5936:	69a1      	ldr	r1, [r4, #24]
    5938:	428d      	cmp	r5, r1
    593a:	db10      	blt.n	595e <fseek+0xca>
    593c:	6890      	ldr	r0, [r2, #8]
    593e:	6823      	ldr	r3, [r4, #0]
    5940:	f8d4 e010 	ldr.w	lr, [r4, #16]
    5944:	4283      	cmp	r3, r0
    5946:	bf38      	it	cc
    5948:	4603      	movcc	r3, r0
    594a:	1858      	adds	r0, r3, r1
    594c:	ebce 0000 	rsb	r0, lr, r0
    5950:	4285      	cmp	r5, r0
    5952:	dc04      	bgt.n	595e <fseek+0xca>
    5954:	68d0      	ldr	r0, [r2, #12]
    5956:	eb01 0c00 	add.w	ip, r1, r0
    595a:	4565      	cmp	r5, ip
    595c:	db06      	blt.n	596c <fseek+0xd8>
    595e:	2300      	movs	r3, #0
    5960:	60a3      	str	r3, [r4, #8]
    5962:	6063      	str	r3, [r4, #4]
    5964:	f046 0620 	orr.w	r6, r6, #32
    5968:	6055      	str	r5, [r2, #4]
    596a:	e00f      	b.n	598c <fseek+0xf8>
    596c:	1a6d      	subs	r5, r5, r1
    596e:	07b1      	lsls	r1, r6, #30
    5970:	bf44      	itt	mi
    5972:	1a28      	submi	r0, r5, r0
    5974:	60a0      	strmi	r0, [r4, #8]
    5976:	07f2      	lsls	r2, r6, #31
    5978:	bf44      	itt	mi
    597a:	ebc3 030e 	rsbmi	r3, r3, lr
    597e:	195b      	addmi	r3, r3, r5
    5980:	4475      	add	r5, lr
    5982:	bf48      	it	mi
    5984:	6063      	strmi	r3, [r4, #4]
    5986:	6025      	str	r5, [r4, #0]
    5988:	f026 0620 	bic.w	r6, r6, #32
    598c:	f426 2603 	bic.w	r6, r6, #536576	; 0x83000
    5990:	f026 0640 	bic.w	r6, r6, #64	; 0x40
    5994:	60e6      	str	r6, [r4, #12]
    5996:	e000      	b.n	599a <fseek+0x106>
    5998:	2702      	movs	r7, #2
    599a:	4638      	mov	r0, r7
    599c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    59a0:	00100003 	.word	0x00100003

000059a4 <ftell>:
    59a4:	68c3      	ldr	r3, [r0, #12]
    59a6:	079a      	lsls	r2, r3, #30
    59a8:	d105      	bne.n	59b6 <ftell+0x12>
    59aa:	4b10      	ldr	r3, [pc, #64]	; (59ec <ftell+0x48>)
    59ac:	2221      	movs	r2, #33	; 0x21
    59ae:	601a      	str	r2, [r3, #0]
    59b0:	f04f 30ff 	mov.w	r0, #4294967295
    59b4:	4770      	bx	lr
    59b6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    59ba:	f003 0320 	and.w	r3, r3, #32
    59be:	d00a      	beq.n	59d6 <ftell+0x32>
    59c0:	b113      	cbz	r3, 59c8 <ftell+0x24>
    59c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    59c4:	6858      	ldr	r0, [r3, #4]
    59c6:	e004      	b.n	59d2 <ftell+0x2e>
    59c8:	6802      	ldr	r2, [r0, #0]
    59ca:	6983      	ldr	r3, [r0, #24]
    59cc:	6900      	ldr	r0, [r0, #16]
    59ce:	4413      	add	r3, r2
    59d0:	1a18      	subs	r0, r3, r0
    59d2:	3801      	subs	r0, #1
    59d4:	4770      	bx	lr
    59d6:	b113      	cbz	r3, 59de <ftell+0x3a>
    59d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    59da:	6858      	ldr	r0, [r3, #4]
    59dc:	4770      	bx	lr
    59de:	6802      	ldr	r2, [r0, #0]
    59e0:	6983      	ldr	r3, [r0, #24]
    59e2:	6900      	ldr	r0, [r0, #16]
    59e4:	4413      	add	r3, r2
    59e6:	1a18      	subs	r0, r3, r0
    59e8:	4770      	bx	lr
    59ea:	bf00      	nop
    59ec:	10000b20 	.word	0x10000b20

000059f0 <remove>:
    59f0:	b510      	push	{r4, lr}
    59f2:	4604      	mov	r4, r0
    59f4:	f7ff fcd0 	bl	5398 <strlen>
    59f8:	4601      	mov	r1, r0
    59fa:	4620      	mov	r0, r4
    59fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5a00:	f000 bcb9 	b.w	6376 <__sys_remove>

00005a04 <__check_heap_overflow>:
    5a04:	4b04      	ldr	r3, [pc, #16]	; (5a18 <__check_heap_overflow+0x14>)
    5a06:	b123      	cbz	r3, 5a12 <__check_heap_overflow+0xe>
    5a08:	4298      	cmp	r0, r3
    5a0a:	bf34      	ite	cc
    5a0c:	2000      	movcc	r0, #0
    5a0e:	2001      	movcs	r0, #1
    5a10:	4770      	bx	lr
    5a12:	4618      	mov	r0, r3
    5a14:	4770      	bx	lr
    5a16:	bf00      	nop
    5a18:	00000000 	.word	0x00000000

00005a1c <_do_fflush>:
    5a1c:	68c2      	ldr	r2, [r0, #12]
    5a1e:	b570      	push	{r4, r5, r6, lr}
    5a20:	f012 0303 	ands.w	r3, r2, #3
    5a24:	4604      	mov	r4, r0
    5a26:	d019      	beq.n	5a5c <_do_fflush+0x40>
    5a28:	0693      	lsls	r3, r2, #26
    5a2a:	d504      	bpl.n	5a36 <_do_fflush+0x1a>
    5a2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5a2e:	685d      	ldr	r5, [r3, #4]
    5a30:	f7ff fd32 	bl	5498 <_deferredlazyseek>
    5a34:	e004      	b.n	5a40 <_do_fflush+0x24>
    5a36:	6805      	ldr	r5, [r0, #0]
    5a38:	6983      	ldr	r3, [r0, #24]
    5a3a:	442b      	add	r3, r5
    5a3c:	6905      	ldr	r5, [r0, #16]
    5a3e:	1b5d      	subs	r5, r3, r5
    5a40:	68e3      	ldr	r3, [r4, #12]
    5a42:	4620      	mov	r0, r4
    5a44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    5a48:	60e3      	str	r3, [r4, #12]
    5a4a:	f7ff fe1d 	bl	5688 <_fflush>
    5a4e:	4606      	mov	r6, r0
    5a50:	4629      	mov	r1, r5
    5a52:	4620      	mov	r0, r4
    5a54:	2200      	movs	r2, #0
    5a56:	f7ff ff1d 	bl	5894 <fseek>
    5a5a:	4633      	mov	r3, r6
    5a5c:	4618      	mov	r0, r3
    5a5e:	bd70      	pop	{r4, r5, r6, pc}

00005a60 <__aeabi_uldivmod>:
    5a60:	f05f 0c00 	movs.w	ip, #0

00005a64 <__bhs_ldivmod1>:
    5a64:	b530      	push	{r4, r5, lr}
    5a66:	001c      	movs	r4, r3
    5a68:	d122      	bne.n	5ab0 <ldiv64>
    5a6a:	0012      	movs	r2, r2
    5a6c:	d06f      	beq.n	5b4e <ldiv_divzero>
    5a6e:	4291      	cmp	r1, r2
    5a70:	d306      	bcc.n	5a80 <ldiv32>
    5a72:	4605      	mov	r5, r0
    5a74:	4608      	mov	r0, r1
    5a76:	2100      	movs	r1, #0
    5a78:	f000 f86f 	bl	5b5a <udiv6432>
    5a7c:	4604      	mov	r4, r0
    5a7e:	4628      	mov	r0, r5

00005a80 <ldiv32>:
    5a80:	f000 f86b 	bl	5b5a <udiv6432>
    5a84:	460a      	mov	r2, r1
    5a86:	4621      	mov	r1, r4

00005a88 <ldiv_return>:
    5a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5a8c:	f01c 4f40 	tst.w	ip, #3221225472	; 0xc0000000
    5a90:	bf08      	it	eq
    5a92:	4770      	bxeq	lr
    5a94:	d503      	bpl.n	5a9e <ldiv_sign>
    5a96:	4249      	negs	r1, r1
    5a98:	4240      	negs	r0, r0
    5a9a:	f161 0100 	sbc.w	r1, r1, #0

00005a9e <ldiv_sign>:
    5a9e:	ea5f 0c8c 	movs.w	ip, ip, lsl #2
    5aa2:	bf38      	it	cc
    5aa4:	4770      	bxcc	lr
    5aa6:	425b      	negs	r3, r3
    5aa8:	4252      	negs	r2, r2
    5aaa:	f163 0300 	sbc.w	r3, r3, #0
    5aae:	4770      	bx	lr

00005ab0 <ldiv64>:
    5ab0:	d442      	bmi.n	5b38 <ldiv_res01>
    5ab2:	0c1c      	lsrs	r4, r3, #16
    5ab4:	bf04      	itt	eq
    5ab6:	041b      	lsleq	r3, r3, #16
    5ab8:	f10c 0c10 	addeq.w	ip, ip, #16
    5abc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    5ac0:	bf04      	itt	eq
    5ac2:	021b      	lsleq	r3, r3, #8
    5ac4:	f10c 0c08 	addeq.w	ip, ip, #8
    5ac8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    5acc:	bf04      	itt	eq
    5ace:	011b      	lsleq	r3, r3, #4
    5ad0:	f10c 0c04 	addeq.w	ip, ip, #4
    5ad4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    5ad8:	bf04      	itt	eq
    5ada:	f10c 0c02 	addeq.w	ip, ip, #2
    5ade:	ea5f 0383 	movseq.w	r3, r3, lsl #2
    5ae2:	bf5c      	itt	pl
    5ae4:	f10c 0c01 	addpl.w	ip, ip, #1
    5ae8:	005b      	lslpl	r3, r3, #1
    5aea:	f1cc 0e20 	rsb	lr, ip, #32
    5aee:	fa22 f40e 	lsr.w	r4, r2, lr
    5af2:	4323      	orrs	r3, r4
    5af4:	fa02 f20c 	lsl.w	r2, r2, ip
    5af8:	fa00 f50c 	lsl.w	r5, r0, ip
    5afc:	fa20 f00e 	lsr.w	r0, r0, lr
    5b00:	fa01 f40c 	lsl.w	r4, r1, ip
    5b04:	4320      	orrs	r0, r4
    5b06:	fa21 f10e 	lsr.w	r1, r1, lr
    5b0a:	4614      	mov	r4, r2
    5b0c:	461a      	mov	r2, r3
    5b0e:	f000 f824 	bl	5b5a <udiv6432>
    5b12:	fba4 2300 	umull	r2, r3, r4, r0
    5b16:	1aaa      	subs	r2, r5, r2
    5b18:	eb71 0303 	sbcs.w	r3, r1, r3
    5b1c:	bf3c      	itt	cc
    5b1e:	191b      	addcc	r3, r3, r4
    5b20:	3801      	subcc	r0, #1
    5b22:	f1cc 0e20 	rsb	lr, ip, #32
    5b26:	fa22 f20c 	lsr.w	r2, r2, ip
    5b2a:	fa03 f40e 	lsl.w	r4, r3, lr
    5b2e:	4322      	orrs	r2, r4
    5b30:	fa23 f30c 	lsr.w	r3, r3, ip
    5b34:	2100      	movs	r1, #0
    5b36:	e7a7      	b.n	5a88 <ldiv_return>

00005b38 <ldiv_res01>:
    5b38:	1a82      	subs	r2, r0, r2
    5b3a:	eb71 0303 	sbcs.w	r3, r1, r3
    5b3e:	bf3c      	itt	cc
    5b40:	4602      	movcc	r2, r0
    5b42:	460b      	movcc	r3, r1
    5b44:	f04f 0100 	mov.w	r1, #0
    5b48:	f141 0000 	adc.w	r0, r1, #0
    5b4c:	e79c      	b.n	5a88 <ldiv_return>

00005b4e <ldiv_divzero>:
    5b4e:	2000      	movs	r0, #0
    5b50:	2100      	movs	r1, #0
    5b52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5b56:	f000 b83d 	b.w	5bd4 <__aeabi_idiv0>

00005b5a <udiv6432>:
    5b5a:	2304      	movs	r3, #4
    5b5c:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    5b60:	d209      	bcs.n	5b76 <udiv6432_entry>

00005b62 <udiv6432_loop1>:
    5b62:	0209      	lsls	r1, r1, #8
    5b64:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
    5b68:	0200      	lsls	r0, r0, #8
    5b6a:	3b01      	subs	r3, #1
    5b6c:	bf08      	it	eq
    5b6e:	4770      	bxeq	lr
    5b70:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    5b74:	d3f5      	bcc.n	5b62 <udiv6432_loop1>

00005b76 <udiv6432_entry>:
    5b76:	1800      	adds	r0, r0, r0

00005b78 <udiv6432_loop>:
    5b78:	4149      	adcs	r1, r1
    5b7a:	bf34      	ite	cc
    5b7c:	4291      	cmpcc	r1, r2
    5b7e:	1a89      	subcs	r1, r1, r2
    5b80:	4140      	adcs	r0, r0
    5b82:	4149      	adcs	r1, r1
    5b84:	bf34      	ite	cc
    5b86:	4291      	cmpcc	r1, r2
    5b88:	1a89      	subcs	r1, r1, r2
    5b8a:	4140      	adcs	r0, r0
    5b8c:	4149      	adcs	r1, r1
    5b8e:	bf34      	ite	cc
    5b90:	4291      	cmpcc	r1, r2
    5b92:	1a89      	subcs	r1, r1, r2
    5b94:	4140      	adcs	r0, r0
    5b96:	4149      	adcs	r1, r1
    5b98:	bf34      	ite	cc
    5b9a:	4291      	cmpcc	r1, r2
    5b9c:	1a89      	subcs	r1, r1, r2
    5b9e:	4140      	adcs	r0, r0
    5ba0:	4149      	adcs	r1, r1
    5ba2:	bf34      	ite	cc
    5ba4:	4291      	cmpcc	r1, r2
    5ba6:	1a89      	subcs	r1, r1, r2
    5ba8:	4140      	adcs	r0, r0
    5baa:	4149      	adcs	r1, r1
    5bac:	bf34      	ite	cc
    5bae:	4291      	cmpcc	r1, r2
    5bb0:	1a89      	subcs	r1, r1, r2
    5bb2:	4140      	adcs	r0, r0
    5bb4:	4149      	adcs	r1, r1
    5bb6:	bf34      	ite	cc
    5bb8:	4291      	cmpcc	r1, r2
    5bba:	1a89      	subcs	r1, r1, r2
    5bbc:	4140      	adcs	r0, r0
    5bbe:	4149      	adcs	r1, r1
    5bc0:	bf34      	ite	cc
    5bc2:	4291      	cmpcc	r1, r2
    5bc4:	1a89      	subcs	r1, r1, r2
    5bc6:	4140      	adcs	r0, r0
    5bc8:	f1a3 0301 	sub.w	r3, r3, #1
    5bcc:	f013 0f0f 	tst.w	r3, #15
    5bd0:	d1d2      	bne.n	5b78 <udiv6432_loop>
    5bd2:	4770      	bx	lr

00005bd4 <__aeabi_idiv0>:
    5bd4:	4770      	bx	lr
	...

00005bd8 <__aeabi_dmul>:
    5bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bdc:	f3c1 540a 	ubfx	r4, r1, #20, #11
    5be0:	2c00      	cmp	r4, #0
    5be2:	d054      	beq.n	5c8e <__aeabi_dmul+0xb6>
    5be4:	f240 76ff 	movw	r6, #2047	; 0x7ff
    5be8:	42b4      	cmp	r4, r6
    5bea:	d050      	beq.n	5c8e <__aeabi_dmul+0xb6>
    5bec:	f3c3 550a 	ubfx	r5, r3, #20, #11
    5bf0:	2d00      	cmp	r5, #0
    5bf2:	d04c      	beq.n	5c8e <__aeabi_dmul+0xb6>
    5bf4:	42b5      	cmp	r5, r6
    5bf6:	d04a      	beq.n	5c8e <__aeabi_dmul+0xb6>
    5bf8:	f3c1 0e13 	ubfx	lr, r1, #0, #20
    5bfc:	ea4f 2ac2 	mov.w	sl, r2, lsl #11
    5c00:	f44e 1e80 	orr.w	lr, lr, #1048576	; 0x100000
    5c04:	fbae 670a 	umull	r6, r7, lr, sl
    5c08:	fbaa ab00 	umull	sl, fp, sl, r0
    5c0c:	eb16 080b 	adds.w	r8, r6, fp
    5c10:	463e      	mov	r6, r7
    5c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
    5c16:	ea42 22c3 	orr.w	r2, r2, r3, lsl #11
    5c1a:	f04f 0900 	mov.w	r9, #0
    5c1e:	f149 0900 	adc.w	r9, r9, #0
    5c22:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    5c26:	fbe0 8902 	umlal	r8, r9, r0, r2
    5c2a:	2700      	movs	r7, #0
    5c2c:	eb16 0609 	adds.w	r6, r6, r9
    5c30:	f147 0700 	adc.w	r7, r7, #0
    5c34:	fbee 6702 	umlal	r6, r7, lr, r2
    5c38:	404b      	eors	r3, r1
    5c3a:	f5b7 1f80 	cmp.w	r7, #1048576	; 0x100000
    5c3e:	442c      	add	r4, r5
    5c40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    5c44:	ea48 089a 	orr.w	r8, r8, sl, lsr #2
    5c48:	d24b      	bcs.n	5ce2 <__aeabi_dmul+0x10a>
    5c4a:	19b6      	adds	r6, r6, r6
    5c4c:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    5c50:	417f      	adcs	r7, r7
    5c52:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
    5c56:	4316      	orrs	r6, r2
    5c58:	ea4f 0848 	mov.w	r8, r8, lsl #1
    5c5c:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    5c60:	18b6      	adds	r6, r6, r2
    5c62:	f240 72fd 	movw	r2, #2045	; 0x7fd
    5c66:	f147 0700 	adc.w	r7, r7, #0
    5c6a:	f1b8 4f00 	cmp.w	r8, #2147483648	; 0x80000000
    5c6e:	4635      	mov	r5, r6
    5c70:	bf08      	it	eq
    5c72:	f026 0501 	biceq.w	r5, r6, #1
    5c76:	4294      	cmp	r4, r2
    5c78:	d936      	bls.n	5ce8 <__aeabi_dmul+0x110>
    5c7a:	2c00      	cmp	r4, #0
    5c7c:	bfa4      	itt	ge
    5c7e:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    5c82:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    5c86:	2000      	movs	r0, #0
    5c88:	4619      	mov	r1, r3
    5c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c8e:	ea83 0201 	eor.w	r2, r3, r1
    5c92:	0049      	lsls	r1, r1, #1
    5c94:	f511 1f00 	cmn.w	r1, #2097152	; 0x200000
    5c98:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
    5c9c:	d213      	bcs.n	5cc6 <__aeabi_dmul+0xee>
    5c9e:	005b      	lsls	r3, r3, #1
    5ca0:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    5ca4:	d317      	bcc.n	5cd6 <__aeabi_dmul+0xfe>
    5ca6:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    5caa:	d80d      	bhi.n	5cc8 <__aeabi_dmul+0xf0>
    5cac:	0d49      	lsrs	r1, r1, #21
    5cae:	0549      	lsls	r1, r1, #21
    5cb0:	2000      	movs	r0, #0
    5cb2:	b169      	cbz	r1, 5cd0 <__aeabi_dmul+0xf8>
    5cb4:	0d5b      	lsrs	r3, r3, #21
    5cb6:	055b      	lsls	r3, r3, #21
    5cb8:	b153      	cbz	r3, 5cd0 <__aeabi_dmul+0xf8>
    5cba:	f042 42ff 	orr.w	r2, r2, #2139095040	; 0x7f800000
    5cbe:	f442 01e0 	orr.w	r1, r2, #7340032	; 0x700000
    5cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5cc6:	d00a      	beq.n	5cde <__aeabi_dmul+0x106>
    5cc8:	2000      	movs	r0, #0
    5cca:	490a      	ldr	r1, [pc, #40]	; (5cf4 <__aeabi_dmul+0x11c>)
    5ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5cd0:	4908      	ldr	r1, [pc, #32]	; (5cf4 <__aeabi_dmul+0x11c>)
    5cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5cd6:	2000      	movs	r0, #0
    5cd8:	4611      	mov	r1, r2
    5cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5cde:	005b      	lsls	r3, r3, #1
    5ce0:	e7e1      	b.n	5ca6 <__aeabi_dmul+0xce>
    5ce2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    5ce6:	e7b9      	b.n	5c5c <__aeabi_dmul+0x84>
    5ce8:	433b      	orrs	r3, r7
    5cea:	eb03 5104 	add.w	r1, r3, r4, lsl #20
    5cee:	4628      	mov	r0, r5
    5cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5cf4:	7ff80000 	.word	0x7ff80000

00005cf8 <__aeabi_ddiv>:
    5cf8:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
    5cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d00:	f1bc 0f00 	cmp.w	ip, #0
    5d04:	d053      	beq.n	5dae <__aeabi_ddiv+0xb6>
    5d06:	f240 74ff 	movw	r4, #2047	; 0x7ff
    5d0a:	45a4      	cmp	ip, r4
    5d0c:	d04f      	beq.n	5dae <__aeabi_ddiv+0xb6>
    5d0e:	f3c3 580a 	ubfx	r8, r3, #20, #11
    5d12:	f1b8 0f00 	cmp.w	r8, #0
    5d16:	d04a      	beq.n	5dae <__aeabi_ddiv+0xb6>
    5d18:	45a0      	cmp	r8, r4
    5d1a:	d048      	beq.n	5dae <__aeabi_ddiv+0xb6>
    5d1c:	ea4f 5a50 	mov.w	sl, r0, lsr #21
    5d20:	ea4f 5952 	mov.w	r9, r2, lsr #21
    5d24:	02c4      	lsls	r4, r0, #11
    5d26:	02d6      	lsls	r6, r2, #11
    5d28:	ea4a 20c1 	orr.w	r0, sl, r1, lsl #11
    5d2c:	ea49 22c3 	orr.w	r2, r9, r3, lsl #11
    5d30:	f040 4500 	orr.w	r5, r0, #2147483648	; 0x80000000
    5d34:	f042 4700 	orr.w	r7, r2, #2147483648	; 0x80000000
    5d38:	42bd      	cmp	r5, r7
    5d3a:	bf08      	it	eq
    5d3c:	42b4      	cmpeq	r4, r6
    5d3e:	ebc8 0c0c 	rsb	ip, r8, ip
    5d42:	ea83 0801 	eor.w	r8, r3, r1
    5d46:	d25d      	bcs.n	5e04 <__aeabi_ddiv+0x10c>
    5d48:	f20c 3cfd 	addw	ip, ip, #1021	; 0x3fd
    5d4c:	0879      	lsrs	r1, r7, #1
    5d4e:	ea4f 0036 	mov.w	r0, r6, rrx
    5d52:	2334      	movs	r3, #52	; 0x34
    5d54:	2200      	movs	r2, #0
    5d56:	e000      	b.n	5d5a <__aeabi_ddiv+0x62>
    5d58:	3b01      	subs	r3, #1
    5d5a:	428d      	cmp	r5, r1
    5d5c:	bf08      	it	eq
    5d5e:	4284      	cmpeq	r4, r0
    5d60:	ea4f 0242 	mov.w	r2, r2, lsl #1
    5d64:	d304      	bcc.n	5d70 <__aeabi_ddiv+0x78>
    5d66:	1a24      	subs	r4, r4, r0
    5d68:	eb65 0501 	sbc.w	r5, r5, r1
    5d6c:	f042 0201 	orr.w	r2, r2, #1
    5d70:	1924      	adds	r4, r4, r4
    5d72:	416d      	adcs	r5, r5
    5d74:	2b20      	cmp	r3, #32
    5d76:	d062      	beq.n	5e3e <__aeabi_ddiv+0x146>
    5d78:	2b00      	cmp	r3, #0
    5d7a:	d1ed      	bne.n	5d58 <__aeabi_ddiv+0x60>
    5d7c:	428d      	cmp	r5, r1
    5d7e:	bf08      	it	eq
    5d80:	4284      	cmpeq	r4, r0
    5d82:	d303      	bcc.n	5d8c <__aeabi_ddiv+0x94>
    5d84:	3201      	adds	r2, #1
    5d86:	bf08      	it	eq
    5d88:	f10e 0e01 	addeq.w	lr, lr, #1
    5d8c:	f240 71fd 	movw	r1, #2045	; 0x7fd
    5d90:	458c      	cmp	ip, r1
    5d92:	f008 4300 	and.w	r3, r8, #2147483648	; 0x80000000
    5d96:	d93b      	bls.n	5e10 <__aeabi_ddiv+0x118>
    5d98:	f1bc 0f00 	cmp.w	ip, #0
    5d9c:	bfa4      	itt	ge
    5d9e:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    5da2:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    5da6:	2000      	movs	r0, #0
    5da8:	4619      	mov	r1, r3
    5daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5dae:	004a      	lsls	r2, r1, #1
    5db0:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    5db4:	d81c      	bhi.n	5df0 <__aeabi_ddiv+0xf8>
    5db6:	005c      	lsls	r4, r3, #1
    5db8:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5dbc:	d818      	bhi.n	5df0 <__aeabi_ddiv+0xf8>
    5dbe:	ea43 0001 	orr.w	r0, r3, r1
    5dc2:	f3c0 500a 	ubfx	r0, r0, #20, #11
    5dc6:	0545      	lsls	r5, r0, #21
    5dc8:	b1b0      	cbz	r0, 5df8 <__aeabi_ddiv+0x100>
    5dca:	0d50      	lsrs	r0, r2, #21
    5dcc:	4059      	eors	r1, r3
    5dce:	0540      	lsls	r0, r0, #21
    5dd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    5dd4:	b1a0      	cbz	r0, 5e00 <__aeabi_ddiv+0x108>
    5dd6:	0d60      	lsrs	r0, r4, #21
    5dd8:	0540      	lsls	r0, r0, #21
    5dda:	b348      	cbz	r0, 5e30 <__aeabi_ddiv+0x138>
    5ddc:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5de0:	d11d      	bne.n	5e1e <__aeabi_ddiv+0x126>
    5de2:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    5de6:	d003      	beq.n	5df0 <__aeabi_ddiv+0xf8>
    5de8:	2200      	movs	r2, #0
    5dea:	4610      	mov	r0, r2
    5dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5df0:	2000      	movs	r0, #0
    5df2:	4914      	ldr	r1, [pc, #80]	; (5e44 <__aeabi_ddiv+0x14c>)
    5df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5df8:	4912      	ldr	r1, [pc, #72]	; (5e44 <__aeabi_ddiv+0x14c>)
    5dfa:	4628      	mov	r0, r5
    5dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e04:	086d      	lsrs	r5, r5, #1
    5e06:	ea4f 0434 	mov.w	r4, r4, rrx
    5e0a:	f20c 3cfe 	addw	ip, ip, #1022	; 0x3fe
    5e0e:	e79d      	b.n	5d4c <__aeabi_ddiv+0x54>
    5e10:	eb03 530c 	add.w	r3, r3, ip, lsl #20
    5e14:	eb03 010e 	add.w	r1, r3, lr
    5e18:	4610      	mov	r0, r2
    5e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e1e:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    5e22:	2200      	movs	r2, #0
    5e24:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    5e28:	4610      	mov	r0, r2
    5e2a:	4619      	mov	r1, r3
    5e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e30:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    5e34:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    5e38:	4619      	mov	r1, r3
    5e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e3e:	4696      	mov	lr, r2
    5e40:	e78a      	b.n	5d58 <__aeabi_ddiv+0x60>
    5e42:	bf00      	nop
    5e44:	7ff80000 	.word	0x7ff80000

00005e48 <__aeabi_dsub>:
    5e48:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e4a:	ea93 0401 	eors.w	r4, r3, r1
    5e4e:	460d      	mov	r5, r1
    5e50:	f100 80cc 	bmi.w	5fec <__aeabi_dsub+0x1a4>
    5e54:	4299      	cmp	r1, r3
    5e56:	4606      	mov	r6, r0
    5e58:	d270      	bcs.n	5f3c <__aeabi_dsub+0xf4>
    5e5a:	4056      	eors	r6, r2
    5e5c:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    5e60:	4072      	eors	r2, r6
    5e62:	4056      	eors	r6, r2
    5e64:	404d      	eors	r5, r1
    5e66:	404b      	eors	r3, r1
    5e68:	f240 70ff 	movw	r0, #2047	; 0x7ff
    5e6c:	0d2c      	lsrs	r4, r5, #20
    5e6e:	f424 6100 	bic.w	r1, r4, #2048	; 0x800
    5e72:	4281      	cmp	r1, r0
    5e74:	eba4 5713 	sub.w	r7, r4, r3, lsr #20
    5e78:	f000 8096 	beq.w	5fa8 <__aeabi_dsub+0x160>
    5e7c:	428f      	cmp	r7, r1
    5e7e:	f000 8099 	beq.w	5fb4 <__aeabi_dsub+0x16c>
    5e82:	f3c5 0513 	ubfx	r5, r5, #0, #20
    5e86:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5e8a:	2f1f      	cmp	r7, #31
    5e8c:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
    5e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    5e94:	d857      	bhi.n	5f46 <__aeabi_dsub+0xfe>
    5e96:	f1c7 0020 	rsb	r0, r7, #32
    5e9a:	fa03 fe00 	lsl.w	lr, r3, r0
    5e9e:	fa22 f107 	lsr.w	r1, r2, r7
    5ea2:	ea4e 0101 	orr.w	r1, lr, r1
    5ea6:	40fb      	lsrs	r3, r7
    5ea8:	1a71      	subs	r1, r6, r1
    5eaa:	1aed      	subs	r5, r5, r3
    5eac:	428e      	cmp	r6, r1
    5eae:	bf38      	it	cc
    5eb0:	f105 35ff 	addcc.w	r5, r5, #4294967295
    5eb4:	fa12 f300 	lsls.w	r3, r2, r0
    5eb8:	d006      	beq.n	5ec8 <__aeabi_dsub+0x80>
    5eba:	3901      	subs	r1, #1
    5ebc:	1c4f      	adds	r7, r1, #1
    5ebe:	f1c3 0300 	rsb	r3, r3, #0
    5ec2:	bf08      	it	eq
    5ec4:	f105 35ff 	addeq.w	r5, r5, #4294967295
    5ec8:	f415 1fc0 	tst.w	r5, #1572864	; 0x180000
    5ecc:	d158      	bne.n	5f80 <__aeabi_dsub+0x138>
    5ece:	0fdb      	lsrs	r3, r3, #31
    5ed0:	0fca      	lsrs	r2, r1, #31
    5ed2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    5ed6:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    5eda:	ea53 0502 	orrs.w	r5, r3, r2
    5ede:	f000 809a 	beq.w	6016 <__aeabi_dsub+0x1ce>
    5ee2:	0b51      	lsrs	r1, r2, #13
    5ee4:	f1a4 0502 	sub.w	r5, r4, #2
    5ee8:	d108      	bne.n	5efc <__aeabi_dsub+0xb4>
    5eea:	0e19      	lsrs	r1, r3, #24
    5eec:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
    5ef0:	0b51      	lsrs	r1, r2, #13
    5ef2:	f1a5 0508 	sub.w	r5, r5, #8
    5ef6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    5efa:	d0f6      	beq.n	5eea <__aeabi_dsub+0xa2>
    5efc:	0c51      	lsrs	r1, r2, #17
    5efe:	d104      	bne.n	5f0a <__aeabi_dsub+0xc2>
    5f00:	0f19      	lsrs	r1, r3, #28
    5f02:	3d04      	subs	r5, #4
    5f04:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    5f08:	011b      	lsls	r3, r3, #4
    5f0a:	0cd1      	lsrs	r1, r2, #19
    5f0c:	d104      	bne.n	5f18 <__aeabi_dsub+0xd0>
    5f0e:	0f99      	lsrs	r1, r3, #30
    5f10:	3d02      	subs	r5, #2
    5f12:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
    5f16:	009b      	lsls	r3, r3, #2
    5f18:	0d11      	lsrs	r1, r2, #20
    5f1a:	d104      	bne.n	5f26 <__aeabi_dsub+0xde>
    5f1c:	0fd9      	lsrs	r1, r3, #31
    5f1e:	3d01      	subs	r5, #1
    5f20:	ea41 0242 	orr.w	r2, r1, r2, lsl #1
    5f24:	005b      	lsls	r3, r3, #1
    5f26:	0ae4      	lsrs	r4, r4, #11
    5f28:	ebb4 2fd5 	cmp.w	r4, r5, lsr #11
    5f2c:	f04f 0000 	mov.w	r0, #0
    5f30:	bf06      	itte	eq
    5f32:	eb02 5105 	addeq.w	r1, r2, r5, lsl #20
    5f36:	4618      	moveq	r0, r3
    5f38:	07e1      	lslne	r1, r4, #31
    5f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f3c:	4290      	cmp	r0, r2
    5f3e:	d893      	bhi.n	5e68 <__aeabi_dsub+0x20>
    5f40:	4299      	cmp	r1, r3
    5f42:	d191      	bne.n	5e68 <__aeabi_dsub+0x20>
    5f44:	e789      	b.n	5e5a <__aeabi_dsub+0x12>
    5f46:	2f35      	cmp	r7, #53	; 0x35
    5f48:	d826      	bhi.n	5f98 <__aeabi_dsub+0x150>
    5f4a:	f1a7 0020 	sub.w	r0, r7, #32
    5f4e:	fa23 f100 	lsr.w	r1, r3, r0
    5f52:	1a71      	subs	r1, r6, r1
    5f54:	428e      	cmp	r6, r1
    5f56:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    5f5a:	fa22 f000 	lsr.w	r0, r2, r0
    5f5e:	bf38      	it	cc
    5f60:	f105 35ff 	addcc.w	r5, r5, #4294967295
    5f64:	40bb      	lsls	r3, r7
    5f66:	0612      	lsls	r2, r2, #24
    5f68:	ea43 0300 	orr.w	r3, r3, r0
    5f6c:	d048      	beq.n	6000 <__aeabi_dsub+0x1b8>
    5f6e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    5f72:	3901      	subs	r1, #1
    5f74:	1c4e      	adds	r6, r1, #1
    5f76:	f1c3 0300 	rsb	r3, r3, #0
    5f7a:	bf08      	it	eq
    5f7c:	f105 35ff 	addeq.w	r5, r5, #4294967295
    5f80:	02e8      	lsls	r0, r5, #11
    5f82:	d42e      	bmi.n	5fe2 <__aeabi_dsub+0x19a>
    5f84:	3c01      	subs	r4, #1
    5f86:	0562      	lsls	r2, r4, #21
    5f88:	d037      	beq.n	5ffa <__aeabi_dsub+0x1b2>
    5f8a:	0fde      	lsrs	r6, r3, #31
    5f8c:	0fca      	lsrs	r2, r1, #31
    5f8e:	ea42 0545 	orr.w	r5, r2, r5, lsl #1
    5f92:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
    5f96:	005b      	lsls	r3, r3, #1
    5f98:	2b00      	cmp	r3, #0
    5f9a:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    5f9e:	db11      	blt.n	5fc4 <__aeabi_dsub+0x17c>
    5fa0:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    5fa4:	4630      	mov	r0, r6
    5fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fa8:	032b      	lsls	r3, r5, #12
    5faa:	d117      	bne.n	5fdc <__aeabi_dsub+0x194>
    5fac:	b387      	cbz	r7, 6010 <__aeabi_dsub+0x1c8>
    5fae:	4630      	mov	r0, r6
    5fb0:	4629      	mov	r1, r5
    5fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fb4:	f240 73fe 	movw	r3, #2046	; 0x7fe
    5fb8:	429f      	cmp	r7, r3
    5fba:	d8f5      	bhi.n	5fa8 <__aeabi_dsub+0x160>
    5fbc:	b99f      	cbnz	r7, 5fe6 <__aeabi_dsub+0x19e>
    5fbe:	4639      	mov	r1, r7
    5fc0:	4638      	mov	r0, r7
    5fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fc4:	3601      	adds	r6, #1
    5fc6:	bf08      	it	eq
    5fc8:	3501      	addeq	r5, #1
    5fca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5fce:	bf08      	it	eq
    5fd0:	f026 0601 	biceq.w	r6, r6, #1
    5fd4:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    5fd8:	4630      	mov	r0, r6
    5fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fdc:	2000      	movs	r0, #0
    5fde:	490f      	ldr	r1, [pc, #60]	; (601c <__aeabi_dsub+0x1d4>)
    5fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fe2:	460e      	mov	r6, r1
    5fe4:	e7d8      	b.n	5f98 <__aeabi_dsub+0x150>
    5fe6:	4629      	mov	r1, r5
    5fe8:	4630      	mov	r0, r6
    5fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fec:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    5ff0:	462b      	mov	r3, r5
    5ff2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5ff6:	f000 b813 	b.w	6020 <__aeabi_dadd>
    5ffa:	0521      	lsls	r1, r4, #20
    5ffc:	4610      	mov	r0, r2
    5ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6000:	2b00      	cmp	r3, #0
    6002:	d1b6      	bne.n	5f72 <__aeabi_dsub+0x12a>
    6004:	02ea      	lsls	r2, r5, #11
    6006:	d5bd      	bpl.n	5f84 <__aeabi_dsub+0x13c>
    6008:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    600c:	460e      	mov	r6, r1
    600e:	e7c7      	b.n	5fa0 <__aeabi_dsub+0x158>
    6010:	4902      	ldr	r1, [pc, #8]	; (601c <__aeabi_dsub+0x1d4>)
    6012:	4638      	mov	r0, r7
    6014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6016:	4629      	mov	r1, r5
    6018:	4628      	mov	r0, r5
    601a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    601c:	7ff80000 	.word	0x7ff80000

00006020 <__aeabi_dadd>:
    6020:	b5f0      	push	{r4, r5, r6, r7, lr}
    6022:	ea93 0601 	eors.w	r6, r3, r1
    6026:	460c      	mov	r4, r1
    6028:	f100 8087 	bmi.w	613a <__aeabi_dadd+0x11a>
    602c:	4299      	cmp	r1, r3
    602e:	4605      	mov	r5, r0
    6030:	d339      	bcc.n	60a6 <__aeabi_dadd+0x86>
    6032:	f240 70ff 	movw	r0, #2047	; 0x7ff
    6036:	0d26      	lsrs	r6, r4, #20
    6038:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    603c:	4281      	cmp	r1, r0
    603e:	d03f      	beq.n	60c0 <__aeabi_dadd+0xa0>
    6040:	eba6 5713 	sub.w	r7, r6, r3, lsr #20
    6044:	428f      	cmp	r7, r1
    6046:	d04c      	beq.n	60e2 <__aeabi_dadd+0xc2>
    6048:	f3c4 0413 	ubfx	r4, r4, #0, #20
    604c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6050:	2f1f      	cmp	r7, #31
    6052:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    6056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    605a:	d838      	bhi.n	60ce <__aeabi_dadd+0xae>
    605c:	f1c7 0020 	rsb	r0, r7, #32
    6060:	fa03 fe00 	lsl.w	lr, r3, r0
    6064:	fa22 f107 	lsr.w	r1, r2, r7
    6068:	40fb      	lsrs	r3, r7
    606a:	ea4e 0101 	orr.w	r1, lr, r1
    606e:	441c      	add	r4, r3
    6070:	186d      	adds	r5, r5, r1
    6072:	bf28      	it	cs
    6074:	3401      	addcs	r4, #1
    6076:	fa02 f300 	lsl.w	r3, r2, r0
    607a:	02a2      	lsls	r2, r4, #10
    607c:	d529      	bpl.n	60d2 <__aeabi_dadd+0xb2>
    607e:	3501      	adds	r5, #1
    6080:	bf08      	it	eq
    6082:	3401      	addeq	r4, #1
    6084:	b90b      	cbnz	r3, 608a <__aeabi_dadd+0x6a>
    6086:	f025 0502 	bic.w	r5, r5, #2
    608a:	0533      	lsls	r3, r6, #20
    608c:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    6090:	005a      	lsls	r2, r3, #1
    6092:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    6096:	f04f 0000 	mov.w	r0, #0
    609a:	d240      	bcs.n	611e <__aeabi_dadd+0xfe>
    609c:	07e4      	lsls	r4, r4, #31
    609e:	4619      	mov	r1, r3
    60a0:	ea44 0055 	orr.w	r0, r4, r5, lsr #1
    60a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60a6:	f240 70ff 	movw	r0, #2047	; 0x7ff
    60aa:	4074      	eors	r4, r6
    60ac:	4073      	eors	r3, r6
    60ae:	0d26      	lsrs	r6, r4, #20
    60b0:	4055      	eors	r5, r2
    60b2:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    60b6:	406a      	eors	r2, r5
    60b8:	4281      	cmp	r1, r0
    60ba:	ea85 0502 	eor.w	r5, r5, r2
    60be:	d1bf      	bne.n	6040 <__aeabi_dadd+0x20>
    60c0:	0323      	lsls	r3, r4, #12
    60c2:	f04f 0000 	mov.w	r0, #0
    60c6:	d136      	bne.n	6136 <__aeabi_dadd+0x116>
    60c8:	4621      	mov	r1, r4
    60ca:	4628      	mov	r0, r5
    60cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60ce:	2f35      	cmp	r7, #53	; 0x35
    60d0:	d911      	bls.n	60f6 <__aeabi_dadd+0xd6>
    60d2:	2b00      	cmp	r3, #0
    60d4:	f106 36ff 	add.w	r6, r6, #4294967295
    60d8:	db24      	blt.n	6124 <__aeabi_dadd+0x104>
    60da:	eb04 5106 	add.w	r1, r4, r6, lsl #20
    60de:	4628      	mov	r0, r5
    60e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60e2:	f240 73fe 	movw	r3, #2046	; 0x7fe
    60e6:	429f      	cmp	r7, r3
    60e8:	d8ea      	bhi.n	60c0 <__aeabi_dadd+0xa0>
    60ea:	2f00      	cmp	r7, #0
    60ec:	d1ec      	bne.n	60c8 <__aeabi_dadd+0xa8>
    60ee:	f004 4100 	and.w	r1, r4, #2147483648	; 0x80000000
    60f2:	4638      	mov	r0, r7
    60f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60f6:	f1a7 0120 	sub.w	r1, r7, #32
    60fa:	fa23 f001 	lsr.w	r0, r3, r1
    60fe:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    6102:	40bb      	lsls	r3, r7
    6104:	fa22 f101 	lsr.w	r1, r2, r1
    6108:	182d      	adds	r5, r5, r0
    610a:	ea43 0301 	orr.w	r3, r3, r1
    610e:	d31b      	bcc.n	6148 <__aeabi_dadd+0x128>
    6110:	0612      	lsls	r2, r2, #24
    6112:	f104 0401 	add.w	r4, r4, #1
    6116:	d0b0      	beq.n	607a <__aeabi_dadd+0x5a>
    6118:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    611c:	e7ad      	b.n	607a <__aeabi_dadd+0x5a>
    611e:	3601      	adds	r6, #1
    6120:	0531      	lsls	r1, r6, #20
    6122:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6124:	3501      	adds	r5, #1
    6126:	bf08      	it	eq
    6128:	3401      	addeq	r4, #1
    612a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    612e:	bf08      	it	eq
    6130:	f025 0501 	biceq.w	r5, r5, #1
    6134:	e7d1      	b.n	60da <__aeabi_dadd+0xba>
    6136:	4906      	ldr	r1, [pc, #24]	; (6150 <__aeabi_dadd+0x130>)
    6138:	bdf0      	pop	{r4, r5, r6, r7, pc}
    613a:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    613e:	462b      	mov	r3, r5
    6140:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    6144:	f7ff be80 	b.w	5e48 <__aeabi_dsub>
    6148:	0612      	lsls	r2, r2, #24
    614a:	d1e5      	bne.n	6118 <__aeabi_dadd+0xf8>
    614c:	e7c1      	b.n	60d2 <__aeabi_dadd+0xb2>
    614e:	bf00      	nop
    6150:	7ff80000 	.word	0x7ff80000

00006154 <__aeabi_d2iz>:
    6154:	02cb      	lsls	r3, r1, #11
    6156:	0d0a      	lsrs	r2, r1, #20
    6158:	ea43 5050 	orr.w	r0, r3, r0, lsr #21
    615c:	f5c2 6383 	rsb	r3, r2, #1048	; 0x418
    6160:	3306      	adds	r3, #6
    6162:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    6166:	2bff      	cmp	r3, #255	; 0xff
    6168:	fa20 f003 	lsr.w	r0, r0, r3
    616c:	d90f      	bls.n	618e <__aeabi_d2iz+0x3a>
    616e:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    6172:	d00d      	beq.n	6190 <__aeabi_d2iz+0x3c>
    6174:	f011 4080 	ands.w	r0, r1, #1073741824	; 0x40000000
    6178:	d009      	beq.n	618e <__aeabi_d2iz+0x3a>
    617a:	004b      	lsls	r3, r1, #1
    617c:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    6180:	d804      	bhi.n	618c <__aeabi_d2iz+0x38>
    6182:	0fc8      	lsrs	r0, r1, #31
    6184:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    6188:	3801      	subs	r0, #1
    618a:	4770      	bx	lr
    618c:	2000      	movs	r0, #0
    618e:	4770      	bx	lr
    6190:	4240      	negs	r0, r0
    6192:	4770      	bx	lr

00006194 <__bhs_ui2d>:
    6194:	b1f0      	cbz	r0, 61d4 <__bhs_ui2d+0x40>
    6196:	0c03      	lsrs	r3, r0, #16
    6198:	bf0c      	ite	eq
    619a:	0400      	lsleq	r0, r0, #16
    619c:	f101 7180 	addne.w	r1, r1, #16777216	; 0x1000000
    61a0:	0e03      	lsrs	r3, r0, #24
    61a2:	bf0c      	ite	eq
    61a4:	0200      	lsleq	r0, r0, #8
    61a6:	f501 0100 	addne.w	r1, r1, #8388608	; 0x800000
    61aa:	0f03      	lsrs	r3, r0, #28
    61ac:	bf0c      	ite	eq
    61ae:	0100      	lsleq	r0, r0, #4
    61b0:	f501 0180 	addne.w	r1, r1, #4194304	; 0x400000
    61b4:	0f83      	lsrs	r3, r0, #30
    61b6:	bf0c      	ite	eq
    61b8:	0080      	lsleq	r0, r0, #2
    61ba:	f501 1100 	addne.w	r1, r1, #2097152	; 0x200000
    61be:	2800      	cmp	r0, #0
    61c0:	bfac      	ite	ge
    61c2:	0040      	lslge	r0, r0, #1
    61c4:	f501 1180 	addlt.w	r1, r1, #1048576	; 0x100000
    61c8:	eb01 23e0 	add.w	r3, r1, r0, asr #11
    61cc:	0542      	lsls	r2, r0, #21
    61ce:	4610      	mov	r0, r2
    61d0:	4619      	mov	r1, r3
    61d2:	4770      	bx	lr
    61d4:	4603      	mov	r3, r0
    61d6:	4619      	mov	r1, r3
    61d8:	4770      	bx	lr
    61da:	bf00      	nop

000061dc <__aeabi_i2d>:
    61dc:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
    61e0:	0fc3      	lsrs	r3, r0, #31
    61e2:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
    61e6:	18d0      	adds	r0, r2, r3
    61e8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    61ec:	f7ff bfd2 	b.w	6194 <__bhs_ui2d>

000061f0 <__aeabi_dcmpeq>:
    61f0:	b510      	push	{r4, lr}
    61f2:	004c      	lsls	r4, r1, #1
    61f4:	ea54 0e00 	orrs.w	lr, r4, r0
    61f8:	d102      	bne.n	6200 <__aeabi_dcmpeq+0x10>
    61fa:	ea52 0e43 	orrs.w	lr, r2, r3, lsl #1
    61fe:	d00b      	beq.n	6218 <__aeabi_dcmpeq+0x28>
    6200:	4299      	cmp	r1, r3
    6202:	d001      	beq.n	6208 <__aeabi_dcmpeq+0x18>
    6204:	2000      	movs	r0, #0
    6206:	bd10      	pop	{r4, pc}
    6208:	4290      	cmp	r0, r2
    620a:	d1fb      	bne.n	6204 <__aeabi_dcmpeq+0x14>
    620c:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    6210:	bf8c      	ite	hi
    6212:	2000      	movhi	r0, #0
    6214:	2001      	movls	r0, #1
    6216:	bd10      	pop	{r4, pc}
    6218:	2001      	movs	r0, #1
    621a:	bd10      	pop	{r4, pc}

0000621c <__aeabi_dcmplt>:
    621c:	b430      	push	{r4, r5}
    621e:	ea53 0401 	orrs.w	r4, r3, r1
    6222:	d409      	bmi.n	6238 <__aeabi_dcmplt+0x1c>
    6224:	005c      	lsls	r4, r3, #1
    6226:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    622a:	d802      	bhi.n	6232 <__aeabi_dcmplt+0x16>
    622c:	4299      	cmp	r1, r3
    622e:	d317      	bcc.n	6260 <__aeabi_dcmplt+0x44>
    6230:	d019      	beq.n	6266 <__aeabi_dcmplt+0x4a>
    6232:	2000      	movs	r0, #0
    6234:	bc30      	pop	{r4, r5}
    6236:	4770      	bx	lr
    6238:	004d      	lsls	r5, r1, #1
    623a:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    623e:	d8f8      	bhi.n	6232 <__aeabi_dcmplt+0x16>
    6240:	005c      	lsls	r4, r3, #1
    6242:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    6246:	d8f4      	bhi.n	6232 <__aeabi_dcmplt+0x16>
    6248:	4305      	orrs	r5, r0
    624a:	d101      	bne.n	6250 <__aeabi_dcmplt+0x34>
    624c:	4314      	orrs	r4, r2
    624e:	d010      	beq.n	6272 <__aeabi_dcmplt+0x56>
    6250:	4299      	cmp	r1, r3
    6252:	d805      	bhi.n	6260 <__aeabi_dcmplt+0x44>
    6254:	d1ed      	bne.n	6232 <__aeabi_dcmplt+0x16>
    6256:	4290      	cmp	r0, r2
    6258:	bf94      	ite	ls
    625a:	2000      	movls	r0, #0
    625c:	2001      	movhi	r0, #1
    625e:	e7e9      	b.n	6234 <__aeabi_dcmplt+0x18>
    6260:	2001      	movs	r0, #1
    6262:	bc30      	pop	{r4, r5}
    6264:	4770      	bx	lr
    6266:	4290      	cmp	r0, r2
    6268:	bf2c      	ite	cs
    626a:	2000      	movcs	r0, #0
    626c:	2001      	movcc	r0, #1
    626e:	bc30      	pop	{r4, r5}
    6270:	4770      	bx	lr
    6272:	4620      	mov	r0, r4
    6274:	e7de      	b.n	6234 <__aeabi_dcmplt+0x18>
    6276:	bf00      	nop

00006278 <__aeabi_dcmple>:
    6278:	b430      	push	{r4, r5}
    627a:	ea53 0401 	orrs.w	r4, r3, r1
    627e:	d409      	bmi.n	6294 <__aeabi_dcmple+0x1c>
    6280:	005c      	lsls	r4, r3, #1
    6282:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    6286:	d802      	bhi.n	628e <__aeabi_dcmple+0x16>
    6288:	4299      	cmp	r1, r3
    628a:	d319      	bcc.n	62c0 <__aeabi_dcmple+0x48>
    628c:	d01b      	beq.n	62c6 <__aeabi_dcmple+0x4e>
    628e:	2000      	movs	r0, #0
    6290:	bc30      	pop	{r4, r5}
    6292:	4770      	bx	lr
    6294:	004c      	lsls	r4, r1, #1
    6296:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    629a:	d8f8      	bhi.n	628e <__aeabi_dcmple+0x16>
    629c:	005d      	lsls	r5, r3, #1
    629e:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    62a2:	d8f4      	bhi.n	628e <__aeabi_dcmple+0x16>
    62a4:	4299      	cmp	r1, r3
    62a6:	d80b      	bhi.n	62c0 <__aeabi_dcmple+0x48>
    62a8:	d008      	beq.n	62bc <__aeabi_dcmple+0x44>
    62aa:	ea54 0300 	orrs.w	r3, r4, r0
    62ae:	d1ee      	bne.n	628e <__aeabi_dcmple+0x16>
    62b0:	ea55 0302 	orrs.w	r3, r5, r2
    62b4:	bf0c      	ite	eq
    62b6:	2001      	moveq	r0, #1
    62b8:	2000      	movne	r0, #0
    62ba:	e7e9      	b.n	6290 <__aeabi_dcmple+0x18>
    62bc:	4290      	cmp	r0, r2
    62be:	d3f4      	bcc.n	62aa <__aeabi_dcmple+0x32>
    62c0:	bc30      	pop	{r4, r5}
    62c2:	2001      	movs	r0, #1
    62c4:	4770      	bx	lr
    62c6:	4290      	cmp	r0, r2
    62c8:	bf8c      	ite	hi
    62ca:	2000      	movhi	r0, #0
    62cc:	2001      	movls	r0, #1
    62ce:	bc30      	pop	{r4, r5}
    62d0:	4770      	bx	lr
    62d2:	bf00      	nop

000062d4 <__aeabi_dcmpge>:
    62d4:	b430      	push	{r4, r5}
    62d6:	ea53 0401 	orrs.w	r4, r3, r1
    62da:	ea4f 0441 	mov.w	r4, r1, lsl #1
    62de:	d408      	bmi.n	62f2 <__aeabi_dcmpge+0x1e>
    62e0:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    62e4:	d802      	bhi.n	62ec <__aeabi_dcmpge+0x18>
    62e6:	4299      	cmp	r1, r3
    62e8:	d818      	bhi.n	631c <__aeabi_dcmpge+0x48>
    62ea:	d01a      	beq.n	6322 <__aeabi_dcmpge+0x4e>
    62ec:	2000      	movs	r0, #0
    62ee:	bc30      	pop	{r4, r5}
    62f0:	4770      	bx	lr
    62f2:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    62f6:	d8f9      	bhi.n	62ec <__aeabi_dcmpge+0x18>
    62f8:	005d      	lsls	r5, r3, #1
    62fa:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    62fe:	d8f5      	bhi.n	62ec <__aeabi_dcmpge+0x18>
    6300:	4299      	cmp	r1, r3
    6302:	d30b      	bcc.n	631c <__aeabi_dcmpge+0x48>
    6304:	d008      	beq.n	6318 <__aeabi_dcmpge+0x44>
    6306:	ea54 0300 	orrs.w	r3, r4, r0
    630a:	d1ef      	bne.n	62ec <__aeabi_dcmpge+0x18>
    630c:	ea55 0302 	orrs.w	r3, r5, r2
    6310:	bf0c      	ite	eq
    6312:	2001      	moveq	r0, #1
    6314:	2000      	movne	r0, #0
    6316:	e7ea      	b.n	62ee <__aeabi_dcmpge+0x1a>
    6318:	4290      	cmp	r0, r2
    631a:	d8f4      	bhi.n	6306 <__aeabi_dcmpge+0x32>
    631c:	bc30      	pop	{r4, r5}
    631e:	2001      	movs	r0, #1
    6320:	4770      	bx	lr
    6322:	4290      	cmp	r0, r2
    6324:	bf34      	ite	cc
    6326:	2000      	movcc	r0, #0
    6328:	2001      	movcs	r0, #1
    632a:	bc30      	pop	{r4, r5}
    632c:	4770      	bx	lr
    632e:	bf00      	nop

00006330 <__aeabi_lowlevel_memset>:
    6330:	4603      	mov	r3, r0
    6332:	f013 0f03 	tst.w	r3, #3
    6336:	d10e      	bne.n	6356 <memset1a>
    6338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    633c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    6340:	ea41 4101 	orr.w	r1, r1, r1, lsl #16

00006344 <__bhs_memset4>:
    6344:	3a04      	subs	r2, #4

00006346 <memset4>:
    6346:	bf24      	itt	cs
    6348:	f843 1b04 	strcs.w	r1, [r3], #4
    634c:	f1b2 0204 	subscs.w	r2, r2, #4
    6350:	d2f9      	bcs.n	6346 <memset4>

00006352 <memset1>:
    6352:	f102 0204 	add.w	r2, r2, #4

00006356 <memset1a>:
    6356:	3a01      	subs	r2, #1
    6358:	bf24      	itt	cs
    635a:	f803 1b01 	strbcs.w	r1, [r3], #1
    635e:	e7fa      	bcs.n	6356 <memset1a>
    6360:	4770      	bx	lr

00006362 <__sys_appexit>:
    6362:	e7fe      	b.n	6362 <__sys_appexit>

00006364 <__sys_close>:
    6364:	f04f 30ff 	mov.w	r0, #4294967295
    6368:	4770      	bx	lr

0000636a <__sys_flen>:
    636a:	f04f 30ff 	mov.w	r0, #4294967295
    636e:	4770      	bx	lr

00006370 <__sys_istty>:
    6370:	f04f 30ff 	mov.w	r0, #4294967295
    6374:	4770      	bx	lr

00006376 <__sys_remove>:
    6376:	f04f 30ff 	mov.w	r0, #4294967295
    637a:	4770      	bx	lr

0000637c <__sys_seek>:
    637c:	f04f 30ff 	mov.w	r0, #4294967295
    6380:	4770      	bx	lr

00006382 <__sys_tmpnam>:
    6382:	f04f 30ff 	mov.w	r0, #4294967295
    6386:	4770      	bx	lr

00006388 <__sys_write>:
    6388:	4610      	mov	r0, r2
    638a:	4770      	bx	lr
    638c:	2e383731 	.word	0x2e383731
    6390:	332e3336 	.word	0x332e3336
    6394:	31382e30 	.word	0x31382e30
    6398:	00000000 	.word	0x00000000
    639c:	65746e69 	.word	0x65746e69
    63a0:	74656e72 	.word	0x74656e72
    63a4:	00000000 	.word	0x00000000
    63a8:	61646f76 	.word	0x61646f76
    63ac:	656e6f66 	.word	0x656e6f66
    63b0:	00000000 	.word	0x00000000
    63b4:	656c694d 	.word	0x656c694d
    63b8:	3a656761 	.word	0x3a656761
    63bc:	0a642520 	.word	0x0a642520
    63c0:	00000000 	.word	0x00000000
    63c4:	5f726570 	.word	0x5f726570
    63c8:	6f6e6769 	.word	0x6f6e6769
    63cc:	7265706e 	.word	0x7265706e
    63d0:	5f646f69 	.word	0x5f646f69
    63d4:	3a6c6176 	.word	0x3a6c6176
    63d8:	0a642520 	.word	0x0a642520
    63dc:	00000000 	.word	0x00000000
    63e0:	5f726570 	.word	0x5f726570
    63e4:	6f6e6769 	.word	0x6f6e6769
    63e8:	65706666 	.word	0x65706666
    63ec:	646f6972 	.word	0x646f6972
    63f0:	6c61765f 	.word	0x6c61765f
    63f4:	6425203a 	.word	0x6425203a
    63f8:	6570202c 	.word	0x6570202c
    63fc:	67695f72 	.word	0x67695f72
    6400:	66666f6e 	.word	0x66666f6e
    6404:	69726570 	.word	0x69726570
    6408:	765f646f 	.word	0x765f646f
    640c:	6f286c61 	.word	0x6f286c61
    6410:	69676972 	.word	0x69676972
    6414:	296c616e 	.word	0x296c616e
    6418:	6425203a 	.word	0x6425203a
    641c:	0000000a 	.word	0x0000000a
    6420:	5f726570 	.word	0x5f726570
    6424:	6f6e6769 	.word	0x6f6e6769
    6428:	616f726e 	.word	0x616f726e
    642c:	676e696d 	.word	0x676e696d
    6430:	69726570 	.word	0x69726570
    6434:	765f646f 	.word	0x765f646f
    6438:	203a6c61 	.word	0x203a6c61
    643c:	000a6425 	.word	0x000a6425
    6440:	5f726570 	.word	0x5f726570
    6444:	6f6e6769 	.word	0x6f6e6769
    6448:	6f726666 	.word	0x6f726666
    644c:	6e696d61 	.word	0x6e696d61
    6450:	72657067 	.word	0x72657067
    6454:	5f646f69 	.word	0x5f646f69
    6458:	3a6c6176 	.word	0x3a6c6176
    645c:	0a642520 	.word	0x0a642520
    6460:	00000000 	.word	0x00000000
    6464:	5f726570 	.word	0x5f726570
    6468:	70776f6c 	.word	0x70776f6c
    646c:	6a5f776f 	.word	0x6a5f776f
    6470:	5f747375 	.word	0x5f747375
    6474:	656b6177 	.word	0x656b6177
    6478:	6425203a 	.word	0x6425203a
    647c:	0000000a 	.word	0x0000000a
    6480:	5f726570 	.word	0x5f726570
    6484:	70776f6c 	.word	0x70776f6c
    6488:	635f776f 	.word	0x635f776f
    648c:	65636e61 	.word	0x65636e61
    6490:	25203a6c 	.word	0x25203a6c
    6494:	00000a64 	.word	0x00000a64
    6498:	5f726570 	.word	0x5f726570
    649c:	70776f6c 	.word	0x70776f6c
    64a0:	705f776f 	.word	0x705f776f
    64a4:	6f697265 	.word	0x6f697265
    64a8:	726f2864 	.word	0x726f2864
    64ac:	6e696769 	.word	0x6e696769
    64b0:	3a296c61 	.word	0x3a296c61
    64b4:	0a642520 	.word	0x0a642520
    64b8:	00000000 	.word	0x00000000
    64bc:	5f726570 	.word	0x5f726570
    64c0:	70776f6c 	.word	0x70776f6c
    64c4:	705f776f 	.word	0x705f776f
    64c8:	6f697265 	.word	0x6f697265
    64cc:	25203a64 	.word	0x25203a64
    64d0:	00000a64 	.word	0x00000a64
    64d4:	5f726570 	.word	0x5f726570
    64d8:	70776f6c 	.word	0x70776f6c
    64dc:	6d5f776f 	.word	0x6d5f776f
    64e0:	3a65646f 	.word	0x3a65646f
    64e4:	0a642520 	.word	0x0a642520
    64e8:	00000000 	.word	0x00000000
    64ec:	5f726570 	.word	0x5f726570
    64f0:	66666f63 	.word	0x66666f63
    64f4:	635f6565 	.word	0x635f6565
    64f8:	746e756f 	.word	0x746e756f
    64fc:	203a7265 	.word	0x203a7265
    6500:	000a6425 	.word	0x000a6425
    6504:	3e2d2d2d 	.word	0x3e2d2d2d
    6508:	0d732520 	.word	0x0d732520
    650c:	0000000a 	.word	0x0000000a
    6510:	0a0d7325 	.word	0x0a0d7325
    6514:	00000000 	.word	0x00000000
    6518:	65746e45 	.word	0x65746e45
    651c:	20646572 	.word	0x20646572
    6520:	5f4d5347 	.word	0x5f4d5347
    6524:	5f504354 	.word	0x5f504354
    6528:	76636552 	.word	0x76636552
    652c:	00000000 	.word	0x00000000
    6530:	512b5441 	.word	0x512b5441
    6534:	3d445249 	.word	0x3d445249
    6538:	2c312c31 	.word	0x2c312c31
    653c:	30322c30 	.word	0x30322c30
    6540:	00000030 	.word	0x00000030
    6544:	65746e45 	.word	0x65746e45
    6548:	20646572 	.word	0x20646572
    654c:	63656843 	.word	0x63656843
    6550:	4d53476b 	.word	0x4d53476b
    6554:	66667542 	.word	0x66667542
    6558:	00007265 	.word	0x00007265
    655c:	512b5441 	.word	0x512b5441
    6560:	3d445249 	.word	0x3d445249
    6564:	2c312c31 	.word	0x2c312c31
    6568:	30332c30 	.word	0x30332c30
    656c:	00000030 	.word	0x00000030
    6570:	54455323 	.word	0x54455323
    6574:	0000003b 	.word	0x0000003b
    6578:	7373654d 	.word	0x7373654d
    657c:	20656761 	.word	0x20656761
    6580:	6d6f7246 	.word	0x6d6f7246
    6584:	72655320 	.word	0x72655320
    6588:	20726576 	.word	0x20726576
    658c:	0000203a 	.word	0x0000203a
    6590:	65746e45 	.word	0x65746e45
    6594:	20646572 	.word	0x20646572
    6598:	64616572 	.word	0x64616572
    659c:	736d7320 	.word	0x736d7320
    65a0:	0000002e 	.word	0x0000002e
    65a4:	00005441 	.word	0x00005441
    65a8:	432b5441 	.word	0x432b5441
    65ac:	3d52474d 	.word	0x3d52474d
    65b0:	00000031 	.word	0x00000031
    65b4:	432b5441 	.word	0x432b5441
    65b8:	3d44474d 	.word	0x3d44474d
    65bc:	00342c31 	.word	0x00342c31
    65c0:	7373654d 	.word	0x7373654d
    65c4:	20656761 	.word	0x20656761
    65c8:	6d6f7246 	.word	0x6d6f7246
    65cc:	534d5320 	.word	0x534d5320
    65d0:	00203a20 	.word	0x00203a20
    65d4:	65746e45 	.word	0x65746e45
    65d8:	20646572 	.word	0x20646572
    65dc:	5f4d5347 	.word	0x5f4d5347
    65e0:	6e6e6f43 	.word	0x6e6e6f43
    65e4:	54746365 	.word	0x54746365
    65e8:	6972546f 	.word	0x6972546f
    65ec:	6770556f 	.word	0x6770556f
    65f0:	65646172 	.word	0x65646172
    65f4:	76726553 	.word	0x76726553
    65f8:	00007265 	.word	0x00007265
    65fc:	00495441 	.word	0x00495441
    6600:	512b5441 	.word	0x512b5441
    6604:	43474649 	.word	0x43474649
    6608:	313d544e 	.word	0x313d544e
    660c:	00000000 	.word	0x00000000
    6610:	512b5441 	.word	0x512b5441
    6614:	47534349 	.word	0x47534349
    6618:	2c313d50 	.word	0x2c313d50
    661c:	22732522 	.word	0x22732522
    6620:	7325222c 	.word	0x7325222c
    6624:	25222c22 	.word	0x25222c22
    6628:	00002273 	.word	0x00002273
    662c:	512b5441 	.word	0x512b5441
    6630:	58554d49 	.word	0x58554d49
    6634:	0000303d 	.word	0x0000303d
    6638:	512b5441 	.word	0x512b5441
    663c:	54414256 	.word	0x54414256
    6640:	2c303d54 	.word	0x2c303d54
    6644:	30303533 	.word	0x30303533
    6648:	0000302c 	.word	0x0000302c
    664c:	512b5441 	.word	0x512b5441
    6650:	54414256 	.word	0x54414256
    6654:	2c313d54 	.word	0x2c313d54
    6658:	30303333 	.word	0x30303333
    665c:	0000302c 	.word	0x0000302c
    6660:	512b5441 	.word	0x512b5441
    6664:	4f485349 	.word	0x4f485349
    6668:	3d415257 	.word	0x3d415257
    666c:	00000031 	.word	0x00000031
    6670:	512b5441 	.word	0x512b5441
    6674:	4f485349 	.word	0x4f485349
    6678:	3d545057 	.word	0x3d545057
    667c:	00000031 	.word	0x00000031
    6680:	512b5441 	.word	0x512b5441
    6684:	49444e49 	.word	0x49444e49
    6688:	0000303d 	.word	0x0000303d
    668c:	512b5441 	.word	0x512b5441
    6690:	41454849 	.word	0x41454849
    6694:	00313d44 	.word	0x00313d44
    6698:	512b5441 	.word	0x512b5441
    669c:	444f4d49 	.word	0x444f4d49
    66a0:	00303d45 	.word	0x00303d45
    66a4:	512b5441 	.word	0x512b5441
    66a8:	534e4449 	.word	0x534e4449
    66ac:	313d5049 	.word	0x313d5049
    66b0:	00000000 	.word	0x00000000
    66b4:	512b5441 	.word	0x512b5441
    66b8:	534e4449 	.word	0x534e4449
    66bc:	303d5049 	.word	0x303d5049
    66c0:	00000000 	.word	0x00000000
    66c4:	512b5441 	.word	0x512b5441
    66c8:	4c435047 	.word	0x4c435047
    66cc:	3d535341 	.word	0x3d535341
    66d0:	00000038 	.word	0x00000038
    66d4:	512b5441 	.word	0x512b5441
    66d8:	45504f49 	.word	0x45504f49
    66dc:	54223d4e 	.word	0x54223d4e
    66e0:	2c225043 	.word	0x2c225043
    66e4:	22732522 	.word	0x22732522
    66e8:	0064252c 	.word	0x0064252c
    66ec:	4c494146 	.word	0x4c494146
    66f0:	00000000 	.word	0x00000000
    66f4:	4e4e4f43 	.word	0x4e4e4f43
    66f8:	20544345 	.word	0x20544345
    66fc:	00004b4f 	.word	0x00004b4f
    6700:	45524c41 	.word	0x45524c41
    6704:	20594441 	.word	0x20594441
    6708:	4e4e4f43 	.word	0x4e4e4f43
    670c:	00544345 	.word	0x00544345
    6710:	6e6e6f43 	.word	0x6e6e6f43
    6714:	65746365 	.word	0x65746365
    6718:	6f742064 	.word	0x6f742064
    671c:	65687420 	.word	0x65687420
    6720:	72657320 	.word	0x72657320
    6724:	2e726576 	.word	0x2e726576
    6728:	00000000 	.word	0x00000000
    672c:	504f4951 	.word	0x504f4951
    6730:	66204e45 	.word	0x66204e45
    6734:	656c6961 	.word	0x656c6961
    6738:	00002e64 	.word	0x00002e64
    673c:	64726148 	.word	0x64726148
    6740:	73657220 	.word	0x73657220
    6744:	69747465 	.word	0x69747465
    6748:	6d20676e 	.word	0x6d20676e
    674c:	6c75646f 	.word	0x6c75646f
    6750:	00002e65 	.word	0x00002e65
    6754:	6e6e6f63 	.word	0x6e6e6f63
    6758:	69746365 	.word	0x69746365
    675c:	61466e6f 	.word	0x61466e6f
    6760:	6f436c69 	.word	0x6f436c69
    6764:	20746e75 	.word	0x20746e75
    6768:	3034203e 	.word	0x3034203e
    676c:	73657220 	.word	0x73657220
    6770:	74726174 	.word	0x74726174
    6774:	20676e69 	.word	0x20676e69
    6778:	75646f6d 	.word	0x75646f6d
    677c:	002e656c 	.word	0x002e656c
    6780:	65746e45 	.word	0x65746e45
    6784:	20646572 	.word	0x20646572
    6788:	5f4d5347 	.word	0x5f4d5347
    678c:	6e6e6f43 	.word	0x6e6e6f43
    6790:	54746365 	.word	0x54746365
    6794:	6972546f 	.word	0x6972546f
    6798:	6770556f 	.word	0x6770556f
    679c:	65646172 	.word	0x65646172
    67a0:	76726553 	.word	0x76726553
    67a4:	72547265 	.word	0x72547265
    67a8:	70736e61 	.word	0x70736e61
    67ac:	6e657261 	.word	0x6e657261
    67b0:	00000074 	.word	0x00000074
    67b4:	512b5441 	.word	0x512b5441
    67b8:	46435449 	.word	0x46435449
    67bc:	2c333d47 	.word	0x2c333d47
    67c0:	30312c31 	.word	0x30312c31
    67c4:	0000312c 	.word	0x0000312c
    67c8:	512b5441 	.word	0x512b5441
    67cc:	45504f49 	.word	0x45504f49
    67d0:	54223d4e 	.word	0x54223d4e
    67d4:	2c225043 	.word	0x2c225043
    67d8:	22732522 	.word	0x22732522
    67dc:	0d64252c 	.word	0x0d64252c
    67e0:	00000000 	.word	0x00000000
    67e4:	65746e45 	.word	0x65746e45
    67e8:	20646572 	.word	0x20646572
    67ec:	6e6e6f43 	.word	0x6e6e6f43
    67f0:	6f746365 	.word	0x6f746365
    67f4:	6f697254 	.word	0x6f697254
    67f8:	00000000 	.word	0x00000000
    67fc:	512b5441 	.word	0x512b5441
    6800:	49444e49 	.word	0x49444e49
    6804:	0000313d 	.word	0x0000313d
    6808:	65746e45 	.word	0x65746e45
    680c:	20646572 	.word	0x20646572
    6810:	5f4d5347 	.word	0x5f4d5347
    6814:	646e6553 	.word	0x646e6553
    6818:	65536f54 	.word	0x65536f54
    681c:	72657672 	.word	0x72657672
    6820:	00504354 	.word	0x00504354
    6824:	512b5441 	.word	0x512b5441
    6828:	4e455349 	.word	0x4e455349
    682c:	64253d44 	.word	0x64253d44
    6830:	00000000 	.word	0x00000000
    6834:	646e6553 	.word	0x646e6553
    6838:	204b4f20 	.word	0x204b4f20
    683c:	6c696877 	.word	0x6c696877
    6840:	2e676e69 	.word	0x2e676e69
    6844:	0000002e 	.word	0x0000002e
    6848:	444e4553 	.word	0x444e4553
    684c:	004b4f20 	.word	0x004b4f20
    6850:	61746144 	.word	0x61746144
    6854:	6e657320 	.word	0x6e657320
    6858:	00002e74 	.word	0x00002e74
    685c:	4f525245 	.word	0x4f525245
    6860:	00000052 	.word	0x00000052
    6864:	61746144 	.word	0x61746144
    6868:	69616620 	.word	0x69616620
    686c:	00002e6c 	.word	0x00002e6c
    6870:	3b54535b 	.word	0x3b54535b
    6874:	30377325 	.word	0x30377325
    6878:	3232723b 	.word	0x3232723b
    687c:	503b3634 	.word	0x503b3634
    6880:	322d3536 	.word	0x322d3536
    6884:	30373530 	.word	0x30373530
    6888:	2d343032 	.word	0x2d343032
    688c:	73253b31 	.word	0x73253b31
    6890:	5d73253b 	.word	0x5d73253b
    6894:	00000000 	.word	0x00000000
    6898:	65746e45 	.word	0x65746e45
    689c:	20646572 	.word	0x20646572
    68a0:	5f4d5347 	.word	0x5f4d5347
    68a4:	5f504354 	.word	0x5f504354
    68a8:	646e6553 	.word	0x646e6553
    68ac:	00000000 	.word	0x00000000
    68b0:	512b5441 	.word	0x512b5441
    68b4:	44574f50 	.word	0x44574f50
    68b8:	0000303d 	.word	0x0000303d
    68bc:	00004b4f 	.word	0x00004b4f
    68c0:	432b5441 	.word	0x432b5441
    68c4:	3d45454d 	.word	0x3d45454d
    68c8:	00000032 	.word	0x00000032
    68cc:	432b5441 	.word	0x432b5441
    68d0:	3d46474d 	.word	0x3d46474d
    68d4:	00000031 	.word	0x00000031
    68d8:	432b5441 	.word	0x432b5441
    68dc:	3d494d4e 	.word	0x3d494d4e
    68e0:	2c312c32 	.word	0x2c312c32
    68e4:	2c302c30 	.word	0x2c302c30
    68e8:	00000030 	.word	0x00000030
    68ec:	206d6953 	.word	0x206d6953
    68f0:	64726163 	.word	0x64726163
    68f4:	61657220 	.word	0x61657220
    68f8:	2e2e7964 	.word	0x2e2e7964
    68fc:	0000000d 	.word	0x0000000d
    6900:	206d6953 	.word	0x206d6953
    6904:	20746f6e 	.word	0x20746f6e
    6908:	64616572 	.word	0x64616572
    690c:	000d2179 	.word	0x000d2179
    6910:	432b5441 	.word	0x432b5441
    6914:	00005153 	.word	0x00005153
    6918:	432b5441 	.word	0x432b5441
    691c:	3f474552 	.word	0x3f474552
    6920:	00000000 	.word	0x00000000
    6924:	4552432b 	.word	0x4552432b
    6928:	00000047 	.word	0x00000047
    692c:	0000352c 	.word	0x0000352c
    6930:	0000312c 	.word	0x0000312c
    6934:	002c352c 	.word	0x002c352c
    6938:	65746e45 	.word	0x65746e45
    693c:	20646572 	.word	0x20646572
    6940:	63656863 	.word	0x63656863
    6944:	6973206b 	.word	0x6973206b
    6948:	6163206d 	.word	0x6163206d
    694c:	002e6472 	.word	0x002e6472
    6950:	432b5441 	.word	0x432b5441
    6954:	3f4e4950 	.word	0x3f4e4950
    6958:	00000000 	.word	0x00000000
    695c:	44414552 	.word	0x44414552
    6960:	00000059 	.word	0x00000059
    6964:	472b5441 	.word	0x472b5441
    6968:	00004e53 	.word	0x00004e53
    696c:	49454d49 	.word	0x49454d49
    6970:	00203a20 	.word	0x00203a20
    6974:	432b5441 	.word	0x432b5441
    6978:	00494d49 	.word	0x00494d49
    697c:	49534d49 	.word	0x49534d49
    6980:	00203a20 	.word	0x00203a20
    6984:	31455441 	.word	0x31455441
    6988:	00000000 	.word	0x00000000
    698c:	4f484345 	.word	0x4f484345
    6990:	004e4f20 	.word	0x004e4f20
    6994:	30455441 	.word	0x30455441
    6998:	00000000 	.word	0x00000000
    699c:	4f484345 	.word	0x4f484345
    69a0:	46464f20 	.word	0x46464f20
    69a4:	00000000 	.word	0x00000000
    69a8:	512b5441 	.word	0x512b5441
    69ac:	4f4c4349 	.word	0x4f4c4349
    69b0:	00004553 	.word	0x00004553
    69b4:	534f4c43 	.word	0x534f4c43
    69b8:	43542045 	.word	0x43542045
    69bc:	6f632050 	.word	0x6f632050
    69c0:	63656e6e 	.word	0x63656e6e
    69c4:	6e6f6974 	.word	0x6e6f6974
    69c8:	00000020 	.word	0x00000020
    69cc:	65746e45 	.word	0x65746e45
    69d0:	20646572 	.word	0x20646572
    69d4:	656e6547 	.word	0x656e6547
    69d8:	65746172 	.word	0x65746172
    69dc:	73654d54 	.word	0x73654d54
    69e0:	65676173 	.word	0x65676173
    69e4:	00002928 	.word	0x00002928
    69e8:	6c727473 	.word	0x6c727473
    69ec:	6c286e65 	.word	0x6c286e65
    69f0:	5f747361 	.word	0x5f747361
    69f4:	696c6176 	.word	0x696c6176
    69f8:	70675f64 	.word	0x70675f64
    69fc:	29636d72 	.word	0x29636d72
    6a00:	25203a20 	.word	0x25203a20
    6a04:	00000d64 	.word	0x00000d64
    6a08:	7325545b 	.word	0x7325545b
    6a0c:	474f4e2d 	.word	0x474f4e2d
    6a10:	00005350 	.word	0x00005350
    6a14:	20535047 	.word	0x20535047
    6a18:	696c6156 	.word	0x696c6156
    6a1c:	203a2064 	.word	0x203a2064
    6a20:	6c727473 	.word	0x6c727473
    6a24:	6c286e65 	.word	0x6c286e65
    6a28:	5f747361 	.word	0x5f747361
    6a2c:	696c6176 	.word	0x696c6176
    6a30:	70675f64 	.word	0x70675f64
    6a34:	29636d72 	.word	0x29636d72
    6a38:	25203a20 	.word	0x25203a20
    6a3c:	6c202c64 	.word	0x6c202c64
    6a40:	5f747361 	.word	0x5f747361
    6a44:	696c6176 	.word	0x696c6176
    6a48:	70675f64 	.word	0x70675f64
    6a4c:	3a636d72 	.word	0x3a636d72
    6a50:	25203a20 	.word	0x25203a20
    6a54:	00000d73 	.word	0x00000d73
    6a58:	0000002c 	.word	0x0000002c
    6a5c:	00005825 	.word	0x00005825
    6a60:	65657053 	.word	0x65657053
    6a64:	54532064 	.word	0x54532064
    6a68:	203a2052 	.word	0x203a2052
    6a6c:	00000000 	.word	0x00000000
    6a70:	20726944 	.word	0x20726944
    6a74:	20525453 	.word	0x20525453
    6a78:	0000203a 	.word	0x0000203a
    6a7c:	00006425 	.word	0x00006425
    6a80:	0000004e 	.word	0x0000004e
    6a84:	00000057 	.word	0x00000057
    6a88:	00000053 	.word	0x00000053
    6a8c:	00000045 	.word	0x00000045
    6a90:	454d5f54 	.word	0x454d5f54
    6a94:	47415353 	.word	0x47415353
    6a98:	00003a45 	.word	0x00003a45
    6a9c:	7325545b 	.word	0x7325545b
    6aa0:	73257325 	.word	0x73257325
    6aa4:	73257325 	.word	0x73257325
    6aa8:	73257325 	.word	0x73257325
    6aac:	64256425 	.word	0x64256425
    6ab0:	73257325 	.word	0x73257325
    6ab4:	00000000 	.word	0x00000000
    6ab8:	302d7325 	.word	0x302d7325
    6abc:	253a3032 	.word	0x253a3032
    6ac0:	00000064 	.word	0x00000064
    6ac4:	313b7325 	.word	0x313b7325
    6ac8:	253a3430 	.word	0x253a3430
    6acc:	00000058 	.word	0x00000058
    6ad0:	253b7325 	.word	0x253b7325
    6ad4:	00000073 	.word	0x00000073
    6ad8:	303b7325 	.word	0x303b7325
    6adc:	253a3232 	.word	0x253a3232
    6ae0:	00000073 	.word	0x00000073
    6ae4:	313b7325 	.word	0x313b7325
    6ae8:	253a3230 	.word	0x253a3230
    6aec:	00000073 	.word	0x00000073
    6af0:	313b7325 	.word	0x313b7325
    6af4:	253a3530 	.word	0x253a3530
    6af8:	00000064 	.word	0x00000064
    6afc:	303b7325 	.word	0x303b7325
    6b00:	253a3332 	.word	0x253a3332
    6b04:	00005d64 	.word	0x00005d64
    6b08:	65746e45 	.word	0x65746e45
    6b0c:	20646572 	.word	0x20646572
    6b10:	6e616843 	.word	0x6e616843
    6b14:	43206567 	.word	0x43206567
    6b18:	69666e6f 	.word	0x69666e6f
    6b1c:	61727567 	.word	0x61727567
    6b20:	6e6f6974 	.word	0x6e6f6974
    6b24:	00000000 	.word	0x00000000
    6b28:	54455323 	.word	0x54455323
    6b2c:	0000003b 	.word	0x0000003b
    6b30:	61726150 	.word	0x61726150
    6b34:	3a20316d 	.word	0x3a20316d
    6b38:	2c732520 	.word	0x2c732520
    6b3c:	72615020 	.word	0x72615020
    6b40:	20326d61 	.word	0x20326d61
    6b44:	7325203a 	.word	0x7325203a
    6b48:	6150202c 	.word	0x6150202c
    6b4c:	336d6172 	.word	0x336d6172
    6b50:	25203a20 	.word	0x25203a20
    6b54:	50202c73 	.word	0x50202c73
    6b58:	6d617261 	.word	0x6d617261
    6b5c:	203a2034 	.word	0x203a2034
    6b60:	202c7325 	.word	0x202c7325
    6b64:	61726150 	.word	0x61726150
    6b68:	3a20356d 	.word	0x3a20356d
    6b6c:	0d732520 	.word	0x0d732520
    6b70:	00000000 	.word	0x00000000
    6b74:	00000031 	.word	0x00000031
    6b78:	00003130 	.word	0x00003130
    6b7c:	502d5049 	.word	0x502d5049
    6b80:	2074726f 	.word	0x2074726f
    6b84:	75716552 	.word	0x75716552
    6b88:	2c747365 	.word	0x2c747365
    6b8c:	20504920 	.word	0x20504920
    6b90:	7325203a 	.word	0x7325203a
    6b94:	6f50202c 	.word	0x6f50202c
    6b98:	3a207472 	.word	0x3a207472
    6b9c:	0d732520 	.word	0x0d732520
    6ba0:	00000000 	.word	0x00000000
    6ba4:	00003231 	.word	0x00003231
    6ba8:	65736552 	.word	0x65736552
    6bac:	65722074 	.word	0x65722074
    6bb0:	73657571 	.word	0x73657571
    6bb4:	65722074 	.word	0x65722074
    6bb8:	76696563 	.word	0x76696563
    6bbc:	202c6465 	.word	0x202c6465
    6bc0:	65736572 	.word	0x65736572
    6bc4:	00002e74 	.word	0x00002e74
    6bc8:	00003532 	.word	0x00003532
    6bcc:	204e5041 	.word	0x204e5041
    6bd0:	75716552 	.word	0x75716552
    6bd4:	2c747365 	.word	0x2c747365
    6bd8:	4e504120 	.word	0x4e504120
    6bdc:	25203a20 	.word	0x25203a20
    6be0:	55202c73 	.word	0x55202c73
    6be4:	20524553 	.word	0x20524553
    6be8:	7325203a 	.word	0x7325203a
    6bec:	4150202c 	.word	0x4150202c
    6bf0:	3a205353 	.word	0x3a205353
    6bf4:	0d732520 	.word	0x0d732520
    6bf8:	00000000 	.word	0x00000000
    6bfc:	00000034 	.word	0x00000034
    6c00:	00003430 	.word	0x00003430
    6c04:	00000030 	.word	0x00000030
    6c08:	61647055 	.word	0x61647055
    6c0c:	50206574 	.word	0x50206574
    6c10:	6f697265 	.word	0x6f697265
    6c14:	68432064 	.word	0x68432064
    6c18:	65676e61 	.word	0x65676e61
    6c1c:	71655220 	.word	0x71655220
    6c20:	74736575 	.word	0x74736575
    6c24:	4e4f202c 	.word	0x4e4f202c
    6c28:	25203a20 	.word	0x25203a20
    6c2c:	4f202c73 	.word	0x4f202c73
    6c30:	3a204646 	.word	0x3a204646
    6c34:	0d732520 	.word	0x0d732520
    6c38:	00000000 	.word	0x00000000
    6c3c:	61647055 	.word	0x61647055
    6c40:	50206574 	.word	0x50206574
    6c44:	6f697265 	.word	0x6f697265
    6c48:	6f522864 	.word	0x6f522864
    6c4c:	6e696d61 	.word	0x6e696d61
    6c50:	43202967 	.word	0x43202967
    6c54:	676e6168 	.word	0x676e6168
    6c58:	65522065 	.word	0x65522065
    6c5c:	73657571 	.word	0x73657571
    6c60:	4f202c74 	.word	0x4f202c74
    6c64:	203a204e 	.word	0x203a204e
    6c68:	202c7325 	.word	0x202c7325
    6c6c:	2046464f 	.word	0x2046464f
    6c70:	7325203a 	.word	0x7325203a
    6c74:	0000000d 	.word	0x0000000d
    6c78:	00003131 	.word	0x00003131
    6c7c:	6e616843 	.word	0x6e616843
    6c80:	4d206567 	.word	0x4d206567
    6c84:	61656c69 	.word	0x61656c69
    6c88:	002e6567 	.word	0x002e6567
    6c8c:	00003233 	.word	0x00003233
    6c90:	20776f4c 	.word	0x20776f4c
    6c94:	65776f70 	.word	0x65776f70
    6c98:	6f6d2072 	.word	0x6f6d2072
    6c9c:	002e6564 	.word	0x002e6564
    6ca0:	00003333 	.word	0x00003333
    6ca4:	20776f4c 	.word	0x20776f4c
    6ca8:	65776f70 	.word	0x65776f70
    6cac:	61772072 	.word	0x61772072
    6cb0:	7520656b 	.word	0x7520656b
    6cb4:	65702070 	.word	0x65702070
    6cb8:	646f6972 	.word	0x646f6972
    6cbc:	0000002e 	.word	0x0000002e
    6cc0:	00003433 	.word	0x00003433
    6cc4:	20776f4c 	.word	0x20776f4c
    6cc8:	65776f70 	.word	0x65776f70
    6ccc:	6f6d2072 	.word	0x6f6d2072
    6cd0:	73206564 	.word	0x73206564
    6cd4:	63656c65 	.word	0x63656c65
    6cd8:	6e6f6974 	.word	0x6e6f6974
    6cdc:	45454420 	.word	0x45454420
    6ce0:	4f502050 	.word	0x4f502050
    6ce4:	20524557 	.word	0x20524557
    6ce8:	4e574f44 	.word	0x4e574f44
    6cec:	20737620 	.word	0x20737620
    6cf0:	45574f50 	.word	0x45574f50
    6cf4:	4f442052 	.word	0x4f442052
    6cf8:	00004e57 	.word	0x00004e57
    6cfc:	00003332 	.word	0x00003332
    6d00:	646e6553 	.word	0x646e6553
    6d04:	6f702020 	.word	0x6f702020
    6d08:	69746973 	.word	0x69746973
    6d0c:	00006e6f 	.word	0x00006e6f
    6d10:	00000000 	.word	0x00000000
    6d14:	54455340 	.word	0x54455340
    6d18:	3773253b 	.word	0x3773253b
    6d1c:	73253b30 	.word	0x73253b30
    6d20:	00000000 	.word	0x00000000
    6d24:	7774654e 	.word	0x7774654e
    6d28:	206b726f 	.word	0x206b726f
    6d2c:	69676572 	.word	0x69676572
    6d30:	61727473 	.word	0x61727473
    6d34:	6e6f6974 	.word	0x6e6f6974
    6d38:	72726520 	.word	0x72726520
    6d3c:	0000726f 	.word	0x0000726f
    6d40:	69676552 	.word	0x69676552
    6d44:	72657473 	.word	0x72657473
    6d48:	74206465 	.word	0x74206465
    6d4c:	7367206f 	.word	0x7367206f
    6d50:	656e206d 	.word	0x656e206d
    6d54:	726f7774 	.word	0x726f7774
    6d58:	00002e6b 	.word	0x00002e6b
    6d5c:	6e676953 	.word	0x6e676953
    6d60:	53206c61 	.word	0x53206c61
    6d64:	6e657274 	.word	0x6e657274
    6d68:	20687467 	.word	0x20687467
    6d6c:	6425203a 	.word	0x6425203a
    6d70:	0000000a 	.word	0x0000000a
    6d74:	6c6c6548 	.word	0x6c6c6548
    6d78:	3650206f 	.word	0x3650206f
    6d7c:	30322035 	.word	0x30322035
    6d80:	35303531 	.word	0x35303531
    6d84:	002e3032 	.word	0x002e3032
    6d88:	74737953 	.word	0x74737953
    6d8c:	6f436d65 	.word	0x6f436d65
    6d90:	6c436572 	.word	0x6c436572
    6d94:	206b636f 	.word	0x206b636f
    6d98:	6425203d 	.word	0x6425203d
    6d9c:	0a7a4820 	.word	0x0a7a4820
    6da0:	00000000 	.word	0x00000000
    6da4:	52504545 	.word	0x52504545
    6da8:	49204d4f 	.word	0x49204d4f
    6dac:	2074696e 	.word	0x2074696e
    6db0:	6f727245 	.word	0x6f727245
    6db4:	00002e72 	.word	0x00002e72
    6db8:	52504545 	.word	0x52504545
    6dbc:	49204d4f 	.word	0x49204d4f
    6dc0:	2074696e 	.word	0x2074696e
    6dc4:	002e6b4f 	.word	0x002e6b4f
    6dc8:	73736461 	.word	0x73736461
    6dcc:	61736461 	.word	0x61736461
    6dd0:	64617364 	.word	0x64617364
    6dd4:	73646173 	.word	0x73646173
    6dd8:	61736461 	.word	0x61736461
    6ddc:	00000000 	.word	0x00000000
    6de0:	20435243 	.word	0x20435243
    6de4:	6120666f 	.word	0x6120666f
    6de8:	61737364 	.word	0x61737364
    6dec:	64617364 	.word	0x64617364
    6df0:	73646173 	.word	0x73646173
    6df4:	61736461 	.word	0x61736461
    6df8:	20617364 	.word	0x20617364
    6dfc:	3a207369 	.word	0x3a207369
    6e00:	25203d20 	.word	0x25203d20
    6e04:	0a0d2064 	.word	0x0a0d2064
    6e08:	00000000 	.word	0x00000000
    6e0c:	74696e49 	.word	0x74696e49
    6e10:	696c6169 	.word	0x696c6169
    6e14:	676e697a 	.word	0x676e697a
    6e18:	72655320 	.word	0x72655320
    6e1c:	20726576 	.word	0x20726576
    6e20:	6e6e6f43 	.word	0x6e6e6f43
    6e24:	69746365 	.word	0x69746365
    6e28:	00006e6f 	.word	0x00006e6f
    6e2c:	74737953 	.word	0x74737953
    6e30:	69206d65 	.word	0x69206d65
    6e34:	6567616d 	.word	0x6567616d
    6e38:	67707520 	.word	0x67707520
    6e3c:	65646172 	.word	0x65646172
    6e40:	71657220 	.word	0x71657220
    6e44:	74736575 	.word	0x74736575
    6e48:	00006465 	.word	0x00006465
    6e4c:	61697254 	.word	0x61697254
    6e50:	0000006c 	.word	0x0000006c
    6e54:	76726553 	.word	0x76726553
    6e58:	43207265 	.word	0x43207265
    6e5c:	656e6e6f 	.word	0x656e6e6f
    6e60:	6f697463 	.word	0x6f697463
    6e64:	7345206e 	.word	0x7345206e
    6e68:	6c626174 	.word	0x6c626174
    6e6c:	65687369 	.word	0x65687369
    6e70:	6f742064 	.word	0x6f742064
    6e74:	67705520 	.word	0x67705520
    6e78:	65646172 	.word	0x65646172
    6e7c:	72657320 	.word	0x72657320
    6e80:	00726576 	.word	0x00726576
    6e84:	6e776f44 	.word	0x6e776f44
    6e88:	64616f6c 	.word	0x64616f6c
    6e8c:	6e696620 	.word	0x6e696620
    6e90:	65687369 	.word	0x65687369
    6e94:	00002064 	.word	0x00002064
    6e98:	61697254 	.word	0x61697254
    6e9c:	6e65206c 	.word	0x6e65206c
    6ea0:	00000064 	.word	0x00000064
    6ea4:	696e6946 	.word	0x696e6946
    6ea8:	64656873 	.word	0x64656873
    6eac:	67707520 	.word	0x67707520
    6eb0:	69646172 	.word	0x69646172
    6eb4:	0000676e 	.word	0x0000676e
    6eb8:	6d697250 	.word	0x6d697250
    6ebc:	20797261 	.word	0x20797261
    6ec0:	67616d49 	.word	0x67616d49
    6ec4:	69732065 	.word	0x69732065
    6ec8:	2073657a 	.word	0x2073657a
    6ecc:	25783028 	.word	0x25783028
    6ed0:	3d3d2058 	.word	0x3d3d2058
    6ed4:	25783020 	.word	0x25783020
    6ed8:	000d2958 	.word	0x000d2958
    6edc:	6f636553 	.word	0x6f636553
    6ee0:	7261646e 	.word	0x7261646e
    6ee4:	6d492079 	.word	0x6d492079
    6ee8:	20656761 	.word	0x20656761
    6eec:	657a6973 	.word	0x657a6973
    6ef0:	30282073 	.word	0x30282073
    6ef4:	20582578 	.word	0x20582578
    6ef8:	30203d3d 	.word	0x30203d3d
    6efc:	29582578 	.word	0x29582578
    6f00:	0000000d 	.word	0x0000000d
    6f04:	68746f42 	.word	0x68746f42
    6f08:	616d6920 	.word	0x616d6920
    6f0c:	20736567 	.word	0x20736567
    6f10:	20657261 	.word	0x20657261
    6f14:	61766e69 	.word	0x61766e69
    6f18:	0064696c 	.word	0x0064696c
    6f1c:	6d697250 	.word	0x6d697250
    6f20:	20797261 	.word	0x20797261
    6f24:	67616d49 	.word	0x67616d49
    6f28:	65762065 	.word	0x65762065
    6f2c:	6f697372 	.word	0x6f697372
    6f30:	203d206e 	.word	0x203d206e
    6f34:	58257830 	.word	0x58257830
    6f38:	0000000d 	.word	0x0000000d
    6f3c:	6f636553 	.word	0x6f636553
    6f40:	7261646e 	.word	0x7261646e
    6f44:	6d492079 	.word	0x6d492079
    6f48:	20656761 	.word	0x20656761
    6f4c:	73726576 	.word	0x73726576
    6f50:	206e6f69 	.word	0x206e6f69
    6f54:	7830203d 	.word	0x7830203d
    6f58:	000d5825 	.word	0x000d5825
    6f5c:	63656843 	.word	0x63656843
    6f60:	676e696b 	.word	0x676e696b
    6f64:	43524320 	.word	0x43524320
    6f68:	00000000 	.word	0x00000000
    6f6c:	6d697250 	.word	0x6d697250
    6f70:	20797261 	.word	0x20797261
    6f74:	67616d49 	.word	0x67616d49
    6f78:	79742065 	.word	0x79742065
    6f7c:	3d206570 	.word	0x3d206570
    6f80:	2c642520 	.word	0x2c642520
    6f84:	72657620 	.word	0x72657620
    6f88:	6e6f6973 	.word	0x6e6f6973
    6f8c:	30203d20 	.word	0x30203d20
    6f90:	32302578 	.word	0x32302578
    6f94:	00000d58 	.word	0x00000d58
    6f98:	6f636553 	.word	0x6f636553
    6f9c:	7261646e 	.word	0x7261646e
    6fa0:	6d492079 	.word	0x6d492079
    6fa4:	20656761 	.word	0x20656761
    6fa8:	65707974 	.word	0x65707974
    6fac:	25203d20 	.word	0x25203d20
    6fb0:	76202c64 	.word	0x76202c64
    6fb4:	69737265 	.word	0x69737265
    6fb8:	3d206e6f 	.word	0x3d206e6f
    6fbc:	25783020 	.word	0x25783020
    6fc0:	0d583230 	.word	0x0d583230
    6fc4:	00000000 	.word	0x00000000
    6fc8:	63656843 	.word	0x63656843
    6fcc:	676e696b 	.word	0x676e696b
    6fd0:	20666920 	.word	0x20666920
    6fd4:	67726174 	.word	0x67726174
    6fd8:	6d207465 	.word	0x6d207465
    6fdc:	726f6d65 	.word	0x726f6d65
    6fe0:	73692079 	.word	0x73692079
    6fe4:	616c6220 	.word	0x616c6220
    6fe8:	00006b6e 	.word	0x00006b6e
    6fec:	67726154 	.word	0x67726154
    6ff0:	73207465 	.word	0x73207465
    6ff4:	6f746365 	.word	0x6f746365
    6ff8:	25282072 	.word	0x25282072
    6ffc:	69202964 	.word	0x69202964
    7000:	6f6e2073 	.word	0x6f6e2073
    7004:	6c622074 	.word	0x6c622074
    7008:	206b6e61 	.word	0x206b6e61
    700c:	72646461 	.word	0x72646461
    7010:	7830203a 	.word	0x7830203a
    7014:	202c5825 	.word	0x202c5825
    7018:	58257830 	.word	0x58257830
    701c:	00000000 	.word	0x00000000
    7020:	67726154 	.word	0x67726154
    7024:	73207465 	.word	0x73207465
    7028:	6f746365 	.word	0x6f746365
    702c:	25282072 	.word	0x25282072
    7030:	69202964 	.word	0x69202964
    7034:	6c622073 	.word	0x6c622073
    7038:	206b6e61 	.word	0x206b6e61
    703c:	00000000 	.word	0x00000000
    7040:	72617453 	.word	0x72617453
    7044:	676e6974 	.word	0x676e6974
    7048:	776f6420 	.word	0x776f6420
    704c:	616f6c6e 	.word	0x616f6c6e
    7050:	00000064 	.word	0x00000064
    7054:	61746f54 	.word	0x61746f54
    7058:	20796c6c 	.word	0x20796c6c
    705c:	6425203a 	.word	0x6425203a
    7060:	656c2020 	.word	0x656c2020
    7064:	7468676e 	.word	0x7468676e
    7068:	25203a20 	.word	0x25203a20
    706c:	000a0d64 	.word	0x000a0d64
    7070:	61746f54 	.word	0x61746f54
    7074:	20796c6c 	.word	0x20796c6c
    7078:	6425203a 	.word	0x6425203a
    707c:	6c662020 	.word	0x6c662020
    7080:	57687361 	.word	0x57687361
    7084:	65746972 	.word	0x65746972
    7088:	65646e49 	.word	0x65646e49
    708c:	203a2078 	.word	0x203a2078
    7090:	0a0d6425 	.word	0x0a0d6425
    7094:	00000000 	.word	0x00000000
    7098:	70657270 	.word	0x70657270
    709c:	20657261 	.word	0x20657261
    70a0:	00000000 	.word	0x00000000
    70a4:	79706f43 	.word	0x79706f43
    70a8:	6d615220 	.word	0x6d615220
    70ac:	73657220 	.word	0x73657220
    70b0:	20746c75 	.word	0x20746c75
    70b4:	65646f63 	.word	0x65646f63
    70b8:	25203a20 	.word	0x25203a20
    70bc:	000a0d64 	.word	0x000a0d64
    70c0:	69706f63 	.word	0x69706f63
    70c4:	00206465 	.word	0x00206465
    70c8:	49323375 	.word	0x49323375
    70cc:	435f5041 	.word	0x435f5041
    70d0:	61706d6f 	.word	0x61706d6f
    70d4:	3a206572 	.word	0x3a206572
    70d8:	20642520 	.word	0x20642520
    70dc:	6f727720 	.word	0x6f727720
    70e0:	25206574 	.word	0x25206574
    70e4:	0a0d2064 	.word	0x0a0d2064
    70e8:	00000000 	.word	0x00000000
    70ec:	69726576 	.word	0x69726576
    70f0:	64656966 	.word	0x64656966
    70f4:	00000020 	.word	0x00000020
    70f8:	69726576 	.word	0x69726576
    70fc:	61636966 	.word	0x61636966
    7100:	6e6f6974 	.word	0x6e6f6974
    7104:	69616620 	.word	0x69616620
    7108:	2064656c 	.word	0x2064656c
    710c:	00000000 	.word	0x00000000
    7110:	00000a0d 	.word	0x00000a0d
    7114:	78323025 	.word	0x78323025
    7118:	00000000 	.word	0x00000000
    711c:	00445049 	.word	0x00445049
    7120:	5043542c 	.word	0x5043542c
    7124:	0000002c 	.word	0x0000002c
    7128:	00000a0d 	.word	0x00000a0d
    712c:	3a504354 	.word	0x3a504354
    7130:	00000000 	.word	0x00000000
    7134:	72617453 	.word	0x72617453
    7138:	6f642074 	.word	0x6f642074
    713c:	6f6c6e77 	.word	0x6f6c6e77
    7140:	6e696461 	.word	0x6e696461
    7144:	00000067 	.word	0x00000067
    7148:	6e6e6f43 	.word	0x6e6e6f43
    714c:	69746365 	.word	0x69746365
    7150:	7320676e 	.word	0x7320676e
    7154:	65746174 	.word	0x65746174
    7158:	6d697420 	.word	0x6d697420
    715c:	65207265 	.word	0x65207265
    7160:	72697078 	.word	0x72697078
    7164:	73206465 	.word	0x73206465
    7168:	69646e65 	.word	0x69646e65
    716c:	2020676e 	.word	0x2020676e
    7170:	2077656e 	.word	0x2077656e
    7174:	75716572 	.word	0x75716572
    7178:	20747365 	.word	0x20747365
    717c:	00000020 	.word	0x00000020
    7180:	72206f4e 	.word	0x72206f4e
    7184:	796c7065 	.word	0x796c7065
    7188:	76696720 	.word	0x76696720
    718c:	70752065 	.word	0x70752065
    7190:	67707520 	.word	0x67707520
    7194:	69646172 	.word	0x69646172
    7198:	0000676e 	.word	0x0000676e
    719c:	65636552 	.word	0x65636552
    71a0:	64657669 	.word	0x64657669
    71a4:	544f4520 	.word	0x544f4520
    71a8:	00000020 	.word	0x00000020
    71ac:	736f6c43 	.word	0x736f6c43
    71b0:	20676e69 	.word	0x20676e69
    71b4:	20504354 	.word	0x20504354
    71b8:	6e6e6f63 	.word	0x6e6e6f63
    71bc:	69746365 	.word	0x69746365
    71c0:	00206e6f 	.word	0x00206e6f
    71c4:	65747962 	.word	0x65747962
    71c8:	756f6320 	.word	0x756f6320
    71cc:	203a746e 	.word	0x203a746e
    71d0:	202c6425 	.word	0x202c6425
    71d4:	6b636170 	.word	0x6b636170
    71d8:	6c207465 	.word	0x6c207465
    71dc:	25206e65 	.word	0x25206e65
    71e0:	000a0d64 	.word	0x000a0d64
    71e4:	6d617266 	.word	0x6d617266
    71e8:	756e2065 	.word	0x756e2065
    71ec:	7265626d 	.word	0x7265626d
    71f0:	20203a20 	.word	0x20203a20
    71f4:	0a0d6425 	.word	0x0a0d6425
    71f8:	00000000 	.word	0x00000000
    71fc:	636c6163 	.word	0x636c6163
    7200:	65616c75 	.word	0x65616c75
    7204:	63206474 	.word	0x63206474
    7208:	3a206372 	.word	0x3a206372
    720c:	25783020 	.word	0x25783020
    7210:	000a0d58 	.word	0x000a0d58
    7214:	20435243 	.word	0x20435243
    7218:	6374616d 	.word	0x6374616d
    721c:	20736568 	.word	0x20736568
    7220:	00000000 	.word	0x00000000
    7224:	65636552 	.word	0x65636552
    7228:	64657669 	.word	0x64657669
    722c:	66206120 	.word	0x66206120
    7230:	656d6172 	.word	0x656d6172
    7234:	00000020 	.word	0x00000020
    7238:	646e6553 	.word	0x646e6553
    723c:	20676e69 	.word	0x20676e69
    7240:	4b434120 	.word	0x4b434120
    7244:	00000020 	.word	0x00000020
    7248:	646e6553 	.word	0x646e6553
    724c:	20676e69 	.word	0x20676e69
    7250:	43414e20 	.word	0x43414e20
    7254:	0000004b 	.word	0x0000004b
    7258:	20435243 	.word	0x20435243
    725c:	73656f64 	.word	0x73656f64
    7260:	746f6e20 	.word	0x746f6e20
    7264:	74616d20 	.word	0x74616d20
    7268:	20206863 	.word	0x20206863
    726c:	4b43414e 	.word	0x4b43414e
    7270:	00676e69 	.word	0x00676e69
    7274:	656d6954 	.word	0x656d6954
    7278:	74756f20 	.word	0x74756f20
    727c:	206e6920 	.word	0x206e6920
    7280:	45434552 	.word	0x45434552
    7284:	4e495649 	.word	0x4e495649
    7288:	20202047 	.word	0x20202047
    728c:	00000000 	.word	0x00000000
    7290:	6e776f44 	.word	0x6e776f44
    7294:	64616f6c 	.word	0x64616f6c
    7298:	6f727020 	.word	0x6f727020
    729c:	73736563 	.word	0x73736563
    72a0:	69616620 	.word	0x69616620
    72a4:	2064656c 	.word	0x2064656c
    72a8:	69766967 	.word	0x69766967
    72ac:	7520676e 	.word	0x7520676e
    72b0:	70752070 	.word	0x70752070
    72b4:	64617267 	.word	0x64617267
    72b8:	00676e69 	.word	0x00676e69
    72bc:	202a2a2a 	.word	0x202a2a2a
    72c0:	7973435f 	.word	0x7973435f
    72c4:	6c615f73 	.word	0x6c615f73
    72c8:	20636f6c 	.word	0x20636f6c
    72cc:	6c696166 	.word	0x6c696166
    72d0:	000a6465 	.word	0x000a6465

000072d4 <__ctype>:
	...
    7354:	40404040 40404040 41414140 40404141     @@@@@@@@@AAAAA@@
    7364:	40404040 40404040 40404040 40404040     @@@@@@@@@@@@@@@@
    7374:	02020205 02020202 02020202 02020202     ................
    7384:	20202020 20202020 02022020 02020202               ......
    7394:	90909002 10909090 10101010 10101010     ................
    73a4:	10101010 10101010 02101010 02020202     ................
    73b4:	88888802 08888888 08080808 08080808     ................
    73c4:	08080808 08080808 02080808 40020202     ...............@
	...
    7454:	0020002b 63257830 00642570 63255830     +. .0x%cp%d.0X%c
    7464:	00642550 63257830 2a2e252e 70786c6c     P%d.0x%c.%.*llxp
    7474:	30006425 2e632558 6c2a2e25 2550586c     %d.0X%c.%.*llXP%
    7484:	002d0064 00770072 6c756e28 3000296c     d.-.r.w.(null).0
    7494:	78300058 30003000 34333231 38373635     X.0x.0.012345678
    74a4:	43424139 00464544 33323130 37363534     9ABCDEF.01234567
    74b4:	62613938 66656463 00000000              89abcdef....

000074c0 <__huge_vall>:
    74c0:	ffffffff 7fefffff                       ........
