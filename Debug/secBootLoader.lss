
secBootLoader.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
	is_gps_valid = 0;
	return FAIL;
}


double GPS_CalculateDistance() {
       0:	00 80 00 10 71 01 00 00 e9 01 00 00 f1 01 00 00     ....q...........
	char buffer[200];
	double local_prev_lat = 0;
      10:	f9 01 00 00 01 02 00 00 09 02 00 00 00 00 00 00     ................
	...
	double local_last_lat = 0;
	int count = sprintf(buffer,"Last Lat : %.10f, Last Lon= %.10f,Prev Lat : %.10f, Prev Lon= %.10f\r\r", last_lat,last_lon,prev_lat,prev_lon);
      2c:	11 02 00 00 19 02 00 00 00 00 00 00 21 02 00 00     ............!...
      3c:	c9 24 00 00 c5 31 00 00 31 02 00 00 31 02 00 00     .$...1..1...1...
      4c:	31 02 00 00 31 02 00 00 b1 27 00 00 b9 28 00 00     1...1....'...(..
      5c:	c1 29 00 00 cd 2a 00 00 31 02 00 00 c1 12 00 00     .)...*..1.......
	UARTSend(PORT_TRACE, buffer, count);
      6c:	05 16 00 00 31 02 00 00 31 02 00 00 31 02 00 00     ....1...1...1...
	if (is_gps_valid == 0 || last_lat == 0 || last_lon == 0 || prev_lat == 0 || prev_lon == 0){
      7c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      8c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      9c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      ac:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      bc:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...

000000cc <__data_section_table>:
      cc:	00007398 	.word	0x00007398
      d0:	10000000 	.word	0x10000000
      d4:	0000001c 	.word	0x0000001c
      d8:	00007398 	.word	0x00007398
      dc:	2007c000 	.word	0x2007c000
      e0:	00000000 	.word	0x00000000

000000e4 <__bss_section_table>:
      e4:	10000020 	.word	0x10000020
		TraceNL("GPS_CalculateDistance returns..");
      e8:	00001b38 	.word	0x00001b38
		return 0;
      ec:	2007c000 	.word	0x2007c000
      f0:	00000000 	.word	0x00000000

000000f4 <data_init>:
      f4:	b480      	push	{r7}
	}
	/////// Convert ddMM to degrees
	double R = 6371000; // m
      f6:	b089      	sub	sp, #36	; 0x24
      f8:	af00      	add	r7, sp, #0
      fa:	60f8      	str	r0, [r7, #12]
      fc:	60b9      	str	r1, [r7, #8]
      fe:	607a      	str	r2, [r7, #4]
	double dLat = (last_lat-prev_lat) * 0.0174532925; // To Radian
     100:	68bb      	ldr	r3, [r7, #8]
     102:	61fb      	str	r3, [r7, #28]
     104:	68fb      	ldr	r3, [r7, #12]
     106:	61bb      	str	r3, [r7, #24]
     108:	2300      	movs	r3, #0
     10a:	617b      	str	r3, [r7, #20]
     10c:	e00a      	b.n	124 <data_init+0x30>
     10e:	69fb      	ldr	r3, [r7, #28]
     110:	1d1a      	adds	r2, r3, #4
     112:	61fa      	str	r2, [r7, #28]
     114:	69ba      	ldr	r2, [r7, #24]
     116:	1d11      	adds	r1, r2, #4
     118:	61b9      	str	r1, [r7, #24]
     11a:	6812      	ldr	r2, [r2, #0]
     11c:	601a      	str	r2, [r3, #0]
     11e:	697b      	ldr	r3, [r7, #20]
     120:	3304      	adds	r3, #4
     122:	617b      	str	r3, [r7, #20]
     124:	697a      	ldr	r2, [r7, #20]
     126:	687b      	ldr	r3, [r7, #4]
     128:	429a      	cmp	r2, r3
	double dLon = (last_lon-prev_lon) * 0.0174532925; //To Radian
     12a:	d3f0      	bcc.n	10e <data_init+0x1a>
     12c:	3724      	adds	r7, #36	; 0x24
     12e:	46bd      	mov	sp, r7
     130:	f85d 7b04 	ldr.w	r7, [sp], #4
     134:	4770      	bx	lr
     136:	bf00      	nop

00000138 <bss_init>:
     138:	b480      	push	{r7}
     13a:	b085      	sub	sp, #20
     13c:	af00      	add	r7, sp, #0
     13e:	6078      	str	r0, [r7, #4]
     140:	6039      	str	r1, [r7, #0]
     142:	687b      	ldr	r3, [r7, #4]
     144:	60fb      	str	r3, [r7, #12]
     146:	2300      	movs	r3, #0
     148:	60bb      	str	r3, [r7, #8]
     14a:	e007      	b.n	15c <bss_init+0x24>
     14c:	68fb      	ldr	r3, [r7, #12]
     14e:	1d1a      	adds	r2, r3, #4
     150:	60fa      	str	r2, [r7, #12]
     152:	2200      	movs	r2, #0
	local_prev_lat = prev_lat * 0.0174532925;
     154:	601a      	str	r2, [r3, #0]
     156:	68bb      	ldr	r3, [r7, #8]
     158:	3304      	adds	r3, #4
     15a:	60bb      	str	r3, [r7, #8]
     15c:	68ba      	ldr	r2, [r7, #8]
     15e:	683b      	ldr	r3, [r7, #0]
     160:	429a      	cmp	r2, r3
     162:	d3f3      	bcc.n	14c <bss_init+0x14>
     164:	3714      	adds	r7, #20
     166:	46bd      	mov	sp, r7
     168:	f85d 7b04 	ldr.w	r7, [sp], #4
     16c:	4770      	bx	lr
     16e:	bf00      	nop

00000170 <ResetISR>:
     170:	b580      	push	{r7, lr}
     172:	b084      	sub	sp, #16
	local_last_lat = last_lat * 0.0174532925;
     174:	af00      	add	r7, sp, #0
     176:	4b19      	ldr	r3, [pc, #100]	; (1dc <ResetISR+0x6c>)
     178:	60fb      	str	r3, [r7, #12]
     17a:	e013      	b.n	1a4 <ResetISR+0x34>
     17c:	68fb      	ldr	r3, [r7, #12]
     17e:	1d1a      	adds	r2, r3, #4
     180:	60fa      	str	r2, [r7, #12]
     182:	681b      	ldr	r3, [r3, #0]
     184:	60bb      	str	r3, [r7, #8]
     186:	68fb      	ldr	r3, [r7, #12]
     188:	1d1a      	adds	r2, r3, #4
     18a:	60fa      	str	r2, [r7, #12]
     18c:	681b      	ldr	r3, [r3, #0]
     18e:	607b      	str	r3, [r7, #4]
     190:	68fb      	ldr	r3, [r7, #12]
     192:	1d1a      	adds	r2, r3, #4
	double a = sin(dLat/2) * sin(dLat/2) + sin(dLon/2) * sin(dLon/2) * cos(local_last_lat) * cos(local_last_lat);
     194:	60fa      	str	r2, [r7, #12]
     196:	681b      	ldr	r3, [r3, #0]
     198:	603b      	str	r3, [r7, #0]
     19a:	68b8      	ldr	r0, [r7, #8]
     19c:	6879      	ldr	r1, [r7, #4]
     19e:	683a      	ldr	r2, [r7, #0]
     1a0:	f7ff ffa8 	bl	f4 <data_init>
     1a4:	68fb      	ldr	r3, [r7, #12]
     1a6:	4a0e      	ldr	r2, [pc, #56]	; (1e0 <ResetISR+0x70>)
     1a8:	4293      	cmp	r3, r2
     1aa:	d3e7      	bcc.n	17c <ResetISR+0xc>
     1ac:	e00d      	b.n	1ca <ResetISR+0x5a>
     1ae:	68fb      	ldr	r3, [r7, #12]
     1b0:	1d1a      	adds	r2, r3, #4
     1b2:	60fa      	str	r2, [r7, #12]
     1b4:	681b      	ldr	r3, [r3, #0]
     1b6:	607b      	str	r3, [r7, #4]
     1b8:	68fb      	ldr	r3, [r7, #12]
     1ba:	1d1a      	adds	r2, r3, #4
     1bc:	60fa      	str	r2, [r7, #12]
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	603b      	str	r3, [r7, #0]
     1c2:	6878      	ldr	r0, [r7, #4]
     1c4:	6839      	ldr	r1, [r7, #0]
     1c6:	f7ff ffb7 	bl	138 <bss_init>
     1ca:	68fb      	ldr	r3, [r7, #12]
     1cc:	4a05      	ldr	r2, [pc, #20]	; (1e4 <ResetISR+0x74>)
     1ce:	4293      	cmp	r3, r2
     1d0:	d3ed      	bcc.n	1ae <ResetISR+0x3e>
     1d2:	f003 fb03 	bl	37dc <SystemInit>
     1d6:	f003 fb71 	bl	38bc <__main>
     1da:	e7fe      	b.n	1da <ResetISR+0x6a>
     1dc:	000000cc 	.word	0x000000cc
     1e0:	000000e4 	.word	0x000000e4
     1e4:	000000f4 	.word	0x000000f4

000001e8 <NMI_Handler>:
     1e8:	b480      	push	{r7}
     1ea:	af00      	add	r7, sp, #0
     1ec:	e7fe      	b.n	1ec <NMI_Handler+0x4>
     1ee:	bf00      	nop

000001f0 <HardFault_Handler>:
     1f0:	b480      	push	{r7}
     1f2:	af00      	add	r7, sp, #0
     1f4:	e7fe      	b.n	1f4 <HardFault_Handler+0x4>
     1f6:	bf00      	nop

000001f8 <MemManage_Handler>:
     1f8:	b480      	push	{r7}
     1fa:	af00      	add	r7, sp, #0
     1fc:	e7fe      	b.n	1fc <MemManage_Handler+0x4>
     1fe:	bf00      	nop

00000200 <BusFault_Handler>:
     200:	b480      	push	{r7}
     202:	af00      	add	r7, sp, #0
     204:	e7fe      	b.n	204 <BusFault_Handler+0x4>
     206:	bf00      	nop

00000208 <UsageFault_Handler>:
     208:	b480      	push	{r7}
     20a:	af00      	add	r7, sp, #0
     20c:	e7fe      	b.n	20c <UsageFault_Handler+0x4>
     20e:	bf00      	nop

00000210 <SVC_Handler>:
     210:	b480      	push	{r7}
     212:	af00      	add	r7, sp, #0
     214:	e7fe      	b.n	214 <SVC_Handler+0x4>
     216:	bf00      	nop

00000218 <DebugMon_Handler>:
     218:	b480      	push	{r7}
     21a:	af00      	add	r7, sp, #0
     21c:	e7fe      	b.n	21c <DebugMon_Handler+0x4>
     21e:	bf00      	nop

00000220 <PendSV_Handler>:
     220:	b480      	push	{r7}
     222:	af00      	add	r7, sp, #0
     224:	e7fe      	b.n	224 <PendSV_Handler+0x4>
     226:	bf00      	nop
     228:	b480      	push	{r7}
     22a:	af00      	add	r7, sp, #0
     22c:	e7fe      	b.n	22c <PendSV_Handler+0xc>
     22e:	bf00      	nop

00000230 <ADC_IRQHandler>:
     230:	b480      	push	{r7}
     232:	af00      	add	r7, sp, #0
     234:	e7fe      	b.n	234 <ADC_IRQHandler+0x4>
     236:	bf00      	nop
     238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     23c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     24c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     25c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     26c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     27c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	double c = 2 * atan2(sqrt(a), sqrt(1-a));
     280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     28c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     29c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	double d = R * c;
     2c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	if (d > 50000) {
     2dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
		TraceNL("GPS_CalculateDistance greater than 50000, returning 0.");
     2f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
		return 0;
     2f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000002fc <CRP_WORD>:
     2fc:	ffff ffff                                   ....

00000300 <LoadParams>:
     300:	b580      	push	{r7, lr}
     302:	b0b2      	sub	sp, #200	; 0xc8
     304:	af00      	add	r7, sp, #0
     306:	4b54      	ldr	r3, [pc, #336]	; (458 <LoadParams+0x158>)
     308:	681b      	ldr	r3, [r3, #0]
     30a:	2200      	movs	r2, #0
     30c:	461a      	mov	r2, r3
     30e:	4610      	mov	r0, r2
     310:	4952      	ldr	r1, [pc, #328]	; (45c <LoadParams+0x15c>)
     312:	f000 fb2b 	bl	96c <EEPROM_LoadString>
     316:	4b51      	ldr	r3, [pc, #324]	; (45c <LoadParams+0x15c>)
     318:	781b      	ldrb	r3, [r3, #0]
     31a:	3380      	adds	r3, #128	; 0x80
     31c:	4a50      	ldr	r2, [pc, #320]	; (460 <LoadParams+0x160>)
     31e:	5cd3      	ldrb	r3, [r2, r3]
     320:	f003 0338 	and.w	r3, r3, #56	; 0x38
     324:	2b00      	cmp	r3, #0
     326:	d00c      	beq.n	342 <LoadParams+0x42>
     328:	484c      	ldr	r0, [pc, #304]	; (45c <LoadParams+0x15c>)
     32a:	f005 f801 	bl	5330 <strlen>
     32e:	4603      	mov	r3, r0
     330:	2b04      	cmp	r3, #4
     332:	d906      	bls.n	342 <LoadParams+0x42>
     334:	4849      	ldr	r0, [pc, #292]	; (45c <LoadParams+0x15c>)
     336:	212e      	movs	r1, #46	; 0x2e
     338:	f004 ffcc 	bl	52d4 <strchr>
	}
	TraceNL("*****************");
     33c:	4603      	mov	r3, r0
     33e:	2b00      	cmp	r3, #0
     340:	d103      	bne.n	34a <LoadParams+0x4a>
	TraceNL("*******");
     342:	4846      	ldr	r0, [pc, #280]	; (45c <LoadParams+0x15c>)
     344:	4947      	ldr	r1, [pc, #284]	; (464 <LoadParams+0x164>)
     346:	f004 ffd2 	bl	52ee <strcpy>
	TraceNL("**");
     34a:	4b47      	ldr	r3, [pc, #284]	; (468 <LoadParams+0x168>)
     34c:	681b      	ldr	r3, [r3, #0]
	TraceNL("*");
     34e:	2200      	movs	r2, #0
     350:	461a      	mov	r2, r3
     352:	4610      	mov	r0, r2
	count = sprintf(buffer,"GPS Distance= %.10f\r", d);
     354:	f000 fa98 	bl	888 <EEPROM_LoadInt64>
     358:	4602      	mov	r2, r0
     35a:	460b      	mov	r3, r1
     35c:	4b43      	ldr	r3, [pc, #268]	; (46c <LoadParams+0x16c>)
     35e:	601a      	str	r2, [r3, #0]
     360:	4b42      	ldr	r3, [pc, #264]	; (46c <LoadParams+0x16c>)
     362:	681b      	ldr	r3, [r3, #0]
     364:	2b00      	cmp	r3, #0
	UARTSend(PORT_TRACE, buffer, count);
     366:	d005      	beq.n	374 <LoadParams+0x74>
     368:	4b40      	ldr	r3, [pc, #256]	; (46c <LoadParams+0x16c>)
     36a:	681b      	ldr	r3, [r3, #0]
     36c:	f64f 72ff 	movw	r2, #65535	; 0xffff
     370:	4293      	cmp	r3, r2
     372:	d103      	bne.n	37c <LoadParams+0x7c>
     374:	4b3d      	ldr	r3, [pc, #244]	; (46c <LoadParams+0x16c>)
	TraceNL("*****************");
     376:	f241 72c1 	movw	r2, #6081	; 0x17c1
     37a:	601a      	str	r2, [r3, #0]
	TraceNL("*******");
     37c:	4b3c      	ldr	r3, [pc, #240]	; (470 <LoadParams+0x170>)
     37e:	681b      	ldr	r3, [r3, #0]
     380:	2200      	movs	r2, #0
	TraceNL("**");
     382:	461a      	mov	r2, r3
     384:	4610      	mov	r0, r2
     386:	493b      	ldr	r1, [pc, #236]	; (474 <LoadParams+0x174>)
	TraceNL("*");
     388:	f000 faf0 	bl	96c <EEPROM_LoadString>
     38c:	4b39      	ldr	r3, [pc, #228]	; (474 <LoadParams+0x174>)
	/*if (d < 1)
		d=0;*///Active in production
	return d;
     38e:	781b      	ldrb	r3, [r3, #0]
     390:	3380      	adds	r3, #128	; 0x80
}
     392:	4a33      	ldr	r2, [pc, #204]	; (460 <LoadParams+0x160>)
     394:	5cd3      	ldrb	r3, [r2, r3]
     396:	f003 0338 	and.w	r3, r3, #56	; 0x38
     39a:	2b00      	cmp	r3, #0
     39c:	d005      	beq.n	3aa <LoadParams+0xaa>
     39e:	4835      	ldr	r0, [pc, #212]	; (474 <LoadParams+0x174>)
     3a0:	f004 ffc6 	bl	5330 <strlen>
     3a4:	4603      	mov	r3, r0
     3a6:	2b02      	cmp	r3, #2
     3a8:	d803      	bhi.n	3b2 <LoadParams+0xb2>
     3aa:	4832      	ldr	r0, [pc, #200]	; (474 <LoadParams+0x174>)
     3ac:	4932      	ldr	r1, [pc, #200]	; (478 <LoadParams+0x178>)
     3ae:	f004 ff9e 	bl	52ee <strcpy>
     3b2:	4b32      	ldr	r3, [pc, #200]	; (47c <LoadParams+0x17c>)
	//LOAD APN
	EEPROM_LoadString(cal_apn, per_apn_val);
	if (isalnum(per_apn_val[0]) == 0 || strlen(per_apn_val) < 3)
		strcpy(per_apn_val, "internet");//Default value
	//LOAD APN User
	EEPROM_LoadString(cal_apn_user, per_apnuser_val);
     3b4:	681b      	ldr	r3, [r3, #0]
     3b6:	2200      	movs	r2, #0
     3b8:	461a      	mov	r2, r3
     3ba:	4610      	mov	r0, r2
     3bc:	4930      	ldr	r1, [pc, #192]	; (480 <LoadParams+0x180>)
     3be:	f000 fad5 	bl	96c <EEPROM_LoadString>
	if (isalnum(per_apnuser_val[0]) == 0 || strlen(per_apnuser_val) < 3)
     3c2:	4b2f      	ldr	r3, [pc, #188]	; (480 <LoadParams+0x180>)
     3c4:	781b      	ldrb	r3, [r3, #0]
     3c6:	3380      	adds	r3, #128	; 0x80
     3c8:	4a25      	ldr	r2, [pc, #148]	; (460 <LoadParams+0x160>)
     3ca:	5cd3      	ldrb	r3, [r2, r3]
     3cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
     3d0:	2b00      	cmp	r3, #0
     3d2:	d005      	beq.n	3e0 <LoadParams+0xe0>
     3d4:	482a      	ldr	r0, [pc, #168]	; (480 <LoadParams+0x180>)
     3d6:	f004 ffab 	bl	5330 <strlen>
     3da:	4603      	mov	r3, r0
     3dc:	2b02      	cmp	r3, #2
     3de:	d803      	bhi.n	3e8 <LoadParams+0xe8>
		strcpy(per_apnuser_val, "vodafone");//Default value
     3e0:	4827      	ldr	r0, [pc, #156]	; (480 <LoadParams+0x180>)
     3e2:	4928      	ldr	r1, [pc, #160]	; (484 <LoadParams+0x184>)
     3e4:	f004 ff83 	bl	52ee <strcpy>
	//LOAD APN Pass
	EEPROM_LoadString(cal_apn_pass, per_apnpass_val);
     3e8:	4b27      	ldr	r3, [pc, #156]	; (488 <LoadParams+0x188>)
     3ea:	681b      	ldr	r3, [r3, #0]
     3ec:	2200      	movs	r2, #0
     3ee:	461a      	mov	r2, r3
     3f0:	4610      	mov	r0, r2
     3f2:	4926      	ldr	r1, [pc, #152]	; (48c <LoadParams+0x18c>)
     3f4:	f000 faba 	bl	96c <EEPROM_LoadString>
	if (isalnum(per_apnpass_val[0]) == 0 || strlen(per_apnpass_val) < 3)
     3f8:	4b24      	ldr	r3, [pc, #144]	; (48c <LoadParams+0x18c>)
     3fa:	781b      	ldrb	r3, [r3, #0]
     3fc:	3380      	adds	r3, #128	; 0x80
     3fe:	4a18      	ldr	r2, [pc, #96]	; (460 <LoadParams+0x160>)
     400:	5cd3      	ldrb	r3, [r2, r3]
     402:	f003 0338 	and.w	r3, r3, #56	; 0x38
     406:	2b00      	cmp	r3, #0
     408:	d005      	beq.n	416 <LoadParams+0x116>
     40a:	4820      	ldr	r0, [pc, #128]	; (48c <LoadParams+0x18c>)
     40c:	f004 ff90 	bl	5330 <strlen>
     410:	4603      	mov	r3, r0
     412:	2b02      	cmp	r3, #2
     414:	d803      	bhi.n	41e <LoadParams+0x11e>
		strcpy(per_apnpass_val, "vodafone");//Default value
     416:	481d      	ldr	r0, [pc, #116]	; (48c <LoadParams+0x18c>)
     418:	491a      	ldr	r1, [pc, #104]	; (484 <LoadParams+0x184>)
     41a:	f004 ff68 	bl	52ee <strcpy>

	//LOAD Mileage
	per_mileage_val = EEPROM_LoadInt64(cal_mileage);
     41e:	4b1c      	ldr	r3, [pc, #112]	; (490 <LoadParams+0x190>)
     420:	681b      	ldr	r3, [r3, #0]
     422:	2200      	movs	r2, #0
     424:	461a      	mov	r2, r3
     426:	4610      	mov	r0, r2
     428:	f000 fa2e 	bl	888 <EEPROM_LoadInt64>
     42c:	4602      	mov	r2, r0
     42e:	460b      	mov	r3, r1
     430:	4918      	ldr	r1, [pc, #96]	; (494 <LoadParams+0x194>)
     432:	e9c1 2300 	strd	r2, r3, [r1]
	sprintf(buffer, "Mileage: %d\n", (int)per_mileage_val);
     436:	4b17      	ldr	r3, [pc, #92]	; (494 <LoadParams+0x194>)
     438:	e9d3 2300 	ldrd	r2, r3, [r3]
     43c:	463b      	mov	r3, r7
     43e:	4618      	mov	r0, r3
     440:	4915      	ldr	r1, [pc, #84]	; (498 <LoadParams+0x198>)
     442:	f003 fb0d 	bl	3a60 <sprintf>
	TraceNL(buffer);
     446:	463b      	mov	r3, r7
     448:	4618      	mov	r0, r3
     44a:	f002 f871 	bl	2530 <TraceNL>
	LoadTimings();
     44e:	f000 f825 	bl	49c <LoadTimings>

	//MODE 0 = Deep Power Down
	//MODE 1 = Power Down
}
     452:	37c8      	adds	r7, #200	; 0xc8
     454:	46bd      	mov	sp, r7
     456:	bd80      	pop	{r7, pc}
     458:	10000bb8 	.word	0x10000bb8
     45c:	10000b38 	.word	0x10000b38
     460:	000071a0 	.word	0x000071a0
     464:	00006324 	.word	0x00006324
     468:	10000bb4 	.word	0x10000bb4
     46c:	10000ba8 	.word	0x10000ba8
     470:	10000bf0 	.word	0x10000bf0
     474:	10000bf4 	.word	0x10000bf4
     478:	00006334 	.word	0x00006334
     47c:	10000ba4 	.word	0x10000ba4
     480:	10000b88 	.word	0x10000b88
     484:	00006340 	.word	0x00006340
     488:	10000b2c 	.word	0x10000b2c
     48c:	10000bd8 	.word	0x10000bd8
     490:	10000b78 	.word	0x10000b78
     494:	10000bc8 	.word	0x10000bc8
     498:	0000634c 	.word	0x0000634c

0000049c <LoadTimings>:

void LoadTimings() {
     49c:	b580      	push	{r7, lr}
     49e:	b0b4      	sub	sp, #208	; 0xd0
     4a0:	af00      	add	r7, sp, #0
	char buffer[200];
	//LOAD Ignition On Period
	per_ignonperiod_val = EEPROM_LoadInt64(cal_ign_on_period);
     4a2:	4b98      	ldr	r3, [pc, #608]	; (704 <LoadTimings+0x268>)
     4a4:	681b      	ldr	r3, [r3, #0]
     4a6:	2200      	movs	r2, #0
     4a8:	461a      	mov	r2, r3
     4aa:	4610      	mov	r0, r2
     4ac:	f000 f9ec 	bl	888 <EEPROM_LoadInt64>
     4b0:	4602      	mov	r2, r0
     4b2:	460b      	mov	r3, r1
     4b4:	4b94      	ldr	r3, [pc, #592]	; (708 <LoadTimings+0x26c>)
     4b6:	601a      	str	r2, [r3, #0]
	if (per_ignonperiod_val == 0 || per_ignonperiod_val > 14400)
     4b8:	4b93      	ldr	r3, [pc, #588]	; (708 <LoadTimings+0x26c>)
     4ba:	681b      	ldr	r3, [r3, #0]
     4bc:	2b00      	cmp	r3, #0
     4be:	d004      	beq.n	4ca <LoadTimings+0x2e>
     4c0:	4b91      	ldr	r3, [pc, #580]	; (708 <LoadTimings+0x26c>)
     4c2:	681b      	ldr	r3, [r3, #0]
     4c4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     4c8:	dd02      	ble.n	4d0 <LoadTimings+0x34>
		per_ignonperiod_val = 60;
     4ca:	4b8f      	ldr	r3, [pc, #572]	; (708 <LoadTimings+0x26c>)
     4cc:	223c      	movs	r2, #60	; 0x3c
     4ce:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignonperiod_val: %d\n", (int)per_ignonperiod_val);
     4d0:	4b8d      	ldr	r3, [pc, #564]	; (708 <LoadTimings+0x26c>)
     4d2:	681b      	ldr	r3, [r3, #0]
     4d4:	1d3a      	adds	r2, r7, #4
     4d6:	4610      	mov	r0, r2
     4d8:	498c      	ldr	r1, [pc, #560]	; (70c <LoadTimings+0x270>)
     4da:	461a      	mov	r2, r3
     4dc:	f003 fac0 	bl	3a60 <sprintf>
	TraceNL(buffer);
     4e0:	1d3b      	adds	r3, r7, #4
     4e2:	4618      	mov	r0, r3
     4e4:	f002 f824 	bl	2530 <TraceNL>
	//LOAD Ignition Off Period
	per_ignoffperiod_val = (int)EEPROM_LoadInt64(cal_ign_off_period);
     4e8:	4b89      	ldr	r3, [pc, #548]	; (710 <LoadTimings+0x274>)
     4ea:	681b      	ldr	r3, [r3, #0]
     4ec:	2200      	movs	r2, #0
     4ee:	461a      	mov	r2, r3
     4f0:	4610      	mov	r0, r2
     4f2:	f000 f9c9 	bl	888 <EEPROM_LoadInt64>
     4f6:	4602      	mov	r2, r0
     4f8:	460b      	mov	r3, r1
     4fa:	4b86      	ldr	r3, [pc, #536]	; (714 <LoadTimings+0x278>)
     4fc:	601a      	str	r2, [r3, #0]
	int original_per_ignoffperiod_val = per_ignoffperiod_val;
     4fe:	4b85      	ldr	r3, [pc, #532]	; (714 <LoadTimings+0x278>)
     500:	681b      	ldr	r3, [r3, #0]
     502:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (per_ignoffperiod_val == 0 || per_ignoffperiod_val > 14400) //4 hours max.
     506:	4b83      	ldr	r3, [pc, #524]	; (714 <LoadTimings+0x278>)
     508:	681b      	ldr	r3, [r3, #0]
     50a:	2b00      	cmp	r3, #0
     50c:	d004      	beq.n	518 <LoadTimings+0x7c>
     50e:	4b81      	ldr	r3, [pc, #516]	; (714 <LoadTimings+0x278>)
     510:	681b      	ldr	r3, [r3, #0]
     512:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     516:	dd02      	ble.n	51e <LoadTimings+0x82>
		per_ignoffperiod_val = 120;
     518:	4b7e      	ldr	r3, [pc, #504]	; (714 <LoadTimings+0x278>)
     51a:	2278      	movs	r2, #120	; 0x78
     51c:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignoffperiod_val: %d, per_ignoffperiod_val(original): %d\n", (int)per_ignoffperiod_val,(int)original_per_ignoffperiod_val);
     51e:	4b7d      	ldr	r3, [pc, #500]	; (714 <LoadTimings+0x278>)
     520:	681b      	ldr	r3, [r3, #0]
     522:	1d3a      	adds	r2, r7, #4
     524:	4610      	mov	r0, r2
     526:	497c      	ldr	r1, [pc, #496]	; (718 <LoadTimings+0x27c>)
     528:	461a      	mov	r2, r3
     52a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
     52e:	f003 fa97 	bl	3a60 <sprintf>
	TraceNL(buffer);
     532:	1d3b      	adds	r3, r7, #4
     534:	4618      	mov	r0, r3
     536:	f001 fffb 	bl	2530 <TraceNL>
	//LOAD Ignition On Roaming Period
	per_ignonroamingperiod_val = (int)EEPROM_LoadInt64(cal_ign_on_roaming_period);
     53a:	4b78      	ldr	r3, [pc, #480]	; (71c <LoadTimings+0x280>)
     53c:	681b      	ldr	r3, [r3, #0]
     53e:	2200      	movs	r2, #0
     540:	461a      	mov	r2, r3
     542:	4610      	mov	r0, r2
     544:	f000 f9a0 	bl	888 <EEPROM_LoadInt64>
     548:	4602      	mov	r2, r0
     54a:	460b      	mov	r3, r1
     54c:	4b74      	ldr	r3, [pc, #464]	; (720 <LoadTimings+0x284>)
     54e:	601a      	str	r2, [r3, #0]
	if (per_ignonroamingperiod_val == 0 || per_ignonroamingperiod_val > 14400)
     550:	4b73      	ldr	r3, [pc, #460]	; (720 <LoadTimings+0x284>)
     552:	681b      	ldr	r3, [r3, #0]
     554:	2b00      	cmp	r3, #0
     556:	d004      	beq.n	562 <LoadTimings+0xc6>
     558:	4b71      	ldr	r3, [pc, #452]	; (720 <LoadTimings+0x284>)
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     560:	dd03      	ble.n	56a <LoadTimings+0xce>
		per_ignonroamingperiod_val = 1800;
     562:	4b6f      	ldr	r3, [pc, #444]	; (720 <LoadTimings+0x284>)
     564:	f44f 62e1 	mov.w	r2, #1800	; 0x708
     568:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignonroamingperiod_val: %d\n", (int)per_ignonroamingperiod_val);
     56a:	4b6d      	ldr	r3, [pc, #436]	; (720 <LoadTimings+0x284>)
     56c:	681b      	ldr	r3, [r3, #0]
     56e:	1d3a      	adds	r2, r7, #4
     570:	4610      	mov	r0, r2
     572:	496c      	ldr	r1, [pc, #432]	; (724 <LoadTimings+0x288>)
     574:	461a      	mov	r2, r3
     576:	f003 fa73 	bl	3a60 <sprintf>
	TraceNL(buffer);
     57a:	1d3b      	adds	r3, r7, #4
     57c:	4618      	mov	r0, r3
     57e:	f001 ffd7 	bl	2530 <TraceNL>
	//LOAD Ignition Off Roaming Period
	per_ignoffroamingperiod_val = (int)EEPROM_LoadInt64(cal_ign_off_roaming_period);
     582:	4b69      	ldr	r3, [pc, #420]	; (728 <LoadTimings+0x28c>)
     584:	681b      	ldr	r3, [r3, #0]
     586:	2200      	movs	r2, #0
     588:	461a      	mov	r2, r3
     58a:	4610      	mov	r0, r2
     58c:	f000 f97c 	bl	888 <EEPROM_LoadInt64>
     590:	4602      	mov	r2, r0
     592:	460b      	mov	r3, r1
     594:	4b65      	ldr	r3, [pc, #404]	; (72c <LoadTimings+0x290>)
     596:	601a      	str	r2, [r3, #0]
	if (per_ignoffroamingperiod_val == 0 || per_ignoffroamingperiod_val > 14400)
     598:	4b64      	ldr	r3, [pc, #400]	; (72c <LoadTimings+0x290>)
     59a:	681b      	ldr	r3, [r3, #0]
     59c:	2b00      	cmp	r3, #0
     59e:	d004      	beq.n	5aa <LoadTimings+0x10e>
     5a0:	4b62      	ldr	r3, [pc, #392]	; (72c <LoadTimings+0x290>)
     5a2:	681b      	ldr	r3, [r3, #0]
     5a4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     5a8:	dd03      	ble.n	5b2 <LoadTimings+0x116>
		per_ignoffroamingperiod_val = 7200;
     5aa:	4b60      	ldr	r3, [pc, #384]	; (72c <LoadTimings+0x290>)
     5ac:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
     5b0:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignoffroamingperiod_val: %d\n", (int)per_ignoffroamingperiod_val);
     5b2:	4b5e      	ldr	r3, [pc, #376]	; (72c <LoadTimings+0x290>)
     5b4:	681b      	ldr	r3, [r3, #0]
     5b6:	1d3a      	adds	r2, r7, #4
     5b8:	4610      	mov	r0, r2
     5ba:	495d      	ldr	r1, [pc, #372]	; (730 <LoadTimings+0x294>)
     5bc:	461a      	mov	r2, r3
     5be:	f003 fa4f 	bl	3a60 <sprintf>
	TraceNL(buffer);
     5c2:	1d3b      	adds	r3, r7, #4
     5c4:	4618      	mov	r0, r3
     5c6:	f001 ffb3 	bl	2530 <TraceNL>
	per_lowpow_just_wake = (int)EEPROM_LoadInt64(cal_lowpow_just_wake);
     5ca:	4b5a      	ldr	r3, [pc, #360]	; (734 <LoadTimings+0x298>)
     5cc:	681b      	ldr	r3, [r3, #0]
     5ce:	2200      	movs	r2, #0
     5d0:	461a      	mov	r2, r3
     5d2:	4610      	mov	r0, r2
     5d4:	f000 f958 	bl	888 <EEPROM_LoadInt64>
     5d8:	4602      	mov	r2, r0
     5da:	460b      	mov	r3, r1
     5dc:	4b56      	ldr	r3, [pc, #344]	; (738 <LoadTimings+0x29c>)
     5de:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_just_wake: %d\n", (int)per_lowpow_just_wake);
     5e0:	4b55      	ldr	r3, [pc, #340]	; (738 <LoadTimings+0x29c>)
     5e2:	681b      	ldr	r3, [r3, #0]
     5e4:	1d3a      	adds	r2, r7, #4
     5e6:	4610      	mov	r0, r2
     5e8:	4954      	ldr	r1, [pc, #336]	; (73c <LoadTimings+0x2a0>)
     5ea:	461a      	mov	r2, r3
     5ec:	f003 fa38 	bl	3a60 <sprintf>
	TraceNL(buffer);
     5f0:	1d3b      	adds	r3, r7, #4
     5f2:	4618      	mov	r0, r3
     5f4:	f001 ff9c 	bl	2530 <TraceNL>
	per_lowpow_cancel = (int)EEPROM_LoadInt64(cal_lowpow_cancel);
     5f8:	4b51      	ldr	r3, [pc, #324]	; (740 <LoadTimings+0x2a4>)
     5fa:	681b      	ldr	r3, [r3, #0]
     5fc:	2200      	movs	r2, #0
     5fe:	461a      	mov	r2, r3
     600:	4610      	mov	r0, r2
     602:	f000 f941 	bl	888 <EEPROM_LoadInt64>
     606:	4602      	mov	r2, r0
     608:	460b      	mov	r3, r1
     60a:	4b4e      	ldr	r3, [pc, #312]	; (744 <LoadTimings+0x2a8>)
     60c:	601a      	str	r2, [r3, #0]
	if (per_lowpow_cancel > 2)
     60e:	4b4d      	ldr	r3, [pc, #308]	; (744 <LoadTimings+0x2a8>)
     610:	681b      	ldr	r3, [r3, #0]
     612:	2b02      	cmp	r3, #2
     614:	dd02      	ble.n	61c <LoadTimings+0x180>
		per_lowpow_cancel = 0;
     616:	4b4b      	ldr	r3, [pc, #300]	; (744 <LoadTimings+0x2a8>)
     618:	2200      	movs	r2, #0
     61a:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_cancel: %d\n", (int)per_lowpow_cancel);
     61c:	4b49      	ldr	r3, [pc, #292]	; (744 <LoadTimings+0x2a8>)
     61e:	681b      	ldr	r3, [r3, #0]
     620:	1d3a      	adds	r2, r7, #4
     622:	4610      	mov	r0, r2
     624:	4948      	ldr	r1, [pc, #288]	; (748 <LoadTimings+0x2ac>)
     626:	461a      	mov	r2, r3
     628:	f003 fa1a 	bl	3a60 <sprintf>
	TraceNL(buffer);
     62c:	1d3b      	adds	r3, r7, #4
     62e:	4618      	mov	r0, r3
     630:	f001 ff7e 	bl	2530 <TraceNL>
	//LOAD Low Power Wake Up Period
	per_lowpow_period = (int)EEPROM_LoadInt64(cal_lowpow_period);
     634:	4b45      	ldr	r3, [pc, #276]	; (74c <LoadTimings+0x2b0>)
     636:	681b      	ldr	r3, [r3, #0]
     638:	2200      	movs	r2, #0
     63a:	461a      	mov	r2, r3
     63c:	4610      	mov	r0, r2
     63e:	f000 f923 	bl	888 <EEPROM_LoadInt64>
     642:	4602      	mov	r2, r0
     644:	460b      	mov	r3, r1
     646:	4b42      	ldr	r3, [pc, #264]	; (750 <LoadTimings+0x2b4>)
     648:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_period(original): %d\n", (int)per_lowpow_period);
     64a:	4b41      	ldr	r3, [pc, #260]	; (750 <LoadTimings+0x2b4>)
     64c:	681b      	ldr	r3, [r3, #0]
     64e:	1d3a      	adds	r2, r7, #4
     650:	4610      	mov	r0, r2
     652:	4940      	ldr	r1, [pc, #256]	; (754 <LoadTimings+0x2b8>)
     654:	461a      	mov	r2, r3
     656:	f003 fa03 	bl	3a60 <sprintf>
	TraceNL(buffer);
     65a:	1d3b      	adds	r3, r7, #4
     65c:	4618      	mov	r0, r3
     65e:	f001 ff67 	bl	2530 <TraceNL>
	if (per_lowpow_period < 1 || per_lowpow_period > 2880){ //No period more than 2 days.
     662:	4b3b      	ldr	r3, [pc, #236]	; (750 <LoadTimings+0x2b4>)
     664:	681b      	ldr	r3, [r3, #0]
     666:	2b00      	cmp	r3, #0
     668:	dd04      	ble.n	674 <LoadTimings+0x1d8>
     66a:	4b39      	ldr	r3, [pc, #228]	; (750 <LoadTimings+0x2b4>)
     66c:	681b      	ldr	r3, [r3, #0]
     66e:	f5b3 6f34 	cmp.w	r3, #2880	; 0xb40
     672:	dd02      	ble.n	67a <LoadTimings+0x1de>
		per_lowpow_period = 59;
     674:	4b36      	ldr	r3, [pc, #216]	; (750 <LoadTimings+0x2b4>)
     676:	223b      	movs	r2, #59	; 0x3b
     678:	601a      	str	r2, [r3, #0]
		#endif
		#ifdef CABINET_DEMO
			per_lowpow_period = 15; //59;//1Hour
		#endif
	}
	sprintf(buffer, "per_lowpow_period: %d\n", (int)per_lowpow_period);
     67a:	4b35      	ldr	r3, [pc, #212]	; (750 <LoadTimings+0x2b4>)
     67c:	681b      	ldr	r3, [r3, #0]
     67e:	1d3a      	adds	r2, r7, #4
     680:	4610      	mov	r0, r2
     682:	4935      	ldr	r1, [pc, #212]	; (758 <LoadTimings+0x2bc>)
     684:	461a      	mov	r2, r3
     686:	f003 f9eb 	bl	3a60 <sprintf>
	TraceNL(buffer);
     68a:	1d3b      	adds	r3, r7, #4
     68c:	4618      	mov	r0, r3
     68e:	f001 ff4f 	bl	2530 <TraceNL>
	per_lowpow_mode = (int)EEPROM_LoadInt64(cal_lowpow_mode);
     692:	4b32      	ldr	r3, [pc, #200]	; (75c <LoadTimings+0x2c0>)
     694:	681b      	ldr	r3, [r3, #0]
     696:	2200      	movs	r2, #0
     698:	461a      	mov	r2, r3
     69a:	4610      	mov	r0, r2
     69c:	f000 f8f4 	bl	888 <EEPROM_LoadInt64>
     6a0:	4602      	mov	r2, r0
     6a2:	460b      	mov	r3, r1
     6a4:	4b2e      	ldr	r3, [pc, #184]	; (760 <LoadTimings+0x2c4>)
     6a6:	601a      	str	r2, [r3, #0]
	if (per_lowpow_mode > 2){
     6a8:	4b2d      	ldr	r3, [pc, #180]	; (760 <LoadTimings+0x2c4>)
     6aa:	681b      	ldr	r3, [r3, #0]
     6ac:	2b02      	cmp	r3, #2
     6ae:	dd02      	ble.n	6b6 <LoadTimings+0x21a>
		per_lowpow_mode = 0;
     6b0:	4b2b      	ldr	r3, [pc, #172]	; (760 <LoadTimings+0x2c4>)
     6b2:	2200      	movs	r2, #0
     6b4:	601a      	str	r2, [r3, #0]
		#ifdef CABINET_DEMO
			per_lowpow_mode = 1; //Light sleep
		#endif
	}
	sprintf(buffer, "per_lowpow_mode: %d\n", (int)per_lowpow_mode);
     6b6:	4b2a      	ldr	r3, [pc, #168]	; (760 <LoadTimings+0x2c4>)
     6b8:	681b      	ldr	r3, [r3, #0]
     6ba:	1d3a      	adds	r2, r7, #4
     6bc:	4610      	mov	r0, r2
     6be:	4929      	ldr	r1, [pc, #164]	; (764 <LoadTimings+0x2c8>)
     6c0:	461a      	mov	r2, r3
     6c2:	f003 f9cd 	bl	3a60 <sprintf>
	TraceNL(buffer);
     6c6:	1d3b      	adds	r3, r7, #4
     6c8:	4618      	mov	r0, r3
     6ca:	f001 ff31 	bl	2530 <TraceNL>
	per_coffe_counter = (int)EEPROM_LoadInt64(cal_coffee_counter);
     6ce:	4b26      	ldr	r3, [pc, #152]	; (768 <LoadTimings+0x2cc>)
     6d0:	681b      	ldr	r3, [r3, #0]
     6d2:	2200      	movs	r2, #0
     6d4:	461a      	mov	r2, r3
     6d6:	4610      	mov	r0, r2
     6d8:	f000 f8d6 	bl	888 <EEPROM_LoadInt64>
     6dc:	4602      	mov	r2, r0
     6de:	460b      	mov	r3, r1
     6e0:	4b22      	ldr	r3, [pc, #136]	; (76c <LoadTimings+0x2d0>)
     6e2:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_coffee_counter: %d\n", (int)per_coffe_counter);
     6e4:	4b21      	ldr	r3, [pc, #132]	; (76c <LoadTimings+0x2d0>)
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	1d3a      	adds	r2, r7, #4
     6ea:	4610      	mov	r0, r2
     6ec:	4920      	ldr	r1, [pc, #128]	; (770 <LoadTimings+0x2d4>)
     6ee:	461a      	mov	r2, r3
     6f0:	f003 f9b6 	bl	3a60 <sprintf>
	TraceNL(buffer);
     6f4:	1d3b      	adds	r3, r7, #4
     6f6:	4618      	mov	r0, r3
     6f8:	f001 ff1a 	bl	2530 <TraceNL>
}
     6fc:	37d0      	adds	r7, #208	; 0xd0
     6fe:	46bd      	mov	sp, r7
     700:	bd80      	pop	{r7, pc}
     702:	bf00      	nop
     704:	10000b60 	.word	0x10000b60
     708:	10000b68 	.word	0x10000b68
     70c:	0000635c 	.word	0x0000635c
     710:	10000bd0 	.word	0x10000bd0
     714:	10000b30 	.word	0x10000b30
     718:	00006378 	.word	0x00006378
     71c:	10000b80 	.word	0x10000b80
     720:	10000b64 	.word	0x10000b64
     724:	000063b8 	.word	0x000063b8
     728:	10000bb0 	.word	0x10000bb0
     72c:	10000bd4 	.word	0x10000bd4
     730:	000063d8 	.word	0x000063d8
     734:	10000bbc 	.word	0x10000bbc
     738:	10000b7c 	.word	0x10000b7c
     73c:	000063fc 	.word	0x000063fc
     740:	10000b84 	.word	0x10000b84
     744:	10000bc0 	.word	0x10000bc0
     748:	00006418 	.word	0x00006418
     74c:	10000bec 	.word	0x10000bec
     750:	10000b28 	.word	0x10000b28
     754:	00006430 	.word	0x00006430
     758:	00006454 	.word	0x00006454
     75c:	10000b6c 	.word	0x10000b6c
     760:	10000b70 	.word	0x10000b70
     764:	0000646c 	.word	0x0000646c
     768:	10000b74 	.word	0x10000b74
     76c:	10000bc4 	.word	0x10000bc4
     770:	00006484 	.word	0x00006484

00000774 <EEPROM_Init>:

void PersistParams() {
	EEPROM_SaveInt64(cal_mileage,per_mileage_val);
}

uint8_t EEPROM_Init() {
     774:	b580      	push	{r7, lr}
     776:	af00      	add	r7, sp, #0
	//Initialize EEPROM Memory Map -- 256x8
	test.StartPos = 0;
     778:	4b33      	ldr	r3, [pc, #204]	; (848 <EEPROM_Init+0xd4>)
     77a:	2200      	movs	r2, #0
     77c:	805a      	strh	r2, [r3, #2]
	test.Length = 2;
     77e:	4b32      	ldr	r3, [pc, #200]	; (848 <EEPROM_Init+0xd4>)
     780:	2202      	movs	r2, #2
     782:	801a      	strh	r2, [r3, #0]
	//Calibration test, ip, port, apn, apn_user, apn_pass, ign_on_period, ign_off_period, ign_on_roaming_period, ign_off_roaming_period, mileage;
	cal_port.StartPos = 6;
     784:	4b31      	ldr	r3, [pc, #196]	; (84c <EEPROM_Init+0xd8>)
     786:	2206      	movs	r2, #6
     788:	805a      	strh	r2, [r3, #2]
	cal_port.Length = 2;
     78a:	4b30      	ldr	r3, [pc, #192]	; (84c <EEPROM_Init+0xd8>)
     78c:	2202      	movs	r2, #2
     78e:	801a      	strh	r2, [r3, #0]
	cal_apn.StartPos = 8;
     790:	4b2f      	ldr	r3, [pc, #188]	; (850 <EEPROM_Init+0xdc>)
     792:	2208      	movs	r2, #8
     794:	805a      	strh	r2, [r3, #2]
	cal_apn.Length = 25;
     796:	4b2e      	ldr	r3, [pc, #184]	; (850 <EEPROM_Init+0xdc>)
     798:	2219      	movs	r2, #25
     79a:	801a      	strh	r2, [r3, #0]
	cal_apn_user.StartPos = 33;
     79c:	4b2d      	ldr	r3, [pc, #180]	; (854 <EEPROM_Init+0xe0>)
     79e:	2221      	movs	r2, #33	; 0x21
     7a0:	805a      	strh	r2, [r3, #2]
	cal_apn_user.Length = 12;
     7a2:	4b2c      	ldr	r3, [pc, #176]	; (854 <EEPROM_Init+0xe0>)
     7a4:	220c      	movs	r2, #12
     7a6:	801a      	strh	r2, [r3, #0]
	cal_apn_pass.StartPos = 45;
     7a8:	4b2b      	ldr	r3, [pc, #172]	; (858 <EEPROM_Init+0xe4>)
     7aa:	222d      	movs	r2, #45	; 0x2d
     7ac:	805a      	strh	r2, [r3, #2]
	cal_apn_pass.Length = 12;
     7ae:	4b2a      	ldr	r3, [pc, #168]	; (858 <EEPROM_Init+0xe4>)
     7b0:	220c      	movs	r2, #12
     7b2:	801a      	strh	r2, [r3, #0]
	cal_ign_on_period.StartPos = 57;
     7b4:	4b29      	ldr	r3, [pc, #164]	; (85c <EEPROM_Init+0xe8>)
     7b6:	2239      	movs	r2, #57	; 0x39
     7b8:	805a      	strh	r2, [r3, #2]
	cal_ign_on_period.Length = 2;
     7ba:	4b28      	ldr	r3, [pc, #160]	; (85c <EEPROM_Init+0xe8>)
     7bc:	2202      	movs	r2, #2
     7be:	801a      	strh	r2, [r3, #0]
	cal_lowpow_period.StartPos = 59;
     7c0:	4b27      	ldr	r3, [pc, #156]	; (860 <EEPROM_Init+0xec>)
     7c2:	223b      	movs	r2, #59	; 0x3b
     7c4:	805a      	strh	r2, [r3, #2]
	cal_lowpow_period.Length = 2;
     7c6:	4b26      	ldr	r3, [pc, #152]	; (860 <EEPROM_Init+0xec>)
     7c8:	2202      	movs	r2, #2
     7ca:	801a      	strh	r2, [r3, #0]
	cal_ign_on_roaming_period.StartPos = 61;
     7cc:	4b25      	ldr	r3, [pc, #148]	; (864 <EEPROM_Init+0xf0>)
     7ce:	223d      	movs	r2, #61	; 0x3d
     7d0:	805a      	strh	r2, [r3, #2]
	cal_ign_on_roaming_period.Length = 2;
     7d2:	4b24      	ldr	r3, [pc, #144]	; (864 <EEPROM_Init+0xf0>)
     7d4:	2202      	movs	r2, #2
     7d6:	801a      	strh	r2, [r3, #0]
	cal_ign_off_roaming_period.StartPos = 63;
     7d8:	4b23      	ldr	r3, [pc, #140]	; (868 <EEPROM_Init+0xf4>)
     7da:	223f      	movs	r2, #63	; 0x3f
     7dc:	805a      	strh	r2, [r3, #2]
	cal_ign_off_roaming_period.Length = 2;
     7de:	4b22      	ldr	r3, [pc, #136]	; (868 <EEPROM_Init+0xf4>)
     7e0:	2202      	movs	r2, #2
     7e2:	801a      	strh	r2, [r3, #0]
	cal_mileage.StartPos = 65;
     7e4:	4b21      	ldr	r3, [pc, #132]	; (86c <EEPROM_Init+0xf8>)
     7e6:	2241      	movs	r2, #65	; 0x41
     7e8:	805a      	strh	r2, [r3, #2]
	cal_mileage.Length = 8;
     7ea:	4b20      	ldr	r3, [pc, #128]	; (86c <EEPROM_Init+0xf8>)
     7ec:	2208      	movs	r2, #8
     7ee:	801a      	strh	r2, [r3, #0]
	cal_ip.StartPos = 73;
     7f0:	4b1f      	ldr	r3, [pc, #124]	; (870 <EEPROM_Init+0xfc>)
     7f2:	2249      	movs	r2, #73	; 0x49
     7f4:	805a      	strh	r2, [r3, #2]
	cal_ip.Length = 25;
     7f6:	4b1e      	ldr	r3, [pc, #120]	; (870 <EEPROM_Init+0xfc>)
     7f8:	2219      	movs	r2, #25
     7fa:	801a      	strh	r2, [r3, #0]
	cal_ign_off_period.StartPos = 98;
     7fc:	4b1d      	ldr	r3, [pc, #116]	; (874 <EEPROM_Init+0x100>)
     7fe:	2262      	movs	r2, #98	; 0x62
     800:	805a      	strh	r2, [r3, #2]
	cal_ign_off_period.Length = 2;
     802:	4b1c      	ldr	r3, [pc, #112]	; (874 <EEPROM_Init+0x100>)
     804:	2202      	movs	r2, #2
     806:	801a      	strh	r2, [r3, #0]
	cal_lowpow_just_wake.StartPos = 100;
     808:	4b1b      	ldr	r3, [pc, #108]	; (878 <EEPROM_Init+0x104>)
     80a:	2264      	movs	r2, #100	; 0x64
     80c:	805a      	strh	r2, [r3, #2]
	cal_lowpow_just_wake.Length = 2;
     80e:	4b1a      	ldr	r3, [pc, #104]	; (878 <EEPROM_Init+0x104>)
     810:	2202      	movs	r2, #2
     812:	801a      	strh	r2, [r3, #0]
	cal_lowpow_cancel.StartPos = 102;
     814:	4b19      	ldr	r3, [pc, #100]	; (87c <EEPROM_Init+0x108>)
     816:	2266      	movs	r2, #102	; 0x66
     818:	805a      	strh	r2, [r3, #2]
	cal_lowpow_cancel.Length = 2;
     81a:	4b18      	ldr	r3, [pc, #96]	; (87c <EEPROM_Init+0x108>)
     81c:	2202      	movs	r2, #2
     81e:	801a      	strh	r2, [r3, #0]
	cal_lowpow_mode.StartPos = 104;
     820:	4b17      	ldr	r3, [pc, #92]	; (880 <EEPROM_Init+0x10c>)
     822:	2268      	movs	r2, #104	; 0x68
     824:	805a      	strh	r2, [r3, #2]
	cal_lowpow_mode.Length = 2;
     826:	4b16      	ldr	r3, [pc, #88]	; (880 <EEPROM_Init+0x10c>)
     828:	2202      	movs	r2, #2
     82a:	801a      	strh	r2, [r3, #0]
	cal_coffee_counter.StartPos = 106;
     82c:	4b15      	ldr	r3, [pc, #84]	; (884 <EEPROM_Init+0x110>)
     82e:	226a      	movs	r2, #106	; 0x6a
     830:	805a      	strh	r2, [r3, #2]
	cal_coffee_counter.Length = 2;
     832:	4b14      	ldr	r3, [pc, #80]	; (884 <EEPROM_Init+0x110>)
     834:	2202      	movs	r2, #2
     836:	801a      	strh	r2, [r3, #0]
 	return I2CInit(1,((uint32_t)I2CMASTER) == 0);
     838:	2001      	movs	r0, #1
     83a:	2100      	movs	r1, #0
     83c:	f001 f8d4 	bl	19e8 <I2CInit>
     840:	4603      	mov	r3, r0
     842:	b2db      	uxtb	r3, r3
}
     844:	4618      	mov	r0, r3
     846:	bd80      	pop	{r7, pc}
     848:	10000ba0 	.word	0x10000ba0
     84c:	10000bb4 	.word	0x10000bb4
     850:	10000bf0 	.word	0x10000bf0
     854:	10000ba4 	.word	0x10000ba4
     858:	10000b2c 	.word	0x10000b2c
     85c:	10000b60 	.word	0x10000b60
     860:	10000bec 	.word	0x10000bec
     864:	10000b80 	.word	0x10000b80
     868:	10000bb0 	.word	0x10000bb0
     86c:	10000b78 	.word	0x10000b78
     870:	10000bb8 	.word	0x10000bb8
     874:	10000bd0 	.word	0x10000bd0
     878:	10000bbc 	.word	0x10000bbc
     87c:	10000b84 	.word	0x10000b84
     880:	10000b6c 	.word	0x10000b6c
     884:	10000b74 	.word	0x10000b74

00000888 <EEPROM_LoadInt64>:

uint64_t EEPROM_LoadInt64(Calibration cal) {
     888:	b580      	push	{r7, lr}
     88a:	b086      	sub	sp, #24
     88c:	af00      	add	r7, sp, #0
     88e:	6078      	str	r0, [r7, #4]
	int index = 0;
     890:	2300      	movs	r3, #0
     892:	617b      	str	r3, [r7, #20]
	uint64_t result = 0;
     894:	f04f 0200 	mov.w	r2, #0
     898:	f04f 0300 	mov.w	r3, #0
     89c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for (index=0; index < cal.Length; index++) {
     8a0:	2300      	movs	r3, #0
     8a2:	617b      	str	r3, [r7, #20]
     8a4:	e055      	b.n	952 <EEPROM_LoadInt64+0xca>
		if (cal.Length > 2)
     8a6:	88bb      	ldrh	r3, [r7, #4]
     8a8:	2b02      	cmp	r3, #2
     8aa:	d926      	bls.n	8fa <EEPROM_LoadInt64+0x72>
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFFFFFF);
     8ac:	88fb      	ldrh	r3, [r7, #6]
     8ae:	b2da      	uxtb	r2, r3
     8b0:	697b      	ldr	r3, [r7, #20]
     8b2:	b2db      	uxtb	r3, r3
     8b4:	4413      	add	r3, r2
     8b6:	b2db      	uxtb	r3, r3
     8b8:	2001      	movs	r0, #1
     8ba:	4619      	mov	r1, r3
     8bc:	f001 f97a 	bl	1bb4 <i2c_read>
     8c0:	4603      	mov	r3, r0
     8c2:	461a      	mov	r2, r3
     8c4:	88bb      	ldrh	r3, [r7, #4]
     8c6:	4619      	mov	r1, r3
     8c8:	697b      	ldr	r3, [r7, #20]
     8ca:	1acb      	subs	r3, r1, r3
     8cc:	3b01      	subs	r3, #1
     8ce:	00db      	lsls	r3, r3, #3
     8d0:	fa02 f303 	lsl.w	r3, r2, r3
     8d4:	461a      	mov	r2, r3
     8d6:	f04f 0300 	mov.w	r3, #0
     8da:	f04f 30ff 	mov.w	r0, #4294967295
     8de:	f04f 0100 	mov.w	r1, #0
     8e2:	ea02 0200 	and.w	r2, r2, r0
     8e6:	ea03 0301 	and.w	r3, r3, r1
     8ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     8ee:	1812      	adds	r2, r2, r0
     8f0:	eb43 0301 	adc.w	r3, r3, r1
     8f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
     8f8:	e025      	b.n	946 <EEPROM_LoadInt64+0xbe>
		else
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFF);
     8fa:	88fb      	ldrh	r3, [r7, #6]
     8fc:	b2da      	uxtb	r2, r3
     8fe:	697b      	ldr	r3, [r7, #20]
     900:	b2db      	uxtb	r3, r3
     902:	4413      	add	r3, r2
     904:	b2db      	uxtb	r3, r3
     906:	2001      	movs	r0, #1
     908:	4619      	mov	r1, r3
     90a:	f001 f953 	bl	1bb4 <i2c_read>
     90e:	4603      	mov	r3, r0
     910:	461a      	mov	r2, r3
     912:	88bb      	ldrh	r3, [r7, #4]
     914:	4619      	mov	r1, r3
     916:	697b      	ldr	r3, [r7, #20]
     918:	1acb      	subs	r3, r1, r3
     91a:	3b01      	subs	r3, #1
     91c:	00db      	lsls	r3, r3, #3
     91e:	fa02 f303 	lsl.w	r3, r2, r3
     922:	461a      	mov	r2, r3
     924:	f04f 0300 	mov.w	r3, #0
     928:	f64f 70ff 	movw	r0, #65535	; 0xffff
     92c:	f04f 0100 	mov.w	r1, #0
     930:	ea02 0200 	and.w	r2, r2, r0
     934:	ea03 0301 	and.w	r3, r3, r1
     938:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     93c:	1812      	adds	r2, r2, r0
     93e:	eb43 0301 	adc.w	r3, r3, r1
     942:	e9c7 2302 	strd	r2, r3, [r7, #8]
		DelayMs(10);
     946:	200a      	movs	r0, #10
     948:	f001 fdcc 	bl	24e4 <DelayMs>
}

uint64_t EEPROM_LoadInt64(Calibration cal) {
	int index = 0;
	uint64_t result = 0;
	for (index=0; index < cal.Length; index++) {
     94c:	697b      	ldr	r3, [r7, #20]
     94e:	3301      	adds	r3, #1
     950:	617b      	str	r3, [r7, #20]
     952:	88bb      	ldrh	r3, [r7, #4]
     954:	461a      	mov	r2, r3
     956:	697b      	ldr	r3, [r7, #20]
     958:	429a      	cmp	r2, r3
     95a:	dca4      	bgt.n	8a6 <EEPROM_LoadInt64+0x1e>
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFFFFFF);
		else
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFF);
		DelayMs(10);
	}
	return result;
     95c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
     960:	4610      	mov	r0, r2
     962:	4619      	mov	r1, r3
     964:	3718      	adds	r7, #24
     966:	46bd      	mov	sp, r7
     968:	bd80      	pop	{r7, pc}
     96a:	bf00      	nop

0000096c <EEPROM_LoadString>:
	i2c_write(1,cal.StartPos + index, '\0');
	DelayMs(10);
	return 1;
}

void EEPROM_LoadString(Calibration cal,  char* str){
     96c:	b590      	push	{r4, r7, lr}
     96e:	b085      	sub	sp, #20
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
     974:	6039      	str	r1, [r7, #0]
	int index = 0;
     976:	2300      	movs	r3, #0
     978:	60fb      	str	r3, [r7, #12]
	for (index=0; index < cal.Length; index++) {
     97a:	2300      	movs	r3, #0
     97c:	60fb      	str	r3, [r7, #12]
     97e:	e01b      	b.n	9b8 <EEPROM_LoadString+0x4c>
		str[index] = i2c_read(1,cal.StartPos + index);
     980:	68fb      	ldr	r3, [r7, #12]
     982:	683a      	ldr	r2, [r7, #0]
     984:	18d4      	adds	r4, r2, r3
     986:	88fb      	ldrh	r3, [r7, #6]
     988:	b2da      	uxtb	r2, r3
     98a:	68fb      	ldr	r3, [r7, #12]
     98c:	b2db      	uxtb	r3, r3
     98e:	4413      	add	r3, r2
     990:	b2db      	uxtb	r3, r3
     992:	2001      	movs	r0, #1
     994:	4619      	mov	r1, r3
     996:	f001 f90d 	bl	1bb4 <i2c_read>
     99a:	4603      	mov	r3, r0
     99c:	7023      	strb	r3, [r4, #0]
		DelayMs(10);
     99e:	200a      	movs	r0, #10
     9a0:	f001 fda0 	bl	24e4 <DelayMs>
		if (str[index] == '\0')
     9a4:	68fb      	ldr	r3, [r7, #12]
     9a6:	683a      	ldr	r2, [r7, #0]
     9a8:	4413      	add	r3, r2
     9aa:	781b      	ldrb	r3, [r3, #0]
     9ac:	2b00      	cmp	r3, #0
     9ae:	d100      	bne.n	9b2 <EEPROM_LoadString+0x46>
			break;
     9b0:	e007      	b.n	9c2 <EEPROM_LoadString+0x56>
	return 1;
}

void EEPROM_LoadString(Calibration cal,  char* str){
	int index = 0;
	for (index=0; index < cal.Length; index++) {
     9b2:	68fb      	ldr	r3, [r7, #12]
     9b4:	3301      	adds	r3, #1
     9b6:	60fb      	str	r3, [r7, #12]
     9b8:	88bb      	ldrh	r3, [r7, #4]
     9ba:	461a      	mov	r2, r3
     9bc:	68fb      	ldr	r3, [r7, #12]
     9be:	429a      	cmp	r2, r3
     9c0:	dcde      	bgt.n	980 <EEPROM_LoadString+0x14>
		str[index] = i2c_read(1,cal.StartPos + index);
		DelayMs(10);
		if (str[index] == '\0')
			break;
	}
}
     9c2:	3714      	adds	r7, #20
     9c4:	46bd      	mov	sp, r7
     9c6:	bd90      	pop	{r4, r7, pc}

000009c8 <GSM_SendAt>:
unsigned long int last_hard_reset = -1;
int connectionFailCount = 0;
#define LBS 1

uint16_t GSM_SendAt( char* cmd, char *response, int delay )
{
     9c8:	b580      	push	{r7, lr}
     9ca:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
     9ce:	af00      	add	r7, sp, #0
     9d0:	f107 030c 	add.w	r3, r7, #12
     9d4:	6018      	str	r0, [r3, #0]
     9d6:	f107 0308 	add.w	r3, r7, #8
     9da:	6019      	str	r1, [r3, #0]
     9dc:	1d3b      	adds	r3, r7, #4
     9de:	601a      	str	r2, [r3, #0]
//	}*/

	char buffer[1000];
	uint16_t	len;

	sprintf( buffer, "---> %s\r\n", cmd );
     9e0:	f107 0210 	add.w	r2, r7, #16
     9e4:	f107 030c 	add.w	r3, r7, #12
     9e8:	4610      	mov	r0, r2
     9ea:	4924      	ldr	r1, [pc, #144]	; (a7c <GSM_SendAt+0xb4>)
     9ec:	681a      	ldr	r2, [r3, #0]
     9ee:	f003 f837 	bl	3a60 <sprintf>
	TraceDumpHex( buffer, strlen( buffer ) );
     9f2:	f107 0310 	add.w	r3, r7, #16
     9f6:	4618      	mov	r0, r3
     9f8:	f004 fc9a 	bl	5330 <strlen>
     9fc:	4602      	mov	r2, r0
     9fe:	f107 0310 	add.w	r3, r7, #16
     a02:	4618      	mov	r0, r3
     a04:	4611      	mov	r1, r2
     a06:	f001 fdd5 	bl	25b4 <TraceDumpHex>

	int count = sprintf( buffer, "%s\r\n", cmd );
     a0a:	f107 0210 	add.w	r2, r7, #16
     a0e:	f107 030c 	add.w	r3, r7, #12
     a12:	4610      	mov	r0, r2
     a14:	491a      	ldr	r1, [pc, #104]	; (a80 <GSM_SendAt+0xb8>)
     a16:	681a      	ldr	r2, [r3, #0]
     a18:	f003 f822 	bl	3a60 <sprintf>
     a1c:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc
	UARTSend( PORT_GSM, buffer, count );
     a20:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
     a24:	f107 0210 	add.w	r2, r7, #16
     a28:	2001      	movs	r0, #1
     a2a:	4611      	mov	r1, r2
     a2c:	461a      	mov	r2, r3
     a2e:	f002 fa5b 	bl	2ee8 <UARTSend>

	DelayMs( delay );
     a32:	1d3b      	adds	r3, r7, #4
     a34:	681b      	ldr	r3, [r3, #0]
     a36:	4618      	mov	r0, r3
     a38:	f001 fd54 	bl	24e4 <DelayMs>

	len = ReadUart( response, PORT_GSM );
     a3c:	f107 0308 	add.w	r3, r7, #8
     a40:	6818      	ldr	r0, [r3, #0]
     a42:	2101      	movs	r1, #1
     a44:	f002 faec 	bl	3020 <ReadUart>
     a48:	4603      	mov	r3, r0
     a4a:	f8a7 33fa 	strh.w	r3, [r7, #1018]	; 0x3fa
	response[len] = '\0';
     a4e:	f8b7 33fa 	ldrh.w	r3, [r7, #1018]	; 0x3fa
     a52:	f107 0208 	add.w	r2, r7, #8
     a56:	6812      	ldr	r2, [r2, #0]
     a58:	4413      	add	r3, r2
     a5a:	2200      	movs	r2, #0
     a5c:	701a      	strb	r2, [r3, #0]

	TraceDumpHex( response, len );
     a5e:	f8b7 23fa 	ldrh.w	r2, [r7, #1018]	; 0x3fa
     a62:	f107 0308 	add.w	r3, r7, #8
     a66:	6818      	ldr	r0, [r3, #0]
     a68:	4611      	mov	r1, r2
     a6a:	f001 fda3 	bl	25b4 <TraceDumpHex>

    return ( len );
     a6e:	f8b7 33fa 	ldrh.w	r3, [r7, #1018]	; 0x3fa
}
     a72:	4618      	mov	r0, r3
     a74:	f507 6780 	add.w	r7, r7, #1024	; 0x400
     a78:	46bd      	mov	sp, r7
     a7a:	bd80      	pop	{r7, pc}
     a7c:	0000649c 	.word	0x0000649c
     a80:	000064a8 	.word	0x000064a8

00000a84 <GSM_TCP_Recv>:



int16_t GSM_TCP_Recv( char* pDataBuf, int16_t maxBytes )
{
     a84:	b580      	push	{r7, lr}
     a86:	b082      	sub	sp, #8
     a88:	af00      	add	r7, sp, #0
     a8a:	6078      	str	r0, [r7, #4]
     a8c:	460b      	mov	r3, r1
     a8e:	807b      	strh	r3, [r7, #2]
	Trace( "Entered GSM_TCP_Recv" );
     a90:	4807      	ldr	r0, [pc, #28]	; (ab0 <GSM_TCP_Recv+0x2c>)
     a92:	f001 fd3d 	bl	2510 <Trace>

	return ( GSM_SendAt( "AT+QIRD=1,1,0,200", pDataBuf, 1000 ) );
     a96:	4807      	ldr	r0, [pc, #28]	; (ab4 <GSM_TCP_Recv+0x30>)
     a98:	6879      	ldr	r1, [r7, #4]
     a9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     a9e:	f7ff ff93 	bl	9c8 <GSM_SendAt>
     aa2:	4603      	mov	r3, r0
     aa4:	b29b      	uxth	r3, r3
     aa6:	b21b      	sxth	r3, r3
}
     aa8:	4618      	mov	r0, r3
     aaa:	3708      	adds	r7, #8
     aac:	46bd      	mov	sp, r7
     aae:	bd80      	pop	{r7, pc}
     ab0:	000064b0 	.word	0x000064b0
     ab4:	000064c8 	.word	0x000064c8

00000ab8 <GSM_ConnectToTrioUpgradeServer>:
	OK*/
}


int GSM_ConnectToTrioUpgradeServer(char *ip, char *port)
{
     ab8:	b580      	push	{r7, lr}
     aba:	b0e2      	sub	sp, #392	; 0x188
     abc:	af02      	add	r7, sp, #8
     abe:	1d3b      	adds	r3, r7, #4
     ac0:	6018      	str	r0, [r3, #0]
     ac2:	463b      	mov	r3, r7
     ac4:	6019      	str	r1, [r3, #0]
	char buffer[200];
	char response[150];

	TraceNL("Entered GSM_ConnectToTrioUpgradeServer");
     ac6:	48b7      	ldr	r0, [pc, #732]	; (da4 <GSM_ConnectToTrioUpgradeServer+0x2ec>)
     ac8:	f001 fd32 	bl	2530 <TraceNL>

	int init_result = GSM_InitModule();
     acc:	f000 fa74 	bl	fb8 <GSM_InitModule>
     ad0:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	if (init_result == FAIL){
     ad4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
     ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
     adc:	d109      	bne.n	af2 <GSM_ConnectToTrioUpgradeServer+0x3a>
		GSM_ShutdownModule();
     ade:	f000 fa39 	bl	f54 <GSM_ShutdownModule>
		DelayMs(2000);
     ae2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     ae6:	f001 fcfd 	bl	24e4 <DelayMs>
		init_result = GSM_InitModule();
     aea:	f000 fa65 	bl	fb8 <GSM_InitModule>
     aee:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	}

	WDTFeed();
     af2:	f002 fb9d 	bl	3230 <WDTFeed>

	if(init_result == FAIL)
     af6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
     afa:	f1b3 3fff 	cmp.w	r3, #4294967295
     afe:	d102      	bne.n	b06 <GSM_ConnectToTrioUpgradeServer+0x4e>
		return ( init_result );
     b00:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
     b04:	e148      	b.n	d98 <GSM_ConnectToTrioUpgradeServer+0x2e0>

	GSM_EchoOFF();
     b06:	f000 fb9b 	bl	1240 <GSM_EchoOFF>
	GSM_GetImei();
     b0a:	f000 fb1d 	bl	1148 <GSM_GetImei>
	GSM_GetImsi(); //
     b0e:	f000 fb3b 	bl	1188 <GSM_GetImsi>
	int conn_stat = GSM_GetRegStat();
     b12:	f000 fac5 	bl	10a0 <GSM_GetRegStat>
     b16:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170

	WDTFeed();
     b1a:	f002 fb89 	bl	3230 <WDTFeed>
	GSM_SendAt("AT+QIFGCNT=1", response, 500);
     b1e:	f107 0308 	add.w	r3, r7, #8
     b22:	48a1      	ldr	r0, [pc, #644]	; (da8 <GSM_ConnectToTrioUpgradeServer+0x2f0>)
     b24:	4619      	mov	r1, r3
     b26:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     b2a:	f7ff ff4d 	bl	9c8 <GSM_SendAt>

	memset(buffer, 0, sizeof(buffer));
     b2e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
     b32:	4618      	mov	r0, r3
     b34:	2100      	movs	r1, #0
     b36:	22c8      	movs	r2, #200	; 0xc8
     b38:	f002 feca 	bl	38d0 <memset>
	sprintf(buffer, "AT+QICSGP=1,\"%s\",\"%s\",\"%s\"", per_apn_val, per_apnuser_val, per_apnpass_val);
     b3c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
     b40:	4b9a      	ldr	r3, [pc, #616]	; (dac <GSM_ConnectToTrioUpgradeServer+0x2f4>)
     b42:	9300      	str	r3, [sp, #0]
     b44:	4610      	mov	r0, r2
     b46:	499a      	ldr	r1, [pc, #616]	; (db0 <GSM_ConnectToTrioUpgradeServer+0x2f8>)
     b48:	4a9a      	ldr	r2, [pc, #616]	; (db4 <GSM_ConnectToTrioUpgradeServer+0x2fc>)
     b4a:	4b9b      	ldr	r3, [pc, #620]	; (db8 <GSM_ConnectToTrioUpgradeServer+0x300>)
     b4c:	f002 ff88 	bl	3a60 <sprintf>

	GSM_SendAt(buffer, response, 100);
     b50:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
     b54:	f107 0308 	add.w	r3, r7, #8
     b58:	4610      	mov	r0, r2
     b5a:	4619      	mov	r1, r3
     b5c:	2264      	movs	r2, #100	; 0x64
     b5e:	f7ff ff33 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QIMUX=0", response, 100);
     b62:	f107 0308 	add.w	r3, r7, #8
     b66:	4895      	ldr	r0, [pc, #596]	; (dbc <GSM_ConnectToTrioUpgradeServer+0x304>)
     b68:	4619      	mov	r1, r3
     b6a:	2264      	movs	r2, #100	; 0x64
     b6c:	f7ff ff2c 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QVBATT=0,3500,0", response, 100); //Disable low power shut down and warning.
     b70:	f107 0308 	add.w	r3, r7, #8
     b74:	4892      	ldr	r0, [pc, #584]	; (dc0 <GSM_ConnectToTrioUpgradeServer+0x308>)
     b76:	4619      	mov	r1, r3
     b78:	2264      	movs	r2, #100	; 0x64
     b7a:	f7ff ff25 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QVBATT=1,3300,0",response,100); // Disable 3.3 volt cutoff.
     b7e:	f107 0308 	add.w	r3, r7, #8
     b82:	4890      	ldr	r0, [pc, #576]	; (dc4 <GSM_ConnectToTrioUpgradeServer+0x30c>)
     b84:	4619      	mov	r1, r3
     b86:	2264      	movs	r2, #100	; 0x64
     b88:	f7ff ff1e 	bl	9c8 <GSM_SendAt>

	GSM_SendAt("AT+QISHOWRA=1", response, 100); // show remote address
     b8c:	f107 0308 	add.w	r3, r7, #8
     b90:	488d      	ldr	r0, [pc, #564]	; (dc8 <GSM_ConnectToTrioUpgradeServer+0x310>)
     b92:	4619      	mov	r1, r3
     b94:	2264      	movs	r2, #100	; 0x64
     b96:	f7ff ff17 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QISHOWPT=1", response, 100); // show protocol type ,TCP, or UDP
     b9a:	f107 0308 	add.w	r3, r7, #8
     b9e:	488b      	ldr	r0, [pc, #556]	; (dcc <GSM_ConnectToTrioUpgradeServer+0x314>)
     ba0:	4619      	mov	r1, r3
     ba2:	2264      	movs	r2, #100	; 0x64
     ba4:	f7ff ff10 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QINDI=0", response, 100);    //  disable indicator
     ba8:	f107 0308 	add.w	r3, r7, #8
     bac:	4888      	ldr	r0, [pc, #544]	; (dd0 <GSM_ConnectToTrioUpgradeServer+0x318>)
     bae:	4619      	mov	r1, r3
     bb0:	2264      	movs	r2, #100	; 0x64
     bb2:	f7ff ff09 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QIHEAD=1", response, 100);    //
     bb6:	f107 0308 	add.w	r3, r7, #8
     bba:	4886      	ldr	r0, [pc, #536]	; (dd4 <GSM_ConnectToTrioUpgradeServer+0x31c>)
     bbc:	4619      	mov	r1, r3
     bbe:	2264      	movs	r2, #100	; 0x64
     bc0:	f7ff ff02 	bl	9c8 <GSM_SendAt>

	//GSM_SendAt("AT+QIMODE=1", response, 100); //Transparent Mode
	GSM_SendAt("AT+QIMODE=0", response, 100);   //Non Transparent Mode
     bc4:	f107 0308 	add.w	r3, r7, #8
     bc8:	4883      	ldr	r0, [pc, #524]	; (dd8 <GSM_ConnectToTrioUpgradeServer+0x320>)
     bca:	4619      	mov	r1, r3
     bcc:	2264      	movs	r2, #100	; 0x64
     bce:	f7ff fefb 	bl	9c8 <GSM_SendAt>
	//GSM_SendAt("AT+QINDI=1", response, 100);  //Alert when data received.


	//GSM_SendAt("AT+QITCFG=3,1,512,1", response, 500); //Transparent mode configuration

	memset(buffer, 0, sizeof(buffer));
     bd2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
     bd6:	4618      	mov	r0, r3
     bd8:	2100      	movs	r1, #0
     bda:	22c8      	movs	r2, #200	; 0xc8
     bdc:	f002 fe78 	bl	38d0 <memset>
	if (isalpha(per_ip_val[0])){ //DNS
     be0:	4b7e      	ldr	r3, [pc, #504]	; (ddc <GSM_ConnectToTrioUpgradeServer+0x324>)
     be2:	781b      	ldrb	r3, [r3, #0]
     be4:	3380      	adds	r3, #128	; 0x80
     be6:	4a7e      	ldr	r2, [pc, #504]	; (de0 <GSM_ConnectToTrioUpgradeServer+0x328>)
     be8:	5cd3      	ldrb	r3, [r2, r3]
     bea:	f003 0318 	and.w	r3, r3, #24
     bee:	2b00      	cmp	r3, #0
     bf0:	d013      	beq.n	c1a <GSM_ConnectToTrioUpgradeServer+0x162>
		GSM_SendAt("AT+QIDNSIP=1", response, 100);
     bf2:	f107 0308 	add.w	r3, r7, #8
     bf6:	487b      	ldr	r0, [pc, #492]	; (de4 <GSM_ConnectToTrioUpgradeServer+0x32c>)
     bf8:	4619      	mov	r1, r3
     bfa:	2264      	movs	r2, #100	; 0x64
     bfc:	f7ff fee4 	bl	9c8 <GSM_SendAt>
		TraceDumpHex( response, strlen(response) );
     c00:	f107 0308 	add.w	r3, r7, #8
     c04:	4618      	mov	r0, r3
     c06:	f004 fb93 	bl	5330 <strlen>
     c0a:	4602      	mov	r2, r0
     c0c:	f107 0308 	add.w	r3, r7, #8
     c10:	4618      	mov	r0, r3
     c12:	4611      	mov	r1, r2
     c14:	f001 fcce 	bl	25b4 <TraceDumpHex>
     c18:	e006      	b.n	c28 <GSM_ConnectToTrioUpgradeServer+0x170>
	}else
		GSM_SendAt("AT+QIDNSIP=0", response, 100);
     c1a:	f107 0308 	add.w	r3, r7, #8
     c1e:	4872      	ldr	r0, [pc, #456]	; (de8 <GSM_ConnectToTrioUpgradeServer+0x330>)
     c20:	4619      	mov	r1, r3
     c22:	2264      	movs	r2, #100	; 0x64
     c24:	f7ff fed0 	bl	9c8 <GSM_SendAt>


	////Low Power/////
	GSM_SendAt("AT+QGPCLASS=8", response, 100); // 1 Tx timeslots
     c28:	f107 0308 	add.w	r3, r7, #8
     c2c:	486f      	ldr	r0, [pc, #444]	; (dec <GSM_ConnectToTrioUpgradeServer+0x334>)
     c2e:	4619      	mov	r1, r3
     c30:	2264      	movs	r2, #100	; 0x64
     c32:	f7ff fec9 	bl	9c8 <GSM_SendAt>
//	TraceDumpHex( response, strlen(response) );
	//GSM_SendAt("AT+CDETXPW=900,1,255,2", response, 100);
	//////////////////
	GSM_SendAt("AT",response,100);
     c36:	f107 0308 	add.w	r3, r7, #8
     c3a:	486d      	ldr	r0, [pc, #436]	; (df0 <GSM_ConnectToTrioUpgradeServer+0x338>)
     c3c:	4619      	mov	r1, r3
     c3e:	2264      	movs	r2, #100	; 0x64
     c40:	f7ff fec2 	bl	9c8 <GSM_SendAt>

	int cmd_count = sprintf(buffer, "AT+QIOPEN=\"TCP\",\"%s\",%d", static_update_server_ip, 5007L);
     c44:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
     c48:	4618      	mov	r0, r3
     c4a:	496a      	ldr	r1, [pc, #424]	; (df4 <GSM_ConnectToTrioUpgradeServer+0x33c>)
     c4c:	4a6a      	ldr	r2, [pc, #424]	; (df8 <GSM_ConnectToTrioUpgradeServer+0x340>)
     c4e:	f241 338f 	movw	r3, #5007	; 0x138f
     c52:	f002 ff05 	bl	3a60 <sprintf>
     c56:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
	//GSM_SendAt("AT+QIOPEN=\"TCP\",\"178.63.30.80\",6081", response, 2000);

	GSM_SendAt( buffer, response, 100);
     c5a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
     c5e:	f107 0308 	add.w	r3, r7, #8
     c62:	4610      	mov	r0, r2
     c64:	4619      	mov	r1, r3
     c66:	2264      	movs	r2, #100	; 0x64
     c68:	f7ff feae 	bl	9c8 <GSM_SendAt>
	//UARTSend(PORT_GSM, buffer, cmd_count);

	//UARTSend(PORT_TRACE, buffer, cmd_count);
	int server_conn_count = 0;
     c6c:	2300      	movs	r3, #0
     c6e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	int server_conn_result = FAIL;
     c72:	f04f 33ff 	mov.w	r3, #4294967295
     c76:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

	while(1){
		int recLen = ReadUart(response, PORT_GSM);
     c7a:	f107 0308 	add.w	r3, r7, #8
     c7e:	4618      	mov	r0, r3
     c80:	2101      	movs	r1, #1
     c82:	f002 f9cd 	bl	3020 <ReadUart>
     c86:	4603      	mov	r3, r0
     c88:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		if( recLen )
     c8c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
     c90:	2b00      	cmp	r3, #0
     c92:	d026      	beq.n	ce2 <GSM_ConnectToTrioUpgradeServer+0x22a>
		{
//			TraceDumpHex( response, strlen(response) );
			if (strstr(response,"FAIL") != NULL/* || strstr(response,"ERROR") != NULL*/){ //ERROR is about format ignore
     c94:	f107 0308 	add.w	r3, r7, #8
     c98:	4618      	mov	r0, r3
     c9a:	4958      	ldr	r1, [pc, #352]	; (dfc <GSM_ConnectToTrioUpgradeServer+0x344>)
     c9c:	f004 fb99 	bl	53d2 <strstr>
     ca0:	4603      	mov	r3, r0
     ca2:	2b00      	cmp	r3, #0
     ca4:	d000      	beq.n	ca8 <GSM_ConnectToTrioUpgradeServer+0x1f0>
				//UARTSend(PORT_GSM, buffer, cmd_count); //Testing AT to server problem
				break;
     ca6:	e02d      	b.n	d04 <GSM_ConnectToTrioUpgradeServer+0x24c>
			}
			else if (strstr(response,"CONNECT OK") != NULL || strstr(response,"ALREADY CONNECT") != NULL){
     ca8:	f107 0308 	add.w	r3, r7, #8
     cac:	4618      	mov	r0, r3
     cae:	4954      	ldr	r1, [pc, #336]	; (e00 <GSM_ConnectToTrioUpgradeServer+0x348>)
     cb0:	f004 fb8f 	bl	53d2 <strstr>
     cb4:	4603      	mov	r3, r0
     cb6:	2b00      	cmp	r3, #0
     cb8:	d108      	bne.n	ccc <GSM_ConnectToTrioUpgradeServer+0x214>
     cba:	f107 0308 	add.w	r3, r7, #8
     cbe:	4618      	mov	r0, r3
     cc0:	4950      	ldr	r1, [pc, #320]	; (e04 <GSM_ConnectToTrioUpgradeServer+0x34c>)
     cc2:	f004 fb86 	bl	53d2 <strstr>
     cc6:	4603      	mov	r3, r0
     cc8:	2b00      	cmp	r3, #0
     cca:	d00a      	beq.n	ce2 <GSM_ConnectToTrioUpgradeServer+0x22a>
				//UARTSend( PORT_TRACE, response, cmd_count );
				TraceDumpHex( response, recLen );
     ccc:	f107 0308 	add.w	r3, r7, #8
     cd0:	4618      	mov	r0, r3
     cd2:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
     cd6:	f001 fc6d 	bl	25b4 <TraceDumpHex>
				server_conn_result = SUCCESS;
     cda:	2300      	movs	r3, #0
     cdc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
				break;
     ce0:	e010      	b.n	d04 <GSM_ConnectToTrioUpgradeServer+0x24c>
			}
		}

		WDTFeed();
     ce2:	f002 faa5 	bl	3230 <WDTFeed>
		DelayMs(300);
     ce6:	f44f 7096 	mov.w	r0, #300	; 0x12c
     cea:	f001 fbfb 	bl	24e4 <DelayMs>
		server_conn_count++;
     cee:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
     cf2:	3301      	adds	r3, #1
     cf4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
		if (server_conn_count > 30)
     cf8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
     cfc:	2b1e      	cmp	r3, #30
     cfe:	dd00      	ble.n	d02 <GSM_ConnectToTrioUpgradeServer+0x24a>
			break;
     d00:	e000      	b.n	d04 <GSM_ConnectToTrioUpgradeServer+0x24c>
	}
     d02:	e7ba      	b.n	c7a <GSM_ConnectToTrioUpgradeServer+0x1c2>

	//GSM_SendAt(buffer, response, 2000);
	if (server_conn_result == SUCCESS) {
     d04:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
     d08:	2b00      	cmp	r3, #0
     d0a:	d107      	bne.n	d1c <GSM_ConnectToTrioUpgradeServer+0x264>
		TraceNL("Connected to the server.");
     d0c:	483e      	ldr	r0, [pc, #248]	; (e08 <GSM_ConnectToTrioUpgradeServer+0x350>)
     d0e:	f001 fc0f 	bl	2530 <TraceNL>
		connectionFailCount = 0;
     d12:	4b3e      	ldr	r3, [pc, #248]	; (e0c <GSM_ConnectToTrioUpgradeServer+0x354>)
     d14:	2200      	movs	r2, #0
     d16:	601a      	str	r2, [r3, #0]
		return SUCCESS;
     d18:	2300      	movs	r3, #0
     d1a:	e03d      	b.n	d98 <GSM_ConnectToTrioUpgradeServer+0x2e0>
	}

	TraceNL("QIOPEN failed.");
     d1c:	483c      	ldr	r0, [pc, #240]	; (e10 <GSM_ConnectToTrioUpgradeServer+0x358>)
     d1e:	f001 fc07 	bl	2530 <TraceNL>
	connectionFailCount++;
     d22:	4b3a      	ldr	r3, [pc, #232]	; (e0c <GSM_ConnectToTrioUpgradeServer+0x354>)
     d24:	681b      	ldr	r3, [r3, #0]
     d26:	3301      	adds	r3, #1
     d28:	4a38      	ldr	r2, [pc, #224]	; (e0c <GSM_ConnectToTrioUpgradeServer+0x354>)
     d2a:	6013      	str	r3, [r2, #0]
	if (connectionFailCount > 40 && connectionFailCount % 200 == 0) //10 minutes.
     d2c:	4b37      	ldr	r3, [pc, #220]	; (e0c <GSM_ConnectToTrioUpgradeServer+0x354>)
     d2e:	681b      	ldr	r3, [r3, #0]
     d30:	2b28      	cmp	r3, #40	; 0x28
     d32:	dd17      	ble.n	d64 <GSM_ConnectToTrioUpgradeServer+0x2ac>
     d34:	4b35      	ldr	r3, [pc, #212]	; (e0c <GSM_ConnectToTrioUpgradeServer+0x354>)
     d36:	681a      	ldr	r2, [r3, #0]
     d38:	4b36      	ldr	r3, [pc, #216]	; (e14 <GSM_ConnectToTrioUpgradeServer+0x35c>)
     d3a:	fb83 1302 	smull	r1, r3, r3, r2
     d3e:	1199      	asrs	r1, r3, #6
     d40:	17d3      	asrs	r3, r2, #31
     d42:	1acb      	subs	r3, r1, r3
     d44:	21c8      	movs	r1, #200	; 0xc8
     d46:	fb01 f303 	mul.w	r3, r1, r3
     d4a:	1ad3      	subs	r3, r2, r3
     d4c:	2b00      	cmp	r3, #0
     d4e:	d109      	bne.n	d64 <GSM_ConnectToTrioUpgradeServer+0x2ac>
	{
		TraceNL("Hard resetting module.");
     d50:	4831      	ldr	r0, [pc, #196]	; (e18 <GSM_ConnectToTrioUpgradeServer+0x360>)
     d52:	f001 fbed 	bl	2530 <TraceNL>
		GSM_InitModule(); //Restarts and initializes module.
     d56:	f000 f92f 	bl	fb8 <GSM_InitModule>
		last_hard_reset = STT_Value;
     d5a:	4b30      	ldr	r3, [pc, #192]	; (e1c <GSM_ConnectToTrioUpgradeServer+0x364>)
     d5c:	681b      	ldr	r3, [r3, #0]
     d5e:	4a30      	ldr	r2, [pc, #192]	; (e20 <GSM_ConnectToTrioUpgradeServer+0x368>)
     d60:	6013      	str	r3, [r2, #0]
     d62:	e017      	b.n	d94 <GSM_ConnectToTrioUpgradeServer+0x2dc>
	}
	else if (connectionFailCount > 30 && connectionFailCount % 20 == 0){ //100 in production
     d64:	4b29      	ldr	r3, [pc, #164]	; (e0c <GSM_ConnectToTrioUpgradeServer+0x354>)
     d66:	681b      	ldr	r3, [r3, #0]
     d68:	2b1e      	cmp	r3, #30
     d6a:	dd13      	ble.n	d94 <GSM_ConnectToTrioUpgradeServer+0x2dc>
     d6c:	4b27      	ldr	r3, [pc, #156]	; (e0c <GSM_ConnectToTrioUpgradeServer+0x354>)
     d6e:	6819      	ldr	r1, [r3, #0]
     d70:	4b2c      	ldr	r3, [pc, #176]	; (e24 <GSM_ConnectToTrioUpgradeServer+0x36c>)
     d72:	fb83 2301 	smull	r2, r3, r3, r1
     d76:	10da      	asrs	r2, r3, #3
     d78:	17cb      	asrs	r3, r1, #31
     d7a:	1ad2      	subs	r2, r2, r3
     d7c:	4613      	mov	r3, r2
     d7e:	009b      	lsls	r3, r3, #2
     d80:	4413      	add	r3, r2
     d82:	009b      	lsls	r3, r3, #2
     d84:	1aca      	subs	r2, r1, r3
     d86:	2a00      	cmp	r2, #0
     d88:	d104      	bne.n	d94 <GSM_ConnectToTrioUpgradeServer+0x2dc>
		TraceNL("connectionFailCount > 40 restarting module.");
     d8a:	4827      	ldr	r0, [pc, #156]	; (e28 <GSM_ConnectToTrioUpgradeServer+0x370>)
     d8c:	f001 fbd0 	bl	2530 <TraceNL>
		GSM_InitModule(); //Restarts and initializes module.
     d90:	f000 f912 	bl	fb8 <GSM_InitModule>
	}
	return FAIL;
     d94:	f04f 33ff 	mov.w	r3, #4294967295
}
     d98:	4618      	mov	r0, r3
     d9a:	f507 77c0 	add.w	r7, r7, #384	; 0x180
     d9e:	46bd      	mov	sp, r7
     da0:	bd80      	pop	{r7, pc}
     da2:	bf00      	nop
     da4:	0000656c 	.word	0x0000656c
     da8:	00006594 	.word	0x00006594
     dac:	10000bd8 	.word	0x10000bd8
     db0:	000065a4 	.word	0x000065a4
     db4:	10000bf4 	.word	0x10000bf4
     db8:	10000b88 	.word	0x10000b88
     dbc:	000065c0 	.word	0x000065c0
     dc0:	000065cc 	.word	0x000065cc
     dc4:	000065e0 	.word	0x000065e0
     dc8:	000065f4 	.word	0x000065f4
     dcc:	00006604 	.word	0x00006604
     dd0:	00006614 	.word	0x00006614
     dd4:	00006620 	.word	0x00006620
     dd8:	0000662c 	.word	0x0000662c
     ddc:	10000b38 	.word	0x10000b38
     de0:	000071a0 	.word	0x000071a0
     de4:	00006638 	.word	0x00006638
     de8:	00006648 	.word	0x00006648
     dec:	00006658 	.word	0x00006658
     df0:	0000653c 	.word	0x0000653c
     df4:	00006668 	.word	0x00006668
     df8:	10000000 	.word	0x10000000
     dfc:	00006680 	.word	0x00006680
     e00:	00006688 	.word	0x00006688
     e04:	00006694 	.word	0x00006694
     e08:	000066a4 	.word	0x000066a4
     e0c:	10000020 	.word	0x10000020
     e10:	000066c0 	.word	0x000066c0
     e14:	51eb851f 	.word	0x51eb851f
     e18:	000066d0 	.word	0x000066d0
     e1c:	10000bac 	.word	0x10000bac
     e20:	10000010 	.word	0x10000010
     e24:	66666667 	.word	0x66666667
     e28:	000066e8 	.word	0x000066e8

00000e2c <GSM_TCP_Send>:
** Returned value:	greater than 0 to indicate number of characters transferred
**
**                  a value less than 0 is error code, tobe defined later.
******************************************************************************/
int GSM_TCP_Send( unsigned char* msg, uint16_t len )
{
     e2c:	b580      	push	{r7, lr}
     e2e:	b0e8      	sub	sp, #416	; 0x1a0
     e30:	af00      	add	r7, sp, #0
     e32:	1d3b      	adds	r3, r7, #4
     e34:	6018      	str	r0, [r3, #0]
     e36:	460a      	mov	r2, r1
     e38:	1cbb      	adds	r3, r7, #2
     e3a:	801a      	strh	r2, [r3, #0]
	char response[200];
	char buffer[200];

	TraceNL("Entered GSM_TCP_Send");
     e3c:	4836      	ldr	r0, [pc, #216]	; (f18 <GSM_TCP_Send+0xec>)
     e3e:	f001 fb77 	bl	2530 <TraceNL>

	GSM_SendAt( "AT", response, 100 ); //Empty buffer
     e42:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
     e46:	4835      	ldr	r0, [pc, #212]	; (f1c <GSM_TCP_Send+0xf0>)
     e48:	4619      	mov	r1, r3
     e4a:	2264      	movs	r2, #100	; 0x64
     e4c:	f7ff fdbc 	bl	9c8 <GSM_SendAt>

	int count = sprintf( buffer, "AT+QISEND=%d", len );
     e50:	1cbb      	adds	r3, r7, #2
     e52:	881b      	ldrh	r3, [r3, #0]
     e54:	f107 0208 	add.w	r2, r7, #8
     e58:	4610      	mov	r0, r2
     e5a:	4931      	ldr	r1, [pc, #196]	; (f20 <GSM_TCP_Send+0xf4>)
     e5c:	461a      	mov	r2, r3
     e5e:	f002 fdff 	bl	3a60 <sprintf>
     e62:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
	GSM_SendAt( buffer, response, 100 );
     e66:	f107 0208 	add.w	r2, r7, #8
     e6a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
     e6e:	4610      	mov	r0, r2
     e70:	4619      	mov	r1, r3
     e72:	2264      	movs	r2, #100	; 0x64
     e74:	f7ff fda8 	bl	9c8 <GSM_SendAt>

	if( strchr(response, '>') != NULL )
     e78:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
     e7c:	4618      	mov	r0, r3
     e7e:	213e      	movs	r1, #62	; 0x3e
     e80:	f004 fa28 	bl	52d4 <strchr>
     e84:	4603      	mov	r3, r0
     e86:	2b00      	cmp	r3, #0
     e88:	d03b      	beq.n	f02 <GSM_TCP_Send+0xd6>
	{
		UARTSend( PORT_GSM, msg, len );
     e8a:	1cbb      	adds	r3, r7, #2
     e8c:	881a      	ldrh	r2, [r3, #0]
     e8e:	1d3b      	adds	r3, r7, #4
     e90:	2001      	movs	r0, #1
     e92:	6819      	ldr	r1, [r3, #0]
     e94:	f002 f828 	bl	2ee8 <UARTSend>

		DelayMs( 300 );
     e98:	f44f 7096 	mov.w	r0, #300	; 0x12c
     e9c:	f001 fb22 	bl	24e4 <DelayMs>

		ReadUart( response, PORT_GSM );
     ea0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
     ea4:	4618      	mov	r0, r3
     ea6:	2101      	movs	r1, #1
     ea8:	f002 f8ba 	bl	3020 <ReadUart>
		int sendOkCheck = 0;
     eac:	2300      	movs	r3, #0
     eae:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

		while( strstr( response, "SEND OK" ) == NULL )
     eb2:	e017      	b.n	ee4 <GSM_TCP_Send+0xb8>
		{
			TraceNL( "Send OK whiling.." );
     eb4:	481b      	ldr	r0, [pc, #108]	; (f24 <GSM_TCP_Send+0xf8>)
     eb6:	f001 fb3b 	bl	2530 <TraceNL>
			if ( sendOkCheck > 20 )
     eba:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
     ebe:	2b14      	cmp	r3, #20
     ec0:	dd02      	ble.n	ec8 <GSM_TCP_Send+0x9c>
				return ( FAIL );
     ec2:	f04f 33ff 	mov.w	r3, #4294967295
     ec6:	e021      	b.n	f0c <GSM_TCP_Send+0xe0>

			DelayMs( 100 );
     ec8:	2064      	movs	r0, #100	; 0x64
     eca:	f001 fb0b 	bl	24e4 <DelayMs>
			ReadUart( response, PORT_GSM );
     ece:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
     ed2:	4618      	mov	r0, r3
     ed4:	2101      	movs	r1, #1
     ed6:	f002 f8a3 	bl	3020 <ReadUart>

			sendOkCheck++;
     eda:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
     ede:	3301      	adds	r3, #1
     ee0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
		DelayMs( 300 );

		ReadUart( response, PORT_GSM );
		int sendOkCheck = 0;

		while( strstr( response, "SEND OK" ) == NULL )
     ee4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
     ee8:	4618      	mov	r0, r3
     eea:	490f      	ldr	r1, [pc, #60]	; (f28 <GSM_TCP_Send+0xfc>)
     eec:	f004 fa71 	bl	53d2 <strstr>
     ef0:	4603      	mov	r3, r0
     ef2:	2b00      	cmp	r3, #0
     ef4:	d0de      	beq.n	eb4 <GSM_TCP_Send+0x88>
			DelayMs( 100 );
			ReadUart( response, PORT_GSM );

			sendOkCheck++;
		}
		TraceNL( "Data sent." );
     ef6:	480d      	ldr	r0, [pc, #52]	; (f2c <GSM_TCP_Send+0x100>)
     ef8:	f001 fb1a 	bl	2530 <TraceNL>
		return ( len );
     efc:	1cbb      	adds	r3, r7, #2
     efe:	881b      	ldrh	r3, [r3, #0]
     f00:	e004      	b.n	f0c <GSM_TCP_Send+0xe0>
	}
	TraceNL( "Data fail." );
     f02:	480b      	ldr	r0, [pc, #44]	; (f30 <GSM_TCP_Send+0x104>)
     f04:	f001 fb14 	bl	2530 <TraceNL>
	return ( FAIL );
     f08:	f04f 33ff 	mov.w	r3, #4294967295
}
     f0c:	4618      	mov	r0, r3
     f0e:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
     f12:	46bd      	mov	sp, r7
     f14:	bd80      	pop	{r7, pc}
     f16:	bf00      	nop
     f18:	0000682c 	.word	0x0000682c
     f1c:	0000653c 	.word	0x0000653c
     f20:	000067b8 	.word	0x000067b8
     f24:	000067c8 	.word	0x000067c8
     f28:	000067dc 	.word	0x000067dc
     f2c:	000067e4 	.word	0x000067e4
     f30:	000067f8 	.word	0x000067f8

00000f34 <GSM_TogglePwrKey>:

void GSM_TogglePwrKey() {
     f34:	b580      	push	{r7, lr}
     f36:	af00      	add	r7, sp, #0
	//Toggle PWR_KEY
	LPC_GPIO2->FIOSET = (1 << 3);
     f38:	4b05      	ldr	r3, [pc, #20]	; (f50 <GSM_TogglePwrKey+0x1c>)
     f3a:	2208      	movs	r2, #8
     f3c:	619a      	str	r2, [r3, #24]
	DelayMs(2000);
     f3e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     f42:	f001 facf 	bl	24e4 <DelayMs>
	LPC_GPIO2->FIOCLR = (1 << 3);
     f46:	4b02      	ldr	r3, [pc, #8]	; (f50 <GSM_TogglePwrKey+0x1c>)
     f48:	2208      	movs	r2, #8
     f4a:	61da      	str	r2, [r3, #28]
}
     f4c:	bd80      	pop	{r7, pc}
     f4e:	bf00      	nop
     f50:	2009c040 	.word	0x2009c040

00000f54 <GSM_ShutdownModule>:

int GSM_ShutdownModule() {
     f54:	b580      	push	{r7, lr}
     f56:	b09a      	sub	sp, #104	; 0x68
     f58:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+QPOWD=0", response, 500);
     f5a:	1d3b      	adds	r3, r7, #4
     f5c:	4813      	ldr	r0, [pc, #76]	; (fac <GSM_ShutdownModule+0x58>)
     f5e:	4619      	mov	r1, r3
     f60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     f64:	f7ff fd30 	bl	9c8 <GSM_SendAt>
	DelayMs(1000);
     f68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     f6c:	f001 faba 	bl	24e4 <DelayMs>
	memset(response, 0, sizeof(response));
     f70:	1d3b      	adds	r3, r7, #4
     f72:	4618      	mov	r0, r3
     f74:	2100      	movs	r1, #0
     f76:	2264      	movs	r2, #100	; 0x64
     f78:	f002 fcaa 	bl	38d0 <memset>
	GSM_SendAt("AT", response, 500);
     f7c:	1d3b      	adds	r3, r7, #4
     f7e:	480c      	ldr	r0, [pc, #48]	; (fb0 <GSM_ShutdownModule+0x5c>)
     f80:	4619      	mov	r1, r3
     f82:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     f86:	f7ff fd1f 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "OK") == NULL) {
     f8a:	1d3b      	adds	r3, r7, #4
     f8c:	4618      	mov	r0, r3
     f8e:	4909      	ldr	r1, [pc, #36]	; (fb4 <GSM_ShutdownModule+0x60>)
     f90:	f004 fa1f 	bl	53d2 <strstr>
     f94:	4603      	mov	r3, r0
     f96:	2b00      	cmp	r3, #0
     f98:	d101      	bne.n	f9e <GSM_ShutdownModule+0x4a>
		return ( SUCCESS );
     f9a:	2300      	movs	r3, #0
     f9c:	e001      	b.n	fa2 <GSM_ShutdownModule+0x4e>
	}
	return ( FAIL );
     f9e:	f04f 33ff 	mov.w	r3, #4294967295
}
     fa2:	4618      	mov	r0, r3
     fa4:	3768      	adds	r7, #104	; 0x68
     fa6:	46bd      	mov	sp, r7
     fa8:	bd80      	pop	{r7, pc}
     faa:	bf00      	nop
     fac:	00006844 	.word	0x00006844
     fb0:	0000653c 	.word	0x0000653c
     fb4:	00006850 	.word	0x00006850

00000fb8 <GSM_InitModule>:
	LPC_GPIO2->FIOCLR = (1 << 2);

	return ( SUCCESS );
}

int GSM_InitModule() {
     fb8:	b580      	push	{r7, lr}
     fba:	b09c      	sub	sp, #112	; 0x70
     fbc:	af00      	add	r7, sp, #0
	//Unset EMERG
	char response[100];
	LPC_GPIO2->FIOCLR = (1 << 2);
     fbe:	4b30      	ldr	r3, [pc, #192]	; (1080 <GSM_InitModule+0xc8>)
     fc0:	2204      	movs	r2, #4
     fc2:	61da      	str	r2, [r3, #28]
	DelayMs(1000);
     fc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     fc8:	f001 fa8c 	bl	24e4 <DelayMs>
	GSM_TogglePwrKey();
     fcc:	f7ff ffb2 	bl	f34 <GSM_TogglePwrKey>
	int i = 0;
     fd0:	2300      	movs	r3, #0
     fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (i = 0; i < 20; i++) {
     fd4:	2300      	movs	r3, #0
     fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
     fd8:	e048      	b.n	106c <GSM_InitModule+0xb4>
		GSM_SendAt("AT", response, 500);
     fda:	1d3b      	adds	r3, r7, #4
     fdc:	4829      	ldr	r0, [pc, #164]	; (1084 <GSM_InitModule+0xcc>)
     fde:	4619      	mov	r1, r3
     fe0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     fe4:	f7ff fcf0 	bl	9c8 <GSM_SendAt>

//		TraceDumpHex( response, strlen(response) );
		if (strstr(response, "OK") != NULL) {
     fe8:	1d3b      	adds	r3, r7, #4
     fea:	4618      	mov	r0, r3
     fec:	4926      	ldr	r1, [pc, #152]	; (1088 <GSM_InitModule+0xd0>)
     fee:	f004 f9f0 	bl	53d2 <strstr>
     ff2:	4603      	mov	r3, r0
     ff4:	2b00      	cmp	r3, #0
     ff6:	d036      	beq.n	1066 <GSM_InitModule+0xae>
			GSM_SendAt("AT+CMEE=2", response, 500);
     ff8:	1d3b      	adds	r3, r7, #4
     ffa:	4824      	ldr	r0, [pc, #144]	; (108c <GSM_InitModule+0xd4>)
     ffc:	4619      	mov	r1, r3
     ffe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1002:	f7ff fce1 	bl	9c8 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			DelayMs(500);
    1006:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    100a:	f001 fa6b 	bl	24e4 <DelayMs>
			//Init SMS
			//SMS Text Mode
			GSM_SendAt("AT+CMGF=1", response, 500);
    100e:	1d3b      	adds	r3, r7, #4
    1010:	481f      	ldr	r0, [pc, #124]	; (1090 <GSM_InitModule+0xd8>)
    1012:	4619      	mov	r1, r3
    1014:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1018:	f7ff fcd6 	bl	9c8 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			//Initialize SMS, if not new messages does not cause +CMTI
			GSM_SendAt("AT+CNMI=2,1,0,0,0", response, 500);
    101c:	1d3b      	adds	r3, r7, #4
    101e:	481d      	ldr	r0, [pc, #116]	; (1094 <GSM_InitModule+0xdc>)
    1020:	4619      	mov	r1, r3
    1022:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1026:	f7ff fccf 	bl	9c8 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			int sim_check = FAIL;
    102a:	f04f 33ff 	mov.w	r3, #4294967295
    102e:	66bb      	str	r3, [r7, #104]	; 0x68
			for(;i<40;i++){
    1030:	e014      	b.n	105c <GSM_InitModule+0xa4>
				sim_check = GSM_CheckSimCard();
    1032:	f000 f867 	bl	1104 <GSM_CheckSimCard>
    1036:	66b8      	str	r0, [r7, #104]	; 0x68
				if (sim_check == SUCCESS){
    1038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    103a:	2b00      	cmp	r3, #0
    103c:	d103      	bne.n	1046 <GSM_InitModule+0x8e>
					TraceNL("Sim card ready..\r");
    103e:	4816      	ldr	r0, [pc, #88]	; (1098 <GSM_InitModule+0xe0>)
    1040:	f001 fa76 	bl	2530 <TraceNL>
					break;
    1044:	e00d      	b.n	1062 <GSM_InitModule+0xaa>
				}
				else
					TraceNL("Sim not ready!\r");
    1046:	4815      	ldr	r0, [pc, #84]	; (109c <GSM_InitModule+0xe4>)
    1048:	f001 fa72 	bl	2530 <TraceNL>
				DelayMs(200);
    104c:	20c8      	movs	r0, #200	; 0xc8
    104e:	f001 fa49 	bl	24e4 <DelayMs>
				WDTFeed();
    1052:	f002 f8ed 	bl	3230 <WDTFeed>
//			TraceDumpHex( response, strlen(response) );
			//Initialize SMS, if not new messages does not cause +CMTI
			GSM_SendAt("AT+CNMI=2,1,0,0,0", response, 500);
//			TraceDumpHex( response, strlen(response) );
			int sim_check = FAIL;
			for(;i<40;i++){
    1056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1058:	3301      	adds	r3, #1
    105a:	66fb      	str	r3, [r7, #108]	; 0x6c
    105c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    105e:	2b27      	cmp	r3, #39	; 0x27
    1060:	dde7      	ble.n	1032 <GSM_InitModule+0x7a>
				else
					TraceNL("Sim not ready!\r");
				DelayMs(200);
				WDTFeed();
			}
			return sim_check;
    1062:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1064:	e007      	b.n	1076 <GSM_InitModule+0xbe>
	char response[100];
	LPC_GPIO2->FIOCLR = (1 << 2);
	DelayMs(1000);
	GSM_TogglePwrKey();
	int i = 0;
	for (i = 0; i < 20; i++) {
    1066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1068:	3301      	adds	r3, #1
    106a:	66fb      	str	r3, [r7, #108]	; 0x6c
    106c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    106e:	2b13      	cmp	r3, #19
    1070:	ddb3      	ble.n	fda <GSM_InitModule+0x22>
				WDTFeed();
			}
			return sim_check;
		}
	}
	return FAIL;
    1072:	f04f 33ff 	mov.w	r3, #4294967295
}
    1076:	4618      	mov	r0, r3
    1078:	3770      	adds	r7, #112	; 0x70
    107a:	46bd      	mov	sp, r7
    107c:	bd80      	pop	{r7, pc}
    107e:	bf00      	nop
    1080:	2009c040 	.word	0x2009c040
    1084:	0000653c 	.word	0x0000653c
    1088:	00006850 	.word	0x00006850
    108c:	00006854 	.word	0x00006854
    1090:	00006860 	.word	0x00006860
    1094:	0000686c 	.word	0x0000686c
    1098:	00006880 	.word	0x00006880
    109c:	00006894 	.word	0x00006894

000010a0 <GSM_GetRegStat>:
	UTIL_GetPartOfString(response, csq_str, ':', ',', 0, 0);
	return atoi(csq_str);
}


int GSM_GetRegStat(){
    10a0:	b580      	push	{r7, lr}
    10a2:	b09e      	sub	sp, #120	; 0x78
    10a4:	af00      	add	r7, sp, #0
	char csq_str[20];
	char response[100];
	GSM_SendAt("AT+CREG?", response, 100);
    10a6:	463b      	mov	r3, r7
    10a8:	4812      	ldr	r0, [pc, #72]	; (10f4 <GSM_GetRegStat+0x54>)
    10aa:	4619      	mov	r1, r3
    10ac:	2264      	movs	r2, #100	; 0x64
    10ae:	f7ff fc8b 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "+CREG") != NULL && ((strstr(response, ",5") != NULL) || (strstr(response, ",1") != NULL))) {
    10b2:	463b      	mov	r3, r7
    10b4:	4618      	mov	r0, r3
    10b6:	4910      	ldr	r1, [pc, #64]	; (10f8 <GSM_GetRegStat+0x58>)
    10b8:	f004 f98b 	bl	53d2 <strstr>
    10bc:	4603      	mov	r3, r0
    10be:	2b00      	cmp	r3, #0
    10c0:	d011      	beq.n	10e6 <GSM_GetRegStat+0x46>
    10c2:	463b      	mov	r3, r7
    10c4:	4618      	mov	r0, r3
    10c6:	490d      	ldr	r1, [pc, #52]	; (10fc <GSM_GetRegStat+0x5c>)
    10c8:	f004 f983 	bl	53d2 <strstr>
    10cc:	4603      	mov	r3, r0
    10ce:	2b00      	cmp	r3, #0
    10d0:	d107      	bne.n	10e2 <GSM_GetRegStat+0x42>
    10d2:	463b      	mov	r3, r7
    10d4:	4618      	mov	r0, r3
    10d6:	490a      	ldr	r1, [pc, #40]	; (1100 <GSM_GetRegStat+0x60>)
    10d8:	f004 f97b 	bl	53d2 <strstr>
    10dc:	4603      	mov	r3, r0
    10de:	2b00      	cmp	r3, #0
    10e0:	d001      	beq.n	10e6 <GSM_GetRegStat+0x46>
		return SUCCESS;
    10e2:	2300      	movs	r3, #0
    10e4:	e001      	b.n	10ea <GSM_GetRegStat+0x4a>
	}
	return FAIL;
    10e6:	f04f 33ff 	mov.w	r3, #4294967295
}
    10ea:	4618      	mov	r0, r3
    10ec:	3778      	adds	r7, #120	; 0x78
    10ee:	46bd      	mov	sp, r7
    10f0:	bd80      	pop	{r7, pc}
    10f2:	bf00      	nop
    10f4:	000068ac 	.word	0x000068ac
    10f8:	000068b8 	.word	0x000068b8
    10fc:	000068c0 	.word	0x000068c0
    1100:	000068c4 	.word	0x000068c4

00001104 <GSM_CheckSimCard>:
	return FAIL;
}



int GSM_CheckSimCard() {
    1104:	b580      	push	{r7, lr}
    1106:	b09a      	sub	sp, #104	; 0x68
    1108:	af00      	add	r7, sp, #0
	TraceNL("Entered check sim card.");
    110a:	480c      	ldr	r0, [pc, #48]	; (113c <GSM_CheckSimCard+0x38>)
    110c:	f001 fa10 	bl	2530 <TraceNL>
	char response[100];
	GSM_SendAt("AT+CPIN?", response, 250);
    1110:	1d3b      	adds	r3, r7, #4
    1112:	480b      	ldr	r0, [pc, #44]	; (1140 <GSM_CheckSimCard+0x3c>)
    1114:	4619      	mov	r1, r3
    1116:	22fa      	movs	r2, #250	; 0xfa
    1118:	f7ff fc56 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "READY") != NULL)
    111c:	1d3b      	adds	r3, r7, #4
    111e:	4618      	mov	r0, r3
    1120:	4908      	ldr	r1, [pc, #32]	; (1144 <GSM_CheckSimCard+0x40>)
    1122:	f004 f956 	bl	53d2 <strstr>
    1126:	4603      	mov	r3, r0
    1128:	2b00      	cmp	r3, #0
    112a:	d001      	beq.n	1130 <GSM_CheckSimCard+0x2c>
		return ( SUCCESS );
    112c:	2300      	movs	r3, #0
    112e:	e001      	b.n	1134 <GSM_CheckSimCard+0x30>
	return ( FAIL );
    1130:	f04f 33ff 	mov.w	r3, #4294967295
}
    1134:	4618      	mov	r0, r3
    1136:	3768      	adds	r7, #104	; 0x68
    1138:	46bd      	mov	sp, r7
    113a:	bd80      	pop	{r7, pc}
    113c:	000068cc 	.word	0x000068cc
    1140:	000068e4 	.word	0x000068e4
    1144:	000068f0 	.word	0x000068f0

00001148 <GSM_GetImei>:

void GSM_GetImei() {
    1148:	b580      	push	{r7, lr}
    114a:	b09a      	sub	sp, #104	; 0x68
    114c:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+GSN", response, 500);
    114e:	1d3b      	adds	r3, r7, #4
    1150:	480a      	ldr	r0, [pc, #40]	; (117c <GSM_GetImei+0x34>)
    1152:	4619      	mov	r1, r3
    1154:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1158:	f7ff fc36 	bl	9c8 <GSM_SendAt>
	TraceNL("IMEI : ");
    115c:	4808      	ldr	r0, [pc, #32]	; (1180 <GSM_GetImei+0x38>)
    115e:	f001 f9e7 	bl	2530 <TraceNL>
	strncpy(imei, response + 9, 15);
    1162:	1d3b      	adds	r3, r7, #4
    1164:	3309      	adds	r3, #9
    1166:	4807      	ldr	r0, [pc, #28]	; (1184 <GSM_GetImei+0x3c>)
    1168:	4619      	mov	r1, r3
    116a:	220f      	movs	r2, #15
    116c:	f004 f905 	bl	537a <strncpy>
	TraceNL(imei);
    1170:	4804      	ldr	r0, [pc, #16]	; (1184 <GSM_GetImei+0x3c>)
    1172:	f001 f9dd 	bl	2530 <TraceNL>
}
    1176:	3768      	adds	r7, #104	; 0x68
    1178:	46bd      	mov	sp, r7
    117a:	bd80      	pop	{r7, pc}
    117c:	000068f8 	.word	0x000068f8
    1180:	00006900 	.word	0x00006900
    1184:	10000e0c 	.word	0x10000e0c

00001188 <GSM_GetImsi>:

void GSM_GetImsi() {
    1188:	b590      	push	{r4, r7, lr}
    118a:	b09d      	sub	sp, #116	; 0x74
    118c:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+CIMI", response, 500);
    118e:	463b      	mov	r3, r7
    1190:	4827      	ldr	r0, [pc, #156]	; (1230 <GSM_GetImsi+0xa8>)
    1192:	4619      	mov	r1, r3
    1194:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1198:	f7ff fc16 	bl	9c8 <GSM_SendAt>
	Trace("IMSI : ");
    119c:	4825      	ldr	r0, [pc, #148]	; (1234 <GSM_GetImsi+0xac>)
    119e:	f001 f9b7 	bl	2510 <Trace>
	int i;
	int index = 0;
    11a2:	2300      	movs	r3, #0
    11a4:	66bb      	str	r3, [r7, #104]	; 0x68
	int is_start = 0;
    11a6:	2300      	movs	r3, #0
    11a8:	667b      	str	r3, [r7, #100]	; 0x64
	for (i = 0; i < strlen(response); i++) {
    11aa:	2300      	movs	r3, #0
    11ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    11ae:	e02c      	b.n	120a <GSM_GetImsi+0x82>
		if (index > 19)
    11b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    11b2:	2b13      	cmp	r3, #19
    11b4:	dd00      	ble.n	11b8 <GSM_GetImsi+0x30>
			break;
    11b6:	e030      	b.n	121a <GSM_GetImsi+0x92>
		if ( isdigit(response[i]))
    11b8:	463a      	mov	r2, r7
    11ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    11bc:	4413      	add	r3, r2
    11be:	781b      	ldrb	r3, [r3, #0]
    11c0:	3380      	adds	r3, #128	; 0x80
    11c2:	4a1d      	ldr	r2, [pc, #116]	; (1238 <GSM_GetImsi+0xb0>)
    11c4:	5cd3      	ldrb	r3, [r2, r3]
    11c6:	f003 0320 	and.w	r3, r3, #32
    11ca:	2b00      	cmp	r3, #0
    11cc:	d001      	beq.n	11d2 <GSM_GetImsi+0x4a>
			is_start = 1;
    11ce:	2301      	movs	r3, #1
    11d0:	667b      	str	r3, [r7, #100]	; 0x64
		if (is_start == 1 && response[i] == '\n')
    11d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    11d4:	2b01      	cmp	r3, #1
    11d6:	d106      	bne.n	11e6 <GSM_GetImsi+0x5e>
    11d8:	463a      	mov	r2, r7
    11da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    11dc:	4413      	add	r3, r2
    11de:	781b      	ldrb	r3, [r3, #0]
    11e0:	2b0a      	cmp	r3, #10
    11e2:	d100      	bne.n	11e6 <GSM_GetImsi+0x5e>
			break;
    11e4:	e019      	b.n	121a <GSM_GetImsi+0x92>
		if (is_start == 1) {
    11e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    11e8:	2b01      	cmp	r3, #1
    11ea:	d10b      	bne.n	1204 <GSM_GetImsi+0x7c>
			imsi[index] = response[i];
    11ec:	463a      	mov	r2, r7
    11ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    11f0:	4413      	add	r3, r2
    11f2:	7819      	ldrb	r1, [r3, #0]
    11f4:	4a11      	ldr	r2, [pc, #68]	; (123c <GSM_GetImsi+0xb4>)
    11f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    11f8:	4413      	add	r3, r2
    11fa:	460a      	mov	r2, r1
    11fc:	701a      	strb	r2, [r3, #0]
			index++;
    11fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1200:	3301      	adds	r3, #1
    1202:	66bb      	str	r3, [r7, #104]	; 0x68
	GSM_SendAt("AT+CIMI", response, 500);
	Trace("IMSI : ");
	int i;
	int index = 0;
	int is_start = 0;
	for (i = 0; i < strlen(response); i++) {
    1204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1206:	3301      	adds	r3, #1
    1208:	66fb      	str	r3, [r7, #108]	; 0x6c
    120a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    120c:	463b      	mov	r3, r7
    120e:	4618      	mov	r0, r3
    1210:	f004 f88e 	bl	5330 <strlen>
    1214:	4603      	mov	r3, r0
    1216:	429c      	cmp	r4, r3
    1218:	d3ca      	bcc.n	11b0 <GSM_GetImsi+0x28>
		if (is_start == 1) {
			imsi[index] = response[i];
			index++;
		}
	}
	imsi[index - 1] = '\0';
    121a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    121c:	3b01      	subs	r3, #1
    121e:	4a07      	ldr	r2, [pc, #28]	; (123c <GSM_GetImsi+0xb4>)
    1220:	2100      	movs	r1, #0
    1222:	54d1      	strb	r1, [r2, r3]
	TraceNL(imsi);
    1224:	4805      	ldr	r0, [pc, #20]	; (123c <GSM_GetImsi+0xb4>)
    1226:	f001 f983 	bl	2530 <TraceNL>
}
    122a:	3774      	adds	r7, #116	; 0x74
    122c:	46bd      	mov	sp, r7
    122e:	bd90      	pop	{r4, r7, pc}
    1230:	00006908 	.word	0x00006908
    1234:	00006910 	.word	0x00006910
    1238:	000071a0 	.word	0x000071a0
    123c:	10000df8 	.word	0x10000df8

00001240 <GSM_EchoOFF>:
	TraceNL("ECHO ON");
}


void GSM_EchoOFF( )
{
    1240:	b580      	push	{r7, lr}
    1242:	b09a      	sub	sp, #104	; 0x68
    1244:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("ATE0", response, 500);
    1246:	1d3b      	adds	r3, r7, #4
    1248:	4805      	ldr	r0, [pc, #20]	; (1260 <GSM_EchoOFF+0x20>)
    124a:	4619      	mov	r1, r3
    124c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1250:	f7ff fbba 	bl	9c8 <GSM_SendAt>
	TraceNL("ECHO OFF");
    1254:	4803      	ldr	r0, [pc, #12]	; (1264 <GSM_EchoOFF+0x24>)
    1256:	f001 f96b 	bl	2530 <TraceNL>
}
    125a:	3768      	adds	r7, #104	; 0x68
    125c:	46bd      	mov	sp, r7
    125e:	bd80      	pop	{r7, pc}
    1260:	00006928 	.word	0x00006928
    1264:	00006930 	.word	0x00006930

00001268 <GSM_TCP_Close>:

void GSM_TCP_Close( void )
{
    1268:	b580      	push	{r7, lr}
    126a:	b0b2      	sub	sp, #200	; 0xc8
    126c:	af00      	add	r7, sp, #0
	char response[200];
	GSM_SendAt("AT+QICLOSE", response, 500);
    126e:	463b      	mov	r3, r7
    1270:	4805      	ldr	r0, [pc, #20]	; (1288 <GSM_TCP_Close+0x20>)
    1272:	4619      	mov	r1, r3
    1274:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1278:	f7ff fba6 	bl	9c8 <GSM_SendAt>
	TraceNL("CLOSE TCP connection ");
    127c:	4803      	ldr	r0, [pc, #12]	; (128c <GSM_TCP_Close+0x24>)
    127e:	f001 f957 	bl	2530 <TraceNL>

}
    1282:	37c8      	adds	r7, #200	; 0xc8
    1284:	46bd      	mov	sp, r7
    1286:	bd80      	pop	{r7, pc}
    1288:	0000693c 	.word	0x0000693c
    128c:	00006948 	.word	0x00006948

00001290 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1290:	b480      	push	{r7}
    1292:	b083      	sub	sp, #12
    1294:	af00      	add	r7, sp, #0
    1296:	4603      	mov	r3, r0
    1298:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    129a:	4908      	ldr	r1, [pc, #32]	; (12bc <NVIC_EnableIRQ+0x2c>)
    129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    12a0:	095b      	lsrs	r3, r3, #5
    12a2:	79fa      	ldrb	r2, [r7, #7]
    12a4:	f002 021f 	and.w	r2, r2, #31
    12a8:	2001      	movs	r0, #1
    12aa:	fa00 f202 	lsl.w	r2, r0, r2
    12ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    12b2:	370c      	adds	r7, #12
    12b4:	46bd      	mov	sp, r7
    12b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    12ba:	4770      	bx	lr
    12bc:	e000e100 	.word	0xe000e100

000012c0 <I2C0_IRQHandler>:

volatile uint32_t RdIndex_1,RdIndex_0 = 0;
volatile uint32_t WrIndex_1,WrIndex_0 = 0;


void I2C0_IRQHandler(void) {
    12c0:	b480      	push	{r7}
    12c2:	b083      	sub	sp, #12
    12c4:	af00      	add	r7, sp, #0
	uint8_t StatValue;
	/* this handler deals with master read and master write only */
	StatValue = LPC_I2C0->I2STAT;
    12c6:	4ba9      	ldr	r3, [pc, #676]	; (156c <I2C0_IRQHandler+0x2ac>)
    12c8:	685b      	ldr	r3, [r3, #4]
    12ca:	71fb      	strb	r3, [r7, #7]
	switch (StatValue) {
    12cc:	79fb      	ldrb	r3, [r7, #7]
    12ce:	3b08      	subs	r3, #8
    12d0:	2b50      	cmp	r3, #80	; 0x50
    12d2:	f200 8184 	bhi.w	15de <I2C0_IRQHandler+0x31e>
    12d6:	a201      	add	r2, pc, #4	; (adr r2, 12dc <I2C0_IRQHandler+0x1c>)
    12d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    12dc:	00001421 	.word	0x00001421
    12e0:	000015df 	.word	0x000015df
    12e4:	000015df 	.word	0x000015df
    12e8:	000015df 	.word	0x000015df
    12ec:	000015df 	.word	0x000015df
    12f0:	000015df 	.word	0x000015df
    12f4:	000015df 	.word	0x000015df
    12f8:	000015df 	.word	0x000015df
    12fc:	00001443 	.word	0x00001443
    1300:	000015df 	.word	0x000015df
    1304:	000015df 	.word	0x000015df
    1308:	000015df 	.word	0x000015df
    130c:	000015df 	.word	0x000015df
    1310:	000015df 	.word	0x000015df
    1314:	000015df 	.word	0x000015df
    1318:	000015df 	.word	0x000015df
    131c:	0000146d 	.word	0x0000146d
    1320:	000015df 	.word	0x000015df
    1324:	000015df 	.word	0x000015df
    1328:	000015df 	.word	0x000015df
    132c:	000015df 	.word	0x000015df
    1330:	000015df 	.word	0x000015df
    1334:	000015df 	.word	0x000015df
    1338:	000015df 	.word	0x000015df
    133c:	000015d1 	.word	0x000015d1
    1340:	000015df 	.word	0x000015df
    1344:	000015df 	.word	0x000015df
    1348:	000015df 	.word	0x000015df
    134c:	000015df 	.word	0x000015df
    1350:	000015df 	.word	0x000015df
    1354:	000015df 	.word	0x000015df
    1358:	000015df 	.word	0x000015df
    135c:	00001497 	.word	0x00001497
    1360:	000015df 	.word	0x000015df
    1364:	000015df 	.word	0x000015df
    1368:	000015df 	.word	0x000015df
    136c:	000015df 	.word	0x000015df
    1370:	000015df 	.word	0x000015df
    1374:	000015df 	.word	0x000015df
    1378:	000015df 	.word	0x000015df
    137c:	000014dd 	.word	0x000014dd
    1380:	000015df 	.word	0x000015df
    1384:	000015df 	.word	0x000015df
    1388:	000015df 	.word	0x000015df
    138c:	000015df 	.word	0x000015df
    1390:	000015df 	.word	0x000015df
    1394:	000015df 	.word	0x000015df
    1398:	000015df 	.word	0x000015df
    139c:	000015df 	.word	0x000015df
    13a0:	000015df 	.word	0x000015df
    13a4:	000015df 	.word	0x000015df
    13a8:	000015df 	.word	0x000015df
    13ac:	000015df 	.word	0x000015df
    13b0:	000015df 	.word	0x000015df
    13b4:	000015df 	.word	0x000015df
    13b8:	000015df 	.word	0x000015df
    13bc:	0000155d 	.word	0x0000155d
    13c0:	000015df 	.word	0x000015df
    13c4:	000015df 	.word	0x000015df
    13c8:	000015df 	.word	0x000015df
    13cc:	000015df 	.word	0x000015df
    13d0:	000015df 	.word	0x000015df
    13d4:	000015df 	.word	0x000015df
    13d8:	000015df 	.word	0x000015df
    13dc:	000015d1 	.word	0x000015d1
    13e0:	000015df 	.word	0x000015df
    13e4:	000015df 	.word	0x000015df
    13e8:	000015df 	.word	0x000015df
    13ec:	000015df 	.word	0x000015df
    13f0:	000015df 	.word	0x000015df
    13f4:	000015df 	.word	0x000015df
    13f8:	000015df 	.word	0x000015df
    13fc:	00001589 	.word	0x00001589
    1400:	000015df 	.word	0x000015df
    1404:	000015df 	.word	0x000015df
    1408:	000015df 	.word	0x000015df
    140c:	000015df 	.word	0x000015df
    1410:	000015df 	.word	0x000015df
    1414:	000015df 	.word	0x000015df
    1418:	000015df 	.word	0x000015df
    141c:	00001589 	.word	0x00001589
		case 0x08: /* A Start condition is issued. */
			LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    1420:	4952      	ldr	r1, [pc, #328]	; (156c <I2C0_IRQHandler+0x2ac>)
    1422:	4b53      	ldr	r3, [pc, #332]	; (1570 <I2C0_IRQHandler+0x2b0>)
    1424:	681b      	ldr	r3, [r3, #0]
    1426:	1c5a      	adds	r2, r3, #1
    1428:	4851      	ldr	r0, [pc, #324]	; (1570 <I2C0_IRQHandler+0x2b0>)
    142a:	6002      	str	r2, [r0, #0]
    142c:	4a51      	ldr	r2, [pc, #324]	; (1574 <I2C0_IRQHandler+0x2b4>)
    142e:	5cd3      	ldrb	r3, [r2, r3]
    1430:	b2db      	uxtb	r3, r3
    1432:	608b      	str	r3, [r1, #8]
			LPC_I2C0->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    1434:	4b4d      	ldr	r3, [pc, #308]	; (156c <I2C0_IRQHandler+0x2ac>)
    1436:	2228      	movs	r2, #40	; 0x28
    1438:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = I2C_STARTED;
    143a:	4b4f      	ldr	r3, [pc, #316]	; (1578 <I2C0_IRQHandler+0x2b8>)
    143c:	2201      	movs	r2, #1
    143e:	601a      	str	r2, [r3, #0]
			break;
    1440:	e0d1      	b.n	15e6 <I2C0_IRQHandler+0x326>
		case 0x10: /* A repeated started is issued */
			if (!I2C0_Cmd) {
    1442:	4b4e      	ldr	r3, [pc, #312]	; (157c <I2C0_IRQHandler+0x2bc>)
    1444:	681b      	ldr	r3, [r3, #0]
    1446:	2b00      	cmp	r3, #0
    1448:	d109      	bne.n	145e <I2C0_IRQHandler+0x19e>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    144a:	4948      	ldr	r1, [pc, #288]	; (156c <I2C0_IRQHandler+0x2ac>)
    144c:	4b48      	ldr	r3, [pc, #288]	; (1570 <I2C0_IRQHandler+0x2b0>)
    144e:	681b      	ldr	r3, [r3, #0]
    1450:	1c5a      	adds	r2, r3, #1
    1452:	4847      	ldr	r0, [pc, #284]	; (1570 <I2C0_IRQHandler+0x2b0>)
    1454:	6002      	str	r2, [r0, #0]
    1456:	4a47      	ldr	r2, [pc, #284]	; (1574 <I2C0_IRQHandler+0x2b4>)
    1458:	5cd3      	ldrb	r3, [r2, r3]
    145a:	b2db      	uxtb	r3, r3
    145c:	608b      	str	r3, [r1, #8]
			}
			LPC_I2C0->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    145e:	4b43      	ldr	r3, [pc, #268]	; (156c <I2C0_IRQHandler+0x2ac>)
    1460:	2228      	movs	r2, #40	; 0x28
    1462:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = I2C_RESTARTED;
    1464:	4b44      	ldr	r3, [pc, #272]	; (1578 <I2C0_IRQHandler+0x2b8>)
    1466:	2202      	movs	r2, #2
    1468:	601a      	str	r2, [r3, #0]
			break;
    146a:	e0bc      	b.n	15e6 <I2C0_IRQHandler+0x326>
		case 0x18: /* Regardless, it's a ACK */
			if (I2C0_MasterState == I2C_STARTED) {
    146c:	4b42      	ldr	r3, [pc, #264]	; (1578 <I2C0_IRQHandler+0x2b8>)
    146e:	681b      	ldr	r3, [r3, #0]
    1470:	2b01      	cmp	r3, #1
    1472:	d10c      	bne.n	148e <I2C0_IRQHandler+0x1ce>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    1474:	493d      	ldr	r1, [pc, #244]	; (156c <I2C0_IRQHandler+0x2ac>)
    1476:	4b3e      	ldr	r3, [pc, #248]	; (1570 <I2C0_IRQHandler+0x2b0>)
    1478:	681b      	ldr	r3, [r3, #0]
    147a:	1c5a      	adds	r2, r3, #1
    147c:	483c      	ldr	r0, [pc, #240]	; (1570 <I2C0_IRQHandler+0x2b0>)
    147e:	6002      	str	r2, [r0, #0]
    1480:	4a3c      	ldr	r2, [pc, #240]	; (1574 <I2C0_IRQHandler+0x2b4>)
    1482:	5cd3      	ldrb	r3, [r2, r3]
    1484:	b2db      	uxtb	r3, r3
    1486:	608b      	str	r3, [r1, #8]
				I2C0_MasterState = DATA_ACK;
    1488:	4b3b      	ldr	r3, [pc, #236]	; (1578 <I2C0_IRQHandler+0x2b8>)
    148a:	2204      	movs	r2, #4
    148c:	601a      	str	r2, [r3, #0]
			}
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    148e:	4b37      	ldr	r3, [pc, #220]	; (156c <I2C0_IRQHandler+0x2ac>)
    1490:	2208      	movs	r2, #8
    1492:	619a      	str	r2, [r3, #24]
			break;
    1494:	e0a7      	b.n	15e6 <I2C0_IRQHandler+0x326>
		case 0x28: /* Data byte has been transmitted, regardless ACK or NACK */
			 if ( WrIndex_0 < I2C0_WriteLength )
    1496:	4b36      	ldr	r3, [pc, #216]	; (1570 <I2C0_IRQHandler+0x2b0>)
    1498:	681a      	ldr	r2, [r3, #0]
    149a:	4b39      	ldr	r3, [pc, #228]	; (1580 <I2C0_IRQHandler+0x2c0>)
    149c:	681b      	ldr	r3, [r3, #0]
    149e:	429a      	cmp	r2, r3
    14a0:	d20a      	bcs.n	14b8 <I2C0_IRQHandler+0x1f8>
				{
				  LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++]; /* this should be the last one */
    14a2:	4932      	ldr	r1, [pc, #200]	; (156c <I2C0_IRQHandler+0x2ac>)
    14a4:	4b32      	ldr	r3, [pc, #200]	; (1570 <I2C0_IRQHandler+0x2b0>)
    14a6:	681b      	ldr	r3, [r3, #0]
    14a8:	1c5a      	adds	r2, r3, #1
    14aa:	4831      	ldr	r0, [pc, #196]	; (1570 <I2C0_IRQHandler+0x2b0>)
    14ac:	6002      	str	r2, [r0, #0]
    14ae:	4a31      	ldr	r2, [pc, #196]	; (1574 <I2C0_IRQHandler+0x2b4>)
    14b0:	5cd3      	ldrb	r3, [r2, r3]
    14b2:	b2db      	uxtb	r3, r3
    14b4:	608b      	str	r3, [r1, #8]
    14b6:	e00d      	b.n	14d4 <I2C0_IRQHandler+0x214>
				}
				else
				{
				  if ( I2C0_ReadLength != 0 )
    14b8:	4b32      	ldr	r3, [pc, #200]	; (1584 <I2C0_IRQHandler+0x2c4>)
    14ba:	681b      	ldr	r3, [r3, #0]
    14bc:	2b00      	cmp	r3, #0
    14be:	d003      	beq.n	14c8 <I2C0_IRQHandler+0x208>
				  {
						LPC_I2C0->I2CONSET = I2CONSET_STA;   /* Set Repeated-start flag */
    14c0:	4b2a      	ldr	r3, [pc, #168]	; (156c <I2C0_IRQHandler+0x2ac>)
    14c2:	2220      	movs	r2, #32
    14c4:	601a      	str	r2, [r3, #0]
    14c6:	e005      	b.n	14d4 <I2C0_IRQHandler+0x214>
				  }
				  else
				  {
						LPC_I2C0->I2CONSET = I2CONSET_STO;      /* Set Stop flag */
    14c8:	4b28      	ldr	r3, [pc, #160]	; (156c <I2C0_IRQHandler+0x2ac>)
    14ca:	2210      	movs	r2, #16
    14cc:	601a      	str	r2, [r3, #0]
						I2C0_MasterState = I2C_IDLE;
    14ce:	4b2a      	ldr	r3, [pc, #168]	; (1578 <I2C0_IRQHandler+0x2b8>)
    14d0:	2200      	movs	r2, #0
    14d2:	601a      	str	r2, [r3, #0]
				  }
				}
				LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    14d4:	4b25      	ldr	r3, [pc, #148]	; (156c <I2C0_IRQHandler+0x2ac>)
    14d6:	2208      	movs	r2, #8
    14d8:	619a      	str	r2, [r3, #24]
				break;
    14da:	e084      	b.n	15e6 <I2C0_IRQHandler+0x326>
		case 0x30:
			if (WrIndex_0 != I2C0_WriteLength) {
    14dc:	4b24      	ldr	r3, [pc, #144]	; (1570 <I2C0_IRQHandler+0x2b0>)
    14de:	681a      	ldr	r2, [r3, #0]
    14e0:	4b27      	ldr	r3, [pc, #156]	; (1580 <I2C0_IRQHandler+0x2c0>)
    14e2:	681b      	ldr	r3, [r3, #0]
    14e4:	429a      	cmp	r2, r3
    14e6:	d024      	beq.n	1532 <I2C0_IRQHandler+0x272>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[1 + WrIndex_0]; /* this should be the last one */
    14e8:	4a20      	ldr	r2, [pc, #128]	; (156c <I2C0_IRQHandler+0x2ac>)
    14ea:	4b21      	ldr	r3, [pc, #132]	; (1570 <I2C0_IRQHandler+0x2b0>)
    14ec:	681b      	ldr	r3, [r3, #0]
    14ee:	3301      	adds	r3, #1
    14f0:	4920      	ldr	r1, [pc, #128]	; (1574 <I2C0_IRQHandler+0x2b4>)
    14f2:	5ccb      	ldrb	r3, [r1, r3]
    14f4:	b2db      	uxtb	r3, r3
    14f6:	6093      	str	r3, [r2, #8]
				WrIndex_0++;
    14f8:	4b1d      	ldr	r3, [pc, #116]	; (1570 <I2C0_IRQHandler+0x2b0>)
    14fa:	681b      	ldr	r3, [r3, #0]
    14fc:	3301      	adds	r3, #1
    14fe:	4a1c      	ldr	r2, [pc, #112]	; (1570 <I2C0_IRQHandler+0x2b0>)
    1500:	6013      	str	r3, [r2, #0]
				if (WrIndex_0 != I2C0_WriteLength) {
    1502:	4b1b      	ldr	r3, [pc, #108]	; (1570 <I2C0_IRQHandler+0x2b0>)
    1504:	681a      	ldr	r2, [r3, #0]
    1506:	4b1e      	ldr	r3, [pc, #120]	; (1580 <I2C0_IRQHandler+0x2c0>)
    1508:	681b      	ldr	r3, [r3, #0]
    150a:	429a      	cmp	r2, r3
    150c:	d003      	beq.n	1516 <I2C0_IRQHandler+0x256>
					I2C0_MasterState = DATA_ACK;
    150e:	4b1a      	ldr	r3, [pc, #104]	; (1578 <I2C0_IRQHandler+0x2b8>)
    1510:	2204      	movs	r2, #4
    1512:	601a      	str	r2, [r3, #0]
    1514:	e01e      	b.n	1554 <I2C0_IRQHandler+0x294>
				} else {
					I2C0_MasterState = DATA_NACK;
    1516:	4b18      	ldr	r3, [pc, #96]	; (1578 <I2C0_IRQHandler+0x2b8>)
    1518:	2205      	movs	r2, #5
    151a:	601a      	str	r2, [r3, #0]
					if (I2C0_ReadLength != 0) {
    151c:	4b19      	ldr	r3, [pc, #100]	; (1584 <I2C0_IRQHandler+0x2c4>)
    151e:	681b      	ldr	r3, [r3, #0]
    1520:	2b00      	cmp	r3, #0
    1522:	d017      	beq.n	1554 <I2C0_IRQHandler+0x294>
						LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    1524:	4b11      	ldr	r3, [pc, #68]	; (156c <I2C0_IRQHandler+0x2ac>)
    1526:	2220      	movs	r2, #32
    1528:	601a      	str	r2, [r3, #0]
						I2C0_MasterState = I2C_REPEATED_START;
    152a:	4b13      	ldr	r3, [pc, #76]	; (1578 <I2C0_IRQHandler+0x2b8>)
    152c:	2203      	movs	r2, #3
    152e:	601a      	str	r2, [r3, #0]
    1530:	e010      	b.n	1554 <I2C0_IRQHandler+0x294>
					}
				}
			} else {
				if (I2C0_ReadLength != 0) {
    1532:	4b14      	ldr	r3, [pc, #80]	; (1584 <I2C0_IRQHandler+0x2c4>)
    1534:	681b      	ldr	r3, [r3, #0]
    1536:	2b00      	cmp	r3, #0
    1538:	d006      	beq.n	1548 <I2C0_IRQHandler+0x288>
					LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    153a:	4b0c      	ldr	r3, [pc, #48]	; (156c <I2C0_IRQHandler+0x2ac>)
    153c:	2220      	movs	r2, #32
    153e:	601a      	str	r2, [r3, #0]
					I2C0_MasterState = I2C_REPEATED_START;
    1540:	4b0d      	ldr	r3, [pc, #52]	; (1578 <I2C0_IRQHandler+0x2b8>)
    1542:	2203      	movs	r2, #3
    1544:	601a      	str	r2, [r3, #0]
    1546:	e005      	b.n	1554 <I2C0_IRQHandler+0x294>
				} else {
					I2C0_MasterState = DATA_NACK;
    1548:	4b0b      	ldr	r3, [pc, #44]	; (1578 <I2C0_IRQHandler+0x2b8>)
    154a:	2205      	movs	r2, #5
    154c:	601a      	str	r2, [r3, #0]
					LPC_I2C0->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    154e:	4b07      	ldr	r3, [pc, #28]	; (156c <I2C0_IRQHandler+0x2ac>)
    1550:	2210      	movs	r2, #16
    1552:	601a      	str	r2, [r3, #0]
				}
			}
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    1554:	4b05      	ldr	r3, [pc, #20]	; (156c <I2C0_IRQHandler+0x2ac>)
    1556:	2208      	movs	r2, #8
    1558:	619a      	str	r2, [r3, #24]
			break;
    155a:	e044      	b.n	15e6 <I2C0_IRQHandler+0x326>
		case 0x40: /* Master Receive, SLA_R has been sent */
			LPC_I2C0->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    155c:	4b03      	ldr	r3, [pc, #12]	; (156c <I2C0_IRQHandler+0x2ac>)
    155e:	2204      	movs	r2, #4
    1560:	601a      	str	r2, [r3, #0]
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    1562:	4b02      	ldr	r3, [pc, #8]	; (156c <I2C0_IRQHandler+0x2ac>)
    1564:	2208      	movs	r2, #8
    1566:	619a      	str	r2, [r3, #24]
			break;
    1568:	e03d      	b.n	15e6 <I2C0_IRQHandler+0x326>
    156a:	bf00      	nop
    156c:	4001c000 	.word	0x4001c000
    1570:	1000002c 	.word	0x1000002c
    1574:	10000ecc 	.word	0x10000ecc
    1578:	10000024 	.word	0x10000024
    157c:	10000eec 	.word	0x10000eec
    1580:	10000ea8 	.word	0x10000ea8
    1584:	10000e50 	.word	0x10000e50
		case 0x50: /* Data byte has been received, regardless following ACK or NACK */
		case 0x58:
			I2C0_MasterBuffer[3 + RdIndex_0] = LPC_I2C0->I2DAT;
    1588:	4b19      	ldr	r3, [pc, #100]	; (15f0 <I2C0_IRQHandler+0x330>)
    158a:	681b      	ldr	r3, [r3, #0]
    158c:	3303      	adds	r3, #3
    158e:	4a19      	ldr	r2, [pc, #100]	; (15f4 <I2C0_IRQHandler+0x334>)
    1590:	6892      	ldr	r2, [r2, #8]
    1592:	b2d1      	uxtb	r1, r2
    1594:	4a18      	ldr	r2, [pc, #96]	; (15f8 <I2C0_IRQHandler+0x338>)
    1596:	54d1      	strb	r1, [r2, r3]
			RdIndex_0++;
    1598:	4b15      	ldr	r3, [pc, #84]	; (15f0 <I2C0_IRQHandler+0x330>)
    159a:	681b      	ldr	r3, [r3, #0]
    159c:	3301      	adds	r3, #1
    159e:	4a14      	ldr	r2, [pc, #80]	; (15f0 <I2C0_IRQHandler+0x330>)
    15a0:	6013      	str	r3, [r2, #0]
			if (RdIndex_0 != I2C0_ReadLength) {
    15a2:	4b13      	ldr	r3, [pc, #76]	; (15f0 <I2C0_IRQHandler+0x330>)
    15a4:	681a      	ldr	r2, [r3, #0]
    15a6:	4b15      	ldr	r3, [pc, #84]	; (15fc <I2C0_IRQHandler+0x33c>)
    15a8:	681b      	ldr	r3, [r3, #0]
    15aa:	429a      	cmp	r2, r3
    15ac:	d003      	beq.n	15b6 <I2C0_IRQHandler+0x2f6>
				I2C0_MasterState = DATA_ACK;
    15ae:	4b14      	ldr	r3, [pc, #80]	; (1600 <I2C0_IRQHandler+0x340>)
    15b0:	2204      	movs	r2, #4
    15b2:	601a      	str	r2, [r3, #0]
    15b4:	e005      	b.n	15c2 <I2C0_IRQHandler+0x302>
			} else {
				RdIndex_0 = 0;
    15b6:	4b0e      	ldr	r3, [pc, #56]	; (15f0 <I2C0_IRQHandler+0x330>)
    15b8:	2200      	movs	r2, #0
    15ba:	601a      	str	r2, [r3, #0]
				I2C0_MasterState = DATA_NACK;
    15bc:	4b10      	ldr	r3, [pc, #64]	; (1600 <I2C0_IRQHandler+0x340>)
    15be:	2205      	movs	r2, #5
    15c0:	601a      	str	r2, [r3, #0]
			}
			LPC_I2C0->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    15c2:	4b0c      	ldr	r3, [pc, #48]	; (15f4 <I2C0_IRQHandler+0x334>)
    15c4:	2204      	movs	r2, #4
    15c6:	601a      	str	r2, [r3, #0]
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    15c8:	4b0a      	ldr	r3, [pc, #40]	; (15f4 <I2C0_IRQHandler+0x334>)
    15ca:	2208      	movs	r2, #8
    15cc:	619a      	str	r2, [r3, #24]
			break;
    15ce:	e00a      	b.n	15e6 <I2C0_IRQHandler+0x326>
		case 0x20: /* regardless, it's a NACK */
		case 0x48:
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    15d0:	4b08      	ldr	r3, [pc, #32]	; (15f4 <I2C0_IRQHandler+0x334>)
    15d2:	2208      	movs	r2, #8
    15d4:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = DATA_NACK;
    15d6:	4b0a      	ldr	r3, [pc, #40]	; (1600 <I2C0_IRQHandler+0x340>)
    15d8:	2205      	movs	r2, #5
    15da:	601a      	str	r2, [r3, #0]
			break;
    15dc:	e003      	b.n	15e6 <I2C0_IRQHandler+0x326>
		case 0x38: /* Arbitration lost, in this example, we don't
		 deal with multiple master situation */
		default:
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    15de:	4b05      	ldr	r3, [pc, #20]	; (15f4 <I2C0_IRQHandler+0x334>)
    15e0:	2208      	movs	r2, #8
    15e2:	619a      	str	r2, [r3, #24]
			break;
    15e4:	bf00      	nop
	}
}
    15e6:	370c      	adds	r7, #12
    15e8:	46bd      	mov	sp, r7
    15ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ee:	4770      	bx	lr
    15f0:	10000028 	.word	0x10000028
    15f4:	4001c000 	.word	0x4001c000
    15f8:	10000ecc 	.word	0x10000ecc
    15fc:	10000e50 	.word	0x10000e50
    1600:	10000024 	.word	0x10000024

00001604 <I2C1_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void I2C1_IRQHandler(void) {
    1604:	b480      	push	{r7}
    1606:	b083      	sub	sp, #12
    1608:	af00      	add	r7, sp, #0
	uint8_t StatValue;
	/* this handler deals with master read and master write only */
	StatValue = LPC_I2C1->I2STAT;
    160a:	4bae      	ldr	r3, [pc, #696]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    160c:	685b      	ldr	r3, [r3, #4]
    160e:	71fb      	strb	r3, [r7, #7]
	switch (StatValue) {
    1610:	79fb      	ldrb	r3, [r7, #7]
    1612:	3b08      	subs	r3, #8
    1614:	2b50      	cmp	r3, #80	; 0x50
    1616:	f200 814b 	bhi.w	18b0 <I2C1_IRQHandler+0x2ac>
    161a:	a201      	add	r2, pc, #4	; (adr r2, 1620 <I2C1_IRQHandler+0x1c>)
    161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1620:	00001765 	.word	0x00001765
    1624:	000018b1 	.word	0x000018b1
    1628:	000018b1 	.word	0x000018b1
    162c:	000018b1 	.word	0x000018b1
    1630:	000018b1 	.word	0x000018b1
    1634:	000018b1 	.word	0x000018b1
    1638:	000018b1 	.word	0x000018b1
    163c:	000018b1 	.word	0x000018b1
    1640:	0000177d 	.word	0x0000177d
    1644:	000018b1 	.word	0x000018b1
    1648:	000018b1 	.word	0x000018b1
    164c:	000018b1 	.word	0x000018b1
    1650:	000018b1 	.word	0x000018b1
    1654:	000018b1 	.word	0x000018b1
    1658:	000018b1 	.word	0x000018b1
    165c:	000018b1 	.word	0x000018b1
    1660:	0000179d 	.word	0x0000179d
    1664:	000018b1 	.word	0x000018b1
    1668:	000018b1 	.word	0x000018b1
    166c:	000018b1 	.word	0x000018b1
    1670:	000018b1 	.word	0x000018b1
    1674:	000018b1 	.word	0x000018b1
    1678:	000018b1 	.word	0x000018b1
    167c:	000018b1 	.word	0x000018b1
    1680:	000018a3 	.word	0x000018a3
    1684:	000018b1 	.word	0x000018b1
    1688:	000018b1 	.word	0x000018b1
    168c:	000018b1 	.word	0x000018b1
    1690:	000018b1 	.word	0x000018b1
    1694:	000018b1 	.word	0x000018b1
    1698:	000018b1 	.word	0x000018b1
    169c:	000018b1 	.word	0x000018b1
    16a0:	000017cd 	.word	0x000017cd
    16a4:	000018b1 	.word	0x000018b1
    16a8:	000018b1 	.word	0x000018b1
    16ac:	000018b1 	.word	0x000018b1
    16b0:	000018b1 	.word	0x000018b1
    16b4:	000018b1 	.word	0x000018b1
    16b8:	000018b1 	.word	0x000018b1
    16bc:	000018b1 	.word	0x000018b1
    16c0:	000017cd 	.word	0x000017cd
    16c4:	000018b1 	.word	0x000018b1
    16c8:	000018b1 	.word	0x000018b1
    16cc:	000018b1 	.word	0x000018b1
    16d0:	000018b1 	.word	0x000018b1
    16d4:	000018b1 	.word	0x000018b1
    16d8:	000018b1 	.word	0x000018b1
    16dc:	000018b1 	.word	0x000018b1
    16e0:	000018b1 	.word	0x000018b1
    16e4:	000018b1 	.word	0x000018b1
    16e8:	000018b1 	.word	0x000018b1
    16ec:	000018b1 	.word	0x000018b1
    16f0:	000018b1 	.word	0x000018b1
    16f4:	000018b1 	.word	0x000018b1
    16f8:	000018b1 	.word	0x000018b1
    16fc:	000018b1 	.word	0x000018b1
    1700:	0000184d 	.word	0x0000184d
    1704:	000018b1 	.word	0x000018b1
    1708:	000018b1 	.word	0x000018b1
    170c:	000018b1 	.word	0x000018b1
    1710:	000018b1 	.word	0x000018b1
    1714:	000018b1 	.word	0x000018b1
    1718:	000018b1 	.word	0x000018b1
    171c:	000018b1 	.word	0x000018b1
    1720:	000018a3 	.word	0x000018a3
    1724:	000018b1 	.word	0x000018b1
    1728:	000018b1 	.word	0x000018b1
    172c:	000018b1 	.word	0x000018b1
    1730:	000018b1 	.word	0x000018b1
    1734:	000018b1 	.word	0x000018b1
    1738:	000018b1 	.word	0x000018b1
    173c:	000018b1 	.word	0x000018b1
    1740:	0000185b 	.word	0x0000185b
    1744:	000018b1 	.word	0x000018b1
    1748:	000018b1 	.word	0x000018b1
    174c:	000018b1 	.word	0x000018b1
    1750:	000018b1 	.word	0x000018b1
    1754:	000018b1 	.word	0x000018b1
    1758:	000018b1 	.word	0x000018b1
    175c:	000018b1 	.word	0x000018b1
    1760:	0000185b 	.word	0x0000185b
	case 0x08: /* A Start condition is issued. */
		LPC_I2C1->I2DAT = I2C1_MasterBuffer[0];
    1764:	4b57      	ldr	r3, [pc, #348]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    1766:	4a58      	ldr	r2, [pc, #352]	; (18c8 <I2C1_IRQHandler+0x2c4>)
    1768:	7812      	ldrb	r2, [r2, #0]
    176a:	b2d2      	uxtb	r2, r2
    176c:	609a      	str	r2, [r3, #8]
		LPC_I2C1->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    176e:	4b55      	ldr	r3, [pc, #340]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    1770:	2228      	movs	r2, #40	; 0x28
    1772:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = I2C_STARTED;
    1774:	4b55      	ldr	r3, [pc, #340]	; (18cc <I2C1_IRQHandler+0x2c8>)
    1776:	2201      	movs	r2, #1
    1778:	601a      	str	r2, [r3, #0]
		break;
    177a:	e09d      	b.n	18b8 <I2C1_IRQHandler+0x2b4>
	case 0x10: /* A repeated started is issued */
		if (!I2C1_Cmd) {
    177c:	4b54      	ldr	r3, [pc, #336]	; (18d0 <I2C1_IRQHandler+0x2cc>)
    177e:	681b      	ldr	r3, [r3, #0]
    1780:	2b00      	cmp	r3, #0
    1782:	d104      	bne.n	178e <I2C1_IRQHandler+0x18a>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[2];
    1784:	4b4f      	ldr	r3, [pc, #316]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    1786:	4a50      	ldr	r2, [pc, #320]	; (18c8 <I2C1_IRQHandler+0x2c4>)
    1788:	7892      	ldrb	r2, [r2, #2]
    178a:	b2d2      	uxtb	r2, r2
    178c:	609a      	str	r2, [r3, #8]
		}
		LPC_I2C1->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    178e:	4b4d      	ldr	r3, [pc, #308]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    1790:	2228      	movs	r2, #40	; 0x28
    1792:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = I2C_RESTARTED;
    1794:	4b4d      	ldr	r3, [pc, #308]	; (18cc <I2C1_IRQHandler+0x2c8>)
    1796:	2202      	movs	r2, #2
    1798:	601a      	str	r2, [r3, #0]
		break;
    179a:	e08d      	b.n	18b8 <I2C1_IRQHandler+0x2b4>
	case 0x18: /* Regardless, it's a ACK */
		if (I2C1_MasterState == I2C_STARTED) {
    179c:	4b4b      	ldr	r3, [pc, #300]	; (18cc <I2C1_IRQHandler+0x2c8>)
    179e:	681b      	ldr	r3, [r3, #0]
    17a0:	2b01      	cmp	r3, #1
    17a2:	d10f      	bne.n	17c4 <I2C1_IRQHandler+0x1c0>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[1 + WrIndex_1];
    17a4:	4a47      	ldr	r2, [pc, #284]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    17a6:	4b4b      	ldr	r3, [pc, #300]	; (18d4 <I2C1_IRQHandler+0x2d0>)
    17a8:	681b      	ldr	r3, [r3, #0]
    17aa:	3301      	adds	r3, #1
    17ac:	4946      	ldr	r1, [pc, #280]	; (18c8 <I2C1_IRQHandler+0x2c4>)
    17ae:	5ccb      	ldrb	r3, [r1, r3]
    17b0:	b2db      	uxtb	r3, r3
    17b2:	6093      	str	r3, [r2, #8]
			WrIndex_1++;
    17b4:	4b47      	ldr	r3, [pc, #284]	; (18d4 <I2C1_IRQHandler+0x2d0>)
    17b6:	681b      	ldr	r3, [r3, #0]
    17b8:	3301      	adds	r3, #1
    17ba:	4a46      	ldr	r2, [pc, #280]	; (18d4 <I2C1_IRQHandler+0x2d0>)
    17bc:	6013      	str	r3, [r2, #0]
			I2C1_MasterState = DATA_ACK;
    17be:	4b43      	ldr	r3, [pc, #268]	; (18cc <I2C1_IRQHandler+0x2c8>)
    17c0:	2204      	movs	r2, #4
    17c2:	601a      	str	r2, [r3, #0]
		}
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    17c4:	4b3f      	ldr	r3, [pc, #252]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    17c6:	2208      	movs	r2, #8
    17c8:	619a      	str	r2, [r3, #24]
		break;
    17ca:	e075      	b.n	18b8 <I2C1_IRQHandler+0x2b4>
	case 0x28: /* Data byte has been transmitted, regardless ACK or NACK */
	case 0x30:
		if (WrIndex_1 != I2C1_WriteLength) {
    17cc:	4b41      	ldr	r3, [pc, #260]	; (18d4 <I2C1_IRQHandler+0x2d0>)
    17ce:	681a      	ldr	r2, [r3, #0]
    17d0:	4b41      	ldr	r3, [pc, #260]	; (18d8 <I2C1_IRQHandler+0x2d4>)
    17d2:	681b      	ldr	r3, [r3, #0]
    17d4:	429a      	cmp	r2, r3
    17d6:	d024      	beq.n	1822 <I2C1_IRQHandler+0x21e>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[1 + WrIndex_1]; /* this should be the last one */
    17d8:	4a3a      	ldr	r2, [pc, #232]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    17da:	4b3e      	ldr	r3, [pc, #248]	; (18d4 <I2C1_IRQHandler+0x2d0>)
    17dc:	681b      	ldr	r3, [r3, #0]
    17de:	3301      	adds	r3, #1
    17e0:	4939      	ldr	r1, [pc, #228]	; (18c8 <I2C1_IRQHandler+0x2c4>)
    17e2:	5ccb      	ldrb	r3, [r1, r3]
    17e4:	b2db      	uxtb	r3, r3
    17e6:	6093      	str	r3, [r2, #8]
			WrIndex_1++;
    17e8:	4b3a      	ldr	r3, [pc, #232]	; (18d4 <I2C1_IRQHandler+0x2d0>)
    17ea:	681b      	ldr	r3, [r3, #0]
    17ec:	3301      	adds	r3, #1
    17ee:	4a39      	ldr	r2, [pc, #228]	; (18d4 <I2C1_IRQHandler+0x2d0>)
    17f0:	6013      	str	r3, [r2, #0]
			if (WrIndex_1 != I2C1_WriteLength) {
    17f2:	4b38      	ldr	r3, [pc, #224]	; (18d4 <I2C1_IRQHandler+0x2d0>)
    17f4:	681a      	ldr	r2, [r3, #0]
    17f6:	4b38      	ldr	r3, [pc, #224]	; (18d8 <I2C1_IRQHandler+0x2d4>)
    17f8:	681b      	ldr	r3, [r3, #0]
    17fa:	429a      	cmp	r2, r3
    17fc:	d003      	beq.n	1806 <I2C1_IRQHandler+0x202>
				I2C1_MasterState = DATA_ACK;
    17fe:	4b33      	ldr	r3, [pc, #204]	; (18cc <I2C1_IRQHandler+0x2c8>)
    1800:	2204      	movs	r2, #4
    1802:	601a      	str	r2, [r3, #0]
    1804:	e01e      	b.n	1844 <I2C1_IRQHandler+0x240>
			} else {
				I2C1_MasterState = DATA_NACK;
    1806:	4b31      	ldr	r3, [pc, #196]	; (18cc <I2C1_IRQHandler+0x2c8>)
    1808:	2205      	movs	r2, #5
    180a:	601a      	str	r2, [r3, #0]
				if (I2C1_ReadLength != 0) {
    180c:	4b33      	ldr	r3, [pc, #204]	; (18dc <I2C1_IRQHandler+0x2d8>)
    180e:	681b      	ldr	r3, [r3, #0]
    1810:	2b00      	cmp	r3, #0
    1812:	d017      	beq.n	1844 <I2C1_IRQHandler+0x240>
					LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    1814:	4b2b      	ldr	r3, [pc, #172]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    1816:	2220      	movs	r2, #32
    1818:	601a      	str	r2, [r3, #0]
					I2C1_MasterState = I2C_REPEATED_START;
    181a:	4b2c      	ldr	r3, [pc, #176]	; (18cc <I2C1_IRQHandler+0x2c8>)
    181c:	2203      	movs	r2, #3
    181e:	601a      	str	r2, [r3, #0]
    1820:	e010      	b.n	1844 <I2C1_IRQHandler+0x240>
				}
			}
		} else {
			if (I2C1_ReadLength != 0) {
    1822:	4b2e      	ldr	r3, [pc, #184]	; (18dc <I2C1_IRQHandler+0x2d8>)
    1824:	681b      	ldr	r3, [r3, #0]
    1826:	2b00      	cmp	r3, #0
    1828:	d006      	beq.n	1838 <I2C1_IRQHandler+0x234>
				LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    182a:	4b26      	ldr	r3, [pc, #152]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    182c:	2220      	movs	r2, #32
    182e:	601a      	str	r2, [r3, #0]
				I2C1_MasterState = I2C_REPEATED_START;
    1830:	4b26      	ldr	r3, [pc, #152]	; (18cc <I2C1_IRQHandler+0x2c8>)
    1832:	2203      	movs	r2, #3
    1834:	601a      	str	r2, [r3, #0]
    1836:	e005      	b.n	1844 <I2C1_IRQHandler+0x240>
			} else {
				I2C1_MasterState = DATA_NACK;
    1838:	4b24      	ldr	r3, [pc, #144]	; (18cc <I2C1_IRQHandler+0x2c8>)
    183a:	2205      	movs	r2, #5
    183c:	601a      	str	r2, [r3, #0]
				LPC_I2C1->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    183e:	4b21      	ldr	r3, [pc, #132]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    1840:	2210      	movs	r2, #16
    1842:	601a      	str	r2, [r3, #0]
			}
		}
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    1844:	4b1f      	ldr	r3, [pc, #124]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    1846:	2208      	movs	r2, #8
    1848:	619a      	str	r2, [r3, #24]
		break;
    184a:	e035      	b.n	18b8 <I2C1_IRQHandler+0x2b4>
	case 0x40: /* Master Receive, SLA_R has been sent */
		LPC_I2C1->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    184c:	4b1d      	ldr	r3, [pc, #116]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    184e:	2204      	movs	r2, #4
    1850:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    1852:	4b1c      	ldr	r3, [pc, #112]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    1854:	2208      	movs	r2, #8
    1856:	619a      	str	r2, [r3, #24]
		break;
    1858:	e02e      	b.n	18b8 <I2C1_IRQHandler+0x2b4>
	case 0x50: /* Data byte has been received, regardless following ACK or NACK */
	case 0x58:
		I2C1_MasterBuffer[3 + RdIndex_1] = LPC_I2C1->I2DAT;
    185a:	4b21      	ldr	r3, [pc, #132]	; (18e0 <I2C1_IRQHandler+0x2dc>)
    185c:	681b      	ldr	r3, [r3, #0]
    185e:	3303      	adds	r3, #3
    1860:	4a18      	ldr	r2, [pc, #96]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    1862:	6892      	ldr	r2, [r2, #8]
    1864:	b2d1      	uxtb	r1, r2
    1866:	4a18      	ldr	r2, [pc, #96]	; (18c8 <I2C1_IRQHandler+0x2c4>)
    1868:	54d1      	strb	r1, [r2, r3]
		RdIndex_1++;
    186a:	4b1d      	ldr	r3, [pc, #116]	; (18e0 <I2C1_IRQHandler+0x2dc>)
    186c:	681b      	ldr	r3, [r3, #0]
    186e:	3301      	adds	r3, #1
    1870:	4a1b      	ldr	r2, [pc, #108]	; (18e0 <I2C1_IRQHandler+0x2dc>)
    1872:	6013      	str	r3, [r2, #0]
		if (RdIndex_1 != I2C1_ReadLength) {
    1874:	4b1a      	ldr	r3, [pc, #104]	; (18e0 <I2C1_IRQHandler+0x2dc>)
    1876:	681a      	ldr	r2, [r3, #0]
    1878:	4b18      	ldr	r3, [pc, #96]	; (18dc <I2C1_IRQHandler+0x2d8>)
    187a:	681b      	ldr	r3, [r3, #0]
    187c:	429a      	cmp	r2, r3
    187e:	d003      	beq.n	1888 <I2C1_IRQHandler+0x284>
			I2C1_MasterState = DATA_ACK;
    1880:	4b12      	ldr	r3, [pc, #72]	; (18cc <I2C1_IRQHandler+0x2c8>)
    1882:	2204      	movs	r2, #4
    1884:	601a      	str	r2, [r3, #0]
    1886:	e005      	b.n	1894 <I2C1_IRQHandler+0x290>
		} else {
			RdIndex_1 = 0;
    1888:	4b15      	ldr	r3, [pc, #84]	; (18e0 <I2C1_IRQHandler+0x2dc>)
    188a:	2200      	movs	r2, #0
    188c:	601a      	str	r2, [r3, #0]
			I2C1_MasterState = DATA_NACK;
    188e:	4b0f      	ldr	r3, [pc, #60]	; (18cc <I2C1_IRQHandler+0x2c8>)
    1890:	2205      	movs	r2, #5
    1892:	601a      	str	r2, [r3, #0]
		}
		LPC_I2C1->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    1894:	4b0b      	ldr	r3, [pc, #44]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    1896:	2204      	movs	r2, #4
    1898:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    189a:	4b0a      	ldr	r3, [pc, #40]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    189c:	2208      	movs	r2, #8
    189e:	619a      	str	r2, [r3, #24]
		break;
    18a0:	e00a      	b.n	18b8 <I2C1_IRQHandler+0x2b4>
	case 0x20: /* regardless, it's a NACK */
	case 0x48:
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    18a2:	4b08      	ldr	r3, [pc, #32]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    18a4:	2208      	movs	r2, #8
    18a6:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = DATA_NACK;
    18a8:	4b08      	ldr	r3, [pc, #32]	; (18cc <I2C1_IRQHandler+0x2c8>)
    18aa:	2205      	movs	r2, #5
    18ac:	601a      	str	r2, [r3, #0]
		break;
    18ae:	e003      	b.n	18b8 <I2C1_IRQHandler+0x2b4>
	case 0x38: /* Arbitration lost, in this example, we don't
	 deal with multiple master situation */
	default:
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    18b0:	4b04      	ldr	r3, [pc, #16]	; (18c4 <I2C1_IRQHandler+0x2c0>)
    18b2:	2208      	movs	r2, #8
    18b4:	619a      	str	r2, [r3, #24]
		break;
    18b6:	bf00      	nop
	}
}
    18b8:	370c      	adds	r7, #12
    18ba:	46bd      	mov	sp, r7
    18bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    18c0:	4770      	bx	lr
    18c2:	bf00      	nop
    18c4:	4005c000 	.word	0x4005c000
    18c8:	10000eac 	.word	0x10000eac
    18cc:	10000e84 	.word	0x10000e84
    18d0:	10000e80 	.word	0x10000e80
    18d4:	10000ef0 	.word	0x10000ef0
    18d8:	10000e40 	.word	0x10000e40
    18dc:	10000e54 	.word	0x10000e54
    18e0:	10000e44 	.word	0x10000e44

000018e4 <I2CStart>:
 **
 ** parameters:			None
 ** Returned value:		true or false, return false if timed out
 **
 *****************************************************************************/
uint32_t I2CStart(uint8_t port) {
    18e4:	b480      	push	{r7}
    18e6:	b085      	sub	sp, #20
    18e8:	af00      	add	r7, sp, #0
    18ea:	4603      	mov	r3, r0
    18ec:	71fb      	strb	r3, [r7, #7]
	uint32_t timeout = 0;
    18ee:	2300      	movs	r3, #0
    18f0:	60fb      	str	r3, [r7, #12]
	uint32_t retVal = 0;
    18f2:	2300      	movs	r3, #0
    18f4:	60bb      	str	r3, [r7, #8]
	if (port == 0){
    18f6:	79fb      	ldrb	r3, [r7, #7]
    18f8:	2b00      	cmp	r3, #0
    18fa:	d116      	bne.n	192a <I2CStart+0x46>
			/*--- Issue a start condition ---*/
			LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Start flag */
    18fc:	4b1b      	ldr	r3, [pc, #108]	; (196c <I2CStart+0x88>)
    18fe:	2220      	movs	r2, #32
    1900:	601a      	str	r2, [r3, #0]
			/*--- Wait until START transmitted ---*/
			while (1) {
				if (I2C0_MasterState == I2C_STARTED) {
    1902:	4b1b      	ldr	r3, [pc, #108]	; (1970 <I2CStart+0x8c>)
    1904:	681b      	ldr	r3, [r3, #0]
    1906:	2b01      	cmp	r3, #1
    1908:	d102      	bne.n	1910 <I2CStart+0x2c>
					retVal = 1;
    190a:	2301      	movs	r3, #1
    190c:	60bb      	str	r3, [r7, #8]
					break;
    190e:	e00a      	b.n	1926 <I2CStart+0x42>
				}
				if (timeout >= MAX_TIMEOUT) {
    1910:	68fb      	ldr	r3, [r7, #12]
    1912:	4a18      	ldr	r2, [pc, #96]	; (1974 <I2CStart+0x90>)
    1914:	4293      	cmp	r3, r2
    1916:	d902      	bls.n	191e <I2CStart+0x3a>
					retVal = 0;
    1918:	2300      	movs	r3, #0
    191a:	60bb      	str	r3, [r7, #8]
					break;
    191c:	e003      	b.n	1926 <I2CStart+0x42>
				}
				timeout++;
    191e:	68fb      	ldr	r3, [r7, #12]
    1920:	3301      	adds	r3, #1
    1922:	60fb      	str	r3, [r7, #12]
			}
    1924:	e7ed      	b.n	1902 <I2CStart+0x1e>
			return (retVal);
    1926:	68bb      	ldr	r3, [r7, #8]
    1928:	e01a      	b.n	1960 <I2CStart+0x7c>
		}
	else if (port == 1){
    192a:	79fb      	ldrb	r3, [r7, #7]
    192c:	2b01      	cmp	r3, #1
    192e:	d116      	bne.n	195e <I2CStart+0x7a>
		/*--- Issue a start condition ---*/
		LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Start flag */
    1930:	4b11      	ldr	r3, [pc, #68]	; (1978 <I2CStart+0x94>)
    1932:	2220      	movs	r2, #32
    1934:	601a      	str	r2, [r3, #0]
		/*--- Wait until START transmitted ---*/
		while (1) {
			if (I2C1_MasterState == I2C_STARTED) {
    1936:	4b11      	ldr	r3, [pc, #68]	; (197c <I2CStart+0x98>)
    1938:	681b      	ldr	r3, [r3, #0]
    193a:	2b01      	cmp	r3, #1
    193c:	d102      	bne.n	1944 <I2CStart+0x60>
				retVal = 1;
    193e:	2301      	movs	r3, #1
    1940:	60bb      	str	r3, [r7, #8]
				break;
    1942:	e00a      	b.n	195a <I2CStart+0x76>
			}
			if (timeout >= MAX_TIMEOUT) {
    1944:	68fb      	ldr	r3, [r7, #12]
    1946:	4a0b      	ldr	r2, [pc, #44]	; (1974 <I2CStart+0x90>)
    1948:	4293      	cmp	r3, r2
    194a:	d902      	bls.n	1952 <I2CStart+0x6e>
				retVal = 0;
    194c:	2300      	movs	r3, #0
    194e:	60bb      	str	r3, [r7, #8]
				break;
    1950:	e003      	b.n	195a <I2CStart+0x76>
			}
			timeout++;
    1952:	68fb      	ldr	r3, [r7, #12]
    1954:	3301      	adds	r3, #1
    1956:	60fb      	str	r3, [r7, #12]
		}
    1958:	e7ed      	b.n	1936 <I2CStart+0x52>
		return (retVal);
    195a:	68bb      	ldr	r3, [r7, #8]
    195c:	e000      	b.n	1960 <I2CStart+0x7c>
	}
	return 0;
    195e:	2300      	movs	r3, #0
}
    1960:	4618      	mov	r0, r3
    1962:	3714      	adds	r7, #20
    1964:	46bd      	mov	sp, r7
    1966:	f85d 7b04 	ldr.w	r7, [sp], #4
    196a:	4770      	bx	lr
    196c:	4001c000 	.word	0x4001c000
    1970:	10000024 	.word	0x10000024
    1974:	00fffffe 	.word	0x00fffffe
    1978:	4005c000 	.word	0x4005c000
    197c:	10000e84 	.word	0x10000e84

00001980 <I2CStop>:
 **
 ** parameters:			None
 ** Returned value:		true or never return
 **
 *****************************************************************************/
uint32_t I2CStop(uint8_t port) {
    1980:	b480      	push	{r7}
    1982:	b083      	sub	sp, #12
    1984:	af00      	add	r7, sp, #0
    1986:	4603      	mov	r3, r0
    1988:	71fb      	strb	r3, [r7, #7]
	if (port == 0){
    198a:	79fb      	ldrb	r3, [r7, #7]
    198c:	2b00      	cmp	r3, #0
    198e:	d10e      	bne.n	19ae <I2CStop+0x2e>
		LPC_I2C0->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    1990:	4b13      	ldr	r3, [pc, #76]	; (19e0 <I2CStop+0x60>)
    1992:	2210      	movs	r2, #16
    1994:	601a      	str	r2, [r3, #0]
		LPC_I2C0->I2CONCLR = I2CONCLR_SIC; /* Clear SI flag */
    1996:	4b12      	ldr	r3, [pc, #72]	; (19e0 <I2CStop+0x60>)
    1998:	2208      	movs	r2, #8
    199a:	619a      	str	r2, [r3, #24]
		/*--- Wait for STOP detected ---*/
		while (LPC_I2C0->I2CONSET & I2CONSET_STO);
    199c:	bf00      	nop
    199e:	4b10      	ldr	r3, [pc, #64]	; (19e0 <I2CStop+0x60>)
    19a0:	681b      	ldr	r3, [r3, #0]
    19a2:	f003 0310 	and.w	r3, r3, #16
    19a6:	2b00      	cmp	r3, #0
    19a8:	d1f9      	bne.n	199e <I2CStop+0x1e>
		return 1;
    19aa:	2301      	movs	r3, #1
    19ac:	e012      	b.n	19d4 <I2CStop+0x54>
	}else if(port == 1){
    19ae:	79fb      	ldrb	r3, [r7, #7]
    19b0:	2b01      	cmp	r3, #1
    19b2:	d10e      	bne.n	19d2 <I2CStop+0x52>
		LPC_I2C1->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    19b4:	4b0b      	ldr	r3, [pc, #44]	; (19e4 <I2CStop+0x64>)
    19b6:	2210      	movs	r2, #16
    19b8:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC; /* Clear SI flag */
    19ba:	4b0a      	ldr	r3, [pc, #40]	; (19e4 <I2CStop+0x64>)
    19bc:	2208      	movs	r2, #8
    19be:	619a      	str	r2, [r3, #24]
		/*--- Wait for STOP detected ---*/
		while (LPC_I2C1->I2CONSET & I2CONSET_STO);
    19c0:	bf00      	nop
    19c2:	4b08      	ldr	r3, [pc, #32]	; (19e4 <I2CStop+0x64>)
    19c4:	681b      	ldr	r3, [r3, #0]
    19c6:	f003 0310 	and.w	r3, r3, #16
    19ca:	2b00      	cmp	r3, #0
    19cc:	d1f9      	bne.n	19c2 <I2CStop+0x42>
		return 1;
    19ce:	2301      	movs	r3, #1
    19d0:	e000      	b.n	19d4 <I2CStop+0x54>
	}
	return 0;
    19d2:	2300      	movs	r3, #0
}
    19d4:	4618      	mov	r0, r3
    19d6:	370c      	adds	r7, #12
    19d8:	46bd      	mov	sp, r7
    19da:	f85d 7b04 	ldr.w	r7, [sp], #4
    19de:	4770      	bx	lr
    19e0:	4001c000 	.word	0x4001c000
    19e4:	4005c000 	.word	0x4005c000

000019e8 <I2CInit>:
 ** parameters:			I2c mode is either MASTER or SLAVE
 ** Returned value:		true or false, return false if the I2C
 **				interrupt handler was not installed correctly
 **
 *****************************************************************************/
uint32_t I2CInit(uint8_t port,uint32_t I2cMode) {
    19e8:	b580      	push	{r7, lr}
    19ea:	b082      	sub	sp, #8
    19ec:	af00      	add	r7, sp, #0
    19ee:	4603      	mov	r3, r0
    19f0:	6039      	str	r1, [r7, #0]
    19f2:	71fb      	strb	r3, [r7, #7]
	if (port == 0){
    19f4:	79fb      	ldrb	r3, [r7, #7]
    19f6:	2b00      	cmp	r3, #0
    19f8:	d12a      	bne.n	1a50 <I2CInit+0x68>
		LPC_SC->PCONP |= (1 << 7);
    19fa:	4a34      	ldr	r2, [pc, #208]	; (1acc <I2CInit+0xe4>)
    19fc:	4b33      	ldr	r3, [pc, #204]	; (1acc <I2CInit+0xe4>)
    19fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1a06:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	    //LPC_PINCON->PINSEL1 &= ~0x03C00000;
	    //LPC_PINCON->PINSEL1 |=  0x01400000;
		/* set PIO0.27 and PIO0.28 to I2C0 SDA and SCL */
		/* function to 01 on both SDA and SCL. */
		LPC_PINCON->PINSEL1 &= ~((0x03<<22)|(0x03<<24));
    1a0a:	4a31      	ldr	r2, [pc, #196]	; (1ad0 <I2CInit+0xe8>)
    1a0c:	4b30      	ldr	r3, [pc, #192]	; (1ad0 <I2CInit+0xe8>)
    1a0e:	685b      	ldr	r3, [r3, #4]
    1a10:	f023 7370 	bic.w	r3, r3, #62914560	; 0x3c00000
    1a14:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINSEL1 |= ((0x01<<22)|(0x01<<24));
    1a16:	4a2e      	ldr	r2, [pc, #184]	; (1ad0 <I2CInit+0xe8>)
    1a18:	4b2d      	ldr	r3, [pc, #180]	; (1ad0 <I2CInit+0xe8>)
    1a1a:	685b      	ldr	r3, [r3, #4]
    1a1c:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
    1a20:	6053      	str	r3, [r2, #4]
	    //LPC_SC->PCLKSEL0 &= ~(3 << 14); // clear bits
	    //LPC_SC->PCLKSEL0 |=  (3 << 14); // set to "01" (full speed)
		//PINMODE is not required for P0.27, P0.28 these are dedicated open drain I2C pins.
		/*--- Clear flags ---*/
		LPC_I2C0->I2CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC
    1a22:	4b2c      	ldr	r3, [pc, #176]	; (1ad4 <I2CInit+0xec>)
    1a24:	226c      	movs	r2, #108	; 0x6c
    1a26:	619a      	str	r2, [r3, #24]
				| I2CONCLR_I2ENC;
		/*--- Reset registers ---*/
		LPC_PINCON->I2CPADCFG &= ~((0x1<<0)|(0x1<<2));
    1a28:	4a29      	ldr	r2, [pc, #164]	; (1ad0 <I2CInit+0xe8>)
    1a2a:	4b29      	ldr	r3, [pc, #164]	; (1ad0 <I2CInit+0xe8>)
    1a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    1a2e:	f023 0305 	bic.w	r3, r3, #5
    1a32:	67d3      	str	r3, [r2, #124]	; 0x7c
		LPC_I2C0->I2SCLL   = I2SCLL_SCLL;
    1a34:	4b27      	ldr	r3, [pc, #156]	; (1ad4 <I2CInit+0xec>)
    1a36:	2280      	movs	r2, #128	; 0x80
    1a38:	615a      	str	r2, [r3, #20]
		LPC_I2C0->I2SCLH   = I2SCLH_SCLH;
    1a3a:	4b26      	ldr	r3, [pc, #152]	; (1ad4 <I2CInit+0xec>)
    1a3c:	2280      	movs	r2, #128	; 0x80
    1a3e:	611a      	str	r2, [r3, #16]
		/* Install interrupt handler */
		NVIC_EnableIRQ(I2C0_IRQn);
    1a40:	200a      	movs	r0, #10
    1a42:	f7ff fc25 	bl	1290 <NVIC_EnableIRQ>
		LPC_I2C0->I2CONSET = I2CONSET_I2EN;
    1a46:	4b23      	ldr	r3, [pc, #140]	; (1ad4 <I2CInit+0xec>)
    1a48:	2240      	movs	r2, #64	; 0x40
    1a4a:	601a      	str	r2, [r3, #0]
		return (1);
    1a4c:	2301      	movs	r3, #1
    1a4e:	e039      	b.n	1ac4 <I2CInit+0xdc>
	}
	else if (port == 1){
    1a50:	79fb      	ldrb	r3, [r7, #7]
    1a52:	2b01      	cmp	r3, #1
    1a54:	d136      	bne.n	1ac4 <I2CInit+0xdc>
		LPC_SC->PCONP |= (1 << 19);
    1a56:	4a1d      	ldr	r2, [pc, #116]	; (1acc <I2CInit+0xe4>)
    1a58:	4b1c      	ldr	r3, [pc, #112]	; (1acc <I2CInit+0xe4>)
    1a5a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1a5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1a62:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		/* set PIO0.19 and PIO0.20 to I2C1 SDA and SCL */
		/* function to 11 on both SDA and SCL. */
		LPC_PINCON->PINSEL1 &= ~((0x3 << 6) | (0x3 << 8));
    1a66:	4a1a      	ldr	r2, [pc, #104]	; (1ad0 <I2CInit+0xe8>)
    1a68:	4b19      	ldr	r3, [pc, #100]	; (1ad0 <I2CInit+0xe8>)
    1a6a:	685b      	ldr	r3, [r3, #4]
    1a6c:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
    1a70:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINSEL1 |= ((0x3 << 6) | (0x3 << 8));
    1a72:	4a17      	ldr	r2, [pc, #92]	; (1ad0 <I2CInit+0xe8>)
    1a74:	4b16      	ldr	r3, [pc, #88]	; (1ad0 <I2CInit+0xe8>)
    1a76:	685b      	ldr	r3, [r3, #4]
    1a78:	f443 7370 	orr.w	r3, r3, #960	; 0x3c0
    1a7c:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINMODE1 &= ~((0x3 << 6) | (0x3 << 8));
    1a7e:	4a14      	ldr	r2, [pc, #80]	; (1ad0 <I2CInit+0xe8>)
    1a80:	4b13      	ldr	r3, [pc, #76]	; (1ad0 <I2CInit+0xe8>)
    1a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1a84:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
    1a88:	6453      	str	r3, [r2, #68]	; 0x44
		LPC_PINCON->PINMODE1 |= ((0x2 << 6) | (0x2 << 8)); /* No pull-up no pull-down */
    1a8a:	4a11      	ldr	r2, [pc, #68]	; (1ad0 <I2CInit+0xe8>)
    1a8c:	4b10      	ldr	r3, [pc, #64]	; (1ad0 <I2CInit+0xe8>)
    1a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1a90:	f443 7320 	orr.w	r3, r3, #640	; 0x280
    1a94:	6453      	str	r3, [r2, #68]	; 0x44
		LPC_PINCON->PINMODE_OD0 |= ((0x1 << 19) | (0x1 << 20));
    1a96:	4a0e      	ldr	r2, [pc, #56]	; (1ad0 <I2CInit+0xe8>)
    1a98:	4b0d      	ldr	r3, [pc, #52]	; (1ad0 <I2CInit+0xe8>)
    1a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    1a9c:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
    1aa0:	6693      	str	r3, [r2, #104]	; 0x68

		/*--- Clear flags ---*/
		LPC_I2C1->I2CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC
    1aa2:	4b0d      	ldr	r3, [pc, #52]	; (1ad8 <I2CInit+0xf0>)
    1aa4:	226c      	movs	r2, #108	; 0x6c
    1aa6:	619a      	str	r2, [r3, #24]
				| I2CONCLR_I2ENC;

		/*--- Reset registers ---*/
		LPC_I2C1->I2SCLL = I2SCLL_SCLL;
    1aa8:	4b0b      	ldr	r3, [pc, #44]	; (1ad8 <I2CInit+0xf0>)
    1aaa:	2280      	movs	r2, #128	; 0x80
    1aac:	615a      	str	r2, [r3, #20]
		LPC_I2C1->I2SCLH = I2SCLH_SCLH;
    1aae:	4b0a      	ldr	r3, [pc, #40]	; (1ad8 <I2CInit+0xf0>)
    1ab0:	2280      	movs	r2, #128	; 0x80
    1ab2:	611a      	str	r2, [r3, #16]

		/* Install interrupt handler */
		NVIC_EnableIRQ(I2C1_IRQn);
    1ab4:	200b      	movs	r0, #11
    1ab6:	f7ff fbeb 	bl	1290 <NVIC_EnableIRQ>

		LPC_I2C1->I2CONSET = I2CONSET_I2EN;
    1aba:	4b07      	ldr	r3, [pc, #28]	; (1ad8 <I2CInit+0xf0>)
    1abc:	2240      	movs	r2, #64	; 0x40
    1abe:	601a      	str	r2, [r3, #0]
		return (1);
    1ac0:	2301      	movs	r3, #1
    1ac2:	e7ff      	b.n	1ac4 <I2CInit+0xdc>
	}
}
    1ac4:	4618      	mov	r0, r3
    1ac6:	3708      	adds	r7, #8
    1ac8:	46bd      	mov	sp, r7
    1aca:	bd80      	pop	{r7, pc}
    1acc:	400fc000 	.word	0x400fc000
    1ad0:	4002c000 	.word	0x4002c000
    1ad4:	4001c000 	.word	0x4001c000
    1ad8:	4005c000 	.word	0x4005c000

00001adc <I2CEngine>:
 ** Returned value:		true or false, return false only if the
 **				start condition can never be generated and
 **				timed out.
 **
 *****************************************************************************/
uint32_t I2CEngine(uint8_t port) {
    1adc:	b580      	push	{r7, lr}
    1ade:	b084      	sub	sp, #16
    1ae0:	af00      	add	r7, sp, #0
    1ae2:	4603      	mov	r3, r0
    1ae4:	71fb      	strb	r3, [r7, #7]
	int timeout = 0;
    1ae6:	2300      	movs	r3, #0
    1ae8:	60fb      	str	r3, [r7, #12]
	if (port == 0){
    1aea:	79fb      	ldrb	r3, [r7, #7]
    1aec:	2b00      	cmp	r3, #0
    1aee:	d12a      	bne.n	1b46 <I2CEngine+0x6a>
			I2C0_MasterState = I2C_IDLE;
    1af0:	4b2a      	ldr	r3, [pc, #168]	; (1b9c <I2CEngine+0xc0>)
    1af2:	2200      	movs	r2, #0
    1af4:	601a      	str	r2, [r3, #0]
			RdIndex_0 = 0;
    1af6:	4b2a      	ldr	r3, [pc, #168]	; (1ba0 <I2CEngine+0xc4>)
    1af8:	2200      	movs	r2, #0
    1afa:	601a      	str	r2, [r3, #0]
			WrIndex_0 = 0;
    1afc:	4b29      	ldr	r3, [pc, #164]	; (1ba4 <I2CEngine+0xc8>)
    1afe:	2200      	movs	r2, #0
    1b00:	601a      	str	r2, [r3, #0]
			if (I2CStart(port) != 1) {
    1b02:	79fb      	ldrb	r3, [r7, #7]
    1b04:	4618      	mov	r0, r3
    1b06:	f7ff feed 	bl	18e4 <I2CStart>
    1b0a:	4603      	mov	r3, r0
    1b0c:	2b01      	cmp	r3, #1
    1b0e:	d005      	beq.n	1b1c <I2CEngine+0x40>
				I2CStop(port);
    1b10:	79fb      	ldrb	r3, [r7, #7]
    1b12:	4618      	mov	r0, r3
    1b14:	f7ff ff34 	bl	1980 <I2CStop>
				return (0);
    1b18:	2300      	movs	r3, #0
    1b1a:	e03a      	b.n	1b92 <I2CEngine+0xb6>
			}

			while (1) {
				if (I2C0_MasterState == DATA_NACK) {
    1b1c:	4b1f      	ldr	r3, [pc, #124]	; (1b9c <I2CEngine+0xc0>)
    1b1e:	681b      	ldr	r3, [r3, #0]
    1b20:	2b05      	cmp	r3, #5
    1b22:	d104      	bne.n	1b2e <I2CEngine+0x52>
					I2CStop(port);
    1b24:	79fb      	ldrb	r3, [r7, #7]
    1b26:	4618      	mov	r0, r3
    1b28:	f7ff ff2a 	bl	1980 <I2CStop>
					break;
    1b2c:	e009      	b.n	1b42 <I2CEngine+0x66>
				}
				if (timeout >= 0xFFFF) {
    1b2e:	68fb      	ldr	r3, [r7, #12]
    1b30:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    1b34:	4293      	cmp	r3, r2
    1b36:	dd00      	ble.n	1b3a <I2CEngine+0x5e>
					break;
    1b38:	e003      	b.n	1b42 <I2CEngine+0x66>
				}
				timeout++;
    1b3a:	68fb      	ldr	r3, [r7, #12]
    1b3c:	3301      	adds	r3, #1
    1b3e:	60fb      	str	r3, [r7, #12]
			}
    1b40:	e7ec      	b.n	1b1c <I2CEngine+0x40>
			return (1);
    1b42:	2301      	movs	r3, #1
    1b44:	e025      	b.n	1b92 <I2CEngine+0xb6>
		}
	else if (port == 1){
    1b46:	79fb      	ldrb	r3, [r7, #7]
    1b48:	2b01      	cmp	r3, #1
    1b4a:	d121      	bne.n	1b90 <I2CEngine+0xb4>
		I2C1_MasterState = I2C_IDLE;
    1b4c:	4b16      	ldr	r3, [pc, #88]	; (1ba8 <I2CEngine+0xcc>)
    1b4e:	2200      	movs	r2, #0
    1b50:	601a      	str	r2, [r3, #0]
		RdIndex_1 = 0;
    1b52:	4b16      	ldr	r3, [pc, #88]	; (1bac <I2CEngine+0xd0>)
    1b54:	2200      	movs	r2, #0
    1b56:	601a      	str	r2, [r3, #0]
		WrIndex_1 = 0;
    1b58:	4b15      	ldr	r3, [pc, #84]	; (1bb0 <I2CEngine+0xd4>)
    1b5a:	2200      	movs	r2, #0
    1b5c:	601a      	str	r2, [r3, #0]
		if (I2CStart(port) != 1) {
    1b5e:	79fb      	ldrb	r3, [r7, #7]
    1b60:	4618      	mov	r0, r3
    1b62:	f7ff febf 	bl	18e4 <I2CStart>
    1b66:	4603      	mov	r3, r0
    1b68:	2b01      	cmp	r3, #1
    1b6a:	d005      	beq.n	1b78 <I2CEngine+0x9c>
			I2CStop(port);
    1b6c:	79fb      	ldrb	r3, [r7, #7]
    1b6e:	4618      	mov	r0, r3
    1b70:	f7ff ff06 	bl	1980 <I2CStop>
			return (0);
    1b74:	2300      	movs	r3, #0
    1b76:	e00c      	b.n	1b92 <I2CEngine+0xb6>
		}

		while (1) {
			if (I2C1_MasterState == DATA_NACK) {
    1b78:	4b0b      	ldr	r3, [pc, #44]	; (1ba8 <I2CEngine+0xcc>)
    1b7a:	681b      	ldr	r3, [r3, #0]
    1b7c:	2b05      	cmp	r3, #5
    1b7e:	d106      	bne.n	1b8e <I2CEngine+0xb2>
				I2CStop(port);
    1b80:	79fb      	ldrb	r3, [r7, #7]
    1b82:	4618      	mov	r0, r3
    1b84:	f7ff fefc 	bl	1980 <I2CStop>
				break;
    1b88:	bf00      	nop
			}
		}
		return (1);
    1b8a:	2301      	movs	r3, #1
    1b8c:	e001      	b.n	1b92 <I2CEngine+0xb6>
		while (1) {
			if (I2C1_MasterState == DATA_NACK) {
				I2CStop(port);
				break;
			}
		}
    1b8e:	e7f3      	b.n	1b78 <I2CEngine+0x9c>
		return (1);
	}
	return 0;
    1b90:	2300      	movs	r3, #0
}
    1b92:	4618      	mov	r0, r3
    1b94:	3710      	adds	r7, #16
    1b96:	46bd      	mov	sp, r7
    1b98:	bd80      	pop	{r7, pc}
    1b9a:	bf00      	nop
    1b9c:	10000024 	.word	0x10000024
    1ba0:	10000028 	.word	0x10000028
    1ba4:	1000002c 	.word	0x1000002c
    1ba8:	10000e84 	.word	0x10000e84
    1bac:	10000e44 	.word	0x10000e44
    1bb0:	10000ef0 	.word	0x10000ef0

00001bb4 <i2c_read>:
			return 0;
	}
	return 0;
}

uint8_t i2c_read(uint8_t port, uint8_t register_addr) {
    1bb4:	b580      	push	{r7, lr}
    1bb6:	b084      	sub	sp, #16
    1bb8:	af00      	add	r7, sp, #0
    1bba:	4603      	mov	r3, r0
    1bbc:	460a      	mov	r2, r1
    1bbe:	71fb      	strb	r3, [r7, #7]
    1bc0:	4613      	mov	r3, r2
    1bc2:	71bb      	strb	r3, [r7, #6]
	int i;
	/* clear buffer */
	if (port == 0){
    1bc4:	79fb      	ldrb	r3, [r7, #7]
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	d128      	bne.n	1c1c <i2c_read+0x68>
		for (i = 0; i < BUFSIZE; i++) {
    1bca:	2300      	movs	r3, #0
    1bcc:	60fb      	str	r3, [r7, #12]
    1bce:	e007      	b.n	1be0 <i2c_read+0x2c>
			I2C0_MasterBuffer[i] = 0;
    1bd0:	4a2a      	ldr	r2, [pc, #168]	; (1c7c <i2c_read+0xc8>)
    1bd2:	68fb      	ldr	r3, [r7, #12]
    1bd4:	4413      	add	r3, r2
    1bd6:	2200      	movs	r2, #0
    1bd8:	701a      	strb	r2, [r3, #0]

uint8_t i2c_read(uint8_t port, uint8_t register_addr) {
	int i;
	/* clear buffer */
	if (port == 0){
		for (i = 0; i < BUFSIZE; i++) {
    1bda:	68fb      	ldr	r3, [r7, #12]
    1bdc:	3301      	adds	r3, #1
    1bde:	60fb      	str	r3, [r7, #12]
    1be0:	68fb      	ldr	r3, [r7, #12]
    1be2:	2b1f      	cmp	r3, #31
    1be4:	ddf4      	ble.n	1bd0 <i2c_read+0x1c>
			I2C0_MasterBuffer[i] = 0;
		}
		I2C0_WriteLength = 2;
    1be6:	4b26      	ldr	r3, [pc, #152]	; (1c80 <i2c_read+0xcc>)
    1be8:	2202      	movs	r2, #2
    1bea:	601a      	str	r2, [r3, #0]
		I2C0_ReadLength = 1;
    1bec:	4b25      	ldr	r3, [pc, #148]	; (1c84 <i2c_read+0xd0>)
    1bee:	2201      	movs	r2, #1
    1bf0:	601a      	str	r2, [r3, #0]
		I2C0_MasterBuffer[0] = 0x3A;//ADR_BYTE_MMA7455;
    1bf2:	4b22      	ldr	r3, [pc, #136]	; (1c7c <i2c_read+0xc8>)
    1bf4:	223a      	movs	r2, #58	; 0x3a
    1bf6:	701a      	strb	r2, [r3, #0]
		I2C0_MasterBuffer[1] = register_addr;
    1bf8:	4a20      	ldr	r2, [pc, #128]	; (1c7c <i2c_read+0xc8>)
    1bfa:	79bb      	ldrb	r3, [r7, #6]
    1bfc:	7053      	strb	r3, [r2, #1]
		I2C0_MasterBuffer[2] = 0x3B;//ADR_BYTE_MMA7455 | RD_BIT;
    1bfe:	4b1f      	ldr	r3, [pc, #124]	; (1c7c <i2c_read+0xc8>)
    1c00:	223b      	movs	r2, #59	; 0x3b
    1c02:	709a      	strb	r2, [r3, #2]
		I2CEngine(port);
    1c04:	79fb      	ldrb	r3, [r7, #7]
    1c06:	4618      	mov	r0, r3
    1c08:	f7ff ff68 	bl	1adc <I2CEngine>
		I2CStop(port);
    1c0c:	79fb      	ldrb	r3, [r7, #7]
    1c0e:	4618      	mov	r0, r3
    1c10:	f7ff feb6 	bl	1980 <I2CStop>
		return (I2C0_MasterBuffer[3]);
    1c14:	4b19      	ldr	r3, [pc, #100]	; (1c7c <i2c_read+0xc8>)
    1c16:	78db      	ldrb	r3, [r3, #3]
    1c18:	b2db      	uxtb	r3, r3
    1c1a:	e02b      	b.n	1c74 <i2c_read+0xc0>
	}
	else if (port == 1){
    1c1c:	79fb      	ldrb	r3, [r7, #7]
    1c1e:	2b01      	cmp	r3, #1
    1c20:	d128      	bne.n	1c74 <i2c_read+0xc0>
		for (i = 0; i < BUFSIZE; i++) {
    1c22:	2300      	movs	r3, #0
    1c24:	60fb      	str	r3, [r7, #12]
    1c26:	e007      	b.n	1c38 <i2c_read+0x84>
			I2C1_MasterBuffer[i] = 0;
    1c28:	4a17      	ldr	r2, [pc, #92]	; (1c88 <i2c_read+0xd4>)
    1c2a:	68fb      	ldr	r3, [r7, #12]
    1c2c:	4413      	add	r3, r2
    1c2e:	2200      	movs	r2, #0
    1c30:	701a      	strb	r2, [r3, #0]
		I2CEngine(port);
		I2CStop(port);
		return (I2C0_MasterBuffer[3]);
	}
	else if (port == 1){
		for (i = 0; i < BUFSIZE; i++) {
    1c32:	68fb      	ldr	r3, [r7, #12]
    1c34:	3301      	adds	r3, #1
    1c36:	60fb      	str	r3, [r7, #12]
    1c38:	68fb      	ldr	r3, [r7, #12]
    1c3a:	2b1f      	cmp	r3, #31
    1c3c:	ddf4      	ble.n	1c28 <i2c_read+0x74>
			I2C1_MasterBuffer[i] = 0;
		}
		I2C1_WriteLength = 2;
    1c3e:	4b13      	ldr	r3, [pc, #76]	; (1c8c <i2c_read+0xd8>)
    1c40:	2202      	movs	r2, #2
    1c42:	601a      	str	r2, [r3, #0]
		I2C1_ReadLength = 1;
    1c44:	4b12      	ldr	r3, [pc, #72]	; (1c90 <i2c_read+0xdc>)
    1c46:	2201      	movs	r2, #1
    1c48:	601a      	str	r2, [r3, #0]
		I2C1_MasterBuffer[0] = ADR_BYTE_24AA02;
    1c4a:	4b0f      	ldr	r3, [pc, #60]	; (1c88 <i2c_read+0xd4>)
    1c4c:	22a0      	movs	r2, #160	; 0xa0
    1c4e:	701a      	strb	r2, [r3, #0]
		I2C1_MasterBuffer[1] = register_addr;
    1c50:	4a0d      	ldr	r2, [pc, #52]	; (1c88 <i2c_read+0xd4>)
    1c52:	79bb      	ldrb	r3, [r7, #6]
    1c54:	7053      	strb	r3, [r2, #1]
		I2C1_MasterBuffer[2] = ADR_BYTE_24AA02 | RD_BIT;
    1c56:	4b0c      	ldr	r3, [pc, #48]	; (1c88 <i2c_read+0xd4>)
    1c58:	22a1      	movs	r2, #161	; 0xa1
    1c5a:	709a      	strb	r2, [r3, #2]
		I2CEngine(port);
    1c5c:	79fb      	ldrb	r3, [r7, #7]
    1c5e:	4618      	mov	r0, r3
    1c60:	f7ff ff3c 	bl	1adc <I2CEngine>
		I2CStop(port);
    1c64:	79fb      	ldrb	r3, [r7, #7]
    1c66:	4618      	mov	r0, r3
    1c68:	f7ff fe8a 	bl	1980 <I2CStop>
		return (I2C1_MasterBuffer[3]);
    1c6c:	4b06      	ldr	r3, [pc, #24]	; (1c88 <i2c_read+0xd4>)
    1c6e:	78db      	ldrb	r3, [r3, #3]
    1c70:	b2db      	uxtb	r3, r3
    1c72:	e7ff      	b.n	1c74 <i2c_read+0xc0>
	}
}
    1c74:	4618      	mov	r0, r3
    1c76:	3710      	adds	r7, #16
    1c78:	46bd      	mov	sp, r7
    1c7a:	bd80      	pop	{r7, pc}
    1c7c:	10000ecc 	.word	0x10000ecc
    1c80:	10000ea8 	.word	0x10000ea8
    1c84:	10000e50 	.word	0x10000e50
    1c88:	10000eac 	.word	0x10000eac
    1c8c:	10000e40 	.word	0x10000e40
    1c90:	10000e54 	.word	0x10000e54

00001c94 <u32IAP_PrepareSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_PrepareSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
    1c94:	b580      	push	{r7, lr}
    1c96:	b08e      	sub	sp, #56	; 0x38
    1c98:	af00      	add	r7, sp, #0
    1c9a:	6078      	str	r0, [r7, #4]
    1c9c:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1c9e:	683a      	ldr	r2, [r7, #0]
    1ca0:	687b      	ldr	r3, [r7, #4]
    1ca2:	429a      	cmp	r2, r3
    1ca4:	d202      	bcs.n	1cac <u32IAP_PrepareSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1ca6:	230c      	movs	r3, #12
    1ca8:	637b      	str	r3, [r7, #52]	; 0x34
    1caa:	e00f      	b.n	1ccc <u32IAP_PrepareSectors+0x38>
	}
	else
	{
		au32Command[0] = IAP_CMD_PREPARE_SECTORS;
    1cac:	2332      	movs	r3, #50	; 0x32
    1cae:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
    1cb0:	687b      	ldr	r3, [r7, #4]
    1cb2:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
    1cb4:	683b      	ldr	r3, [r7, #0]
    1cb6:	617b      	str	r3, [r7, #20]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1cb8:	f107 010c 	add.w	r1, r7, #12
    1cbc:	f107 0220 	add.w	r2, r7, #32
    1cc0:	4b05      	ldr	r3, [pc, #20]	; (1cd8 <u32IAP_PrepareSectors+0x44>)
    1cc2:	4608      	mov	r0, r1
    1cc4:	4611      	mov	r1, r2
    1cc6:	4798      	blx	r3

		u32Status = au32Result[0];
    1cc8:	6a3b      	ldr	r3, [r7, #32]
    1cca:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
    1ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    1cce:	4618      	mov	r0, r3
    1cd0:	3738      	adds	r7, #56	; 0x38
    1cd2:	46bd      	mov	sp, r7
    1cd4:	bd80      	pop	{r7, pc}
    1cd6:	bf00      	nop
    1cd8:	1fff1ff1 	.word	0x1fff1ff1

00001cdc <u32IAP_CopyRAMToFlash>:
*
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_CopyRAMToFlash(uint32_t u32DstAddr, uint32_t u32SrcAddr, uint32_t u32Len)
{
    1cdc:	b580      	push	{r7, lr}
    1cde:	b08e      	sub	sp, #56	; 0x38
    1ce0:	af00      	add	r7, sp, #0
    1ce2:	60f8      	str	r0, [r7, #12]
    1ce4:	60b9      	str	r1, [r7, #8]
    1ce6:	607a      	str	r2, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1ce8:	b672      	cpsid	i
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	__disable_irq();
	au32Command[0] = IAP_CMD_COPY_RAM_TO_FLASH;
    1cea:	2333      	movs	r3, #51	; 0x33
    1cec:	613b      	str	r3, [r7, #16]
	au32Command[1] = u32DstAddr;
    1cee:	68fb      	ldr	r3, [r7, #12]
    1cf0:	617b      	str	r3, [r7, #20]
	au32Command[2] = u32SrcAddr;
    1cf2:	68bb      	ldr	r3, [r7, #8]
    1cf4:	61bb      	str	r3, [r7, #24]
	au32Command[3] = u32Len;
    1cf6:	687b      	ldr	r3, [r7, #4]
    1cf8:	61fb      	str	r3, [r7, #28]
	au32Command[4] = SystemCoreClock / 1000UL;	/* Core clock frequency in kHz */
    1cfa:	4b0a      	ldr	r3, [pc, #40]	; (1d24 <u32IAP_CopyRAMToFlash+0x48>)
    1cfc:	681b      	ldr	r3, [r3, #0]
    1cfe:	4a0a      	ldr	r2, [pc, #40]	; (1d28 <u32IAP_CopyRAMToFlash+0x4c>)
    1d00:	fba2 2303 	umull	r2, r3, r2, r3
    1d04:	099b      	lsrs	r3, r3, #6
    1d06:	623b      	str	r3, [r7, #32]

	IAP_EXECUTE_CMD(au32Command, au32Result);
    1d08:	f107 0110 	add.w	r1, r7, #16
    1d0c:	f107 0224 	add.w	r2, r7, #36	; 0x24
    1d10:	4b06      	ldr	r3, [pc, #24]	; (1d2c <u32IAP_CopyRAMToFlash+0x50>)
    1d12:	4608      	mov	r0, r1
    1d14:	4611      	mov	r1, r2
    1d16:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1d18:	b662      	cpsie	i

	__enable_irq();
	return ( au32Result[0] );
    1d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1d1c:	4618      	mov	r0, r3
    1d1e:	3738      	adds	r7, #56	; 0x38
    1d20:	46bd      	mov	sp, r7
    1d22:	bd80      	pop	{r7, pc}
    1d24:	10000018 	.word	0x10000018
    1d28:	10624dd3 	.word	0x10624dd3
    1d2c:	1fff1ff1 	.word	0x1fff1ff1

00001d30 <u32IAP_EraseSectors>:
*
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_EraseSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
    1d30:	b580      	push	{r7, lr}
    1d32:	b08e      	sub	sp, #56	; 0x38
    1d34:	af00      	add	r7, sp, #0
    1d36:	6078      	str	r0, [r7, #4]
    1d38:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1d3a:	683a      	ldr	r2, [r7, #0]
    1d3c:	687b      	ldr	r3, [r7, #4]
    1d3e:	429a      	cmp	r2, r3
    1d40:	d202      	bcs.n	1d48 <u32IAP_EraseSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1d42:	230c      	movs	r3, #12
    1d44:	637b      	str	r3, [r7, #52]	; 0x34
    1d46:	e018      	b.n	1d7a <u32IAP_EraseSectors+0x4a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1d48:	b672      	cpsid	i
	}
	else
	{
		__disable_irq();
		au32Command[0] = IAP_CMD_ERASE_SECTORS;
    1d4a:	2334      	movs	r3, #52	; 0x34
    1d4c:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
    1d4e:	687b      	ldr	r3, [r7, #4]
    1d50:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
    1d52:	683b      	ldr	r3, [r7, #0]
    1d54:	617b      	str	r3, [r7, #20]
		au32Command[3] = SystemCoreClock / 1000UL;	/* Core clock frequency in kHz */
    1d56:	4b0b      	ldr	r3, [pc, #44]	; (1d84 <u32IAP_EraseSectors+0x54>)
    1d58:	681b      	ldr	r3, [r3, #0]
    1d5a:	4a0b      	ldr	r2, [pc, #44]	; (1d88 <u32IAP_EraseSectors+0x58>)
    1d5c:	fba2 2303 	umull	r2, r3, r2, r3
    1d60:	099b      	lsrs	r3, r3, #6
    1d62:	61bb      	str	r3, [r7, #24]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1d64:	f107 010c 	add.w	r1, r7, #12
    1d68:	f107 0220 	add.w	r2, r7, #32
    1d6c:	4b07      	ldr	r3, [pc, #28]	; (1d8c <u32IAP_EraseSectors+0x5c>)
    1d6e:	4608      	mov	r0, r1
    1d70:	4611      	mov	r1, r2
    1d72:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1d74:	b662      	cpsie	i

		__enable_irq();
		u32Status = au32Result[0];
    1d76:	6a3b      	ldr	r3, [r7, #32]
    1d78:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
    1d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    1d7c:	4618      	mov	r0, r3
    1d7e:	3738      	adds	r7, #56	; 0x38
    1d80:	46bd      	mov	sp, r7
    1d82:	bd80      	pop	{r7, pc}
    1d84:	10000018 	.word	0x10000018
    1d88:	10624dd3 	.word	0x10624dd3
    1d8c:	1fff1ff1 	.word	0x1fff1ff1

00001d90 <u32IAP_BlankCheckSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_BlankCheckSectors(uint32_t u32StartSector, uint32_t u32EndSector, uint32_t *pu32Result)
{
    1d90:	b580      	push	{r7, lr}
    1d92:	b090      	sub	sp, #64	; 0x40
    1d94:	af00      	add	r7, sp, #0
    1d96:	60f8      	str	r0, [r7, #12]
    1d98:	60b9      	str	r1, [r7, #8]
    1d9a:	607a      	str	r2, [r7, #4]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1d9c:	68ba      	ldr	r2, [r7, #8]
    1d9e:	68fb      	ldr	r3, [r7, #12]
    1da0:	429a      	cmp	r2, r3
    1da2:	d202      	bcs.n	1daa <u32IAP_BlankCheckSectors+0x1a>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1da4:	230c      	movs	r3, #12
    1da6:	63fb      	str	r3, [r7, #60]	; 0x3c
    1da8:	e019      	b.n	1dde <u32IAP_BlankCheckSectors+0x4e>
	}
	else
	{
		au32Command[0] = IAP_CMD_BLANK_CHECK_SECTORS;
    1daa:	2335      	movs	r3, #53	; 0x35
    1dac:	617b      	str	r3, [r7, #20]
		au32Command[1] = u32StartSector;
    1dae:	68fb      	ldr	r3, [r7, #12]
    1db0:	61bb      	str	r3, [r7, #24]
		au32Command[2] = u32EndSector;
    1db2:	68bb      	ldr	r3, [r7, #8]
    1db4:	61fb      	str	r3, [r7, #28]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1db6:	f107 0114 	add.w	r1, r7, #20
    1dba:	f107 0228 	add.w	r2, r7, #40	; 0x28
    1dbe:	4b0a      	ldr	r3, [pc, #40]	; (1de8 <u32IAP_BlankCheckSectors+0x58>)
    1dc0:	4608      	mov	r0, r1
    1dc2:	4611      	mov	r1, r2
    1dc4:	4798      	blx	r3

		if (au32Result[0] == IAP_STA_SECTOR_NOT_BLANK)
    1dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1dc8:	2b08      	cmp	r3, #8
    1dca:	d106      	bne.n	1dda <u32IAP_BlankCheckSectors+0x4a>
		{
			*pu32Result       = au32Result[0];
    1dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1dce:	687b      	ldr	r3, [r7, #4]
    1dd0:	601a      	str	r2, [r3, #0]
			*(pu32Result + 1) = au32Result[1];
    1dd2:	687b      	ldr	r3, [r7, #4]
    1dd4:	3304      	adds	r3, #4
    1dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1dd8:	601a      	str	r2, [r3, #0]
		}
		u32Status = au32Result[0];
    1dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	return ( u32Status );
    1dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1de0:	4618      	mov	r0, r3
    1de2:	3740      	adds	r7, #64	; 0x40
    1de4:	46bd      	mov	sp, r7
    1de6:	bd80      	pop	{r7, pc}
    1de8:	1fff1ff1 	.word	0x1fff1ff1

00001dec <u32IAP_Compare>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_Compare(uint32_t u32DstAddr, uint32_t u32SrcAddr, uint32_t u32Len, uint32_t *pu32Offset)
{
    1dec:	b580      	push	{r7, lr}
    1dee:	b08e      	sub	sp, #56	; 0x38
    1df0:	af00      	add	r7, sp, #0
    1df2:	60f8      	str	r0, [r7, #12]
    1df4:	60b9      	str	r1, [r7, #8]
    1df6:	607a      	str	r2, [r7, #4]
    1df8:	603b      	str	r3, [r7, #0]
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	au32Command[0] = IAP_CMD_COMPARE;
    1dfa:	2338      	movs	r3, #56	; 0x38
    1dfc:	613b      	str	r3, [r7, #16]
	au32Command[1] = u32DstAddr;
    1dfe:	68fb      	ldr	r3, [r7, #12]
    1e00:	617b      	str	r3, [r7, #20]
	au32Command[2] = u32SrcAddr;
    1e02:	68bb      	ldr	r3, [r7, #8]
    1e04:	61bb      	str	r3, [r7, #24]
	au32Command[3] = u32Len;
    1e06:	687b      	ldr	r3, [r7, #4]
    1e08:	61fb      	str	r3, [r7, #28]

	IAP_EXECUTE_CMD(au32Command, au32Result);
    1e0a:	f107 0110 	add.w	r1, r7, #16
    1e0e:	f107 0224 	add.w	r2, r7, #36	; 0x24
    1e12:	4b09      	ldr	r3, [pc, #36]	; (1e38 <u32IAP_Compare+0x4c>)
    1e14:	4608      	mov	r0, r1
    1e16:	4611      	mov	r1, r2
    1e18:	4798      	blx	r3

	if (au32Result[0] == IAP_STA_COMPARE_ERROR)
    1e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e1c:	2b0a      	cmp	r3, #10
    1e1e:	d105      	bne.n	1e2c <u32IAP_Compare+0x40>
	{
		if (pu32Offset != 0)
    1e20:	683b      	ldr	r3, [r7, #0]
    1e22:	2b00      	cmp	r3, #0
    1e24:	d002      	beq.n	1e2c <u32IAP_Compare+0x40>
		{
			*pu32Offset = au32Result[1];
    1e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1e28:	683b      	ldr	r3, [r7, #0]
    1e2a:	601a      	str	r2, [r3, #0]
		}
	}
	return ( au32Result[0] );
    1e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1e2e:	4618      	mov	r0, r3
    1e30:	3738      	adds	r7, #56	; 0x38
    1e32:	46bd      	mov	sp, r7
    1e34:	bd80      	pop	{r7, pc}
    1e36:	bf00      	nop
    1e38:	1fff1ff1 	.word	0x1fff1ff1

00001e3c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1e3c:	b480      	push	{r7}
    1e3e:	b083      	sub	sp, #12
    1e40:	af00      	add	r7, sp, #0
    1e42:	4603      	mov	r3, r0
    1e44:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1e46:	4908      	ldr	r1, [pc, #32]	; (1e68 <NVIC_EnableIRQ+0x2c>)
    1e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1e4c:	095b      	lsrs	r3, r3, #5
    1e4e:	79fa      	ldrb	r2, [r7, #7]
    1e50:	f002 021f 	and.w	r2, r2, #31
    1e54:	2001      	movs	r0, #1
    1e56:	fa00 f202 	lsl.w	r2, r0, r2
    1e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1e5e:	370c      	adds	r7, #12
    1e60:	46bd      	mov	sp, r7
    1e62:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e66:	4770      	bx	lr
    1e68:	e000e100 	.word	0xe000e100

00001e6c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1e6c:	b480      	push	{r7}
    1e6e:	b083      	sub	sp, #12
    1e70:	af00      	add	r7, sp, #0
    1e72:	4603      	mov	r3, r0
    1e74:	6039      	str	r1, [r7, #0]
    1e76:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    1e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	da0b      	bge.n	1e98 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    1e80:	490d      	ldr	r1, [pc, #52]	; (1eb8 <NVIC_SetPriority+0x4c>)
    1e82:	79fb      	ldrb	r3, [r7, #7]
    1e84:	f003 030f 	and.w	r3, r3, #15
    1e88:	3b04      	subs	r3, #4
    1e8a:	683a      	ldr	r2, [r7, #0]
    1e8c:	b2d2      	uxtb	r2, r2
    1e8e:	00d2      	lsls	r2, r2, #3
    1e90:	b2d2      	uxtb	r2, r2
    1e92:	440b      	add	r3, r1
    1e94:	761a      	strb	r2, [r3, #24]
    1e96:	e009      	b.n	1eac <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    1e98:	4908      	ldr	r1, [pc, #32]	; (1ebc <NVIC_SetPriority+0x50>)
    1e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1e9e:	683a      	ldr	r2, [r7, #0]
    1ea0:	b2d2      	uxtb	r2, r2
    1ea2:	00d2      	lsls	r2, r2, #3
    1ea4:	b2d2      	uxtb	r2, r2
    1ea6:	440b      	add	r3, r1
    1ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    1eac:	370c      	adds	r7, #12
    1eae:	46bd      	mov	sp, r7
    1eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1eb4:	4770      	bx	lr
    1eb6:	bf00      	nop
    1eb8:	e000ed00 	.word	0xe000ed00
    1ebc:	e000e100 	.word	0xe000e100

00001ec0 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
    1ec0:	b580      	push	{r7, lr}
    1ec2:	b082      	sub	sp, #8
    1ec4:	af00      	add	r7, sp, #0
    1ec6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
    1ec8:	687b      	ldr	r3, [r7, #4]
    1eca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    1ece:	d301      	bcc.n	1ed4 <SysTick_Config+0x14>
    1ed0:	2301      	movs	r3, #1
    1ed2:	e011      	b.n	1ef8 <SysTick_Config+0x38>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
    1ed4:	4a0a      	ldr	r2, [pc, #40]	; (1f00 <SysTick_Config+0x40>)
    1ed6:	687b      	ldr	r3, [r7, #4]
    1ed8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1edc:	3b01      	subs	r3, #1
    1ede:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
    1ee0:	f04f 30ff 	mov.w	r0, #4294967295
    1ee4:	211f      	movs	r1, #31
    1ee6:	f7ff ffc1 	bl	1e6c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    1eea:	4b05      	ldr	r3, [pc, #20]	; (1f00 <SysTick_Config+0x40>)
    1eec:	2200      	movs	r2, #0
    1eee:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
    1ef0:	4b03      	ldr	r3, [pc, #12]	; (1f00 <SysTick_Config+0x40>)
    1ef2:	2207      	movs	r2, #7
    1ef4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
    1ef6:	2300      	movs	r3, #0
}
    1ef8:	4618      	mov	r0, r3
    1efa:	3708      	adds	r7, #8
    1efc:	46bd      	mov	sp, r7
    1efe:	bd80      	pop	{r7, pc}
    1f00:	e000e010 	.word	0xe000e010

00001f04 <ConfigurePins>:
int extPowerPinVal = 0;
char cell_buf[15];
short is_cell_only = 1;


void ConfigurePins() {
    1f04:	b580      	push	{r7, lr}
    1f06:	b082      	sub	sp, #8
    1f08:	af00      	add	r7, sp, #0
	//PWRKEY & EMERG_OFF
	LPC_PINCON->PINSEL4 &= ~(0xFFFF); // Reset P2[0..7] = GPIO
    1f0a:	4a34      	ldr	r2, [pc, #208]	; (1fdc <ConfigurePins+0xd8>)
    1f0c:	4b33      	ldr	r3, [pc, #204]	; (1fdc <ConfigurePins+0xd8>)
    1f0e:	691b      	ldr	r3, [r3, #16]
    1f10:	0c1b      	lsrs	r3, r3, #16
    1f12:	041b      	lsls	r3, r3, #16
    1f14:	6113      	str	r3, [r2, #16]
	LPC_GPIO2->FIODIR |= 0xFF; // P2[0..7] =
    1f16:	4a32      	ldr	r2, [pc, #200]	; (1fe0 <ConfigurePins+0xdc>)
    1f18:	4b31      	ldr	r3, [pc, #196]	; (1fe0 <ConfigurePins+0xdc>)
    1f1a:	681b      	ldr	r3, [r3, #0]
    1f1c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1f20:	6013      	str	r3, [r2, #0]
	LPC_PINCON->PINSEL9 &= ~(0xFFFF); // Reset P4[24..31] = GPIO
    1f22:	4a2e      	ldr	r2, [pc, #184]	; (1fdc <ConfigurePins+0xd8>)
    1f24:	4b2d      	ldr	r3, [pc, #180]	; (1fdc <ConfigurePins+0xd8>)
    1f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1f28:	0c1b      	lsrs	r3, r3, #16
    1f2a:	041b      	lsls	r3, r3, #16
    1f2c:	6253      	str	r3, [r2, #36]	; 0x24
	LPC_GPIO4->FIODIR = (1 << 28) | (1 << 29);
    1f2e:	4b2d      	ldr	r3, [pc, #180]	; (1fe4 <ConfigurePins+0xe0>)
    1f30:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    1f34:	601a      	str	r2, [r3, #0]
	LPC_GPIO0->FIODIR &= (1 << 7); //P0[7] DIN 1 as input --> Default mode pull up enabled.
    1f36:	4a2c      	ldr	r2, [pc, #176]	; (1fe8 <ConfigurePins+0xe4>)
    1f38:	4b2b      	ldr	r3, [pc, #172]	; (1fe8 <ConfigurePins+0xe4>)
    1f3a:	681b      	ldr	r3, [r3, #0]
    1f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1f40:	6013      	str	r3, [r2, #0]
	LPC_GPIO0->FIODIR &= ~(1 << 29 | 1 << 30); //P0[30] as input
    1f42:	4a29      	ldr	r2, [pc, #164]	; (1fe8 <ConfigurePins+0xe4>)
    1f44:	4b28      	ldr	r3, [pc, #160]	; (1fe8 <ConfigurePins+0xe4>)
    1f46:	681b      	ldr	r3, [r3, #0]
    1f48:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
    1f4c:	6013      	str	r3, [r2, #0]
	LPC_GPIO0->FIODIR |= (1 << 5);
    1f4e:	4a26      	ldr	r2, [pc, #152]	; (1fe8 <ConfigurePins+0xe4>)
    1f50:	4b25      	ldr	r3, [pc, #148]	; (1fe8 <ConfigurePins+0xe4>)
    1f52:	681b      	ldr	r3, [r3, #0]
    1f54:	f043 0320 	orr.w	r3, r3, #32
    1f58:	6013      	str	r3, [r2, #0]
	//Init ADC
	uint32_t u32PCLKDIV, u32PCLK;
	LPC_SC->PCONP |= (1 << 12);
    1f5a:	4a24      	ldr	r2, [pc, #144]	; (1fec <ConfigurePins+0xe8>)
    1f5c:	4b23      	ldr	r3, [pc, #140]	; (1fec <ConfigurePins+0xe8>)
    1f5e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1f62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1f66:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	u32PCLKDIV = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
    1f6a:	4b20      	ldr	r3, [pc, #128]	; (1fec <ConfigurePins+0xe8>)
    1f6c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    1f70:	099b      	lsrs	r3, r3, #6
    1f72:	f003 0303 	and.w	r3, r3, #3
    1f76:	607b      	str	r3, [r7, #4]
	switch (u32PCLKDIV) {
    1f78:	687b      	ldr	r3, [r7, #4]
    1f7a:	2b02      	cmp	r3, #2
    1f7c:	d009      	beq.n	1f92 <ConfigurePins+0x8e>
    1f7e:	2b03      	cmp	r3, #3
    1f80:	d00a      	beq.n	1f98 <ConfigurePins+0x94>
    1f82:	2b01      	cmp	r3, #1
    1f84:	d002      	beq.n	1f8c <ConfigurePins+0x88>
	case 0x00:
	default:
		u32PCLK = 12000000 / 4;
    1f86:	4b1a      	ldr	r3, [pc, #104]	; (1ff0 <ConfigurePins+0xec>)
    1f88:	603b      	str	r3, [r7, #0]
		break;
    1f8a:	e008      	b.n	1f9e <ConfigurePins+0x9a>
	case 0x01:
		u32PCLK = 12000000;
    1f8c:	4b19      	ldr	r3, [pc, #100]	; (1ff4 <ConfigurePins+0xf0>)
    1f8e:	603b      	str	r3, [r7, #0]
		break;
    1f90:	e005      	b.n	1f9e <ConfigurePins+0x9a>
	case 0x02:
		u32PCLK = 12000000 / 2;
    1f92:	4b19      	ldr	r3, [pc, #100]	; (1ff8 <ConfigurePins+0xf4>)
    1f94:	603b      	str	r3, [r7, #0]
		break;
    1f96:	e002      	b.n	1f9e <ConfigurePins+0x9a>
	case 0x03:
		u32PCLK = 12000000 / 8;
    1f98:	4b18      	ldr	r3, [pc, #96]	; (1ffc <ConfigurePins+0xf8>)
    1f9a:	603b      	str	r3, [r7, #0]
		break;
    1f9c:	bf00      	nop
	//LPC_ADC->ADCR = (1 << 3) | ((u32PCLK / 12000000 - 1) << 8) | (0 << 16) | (0
	//		<< 17) | (1 << 21) | (0 << 24) | (0 << 27);
	//LPC_PINCON->PINSEL1 |= (1U << 20);
	///ADC//
	//External Power Pin
	LPC_GPIO0->FIODIR &= ~(1 << 22);
    1f9e:	4a12      	ldr	r2, [pc, #72]	; (1fe8 <ConfigurePins+0xe4>)
    1fa0:	4b11      	ldr	r3, [pc, #68]	; (1fe8 <ConfigurePins+0xe4>)
    1fa2:	681b      	ldr	r3, [r3, #0]
    1fa4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    1fa8:	6013      	str	r3, [r2, #0]
	//Ignition Pin
	LPC_GPIO0->FIODIR &= ~(1 << 21);
    1faa:	4a0f      	ldr	r2, [pc, #60]	; (1fe8 <ConfigurePins+0xe4>)
    1fac:	4b0e      	ldr	r3, [pc, #56]	; (1fe8 <ConfigurePins+0xe4>)
    1fae:	681b      	ldr	r3, [r3, #0]
    1fb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
    1fb4:	6013      	str	r3, [r2, #0]
	#ifdef brisa
		DIGITAL_IN1_PIN = 21;
	#endif
	LPC_GPIOINT->IO0IntEnR |= (1 << 22); // Rising edge
    1fb6:	4a12      	ldr	r2, [pc, #72]	; (2000 <ConfigurePins+0xfc>)
    1fb8:	4b11      	ldr	r3, [pc, #68]	; (2000 <ConfigurePins+0xfc>)
    1fba:	691b      	ldr	r3, [r3, #16]
    1fbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1fc0:	6113      	str	r3, [r2, #16]
	LPC_GPIOINT->IO0IntEnF |= (1 << 22); // Falling edge
    1fc2:	4a0f      	ldr	r2, [pc, #60]	; (2000 <ConfigurePins+0xfc>)
    1fc4:	4b0e      	ldr	r3, [pc, #56]	; (2000 <ConfigurePins+0xfc>)
    1fc6:	695b      	ldr	r3, [r3, #20]
    1fc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1fcc:	6153      	str	r3, [r2, #20]
	NVIC_EnableIRQ(EINT3_IRQn);
    1fce:	2015      	movs	r0, #21
    1fd0:	f7ff ff34 	bl	1e3c <NVIC_EnableIRQ>
}
    1fd4:	3708      	adds	r7, #8
    1fd6:	46bd      	mov	sp, r7
    1fd8:	bd80      	pop	{r7, pc}
    1fda:	bf00      	nop
    1fdc:	4002c000 	.word	0x4002c000
    1fe0:	2009c040 	.word	0x2009c040
    1fe4:	2009c080 	.word	0x2009c080
    1fe8:	2009c000 	.word	0x2009c000
    1fec:	400fc000 	.word	0x400fc000
    1ff0:	002dc6c0 	.word	0x002dc6c0
    1ff4:	00b71b00 	.word	0x00b71b00
    1ff8:	005b8d80 	.word	0x005b8d80
    1ffc:	0016e360 	.word	0x0016e360
    2000:	40028080 	.word	0x40028080

00002004 <main>:
			is_conn = GSM_ConnectToTrio();
	}
	return is_conn;
}

int main(void) {
    2004:	b580      	push	{r7, lr}
    2006:	b0b8      	sub	sp, #224	; 0xe0
    2008:	af00      	add	r7, sp, #0
	char buffer[200];
	device_power_state = high_power_state;
    200a:	4b61      	ldr	r3, [pc, #388]	; (2190 <main+0x18c>)
    200c:	2201      	movs	r2, #1
    200e:	701a      	strb	r2, [r3, #0]
	SystemInit();
    2010:	f001 fbe4 	bl	37dc <SystemInit>
	LPC_SC->CLKSRCSEL |= 0x01;//0x01;
    2014:	4a5f      	ldr	r2, [pc, #380]	; (2194 <main+0x190>)
    2016:	4b5f      	ldr	r3, [pc, #380]	; (2194 <main+0x190>)
    2018:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    201c:	f043 0301 	orr.w	r3, r3, #1
    2020:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	LPC_SC->PLL0CFG |= 0x01; // Select external osc. as main clock.
    2024:	4a5b      	ldr	r2, [pc, #364]	; (2194 <main+0x190>)
    2026:	4b5b      	ldr	r3, [pc, #364]	; (2194 <main+0x190>)
    2028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    202c:	f043 0301 	orr.w	r3, r3, #1
    2030:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	LPC_SC->CCLKCFG = 0x03; // Main PLL is divided by 8
    2034:	4b57      	ldr	r3, [pc, #348]	; (2194 <main+0x190>)
    2036:	2203      	movs	r2, #3
    2038:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	SystemCoreClockUpdate();
    203c:	f001 fb78 	bl	3730 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000 - 1); // Generate f each 1 ms, used to enable DelayMs function?
    2040:	4b55      	ldr	r3, [pc, #340]	; (2198 <main+0x194>)
    2042:	681b      	ldr	r3, [r3, #0]
    2044:	4a55      	ldr	r2, [pc, #340]	; (219c <main+0x198>)
    2046:	fba2 2303 	umull	r2, r3, r2, r3
    204a:	099b      	lsrs	r3, r3, #6
    204c:	3b01      	subs	r3, #1
    204e:	4618      	mov	r0, r3
    2050:	f7ff ff36 	bl	1ec0 <SysTick_Config>
	WDTInit(WDT_FEED_30_SECS);
    2054:	4852      	ldr	r0, [pc, #328]	; (21a0 <main+0x19c>)
    2056:	f001 f8cd 	bl	31f4 <WDTInit>

	ConfigurePins();
    205a:	f7ff ff53 	bl	1f04 <ConfigurePins>
	UARTInit(PORT_TRACE, 115200);
    205e:	2000      	movs	r0, #0
    2060:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    2064:	f000 fdb6 	bl	2bd4 <UARTInit>
	UARTInit(PORT_GSM, Baudrate);
    2068:	2001      	movs	r0, #1
    206a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    206e:	f000 fdb1 	bl	2bd4 <UARTInit>
	UARTInit(PORT_GPS, Baudrate);
    2072:	2002      	movs	r0, #2
    2074:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    2078:	f000 fdac 	bl	2bd4 <UARTInit>
	TraceNL("Hello P65 20150520.");
    207c:	4849      	ldr	r0, [pc, #292]	; (21a4 <main+0x1a0>)
    207e:	f000 fa57 	bl	2530 <TraceNL>
	sprintf(buffer, "SystemCoreClock = %d Hz\n", SystemCoreClock);
    2082:	4b45      	ldr	r3, [pc, #276]	; (2198 <main+0x194>)
    2084:	681b      	ldr	r3, [r3, #0]
    2086:	1d3a      	adds	r2, r7, #4
    2088:	4610      	mov	r0, r2
    208a:	4947      	ldr	r1, [pc, #284]	; (21a8 <main+0x1a4>)
    208c:	461a      	mov	r2, r3
    208e:	f001 fce7 	bl	3a60 <sprintf>
	//UARTSend(PORT_TRACE, buffer, count);
	Trace(buffer);
    2092:	1d3b      	adds	r3, r7, #4
    2094:	4618      	mov	r0, r3
    2096:	f000 fa3b 	bl	2510 <Trace>
	if (EEPROM_Init() == 0) /* initialize I2c */{
    209a:	f7fe fb6b 	bl	774 <EEPROM_Init>
    209e:	4603      	mov	r3, r0
    20a0:	2b00      	cmp	r3, #0
    20a2:	d103      	bne.n	20ac <main+0xa8>
		TraceNL("EEPROM Init Error."); /* Fatal error */
    20a4:	4841      	ldr	r0, [pc, #260]	; (21ac <main+0x1a8>)
    20a6:	f000 fa43 	bl	2530 <TraceNL>
    20aa:	e002      	b.n	20b2 <main+0xae>
	} else {
		TraceNL("EEPROM Init Ok.");
    20ac:	4840      	ldr	r0, [pc, #256]	; (21b0 <main+0x1ac>)
    20ae:	f000 fa3f 	bl	2530 <TraceNL>
	}

	LoadParams();
    20b2:	f7fe f925 	bl	300 <LoadParams>
	unsigned long int lastGPSLedToggle = 0;
    20b6:	2300      	movs	r3, #0
    20b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	memset(buffer, 0xAA, sizeof(buffer));
    20bc:	1d3b      	adds	r3, r7, #4
    20be:	4618      	mov	r0, r3
    20c0:	21aa      	movs	r1, #170	; 0xaa
    20c2:	22c8      	movs	r2, #200	; 0xc8
    20c4:	f001 fc04 	bl	38d0 <memset>
	//u32BootLoader_ProgramFlash(buffer,0x30000,16);
	WDTFeed();
    20c8:	f001 f8b2 	bl	3230 <WDTFeed>
	int is_sent = SUCCESS;
    20cc:	2300      	movs	r3, #0
    20ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

	int is_last_speed_zero = 1;
    20d2:	2301      	movs	r3, #1
    20d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	int count ;

	device_power_state = high_power_state;
    20d8:	4b2d      	ldr	r3, [pc, #180]	; (2190 <main+0x18c>)
    20da:	2201      	movs	r2, #1
    20dc:	701a      	strb	r2, [r3, #0]

	/// TODO set a timer in order of update failure to return to older

	TraceNL( "Initializing Server Connection" );
    20de:	4835      	ldr	r0, [pc, #212]	; (21b4 <main+0x1b0>)
    20e0:	f000 fa26 	bl	2530 <TraceNL>

	if( IsUpgradeRequested() )
    20e4:	f000 f87a 	bl	21dc <IsUpgradeRequested>
    20e8:	4603      	mov	r3, r0
    20ea:	2b00      	cmp	r3, #0
    20ec:	d04b      	beq.n	2186 <main+0x182>
	{
		TraceNL( "System image upgrade requested" );
    20ee:	4832      	ldr	r0, [pc, #200]	; (21b8 <main+0x1b4>)
    20f0:	f000 fa1e 	bl	2530 <TraceNL>
		int8_t 	trials = 1;
    20f4:	2301      	movs	r3, #1
    20f6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		while( trials-- > 0 )
    20fa:	e037      	b.n	216c <main+0x168>
		{
			TraceNL( "Trial" );
    20fc:	482f      	ldr	r0, [pc, #188]	; (21bc <main+0x1b8>)
    20fe:	f000 fa17 	bl	2530 <TraceNL>
			 * 	Setup a server connection
			 *
			 */

			// InitializeServerConn();
			if( GSM_ConnectToTrioUpgradeServer() == SUCCESS )
    2102:	f7fe fcd9 	bl	ab8 <GSM_ConnectToTrioUpgradeServer>
    2106:	4603      	mov	r3, r0
    2108:	2b00      	cmp	r3, #0
    210a:	d12c      	bne.n	2166 <main+0x162>
			{
				TraceNL( "Server Connection Established to Upgrade server" );
    210c:	482c      	ldr	r0, [pc, #176]	; (21c0 <main+0x1bc>)
    210e:	f000 fa0f 	bl	2530 <TraceNL>

				//GSM_SendToServerTCP( "[ST;70;r2246;P65-20150204-1;;HELLO]" );

				WDTFeed( );
    2112:	f001 f88d 	bl	3230 <WDTFeed>

				DownloadSecondaryImage();
    2116:	f000 f871 	bl	21fc <DownloadSecondaryImage>

				TraceNL( "Download finished " );
    211a:	482a      	ldr	r0, [pc, #168]	; (21c4 <main+0x1c0>)
    211c:	f000 fa08 	bl	2530 <TraceNL>
				ExecuteApplicationImage(SECONDARY_IMAGE_LOAD_ADDR);
    2120:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2124:	f000 f8a6 	bl	2274 <ExecuteApplicationImage>

				for ( count = 0; count < 100000000; count++)
    2128:	2300      	movs	r3, #0
    212a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    212e:	e015      	b.n	215c <main+0x158>
					if( count % 10000000 == 0)
    2130:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
    2134:	4b24      	ldr	r3, [pc, #144]	; (21c8 <main+0x1c4>)
    2136:	fb83 1302 	smull	r1, r3, r3, r2
    213a:	1599      	asrs	r1, r3, #22
    213c:	17d3      	asrs	r3, r2, #31
    213e:	1acb      	subs	r3, r1, r3
    2140:	4922      	ldr	r1, [pc, #136]	; (21cc <main+0x1c8>)
    2142:	fb01 f303 	mul.w	r3, r1, r3
    2146:	1ad3      	subs	r3, r2, r3
    2148:	2b00      	cmp	r3, #0
    214a:	d102      	bne.n	2152 <main+0x14e>
						TracePutc( '.' );
    214c:	202e      	movs	r0, #46	; 0x2e
    214e:	f000 fa07 	bl	2560 <TracePutc>
				DownloadSecondaryImage();

				TraceNL( "Download finished " );
				ExecuteApplicationImage(SECONDARY_IMAGE_LOAD_ADDR);

				for ( count = 0; count < 100000000; count++)
    2152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    2156:	3301      	adds	r3, #1
    2158:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    215c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    2160:	4a1b      	ldr	r2, [pc, #108]	; (21d0 <main+0x1cc>)
    2162:	4293      	cmp	r3, r2
    2164:	dde4      	ble.n	2130 <main+0x12c>
					if( count % 10000000 == 0)
						TracePutc( '.' );
			}
			TraceNL( "Trial end" );
    2166:	481b      	ldr	r0, [pc, #108]	; (21d4 <main+0x1d0>)
    2168:	f000 f9e2 	bl	2530 <TraceNL>

	if( IsUpgradeRequested() )
	{
		TraceNL( "System image upgrade requested" );
		int8_t 	trials = 1;
		while( trials-- > 0 )
    216c:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
    2170:	b2d3      	uxtb	r3, r2
    2172:	3b01      	subs	r3, #1
    2174:	b2db      	uxtb	r3, r3
    2176:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    217a:	b253      	sxtb	r3, r2
    217c:	2b00      	cmp	r3, #0
    217e:	dcbd      	bgt.n	20fc <main+0xf8>
					if( count % 10000000 == 0)
						TracePutc( '.' );
			}
			TraceNL( "Trial end" );
		}
		TraceNL( "Finished upgrading" );
    2180:	4815      	ldr	r0, [pc, #84]	; (21d8 <main+0x1d4>)
    2182:	f000 f9d5 	bl	2530 <TraceNL>
//	// Valid application does not exists. Get one from UART 0
//	enter_serial_isp();
//
//	while ( 1 );	// assert should not get here
//	return (0);
}
    2186:	4618      	mov	r0, r3
    2188:	37e0      	adds	r7, #224	; 0xe0
    218a:	46bd      	mov	sp, r7
    218c:	bd80      	pop	{r7, pc}
    218e:	bf00      	nop
    2190:	10000de8 	.word	0x10000de8
    2194:	400fc000 	.word	0x400fc000
    2198:	10000018 	.word	0x10000018
    219c:	10624dd3 	.word	0x10624dd3
    21a0:	0c6aea15 	.word	0x0c6aea15
    21a4:	00006d08 	.word	0x00006d08
    21a8:	00006d1c 	.word	0x00006d1c
    21ac:	00006d38 	.word	0x00006d38
    21b0:	00006d4c 	.word	0x00006d4c
    21b4:	00006d5c 	.word	0x00006d5c
    21b8:	00006d7c 	.word	0x00006d7c
    21bc:	00006d9c 	.word	0x00006d9c
    21c0:	00006da4 	.word	0x00006da4
    21c4:	00006dd4 	.word	0x00006dd4
    21c8:	6b5fca6b 	.word	0x6b5fca6b
    21cc:	00989680 	.word	0x00989680
    21d0:	05f5e0ff 	.word	0x05f5e0ff
    21d4:	00006de8 	.word	0x00006de8
    21d8:	00006df4 	.word	0x00006df4

000021dc <IsUpgradeRequested>:
** Returned value:	TRUE	upgrade is requested
** 					FALSE   upgrade is not requested
**
******************************************************************************/
uint32_t	IsUpgradeRequested( void )
{
    21dc:	b480      	push	{r7}
    21de:	af00      	add	r7, sp, #0
	// TODO for test purposes allways upgrade requested later change
	if( (*( (uint32_t *) UPGRADE_PARAMETERS_ADDR) ) == 0xFFFFFFFF )
    21e0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
    21e4:	681b      	ldr	r3, [r3, #0]
    21e6:	f1b3 3fff 	cmp.w	r3, #4294967295
    21ea:	d101      	bne.n	21f0 <IsUpgradeRequested+0x14>
	{
		return TRUE;
    21ec:	2301      	movs	r3, #1
    21ee:	e000      	b.n	21f2 <IsUpgradeRequested+0x16>
	}

	return FALSE;
    21f0:	2300      	movs	r3, #0
}
    21f2:	4618      	mov	r0, r3
    21f4:	46bd      	mov	sp, r7
    21f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    21fa:	4770      	bx	lr

000021fc <DownloadSecondaryImage>:


void DownloadSecondaryImage( void )
{
    21fc:	b580      	push	{r7, lr}
    21fe:	b082      	sub	sp, #8
    2200:	af00      	add	r7, sp, #0
	uint32_t	reason;
	uint32_t	i;

	for( i = SECONDARY_IMAGE_START_SEC; i <= SECONDARY_IMAGE_START_SEC; i++ )
    2202:	2316      	movs	r3, #22
    2204:	607b      	str	r3, [r7, #4]
    2206:	e006      	b.n	2216 <DownloadSecondaryImage+0x1a>
		u32IAP_EraseSectors( i, i);
    2208:	6878      	ldr	r0, [r7, #4]
    220a:	6879      	ldr	r1, [r7, #4]
    220c:	f7ff fd90 	bl	1d30 <u32IAP_EraseSectors>
void DownloadSecondaryImage( void )
{
	uint32_t	reason;
	uint32_t	i;

	for( i = SECONDARY_IMAGE_START_SEC; i <= SECONDARY_IMAGE_START_SEC; i++ )
    2210:	687b      	ldr	r3, [r7, #4]
    2212:	3301      	adds	r3, #1
    2214:	607b      	str	r3, [r7, #4]
    2216:	687b      	ldr	r3, [r7, #4]
    2218:	2b16      	cmp	r3, #22
    221a:	d9f5      	bls.n	2208 <DownloadSecondaryImage+0xc>
		u32IAP_EraseSectors( i, i);

	TraceNL( "Checking if target memory is blank" );
    221c:	480f      	ldr	r0, [pc, #60]	; (225c <DownloadSecondaryImage+0x60>)
    221e:	f000 f987 	bl	2530 <TraceNL>
	if( u32IAP_BlankCheckSectors( SECONDARY_IMAGE_START_SEC,
    2222:	463b      	mov	r3, r7
    2224:	2016      	movs	r0, #22
    2226:	211a      	movs	r1, #26
    2228:	461a      	mov	r2, r3
    222a:	f7ff fdb1 	bl	1d90 <u32IAP_BlankCheckSectors>
    222e:	4603      	mov	r3, r0
    2230:	2b08      	cmp	r3, #8
    2232:	d103      	bne.n	223c <DownloadSecondaryImage+0x40>
			                      SECONDARY_IMAGE_END_SEC - 1, &reason )
			== IAP_STA_SECTOR_NOT_BLANK )
	{
		TraceNL( "Erasing flash range for the image" );
    2234:	480a      	ldr	r0, [pc, #40]	; (2260 <DownloadSecondaryImage+0x64>)
    2236:	f000 f97b 	bl	2530 <TraceNL>
    223a:	e002      	b.n	2242 <DownloadSecondaryImage+0x46>
		// u32IAP_EraseSectors( SECONDARY_IMAGE_START_SEC, SECONDARY_IMAGE_END_SEC);
	}else
	{
		TraceNL( "Target flash range is blank" );
    223c:	4809      	ldr	r0, [pc, #36]	; (2264 <DownloadSecondaryImage+0x68>)
    223e:	f000 f977 	bl	2530 <TraceNL>
	}

	/*	Clear the received data counter using in the load_mage function */
	received_data = 0;
    2242:	4b09      	ldr	r3, [pc, #36]	; (2268 <DownloadSecondaryImage+0x6c>)
    2244:	2200      	movs	r2, #0
    2246:	601a      	str	r2, [r3, #0]

	TraceNL( "Starting download" );
    2248:	4808      	ldr	r0, [pc, #32]	; (226c <DownloadSecondaryImage+0x70>)
    224a:	f000 f971 	bl	2530 <TraceNL>
	/*	Store a new image into flash */
	XModem1K_Client( &load_image );
    224e:	4808      	ldr	r0, [pc, #32]	; (2270 <DownloadSecondaryImage+0x74>)
    2250:	f001 f8a4 	bl	339c <XModem1K_Client>
}
    2254:	3708      	adds	r7, #8
    2256:	46bd      	mov	sp, r7
    2258:	bd80      	pop	{r7, pc}
    225a:	bf00      	nop
    225c:	00006f18 	.word	0x00006f18
    2260:	00006f3c 	.word	0x00006f3c
    2264:	00006f60 	.word	0x00006f60
    2268:	10000134 	.word	0x10000134
    226c:	00006f7c 	.word	0x00006f7c
    2270:	000022a5 	.word	0x000022a5

00002274 <ExecuteApplicationImage>:

}


void ExecuteApplicationImage( unsigned int startAddress )
{
    2274:	b580      	push	{r7, lr}
    2276:	b084      	sub	sp, #16
    2278:	af00      	add	r7, sp, #0
    227a:	6078      	str	r0, [r7, #4]
	unsigned *p;	// used for loading address of reset handler from user flash

	/* Change the Vector Table to the
	in case the user application uses interrupts */

	SCB->VTOR = (startAddress & 0x1FFFFF80);
    227c:	4a08      	ldr	r2, [pc, #32]	; (22a0 <ExecuteApplicationImage+0x2c>)
    227e:	687b      	ldr	r3, [r7, #4]
    2280:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    2284:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2288:	6093      	str	r3, [r2, #8]

	// Load contents of second word of user flash - the reset handler address
	// in the applications vector table
	p = (unsigned *)(startAddress + 4);
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	3304      	adds	r3, #4
    228e:	60fb      	str	r3, [r7, #12]

	// Set user_code_entry to be the address contained in that second word
	// of user flash
	user_code_entry = (void *) *p;
    2290:	68fb      	ldr	r3, [r7, #12]
    2292:	681b      	ldr	r3, [r3, #0]
    2294:	60bb      	str	r3, [r7, #8]

	// Jump to user application
    user_code_entry();
    2296:	68bb      	ldr	r3, [r7, #8]
    2298:	4798      	blx	r3
}
    229a:	3710      	adds	r7, #16
    229c:	46bd      	mov	sp, r7
    229e:	bd80      	pop	{r7, pc}
    22a0:	e000ed00 	.word	0xe000ed00

000022a4 <load_image>:

static uint32_t load_image(uint8_t *data, uint16_t length){
    22a4:	b580      	push	{r7, lr}
    22a6:	b0c4      	sub	sp, #272	; 0x110
    22a8:	af00      	add	r7, sp, #0
    22aa:	1d3b      	adds	r3, r7, #4
    22ac:	6018      	str	r0, [r3, #0]
    22ae:	460a      	mov	r2, r1
    22b0:	1cbb      	adds	r3, r7, #2
    22b2:	801a      	strh	r2, [r3, #0]

	char buffer[250];
	uint32_t rc;
	int i;

	if( length == 0 && flashWriteIndex == 0 )
    22b4:	1cbb      	adds	r3, r7, #2
    22b6:	881b      	ldrh	r3, [r3, #0]
    22b8:	2b00      	cmp	r3, #0
    22ba:	d105      	bne.n	22c8 <load_image+0x24>
    22bc:	4b75      	ldr	r3, [pc, #468]	; (2494 <load_image+0x1f0>)
    22be:	681b      	ldr	r3, [r3, #0]
    22c0:	2b00      	cmp	r3, #0
    22c2:	d101      	bne.n	22c8 <load_image+0x24>
	{
		// Finished and all previous data has been written
		return ( 2 ); // return non zero to indicate success
    22c4:	2302      	movs	r3, #2
    22c6:	e0e0      	b.n	248a <load_image+0x1e6>
	}


	for( i = 0; i < length; i++ )
    22c8:	2300      	movs	r3, #0
    22ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    22ce:	e011      	b.n	22f4 <load_image+0x50>
	{
		flashWriteBuffer[flashWriteIndex++] = data[i];
    22d0:	4b70      	ldr	r3, [pc, #448]	; (2494 <load_image+0x1f0>)
    22d2:	681b      	ldr	r3, [r3, #0]
    22d4:	1c5a      	adds	r2, r3, #1
    22d6:	496f      	ldr	r1, [pc, #444]	; (2494 <load_image+0x1f0>)
    22d8:	600a      	str	r2, [r1, #0]
    22da:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    22de:	1d39      	adds	r1, r7, #4
    22e0:	6809      	ldr	r1, [r1, #0]
    22e2:	440a      	add	r2, r1
    22e4:	7811      	ldrb	r1, [r2, #0]
    22e6:	4a6c      	ldr	r2, [pc, #432]	; (2498 <load_image+0x1f4>)
    22e8:	54d1      	strb	r1, [r2, r3]
		// Finished and all previous data has been written
		return ( 2 ); // return non zero to indicate success
	}


	for( i = 0; i < length; i++ )
    22ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    22ee:	3301      	adds	r3, #1
    22f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    22f4:	1cbb      	adds	r3, r7, #2
    22f6:	881a      	ldrh	r2, [r3, #0]
    22f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    22fc:	429a      	cmp	r2, r3
    22fe:	dce7      	bgt.n	22d0 <load_image+0x2c>
	{
		flashWriteBuffer[flashWriteIndex++] = data[i];
	}

	if( length == 0 && (flashWriteIndex % FLASH_SECTOR_SIZE) )
    2300:	1cbb      	adds	r3, r7, #2
    2302:	881b      	ldrh	r3, [r3, #0]
    2304:	2b00      	cmp	r3, #0
    2306:	d11a      	bne.n	233e <load_image+0x9a>
    2308:	4b62      	ldr	r3, [pc, #392]	; (2494 <load_image+0x1f0>)
    230a:	681b      	ldr	r3, [r3, #0]
    230c:	b2db      	uxtb	r3, r3
    230e:	2b00      	cmp	r3, #0
    2310:	d015      	beq.n	233e <load_image+0x9a>
	{
		for( i = flashWriteIndex; i < FLASH_SECTOR_SIZE; i++ )
    2312:	4b60      	ldr	r3, [pc, #384]	; (2494 <load_image+0x1f0>)
    2314:	681b      	ldr	r3, [r3, #0]
    2316:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    231a:	e00c      	b.n	2336 <load_image+0x92>
		{
			flashWriteBuffer[flashWriteIndex++] = 0xFF;
    231c:	4b5d      	ldr	r3, [pc, #372]	; (2494 <load_image+0x1f0>)
    231e:	681b      	ldr	r3, [r3, #0]
    2320:	1c5a      	adds	r2, r3, #1
    2322:	495c      	ldr	r1, [pc, #368]	; (2494 <load_image+0x1f0>)
    2324:	600a      	str	r2, [r1, #0]
    2326:	4a5c      	ldr	r2, [pc, #368]	; (2498 <load_image+0x1f4>)
    2328:	21ff      	movs	r1, #255	; 0xff
    232a:	54d1      	strb	r1, [r2, r3]
		flashWriteBuffer[flashWriteIndex++] = data[i];
	}

	if( length == 0 && (flashWriteIndex % FLASH_SECTOR_SIZE) )
	{
		for( i = flashWriteIndex; i < FLASH_SECTOR_SIZE; i++ )
    232c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2330:	3301      	adds	r3, #1
    2332:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    2336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    233a:	2bff      	cmp	r3, #255	; 0xff
    233c:	ddee      	ble.n	231c <load_image+0x78>
		{
			flashWriteBuffer[flashWriteIndex++] = 0xFF;
		}

	}
	if( flashWriteIndex && ((flashWriteIndex % FLASH_SECTOR_SIZE) == 0) )
    233e:	4b55      	ldr	r3, [pc, #340]	; (2494 <load_image+0x1f0>)
    2340:	681b      	ldr	r3, [r3, #0]
    2342:	2b00      	cmp	r3, #0
    2344:	f000 80a0 	beq.w	2488 <load_image+0x1e4>
    2348:	4b52      	ldr	r3, [pc, #328]	; (2494 <load_image+0x1f0>)
    234a:	681b      	ldr	r3, [r3, #0]
    234c:	b2db      	uxtb	r3, r3
    234e:	2b00      	cmp	r3, #0
    2350:	f040 809a 	bne.w	2488 <load_image+0x1e4>
	{
		sprintf(buffer, "Totally : %d  flashWriteIndex : %d\r\n",
    2354:	4b51      	ldr	r3, [pc, #324]	; (249c <load_image+0x1f8>)
    2356:	681a      	ldr	r2, [r3, #0]
    2358:	4b4e      	ldr	r3, [pc, #312]	; (2494 <load_image+0x1f0>)
    235a:	681b      	ldr	r3, [r3, #0]
    235c:	f107 0108 	add.w	r1, r7, #8
    2360:	4608      	mov	r0, r1
    2362:	494f      	ldr	r1, [pc, #316]	; (24a0 <load_image+0x1fc>)
    2364:	f001 fb7c 	bl	3a60 <sprintf>
//		TraceDumpHex(buffer, strlen(buffer));
//		TraceDumpHex(flashWriteBuffer, flashWriteIndex);

		/*	Prepare Sectors to be flashed */
		// TODO arrange sectors for primary image
		if (u32IAP_PrepareSectors(22, 27) == IAP_STA_CMD_SUCCESS) {
    2368:	2016      	movs	r0, #22
    236a:	211b      	movs	r1, #27
    236c:	f7ff fc92 	bl	1c94 <u32IAP_PrepareSectors>
    2370:	4603      	mov	r3, r0
    2372:	2b00      	cmp	r3, #0
    2374:	f040 8088 	bne.w	2488 <load_image+0x1e4>
			TraceNL("prepare ");
    2378:	484a      	ldr	r0, [pc, #296]	; (24a4 <load_image+0x200>)
    237a:	f000 f8d9 	bl	2530 <TraceNL>

			rc = u32IAP_CopyRAMToFlash(
    237e:	4b47      	ldr	r3, [pc, #284]	; (249c <load_image+0x1f8>)
    2380:	681b      	ldr	r3, [r3, #0]
    2382:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
    2386:	4944      	ldr	r1, [pc, #272]	; (2498 <load_image+0x1f4>)
    2388:	4b42      	ldr	r3, [pc, #264]	; (2494 <load_image+0x1f0>)
    238a:	681b      	ldr	r3, [r3, #0]
    238c:	4610      	mov	r0, r2
    238e:	461a      	mov	r2, r3
    2390:	f7ff fca4 	bl	1cdc <u32IAP_CopyRAMToFlash>
    2394:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
					SECONDARY_IMAGE_LOAD_ADDR + received_data,
					(uint32_t) flashWriteBuffer,
					flashWriteIndex
					);

			sprintf( buffer, "Copy Ram result code : %d\r\n", rc );
    2398:	f107 0308 	add.w	r3, r7, #8
    239c:	4618      	mov	r0, r3
    239e:	4942      	ldr	r1, [pc, #264]	; (24a8 <load_image+0x204>)
    23a0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    23a4:	f001 fb5c 	bl	3a60 <sprintf>
			TraceNL( buffer );
    23a8:	f107 0308 	add.w	r3, r7, #8
    23ac:	4618      	mov	r0, r3
    23ae:	f000 f8bf 	bl	2530 <TraceNL>
			/*	Copy data (already) located in RAM to flash */
			if (rc == IAP_STA_CMD_SUCCESS) {
    23b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    23b6:	2b00      	cmp	r3, #0
    23b8:	d166      	bne.n	2488 <load_image+0x1e4>
				TraceNL( "copied " );
    23ba:	483c      	ldr	r0, [pc, #240]	; (24ac <load_image+0x208>)
    23bc:	f000 f8b8 	bl	2530 <TraceNL>

				rc = u32IAP_Compare( SECONDARY_IMAGE_LOAD_ADDR + received_data,
    23c0:	4b36      	ldr	r3, [pc, #216]	; (249c <load_image+0x1f8>)
    23c2:	681b      	ldr	r3, [r3, #0]
    23c4:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
    23c8:	4933      	ldr	r1, [pc, #204]	; (2498 <load_image+0x1f4>)
    23ca:	4b32      	ldr	r3, [pc, #200]	; (2494 <load_image+0x1f0>)
    23cc:	681b      	ldr	r3, [r3, #0]
    23ce:	4610      	mov	r0, r2
    23d0:	461a      	mov	r2, r3
    23d2:	2300      	movs	r3, #0
    23d4:	f7ff fd0a 	bl	1dec <u32IAP_Compare>
    23d8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
						             (uint32_t) flashWriteBuffer,
									 flashWriteIndex, 0
									);
				sprintf( buffer, "u32IAP_Compare : %d\r\n", rc );
    23dc:	f107 0308 	add.w	r3, r7, #8
    23e0:	4618      	mov	r0, r3
    23e2:	4933      	ldr	r1, [pc, #204]	; (24b0 <load_image+0x20c>)
    23e4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    23e8:	f001 fb3a 	bl	3a60 <sprintf>
				TraceNL( buffer );
    23ec:	f107 0308 	add.w	r3, r7, #8
    23f0:	4618      	mov	r0, r3
    23f2:	f000 f89d 	bl	2530 <TraceNL>

				/*	Verify the flash contents with the contents in RAM */
				if (rc == IAP_STA_CMD_SUCCESS) {
    23f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    23fa:	2b00      	cmp	r3, #0
    23fc:	d10e      	bne.n	241c <load_image+0x178>
					/*	Update and Print Received bytes counter */
					received_data += flashWriteIndex;
    23fe:	4b27      	ldr	r3, [pc, #156]	; (249c <load_image+0x1f8>)
    2400:	681a      	ldr	r2, [r3, #0]
    2402:	4b24      	ldr	r3, [pc, #144]	; (2494 <load_image+0x1f0>)
    2404:	681b      	ldr	r3, [r3, #0]
    2406:	4413      	add	r3, r2
    2408:	4a24      	ldr	r2, [pc, #144]	; (249c <load_image+0x1f8>)
    240a:	6013      	str	r3, [r2, #0]
					//snprintf((char *)string, MAX_STRING_SIZE, "Received %d of %d bytes", received_data, BMP->bmp_size);
					TraceNL( "verified " );
    240c:	4829      	ldr	r0, [pc, #164]	; (24b4 <load_image+0x210>)
    240e:	f000 f88f 	bl	2530 <TraceNL>

					flashWriteIndex = 0;
    2412:	4b20      	ldr	r3, [pc, #128]	; (2494 <load_image+0x1f0>)
    2414:	2200      	movs	r2, #0
    2416:	601a      	str	r2, [r3, #0]
					return (1);
    2418:	2301      	movs	r3, #1
    241a:	e036      	b.n	248a <load_image+0x1e6>
				} else {
					int count;
					TraceDumpHex( SECONDARY_IMAGE_LOAD_ADDR + received_data, flashWriteIndex);
    241c:	4b1f      	ldr	r3, [pc, #124]	; (249c <load_image+0x1f8>)
    241e:	681b      	ldr	r3, [r3, #0]
    2420:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
    2424:	4b1b      	ldr	r3, [pc, #108]	; (2494 <load_image+0x1f0>)
    2426:	681b      	ldr	r3, [r3, #0]
    2428:	4610      	mov	r0, r2
    242a:	4619      	mov	r1, r3
    242c:	f000 f8c2 	bl	25b4 <TraceDumpHex>

					received_data += flashWriteIndex;
    2430:	4b1a      	ldr	r3, [pc, #104]	; (249c <load_image+0x1f8>)
    2432:	681a      	ldr	r2, [r3, #0]
    2434:	4b17      	ldr	r3, [pc, #92]	; (2494 <load_image+0x1f0>)
    2436:	681b      	ldr	r3, [r3, #0]
    2438:	4413      	add	r3, r2
    243a:	4a18      	ldr	r2, [pc, #96]	; (249c <load_image+0x1f8>)
    243c:	6013      	str	r3, [r2, #0]
					//snprintf((char *)string, MAX_STRING_SIZE, "Received %d of %d bytes", received_data, BMP->bmp_size);
					TraceNL( "verification failed " );
    243e:	481e      	ldr	r0, [pc, #120]	; (24b8 <load_image+0x214>)
    2440:	f000 f876 	bl	2530 <TraceNL>

					for ( count = 0; count < 100000000; count++)
    2444:	2300      	movs	r3, #0
    2446:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    244a:	e015      	b.n	2478 <load_image+0x1d4>
						if( count % 10000000 == 0)
    244c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
    2450:	4b1a      	ldr	r3, [pc, #104]	; (24bc <load_image+0x218>)
    2452:	fb83 1302 	smull	r1, r3, r3, r2
    2456:	1599      	asrs	r1, r3, #22
    2458:	17d3      	asrs	r3, r2, #31
    245a:	1acb      	subs	r3, r1, r3
    245c:	4918      	ldr	r1, [pc, #96]	; (24c0 <load_image+0x21c>)
    245e:	fb01 f303 	mul.w	r3, r1, r3
    2462:	1ad3      	subs	r3, r2, r3
    2464:	2b00      	cmp	r3, #0
    2466:	d102      	bne.n	246e <load_image+0x1ca>
							TracePutc( '.' );
    2468:	202e      	movs	r0, #46	; 0x2e
    246a:	f000 f879 	bl	2560 <TracePutc>

					received_data += flashWriteIndex;
					//snprintf((char *)string, MAX_STRING_SIZE, "Received %d of %d bytes", received_data, BMP->bmp_size);
					TraceNL( "verification failed " );

					for ( count = 0; count < 100000000; count++)
    246e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    2472:	3301      	adds	r3, #1
    2474:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    2478:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    247c:	4a11      	ldr	r2, [pc, #68]	; (24c4 <load_image+0x220>)
    247e:	4293      	cmp	r3, r2
    2480:	dde4      	ble.n	244c <load_image+0x1a8>
						if( count % 10000000 == 0)
							TracePutc( '.' );

					flashWriteIndex = 0;
    2482:	4b04      	ldr	r3, [pc, #16]	; (2494 <load_image+0x1f0>)
    2484:	2200      	movs	r2, #0
    2486:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}

	return (0);
    2488:	2300      	movs	r3, #0
}
    248a:	4618      	mov	r0, r3
    248c:	f507 7788 	add.w	r7, r7, #272	; 0x110
    2490:	46bd      	mov	sp, r7
    2492:	bd80      	pop	{r7, pc}
    2494:	10000130 	.word	0x10000130
    2498:	10000030 	.word	0x10000030
    249c:	10000134 	.word	0x10000134
    24a0:	00006f90 	.word	0x00006f90
    24a4:	00006fb8 	.word	0x00006fb8
    24a8:	00006fc4 	.word	0x00006fc4
    24ac:	00006fe0 	.word	0x00006fe0
    24b0:	00006fe8 	.word	0x00006fe8
    24b4:	00007000 	.word	0x00007000
    24b8:	0000700c 	.word	0x0000700c
    24bc:	6b5fca6b 	.word	0x6b5fca6b
    24c0:	00989680 	.word	0x00989680
    24c4:	05f5e0ff 	.word	0x05f5e0ff

000024c8 <SysTick_Handler>:
 *  Created on: 14 Kas 2012
 *      Author: trio
 */
#include <LPC17xx.h>
#include "timer.h"
void SysTick_Handler(void) {
    24c8:	b480      	push	{r7}
    24ca:	af00      	add	r7, sp, #0
	STT_Value++;
    24cc:	4b04      	ldr	r3, [pc, #16]	; (24e0 <SysTick_Handler+0x18>)
    24ce:	681b      	ldr	r3, [r3, #0]
    24d0:	3301      	adds	r3, #1
    24d2:	4a03      	ldr	r2, [pc, #12]	; (24e0 <SysTick_Handler+0x18>)
    24d4:	6013      	str	r3, [r2, #0]
}
    24d6:	46bd      	mov	sp, r7
    24d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    24dc:	4770      	bx	lr
    24de:	bf00      	nop
    24e0:	10000bac 	.word	0x10000bac

000024e4 <DelayMs>:

void DelayMs(unsigned int t) // 65536 max.
{
    24e4:	b480      	push	{r7}
    24e6:	b085      	sub	sp, #20
    24e8:	af00      	add	r7, sp, #0
    24ea:	6078      	str	r0, [r7, #4]
	unsigned long temp;
	temp = STT_Value;
    24ec:	4b07      	ldr	r3, [pc, #28]	; (250c <DelayMs+0x28>)
    24ee:	681b      	ldr	r3, [r3, #0]
    24f0:	60fb      	str	r3, [r7, #12]
	while ((STT_Value - temp) < t);
    24f2:	bf00      	nop
    24f4:	4b05      	ldr	r3, [pc, #20]	; (250c <DelayMs+0x28>)
    24f6:	681a      	ldr	r2, [r3, #0]
    24f8:	68fb      	ldr	r3, [r7, #12]
    24fa:	1ad2      	subs	r2, r2, r3
    24fc:	687b      	ldr	r3, [r7, #4]
    24fe:	429a      	cmp	r2, r3
    2500:	d3f8      	bcc.n	24f4 <DelayMs+0x10>
}
    2502:	3714      	adds	r7, #20
    2504:	46bd      	mov	sp, r7
    2506:	f85d 7b04 	ldr.w	r7, [sp], #4
    250a:	4770      	bx	lr
    250c:	10000bac 	.word	0x10000bac

00002510 <Trace>:
#include <string.h>
#include <trace.h>


void Trace( char* msg)
{
    2510:	b580      	push	{r7, lr}
    2512:	b082      	sub	sp, #8
    2514:	af00      	add	r7, sp, #0
    2516:	6078      	str	r0, [r7, #4]
	UARTSend(PORT_TRACE, (unsigned char*)msg, strlen(msg));
    2518:	6878      	ldr	r0, [r7, #4]
    251a:	f002 ff09 	bl	5330 <strlen>
    251e:	4603      	mov	r3, r0
    2520:	2000      	movs	r0, #0
    2522:	6879      	ldr	r1, [r7, #4]
    2524:	461a      	mov	r2, r3
    2526:	f000 fcdf 	bl	2ee8 <UARTSend>
}
    252a:	3708      	adds	r7, #8
    252c:	46bd      	mov	sp, r7
    252e:	bd80      	pop	{r7, pc}

00002530 <TraceNL>:

void TraceNL( char* msg)
{
    2530:	b580      	push	{r7, lr}
    2532:	b082      	sub	sp, #8
    2534:	af00      	add	r7, sp, #0
    2536:	6078      	str	r0, [r7, #4]
	UARTSend(PORT_TRACE, (unsigned char*)msg, strlen(msg));
    2538:	6878      	ldr	r0, [r7, #4]
    253a:	f002 fef9 	bl	5330 <strlen>
    253e:	4603      	mov	r3, r0
    2540:	2000      	movs	r0, #0
    2542:	6879      	ldr	r1, [r7, #4]
    2544:	461a      	mov	r2, r3
    2546:	f000 fccf 	bl	2ee8 <UARTSend>
	UARTSend(PORT_TRACE, (unsigned char*)"\r\n", 2);
    254a:	2000      	movs	r0, #0
    254c:	4903      	ldr	r1, [pc, #12]	; (255c <TraceNL+0x2c>)
    254e:	2202      	movs	r2, #2
    2550:	f000 fcca 	bl	2ee8 <UARTSend>
}
    2554:	3708      	adds	r7, #8
    2556:	46bd      	mov	sp, r7
    2558:	bd80      	pop	{r7, pc}
    255a:	bf00      	nop
    255c:	00007024 	.word	0x00007024

00002560 <TracePutc>:

void TracePutc( char c )
{
    2560:	b580      	push	{r7, lr}
    2562:	b082      	sub	sp, #8
    2564:	af00      	add	r7, sp, #0
    2566:	4603      	mov	r3, r0
    2568:	71fb      	strb	r3, [r7, #7]
	UARTSend(PORT_TRACE, (unsigned char*)&c, 1L);
    256a:	1dfb      	adds	r3, r7, #7
    256c:	2000      	movs	r0, #0
    256e:	4619      	mov	r1, r3
    2570:	2201      	movs	r2, #1
    2572:	f000 fcb9 	bl	2ee8 <UARTSend>
}
    2576:	3708      	adds	r7, #8
    2578:	46bd      	mov	sp, r7
    257a:	bd80      	pop	{r7, pc}

0000257c <TracePutcHex>:

void TracePutcHex( char c )
{
    257c:	b580      	push	{r7, lr}
    257e:	b086      	sub	sp, #24
    2580:	af00      	add	r7, sp, #0
    2582:	4603      	mov	r3, r0
    2584:	71fb      	strb	r3, [r7, #7]
	unsigned char  buff[10];
    int count;
	count = sprintf( buff, "%02x", c);
    2586:	79fb      	ldrb	r3, [r7, #7]
    2588:	f107 0208 	add.w	r2, r7, #8
    258c:	4610      	mov	r0, r2
    258e:	4908      	ldr	r1, [pc, #32]	; (25b0 <TracePutcHex+0x34>)
    2590:	461a      	mov	r2, r3
    2592:	f001 fa65 	bl	3a60 <sprintf>
    2596:	6178      	str	r0, [r7, #20]
	UARTSend( PORT_TRACE, buff, count );
    2598:	697b      	ldr	r3, [r7, #20]
    259a:	f107 0208 	add.w	r2, r7, #8
    259e:	2000      	movs	r0, #0
    25a0:	4611      	mov	r1, r2
    25a2:	461a      	mov	r2, r3
    25a4:	f000 fca0 	bl	2ee8 <UARTSend>

}
    25a8:	3718      	adds	r7, #24
    25aa:	46bd      	mov	sp, r7
    25ac:	bd80      	pop	{r7, pc}
    25ae:	bf00      	nop
    25b0:	00007028 	.word	0x00007028

000025b4 <TraceDumpHex>:

void TraceDumpHex( char* pMsg, int len )
{
    25b4:	b580      	push	{r7, lr}
    25b6:	b0d6      	sub	sp, #344	; 0x158
    25b8:	af00      	add	r7, sp, #0
    25ba:	1d3b      	adds	r3, r7, #4
    25bc:	6018      	str	r0, [r3, #0]
    25be:	463b      	mov	r3, r7
    25c0:	6019      	str	r1, [r3, #0]
	int i, count;
	unsigned char buffer[300];
	unsigned char buff[17];
	unsigned char *pc = (unsigned char*) pMsg;
    25c2:	1d3b      	adds	r3, r7, #4
    25c4:	681b      	ldr	r3, [r3, #0]
    25c6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

	UARTSend( PORT_TRACE, "\r\n", 2);
    25ca:	2000      	movs	r0, #0
    25cc:	495a      	ldr	r1, [pc, #360]	; (2738 <TraceDumpHex+0x184>)
    25ce:	2202      	movs	r2, #2
    25d0:	f000 fc8a 	bl	2ee8 <UARTSend>
	// Process every byte in the data.
	for (i = 0; i < len; i++) {
    25d4:	2300      	movs	r3, #0
    25d6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    25da:	e07d      	b.n	26d8 <TraceDumpHex+0x124>
		// Multiple of 16 means new line (with line offset).

		if ((i % 16) == 0) {
    25dc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    25e0:	f003 030f 	and.w	r3, r3, #15
    25e4:	2b00      	cmp	r3, #0
    25e6:	d117      	bne.n	2618 <TraceDumpHex+0x64>
			// Just don't print ASCII for the zeroth line.
			if (i != 0) {
    25e8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    25ec:	2b00      	cmp	r3, #0
    25ee:	d013      	beq.n	2618 <TraceDumpHex+0x64>
				count = sprintf(buffer, "  %s\r\n", buff);
    25f0:	f107 0220 	add.w	r2, r7, #32
    25f4:	f107 030c 	add.w	r3, r7, #12
    25f8:	4610      	mov	r0, r2
    25fa:	4950      	ldr	r1, [pc, #320]	; (273c <TraceDumpHex+0x188>)
    25fc:	461a      	mov	r2, r3
    25fe:	f001 fa2f 	bl	3a60 <sprintf>
    2602:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
				UARTSend( PORT_TRACE, buffer, count);
    2606:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    260a:	f107 0220 	add.w	r2, r7, #32
    260e:	2000      	movs	r0, #0
    2610:	4611      	mov	r1, r2
    2612:	461a      	mov	r2, r3
    2614:	f000 fc68 	bl	2ee8 <UARTSend>
			}
		}
		count = sprintf(buffer, " %02x", pc[i]);
    2618:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    261c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    2620:	4413      	add	r3, r2
    2622:	781b      	ldrb	r3, [r3, #0]
    2624:	461a      	mov	r2, r3
    2626:	f107 0320 	add.w	r3, r7, #32
    262a:	4618      	mov	r0, r3
    262c:	4944      	ldr	r1, [pc, #272]	; (2740 <TraceDumpHex+0x18c>)
    262e:	f001 fa17 	bl	3a60 <sprintf>
    2632:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
		UARTSend( PORT_TRACE, buffer, count );
    2636:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    263a:	f107 0220 	add.w	r2, r7, #32
    263e:	2000      	movs	r0, #0
    2640:	4611      	mov	r1, r2
    2642:	461a      	mov	r2, r3
    2644:	f000 fc50 	bl	2ee8 <UARTSend>

		// And store a printable ASCII character for later.
		if ((pc[i] < 0x20) || (pc[i] > 0x7e))
    2648:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    264c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    2650:	4413      	add	r3, r2
    2652:	781b      	ldrb	r3, [r3, #0]
    2654:	2b1f      	cmp	r3, #31
    2656:	d907      	bls.n	2668 <TraceDumpHex+0xb4>
    2658:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    265c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    2660:	4413      	add	r3, r2
    2662:	781b      	ldrb	r3, [r3, #0]
    2664:	2b7e      	cmp	r3, #126	; 0x7e
    2666:	d90f      	bls.n	2688 <TraceDumpHex+0xd4>
			buff[i % 16] = '.';
    2668:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    266c:	4b35      	ldr	r3, [pc, #212]	; (2744 <TraceDumpHex+0x190>)
    266e:	4013      	ands	r3, r2
    2670:	2b00      	cmp	r3, #0
    2672:	da03      	bge.n	267c <TraceDumpHex+0xc8>
    2674:	3b01      	subs	r3, #1
    2676:	f063 030f 	orn	r3, r3, #15
    267a:	3301      	adds	r3, #1
    267c:	461a      	mov	r2, r3
    267e:	f107 030c 	add.w	r3, r7, #12
    2682:	212e      	movs	r1, #46	; 0x2e
    2684:	5499      	strb	r1, [r3, r2]
    2686:	e013      	b.n	26b0 <TraceDumpHex+0xfc>
		else
			buff[i % 16] = pc[i];
    2688:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    268c:	4b2d      	ldr	r3, [pc, #180]	; (2744 <TraceDumpHex+0x190>)
    268e:	4013      	ands	r3, r2
    2690:	2b00      	cmp	r3, #0
    2692:	da03      	bge.n	269c <TraceDumpHex+0xe8>
    2694:	3b01      	subs	r3, #1
    2696:	f063 030f 	orn	r3, r3, #15
    269a:	3301      	adds	r3, #1
    269c:	4619      	mov	r1, r3
    269e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    26a2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    26a6:	4413      	add	r3, r2
    26a8:	781a      	ldrb	r2, [r3, #0]
    26aa:	f107 030c 	add.w	r3, r7, #12
    26ae:	545a      	strb	r2, [r3, r1]
		buff[(i % 16) + 1] = '\0';
    26b0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    26b4:	4b23      	ldr	r3, [pc, #140]	; (2744 <TraceDumpHex+0x190>)
    26b6:	4013      	ands	r3, r2
    26b8:	2b00      	cmp	r3, #0
    26ba:	da03      	bge.n	26c4 <TraceDumpHex+0x110>
    26bc:	3b01      	subs	r3, #1
    26be:	f063 030f 	orn	r3, r3, #15
    26c2:	3301      	adds	r3, #1
    26c4:	3301      	adds	r3, #1
    26c6:	f107 020c 	add.w	r2, r7, #12
    26ca:	2100      	movs	r1, #0
    26cc:	54d1      	strb	r1, [r2, r3]
	unsigned char buff[17];
	unsigned char *pc = (unsigned char*) pMsg;

	UARTSend( PORT_TRACE, "\r\n", 2);
	// Process every byte in the data.
	for (i = 0; i < len; i++) {
    26ce:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    26d2:	3301      	adds	r3, #1
    26d4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    26d8:	463b      	mov	r3, r7
    26da:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    26de:	681b      	ldr	r3, [r3, #0]
    26e0:	429a      	cmp	r2, r3
    26e2:	f6ff af7b 	blt.w	25dc <TraceDumpHex+0x28>
			buff[i % 16] = pc[i];
		buff[(i % 16) + 1] = '\0';
	}

    // Pad out last line if not exactly 16 characters.
    while ((i % 16) != 0) {
    26e6:	e009      	b.n	26fc <TraceDumpHex+0x148>
    	UARTSend( PORT_TRACE, "   ", 3);
    26e8:	2000      	movs	r0, #0
    26ea:	4917      	ldr	r1, [pc, #92]	; (2748 <TraceDumpHex+0x194>)
    26ec:	2203      	movs	r2, #3
    26ee:	f000 fbfb 	bl	2ee8 <UARTSend>
        i++;
    26f2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    26f6:	3301      	adds	r3, #1
    26f8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			buff[i % 16] = pc[i];
		buff[(i % 16) + 1] = '\0';
	}

    // Pad out last line if not exactly 16 characters.
    while ((i % 16) != 0) {
    26fc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    2700:	f003 030f 	and.w	r3, r3, #15
    2704:	2b00      	cmp	r3, #0
    2706:	d1ef      	bne.n	26e8 <TraceDumpHex+0x134>
    	UARTSend( PORT_TRACE, "   ", 3);
        i++;
    }
	count = sprintf(buffer, "  %s\r\n", buff);
    2708:	f107 0220 	add.w	r2, r7, #32
    270c:	f107 030c 	add.w	r3, r7, #12
    2710:	4610      	mov	r0, r2
    2712:	490a      	ldr	r1, [pc, #40]	; (273c <TraceDumpHex+0x188>)
    2714:	461a      	mov	r2, r3
    2716:	f001 f9a3 	bl	3a60 <sprintf>
    271a:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
	UARTSend( PORT_TRACE, buffer, count);
    271e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    2722:	f107 0220 	add.w	r2, r7, #32
    2726:	2000      	movs	r0, #0
    2728:	4611      	mov	r1, r2
    272a:	461a      	mov	r2, r3
    272c:	f000 fbdc 	bl	2ee8 <UARTSend>

}
    2730:	f507 77ac 	add.w	r7, r7, #344	; 0x158
    2734:	46bd      	mov	sp, r7
    2736:	bd80      	pop	{r7, pc}
    2738:	00007024 	.word	0x00007024
    273c:	00007030 	.word	0x00007030
    2740:	00007038 	.word	0x00007038
    2744:	8000000f 	.word	0x8000000f
    2748:	00007040 	.word	0x00007040

0000274c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    274c:	b480      	push	{r7}
    274e:	b083      	sub	sp, #12
    2750:	af00      	add	r7, sp, #0
    2752:	4603      	mov	r3, r0
    2754:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    2756:	4908      	ldr	r1, [pc, #32]	; (2778 <NVIC_EnableIRQ+0x2c>)
    2758:	f997 3007 	ldrsb.w	r3, [r7, #7]
    275c:	095b      	lsrs	r3, r3, #5
    275e:	79fa      	ldrb	r2, [r7, #7]
    2760:	f002 021f 	and.w	r2, r2, #31
    2764:	2001      	movs	r0, #1
    2766:	fa00 f202 	lsl.w	r2, r0, r2
    276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    276e:	370c      	adds	r7, #12
    2770:	46bd      	mov	sp, r7
    2772:	f85d 7b04 	ldr.w	r7, [sp], #4
    2776:	4770      	bx	lr
    2778:	e000e100 	.word	0xe000e100

0000277c <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
    277c:	b480      	push	{r7}
    277e:	b083      	sub	sp, #12
    2780:	af00      	add	r7, sp, #0
    2782:	4603      	mov	r3, r0
    2784:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2786:	4909      	ldr	r1, [pc, #36]	; (27ac <NVIC_DisableIRQ+0x30>)
    2788:	f997 3007 	ldrsb.w	r3, [r7, #7]
    278c:	095b      	lsrs	r3, r3, #5
    278e:	79fa      	ldrb	r2, [r7, #7]
    2790:	f002 021f 	and.w	r2, r2, #31
    2794:	2001      	movs	r0, #1
    2796:	fa00 f202 	lsl.w	r2, r0, r2
    279a:	3320      	adds	r3, #32
    279c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    27a0:	370c      	adds	r7, #12
    27a2:	46bd      	mov	sp, r7
    27a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    27a8:	4770      	bx	lr
    27aa:	bf00      	nop
    27ac:	e000e100 	.word	0xe000e100

000027b0 <UART0_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART0_IRQHandler(void) {
    27b0:	b480      	push	{r7}
    27b2:	b083      	sub	sp, #12
    27b4:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART0->IIR;
    27b6:	4b3b      	ldr	r3, [pc, #236]	; (28a4 <UART0_IRQHandler+0xf4>)
    27b8:	689b      	ldr	r3, [r3, #8]
    27ba:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    27bc:	79bb      	ldrb	r3, [r7, #6]
    27be:	085b      	lsrs	r3, r3, #1
    27c0:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    27c2:	79bb      	ldrb	r3, [r7, #6]
    27c4:	f003 0307 	and.w	r3, r3, #7
    27c8:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    27ca:	79bb      	ldrb	r3, [r7, #6]
    27cc:	2b03      	cmp	r3, #3
    27ce:	d12c      	bne.n	282a <UART0_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART0->LSR;
    27d0:	4b34      	ldr	r3, [pc, #208]	; (28a4 <UART0_IRQHandler+0xf4>)
    27d2:	7d1b      	ldrb	r3, [r3, #20]
    27d4:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    27d6:	797b      	ldrb	r3, [r7, #5]
    27d8:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    27dc:	2b00      	cmp	r3, #0
    27de:	d006      	beq.n	27ee <UART0_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART0Status = LSRValue;
    27e0:	797b      	ldrb	r3, [r7, #5]
    27e2:	4a31      	ldr	r2, [pc, #196]	; (28a8 <UART0_IRQHandler+0xf8>)
    27e4:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART0->RBR; /* Dummy read on RX to clear
    27e6:	4b2f      	ldr	r3, [pc, #188]	; (28a4 <UART0_IRQHandler+0xf4>)
    27e8:	781b      	ldrb	r3, [r3, #0]
    27ea:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    27ec:	e055      	b.n	289a <UART0_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    27ee:	797b      	ldrb	r3, [r7, #5]
    27f0:	f003 0301 	and.w	r3, r3, #1
    27f4:	2b00      	cmp	r3, #0
    27f6:	d050      	beq.n	289a <UART0_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART0Buffer[UART0Count] = LPC_UART0->RBR;
    27f8:	4b2c      	ldr	r3, [pc, #176]	; (28ac <UART0_IRQHandler+0xfc>)
    27fa:	881b      	ldrh	r3, [r3, #0]
    27fc:	b29b      	uxth	r3, r3
    27fe:	461a      	mov	r2, r3
    2800:	4b28      	ldr	r3, [pc, #160]	; (28a4 <UART0_IRQHandler+0xf4>)
    2802:	781b      	ldrb	r3, [r3, #0]
    2804:	b2d9      	uxtb	r1, r3
    2806:	4b2a      	ldr	r3, [pc, #168]	; (28b0 <UART0_IRQHandler+0x100>)
    2808:	5499      	strb	r1, [r3, r2]
			UART0Count++;
    280a:	4b28      	ldr	r3, [pc, #160]	; (28ac <UART0_IRQHandler+0xfc>)
    280c:	881b      	ldrh	r3, [r3, #0]
    280e:	b29b      	uxth	r3, r3
    2810:	3301      	adds	r3, #1
    2812:	b29a      	uxth	r2, r3
    2814:	4b25      	ldr	r3, [pc, #148]	; (28ac <UART0_IRQHandler+0xfc>)
    2816:	801a      	strh	r2, [r3, #0]
			if (UART0Count == BUFSIZE) {
    2818:	4b24      	ldr	r3, [pc, #144]	; (28ac <UART0_IRQHandler+0xfc>)
    281a:	881b      	ldrh	r3, [r3, #0]
    281c:	b29b      	uxth	r3, r3
    281e:	2bff      	cmp	r3, #255	; 0xff
    2820:	d13b      	bne.n	289a <UART0_IRQHandler+0xea>
				UART0Count = 0; /* buffer overflow */
    2822:	4b22      	ldr	r3, [pc, #136]	; (28ac <UART0_IRQHandler+0xfc>)
    2824:	2200      	movs	r2, #0
    2826:	801a      	strh	r2, [r3, #0]
    2828:	e037      	b.n	289a <UART0_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    282a:	79bb      	ldrb	r3, [r7, #6]
    282c:	2b02      	cmp	r3, #2
    282e:	d118      	bne.n	2862 <UART0_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART0Buffer[UART0Count] = LPC_UART0->RBR;
    2830:	4b1e      	ldr	r3, [pc, #120]	; (28ac <UART0_IRQHandler+0xfc>)
    2832:	881b      	ldrh	r3, [r3, #0]
    2834:	b29b      	uxth	r3, r3
    2836:	461a      	mov	r2, r3
    2838:	4b1a      	ldr	r3, [pc, #104]	; (28a4 <UART0_IRQHandler+0xf4>)
    283a:	781b      	ldrb	r3, [r3, #0]
    283c:	b2d9      	uxtb	r1, r3
    283e:	4b1c      	ldr	r3, [pc, #112]	; (28b0 <UART0_IRQHandler+0x100>)
    2840:	5499      	strb	r1, [r3, r2]
		UART0Count++;
    2842:	4b1a      	ldr	r3, [pc, #104]	; (28ac <UART0_IRQHandler+0xfc>)
    2844:	881b      	ldrh	r3, [r3, #0]
    2846:	b29b      	uxth	r3, r3
    2848:	3301      	adds	r3, #1
    284a:	b29a      	uxth	r2, r3
    284c:	4b17      	ldr	r3, [pc, #92]	; (28ac <UART0_IRQHandler+0xfc>)
    284e:	801a      	strh	r2, [r3, #0]
		if (UART0Count == BUFSIZE) {
    2850:	4b16      	ldr	r3, [pc, #88]	; (28ac <UART0_IRQHandler+0xfc>)
    2852:	881b      	ldrh	r3, [r3, #0]
    2854:	b29b      	uxth	r3, r3
    2856:	2bff      	cmp	r3, #255	; 0xff
    2858:	d11f      	bne.n	289a <UART0_IRQHandler+0xea>
			UART0Count = 0; /* buffer overflow */
    285a:	4b14      	ldr	r3, [pc, #80]	; (28ac <UART0_IRQHandler+0xfc>)
    285c:	2200      	movs	r2, #0
    285e:	801a      	strh	r2, [r3, #0]
    2860:	e01b      	b.n	289a <UART0_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2862:	79bb      	ldrb	r3, [r7, #6]
    2864:	2b06      	cmp	r3, #6
    2866:	d106      	bne.n	2876 <UART0_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART0Status |= 0x100; /* Bit 9 as the CTI error */
    2868:	4b0f      	ldr	r3, [pc, #60]	; (28a8 <UART0_IRQHandler+0xf8>)
    286a:	681b      	ldr	r3, [r3, #0]
    286c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2870:	4a0d      	ldr	r2, [pc, #52]	; (28a8 <UART0_IRQHandler+0xf8>)
    2872:	6013      	str	r3, [r2, #0]
    2874:	e011      	b.n	289a <UART0_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2876:	79bb      	ldrb	r3, [r7, #6]
    2878:	2b01      	cmp	r3, #1
    287a:	d10e      	bne.n	289a <UART0_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART0->LSR; /* Check status in the LSR to see if
    287c:	4b09      	ldr	r3, [pc, #36]	; (28a4 <UART0_IRQHandler+0xf4>)
    287e:	7d1b      	ldrb	r3, [r3, #20]
    2880:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    2882:	797b      	ldrb	r3, [r7, #5]
    2884:	f003 0320 	and.w	r3, r3, #32
    2888:	2b00      	cmp	r3, #0
    288a:	d003      	beq.n	2894 <UART0_IRQHandler+0xe4>
			UART0TxEmpty = 1;
    288c:	4b09      	ldr	r3, [pc, #36]	; (28b4 <UART0_IRQHandler+0x104>)
    288e:	2201      	movs	r2, #1
    2890:	701a      	strb	r2, [r3, #0]
    2892:	e002      	b.n	289a <UART0_IRQHandler+0xea>
		} else {
			UART0TxEmpty = 0;
    2894:	4b07      	ldr	r3, [pc, #28]	; (28b4 <UART0_IRQHandler+0x104>)
    2896:	2200      	movs	r2, #0
    2898:	701a      	strb	r2, [r3, #0]
		}
	}
}
    289a:	370c      	adds	r7, #12
    289c:	46bd      	mov	sp, r7
    289e:	f85d 7b04 	ldr.w	r7, [sp], #4
    28a2:	4770      	bx	lr
    28a4:	4000c000 	.word	0x4000c000
    28a8:	10001a04 	.word	0x10001a04
    28ac:	10000138 	.word	0x10000138
    28b0:	10001004 	.word	0x10001004
    28b4:	10000014 	.word	0x10000014

000028b8 <UART1_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART1_IRQHandler(void) {
    28b8:	b480      	push	{r7}
    28ba:	b083      	sub	sp, #12
    28bc:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART1->IIR;
    28be:	4b3b      	ldr	r3, [pc, #236]	; (29ac <UART1_IRQHandler+0xf4>)
    28c0:	689b      	ldr	r3, [r3, #8]
    28c2:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    28c4:	79bb      	ldrb	r3, [r7, #6]
    28c6:	085b      	lsrs	r3, r3, #1
    28c8:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    28ca:	79bb      	ldrb	r3, [r7, #6]
    28cc:	f003 0307 	and.w	r3, r3, #7
    28d0:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    28d2:	79bb      	ldrb	r3, [r7, #6]
    28d4:	2b03      	cmp	r3, #3
    28d6:	d12c      	bne.n	2932 <UART1_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART1->LSR;
    28d8:	4b34      	ldr	r3, [pc, #208]	; (29ac <UART1_IRQHandler+0xf4>)
    28da:	7d1b      	ldrb	r3, [r3, #20]
    28dc:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    28de:	797b      	ldrb	r3, [r7, #5]
    28e0:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    28e4:	2b00      	cmp	r3, #0
    28e6:	d006      	beq.n	28f6 <UART1_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART1Status = LSRValue;
    28e8:	797b      	ldrb	r3, [r7, #5]
    28ea:	4a31      	ldr	r2, [pc, #196]	; (29b0 <UART1_IRQHandler+0xf8>)
    28ec:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART1->RBR; /* Dummy read on RX to clear
    28ee:	4b2f      	ldr	r3, [pc, #188]	; (29ac <UART1_IRQHandler+0xf4>)
    28f0:	781b      	ldrb	r3, [r3, #0]
    28f2:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    28f4:	e055      	b.n	29a2 <UART1_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    28f6:	797b      	ldrb	r3, [r7, #5]
    28f8:	f003 0301 	and.w	r3, r3, #1
    28fc:	2b00      	cmp	r3, #0
    28fe:	d050      	beq.n	29a2 <UART1_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART1Buffer[UART1Count] = LPC_UART1->RBR;
    2900:	4b2c      	ldr	r3, [pc, #176]	; (29b4 <UART1_IRQHandler+0xfc>)
    2902:	881b      	ldrh	r3, [r3, #0]
    2904:	b29b      	uxth	r3, r3
    2906:	461a      	mov	r2, r3
    2908:	4b28      	ldr	r3, [pc, #160]	; (29ac <UART1_IRQHandler+0xf4>)
    290a:	781b      	ldrb	r3, [r3, #0]
    290c:	b2d9      	uxtb	r1, r3
    290e:	4b2a      	ldr	r3, [pc, #168]	; (29b8 <UART1_IRQHandler+0x100>)
    2910:	5499      	strb	r1, [r3, r2]
			UART1Count++;
    2912:	4b28      	ldr	r3, [pc, #160]	; (29b4 <UART1_IRQHandler+0xfc>)
    2914:	881b      	ldrh	r3, [r3, #0]
    2916:	b29b      	uxth	r3, r3
    2918:	3301      	adds	r3, #1
    291a:	b29a      	uxth	r2, r3
    291c:	4b25      	ldr	r3, [pc, #148]	; (29b4 <UART1_IRQHandler+0xfc>)
    291e:	801a      	strh	r2, [r3, #0]
			if (UART1Count == BUFSIZE) {
    2920:	4b24      	ldr	r3, [pc, #144]	; (29b4 <UART1_IRQHandler+0xfc>)
    2922:	881b      	ldrh	r3, [r3, #0]
    2924:	b29b      	uxth	r3, r3
    2926:	2bff      	cmp	r3, #255	; 0xff
    2928:	d13b      	bne.n	29a2 <UART1_IRQHandler+0xea>
				UART1Count = 0; /* buffer overflow */
    292a:	4b22      	ldr	r3, [pc, #136]	; (29b4 <UART1_IRQHandler+0xfc>)
    292c:	2200      	movs	r2, #0
    292e:	801a      	strh	r2, [r3, #0]
    2930:	e037      	b.n	29a2 <UART1_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2932:	79bb      	ldrb	r3, [r7, #6]
    2934:	2b02      	cmp	r3, #2
    2936:	d118      	bne.n	296a <UART1_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART1Buffer[UART1Count] = LPC_UART1->RBR;
    2938:	4b1e      	ldr	r3, [pc, #120]	; (29b4 <UART1_IRQHandler+0xfc>)
    293a:	881b      	ldrh	r3, [r3, #0]
    293c:	b29b      	uxth	r3, r3
    293e:	461a      	mov	r2, r3
    2940:	4b1a      	ldr	r3, [pc, #104]	; (29ac <UART1_IRQHandler+0xf4>)
    2942:	781b      	ldrb	r3, [r3, #0]
    2944:	b2d9      	uxtb	r1, r3
    2946:	4b1c      	ldr	r3, [pc, #112]	; (29b8 <UART1_IRQHandler+0x100>)
    2948:	5499      	strb	r1, [r3, r2]
		UART1Count++;
    294a:	4b1a      	ldr	r3, [pc, #104]	; (29b4 <UART1_IRQHandler+0xfc>)
    294c:	881b      	ldrh	r3, [r3, #0]
    294e:	b29b      	uxth	r3, r3
    2950:	3301      	adds	r3, #1
    2952:	b29a      	uxth	r2, r3
    2954:	4b17      	ldr	r3, [pc, #92]	; (29b4 <UART1_IRQHandler+0xfc>)
    2956:	801a      	strh	r2, [r3, #0]
		if (UART1Count == BUFSIZE) {
    2958:	4b16      	ldr	r3, [pc, #88]	; (29b4 <UART1_IRQHandler+0xfc>)
    295a:	881b      	ldrh	r3, [r3, #0]
    295c:	b29b      	uxth	r3, r3
    295e:	2bff      	cmp	r3, #255	; 0xff
    2960:	d11f      	bne.n	29a2 <UART1_IRQHandler+0xea>
			UART1Count = 0; /* buffer overflow */
    2962:	4b14      	ldr	r3, [pc, #80]	; (29b4 <UART1_IRQHandler+0xfc>)
    2964:	2200      	movs	r2, #0
    2966:	801a      	strh	r2, [r3, #0]
    2968:	e01b      	b.n	29a2 <UART1_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    296a:	79bb      	ldrb	r3, [r7, #6]
    296c:	2b06      	cmp	r3, #6
    296e:	d106      	bne.n	297e <UART1_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART1Status |= 0x100; /* Bit 9 as the CTI error */
    2970:	4b0f      	ldr	r3, [pc, #60]	; (29b0 <UART1_IRQHandler+0xf8>)
    2972:	681b      	ldr	r3, [r3, #0]
    2974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2978:	4a0d      	ldr	r2, [pc, #52]	; (29b0 <UART1_IRQHandler+0xf8>)
    297a:	6013      	str	r3, [r2, #0]
    297c:	e011      	b.n	29a2 <UART1_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    297e:	79bb      	ldrb	r3, [r7, #6]
    2980:	2b01      	cmp	r3, #1
    2982:	d10e      	bne.n	29a2 <UART1_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART1->LSR; /* Check status in the LSR to see if
    2984:	4b09      	ldr	r3, [pc, #36]	; (29ac <UART1_IRQHandler+0xf4>)
    2986:	7d1b      	ldrb	r3, [r3, #20]
    2988:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    298a:	797b      	ldrb	r3, [r7, #5]
    298c:	f003 0320 	and.w	r3, r3, #32
    2990:	2b00      	cmp	r3, #0
    2992:	d003      	beq.n	299c <UART1_IRQHandler+0xe4>
			UART1TxEmpty = 1;
    2994:	4b09      	ldr	r3, [pc, #36]	; (29bc <UART1_IRQHandler+0x104>)
    2996:	2201      	movs	r2, #1
    2998:	701a      	strb	r2, [r3, #0]
    299a:	e002      	b.n	29a2 <UART1_IRQHandler+0xea>
		} else {
			UART1TxEmpty = 0;
    299c:	4b07      	ldr	r3, [pc, #28]	; (29bc <UART1_IRQHandler+0x104>)
    299e:	2200      	movs	r2, #0
    29a0:	701a      	strb	r2, [r3, #0]
		}
	}

}
    29a2:	370c      	adds	r7, #12
    29a4:	46bd      	mov	sp, r7
    29a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29aa:	4770      	bx	lr
    29ac:	40010000 	.word	0x40010000
    29b0:	10001104 	.word	0x10001104
    29b4:	1000013a 	.word	0x1000013a
    29b8:	10000ef8 	.word	0x10000ef8
    29bc:	10000015 	.word	0x10000015

000029c0 <UART2_IRQHandler>:

void UART2_IRQHandler(void) {
    29c0:	b480      	push	{r7}
    29c2:	b083      	sub	sp, #12
    29c4:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;
	IIRValue = LPC_UART2->IIR;
    29c6:	4b3c      	ldr	r3, [pc, #240]	; (2ab8 <UART2_IRQHandler+0xf8>)
    29c8:	689b      	ldr	r3, [r3, #8]
    29ca:	71bb      	strb	r3, [r7, #6]
	IIRValue >>= 1; /* skip pending bit in IIR */
    29cc:	79bb      	ldrb	r3, [r7, #6]
    29ce:	085b      	lsrs	r3, r3, #1
    29d0:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    29d2:	79bb      	ldrb	r3, [r7, #6]
    29d4:	f003 0307 	and.w	r3, r3, #7
    29d8:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    29da:	79bb      	ldrb	r3, [r7, #6]
    29dc:	2b03      	cmp	r3, #3
    29de:	d12d      	bne.n	2a3c <UART2_IRQHandler+0x7c>
	{
		LSRValue = LPC_UART2->LSR;
    29e0:	4b35      	ldr	r3, [pc, #212]	; (2ab8 <UART2_IRQHandler+0xf8>)
    29e2:	7d1b      	ldrb	r3, [r3, #20]
    29e4:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    29e6:	797b      	ldrb	r3, [r7, #5]
    29e8:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    29ec:	2b00      	cmp	r3, #0
    29ee:	d006      	beq.n	29fe <UART2_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART2Status = LSRValue;
    29f0:	797b      	ldrb	r3, [r7, #5]
    29f2:	4a32      	ldr	r2, [pc, #200]	; (2abc <UART2_IRQHandler+0xfc>)
    29f4:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART2->RBR; /* Dummy read on RX to clear
    29f6:	4b30      	ldr	r3, [pc, #192]	; (2ab8 <UART2_IRQHandler+0xf8>)
    29f8:	781b      	ldrb	r3, [r3, #0]
    29fa:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    29fc:	e057      	b.n	2aae <UART2_IRQHandler+0xee>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    29fe:	797b      	ldrb	r3, [r7, #5]
    2a00:	f003 0301 	and.w	r3, r3, #1
    2a04:	2b00      	cmp	r3, #0
    2a06:	d052      	beq.n	2aae <UART2_IRQHandler+0xee>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART2Buffer[UART2Count] = LPC_UART2->RBR;
    2a08:	4b2d      	ldr	r3, [pc, #180]	; (2ac0 <UART2_IRQHandler+0x100>)
    2a0a:	881b      	ldrh	r3, [r3, #0]
    2a0c:	b29b      	uxth	r3, r3
    2a0e:	461a      	mov	r2, r3
    2a10:	4b29      	ldr	r3, [pc, #164]	; (2ab8 <UART2_IRQHandler+0xf8>)
    2a12:	781b      	ldrb	r3, [r3, #0]
    2a14:	b2d9      	uxtb	r1, r3
    2a16:	4b2b      	ldr	r3, [pc, #172]	; (2ac4 <UART2_IRQHandler+0x104>)
    2a18:	5499      	strb	r1, [r3, r2]
			UART2Count++;
    2a1a:	4b29      	ldr	r3, [pc, #164]	; (2ac0 <UART2_IRQHandler+0x100>)
    2a1c:	881b      	ldrh	r3, [r3, #0]
    2a1e:	b29b      	uxth	r3, r3
    2a20:	3301      	adds	r3, #1
    2a22:	b29a      	uxth	r2, r3
    2a24:	4b26      	ldr	r3, [pc, #152]	; (2ac0 <UART2_IRQHandler+0x100>)
    2a26:	801a      	strh	r2, [r3, #0]
			if (UART2Count >= UART2_BUFFSIZE) {
    2a28:	4b25      	ldr	r3, [pc, #148]	; (2ac0 <UART2_IRQHandler+0x100>)
    2a2a:	881b      	ldrh	r3, [r3, #0]
    2a2c:	b29b      	uxth	r3, r3
    2a2e:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    2a32:	d33c      	bcc.n	2aae <UART2_IRQHandler+0xee>
				UART2Count = 0; /* buffer overflow */
    2a34:	4b22      	ldr	r3, [pc, #136]	; (2ac0 <UART2_IRQHandler+0x100>)
    2a36:	2200      	movs	r2, #0
    2a38:	801a      	strh	r2, [r3, #0]
    2a3a:	e038      	b.n	2aae <UART2_IRQHandler+0xee>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2a3c:	79bb      	ldrb	r3, [r7, #6]
    2a3e:	2b02      	cmp	r3, #2
    2a40:	d119      	bne.n	2a76 <UART2_IRQHandler+0xb6>
	{
		/* Receive Data Available */
		UART2Buffer[UART2Count] = LPC_UART2->RBR;
    2a42:	4b1f      	ldr	r3, [pc, #124]	; (2ac0 <UART2_IRQHandler+0x100>)
    2a44:	881b      	ldrh	r3, [r3, #0]
    2a46:	b29b      	uxth	r3, r3
    2a48:	461a      	mov	r2, r3
    2a4a:	4b1b      	ldr	r3, [pc, #108]	; (2ab8 <UART2_IRQHandler+0xf8>)
    2a4c:	781b      	ldrb	r3, [r3, #0]
    2a4e:	b2d9      	uxtb	r1, r3
    2a50:	4b1c      	ldr	r3, [pc, #112]	; (2ac4 <UART2_IRQHandler+0x104>)
    2a52:	5499      	strb	r1, [r3, r2]
		UART2Count++;
    2a54:	4b1a      	ldr	r3, [pc, #104]	; (2ac0 <UART2_IRQHandler+0x100>)
    2a56:	881b      	ldrh	r3, [r3, #0]
    2a58:	b29b      	uxth	r3, r3
    2a5a:	3301      	adds	r3, #1
    2a5c:	b29a      	uxth	r2, r3
    2a5e:	4b18      	ldr	r3, [pc, #96]	; (2ac0 <UART2_IRQHandler+0x100>)
    2a60:	801a      	strh	r2, [r3, #0]
		if (UART2Count >= UART2_BUFFSIZE) {
    2a62:	4b17      	ldr	r3, [pc, #92]	; (2ac0 <UART2_IRQHandler+0x100>)
    2a64:	881b      	ldrh	r3, [r3, #0]
    2a66:	b29b      	uxth	r3, r3
    2a68:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    2a6c:	d31f      	bcc.n	2aae <UART2_IRQHandler+0xee>
			UART2Count = 0; /* buffer overflow */
    2a6e:	4b14      	ldr	r3, [pc, #80]	; (2ac0 <UART2_IRQHandler+0x100>)
    2a70:	2200      	movs	r2, #0
    2a72:	801a      	strh	r2, [r3, #0]
    2a74:	e01b      	b.n	2aae <UART2_IRQHandler+0xee>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2a76:	79bb      	ldrb	r3, [r7, #6]
    2a78:	2b06      	cmp	r3, #6
    2a7a:	d106      	bne.n	2a8a <UART2_IRQHandler+0xca>
	{
		/* Character Time-out indicator */
		UART2Status |= 0x100; /* Bit 9 as the CTI error */
    2a7c:	4b0f      	ldr	r3, [pc, #60]	; (2abc <UART2_IRQHandler+0xfc>)
    2a7e:	681b      	ldr	r3, [r3, #0]
    2a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2a84:	4a0d      	ldr	r2, [pc, #52]	; (2abc <UART2_IRQHandler+0xfc>)
    2a86:	6013      	str	r3, [r2, #0]
    2a88:	e011      	b.n	2aae <UART2_IRQHandler+0xee>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2a8a:	79bb      	ldrb	r3, [r7, #6]
    2a8c:	2b01      	cmp	r3, #1
    2a8e:	d10e      	bne.n	2aae <UART2_IRQHandler+0xee>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART2->LSR; /* Check status in the LSR to see if
    2a90:	4b09      	ldr	r3, [pc, #36]	; (2ab8 <UART2_IRQHandler+0xf8>)
    2a92:	7d1b      	ldrb	r3, [r3, #20]
    2a94:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    2a96:	797b      	ldrb	r3, [r7, #5]
    2a98:	f003 0320 	and.w	r3, r3, #32
    2a9c:	2b00      	cmp	r3, #0
    2a9e:	d003      	beq.n	2aa8 <UART2_IRQHandler+0xe8>
			UART2TxEmpty = 1;
    2aa0:	4b09      	ldr	r3, [pc, #36]	; (2ac8 <UART2_IRQHandler+0x108>)
    2aa2:	2201      	movs	r2, #1
    2aa4:	701a      	strb	r2, [r3, #0]
    2aa6:	e002      	b.n	2aae <UART2_IRQHandler+0xee>
		} else {
			UART2TxEmpty = 0;
    2aa8:	4b07      	ldr	r3, [pc, #28]	; (2ac8 <UART2_IRQHandler+0x108>)
    2aaa:	2200      	movs	r2, #0
    2aac:	701a      	strb	r2, [r3, #0]
		}
	}
}
    2aae:	370c      	adds	r7, #12
    2ab0:	46bd      	mov	sp, r7
    2ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ab6:	4770      	bx	lr
    2ab8:	40098000 	.word	0x40098000
    2abc:	10000ff8 	.word	0x10000ff8
    2ac0:	1000013c 	.word	0x1000013c
    2ac4:	1000120c 	.word	0x1000120c
    2ac8:	10000017 	.word	0x10000017

00002acc <UART3_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART3_IRQHandler(void) {
    2acc:	b480      	push	{r7}
    2ace:	b083      	sub	sp, #12
    2ad0:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART3->IIR;
    2ad2:	4b3b      	ldr	r3, [pc, #236]	; (2bc0 <UART3_IRQHandler+0xf4>)
    2ad4:	689b      	ldr	r3, [r3, #8]
    2ad6:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    2ad8:	79bb      	ldrb	r3, [r7, #6]
    2ada:	085b      	lsrs	r3, r3, #1
    2adc:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    2ade:	79bb      	ldrb	r3, [r7, #6]
    2ae0:	f003 0307 	and.w	r3, r3, #7
    2ae4:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    2ae6:	79bb      	ldrb	r3, [r7, #6]
    2ae8:	2b03      	cmp	r3, #3
    2aea:	d12c      	bne.n	2b46 <UART3_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART3->LSR;
    2aec:	4b34      	ldr	r3, [pc, #208]	; (2bc0 <UART3_IRQHandler+0xf4>)
    2aee:	7d1b      	ldrb	r3, [r3, #20]
    2af0:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2af2:	797b      	ldrb	r3, [r7, #5]
    2af4:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2af8:	2b00      	cmp	r3, #0
    2afa:	d006      	beq.n	2b0a <UART3_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART3Status = LSRValue;
    2afc:	797b      	ldrb	r3, [r7, #5]
    2afe:	4a31      	ldr	r2, [pc, #196]	; (2bc4 <UART3_IRQHandler+0xf8>)
    2b00:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART3->RBR; /* Dummy read on RX to clear
    2b02:	4b2f      	ldr	r3, [pc, #188]	; (2bc0 <UART3_IRQHandler+0xf4>)
    2b04:	781b      	ldrb	r3, [r3, #0]
    2b06:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2b08:	e055      	b.n	2bb6 <UART3_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    2b0a:	797b      	ldrb	r3, [r7, #5]
    2b0c:	f003 0301 	and.w	r3, r3, #1
    2b10:	2b00      	cmp	r3, #0
    2b12:	d050      	beq.n	2bb6 <UART3_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART3Buffer[UART3Count] = LPC_UART3->RBR;
    2b14:	4b2c      	ldr	r3, [pc, #176]	; (2bc8 <UART3_IRQHandler+0xfc>)
    2b16:	881b      	ldrh	r3, [r3, #0]
    2b18:	b29b      	uxth	r3, r3
    2b1a:	461a      	mov	r2, r3
    2b1c:	4b28      	ldr	r3, [pc, #160]	; (2bc0 <UART3_IRQHandler+0xf4>)
    2b1e:	781b      	ldrb	r3, [r3, #0]
    2b20:	b2d9      	uxtb	r1, r3
    2b22:	4b2a      	ldr	r3, [pc, #168]	; (2bcc <UART3_IRQHandler+0x100>)
    2b24:	5499      	strb	r1, [r3, r2]
			UART3Count++;
    2b26:	4b28      	ldr	r3, [pc, #160]	; (2bc8 <UART3_IRQHandler+0xfc>)
    2b28:	881b      	ldrh	r3, [r3, #0]
    2b2a:	b29b      	uxth	r3, r3
    2b2c:	3301      	adds	r3, #1
    2b2e:	b29a      	uxth	r2, r3
    2b30:	4b25      	ldr	r3, [pc, #148]	; (2bc8 <UART3_IRQHandler+0xfc>)
    2b32:	801a      	strh	r2, [r3, #0]
			if (UART3Count == BUFSIZE) {
    2b34:	4b24      	ldr	r3, [pc, #144]	; (2bc8 <UART3_IRQHandler+0xfc>)
    2b36:	881b      	ldrh	r3, [r3, #0]
    2b38:	b29b      	uxth	r3, r3
    2b3a:	2bff      	cmp	r3, #255	; 0xff
    2b3c:	d13b      	bne.n	2bb6 <UART3_IRQHandler+0xea>
				UART3Count = 0; /* buffer overflow */
    2b3e:	4b22      	ldr	r3, [pc, #136]	; (2bc8 <UART3_IRQHandler+0xfc>)
    2b40:	2200      	movs	r2, #0
    2b42:	801a      	strh	r2, [r3, #0]
    2b44:	e037      	b.n	2bb6 <UART3_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2b46:	79bb      	ldrb	r3, [r7, #6]
    2b48:	2b02      	cmp	r3, #2
    2b4a:	d118      	bne.n	2b7e <UART3_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART3Buffer[UART3Count] = LPC_UART3->RBR;
    2b4c:	4b1e      	ldr	r3, [pc, #120]	; (2bc8 <UART3_IRQHandler+0xfc>)
    2b4e:	881b      	ldrh	r3, [r3, #0]
    2b50:	b29b      	uxth	r3, r3
    2b52:	461a      	mov	r2, r3
    2b54:	4b1a      	ldr	r3, [pc, #104]	; (2bc0 <UART3_IRQHandler+0xf4>)
    2b56:	781b      	ldrb	r3, [r3, #0]
    2b58:	b2d9      	uxtb	r1, r3
    2b5a:	4b1c      	ldr	r3, [pc, #112]	; (2bcc <UART3_IRQHandler+0x100>)
    2b5c:	5499      	strb	r1, [r3, r2]
		UART3Count++;
    2b5e:	4b1a      	ldr	r3, [pc, #104]	; (2bc8 <UART3_IRQHandler+0xfc>)
    2b60:	881b      	ldrh	r3, [r3, #0]
    2b62:	b29b      	uxth	r3, r3
    2b64:	3301      	adds	r3, #1
    2b66:	b29a      	uxth	r2, r3
    2b68:	4b17      	ldr	r3, [pc, #92]	; (2bc8 <UART3_IRQHandler+0xfc>)
    2b6a:	801a      	strh	r2, [r3, #0]
		if (UART3Count == BUFSIZE) {
    2b6c:	4b16      	ldr	r3, [pc, #88]	; (2bc8 <UART3_IRQHandler+0xfc>)
    2b6e:	881b      	ldrh	r3, [r3, #0]
    2b70:	b29b      	uxth	r3, r3
    2b72:	2bff      	cmp	r3, #255	; 0xff
    2b74:	d11f      	bne.n	2bb6 <UART3_IRQHandler+0xea>
			UART3Count = 0; /* buffer overflow */
    2b76:	4b14      	ldr	r3, [pc, #80]	; (2bc8 <UART3_IRQHandler+0xfc>)
    2b78:	2200      	movs	r2, #0
    2b7a:	801a      	strh	r2, [r3, #0]
    2b7c:	e01b      	b.n	2bb6 <UART3_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2b7e:	79bb      	ldrb	r3, [r7, #6]
    2b80:	2b06      	cmp	r3, #6
    2b82:	d106      	bne.n	2b92 <UART3_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART3Status |= 0x100; /* Bit 9 as the CTI error */
    2b84:	4b0f      	ldr	r3, [pc, #60]	; (2bc4 <UART3_IRQHandler+0xf8>)
    2b86:	681b      	ldr	r3, [r3, #0]
    2b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2b8c:	4a0d      	ldr	r2, [pc, #52]	; (2bc4 <UART3_IRQHandler+0xf8>)
    2b8e:	6013      	str	r3, [r2, #0]
    2b90:	e011      	b.n	2bb6 <UART3_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2b92:	79bb      	ldrb	r3, [r7, #6]
    2b94:	2b01      	cmp	r3, #1
    2b96:	d10e      	bne.n	2bb6 <UART3_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART3->LSR; /* Check status in the LSR to see if
    2b98:	4b09      	ldr	r3, [pc, #36]	; (2bc0 <UART3_IRQHandler+0xf4>)
    2b9a:	7d1b      	ldrb	r3, [r3, #20]
    2b9c:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    2b9e:	797b      	ldrb	r3, [r7, #5]
    2ba0:	f003 0320 	and.w	r3, r3, #32
    2ba4:	2b00      	cmp	r3, #0
    2ba6:	d003      	beq.n	2bb0 <UART3_IRQHandler+0xe4>
			UART3TxEmpty = 1;
    2ba8:	4b09      	ldr	r3, [pc, #36]	; (2bd0 <UART3_IRQHandler+0x104>)
    2baa:	2201      	movs	r2, #1
    2bac:	701a      	strb	r2, [r3, #0]
    2bae:	e002      	b.n	2bb6 <UART3_IRQHandler+0xea>
		} else {
			UART3TxEmpty = 0;
    2bb0:	4b07      	ldr	r3, [pc, #28]	; (2bd0 <UART3_IRQHandler+0x104>)
    2bb2:	2200      	movs	r2, #0
    2bb4:	701a      	strb	r2, [r3, #0]
		}
	}
}
    2bb6:	370c      	adds	r7, #12
    2bb8:	46bd      	mov	sp, r7
    2bba:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bbe:	4770      	bx	lr
    2bc0:	4009c000 	.word	0x4009c000
    2bc4:	10001000 	.word	0x10001000
    2bc8:	1000013e 	.word	0x1000013e
    2bcc:	1000110c 	.word	0x1000110c
    2bd0:	10000016 	.word	0x10000016

00002bd4 <UARTInit>:
 ** Returned value:		true or false, return false only if the
 **						interrupt handler can't be installed to the
 **						VIC table
 **
 *****************************************************************************/
uint32_t UARTInit(uint32_t PortNum, uint32_t baudrate) {
    2bd4:	b580      	push	{r7, lr}
    2bd6:	b086      	sub	sp, #24
    2bd8:	af00      	add	r7, sp, #0
    2bda:	6078      	str	r0, [r7, #4]
    2bdc:	6039      	str	r1, [r7, #0]
	uint32_t Fdiv;
	uint32_t pclkdiv, pclk;
	if (PortNum == 0) {
    2bde:	687b      	ldr	r3, [r7, #4]
    2be0:	2b00      	cmp	r3, #0
    2be2:	d15b      	bne.n	2c9c <UARTInit+0xc8>
		LPC_PINCON->PINSEL0 &= ~0x000000F0;
    2be4:	4aa3      	ldr	r2, [pc, #652]	; (2e74 <UARTInit+0x2a0>)
    2be6:	4ba3      	ldr	r3, [pc, #652]	; (2e74 <UARTInit+0x2a0>)
    2be8:	681b      	ldr	r3, [r3, #0]
    2bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2bee:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00000050; /* RxD0 is P0.3 and TxD0 is P0.2 */
    2bf0:	4aa0      	ldr	r2, [pc, #640]	; (2e74 <UARTInit+0x2a0>)
    2bf2:	4ba0      	ldr	r3, [pc, #640]	; (2e74 <UARTInit+0x2a0>)
    2bf4:	681b      	ldr	r3, [r3, #0]
    2bf6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    2bfa:	6013      	str	r3, [r2, #0]
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART0 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
    2bfc:	4b9e      	ldr	r3, [pc, #632]	; (2e78 <UARTInit+0x2a4>)
    2bfe:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2c02:	099b      	lsrs	r3, r3, #6
    2c04:	f003 0303 	and.w	r3, r3, #3
    2c08:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2c0a:	693b      	ldr	r3, [r7, #16]
    2c0c:	2b02      	cmp	r3, #2
    2c0e:	d00c      	beq.n	2c2a <UARTInit+0x56>
    2c10:	2b03      	cmp	r3, #3
    2c12:	d00f      	beq.n	2c34 <UARTInit+0x60>
    2c14:	2b01      	cmp	r3, #1
    2c16:	d004      	beq.n	2c22 <UARTInit+0x4e>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2c18:	4b98      	ldr	r3, [pc, #608]	; (2e7c <UARTInit+0x2a8>)
    2c1a:	681b      	ldr	r3, [r3, #0]
    2c1c:	089b      	lsrs	r3, r3, #2
    2c1e:	617b      	str	r3, [r7, #20]
			break;
    2c20:	e00d      	b.n	2c3e <UARTInit+0x6a>
		case 0x01:
			pclk = SystemCoreClock;
    2c22:	4b96      	ldr	r3, [pc, #600]	; (2e7c <UARTInit+0x2a8>)
    2c24:	681b      	ldr	r3, [r3, #0]
    2c26:	617b      	str	r3, [r7, #20]
			break;
    2c28:	e009      	b.n	2c3e <UARTInit+0x6a>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2c2a:	4b94      	ldr	r3, [pc, #592]	; (2e7c <UARTInit+0x2a8>)
    2c2c:	681b      	ldr	r3, [r3, #0]
    2c2e:	085b      	lsrs	r3, r3, #1
    2c30:	617b      	str	r3, [r7, #20]
			break;
    2c32:	e004      	b.n	2c3e <UARTInit+0x6a>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2c34:	4b91      	ldr	r3, [pc, #580]	; (2e7c <UARTInit+0x2a8>)
    2c36:	681b      	ldr	r3, [r3, #0]
    2c38:	08db      	lsrs	r3, r3, #3
    2c3a:	617b      	str	r3, [r7, #20]
			break;
    2c3c:	bf00      	nop
		}
		LPC_UART0->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2c3e:	4b90      	ldr	r3, [pc, #576]	; (2e80 <UARTInit+0x2ac>)
    2c40:	2283      	movs	r2, #131	; 0x83
    2c42:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2c44:	697b      	ldr	r3, [r7, #20]
    2c46:	091a      	lsrs	r2, r3, #4
    2c48:	683b      	ldr	r3, [r7, #0]
    2c4a:	fbb2 f3f3 	udiv	r3, r2, r3
    2c4e:	60fb      	str	r3, [r7, #12]
		if (baudrate == 115200){
    2c50:	683b      	ldr	r3, [r7, #0]
    2c52:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2c56:	d10a      	bne.n	2c6e <UARTInit+0x9a>
			LPC_UART0->DLM = 0;
    2c58:	4b89      	ldr	r3, [pc, #548]	; (2e80 <UARTInit+0x2ac>)
    2c5a:	2200      	movs	r2, #0
    2c5c:	711a      	strb	r2, [r3, #4]
			LPC_UART0->DLL = 9;
    2c5e:	4b88      	ldr	r3, [pc, #544]	; (2e80 <UARTInit+0x2ac>)
    2c60:	2209      	movs	r2, #9
    2c62:	701a      	strb	r2, [r3, #0]
			LPC_UART0->FDR=1<<0|1<<5;
    2c64:	4b86      	ldr	r3, [pc, #536]	; (2e80 <UARTInit+0x2ac>)
    2c66:	2221      	movs	r2, #33	; 0x21
    2c68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    2c6c:	e008      	b.n	2c80 <UARTInit+0xac>
		}else{
			LPC_UART0->DLM = Fdiv / 256;
    2c6e:	4a84      	ldr	r2, [pc, #528]	; (2e80 <UARTInit+0x2ac>)
    2c70:	68fb      	ldr	r3, [r7, #12]
    2c72:	0a1b      	lsrs	r3, r3, #8
    2c74:	b2db      	uxtb	r3, r3
    2c76:	7113      	strb	r3, [r2, #4]
			LPC_UART0->DLL = Fdiv % 256;
    2c78:	4b81      	ldr	r3, [pc, #516]	; (2e80 <UARTInit+0x2ac>)
    2c7a:	68fa      	ldr	r2, [r7, #12]
    2c7c:	b2d2      	uxtb	r2, r2
    2c7e:	701a      	strb	r2, [r3, #0]
		}
		LPC_UART0->LCR = 0x03; /* DLAB = 0 */
    2c80:	4b7f      	ldr	r3, [pc, #508]	; (2e80 <UARTInit+0x2ac>)
    2c82:	2203      	movs	r2, #3
    2c84:	731a      	strb	r2, [r3, #12]
		LPC_UART0->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2c86:	4b7e      	ldr	r3, [pc, #504]	; (2e80 <UARTInit+0x2ac>)
    2c88:	2207      	movs	r2, #7
    2c8a:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART0_IRQn);
    2c8c:	2005      	movs	r0, #5
    2c8e:	f7ff fd5d 	bl	274c <NVIC_EnableIRQ>
		LPC_UART0->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART0 interrupt */
    2c92:	4b7b      	ldr	r3, [pc, #492]	; (2e80 <UARTInit+0x2ac>)
    2c94:	2207      	movs	r2, #7
    2c96:	605a      	str	r2, [r3, #4]
		return (TRUE);
    2c98:	2301      	movs	r3, #1
    2c9a:	e11d      	b.n	2ed8 <UARTInit+0x304>
	} else if (PortNum == 1) {
    2c9c:	687b      	ldr	r3, [r7, #4]
    2c9e:	2b01      	cmp	r3, #1
    2ca0:	d157      	bne.n	2d52 <UARTInit+0x17e>
		NVIC_DisableIRQ(UART1_IRQn);
    2ca2:	2006      	movs	r0, #6
    2ca4:	f7ff fd6a 	bl	277c <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 4;
    2ca8:	4a73      	ldr	r2, [pc, #460]	; (2e78 <UARTInit+0x2a4>)
    2caa:	4b73      	ldr	r3, [pc, #460]	; (2e78 <UARTInit+0x2a4>)
    2cac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2cb0:	f043 0310 	orr.w	r3, r3, #16
    2cb4:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL4 &= ~0x0000000F;
    2cb8:	4a6e      	ldr	r2, [pc, #440]	; (2e74 <UARTInit+0x2a0>)
    2cba:	4b6e      	ldr	r3, [pc, #440]	; (2e74 <UARTInit+0x2a0>)
    2cbc:	691b      	ldr	r3, [r3, #16]
    2cbe:	f023 030f 	bic.w	r3, r3, #15
    2cc2:	6113      	str	r3, [r2, #16]
		LPC_PINCON->PINSEL4 |= 0x0000000A; /* Enable RxD1 P0.16, TxD1 P0.15 */
    2cc4:	4a6b      	ldr	r2, [pc, #428]	; (2e74 <UARTInit+0x2a0>)
    2cc6:	4b6b      	ldr	r3, [pc, #428]	; (2e74 <UARTInit+0x2a0>)
    2cc8:	691b      	ldr	r3, [r3, #16]
    2cca:	f043 030a 	orr.w	r3, r3, #10
    2cce:	6113      	str	r3, [r2, #16]

		//| 1<<25; //Enable PCUART1
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 8,9 are for UART1 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
    2cd0:	4b69      	ldr	r3, [pc, #420]	; (2e78 <UARTInit+0x2a4>)
    2cd2:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2cd6:	0a1b      	lsrs	r3, r3, #8
    2cd8:	f003 0303 	and.w	r3, r3, #3
    2cdc:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2cde:	693b      	ldr	r3, [r7, #16]
    2ce0:	2b02      	cmp	r3, #2
    2ce2:	d00c      	beq.n	2cfe <UARTInit+0x12a>
    2ce4:	2b03      	cmp	r3, #3
    2ce6:	d00f      	beq.n	2d08 <UARTInit+0x134>
    2ce8:	2b01      	cmp	r3, #1
    2cea:	d004      	beq.n	2cf6 <UARTInit+0x122>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2cec:	4b63      	ldr	r3, [pc, #396]	; (2e7c <UARTInit+0x2a8>)
    2cee:	681b      	ldr	r3, [r3, #0]
    2cf0:	089b      	lsrs	r3, r3, #2
    2cf2:	617b      	str	r3, [r7, #20]
			break;
    2cf4:	e00d      	b.n	2d12 <UARTInit+0x13e>
		case 0x01:
			pclk = SystemCoreClock;
    2cf6:	4b61      	ldr	r3, [pc, #388]	; (2e7c <UARTInit+0x2a8>)
    2cf8:	681b      	ldr	r3, [r3, #0]
    2cfa:	617b      	str	r3, [r7, #20]
			break;
    2cfc:	e009      	b.n	2d12 <UARTInit+0x13e>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2cfe:	4b5f      	ldr	r3, [pc, #380]	; (2e7c <UARTInit+0x2a8>)
    2d00:	681b      	ldr	r3, [r3, #0]
    2d02:	085b      	lsrs	r3, r3, #1
    2d04:	617b      	str	r3, [r7, #20]
			break;
    2d06:	e004      	b.n	2d12 <UARTInit+0x13e>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2d08:	4b5c      	ldr	r3, [pc, #368]	; (2e7c <UARTInit+0x2a8>)
    2d0a:	681b      	ldr	r3, [r3, #0]
    2d0c:	08db      	lsrs	r3, r3, #3
    2d0e:	617b      	str	r3, [r7, #20]
			break;
    2d10:	bf00      	nop
		}
		LPC_UART1->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2d12:	4b5c      	ldr	r3, [pc, #368]	; (2e84 <UARTInit+0x2b0>)
    2d14:	2283      	movs	r2, #131	; 0x83
    2d16:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2d18:	697b      	ldr	r3, [r7, #20]
    2d1a:	091a      	lsrs	r2, r3, #4
    2d1c:	683b      	ldr	r3, [r7, #0]
    2d1e:	fbb2 f3f3 	udiv	r3, r2, r3
    2d22:	60fb      	str	r3, [r7, #12]
		LPC_UART1->DLM = Fdiv / 256;
    2d24:	4a57      	ldr	r2, [pc, #348]	; (2e84 <UARTInit+0x2b0>)
    2d26:	68fb      	ldr	r3, [r7, #12]
    2d28:	0a1b      	lsrs	r3, r3, #8
    2d2a:	b2db      	uxtb	r3, r3
    2d2c:	7113      	strb	r3, [r2, #4]
		LPC_UART1->DLL = Fdiv % 256;
    2d2e:	4b55      	ldr	r3, [pc, #340]	; (2e84 <UARTInit+0x2b0>)
    2d30:	68fa      	ldr	r2, [r7, #12]
    2d32:	b2d2      	uxtb	r2, r2
    2d34:	701a      	strb	r2, [r3, #0]
		LPC_UART1->LCR = 0x03; /* DLAB = 0 */
    2d36:	4b53      	ldr	r3, [pc, #332]	; (2e84 <UARTInit+0x2b0>)
    2d38:	2203      	movs	r2, #3
    2d3a:	731a      	strb	r2, [r3, #12]
		LPC_UART1->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2d3c:	4b51      	ldr	r3, [pc, #324]	; (2e84 <UARTInit+0x2b0>)
    2d3e:	2207      	movs	r2, #7
    2d40:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART1_IRQn);
    2d42:	2006      	movs	r0, #6
    2d44:	f7ff fd02 	bl	274c <NVIC_EnableIRQ>
		LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART1 interrupt */
    2d48:	4b4e      	ldr	r3, [pc, #312]	; (2e84 <UARTInit+0x2b0>)
    2d4a:	2207      	movs	r2, #7
    2d4c:	605a      	str	r2, [r3, #4]
		return (TRUE);
    2d4e:	2301      	movs	r3, #1
    2d50:	e0c2      	b.n	2ed8 <UARTInit+0x304>
	} else if (PortNum == 2) {
    2d52:	687b      	ldr	r3, [r7, #4]
    2d54:	2b02      	cmp	r3, #2
    2d56:	d157      	bne.n	2e08 <UARTInit+0x234>
		NVIC_DisableIRQ(UART2_IRQn);
    2d58:	2007      	movs	r0, #7
    2d5a:	f7ff fd0f 	bl	277c <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 24; // UART 2 PCONP bit 24
    2d5e:	4a46      	ldr	r2, [pc, #280]	; (2e78 <UARTInit+0x2a4>)
    2d60:	4b45      	ldr	r3, [pc, #276]	; (2e78 <UARTInit+0x2a4>)
    2d62:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2d6a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL0 &= ~0x00F00000;
    2d6e:	4a41      	ldr	r2, [pc, #260]	; (2e74 <UARTInit+0x2a0>)
    2d70:	4b40      	ldr	r3, [pc, #256]	; (2e74 <UARTInit+0x2a0>)
    2d72:	681b      	ldr	r3, [r3, #0]
    2d74:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    2d78:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00500000; /* Enable TxD2 on 0.10, RxD2 on 0.11 */
    2d7a:	4a3e      	ldr	r2, [pc, #248]	; (2e74 <UARTInit+0x2a0>)
    2d7c:	4b3d      	ldr	r3, [pc, #244]	; (2e74 <UARTInit+0x2a0>)
    2d7e:	681b      	ldr	r3, [r3, #0]
    2d80:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
    2d84:	6013      	str	r3, [r2, #0]
		pclkdiv = (LPC_SC->PCLKSEL0 >> 16) & 0x03;
    2d86:	4b3c      	ldr	r3, [pc, #240]	; (2e78 <UARTInit+0x2a4>)
    2d88:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2d8c:	0c1b      	lsrs	r3, r3, #16
    2d8e:	f003 0303 	and.w	r3, r3, #3
    2d92:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2d94:	693b      	ldr	r3, [r7, #16]
    2d96:	2b02      	cmp	r3, #2
    2d98:	d00c      	beq.n	2db4 <UARTInit+0x1e0>
    2d9a:	2b03      	cmp	r3, #3
    2d9c:	d00f      	beq.n	2dbe <UARTInit+0x1ea>
    2d9e:	2b01      	cmp	r3, #1
    2da0:	d004      	beq.n	2dac <UARTInit+0x1d8>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2da2:	4b36      	ldr	r3, [pc, #216]	; (2e7c <UARTInit+0x2a8>)
    2da4:	681b      	ldr	r3, [r3, #0]
    2da6:	089b      	lsrs	r3, r3, #2
    2da8:	617b      	str	r3, [r7, #20]
			break;
    2daa:	e00d      	b.n	2dc8 <UARTInit+0x1f4>
		case 0x01:
			pclk = SystemCoreClock;
    2dac:	4b33      	ldr	r3, [pc, #204]	; (2e7c <UARTInit+0x2a8>)
    2dae:	681b      	ldr	r3, [r3, #0]
    2db0:	617b      	str	r3, [r7, #20]
			break;
    2db2:	e009      	b.n	2dc8 <UARTInit+0x1f4>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2db4:	4b31      	ldr	r3, [pc, #196]	; (2e7c <UARTInit+0x2a8>)
    2db6:	681b      	ldr	r3, [r3, #0]
    2db8:	085b      	lsrs	r3, r3, #1
    2dba:	617b      	str	r3, [r7, #20]
			break;
    2dbc:	e004      	b.n	2dc8 <UARTInit+0x1f4>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2dbe:	4b2f      	ldr	r3, [pc, #188]	; (2e7c <UARTInit+0x2a8>)
    2dc0:	681b      	ldr	r3, [r3, #0]
    2dc2:	08db      	lsrs	r3, r3, #3
    2dc4:	617b      	str	r3, [r7, #20]
			break;
    2dc6:	bf00      	nop
		}
		LPC_UART2->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2dc8:	4b2f      	ldr	r3, [pc, #188]	; (2e88 <UARTInit+0x2b4>)
    2dca:	2283      	movs	r2, #131	; 0x83
    2dcc:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2dce:	697b      	ldr	r3, [r7, #20]
    2dd0:	091a      	lsrs	r2, r3, #4
    2dd2:	683b      	ldr	r3, [r7, #0]
    2dd4:	fbb2 f3f3 	udiv	r3, r2, r3
    2dd8:	60fb      	str	r3, [r7, #12]
		LPC_UART2->DLM = Fdiv / 256;
    2dda:	4a2b      	ldr	r2, [pc, #172]	; (2e88 <UARTInit+0x2b4>)
    2ddc:	68fb      	ldr	r3, [r7, #12]
    2dde:	0a1b      	lsrs	r3, r3, #8
    2de0:	b2db      	uxtb	r3, r3
    2de2:	7113      	strb	r3, [r2, #4]
		LPC_UART2->DLL = Fdiv % 256;
    2de4:	4b28      	ldr	r3, [pc, #160]	; (2e88 <UARTInit+0x2b4>)
    2de6:	68fa      	ldr	r2, [r7, #12]
    2de8:	b2d2      	uxtb	r2, r2
    2dea:	701a      	strb	r2, [r3, #0]
		LPC_UART2->LCR = 0x03; /* DLAB = 0 */
    2dec:	4b26      	ldr	r3, [pc, #152]	; (2e88 <UARTInit+0x2b4>)
    2dee:	2203      	movs	r2, #3
    2df0:	731a      	strb	r2, [r3, #12]
		LPC_UART2->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2df2:	4b25      	ldr	r3, [pc, #148]	; (2e88 <UARTInit+0x2b4>)
    2df4:	2207      	movs	r2, #7
    2df6:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART2_IRQn);
    2df8:	2007      	movs	r0, #7
    2dfa:	f7ff fca7 	bl	274c <NVIC_EnableIRQ>
		LPC_UART2->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART2 interrupt */
    2dfe:	4b22      	ldr	r3, [pc, #136]	; (2e88 <UARTInit+0x2b4>)
    2e00:	2207      	movs	r2, #7
    2e02:	605a      	str	r2, [r3, #4]
		//LPC_UART2->IER = IER_THRE; /* Polling */
		//LPC_UART2->TER = (1 << 7);
		return (TRUE);
    2e04:	2301      	movs	r3, #1
    2e06:	e067      	b.n	2ed8 <UARTInit+0x304>
	} else if (PortNum == 3) {
    2e08:	687b      	ldr	r3, [r7, #4]
    2e0a:	2b03      	cmp	r3, #3
    2e0c:	d163      	bne.n	2ed6 <UARTInit+0x302>
		LPC_PINCON->PINSEL0 &= ~0x0000000F;
    2e0e:	4a19      	ldr	r2, [pc, #100]	; (2e74 <UARTInit+0x2a0>)
    2e10:	4b18      	ldr	r3, [pc, #96]	; (2e74 <UARTInit+0x2a0>)
    2e12:	681b      	ldr	r3, [r3, #0]
    2e14:	f023 030f 	bic.w	r3, r3, #15
    2e18:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x0000000A; /* RxD3 is P0.1 and TxD3 is P0.0 */
    2e1a:	4a16      	ldr	r2, [pc, #88]	; (2e74 <UARTInit+0x2a0>)
    2e1c:	4b15      	ldr	r3, [pc, #84]	; (2e74 <UARTInit+0x2a0>)
    2e1e:	681b      	ldr	r3, [r3, #0]
    2e20:	f043 030a 	orr.w	r3, r3, #10
    2e24:	6013      	str	r3, [r2, #0]
		LPC_SC->PCONP |= 1 << 4 | 1 << 25; //Enable PCUART1
    2e26:	4a14      	ldr	r2, [pc, #80]	; (2e78 <UARTInit+0x2a4>)
    2e28:	4b13      	ldr	r3, [pc, #76]	; (2e78 <UARTInit+0x2a4>)
    2e2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2e2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    2e32:	f043 0310 	orr.w	r3, r3, #16
    2e36:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART3 */
		pclkdiv = (LPC_SC->PCLKSEL1 >> 18) & 0x03;
    2e3a:	4b0f      	ldr	r3, [pc, #60]	; (2e78 <UARTInit+0x2a4>)
    2e3c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
    2e40:	0c9b      	lsrs	r3, r3, #18
    2e42:	f003 0303 	and.w	r3, r3, #3
    2e46:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2e48:	693b      	ldr	r3, [r7, #16]
    2e4a:	2b02      	cmp	r3, #2
    2e4c:	d00c      	beq.n	2e68 <UARTInit+0x294>
    2e4e:	2b03      	cmp	r3, #3
    2e50:	d01c      	beq.n	2e8c <UARTInit+0x2b8>
    2e52:	2b01      	cmp	r3, #1
    2e54:	d004      	beq.n	2e60 <UARTInit+0x28c>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2e56:	4b09      	ldr	r3, [pc, #36]	; (2e7c <UARTInit+0x2a8>)
    2e58:	681b      	ldr	r3, [r3, #0]
    2e5a:	089b      	lsrs	r3, r3, #2
    2e5c:	617b      	str	r3, [r7, #20]
			break;
    2e5e:	e01a      	b.n	2e96 <UARTInit+0x2c2>
		case 0x01:
			pclk = SystemCoreClock;
    2e60:	4b06      	ldr	r3, [pc, #24]	; (2e7c <UARTInit+0x2a8>)
    2e62:	681b      	ldr	r3, [r3, #0]
    2e64:	617b      	str	r3, [r7, #20]
			break;
    2e66:	e016      	b.n	2e96 <UARTInit+0x2c2>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2e68:	4b04      	ldr	r3, [pc, #16]	; (2e7c <UARTInit+0x2a8>)
    2e6a:	681b      	ldr	r3, [r3, #0]
    2e6c:	085b      	lsrs	r3, r3, #1
    2e6e:	617b      	str	r3, [r7, #20]
			break;
    2e70:	e011      	b.n	2e96 <UARTInit+0x2c2>
    2e72:	bf00      	nop
    2e74:	4002c000 	.word	0x4002c000
    2e78:	400fc000 	.word	0x400fc000
    2e7c:	10000018 	.word	0x10000018
    2e80:	4000c000 	.word	0x4000c000
    2e84:	40010000 	.word	0x40010000
    2e88:	40098000 	.word	0x40098000
		case 0x03:
			pclk = SystemCoreClock / 8;
    2e8c:	4b14      	ldr	r3, [pc, #80]	; (2ee0 <UARTInit+0x30c>)
    2e8e:	681b      	ldr	r3, [r3, #0]
    2e90:	08db      	lsrs	r3, r3, #3
    2e92:	617b      	str	r3, [r7, #20]
			break;
    2e94:	bf00      	nop
		}
		LPC_UART3->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2e96:	4b13      	ldr	r3, [pc, #76]	; (2ee4 <UARTInit+0x310>)
    2e98:	2283      	movs	r2, #131	; 0x83
    2e9a:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2e9c:	697b      	ldr	r3, [r7, #20]
    2e9e:	091a      	lsrs	r2, r3, #4
    2ea0:	683b      	ldr	r3, [r7, #0]
    2ea2:	fbb2 f3f3 	udiv	r3, r2, r3
    2ea6:	60fb      	str	r3, [r7, #12]
		LPC_UART3->DLM = Fdiv / 256;
    2ea8:	4a0e      	ldr	r2, [pc, #56]	; (2ee4 <UARTInit+0x310>)
    2eaa:	68fb      	ldr	r3, [r7, #12]
    2eac:	0a1b      	lsrs	r3, r3, #8
    2eae:	b2db      	uxtb	r3, r3
    2eb0:	7113      	strb	r3, [r2, #4]
		LPC_UART3->DLL = Fdiv % 256;
    2eb2:	4b0c      	ldr	r3, [pc, #48]	; (2ee4 <UARTInit+0x310>)
    2eb4:	68fa      	ldr	r2, [r7, #12]
    2eb6:	b2d2      	uxtb	r2, r2
    2eb8:	701a      	strb	r2, [r3, #0]
		LPC_UART3->LCR = 0x03; /* DLAB = 0 */
    2eba:	4b0a      	ldr	r3, [pc, #40]	; (2ee4 <UARTInit+0x310>)
    2ebc:	2203      	movs	r2, #3
    2ebe:	731a      	strb	r2, [r3, #12]
		LPC_UART3->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2ec0:	4b08      	ldr	r3, [pc, #32]	; (2ee4 <UARTInit+0x310>)
    2ec2:	2207      	movs	r2, #7
    2ec4:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART3_IRQn);
    2ec6:	2008      	movs	r0, #8
    2ec8:	f7ff fc40 	bl	274c <NVIC_EnableIRQ>
		LPC_UART3->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART3 interrupt */
    2ecc:	4b05      	ldr	r3, [pc, #20]	; (2ee4 <UARTInit+0x310>)
    2ece:	2207      	movs	r2, #7
    2ed0:	605a      	str	r2, [r3, #4]
		return (TRUE);
    2ed2:	2301      	movs	r3, #1
    2ed4:	e000      	b.n	2ed8 <UARTInit+0x304>
	}
	return (FALSE);
    2ed6:	2300      	movs	r3, #0
}
    2ed8:	4618      	mov	r0, r3
    2eda:	3718      	adds	r7, #24
    2edc:	46bd      	mov	sp, r7
    2ede:	bd80      	pop	{r7, pc}
    2ee0:	10000018 	.word	0x10000018
    2ee4:	4009c000 	.word	0x4009c000

00002ee8 <UARTSend>:
 **
 ** parameters:			portNum, buffer pointer, and data length
 ** Returned value:		None
 **
 *****************************************************************************/
void UARTSend(uint32_t portNum, uint8_t *buffer, uint32_t Length) {
    2ee8:	b480      	push	{r7}
    2eea:	b087      	sub	sp, #28
    2eec:	af00      	add	r7, sp, #0
    2eee:	60f8      	str	r0, [r7, #12]
    2ef0:	60b9      	str	r1, [r7, #8]
    2ef2:	607a      	str	r2, [r7, #4]
	uint8_t *BufferPtr = buffer;
    2ef4:	68bb      	ldr	r3, [r7, #8]
    2ef6:	613b      	str	r3, [r7, #16]
	int index = 0;
    2ef8:	2300      	movs	r3, #0
    2efa:	617b      	str	r3, [r7, #20]
	if (portNum == 0) {
    2efc:	68fb      	ldr	r3, [r7, #12]
    2efe:	2b00      	cmp	r3, #0
    2f00:	d11b      	bne.n	2f3a <UARTSend+0x52>
		while (Length != 0) {
    2f02:	e016      	b.n	2f32 <UARTSend+0x4a>
			/* THRE status, contain valid data */
			while (!(UART0TxEmpty & 0x01));
    2f04:	bf00      	nop
    2f06:	4b3e      	ldr	r3, [pc, #248]	; (3000 <UARTSend+0x118>)
    2f08:	781b      	ldrb	r3, [r3, #0]
    2f0a:	b2db      	uxtb	r3, r3
    2f0c:	f003 0301 	and.w	r3, r3, #1
    2f10:	2b00      	cmp	r3, #0
    2f12:	d0f8      	beq.n	2f06 <UARTSend+0x1e>
			LPC_UART0->THR = BufferPtr[index];
    2f14:	493b      	ldr	r1, [pc, #236]	; (3004 <UARTSend+0x11c>)
    2f16:	697b      	ldr	r3, [r7, #20]
    2f18:	693a      	ldr	r2, [r7, #16]
    2f1a:	4413      	add	r3, r2
    2f1c:	781b      	ldrb	r3, [r3, #0]
    2f1e:	700b      	strb	r3, [r1, #0]
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
    2f20:	4b37      	ldr	r3, [pc, #220]	; (3000 <UARTSend+0x118>)
    2f22:	2200      	movs	r2, #0
    2f24:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    2f26:	697b      	ldr	r3, [r7, #20]
    2f28:	3301      	adds	r3, #1
    2f2a:	617b      	str	r3, [r7, #20]
			Length--;
    2f2c:	687b      	ldr	r3, [r7, #4]
    2f2e:	3b01      	subs	r3, #1
    2f30:	607b      	str	r3, [r7, #4]
 *****************************************************************************/
void UARTSend(uint32_t portNum, uint8_t *buffer, uint32_t Length) {
	uint8_t *BufferPtr = buffer;
	int index = 0;
	if (portNum == 0) {
		while (Length != 0) {
    2f32:	687b      	ldr	r3, [r7, #4]
    2f34:	2b00      	cmp	r3, #0
    2f36:	d1e5      	bne.n	2f04 <UARTSend+0x1c>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    2f38:	e05c      	b.n	2ff4 <UARTSend+0x10c>
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
    2f3a:	68fb      	ldr	r3, [r7, #12]
    2f3c:	2b01      	cmp	r3, #1
    2f3e:	d11b      	bne.n	2f78 <UARTSend+0x90>
		while (Length != 0) {
    2f40:	e016      	b.n	2f70 <UARTSend+0x88>
			/* THRE status, contain valid data */
			while (!(UART1TxEmpty & 0x01));
    2f42:	bf00      	nop
    2f44:	4b30      	ldr	r3, [pc, #192]	; (3008 <UARTSend+0x120>)
    2f46:	781b      	ldrb	r3, [r3, #0]
    2f48:	b2db      	uxtb	r3, r3
    2f4a:	f003 0301 	and.w	r3, r3, #1
    2f4e:	2b00      	cmp	r3, #0
    2f50:	d0f8      	beq.n	2f44 <UARTSend+0x5c>
			LPC_UART1->THR = BufferPtr[index];
    2f52:	492e      	ldr	r1, [pc, #184]	; (300c <UARTSend+0x124>)
    2f54:	697b      	ldr	r3, [r7, #20]
    2f56:	693a      	ldr	r2, [r7, #16]
    2f58:	4413      	add	r3, r2
    2f5a:	781b      	ldrb	r3, [r3, #0]
    2f5c:	700b      	strb	r3, [r1, #0]
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
    2f5e:	4b2a      	ldr	r3, [pc, #168]	; (3008 <UARTSend+0x120>)
    2f60:	2200      	movs	r2, #0
    2f62:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    2f64:	697b      	ldr	r3, [r7, #20]
    2f66:	3301      	adds	r3, #1
    2f68:	617b      	str	r3, [r7, #20]
			Length--;
    2f6a:	687b      	ldr	r3, [r7, #4]
    2f6c:	3b01      	subs	r3, #1
    2f6e:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
		while (Length != 0) {
    2f70:	687b      	ldr	r3, [r7, #4]
    2f72:	2b00      	cmp	r3, #0
    2f74:	d1e5      	bne.n	2f42 <UARTSend+0x5a>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    2f76:	e03d      	b.n	2ff4 <UARTSend+0x10c>
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
    2f78:	68fb      	ldr	r3, [r7, #12]
    2f7a:	2b02      	cmp	r3, #2
    2f7c:	d11b      	bne.n	2fb6 <UARTSend+0xce>
		while (Length != 0) {
    2f7e:	e016      	b.n	2fae <UARTSend+0xc6>
			/* THRE status, contain valid data */
			while (!(UART2TxEmpty & 0x01));
    2f80:	bf00      	nop
    2f82:	4b23      	ldr	r3, [pc, #140]	; (3010 <UARTSend+0x128>)
    2f84:	781b      	ldrb	r3, [r3, #0]
    2f86:	b2db      	uxtb	r3, r3
    2f88:	f003 0301 	and.w	r3, r3, #1
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d0f8      	beq.n	2f82 <UARTSend+0x9a>
			LPC_UART2->THR = BufferPtr[index];
    2f90:	4920      	ldr	r1, [pc, #128]	; (3014 <UARTSend+0x12c>)
    2f92:	697b      	ldr	r3, [r7, #20]
    2f94:	693a      	ldr	r2, [r7, #16]
    2f96:	4413      	add	r3, r2
    2f98:	781b      	ldrb	r3, [r3, #0]
    2f9a:	700b      	strb	r3, [r1, #0]
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
    2f9c:	4b1c      	ldr	r3, [pc, #112]	; (3010 <UARTSend+0x128>)
    2f9e:	2200      	movs	r2, #0
    2fa0:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    2fa2:	697b      	ldr	r3, [r7, #20]
    2fa4:	3301      	adds	r3, #1
    2fa6:	617b      	str	r3, [r7, #20]
			Length--;
    2fa8:	687b      	ldr	r3, [r7, #4]
    2faa:	3b01      	subs	r3, #1
    2fac:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
		while (Length != 0) {
    2fae:	687b      	ldr	r3, [r7, #4]
    2fb0:	2b00      	cmp	r3, #0
    2fb2:	d1e5      	bne.n	2f80 <UARTSend+0x98>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    2fb4:	e01e      	b.n	2ff4 <UARTSend+0x10c>
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
    2fb6:	68fb      	ldr	r3, [r7, #12]
    2fb8:	2b03      	cmp	r3, #3
    2fba:	d11a      	bne.n	2ff2 <UARTSend+0x10a>
		while (Length != 0) {
    2fbc:	e016      	b.n	2fec <UARTSend+0x104>
			/* THRE status, contain valid data */
			while (!(UART3TxEmpty & 0x01));
    2fbe:	bf00      	nop
    2fc0:	4b15      	ldr	r3, [pc, #84]	; (3018 <UARTSend+0x130>)
    2fc2:	781b      	ldrb	r3, [r3, #0]
    2fc4:	b2db      	uxtb	r3, r3
    2fc6:	f003 0301 	and.w	r3, r3, #1
    2fca:	2b00      	cmp	r3, #0
    2fcc:	d0f8      	beq.n	2fc0 <UARTSend+0xd8>
			LPC_UART3->THR = BufferPtr[index];
    2fce:	4913      	ldr	r1, [pc, #76]	; (301c <UARTSend+0x134>)
    2fd0:	697b      	ldr	r3, [r7, #20]
    2fd2:	693a      	ldr	r2, [r7, #16]
    2fd4:	4413      	add	r3, r2
    2fd6:	781b      	ldrb	r3, [r3, #0]
    2fd8:	700b      	strb	r3, [r1, #0]
			UART3TxEmpty = 0; /* not empty in the THR until it shifts out */
    2fda:	4b0f      	ldr	r3, [pc, #60]	; (3018 <UARTSend+0x130>)
    2fdc:	2200      	movs	r2, #0
    2fde:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    2fe0:	697b      	ldr	r3, [r7, #20]
    2fe2:	3301      	adds	r3, #1
    2fe4:	617b      	str	r3, [r7, #20]
			Length--;
    2fe6:	687b      	ldr	r3, [r7, #4]
    2fe8:	3b01      	subs	r3, #1
    2fea:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
		while (Length != 0) {
    2fec:	687b      	ldr	r3, [r7, #4]
    2fee:	2b00      	cmp	r3, #0
    2ff0:	d1e5      	bne.n	2fbe <UARTSend+0xd6>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    2ff2:	bf00      	nop
}
    2ff4:	371c      	adds	r7, #28
    2ff6:	46bd      	mov	sp, r7
    2ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ffc:	4770      	bx	lr
    2ffe:	bf00      	nop
    3000:	10000014 	.word	0x10000014
    3004:	4000c000 	.word	0x4000c000
    3008:	10000015 	.word	0x10000015
    300c:	40010000 	.word	0x40010000
    3010:	10000017 	.word	0x10000017
    3014:	40098000 	.word	0x40098000
    3018:	10000016 	.word	0x10000016
    301c:	4009c000 	.word	0x4009c000

00003020 <ReadUart>:

uint16_t ReadUart( uint8_t *veri, uint8_t PortNum )
{
    3020:	b480      	push	{r7}
    3022:	b087      	sub	sp, #28
    3024:	af00      	add	r7, sp, #0
    3026:	6078      	str	r0, [r7, #4]
    3028:	460b      	mov	r3, r1
    302a:	70fb      	strb	r3, [r7, #3]
	uint8_t *veri_ptr = veri;
    302c:	687b      	ldr	r3, [r7, #4]
    302e:	617b      	str	r3, [r7, #20]
	uint16_t buff_count = 0;
    3030:	2300      	movs	r3, #0
    3032:	827b      	strh	r3, [r7, #18]
	if (PortNum == 0) {
    3034:	78fb      	ldrb	r3, [r7, #3]
    3036:	2b00      	cmp	r3, #0
    3038:	d122      	bne.n	3080 <ReadUart+0x60>
		if (UART0Count > 0) {
    303a:	4b4e      	ldr	r3, [pc, #312]	; (3174 <ReadUart+0x154>)
    303c:	881b      	ldrh	r3, [r3, #0]
    303e:	b29b      	uxth	r3, r3
    3040:	2b00      	cmp	r3, #0
    3042:	d01d      	beq.n	3080 <ReadUart+0x60>
			while (buff_count < UART0Count) {
    3044:	e00b      	b.n	305e <ReadUart+0x3e>
				*veri_ptr = UART0Buffer[buff_count];
    3046:	8a7b      	ldrh	r3, [r7, #18]
    3048:	4a4b      	ldr	r2, [pc, #300]	; (3178 <ReadUart+0x158>)
    304a:	5cd3      	ldrb	r3, [r2, r3]
    304c:	b2da      	uxtb	r2, r3
    304e:	697b      	ldr	r3, [r7, #20]
    3050:	701a      	strb	r2, [r3, #0]
				buff_count++;
    3052:	8a7b      	ldrh	r3, [r7, #18]
    3054:	3301      	adds	r3, #1
    3056:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    3058:	697b      	ldr	r3, [r7, #20]
    305a:	3301      	adds	r3, #1
    305c:	617b      	str	r3, [r7, #20]
{
	uint8_t *veri_ptr = veri;
	uint16_t buff_count = 0;
	if (PortNum == 0) {
		if (UART0Count > 0) {
			while (buff_count < UART0Count) {
    305e:	4b45      	ldr	r3, [pc, #276]	; (3174 <ReadUart+0x154>)
    3060:	881b      	ldrh	r3, [r3, #0]
    3062:	b29b      	uxth	r3, r3
    3064:	8a7a      	ldrh	r2, [r7, #18]
    3066:	429a      	cmp	r2, r3
    3068:	d3ed      	bcc.n	3046 <ReadUart+0x26>
				*veri_ptr = UART0Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    306a:	697b      	ldr	r3, [r7, #20]
    306c:	2200      	movs	r2, #0
    306e:	701a      	strb	r2, [r3, #0]
			uint16_t len = UART0Count;
    3070:	4b40      	ldr	r3, [pc, #256]	; (3174 <ReadUart+0x154>)
    3072:	881b      	ldrh	r3, [r3, #0]
    3074:	823b      	strh	r3, [r7, #16]
			UART0Count = 0;
    3076:	4b3f      	ldr	r3, [pc, #252]	; (3174 <ReadUart+0x154>)
    3078:	2200      	movs	r2, #0
    307a:	801a      	strh	r2, [r3, #0]
			return ( len );
    307c:	8a3b      	ldrh	r3, [r7, #16]
    307e:	e073      	b.n	3168 <ReadUart+0x148>
		}
	}
	if (PortNum == 1) {
    3080:	78fb      	ldrb	r3, [r7, #3]
    3082:	2b01      	cmp	r3, #1
    3084:	d124      	bne.n	30d0 <ReadUart+0xb0>



		if (UART1Count > 0) {
    3086:	4b3d      	ldr	r3, [pc, #244]	; (317c <ReadUart+0x15c>)
    3088:	881b      	ldrh	r3, [r3, #0]
    308a:	b29b      	uxth	r3, r3
    308c:	2b00      	cmp	r3, #0
    308e:	d06a      	beq.n	3166 <ReadUart+0x146>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3090:	b672      	cpsid	i

			__disable_irq();

			while (buff_count < UART1Count) {
    3092:	e00b      	b.n	30ac <ReadUart+0x8c>
				*veri_ptr = UART1Buffer[buff_count];
    3094:	8a7b      	ldrh	r3, [r7, #18]
    3096:	4a3a      	ldr	r2, [pc, #232]	; (3180 <ReadUart+0x160>)
    3098:	5cd3      	ldrb	r3, [r2, r3]
    309a:	b2da      	uxtb	r2, r3
    309c:	697b      	ldr	r3, [r7, #20]
    309e:	701a      	strb	r2, [r3, #0]
				buff_count++;
    30a0:	8a7b      	ldrh	r3, [r7, #18]
    30a2:	3301      	adds	r3, #1
    30a4:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    30a6:	697b      	ldr	r3, [r7, #20]
    30a8:	3301      	adds	r3, #1
    30aa:	617b      	str	r3, [r7, #20]

		if (UART1Count > 0) {

			__disable_irq();

			while (buff_count < UART1Count) {
    30ac:	4b33      	ldr	r3, [pc, #204]	; (317c <ReadUart+0x15c>)
    30ae:	881b      	ldrh	r3, [r3, #0]
    30b0:	b29b      	uxth	r3, r3
    30b2:	8a7a      	ldrh	r2, [r7, #18]
    30b4:	429a      	cmp	r2, r3
    30b6:	d3ed      	bcc.n	3094 <ReadUart+0x74>
				*veri_ptr = UART1Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    30b8:	697b      	ldr	r3, [r7, #20]
    30ba:	2200      	movs	r2, #0
    30bc:	701a      	strb	r2, [r3, #0]
			uint16_t len = UART1Count;
    30be:	4b2f      	ldr	r3, [pc, #188]	; (317c <ReadUart+0x15c>)
    30c0:	881b      	ldrh	r3, [r3, #0]
    30c2:	81fb      	strh	r3, [r7, #14]
			UART1Count = 0;
    30c4:	4b2d      	ldr	r3, [pc, #180]	; (317c <ReadUart+0x15c>)
    30c6:	2200      	movs	r2, #0
    30c8:	801a      	strh	r2, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    30ca:	b662      	cpsie	i

			__enable_irq();
			return ( len );
    30cc:	89fb      	ldrh	r3, [r7, #14]
    30ce:	e04b      	b.n	3168 <ReadUart+0x148>
		}
	}//GPS Port
	else if (PortNum == 2) {
    30d0:	78fb      	ldrb	r3, [r7, #3]
    30d2:	2b02      	cmp	r3, #2
    30d4:	d11f      	bne.n	3116 <ReadUart+0xf6>
		if (UART2Count > 0) {
    30d6:	4b2b      	ldr	r3, [pc, #172]	; (3184 <ReadUart+0x164>)
    30d8:	881b      	ldrh	r3, [r3, #0]
    30da:	b29b      	uxth	r3, r3
    30dc:	2b00      	cmp	r3, #0
    30de:	d042      	beq.n	3166 <ReadUart+0x146>
			while (buff_count < UART2Count) {
    30e0:	e00b      	b.n	30fa <ReadUart+0xda>
				*veri_ptr = UART2Buffer[buff_count];
    30e2:	8a7b      	ldrh	r3, [r7, #18]
    30e4:	4a28      	ldr	r2, [pc, #160]	; (3188 <ReadUart+0x168>)
    30e6:	5cd3      	ldrb	r3, [r2, r3]
    30e8:	b2da      	uxtb	r2, r3
    30ea:	697b      	ldr	r3, [r7, #20]
    30ec:	701a      	strb	r2, [r3, #0]
				buff_count++;
    30ee:	8a7b      	ldrh	r3, [r7, #18]
    30f0:	3301      	adds	r3, #1
    30f2:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    30f4:	697b      	ldr	r3, [r7, #20]
    30f6:	3301      	adds	r3, #1
    30f8:	617b      	str	r3, [r7, #20]
			return ( len );
		}
	}//GPS Port
	else if (PortNum == 2) {
		if (UART2Count > 0) {
			while (buff_count < UART2Count) {
    30fa:	4b22      	ldr	r3, [pc, #136]	; (3184 <ReadUart+0x164>)
    30fc:	881b      	ldrh	r3, [r3, #0]
    30fe:	b29b      	uxth	r3, r3
    3100:	8a7a      	ldrh	r2, [r7, #18]
    3102:	429a      	cmp	r2, r3
    3104:	d3ed      	bcc.n	30e2 <ReadUart+0xc2>
				*veri_ptr = UART2Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    3106:	697b      	ldr	r3, [r7, #20]
    3108:	2200      	movs	r2, #0
    310a:	701a      	strb	r2, [r3, #0]
			UART2Count = 0;
    310c:	4b1d      	ldr	r3, [pc, #116]	; (3184 <ReadUart+0x164>)
    310e:	2200      	movs	r2, #0
    3110:	801a      	strh	r2, [r3, #0]
			return buff_count;
    3112:	8a7b      	ldrh	r3, [r7, #18]
    3114:	e028      	b.n	3168 <ReadUart+0x148>
		}
	} else if (PortNum == 3) {
    3116:	78fb      	ldrb	r3, [r7, #3]
    3118:	2b03      	cmp	r3, #3
    311a:	d124      	bne.n	3166 <ReadUart+0x146>
		if (UART3Count > 0) {
    311c:	4b1b      	ldr	r3, [pc, #108]	; (318c <ReadUart+0x16c>)
    311e:	881b      	ldrh	r3, [r3, #0]
    3120:	b29b      	uxth	r3, r3
    3122:	2b00      	cmp	r3, #0
    3124:	d01f      	beq.n	3166 <ReadUart+0x146>
			while (buff_count < UART3Count) {
    3126:	e00b      	b.n	3140 <ReadUart+0x120>
				*veri_ptr = UART3Buffer[buff_count];
    3128:	8a7b      	ldrh	r3, [r7, #18]
    312a:	4a19      	ldr	r2, [pc, #100]	; (3190 <ReadUart+0x170>)
    312c:	5cd3      	ldrb	r3, [r2, r3]
    312e:	b2da      	uxtb	r2, r3
    3130:	697b      	ldr	r3, [r7, #20]
    3132:	701a      	strb	r2, [r3, #0]
				buff_count++;
    3134:	8a7b      	ldrh	r3, [r7, #18]
    3136:	3301      	adds	r3, #1
    3138:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    313a:	697b      	ldr	r3, [r7, #20]
    313c:	3301      	adds	r3, #1
    313e:	617b      	str	r3, [r7, #20]
			UART2Count = 0;
			return buff_count;
		}
	} else if (PortNum == 3) {
		if (UART3Count > 0) {
			while (buff_count < UART3Count) {
    3140:	4b12      	ldr	r3, [pc, #72]	; (318c <ReadUart+0x16c>)
    3142:	881b      	ldrh	r3, [r3, #0]
    3144:	b29b      	uxth	r3, r3
    3146:	8a7a      	ldrh	r2, [r7, #18]
    3148:	429a      	cmp	r2, r3
    314a:	d3ed      	bcc.n	3128 <ReadUart+0x108>
				*veri_ptr = UART3Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    314c:	697b      	ldr	r3, [r7, #20]
    314e:	2200      	movs	r2, #0
    3150:	701a      	strb	r2, [r3, #0]
			int len = UART3Count;
    3152:	4b0e      	ldr	r3, [pc, #56]	; (318c <ReadUart+0x16c>)
    3154:	881b      	ldrh	r3, [r3, #0]
    3156:	b29b      	uxth	r3, r3
    3158:	60bb      	str	r3, [r7, #8]
			UART3Count = 0;
    315a:	4b0c      	ldr	r3, [pc, #48]	; (318c <ReadUart+0x16c>)
    315c:	2200      	movs	r2, #0
    315e:	801a      	strh	r2, [r3, #0]
			return len;
    3160:	68bb      	ldr	r3, [r7, #8]
    3162:	b29b      	uxth	r3, r3
    3164:	e000      	b.n	3168 <ReadUart+0x148>
		}
	}
	return 0;
    3166:	2300      	movs	r3, #0
}
    3168:	4618      	mov	r0, r3
    316a:	371c      	adds	r7, #28
    316c:	46bd      	mov	sp, r7
    316e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3172:	4770      	bx	lr
    3174:	10000138 	.word	0x10000138
    3178:	10001004 	.word	0x10001004
    317c:	1000013a 	.word	0x1000013a
    3180:	10000ef8 	.word	0x10000ef8
    3184:	1000013c 	.word	0x1000013c
    3188:	1000120c 	.word	0x1000120c
    318c:	1000013e 	.word	0x1000013e
    3190:	1000110c 	.word	0x1000110c

00003194 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3194:	b480      	push	{r7}
    3196:	b083      	sub	sp, #12
    3198:	af00      	add	r7, sp, #0
    319a:	4603      	mov	r3, r0
    319c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    319e:	4908      	ldr	r1, [pc, #32]	; (31c0 <NVIC_EnableIRQ+0x2c>)
    31a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    31a4:	095b      	lsrs	r3, r3, #5
    31a6:	79fa      	ldrb	r2, [r7, #7]
    31a8:	f002 021f 	and.w	r2, r2, #31
    31ac:	2001      	movs	r0, #1
    31ae:	fa00 f202 	lsl.w	r2, r0, r2
    31b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    31b6:	370c      	adds	r7, #12
    31b8:	46bd      	mov	sp, r7
    31ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    31be:	4770      	bx	lr
    31c0:	e000e100 	.word	0xe000e100

000031c4 <WDT_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void WDT_IRQHandler(void) {
    31c4:	b480      	push	{r7}
    31c6:	af00      	add	r7, sp, #0
	LPC_WDT->WDMOD &= ~WDTOF; /* clear the time-out terrupt flag */
    31c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    31cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31d0:	781b      	ldrb	r3, [r3, #0]
    31d2:	b2db      	uxtb	r3, r3
    31d4:	f023 0304 	bic.w	r3, r3, #4
    31d8:	b2db      	uxtb	r3, r3
    31da:	7013      	strb	r3, [r2, #0]
	wdt_counter++;
    31dc:	4b04      	ldr	r3, [pc, #16]	; (31f0 <WDT_IRQHandler+0x2c>)
    31de:	681b      	ldr	r3, [r3, #0]
    31e0:	3301      	adds	r3, #1
    31e2:	4a03      	ldr	r2, [pc, #12]	; (31f0 <WDT_IRQHandler+0x2c>)
    31e4:	6013      	str	r3, [r2, #0]
	return;
    31e6:	bf00      	nop
}
    31e8:	46bd      	mov	sp, r7
    31ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    31ee:	4770      	bx	lr
    31f0:	10001a08 	.word	0x10001a08

000031f4 <WDTInit>:
	//WDT_SetTimeOutRTC(300 * 1000 * 1000);
	LPC_WDT->WDMOD = 0x3;
	//WDTFeed();
}

uint32_t WDTInit(uint32_t feed) {
    31f4:	b580      	push	{r7, lr}
    31f6:	b082      	sub	sp, #8
    31f8:	af00      	add	r7, sp, #0
    31fa:	6078      	str	r0, [r7, #4]
	wdt_counter = 0;
    31fc:	4b0b      	ldr	r3, [pc, #44]	; (322c <WDTInit+0x38>)
    31fe:	2200      	movs	r2, #0
    3200:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(WDT_IRQn);
    3202:	2000      	movs	r0, #0
    3204:	f7ff ffc6 	bl	3194 <NVIC_EnableIRQ>
	LPC_WDT->WDCLKSEL = 0x1;//0x0 = IRC (Internal RC Oscillator) ,0x1 = APB Peripheral clock
    3208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    320c:	2201      	movs	r2, #1
    320e:	611a      	str	r2, [r3, #16]
	//IRC is active even in Deep Sleep, and WDT Interrupt can wake up MCU in this mode.
	LPC_WDT->WDTC = feed; /* once WDEN is set, the WDT will start after feeding */
    3210:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3214:	687b      	ldr	r3, [r7, #4]
    3216:	6053      	str	r3, [r2, #4]
	LPC_WDT->WDMOD = 0x3;
    3218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    321c:	2203      	movs	r2, #3
    321e:	701a      	strb	r2, [r3, #0]
	WDTFeed();
    3220:	f000 f806 	bl	3230 <WDTFeed>
}
    3224:	4618      	mov	r0, r3
    3226:	3708      	adds	r7, #8
    3228:	46bd      	mov	sp, r7
    322a:	bd80      	pop	{r7, pc}
    322c:	10001a08 	.word	0x10001a08

00003230 <WDTFeed>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void WDTFeed(void) {
    3230:	b480      	push	{r7}
    3232:	af00      	add	r7, sp, #0
	LPC_WDT->WDFEED = 0xAA; /* Feeding sequence */
    3234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3238:	22aa      	movs	r2, #170	; 0xaa
    323a:	721a      	strb	r2, [r3, #8]
	LPC_WDT->WDFEED = 0x55;
    323c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3240:	2255      	movs	r2, #85	; 0x55
    3242:	721a      	strb	r2, [r3, #8]
	return;
    3244:	bf00      	nop
}
    3246:	46bd      	mov	sp, r7
    3248:	f85d 7b04 	ldr.w	r7, [sp], #4
    324c:	4770      	bx	lr
    324e:	bf00      	nop

00003250 <XModemReadByte>:
//	(*pByte) = receiveBuf[dataIndex++];
//	return (1);
//}


uint8_t XModemReadByte( unsigned char* pByte) {
    3250:	b580      	push	{r7, lr}
    3252:	b08a      	sub	sp, #40	; 0x28
    3254:	af00      	add	r7, sp, #0
    3256:	6078      	str	r0, [r7, #4]
	char* pnewline;
	char asciiLen[10];
	unsigned int len, i;
	unsigned dataoffset;

	if (dataIndex >= dataLen) {
    3258:	4b49      	ldr	r3, [pc, #292]	; (3380 <XModemReadByte+0x130>)
    325a:	881a      	ldrh	r2, [r3, #0]
    325c:	4b49      	ldr	r3, [pc, #292]	; (3384 <XModemReadByte+0x134>)
    325e:	881b      	ldrh	r3, [r3, #0]
    3260:	429a      	cmp	r2, r3
    3262:	d37c      	bcc.n	335e <XModemReadByte+0x10e>
		// all buffer consumed read more from TCP connection
		dataLen = GSM_TCP_Recv( receiveBuf, 1500 );
    3264:	4848      	ldr	r0, [pc, #288]	; (3388 <XModemReadByte+0x138>)
    3266:	f240 51dc 	movw	r1, #1500	; 0x5dc
    326a:	f7fd fc0b 	bl	a84 <GSM_TCP_Recv>
    326e:	4603      	mov	r3, r0
    3270:	b29a      	uxth	r2, r3
    3272:	4b44      	ldr	r3, [pc, #272]	; (3384 <XModemReadByte+0x134>)
    3274:	801a      	strh	r2, [r3, #0]
		receiveBuf[dataLen + 1] = '\0';
    3276:	4b43      	ldr	r3, [pc, #268]	; (3384 <XModemReadByte+0x134>)
    3278:	881b      	ldrh	r3, [r3, #0]
    327a:	3301      	adds	r3, #1
    327c:	4a42      	ldr	r2, [pc, #264]	; (3388 <XModemReadByte+0x138>)
    327e:	2100      	movs	r1, #0
    3280:	54d1      	strb	r1, [r2, r3]

		// find the length of the message between
		// ",TCP," and "\r\n"
		pdata = strstr( receiveBuf, "IPD" );
    3282:	4841      	ldr	r0, [pc, #260]	; (3388 <XModemReadByte+0x138>)
    3284:	4941      	ldr	r1, [pc, #260]	; (338c <XModemReadByte+0x13c>)
    3286:	f002 f8a4 	bl	53d2 <strstr>
    328a:	4603      	mov	r3, r0
    328c:	627b      	str	r3, [r7, #36]	; 0x24
		if (pdata == NULL)
    328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3290:	2b00      	cmp	r3, #0
    3292:	d117      	bne.n	32c4 <XModemReadByte+0x74>
		{
			pdata = strstr( receiveBuf, ",TCP," );
    3294:	483c      	ldr	r0, [pc, #240]	; (3388 <XModemReadByte+0x138>)
    3296:	493e      	ldr	r1, [pc, #248]	; (3390 <XModemReadByte+0x140>)
    3298:	f002 f89b 	bl	53d2 <strstr>
    329c:	4603      	mov	r3, r0
    329e:	627b      	str	r3, [r7, #36]	; 0x24
			if (pdata == NULL) {
    32a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32a2:	2b00      	cmp	r3, #0
    32a4:	d101      	bne.n	32aa <XModemReadByte+0x5a>
				return (0);
    32a6:	2300      	movs	r3, #0
    32a8:	e065      	b.n	3376 <XModemReadByte+0x126>
			}

			pnewline = strstr(pdata, "\r\n");
    32aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
    32ac:	4939      	ldr	r1, [pc, #228]	; (3394 <XModemReadByte+0x144>)
    32ae:	f002 f890 	bl	53d2 <strstr>
    32b2:	4603      	mov	r3, r0
    32b4:	623b      	str	r3, [r7, #32]
			dataoffset = 2;
    32b6:	2302      	movs	r3, #2
    32b8:	61bb      	str	r3, [r7, #24]
			if (pnewline == NULL) {
    32ba:	6a3b      	ldr	r3, [r7, #32]
    32bc:	2b00      	cmp	r3, #0
    32be:	d10e      	bne.n	32de <XModemReadByte+0x8e>
				return (0);
    32c0:	2300      	movs	r3, #0
    32c2:	e058      	b.n	3376 <XModemReadByte+0x126>
			}

		} else
		{
			pnewline = strstr( pdata, "TCP:" );
    32c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    32c6:	4934      	ldr	r1, [pc, #208]	; (3398 <XModemReadByte+0x148>)
    32c8:	f002 f883 	bl	53d2 <strstr>
    32cc:	4603      	mov	r3, r0
    32ce:	623b      	str	r3, [r7, #32]
			if (pnewline == NULL) {
    32d0:	6a3b      	ldr	r3, [r7, #32]
    32d2:	2b00      	cmp	r3, #0
    32d4:	d101      	bne.n	32da <XModemReadByte+0x8a>
				return (0);
    32d6:	2300      	movs	r3, #0
    32d8:	e04d      	b.n	3376 <XModemReadByte+0x126>
			}
			dataoffset = 4;
    32da:	2304      	movs	r3, #4
    32dc:	61bb      	str	r3, [r7, #24]
		}

		strncpy( asciiLen, pdata + 3, pnewline - pdata );
    32de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32e0:	1cd9      	adds	r1, r3, #3
    32e2:	6a3a      	ldr	r2, [r7, #32]
    32e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32e6:	1ad3      	subs	r3, r2, r3
    32e8:	f107 0208 	add.w	r2, r7, #8
    32ec:	4610      	mov	r0, r2
    32ee:	461a      	mov	r2, r3
    32f0:	f002 f843 	bl	537a <strncpy>

		asciiLen[pnewline - pdata] = '\0';
    32f4:	6a3a      	ldr	r2, [r7, #32]
    32f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32f8:	1ad3      	subs	r3, r2, r3
    32fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
    32fe:	4413      	add	r3, r2
    3300:	2200      	movs	r2, #0
    3302:	f803 2c20 	strb.w	r2, [r3, #-32]

		len = atoi(asciiLen);
    3306:	f107 0308 	add.w	r3, r7, #8
    330a:	4618      	mov	r0, r3
    330c:	f001 ffb6 	bl	527c <atoi>
    3310:	4603      	mov	r3, r0
    3312:	617b      	str	r3, [r7, #20]

//		int count = sprintf(asciiLen, "%d", len );
//		asciiLen[count] = '\0';
//		TraceDumpHex(asciiLen, strlen(asciiLen));

		for (i = 0; i < len; i++) {
    3314:	2300      	movs	r3, #0
    3316:	61fb      	str	r3, [r7, #28]
    3318:	e00d      	b.n	3336 <XModemReadByte+0xe6>
			receiveBuf[i] = *(pnewline + dataoffset + i);
    331a:	69ba      	ldr	r2, [r7, #24]
    331c:	69fb      	ldr	r3, [r7, #28]
    331e:	4413      	add	r3, r2
    3320:	6a3a      	ldr	r2, [r7, #32]
    3322:	4413      	add	r3, r2
    3324:	7819      	ldrb	r1, [r3, #0]
    3326:	4a18      	ldr	r2, [pc, #96]	; (3388 <XModemReadByte+0x138>)
    3328:	69fb      	ldr	r3, [r7, #28]
    332a:	4413      	add	r3, r2
    332c:	460a      	mov	r2, r1
    332e:	701a      	strb	r2, [r3, #0]

//		int count = sprintf(asciiLen, "%d", len );
//		asciiLen[count] = '\0';
//		TraceDumpHex(asciiLen, strlen(asciiLen));

		for (i = 0; i < len; i++) {
    3330:	69fb      	ldr	r3, [r7, #28]
    3332:	3301      	adds	r3, #1
    3334:	61fb      	str	r3, [r7, #28]
    3336:	69fa      	ldr	r2, [r7, #28]
    3338:	697b      	ldr	r3, [r7, #20]
    333a:	429a      	cmp	r2, r3
    333c:	d3ed      	bcc.n	331a <XModemReadByte+0xca>
			receiveBuf[i] = *(pnewline + dataoffset + i);
		}
		dataLen   = len;
    333e:	697b      	ldr	r3, [r7, #20]
    3340:	b29a      	uxth	r2, r3
    3342:	4b10      	ldr	r3, [pc, #64]	; (3384 <XModemReadByte+0x134>)
    3344:	801a      	strh	r2, [r3, #0]
		dataIndex = 0;
    3346:	4b0e      	ldr	r3, [pc, #56]	; (3380 <XModemReadByte+0x130>)
    3348:	2200      	movs	r2, #0
    334a:	801a      	strh	r2, [r3, #0]
		if( dataLen <= 0 ) {
    334c:	4b0d      	ldr	r3, [pc, #52]	; (3384 <XModemReadByte+0x134>)
    334e:	881b      	ldrh	r3, [r3, #0]
    3350:	2b00      	cmp	r3, #0
    3352:	d104      	bne.n	335e <XModemReadByte+0x10e>
			dataLen = 0;
    3354:	4b0b      	ldr	r3, [pc, #44]	; (3384 <XModemReadByte+0x134>)
    3356:	2200      	movs	r2, #0
    3358:	801a      	strh	r2, [r3, #0]
			return (0);  // no data available
    335a:	2300      	movs	r3, #0
    335c:	e00b      	b.n	3376 <XModemReadByte+0x126>
		}
	}

	(*pByte) = receiveBuf[dataIndex++];
    335e:	4b08      	ldr	r3, [pc, #32]	; (3380 <XModemReadByte+0x130>)
    3360:	881b      	ldrh	r3, [r3, #0]
    3362:	1c5a      	adds	r2, r3, #1
    3364:	b291      	uxth	r1, r2
    3366:	4a06      	ldr	r2, [pc, #24]	; (3380 <XModemReadByte+0x130>)
    3368:	8011      	strh	r1, [r2, #0]
    336a:	461a      	mov	r2, r3
    336c:	4b06      	ldr	r3, [pc, #24]	; (3388 <XModemReadByte+0x138>)
    336e:	5c9a      	ldrb	r2, [r3, r2]
    3370:	687b      	ldr	r3, [r7, #4]
    3372:	701a      	strb	r2, [r3, #0]
	return (1);
    3374:	2301      	movs	r3, #1
}
    3376:	4618      	mov	r0, r3
    3378:	3728      	adds	r7, #40	; 0x28
    337a:	46bd      	mov	sp, r7
    337c:	bd80      	pop	{r7, pc}
    337e:	bf00      	nop
    3380:	10000b1e 	.word	0x10000b1e
    3384:	10000b1c 	.word	0x10000b1c
    3388:	10000540 	.word	0x10000540
    338c:	00007044 	.word	0x00007044
    3390:	00007048 	.word	0x00007048
    3394:	00007050 	.word	0x00007050
    3398:	00007054 	.word	0x00007054

0000339c <XModem1K_Client>:


int XModem1K_Client(
		uint32_t (*pu32Xmodem1kRxPacketCallback)(uint8_t *pu8Data,
				uint16_t u16Len)) {
    339c:	b580      	push	{r7, lr}
    339e:	b0bc      	sub	sp, #240	; 0xf0
    33a0:	af00      	add	r7, sp, #0
    33a2:	6078      	str	r0, [r7, #4]
	uint32_t u32InProgress = 1;
    33a4:	2301      	movs	r3, #1
    33a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	uint32_t u32State = STATE_IDLE;
    33aa:	2300      	movs	r3, #0
    33ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

	uint32_t trials;

	/* Prepare UART for RX/TX */

	while (u32InProgress) {
    33b0:	e15c      	b.n	366c <XModem1K_Client+0x2d0>
		WDTFeed();
    33b2:	f7ff ff3d 	bl	3230 <WDTFeed>
		switch (u32State) {
    33b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    33ba:	2b01      	cmp	r3, #1
    33bc:	d01e      	beq.n	33fc <XModem1K_Client+0x60>
    33be:	2b01      	cmp	r3, #1
    33c0:	d302      	bcc.n	33c8 <XModem1K_Client+0x2c>
    33c2:	2b02      	cmp	r3, #2
    33c4:	d060      	beq.n	3488 <XModem1K_Client+0xec>
    33c6:	e150      	b.n	366a <XModem1K_Client+0x2ce>
		case STATE_IDLE: {

			/* Send command to server indicating we are ready to receive */
			uint8_t u8Cmd = POLL;
    33c8:	2343      	movs	r3, #67	; 0x43
    33ca:	73fb      	strb	r3, [r7, #15]

			TraceNL( "Start downloading" );
    33cc:	48ac      	ldr	r0, [pc, #688]	; (3680 <XModem1K_Client+0x2e4>)
    33ce:	f7ff f8af 	bl	2530 <TraceNL>
			TracePutcHex( u8Cmd );
    33d2:	7bfb      	ldrb	r3, [r7, #15]
    33d4:	4618      	mov	r0, r3
    33d6:	f7ff f8d1 	bl	257c <TracePutcHex>
			GSM_TCP_Send(&u8Cmd, 1);
    33da:	f107 030f 	add.w	r3, r7, #15
    33de:	4618      	mov	r0, r3
    33e0:	2101      	movs	r1, #1
    33e2:	f7fd fd23 	bl	e2c <GSM_TCP_Send>

			/* Start timeout to send another poll if we do not get a response */
			vTimerStart(POLL_PERIOD_ms);
    33e6:	f644 6020 	movw	r0, #20000	; 0x4e20
    33ea:	f000 f963 	bl	36b4 <vTimerStart>
			trials   = DOWNLOAD_MAX_TRIALS;
    33ee:	230a      	movs	r3, #10
    33f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

			u32State = STATE_CONNECTING;
    33f4:	2301      	movs	r3, #1
    33f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		}
			break;
    33fa:	e137      	b.n	366c <XModem1K_Client+0x2d0>

		case STATE_CONNECTING: {
			uint8_t u8Data;

			/* Check if a character has been received on the UART */
			if( XModemReadByte( &u8Data ) )
    33fc:	f107 030e 	add.w	r3, r7, #14
    3400:	4618      	mov	r0, r3
    3402:	f7ff ff25 	bl	3250 <XModemReadByte>
    3406:	4603      	mov	r3, r0
    3408:	2b00      	cmp	r3, #0
    340a:	d010      	beq.n	342e <XModem1K_Client+0x92>
			{
				/* Expecting a start of packet character */
				if( u8Data == SOH )
    340c:	7bbb      	ldrb	r3, [r7, #14]
    340e:	2b01      	cmp	r3, #1
    3410:	d139      	bne.n	3486 <XModem1K_Client+0xea>
				{
					/* SOH indicates short pay load packet is being transmitted */
					u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    3412:	2380      	movs	r3, #128	; 0x80
    3414:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
					u32ByteCount = 1;
    3418:	2301      	movs	r3, #1
    341a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

					/* Start packet timeout */
					vTimerStart( PACKET_TIMEOUT_PERIOD_ms);
    341e:	f644 6020 	movw	r0, #20000	; 0x4e20
    3422:	f000 f947 	bl	36b4 <vTimerStart>

					/* Wait for a further characters */
					u32State = STATE_RECEIVING;
    3426:	2302      	movs	r3, #2
    3428:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    342c:	e11e      	b.n	366c <XModem1K_Client+0x2d0>
				}
			} else /* No data received yet, check poll command timeout */
			{
				if ((LPC_TIM0->TCR & 0x01) == 0) {
    342e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3432:	685b      	ldr	r3, [r3, #4]
    3434:	f003 0301 	and.w	r3, r3, #1
    3438:	2b00      	cmp	r3, #0
    343a:	f040 8117 	bne.w	366c <XModem1K_Client+0x2d0>
					/* Timeout expired following poll command transmission so try again.. */
					uint8_t u8Cmd = POLL;
    343e:	2343      	movs	r3, #67	; 0x43
    3440:	737b      	strb	r3, [r7, #13]

					if (trials-- > 0) {
    3442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    3446:	1e5a      	subs	r2, r3, #1
    3448:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
    344c:	2b00      	cmp	r3, #0
    344e:	d014      	beq.n	347a <XModem1K_Client+0xde>
						TraceNL("Connecting state timer expired sending  new request  ");
    3450:	488c      	ldr	r0, [pc, #560]	; (3684 <XModem1K_Client+0x2e8>)
    3452:	f7ff f86d 	bl	2530 <TraceNL>
						TracePutcHex( u8Cmd );
    3456:	7b7b      	ldrb	r3, [r7, #13]
    3458:	4618      	mov	r0, r3
    345a:	f7ff f88f 	bl	257c <TracePutcHex>
						TraceNL("\r\n");
    345e:	488a      	ldr	r0, [pc, #552]	; (3688 <XModem1K_Client+0x2ec>)
    3460:	f7ff f866 	bl	2530 <TraceNL>
						GSM_TCP_Send(&u8Cmd, 1);
    3464:	f107 030d 	add.w	r3, r7, #13
    3468:	4618      	mov	r0, r3
    346a:	2101      	movs	r1, #1
    346c:	f7fd fcde 	bl	e2c <GSM_TCP_Send>

					/*
					 * Restart timeout to send another poll
					 * if we do not get a response
					 */
					vTimerStart( POLL_PERIOD_ms);
    3470:	f644 6020 	movw	r0, #20000	; 0x4e20
    3474:	f000 f91e 	bl	36b4 <vTimerStart>
    3478:	e005      	b.n	3486 <XModem1K_Client+0xea>
						TraceNL("Connecting state timer expired sending  new request  ");
						TracePutcHex( u8Cmd );
						TraceNL("\r\n");
						GSM_TCP_Send(&u8Cmd, 1);
					} else {
						TraceNL("No reply give up upgrading");
    347a:	4884      	ldr	r0, [pc, #528]	; (368c <XModem1K_Client+0x2f0>)
    347c:	f7ff f858 	bl	2530 <TraceNL>
						return ( DOWNLOAD_ERR_TIMEOUT );
    3480:	f04f 33ff 	mov.w	r3, #4294967295
    3484:	e0f7      	b.n	3676 <XModem1K_Client+0x2da>
					 */
					vTimerStart( POLL_PERIOD_ms);
				}
			}
		}
			break;
    3486:	e0f1      	b.n	366c <XModem1K_Client+0x2d0>

		case STATE_RECEIVING: {
			uint8_t u8Data;

			/* Check if a character has been received on the UART */
			if( XModemReadByte( &u8Data ) )
    3488:	f107 030c 	add.w	r3, r7, #12
    348c:	4618      	mov	r0, r3
    348e:	f7ff fedf 	bl	3250 <XModemReadByte>
    3492:	4603      	mov	r3, r0
    3494:	2b00      	cmp	r3, #0
    3496:	f000 80c0 	beq.w	361a <XModem1K_Client+0x27e>
			{
				// TracePutcHex( u8Data );
				/* Position of received byte determines action we take */
				if( u32ByteCount == 0 )
    349a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    349e:	2b00      	cmp	r3, #0
    34a0:	d13e      	bne.n	3520 <XModem1K_Client+0x184>
				{
					/* Expecting a start of packet character */
					if( u8Data == SOH ) {
    34a2:	7b3b      	ldrb	r3, [r7, #12]
    34a4:	2b01      	cmp	r3, #1
    34a6:	d10a      	bne.n	34be <XModem1K_Client+0x122>
						/* SOH indicates short pay load packet is being transmitted */
						u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    34a8:	2380      	movs	r3, #128	; 0x80
    34aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
						u32ByteCount = 1;
    34ae:	2301      	movs	r3, #1
    34b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

						/* Start packet timeout */
						vTimerStart(PACKET_TIMEOUT_PERIOD_ms);
    34b4:	f644 6020 	movw	r0, #20000	; 0x4e20
    34b8:	f000 f8fc 	bl	36b4 <vTimerStart>
    34bc:	e0d4      	b.n	3668 <XModem1K_Client+0x2cc>
					} else if (u8Data == EOT) {
    34be:	7b3b      	ldrb	r3, [r7, #12]
    34c0:	2b03      	cmp	r3, #3
    34c2:	f040 80d1 	bne.w	3668 <XModem1K_Client+0x2cc>
						TraceNL("Received EOT ");
    34c6:	4872      	ldr	r0, [pc, #456]	; (3690 <XModem1K_Client+0x2f4>)
    34c8:	f7ff f832 	bl	2530 <TraceNL>
						/* Server indicating transmission is complete */
						TraceNL("Closing TCP connection ");
    34cc:	4871      	ldr	r0, [pc, #452]	; (3694 <XModem1K_Client+0x2f8>)
    34ce:	f7ff f82f 	bl	2530 <TraceNL>
						GSM_TCP_Close( );
    34d2:	f7fd fec9 	bl	1268 <GSM_TCP_Close>

						u32InProgress = 0;
    34d6:	2300      	movs	r3, #0
    34d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

						sprintf( buffer, "byte count: %d, packet len %d\r\n", u32ByteCount, u32PktLen);
    34dc:	f107 0310 	add.w	r3, r7, #16
    34e0:	4618      	mov	r0, r3
    34e2:	496d      	ldr	r1, [pc, #436]	; (3698 <XModem1K_Client+0x2fc>)
    34e4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    34e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    34ec:	f000 fab8 	bl	3a60 <sprintf>
						TraceDumpHex( buffer, strlen( buffer ) );
    34f0:	f107 0310 	add.w	r3, r7, #16
    34f4:	4618      	mov	r0, r3
    34f6:	f001 ff1b 	bl	5330 <strlen>
    34fa:	4602      	mov	r2, r0
    34fc:	f107 0310 	add.w	r3, r7, #16
    3500:	4618      	mov	r0, r3
    3502:	4611      	mov	r1, r2
    3504:	f7ff f856 	bl	25b4 <TraceDumpHex>

						/* Call the call back function to indicated a complete transmission */
						/* If length == 0, then EOT */
						pu32Xmodem1kRxPacketCallback(&au8RxBuffer[0], 0);
    3508:	687b      	ldr	r3, [r7, #4]
    350a:	4864      	ldr	r0, [pc, #400]	; (369c <XModem1K_Client+0x300>)
    350c:	2100      	movs	r1, #0
    350e:	4798      	blx	r3

					    // We should have completed the image reception now dump it to see if any problem.
						TraceDumpHex( SECONDARY_IMAGE_LOAD_ADDR, 6256 );
    3510:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3514:	f641 0170 	movw	r1, #6256	; 0x1870
    3518:	f7ff f84c 	bl	25b4 <TraceDumpHex>

						return ( 0 );
    351c:	2300      	movs	r3, #0
    351e:	e0aa      	b.n	3676 <XModem1K_Client+0x2da>

					} else {
						// Unexpected char ignore it
					}
				} else if (u32ByteCount == 1) {
    3520:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    3524:	2b01      	cmp	r3, #1
    3526:	d105      	bne.n	3534 <XModem1K_Client+0x198>
					/* Byte 1 is the packet number - should be different from last one we received */
					u32ByteCount++;
    3528:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    352c:	3301      	adds	r3, #1
    352e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    3532:	e099      	b.n	3668 <XModem1K_Client+0x2cc>
				} else if (u32ByteCount == 2) {
    3534:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    3538:	2b02      	cmp	r3, #2
    353a:	d105      	bne.n	3548 <XModem1K_Client+0x1ac>
					/* Byte 2 is the packet number inverted - check for error with last byte */
					u32ByteCount++;
    353c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    3540:	3301      	adds	r3, #1
    3542:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    3546:	e08f      	b.n	3668 <XModem1K_Client+0x2cc>
				} else if( ((u32ByteCount == 131) && (u32PktLen == SHORT_PACKET_PAYLOAD_LEN)) )
    3548:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    354c:	2b83      	cmp	r3, #131	; 0x83
    354e:	d10c      	bne.n	356a <XModem1K_Client+0x1ce>
    3550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    3554:	2b80      	cmp	r3, #128	; 0x80
    3556:	d108      	bne.n	356a <XModem1K_Client+0x1ce>
				{
					/* If pay load is short byte 131 is the MS byte of the packet CRC, if pay load
					 is long byte 1027 is the MS byte of the packet CRC. */
					u16CRC = u8Data;
    3558:	7b3b      	ldrb	r3, [r7, #12]
    355a:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
					u32ByteCount++;
    355e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    3562:	3301      	adds	r3, #1
    3564:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    3568:	e056      	b.n	3618 <XModem1K_Client+0x27c>

				}
				else if( (u32ByteCount == 132) && (u32PktLen == SHORT_PACKET_PAYLOAD_LEN) )
    356a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    356e:	2b84      	cmp	r3, #132	; 0x84
    3570:	d146      	bne.n	3600 <XModem1K_Client+0x264>
    3572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    3576:	2b80      	cmp	r3, #128	; 0x80
    3578:	d142      	bne.n	3600 <XModem1K_Client+0x264>
				{
					/* If pay load is short byte 132 is the LS byte of the packet CRC, if pay load
					 is long byte 1028 is the LS byte of the packet CRC. */
					u16CRC <<= 8;
    357a:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
    357e:	021b      	lsls	r3, r3, #8
    3580:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
					u16CRC |= u8Data;
    3584:	7b3b      	ldrb	r3, [r7, #12]
    3586:	b29a      	uxth	r2, r3
    3588:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
    358c:	4313      	orrs	r3, r2
    358e:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
						uint8_t u8Cmd;

						/* Have now received full packet, call handler
						 * BEFORE sending ACK to application
						 can process data before more is sent. */
						if( pu32Xmodem1kRxPacketCallback(&au8RxBuffer[0], u32PktLen) != 0 )
    3592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    3596:	b29a      	uxth	r2, r3
    3598:	687b      	ldr	r3, [r7, #4]
    359a:	4840      	ldr	r0, [pc, #256]	; (369c <XModem1K_Client+0x300>)
    359c:	4611      	mov	r1, r2
    359e:	4798      	blx	r3
    35a0:	4603      	mov	r3, r0
    35a2:	2b00      	cmp	r3, #0
    35a4:	d012      	beq.n	35cc <XModem1K_Client+0x230>
						{
							/* Packet handled successfully, send ACK to server indicating
							 *  we are ready for next packet */
							u8Cmd = ACK;
    35a6:	2306      	movs	r3, #6
    35a8:	72fb      	strb	r3, [r7, #11]
							TraceNL("Received a frame ");
    35aa:	483d      	ldr	r0, [pc, #244]	; (36a0 <XModem1K_Client+0x304>)
    35ac:	f7fe ffc0 	bl	2530 <TraceNL>
							TraceNL("Sending  ACK ");
    35b0:	483c      	ldr	r0, [pc, #240]	; (36a4 <XModem1K_Client+0x308>)
    35b2:	f7fe ffbd 	bl	2530 <TraceNL>
							GSM_TCP_Send( &u8Cmd, 1 );
    35b6:	f107 030b 	add.w	r3, r7, #11
    35ba:	4618      	mov	r0, r3
    35bc:	2101      	movs	r1, #1
    35be:	f7fd fc35 	bl	e2c <GSM_TCP_Send>
							DelayMs( 1000 );
    35c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    35c6:	f7fe ff8d 	bl	24e4 <DelayMs>
    35ca:	e015      	b.n	35f8 <XModem1K_Client+0x25c>
						} else
						{
							/* Something went wrong with packet handler,
							 * all we can do is send NAK causing the
							 packet to be retransmitted by the server.. */
							u8Cmd = NAK;
    35cc:	2315      	movs	r3, #21
    35ce:	72fb      	strb	r3, [r7, #11]
							TraceNL("Sending  NACK");
    35d0:	4835      	ldr	r0, [pc, #212]	; (36a8 <XModem1K_Client+0x30c>)
    35d2:	f7fe ffad 	bl	2530 <TraceNL>
							TracePutcHex( u8Cmd );
    35d6:	7afb      	ldrb	r3, [r7, #11]
    35d8:	4618      	mov	r0, r3
    35da:	f7fe ffcf 	bl	257c <TracePutcHex>
							TraceNL("\r\n");
    35de:	482a      	ldr	r0, [pc, #168]	; (3688 <XModem1K_Client+0x2ec>)
    35e0:	f7fe ffa6 	bl	2530 <TraceNL>

							GSM_TCP_Send(&u8Cmd, 1);
    35e4:	f107 030b 	add.w	r3, r7, #11
    35e8:	4618      	mov	r0, r3
    35ea:	2101      	movs	r1, #1
    35ec:	f7fd fc1e 	bl	e2c <GSM_TCP_Send>
							DelayMs( 1000 );
    35f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    35f4:	f7fe ff76 	bl	24e4 <DelayMs>
						/* Indicate problem to server - should result in packet being resent.. */
						uint8_t u8Cmd = NAK;
						TraceNL("CRC does not match  NACKing");
						GSM_TCP_Send(&u8Cmd, 1);
					}
					u32ByteCount = 0;
    35f8:	2300      	movs	r3, #0
    35fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    35fe:	e00b      	b.n	3618 <XModem1K_Client+0x27c>

				} else {
					/* Must be pay load data so store */
					au8RxBuffer[u32ByteCount - PACKET_HEADER_LEN] = u8Data;
    3600:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    3604:	3b03      	subs	r3, #3
    3606:	7b39      	ldrb	r1, [r7, #12]
    3608:	4a24      	ldr	r2, [pc, #144]	; (369c <XModem1K_Client+0x300>)
    360a:	54d1      	strb	r1, [r2, r3]
					u32ByteCount++;
    360c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    3610:	3301      	adds	r3, #1
    3612:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    3616:	e027      	b.n	3668 <XModem1K_Client+0x2cc>
    3618:	e026      	b.n	3668 <XModem1K_Client+0x2cc>
				}
			}
			else
			{
				if( (LPC_TIM0->TCR & 0x01) == 0 )
    361a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    361e:	685b      	ldr	r3, [r3, #4]
    3620:	f003 0301 	and.w	r3, r3, #1
    3624:	2b00      	cmp	r3, #0
    3626:	d11f      	bne.n	3668 <XModem1K_Client+0x2cc>
				{
					/* Timeout expired no data received stop upgrade  */
					if (trials-- > 0)
    3628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    362c:	1e5a      	subs	r2, r3, #1
    362e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
    3632:	2b00      	cmp	r3, #0
    3634:	d012      	beq.n	365c <XModem1K_Client+0x2c0>
					{
						TraceNL("Time out in RECEIVING   ");
    3636:	481d      	ldr	r0, [pc, #116]	; (36ac <XModem1K_Client+0x310>)
    3638:	f7fe ff7a 	bl	2530 <TraceNL>
						uint8_t u8Cmd = NAK;
    363c:	2315      	movs	r3, #21
    363e:	727b      	strb	r3, [r7, #9]
						GSM_TCP_Send(&u8Cmd, 1);
    3640:	f107 0309 	add.w	r3, r7, #9
    3644:	4618      	mov	r0, r3
    3646:	2101      	movs	r1, #1
    3648:	f7fd fbf0 	bl	e2c <GSM_TCP_Send>

						u32ByteCount = 0;
    364c:	2300      	movs	r3, #0
    364e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
						vTimerStart( POLL_PERIOD_ms);
    3652:	f644 6020 	movw	r0, #20000	; 0x4e20
    3656:	f000 f82d 	bl	36b4 <vTimerStart>
    365a:	e005      	b.n	3668 <XModem1K_Client+0x2cc>
					} else {
						// no more trying giving up upgrading
						TraceNL("Download process failed giving up upgrading");
    365c:	4814      	ldr	r0, [pc, #80]	; (36b0 <XModem1K_Client+0x314>)
    365e:	f7fe ff67 	bl	2530 <TraceNL>
						return ( DOWNLOAD_ERR_TIMEOUT );
    3662:	f04f 33ff 	mov.w	r3, #4294967295
    3666:	e006      	b.n	3676 <XModem1K_Client+0x2da>
					}
				}
			}
		}
			break;
    3668:	e000      	b.n	366c <XModem1K_Client+0x2d0>

		default:
			break;
    366a:	bf00      	nop

	uint32_t trials;

	/* Prepare UART for RX/TX */

	while (u32InProgress) {
    366c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
    3670:	2b00      	cmp	r3, #0
    3672:	f47f ae9e 	bne.w	33b2 <XModem1K_Client+0x16>

		default:
			break;
		}
	}
}
    3676:	4618      	mov	r0, r3
    3678:	37f0      	adds	r7, #240	; 0xf0
    367a:	46bd      	mov	sp, r7
    367c:	bd80      	pop	{r7, pc}
    367e:	bf00      	nop
    3680:	0000705c 	.word	0x0000705c
    3684:	00007070 	.word	0x00007070
    3688:	00007050 	.word	0x00007050
    368c:	000070a8 	.word	0x000070a8
    3690:	000070c4 	.word	0x000070c4
    3694:	000070d4 	.word	0x000070d4
    3698:	000070ec 	.word	0x000070ec
    369c:	10000140 	.word	0x10000140
    36a0:	0000710c 	.word	0x0000710c
    36a4:	00007120 	.word	0x00007120
    36a8:	00007130 	.word	0x00007130
    36ac:	00007140 	.word	0x00007140
    36b0:	0000715c 	.word	0x0000715c

000036b4 <vTimerStart>:
 ** Parameters:	     None
 **
 ** Returned value:  None
 **
 *****************************************************************************/
static void vTimerStart(uint32_t u32Periodms) {
    36b4:	b480      	push	{r7}
    36b6:	b083      	sub	sp, #12
    36b8:	af00      	add	r7, sp, #0
    36ba:	6078      	str	r0, [r7, #4]
	/* Enable the timer clock */
	LPC_SC->PCONP |= (1UL << 1);
    36bc:	4a19      	ldr	r2, [pc, #100]	; (3724 <vTimerStart+0x70>)
    36be:	4b19      	ldr	r3, [pc, #100]	; (3724 <vTimerStart+0x70>)
    36c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    36c4:	f043 0302 	orr.w	r3, r3, #2
    36c8:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

	/* Configure the timer so that we can poll for a match */
	LPC_TIM0->TCR = 0x02; /* reset timer */
    36cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    36d0:	2202      	movs	r2, #2
    36d2:	605a      	str	r2, [r3, #4]
	LPC_TIM0->PR = 0x00; /* set prescaler to zero */
    36d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    36d8:	2200      	movs	r2, #0
    36da:	60da      	str	r2, [r3, #12]
	LPC_TIM0->MR0 = u32Periodms
    36dc:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
			* ((SystemCoreClock / 4 / (LPC_TIM0->PR + 1)) / 1000UL);
    36e0:	4b11      	ldr	r3, [pc, #68]	; (3728 <vTimerStart+0x74>)
    36e2:	681b      	ldr	r3, [r3, #0]
    36e4:	4a11      	ldr	r2, [pc, #68]	; (372c <vTimerStart+0x78>)
    36e6:	fba2 2303 	umull	r2, r3, r2, r3
    36ea:	0a1a      	lsrs	r2, r3, #8
    36ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    36f0:	68db      	ldr	r3, [r3, #12]
    36f2:	3301      	adds	r3, #1
    36f4:	fbb2 f3f3 	udiv	r3, r2, r3
    36f8:	687a      	ldr	r2, [r7, #4]
    36fa:	fb02 f303 	mul.w	r3, r2, r3
	LPC_SC->PCONP |= (1UL << 1);

	/* Configure the timer so that we can poll for a match */
	LPC_TIM0->TCR = 0x02; /* reset timer */
	LPC_TIM0->PR = 0x00; /* set prescaler to zero */
	LPC_TIM0->MR0 = u32Periodms
    36fe:	618b      	str	r3, [r1, #24]
			* ((SystemCoreClock / 4 / (LPC_TIM0->PR + 1)) / 1000UL);
	LPC_TIM0->IR = 0xFF; /* reset all interrupts */
    3700:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3704:	22ff      	movs	r2, #255	; 0xff
    3706:	601a      	str	r2, [r3, #0]
	LPC_TIM0->MCR = 0x04; /* stop timer on match */
    3708:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    370c:	2204      	movs	r2, #4
    370e:	615a      	str	r2, [r3, #20]
	LPC_TIM0->TCR = 0x01; /* start timer */
    3710:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3714:	2201      	movs	r2, #1
    3716:	605a      	str	r2, [r3, #4]
}
    3718:	370c      	adds	r7, #12
    371a:	46bd      	mov	sp, r7
    371c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3720:	4770      	bx	lr
    3722:	bf00      	nop
    3724:	400fc000 	.word	0x400fc000
    3728:	10000018 	.word	0x10000018
    372c:	10624dd3 	.word	0x10624dd3

00003730 <SystemCoreClockUpdate>:

/*----------------------------------------------------------------------------
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
    3730:	b538      	push	{r3, r4, r5, lr}

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    3732:	4b24      	ldr	r3, [pc, #144]	; (37c4 <SystemCoreClockUpdate+0x94>)
    3734:	4c24      	ldr	r4, [pc, #144]	; (37c8 <SystemCoreClockUpdate+0x98>)
    3736:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    373a:	f3c2 6201 	ubfx	r2, r2, #24, #2
    373e:	2a03      	cmp	r2, #3
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3740:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    3744:	f002 0203 	and.w	r2, r2, #3
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    3748:	d128      	bne.n	379c <SystemCoreClockUpdate+0x6c>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    374a:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    374e:	2a01      	cmp	r2, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    3750:	f3c1 010e 	ubfx	r1, r1, #0, #15
    3754:	f101 0101 	add.w	r1, r1, #1
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3758:	d009      	beq.n	376e <SystemCoreClockUpdate+0x3e>
    375a:	2a02      	cmp	r2, #2
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    375c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    3760:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    3764:	f3c2 4207 	ubfx	r2, r2, #16, #8
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3768:	d009      	beq.n	377e <SystemCoreClockUpdate+0x4e>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = (IRC_OSC * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    376a:	4818      	ldr	r0, [pc, #96]	; (37cc <SystemCoreClockUpdate+0x9c>)
    376c:	e009      	b.n	3782 <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    376e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    3772:	4817      	ldr	r0, [pc, #92]	; (37d0 <SystemCoreClockUpdate+0xa0>)
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
    3774:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    3778:	f3c2 4207 	ubfx	r2, r2, #16, #8
    377c:	e001      	b.n	3782 <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    377e:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
    3782:	3201      	adds	r2, #1
    3784:	2300      	movs	r3, #0
    3786:	fba1 0100 	umull	r0, r1, r1, r0
    378a:	f002 f935 	bl	59f8 <__aeabi_uldivmod>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    378e:	b2ea      	uxtb	r2, r5
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    3790:	3201      	adds	r2, #1
    3792:	2300      	movs	r3, #0
    3794:	f002 f930 	bl	59f8 <__aeabi_uldivmod>
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
    3798:	6020      	str	r0, [r4, #0]
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    379a:	bd38      	pop	{r3, r4, r5, pc}
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    379c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    37a0:	2a01      	cmp	r2, #1
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    37a2:	b2db      	uxtb	r3, r3
    37a4:	f103 0301 	add.w	r3, r3, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    37a8:	d003      	beq.n	37b2 <SystemCoreClockUpdate+0x82>
    37aa:	2a02      	cmp	r2, #2
    37ac:	d003      	beq.n	37b6 <SystemCoreClockUpdate+0x86>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    37ae:	4a09      	ldr	r2, [pc, #36]	; (37d4 <SystemCoreClockUpdate+0xa4>)
    37b0:	e003      	b.n	37ba <SystemCoreClockUpdate+0x8a>
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    37b2:	4a09      	ldr	r2, [pc, #36]	; (37d8 <SystemCoreClockUpdate+0xa8>)
    37b4:	e001      	b.n	37ba <SystemCoreClockUpdate+0x8a>
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    37b6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
    37ba:	fbb2 f3f3 	udiv	r3, r2, r3
    37be:	6023      	str	r3, [r4, #0]
    37c0:	bd38      	pop	{r3, r4, r5, pc}
    37c2:	bf00      	nop
    37c4:	400fc000 	.word	0x400fc000
    37c8:	10000018 	.word	0x10000018
    37cc:	007a1200 	.word	0x007a1200
    37d0:	016e3600 	.word	0x016e3600
    37d4:	003d0900 	.word	0x003d0900
    37d8:	00b71b00 	.word	0x00b71b00

000037dc <SystemInit>:
 *         Initialize the System.
 */
void SystemInit (void)
{
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
    37dc:	4b34      	ldr	r3, [pc, #208]	; (38b0 <SystemInit+0xd4>)
    37de:	2220      	movs	r2, #32
    37e0:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    37e4:	461a      	mov	r2, r3
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    37e6:	f8d2 11a0 	ldr.w	r1, [r2, #416]	; 0x1a0
    37ea:	4b31      	ldr	r3, [pc, #196]	; (38b0 <SystemInit+0xd4>)
    37ec:	0648      	lsls	r0, r1, #25
    37ee:	d5fa      	bpl.n	37e6 <SystemInit+0xa>
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    37f0:	2203      	movs	r2, #3
    37f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    37f6:	2200      	movs	r2, #0
    37f8:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    37fc:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    3800:	4a2c      	ldr	r2, [pc, #176]	; (38b4 <SystemInit+0xd8>)
  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    3802:	2001      	movs	r0, #1
    3804:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    3808:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    380a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
  LPC_SC->PLL0FEED  = 0x55;
    380e:	2255      	movs	r2, #85	; 0x55

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    3810:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3814:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    3818:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    381c:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3820:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    3824:	4b22      	ldr	r3, [pc, #136]	; (38b0 <SystemInit+0xd4>)
    3826:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    382a:	0151      	lsls	r1, r2, #5
    382c:	d5fa      	bpl.n	3824 <SystemInit+0x48>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    382e:	2203      	movs	r2, #3
    3830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    3834:	22aa      	movs	r2, #170	; 0xaa
    3836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    383a:	2255      	movs	r2, #85	; 0x55
    383c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    3840:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
    3844:	4a1a      	ldr	r2, [pc, #104]	; (38b0 <SystemInit+0xd4>)
    3846:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
    384a:	d0f9      	beq.n	3840 <SystemInit+0x64>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
    384c:	2323      	movs	r3, #35	; 0x23
    384e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0xAA;
    3852:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PLL1FEED  = 0x55;
    3854:	2355      	movs	r3, #85	; 0x55

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    3856:	2001      	movs	r0, #1
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
  LPC_SC->PLL1FEED  = 0xAA;
    3858:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    385c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    3860:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    3864:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3868:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    386c:	4b10      	ldr	r3, [pc, #64]	; (38b0 <SystemInit+0xd4>)
    386e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    3872:	0552      	lsls	r2, r2, #21
    3874:	d5fa      	bpl.n	386c <SystemInit+0x90>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    3876:	2203      	movs	r2, #3
    3878:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    387c:	22aa      	movs	r2, #170	; 0xaa
    387e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3882:	2255      	movs	r2, #85	; 0x55
    3884:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    3888:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    388c:	4a08      	ldr	r2, [pc, #32]	; (38b0 <SystemInit+0xd4>)
    388e:	f411 7f40 	tst.w	r1, #768	; 0x300
    3892:	d0f9      	beq.n	3888 <SystemInit+0xac>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    3894:	4b08      	ldr	r3, [pc, #32]	; (38b8 <SystemInit+0xdc>)
    3896:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    389a:	2300      	movs	r3, #0
    389c:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = (LPC_SC->FLASHCFG & ~0x0000F000) | FLASHCFG_Val;
    38a0:	6813      	ldr	r3, [r2, #0]
    38a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
    38a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    38aa:	6013      	str	r3, [r2, #0]
    38ac:	4770      	bx	lr
    38ae:	bf00      	nop
    38b0:	400fc000 	.word	0x400fc000
    38b4:	00050063 	.word	0x00050063
    38b8:	042887de 	.word	0x042887de

000038bc <__main>:
    38bc:	b508      	push	{r3, lr}
    38be:	2000      	movs	r0, #0
    38c0:	4601      	mov	r1, r0
    38c2:	4602      	mov	r2, r0
    38c4:	f000 fd84 	bl	43d0 <_initio>
    38c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    38cc:	f7fe bb9a 	b.w	2004 <main>

000038d0 <memset>:
    38d0:	f002 bcfa 	b.w	62c8 <__aeabi_lowlevel_memset>

000038d4 <malloc>:
    38d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38d6:	4b31      	ldr	r3, [pc, #196]	; (399c <malloc+0xc8>)
    38d8:	1cc5      	adds	r5, r0, #3
    38da:	681c      	ldr	r4, [r3, #0]
    38dc:	08ad      	lsrs	r5, r5, #2
    38de:	b198      	cbz	r0, 3908 <malloc+0x34>
    38e0:	461f      	mov	r7, r3
    38e2:	2600      	movs	r6, #0
    38e4:	f105 0e0a 	add.w	lr, r5, #10
    38e8:	f105 0c03 	add.w	ip, r5, #3
    38ec:	e005      	b.n	38fa <malloc+0x26>
    38ee:	6823      	ldr	r3, [r4, #0]
    38f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    38f4:	d014      	beq.n	3920 <malloc+0x4c>
    38f6:	4626      	mov	r6, r4
    38f8:	68a4      	ldr	r4, [r4, #8]
    38fa:	2c00      	cmp	r4, #0
    38fc:	d1f7      	bne.n	38ee <malloc+0x1a>
    38fe:	300c      	adds	r0, #12
    3900:	f001 fd76 	bl	53f0 <_sbrk>
    3904:	1c43      	adds	r3, r0, #1
    3906:	d110      	bne.n	392a <malloc+0x56>
    3908:	2000      	movs	r0, #0
    390a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    390c:	6811      	ldr	r1, [r2, #0]
    390e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    3912:	d115      	bne.n	3940 <malloc+0x6c>
    3914:	6851      	ldr	r1, [r2, #4]
    3916:	440b      	add	r3, r1
    3918:	3303      	adds	r3, #3
    391a:	6063      	str	r3, [r4, #4]
    391c:	6893      	ldr	r3, [r2, #8]
    391e:	60a3      	str	r3, [r4, #8]
    3920:	68a2      	ldr	r2, [r4, #8]
    3922:	6863      	ldr	r3, [r4, #4]
    3924:	2a00      	cmp	r2, #0
    3926:	d1f1      	bne.n	390c <malloc+0x38>
    3928:	e00a      	b.n	3940 <malloc+0x6c>
    392a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    392e:	e880 0028 	stmia.w	r0, {r3, r5}
    3932:	6084      	str	r4, [r0, #8]
    3934:	b90e      	cbnz	r6, 393a <malloc+0x66>
    3936:	6038      	str	r0, [r7, #0]
    3938:	e000      	b.n	393c <malloc+0x68>
    393a:	60b0      	str	r0, [r6, #8]
    393c:	300c      	adds	r0, #12
    393e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3940:	42ab      	cmp	r3, r5
    3942:	db07      	blt.n	3954 <malloc+0x80>
    3944:	459c      	cmp	ip, r3
    3946:	db05      	blt.n	3954 <malloc+0x80>
    3948:	4620      	mov	r0, r4
    394a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    394e:	f840 3b0c 	str.w	r3, [r0], #12
    3952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3954:	4573      	cmp	r3, lr
    3956:	d911      	bls.n	397c <malloc+0xa8>
    3958:	4620      	mov	r0, r4
    395a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    395e:	6065      	str	r5, [r4, #4]
    3960:	f840 1b0c 	str.w	r1, [r0], #12
    3964:	eb00 0185 	add.w	r1, r0, r5, lsl #2
    3968:	60a1      	str	r1, [r4, #8]
    396a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    396e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    3972:	1b5d      	subs	r5, r3, r5
    3974:	3d03      	subs	r5, #3
    3976:	604d      	str	r5, [r1, #4]
    3978:	608a      	str	r2, [r1, #8]
    397a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    397c:	2a00      	cmp	r2, #0
    397e:	d1ba      	bne.n	38f6 <malloc+0x22>
    3980:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    3984:	f001 fd34 	bl	53f0 <_sbrk>
    3988:	3001      	adds	r0, #1
    398a:	d0bd      	beq.n	3908 <malloc+0x34>
    398c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    3990:	e884 0028 	stmia.w	r4, {r3, r5}
    3994:	f104 000c 	add.w	r0, r4, #12
    3998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    399a:	bf00      	nop
    399c:	10001b50 	.word	0x10001b50

000039a0 <free>:
    39a0:	b1a8      	cbz	r0, 39ce <free+0x2e>
    39a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    39a6:	f840 3c0c 	str.w	r3, [r0, #-12]
    39aa:	f850 2c04 	ldr.w	r2, [r0, #-4]
    39ae:	b172      	cbz	r2, 39ce <free+0x2e>
    39b0:	6813      	ldr	r3, [r2, #0]
    39b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    39b6:	d10a      	bne.n	39ce <free+0x2e>
    39b8:	6853      	ldr	r3, [r2, #4]
    39ba:	f850 1c08 	ldr.w	r1, [r0, #-8]
    39be:	440b      	add	r3, r1
    39c0:	3303      	adds	r3, #3
    39c2:	f840 3c08 	str.w	r3, [r0, #-8]
    39c6:	6893      	ldr	r3, [r2, #8]
    39c8:	f840 3c04 	str.w	r3, [r0, #-4]
    39cc:	e7ed      	b.n	39aa <free+0xa>
    39ce:	4770      	bx	lr

000039d0 <_Csys_alloc>:
    39d0:	b510      	push	{r4, lr}
    39d2:	f7ff ff7f 	bl	38d4 <malloc>
    39d6:	4604      	mov	r4, r0
    39d8:	b928      	cbnz	r0, 39e6 <_Csys_alloc+0x16>
    39da:	4904      	ldr	r1, [pc, #16]	; (39ec <_Csys_alloc+0x1c>)
    39dc:	2217      	movs	r2, #23
    39de:	f002 fc9f 	bl	6320 <__sys_write>
    39e2:	f002 fc8a 	bl	62fa <__sys_appexit>
    39e6:	4620      	mov	r0, r4
    39e8:	bd10      	pop	{r4, pc}
    39ea:	bf00      	nop
    39ec:	00007188 	.word	0x00007188

000039f0 <fp_round>:
    39f0:	5c42      	ldrb	r2, [r0, r1]
    39f2:	1843      	adds	r3, r0, r1
    39f4:	2a34      	cmp	r2, #52	; 0x34
    39f6:	dc01      	bgt.n	39fc <fp_round+0xc>
    39f8:	2000      	movs	r0, #0
    39fa:	4770      	bx	lr
    39fc:	2a35      	cmp	r2, #53	; 0x35
    39fe:	d106      	bne.n	3a0e <fp_round+0x1e>
    3a00:	4619      	mov	r1, r3
    3a02:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    3a06:	2a30      	cmp	r2, #48	; 0x30
    3a08:	d0fb      	beq.n	3a02 <fp_round+0x12>
    3a0a:	2a00      	cmp	r2, #0
    3a0c:	d0f4      	beq.n	39f8 <fp_round+0x8>
    3a0e:	461a      	mov	r2, r3
    3a10:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    3a14:	2939      	cmp	r1, #57	; 0x39
    3a16:	d102      	bne.n	3a1e <fp_round+0x2e>
    3a18:	2130      	movs	r1, #48	; 0x30
    3a1a:	7011      	strb	r1, [r2, #0]
    3a1c:	e7f8      	b.n	3a10 <fp_round+0x20>
    3a1e:	3101      	adds	r1, #1
    3a20:	7011      	strb	r1, [r2, #0]
    3a22:	7802      	ldrb	r2, [r0, #0]
    3a24:	2a30      	cmp	r2, #48	; 0x30
    3a26:	d0e7      	beq.n	39f8 <fp_round+0x8>
    3a28:	1a1a      	subs	r2, r3, r0
    3a2a:	2a00      	cmp	r2, #0
    3a2c:	db03      	blt.n	3a36 <fp_round+0x46>
    3a2e:	f813 2901 	ldrb.w	r2, [r3], #-1
    3a32:	709a      	strb	r2, [r3, #2]
    3a34:	e7f8      	b.n	3a28 <fp_round+0x38>
    3a36:	2001      	movs	r0, #1
    3a38:	4770      	bx	lr

00003a3a <pr_dec.constprop.1>:
    3a3a:	b510      	push	{r4, lr}
    3a3c:	1f8c      	subs	r4, r1, #6
    3a3e:	42a1      	cmp	r1, r4
    3a40:	d00d      	beq.n	3a5e <pr_dec.constprop.1+0x24>
    3a42:	230a      	movs	r3, #10
    3a44:	fb90 f3f3 	sdiv	r3, r0, r3
    3a48:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    3a4c:	3030      	adds	r0, #48	; 0x30
    3a4e:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
    3a52:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    3a56:	f801 0901 	strb.w	r0, [r1], #-1
    3a5a:	4618      	mov	r0, r3
    3a5c:	e7ef      	b.n	3a3e <pr_dec.constprop.1+0x4>
    3a5e:	bd10      	pop	{r4, pc}

00003a60 <sprintf>:
    3a60:	b40e      	push	{r1, r2, r3}
    3a62:	b530      	push	{r4, r5, lr}
    3a64:	4605      	mov	r5, r0
    3a66:	b090      	sub	sp, #64	; 0x40
    3a68:	ab13      	add	r3, sp, #76	; 0x4c
    3a6a:	f853 4b04 	ldr.w	r4, [r3], #4
    3a6e:	2100      	movs	r1, #0
    3a70:	2228      	movs	r2, #40	; 0x28
    3a72:	a806      	add	r0, sp, #24
    3a74:	9305      	str	r3, [sp, #20]
    3a76:	f7ff ff2b 	bl	38d0 <memset>
    3a7a:	230a      	movs	r3, #10
    3a7c:	9309      	str	r3, [sp, #36]	; 0x24
    3a7e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    3a82:	9308      	str	r3, [sp, #32]
    3a84:	9b05      	ldr	r3, [sp, #20]
    3a86:	9400      	str	r4, [sp, #0]
    3a88:	9301      	str	r3, [sp, #4]
    3a8a:	4b0f      	ldr	r3, [pc, #60]	; (3ac8 <sprintf+0x68>)
    3a8c:	a806      	add	r0, sp, #24
    3a8e:	9302      	str	r3, [sp, #8]
    3a90:	f04f 32ff 	mov.w	r2, #4294967295
    3a94:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    3a98:	9506      	str	r5, [sp, #24]
    3a9a:	f000 fceb 	bl	4474 <__vfprintf>
    3a9e:	9b08      	ldr	r3, [sp, #32]
    3aa0:	4604      	mov	r4, r0
    3aa2:	3b01      	subs	r3, #1
    3aa4:	2b00      	cmp	r3, #0
    3aa6:	9308      	str	r3, [sp, #32]
    3aa8:	db03      	blt.n	3ab2 <sprintf+0x52>
    3aaa:	9b06      	ldr	r3, [sp, #24]
    3aac:	2200      	movs	r2, #0
    3aae:	701a      	strb	r2, [r3, #0]
    3ab0:	e003      	b.n	3aba <sprintf+0x5a>
    3ab2:	2000      	movs	r0, #0
    3ab4:	a906      	add	r1, sp, #24
    3ab6:	f001 fcdd 	bl	5474 <__flsbuf>
    3aba:	4620      	mov	r0, r4
    3abc:	b010      	add	sp, #64	; 0x40
    3abe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3ac2:	b003      	add	sp, #12
    3ac4:	4770      	bx	lr
    3ac6:	bf00      	nop
    3ac8:	00003ad1 	.word	0x00003ad1
    3acc:	00000000 	.word	0x00000000

00003ad0 <fp_display>:
    3ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ad4:	4614      	mov	r4, r2
    3ad6:	f647 72f0 	movw	r2, #32752	; 0x7ff0
    3ada:	684e      	ldr	r6, [r1, #4]
    3adc:	b09f      	sub	sp, #124	; 0x7c
    3ade:	9306      	str	r3, [sp, #24]
    3ae0:	f3c6 430f 	ubfx	r3, r6, #16, #16
    3ae4:	f023 030f 	bic.w	r3, r3, #15
    3ae8:	045b      	lsls	r3, r3, #17
    3aea:	680f      	ldr	r7, [r1, #0]
    3aec:	0c5b      	lsrs	r3, r3, #17
    3aee:	4293      	cmp	r3, r2
    3af0:	9005      	str	r0, [sp, #20]
    3af2:	f8dd b0a4 	ldr.w	fp, [sp, #164]	; 0xa4
    3af6:	9708      	str	r7, [sp, #32]
    3af8:	9607      	str	r6, [sp, #28]
    3afa:	d127      	bne.n	3b4c <fp_display+0x7c>
    3afc:	2300      	movs	r3, #0
    3afe:	70e3      	strb	r3, [r4, #3]
    3b00:	f3c6 0313 	ubfx	r3, r6, #0, #20
    3b04:	433b      	orrs	r3, r7
    3b06:	f04f 036e 	mov.w	r3, #110	; 0x6e
    3b0a:	d115      	bne.n	3b38 <fp_display+0x68>
    3b0c:	2269      	movs	r2, #105	; 0x69
    3b0e:	7063      	strb	r3, [r4, #1]
    3b10:	2e00      	cmp	r6, #0
    3b12:	f04f 0366 	mov.w	r3, #102	; 0x66
    3b16:	7022      	strb	r2, [r4, #0]
    3b18:	70a3      	strb	r3, [r4, #2]
    3b1a:	da01      	bge.n	3b20 <fp_display+0x50>
    3b1c:	4b84      	ldr	r3, [pc, #528]	; (3d30 <fp_display+0x260>)
    3b1e:	e010      	b.n	3b42 <fp_display+0x72>
    3b20:	9b06      	ldr	r3, [sp, #24]
    3b22:	079a      	lsls	r2, r3, #30
    3b24:	d406      	bmi.n	3b34 <fp_display+0x64>
    3b26:	4a83      	ldr	r2, [pc, #524]	; (3d34 <fp_display+0x264>)
    3b28:	f013 0f04 	tst.w	r3, #4
    3b2c:	4b82      	ldr	r3, [pc, #520]	; (3d38 <fp_display+0x268>)
    3b2e:	bf08      	it	eq
    3b30:	4613      	moveq	r3, r2
    3b32:	e006      	b.n	3b42 <fp_display+0x72>
    3b34:	4b81      	ldr	r3, [pc, #516]	; (3d3c <fp_display+0x26c>)
    3b36:	e004      	b.n	3b42 <fp_display+0x72>
    3b38:	7023      	strb	r3, [r4, #0]
    3b3a:	2261      	movs	r2, #97	; 0x61
    3b3c:	70a3      	strb	r3, [r4, #2]
    3b3e:	4b7d      	ldr	r3, [pc, #500]	; (3d34 <fp_display+0x264>)
    3b40:	7062      	strb	r2, [r4, #1]
    3b42:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    3b44:	2003      	movs	r0, #3
    3b46:	6013      	str	r3, [r2, #0]
    3b48:	f000 bc3f 	b.w	43ca <fp_display+0x8fa>
    3b4c:	9b05      	ldr	r3, [sp, #20]
    3b4e:	f023 0320 	bic.w	r3, r3, #32
    3b52:	2b41      	cmp	r3, #65	; 0x41
    3b54:	f000 8244 	beq.w	3fe0 <fp_display+0x510>
    3b58:	4638      	mov	r0, r7
    3b5a:	4631      	mov	r1, r6
    3b5c:	2200      	movs	r2, #0
    3b5e:	2300      	movs	r3, #0
    3b60:	f002 fb28 	bl	61b4 <__aeabi_dcmplt>
    3b64:	b138      	cbz	r0, 3b76 <fp_display+0xa6>
    3b66:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    3b6a:	9a08      	ldr	r2, [sp, #32]
    3b6c:	461e      	mov	r6, r3
    3b6e:	2301      	movs	r3, #1
    3b70:	4617      	mov	r7, r2
    3b72:	9309      	str	r3, [sp, #36]	; 0x24
    3b74:	e000      	b.n	3b78 <fp_display+0xa8>
    3b76:	9009      	str	r0, [sp, #36]	; 0x24
    3b78:	4638      	mov	r0, r7
    3b7a:	4631      	mov	r1, r6
    3b7c:	2200      	movs	r2, #0
    3b7e:	2300      	movs	r3, #0
    3b80:	f002 fb02 	bl	6188 <__aeabi_dcmpeq>
    3b84:	2800      	cmp	r0, #0
    3b86:	f040 820d 	bne.w	3fa4 <fp_display+0x4d4>
    3b8a:	f240 152d 	movw	r5, #301	; 0x12d
    3b8e:	aa11      	add	r2, sp, #68	; 0x44
    3b90:	4638      	mov	r0, r7
    3b92:	4631      	mov	r1, r6
    3b94:	f001 fd70 	bl	5678 <_frexpl>
    3b98:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3b9a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3b9e:	4355      	muls	r5, r2
    3ba0:	f5a5 53ab 	sub.w	r3, r5, #5472	; 0x1560
    3ba4:	3b1c      	subs	r3, #28
    3ba6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    3baa:	fb93 f5f5 	sdiv	r5, r3, r5
    3bae:	2000      	movs	r0, #0
    3bb0:	4963      	ldr	r1, [pc, #396]	; (3d40 <fp_display+0x270>)
    3bb2:	1aaa      	subs	r2, r5, r2
    3bb4:	f001 fd8e 	bl	56d4 <_ldexpl>
    3bb8:	2d00      	cmp	r5, #0
    3bba:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3bbe:	da06      	bge.n	3bce <fp_display+0xfe>
    3bc0:	a355      	add	r3, pc, #340	; (adr r3, 3d18 <fp_display+0x248>)
    3bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
    3bc6:	426e      	negs	r6, r5
    3bc8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    3bcc:	e006      	b.n	3bdc <fp_display+0x10c>
    3bce:	4b5d      	ldr	r3, [pc, #372]	; (3d44 <fp_display+0x274>)
    3bd0:	f04f 0200 	mov.w	r2, #0
    3bd4:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    3bd8:	d016      	beq.n	3c08 <fp_display+0x138>
    3bda:	462e      	mov	r6, r5
    3bdc:	07f3      	lsls	r3, r6, #31
    3bde:	d509      	bpl.n	3bf4 <fp_display+0x124>
    3be0:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3be4:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3be8:	f001 ffc2 	bl	5b70 <__aeabi_dmul>
    3bec:	2e01      	cmp	r6, #1
    3bee:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3bf2:	d009      	beq.n	3c08 <fp_display+0x138>
    3bf4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3bf8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3bfc:	f001 ffb8 	bl	5b70 <__aeabi_dmul>
    3c00:	1076      	asrs	r6, r6, #1
    3c02:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    3c06:	e7e9      	b.n	3bdc <fp_display+0x10c>
    3c08:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3c0c:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    3c10:	f002 f83e 	bl	5c90 <__aeabi_ddiv>
    3c14:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3c18:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3c1c:	a340      	add	r3, pc, #256	; (adr r3, 3d20 <fp_display+0x250>)
    3c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c22:	f002 fac7 	bl	61b4 <__aeabi_dcmplt>
    3c26:	b188      	cbz	r0, 3c4c <fp_display+0x17c>
    3c28:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3c2c:	2200      	movs	r2, #0
    3c2e:	4b46      	ldr	r3, [pc, #280]	; (3d48 <fp_display+0x278>)
    3c30:	f001 ff9e 	bl	5b70 <__aeabi_dmul>
    3c34:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3c38:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3c3c:	2200      	movs	r2, #0
    3c3e:	4b42      	ldr	r3, [pc, #264]	; (3d48 <fp_display+0x278>)
    3c40:	f002 f826 	bl	5c90 <__aeabi_ddiv>
    3c44:	3d01      	subs	r5, #1
    3c46:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3c4a:	e7e5      	b.n	3c18 <fp_display+0x148>
    3c4c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3c50:	a335      	add	r3, pc, #212	; (adr r3, 3d28 <fp_display+0x258>)
    3c52:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c56:	f002 fb09 	bl	626c <__aeabi_dcmpge>
    3c5a:	b188      	cbz	r0, 3c80 <fp_display+0x1b0>
    3c5c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3c60:	2200      	movs	r2, #0
    3c62:	4b39      	ldr	r3, [pc, #228]	; (3d48 <fp_display+0x278>)
    3c64:	f002 f814 	bl	5c90 <__aeabi_ddiv>
    3c68:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3c6c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3c70:	2200      	movs	r2, #0
    3c72:	4b35      	ldr	r3, [pc, #212]	; (3d48 <fp_display+0x278>)
    3c74:	f001 ff7c 	bl	5b70 <__aeabi_dmul>
    3c78:	3501      	adds	r5, #1
    3c7a:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3c7e:	e7e5      	b.n	3c4c <fp_display+0x17c>
    3c80:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3c84:	f002 fa32 	bl	60ec <__aeabi_d2iz>
    3c88:	426b      	negs	r3, r5
    3c8a:	ea13 0325 	ands.w	r3, r3, r5, asr #32
    3c8e:	bf38      	it	cc
    3c90:	462b      	movcc	r3, r5
    3c92:	4682      	mov	sl, r0
    3c94:	930e      	str	r3, [sp, #56]	; 0x38
    3c96:	4650      	mov	r0, sl
    3c98:	f002 fa6c 	bl	6174 <__aeabi_i2d>
    3c9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3c9e:	1aaa      	subs	r2, r5, r2
    3ca0:	f001 fd18 	bl	56d4 <_ldexpl>
    3ca4:	2200      	movs	r2, #0
    3ca6:	2300      	movs	r3, #0
    3ca8:	2d00      	cmp	r5, #0
    3caa:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3cae:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    3cb2:	da4b      	bge.n	3d4c <fp_display+0x27c>
    3cb4:	a118      	add	r1, pc, #96	; (adr r1, 3d18 <fp_display+0x248>)
    3cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
    3cba:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    3cbe:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    3cc2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    3cc6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3cca:	f04f 0800 	mov.w	r8, #0
    3cce:	4642      	mov	r2, r8
    3cd0:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    3cd4:	464b      	mov	r3, r9
    3cd6:	f002 f883 	bl	5de0 <__aeabi_dsub>
    3cda:	4602      	mov	r2, r0
    3cdc:	460b      	mov	r3, r1
    3cde:	4630      	mov	r0, r6
    3ce0:	4639      	mov	r1, r7
    3ce2:	f002 f969 	bl	5fb8 <__aeabi_dadd>
    3ce6:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    3cea:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    3cee:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3cf2:	2200      	movs	r2, #0
    3cf4:	4b13      	ldr	r3, [pc, #76]	; (3d44 <fp_display+0x274>)
    3cf6:	f001 ff3b 	bl	5b70 <__aeabi_dmul>
    3cfa:	4602      	mov	r2, r0
    3cfc:	460b      	mov	r3, r1
    3cfe:	2000      	movs	r0, #0
    3d00:	490f      	ldr	r1, [pc, #60]	; (3d40 <fp_display+0x270>)
    3d02:	f002 f86d 	bl	5de0 <__aeabi_dsub>
    3d06:	2200      	movs	r2, #0
    3d08:	4b0e      	ldr	r3, [pc, #56]	; (3d44 <fp_display+0x274>)
    3d0a:	f001 ffc1 	bl	5c90 <__aeabi_ddiv>
    3d0e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    3d12:	e024      	b.n	3d5e <fp_display+0x28e>
    3d14:	f3af 8000 	nop.w
    3d18:	9999999a 	.word	0x9999999a
    3d1c:	3fc99999 	.word	0x3fc99999
    3d20:	00000000 	.word	0x00000000
    3d24:	40f86a00 	.word	0x40f86a00
    3d28:	00000000 	.word	0x00000000
    3d2c:	412e8480 	.word	0x412e8480
    3d30:	00007352 	.word	0x00007352
    3d34:	0000719f 	.word	0x0000719f
    3d38:	00007322 	.word	0x00007322
    3d3c:	00007320 	.word	0x00007320
    3d40:	3ff00000 	.word	0x3ff00000
    3d44:	40140000 	.word	0x40140000
    3d48:	40240000 	.word	0x40240000
    3d4c:	49ae      	ldr	r1, [pc, #696]	; (4008 <fp_display+0x538>)
    3d4e:	f04f 0000 	mov.w	r0, #0
    3d52:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    3d56:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    3d5a:	f000 8089 	beq.w	3e70 <fp_display+0x3a0>
    3d5e:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    3d62:	f01c 0f01 	tst.w	ip, #1
    3d66:	d048      	beq.n	3dfa <fp_display+0x32a>
    3d68:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3d6c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    3d70:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    3d74:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    3d78:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    3d7c:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    3d80:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    3d84:	f001 fef4 	bl	5b70 <__aeabi_dmul>
    3d88:	4632      	mov	r2, r6
    3d8a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    3d8e:	463b      	mov	r3, r7
    3d90:	4640      	mov	r0, r8
    3d92:	4649      	mov	r1, r9
    3d94:	f002 f910 	bl	5fb8 <__aeabi_dadd>
    3d98:	4602      	mov	r2, r0
    3d9a:	460b      	mov	r3, r1
    3d9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    3da0:	f001 fee6 	bl	5b70 <__aeabi_dmul>
    3da4:	4602      	mov	r2, r0
    3da6:	460b      	mov	r3, r1
    3da8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    3dac:	f002 f904 	bl	5fb8 <__aeabi_dadd>
    3db0:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    3db4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3db8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3dbc:	f001 fed8 	bl	5b70 <__aeabi_dmul>
    3dc0:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3dc4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    3dc8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3dcc:	f04f 0800 	mov.w	r8, #0
    3dd0:	4642      	mov	r2, r8
    3dd2:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    3dd6:	464b      	mov	r3, r9
    3dd8:	f002 f802 	bl	5de0 <__aeabi_dsub>
    3ddc:	4602      	mov	r2, r0
    3dde:	460b      	mov	r3, r1
    3de0:	4630      	mov	r0, r6
    3de2:	4639      	mov	r1, r7
    3de4:	f002 f8e8 	bl	5fb8 <__aeabi_dadd>
    3de8:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    3dec:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    3df0:	f1bc 0f01 	cmp.w	ip, #1
    3df4:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
    3df8:	d03a      	beq.n	3e70 <fp_display+0x3a0>
    3dfa:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3dfe:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    3e02:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    3e06:	4602      	mov	r2, r0
    3e08:	460b      	mov	r3, r1
    3e0a:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    3e0e:	f002 f8d3 	bl	5fb8 <__aeabi_dadd>
    3e12:	4632      	mov	r2, r6
    3e14:	463b      	mov	r3, r7
    3e16:	f002 f8cf 	bl	5fb8 <__aeabi_dadd>
    3e1a:	4602      	mov	r2, r0
    3e1c:	460b      	mov	r3, r1
    3e1e:	4640      	mov	r0, r8
    3e20:	4649      	mov	r1, r9
    3e22:	f001 fea5 	bl	5b70 <__aeabi_dmul>
    3e26:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    3e2a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3e2e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3e32:	f001 fe9d 	bl	5b70 <__aeabi_dmul>
    3e36:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    3e3a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    3e3e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3e42:	f04f 0800 	mov.w	r8, #0
    3e46:	4642      	mov	r2, r8
    3e48:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    3e4c:	464b      	mov	r3, r9
    3e4e:	f001 ffc7 	bl	5de0 <__aeabi_dsub>
    3e52:	4602      	mov	r2, r0
    3e54:	460b      	mov	r3, r1
    3e56:	4630      	mov	r0, r6
    3e58:	4639      	mov	r1, r7
    3e5a:	f002 f8ad 	bl	5fb8 <__aeabi_dadd>
    3e5e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    3e62:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    3e66:	ea4f 0c6c 	mov.w	ip, ip, asr #1
    3e6a:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    3e6e:	e778      	b.n	3d62 <fp_display+0x292>
    3e70:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3e74:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    3e78:	f002 f9ca 	bl	6210 <__aeabi_dcmple>
    3e7c:	b910      	cbnz	r0, 3e84 <fp_display+0x3b4>
    3e7e:	f10a 3aff 	add.w	sl, sl, #4294967295
    3e82:	e708      	b.n	3c96 <fp_display+0x1c6>
    3e84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    3e88:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3e8c:	f001 ffa8 	bl	5de0 <__aeabi_dsub>
    3e90:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3e94:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    3e98:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3e9c:	f001 ffa0 	bl	5de0 <__aeabi_dsub>
    3ea0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3ea4:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    3ea8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3eac:	f001 fef0 	bl	5c90 <__aeabi_ddiv>
    3eb0:	a353      	add	r3, pc, #332	; (adr r3, 4000 <fp_display+0x530>)
    3eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
    3eb6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3eba:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3ebe:	f001 fe57 	bl	5b70 <__aeabi_dmul>
    3ec2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3ec6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3eca:	f002 f90f 	bl	60ec <__aeabi_d2iz>
    3ece:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    3ed2:	4680      	mov	r8, r0
    3ed4:	f002 f94e 	bl	6174 <__aeabi_i2d>
    3ed8:	4602      	mov	r2, r0
    3eda:	460b      	mov	r3, r1
    3edc:	4630      	mov	r0, r6
    3ede:	4639      	mov	r1, r7
    3ee0:	f001 ff7e 	bl	5de0 <__aeabi_dsub>
    3ee4:	a346      	add	r3, pc, #280	; (adr r3, 4000 <fp_display+0x530>)
    3ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
    3eea:	f001 fe41 	bl	5b70 <__aeabi_dmul>
    3eee:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3ef2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3ef6:	f002 f8f9 	bl	60ec <__aeabi_d2iz>
    3efa:	4606      	mov	r6, r0
    3efc:	2e00      	cmp	r6, #0
    3efe:	da06      	bge.n	3f0e <fp_display+0x43e>
    3f00:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
    3f04:	f506 7610 	add.w	r6, r6, #576	; 0x240
    3f08:	f108 38ff 	add.w	r8, r8, #4294967295
    3f0c:	e7f6      	b.n	3efc <fp_display+0x42c>
    3f0e:	4b3f      	ldr	r3, [pc, #252]	; (400c <fp_display+0x53c>)
    3f10:	429e      	cmp	r6, r3
    3f12:	dd06      	ble.n	3f22 <fp_display+0x452>
    3f14:	f5a6 2674 	sub.w	r6, r6, #999424	; 0xf4000
    3f18:	f5a6 7610 	sub.w	r6, r6, #576	; 0x240
    3f1c:	f108 0801 	add.w	r8, r8, #1
    3f20:	e7f5      	b.n	3f0e <fp_display+0x43e>
    3f22:	f1b8 0f00 	cmp.w	r8, #0
    3f26:	da06      	bge.n	3f36 <fp_display+0x466>
    3f28:	f508 2874 	add.w	r8, r8, #999424	; 0xf4000
    3f2c:	f508 7810 	add.w	r8, r8, #576	; 0x240
    3f30:	f10a 3aff 	add.w	sl, sl, #4294967295
    3f34:	e7f5      	b.n	3f22 <fp_display+0x452>
    3f36:	4598      	cmp	r8, r3
    3f38:	dd06      	ble.n	3f48 <fp_display+0x478>
    3f3a:	f5a8 2874 	sub.w	r8, r8, #999424	; 0xf4000
    3f3e:	f5a8 7810 	sub.w	r8, r8, #576	; 0x240
    3f42:	f10a 0a01 	add.w	sl, sl, #1
    3f46:	e7f6      	b.n	3f36 <fp_display+0x466>
    3f48:	4b31      	ldr	r3, [pc, #196]	; (4010 <fp_display+0x540>)
    3f4a:	4650      	mov	r0, sl
    3f4c:	459a      	cmp	sl, r3
    3f4e:	dc11      	bgt.n	3f74 <fp_display+0x4a4>
    3f50:	3301      	adds	r3, #1
    3f52:	fb98 f2f3 	sdiv	r2, r8, r3
    3f56:	fb96 f3f3 	sdiv	r3, r6, r3
    3f5a:	482e      	ldr	r0, [pc, #184]	; (4014 <fp_display+0x544>)
    3f5c:	210a      	movs	r1, #10
    3f5e:	fb00 8802 	mla	r8, r0, r2, r8
    3f62:	fb00 6603 	mla	r6, r0, r3, r6
    3f66:	fb01 2a0a 	mla	sl, r1, sl, r2
    3f6a:	fb01 3808 	mla	r8, r1, r8, r3
    3f6e:	434e      	muls	r6, r1
    3f70:	3d01      	subs	r5, #1
    3f72:	e01c      	b.n	3fae <fp_display+0x4de>
    3f74:	4b25      	ldr	r3, [pc, #148]	; (400c <fp_display+0x53c>)
    3f76:	459a      	cmp	sl, r3
    3f78:	dd19      	ble.n	3fae <fp_display+0x4de>
    3f7a:	220a      	movs	r2, #10
    3f7c:	fb9a faf2 	sdiv	sl, sl, r2
    3f80:	f06f 0309 	mvn.w	r3, #9
    3f84:	fb03 000a 	mla	r0, r3, sl, r0
    3f88:	4923      	ldr	r1, [pc, #140]	; (4018 <fp_display+0x548>)
    3f8a:	3501      	adds	r5, #1
    3f8c:	fb01 8000 	mla	r0, r1, r0, r8
    3f90:	fb90 f8f2 	sdiv	r8, r0, r2
    3f94:	fb03 0308 	mla	r3, r3, r8, r0
    3f98:	fb01 6603 	mla	r6, r1, r3, r6
    3f9c:	3605      	adds	r6, #5
    3f9e:	fb96 f6f2 	sdiv	r6, r6, r2
    3fa2:	e004      	b.n	3fae <fp_display+0x4de>
    3fa4:	2600      	movs	r6, #0
    3fa6:	46b0      	mov	r8, r6
    3fa8:	46b2      	mov	sl, r6
    3faa:	f06f 0504 	mvn.w	r5, #4
    3fae:	4621      	mov	r1, r4
    3fb0:	2730      	movs	r7, #48	; 0x30
    3fb2:	f801 7b06 	strb.w	r7, [r1], #6
    3fb6:	4650      	mov	r0, sl
    3fb8:	f7ff fd3f 	bl	3a3a <pr_dec.constprop.1>
    3fbc:	4640      	mov	r0, r8
    3fbe:	f104 010c 	add.w	r1, r4, #12
    3fc2:	f7ff fd3a 	bl	3a3a <pr_dec.constprop.1>
    3fc6:	4630      	mov	r0, r6
    3fc8:	f104 0112 	add.w	r1, r4, #18
    3fcc:	f7ff fd35 	bl	3a3a <pr_dec.constprop.1>
    3fd0:	2300      	movs	r3, #0
    3fd2:	7523      	strb	r3, [r4, #20]
    3fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3fd6:	3505      	adds	r5, #5
    3fd8:	74e7      	strb	r7, [r4, #19]
    3fda:	ea43 0585 	orr.w	r5, r3, r5, lsl #2
    3fde:	e000      	b.n	3fe2 <fp_display+0x512>
    3fe0:	2500      	movs	r5, #0
    3fe2:	07ef      	lsls	r7, r5, #31
    3fe4:	d501      	bpl.n	3fea <fp_display+0x51a>
    3fe6:	4b0d      	ldr	r3, [pc, #52]	; (401c <fp_display+0x54c>)
    3fe8:	e01f      	b.n	402a <fp_display+0x55a>
    3fea:	9b06      	ldr	r3, [sp, #24]
    3fec:	079e      	lsls	r6, r3, #30
    3fee:	d41b      	bmi.n	4028 <fp_display+0x558>
    3ff0:	4a0b      	ldr	r2, [pc, #44]	; (4020 <fp_display+0x550>)
    3ff2:	f013 0f04 	tst.w	r3, #4
    3ff6:	4b0b      	ldr	r3, [pc, #44]	; (4024 <fp_display+0x554>)
    3ff8:	bf08      	it	eq
    3ffa:	4613      	moveq	r3, r2
    3ffc:	e015      	b.n	402a <fp_display+0x55a>
    3ffe:	bf00      	nop
    4000:	00000000 	.word	0x00000000
    4004:	412e8480 	.word	0x412e8480
    4008:	40140000 	.word	0x40140000
    400c:	000f423f 	.word	0x000f423f
    4010:	0001869f 	.word	0x0001869f
    4014:	fffe7960 	.word	0xfffe7960
    4018:	000f4240 	.word	0x000f4240
    401c:	00007352 	.word	0x00007352
    4020:	0000719f 	.word	0x0000719f
    4024:	00007322 	.word	0x00007322
    4028:	4bad      	ldr	r3, [pc, #692]	; (42e0 <fp_display+0x810>)
    402a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    402c:	f025 0501 	bic.w	r5, r5, #1
    4030:	6013      	str	r3, [r2, #0]
    4032:	2304      	movs	r3, #4
    4034:	fb95 f5f3 	sdiv	r5, r5, r3
    4038:	9b05      	ldr	r3, [sp, #20]
    403a:	f8db 6000 	ldr.w	r6, [fp]
    403e:	2b61      	cmp	r3, #97	; 0x61
    4040:	d010      	beq.n	4064 <fp_display+0x594>
    4042:	dc06      	bgt.n	4052 <fp_display+0x582>
    4044:	2b45      	cmp	r3, #69	; 0x45
    4046:	d067      	beq.n	4118 <fp_display+0x648>
    4048:	2b47      	cmp	r3, #71	; 0x47
    404a:	d048      	beq.n	40de <fp_display+0x60e>
    404c:	2b41      	cmp	r3, #65	; 0x41
    404e:	d144      	bne.n	40da <fp_display+0x60a>
    4050:	e008      	b.n	4064 <fp_display+0x594>
    4052:	9b05      	ldr	r3, [sp, #20]
    4054:	2b66      	cmp	r3, #102	; 0x66
    4056:	f000 80df 	beq.w	4218 <fp_display+0x748>
    405a:	2b67      	cmp	r3, #103	; 0x67
    405c:	d03f      	beq.n	40de <fp_display+0x60e>
    405e:	2b65      	cmp	r3, #101	; 0x65
    4060:	d13b      	bne.n	40da <fp_display+0x60a>
    4062:	e059      	b.n	4118 <fp_display+0x648>
    4064:	9b07      	ldr	r3, [sp, #28]
    4066:	2000      	movs	r0, #0
    4068:	f3c3 0113 	ubfx	r1, r3, #0, #20
    406c:	9b08      	ldr	r3, [sp, #32]
    406e:	4318      	orrs	r0, r3
    4070:	9b07      	ldr	r3, [sp, #28]
    4072:	f3c3 520a 	ubfx	r2, r3, #20, #11
    4076:	b112      	cbz	r2, 407e <fp_display+0x5ae>
    4078:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
    407c:	e004      	b.n	4088 <fp_display+0x5b8>
    407e:	ea50 0301 	orrs.w	r3, r0, r1
    4082:	4b98      	ldr	r3, [pc, #608]	; (42e4 <fp_display+0x814>)
    4084:	bf08      	it	eq
    4086:	2300      	moveq	r3, #0
    4088:	2a00      	cmp	r2, #0
    408a:	bf0c      	ite	eq
    408c:	2230      	moveq	r2, #48	; 0x30
    408e:	2231      	movne	r2, #49	; 0x31
    4090:	b966      	cbnz	r6, 40ac <fp_display+0x5dc>
    4092:	9d06      	ldr	r5, [sp, #24]
    4094:	072d      	lsls	r5, r5, #28
    4096:	d409      	bmi.n	40ac <fp_display+0x5dc>
    4098:	9d05      	ldr	r5, [sp, #20]
    409a:	4620      	mov	r0, r4
    409c:	4992      	ldr	r1, [pc, #584]	; (42e8 <fp_display+0x818>)
    409e:	4c93      	ldr	r4, [pc, #588]	; (42ec <fp_display+0x81c>)
    40a0:	2d61      	cmp	r5, #97	; 0x61
    40a2:	bf08      	it	eq
    40a4:	4621      	moveq	r1, r4
    40a6:	f7ff fcdb 	bl	3a60 <sprintf>
    40aa:	e00c      	b.n	40c6 <fp_display+0x5f6>
    40ac:	e9cd 0100 	strd	r0, r1, [sp]
    40b0:	9302      	str	r3, [sp, #8]
    40b2:	4620      	mov	r0, r4
    40b4:	4b8e      	ldr	r3, [pc, #568]	; (42f0 <fp_display+0x820>)
    40b6:	498f      	ldr	r1, [pc, #572]	; (42f4 <fp_display+0x824>)
    40b8:	9c05      	ldr	r4, [sp, #20]
    40ba:	2c61      	cmp	r4, #97	; 0x61
    40bc:	bf18      	it	ne
    40be:	4619      	movne	r1, r3
    40c0:	4633      	mov	r3, r6
    40c2:	f7ff fccd 	bl	3a60 <sprintf>
    40c6:	4a8c      	ldr	r2, [pc, #560]	; (42f8 <fp_display+0x828>)
    40c8:	4b8c      	ldr	r3, [pc, #560]	; (42fc <fp_display+0x82c>)
    40ca:	9907      	ldr	r1, [sp, #28]
    40cc:	ea33 0321 	bics.w	r3, r3, r1, asr #32
    40d0:	bf28      	it	cs
    40d2:	4613      	movcs	r3, r2
    40d4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    40d6:	6013      	str	r3, [r2, #0]
    40d8:	e177      	b.n	43ca <fp_display+0x8fa>
    40da:	2367      	movs	r3, #103	; 0x67
    40dc:	9305      	str	r3, [sp, #20]
    40de:	9b06      	ldr	r3, [sp, #24]
    40e0:	2e00      	cmp	r6, #0
    40e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    40e6:	9306      	str	r3, [sp, #24]
    40e8:	bfdc      	itt	le
    40ea:	2301      	movle	r3, #1
    40ec:	f8cb 3000 	strle.w	r3, [fp]
    40f0:	f8db 1000 	ldr.w	r1, [fp]
    40f4:	4620      	mov	r0, r4
    40f6:	2911      	cmp	r1, #17
    40f8:	bfd4      	ite	le
    40fa:	3101      	addle	r1, #1
    40fc:	2112      	movgt	r1, #18
    40fe:	f7ff fc77 	bl	39f0 <fp_round>
    4102:	f8db 3000 	ldr.w	r3, [fp]
    4106:	4405      	add	r5, r0
    4108:	429d      	cmp	r5, r3
    410a:	db7e      	blt.n	420a <fp_display+0x73a>
    410c:	3b01      	subs	r3, #1
    410e:	f8cb 3000 	str.w	r3, [fp]
    4112:	9b05      	ldr	r3, [sp, #20]
    4114:	3b02      	subs	r3, #2
    4116:	9305      	str	r3, [sp, #20]
    4118:	f8db 3000 	ldr.w	r3, [fp]
    411c:	2b11      	cmp	r3, #17
    411e:	bfc1      	itttt	gt
    4120:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    4122:	3b11      	subgt	r3, #17
    4124:	6013      	strgt	r3, [r2, #0]
    4126:	2311      	movgt	r3, #17
    4128:	bfc8      	it	gt
    412a:	f8cb 3000 	strgt.w	r3, [fp]
    412e:	9b06      	ldr	r3, [sp, #24]
    4130:	f8db 6000 	ldr.w	r6, [fp]
    4134:	f413 6700 	ands.w	r7, r3, #2048	; 0x800
    4138:	f106 0602 	add.w	r6, r6, #2
    413c:	d104      	bne.n	4148 <fp_display+0x678>
    413e:	4620      	mov	r0, r4
    4140:	4631      	mov	r1, r6
    4142:	f7ff fc55 	bl	39f0 <fp_round>
    4146:	4405      	add	r5, r0
    4148:	7863      	ldrb	r3, [r4, #1]
    414a:	7023      	strb	r3, [r4, #0]
    414c:	f8db 3000 	ldr.w	r3, [fp]
    4150:	b923      	cbnz	r3, 415c <fp_display+0x68c>
    4152:	f640 0308 	movw	r3, #2056	; 0x808
    4156:	9a06      	ldr	r2, [sp, #24]
    4158:	4013      	ands	r3, r2
    415a:	b113      	cbz	r3, 4162 <fp_display+0x692>
    415c:	232e      	movs	r3, #46	; 0x2e
    415e:	7063      	strb	r3, [r4, #1]
    4160:	e000      	b.n	4164 <fp_display+0x694>
    4162:	2601      	movs	r6, #1
    4164:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    4166:	681b      	ldr	r3, [r3, #0]
    4168:	2b00      	cmp	r3, #0
    416a:	bfc2      	ittt	gt
    416c:	233e      	movgt	r3, #62	; 0x3e
    416e:	55a3      	strbgt	r3, [r4, r6]
    4170:	3601      	addgt	r6, #1
    4172:	b177      	cbz	r7, 4192 <fp_display+0x6c2>
    4174:	9b06      	ldr	r3, [sp, #24]
    4176:	071f      	lsls	r7, r3, #28
    4178:	d40b      	bmi.n	4192 <fp_display+0x6c2>
    417a:	19a2      	adds	r2, r4, r6
    417c:	1b16      	subs	r6, r2, r4
    417e:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
    4182:	2b30      	cmp	r3, #48	; 0x30
    4184:	d0fa      	beq.n	417c <fp_display+0x6ac>
    4186:	2b3e      	cmp	r3, #62	; 0x3e
    4188:	d0f8      	beq.n	417c <fp_display+0x6ac>
    418a:	2b2e      	cmp	r3, #46	; 0x2e
    418c:	bf08      	it	eq
    418e:	f106 36ff 	addeq.w	r6, r6, #4294967295
    4192:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4196:	2d00      	cmp	r5, #0
    4198:	55a3      	strb	r3, [r4, r6]
    419a:	bfb8      	it	lt
    419c:	426d      	neglt	r5, r5
    419e:	f106 0302 	add.w	r3, r6, #2
    41a2:	f106 0201 	add.w	r2, r6, #1
    41a6:	bfb5      	itete	lt
    41a8:	212d      	movlt	r1, #45	; 0x2d
    41aa:	212b      	movge	r1, #43	; 0x2b
    41ac:	461e      	movlt	r6, r3
    41ae:	461e      	movge	r6, r3
    41b0:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
    41b4:	54a1      	strb	r1, [r4, r2]
    41b6:	db0a      	blt.n	41ce <fp_display+0x6fe>
    41b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    41bc:	fb95 f2f2 	sdiv	r2, r5, r2
    41c0:	f102 0130 	add.w	r1, r2, #48	; 0x30
    41c4:	54e1      	strb	r1, [r4, r3]
    41c6:	494e      	ldr	r1, [pc, #312]	; (4300 <fp_display+0x830>)
    41c8:	1c5e      	adds	r6, r3, #1
    41ca:	fb01 5502 	mla	r5, r1, r2, r5
    41ce:	2d63      	cmp	r5, #99	; 0x63
    41d0:	dd0a      	ble.n	41e8 <fp_display+0x718>
    41d2:	2364      	movs	r3, #100	; 0x64
    41d4:	fb95 f3f3 	sdiv	r3, r5, r3
    41d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
    41dc:	55a2      	strb	r2, [r4, r6]
    41de:	f06f 0263 	mvn.w	r2, #99	; 0x63
    41e2:	fb02 5503 	mla	r5, r2, r3, r5
    41e6:	3601      	adds	r6, #1
    41e8:	230a      	movs	r3, #10
    41ea:	fb95 f3f3 	sdiv	r3, r5, r3
    41ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
    41f2:	55a2      	strb	r2, [r4, r6]
    41f4:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    41f8:	3530      	adds	r5, #48	; 0x30
    41fa:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
    41fe:	4434      	add	r4, r6
    4200:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    4204:	7063      	strb	r3, [r4, #1]
    4206:	1cb0      	adds	r0, r6, #2
    4208:	e0df      	b.n	43ca <fp_display+0x8fa>
    420a:	1d2a      	adds	r2, r5, #4
    420c:	f6ff af7e 	blt.w	410c <fp_display+0x63c>
    4210:	43ea      	mvns	r2, r5
    4212:	4413      	add	r3, r2
    4214:	f8cb 3000 	str.w	r3, [fp]
    4218:	9a06      	ldr	r2, [sp, #24]
    421a:	2d00      	cmp	r5, #0
    421c:	f8db 3000 	ldr.w	r3, [fp]
    4220:	f402 6700 	and.w	r7, r2, #2048	; 0x800
    4224:	da4c      	bge.n	42c0 <fp_display+0x7f0>
    4226:	f1c5 0800 	rsb	r8, r5, #0
    422a:	1c5a      	adds	r2, r3, #1
    422c:	4590      	cmp	r8, r2
    422e:	dd09      	ble.n	4244 <fp_display+0x774>
    4230:	2330      	movs	r3, #48	; 0x30
    4232:	7023      	strb	r3, [r4, #0]
    4234:	232e      	movs	r3, #46	; 0x2e
    4236:	7063      	strb	r3, [r4, #1]
    4238:	f8db 3000 	ldr.w	r3, [fp]
    423c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    423e:	2602      	movs	r6, #2
    4240:	6013      	str	r3, [r2, #0]
    4242:	e038      	b.n	42b6 <fp_display+0x7e6>
    4244:	442b      	add	r3, r5
    4246:	1c9e      	adds	r6, r3, #2
    4248:	2e12      	cmp	r6, #18
    424a:	bfc1      	itttt	gt
    424c:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    424e:	3b11      	subgt	r3, #17
    4250:	6013      	strgt	r3, [r2, #0]
    4252:	2613      	movgt	r6, #19
    4254:	b95f      	cbnz	r7, 426e <fp_display+0x79e>
    4256:	4620      	mov	r0, r4
    4258:	4631      	mov	r1, r6
    425a:	f7ff fbc9 	bl	39f0 <fp_round>
    425e:	b130      	cbz	r0, 426e <fp_display+0x79e>
    4260:	ea7f 0805 	mvns.w	r8, r5
    4264:	f106 0601 	add.w	r6, r6, #1
    4268:	d101      	bne.n	426e <fp_display+0x79e>
    426a:	7863      	ldrb	r3, [r4, #1]
    426c:	e00d      	b.n	428a <fp_display+0x7ba>
    426e:	f1b8 0f01 	cmp.w	r8, #1
    4272:	eb04 0306 	add.w	r3, r4, r6
    4276:	d10c      	bne.n	4292 <fp_display+0x7c2>
    4278:	1b1a      	subs	r2, r3, r4
    427a:	2a00      	cmp	r2, #0
    427c:	dd03      	ble.n	4286 <fp_display+0x7b6>
    427e:	f813 2901 	ldrb.w	r2, [r3], #-1
    4282:	709a      	strb	r2, [r3, #2]
    4284:	e7f8      	b.n	4278 <fp_display+0x7a8>
    4286:	3601      	adds	r6, #1
    4288:	2330      	movs	r3, #48	; 0x30
    428a:	7023      	strb	r3, [r4, #0]
    428c:	232e      	movs	r3, #46	; 0x2e
    428e:	7063      	strb	r3, [r4, #1]
    4290:	e011      	b.n	42b6 <fp_display+0x7e6>
    4292:	1b1a      	subs	r2, r3, r4
    4294:	2a00      	cmp	r2, #0
    4296:	dd03      	ble.n	42a0 <fp_display+0x7d0>
    4298:	f813 2901 	ldrb.w	r2, [r3], #-1
    429c:	70da      	strb	r2, [r3, #3]
    429e:	e7f8      	b.n	4292 <fp_display+0x7c2>
    42a0:	2330      	movs	r3, #48	; 0x30
    42a2:	7023      	strb	r3, [r4, #0]
    42a4:	232e      	movs	r3, #46	; 0x2e
    42a6:	7063      	strb	r3, [r4, #1]
    42a8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    42aa:	233c      	movs	r3, #60	; 0x3c
    42ac:	70a3      	strb	r3, [r4, #2]
    42ae:	f108 33ff 	add.w	r3, r8, #4294967295
    42b2:	3602      	adds	r6, #2
    42b4:	6013      	str	r3, [r2, #0]
    42b6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    42b8:	681b      	ldr	r3, [r3, #0]
    42ba:	2b00      	cmp	r3, #0
    42bc:	dc38      	bgt.n	4330 <fp_display+0x860>
    42be:	e06c      	b.n	439a <fp_display+0x8ca>
    42c0:	eb05 0803 	add.w	r8, r5, r3
    42c4:	f108 0602 	add.w	r6, r8, #2
    42c8:	2e12      	cmp	r6, #18
    42ca:	dd50      	ble.n	436e <fp_display+0x89e>
    42cc:	b9d7      	cbnz	r7, 4304 <fp_display+0x834>
    42ce:	4620      	mov	r0, r4
    42d0:	2113      	movs	r1, #19
    42d2:	f7ff fb8d 	bl	39f0 <fp_round>
    42d6:	b1a8      	cbz	r0, 4304 <fp_display+0x834>
    42d8:	3501      	adds	r5, #1
    42da:	2614      	movs	r6, #20
    42dc:	e013      	b.n	4306 <fp_display+0x836>
    42de:	bf00      	nop
    42e0:	00007320 	.word	0x00007320
    42e4:	fffffc01 	.word	0xfffffc01
    42e8:	0000732c 	.word	0x0000732c
    42ec:	00007324 	.word	0x00007324
    42f0:	00007343 	.word	0x00007343
    42f4:	00007334 	.word	0x00007334
    42f8:	00007352 	.word	0x00007352
    42fc:	0000719f 	.word	0x0000719f
    4300:	fffffc18 	.word	0xfffffc18
    4304:	2613      	movs	r6, #19
    4306:	1e72      	subs	r2, r6, #1
    4308:	4295      	cmp	r5, r2
    430a:	4623      	mov	r3, r4
    430c:	da14      	bge.n	4338 <fp_display+0x868>
    430e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    4312:	f803 2c01 	strb.w	r2, [r3, #-1]
    4316:	1b1a      	subs	r2, r3, r4
    4318:	42aa      	cmp	r2, r5
    431a:	ddf8      	ble.n	430e <fp_display+0x83e>
    431c:	1963      	adds	r3, r4, r5
    431e:	222e      	movs	r2, #46	; 0x2e
    4320:	705a      	strb	r2, [r3, #1]
    4322:	f8db 3000 	ldr.w	r3, [fp]
    4326:	441d      	add	r5, r3
    4328:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    432a:	3d11      	subs	r5, #17
    432c:	601d      	str	r5, [r3, #0]
    432e:	b3a5      	cbz	r5, 439a <fp_display+0x8ca>
    4330:	233e      	movs	r3, #62	; 0x3e
    4332:	55a3      	strb	r3, [r4, r6]
    4334:	3601      	adds	r6, #1
    4336:	e030      	b.n	439a <fp_display+0x8ca>
    4338:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    433c:	f803 1c01 	strb.w	r1, [r3, #-1]
    4340:	1b19      	subs	r1, r3, r4
    4342:	4291      	cmp	r1, r2
    4344:	dbf8      	blt.n	4338 <fp_display+0x868>
    4346:	19a3      	adds	r3, r4, r6
    4348:	223c      	movs	r2, #60	; 0x3c
    434a:	f803 2c01 	strb.w	r2, [r3, #-1]
    434e:	1bad      	subs	r5, r5, r6
    4350:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    4352:	222e      	movs	r2, #46	; 0x2e
    4354:	3502      	adds	r5, #2
    4356:	601d      	str	r5, [r3, #0]
    4358:	55a2      	strb	r2, [r4, r6]
    435a:	f8db 2000 	ldr.w	r2, [fp]
    435e:	1c73      	adds	r3, r6, #1
    4360:	b1d2      	cbz	r2, 4398 <fp_display+0x8c8>
    4362:	992b      	ldr	r1, [sp, #172]	; 0xac
    4364:	3602      	adds	r6, #2
    4366:	600a      	str	r2, [r1, #0]
    4368:	223e      	movs	r2, #62	; 0x3e
    436a:	54e2      	strb	r2, [r4, r3]
    436c:	e015      	b.n	439a <fp_display+0x8ca>
    436e:	b93f      	cbnz	r7, 4380 <fp_display+0x8b0>
    4370:	4620      	mov	r0, r4
    4372:	4631      	mov	r1, r6
    4374:	f7ff fb3c 	bl	39f0 <fp_round>
    4378:	b110      	cbz	r0, 4380 <fp_display+0x8b0>
    437a:	3501      	adds	r5, #1
    437c:	f108 0603 	add.w	r6, r8, #3
    4380:	4623      	mov	r3, r4
    4382:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    4386:	f803 2c01 	strb.w	r2, [r3, #-1]
    438a:	1b1a      	subs	r2, r3, r4
    438c:	42aa      	cmp	r2, r5
    438e:	ddf8      	ble.n	4382 <fp_display+0x8b2>
    4390:	4425      	add	r5, r4
    4392:	232e      	movs	r3, #46	; 0x2e
    4394:	706b      	strb	r3, [r5, #1]
    4396:	e000      	b.n	439a <fp_display+0x8ca>
    4398:	461e      	mov	r6, r3
    439a:	b16f      	cbz	r7, 43b8 <fp_display+0x8e8>
    439c:	9b06      	ldr	r3, [sp, #24]
    439e:	0718      	lsls	r0, r3, #28
    43a0:	d412      	bmi.n	43c8 <fp_display+0x8f8>
    43a2:	19a0      	adds	r0, r4, r6
    43a4:	1b06      	subs	r6, r0, r4
    43a6:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
    43aa:	2b30      	cmp	r3, #48	; 0x30
    43ac:	d0fa      	beq.n	43a4 <fp_display+0x8d4>
    43ae:	2b3e      	cmp	r3, #62	; 0x3e
    43b0:	d0f8      	beq.n	43a4 <fp_display+0x8d4>
    43b2:	2b2e      	cmp	r3, #46	; 0x2e
    43b4:	d108      	bne.n	43c8 <fp_display+0x8f8>
    43b6:	e005      	b.n	43c4 <fp_display+0x8f4>
    43b8:	f8db 3000 	ldr.w	r3, [fp]
    43bc:	b923      	cbnz	r3, 43c8 <fp_display+0x8f8>
    43be:	9b06      	ldr	r3, [sp, #24]
    43c0:	0719      	lsls	r1, r3, #28
    43c2:	d401      	bmi.n	43c8 <fp_display+0x8f8>
    43c4:	1e70      	subs	r0, r6, #1
    43c6:	e000      	b.n	43ca <fp_display+0x8fa>
    43c8:	4630      	mov	r0, r6
    43ca:	b01f      	add	sp, #124	; 0x7c
    43cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000043d0 <_initio>:
    43d0:	b510      	push	{r4, lr}
    43d2:	2100      	movs	r1, #0
    43d4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    43d8:	4822      	ldr	r0, [pc, #136]	; (4464 <_initio+0x94>)
    43da:	f7ff fa79 	bl	38d0 <memset>
    43de:	20c0      	movs	r0, #192	; 0xc0
    43e0:	f7ff faf6 	bl	39d0 <_Csys_alloc>
    43e4:	4c20      	ldr	r4, [pc, #128]	; (4468 <_initio+0x98>)
    43e6:	2100      	movs	r1, #0
    43e8:	22c0      	movs	r2, #192	; 0xc0
    43ea:	6020      	str	r0, [r4, #0]
    43ec:	f7ff fa70 	bl	38d0 <memset>
    43f0:	6820      	ldr	r0, [r4, #0]
    43f2:	2300      	movs	r3, #0
    43f4:	4c1b      	ldr	r4, [pc, #108]	; (4464 <_initio+0x94>)
    43f6:	2228      	movs	r2, #40	; 0x28
    43f8:	2118      	movs	r1, #24
    43fa:	fb02 4203 	mla	r2, r2, r3, r4
    43fe:	fb01 0103 	mla	r1, r1, r3, r0
    4402:	3301      	adds	r3, #1
    4404:	2b08      	cmp	r3, #8
    4406:	6251      	str	r1, [r2, #36]	; 0x24
    4408:	d1f4      	bne.n	43f4 <_initio+0x24>
    440a:	4622      	mov	r2, r4
    440c:	4917      	ldr	r1, [pc, #92]	; (446c <_initio+0x9c>)
    440e:	2000      	movs	r0, #0
    4410:	f001 f8d1 	bl	55b6 <_fdopen>
    4414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4418:	4620      	mov	r0, r4
    441a:	2100      	movs	r1, #0
    441c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4420:	f000 ff38 	bl	5294 <setvbuf>
    4424:	f104 0228 	add.w	r2, r4, #40	; 0x28
    4428:	4911      	ldr	r1, [pc, #68]	; (4470 <_initio+0xa0>)
    442a:	2001      	movs	r0, #1
    442c:	f001 f8c3 	bl	55b6 <_fdopen>
    4430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4434:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4438:	2100      	movs	r1, #0
    443a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    443e:	f000 ff29 	bl	5294 <setvbuf>
    4442:	f104 0250 	add.w	r2, r4, #80	; 0x50
    4446:	490a      	ldr	r1, [pc, #40]	; (4470 <_initio+0xa0>)
    4448:	2002      	movs	r0, #2
    444a:	f001 f8b4 	bl	55b6 <_fdopen>
    444e:	f104 0050 	add.w	r0, r4, #80	; 0x50
    4452:	2100      	movs	r1, #0
    4454:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    445c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4460:	f000 bf18 	b.w	5294 <setvbuf>
    4464:	10001a10 	.word	0x10001a10
    4468:	10001a0c 	.word	0x10001a0c
    446c:	00007354 	.word	0x00007354
    4470:	00007356 	.word	0x00007356

00004474 <__vfprintf>:
    4474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4478:	4604      	mov	r4, r0
    447a:	b0ad      	sub	sp, #180	; 0xb4
    447c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    4480:	f8dd 80dc 	ldr.w	r8, [sp, #220]	; 0xdc
    4484:	2200      	movs	r2, #0
    4486:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    4488:	9205      	str	r2, [sp, #20]
    448a:	7818      	ldrb	r0, [r3, #0]
    448c:	1c5d      	adds	r5, r3, #1
    448e:	2800      	cmp	r0, #0
    4490:	f000 863d 	beq.w	510e <__vfprintf+0xc9a>
    4494:	2825      	cmp	r0, #37	; 0x25
    4496:	d102      	bne.n	449e <__vfprintf+0x2a>
    4498:	462a      	mov	r2, r5
    449a:	2700      	movs	r7, #0
    449c:	e023      	b.n	44e6 <__vfprintf+0x72>
    449e:	9b05      	ldr	r3, [sp, #20]
    44a0:	ea4f 7be3 	mov.w	fp, r3, asr #31
    44a4:	461a      	mov	r2, r3
    44a6:	1c5e      	adds	r6, r3, #1
    44a8:	465b      	mov	r3, fp
    44aa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    44ae:	4552      	cmp	r2, sl
    44b0:	eb73 030b 	sbcs.w	r3, r3, fp
    44b4:	f280 8627 	bge.w	5106 <__vfprintf+0xc92>
    44b8:	68a3      	ldr	r3, [r4, #8]
    44ba:	3b01      	subs	r3, #1
    44bc:	2b00      	cmp	r3, #0
    44be:	60a3      	str	r3, [r4, #8]
    44c0:	db05      	blt.n	44ce <__vfprintf+0x5a>
    44c2:	6823      	ldr	r3, [r4, #0]
    44c4:	1c5a      	adds	r2, r3, #1
    44c6:	6022      	str	r2, [r4, #0]
    44c8:	7018      	strb	r0, [r3, #0]
    44ca:	f000 be1c 	b.w	5106 <__vfprintf+0xc92>
    44ce:	4621      	mov	r1, r4
    44d0:	f000 ffd0 	bl	5474 <__flsbuf>
    44d4:	f000 be17 	b.w	5106 <__vfprintf+0xc92>
    44d8:	d90b      	bls.n	44f2 <__vfprintf+0x7e>
    44da:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
    44de:	d111      	bne.n	4504 <__vfprintf+0x90>
    44e0:	f047 0701 	orr.w	r7, r7, #1
    44e4:	462a      	mov	r2, r5
    44e6:	f815 9b01 	ldrb.w	r9, [r5], #1
    44ea:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
    44ee:	d1f3      	bne.n	44d8 <__vfprintf+0x64>
    44f0:	e00e      	b.n	4510 <__vfprintf+0x9c>
    44f2:	f1b9 0f20 	cmp.w	r9, #32
    44f6:	d00e      	beq.n	4516 <__vfprintf+0xa2>
    44f8:	f1b9 0f23 	cmp.w	r9, #35	; 0x23
    44fc:	d10e      	bne.n	451c <__vfprintf+0xa8>
    44fe:	f047 0708 	orr.w	r7, r7, #8
    4502:	e7ef      	b.n	44e4 <__vfprintf+0x70>
    4504:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    4508:	d108      	bne.n	451c <__vfprintf+0xa8>
    450a:	f447 7700 	orr.w	r7, r7, #512	; 0x200
    450e:	e7e9      	b.n	44e4 <__vfprintf+0x70>
    4510:	f047 0702 	orr.w	r7, r7, #2
    4514:	e7e6      	b.n	44e4 <__vfprintf+0x70>
    4516:	f047 0704 	orr.w	r7, r7, #4
    451a:	e7e3      	b.n	44e4 <__vfprintf+0x70>
    451c:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    4520:	d001      	beq.n	4526 <__vfprintf+0xb2>
    4522:	2300      	movs	r3, #0
    4524:	e00d      	b.n	4542 <__vfprintf+0xce>
    4526:	f8d8 3000 	ldr.w	r3, [r8]
    452a:	f108 0104 	add.w	r1, r8, #4
    452e:	2b00      	cmp	r3, #0
    4530:	bfbc      	itt	lt
    4532:	425b      	neglt	r3, r3
    4534:	f087 0701 	eorlt.w	r7, r7, #1
    4538:	1c95      	adds	r5, r2, #2
    453a:	f892 9001 	ldrb.w	r9, [r2, #1]
    453e:	4688      	mov	r8, r1
    4540:	e00a      	b.n	4558 <__vfprintf+0xe4>
    4542:	f1a9 0230 	sub.w	r2, r9, #48	; 0x30
    4546:	b2d1      	uxtb	r1, r2
    4548:	2909      	cmp	r1, #9
    454a:	d805      	bhi.n	4558 <__vfprintf+0xe4>
    454c:	210a      	movs	r1, #10
    454e:	fb01 2303 	mla	r3, r1, r3, r2
    4552:	f815 9b01 	ldrb.w	r9, [r5], #1
    4556:	e7f4      	b.n	4542 <__vfprintf+0xce>
    4558:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    455c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
    4560:	930f      	str	r3, [sp, #60]	; 0x3c
    4562:	d124      	bne.n	45ae <__vfprintf+0x13a>
    4564:	f895 9000 	ldrb.w	r9, [r5]
    4568:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    456c:	d003      	beq.n	4576 <__vfprintf+0x102>
    456e:	2300      	movs	r3, #0
    4570:	3501      	adds	r5, #1
    4572:	9306      	str	r3, [sp, #24]
    4574:	e008      	b.n	4588 <__vfprintf+0x114>
    4576:	f8d8 3000 	ldr.w	r3, [r8]
    457a:	f895 9001 	ldrb.w	r9, [r5, #1]
    457e:	9306      	str	r3, [sp, #24]
    4580:	f108 0804 	add.w	r8, r8, #4
    4584:	3502      	adds	r5, #2
    4586:	e00c      	b.n	45a2 <__vfprintf+0x12e>
    4588:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    458c:	b2da      	uxtb	r2, r3
    458e:	2a09      	cmp	r2, #9
    4590:	d807      	bhi.n	45a2 <__vfprintf+0x12e>
    4592:	9906      	ldr	r1, [sp, #24]
    4594:	220a      	movs	r2, #10
    4596:	fb02 3301 	mla	r3, r2, r1, r3
    459a:	f815 9b01 	ldrb.w	r9, [r5], #1
    459e:	9306      	str	r3, [sp, #24]
    45a0:	e7f2      	b.n	4588 <__vfprintf+0x114>
    45a2:	9b06      	ldr	r3, [sp, #24]
    45a4:	2b00      	cmp	r3, #0
    45a6:	db02      	blt.n	45ae <__vfprintf+0x13a>
    45a8:	f047 0710 	orr.w	r7, r7, #16
    45ac:	e001      	b.n	45b2 <__vfprintf+0x13e>
    45ae:	2300      	movs	r3, #0
    45b0:	9306      	str	r3, [sp, #24]
    45b2:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    45b6:	d10d      	bne.n	45d4 <__vfprintf+0x160>
    45b8:	f895 9000 	ldrb.w	r9, [r5]
    45bc:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    45c0:	bf03      	ittte	eq
    45c2:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    45c6:	f047 0760 	orreq.w	r7, r7, #96	; 0x60
    45ca:	3502      	addeq	r5, #2
    45cc:	3501      	addne	r5, #1
    45ce:	bf18      	it	ne
    45d0:	f047 0720 	orrne.w	r7, r7, #32
    45d4:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
    45d8:	d002      	beq.n	45e0 <__vfprintf+0x16c>
    45da:	f1b9 0f71 	cmp.w	r9, #113	; 0x71
    45de:	d104      	bne.n	45ea <__vfprintf+0x176>
    45e0:	f895 9000 	ldrb.w	r9, [r5]
    45e4:	f047 0760 	orr.w	r7, r7, #96	; 0x60
    45e8:	e01f      	b.n	462a <__vfprintf+0x1b6>
    45ea:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    45ee:	d10e      	bne.n	460e <__vfprintf+0x19a>
    45f0:	f895 9000 	ldrb.w	r9, [r5]
    45f4:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    45f8:	bf03      	ittte	eq
    45fa:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    45fe:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
    4602:	3502      	addeq	r5, #2
    4604:	3501      	addne	r5, #1
    4606:	bf18      	it	ne
    4608:	f047 0780 	orrne.w	r7, r7, #128	; 0x80
    460c:	e00e      	b.n	462c <__vfprintf+0x1b8>
    460e:	f1b9 0f6a 	cmp.w	r9, #106	; 0x6a
    4612:	d102      	bne.n	461a <__vfprintf+0x1a6>
    4614:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    4618:	e005      	b.n	4626 <__vfprintf+0x1b2>
    461a:	f1b9 0f7a 	cmp.w	r9, #122	; 0x7a
    461e:	d002      	beq.n	4626 <__vfprintf+0x1b2>
    4620:	f1b9 0f74 	cmp.w	r9, #116	; 0x74
    4624:	d102      	bne.n	462c <__vfprintf+0x1b8>
    4626:	f895 9000 	ldrb.w	r9, [r5]
    462a:	3501      	adds	r5, #1
    462c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    4630:	dc25      	bgt.n	467e <__vfprintf+0x20a>
    4632:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    4636:	f280 826e 	bge.w	4b16 <__vfprintf+0x6a2>
    463a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    463e:	f000 826a 	beq.w	4b16 <__vfprintf+0x6a2>
    4642:	dc0c      	bgt.n	465e <__vfprintf+0x1ea>
    4644:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    4648:	f000 825f 	beq.w	4b0a <__vfprintf+0x696>
    464c:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    4650:	f000 8261 	beq.w	4b16 <__vfprintf+0x6a2>
    4654:	f1b9 0f00 	cmp.w	r9, #0
    4658:	f000 80b4 	beq.w	47c4 <__vfprintf+0x350>
    465c:	e031      	b.n	46c2 <__vfprintf+0x24e>
    465e:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    4662:	f000 8252 	beq.w	4b0a <__vfprintf+0x696>
    4666:	dc04      	bgt.n	4672 <__vfprintf+0x1fe>
    4668:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    466c:	f000 8171 	beq.w	4952 <__vfprintf+0x4de>
    4670:	e027      	b.n	46c2 <__vfprintf+0x24e>
    4672:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
    4676:	d01e      	beq.n	46b6 <__vfprintf+0x242>
    4678:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    467c:	e00c      	b.n	4698 <__vfprintf+0x224>
    467e:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    4682:	f000 81b4 	beq.w	49ee <__vfprintf+0x57a>
    4686:	dc0a      	bgt.n	469e <__vfprintf+0x22a>
    4688:	f1b9 0f6e 	cmp.w	r9, #110	; 0x6e
    468c:	f000 809f 	beq.w	47ce <__vfprintf+0x35a>
    4690:	f300 81b6 	bgt.w	4a00 <__vfprintf+0x58c>
    4694:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    4698:	f000 81f4 	beq.w	4a84 <__vfprintf+0x610>
    469c:	e011      	b.n	46c2 <__vfprintf+0x24e>
    469e:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    46a2:	f000 81cd 	beq.w	4a40 <__vfprintf+0x5cc>
    46a6:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    46aa:	f000 8179 	beq.w	49a0 <__vfprintf+0x52c>
    46ae:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
    46b2:	d106      	bne.n	46c2 <__vfprintf+0x24e>
    46b4:	e0ae      	b.n	4814 <__vfprintf+0x3a0>
    46b6:	f108 0304 	add.w	r3, r8, #4
    46ba:	930e      	str	r3, [sp, #56]	; 0x38
    46bc:	f8d8 9000 	ldr.w	r9, [r8]
    46c0:	e001      	b.n	46c6 <__vfprintf+0x252>
    46c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    46c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    46c8:	f103 3aff 	add.w	sl, r3, #4294967295
    46cc:	f017 0301 	ands.w	r3, r7, #1
    46d0:	9306      	str	r3, [sp, #24]
    46d2:	d12e      	bne.n	4732 <__vfprintf+0x2be>
    46d4:	f417 7f00 	tst.w	r7, #512	; 0x200
    46d8:	bf14      	ite	ne
    46da:	f04f 0830 	movne.w	r8, #48	; 0x30
    46de:	f04f 0820 	moveq.w	r8, #32
    46e2:	2600      	movs	r6, #0
    46e4:	2700      	movs	r7, #0
    46e6:	9b05      	ldr	r3, [sp, #20]
    46e8:	199a      	adds	r2, r3, r6
    46ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    46ec:	f1a3 0a02 	sub.w	sl, r3, #2
    46f0:	ebba 0a06 	subs.w	sl, sl, r6
    46f4:	d41c      	bmi.n	4730 <__vfprintf+0x2bc>
    46f6:	9b05      	ldr	r3, [sp, #20]
    46f8:	18f0      	adds	r0, r6, r3
    46fa:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    46fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    4702:	4290      	cmp	r0, r2
    4704:	eb71 0303 	sbcs.w	r3, r1, r3
    4708:	da0e      	bge.n	4728 <__vfprintf+0x2b4>
    470a:	68a2      	ldr	r2, [r4, #8]
    470c:	3a01      	subs	r2, #1
    470e:	2a00      	cmp	r2, #0
    4710:	60a2      	str	r2, [r4, #8]
    4712:	db05      	blt.n	4720 <__vfprintf+0x2ac>
    4714:	6822      	ldr	r2, [r4, #0]
    4716:	1c51      	adds	r1, r2, #1
    4718:	6021      	str	r1, [r4, #0]
    471a:	f882 8000 	strb.w	r8, [r2]
    471e:	e003      	b.n	4728 <__vfprintf+0x2b4>
    4720:	4640      	mov	r0, r8
    4722:	4621      	mov	r1, r4
    4724:	f000 fea6 	bl	5474 <__flsbuf>
    4728:	3601      	adds	r6, #1
    472a:	f147 0700 	adc.w	r7, r7, #0
    472e:	e7da      	b.n	46e6 <__vfprintf+0x272>
    4730:	9205      	str	r2, [sp, #20]
    4732:	9b05      	ldr	r3, [sp, #20]
    4734:	17d9      	asrs	r1, r3, #31
    4736:	461a      	mov	r2, r3
    4738:	f103 0b01 	add.w	fp, r3, #1
    473c:	460b      	mov	r3, r1
    473e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4742:	4282      	cmp	r2, r0
    4744:	418b      	sbcs	r3, r1
    4746:	da0e      	bge.n	4766 <__vfprintf+0x2f2>
    4748:	68a3      	ldr	r3, [r4, #8]
    474a:	3b01      	subs	r3, #1
    474c:	2b00      	cmp	r3, #0
    474e:	60a3      	str	r3, [r4, #8]
    4750:	db05      	blt.n	475e <__vfprintf+0x2ea>
    4752:	6823      	ldr	r3, [r4, #0]
    4754:	1c5a      	adds	r2, r3, #1
    4756:	6022      	str	r2, [r4, #0]
    4758:	f883 9000 	strb.w	r9, [r3]
    475c:	e003      	b.n	4766 <__vfprintf+0x2f2>
    475e:	4648      	mov	r0, r9
    4760:	4621      	mov	r1, r4
    4762:	f000 fe87 	bl	5474 <__flsbuf>
    4766:	9b06      	ldr	r3, [sp, #24]
    4768:	b91b      	cbnz	r3, 4772 <__vfprintf+0x2fe>
    476a:	f8cd b014 	str.w	fp, [sp, #20]
    476e:	f000 bcc7 	b.w	5100 <__vfprintf+0xc8c>
    4772:	2600      	movs	r6, #0
    4774:	2700      	movs	r7, #0
    4776:	43f3      	mvns	r3, r6
    4778:	eb13 0f0a 	cmn.w	r3, sl
    477c:	d41b      	bmi.n	47b6 <__vfprintf+0x342>
    477e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4782:	eb16 020b 	adds.w	r2, r6, fp
    4786:	eb47 73eb 	adc.w	r3, r7, fp, asr #31
    478a:	4282      	cmp	r2, r0
    478c:	418b      	sbcs	r3, r1
    478e:	da0e      	bge.n	47ae <__vfprintf+0x33a>
    4790:	68a3      	ldr	r3, [r4, #8]
    4792:	3b01      	subs	r3, #1
    4794:	2b00      	cmp	r3, #0
    4796:	60a3      	str	r3, [r4, #8]
    4798:	db05      	blt.n	47a6 <__vfprintf+0x332>
    479a:	6823      	ldr	r3, [r4, #0]
    479c:	1c5a      	adds	r2, r3, #1
    479e:	6022      	str	r2, [r4, #0]
    47a0:	2220      	movs	r2, #32
    47a2:	701a      	strb	r2, [r3, #0]
    47a4:	e003      	b.n	47ae <__vfprintf+0x33a>
    47a6:	2020      	movs	r0, #32
    47a8:	4621      	mov	r1, r4
    47aa:	f000 fe63 	bl	5474 <__flsbuf>
    47ae:	3601      	adds	r6, #1
    47b0:	f147 0700 	adc.w	r7, r7, #0
    47b4:	e7df      	b.n	4776 <__vfprintf+0x302>
    47b6:	465b      	mov	r3, fp
    47b8:	f1ba 0f00 	cmp.w	sl, #0
    47bc:	bfa8      	it	ge
    47be:	4453      	addge	r3, sl
    47c0:	f000 bc9d 	b.w	50fe <__vfprintf+0xc8a>
    47c4:	3d01      	subs	r5, #1
    47c6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    47ca:	f000 bc99 	b.w	5100 <__vfprintf+0xc8c>
    47ce:	f108 0304 	add.w	r3, r8, #4
    47d2:	f017 0f40 	tst.w	r7, #64	; 0x40
    47d6:	930e      	str	r3, [sp, #56]	; 0x38
    47d8:	f8d8 3000 	ldr.w	r3, [r8]
    47dc:	d006      	beq.n	47ec <__vfprintf+0x378>
    47de:	9a05      	ldr	r2, [sp, #20]
    47e0:	4610      	mov	r0, r2
    47e2:	17d1      	asrs	r1, r2, #31
    47e4:	e9c3 0100 	strd	r0, r1, [r3]
    47e8:	f000 bc8a 	b.w	5100 <__vfprintf+0xc8c>
    47ec:	06be      	lsls	r6, r7, #26
    47ee:	d40d      	bmi.n	480c <__vfprintf+0x398>
    47f0:	05f8      	lsls	r0, r7, #23
    47f2:	d504      	bpl.n	47fe <__vfprintf+0x38a>
    47f4:	f89d 2014 	ldrb.w	r2, [sp, #20]
    47f8:	701a      	strb	r2, [r3, #0]
    47fa:	f000 bc81 	b.w	5100 <__vfprintf+0xc8c>
    47fe:	0639      	lsls	r1, r7, #24
    4800:	d504      	bpl.n	480c <__vfprintf+0x398>
    4802:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    4806:	801a      	strh	r2, [r3, #0]
    4808:	f000 bc7a 	b.w	5100 <__vfprintf+0xc8c>
    480c:	9a05      	ldr	r2, [sp, #20]
    480e:	601a      	str	r2, [r3, #0]
    4810:	f000 bc76 	b.w	5100 <__vfprintf+0xc8c>
    4814:	f108 0304 	add.w	r3, r8, #4
    4818:	930e      	str	r3, [sp, #56]	; 0x38
    481a:	f8d8 9000 	ldr.w	r9, [r8]
    481e:	4bab      	ldr	r3, [pc, #684]	; (4acc <__vfprintf+0x658>)
    4820:	f1b9 0f00 	cmp.w	r9, #0
    4824:	bf08      	it	eq
    4826:	4699      	moveq	r9, r3
    4828:	4648      	mov	r0, r9
    482a:	f000 fd81 	bl	5330 <strlen>
    482e:	06fa      	lsls	r2, r7, #27
    4830:	4682      	mov	sl, r0
    4832:	d503      	bpl.n	483c <__vfprintf+0x3c8>
    4834:	9b06      	ldr	r3, [sp, #24]
    4836:	4298      	cmp	r0, r3
    4838:	bfa8      	it	ge
    483a:	469a      	movge	sl, r3
    483c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    483e:	ebca 0b03 	rsb	fp, sl, r3
    4842:	f017 0301 	ands.w	r3, r7, #1
    4846:	9306      	str	r3, [sp, #24]
    4848:	d131      	bne.n	48ae <__vfprintf+0x43a>
    484a:	f417 7f00 	tst.w	r7, #512	; 0x200
    484e:	bf14      	ite	ne
    4850:	f04f 0830 	movne.w	r8, #48	; 0x30
    4854:	f04f 0820 	moveq.w	r8, #32
    4858:	2600      	movs	r6, #0
    485a:	2700      	movs	r7, #0
    485c:	f10b 32ff 	add.w	r2, fp, #4294967295
    4860:	1b91      	subs	r1, r2, r6
    4862:	2900      	cmp	r1, #0
    4864:	db1c      	blt.n	48a0 <__vfprintf+0x42c>
    4866:	9b05      	ldr	r3, [sp, #20]
    4868:	18f0      	adds	r0, r6, r3
    486a:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    486e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    4872:	4290      	cmp	r0, r2
    4874:	eb71 0303 	sbcs.w	r3, r1, r3
    4878:	da0e      	bge.n	4898 <__vfprintf+0x424>
    487a:	68a2      	ldr	r2, [r4, #8]
    487c:	3a01      	subs	r2, #1
    487e:	2a00      	cmp	r2, #0
    4880:	60a2      	str	r2, [r4, #8]
    4882:	db05      	blt.n	4890 <__vfprintf+0x41c>
    4884:	6822      	ldr	r2, [r4, #0]
    4886:	1c51      	adds	r1, r2, #1
    4888:	6021      	str	r1, [r4, #0]
    488a:	f882 8000 	strb.w	r8, [r2]
    488e:	e003      	b.n	4898 <__vfprintf+0x424>
    4890:	4640      	mov	r0, r8
    4892:	4621      	mov	r1, r4
    4894:	f000 fdee 	bl	5474 <__flsbuf>
    4898:	3601      	adds	r6, #1
    489a:	f147 0700 	adc.w	r7, r7, #0
    489e:	e7dd      	b.n	485c <__vfprintf+0x3e8>
    48a0:	9b05      	ldr	r3, [sp, #20]
    48a2:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    48a6:	445b      	add	r3, fp
    48a8:	9305      	str	r3, [sp, #20]
    48aa:	ebcb 0b02 	rsb	fp, fp, r2
    48ae:	2600      	movs	r6, #0
    48b0:	2700      	movs	r7, #0
    48b2:	45b2      	cmp	sl, r6
    48b4:	9b05      	ldr	r3, [sp, #20]
    48b6:	dd1c      	ble.n	48f2 <__vfprintf+0x47e>
    48b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    48bc:	18f2      	adds	r2, r6, r3
    48be:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    48c2:	4282      	cmp	r2, r0
    48c4:	418b      	sbcs	r3, r1
    48c6:	da10      	bge.n	48ea <__vfprintf+0x476>
    48c8:	68a3      	ldr	r3, [r4, #8]
    48ca:	3b01      	subs	r3, #1
    48cc:	2b00      	cmp	r3, #0
    48ce:	60a3      	str	r3, [r4, #8]
    48d0:	eb09 0306 	add.w	r3, r9, r6
    48d4:	db05      	blt.n	48e2 <__vfprintf+0x46e>
    48d6:	6822      	ldr	r2, [r4, #0]
    48d8:	1c51      	adds	r1, r2, #1
    48da:	6021      	str	r1, [r4, #0]
    48dc:	781b      	ldrb	r3, [r3, #0]
    48de:	7013      	strb	r3, [r2, #0]
    48e0:	e003      	b.n	48ea <__vfprintf+0x476>
    48e2:	7818      	ldrb	r0, [r3, #0]
    48e4:	4621      	mov	r1, r4
    48e6:	f000 fdc5 	bl	5474 <__flsbuf>
    48ea:	3601      	adds	r6, #1
    48ec:	f147 0700 	adc.w	r7, r7, #0
    48f0:	e7df      	b.n	48b2 <__vfprintf+0x43e>
    48f2:	f1ba 0f00 	cmp.w	sl, #0
    48f6:	bfa8      	it	ge
    48f8:	4453      	addge	r3, sl
    48fa:	9305      	str	r3, [sp, #20]
    48fc:	9b06      	ldr	r3, [sp, #24]
    48fe:	2b00      	cmp	r3, #0
    4900:	f000 83fe 	beq.w	5100 <__vfprintf+0xc8c>
    4904:	2600      	movs	r6, #0
    4906:	2700      	movs	r7, #0
    4908:	43f3      	mvns	r3, r6
    490a:	eb13 0f0b 	cmn.w	r3, fp
    490e:	9b05      	ldr	r3, [sp, #20]
    4910:	d41a      	bmi.n	4948 <__vfprintf+0x4d4>
    4912:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4916:	18f2      	adds	r2, r6, r3
    4918:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    491c:	4282      	cmp	r2, r0
    491e:	418b      	sbcs	r3, r1
    4920:	da0e      	bge.n	4940 <__vfprintf+0x4cc>
    4922:	68a3      	ldr	r3, [r4, #8]
    4924:	3b01      	subs	r3, #1
    4926:	2b00      	cmp	r3, #0
    4928:	60a3      	str	r3, [r4, #8]
    492a:	db05      	blt.n	4938 <__vfprintf+0x4c4>
    492c:	6823      	ldr	r3, [r4, #0]
    492e:	1c5a      	adds	r2, r3, #1
    4930:	6022      	str	r2, [r4, #0]
    4932:	2220      	movs	r2, #32
    4934:	701a      	strb	r2, [r3, #0]
    4936:	e003      	b.n	4940 <__vfprintf+0x4cc>
    4938:	2020      	movs	r0, #32
    493a:	4621      	mov	r1, r4
    493c:	f000 fd9a 	bl	5474 <__flsbuf>
    4940:	3601      	adds	r6, #1
    4942:	f147 0700 	adc.w	r7, r7, #0
    4946:	e7df      	b.n	4908 <__vfprintf+0x494>
    4948:	f1bb 0f00 	cmp.w	fp, #0
    494c:	bfa8      	it	ge
    494e:	445b      	addge	r3, fp
    4950:	e3d5      	b.n	50fe <__vfprintf+0xc8a>
    4952:	067b      	lsls	r3, r7, #25
    4954:	d509      	bpl.n	496a <__vfprintf+0x4f6>
    4956:	f108 0807 	add.w	r8, r8, #7
    495a:	f028 0807 	bic.w	r8, r8, #7
    495e:	f108 0308 	add.w	r3, r8, #8
    4962:	930e      	str	r3, [sp, #56]	; 0x38
    4964:	e9d8 2300 	ldrd	r2, r3, [r8]
    4968:	e005      	b.n	4976 <__vfprintf+0x502>
    496a:	f108 0304 	add.w	r3, r8, #4
    496e:	f8d8 2000 	ldr.w	r2, [r8]
    4972:	930e      	str	r3, [sp, #56]	; 0x38
    4974:	2300      	movs	r3, #0
    4976:	063e      	lsls	r6, r7, #24
    4978:	d501      	bpl.n	497e <__vfprintf+0x50a>
    497a:	b292      	uxth	r2, r2
    497c:	e003      	b.n	4986 <__vfprintf+0x512>
    497e:	05f8      	lsls	r0, r7, #23
    4980:	d502      	bpl.n	4988 <__vfprintf+0x514>
    4982:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4986:	2300      	movs	r3, #0
    4988:	4951      	ldr	r1, [pc, #324]	; (4ad0 <__vfprintf+0x65c>)
    498a:	f017 0f08 	tst.w	r7, #8
    498e:	4851      	ldr	r0, [pc, #324]	; (4ad4 <__vfprintf+0x660>)
    4990:	bf08      	it	eq
    4992:	4608      	moveq	r0, r1
    4994:	06f9      	lsls	r1, r7, #27
    4996:	f140 80d6 	bpl.w	4b46 <__vfprintf+0x6d2>
    499a:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    499e:	e0d2      	b.n	4b46 <__vfprintf+0x6d2>
    49a0:	067b      	lsls	r3, r7, #25
    49a2:	d509      	bpl.n	49b8 <__vfprintf+0x544>
    49a4:	f108 0807 	add.w	r8, r8, #7
    49a8:	f028 0807 	bic.w	r8, r8, #7
    49ac:	f108 0308 	add.w	r3, r8, #8
    49b0:	930e      	str	r3, [sp, #56]	; 0x38
    49b2:	e9d8 2300 	ldrd	r2, r3, [r8]
    49b6:	e005      	b.n	49c4 <__vfprintf+0x550>
    49b8:	f108 0304 	add.w	r3, r8, #4
    49bc:	f8d8 2000 	ldr.w	r2, [r8]
    49c0:	930e      	str	r3, [sp, #56]	; 0x38
    49c2:	2300      	movs	r3, #0
    49c4:	063e      	lsls	r6, r7, #24
    49c6:	d501      	bpl.n	49cc <__vfprintf+0x558>
    49c8:	b292      	uxth	r2, r2
    49ca:	e003      	b.n	49d4 <__vfprintf+0x560>
    49cc:	05f8      	lsls	r0, r7, #23
    49ce:	d502      	bpl.n	49d6 <__vfprintf+0x562>
    49d0:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    49d4:	2300      	movs	r3, #0
    49d6:	493e      	ldr	r1, [pc, #248]	; (4ad0 <__vfprintf+0x65c>)
    49d8:	f017 0f08 	tst.w	r7, #8
    49dc:	483e      	ldr	r0, [pc, #248]	; (4ad8 <__vfprintf+0x664>)
    49de:	bf08      	it	eq
    49e0:	4608      	moveq	r0, r1
    49e2:	06f9      	lsls	r1, r7, #27
    49e4:	f140 80b1 	bpl.w	4b4a <__vfprintf+0x6d6>
    49e8:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    49ec:	e0ad      	b.n	4b4a <__vfprintf+0x6d6>
    49ee:	f108 0304 	add.w	r3, r8, #4
    49f2:	930e      	str	r3, [sp, #56]	; 0x38
    49f4:	f8d8 2000 	ldr.w	r2, [r8]
    49f8:	2300      	movs	r3, #0
    49fa:	4938      	ldr	r1, [pc, #224]	; (4adc <__vfprintf+0x668>)
    49fc:	4836      	ldr	r0, [pc, #216]	; (4ad8 <__vfprintf+0x664>)
    49fe:	e0a7      	b.n	4b50 <__vfprintf+0x6dc>
    4a00:	067e      	lsls	r6, r7, #25
    4a02:	d509      	bpl.n	4a18 <__vfprintf+0x5a4>
    4a04:	f108 0807 	add.w	r8, r8, #7
    4a08:	f028 0807 	bic.w	r8, r8, #7
    4a0c:	f108 0308 	add.w	r3, r8, #8
    4a10:	930e      	str	r3, [sp, #56]	; 0x38
    4a12:	e9d8 2300 	ldrd	r2, r3, [r8]
    4a16:	e005      	b.n	4a24 <__vfprintf+0x5b0>
    4a18:	f108 0304 	add.w	r3, r8, #4
    4a1c:	f8d8 2000 	ldr.w	r2, [r8]
    4a20:	930e      	str	r3, [sp, #56]	; 0x38
    4a22:	2300      	movs	r3, #0
    4a24:	0638      	lsls	r0, r7, #24
    4a26:	d501      	bpl.n	4a2c <__vfprintf+0x5b8>
    4a28:	b292      	uxth	r2, r2
    4a2a:	e003      	b.n	4a34 <__vfprintf+0x5c0>
    4a2c:	05f9      	lsls	r1, r7, #23
    4a2e:	d502      	bpl.n	4a36 <__vfprintf+0x5c2>
    4a30:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4a34:	2300      	movs	r3, #0
    4a36:	f017 0f08 	tst.w	r7, #8
    4a3a:	4925      	ldr	r1, [pc, #148]	; (4ad0 <__vfprintf+0x65c>)
    4a3c:	4828      	ldr	r0, [pc, #160]	; (4ae0 <__vfprintf+0x66c>)
    4a3e:	e059      	b.n	4af4 <__vfprintf+0x680>
    4a40:	067e      	lsls	r6, r7, #25
    4a42:	d509      	bpl.n	4a58 <__vfprintf+0x5e4>
    4a44:	f108 0807 	add.w	r8, r8, #7
    4a48:	f028 0807 	bic.w	r8, r8, #7
    4a4c:	f108 0308 	add.w	r3, r8, #8
    4a50:	930e      	str	r3, [sp, #56]	; 0x38
    4a52:	e9d8 2300 	ldrd	r2, r3, [r8]
    4a56:	e005      	b.n	4a64 <__vfprintf+0x5f0>
    4a58:	f108 0304 	add.w	r3, r8, #4
    4a5c:	f8d8 2000 	ldr.w	r2, [r8]
    4a60:	930e      	str	r3, [sp, #56]	; 0x38
    4a62:	2300      	movs	r3, #0
    4a64:	0638      	lsls	r0, r7, #24
    4a66:	d501      	bpl.n	4a6c <__vfprintf+0x5f8>
    4a68:	b292      	uxth	r2, r2
    4a6a:	e003      	b.n	4a74 <__vfprintf+0x600>
    4a6c:	05f9      	lsls	r1, r7, #23
    4a6e:	d502      	bpl.n	4a76 <__vfprintf+0x602>
    4a70:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4a74:	2300      	movs	r3, #0
    4a76:	f017 0110 	ands.w	r1, r7, #16
    4a7a:	d068      	beq.n	4b4e <__vfprintf+0x6da>
    4a7c:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4a80:	2100      	movs	r1, #0
    4a82:	e064      	b.n	4b4e <__vfprintf+0x6da>
    4a84:	067b      	lsls	r3, r7, #25
    4a86:	d509      	bpl.n	4a9c <__vfprintf+0x628>
    4a88:	f108 0807 	add.w	r8, r8, #7
    4a8c:	f028 0807 	bic.w	r8, r8, #7
    4a90:	f108 0308 	add.w	r3, r8, #8
    4a94:	930e      	str	r3, [sp, #56]	; 0x38
    4a96:	e9d8 2300 	ldrd	r2, r3, [r8]
    4a9a:	e005      	b.n	4aa8 <__vfprintf+0x634>
    4a9c:	f8d8 2000 	ldr.w	r2, [r8]
    4aa0:	f108 0304 	add.w	r3, r8, #4
    4aa4:	930e      	str	r3, [sp, #56]	; 0x38
    4aa6:	17d3      	asrs	r3, r2, #31
    4aa8:	063e      	lsls	r6, r7, #24
    4aaa:	d501      	bpl.n	4ab0 <__vfprintf+0x63c>
    4aac:	b212      	sxth	r2, r2
    4aae:	e002      	b.n	4ab6 <__vfprintf+0x642>
    4ab0:	05f8      	lsls	r0, r7, #23
    4ab2:	d501      	bpl.n	4ab8 <__vfprintf+0x644>
    4ab4:	b252      	sxtb	r2, r2
    4ab6:	17d3      	asrs	r3, r2, #31
    4ab8:	2a00      	cmp	r2, #0
    4aba:	f173 0100 	sbcs.w	r1, r3, #0
    4abe:	da13      	bge.n	4ae8 <__vfprintf+0x674>
    4ac0:	4252      	negs	r2, r2
    4ac2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4ac6:	4807      	ldr	r0, [pc, #28]	; (4ae4 <__vfprintf+0x670>)
    4ac8:	e018      	b.n	4afc <__vfprintf+0x688>
    4aca:	bf00      	nop
    4acc:	00007358 	.word	0x00007358
    4ad0:	0000719f 	.word	0x0000719f
    4ad4:	0000735f 	.word	0x0000735f
    4ad8:	00007362 	.word	0x00007362
    4adc:	00007378 	.word	0x00007378
    4ae0:	00007365 	.word	0x00007365
    4ae4:	00007352 	.word	0x00007352
    4ae8:	07b9      	lsls	r1, r7, #30
    4aea:	d406      	bmi.n	4afa <__vfprintf+0x686>
    4aec:	49b6      	ldr	r1, [pc, #728]	; (4dc8 <__vfprintf+0x954>)
    4aee:	48b7      	ldr	r0, [pc, #732]	; (4dcc <__vfprintf+0x958>)
    4af0:	f017 0f04 	tst.w	r7, #4
    4af4:	bf08      	it	eq
    4af6:	4608      	moveq	r0, r1
    4af8:	e000      	b.n	4afc <__vfprintf+0x688>
    4afa:	48b5      	ldr	r0, [pc, #724]	; (4dd0 <__vfprintf+0x95c>)
    4afc:	f017 0110 	ands.w	r1, r7, #16
    4b00:	d026      	beq.n	4b50 <__vfprintf+0x6dc>
    4b02:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4b06:	2100      	movs	r1, #0
    4b08:	e022      	b.n	4b50 <__vfprintf+0x6dc>
    4b0a:	06fb      	lsls	r3, r7, #27
    4b0c:	bf5e      	ittt	pl
    4b0e:	230d      	movpl	r3, #13
    4b10:	f047 0710 	orrpl.w	r7, r7, #16
    4b14:	9306      	strpl	r3, [sp, #24]
    4b16:	9b06      	ldr	r3, [sp, #24]
    4b18:	f017 0f10 	tst.w	r7, #16
    4b1c:	f108 0807 	add.w	r8, r8, #7
    4b20:	bf08      	it	eq
    4b22:	2306      	moveq	r3, #6
    4b24:	f028 0807 	bic.w	r8, r8, #7
    4b28:	9306      	str	r3, [sp, #24]
    4b2a:	2100      	movs	r1, #0
    4b2c:	f108 0308 	add.w	r3, r8, #8
    4b30:	930e      	str	r3, [sp, #56]	; 0x38
    4b32:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
    4b36:	e9d8 2300 	ldrd	r2, r3, [r8]
    4b3a:	4608      	mov	r0, r1
    4b3c:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
    4b40:	2200      	movs	r2, #0
    4b42:	2300      	movs	r3, #0
    4b44:	e004      	b.n	4b50 <__vfprintf+0x6dc>
    4b46:	49a3      	ldr	r1, [pc, #652]	; (4dd4 <__vfprintf+0x960>)
    4b48:	e002      	b.n	4b50 <__vfprintf+0x6dc>
    4b4a:	49a3      	ldr	r1, [pc, #652]	; (4dd8 <__vfprintf+0x964>)
    4b4c:	e000      	b.n	4b50 <__vfprintf+0x6dc>
    4b4e:	489e      	ldr	r0, [pc, #632]	; (4dc8 <__vfprintf+0x954>)
    4b50:	9e05      	ldr	r6, [sp, #20]
    4b52:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    4b56:	ebba 0a06 	subs.w	sl, sl, r6
    4b5a:	eb6b 7be6 	sbc.w	fp, fp, r6, asr #31
    4b5e:	e9cd ab08 	strd	sl, fp, [sp, #32]
    4b62:	9e06      	ldr	r6, [sp, #24]
    4b64:	901f      	str	r0, [sp, #124]	; 0x7c
    4b66:	f04f 30ff 	mov.w	r0, #4294967295
    4b6a:	9020      	str	r0, [sp, #128]	; 0x80
    4b6c:	9021      	str	r0, [sp, #132]	; 0x84
    4b6e:	961e      	str	r6, [sp, #120]	; 0x78
    4b70:	2000      	movs	r0, #0
    4b72:	f04f 0e55 	mov.w	lr, #85	; 0x55
    4b76:	ae24      	add	r6, sp, #144	; 0x90
    4b78:	f800 e006 	strb.w	lr, [r0, r6]
    4b7c:	3001      	adds	r0, #1
    4b7e:	2820      	cmp	r0, #32
    4b80:	d1f7      	bne.n	4b72 <__vfprintf+0x6fe>
    4b82:	f417 6f82 	tst.w	r7, #1040	; 0x410
    4b86:	bf04      	itt	eq
    4b88:	2001      	moveq	r0, #1
    4b8a:	901e      	streq	r0, [sp, #120]	; 0x78
    4b8c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    4b90:	dc1b      	bgt.n	4bca <__vfprintf+0x756>
    4b92:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    4b96:	f280 80d4 	bge.w	4d42 <__vfprintf+0x8ce>
    4b9a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    4b9e:	f000 80d0 	beq.w	4d42 <__vfprintf+0x8ce>
    4ba2:	dc08      	bgt.n	4bb6 <__vfprintf+0x742>
    4ba4:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    4ba8:	f000 80cb 	beq.w	4d42 <__vfprintf+0x8ce>
    4bac:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    4bb0:	f040 80d7 	bne.w	4d62 <__vfprintf+0x8ee>
    4bb4:	e0c5      	b.n	4d42 <__vfprintf+0x8ce>
    4bb6:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    4bba:	f000 80c2 	beq.w	4d42 <__vfprintf+0x8ce>
    4bbe:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    4bc2:	d017      	beq.n	4bf4 <__vfprintf+0x780>
    4bc4:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    4bc8:	e011      	b.n	4bee <__vfprintf+0x77a>
    4bca:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    4bce:	d014      	beq.n	4bfa <__vfprintf+0x786>
    4bd0:	dc08      	bgt.n	4be4 <__vfprintf+0x770>
    4bd2:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    4bd6:	d00d      	beq.n	4bf4 <__vfprintf+0x780>
    4bd8:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
    4bdc:	f040 80c1 	bne.w	4d62 <__vfprintf+0x8ee>
    4be0:	2100      	movs	r1, #0
    4be2:	e020      	b.n	4c26 <__vfprintf+0x7b2>
    4be4:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    4be8:	d004      	beq.n	4bf4 <__vfprintf+0x780>
    4bea:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    4bee:	f040 80b8 	bne.w	4d62 <__vfprintf+0x8ee>
    4bf2:	e002      	b.n	4bfa <__vfprintf+0x786>
    4bf4:	f04f 0e00 	mov.w	lr, #0
    4bf8:	e027      	b.n	4c4a <__vfprintf+0x7d6>
    4bfa:	2000      	movs	r0, #0
    4bfc:	ea52 0e03 	orrs.w	lr, r2, r3
    4c00:	4606      	mov	r6, r0
    4c02:	f000 80af 	beq.w	4d64 <__vfprintf+0x8f0>
    4c06:	f002 060f 	and.w	r6, r2, #15
    4c0a:	f811 e006 	ldrb.w	lr, [r1, r6]
    4c0e:	ae24      	add	r6, sp, #144	; 0x90
    4c10:	f800 e006 	strb.w	lr, [r0, r6]
    4c14:	0916      	lsrs	r6, r2, #4
    4c16:	ea46 7603 	orr.w	r6, r6, r3, lsl #28
    4c1a:	ea4f 1e13 	mov.w	lr, r3, lsr #4
    4c1e:	4632      	mov	r2, r6
    4c20:	4673      	mov	r3, lr
    4c22:	3001      	adds	r0, #1
    4c24:	e7ea      	b.n	4bfc <__vfprintf+0x788>
    4c26:	ea52 0003 	orrs.w	r0, r2, r3
    4c2a:	460e      	mov	r6, r1
    4c2c:	f000 809a 	beq.w	4d64 <__vfprintf+0x8f0>
    4c30:	f002 0007 	and.w	r0, r2, #7
    4c34:	3030      	adds	r0, #48	; 0x30
    4c36:	ae24      	add	r6, sp, #144	; 0x90
    4c38:	5588      	strb	r0, [r1, r6]
    4c3a:	08d0      	lsrs	r0, r2, #3
    4c3c:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
    4c40:	08de      	lsrs	r6, r3, #3
    4c42:	4602      	mov	r2, r0
    4c44:	4633      	mov	r3, r6
    4c46:	3101      	adds	r1, #1
    4c48:	e7ed      	b.n	4c26 <__vfprintf+0x7b2>
    4c4a:	ea52 0103 	orrs.w	r1, r2, r3
    4c4e:	4676      	mov	r6, lr
    4c50:	f000 8088 	beq.w	4d64 <__vfprintf+0x8f0>
    4c54:	0891      	lsrs	r1, r2, #2
    4c56:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
    4c5a:	9118      	str	r1, [sp, #96]	; 0x60
    4c5c:	0899      	lsrs	r1, r3, #2
    4c5e:	9119      	str	r1, [sp, #100]	; 0x64
    4c60:	0859      	lsrs	r1, r3, #1
    4c62:	ea4f 0032 	mov.w	r0, r2, rrx
    4c66:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    4c6a:	eb18 0800 	adds.w	r8, r8, r0
    4c6e:	4640      	mov	r0, r8
    4c70:	eb49 0901 	adc.w	r9, r9, r1
    4c74:	4649      	mov	r1, r9
    4c76:	0906      	lsrs	r6, r0, #4
    4c78:	ea46 7609 	orr.w	r6, r6, r9, lsl #28
    4c7c:	9610      	str	r6, [sp, #64]	; 0x40
    4c7e:	090e      	lsrs	r6, r1, #4
    4c80:	9611      	str	r6, [sp, #68]	; 0x44
    4c82:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
    4c86:	eb18 0800 	adds.w	r8, r8, r0
    4c8a:	4640      	mov	r0, r8
    4c8c:	eb49 0901 	adc.w	r9, r9, r1
    4c90:	4649      	mov	r1, r9
    4c92:	0a06      	lsrs	r6, r0, #8
    4c94:	ea46 6609 	orr.w	r6, r6, r9, lsl #24
    4c98:	9612      	str	r6, [sp, #72]	; 0x48
    4c9a:	0a0e      	lsrs	r6, r1, #8
    4c9c:	9613      	str	r6, [sp, #76]	; 0x4c
    4c9e:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    4ca2:	eb18 0800 	adds.w	r8, r8, r0
    4ca6:	4640      	mov	r0, r8
    4ca8:	eb49 0901 	adc.w	r9, r9, r1
    4cac:	4649      	mov	r1, r9
    4cae:	0c06      	lsrs	r6, r0, #16
    4cb0:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
    4cb4:	9614      	str	r6, [sp, #80]	; 0x50
    4cb6:	0c0e      	lsrs	r6, r1, #16
    4cb8:	9615      	str	r6, [sp, #84]	; 0x54
    4cba:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    4cbe:	eb18 0800 	adds.w	r8, r8, r0
    4cc2:	eb49 0901 	adc.w	r9, r9, r1
    4cc6:	4640      	mov	r0, r8
    4cc8:	4649      	mov	r1, r9
    4cca:	2600      	movs	r6, #0
    4ccc:	961b      	str	r6, [sp, #108]	; 0x6c
    4cce:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    4cd2:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    4cd6:	eb18 0800 	adds.w	r8, r8, r0
    4cda:	eb49 0901 	adc.w	r9, r9, r1
    4cde:	4640      	mov	r0, r8
    4ce0:	4649      	mov	r1, r9
    4ce2:	08c6      	lsrs	r6, r0, #3
    4ce4:	08c9      	lsrs	r1, r1, #3
    4ce6:	1d90      	adds	r0, r2, #6
    4ce8:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
    4cec:	910d      	str	r1, [sp, #52]	; 0x34
    4cee:	f143 0100 	adc.w	r1, r3, #0
    4cf2:	230a      	movs	r3, #10
    4cf4:	fba6 8903 	umull	r8, r9, r6, r3
    4cf8:	960c      	str	r6, [sp, #48]	; 0x30
    4cfa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4cfc:	ebb0 0008 	subs.w	r0, r0, r8
    4d00:	fb03 9906 	mla	r9, r3, r6, r9
    4d04:	ea4f 1610 	mov.w	r6, r0, lsr #4
    4d08:	eb61 0109 	sbc.w	r1, r1, r9
    4d0c:	ea46 7601 	orr.w	r6, r6, r1, lsl #28
    4d10:	0909      	lsrs	r1, r1, #4
    4d12:	9616      	str	r6, [sp, #88]	; 0x58
    4d14:	9117      	str	r1, [sp, #92]	; 0x5c
    4d16:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    4d1a:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
    4d1e:	eb10 0008 	adds.w	r0, r0, r8
    4d22:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4d26:	f102 0230 	add.w	r2, r2, #48	; 0x30
    4d2a:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    4d2e:	eb41 0109 	adc.w	r1, r1, r9
    4d32:	ab24      	add	r3, sp, #144	; 0x90
    4d34:	f80e 2003 	strb.w	r2, [lr, r3]
    4d38:	f10e 0e01 	add.w	lr, lr, #1
    4d3c:	4602      	mov	r2, r0
    4d3e:	460b      	mov	r3, r1
    4d40:	e783      	b.n	4c4a <__vfprintf+0x7d6>
    4d42:	ab1f      	add	r3, sp, #124	; 0x7c
    4d44:	9300      	str	r3, [sp, #0]
    4d46:	ab1e      	add	r3, sp, #120	; 0x78
    4d48:	9301      	str	r3, [sp, #4]
    4d4a:	ab20      	add	r3, sp, #128	; 0x80
    4d4c:	9302      	str	r3, [sp, #8]
    4d4e:	ab21      	add	r3, sp, #132	; 0x84
    4d50:	9303      	str	r3, [sp, #12]
    4d52:	9e38      	ldr	r6, [sp, #224]	; 0xe0
    4d54:	4648      	mov	r0, r9
    4d56:	a922      	add	r1, sp, #136	; 0x88
    4d58:	aa24      	add	r2, sp, #144	; 0x90
    4d5a:	463b      	mov	r3, r7
    4d5c:	47b0      	blx	r6
    4d5e:	4606      	mov	r6, r0
    4d60:	e000      	b.n	4d64 <__vfprintf+0x8f0>
    4d62:	2600      	movs	r6, #0
    4d64:	f417 6380 	ands.w	r3, r7, #1024	; 0x400
    4d68:	931c      	str	r3, [sp, #112]	; 0x70
    4d6a:	d00e      	beq.n	4d8a <__vfprintf+0x916>
    4d6c:	2300      	movs	r3, #0
    4d6e:	931e      	str	r3, [sp, #120]	; 0x78
    4d70:	9b20      	ldr	r3, [sp, #128]	; 0x80
    4d72:	2b00      	cmp	r3, #0
    4d74:	bfc4      	itt	gt
    4d76:	f103 33ff 	addgt.w	r3, r3, #4294967295
    4d7a:	931e      	strgt	r3, [sp, #120]	; 0x78
    4d7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    4d7e:	2b00      	cmp	r3, #0
    4d80:	dd08      	ble.n	4d94 <__vfprintf+0x920>
    4d82:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    4d84:	3b01      	subs	r3, #1
    4d86:	4413      	add	r3, r2
    4d88:	e003      	b.n	4d92 <__vfprintf+0x91e>
    4d8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    4d8c:	1b9b      	subs	r3, r3, r6
    4d8e:	bf48      	it	mi
    4d90:	2300      	movmi	r3, #0
    4d92:	931e      	str	r3, [sp, #120]	; 0x78
    4d94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    4d96:	981f      	ldr	r0, [sp, #124]	; 0x7c
    4d98:	eb06 0803 	add.w	r8, r6, r3
    4d9c:	f000 fac8 	bl	5330 <strlen>
    4da0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4da2:	ebc8 0b03 	rsb	fp, r8, r3
    4da6:	f007 0301 	and.w	r3, r7, #1
    4daa:	930f      	str	r3, [sp, #60]	; 0x3c
    4dac:	f240 2301 	movw	r3, #513	; 0x201
    4db0:	403b      	ands	r3, r7
    4db2:	ebc0 0b0b 	rsb	fp, r0, fp
    4db6:	b18b      	cbz	r3, 4ddc <__vfprintf+0x968>
    4db8:	f04f 0a00 	mov.w	sl, #0
    4dbc:	f04f 0800 	mov.w	r8, #0
    4dc0:	f04f 0900 	mov.w	r9, #0
    4dc4:	e040      	b.n	4e48 <__vfprintf+0x9d4>
    4dc6:	bf00      	nop
    4dc8:	0000719f 	.word	0x0000719f
    4dcc:	00007322 	.word	0x00007322
    4dd0:	00007320 	.word	0x00007320
    4dd4:	00007367 	.word	0x00007367
    4dd8:	00007378 	.word	0x00007378
    4ddc:	f04f 0800 	mov.w	r8, #0
    4de0:	f04f 0900 	mov.w	r9, #0
    4de4:	f10b 33ff 	add.w	r3, fp, #4294967295
    4de8:	ebc8 0203 	rsb	r2, r8, r3
    4dec:	2a00      	cmp	r2, #0
    4dee:	db19      	blt.n	4e24 <__vfprintf+0x9b0>
    4df0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    4df4:	4590      	cmp	r8, r2
    4df6:	eb79 0303 	sbcs.w	r3, r9, r3
    4dfa:	da0e      	bge.n	4e1a <__vfprintf+0x9a6>
    4dfc:	68a3      	ldr	r3, [r4, #8]
    4dfe:	3b01      	subs	r3, #1
    4e00:	2b00      	cmp	r3, #0
    4e02:	60a3      	str	r3, [r4, #8]
    4e04:	db05      	blt.n	4e12 <__vfprintf+0x99e>
    4e06:	6823      	ldr	r3, [r4, #0]
    4e08:	1c5a      	adds	r2, r3, #1
    4e0a:	6022      	str	r2, [r4, #0]
    4e0c:	2220      	movs	r2, #32
    4e0e:	701a      	strb	r2, [r3, #0]
    4e10:	e003      	b.n	4e1a <__vfprintf+0x9a6>
    4e12:	2020      	movs	r0, #32
    4e14:	4621      	mov	r1, r4
    4e16:	f000 fb2d 	bl	5474 <__flsbuf>
    4e1a:	f118 0801 	adds.w	r8, r8, #1
    4e1e:	f149 0900 	adc.w	r9, r9, #0
    4e22:	e7df      	b.n	4de4 <__vfprintf+0x970>
    4e24:	ea2b 7aeb 	bic.w	sl, fp, fp, asr #31
    4e28:	ebca 0b03 	rsb	fp, sl, r3
    4e2c:	e7c6      	b.n	4dbc <__vfprintf+0x948>
    4e2e:	eb18 020a 	adds.w	r2, r8, sl
    4e32:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    4e36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4e3a:	4282      	cmp	r2, r0
    4e3c:	418b      	sbcs	r3, r1
    4e3e:	db0e      	blt.n	4e5e <__vfprintf+0x9ea>
    4e40:	f118 0801 	adds.w	r8, r8, #1
    4e44:	f149 0900 	adc.w	r9, r9, #0
    4e48:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    4e4a:	eb0a 0308 	add.w	r3, sl, r8
    4e4e:	1c51      	adds	r1, r2, #1
    4e50:	911f      	str	r1, [sp, #124]	; 0x7c
    4e52:	f892 e000 	ldrb.w	lr, [r2]
    4e56:	f1be 0f00 	cmp.w	lr, #0
    4e5a:	d1e8      	bne.n	4e2e <__vfprintf+0x9ba>
    4e5c:	e00f      	b.n	4e7e <__vfprintf+0xa0a>
    4e5e:	68a3      	ldr	r3, [r4, #8]
    4e60:	3b01      	subs	r3, #1
    4e62:	2b00      	cmp	r3, #0
    4e64:	60a3      	str	r3, [r4, #8]
    4e66:	db05      	blt.n	4e74 <__vfprintf+0xa00>
    4e68:	6823      	ldr	r3, [r4, #0]
    4e6a:	1c5a      	adds	r2, r3, #1
    4e6c:	6022      	str	r2, [r4, #0]
    4e6e:	f883 e000 	strb.w	lr, [r3]
    4e72:	e7e5      	b.n	4e40 <__vfprintf+0x9cc>
    4e74:	4670      	mov	r0, lr
    4e76:	4621      	mov	r1, r4
    4e78:	f000 fafc 	bl	5474 <__flsbuf>
    4e7c:	e7e0      	b.n	4e40 <__vfprintf+0x9cc>
    4e7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4e80:	469a      	mov	sl, r3
    4e82:	2a00      	cmp	r2, #0
    4e84:	d135      	bne.n	4ef2 <__vfprintf+0xa7e>
    4e86:	f417 7f00 	tst.w	r7, #512	; 0x200
    4e8a:	bf14      	ite	ne
    4e8c:	2730      	movne	r7, #48	; 0x30
    4e8e:	2720      	moveq	r7, #32
    4e90:	2000      	movs	r0, #0
    4e92:	2100      	movs	r1, #0
    4e94:	e9cd 0106 	strd	r0, r1, [sp, #24]
    4e98:	9906      	ldr	r1, [sp, #24]
    4e9a:	f10b 32ff 	add.w	r2, fp, #4294967295
    4e9e:	1a51      	subs	r1, r2, r1
    4ea0:	2900      	cmp	r1, #0
    4ea2:	db20      	blt.n	4ee6 <__vfprintf+0xa72>
    4ea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    4ea8:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    4eac:	18c0      	adds	r0, r0, r3
    4eae:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
    4eb2:	4540      	cmp	r0, r8
    4eb4:	eb71 0209 	sbcs.w	r2, r1, r9
    4eb8:	da0f      	bge.n	4eda <__vfprintf+0xa66>
    4eba:	68a2      	ldr	r2, [r4, #8]
    4ebc:	3a01      	subs	r2, #1
    4ebe:	2a00      	cmp	r2, #0
    4ec0:	60a2      	str	r2, [r4, #8]
    4ec2:	db04      	blt.n	4ece <__vfprintf+0xa5a>
    4ec4:	6822      	ldr	r2, [r4, #0]
    4ec6:	1c51      	adds	r1, r2, #1
    4ec8:	6021      	str	r1, [r4, #0]
    4eca:	7017      	strb	r7, [r2, #0]
    4ecc:	e005      	b.n	4eda <__vfprintf+0xa66>
    4ece:	4638      	mov	r0, r7
    4ed0:	4621      	mov	r1, r4
    4ed2:	931d      	str	r3, [sp, #116]	; 0x74
    4ed4:	f000 face 	bl	5474 <__flsbuf>
    4ed8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4eda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    4ede:	3001      	adds	r0, #1
    4ee0:	f141 0100 	adc.w	r1, r1, #0
    4ee4:	e7d6      	b.n	4e94 <__vfprintf+0xa20>
    4ee6:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    4eea:	eb03 0a0b 	add.w	sl, r3, fp
    4eee:	ebcb 0b02 	rsb	fp, fp, r2
    4ef2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4ef4:	2b00      	cmp	r3, #0
    4ef6:	d07c      	beq.n	4ff2 <__vfprintf+0xb7e>
    4ef8:	2700      	movs	r7, #0
    4efa:	42b7      	cmp	r7, r6
    4efc:	f280 80d5 	bge.w	50aa <__vfprintf+0xc36>
    4f00:	ab24      	add	r3, sp, #144	; 0x90
    4f02:	f817 e003 	ldrb.w	lr, [r7, r3]
    4f06:	f1be 0f3c 	cmp.w	lr, #60	; 0x3c
    4f0a:	d007      	beq.n	4f1c <__vfprintf+0xaa8>
    4f0c:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
    4f10:	d151      	bne.n	4fb6 <__vfprintf+0xb42>
    4f12:	f04f 0800 	mov.w	r8, #0
    4f16:	f04f 0900 	mov.w	r9, #0
    4f1a:	e034      	b.n	4f86 <__vfprintf+0xb12>
    4f1c:	f04f 0800 	mov.w	r8, #0
    4f20:	f04f 0900 	mov.w	r9, #0
    4f24:	9a20      	ldr	r2, [sp, #128]	; 0x80
    4f26:	eb0a 0308 	add.w	r3, sl, r8
    4f2a:	3a01      	subs	r2, #1
    4f2c:	2a00      	cmp	r2, #0
    4f2e:	9220      	str	r2, [sp, #128]	; 0x80
    4f30:	db5c      	blt.n	4fec <__vfprintf+0xb78>
    4f32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4f36:	eb18 020a 	adds.w	r2, r8, sl
    4f3a:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    4f3e:	4282      	cmp	r2, r0
    4f40:	418b      	sbcs	r3, r1
    4f42:	da0e      	bge.n	4f62 <__vfprintf+0xaee>
    4f44:	68a3      	ldr	r3, [r4, #8]
    4f46:	3b01      	subs	r3, #1
    4f48:	2b00      	cmp	r3, #0
    4f4a:	60a3      	str	r3, [r4, #8]
    4f4c:	db05      	blt.n	4f5a <__vfprintf+0xae6>
    4f4e:	6823      	ldr	r3, [r4, #0]
    4f50:	1c5a      	adds	r2, r3, #1
    4f52:	6022      	str	r2, [r4, #0]
    4f54:	2230      	movs	r2, #48	; 0x30
    4f56:	701a      	strb	r2, [r3, #0]
    4f58:	e003      	b.n	4f62 <__vfprintf+0xaee>
    4f5a:	2030      	movs	r0, #48	; 0x30
    4f5c:	4621      	mov	r1, r4
    4f5e:	f000 fa89 	bl	5474 <__flsbuf>
    4f62:	f118 0801 	adds.w	r8, r8, #1
    4f66:	f149 0900 	adc.w	r9, r9, #0
    4f6a:	e7db      	b.n	4f24 <__vfprintf+0xab0>
    4f6c:	eb18 020a 	adds.w	r2, r8, sl
    4f70:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    4f74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4f78:	4282      	cmp	r2, r0
    4f7a:	418b      	sbcs	r3, r1
    4f7c:	db0b      	blt.n	4f96 <__vfprintf+0xb22>
    4f7e:	f118 0801 	adds.w	r8, r8, #1
    4f82:	f149 0900 	adc.w	r9, r9, #0
    4f86:	9a21      	ldr	r2, [sp, #132]	; 0x84
    4f88:	eb0a 0308 	add.w	r3, sl, r8
    4f8c:	3a01      	subs	r2, #1
    4f8e:	2a00      	cmp	r2, #0
    4f90:	9221      	str	r2, [sp, #132]	; 0x84
    4f92:	daeb      	bge.n	4f6c <__vfprintf+0xaf8>
    4f94:	e02a      	b.n	4fec <__vfprintf+0xb78>
    4f96:	68a3      	ldr	r3, [r4, #8]
    4f98:	3b01      	subs	r3, #1
    4f9a:	2b00      	cmp	r3, #0
    4f9c:	60a3      	str	r3, [r4, #8]
    4f9e:	db05      	blt.n	4fac <__vfprintf+0xb38>
    4fa0:	6823      	ldr	r3, [r4, #0]
    4fa2:	1c5a      	adds	r2, r3, #1
    4fa4:	6022      	str	r2, [r4, #0]
    4fa6:	2230      	movs	r2, #48	; 0x30
    4fa8:	701a      	strb	r2, [r3, #0]
    4faa:	e7e8      	b.n	4f7e <__vfprintf+0xb0a>
    4fac:	4621      	mov	r1, r4
    4fae:	2030      	movs	r0, #48	; 0x30
    4fb0:	f000 fa60 	bl	5474 <__flsbuf>
    4fb4:	e7e3      	b.n	4f7e <__vfprintf+0xb0a>
    4fb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4fba:	ea4f 79ea 	mov.w	r9, sl, asr #31
    4fbe:	4582      	cmp	sl, r0
    4fc0:	eb79 0201 	sbcs.w	r2, r9, r1
    4fc4:	f10a 0301 	add.w	r3, sl, #1
    4fc8:	da10      	bge.n	4fec <__vfprintf+0xb78>
    4fca:	68a2      	ldr	r2, [r4, #8]
    4fcc:	3a01      	subs	r2, #1
    4fce:	2a00      	cmp	r2, #0
    4fd0:	60a2      	str	r2, [r4, #8]
    4fd2:	db05      	blt.n	4fe0 <__vfprintf+0xb6c>
    4fd4:	6822      	ldr	r2, [r4, #0]
    4fd6:	1c51      	adds	r1, r2, #1
    4fd8:	6021      	str	r1, [r4, #0]
    4fda:	f882 e000 	strb.w	lr, [r2]
    4fde:	e005      	b.n	4fec <__vfprintf+0xb78>
    4fe0:	4670      	mov	r0, lr
    4fe2:	4621      	mov	r1, r4
    4fe4:	9306      	str	r3, [sp, #24]
    4fe6:	f000 fa45 	bl	5474 <__flsbuf>
    4fea:	9b06      	ldr	r3, [sp, #24]
    4fec:	3701      	adds	r7, #1
    4fee:	469a      	mov	sl, r3
    4ff0:	e783      	b.n	4efa <__vfprintf+0xa86>
    4ff2:	f04f 0800 	mov.w	r8, #0
    4ff6:	f04f 0900 	mov.w	r9, #0
    4ffa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    4ffc:	eb0a 0708 	add.w	r7, sl, r8
    5000:	3b01      	subs	r3, #1
    5002:	2b00      	cmp	r3, #0
    5004:	931e      	str	r3, [sp, #120]	; 0x78
    5006:	db1c      	blt.n	5042 <__vfprintf+0xbce>
    5008:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    500c:	eb18 020a 	adds.w	r2, r8, sl
    5010:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    5014:	4282      	cmp	r2, r0
    5016:	418b      	sbcs	r3, r1
    5018:	da0e      	bge.n	5038 <__vfprintf+0xbc4>
    501a:	68a3      	ldr	r3, [r4, #8]
    501c:	3b01      	subs	r3, #1
    501e:	2b00      	cmp	r3, #0
    5020:	60a3      	str	r3, [r4, #8]
    5022:	db05      	blt.n	5030 <__vfprintf+0xbbc>
    5024:	6823      	ldr	r3, [r4, #0]
    5026:	1c5a      	adds	r2, r3, #1
    5028:	6022      	str	r2, [r4, #0]
    502a:	2230      	movs	r2, #48	; 0x30
    502c:	701a      	strb	r2, [r3, #0]
    502e:	e003      	b.n	5038 <__vfprintf+0xbc4>
    5030:	2030      	movs	r0, #48	; 0x30
    5032:	4621      	mov	r1, r4
    5034:	f000 fa1e 	bl	5474 <__flsbuf>
    5038:	f118 0801 	adds.w	r8, r8, #1
    503c:	f149 0900 	adc.w	r9, r9, #0
    5040:	e7db      	b.n	4ffa <__vfprintf+0xb86>
    5042:	ab2c      	add	r3, sp, #176	; 0xb0
    5044:	eb03 0a06 	add.w	sl, r3, r6
    5048:	f1aa 0a21 	sub.w	sl, sl, #33	; 0x21
    504c:	f04f 0800 	mov.w	r8, #0
    5050:	f04f 0900 	mov.w	r9, #0
    5054:	ebc8 0306 	rsb	r3, r8, r6
    5058:	2b00      	cmp	r3, #0
    505a:	dd20      	ble.n	509e <__vfprintf+0xc2a>
    505c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5060:	eb18 0207 	adds.w	r2, r8, r7
    5064:	eb49 73e7 	adc.w	r3, r9, r7, asr #31
    5068:	4282      	cmp	r2, r0
    506a:	418b      	sbcs	r3, r1
    506c:	da10      	bge.n	5090 <__vfprintf+0xc1c>
    506e:	68a3      	ldr	r3, [r4, #8]
    5070:	3b01      	subs	r3, #1
    5072:	2b00      	cmp	r3, #0
    5074:	60a3      	str	r3, [r4, #8]
    5076:	db06      	blt.n	5086 <__vfprintf+0xc12>
    5078:	6823      	ldr	r3, [r4, #0]
    507a:	1c5a      	adds	r2, r3, #1
    507c:	6022      	str	r2, [r4, #0]
    507e:	f89a 2000 	ldrb.w	r2, [sl]
    5082:	701a      	strb	r2, [r3, #0]
    5084:	e004      	b.n	5090 <__vfprintf+0xc1c>
    5086:	f89a 0000 	ldrb.w	r0, [sl]
    508a:	4621      	mov	r1, r4
    508c:	f000 f9f2 	bl	5474 <__flsbuf>
    5090:	f118 0801 	adds.w	r8, r8, #1
    5094:	f10a 3aff 	add.w	sl, sl, #4294967295
    5098:	f149 0900 	adc.w	r9, r9, #0
    509c:	e7da      	b.n	5054 <__vfprintf+0xbe0>
    509e:	2e00      	cmp	r6, #0
    50a0:	bfac      	ite	ge
    50a2:	eb07 0a06 	addge.w	sl, r7, r6
    50a6:	f107 0a00 	addlt.w	sl, r7, #0
    50aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    50ac:	b32b      	cbz	r3, 50fa <__vfprintf+0xc86>
    50ae:	2600      	movs	r6, #0
    50b0:	2700      	movs	r7, #0
    50b2:	43f3      	mvns	r3, r6
    50b4:	eb13 0f0b 	cmn.w	r3, fp
    50b8:	d41b      	bmi.n	50f2 <__vfprintf+0xc7e>
    50ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    50be:	eb16 020a 	adds.w	r2, r6, sl
    50c2:	eb47 73ea 	adc.w	r3, r7, sl, asr #31
    50c6:	4282      	cmp	r2, r0
    50c8:	418b      	sbcs	r3, r1
    50ca:	da0e      	bge.n	50ea <__vfprintf+0xc76>
    50cc:	68a3      	ldr	r3, [r4, #8]
    50ce:	3b01      	subs	r3, #1
    50d0:	2b00      	cmp	r3, #0
    50d2:	60a3      	str	r3, [r4, #8]
    50d4:	db05      	blt.n	50e2 <__vfprintf+0xc6e>
    50d6:	6823      	ldr	r3, [r4, #0]
    50d8:	1c5a      	adds	r2, r3, #1
    50da:	6022      	str	r2, [r4, #0]
    50dc:	2220      	movs	r2, #32
    50de:	701a      	strb	r2, [r3, #0]
    50e0:	e003      	b.n	50ea <__vfprintf+0xc76>
    50e2:	2020      	movs	r0, #32
    50e4:	4621      	mov	r1, r4
    50e6:	f000 f9c5 	bl	5474 <__flsbuf>
    50ea:	3601      	adds	r6, #1
    50ec:	f147 0700 	adc.w	r7, r7, #0
    50f0:	e7df      	b.n	50b2 <__vfprintf+0xc3e>
    50f2:	f1bb 0f00 	cmp.w	fp, #0
    50f6:	bfa8      	it	ge
    50f8:	44da      	addge	sl, fp
    50fa:	9b05      	ldr	r3, [sp, #20]
    50fc:	4453      	add	r3, sl
    50fe:	9305      	str	r3, [sp, #20]
    5100:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    5104:	9e05      	ldr	r6, [sp, #20]
    5106:	9605      	str	r6, [sp, #20]
    5108:	462b      	mov	r3, r5
    510a:	f7ff b9be 	b.w	448a <__vfprintf+0x16>
    510e:	9805      	ldr	r0, [sp, #20]
    5110:	b02d      	add	sp, #180	; 0xb4
    5112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5116:	bf00      	nop

00005118 <ch_val>:
    5118:	4b0a      	ldr	r3, [pc, #40]	; (5144 <ch_val+0x2c>)
    511a:	4403      	add	r3, r0
    511c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
    5120:	069a      	lsls	r2, r3, #26
    5122:	d501      	bpl.n	5128 <ch_val+0x10>
    5124:	3830      	subs	r0, #48	; 0x30
    5126:	e008      	b.n	513a <ch_val+0x22>
    5128:	071a      	lsls	r2, r3, #28
    512a:	d501      	bpl.n	5130 <ch_val+0x18>
    512c:	3857      	subs	r0, #87	; 0x57
    512e:	e004      	b.n	513a <ch_val+0x22>
    5130:	06db      	lsls	r3, r3, #27
    5132:	bf4c      	ite	mi
    5134:	3837      	submi	r0, #55	; 0x37
    5136:	f04f 30ff 	movpl.w	r0, #4294967295
    513a:	4288      	cmp	r0, r1
    513c:	bfa8      	it	ge
    513e:	f04f 30ff 	movge.w	r0, #4294967295
    5142:	4770      	bx	lr
    5144:	000071a0 	.word	0x000071a0

00005148 <_strtoul>:
    5148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    514c:	4680      	mov	r8, r0
    514e:	4689      	mov	r9, r1
    5150:	4616      	mov	r6, r2
    5152:	4603      	mov	r3, r0
    5154:	461d      	mov	r5, r3
    5156:	f815 0b01 	ldrb.w	r0, [r5], #1
    515a:	b1d0      	cbz	r0, 5192 <_strtoul+0x4a>
    515c:	4a27      	ldr	r2, [pc, #156]	; (51fc <_strtoul+0xb4>)
    515e:	4402      	add	r2, r0
    5160:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
    5164:	07d2      	lsls	r2, r2, #31
    5166:	d501      	bpl.n	516c <_strtoul+0x24>
    5168:	462b      	mov	r3, r5
    516a:	e7f3      	b.n	5154 <_strtoul+0xc>
    516c:	2830      	cmp	r0, #48	; 0x30
    516e:	d110      	bne.n	5192 <_strtoul+0x4a>
    5170:	7858      	ldrb	r0, [r3, #1]
    5172:	1c9d      	adds	r5, r3, #2
    5174:	f000 02df 	and.w	r2, r0, #223	; 0xdf
    5178:	2a58      	cmp	r2, #88	; 0x58
    517a:	d106      	bne.n	518a <_strtoul+0x42>
    517c:	f036 0710 	bics.w	r7, r6, #16
    5180:	d13a      	bne.n	51f8 <_strtoul+0xb0>
    5182:	1cdd      	adds	r5, r3, #3
    5184:	7898      	ldrb	r0, [r3, #2]
    5186:	2610      	movs	r6, #16
    5188:	e008      	b.n	519c <_strtoul+0x54>
    518a:	2701      	movs	r7, #1
    518c:	b936      	cbnz	r6, 519c <_strtoul+0x54>
    518e:	2608      	movs	r6, #8
    5190:	e004      	b.n	519c <_strtoul+0x54>
    5192:	b10e      	cbz	r6, 5198 <_strtoul+0x50>
    5194:	2700      	movs	r7, #0
    5196:	e001      	b.n	519c <_strtoul+0x54>
    5198:	4637      	mov	r7, r6
    519a:	260a      	movs	r6, #10
    519c:	2400      	movs	r4, #0
    519e:	46a2      	mov	sl, r4
    51a0:	46a3      	mov	fp, r4
    51a2:	4631      	mov	r1, r6
    51a4:	f7ff ffb8 	bl	5118 <ch_val>
    51a8:	2800      	cmp	r0, #0
    51aa:	db0e      	blt.n	51ca <_strtoul+0x82>
    51ac:	fb06 0004 	mla	r0, r6, r4, r0
    51b0:	0c03      	lsrs	r3, r0, #16
    51b2:	fb06 3a0a 	mla	sl, r6, sl, r3
    51b6:	f5ba 3f80 	cmp.w	sl, #65536	; 0x10000
    51ba:	b284      	uxth	r4, r0
    51bc:	bf28      	it	cs
    51be:	f04f 0b01 	movcs.w	fp, #1
    51c2:	f815 0b01 	ldrb.w	r0, [r5], #1
    51c6:	2701      	movs	r7, #1
    51c8:	e7eb      	b.n	51a2 <_strtoul+0x5a>
    51ca:	f1b9 0f00 	cmp.w	r9, #0
    51ce:	d005      	beq.n	51dc <_strtoul+0x94>
    51d0:	b10f      	cbz	r7, 51d6 <_strtoul+0x8e>
    51d2:	3d01      	subs	r5, #1
    51d4:	e000      	b.n	51d8 <_strtoul+0x90>
    51d6:	4645      	mov	r5, r8
    51d8:	f8c9 5000 	str.w	r5, [r9]
    51dc:	f1bb 0f00 	cmp.w	fp, #0
    51e0:	d006      	beq.n	51f0 <_strtoul+0xa8>
    51e2:	4b07      	ldr	r3, [pc, #28]	; (5200 <_strtoul+0xb8>)
    51e4:	2222      	movs	r2, #34	; 0x22
    51e6:	601a      	str	r2, [r3, #0]
    51e8:	f04f 30ff 	mov.w	r0, #4294967295
    51ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51f0:	ea44 400a 	orr.w	r0, r4, sl, lsl #16
    51f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51f8:	2701      	movs	r7, #1
    51fa:	e7cf      	b.n	519c <_strtoul+0x54>
    51fc:	000071a0 	.word	0x000071a0
    5200:	10000b20 	.word	0x10000b20

00005204 <strtol>:
    5204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5206:	460e      	mov	r6, r1
    5208:	4607      	mov	r7, r0
    520a:	4601      	mov	r1, r0
    520c:	460d      	mov	r5, r1
    520e:	f815 3b01 	ldrb.w	r3, [r5], #1
    5212:	b17b      	cbz	r3, 5234 <strtol+0x30>
    5214:	4817      	ldr	r0, [pc, #92]	; (5274 <strtol+0x70>)
    5216:	4418      	add	r0, r3
    5218:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
    521c:	f014 0401 	ands.w	r4, r4, #1
    5220:	d001      	beq.n	5226 <strtol+0x22>
    5222:	4629      	mov	r1, r5
    5224:	e7f2      	b.n	520c <strtol+0x8>
    5226:	2b2b      	cmp	r3, #43	; 0x2b
    5228:	d006      	beq.n	5238 <strtol+0x34>
    522a:	2b2d      	cmp	r3, #45	; 0x2d
    522c:	d102      	bne.n	5234 <strtol+0x30>
    522e:	f44f 7400 	mov.w	r4, #512	; 0x200
    5232:	e001      	b.n	5238 <strtol+0x34>
    5234:	460d      	mov	r5, r1
    5236:	2400      	movs	r4, #0
    5238:	4628      	mov	r0, r5
    523a:	a901      	add	r1, sp, #4
    523c:	f7ff ff84 	bl	5148 <_strtoul>
    5240:	b126      	cbz	r6, 524c <strtol+0x48>
    5242:	9b01      	ldr	r3, [sp, #4]
    5244:	42ab      	cmp	r3, r5
    5246:	bf08      	it	eq
    5248:	463b      	moveq	r3, r7
    524a:	6033      	str	r3, [r6, #0]
    524c:	05a3      	lsls	r3, r4, #22
    524e:	d508      	bpl.n	5262 <strtol+0x5e>
    5250:	4240      	negs	r0, r0
    5252:	2800      	cmp	r0, #0
    5254:	dd0c      	ble.n	5270 <strtol+0x6c>
    5256:	4b08      	ldr	r3, [pc, #32]	; (5278 <strtol+0x74>)
    5258:	2222      	movs	r2, #34	; 0x22
    525a:	601a      	str	r2, [r3, #0]
    525c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    5260:	e006      	b.n	5270 <strtol+0x6c>
    5262:	2800      	cmp	r0, #0
    5264:	bfbf      	itttt	lt
    5266:	4b04      	ldrlt	r3, [pc, #16]	; (5278 <strtol+0x74>)
    5268:	2222      	movlt	r2, #34	; 0x22
    526a:	601a      	strlt	r2, [r3, #0]
    526c:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
    5270:	b003      	add	sp, #12
    5272:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5274:	000071a0 	.word	0x000071a0
    5278:	10000b20 	.word	0x10000b20

0000527c <atoi>:
    527c:	b538      	push	{r3, r4, r5, lr}
    527e:	4c04      	ldr	r4, [pc, #16]	; (5290 <atoi+0x14>)
    5280:	2100      	movs	r1, #0
    5282:	6825      	ldr	r5, [r4, #0]
    5284:	220a      	movs	r2, #10
    5286:	f7ff ffbd 	bl	5204 <strtol>
    528a:	6025      	str	r5, [r4, #0]
    528c:	bd38      	pop	{r3, r4, r5, pc}
    528e:	bf00      	nop
    5290:	10000b20 	.word	0x10000b20

00005294 <setvbuf>:
    5294:	b570      	push	{r4, r5, r6, lr}
    5296:	68c4      	ldr	r4, [r0, #12]
    5298:	07a5      	lsls	r5, r4, #30
    529a:	d017      	beq.n	52cc <setvbuf+0x38>
    529c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    52a0:	d009      	beq.n	52b6 <setvbuf+0x22>
    52a2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    52a6:	d003      	beq.n	52b0 <setvbuf+0x1c>
    52a8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    52ac:	d10e      	bne.n	52cc <setvbuf+0x38>
    52ae:	e002      	b.n	52b6 <setvbuf+0x22>
    52b0:	6a41      	ldr	r1, [r0, #36]	; 0x24
    52b2:	2301      	movs	r3, #1
    52b4:	e003      	b.n	52be <setvbuf+0x2a>
    52b6:	4d06      	ldr	r5, [pc, #24]	; (52d0 <setvbuf+0x3c>)
    52b8:	1e5e      	subs	r6, r3, #1
    52ba:	42ae      	cmp	r6, r5
    52bc:	d806      	bhi.n	52cc <setvbuf+0x38>
    52be:	4314      	orrs	r4, r2
    52c0:	6101      	str	r1, [r0, #16]
    52c2:	6001      	str	r1, [r0, #0]
    52c4:	61c3      	str	r3, [r0, #28]
    52c6:	60c4      	str	r4, [r0, #12]
    52c8:	2000      	movs	r0, #0
    52ca:	bd70      	pop	{r4, r5, r6, pc}
    52cc:	2001      	movs	r0, #1
    52ce:	bd70      	pop	{r4, r5, r6, pc}
    52d0:	00fffffe 	.word	0x00fffffe

000052d4 <strchr>:
    52d4:	b510      	push	{r4, lr}
    52d6:	4603      	mov	r3, r0
    52d8:	f810 2b01 	ldrb.w	r2, [r0], #1
    52dc:	b2cc      	uxtb	r4, r1
    52de:	42a2      	cmp	r2, r4
    52e0:	d003      	beq.n	52ea <strchr+0x16>
    52e2:	2a00      	cmp	r2, #0
    52e4:	d1f7      	bne.n	52d6 <strchr+0x2>
    52e6:	4610      	mov	r0, r2
    52e8:	bd10      	pop	{r4, pc}
    52ea:	4618      	mov	r0, r3
    52ec:	bd10      	pop	{r4, pc}

000052ee <strcpy>:
    52ee:	ea40 0301 	orr.w	r3, r0, r1
    52f2:	079b      	lsls	r3, r3, #30
    52f4:	b510      	push	{r4, lr}
    52f6:	d113      	bne.n	5320 <strcpy+0x32>
    52f8:	4602      	mov	r2, r0
    52fa:	3904      	subs	r1, #4
    52fc:	f851 3f04 	ldr.w	r3, [r1, #4]!
    5300:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
    5304:	ea24 0403 	bic.w	r4, r4, r3
    5308:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    530c:	d102      	bne.n	5314 <strcpy+0x26>
    530e:	f842 3b04 	str.w	r3, [r2], #4
    5312:	e7f3      	b.n	52fc <strcpy+0xe>
    5314:	b2d9      	uxtb	r1, r3
    5316:	f802 1b01 	strb.w	r1, [r2], #1
    531a:	b141      	cbz	r1, 532e <strcpy+0x40>
    531c:	121b      	asrs	r3, r3, #8
    531e:	e7f9      	b.n	5314 <strcpy+0x26>
    5320:	1e42      	subs	r2, r0, #1
    5322:	f811 3b01 	ldrb.w	r3, [r1], #1
    5326:	f802 3f01 	strb.w	r3, [r2, #1]!
    532a:	2b00      	cmp	r3, #0
    532c:	d1f9      	bne.n	5322 <strcpy+0x34>
    532e:	bd10      	pop	{r4, pc}

00005330 <strlen>:
    5330:	b510      	push	{r4, lr}
    5332:	1c42      	adds	r2, r0, #1
    5334:	0783      	lsls	r3, r0, #30
    5336:	d005      	beq.n	5344 <strlen+0x14>
    5338:	f810 3b01 	ldrb.w	r3, [r0], #1
    533c:	2b00      	cmp	r3, #0
    533e:	d1f9      	bne.n	5334 <strlen+0x4>
    5340:	1a80      	subs	r0, r0, r2
    5342:	bd10      	pop	{r4, pc}
    5344:	4603      	mov	r3, r0
    5346:	f850 1b04 	ldr.w	r1, [r0], #4
    534a:	f1a1 3401 	sub.w	r4, r1, #16843009	; 0x1010101
    534e:	ea24 0401 	bic.w	r4, r4, r1
    5352:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    5356:	d0f5      	beq.n	5344 <strlen+0x14>
    5358:	f011 0fff 	tst.w	r1, #255	; 0xff
    535c:	d00a      	beq.n	5374 <strlen+0x44>
    535e:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
    5362:	d005      	beq.n	5370 <strlen+0x40>
    5364:	f411 0f7f 	tst.w	r1, #16711680	; 0xff0000
    5368:	bf14      	ite	ne
    536a:	4603      	movne	r3, r0
    536c:	3303      	addeq	r3, #3
    536e:	e002      	b.n	5376 <strlen+0x46>
    5370:	3302      	adds	r3, #2
    5372:	e000      	b.n	5376 <strlen+0x46>
    5374:	3301      	adds	r3, #1
    5376:	1a98      	subs	r0, r3, r2
    5378:	bd10      	pop	{r4, pc}

0000537a <strncpy>:
    537a:	ea40 0301 	orr.w	r3, r0, r1
    537e:	b570      	push	{r4, r5, r6, lr}
    5380:	079d      	lsls	r5, r3, #30
    5382:	d111      	bne.n	53a8 <strncpy+0x2e>
    5384:	460e      	mov	r6, r1
    5386:	4603      	mov	r3, r0
    5388:	2a03      	cmp	r2, #3
    538a:	4631      	mov	r1, r6
    538c:	d90d      	bls.n	53aa <strncpy+0x30>
    538e:	f856 5b04 	ldr.w	r5, [r6], #4
    5392:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    5396:	ea24 0405 	bic.w	r4, r4, r5
    539a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    539e:	d104      	bne.n	53aa <strncpy+0x30>
    53a0:	f843 5b04 	str.w	r5, [r3], #4
    53a4:	3a04      	subs	r2, #4
    53a6:	e7ef      	b.n	5388 <strncpy+0xe>
    53a8:	4603      	mov	r3, r0
    53aa:	3a01      	subs	r2, #1
    53ac:	1c54      	adds	r4, r2, #1
    53ae:	d00f      	beq.n	53d0 <strncpy+0x56>
    53b0:	f811 4b01 	ldrb.w	r4, [r1], #1
    53b4:	1e55      	subs	r5, r2, #1
    53b6:	f803 4b01 	strb.w	r4, [r3], #1
    53ba:	b93c      	cbnz	r4, 53cc <strncpy+0x52>
    53bc:	441a      	add	r2, r3
    53be:	4293      	cmp	r3, r2
    53c0:	d003      	beq.n	53ca <strncpy+0x50>
    53c2:	2100      	movs	r1, #0
    53c4:	f803 1b01 	strb.w	r1, [r3], #1
    53c8:	e7f9      	b.n	53be <strncpy+0x44>
    53ca:	bd70      	pop	{r4, r5, r6, pc}
    53cc:	462a      	mov	r2, r5
    53ce:	e7ed      	b.n	53ac <strncpy+0x32>
    53d0:	bd70      	pop	{r4, r5, r6, pc}

000053d2 <strstr>:
    53d2:	b510      	push	{r4, lr}
    53d4:	2300      	movs	r3, #0
    53d6:	5cca      	ldrb	r2, [r1, r3]
    53d8:	b14a      	cbz	r2, 53ee <strstr+0x1c>
    53da:	5cc4      	ldrb	r4, [r0, r3]
    53dc:	4294      	cmp	r4, r2
    53de:	d101      	bne.n	53e4 <strstr+0x12>
    53e0:	3301      	adds	r3, #1
    53e2:	e7f8      	b.n	53d6 <strstr+0x4>
    53e4:	f810 3b01 	ldrb.w	r3, [r0], #1
    53e8:	2b00      	cmp	r3, #0
    53ea:	d1f3      	bne.n	53d4 <strstr+0x2>
    53ec:	4618      	mov	r0, r3
    53ee:	bd10      	pop	{r4, pc}

000053f0 <_sbrk>:
    53f0:	b538      	push	{r3, r4, r5, lr}
    53f2:	4b0c      	ldr	r3, [pc, #48]	; (5424 <_sbrk+0x34>)
    53f4:	681a      	ldr	r2, [r3, #0]
    53f6:	b90a      	cbnz	r2, 53fc <_sbrk+0xc>
    53f8:	4a0b      	ldr	r2, [pc, #44]	; (5428 <_sbrk+0x38>)
    53fa:	601a      	str	r2, [r3, #0]
    53fc:	1cc4      	adds	r4, r0, #3
    53fe:	681d      	ldr	r5, [r3, #0]
    5400:	f024 0403 	bic.w	r4, r4, #3
    5404:	442c      	add	r4, r5
    5406:	4620      	mov	r0, r4
    5408:	f000 fac8 	bl	599c <__check_heap_overflow>
    540c:	b918      	cbnz	r0, 5416 <_sbrk+0x26>
    540e:	4b05      	ldr	r3, [pc, #20]	; (5424 <_sbrk+0x34>)
    5410:	4628      	mov	r0, r5
    5412:	601c      	str	r4, [r3, #0]
    5414:	bd38      	pop	{r3, r4, r5, pc}
    5416:	4b05      	ldr	r3, [pc, #20]	; (542c <_sbrk+0x3c>)
    5418:	220c      	movs	r2, #12
    541a:	601a      	str	r2, [r3, #0]
    541c:	f04f 30ff 	mov.w	r0, #4294967295
    5420:	bd38      	pop	{r3, r4, r5, pc}
    5422:	bf00      	nop
    5424:	10001b54 	.word	0x10001b54
    5428:	10001b58 	.word	0x10001b58
    542c:	10000b20 	.word	0x10000b20

00005430 <_deferredlazyseek>:
    5430:	68c3      	ldr	r3, [r0, #12]
    5432:	b510      	push	{r4, lr}
    5434:	f023 0320 	bic.w	r3, r3, #32
    5438:	60c3      	str	r3, [r0, #12]
    543a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    543c:	6982      	ldr	r2, [r0, #24]
    543e:	685b      	ldr	r3, [r3, #4]
    5440:	4604      	mov	r4, r0
    5442:	429a      	cmp	r2, r3
    5444:	d00f      	beq.n	5466 <_deferredlazyseek+0x36>
    5446:	f000 f8eb 	bl	5620 <_fflush>
    544a:	68e3      	ldr	r3, [r4, #12]
    544c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    544e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    5452:	f023 0310 	bic.w	r3, r3, #16
    5456:	f043 0310 	orr.w	r3, r3, #16
    545a:	60e3      	str	r3, [r4, #12]
    545c:	6853      	ldr	r3, [r2, #4]
    545e:	61a3      	str	r3, [r4, #24]
    5460:	6923      	ldr	r3, [r4, #16]
    5462:	6093      	str	r3, [r2, #8]
    5464:	6023      	str	r3, [r4, #0]
    5466:	68e3      	ldr	r3, [r4, #12]
    5468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    546c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    5470:	60e3      	str	r3, [r4, #12]
    5472:	bd10      	pop	{r4, pc}

00005474 <__flsbuf>:
    5474:	68cb      	ldr	r3, [r1, #12]
    5476:	b570      	push	{r4, r5, r6, lr}
    5478:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
    547c:	069b      	lsls	r3, r3, #26
    547e:	4605      	mov	r5, r0
    5480:	460c      	mov	r4, r1
    5482:	60ca      	str	r2, [r1, #12]
    5484:	d502      	bpl.n	548c <__flsbuf+0x18>
    5486:	4608      	mov	r0, r1
    5488:	f7ff ffd2 	bl	5430 <_deferredlazyseek>
    548c:	68a1      	ldr	r1, [r4, #8]
    548e:	68e3      	ldr	r3, [r4, #12]
    5490:	1c4e      	adds	r6, r1, #1
    5492:	da0d      	bge.n	54b0 <__flsbuf+0x3c>
    5494:	0598      	lsls	r0, r3, #22
    5496:	d40b      	bmi.n	54b0 <__flsbuf+0x3c>
    5498:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
    549c:	60e3      	str	r3, [r4, #12]
    549e:	f06f 0201 	mvn.w	r2, #1
    54a2:	6823      	ldr	r3, [r4, #0]
    54a4:	1a52      	subs	r2, r2, r1
    54a6:	60a2      	str	r2, [r4, #8]
    54a8:	1c5a      	adds	r2, r3, #1
    54aa:	6022      	str	r2, [r4, #0]
    54ac:	701d      	strb	r5, [r3, #0]
    54ae:	e056      	b.n	555e <__flsbuf+0xea>
    54b0:	f241 028a 	movw	r2, #4234	; 0x108a
    54b4:	401a      	ands	r2, r3
    54b6:	2a02      	cmp	r2, #2
    54b8:	461e      	mov	r6, r3
    54ba:	d005      	beq.n	54c8 <__flsbuf+0x54>
    54bc:	2200      	movs	r2, #0
    54be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    54c2:	60a2      	str	r2, [r4, #8]
    54c4:	60e3      	str	r3, [r4, #12]
    54c6:	e052      	b.n	556e <__flsbuf+0xfa>
    54c8:	f24a 0110 	movw	r1, #40976	; 0xa010
    54cc:	4019      	ands	r1, r3
    54ce:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    54d2:	d10a      	bne.n	54ea <__flsbuf+0x76>
    54d4:	2100      	movs	r1, #0
    54d6:	4620      	mov	r0, r4
    54d8:	f000 f9a8 	bl	582c <fseek>
    54dc:	68e3      	ldr	r3, [r4, #12]
    54de:	0699      	lsls	r1, r3, #26
    54e0:	d502      	bpl.n	54e8 <__flsbuf+0x74>
    54e2:	4620      	mov	r0, r4
    54e4:	f7ff ffa4 	bl	5430 <_deferredlazyseek>
    54e8:	68e6      	ldr	r6, [r4, #12]
    54ea:	f446 3390 	orr.w	r3, r6, #73728	; 0x12000
    54ee:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    54f2:	60e3      	str	r3, [r4, #12]
    54f4:	d11c      	bne.n	5530 <__flsbuf+0xbc>
    54f6:	6960      	ldr	r0, [r4, #20]
    54f8:	f000 ff06 	bl	6308 <__sys_istty>
    54fc:	b150      	cbz	r0, 5514 <__flsbuf+0xa0>
    54fe:	0572      	lsls	r2, r6, #21
    5500:	d508      	bpl.n	5514 <__flsbuf+0xa0>
    5502:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5504:	6123      	str	r3, [r4, #16]
    5506:	6023      	str	r3, [r4, #0]
    5508:	2301      	movs	r3, #1
    550a:	61e3      	str	r3, [r4, #28]
    550c:	f446 3392 	orr.w	r3, r6, #74752	; 0x12400
    5510:	60e3      	str	r3, [r4, #12]
    5512:	e00d      	b.n	5530 <__flsbuf+0xbc>
    5514:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    5518:	f7fe fa5a 	bl	39d0 <_Csys_alloc>
    551c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    5520:	68e2      	ldr	r2, [r4, #12]
    5522:	61e3      	str	r3, [r4, #28]
    5524:	f446 3394 	orr.w	r3, r6, #75776	; 0x12800
    5528:	431a      	orrs	r2, r3
    552a:	6120      	str	r0, [r4, #16]
    552c:	6020      	str	r0, [r4, #0]
    552e:	60e2      	str	r2, [r4, #12]
    5530:	f413 6f10 	tst.w	r3, #2304	; 0x900
    5534:	6821      	ldr	r1, [r4, #0]
    5536:	6926      	ldr	r6, [r4, #16]
    5538:	d01c      	beq.n	5574 <__flsbuf+0x100>
    553a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    553c:	689b      	ldr	r3, [r3, #8]
    553e:	428b      	cmp	r3, r1
    5540:	bf2c      	ite	cs
    5542:	ebc6 0103 	rsbcs	r1, r6, r3
    5546:	ebc6 0101 	rsbcc	r1, r6, r1
    554a:	b951      	cbnz	r1, 5562 <__flsbuf+0xee>
    554c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    554e:	1c72      	adds	r2, r6, #1
    5550:	609a      	str	r2, [r3, #8]
    5552:	6022      	str	r2, [r4, #0]
    5554:	69e2      	ldr	r2, [r4, #28]
    5556:	1e51      	subs	r1, r2, #1
    5558:	60a1      	str	r1, [r4, #8]
    555a:	60da      	str	r2, [r3, #12]
    555c:	7035      	strb	r5, [r6, #0]
    555e:	b2e8      	uxtb	r0, r5
    5560:	bd70      	pop	{r4, r5, r6, pc}
    5562:	4630      	mov	r0, r6
    5564:	4622      	mov	r2, r4
    5566:	f000 f8db 	bl	5720 <_Cwritebuf>
    556a:	2800      	cmp	r0, #0
    556c:	d0ee      	beq.n	554c <__flsbuf+0xd8>
    556e:	f04f 30ff 	mov.w	r0, #4294967295
    5572:	bd70      	pop	{r4, r5, r6, pc}
    5574:	1c4a      	adds	r2, r1, #1
    5576:	b2ed      	uxtb	r5, r5
    5578:	6022      	str	r2, [r4, #0]
    557a:	700d      	strb	r5, [r1, #0]
    557c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    557e:	6821      	ldr	r1, [r4, #0]
    5580:	6882      	ldr	r2, [r0, #8]
    5582:	428a      	cmp	r2, r1
    5584:	bf2c      	ite	cs
    5586:	ebc6 0102 	rsbcs	r1, r6, r2
    558a:	ebc6 0101 	rsbcc	r1, r6, r1
    558e:	69e2      	ldr	r2, [r4, #28]
    5590:	055b      	lsls	r3, r3, #21
    5592:	60c2      	str	r2, [r0, #12]
    5594:	d403      	bmi.n	559e <__flsbuf+0x12a>
    5596:	2d0a      	cmp	r5, #10
    5598:	d001      	beq.n	559e <__flsbuf+0x12a>
    559a:	4291      	cmp	r1, r2
    559c:	db09      	blt.n	55b2 <__flsbuf+0x13e>
    559e:	2300      	movs	r3, #0
    55a0:	6086      	str	r6, [r0, #8]
    55a2:	4622      	mov	r2, r4
    55a4:	6026      	str	r6, [r4, #0]
    55a6:	60a3      	str	r3, [r4, #8]
    55a8:	4630      	mov	r0, r6
    55aa:	f000 f8b9 	bl	5720 <_Cwritebuf>
    55ae:	2800      	cmp	r0, #0
    55b0:	d1dd      	bne.n	556e <__flsbuf+0xfa>
    55b2:	4628      	mov	r0, r5
    55b4:	bd70      	pop	{r4, r5, r6, pc}

000055b6 <_fdopen>:
    55b6:	b570      	push	{r4, r5, r6, lr}
    55b8:	460d      	mov	r5, r1
    55ba:	4606      	mov	r6, r0
    55bc:	4610      	mov	r0, r2
    55be:	4614      	mov	r4, r2
    55c0:	f000 f8e6 	bl	5790 <fclose>
    55c4:	782b      	ldrb	r3, [r5, #0]
    55c6:	2b72      	cmp	r3, #114	; 0x72
    55c8:	d00a      	beq.n	55e0 <_fdopen+0x2a>
    55ca:	2b77      	cmp	r3, #119	; 0x77
    55cc:	d005      	beq.n	55da <_fdopen+0x24>
    55ce:	2b61      	cmp	r3, #97	; 0x61
    55d0:	d123      	bne.n	561a <_fdopen+0x64>
    55d2:	2308      	movs	r3, #8
    55d4:	f248 0202 	movw	r2, #32770	; 0x8002
    55d8:	e004      	b.n	55e4 <_fdopen+0x2e>
    55da:	2304      	movs	r3, #4
    55dc:	2202      	movs	r2, #2
    55de:	e001      	b.n	55e4 <_fdopen+0x2e>
    55e0:	2300      	movs	r3, #0
    55e2:	2201      	movs	r2, #1
    55e4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    55e8:	292b      	cmp	r1, #43	; 0x2b
    55ea:	d006      	beq.n	55fa <_fdopen+0x44>
    55ec:	2962      	cmp	r1, #98	; 0x62
    55ee:	d109      	bne.n	5604 <_fdopen+0x4e>
    55f0:	f042 0204 	orr.w	r2, r2, #4
    55f4:	f043 0301 	orr.w	r3, r3, #1
    55f8:	e7f4      	b.n	55e4 <_fdopen+0x2e>
    55fa:	f042 0203 	orr.w	r2, r2, #3
    55fe:	f043 0302 	orr.w	r3, r3, #2
    5602:	e7ef      	b.n	55e4 <_fdopen+0x2e>
    5604:	071b      	lsls	r3, r3, #28
    5606:	60e2      	str	r2, [r4, #12]
    5608:	6166      	str	r6, [r4, #20]
    560a:	4620      	mov	r0, r4
    560c:	d507      	bpl.n	561e <_fdopen+0x68>
    560e:	2100      	movs	r1, #0
    5610:	2202      	movs	r2, #2
    5612:	f000 f90b 	bl	582c <fseek>
    5616:	4620      	mov	r0, r4
    5618:	bd70      	pop	{r4, r5, r6, pc}
    561a:	2000      	movs	r0, #0
    561c:	bd70      	pop	{r4, r5, r6, pc}
    561e:	bd70      	pop	{r4, r5, r6, pc}

00005620 <_fflush>:
    5620:	b538      	push	{r3, r4, r5, lr}
    5622:	4604      	mov	r4, r0
    5624:	6a42      	ldr	r2, [r0, #36]	; 0x24
    5626:	6905      	ldr	r5, [r0, #16]
    5628:	6803      	ldr	r3, [r0, #0]
    562a:	68c0      	ldr	r0, [r0, #12]
    562c:	6891      	ldr	r1, [r2, #8]
    562e:	f420 2200 	bic.w	r2, r0, #524288	; 0x80000
    5632:	60e2      	str	r2, [r4, #12]
    5634:	f000 0282 	and.w	r2, r0, #130	; 0x82
    5638:	2a02      	cmp	r2, #2
    563a:	d002      	beq.n	5642 <_fflush+0x22>
    563c:	f04f 30ff 	mov.w	r0, #4294967295
    5640:	bd38      	pop	{r3, r4, r5, pc}
    5642:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
    5646:	d016      	beq.n	5676 <_fflush+0x56>
    5648:	4299      	cmp	r1, r3
    564a:	bf38      	it	cc
    564c:	4619      	movcc	r1, r3
    564e:	42a9      	cmp	r1, r5
    5650:	d109      	bne.n	5666 <_fflush+0x46>
    5652:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5654:	2000      	movs	r0, #0
    5656:	609d      	str	r5, [r3, #8]
    5658:	68e3      	ldr	r3, [r4, #12]
    565a:	6025      	str	r5, [r4, #0]
    565c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5660:	60a0      	str	r0, [r4, #8]
    5662:	60e3      	str	r3, [r4, #12]
    5664:	bd38      	pop	{r3, r4, r5, pc}
    5666:	4628      	mov	r0, r5
    5668:	1b49      	subs	r1, r1, r5
    566a:	4622      	mov	r2, r4
    566c:	f000 f858 	bl	5720 <_Cwritebuf>
    5670:	2800      	cmp	r0, #0
    5672:	d0ee      	beq.n	5652 <_fflush+0x32>
    5674:	e7e2      	b.n	563c <_fflush+0x1c>
    5676:	bd38      	pop	{r3, r4, r5, pc}

00005678 <_frexpl>:
    5678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    567a:	4615      	mov	r5, r2
    567c:	2300      	movs	r3, #0
    567e:	2200      	movs	r2, #0
    5680:	4606      	mov	r6, r0
    5682:	460f      	mov	r7, r1
    5684:	f000 fd80 	bl	6188 <__aeabi_dcmpeq>
    5688:	b120      	cbz	r0, 5694 <_frexpl+0x1c>
    568a:	2300      	movs	r3, #0
    568c:	602b      	str	r3, [r5, #0]
    568e:	2000      	movs	r0, #0
    5690:	2100      	movs	r1, #0
    5692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5694:	f3c7 530a 	ubfx	r3, r7, #20, #11
    5698:	4630      	mov	r0, r6
    569a:	4639      	mov	r1, r7
    569c:	f2a3 34fe 	subw	r4, r3, #1022	; 0x3fe
    56a0:	b98b      	cbnz	r3, 56c6 <_frexpl+0x4e>
    56a2:	4632      	mov	r2, r6
    56a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
    56a8:	0fd7      	lsrs	r7, r2, #31
    56aa:	f403 2600 	and.w	r6, r3, #524288	; 0x80000
    56ae:	ea47 0343 	orr.w	r3, r7, r3, lsl #1
    56b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    56b6:	0052      	lsls	r2, r2, #1
    56b8:	b11e      	cbz	r6, 56c2 <_frexpl+0x4a>
    56ba:	f363 0113 	bfi	r1, r3, #0, #20
    56be:	4610      	mov	r0, r2
    56c0:	e001      	b.n	56c6 <_frexpl+0x4e>
    56c2:	3c01      	subs	r4, #1
    56c4:	e7f0      	b.n	56a8 <_frexpl+0x30>
    56c6:	f240 33fe 	movw	r3, #1022	; 0x3fe
    56ca:	602c      	str	r4, [r5, #0]
    56cc:	f363 511e 	bfi	r1, r3, #20, #11
    56d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000056d4 <_ldexpl>:
    56d4:	b570      	push	{r4, r5, r6, lr}
    56d6:	2300      	movs	r3, #0
    56d8:	4616      	mov	r6, r2
    56da:	2200      	movs	r2, #0
    56dc:	4604      	mov	r4, r0
    56de:	460d      	mov	r5, r1
    56e0:	f000 fd52 	bl	6188 <__aeabi_dcmpeq>
    56e4:	b110      	cbz	r0, 56ec <_ldexpl+0x18>
    56e6:	2000      	movs	r0, #0
    56e8:	2100      	movs	r1, #0
    56ea:	bd70      	pop	{r4, r5, r6, pc}
    56ec:	f240 73fe 	movw	r3, #2046	; 0x7fe
    56f0:	f3c5 520a 	ubfx	r2, r5, #20, #11
    56f4:	4432      	add	r2, r6
    56f6:	429a      	cmp	r2, r3
    56f8:	4620      	mov	r0, r4
    56fa:	4629      	mov	r1, r5
    56fc:	dd06      	ble.n	570c <_ldexpl+0x38>
    56fe:	4b06      	ldr	r3, [pc, #24]	; (5718 <_ldexpl+0x44>)
    5700:	2222      	movs	r2, #34	; 0x22
    5702:	601a      	str	r2, [r3, #0]
    5704:	4b05      	ldr	r3, [pc, #20]	; (571c <_ldexpl+0x48>)
    5706:	e9d3 0100 	ldrd	r0, r1, [r3]
    570a:	bd70      	pop	{r4, r5, r6, pc}
    570c:	2a00      	cmp	r2, #0
    570e:	ddea      	ble.n	56e6 <_ldexpl+0x12>
    5710:	f362 511e 	bfi	r1, r2, #20, #11
    5714:	bd70      	pop	{r4, r5, r6, pc}
    5716:	bf00      	nop
    5718:	10000b20 	.word	0x10000b20
    571c:	00007390 	.word	0x00007390

00005720 <_Cwritebuf>:
    5720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5724:	68d5      	ldr	r5, [r2, #12]
    5726:	4680      	mov	r8, r0
    5728:	02eb      	lsls	r3, r5, #11
    572a:	460e      	mov	r6, r1
    572c:	4614      	mov	r4, r2
    572e:	6957      	ldr	r7, [r2, #20]
    5730:	d505      	bpl.n	573e <_Cwritebuf+0x1e>
    5732:	4638      	mov	r0, r7
    5734:	f000 fde5 	bl	6302 <__sys_flen>
    5738:	f045 0510 	orr.w	r5, r5, #16
    573c:	61a0      	str	r0, [r4, #24]
    573e:	4b13      	ldr	r3, [pc, #76]	; (578c <_Cwritebuf+0x6c>)
    5740:	402b      	ands	r3, r5
    5742:	b153      	cbz	r3, 575a <_Cwritebuf+0x3a>
    5744:	4638      	mov	r0, r7
    5746:	69a1      	ldr	r1, [r4, #24]
    5748:	f000 fde4 	bl	6314 <__sys_seek>
    574c:	2800      	cmp	r0, #0
    574e:	db14      	blt.n	577a <_Cwritebuf+0x5a>
    5750:	f425 3500 	bic.w	r5, r5, #131072	; 0x20000
    5754:	f025 0510 	bic.w	r5, r5, #16
    5758:	60e5      	str	r5, [r4, #12]
    575a:	4632      	mov	r2, r6
    575c:	4638      	mov	r0, r7
    575e:	4641      	mov	r1, r8
    5760:	f000 fdde 	bl	6320 <__sys_write>
    5764:	1b80      	subs	r0, r0, r6
    5766:	bf18      	it	ne
    5768:	f04f 30ff 	movne.w	r0, #4294967295
    576c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
    5770:	1af6      	subs	r6, r6, r3
    5772:	69a3      	ldr	r3, [r4, #24]
    5774:	441e      	add	r6, r3
    5776:	61a6      	str	r6, [r4, #24]
    5778:	b128      	cbz	r0, 5786 <_Cwritebuf+0x66>
    577a:	68e3      	ldr	r3, [r4, #12]
    577c:	f04f 30ff 	mov.w	r0, #4294967295
    5780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5784:	60e3      	str	r3, [r4, #12]
    5786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    578a:	bf00      	nop
    578c:	00020010 	.word	0x00020010

00005790 <fclose>:
    5790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5794:	f100 050c 	add.w	r5, r0, #12
    5798:	e895 01a0 	ldmia.w	r5, {r5, r7, r8}
    579c:	07a9      	lsls	r1, r5, #30
    579e:	b088      	sub	sp, #32
    57a0:	4604      	mov	r4, r0
    57a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
    57a4:	d025      	beq.n	57f2 <fclose+0x62>
    57a6:	072a      	lsls	r2, r5, #28
    57a8:	d416      	bmi.n	57d8 <fclose+0x48>
    57aa:	f000 f827 	bl	57fc <fflush>
    57ae:	4640      	mov	r0, r8
    57b0:	f000 fda4 	bl	62fc <__sys_close>
    57b4:	052b      	lsls	r3, r5, #20
    57b6:	d502      	bpl.n	57be <fclose+0x2e>
    57b8:	4638      	mov	r0, r7
    57ba:	f7fe f8f1 	bl	39a0 <free>
    57be:	0dad      	lsrs	r5, r5, #22
    57c0:	05ad      	lsls	r5, r5, #22
    57c2:	f115 4fa5 	cmn.w	r5, #1384120320	; 0x52800000
    57c6:	d107      	bne.n	57d8 <fclose+0x48>
    57c8:	4668      	mov	r0, sp
    57ca:	6a21      	ldr	r1, [r4, #32]
    57cc:	2220      	movs	r2, #32
    57ce:	f000 fda4 	bl	631a <__sys_tmpnam>
    57d2:	4668      	mov	r0, sp
    57d4:	f000 f8d8 	bl	5988 <remove>
    57d8:	2100      	movs	r1, #0
    57da:	2218      	movs	r2, #24
    57dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57de:	f7fe f877 	bl	38d0 <memset>
    57e2:	4620      	mov	r0, r4
    57e4:	2100      	movs	r1, #0
    57e6:	2228      	movs	r2, #40	; 0x28
    57e8:	f7fe f872 	bl	38d0 <memset>
    57ec:	6266      	str	r6, [r4, #36]	; 0x24
    57ee:	2000      	movs	r0, #0
    57f0:	e001      	b.n	57f6 <fclose+0x66>
    57f2:	f04f 30ff 	mov.w	r0, #4294967295
    57f6:	b008      	add	sp, #32
    57f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000057fc <fflush>:
    57fc:	b538      	push	{r3, r4, r5, lr}
    57fe:	4604      	mov	r4, r0
    5800:	b118      	cbz	r0, 580a <fflush+0xe>
    5802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5806:	f000 b8d5 	b.w	59b4 <_do_fflush>
    580a:	4605      	mov	r5, r0
    580c:	4806      	ldr	r0, [pc, #24]	; (5828 <fflush+0x2c>)
    580e:	4420      	add	r0, r4
    5810:	f000 f8d0 	bl	59b4 <_do_fflush>
    5814:	3428      	adds	r4, #40	; 0x28
    5816:	2800      	cmp	r0, #0
    5818:	bf18      	it	ne
    581a:	f04f 35ff 	movne.w	r5, #4294967295
    581e:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
    5822:	d1f3      	bne.n	580c <fflush+0x10>
    5824:	4628      	mov	r0, r5
    5826:	bd38      	pop	{r3, r4, r5, pc}
    5828:	10001a10 	.word	0x10001a10

0000582c <fseek>:
    582c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5830:	68c6      	ldr	r6, [r0, #12]
    5832:	4b41      	ldr	r3, [pc, #260]	; (5938 <fseek+0x10c>)
    5834:	4604      	mov	r4, r0
    5836:	4033      	ands	r3, r6
    5838:	460d      	mov	r5, r1
    583a:	4690      	mov	r8, r2
    583c:	f8d0 9014 	ldr.w	r9, [r0, #20]
    5840:	2b00      	cmp	r3, #0
    5842:	d075      	beq.n	5930 <fseek+0x104>
    5844:	4648      	mov	r0, r9
    5846:	f000 fd5f 	bl	6308 <__sys_istty>
    584a:	4607      	mov	r7, r0
    584c:	2800      	cmp	r0, #0
    584e:	d16f      	bne.n	5930 <fseek+0x104>
    5850:	f1b8 0f01 	cmp.w	r8, #1
    5854:	d006      	beq.n	5864 <fseek+0x38>
    5856:	f1b8 0f02 	cmp.w	r8, #2
    585a:	d008      	beq.n	586e <fseek+0x42>
    585c:	f1b8 0f00 	cmp.w	r8, #0
    5860:	d166      	bne.n	5930 <fseek+0x104>
    5862:	e029      	b.n	58b8 <fseek+0x8c>
    5864:	4620      	mov	r0, r4
    5866:	f000 f869 	bl	593c <ftell>
    586a:	4405      	add	r5, r0
    586c:	e024      	b.n	58b8 <fseek+0x8c>
    586e:	4648      	mov	r0, r9
    5870:	f000 fd47 	bl	6302 <__sys_flen>
    5874:	f1b0 0e00 	subs.w	lr, r0, #0
    5878:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    587c:	da04      	bge.n	5888 <fseek+0x5c>
    587e:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    5882:	60e1      	str	r1, [r4, #12]
    5884:	2701      	movs	r7, #1
    5886:	e054      	b.n	5932 <fseek+0x106>
    5888:	6823      	ldr	r3, [r4, #0]
    588a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    588c:	461a      	mov	r2, r3
    588e:	69a3      	ldr	r3, [r4, #24]
    5890:	4619      	mov	r1, r3
    5892:	6883      	ldr	r3, [r0, #8]
    5894:	4293      	cmp	r3, r2
    5896:	bf2c      	ite	cs
    5898:	18c9      	addcs	r1, r1, r3
    589a:	1889      	addcc	r1, r1, r2
    589c:	6923      	ldr	r3, [r4, #16]
    589e:	f01c 0f20 	tst.w	ip, #32
    58a2:	eba1 0303 	sub.w	r3, r1, r3
    58a6:	d003      	beq.n	58b0 <fseek+0x84>
    58a8:	6842      	ldr	r2, [r0, #4]
    58aa:	4293      	cmp	r3, r2
    58ac:	bfb8      	it	lt
    58ae:	4613      	movlt	r3, r2
    58b0:	4573      	cmp	r3, lr
    58b2:	bfac      	ite	ge
    58b4:	18ed      	addge	r5, r5, r3
    58b6:	4475      	addlt	r5, lr
    58b8:	2d00      	cmp	r5, #0
    58ba:	db39      	blt.n	5930 <fseek+0x104>
    58bc:	f416 5f00 	tst.w	r6, #8192	; 0x2000
    58c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    58c2:	d004      	beq.n	58ce <fseek+0xa2>
    58c4:	6823      	ldr	r3, [r4, #0]
    58c6:	6891      	ldr	r1, [r2, #8]
    58c8:	4299      	cmp	r1, r3
    58ca:	bf38      	it	cc
    58cc:	6093      	strcc	r3, [r2, #8]
    58ce:	69a1      	ldr	r1, [r4, #24]
    58d0:	428d      	cmp	r5, r1
    58d2:	db10      	blt.n	58f6 <fseek+0xca>
    58d4:	6890      	ldr	r0, [r2, #8]
    58d6:	6823      	ldr	r3, [r4, #0]
    58d8:	f8d4 e010 	ldr.w	lr, [r4, #16]
    58dc:	4283      	cmp	r3, r0
    58de:	bf38      	it	cc
    58e0:	4603      	movcc	r3, r0
    58e2:	1858      	adds	r0, r3, r1
    58e4:	ebce 0000 	rsb	r0, lr, r0
    58e8:	4285      	cmp	r5, r0
    58ea:	dc04      	bgt.n	58f6 <fseek+0xca>
    58ec:	68d0      	ldr	r0, [r2, #12]
    58ee:	eb01 0c00 	add.w	ip, r1, r0
    58f2:	4565      	cmp	r5, ip
    58f4:	db06      	blt.n	5904 <fseek+0xd8>
    58f6:	2300      	movs	r3, #0
    58f8:	60a3      	str	r3, [r4, #8]
    58fa:	6063      	str	r3, [r4, #4]
    58fc:	f046 0620 	orr.w	r6, r6, #32
    5900:	6055      	str	r5, [r2, #4]
    5902:	e00f      	b.n	5924 <fseek+0xf8>
    5904:	1a6d      	subs	r5, r5, r1
    5906:	07b1      	lsls	r1, r6, #30
    5908:	bf44      	itt	mi
    590a:	1a28      	submi	r0, r5, r0
    590c:	60a0      	strmi	r0, [r4, #8]
    590e:	07f2      	lsls	r2, r6, #31
    5910:	bf44      	itt	mi
    5912:	ebc3 030e 	rsbmi	r3, r3, lr
    5916:	195b      	addmi	r3, r3, r5
    5918:	4475      	add	r5, lr
    591a:	bf48      	it	mi
    591c:	6063      	strmi	r3, [r4, #4]
    591e:	6025      	str	r5, [r4, #0]
    5920:	f026 0620 	bic.w	r6, r6, #32
    5924:	f426 2603 	bic.w	r6, r6, #536576	; 0x83000
    5928:	f026 0640 	bic.w	r6, r6, #64	; 0x40
    592c:	60e6      	str	r6, [r4, #12]
    592e:	e000      	b.n	5932 <fseek+0x106>
    5930:	2702      	movs	r7, #2
    5932:	4638      	mov	r0, r7
    5934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5938:	00100003 	.word	0x00100003

0000593c <ftell>:
    593c:	68c3      	ldr	r3, [r0, #12]
    593e:	079a      	lsls	r2, r3, #30
    5940:	d105      	bne.n	594e <ftell+0x12>
    5942:	4b10      	ldr	r3, [pc, #64]	; (5984 <ftell+0x48>)
    5944:	2221      	movs	r2, #33	; 0x21
    5946:	601a      	str	r2, [r3, #0]
    5948:	f04f 30ff 	mov.w	r0, #4294967295
    594c:	4770      	bx	lr
    594e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    5952:	f003 0320 	and.w	r3, r3, #32
    5956:	d00a      	beq.n	596e <ftell+0x32>
    5958:	b113      	cbz	r3, 5960 <ftell+0x24>
    595a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    595c:	6858      	ldr	r0, [r3, #4]
    595e:	e004      	b.n	596a <ftell+0x2e>
    5960:	6802      	ldr	r2, [r0, #0]
    5962:	6983      	ldr	r3, [r0, #24]
    5964:	6900      	ldr	r0, [r0, #16]
    5966:	4413      	add	r3, r2
    5968:	1a18      	subs	r0, r3, r0
    596a:	3801      	subs	r0, #1
    596c:	4770      	bx	lr
    596e:	b113      	cbz	r3, 5976 <ftell+0x3a>
    5970:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5972:	6858      	ldr	r0, [r3, #4]
    5974:	4770      	bx	lr
    5976:	6802      	ldr	r2, [r0, #0]
    5978:	6983      	ldr	r3, [r0, #24]
    597a:	6900      	ldr	r0, [r0, #16]
    597c:	4413      	add	r3, r2
    597e:	1a18      	subs	r0, r3, r0
    5980:	4770      	bx	lr
    5982:	bf00      	nop
    5984:	10000b20 	.word	0x10000b20

00005988 <remove>:
    5988:	b510      	push	{r4, lr}
    598a:	4604      	mov	r4, r0
    598c:	f7ff fcd0 	bl	5330 <strlen>
    5990:	4601      	mov	r1, r0
    5992:	4620      	mov	r0, r4
    5994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5998:	f000 bcb9 	b.w	630e <__sys_remove>

0000599c <__check_heap_overflow>:
    599c:	4b04      	ldr	r3, [pc, #16]	; (59b0 <__check_heap_overflow+0x14>)
    599e:	b123      	cbz	r3, 59aa <__check_heap_overflow+0xe>
    59a0:	4298      	cmp	r0, r3
    59a2:	bf34      	ite	cc
    59a4:	2000      	movcc	r0, #0
    59a6:	2001      	movcs	r0, #1
    59a8:	4770      	bx	lr
    59aa:	4618      	mov	r0, r3
    59ac:	4770      	bx	lr
    59ae:	bf00      	nop
    59b0:	00000000 	.word	0x00000000

000059b4 <_do_fflush>:
    59b4:	68c2      	ldr	r2, [r0, #12]
    59b6:	b570      	push	{r4, r5, r6, lr}
    59b8:	f012 0303 	ands.w	r3, r2, #3
    59bc:	4604      	mov	r4, r0
    59be:	d019      	beq.n	59f4 <_do_fflush+0x40>
    59c0:	0693      	lsls	r3, r2, #26
    59c2:	d504      	bpl.n	59ce <_do_fflush+0x1a>
    59c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    59c6:	685d      	ldr	r5, [r3, #4]
    59c8:	f7ff fd32 	bl	5430 <_deferredlazyseek>
    59cc:	e004      	b.n	59d8 <_do_fflush+0x24>
    59ce:	6805      	ldr	r5, [r0, #0]
    59d0:	6983      	ldr	r3, [r0, #24]
    59d2:	442b      	add	r3, r5
    59d4:	6905      	ldr	r5, [r0, #16]
    59d6:	1b5d      	subs	r5, r3, r5
    59d8:	68e3      	ldr	r3, [r4, #12]
    59da:	4620      	mov	r0, r4
    59dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    59e0:	60e3      	str	r3, [r4, #12]
    59e2:	f7ff fe1d 	bl	5620 <_fflush>
    59e6:	4606      	mov	r6, r0
    59e8:	4629      	mov	r1, r5
    59ea:	4620      	mov	r0, r4
    59ec:	2200      	movs	r2, #0
    59ee:	f7ff ff1d 	bl	582c <fseek>
    59f2:	4633      	mov	r3, r6
    59f4:	4618      	mov	r0, r3
    59f6:	bd70      	pop	{r4, r5, r6, pc}

000059f8 <__aeabi_uldivmod>:
    59f8:	f05f 0c00 	movs.w	ip, #0

000059fc <__bhs_ldivmod1>:
    59fc:	b530      	push	{r4, r5, lr}
    59fe:	001c      	movs	r4, r3
    5a00:	d122      	bne.n	5a48 <ldiv64>
    5a02:	0012      	movs	r2, r2
    5a04:	d06f      	beq.n	5ae6 <ldiv_divzero>
    5a06:	4291      	cmp	r1, r2
    5a08:	d306      	bcc.n	5a18 <ldiv32>
    5a0a:	4605      	mov	r5, r0
    5a0c:	4608      	mov	r0, r1
    5a0e:	2100      	movs	r1, #0
    5a10:	f000 f86f 	bl	5af2 <udiv6432>
    5a14:	4604      	mov	r4, r0
    5a16:	4628      	mov	r0, r5

00005a18 <ldiv32>:
    5a18:	f000 f86b 	bl	5af2 <udiv6432>
    5a1c:	460a      	mov	r2, r1
    5a1e:	4621      	mov	r1, r4

00005a20 <ldiv_return>:
    5a20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5a24:	f01c 4f40 	tst.w	ip, #3221225472	; 0xc0000000
    5a28:	bf08      	it	eq
    5a2a:	4770      	bxeq	lr
    5a2c:	d503      	bpl.n	5a36 <ldiv_sign>
    5a2e:	4249      	negs	r1, r1
    5a30:	4240      	negs	r0, r0
    5a32:	f161 0100 	sbc.w	r1, r1, #0

00005a36 <ldiv_sign>:
    5a36:	ea5f 0c8c 	movs.w	ip, ip, lsl #2
    5a3a:	bf38      	it	cc
    5a3c:	4770      	bxcc	lr
    5a3e:	425b      	negs	r3, r3
    5a40:	4252      	negs	r2, r2
    5a42:	f163 0300 	sbc.w	r3, r3, #0
    5a46:	4770      	bx	lr

00005a48 <ldiv64>:
    5a48:	d442      	bmi.n	5ad0 <ldiv_res01>
    5a4a:	0c1c      	lsrs	r4, r3, #16
    5a4c:	bf04      	itt	eq
    5a4e:	041b      	lsleq	r3, r3, #16
    5a50:	f10c 0c10 	addeq.w	ip, ip, #16
    5a54:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    5a58:	bf04      	itt	eq
    5a5a:	021b      	lsleq	r3, r3, #8
    5a5c:	f10c 0c08 	addeq.w	ip, ip, #8
    5a60:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    5a64:	bf04      	itt	eq
    5a66:	011b      	lsleq	r3, r3, #4
    5a68:	f10c 0c04 	addeq.w	ip, ip, #4
    5a6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    5a70:	bf04      	itt	eq
    5a72:	f10c 0c02 	addeq.w	ip, ip, #2
    5a76:	ea5f 0383 	movseq.w	r3, r3, lsl #2
    5a7a:	bf5c      	itt	pl
    5a7c:	f10c 0c01 	addpl.w	ip, ip, #1
    5a80:	005b      	lslpl	r3, r3, #1
    5a82:	f1cc 0e20 	rsb	lr, ip, #32
    5a86:	fa22 f40e 	lsr.w	r4, r2, lr
    5a8a:	4323      	orrs	r3, r4
    5a8c:	fa02 f20c 	lsl.w	r2, r2, ip
    5a90:	fa00 f50c 	lsl.w	r5, r0, ip
    5a94:	fa20 f00e 	lsr.w	r0, r0, lr
    5a98:	fa01 f40c 	lsl.w	r4, r1, ip
    5a9c:	4320      	orrs	r0, r4
    5a9e:	fa21 f10e 	lsr.w	r1, r1, lr
    5aa2:	4614      	mov	r4, r2
    5aa4:	461a      	mov	r2, r3
    5aa6:	f000 f824 	bl	5af2 <udiv6432>
    5aaa:	fba4 2300 	umull	r2, r3, r4, r0
    5aae:	1aaa      	subs	r2, r5, r2
    5ab0:	eb71 0303 	sbcs.w	r3, r1, r3
    5ab4:	bf3c      	itt	cc
    5ab6:	191b      	addcc	r3, r3, r4
    5ab8:	3801      	subcc	r0, #1
    5aba:	f1cc 0e20 	rsb	lr, ip, #32
    5abe:	fa22 f20c 	lsr.w	r2, r2, ip
    5ac2:	fa03 f40e 	lsl.w	r4, r3, lr
    5ac6:	4322      	orrs	r2, r4
    5ac8:	fa23 f30c 	lsr.w	r3, r3, ip
    5acc:	2100      	movs	r1, #0
    5ace:	e7a7      	b.n	5a20 <ldiv_return>

00005ad0 <ldiv_res01>:
    5ad0:	1a82      	subs	r2, r0, r2
    5ad2:	eb71 0303 	sbcs.w	r3, r1, r3
    5ad6:	bf3c      	itt	cc
    5ad8:	4602      	movcc	r2, r0
    5ada:	460b      	movcc	r3, r1
    5adc:	f04f 0100 	mov.w	r1, #0
    5ae0:	f141 0000 	adc.w	r0, r1, #0
    5ae4:	e79c      	b.n	5a20 <ldiv_return>

00005ae6 <ldiv_divzero>:
    5ae6:	2000      	movs	r0, #0
    5ae8:	2100      	movs	r1, #0
    5aea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5aee:	f000 b83d 	b.w	5b6c <__aeabi_idiv0>

00005af2 <udiv6432>:
    5af2:	2304      	movs	r3, #4
    5af4:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    5af8:	d209      	bcs.n	5b0e <udiv6432_entry>

00005afa <udiv6432_loop1>:
    5afa:	0209      	lsls	r1, r1, #8
    5afc:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
    5b00:	0200      	lsls	r0, r0, #8
    5b02:	3b01      	subs	r3, #1
    5b04:	bf08      	it	eq
    5b06:	4770      	bxeq	lr
    5b08:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    5b0c:	d3f5      	bcc.n	5afa <udiv6432_loop1>

00005b0e <udiv6432_entry>:
    5b0e:	1800      	adds	r0, r0, r0

00005b10 <udiv6432_loop>:
    5b10:	4149      	adcs	r1, r1
    5b12:	bf34      	ite	cc
    5b14:	4291      	cmpcc	r1, r2
    5b16:	1a89      	subcs	r1, r1, r2
    5b18:	4140      	adcs	r0, r0
    5b1a:	4149      	adcs	r1, r1
    5b1c:	bf34      	ite	cc
    5b1e:	4291      	cmpcc	r1, r2
    5b20:	1a89      	subcs	r1, r1, r2
    5b22:	4140      	adcs	r0, r0
    5b24:	4149      	adcs	r1, r1
    5b26:	bf34      	ite	cc
    5b28:	4291      	cmpcc	r1, r2
    5b2a:	1a89      	subcs	r1, r1, r2
    5b2c:	4140      	adcs	r0, r0
    5b2e:	4149      	adcs	r1, r1
    5b30:	bf34      	ite	cc
    5b32:	4291      	cmpcc	r1, r2
    5b34:	1a89      	subcs	r1, r1, r2
    5b36:	4140      	adcs	r0, r0
    5b38:	4149      	adcs	r1, r1
    5b3a:	bf34      	ite	cc
    5b3c:	4291      	cmpcc	r1, r2
    5b3e:	1a89      	subcs	r1, r1, r2
    5b40:	4140      	adcs	r0, r0
    5b42:	4149      	adcs	r1, r1
    5b44:	bf34      	ite	cc
    5b46:	4291      	cmpcc	r1, r2
    5b48:	1a89      	subcs	r1, r1, r2
    5b4a:	4140      	adcs	r0, r0
    5b4c:	4149      	adcs	r1, r1
    5b4e:	bf34      	ite	cc
    5b50:	4291      	cmpcc	r1, r2
    5b52:	1a89      	subcs	r1, r1, r2
    5b54:	4140      	adcs	r0, r0
    5b56:	4149      	adcs	r1, r1
    5b58:	bf34      	ite	cc
    5b5a:	4291      	cmpcc	r1, r2
    5b5c:	1a89      	subcs	r1, r1, r2
    5b5e:	4140      	adcs	r0, r0
    5b60:	f1a3 0301 	sub.w	r3, r3, #1
    5b64:	f013 0f0f 	tst.w	r3, #15
    5b68:	d1d2      	bne.n	5b10 <udiv6432_loop>
    5b6a:	4770      	bx	lr

00005b6c <__aeabi_idiv0>:
    5b6c:	4770      	bx	lr
	...

00005b70 <__aeabi_dmul>:
    5b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b74:	f3c1 540a 	ubfx	r4, r1, #20, #11
    5b78:	2c00      	cmp	r4, #0
    5b7a:	d054      	beq.n	5c26 <__aeabi_dmul+0xb6>
    5b7c:	f240 76ff 	movw	r6, #2047	; 0x7ff
    5b80:	42b4      	cmp	r4, r6
    5b82:	d050      	beq.n	5c26 <__aeabi_dmul+0xb6>
    5b84:	f3c3 550a 	ubfx	r5, r3, #20, #11
    5b88:	2d00      	cmp	r5, #0
    5b8a:	d04c      	beq.n	5c26 <__aeabi_dmul+0xb6>
    5b8c:	42b5      	cmp	r5, r6
    5b8e:	d04a      	beq.n	5c26 <__aeabi_dmul+0xb6>
    5b90:	f3c1 0e13 	ubfx	lr, r1, #0, #20
    5b94:	ea4f 2ac2 	mov.w	sl, r2, lsl #11
    5b98:	f44e 1e80 	orr.w	lr, lr, #1048576	; 0x100000
    5b9c:	fbae 670a 	umull	r6, r7, lr, sl
    5ba0:	fbaa ab00 	umull	sl, fp, sl, r0
    5ba4:	eb16 080b 	adds.w	r8, r6, fp
    5ba8:	463e      	mov	r6, r7
    5baa:	ea4f 5252 	mov.w	r2, r2, lsr #21
    5bae:	ea42 22c3 	orr.w	r2, r2, r3, lsl #11
    5bb2:	f04f 0900 	mov.w	r9, #0
    5bb6:	f149 0900 	adc.w	r9, r9, #0
    5bba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    5bbe:	fbe0 8902 	umlal	r8, r9, r0, r2
    5bc2:	2700      	movs	r7, #0
    5bc4:	eb16 0609 	adds.w	r6, r6, r9
    5bc8:	f147 0700 	adc.w	r7, r7, #0
    5bcc:	fbee 6702 	umlal	r6, r7, lr, r2
    5bd0:	404b      	eors	r3, r1
    5bd2:	f5b7 1f80 	cmp.w	r7, #1048576	; 0x100000
    5bd6:	442c      	add	r4, r5
    5bd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    5bdc:	ea48 089a 	orr.w	r8, r8, sl, lsr #2
    5be0:	d24b      	bcs.n	5c7a <__aeabi_dmul+0x10a>
    5be2:	19b6      	adds	r6, r6, r6
    5be4:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    5be8:	417f      	adcs	r7, r7
    5bea:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
    5bee:	4316      	orrs	r6, r2
    5bf0:	ea4f 0848 	mov.w	r8, r8, lsl #1
    5bf4:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    5bf8:	18b6      	adds	r6, r6, r2
    5bfa:	f240 72fd 	movw	r2, #2045	; 0x7fd
    5bfe:	f147 0700 	adc.w	r7, r7, #0
    5c02:	f1b8 4f00 	cmp.w	r8, #2147483648	; 0x80000000
    5c06:	4635      	mov	r5, r6
    5c08:	bf08      	it	eq
    5c0a:	f026 0501 	biceq.w	r5, r6, #1
    5c0e:	4294      	cmp	r4, r2
    5c10:	d936      	bls.n	5c80 <__aeabi_dmul+0x110>
    5c12:	2c00      	cmp	r4, #0
    5c14:	bfa4      	itt	ge
    5c16:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    5c1a:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    5c1e:	2000      	movs	r0, #0
    5c20:	4619      	mov	r1, r3
    5c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c26:	ea83 0201 	eor.w	r2, r3, r1
    5c2a:	0049      	lsls	r1, r1, #1
    5c2c:	f511 1f00 	cmn.w	r1, #2097152	; 0x200000
    5c30:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
    5c34:	d213      	bcs.n	5c5e <__aeabi_dmul+0xee>
    5c36:	005b      	lsls	r3, r3, #1
    5c38:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    5c3c:	d317      	bcc.n	5c6e <__aeabi_dmul+0xfe>
    5c3e:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    5c42:	d80d      	bhi.n	5c60 <__aeabi_dmul+0xf0>
    5c44:	0d49      	lsrs	r1, r1, #21
    5c46:	0549      	lsls	r1, r1, #21
    5c48:	2000      	movs	r0, #0
    5c4a:	b169      	cbz	r1, 5c68 <__aeabi_dmul+0xf8>
    5c4c:	0d5b      	lsrs	r3, r3, #21
    5c4e:	055b      	lsls	r3, r3, #21
    5c50:	b153      	cbz	r3, 5c68 <__aeabi_dmul+0xf8>
    5c52:	f042 42ff 	orr.w	r2, r2, #2139095040	; 0x7f800000
    5c56:	f442 01e0 	orr.w	r1, r2, #7340032	; 0x700000
    5c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c5e:	d00a      	beq.n	5c76 <__aeabi_dmul+0x106>
    5c60:	2000      	movs	r0, #0
    5c62:	490a      	ldr	r1, [pc, #40]	; (5c8c <__aeabi_dmul+0x11c>)
    5c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c68:	4908      	ldr	r1, [pc, #32]	; (5c8c <__aeabi_dmul+0x11c>)
    5c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c6e:	2000      	movs	r0, #0
    5c70:	4611      	mov	r1, r2
    5c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c76:	005b      	lsls	r3, r3, #1
    5c78:	e7e1      	b.n	5c3e <__aeabi_dmul+0xce>
    5c7a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    5c7e:	e7b9      	b.n	5bf4 <__aeabi_dmul+0x84>
    5c80:	433b      	orrs	r3, r7
    5c82:	eb03 5104 	add.w	r1, r3, r4, lsl #20
    5c86:	4628      	mov	r0, r5
    5c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c8c:	7ff80000 	.word	0x7ff80000

00005c90 <__aeabi_ddiv>:
    5c90:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
    5c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c98:	f1bc 0f00 	cmp.w	ip, #0
    5c9c:	d053      	beq.n	5d46 <__aeabi_ddiv+0xb6>
    5c9e:	f240 74ff 	movw	r4, #2047	; 0x7ff
    5ca2:	45a4      	cmp	ip, r4
    5ca4:	d04f      	beq.n	5d46 <__aeabi_ddiv+0xb6>
    5ca6:	f3c3 580a 	ubfx	r8, r3, #20, #11
    5caa:	f1b8 0f00 	cmp.w	r8, #0
    5cae:	d04a      	beq.n	5d46 <__aeabi_ddiv+0xb6>
    5cb0:	45a0      	cmp	r8, r4
    5cb2:	d048      	beq.n	5d46 <__aeabi_ddiv+0xb6>
    5cb4:	ea4f 5a50 	mov.w	sl, r0, lsr #21
    5cb8:	ea4f 5952 	mov.w	r9, r2, lsr #21
    5cbc:	02c4      	lsls	r4, r0, #11
    5cbe:	02d6      	lsls	r6, r2, #11
    5cc0:	ea4a 20c1 	orr.w	r0, sl, r1, lsl #11
    5cc4:	ea49 22c3 	orr.w	r2, r9, r3, lsl #11
    5cc8:	f040 4500 	orr.w	r5, r0, #2147483648	; 0x80000000
    5ccc:	f042 4700 	orr.w	r7, r2, #2147483648	; 0x80000000
    5cd0:	42bd      	cmp	r5, r7
    5cd2:	bf08      	it	eq
    5cd4:	42b4      	cmpeq	r4, r6
    5cd6:	ebc8 0c0c 	rsb	ip, r8, ip
    5cda:	ea83 0801 	eor.w	r8, r3, r1
    5cde:	d25d      	bcs.n	5d9c <__aeabi_ddiv+0x10c>
    5ce0:	f20c 3cfd 	addw	ip, ip, #1021	; 0x3fd
    5ce4:	0879      	lsrs	r1, r7, #1
    5ce6:	ea4f 0036 	mov.w	r0, r6, rrx
    5cea:	2334      	movs	r3, #52	; 0x34
    5cec:	2200      	movs	r2, #0
    5cee:	e000      	b.n	5cf2 <__aeabi_ddiv+0x62>
    5cf0:	3b01      	subs	r3, #1
    5cf2:	428d      	cmp	r5, r1
    5cf4:	bf08      	it	eq
    5cf6:	4284      	cmpeq	r4, r0
    5cf8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    5cfc:	d304      	bcc.n	5d08 <__aeabi_ddiv+0x78>
    5cfe:	1a24      	subs	r4, r4, r0
    5d00:	eb65 0501 	sbc.w	r5, r5, r1
    5d04:	f042 0201 	orr.w	r2, r2, #1
    5d08:	1924      	adds	r4, r4, r4
    5d0a:	416d      	adcs	r5, r5
    5d0c:	2b20      	cmp	r3, #32
    5d0e:	d062      	beq.n	5dd6 <__aeabi_ddiv+0x146>
    5d10:	2b00      	cmp	r3, #0
    5d12:	d1ed      	bne.n	5cf0 <__aeabi_ddiv+0x60>
    5d14:	428d      	cmp	r5, r1
    5d16:	bf08      	it	eq
    5d18:	4284      	cmpeq	r4, r0
    5d1a:	d303      	bcc.n	5d24 <__aeabi_ddiv+0x94>
    5d1c:	3201      	adds	r2, #1
    5d1e:	bf08      	it	eq
    5d20:	f10e 0e01 	addeq.w	lr, lr, #1
    5d24:	f240 71fd 	movw	r1, #2045	; 0x7fd
    5d28:	458c      	cmp	ip, r1
    5d2a:	f008 4300 	and.w	r3, r8, #2147483648	; 0x80000000
    5d2e:	d93b      	bls.n	5da8 <__aeabi_ddiv+0x118>
    5d30:	f1bc 0f00 	cmp.w	ip, #0
    5d34:	bfa4      	itt	ge
    5d36:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    5d3a:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    5d3e:	2000      	movs	r0, #0
    5d40:	4619      	mov	r1, r3
    5d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d46:	004a      	lsls	r2, r1, #1
    5d48:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    5d4c:	d81c      	bhi.n	5d88 <__aeabi_ddiv+0xf8>
    5d4e:	005c      	lsls	r4, r3, #1
    5d50:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5d54:	d818      	bhi.n	5d88 <__aeabi_ddiv+0xf8>
    5d56:	ea43 0001 	orr.w	r0, r3, r1
    5d5a:	f3c0 500a 	ubfx	r0, r0, #20, #11
    5d5e:	0545      	lsls	r5, r0, #21
    5d60:	b1b0      	cbz	r0, 5d90 <__aeabi_ddiv+0x100>
    5d62:	0d50      	lsrs	r0, r2, #21
    5d64:	4059      	eors	r1, r3
    5d66:	0540      	lsls	r0, r0, #21
    5d68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    5d6c:	b1a0      	cbz	r0, 5d98 <__aeabi_ddiv+0x108>
    5d6e:	0d60      	lsrs	r0, r4, #21
    5d70:	0540      	lsls	r0, r0, #21
    5d72:	b348      	cbz	r0, 5dc8 <__aeabi_ddiv+0x138>
    5d74:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5d78:	d11d      	bne.n	5db6 <__aeabi_ddiv+0x126>
    5d7a:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    5d7e:	d003      	beq.n	5d88 <__aeabi_ddiv+0xf8>
    5d80:	2200      	movs	r2, #0
    5d82:	4610      	mov	r0, r2
    5d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d88:	2000      	movs	r0, #0
    5d8a:	4914      	ldr	r1, [pc, #80]	; (5ddc <__aeabi_ddiv+0x14c>)
    5d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d90:	4912      	ldr	r1, [pc, #72]	; (5ddc <__aeabi_ddiv+0x14c>)
    5d92:	4628      	mov	r0, r5
    5d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d9c:	086d      	lsrs	r5, r5, #1
    5d9e:	ea4f 0434 	mov.w	r4, r4, rrx
    5da2:	f20c 3cfe 	addw	ip, ip, #1022	; 0x3fe
    5da6:	e79d      	b.n	5ce4 <__aeabi_ddiv+0x54>
    5da8:	eb03 530c 	add.w	r3, r3, ip, lsl #20
    5dac:	eb03 010e 	add.w	r1, r3, lr
    5db0:	4610      	mov	r0, r2
    5db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5db6:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    5dba:	2200      	movs	r2, #0
    5dbc:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    5dc0:	4610      	mov	r0, r2
    5dc2:	4619      	mov	r1, r3
    5dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5dc8:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    5dcc:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    5dd0:	4619      	mov	r1, r3
    5dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5dd6:	4696      	mov	lr, r2
    5dd8:	e78a      	b.n	5cf0 <__aeabi_ddiv+0x60>
    5dda:	bf00      	nop
    5ddc:	7ff80000 	.word	0x7ff80000

00005de0 <__aeabi_dsub>:
    5de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5de2:	ea93 0401 	eors.w	r4, r3, r1
    5de6:	460d      	mov	r5, r1
    5de8:	f100 80cc 	bmi.w	5f84 <__aeabi_dsub+0x1a4>
    5dec:	4299      	cmp	r1, r3
    5dee:	4606      	mov	r6, r0
    5df0:	d270      	bcs.n	5ed4 <__aeabi_dsub+0xf4>
    5df2:	4056      	eors	r6, r2
    5df4:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    5df8:	4072      	eors	r2, r6
    5dfa:	4056      	eors	r6, r2
    5dfc:	404d      	eors	r5, r1
    5dfe:	404b      	eors	r3, r1
    5e00:	f240 70ff 	movw	r0, #2047	; 0x7ff
    5e04:	0d2c      	lsrs	r4, r5, #20
    5e06:	f424 6100 	bic.w	r1, r4, #2048	; 0x800
    5e0a:	4281      	cmp	r1, r0
    5e0c:	eba4 5713 	sub.w	r7, r4, r3, lsr #20
    5e10:	f000 8096 	beq.w	5f40 <__aeabi_dsub+0x160>
    5e14:	428f      	cmp	r7, r1
    5e16:	f000 8099 	beq.w	5f4c <__aeabi_dsub+0x16c>
    5e1a:	f3c5 0513 	ubfx	r5, r5, #0, #20
    5e1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5e22:	2f1f      	cmp	r7, #31
    5e24:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
    5e28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    5e2c:	d857      	bhi.n	5ede <__aeabi_dsub+0xfe>
    5e2e:	f1c7 0020 	rsb	r0, r7, #32
    5e32:	fa03 fe00 	lsl.w	lr, r3, r0
    5e36:	fa22 f107 	lsr.w	r1, r2, r7
    5e3a:	ea4e 0101 	orr.w	r1, lr, r1
    5e3e:	40fb      	lsrs	r3, r7
    5e40:	1a71      	subs	r1, r6, r1
    5e42:	1aed      	subs	r5, r5, r3
    5e44:	428e      	cmp	r6, r1
    5e46:	bf38      	it	cc
    5e48:	f105 35ff 	addcc.w	r5, r5, #4294967295
    5e4c:	fa12 f300 	lsls.w	r3, r2, r0
    5e50:	d006      	beq.n	5e60 <__aeabi_dsub+0x80>
    5e52:	3901      	subs	r1, #1
    5e54:	1c4f      	adds	r7, r1, #1
    5e56:	f1c3 0300 	rsb	r3, r3, #0
    5e5a:	bf08      	it	eq
    5e5c:	f105 35ff 	addeq.w	r5, r5, #4294967295
    5e60:	f415 1fc0 	tst.w	r5, #1572864	; 0x180000
    5e64:	d158      	bne.n	5f18 <__aeabi_dsub+0x138>
    5e66:	0fdb      	lsrs	r3, r3, #31
    5e68:	0fca      	lsrs	r2, r1, #31
    5e6a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    5e6e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    5e72:	ea53 0502 	orrs.w	r5, r3, r2
    5e76:	f000 809a 	beq.w	5fae <__aeabi_dsub+0x1ce>
    5e7a:	0b51      	lsrs	r1, r2, #13
    5e7c:	f1a4 0502 	sub.w	r5, r4, #2
    5e80:	d108      	bne.n	5e94 <__aeabi_dsub+0xb4>
    5e82:	0e19      	lsrs	r1, r3, #24
    5e84:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
    5e88:	0b51      	lsrs	r1, r2, #13
    5e8a:	f1a5 0508 	sub.w	r5, r5, #8
    5e8e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    5e92:	d0f6      	beq.n	5e82 <__aeabi_dsub+0xa2>
    5e94:	0c51      	lsrs	r1, r2, #17
    5e96:	d104      	bne.n	5ea2 <__aeabi_dsub+0xc2>
    5e98:	0f19      	lsrs	r1, r3, #28
    5e9a:	3d04      	subs	r5, #4
    5e9c:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    5ea0:	011b      	lsls	r3, r3, #4
    5ea2:	0cd1      	lsrs	r1, r2, #19
    5ea4:	d104      	bne.n	5eb0 <__aeabi_dsub+0xd0>
    5ea6:	0f99      	lsrs	r1, r3, #30
    5ea8:	3d02      	subs	r5, #2
    5eaa:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
    5eae:	009b      	lsls	r3, r3, #2
    5eb0:	0d11      	lsrs	r1, r2, #20
    5eb2:	d104      	bne.n	5ebe <__aeabi_dsub+0xde>
    5eb4:	0fd9      	lsrs	r1, r3, #31
    5eb6:	3d01      	subs	r5, #1
    5eb8:	ea41 0242 	orr.w	r2, r1, r2, lsl #1
    5ebc:	005b      	lsls	r3, r3, #1
    5ebe:	0ae4      	lsrs	r4, r4, #11
    5ec0:	ebb4 2fd5 	cmp.w	r4, r5, lsr #11
    5ec4:	f04f 0000 	mov.w	r0, #0
    5ec8:	bf06      	itte	eq
    5eca:	eb02 5105 	addeq.w	r1, r2, r5, lsl #20
    5ece:	4618      	moveq	r0, r3
    5ed0:	07e1      	lslne	r1, r4, #31
    5ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ed4:	4290      	cmp	r0, r2
    5ed6:	d893      	bhi.n	5e00 <__aeabi_dsub+0x20>
    5ed8:	4299      	cmp	r1, r3
    5eda:	d191      	bne.n	5e00 <__aeabi_dsub+0x20>
    5edc:	e789      	b.n	5df2 <__aeabi_dsub+0x12>
    5ede:	2f35      	cmp	r7, #53	; 0x35
    5ee0:	d826      	bhi.n	5f30 <__aeabi_dsub+0x150>
    5ee2:	f1a7 0020 	sub.w	r0, r7, #32
    5ee6:	fa23 f100 	lsr.w	r1, r3, r0
    5eea:	1a71      	subs	r1, r6, r1
    5eec:	428e      	cmp	r6, r1
    5eee:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    5ef2:	fa22 f000 	lsr.w	r0, r2, r0
    5ef6:	bf38      	it	cc
    5ef8:	f105 35ff 	addcc.w	r5, r5, #4294967295
    5efc:	40bb      	lsls	r3, r7
    5efe:	0612      	lsls	r2, r2, #24
    5f00:	ea43 0300 	orr.w	r3, r3, r0
    5f04:	d048      	beq.n	5f98 <__aeabi_dsub+0x1b8>
    5f06:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    5f0a:	3901      	subs	r1, #1
    5f0c:	1c4e      	adds	r6, r1, #1
    5f0e:	f1c3 0300 	rsb	r3, r3, #0
    5f12:	bf08      	it	eq
    5f14:	f105 35ff 	addeq.w	r5, r5, #4294967295
    5f18:	02e8      	lsls	r0, r5, #11
    5f1a:	d42e      	bmi.n	5f7a <__aeabi_dsub+0x19a>
    5f1c:	3c01      	subs	r4, #1
    5f1e:	0562      	lsls	r2, r4, #21
    5f20:	d037      	beq.n	5f92 <__aeabi_dsub+0x1b2>
    5f22:	0fde      	lsrs	r6, r3, #31
    5f24:	0fca      	lsrs	r2, r1, #31
    5f26:	ea42 0545 	orr.w	r5, r2, r5, lsl #1
    5f2a:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
    5f2e:	005b      	lsls	r3, r3, #1
    5f30:	2b00      	cmp	r3, #0
    5f32:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    5f36:	db11      	blt.n	5f5c <__aeabi_dsub+0x17c>
    5f38:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    5f3c:	4630      	mov	r0, r6
    5f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f40:	032b      	lsls	r3, r5, #12
    5f42:	d117      	bne.n	5f74 <__aeabi_dsub+0x194>
    5f44:	b387      	cbz	r7, 5fa8 <__aeabi_dsub+0x1c8>
    5f46:	4630      	mov	r0, r6
    5f48:	4629      	mov	r1, r5
    5f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f4c:	f240 73fe 	movw	r3, #2046	; 0x7fe
    5f50:	429f      	cmp	r7, r3
    5f52:	d8f5      	bhi.n	5f40 <__aeabi_dsub+0x160>
    5f54:	b99f      	cbnz	r7, 5f7e <__aeabi_dsub+0x19e>
    5f56:	4639      	mov	r1, r7
    5f58:	4638      	mov	r0, r7
    5f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f5c:	3601      	adds	r6, #1
    5f5e:	bf08      	it	eq
    5f60:	3501      	addeq	r5, #1
    5f62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5f66:	bf08      	it	eq
    5f68:	f026 0601 	biceq.w	r6, r6, #1
    5f6c:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    5f70:	4630      	mov	r0, r6
    5f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f74:	2000      	movs	r0, #0
    5f76:	490f      	ldr	r1, [pc, #60]	; (5fb4 <__aeabi_dsub+0x1d4>)
    5f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f7a:	460e      	mov	r6, r1
    5f7c:	e7d8      	b.n	5f30 <__aeabi_dsub+0x150>
    5f7e:	4629      	mov	r1, r5
    5f80:	4630      	mov	r0, r6
    5f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f84:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    5f88:	462b      	mov	r3, r5
    5f8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5f8e:	f000 b813 	b.w	5fb8 <__aeabi_dadd>
    5f92:	0521      	lsls	r1, r4, #20
    5f94:	4610      	mov	r0, r2
    5f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f98:	2b00      	cmp	r3, #0
    5f9a:	d1b6      	bne.n	5f0a <__aeabi_dsub+0x12a>
    5f9c:	02ea      	lsls	r2, r5, #11
    5f9e:	d5bd      	bpl.n	5f1c <__aeabi_dsub+0x13c>
    5fa0:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    5fa4:	460e      	mov	r6, r1
    5fa6:	e7c7      	b.n	5f38 <__aeabi_dsub+0x158>
    5fa8:	4902      	ldr	r1, [pc, #8]	; (5fb4 <__aeabi_dsub+0x1d4>)
    5faa:	4638      	mov	r0, r7
    5fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fae:	4629      	mov	r1, r5
    5fb0:	4628      	mov	r0, r5
    5fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fb4:	7ff80000 	.word	0x7ff80000

00005fb8 <__aeabi_dadd>:
    5fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fba:	ea93 0601 	eors.w	r6, r3, r1
    5fbe:	460c      	mov	r4, r1
    5fc0:	f100 8087 	bmi.w	60d2 <__aeabi_dadd+0x11a>
    5fc4:	4299      	cmp	r1, r3
    5fc6:	4605      	mov	r5, r0
    5fc8:	d339      	bcc.n	603e <__aeabi_dadd+0x86>
    5fca:	f240 70ff 	movw	r0, #2047	; 0x7ff
    5fce:	0d26      	lsrs	r6, r4, #20
    5fd0:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    5fd4:	4281      	cmp	r1, r0
    5fd6:	d03f      	beq.n	6058 <__aeabi_dadd+0xa0>
    5fd8:	eba6 5713 	sub.w	r7, r6, r3, lsr #20
    5fdc:	428f      	cmp	r7, r1
    5fde:	d04c      	beq.n	607a <__aeabi_dadd+0xc2>
    5fe0:	f3c4 0413 	ubfx	r4, r4, #0, #20
    5fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5fe8:	2f1f      	cmp	r7, #31
    5fea:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    5fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    5ff2:	d838      	bhi.n	6066 <__aeabi_dadd+0xae>
    5ff4:	f1c7 0020 	rsb	r0, r7, #32
    5ff8:	fa03 fe00 	lsl.w	lr, r3, r0
    5ffc:	fa22 f107 	lsr.w	r1, r2, r7
    6000:	40fb      	lsrs	r3, r7
    6002:	ea4e 0101 	orr.w	r1, lr, r1
    6006:	441c      	add	r4, r3
    6008:	186d      	adds	r5, r5, r1
    600a:	bf28      	it	cs
    600c:	3401      	addcs	r4, #1
    600e:	fa02 f300 	lsl.w	r3, r2, r0
    6012:	02a2      	lsls	r2, r4, #10
    6014:	d529      	bpl.n	606a <__aeabi_dadd+0xb2>
    6016:	3501      	adds	r5, #1
    6018:	bf08      	it	eq
    601a:	3401      	addeq	r4, #1
    601c:	b90b      	cbnz	r3, 6022 <__aeabi_dadd+0x6a>
    601e:	f025 0502 	bic.w	r5, r5, #2
    6022:	0533      	lsls	r3, r6, #20
    6024:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    6028:	005a      	lsls	r2, r3, #1
    602a:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    602e:	f04f 0000 	mov.w	r0, #0
    6032:	d240      	bcs.n	60b6 <__aeabi_dadd+0xfe>
    6034:	07e4      	lsls	r4, r4, #31
    6036:	4619      	mov	r1, r3
    6038:	ea44 0055 	orr.w	r0, r4, r5, lsr #1
    603c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    603e:	f240 70ff 	movw	r0, #2047	; 0x7ff
    6042:	4074      	eors	r4, r6
    6044:	4073      	eors	r3, r6
    6046:	0d26      	lsrs	r6, r4, #20
    6048:	4055      	eors	r5, r2
    604a:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    604e:	406a      	eors	r2, r5
    6050:	4281      	cmp	r1, r0
    6052:	ea85 0502 	eor.w	r5, r5, r2
    6056:	d1bf      	bne.n	5fd8 <__aeabi_dadd+0x20>
    6058:	0323      	lsls	r3, r4, #12
    605a:	f04f 0000 	mov.w	r0, #0
    605e:	d136      	bne.n	60ce <__aeabi_dadd+0x116>
    6060:	4621      	mov	r1, r4
    6062:	4628      	mov	r0, r5
    6064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6066:	2f35      	cmp	r7, #53	; 0x35
    6068:	d911      	bls.n	608e <__aeabi_dadd+0xd6>
    606a:	2b00      	cmp	r3, #0
    606c:	f106 36ff 	add.w	r6, r6, #4294967295
    6070:	db24      	blt.n	60bc <__aeabi_dadd+0x104>
    6072:	eb04 5106 	add.w	r1, r4, r6, lsl #20
    6076:	4628      	mov	r0, r5
    6078:	bdf0      	pop	{r4, r5, r6, r7, pc}
    607a:	f240 73fe 	movw	r3, #2046	; 0x7fe
    607e:	429f      	cmp	r7, r3
    6080:	d8ea      	bhi.n	6058 <__aeabi_dadd+0xa0>
    6082:	2f00      	cmp	r7, #0
    6084:	d1ec      	bne.n	6060 <__aeabi_dadd+0xa8>
    6086:	f004 4100 	and.w	r1, r4, #2147483648	; 0x80000000
    608a:	4638      	mov	r0, r7
    608c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    608e:	f1a7 0120 	sub.w	r1, r7, #32
    6092:	fa23 f001 	lsr.w	r0, r3, r1
    6096:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    609a:	40bb      	lsls	r3, r7
    609c:	fa22 f101 	lsr.w	r1, r2, r1
    60a0:	182d      	adds	r5, r5, r0
    60a2:	ea43 0301 	orr.w	r3, r3, r1
    60a6:	d31b      	bcc.n	60e0 <__aeabi_dadd+0x128>
    60a8:	0612      	lsls	r2, r2, #24
    60aa:	f104 0401 	add.w	r4, r4, #1
    60ae:	d0b0      	beq.n	6012 <__aeabi_dadd+0x5a>
    60b0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    60b4:	e7ad      	b.n	6012 <__aeabi_dadd+0x5a>
    60b6:	3601      	adds	r6, #1
    60b8:	0531      	lsls	r1, r6, #20
    60ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60bc:	3501      	adds	r5, #1
    60be:	bf08      	it	eq
    60c0:	3401      	addeq	r4, #1
    60c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    60c6:	bf08      	it	eq
    60c8:	f025 0501 	biceq.w	r5, r5, #1
    60cc:	e7d1      	b.n	6072 <__aeabi_dadd+0xba>
    60ce:	4906      	ldr	r1, [pc, #24]	; (60e8 <__aeabi_dadd+0x130>)
    60d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60d2:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    60d6:	462b      	mov	r3, r5
    60d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    60dc:	f7ff be80 	b.w	5de0 <__aeabi_dsub>
    60e0:	0612      	lsls	r2, r2, #24
    60e2:	d1e5      	bne.n	60b0 <__aeabi_dadd+0xf8>
    60e4:	e7c1      	b.n	606a <__aeabi_dadd+0xb2>
    60e6:	bf00      	nop
    60e8:	7ff80000 	.word	0x7ff80000

000060ec <__aeabi_d2iz>:
    60ec:	02cb      	lsls	r3, r1, #11
    60ee:	0d0a      	lsrs	r2, r1, #20
    60f0:	ea43 5050 	orr.w	r0, r3, r0, lsr #21
    60f4:	f5c2 6383 	rsb	r3, r2, #1048	; 0x418
    60f8:	3306      	adds	r3, #6
    60fa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    60fe:	2bff      	cmp	r3, #255	; 0xff
    6100:	fa20 f003 	lsr.w	r0, r0, r3
    6104:	d90f      	bls.n	6126 <__aeabi_d2iz+0x3a>
    6106:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    610a:	d00d      	beq.n	6128 <__aeabi_d2iz+0x3c>
    610c:	f011 4080 	ands.w	r0, r1, #1073741824	; 0x40000000
    6110:	d009      	beq.n	6126 <__aeabi_d2iz+0x3a>
    6112:	004b      	lsls	r3, r1, #1
    6114:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    6118:	d804      	bhi.n	6124 <__aeabi_d2iz+0x38>
    611a:	0fc8      	lsrs	r0, r1, #31
    611c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    6120:	3801      	subs	r0, #1
    6122:	4770      	bx	lr
    6124:	2000      	movs	r0, #0
    6126:	4770      	bx	lr
    6128:	4240      	negs	r0, r0
    612a:	4770      	bx	lr

0000612c <__bhs_ui2d>:
    612c:	b1f0      	cbz	r0, 616c <__bhs_ui2d+0x40>
    612e:	0c03      	lsrs	r3, r0, #16
    6130:	bf0c      	ite	eq
    6132:	0400      	lsleq	r0, r0, #16
    6134:	f101 7180 	addne.w	r1, r1, #16777216	; 0x1000000
    6138:	0e03      	lsrs	r3, r0, #24
    613a:	bf0c      	ite	eq
    613c:	0200      	lsleq	r0, r0, #8
    613e:	f501 0100 	addne.w	r1, r1, #8388608	; 0x800000
    6142:	0f03      	lsrs	r3, r0, #28
    6144:	bf0c      	ite	eq
    6146:	0100      	lsleq	r0, r0, #4
    6148:	f501 0180 	addne.w	r1, r1, #4194304	; 0x400000
    614c:	0f83      	lsrs	r3, r0, #30
    614e:	bf0c      	ite	eq
    6150:	0080      	lsleq	r0, r0, #2
    6152:	f501 1100 	addne.w	r1, r1, #2097152	; 0x200000
    6156:	2800      	cmp	r0, #0
    6158:	bfac      	ite	ge
    615a:	0040      	lslge	r0, r0, #1
    615c:	f501 1180 	addlt.w	r1, r1, #1048576	; 0x100000
    6160:	eb01 23e0 	add.w	r3, r1, r0, asr #11
    6164:	0542      	lsls	r2, r0, #21
    6166:	4610      	mov	r0, r2
    6168:	4619      	mov	r1, r3
    616a:	4770      	bx	lr
    616c:	4603      	mov	r3, r0
    616e:	4619      	mov	r1, r3
    6170:	4770      	bx	lr
    6172:	bf00      	nop

00006174 <__aeabi_i2d>:
    6174:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
    6178:	0fc3      	lsrs	r3, r0, #31
    617a:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
    617e:	18d0      	adds	r0, r2, r3
    6180:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6184:	f7ff bfd2 	b.w	612c <__bhs_ui2d>

00006188 <__aeabi_dcmpeq>:
    6188:	b510      	push	{r4, lr}
    618a:	004c      	lsls	r4, r1, #1
    618c:	ea54 0e00 	orrs.w	lr, r4, r0
    6190:	d102      	bne.n	6198 <__aeabi_dcmpeq+0x10>
    6192:	ea52 0e43 	orrs.w	lr, r2, r3, lsl #1
    6196:	d00b      	beq.n	61b0 <__aeabi_dcmpeq+0x28>
    6198:	4299      	cmp	r1, r3
    619a:	d001      	beq.n	61a0 <__aeabi_dcmpeq+0x18>
    619c:	2000      	movs	r0, #0
    619e:	bd10      	pop	{r4, pc}
    61a0:	4290      	cmp	r0, r2
    61a2:	d1fb      	bne.n	619c <__aeabi_dcmpeq+0x14>
    61a4:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    61a8:	bf8c      	ite	hi
    61aa:	2000      	movhi	r0, #0
    61ac:	2001      	movls	r0, #1
    61ae:	bd10      	pop	{r4, pc}
    61b0:	2001      	movs	r0, #1
    61b2:	bd10      	pop	{r4, pc}

000061b4 <__aeabi_dcmplt>:
    61b4:	b430      	push	{r4, r5}
    61b6:	ea53 0401 	orrs.w	r4, r3, r1
    61ba:	d409      	bmi.n	61d0 <__aeabi_dcmplt+0x1c>
    61bc:	005c      	lsls	r4, r3, #1
    61be:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    61c2:	d802      	bhi.n	61ca <__aeabi_dcmplt+0x16>
    61c4:	4299      	cmp	r1, r3
    61c6:	d317      	bcc.n	61f8 <__aeabi_dcmplt+0x44>
    61c8:	d019      	beq.n	61fe <__aeabi_dcmplt+0x4a>
    61ca:	2000      	movs	r0, #0
    61cc:	bc30      	pop	{r4, r5}
    61ce:	4770      	bx	lr
    61d0:	004d      	lsls	r5, r1, #1
    61d2:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    61d6:	d8f8      	bhi.n	61ca <__aeabi_dcmplt+0x16>
    61d8:	005c      	lsls	r4, r3, #1
    61da:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    61de:	d8f4      	bhi.n	61ca <__aeabi_dcmplt+0x16>
    61e0:	4305      	orrs	r5, r0
    61e2:	d101      	bne.n	61e8 <__aeabi_dcmplt+0x34>
    61e4:	4314      	orrs	r4, r2
    61e6:	d010      	beq.n	620a <__aeabi_dcmplt+0x56>
    61e8:	4299      	cmp	r1, r3
    61ea:	d805      	bhi.n	61f8 <__aeabi_dcmplt+0x44>
    61ec:	d1ed      	bne.n	61ca <__aeabi_dcmplt+0x16>
    61ee:	4290      	cmp	r0, r2
    61f0:	bf94      	ite	ls
    61f2:	2000      	movls	r0, #0
    61f4:	2001      	movhi	r0, #1
    61f6:	e7e9      	b.n	61cc <__aeabi_dcmplt+0x18>
    61f8:	2001      	movs	r0, #1
    61fa:	bc30      	pop	{r4, r5}
    61fc:	4770      	bx	lr
    61fe:	4290      	cmp	r0, r2
    6200:	bf2c      	ite	cs
    6202:	2000      	movcs	r0, #0
    6204:	2001      	movcc	r0, #1
    6206:	bc30      	pop	{r4, r5}
    6208:	4770      	bx	lr
    620a:	4620      	mov	r0, r4
    620c:	e7de      	b.n	61cc <__aeabi_dcmplt+0x18>
    620e:	bf00      	nop

00006210 <__aeabi_dcmple>:
    6210:	b430      	push	{r4, r5}
    6212:	ea53 0401 	orrs.w	r4, r3, r1
    6216:	d409      	bmi.n	622c <__aeabi_dcmple+0x1c>
    6218:	005c      	lsls	r4, r3, #1
    621a:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    621e:	d802      	bhi.n	6226 <__aeabi_dcmple+0x16>
    6220:	4299      	cmp	r1, r3
    6222:	d319      	bcc.n	6258 <__aeabi_dcmple+0x48>
    6224:	d01b      	beq.n	625e <__aeabi_dcmple+0x4e>
    6226:	2000      	movs	r0, #0
    6228:	bc30      	pop	{r4, r5}
    622a:	4770      	bx	lr
    622c:	004c      	lsls	r4, r1, #1
    622e:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    6232:	d8f8      	bhi.n	6226 <__aeabi_dcmple+0x16>
    6234:	005d      	lsls	r5, r3, #1
    6236:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    623a:	d8f4      	bhi.n	6226 <__aeabi_dcmple+0x16>
    623c:	4299      	cmp	r1, r3
    623e:	d80b      	bhi.n	6258 <__aeabi_dcmple+0x48>
    6240:	d008      	beq.n	6254 <__aeabi_dcmple+0x44>
    6242:	ea54 0300 	orrs.w	r3, r4, r0
    6246:	d1ee      	bne.n	6226 <__aeabi_dcmple+0x16>
    6248:	ea55 0302 	orrs.w	r3, r5, r2
    624c:	bf0c      	ite	eq
    624e:	2001      	moveq	r0, #1
    6250:	2000      	movne	r0, #0
    6252:	e7e9      	b.n	6228 <__aeabi_dcmple+0x18>
    6254:	4290      	cmp	r0, r2
    6256:	d3f4      	bcc.n	6242 <__aeabi_dcmple+0x32>
    6258:	bc30      	pop	{r4, r5}
    625a:	2001      	movs	r0, #1
    625c:	4770      	bx	lr
    625e:	4290      	cmp	r0, r2
    6260:	bf8c      	ite	hi
    6262:	2000      	movhi	r0, #0
    6264:	2001      	movls	r0, #1
    6266:	bc30      	pop	{r4, r5}
    6268:	4770      	bx	lr
    626a:	bf00      	nop

0000626c <__aeabi_dcmpge>:
    626c:	b430      	push	{r4, r5}
    626e:	ea53 0401 	orrs.w	r4, r3, r1
    6272:	ea4f 0441 	mov.w	r4, r1, lsl #1
    6276:	d408      	bmi.n	628a <__aeabi_dcmpge+0x1e>
    6278:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    627c:	d802      	bhi.n	6284 <__aeabi_dcmpge+0x18>
    627e:	4299      	cmp	r1, r3
    6280:	d818      	bhi.n	62b4 <__aeabi_dcmpge+0x48>
    6282:	d01a      	beq.n	62ba <__aeabi_dcmpge+0x4e>
    6284:	2000      	movs	r0, #0
    6286:	bc30      	pop	{r4, r5}
    6288:	4770      	bx	lr
    628a:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    628e:	d8f9      	bhi.n	6284 <__aeabi_dcmpge+0x18>
    6290:	005d      	lsls	r5, r3, #1
    6292:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    6296:	d8f5      	bhi.n	6284 <__aeabi_dcmpge+0x18>
    6298:	4299      	cmp	r1, r3
    629a:	d30b      	bcc.n	62b4 <__aeabi_dcmpge+0x48>
    629c:	d008      	beq.n	62b0 <__aeabi_dcmpge+0x44>
    629e:	ea54 0300 	orrs.w	r3, r4, r0
    62a2:	d1ef      	bne.n	6284 <__aeabi_dcmpge+0x18>
    62a4:	ea55 0302 	orrs.w	r3, r5, r2
    62a8:	bf0c      	ite	eq
    62aa:	2001      	moveq	r0, #1
    62ac:	2000      	movne	r0, #0
    62ae:	e7ea      	b.n	6286 <__aeabi_dcmpge+0x1a>
    62b0:	4290      	cmp	r0, r2
    62b2:	d8f4      	bhi.n	629e <__aeabi_dcmpge+0x32>
    62b4:	bc30      	pop	{r4, r5}
    62b6:	2001      	movs	r0, #1
    62b8:	4770      	bx	lr
    62ba:	4290      	cmp	r0, r2
    62bc:	bf34      	ite	cc
    62be:	2000      	movcc	r0, #0
    62c0:	2001      	movcs	r0, #1
    62c2:	bc30      	pop	{r4, r5}
    62c4:	4770      	bx	lr
    62c6:	bf00      	nop

000062c8 <__aeabi_lowlevel_memset>:
    62c8:	4603      	mov	r3, r0
    62ca:	f013 0f03 	tst.w	r3, #3
    62ce:	d10e      	bne.n	62ee <memset1a>
    62d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    62d4:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    62d8:	ea41 4101 	orr.w	r1, r1, r1, lsl #16

000062dc <__bhs_memset4>:
    62dc:	3a04      	subs	r2, #4

000062de <memset4>:
    62de:	bf24      	itt	cs
    62e0:	f843 1b04 	strcs.w	r1, [r3], #4
    62e4:	f1b2 0204 	subscs.w	r2, r2, #4
    62e8:	d2f9      	bcs.n	62de <memset4>

000062ea <memset1>:
    62ea:	f102 0204 	add.w	r2, r2, #4

000062ee <memset1a>:
    62ee:	3a01      	subs	r2, #1
    62f0:	bf24      	itt	cs
    62f2:	f803 1b01 	strbcs.w	r1, [r3], #1
    62f6:	e7fa      	bcs.n	62ee <memset1a>
    62f8:	4770      	bx	lr

000062fa <__sys_appexit>:
    62fa:	e7fe      	b.n	62fa <__sys_appexit>

000062fc <__sys_close>:
    62fc:	f04f 30ff 	mov.w	r0, #4294967295
    6300:	4770      	bx	lr

00006302 <__sys_flen>:
    6302:	f04f 30ff 	mov.w	r0, #4294967295
    6306:	4770      	bx	lr

00006308 <__sys_istty>:
    6308:	f04f 30ff 	mov.w	r0, #4294967295
    630c:	4770      	bx	lr

0000630e <__sys_remove>:
    630e:	f04f 30ff 	mov.w	r0, #4294967295
    6312:	4770      	bx	lr

00006314 <__sys_seek>:
    6314:	f04f 30ff 	mov.w	r0, #4294967295
    6318:	4770      	bx	lr

0000631a <__sys_tmpnam>:
    631a:	f04f 30ff 	mov.w	r0, #4294967295
    631e:	4770      	bx	lr

00006320 <__sys_write>:
    6320:	4610      	mov	r0, r2
    6322:	4770      	bx	lr
    6324:	2e383731 	.word	0x2e383731
    6328:	332e3336 	.word	0x332e3336
    632c:	31382e30 	.word	0x31382e30
    6330:	00000000 	.word	0x00000000
    6334:	65746e69 	.word	0x65746e69
    6338:	74656e72 	.word	0x74656e72
    633c:	00000000 	.word	0x00000000
    6340:	61646f76 	.word	0x61646f76
    6344:	656e6f66 	.word	0x656e6f66
    6348:	00000000 	.word	0x00000000
    634c:	656c694d 	.word	0x656c694d
    6350:	3a656761 	.word	0x3a656761
    6354:	0a642520 	.word	0x0a642520
    6358:	00000000 	.word	0x00000000
    635c:	5f726570 	.word	0x5f726570
    6360:	6f6e6769 	.word	0x6f6e6769
    6364:	7265706e 	.word	0x7265706e
    6368:	5f646f69 	.word	0x5f646f69
    636c:	3a6c6176 	.word	0x3a6c6176
    6370:	0a642520 	.word	0x0a642520
    6374:	00000000 	.word	0x00000000
    6378:	5f726570 	.word	0x5f726570
    637c:	6f6e6769 	.word	0x6f6e6769
    6380:	65706666 	.word	0x65706666
    6384:	646f6972 	.word	0x646f6972
    6388:	6c61765f 	.word	0x6c61765f
    638c:	6425203a 	.word	0x6425203a
    6390:	6570202c 	.word	0x6570202c
    6394:	67695f72 	.word	0x67695f72
    6398:	66666f6e 	.word	0x66666f6e
    639c:	69726570 	.word	0x69726570
    63a0:	765f646f 	.word	0x765f646f
    63a4:	6f286c61 	.word	0x6f286c61
    63a8:	69676972 	.word	0x69676972
    63ac:	296c616e 	.word	0x296c616e
    63b0:	6425203a 	.word	0x6425203a
    63b4:	0000000a 	.word	0x0000000a
    63b8:	5f726570 	.word	0x5f726570
    63bc:	6f6e6769 	.word	0x6f6e6769
    63c0:	616f726e 	.word	0x616f726e
    63c4:	676e696d 	.word	0x676e696d
    63c8:	69726570 	.word	0x69726570
    63cc:	765f646f 	.word	0x765f646f
    63d0:	203a6c61 	.word	0x203a6c61
    63d4:	000a6425 	.word	0x000a6425
    63d8:	5f726570 	.word	0x5f726570
    63dc:	6f6e6769 	.word	0x6f6e6769
    63e0:	6f726666 	.word	0x6f726666
    63e4:	6e696d61 	.word	0x6e696d61
    63e8:	72657067 	.word	0x72657067
    63ec:	5f646f69 	.word	0x5f646f69
    63f0:	3a6c6176 	.word	0x3a6c6176
    63f4:	0a642520 	.word	0x0a642520
    63f8:	00000000 	.word	0x00000000
    63fc:	5f726570 	.word	0x5f726570
    6400:	70776f6c 	.word	0x70776f6c
    6404:	6a5f776f 	.word	0x6a5f776f
    6408:	5f747375 	.word	0x5f747375
    640c:	656b6177 	.word	0x656b6177
    6410:	6425203a 	.word	0x6425203a
    6414:	0000000a 	.word	0x0000000a
    6418:	5f726570 	.word	0x5f726570
    641c:	70776f6c 	.word	0x70776f6c
    6420:	635f776f 	.word	0x635f776f
    6424:	65636e61 	.word	0x65636e61
    6428:	25203a6c 	.word	0x25203a6c
    642c:	00000a64 	.word	0x00000a64
    6430:	5f726570 	.word	0x5f726570
    6434:	70776f6c 	.word	0x70776f6c
    6438:	705f776f 	.word	0x705f776f
    643c:	6f697265 	.word	0x6f697265
    6440:	726f2864 	.word	0x726f2864
    6444:	6e696769 	.word	0x6e696769
    6448:	3a296c61 	.word	0x3a296c61
    644c:	0a642520 	.word	0x0a642520
    6450:	00000000 	.word	0x00000000
    6454:	5f726570 	.word	0x5f726570
    6458:	70776f6c 	.word	0x70776f6c
    645c:	705f776f 	.word	0x705f776f
    6460:	6f697265 	.word	0x6f697265
    6464:	25203a64 	.word	0x25203a64
    6468:	00000a64 	.word	0x00000a64
    646c:	5f726570 	.word	0x5f726570
    6470:	70776f6c 	.word	0x70776f6c
    6474:	6d5f776f 	.word	0x6d5f776f
    6478:	3a65646f 	.word	0x3a65646f
    647c:	0a642520 	.word	0x0a642520
    6480:	00000000 	.word	0x00000000
    6484:	5f726570 	.word	0x5f726570
    6488:	66666f63 	.word	0x66666f63
    648c:	635f6565 	.word	0x635f6565
    6490:	746e756f 	.word	0x746e756f
    6494:	203a7265 	.word	0x203a7265
    6498:	000a6425 	.word	0x000a6425
    649c:	3e2d2d2d 	.word	0x3e2d2d2d
    64a0:	0d732520 	.word	0x0d732520
    64a4:	0000000a 	.word	0x0000000a
    64a8:	0a0d7325 	.word	0x0a0d7325
    64ac:	00000000 	.word	0x00000000
    64b0:	65746e45 	.word	0x65746e45
    64b4:	20646572 	.word	0x20646572
    64b8:	5f4d5347 	.word	0x5f4d5347
    64bc:	5f504354 	.word	0x5f504354
    64c0:	76636552 	.word	0x76636552
    64c4:	00000000 	.word	0x00000000
    64c8:	512b5441 	.word	0x512b5441
    64cc:	3d445249 	.word	0x3d445249
    64d0:	2c312c31 	.word	0x2c312c31
    64d4:	30322c30 	.word	0x30322c30
    64d8:	00000030 	.word	0x00000030
    64dc:	65746e45 	.word	0x65746e45
    64e0:	20646572 	.word	0x20646572
    64e4:	63656843 	.word	0x63656843
    64e8:	4d53476b 	.word	0x4d53476b
    64ec:	66667542 	.word	0x66667542
    64f0:	00007265 	.word	0x00007265
    64f4:	512b5441 	.word	0x512b5441
    64f8:	3d445249 	.word	0x3d445249
    64fc:	2c312c31 	.word	0x2c312c31
    6500:	30332c30 	.word	0x30332c30
    6504:	00000030 	.word	0x00000030
    6508:	54455323 	.word	0x54455323
    650c:	0000003b 	.word	0x0000003b
    6510:	7373654d 	.word	0x7373654d
    6514:	20656761 	.word	0x20656761
    6518:	6d6f7246 	.word	0x6d6f7246
    651c:	72655320 	.word	0x72655320
    6520:	20726576 	.word	0x20726576
    6524:	0000203a 	.word	0x0000203a
    6528:	65746e45 	.word	0x65746e45
    652c:	20646572 	.word	0x20646572
    6530:	64616572 	.word	0x64616572
    6534:	736d7320 	.word	0x736d7320
    6538:	0000002e 	.word	0x0000002e
    653c:	00005441 	.word	0x00005441
    6540:	432b5441 	.word	0x432b5441
    6544:	3d52474d 	.word	0x3d52474d
    6548:	00000031 	.word	0x00000031
    654c:	432b5441 	.word	0x432b5441
    6550:	3d44474d 	.word	0x3d44474d
    6554:	00342c31 	.word	0x00342c31
    6558:	7373654d 	.word	0x7373654d
    655c:	20656761 	.word	0x20656761
    6560:	6d6f7246 	.word	0x6d6f7246
    6564:	534d5320 	.word	0x534d5320
    6568:	00203a20 	.word	0x00203a20
    656c:	65746e45 	.word	0x65746e45
    6570:	20646572 	.word	0x20646572
    6574:	5f4d5347 	.word	0x5f4d5347
    6578:	6e6e6f43 	.word	0x6e6e6f43
    657c:	54746365 	.word	0x54746365
    6580:	6972546f 	.word	0x6972546f
    6584:	6770556f 	.word	0x6770556f
    6588:	65646172 	.word	0x65646172
    658c:	76726553 	.word	0x76726553
    6590:	00007265 	.word	0x00007265
    6594:	512b5441 	.word	0x512b5441
    6598:	43474649 	.word	0x43474649
    659c:	313d544e 	.word	0x313d544e
    65a0:	00000000 	.word	0x00000000
    65a4:	512b5441 	.word	0x512b5441
    65a8:	47534349 	.word	0x47534349
    65ac:	2c313d50 	.word	0x2c313d50
    65b0:	22732522 	.word	0x22732522
    65b4:	7325222c 	.word	0x7325222c
    65b8:	25222c22 	.word	0x25222c22
    65bc:	00002273 	.word	0x00002273
    65c0:	512b5441 	.word	0x512b5441
    65c4:	58554d49 	.word	0x58554d49
    65c8:	0000303d 	.word	0x0000303d
    65cc:	512b5441 	.word	0x512b5441
    65d0:	54414256 	.word	0x54414256
    65d4:	2c303d54 	.word	0x2c303d54
    65d8:	30303533 	.word	0x30303533
    65dc:	0000302c 	.word	0x0000302c
    65e0:	512b5441 	.word	0x512b5441
    65e4:	54414256 	.word	0x54414256
    65e8:	2c313d54 	.word	0x2c313d54
    65ec:	30303333 	.word	0x30303333
    65f0:	0000302c 	.word	0x0000302c
    65f4:	512b5441 	.word	0x512b5441
    65f8:	4f485349 	.word	0x4f485349
    65fc:	3d415257 	.word	0x3d415257
    6600:	00000031 	.word	0x00000031
    6604:	512b5441 	.word	0x512b5441
    6608:	4f485349 	.word	0x4f485349
    660c:	3d545057 	.word	0x3d545057
    6610:	00000031 	.word	0x00000031
    6614:	512b5441 	.word	0x512b5441
    6618:	49444e49 	.word	0x49444e49
    661c:	0000303d 	.word	0x0000303d
    6620:	512b5441 	.word	0x512b5441
    6624:	41454849 	.word	0x41454849
    6628:	00313d44 	.word	0x00313d44
    662c:	512b5441 	.word	0x512b5441
    6630:	444f4d49 	.word	0x444f4d49
    6634:	00303d45 	.word	0x00303d45
    6638:	512b5441 	.word	0x512b5441
    663c:	534e4449 	.word	0x534e4449
    6640:	313d5049 	.word	0x313d5049
    6644:	00000000 	.word	0x00000000
    6648:	512b5441 	.word	0x512b5441
    664c:	534e4449 	.word	0x534e4449
    6650:	303d5049 	.word	0x303d5049
    6654:	00000000 	.word	0x00000000
    6658:	512b5441 	.word	0x512b5441
    665c:	4c435047 	.word	0x4c435047
    6660:	3d535341 	.word	0x3d535341
    6664:	00000038 	.word	0x00000038
    6668:	512b5441 	.word	0x512b5441
    666c:	45504f49 	.word	0x45504f49
    6670:	54223d4e 	.word	0x54223d4e
    6674:	2c225043 	.word	0x2c225043
    6678:	22732522 	.word	0x22732522
    667c:	0064252c 	.word	0x0064252c
    6680:	4c494146 	.word	0x4c494146
    6684:	00000000 	.word	0x00000000
    6688:	4e4e4f43 	.word	0x4e4e4f43
    668c:	20544345 	.word	0x20544345
    6690:	00004b4f 	.word	0x00004b4f
    6694:	45524c41 	.word	0x45524c41
    6698:	20594441 	.word	0x20594441
    669c:	4e4e4f43 	.word	0x4e4e4f43
    66a0:	00544345 	.word	0x00544345
    66a4:	6e6e6f43 	.word	0x6e6e6f43
    66a8:	65746365 	.word	0x65746365
    66ac:	6f742064 	.word	0x6f742064
    66b0:	65687420 	.word	0x65687420
    66b4:	72657320 	.word	0x72657320
    66b8:	2e726576 	.word	0x2e726576
    66bc:	00000000 	.word	0x00000000
    66c0:	504f4951 	.word	0x504f4951
    66c4:	66204e45 	.word	0x66204e45
    66c8:	656c6961 	.word	0x656c6961
    66cc:	00002e64 	.word	0x00002e64
    66d0:	64726148 	.word	0x64726148
    66d4:	73657220 	.word	0x73657220
    66d8:	69747465 	.word	0x69747465
    66dc:	6d20676e 	.word	0x6d20676e
    66e0:	6c75646f 	.word	0x6c75646f
    66e4:	00002e65 	.word	0x00002e65
    66e8:	6e6e6f63 	.word	0x6e6e6f63
    66ec:	69746365 	.word	0x69746365
    66f0:	61466e6f 	.word	0x61466e6f
    66f4:	6f436c69 	.word	0x6f436c69
    66f8:	20746e75 	.word	0x20746e75
    66fc:	3034203e 	.word	0x3034203e
    6700:	73657220 	.word	0x73657220
    6704:	74726174 	.word	0x74726174
    6708:	20676e69 	.word	0x20676e69
    670c:	75646f6d 	.word	0x75646f6d
    6710:	002e656c 	.word	0x002e656c
    6714:	65746e45 	.word	0x65746e45
    6718:	20646572 	.word	0x20646572
    671c:	5f4d5347 	.word	0x5f4d5347
    6720:	6e6e6f43 	.word	0x6e6e6f43
    6724:	54746365 	.word	0x54746365
    6728:	6972546f 	.word	0x6972546f
    672c:	6770556f 	.word	0x6770556f
    6730:	65646172 	.word	0x65646172
    6734:	76726553 	.word	0x76726553
    6738:	72547265 	.word	0x72547265
    673c:	70736e61 	.word	0x70736e61
    6740:	6e657261 	.word	0x6e657261
    6744:	00000074 	.word	0x00000074
    6748:	512b5441 	.word	0x512b5441
    674c:	46435449 	.word	0x46435449
    6750:	2c333d47 	.word	0x2c333d47
    6754:	30312c31 	.word	0x30312c31
    6758:	0000312c 	.word	0x0000312c
    675c:	512b5441 	.word	0x512b5441
    6760:	45504f49 	.word	0x45504f49
    6764:	54223d4e 	.word	0x54223d4e
    6768:	2c225043 	.word	0x2c225043
    676c:	22732522 	.word	0x22732522
    6770:	0d64252c 	.word	0x0d64252c
    6774:	00000000 	.word	0x00000000
    6778:	65746e45 	.word	0x65746e45
    677c:	20646572 	.word	0x20646572
    6780:	6e6e6f43 	.word	0x6e6e6f43
    6784:	6f746365 	.word	0x6f746365
    6788:	6f697254 	.word	0x6f697254
    678c:	00000000 	.word	0x00000000
    6790:	512b5441 	.word	0x512b5441
    6794:	49444e49 	.word	0x49444e49
    6798:	0000313d 	.word	0x0000313d
    679c:	65746e45 	.word	0x65746e45
    67a0:	20646572 	.word	0x20646572
    67a4:	5f4d5347 	.word	0x5f4d5347
    67a8:	646e6553 	.word	0x646e6553
    67ac:	65536f54 	.word	0x65536f54
    67b0:	72657672 	.word	0x72657672
    67b4:	00504354 	.word	0x00504354
    67b8:	512b5441 	.word	0x512b5441
    67bc:	4e455349 	.word	0x4e455349
    67c0:	64253d44 	.word	0x64253d44
    67c4:	00000000 	.word	0x00000000
    67c8:	646e6553 	.word	0x646e6553
    67cc:	204b4f20 	.word	0x204b4f20
    67d0:	6c696877 	.word	0x6c696877
    67d4:	2e676e69 	.word	0x2e676e69
    67d8:	0000002e 	.word	0x0000002e
    67dc:	444e4553 	.word	0x444e4553
    67e0:	004b4f20 	.word	0x004b4f20
    67e4:	61746144 	.word	0x61746144
    67e8:	6e657320 	.word	0x6e657320
    67ec:	00002e74 	.word	0x00002e74
    67f0:	4f525245 	.word	0x4f525245
    67f4:	00000052 	.word	0x00000052
    67f8:	61746144 	.word	0x61746144
    67fc:	69616620 	.word	0x69616620
    6800:	00002e6c 	.word	0x00002e6c
    6804:	3b54535b 	.word	0x3b54535b
    6808:	30377325 	.word	0x30377325
    680c:	3232723b 	.word	0x3232723b
    6810:	503b3634 	.word	0x503b3634
    6814:	322d3536 	.word	0x322d3536
    6818:	30373530 	.word	0x30373530
    681c:	2d343032 	.word	0x2d343032
    6820:	73253b31 	.word	0x73253b31
    6824:	5d73253b 	.word	0x5d73253b
    6828:	00000000 	.word	0x00000000
    682c:	65746e45 	.word	0x65746e45
    6830:	20646572 	.word	0x20646572
    6834:	5f4d5347 	.word	0x5f4d5347
    6838:	5f504354 	.word	0x5f504354
    683c:	646e6553 	.word	0x646e6553
    6840:	00000000 	.word	0x00000000
    6844:	512b5441 	.word	0x512b5441
    6848:	44574f50 	.word	0x44574f50
    684c:	0000303d 	.word	0x0000303d
    6850:	00004b4f 	.word	0x00004b4f
    6854:	432b5441 	.word	0x432b5441
    6858:	3d45454d 	.word	0x3d45454d
    685c:	00000032 	.word	0x00000032
    6860:	432b5441 	.word	0x432b5441
    6864:	3d46474d 	.word	0x3d46474d
    6868:	00000031 	.word	0x00000031
    686c:	432b5441 	.word	0x432b5441
    6870:	3d494d4e 	.word	0x3d494d4e
    6874:	2c312c32 	.word	0x2c312c32
    6878:	2c302c30 	.word	0x2c302c30
    687c:	00000030 	.word	0x00000030
    6880:	206d6953 	.word	0x206d6953
    6884:	64726163 	.word	0x64726163
    6888:	61657220 	.word	0x61657220
    688c:	2e2e7964 	.word	0x2e2e7964
    6890:	0000000d 	.word	0x0000000d
    6894:	206d6953 	.word	0x206d6953
    6898:	20746f6e 	.word	0x20746f6e
    689c:	64616572 	.word	0x64616572
    68a0:	000d2179 	.word	0x000d2179
    68a4:	432b5441 	.word	0x432b5441
    68a8:	00005153 	.word	0x00005153
    68ac:	432b5441 	.word	0x432b5441
    68b0:	3f474552 	.word	0x3f474552
    68b4:	00000000 	.word	0x00000000
    68b8:	4552432b 	.word	0x4552432b
    68bc:	00000047 	.word	0x00000047
    68c0:	0000352c 	.word	0x0000352c
    68c4:	0000312c 	.word	0x0000312c
    68c8:	002c352c 	.word	0x002c352c
    68cc:	65746e45 	.word	0x65746e45
    68d0:	20646572 	.word	0x20646572
    68d4:	63656863 	.word	0x63656863
    68d8:	6973206b 	.word	0x6973206b
    68dc:	6163206d 	.word	0x6163206d
    68e0:	002e6472 	.word	0x002e6472
    68e4:	432b5441 	.word	0x432b5441
    68e8:	3f4e4950 	.word	0x3f4e4950
    68ec:	00000000 	.word	0x00000000
    68f0:	44414552 	.word	0x44414552
    68f4:	00000059 	.word	0x00000059
    68f8:	472b5441 	.word	0x472b5441
    68fc:	00004e53 	.word	0x00004e53
    6900:	49454d49 	.word	0x49454d49
    6904:	00203a20 	.word	0x00203a20
    6908:	432b5441 	.word	0x432b5441
    690c:	00494d49 	.word	0x00494d49
    6910:	49534d49 	.word	0x49534d49
    6914:	00203a20 	.word	0x00203a20
    6918:	31455441 	.word	0x31455441
    691c:	00000000 	.word	0x00000000
    6920:	4f484345 	.word	0x4f484345
    6924:	004e4f20 	.word	0x004e4f20
    6928:	30455441 	.word	0x30455441
    692c:	00000000 	.word	0x00000000
    6930:	4f484345 	.word	0x4f484345
    6934:	46464f20 	.word	0x46464f20
    6938:	00000000 	.word	0x00000000
    693c:	512b5441 	.word	0x512b5441
    6940:	4f4c4349 	.word	0x4f4c4349
    6944:	00004553 	.word	0x00004553
    6948:	534f4c43 	.word	0x534f4c43
    694c:	43542045 	.word	0x43542045
    6950:	6f632050 	.word	0x6f632050
    6954:	63656e6e 	.word	0x63656e6e
    6958:	6e6f6974 	.word	0x6e6f6974
    695c:	00000020 	.word	0x00000020
    6960:	65746e45 	.word	0x65746e45
    6964:	20646572 	.word	0x20646572
    6968:	656e6547 	.word	0x656e6547
    696c:	65746172 	.word	0x65746172
    6970:	73654d54 	.word	0x73654d54
    6974:	65676173 	.word	0x65676173
    6978:	00002928 	.word	0x00002928
    697c:	6c727473 	.word	0x6c727473
    6980:	6c286e65 	.word	0x6c286e65
    6984:	5f747361 	.word	0x5f747361
    6988:	696c6176 	.word	0x696c6176
    698c:	70675f64 	.word	0x70675f64
    6990:	29636d72 	.word	0x29636d72
    6994:	25203a20 	.word	0x25203a20
    6998:	00000d64 	.word	0x00000d64
    699c:	7325545b 	.word	0x7325545b
    69a0:	474f4e2d 	.word	0x474f4e2d
    69a4:	00005350 	.word	0x00005350
    69a8:	20535047 	.word	0x20535047
    69ac:	696c6156 	.word	0x696c6156
    69b0:	203a2064 	.word	0x203a2064
    69b4:	6c727473 	.word	0x6c727473
    69b8:	6c286e65 	.word	0x6c286e65
    69bc:	5f747361 	.word	0x5f747361
    69c0:	696c6176 	.word	0x696c6176
    69c4:	70675f64 	.word	0x70675f64
    69c8:	29636d72 	.word	0x29636d72
    69cc:	25203a20 	.word	0x25203a20
    69d0:	6c202c64 	.word	0x6c202c64
    69d4:	5f747361 	.word	0x5f747361
    69d8:	696c6176 	.word	0x696c6176
    69dc:	70675f64 	.word	0x70675f64
    69e0:	3a636d72 	.word	0x3a636d72
    69e4:	25203a20 	.word	0x25203a20
    69e8:	00000d73 	.word	0x00000d73
    69ec:	0000002c 	.word	0x0000002c
    69f0:	00005825 	.word	0x00005825
    69f4:	65657053 	.word	0x65657053
    69f8:	54532064 	.word	0x54532064
    69fc:	203a2052 	.word	0x203a2052
    6a00:	00000000 	.word	0x00000000
    6a04:	20726944 	.word	0x20726944
    6a08:	20525453 	.word	0x20525453
    6a0c:	0000203a 	.word	0x0000203a
    6a10:	00006425 	.word	0x00006425
    6a14:	0000004e 	.word	0x0000004e
    6a18:	00000057 	.word	0x00000057
    6a1c:	00000053 	.word	0x00000053
    6a20:	00000045 	.word	0x00000045
    6a24:	454d5f54 	.word	0x454d5f54
    6a28:	47415353 	.word	0x47415353
    6a2c:	00003a45 	.word	0x00003a45
    6a30:	7325545b 	.word	0x7325545b
    6a34:	73257325 	.word	0x73257325
    6a38:	73257325 	.word	0x73257325
    6a3c:	73257325 	.word	0x73257325
    6a40:	64256425 	.word	0x64256425
    6a44:	73257325 	.word	0x73257325
    6a48:	00000000 	.word	0x00000000
    6a4c:	302d7325 	.word	0x302d7325
    6a50:	253a3032 	.word	0x253a3032
    6a54:	00000064 	.word	0x00000064
    6a58:	313b7325 	.word	0x313b7325
    6a5c:	253a3430 	.word	0x253a3430
    6a60:	00000058 	.word	0x00000058
    6a64:	253b7325 	.word	0x253b7325
    6a68:	00000073 	.word	0x00000073
    6a6c:	303b7325 	.word	0x303b7325
    6a70:	253a3232 	.word	0x253a3232
    6a74:	00000073 	.word	0x00000073
    6a78:	313b7325 	.word	0x313b7325
    6a7c:	253a3230 	.word	0x253a3230
    6a80:	00000073 	.word	0x00000073
    6a84:	313b7325 	.word	0x313b7325
    6a88:	253a3530 	.word	0x253a3530
    6a8c:	00000064 	.word	0x00000064
    6a90:	303b7325 	.word	0x303b7325
    6a94:	253a3332 	.word	0x253a3332
    6a98:	00005d64 	.word	0x00005d64
    6a9c:	65746e45 	.word	0x65746e45
    6aa0:	20646572 	.word	0x20646572
    6aa4:	6e616843 	.word	0x6e616843
    6aa8:	43206567 	.word	0x43206567
    6aac:	69666e6f 	.word	0x69666e6f
    6ab0:	61727567 	.word	0x61727567
    6ab4:	6e6f6974 	.word	0x6e6f6974
    6ab8:	00000000 	.word	0x00000000
    6abc:	54455323 	.word	0x54455323
    6ac0:	0000003b 	.word	0x0000003b
    6ac4:	61726150 	.word	0x61726150
    6ac8:	3a20316d 	.word	0x3a20316d
    6acc:	2c732520 	.word	0x2c732520
    6ad0:	72615020 	.word	0x72615020
    6ad4:	20326d61 	.word	0x20326d61
    6ad8:	7325203a 	.word	0x7325203a
    6adc:	6150202c 	.word	0x6150202c
    6ae0:	336d6172 	.word	0x336d6172
    6ae4:	25203a20 	.word	0x25203a20
    6ae8:	50202c73 	.word	0x50202c73
    6aec:	6d617261 	.word	0x6d617261
    6af0:	203a2034 	.word	0x203a2034
    6af4:	202c7325 	.word	0x202c7325
    6af8:	61726150 	.word	0x61726150
    6afc:	3a20356d 	.word	0x3a20356d
    6b00:	0d732520 	.word	0x0d732520
    6b04:	00000000 	.word	0x00000000
    6b08:	00000031 	.word	0x00000031
    6b0c:	00003130 	.word	0x00003130
    6b10:	502d5049 	.word	0x502d5049
    6b14:	2074726f 	.word	0x2074726f
    6b18:	75716552 	.word	0x75716552
    6b1c:	2c747365 	.word	0x2c747365
    6b20:	20504920 	.word	0x20504920
    6b24:	7325203a 	.word	0x7325203a
    6b28:	6f50202c 	.word	0x6f50202c
    6b2c:	3a207472 	.word	0x3a207472
    6b30:	0d732520 	.word	0x0d732520
    6b34:	00000000 	.word	0x00000000
    6b38:	00003231 	.word	0x00003231
    6b3c:	65736552 	.word	0x65736552
    6b40:	65722074 	.word	0x65722074
    6b44:	73657571 	.word	0x73657571
    6b48:	65722074 	.word	0x65722074
    6b4c:	76696563 	.word	0x76696563
    6b50:	202c6465 	.word	0x202c6465
    6b54:	65736572 	.word	0x65736572
    6b58:	00002e74 	.word	0x00002e74
    6b5c:	00003532 	.word	0x00003532
    6b60:	204e5041 	.word	0x204e5041
    6b64:	75716552 	.word	0x75716552
    6b68:	2c747365 	.word	0x2c747365
    6b6c:	4e504120 	.word	0x4e504120
    6b70:	25203a20 	.word	0x25203a20
    6b74:	55202c73 	.word	0x55202c73
    6b78:	20524553 	.word	0x20524553
    6b7c:	7325203a 	.word	0x7325203a
    6b80:	4150202c 	.word	0x4150202c
    6b84:	3a205353 	.word	0x3a205353
    6b88:	0d732520 	.word	0x0d732520
    6b8c:	00000000 	.word	0x00000000
    6b90:	00000034 	.word	0x00000034
    6b94:	00003430 	.word	0x00003430
    6b98:	00000030 	.word	0x00000030
    6b9c:	61647055 	.word	0x61647055
    6ba0:	50206574 	.word	0x50206574
    6ba4:	6f697265 	.word	0x6f697265
    6ba8:	68432064 	.word	0x68432064
    6bac:	65676e61 	.word	0x65676e61
    6bb0:	71655220 	.word	0x71655220
    6bb4:	74736575 	.word	0x74736575
    6bb8:	4e4f202c 	.word	0x4e4f202c
    6bbc:	25203a20 	.word	0x25203a20
    6bc0:	4f202c73 	.word	0x4f202c73
    6bc4:	3a204646 	.word	0x3a204646
    6bc8:	0d732520 	.word	0x0d732520
    6bcc:	00000000 	.word	0x00000000
    6bd0:	61647055 	.word	0x61647055
    6bd4:	50206574 	.word	0x50206574
    6bd8:	6f697265 	.word	0x6f697265
    6bdc:	6f522864 	.word	0x6f522864
    6be0:	6e696d61 	.word	0x6e696d61
    6be4:	43202967 	.word	0x43202967
    6be8:	676e6168 	.word	0x676e6168
    6bec:	65522065 	.word	0x65522065
    6bf0:	73657571 	.word	0x73657571
    6bf4:	4f202c74 	.word	0x4f202c74
    6bf8:	203a204e 	.word	0x203a204e
    6bfc:	202c7325 	.word	0x202c7325
    6c00:	2046464f 	.word	0x2046464f
    6c04:	7325203a 	.word	0x7325203a
    6c08:	0000000d 	.word	0x0000000d
    6c0c:	00003131 	.word	0x00003131
    6c10:	6e616843 	.word	0x6e616843
    6c14:	4d206567 	.word	0x4d206567
    6c18:	61656c69 	.word	0x61656c69
    6c1c:	002e6567 	.word	0x002e6567
    6c20:	00003233 	.word	0x00003233
    6c24:	20776f4c 	.word	0x20776f4c
    6c28:	65776f70 	.word	0x65776f70
    6c2c:	6f6d2072 	.word	0x6f6d2072
    6c30:	002e6564 	.word	0x002e6564
    6c34:	00003333 	.word	0x00003333
    6c38:	20776f4c 	.word	0x20776f4c
    6c3c:	65776f70 	.word	0x65776f70
    6c40:	61772072 	.word	0x61772072
    6c44:	7520656b 	.word	0x7520656b
    6c48:	65702070 	.word	0x65702070
    6c4c:	646f6972 	.word	0x646f6972
    6c50:	0000002e 	.word	0x0000002e
    6c54:	00003433 	.word	0x00003433
    6c58:	20776f4c 	.word	0x20776f4c
    6c5c:	65776f70 	.word	0x65776f70
    6c60:	6f6d2072 	.word	0x6f6d2072
    6c64:	73206564 	.word	0x73206564
    6c68:	63656c65 	.word	0x63656c65
    6c6c:	6e6f6974 	.word	0x6e6f6974
    6c70:	45454420 	.word	0x45454420
    6c74:	4f502050 	.word	0x4f502050
    6c78:	20524557 	.word	0x20524557
    6c7c:	4e574f44 	.word	0x4e574f44
    6c80:	20737620 	.word	0x20737620
    6c84:	45574f50 	.word	0x45574f50
    6c88:	4f442052 	.word	0x4f442052
    6c8c:	00004e57 	.word	0x00004e57
    6c90:	00003332 	.word	0x00003332
    6c94:	646e6553 	.word	0x646e6553
    6c98:	6f702020 	.word	0x6f702020
    6c9c:	69746973 	.word	0x69746973
    6ca0:	00006e6f 	.word	0x00006e6f
    6ca4:	00000000 	.word	0x00000000
    6ca8:	54455340 	.word	0x54455340
    6cac:	3773253b 	.word	0x3773253b
    6cb0:	73253b30 	.word	0x73253b30
    6cb4:	00000000 	.word	0x00000000
    6cb8:	7774654e 	.word	0x7774654e
    6cbc:	206b726f 	.word	0x206b726f
    6cc0:	69676572 	.word	0x69676572
    6cc4:	61727473 	.word	0x61727473
    6cc8:	6e6f6974 	.word	0x6e6f6974
    6ccc:	72726520 	.word	0x72726520
    6cd0:	0000726f 	.word	0x0000726f
    6cd4:	69676552 	.word	0x69676552
    6cd8:	72657473 	.word	0x72657473
    6cdc:	74206465 	.word	0x74206465
    6ce0:	7367206f 	.word	0x7367206f
    6ce4:	656e206d 	.word	0x656e206d
    6ce8:	726f7774 	.word	0x726f7774
    6cec:	00002e6b 	.word	0x00002e6b
    6cf0:	6e676953 	.word	0x6e676953
    6cf4:	53206c61 	.word	0x53206c61
    6cf8:	6e657274 	.word	0x6e657274
    6cfc:	20687467 	.word	0x20687467
    6d00:	6425203a 	.word	0x6425203a
    6d04:	0000000a 	.word	0x0000000a
    6d08:	6c6c6548 	.word	0x6c6c6548
    6d0c:	3650206f 	.word	0x3650206f
    6d10:	30322035 	.word	0x30322035
    6d14:	35303531 	.word	0x35303531
    6d18:	002e3032 	.word	0x002e3032
    6d1c:	74737953 	.word	0x74737953
    6d20:	6f436d65 	.word	0x6f436d65
    6d24:	6c436572 	.word	0x6c436572
    6d28:	206b636f 	.word	0x206b636f
    6d2c:	6425203d 	.word	0x6425203d
    6d30:	0a7a4820 	.word	0x0a7a4820
    6d34:	00000000 	.word	0x00000000
    6d38:	52504545 	.word	0x52504545
    6d3c:	49204d4f 	.word	0x49204d4f
    6d40:	2074696e 	.word	0x2074696e
    6d44:	6f727245 	.word	0x6f727245
    6d48:	00002e72 	.word	0x00002e72
    6d4c:	52504545 	.word	0x52504545
    6d50:	49204d4f 	.word	0x49204d4f
    6d54:	2074696e 	.word	0x2074696e
    6d58:	002e6b4f 	.word	0x002e6b4f
    6d5c:	74696e49 	.word	0x74696e49
    6d60:	696c6169 	.word	0x696c6169
    6d64:	676e697a 	.word	0x676e697a
    6d68:	72655320 	.word	0x72655320
    6d6c:	20726576 	.word	0x20726576
    6d70:	6e6e6f43 	.word	0x6e6e6f43
    6d74:	69746365 	.word	0x69746365
    6d78:	00006e6f 	.word	0x00006e6f
    6d7c:	74737953 	.word	0x74737953
    6d80:	69206d65 	.word	0x69206d65
    6d84:	6567616d 	.word	0x6567616d
    6d88:	67707520 	.word	0x67707520
    6d8c:	65646172 	.word	0x65646172
    6d90:	71657220 	.word	0x71657220
    6d94:	74736575 	.word	0x74736575
    6d98:	00006465 	.word	0x00006465
    6d9c:	61697254 	.word	0x61697254
    6da0:	0000006c 	.word	0x0000006c
    6da4:	76726553 	.word	0x76726553
    6da8:	43207265 	.word	0x43207265
    6dac:	656e6e6f 	.word	0x656e6e6f
    6db0:	6f697463 	.word	0x6f697463
    6db4:	7345206e 	.word	0x7345206e
    6db8:	6c626174 	.word	0x6c626174
    6dbc:	65687369 	.word	0x65687369
    6dc0:	6f742064 	.word	0x6f742064
    6dc4:	67705520 	.word	0x67705520
    6dc8:	65646172 	.word	0x65646172
    6dcc:	72657320 	.word	0x72657320
    6dd0:	00726576 	.word	0x00726576
    6dd4:	6e776f44 	.word	0x6e776f44
    6dd8:	64616f6c 	.word	0x64616f6c
    6ddc:	6e696620 	.word	0x6e696620
    6de0:	65687369 	.word	0x65687369
    6de4:	00002064 	.word	0x00002064
    6de8:	61697254 	.word	0x61697254
    6dec:	6e65206c 	.word	0x6e65206c
    6df0:	00000064 	.word	0x00000064
    6df4:	696e6946 	.word	0x696e6946
    6df8:	64656873 	.word	0x64656873
    6dfc:	67707520 	.word	0x67707520
    6e00:	69646172 	.word	0x69646172
    6e04:	0000676e 	.word	0x0000676e
    6e08:	6d697250 	.word	0x6d697250
    6e0c:	20797261 	.word	0x20797261
    6e10:	67616d49 	.word	0x67616d49
    6e14:	69732065 	.word	0x69732065
    6e18:	2073657a 	.word	0x2073657a
    6e1c:	25783028 	.word	0x25783028
    6e20:	3d3d2058 	.word	0x3d3d2058
    6e24:	25783020 	.word	0x25783020
    6e28:	000d2958 	.word	0x000d2958
    6e2c:	6f636553 	.word	0x6f636553
    6e30:	7261646e 	.word	0x7261646e
    6e34:	6d492079 	.word	0x6d492079
    6e38:	20656761 	.word	0x20656761
    6e3c:	657a6973 	.word	0x657a6973
    6e40:	30282073 	.word	0x30282073
    6e44:	20582578 	.word	0x20582578
    6e48:	30203d3d 	.word	0x30203d3d
    6e4c:	29582578 	.word	0x29582578
    6e50:	0000000d 	.word	0x0000000d
    6e54:	68746f42 	.word	0x68746f42
    6e58:	616d6920 	.word	0x616d6920
    6e5c:	20736567 	.word	0x20736567
    6e60:	20657261 	.word	0x20657261
    6e64:	61766e69 	.word	0x61766e69
    6e68:	0064696c 	.word	0x0064696c
    6e6c:	6d697250 	.word	0x6d697250
    6e70:	20797261 	.word	0x20797261
    6e74:	67616d49 	.word	0x67616d49
    6e78:	65762065 	.word	0x65762065
    6e7c:	6f697372 	.word	0x6f697372
    6e80:	203d206e 	.word	0x203d206e
    6e84:	58257830 	.word	0x58257830
    6e88:	0000000d 	.word	0x0000000d
    6e8c:	6f636553 	.word	0x6f636553
    6e90:	7261646e 	.word	0x7261646e
    6e94:	6d492079 	.word	0x6d492079
    6e98:	20656761 	.word	0x20656761
    6e9c:	73726576 	.word	0x73726576
    6ea0:	206e6f69 	.word	0x206e6f69
    6ea4:	7830203d 	.word	0x7830203d
    6ea8:	000d5825 	.word	0x000d5825
    6eac:	63656843 	.word	0x63656843
    6eb0:	676e696b 	.word	0x676e696b
    6eb4:	43524320 	.word	0x43524320
    6eb8:	00000000 	.word	0x00000000
    6ebc:	6d697250 	.word	0x6d697250
    6ec0:	20797261 	.word	0x20797261
    6ec4:	67616d49 	.word	0x67616d49
    6ec8:	79742065 	.word	0x79742065
    6ecc:	3d206570 	.word	0x3d206570
    6ed0:	2c642520 	.word	0x2c642520
    6ed4:	72657620 	.word	0x72657620
    6ed8:	6e6f6973 	.word	0x6e6f6973
    6edc:	30203d20 	.word	0x30203d20
    6ee0:	32302578 	.word	0x32302578
    6ee4:	00000d58 	.word	0x00000d58
    6ee8:	6f636553 	.word	0x6f636553
    6eec:	7261646e 	.word	0x7261646e
    6ef0:	6d492079 	.word	0x6d492079
    6ef4:	20656761 	.word	0x20656761
    6ef8:	65707974 	.word	0x65707974
    6efc:	25203d20 	.word	0x25203d20
    6f00:	76202c64 	.word	0x76202c64
    6f04:	69737265 	.word	0x69737265
    6f08:	3d206e6f 	.word	0x3d206e6f
    6f0c:	25783020 	.word	0x25783020
    6f10:	0d583230 	.word	0x0d583230
    6f14:	00000000 	.word	0x00000000
    6f18:	63656843 	.word	0x63656843
    6f1c:	676e696b 	.word	0x676e696b
    6f20:	20666920 	.word	0x20666920
    6f24:	67726174 	.word	0x67726174
    6f28:	6d207465 	.word	0x6d207465
    6f2c:	726f6d65 	.word	0x726f6d65
    6f30:	73692079 	.word	0x73692079
    6f34:	616c6220 	.word	0x616c6220
    6f38:	00006b6e 	.word	0x00006b6e
    6f3c:	73617245 	.word	0x73617245
    6f40:	20676e69 	.word	0x20676e69
    6f44:	73616c66 	.word	0x73616c66
    6f48:	61722068 	.word	0x61722068
    6f4c:	2065676e 	.word	0x2065676e
    6f50:	20726f66 	.word	0x20726f66
    6f54:	20656874 	.word	0x20656874
    6f58:	67616d69 	.word	0x67616d69
    6f5c:	00000065 	.word	0x00000065
    6f60:	67726154 	.word	0x67726154
    6f64:	66207465 	.word	0x66207465
    6f68:	6873616c 	.word	0x6873616c
    6f6c:	6e617220 	.word	0x6e617220
    6f70:	69206567 	.word	0x69206567
    6f74:	6c622073 	.word	0x6c622073
    6f78:	006b6e61 	.word	0x006b6e61
    6f7c:	72617453 	.word	0x72617453
    6f80:	676e6974 	.word	0x676e6974
    6f84:	776f6420 	.word	0x776f6420
    6f88:	616f6c6e 	.word	0x616f6c6e
    6f8c:	00000064 	.word	0x00000064
    6f90:	61746f54 	.word	0x61746f54
    6f94:	20796c6c 	.word	0x20796c6c
    6f98:	6425203a 	.word	0x6425203a
    6f9c:	6c662020 	.word	0x6c662020
    6fa0:	57687361 	.word	0x57687361
    6fa4:	65746972 	.word	0x65746972
    6fa8:	65646e49 	.word	0x65646e49
    6fac:	203a2078 	.word	0x203a2078
    6fb0:	0a0d6425 	.word	0x0a0d6425
    6fb4:	00000000 	.word	0x00000000
    6fb8:	70657270 	.word	0x70657270
    6fbc:	20657261 	.word	0x20657261
    6fc0:	00000000 	.word	0x00000000
    6fc4:	79706f43 	.word	0x79706f43
    6fc8:	6d615220 	.word	0x6d615220
    6fcc:	73657220 	.word	0x73657220
    6fd0:	20746c75 	.word	0x20746c75
    6fd4:	65646f63 	.word	0x65646f63
    6fd8:	25203a20 	.word	0x25203a20
    6fdc:	000a0d64 	.word	0x000a0d64
    6fe0:	69706f63 	.word	0x69706f63
    6fe4:	00206465 	.word	0x00206465
    6fe8:	49323375 	.word	0x49323375
    6fec:	435f5041 	.word	0x435f5041
    6ff0:	61706d6f 	.word	0x61706d6f
    6ff4:	3a206572 	.word	0x3a206572
    6ff8:	0d642520 	.word	0x0d642520
    6ffc:	0000000a 	.word	0x0000000a
    7000:	69726576 	.word	0x69726576
    7004:	64656966 	.word	0x64656966
    7008:	00000020 	.word	0x00000020
    700c:	69726576 	.word	0x69726576
    7010:	61636966 	.word	0x61636966
    7014:	6e6f6974 	.word	0x6e6f6974
    7018:	69616620 	.word	0x69616620
    701c:	2064656c 	.word	0x2064656c
    7020:	00000000 	.word	0x00000000
    7024:	00000a0d 	.word	0x00000a0d
    7028:	78323025 	.word	0x78323025
    702c:	00000000 	.word	0x00000000
    7030:	73252020 	.word	0x73252020
    7034:	00000a0d 	.word	0x00000a0d
    7038:	32302520 	.word	0x32302520
    703c:	00000078 	.word	0x00000078
    7040:	00202020 	.word	0x00202020
    7044:	00445049 	.word	0x00445049
    7048:	5043542c 	.word	0x5043542c
    704c:	0000002c 	.word	0x0000002c
    7050:	00000a0d 	.word	0x00000a0d
    7054:	3a504354 	.word	0x3a504354
    7058:	00000000 	.word	0x00000000
    705c:	72617453 	.word	0x72617453
    7060:	6f642074 	.word	0x6f642074
    7064:	6f6c6e77 	.word	0x6f6c6e77
    7068:	6e696461 	.word	0x6e696461
    706c:	00000067 	.word	0x00000067
    7070:	6e6e6f43 	.word	0x6e6e6f43
    7074:	69746365 	.word	0x69746365
    7078:	7320676e 	.word	0x7320676e
    707c:	65746174 	.word	0x65746174
    7080:	6d697420 	.word	0x6d697420
    7084:	65207265 	.word	0x65207265
    7088:	72697078 	.word	0x72697078
    708c:	73206465 	.word	0x73206465
    7090:	69646e65 	.word	0x69646e65
    7094:	2020676e 	.word	0x2020676e
    7098:	2077656e 	.word	0x2077656e
    709c:	75716572 	.word	0x75716572
    70a0:	20747365 	.word	0x20747365
    70a4:	00000020 	.word	0x00000020
    70a8:	72206f4e 	.word	0x72206f4e
    70ac:	796c7065 	.word	0x796c7065
    70b0:	76696720 	.word	0x76696720
    70b4:	70752065 	.word	0x70752065
    70b8:	67707520 	.word	0x67707520
    70bc:	69646172 	.word	0x69646172
    70c0:	0000676e 	.word	0x0000676e
    70c4:	65636552 	.word	0x65636552
    70c8:	64657669 	.word	0x64657669
    70cc:	544f4520 	.word	0x544f4520
    70d0:	00000020 	.word	0x00000020
    70d4:	736f6c43 	.word	0x736f6c43
    70d8:	20676e69 	.word	0x20676e69
    70dc:	20504354 	.word	0x20504354
    70e0:	6e6e6f63 	.word	0x6e6e6f63
    70e4:	69746365 	.word	0x69746365
    70e8:	00206e6f 	.word	0x00206e6f
    70ec:	65747962 	.word	0x65747962
    70f0:	756f6320 	.word	0x756f6320
    70f4:	203a746e 	.word	0x203a746e
    70f8:	202c6425 	.word	0x202c6425
    70fc:	6b636170 	.word	0x6b636170
    7100:	6c207465 	.word	0x6c207465
    7104:	25206e65 	.word	0x25206e65
    7108:	000a0d64 	.word	0x000a0d64
    710c:	65636552 	.word	0x65636552
    7110:	64657669 	.word	0x64657669
    7114:	66206120 	.word	0x66206120
    7118:	656d6172 	.word	0x656d6172
    711c:	00000020 	.word	0x00000020
    7120:	646e6553 	.word	0x646e6553
    7124:	20676e69 	.word	0x20676e69
    7128:	4b434120 	.word	0x4b434120
    712c:	00000020 	.word	0x00000020
    7130:	646e6553 	.word	0x646e6553
    7134:	20676e69 	.word	0x20676e69
    7138:	43414e20 	.word	0x43414e20
    713c:	0000004b 	.word	0x0000004b
    7140:	656d6954 	.word	0x656d6954
    7144:	74756f20 	.word	0x74756f20
    7148:	206e6920 	.word	0x206e6920
    714c:	45434552 	.word	0x45434552
    7150:	4e495649 	.word	0x4e495649
    7154:	20202047 	.word	0x20202047
    7158:	00000000 	.word	0x00000000
    715c:	6e776f44 	.word	0x6e776f44
    7160:	64616f6c 	.word	0x64616f6c
    7164:	6f727020 	.word	0x6f727020
    7168:	73736563 	.word	0x73736563
    716c:	69616620 	.word	0x69616620
    7170:	2064656c 	.word	0x2064656c
    7174:	69766967 	.word	0x69766967
    7178:	7520676e 	.word	0x7520676e
    717c:	70752070 	.word	0x70752070
    7180:	64617267 	.word	0x64617267
    7184:	00676e69 	.word	0x00676e69
    7188:	202a2a2a 	.word	0x202a2a2a
    718c:	7973435f 	.word	0x7973435f
    7190:	6c615f73 	.word	0x6c615f73
    7194:	20636f6c 	.word	0x20636f6c
    7198:	6c696166 	.word	0x6c696166
    719c:	000a6465 	.word	0x000a6465

000071a0 <__ctype>:
	...
    7220:	40404040 40404040 41414140 40404141     @@@@@@@@@AAAAA@@
    7230:	40404040 40404040 40404040 40404040     @@@@@@@@@@@@@@@@
    7240:	02020205 02020202 02020202 02020202     ................
    7250:	20202020 20202020 02022020 02020202               ......
    7260:	90909002 10909090 10101010 10101010     ................
    7270:	10101010 10101010 02101010 02020202     ................
    7280:	88888802 08888888 08080808 08080808     ................
    7290:	08080808 08080808 02080808 40020202     ...............@
	...
    7320:	0020002b 63257830 00642570 63255830     +. .0x%cp%d.0X%c
    7330:	00642550 63257830 2a2e252e 70786c6c     P%d.0x%c.%.*llxp
    7340:	30006425 2e632558 6c2a2e25 2550586c     %d.0X%c.%.*llXP%
    7350:	002d0064 00770072 6c756e28 3000296c     d.-.r.w.(null).0
    7360:	78300058 30003000 34333231 38373635     X.0x.0.012345678
    7370:	43424139 00464544 33323130 37363534     9ABCDEF.01234567
    7380:	62613938 66656463 00000000 00000000     89abcdef........

00007390 <__huge_vall>:
    7390:	ffffffff 7fefffff                       ........
