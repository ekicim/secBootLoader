
secBootLoader.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
	is_gps_valid = 0;
	return FAIL;
}


double GPS_CalculateDistance() {
       0:	00 80 00 10 71 01 00 00 e9 01 00 00 f1 01 00 00     ....q...........
	char buffer[200];
	double local_prev_lat = 0;
      10:	f9 01 00 00 01 02 00 00 09 02 00 00 00 00 00 00     ................
	...
	double local_last_lat = 0;
	int count = sprintf(buffer,"Last Lat : %.10f, Last Lon= %.10f,Prev Lat : %.10f, Prev Lon= %.10f\r\r", last_lat,last_lon,prev_lat,prev_lon);
      2c:	11 02 00 00 19 02 00 00 00 00 00 00 21 02 00 00     ............!...
      3c:	05 27 00 00 25 34 00 00 31 02 00 00 31 02 00 00     .'..%4..1...1...
      4c:	31 02 00 00 31 02 00 00 ed 29 00 00 f5 2a 00 00     1...1....)...*..
      5c:	05 2c 00 00 11 2d 00 00 31 02 00 00 15 13 00 00     .,...-..1.......
	UARTSend(PORT_TRACE, buffer, count);
      6c:	59 16 00 00 31 02 00 00 31 02 00 00 31 02 00 00     Y...1...1...1...
	if (is_gps_valid == 0 || last_lat == 0 || last_lon == 0 || prev_lat == 0 || prev_lon == 0){
      7c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      8c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      9c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      ac:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      bc:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...

000000cc <__data_section_table>:
      cc:	000078e0 	.word	0x000078e0
      d0:	10000000 	.word	0x10000000
      d4:	00000028 	.word	0x00000028
      d8:	000078e0 	.word	0x000078e0
      dc:	2007c000 	.word	0x2007c000
      e0:	00000000 	.word	0x00000000

000000e4 <__bss_section_table>:
      e4:	10000028 	.word	0x10000028
		TraceNL("GPS_CalculateDistance returns..");
      e8:	00001ff8 	.word	0x00001ff8
		return 0;
      ec:	2007c000 	.word	0x2007c000
      f0:	00000000 	.word	0x00000000

000000f4 <data_init>:
      f4:	b480      	push	{r7}
	}
	/////// Convert ddMM to degrees
	double R = 6371000; // m
      f6:	b089      	sub	sp, #36	; 0x24
      f8:	af00      	add	r7, sp, #0
      fa:	60f8      	str	r0, [r7, #12]
      fc:	60b9      	str	r1, [r7, #8]
      fe:	607a      	str	r2, [r7, #4]
	double dLat = (last_lat-prev_lat) * 0.0174532925; // To Radian
     100:	68bb      	ldr	r3, [r7, #8]
     102:	61fb      	str	r3, [r7, #28]
     104:	68fb      	ldr	r3, [r7, #12]
     106:	61bb      	str	r3, [r7, #24]
     108:	2300      	movs	r3, #0
     10a:	617b      	str	r3, [r7, #20]
     10c:	e00a      	b.n	124 <data_init+0x30>
     10e:	69fb      	ldr	r3, [r7, #28]
     110:	1d1a      	adds	r2, r3, #4
     112:	61fa      	str	r2, [r7, #28]
     114:	69ba      	ldr	r2, [r7, #24]
     116:	1d11      	adds	r1, r2, #4
     118:	61b9      	str	r1, [r7, #24]
     11a:	6812      	ldr	r2, [r2, #0]
     11c:	601a      	str	r2, [r3, #0]
     11e:	697b      	ldr	r3, [r7, #20]
     120:	3304      	adds	r3, #4
     122:	617b      	str	r3, [r7, #20]
     124:	697a      	ldr	r2, [r7, #20]
     126:	687b      	ldr	r3, [r7, #4]
     128:	429a      	cmp	r2, r3
	double dLon = (last_lon-prev_lon) * 0.0174532925; //To Radian
     12a:	d3f0      	bcc.n	10e <data_init+0x1a>
     12c:	3724      	adds	r7, #36	; 0x24
     12e:	46bd      	mov	sp, r7
     130:	f85d 7b04 	ldr.w	r7, [sp], #4
     134:	4770      	bx	lr
     136:	bf00      	nop

00000138 <bss_init>:
     138:	b480      	push	{r7}
     13a:	b085      	sub	sp, #20
     13c:	af00      	add	r7, sp, #0
     13e:	6078      	str	r0, [r7, #4]
     140:	6039      	str	r1, [r7, #0]
     142:	687b      	ldr	r3, [r7, #4]
     144:	60fb      	str	r3, [r7, #12]
     146:	2300      	movs	r3, #0
     148:	60bb      	str	r3, [r7, #8]
     14a:	e007      	b.n	15c <bss_init+0x24>
     14c:	68fb      	ldr	r3, [r7, #12]
     14e:	1d1a      	adds	r2, r3, #4
     150:	60fa      	str	r2, [r7, #12]
     152:	2200      	movs	r2, #0
	local_prev_lat = prev_lat * 0.0174532925;
     154:	601a      	str	r2, [r3, #0]
     156:	68bb      	ldr	r3, [r7, #8]
     158:	3304      	adds	r3, #4
     15a:	60bb      	str	r3, [r7, #8]
     15c:	68ba      	ldr	r2, [r7, #8]
     15e:	683b      	ldr	r3, [r7, #0]
     160:	429a      	cmp	r2, r3
     162:	d3f3      	bcc.n	14c <bss_init+0x14>
     164:	3714      	adds	r7, #20
     166:	46bd      	mov	sp, r7
     168:	f85d 7b04 	ldr.w	r7, [sp], #4
     16c:	4770      	bx	lr
     16e:	bf00      	nop

00000170 <ResetISR>:
     170:	b580      	push	{r7, lr}
     172:	b084      	sub	sp, #16
	local_last_lat = last_lat * 0.0174532925;
     174:	af00      	add	r7, sp, #0
     176:	4b19      	ldr	r3, [pc, #100]	; (1dc <ResetISR+0x6c>)
     178:	60fb      	str	r3, [r7, #12]
     17a:	e013      	b.n	1a4 <ResetISR+0x34>
     17c:	68fb      	ldr	r3, [r7, #12]
     17e:	1d1a      	adds	r2, r3, #4
     180:	60fa      	str	r2, [r7, #12]
     182:	681b      	ldr	r3, [r3, #0]
     184:	60bb      	str	r3, [r7, #8]
     186:	68fb      	ldr	r3, [r7, #12]
     188:	1d1a      	adds	r2, r3, #4
     18a:	60fa      	str	r2, [r7, #12]
     18c:	681b      	ldr	r3, [r3, #0]
     18e:	607b      	str	r3, [r7, #4]
     190:	68fb      	ldr	r3, [r7, #12]
     192:	1d1a      	adds	r2, r3, #4
	double a = sin(dLat/2) * sin(dLat/2) + sin(dLon/2) * sin(dLon/2) * cos(local_last_lat) * cos(local_last_lat);
     194:	60fa      	str	r2, [r7, #12]
     196:	681b      	ldr	r3, [r3, #0]
     198:	603b      	str	r3, [r7, #0]
     19a:	68b8      	ldr	r0, [r7, #8]
     19c:	6879      	ldr	r1, [r7, #4]
     19e:	683a      	ldr	r2, [r7, #0]
     1a0:	f7ff ffa8 	bl	f4 <data_init>
     1a4:	68fb      	ldr	r3, [r7, #12]
     1a6:	4a0e      	ldr	r2, [pc, #56]	; (1e0 <ResetISR+0x70>)
     1a8:	4293      	cmp	r3, r2
     1aa:	d3e7      	bcc.n	17c <ResetISR+0xc>
     1ac:	e00d      	b.n	1ca <ResetISR+0x5a>
     1ae:	68fb      	ldr	r3, [r7, #12]
     1b0:	1d1a      	adds	r2, r3, #4
     1b2:	60fa      	str	r2, [r7, #12]
     1b4:	681b      	ldr	r3, [r3, #0]
     1b6:	607b      	str	r3, [r7, #4]
     1b8:	68fb      	ldr	r3, [r7, #12]
     1ba:	1d1a      	adds	r2, r3, #4
     1bc:	60fa      	str	r2, [r7, #12]
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	603b      	str	r3, [r7, #0]
     1c2:	6878      	ldr	r0, [r7, #4]
     1c4:	6839      	ldr	r1, [r7, #0]
     1c6:	f7ff ffb7 	bl	138 <bss_init>
     1ca:	68fb      	ldr	r3, [r7, #12]
     1cc:	4a05      	ldr	r2, [pc, #20]	; (1e4 <ResetISR+0x74>)
     1ce:	4293      	cmp	r3, r2
     1d0:	d3ed      	bcc.n	1ae <ResetISR+0x3e>
     1d2:	f003 fced 	bl	3bb0 <SystemInit>
     1d6:	f003 fd5b 	bl	3c90 <__main>
     1da:	e7fe      	b.n	1da <ResetISR+0x6a>
     1dc:	000000cc 	.word	0x000000cc
     1e0:	000000e4 	.word	0x000000e4
     1e4:	000000f4 	.word	0x000000f4

000001e8 <NMI_Handler>:
     1e8:	b480      	push	{r7}
     1ea:	af00      	add	r7, sp, #0
     1ec:	e7fe      	b.n	1ec <NMI_Handler+0x4>
     1ee:	bf00      	nop

000001f0 <HardFault_Handler>:
     1f0:	b480      	push	{r7}
     1f2:	af00      	add	r7, sp, #0
     1f4:	e7fe      	b.n	1f4 <HardFault_Handler+0x4>
     1f6:	bf00      	nop

000001f8 <MemManage_Handler>:
     1f8:	b480      	push	{r7}
     1fa:	af00      	add	r7, sp, #0
     1fc:	e7fe      	b.n	1fc <MemManage_Handler+0x4>
     1fe:	bf00      	nop

00000200 <BusFault_Handler>:
     200:	b480      	push	{r7}
     202:	af00      	add	r7, sp, #0
     204:	e7fe      	b.n	204 <BusFault_Handler+0x4>
     206:	bf00      	nop

00000208 <UsageFault_Handler>:
     208:	b480      	push	{r7}
     20a:	af00      	add	r7, sp, #0
     20c:	e7fe      	b.n	20c <UsageFault_Handler+0x4>
     20e:	bf00      	nop

00000210 <SVC_Handler>:
     210:	b480      	push	{r7}
     212:	af00      	add	r7, sp, #0
     214:	e7fe      	b.n	214 <SVC_Handler+0x4>
     216:	bf00      	nop

00000218 <DebugMon_Handler>:
     218:	b480      	push	{r7}
     21a:	af00      	add	r7, sp, #0
     21c:	e7fe      	b.n	21c <DebugMon_Handler+0x4>
     21e:	bf00      	nop

00000220 <PendSV_Handler>:
     220:	b480      	push	{r7}
     222:	af00      	add	r7, sp, #0
     224:	e7fe      	b.n	224 <PendSV_Handler+0x4>
     226:	bf00      	nop
     228:	b480      	push	{r7}
     22a:	af00      	add	r7, sp, #0
     22c:	e7fe      	b.n	22c <PendSV_Handler+0xc>
     22e:	bf00      	nop

00000230 <ADC_IRQHandler>:
     230:	b480      	push	{r7}
     232:	af00      	add	r7, sp, #0
     234:	e7fe      	b.n	234 <ADC_IRQHandler+0x4>
     236:	bf00      	nop
     238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     23c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     24c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     25c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     26c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     27c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	double c = 2 * atan2(sqrt(a), sqrt(1-a));
     280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     28c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     29c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	double d = R * c;
     2c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	if (d > 50000) {
     2dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
		TraceNL("GPS_CalculateDistance greater than 50000, returning 0.");
     2f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
		return 0;
     2f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000002fc <CRP_WORD>:
     2fc:	ffff ffff                                   ....

00000300 <LoadParams>:
     300:	b580      	push	{r7, lr}
     302:	b0b2      	sub	sp, #200	; 0xc8
     304:	af00      	add	r7, sp, #0
     306:	4b54      	ldr	r3, [pc, #336]	; (458 <LoadParams+0x158>)
     308:	681b      	ldr	r3, [r3, #0]
     30a:	2200      	movs	r2, #0
     30c:	461a      	mov	r2, r3
     30e:	4610      	mov	r0, r2
     310:	4952      	ldr	r1, [pc, #328]	; (45c <LoadParams+0x15c>)
     312:	f000 fb2b 	bl	96c <EEPROM_LoadString>
     316:	4b51      	ldr	r3, [pc, #324]	; (45c <LoadParams+0x15c>)
     318:	781b      	ldrb	r3, [r3, #0]
     31a:	3380      	adds	r3, #128	; 0x80
     31c:	4a50      	ldr	r2, [pc, #320]	; (460 <LoadParams+0x160>)
     31e:	5cd3      	ldrb	r3, [r2, r3]
     320:	f003 0338 	and.w	r3, r3, #56	; 0x38
     324:	2b00      	cmp	r3, #0
     326:	d00c      	beq.n	342 <LoadParams+0x42>
     328:	484c      	ldr	r0, [pc, #304]	; (45c <LoadParams+0x15c>)
     32a:	f005 f9e9 	bl	5700 <strlen>
     32e:	4603      	mov	r3, r0
     330:	2b04      	cmp	r3, #4
     332:	d906      	bls.n	342 <LoadParams+0x42>
     334:	4849      	ldr	r0, [pc, #292]	; (45c <LoadParams+0x15c>)
     336:	212e      	movs	r1, #46	; 0x2e
     338:	f005 f9b4 	bl	56a4 <strchr>
	}
	TraceNL("*****************");
     33c:	4603      	mov	r3, r0
     33e:	2b00      	cmp	r3, #0
     340:	d103      	bne.n	34a <LoadParams+0x4a>
	TraceNL("*******");
     342:	4846      	ldr	r0, [pc, #280]	; (45c <LoadParams+0x15c>)
     344:	4947      	ldr	r1, [pc, #284]	; (464 <LoadParams+0x164>)
     346:	f005 f9ba 	bl	56be <strcpy>
	TraceNL("**");
     34a:	4b47      	ldr	r3, [pc, #284]	; (468 <LoadParams+0x168>)
     34c:	681b      	ldr	r3, [r3, #0]
	TraceNL("*");
     34e:	2200      	movs	r2, #0
     350:	461a      	mov	r2, r3
     352:	4610      	mov	r0, r2
	count = sprintf(buffer,"GPS Distance= %.10f\r", d);
     354:	f000 fa98 	bl	888 <EEPROM_LoadInt64>
     358:	4602      	mov	r2, r0
     35a:	460b      	mov	r3, r1
     35c:	4b43      	ldr	r3, [pc, #268]	; (46c <LoadParams+0x16c>)
     35e:	601a      	str	r2, [r3, #0]
     360:	4b42      	ldr	r3, [pc, #264]	; (46c <LoadParams+0x16c>)
     362:	681b      	ldr	r3, [r3, #0]
     364:	2b00      	cmp	r3, #0
	UARTSend(PORT_TRACE, buffer, count);
     366:	d005      	beq.n	374 <LoadParams+0x74>
     368:	4b40      	ldr	r3, [pc, #256]	; (46c <LoadParams+0x16c>)
     36a:	681b      	ldr	r3, [r3, #0]
     36c:	f64f 72ff 	movw	r2, #65535	; 0xffff
     370:	4293      	cmp	r3, r2
     372:	d103      	bne.n	37c <LoadParams+0x7c>
     374:	4b3d      	ldr	r3, [pc, #244]	; (46c <LoadParams+0x16c>)
	TraceNL("*****************");
     376:	f241 72c1 	movw	r2, #6081	; 0x17c1
     37a:	601a      	str	r2, [r3, #0]
	TraceNL("*******");
     37c:	4b3c      	ldr	r3, [pc, #240]	; (470 <LoadParams+0x170>)
     37e:	681b      	ldr	r3, [r3, #0]
     380:	2200      	movs	r2, #0
	TraceNL("**");
     382:	461a      	mov	r2, r3
     384:	4610      	mov	r0, r2
     386:	493b      	ldr	r1, [pc, #236]	; (474 <LoadParams+0x174>)
	TraceNL("*");
     388:	f000 faf0 	bl	96c <EEPROM_LoadString>
     38c:	4b39      	ldr	r3, [pc, #228]	; (474 <LoadParams+0x174>)
	/*if (d < 1)
		d=0;*///Active in production
	return d;
     38e:	781b      	ldrb	r3, [r3, #0]
     390:	3380      	adds	r3, #128	; 0x80
}
     392:	4a33      	ldr	r2, [pc, #204]	; (460 <LoadParams+0x160>)
     394:	5cd3      	ldrb	r3, [r2, r3]
     396:	f003 0338 	and.w	r3, r3, #56	; 0x38
     39a:	2b00      	cmp	r3, #0
     39c:	d005      	beq.n	3aa <LoadParams+0xaa>
     39e:	4835      	ldr	r0, [pc, #212]	; (474 <LoadParams+0x174>)
     3a0:	f005 f9ae 	bl	5700 <strlen>
     3a4:	4603      	mov	r3, r0
     3a6:	2b02      	cmp	r3, #2
     3a8:	d803      	bhi.n	3b2 <LoadParams+0xb2>
     3aa:	4832      	ldr	r0, [pc, #200]	; (474 <LoadParams+0x174>)
     3ac:	4932      	ldr	r1, [pc, #200]	; (478 <LoadParams+0x178>)
     3ae:	f005 f986 	bl	56be <strcpy>
     3b2:	4b32      	ldr	r3, [pc, #200]	; (47c <LoadParams+0x17c>)
	//LOAD APN
	EEPROM_LoadString(cal_apn, per_apn_val);
	if (isalnum(per_apn_val[0]) == 0 || strlen(per_apn_val) < 3)
		strcpy(per_apn_val, "internet");//Default value
	//LOAD APN User
	EEPROM_LoadString(cal_apn_user, per_apnuser_val);
     3b4:	681b      	ldr	r3, [r3, #0]
     3b6:	2200      	movs	r2, #0
     3b8:	461a      	mov	r2, r3
     3ba:	4610      	mov	r0, r2
     3bc:	4930      	ldr	r1, [pc, #192]	; (480 <LoadParams+0x180>)
     3be:	f000 fad5 	bl	96c <EEPROM_LoadString>
	if (isalnum(per_apnuser_val[0]) == 0 || strlen(per_apnuser_val) < 3)
     3c2:	4b2f      	ldr	r3, [pc, #188]	; (480 <LoadParams+0x180>)
     3c4:	781b      	ldrb	r3, [r3, #0]
     3c6:	3380      	adds	r3, #128	; 0x80
     3c8:	4a25      	ldr	r2, [pc, #148]	; (460 <LoadParams+0x160>)
     3ca:	5cd3      	ldrb	r3, [r2, r3]
     3cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
     3d0:	2b00      	cmp	r3, #0
     3d2:	d005      	beq.n	3e0 <LoadParams+0xe0>
     3d4:	482a      	ldr	r0, [pc, #168]	; (480 <LoadParams+0x180>)
     3d6:	f005 f993 	bl	5700 <strlen>
     3da:	4603      	mov	r3, r0
     3dc:	2b02      	cmp	r3, #2
     3de:	d803      	bhi.n	3e8 <LoadParams+0xe8>
		strcpy(per_apnuser_val, "vodafone");//Default value
     3e0:	4827      	ldr	r0, [pc, #156]	; (480 <LoadParams+0x180>)
     3e2:	4928      	ldr	r1, [pc, #160]	; (484 <LoadParams+0x184>)
     3e4:	f005 f96b 	bl	56be <strcpy>
	//LOAD APN Pass
	EEPROM_LoadString(cal_apn_pass, per_apnpass_val);
     3e8:	4b27      	ldr	r3, [pc, #156]	; (488 <LoadParams+0x188>)
     3ea:	681b      	ldr	r3, [r3, #0]
     3ec:	2200      	movs	r2, #0
     3ee:	461a      	mov	r2, r3
     3f0:	4610      	mov	r0, r2
     3f2:	4926      	ldr	r1, [pc, #152]	; (48c <LoadParams+0x18c>)
     3f4:	f000 faba 	bl	96c <EEPROM_LoadString>
	if (isalnum(per_apnpass_val[0]) == 0 || strlen(per_apnpass_val) < 3)
     3f8:	4b24      	ldr	r3, [pc, #144]	; (48c <LoadParams+0x18c>)
     3fa:	781b      	ldrb	r3, [r3, #0]
     3fc:	3380      	adds	r3, #128	; 0x80
     3fe:	4a18      	ldr	r2, [pc, #96]	; (460 <LoadParams+0x160>)
     400:	5cd3      	ldrb	r3, [r2, r3]
     402:	f003 0338 	and.w	r3, r3, #56	; 0x38
     406:	2b00      	cmp	r3, #0
     408:	d005      	beq.n	416 <LoadParams+0x116>
     40a:	4820      	ldr	r0, [pc, #128]	; (48c <LoadParams+0x18c>)
     40c:	f005 f978 	bl	5700 <strlen>
     410:	4603      	mov	r3, r0
     412:	2b02      	cmp	r3, #2
     414:	d803      	bhi.n	41e <LoadParams+0x11e>
		strcpy(per_apnpass_val, "vodafone");//Default value
     416:	481d      	ldr	r0, [pc, #116]	; (48c <LoadParams+0x18c>)
     418:	491a      	ldr	r1, [pc, #104]	; (484 <LoadParams+0x184>)
     41a:	f005 f950 	bl	56be <strcpy>

	//LOAD Mileage
	per_mileage_val = EEPROM_LoadInt64(cal_mileage);
     41e:	4b1c      	ldr	r3, [pc, #112]	; (490 <LoadParams+0x190>)
     420:	681b      	ldr	r3, [r3, #0]
     422:	2200      	movs	r2, #0
     424:	461a      	mov	r2, r3
     426:	4610      	mov	r0, r2
     428:	f000 fa2e 	bl	888 <EEPROM_LoadInt64>
     42c:	4602      	mov	r2, r0
     42e:	460b      	mov	r3, r1
     430:	4918      	ldr	r1, [pc, #96]	; (494 <LoadParams+0x194>)
     432:	e9c1 2300 	strd	r2, r3, [r1]
	sprintf(buffer, "Mileage: %d\n", (int)per_mileage_val);
     436:	4b17      	ldr	r3, [pc, #92]	; (494 <LoadParams+0x194>)
     438:	e9d3 2300 	ldrd	r2, r3, [r3]
     43c:	463b      	mov	r3, r7
     43e:	4618      	mov	r0, r3
     440:	4915      	ldr	r1, [pc, #84]	; (498 <LoadParams+0x198>)
     442:	f003 fcf7 	bl	3e34 <sprintf>
	TraceNL(buffer);
     446:	463b      	mov	r3, r7
     448:	4618      	mov	r0, r3
     44a:	f002 f98f 	bl	276c <TraceNL>
	LoadTimings();
     44e:	f000 f825 	bl	49c <LoadTimings>

	//MODE 0 = Deep Power Down
	//MODE 1 = Power Down
}
     452:	37c8      	adds	r7, #200	; 0xc8
     454:	46bd      	mov	sp, r7
     456:	bd80      	pop	{r7, pc}
     458:	10000d30 	.word	0x10000d30
     45c:	10000cb0 	.word	0x10000cb0
     460:	000076e8 	.word	0x000076e8
     464:	000066f4 	.word	0x000066f4
     468:	10000d2c 	.word	0x10000d2c
     46c:	10000d20 	.word	0x10000d20
     470:	10000d68 	.word	0x10000d68
     474:	10000d6c 	.word	0x10000d6c
     478:	00006704 	.word	0x00006704
     47c:	10000d1c 	.word	0x10000d1c
     480:	10000d00 	.word	0x10000d00
     484:	00006710 	.word	0x00006710
     488:	10000ca4 	.word	0x10000ca4
     48c:	10000d50 	.word	0x10000d50
     490:	10000cf0 	.word	0x10000cf0
     494:	10000d40 	.word	0x10000d40
     498:	0000671c 	.word	0x0000671c

0000049c <LoadTimings>:

void LoadTimings() {
     49c:	b580      	push	{r7, lr}
     49e:	b0b4      	sub	sp, #208	; 0xd0
     4a0:	af00      	add	r7, sp, #0
	char buffer[200];
	//LOAD Ignition On Period
	per_ignonperiod_val = EEPROM_LoadInt64(cal_ign_on_period);
     4a2:	4b98      	ldr	r3, [pc, #608]	; (704 <LoadTimings+0x268>)
     4a4:	681b      	ldr	r3, [r3, #0]
     4a6:	2200      	movs	r2, #0
     4a8:	461a      	mov	r2, r3
     4aa:	4610      	mov	r0, r2
     4ac:	f000 f9ec 	bl	888 <EEPROM_LoadInt64>
     4b0:	4602      	mov	r2, r0
     4b2:	460b      	mov	r3, r1
     4b4:	4b94      	ldr	r3, [pc, #592]	; (708 <LoadTimings+0x26c>)
     4b6:	601a      	str	r2, [r3, #0]
	if (per_ignonperiod_val == 0 || per_ignonperiod_val > 14400)
     4b8:	4b93      	ldr	r3, [pc, #588]	; (708 <LoadTimings+0x26c>)
     4ba:	681b      	ldr	r3, [r3, #0]
     4bc:	2b00      	cmp	r3, #0
     4be:	d004      	beq.n	4ca <LoadTimings+0x2e>
     4c0:	4b91      	ldr	r3, [pc, #580]	; (708 <LoadTimings+0x26c>)
     4c2:	681b      	ldr	r3, [r3, #0]
     4c4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     4c8:	dd02      	ble.n	4d0 <LoadTimings+0x34>
		per_ignonperiod_val = 60;
     4ca:	4b8f      	ldr	r3, [pc, #572]	; (708 <LoadTimings+0x26c>)
     4cc:	223c      	movs	r2, #60	; 0x3c
     4ce:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignonperiod_val: %d\n", (int)per_ignonperiod_val);
     4d0:	4b8d      	ldr	r3, [pc, #564]	; (708 <LoadTimings+0x26c>)
     4d2:	681b      	ldr	r3, [r3, #0]
     4d4:	1d3a      	adds	r2, r7, #4
     4d6:	4610      	mov	r0, r2
     4d8:	498c      	ldr	r1, [pc, #560]	; (70c <LoadTimings+0x270>)
     4da:	461a      	mov	r2, r3
     4dc:	f003 fcaa 	bl	3e34 <sprintf>
	TraceNL(buffer);
     4e0:	1d3b      	adds	r3, r7, #4
     4e2:	4618      	mov	r0, r3
     4e4:	f002 f942 	bl	276c <TraceNL>
	//LOAD Ignition Off Period
	per_ignoffperiod_val = (int)EEPROM_LoadInt64(cal_ign_off_period);
     4e8:	4b89      	ldr	r3, [pc, #548]	; (710 <LoadTimings+0x274>)
     4ea:	681b      	ldr	r3, [r3, #0]
     4ec:	2200      	movs	r2, #0
     4ee:	461a      	mov	r2, r3
     4f0:	4610      	mov	r0, r2
     4f2:	f000 f9c9 	bl	888 <EEPROM_LoadInt64>
     4f6:	4602      	mov	r2, r0
     4f8:	460b      	mov	r3, r1
     4fa:	4b86      	ldr	r3, [pc, #536]	; (714 <LoadTimings+0x278>)
     4fc:	601a      	str	r2, [r3, #0]
	int original_per_ignoffperiod_val = per_ignoffperiod_val;
     4fe:	4b85      	ldr	r3, [pc, #532]	; (714 <LoadTimings+0x278>)
     500:	681b      	ldr	r3, [r3, #0]
     502:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (per_ignoffperiod_val == 0 || per_ignoffperiod_val > 14400) //4 hours max.
     506:	4b83      	ldr	r3, [pc, #524]	; (714 <LoadTimings+0x278>)
     508:	681b      	ldr	r3, [r3, #0]
     50a:	2b00      	cmp	r3, #0
     50c:	d004      	beq.n	518 <LoadTimings+0x7c>
     50e:	4b81      	ldr	r3, [pc, #516]	; (714 <LoadTimings+0x278>)
     510:	681b      	ldr	r3, [r3, #0]
     512:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     516:	dd02      	ble.n	51e <LoadTimings+0x82>
		per_ignoffperiod_val = 120;
     518:	4b7e      	ldr	r3, [pc, #504]	; (714 <LoadTimings+0x278>)
     51a:	2278      	movs	r2, #120	; 0x78
     51c:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignoffperiod_val: %d, per_ignoffperiod_val(original): %d\n", (int)per_ignoffperiod_val,(int)original_per_ignoffperiod_val);
     51e:	4b7d      	ldr	r3, [pc, #500]	; (714 <LoadTimings+0x278>)
     520:	681b      	ldr	r3, [r3, #0]
     522:	1d3a      	adds	r2, r7, #4
     524:	4610      	mov	r0, r2
     526:	497c      	ldr	r1, [pc, #496]	; (718 <LoadTimings+0x27c>)
     528:	461a      	mov	r2, r3
     52a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
     52e:	f003 fc81 	bl	3e34 <sprintf>
	TraceNL(buffer);
     532:	1d3b      	adds	r3, r7, #4
     534:	4618      	mov	r0, r3
     536:	f002 f919 	bl	276c <TraceNL>
	//LOAD Ignition On Roaming Period
	per_ignonroamingperiod_val = (int)EEPROM_LoadInt64(cal_ign_on_roaming_period);
     53a:	4b78      	ldr	r3, [pc, #480]	; (71c <LoadTimings+0x280>)
     53c:	681b      	ldr	r3, [r3, #0]
     53e:	2200      	movs	r2, #0
     540:	461a      	mov	r2, r3
     542:	4610      	mov	r0, r2
     544:	f000 f9a0 	bl	888 <EEPROM_LoadInt64>
     548:	4602      	mov	r2, r0
     54a:	460b      	mov	r3, r1
     54c:	4b74      	ldr	r3, [pc, #464]	; (720 <LoadTimings+0x284>)
     54e:	601a      	str	r2, [r3, #0]
	if (per_ignonroamingperiod_val == 0 || per_ignonroamingperiod_val > 14400)
     550:	4b73      	ldr	r3, [pc, #460]	; (720 <LoadTimings+0x284>)
     552:	681b      	ldr	r3, [r3, #0]
     554:	2b00      	cmp	r3, #0
     556:	d004      	beq.n	562 <LoadTimings+0xc6>
     558:	4b71      	ldr	r3, [pc, #452]	; (720 <LoadTimings+0x284>)
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     560:	dd03      	ble.n	56a <LoadTimings+0xce>
		per_ignonroamingperiod_val = 1800;
     562:	4b6f      	ldr	r3, [pc, #444]	; (720 <LoadTimings+0x284>)
     564:	f44f 62e1 	mov.w	r2, #1800	; 0x708
     568:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignonroamingperiod_val: %d\n", (int)per_ignonroamingperiod_val);
     56a:	4b6d      	ldr	r3, [pc, #436]	; (720 <LoadTimings+0x284>)
     56c:	681b      	ldr	r3, [r3, #0]
     56e:	1d3a      	adds	r2, r7, #4
     570:	4610      	mov	r0, r2
     572:	496c      	ldr	r1, [pc, #432]	; (724 <LoadTimings+0x288>)
     574:	461a      	mov	r2, r3
     576:	f003 fc5d 	bl	3e34 <sprintf>
	TraceNL(buffer);
     57a:	1d3b      	adds	r3, r7, #4
     57c:	4618      	mov	r0, r3
     57e:	f002 f8f5 	bl	276c <TraceNL>
	//LOAD Ignition Off Roaming Period
	per_ignoffroamingperiod_val = (int)EEPROM_LoadInt64(cal_ign_off_roaming_period);
     582:	4b69      	ldr	r3, [pc, #420]	; (728 <LoadTimings+0x28c>)
     584:	681b      	ldr	r3, [r3, #0]
     586:	2200      	movs	r2, #0
     588:	461a      	mov	r2, r3
     58a:	4610      	mov	r0, r2
     58c:	f000 f97c 	bl	888 <EEPROM_LoadInt64>
     590:	4602      	mov	r2, r0
     592:	460b      	mov	r3, r1
     594:	4b65      	ldr	r3, [pc, #404]	; (72c <LoadTimings+0x290>)
     596:	601a      	str	r2, [r3, #0]
	if (per_ignoffroamingperiod_val == 0 || per_ignoffroamingperiod_val > 14400)
     598:	4b64      	ldr	r3, [pc, #400]	; (72c <LoadTimings+0x290>)
     59a:	681b      	ldr	r3, [r3, #0]
     59c:	2b00      	cmp	r3, #0
     59e:	d004      	beq.n	5aa <LoadTimings+0x10e>
     5a0:	4b62      	ldr	r3, [pc, #392]	; (72c <LoadTimings+0x290>)
     5a2:	681b      	ldr	r3, [r3, #0]
     5a4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     5a8:	dd03      	ble.n	5b2 <LoadTimings+0x116>
		per_ignoffroamingperiod_val = 7200;
     5aa:	4b60      	ldr	r3, [pc, #384]	; (72c <LoadTimings+0x290>)
     5ac:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
     5b0:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignoffroamingperiod_val: %d\n", (int)per_ignoffroamingperiod_val);
     5b2:	4b5e      	ldr	r3, [pc, #376]	; (72c <LoadTimings+0x290>)
     5b4:	681b      	ldr	r3, [r3, #0]
     5b6:	1d3a      	adds	r2, r7, #4
     5b8:	4610      	mov	r0, r2
     5ba:	495d      	ldr	r1, [pc, #372]	; (730 <LoadTimings+0x294>)
     5bc:	461a      	mov	r2, r3
     5be:	f003 fc39 	bl	3e34 <sprintf>
	TraceNL(buffer);
     5c2:	1d3b      	adds	r3, r7, #4
     5c4:	4618      	mov	r0, r3
     5c6:	f002 f8d1 	bl	276c <TraceNL>
	per_lowpow_just_wake = (int)EEPROM_LoadInt64(cal_lowpow_just_wake);
     5ca:	4b5a      	ldr	r3, [pc, #360]	; (734 <LoadTimings+0x298>)
     5cc:	681b      	ldr	r3, [r3, #0]
     5ce:	2200      	movs	r2, #0
     5d0:	461a      	mov	r2, r3
     5d2:	4610      	mov	r0, r2
     5d4:	f000 f958 	bl	888 <EEPROM_LoadInt64>
     5d8:	4602      	mov	r2, r0
     5da:	460b      	mov	r3, r1
     5dc:	4b56      	ldr	r3, [pc, #344]	; (738 <LoadTimings+0x29c>)
     5de:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_just_wake: %d\n", (int)per_lowpow_just_wake);
     5e0:	4b55      	ldr	r3, [pc, #340]	; (738 <LoadTimings+0x29c>)
     5e2:	681b      	ldr	r3, [r3, #0]
     5e4:	1d3a      	adds	r2, r7, #4
     5e6:	4610      	mov	r0, r2
     5e8:	4954      	ldr	r1, [pc, #336]	; (73c <LoadTimings+0x2a0>)
     5ea:	461a      	mov	r2, r3
     5ec:	f003 fc22 	bl	3e34 <sprintf>
	TraceNL(buffer);
     5f0:	1d3b      	adds	r3, r7, #4
     5f2:	4618      	mov	r0, r3
     5f4:	f002 f8ba 	bl	276c <TraceNL>
	per_lowpow_cancel = (int)EEPROM_LoadInt64(cal_lowpow_cancel);
     5f8:	4b51      	ldr	r3, [pc, #324]	; (740 <LoadTimings+0x2a4>)
     5fa:	681b      	ldr	r3, [r3, #0]
     5fc:	2200      	movs	r2, #0
     5fe:	461a      	mov	r2, r3
     600:	4610      	mov	r0, r2
     602:	f000 f941 	bl	888 <EEPROM_LoadInt64>
     606:	4602      	mov	r2, r0
     608:	460b      	mov	r3, r1
     60a:	4b4e      	ldr	r3, [pc, #312]	; (744 <LoadTimings+0x2a8>)
     60c:	601a      	str	r2, [r3, #0]
	if (per_lowpow_cancel > 2)
     60e:	4b4d      	ldr	r3, [pc, #308]	; (744 <LoadTimings+0x2a8>)
     610:	681b      	ldr	r3, [r3, #0]
     612:	2b02      	cmp	r3, #2
     614:	dd02      	ble.n	61c <LoadTimings+0x180>
		per_lowpow_cancel = 0;
     616:	4b4b      	ldr	r3, [pc, #300]	; (744 <LoadTimings+0x2a8>)
     618:	2200      	movs	r2, #0
     61a:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_cancel: %d\n", (int)per_lowpow_cancel);
     61c:	4b49      	ldr	r3, [pc, #292]	; (744 <LoadTimings+0x2a8>)
     61e:	681b      	ldr	r3, [r3, #0]
     620:	1d3a      	adds	r2, r7, #4
     622:	4610      	mov	r0, r2
     624:	4948      	ldr	r1, [pc, #288]	; (748 <LoadTimings+0x2ac>)
     626:	461a      	mov	r2, r3
     628:	f003 fc04 	bl	3e34 <sprintf>
	TraceNL(buffer);
     62c:	1d3b      	adds	r3, r7, #4
     62e:	4618      	mov	r0, r3
     630:	f002 f89c 	bl	276c <TraceNL>
	//LOAD Low Power Wake Up Period
	per_lowpow_period = (int)EEPROM_LoadInt64(cal_lowpow_period);
     634:	4b45      	ldr	r3, [pc, #276]	; (74c <LoadTimings+0x2b0>)
     636:	681b      	ldr	r3, [r3, #0]
     638:	2200      	movs	r2, #0
     63a:	461a      	mov	r2, r3
     63c:	4610      	mov	r0, r2
     63e:	f000 f923 	bl	888 <EEPROM_LoadInt64>
     642:	4602      	mov	r2, r0
     644:	460b      	mov	r3, r1
     646:	4b42      	ldr	r3, [pc, #264]	; (750 <LoadTimings+0x2b4>)
     648:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_period(original): %d\n", (int)per_lowpow_period);
     64a:	4b41      	ldr	r3, [pc, #260]	; (750 <LoadTimings+0x2b4>)
     64c:	681b      	ldr	r3, [r3, #0]
     64e:	1d3a      	adds	r2, r7, #4
     650:	4610      	mov	r0, r2
     652:	4940      	ldr	r1, [pc, #256]	; (754 <LoadTimings+0x2b8>)
     654:	461a      	mov	r2, r3
     656:	f003 fbed 	bl	3e34 <sprintf>
	TraceNL(buffer);
     65a:	1d3b      	adds	r3, r7, #4
     65c:	4618      	mov	r0, r3
     65e:	f002 f885 	bl	276c <TraceNL>
	if (per_lowpow_period < 1 || per_lowpow_period > 2880){ //No period more than 2 days.
     662:	4b3b      	ldr	r3, [pc, #236]	; (750 <LoadTimings+0x2b4>)
     664:	681b      	ldr	r3, [r3, #0]
     666:	2b00      	cmp	r3, #0
     668:	dd04      	ble.n	674 <LoadTimings+0x1d8>
     66a:	4b39      	ldr	r3, [pc, #228]	; (750 <LoadTimings+0x2b4>)
     66c:	681b      	ldr	r3, [r3, #0]
     66e:	f5b3 6f34 	cmp.w	r3, #2880	; 0xb40
     672:	dd02      	ble.n	67a <LoadTimings+0x1de>
		per_lowpow_period = 59;
     674:	4b36      	ldr	r3, [pc, #216]	; (750 <LoadTimings+0x2b4>)
     676:	223b      	movs	r2, #59	; 0x3b
     678:	601a      	str	r2, [r3, #0]
		#endif
		#ifdef CABINET_DEMO
			per_lowpow_period = 15; //59;//1Hour
		#endif
	}
	sprintf(buffer, "per_lowpow_period: %d\n", (int)per_lowpow_period);
     67a:	4b35      	ldr	r3, [pc, #212]	; (750 <LoadTimings+0x2b4>)
     67c:	681b      	ldr	r3, [r3, #0]
     67e:	1d3a      	adds	r2, r7, #4
     680:	4610      	mov	r0, r2
     682:	4935      	ldr	r1, [pc, #212]	; (758 <LoadTimings+0x2bc>)
     684:	461a      	mov	r2, r3
     686:	f003 fbd5 	bl	3e34 <sprintf>
	TraceNL(buffer);
     68a:	1d3b      	adds	r3, r7, #4
     68c:	4618      	mov	r0, r3
     68e:	f002 f86d 	bl	276c <TraceNL>
	per_lowpow_mode = (int)EEPROM_LoadInt64(cal_lowpow_mode);
     692:	4b32      	ldr	r3, [pc, #200]	; (75c <LoadTimings+0x2c0>)
     694:	681b      	ldr	r3, [r3, #0]
     696:	2200      	movs	r2, #0
     698:	461a      	mov	r2, r3
     69a:	4610      	mov	r0, r2
     69c:	f000 f8f4 	bl	888 <EEPROM_LoadInt64>
     6a0:	4602      	mov	r2, r0
     6a2:	460b      	mov	r3, r1
     6a4:	4b2e      	ldr	r3, [pc, #184]	; (760 <LoadTimings+0x2c4>)
     6a6:	601a      	str	r2, [r3, #0]
	if (per_lowpow_mode > 2){
     6a8:	4b2d      	ldr	r3, [pc, #180]	; (760 <LoadTimings+0x2c4>)
     6aa:	681b      	ldr	r3, [r3, #0]
     6ac:	2b02      	cmp	r3, #2
     6ae:	dd02      	ble.n	6b6 <LoadTimings+0x21a>
		per_lowpow_mode = 0;
     6b0:	4b2b      	ldr	r3, [pc, #172]	; (760 <LoadTimings+0x2c4>)
     6b2:	2200      	movs	r2, #0
     6b4:	601a      	str	r2, [r3, #0]
		#ifdef CABINET_DEMO
			per_lowpow_mode = 1; //Light sleep
		#endif
	}
	sprintf(buffer, "per_lowpow_mode: %d\n", (int)per_lowpow_mode);
     6b6:	4b2a      	ldr	r3, [pc, #168]	; (760 <LoadTimings+0x2c4>)
     6b8:	681b      	ldr	r3, [r3, #0]
     6ba:	1d3a      	adds	r2, r7, #4
     6bc:	4610      	mov	r0, r2
     6be:	4929      	ldr	r1, [pc, #164]	; (764 <LoadTimings+0x2c8>)
     6c0:	461a      	mov	r2, r3
     6c2:	f003 fbb7 	bl	3e34 <sprintf>
	TraceNL(buffer);
     6c6:	1d3b      	adds	r3, r7, #4
     6c8:	4618      	mov	r0, r3
     6ca:	f002 f84f 	bl	276c <TraceNL>
	per_coffe_counter = (int)EEPROM_LoadInt64(cal_coffee_counter);
     6ce:	4b26      	ldr	r3, [pc, #152]	; (768 <LoadTimings+0x2cc>)
     6d0:	681b      	ldr	r3, [r3, #0]
     6d2:	2200      	movs	r2, #0
     6d4:	461a      	mov	r2, r3
     6d6:	4610      	mov	r0, r2
     6d8:	f000 f8d6 	bl	888 <EEPROM_LoadInt64>
     6dc:	4602      	mov	r2, r0
     6de:	460b      	mov	r3, r1
     6e0:	4b22      	ldr	r3, [pc, #136]	; (76c <LoadTimings+0x2d0>)
     6e2:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_coffee_counter: %d\n", (int)per_coffe_counter);
     6e4:	4b21      	ldr	r3, [pc, #132]	; (76c <LoadTimings+0x2d0>)
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	1d3a      	adds	r2, r7, #4
     6ea:	4610      	mov	r0, r2
     6ec:	4920      	ldr	r1, [pc, #128]	; (770 <LoadTimings+0x2d4>)
     6ee:	461a      	mov	r2, r3
     6f0:	f003 fba0 	bl	3e34 <sprintf>
	TraceNL(buffer);
     6f4:	1d3b      	adds	r3, r7, #4
     6f6:	4618      	mov	r0, r3
     6f8:	f002 f838 	bl	276c <TraceNL>
}
     6fc:	37d0      	adds	r7, #208	; 0xd0
     6fe:	46bd      	mov	sp, r7
     700:	bd80      	pop	{r7, pc}
     702:	bf00      	nop
     704:	10000cd8 	.word	0x10000cd8
     708:	10000ce0 	.word	0x10000ce0
     70c:	0000672c 	.word	0x0000672c
     710:	10000d48 	.word	0x10000d48
     714:	10000ca8 	.word	0x10000ca8
     718:	00006748 	.word	0x00006748
     71c:	10000cf8 	.word	0x10000cf8
     720:	10000cdc 	.word	0x10000cdc
     724:	00006788 	.word	0x00006788
     728:	10000d28 	.word	0x10000d28
     72c:	10000d4c 	.word	0x10000d4c
     730:	000067a8 	.word	0x000067a8
     734:	10000d34 	.word	0x10000d34
     738:	10000cf4 	.word	0x10000cf4
     73c:	000067cc 	.word	0x000067cc
     740:	10000cfc 	.word	0x10000cfc
     744:	10000d38 	.word	0x10000d38
     748:	000067e8 	.word	0x000067e8
     74c:	10000d64 	.word	0x10000d64
     750:	10000ca0 	.word	0x10000ca0
     754:	00006800 	.word	0x00006800
     758:	00006824 	.word	0x00006824
     75c:	10000ce4 	.word	0x10000ce4
     760:	10000ce8 	.word	0x10000ce8
     764:	0000683c 	.word	0x0000683c
     768:	10000cec 	.word	0x10000cec
     76c:	10000d3c 	.word	0x10000d3c
     770:	00006854 	.word	0x00006854

00000774 <EEPROM_Init>:

void PersistParams() {
	EEPROM_SaveInt64(cal_mileage,per_mileage_val);
}

uint8_t EEPROM_Init() {
     774:	b580      	push	{r7, lr}
     776:	af00      	add	r7, sp, #0
	//Initialize EEPROM Memory Map -- 256x8
	test.StartPos = 0;
     778:	4b33      	ldr	r3, [pc, #204]	; (848 <EEPROM_Init+0xd4>)
     77a:	2200      	movs	r2, #0
     77c:	805a      	strh	r2, [r3, #2]
	test.Length = 2;
     77e:	4b32      	ldr	r3, [pc, #200]	; (848 <EEPROM_Init+0xd4>)
     780:	2202      	movs	r2, #2
     782:	801a      	strh	r2, [r3, #0]
	//Calibration test, ip, port, apn, apn_user, apn_pass, ign_on_period, ign_off_period, ign_on_roaming_period, ign_off_roaming_period, mileage;
	cal_port.StartPos = 6;
     784:	4b31      	ldr	r3, [pc, #196]	; (84c <EEPROM_Init+0xd8>)
     786:	2206      	movs	r2, #6
     788:	805a      	strh	r2, [r3, #2]
	cal_port.Length = 2;
     78a:	4b30      	ldr	r3, [pc, #192]	; (84c <EEPROM_Init+0xd8>)
     78c:	2202      	movs	r2, #2
     78e:	801a      	strh	r2, [r3, #0]
	cal_apn.StartPos = 8;
     790:	4b2f      	ldr	r3, [pc, #188]	; (850 <EEPROM_Init+0xdc>)
     792:	2208      	movs	r2, #8
     794:	805a      	strh	r2, [r3, #2]
	cal_apn.Length = 25;
     796:	4b2e      	ldr	r3, [pc, #184]	; (850 <EEPROM_Init+0xdc>)
     798:	2219      	movs	r2, #25
     79a:	801a      	strh	r2, [r3, #0]
	cal_apn_user.StartPos = 33;
     79c:	4b2d      	ldr	r3, [pc, #180]	; (854 <EEPROM_Init+0xe0>)
     79e:	2221      	movs	r2, #33	; 0x21
     7a0:	805a      	strh	r2, [r3, #2]
	cal_apn_user.Length = 12;
     7a2:	4b2c      	ldr	r3, [pc, #176]	; (854 <EEPROM_Init+0xe0>)
     7a4:	220c      	movs	r2, #12
     7a6:	801a      	strh	r2, [r3, #0]
	cal_apn_pass.StartPos = 45;
     7a8:	4b2b      	ldr	r3, [pc, #172]	; (858 <EEPROM_Init+0xe4>)
     7aa:	222d      	movs	r2, #45	; 0x2d
     7ac:	805a      	strh	r2, [r3, #2]
	cal_apn_pass.Length = 12;
     7ae:	4b2a      	ldr	r3, [pc, #168]	; (858 <EEPROM_Init+0xe4>)
     7b0:	220c      	movs	r2, #12
     7b2:	801a      	strh	r2, [r3, #0]
	cal_ign_on_period.StartPos = 57;
     7b4:	4b29      	ldr	r3, [pc, #164]	; (85c <EEPROM_Init+0xe8>)
     7b6:	2239      	movs	r2, #57	; 0x39
     7b8:	805a      	strh	r2, [r3, #2]
	cal_ign_on_period.Length = 2;
     7ba:	4b28      	ldr	r3, [pc, #160]	; (85c <EEPROM_Init+0xe8>)
     7bc:	2202      	movs	r2, #2
     7be:	801a      	strh	r2, [r3, #0]
	cal_lowpow_period.StartPos = 59;
     7c0:	4b27      	ldr	r3, [pc, #156]	; (860 <EEPROM_Init+0xec>)
     7c2:	223b      	movs	r2, #59	; 0x3b
     7c4:	805a      	strh	r2, [r3, #2]
	cal_lowpow_period.Length = 2;
     7c6:	4b26      	ldr	r3, [pc, #152]	; (860 <EEPROM_Init+0xec>)
     7c8:	2202      	movs	r2, #2
     7ca:	801a      	strh	r2, [r3, #0]
	cal_ign_on_roaming_period.StartPos = 61;
     7cc:	4b25      	ldr	r3, [pc, #148]	; (864 <EEPROM_Init+0xf0>)
     7ce:	223d      	movs	r2, #61	; 0x3d
     7d0:	805a      	strh	r2, [r3, #2]
	cal_ign_on_roaming_period.Length = 2;
     7d2:	4b24      	ldr	r3, [pc, #144]	; (864 <EEPROM_Init+0xf0>)
     7d4:	2202      	movs	r2, #2
     7d6:	801a      	strh	r2, [r3, #0]
	cal_ign_off_roaming_period.StartPos = 63;
     7d8:	4b23      	ldr	r3, [pc, #140]	; (868 <EEPROM_Init+0xf4>)
     7da:	223f      	movs	r2, #63	; 0x3f
     7dc:	805a      	strh	r2, [r3, #2]
	cal_ign_off_roaming_period.Length = 2;
     7de:	4b22      	ldr	r3, [pc, #136]	; (868 <EEPROM_Init+0xf4>)
     7e0:	2202      	movs	r2, #2
     7e2:	801a      	strh	r2, [r3, #0]
	cal_mileage.StartPos = 65;
     7e4:	4b21      	ldr	r3, [pc, #132]	; (86c <EEPROM_Init+0xf8>)
     7e6:	2241      	movs	r2, #65	; 0x41
     7e8:	805a      	strh	r2, [r3, #2]
	cal_mileage.Length = 8;
     7ea:	4b20      	ldr	r3, [pc, #128]	; (86c <EEPROM_Init+0xf8>)
     7ec:	2208      	movs	r2, #8
     7ee:	801a      	strh	r2, [r3, #0]
	cal_ip.StartPos = 73;
     7f0:	4b1f      	ldr	r3, [pc, #124]	; (870 <EEPROM_Init+0xfc>)
     7f2:	2249      	movs	r2, #73	; 0x49
     7f4:	805a      	strh	r2, [r3, #2]
	cal_ip.Length = 25;
     7f6:	4b1e      	ldr	r3, [pc, #120]	; (870 <EEPROM_Init+0xfc>)
     7f8:	2219      	movs	r2, #25
     7fa:	801a      	strh	r2, [r3, #0]
	cal_ign_off_period.StartPos = 98;
     7fc:	4b1d      	ldr	r3, [pc, #116]	; (874 <EEPROM_Init+0x100>)
     7fe:	2262      	movs	r2, #98	; 0x62
     800:	805a      	strh	r2, [r3, #2]
	cal_ign_off_period.Length = 2;
     802:	4b1c      	ldr	r3, [pc, #112]	; (874 <EEPROM_Init+0x100>)
     804:	2202      	movs	r2, #2
     806:	801a      	strh	r2, [r3, #0]
	cal_lowpow_just_wake.StartPos = 100;
     808:	4b1b      	ldr	r3, [pc, #108]	; (878 <EEPROM_Init+0x104>)
     80a:	2264      	movs	r2, #100	; 0x64
     80c:	805a      	strh	r2, [r3, #2]
	cal_lowpow_just_wake.Length = 2;
     80e:	4b1a      	ldr	r3, [pc, #104]	; (878 <EEPROM_Init+0x104>)
     810:	2202      	movs	r2, #2
     812:	801a      	strh	r2, [r3, #0]
	cal_lowpow_cancel.StartPos = 102;
     814:	4b19      	ldr	r3, [pc, #100]	; (87c <EEPROM_Init+0x108>)
     816:	2266      	movs	r2, #102	; 0x66
     818:	805a      	strh	r2, [r3, #2]
	cal_lowpow_cancel.Length = 2;
     81a:	4b18      	ldr	r3, [pc, #96]	; (87c <EEPROM_Init+0x108>)
     81c:	2202      	movs	r2, #2
     81e:	801a      	strh	r2, [r3, #0]
	cal_lowpow_mode.StartPos = 104;
     820:	4b17      	ldr	r3, [pc, #92]	; (880 <EEPROM_Init+0x10c>)
     822:	2268      	movs	r2, #104	; 0x68
     824:	805a      	strh	r2, [r3, #2]
	cal_lowpow_mode.Length = 2;
     826:	4b16      	ldr	r3, [pc, #88]	; (880 <EEPROM_Init+0x10c>)
     828:	2202      	movs	r2, #2
     82a:	801a      	strh	r2, [r3, #0]
	cal_coffee_counter.StartPos = 106;
     82c:	4b15      	ldr	r3, [pc, #84]	; (884 <EEPROM_Init+0x110>)
     82e:	226a      	movs	r2, #106	; 0x6a
     830:	805a      	strh	r2, [r3, #2]
	cal_coffee_counter.Length = 2;
     832:	4b14      	ldr	r3, [pc, #80]	; (884 <EEPROM_Init+0x110>)
     834:	2202      	movs	r2, #2
     836:	801a      	strh	r2, [r3, #0]
 	return I2CInit(1,((uint32_t)I2CMASTER) == 0);
     838:	2001      	movs	r0, #1
     83a:	2100      	movs	r1, #0
     83c:	f001 f8fe 	bl	1a3c <I2CInit>
     840:	4603      	mov	r3, r0
     842:	b2db      	uxtb	r3, r3
}
     844:	4618      	mov	r0, r3
     846:	bd80      	pop	{r7, pc}
     848:	10000d18 	.word	0x10000d18
     84c:	10000d2c 	.word	0x10000d2c
     850:	10000d68 	.word	0x10000d68
     854:	10000d1c 	.word	0x10000d1c
     858:	10000ca4 	.word	0x10000ca4
     85c:	10000cd8 	.word	0x10000cd8
     860:	10000d64 	.word	0x10000d64
     864:	10000cf8 	.word	0x10000cf8
     868:	10000d28 	.word	0x10000d28
     86c:	10000cf0 	.word	0x10000cf0
     870:	10000d30 	.word	0x10000d30
     874:	10000d48 	.word	0x10000d48
     878:	10000d34 	.word	0x10000d34
     87c:	10000cfc 	.word	0x10000cfc
     880:	10000ce4 	.word	0x10000ce4
     884:	10000cec 	.word	0x10000cec

00000888 <EEPROM_LoadInt64>:

uint64_t EEPROM_LoadInt64(Calibration cal) {
     888:	b580      	push	{r7, lr}
     88a:	b086      	sub	sp, #24
     88c:	af00      	add	r7, sp, #0
     88e:	6078      	str	r0, [r7, #4]
	int index = 0;
     890:	2300      	movs	r3, #0
     892:	617b      	str	r3, [r7, #20]
	uint64_t result = 0;
     894:	f04f 0200 	mov.w	r2, #0
     898:	f04f 0300 	mov.w	r3, #0
     89c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for (index=0; index < cal.Length; index++) {
     8a0:	2300      	movs	r3, #0
     8a2:	617b      	str	r3, [r7, #20]
     8a4:	e055      	b.n	952 <EEPROM_LoadInt64+0xca>
		if (cal.Length > 2)
     8a6:	88bb      	ldrh	r3, [r7, #4]
     8a8:	2b02      	cmp	r3, #2
     8aa:	d926      	bls.n	8fa <EEPROM_LoadInt64+0x72>
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFFFFFF);
     8ac:	88fb      	ldrh	r3, [r7, #6]
     8ae:	b2da      	uxtb	r2, r3
     8b0:	697b      	ldr	r3, [r7, #20]
     8b2:	b2db      	uxtb	r3, r3
     8b4:	4413      	add	r3, r2
     8b6:	b2db      	uxtb	r3, r3
     8b8:	2001      	movs	r0, #1
     8ba:	4619      	mov	r1, r3
     8bc:	f001 f9a4 	bl	1c08 <i2c_read>
     8c0:	4603      	mov	r3, r0
     8c2:	461a      	mov	r2, r3
     8c4:	88bb      	ldrh	r3, [r7, #4]
     8c6:	4619      	mov	r1, r3
     8c8:	697b      	ldr	r3, [r7, #20]
     8ca:	1acb      	subs	r3, r1, r3
     8cc:	3b01      	subs	r3, #1
     8ce:	00db      	lsls	r3, r3, #3
     8d0:	fa02 f303 	lsl.w	r3, r2, r3
     8d4:	461a      	mov	r2, r3
     8d6:	f04f 0300 	mov.w	r3, #0
     8da:	f04f 30ff 	mov.w	r0, #4294967295
     8de:	f04f 0100 	mov.w	r1, #0
     8e2:	ea02 0200 	and.w	r2, r2, r0
     8e6:	ea03 0301 	and.w	r3, r3, r1
     8ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     8ee:	1812      	adds	r2, r2, r0
     8f0:	eb43 0301 	adc.w	r3, r3, r1
     8f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
     8f8:	e025      	b.n	946 <EEPROM_LoadInt64+0xbe>
		else
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFF);
     8fa:	88fb      	ldrh	r3, [r7, #6]
     8fc:	b2da      	uxtb	r2, r3
     8fe:	697b      	ldr	r3, [r7, #20]
     900:	b2db      	uxtb	r3, r3
     902:	4413      	add	r3, r2
     904:	b2db      	uxtb	r3, r3
     906:	2001      	movs	r0, #1
     908:	4619      	mov	r1, r3
     90a:	f001 f97d 	bl	1c08 <i2c_read>
     90e:	4603      	mov	r3, r0
     910:	461a      	mov	r2, r3
     912:	88bb      	ldrh	r3, [r7, #4]
     914:	4619      	mov	r1, r3
     916:	697b      	ldr	r3, [r7, #20]
     918:	1acb      	subs	r3, r1, r3
     91a:	3b01      	subs	r3, #1
     91c:	00db      	lsls	r3, r3, #3
     91e:	fa02 f303 	lsl.w	r3, r2, r3
     922:	461a      	mov	r2, r3
     924:	f04f 0300 	mov.w	r3, #0
     928:	f64f 70ff 	movw	r0, #65535	; 0xffff
     92c:	f04f 0100 	mov.w	r1, #0
     930:	ea02 0200 	and.w	r2, r2, r0
     934:	ea03 0301 	and.w	r3, r3, r1
     938:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     93c:	1812      	adds	r2, r2, r0
     93e:	eb43 0301 	adc.w	r3, r3, r1
     942:	e9c7 2302 	strd	r2, r3, [r7, #8]
		DelayMs(10);
     946:	200a      	movs	r0, #10
     948:	f001 feea 	bl	2720 <DelayMs>
}

uint64_t EEPROM_LoadInt64(Calibration cal) {
	int index = 0;
	uint64_t result = 0;
	for (index=0; index < cal.Length; index++) {
     94c:	697b      	ldr	r3, [r7, #20]
     94e:	3301      	adds	r3, #1
     950:	617b      	str	r3, [r7, #20]
     952:	88bb      	ldrh	r3, [r7, #4]
     954:	461a      	mov	r2, r3
     956:	697b      	ldr	r3, [r7, #20]
     958:	429a      	cmp	r2, r3
     95a:	dca4      	bgt.n	8a6 <EEPROM_LoadInt64+0x1e>
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFFFFFF);
		else
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFF);
		DelayMs(10);
	}
	return result;
     95c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
     960:	4610      	mov	r0, r2
     962:	4619      	mov	r1, r3
     964:	3718      	adds	r7, #24
     966:	46bd      	mov	sp, r7
     968:	bd80      	pop	{r7, pc}
     96a:	bf00      	nop

0000096c <EEPROM_LoadString>:
	i2c_write(1,cal.StartPos + index, '\0');
	DelayMs(10);
	return 1;
}

void EEPROM_LoadString(Calibration cal,  char* str){
     96c:	b590      	push	{r4, r7, lr}
     96e:	b085      	sub	sp, #20
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
     974:	6039      	str	r1, [r7, #0]
	int index = 0;
     976:	2300      	movs	r3, #0
     978:	60fb      	str	r3, [r7, #12]
	for (index=0; index < cal.Length; index++) {
     97a:	2300      	movs	r3, #0
     97c:	60fb      	str	r3, [r7, #12]
     97e:	e01b      	b.n	9b8 <EEPROM_LoadString+0x4c>
		str[index] = i2c_read(1,cal.StartPos + index);
     980:	68fb      	ldr	r3, [r7, #12]
     982:	683a      	ldr	r2, [r7, #0]
     984:	18d4      	adds	r4, r2, r3
     986:	88fb      	ldrh	r3, [r7, #6]
     988:	b2da      	uxtb	r2, r3
     98a:	68fb      	ldr	r3, [r7, #12]
     98c:	b2db      	uxtb	r3, r3
     98e:	4413      	add	r3, r2
     990:	b2db      	uxtb	r3, r3
     992:	2001      	movs	r0, #1
     994:	4619      	mov	r1, r3
     996:	f001 f937 	bl	1c08 <i2c_read>
     99a:	4603      	mov	r3, r0
     99c:	7023      	strb	r3, [r4, #0]
		DelayMs(10);
     99e:	200a      	movs	r0, #10
     9a0:	f001 febe 	bl	2720 <DelayMs>
		if (str[index] == '\0')
     9a4:	68fb      	ldr	r3, [r7, #12]
     9a6:	683a      	ldr	r2, [r7, #0]
     9a8:	4413      	add	r3, r2
     9aa:	781b      	ldrb	r3, [r3, #0]
     9ac:	2b00      	cmp	r3, #0
     9ae:	d100      	bne.n	9b2 <EEPROM_LoadString+0x46>
			break;
     9b0:	e007      	b.n	9c2 <EEPROM_LoadString+0x56>
	return 1;
}

void EEPROM_LoadString(Calibration cal,  char* str){
	int index = 0;
	for (index=0; index < cal.Length; index++) {
     9b2:	68fb      	ldr	r3, [r7, #12]
     9b4:	3301      	adds	r3, #1
     9b6:	60fb      	str	r3, [r7, #12]
     9b8:	88bb      	ldrh	r3, [r7, #4]
     9ba:	461a      	mov	r2, r3
     9bc:	68fb      	ldr	r3, [r7, #12]
     9be:	429a      	cmp	r2, r3
     9c0:	dcde      	bgt.n	980 <EEPROM_LoadString+0x14>
		str[index] = i2c_read(1,cal.StartPos + index);
		DelayMs(10);
		if (str[index] == '\0')
			break;
	}
}
     9c2:	3714      	adds	r7, #20
     9c4:	46bd      	mov	sp, r7
     9c6:	bd90      	pop	{r4, r7, pc}

000009c8 <GSM_SendAt>:
unsigned long int last_hard_reset = -1;
int connectionFailCount = 0;
#define LBS 1

uint16_t GSM_SendAt( char* cmd, char *response, int delay )
{
     9c8:	b580      	push	{r7, lr}
     9ca:	b0a0      	sub	sp, #128	; 0x80
     9cc:	af00      	add	r7, sp, #0
     9ce:	60f8      	str	r0, [r7, #12]
     9d0:	60b9      	str	r1, [r7, #8]
     9d2:	607a      	str	r2, [r7, #4]
//	}*/

	char buffer[100];
	uint16_t	len;

	sprintf( buffer, "---> %s\r\n", cmd );
     9d4:	f107 0314 	add.w	r3, r7, #20
     9d8:	4618      	mov	r0, r3
     9da:	4918      	ldr	r1, [pc, #96]	; (a3c <GSM_SendAt+0x74>)
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	f003 fa29 	bl	3e34 <sprintf>
	Trace( buffer );
     9e2:	f107 0314 	add.w	r3, r7, #20
     9e6:	4618      	mov	r0, r3
     9e8:	f001 feb0 	bl	274c <Trace>

	int count = sprintf( buffer, "%s\r\n", cmd );
     9ec:	f107 0314 	add.w	r3, r7, #20
     9f0:	4618      	mov	r0, r3
     9f2:	4913      	ldr	r1, [pc, #76]	; (a40 <GSM_SendAt+0x78>)
     9f4:	68fa      	ldr	r2, [r7, #12]
     9f6:	f003 fa1d 	bl	3e34 <sprintf>
     9fa:	67f8      	str	r0, [r7, #124]	; 0x7c
	UARTSend( PORT_GSM, buffer, count );
     9fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     9fe:	f107 0214 	add.w	r2, r7, #20
     a02:	2001      	movs	r0, #1
     a04:	4611      	mov	r1, r2
     a06:	461a      	mov	r2, r3
     a08:	f002 fb9e 	bl	3148 <UARTSend>

	DelayMs( delay );
     a0c:	687b      	ldr	r3, [r7, #4]
     a0e:	4618      	mov	r0, r3
     a10:	f001 fe86 	bl	2720 <DelayMs>

	len = ReadUart( response, PORT_GSM );
     a14:	68b8      	ldr	r0, [r7, #8]
     a16:	2101      	movs	r1, #1
     a18:	f002 fc32 	bl	3280 <ReadUart>
     a1c:	4603      	mov	r3, r0
     a1e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	response[len] = '\0';
     a22:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
     a26:	68ba      	ldr	r2, [r7, #8]
     a28:	4413      	add	r3, r2
     a2a:	2200      	movs	r2, #0
     a2c:	701a      	strb	r2, [r3, #0]

	// TraceDumpHex( response, len );

    return ( len );
     a2e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
}
     a32:	4618      	mov	r0, r3
     a34:	3780      	adds	r7, #128	; 0x80
     a36:	46bd      	mov	sp, r7
     a38:	bd80      	pop	{r7, pc}
     a3a:	bf00      	nop
     a3c:	0000686c 	.word	0x0000686c
     a40:	00006878 	.word	0x00006878

00000a44 <GSM_TCP_Recv>:



int16_t GSM_TCP_Recv( char* pDataBuf, int16_t maxBytes )
{
     a44:	b580      	push	{r7, lr}
     a46:	b082      	sub	sp, #8
     a48:	af00      	add	r7, sp, #0
     a4a:	6078      	str	r0, [r7, #4]
     a4c:	460b      	mov	r3, r1
     a4e:	807b      	strh	r3, [r7, #2]
	return ( GSM_SendAt( "AT+QIRD=1,1,0,1100", pDataBuf, 1000 ) );
     a50:	4806      	ldr	r0, [pc, #24]	; (a6c <GSM_TCP_Recv+0x28>)
     a52:	6879      	ldr	r1, [r7, #4]
     a54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     a58:	f7ff ffb6 	bl	9c8 <GSM_SendAt>
     a5c:	4603      	mov	r3, r0
     a5e:	b29b      	uxth	r3, r3
     a60:	b21b      	sxth	r3, r3
}
     a62:	4618      	mov	r0, r3
     a64:	3708      	adds	r7, #8
     a66:	46bd      	mov	sp, r7
     a68:	bd80      	pop	{r7, pc}
     a6a:	bf00      	nop
     a6c:	00006880 	.word	0x00006880

00000a70 <GSM_ConnectToTrioUpgradeServer>:
	OK*/
}


int GSM_ConnectToTrioUpgradeServer(char *ip, char *port)
{
     a70:	b580      	push	{r7, lr}
     a72:	b0e2      	sub	sp, #392	; 0x188
     a74:	af02      	add	r7, sp, #8
     a76:	1d3b      	adds	r3, r7, #4
     a78:	6018      	str	r0, [r3, #0]
     a7a:	463b      	mov	r3, r7
     a7c:	6019      	str	r1, [r3, #0]
	char buffer[200];
	char response[150];

	TraceNL("Entered GSM_ConnectToTrioUpgradeServer");
     a7e:	48be      	ldr	r0, [pc, #760]	; (d78 <GSM_ConnectToTrioUpgradeServer+0x308>)
     a80:	f001 fe74 	bl	276c <TraceNL>

	int init_result = GSM_InitModule();
     a84:	f000 fa8a 	bl	f9c <GSM_InitModule>
     a88:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	if (init_result == FAIL){
     a8c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
     a90:	f1b3 3fff 	cmp.w	r3, #4294967295
     a94:	d109      	bne.n	aaa <GSM_ConnectToTrioUpgradeServer+0x3a>
		GSM_ShutdownModule();
     a96:	f000 fa4f 	bl	f38 <GSM_ShutdownModule>
		DelayMs(2000);
     a9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     a9e:	f001 fe3f 	bl	2720 <DelayMs>
		init_result = GSM_InitModule();
     aa2:	f000 fa7b 	bl	f9c <GSM_InitModule>
     aa6:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	}

	WDTFeed();
     aaa:	f002 fcf1 	bl	3490 <WDTFeed>

	if(init_result == FAIL)
     aae:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
     ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
     ab6:	d102      	bne.n	abe <GSM_ConnectToTrioUpgradeServer+0x4e>
		return ( init_result );
     ab8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
     abc:	e157      	b.n	d6e <GSM_ConnectToTrioUpgradeServer+0x2fe>

	GSM_EchoOFF();
     abe:	f000 fbb1 	bl	1224 <GSM_EchoOFF>
	GSM_GetImei();
     ac2:	f000 fb33 	bl	112c <GSM_GetImei>
	GSM_GetImsi(); //
     ac6:	f000 fb51 	bl	116c <GSM_GetImsi>
	int conn_stat = GSM_GetRegStat();
     aca:	f000 fadb 	bl	1084 <GSM_GetRegStat>
     ace:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170

	GSM_SendAt("ATI", response, 500);
     ad2:	f107 0308 	add.w	r3, r7, #8
     ad6:	48a9      	ldr	r0, [pc, #676]	; (d7c <GSM_ConnectToTrioUpgradeServer+0x30c>)
     ad8:	4619      	mov	r1, r3
     ada:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     ade:	f7ff ff73 	bl	9c8 <GSM_SendAt>
	WDTFeed();
     ae2:	f002 fcd5 	bl	3490 <WDTFeed>
	GSM_SendAt("AT+QIFGCNT=1", response, 500);
     ae6:	f107 0308 	add.w	r3, r7, #8
     aea:	48a5      	ldr	r0, [pc, #660]	; (d80 <GSM_ConnectToTrioUpgradeServer+0x310>)
     aec:	4619      	mov	r1, r3
     aee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     af2:	f7ff ff69 	bl	9c8 <GSM_SendAt>

	memset(buffer, 0, sizeof(buffer));
     af6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
     afa:	4618      	mov	r0, r3
     afc:	2100      	movs	r1, #0
     afe:	22c8      	movs	r2, #200	; 0xc8
     b00:	f003 f8d0 	bl	3ca4 <memset>
	sprintf(buffer, "AT+QICSGP=1,\"%s\",\"%s\",\"%s\"", per_apn_val, per_apnuser_val, per_apnpass_val);
     b04:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
     b08:	4b9e      	ldr	r3, [pc, #632]	; (d84 <GSM_ConnectToTrioUpgradeServer+0x314>)
     b0a:	9300      	str	r3, [sp, #0]
     b0c:	4610      	mov	r0, r2
     b0e:	499e      	ldr	r1, [pc, #632]	; (d88 <GSM_ConnectToTrioUpgradeServer+0x318>)
     b10:	4a9e      	ldr	r2, [pc, #632]	; (d8c <GSM_ConnectToTrioUpgradeServer+0x31c>)
     b12:	4b9f      	ldr	r3, [pc, #636]	; (d90 <GSM_ConnectToTrioUpgradeServer+0x320>)
     b14:	f003 f98e 	bl	3e34 <sprintf>

	GSM_SendAt(buffer, response, 100);
     b18:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
     b1c:	f107 0308 	add.w	r3, r7, #8
     b20:	4610      	mov	r0, r2
     b22:	4619      	mov	r1, r3
     b24:	2264      	movs	r2, #100	; 0x64
     b26:	f7ff ff4f 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QIMUX=0", response, 100);
     b2a:	f107 0308 	add.w	r3, r7, #8
     b2e:	4899      	ldr	r0, [pc, #612]	; (d94 <GSM_ConnectToTrioUpgradeServer+0x324>)
     b30:	4619      	mov	r1, r3
     b32:	2264      	movs	r2, #100	; 0x64
     b34:	f7ff ff48 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QVBATT=0,3500,0", response, 100); //Disable low power shut down and warning.
     b38:	f107 0308 	add.w	r3, r7, #8
     b3c:	4896      	ldr	r0, [pc, #600]	; (d98 <GSM_ConnectToTrioUpgradeServer+0x328>)
     b3e:	4619      	mov	r1, r3
     b40:	2264      	movs	r2, #100	; 0x64
     b42:	f7ff ff41 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QVBATT=1,3300,0",response,100); // Disable 3.3 volt cutoff.
     b46:	f107 0308 	add.w	r3, r7, #8
     b4a:	4894      	ldr	r0, [pc, #592]	; (d9c <GSM_ConnectToTrioUpgradeServer+0x32c>)
     b4c:	4619      	mov	r1, r3
     b4e:	2264      	movs	r2, #100	; 0x64
     b50:	f7ff ff3a 	bl	9c8 <GSM_SendAt>

	GSM_SendAt("AT+QISHOWRA=1", response, 100); // show remote address
     b54:	f107 0308 	add.w	r3, r7, #8
     b58:	4891      	ldr	r0, [pc, #580]	; (da0 <GSM_ConnectToTrioUpgradeServer+0x330>)
     b5a:	4619      	mov	r1, r3
     b5c:	2264      	movs	r2, #100	; 0x64
     b5e:	f7ff ff33 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QISHOWPT=1", response, 100); // show protocol type ,TCP, or UDP
     b62:	f107 0308 	add.w	r3, r7, #8
     b66:	488f      	ldr	r0, [pc, #572]	; (da4 <GSM_ConnectToTrioUpgradeServer+0x334>)
     b68:	4619      	mov	r1, r3
     b6a:	2264      	movs	r2, #100	; 0x64
     b6c:	f7ff ff2c 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QINDI=0", response, 100);    //  disable indicator
     b70:	f107 0308 	add.w	r3, r7, #8
     b74:	488c      	ldr	r0, [pc, #560]	; (da8 <GSM_ConnectToTrioUpgradeServer+0x338>)
     b76:	4619      	mov	r1, r3
     b78:	2264      	movs	r2, #100	; 0x64
     b7a:	f7ff ff25 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QIHEAD=1", response, 100);    //
     b7e:	f107 0308 	add.w	r3, r7, #8
     b82:	488a      	ldr	r0, [pc, #552]	; (dac <GSM_ConnectToTrioUpgradeServer+0x33c>)
     b84:	4619      	mov	r1, r3
     b86:	2264      	movs	r2, #100	; 0x64
     b88:	f7ff ff1e 	bl	9c8 <GSM_SendAt>

	//GSM_SendAt("AT+QIMODE=1", response, 100); //Transparent Mode
	GSM_SendAt("AT+QIMODE=0", response, 100);   //Non Transparent Mode
     b8c:	f107 0308 	add.w	r3, r7, #8
     b90:	4887      	ldr	r0, [pc, #540]	; (db0 <GSM_ConnectToTrioUpgradeServer+0x340>)
     b92:	4619      	mov	r1, r3
     b94:	2264      	movs	r2, #100	; 0x64
     b96:	f7ff ff17 	bl	9c8 <GSM_SendAt>
	//GSM_SendAt("AT+QINDI=1", response, 100);  //Alert when data received.


	//GSM_SendAt("AT+QITCFG=3,1,512,1", response, 500); //Transparent mode configuration

	memset(buffer, 0, sizeof(buffer));
     b9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
     b9e:	4618      	mov	r0, r3
     ba0:	2100      	movs	r1, #0
     ba2:	22c8      	movs	r2, #200	; 0xc8
     ba4:	f003 f87e 	bl	3ca4 <memset>
	if (isalpha(per_ip_val[0])){ //DNS
     ba8:	4b82      	ldr	r3, [pc, #520]	; (db4 <GSM_ConnectToTrioUpgradeServer+0x344>)
     baa:	781b      	ldrb	r3, [r3, #0]
     bac:	3380      	adds	r3, #128	; 0x80
     bae:	4a82      	ldr	r2, [pc, #520]	; (db8 <GSM_ConnectToTrioUpgradeServer+0x348>)
     bb0:	5cd3      	ldrb	r3, [r2, r3]
     bb2:	f003 0318 	and.w	r3, r3, #24
     bb6:	2b00      	cmp	r3, #0
     bb8:	d013      	beq.n	be2 <GSM_ConnectToTrioUpgradeServer+0x172>
		GSM_SendAt("AT+QIDNSIP=1", response, 100);
     bba:	f107 0308 	add.w	r3, r7, #8
     bbe:	487f      	ldr	r0, [pc, #508]	; (dbc <GSM_ConnectToTrioUpgradeServer+0x34c>)
     bc0:	4619      	mov	r1, r3
     bc2:	2264      	movs	r2, #100	; 0x64
     bc4:	f7ff ff00 	bl	9c8 <GSM_SendAt>
		TraceDumpHex( response, strlen(response) );
     bc8:	f107 0308 	add.w	r3, r7, #8
     bcc:	4618      	mov	r0, r3
     bce:	f004 fd97 	bl	5700 <strlen>
     bd2:	4602      	mov	r2, r0
     bd4:	f107 0308 	add.w	r3, r7, #8
     bd8:	4618      	mov	r0, r3
     bda:	4611      	mov	r1, r2
     bdc:	f001 fe08 	bl	27f0 <TraceDumpHex>
     be0:	e006      	b.n	bf0 <GSM_ConnectToTrioUpgradeServer+0x180>
	}else
		GSM_SendAt("AT+QIDNSIP=0", response, 100);
     be2:	f107 0308 	add.w	r3, r7, #8
     be6:	4876      	ldr	r0, [pc, #472]	; (dc0 <GSM_ConnectToTrioUpgradeServer+0x350>)
     be8:	4619      	mov	r1, r3
     bea:	2264      	movs	r2, #100	; 0x64
     bec:	f7ff feec 	bl	9c8 <GSM_SendAt>


	////Low Power/////
	//GSM_SendAt("AT+QGPCLASS=8", response, 100); // 1 Tx timeslots
	GSM_SendAt("AT+QGPCLASS=12", response, 100); // 1 Tx timeslots
     bf0:	f107 0308 	add.w	r3, r7, #8
     bf4:	4873      	ldr	r0, [pc, #460]	; (dc4 <GSM_ConnectToTrioUpgradeServer+0x354>)
     bf6:	4619      	mov	r1, r3
     bf8:	2264      	movs	r2, #100	; 0x64
     bfa:	f7ff fee5 	bl	9c8 <GSM_SendAt>
//	TraceDumpHex( response, strlen(response) );
	//GSM_SendAt("AT+CDETXPW=900,1,255,2", response, 100);
	//////////////////
	GSM_SendAt("AT",response,100);
     bfe:	f107 0308 	add.w	r3, r7, #8
     c02:	4871      	ldr	r0, [pc, #452]	; (dc8 <GSM_ConnectToTrioUpgradeServer+0x358>)
     c04:	4619      	mov	r1, r3
     c06:	2264      	movs	r2, #100	; 0x64
     c08:	f7ff fede 	bl	9c8 <GSM_SendAt>

	strcpy( update_service_ip, "46.4.100.168" );
     c0c:	486f      	ldr	r0, [pc, #444]	; (dcc <GSM_ConnectToTrioUpgradeServer+0x35c>)
     c0e:	4970      	ldr	r1, [pc, #448]	; (dd0 <GSM_ConnectToTrioUpgradeServer+0x360>)
     c10:	f004 fd55 	bl	56be <strcpy>
	strcpy( update_service_port, "5007" );
     c14:	486f      	ldr	r0, [pc, #444]	; (dd4 <GSM_ConnectToTrioUpgradeServer+0x364>)
     c16:	4970      	ldr	r1, [pc, #448]	; (dd8 <GSM_ConnectToTrioUpgradeServer+0x368>)
     c18:	f004 fd51 	bl	56be <strcpy>

	int cmd_count = sprintf( buffer, "AT+QIOPEN=\"TCP\",\"%s\",%s\r\n", update_service_ip, update_service_port );
     c1c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
     c20:	4618      	mov	r0, r3
     c22:	496e      	ldr	r1, [pc, #440]	; (ddc <GSM_ConnectToTrioUpgradeServer+0x36c>)
     c24:	4a69      	ldr	r2, [pc, #420]	; (dcc <GSM_ConnectToTrioUpgradeServer+0x35c>)
     c26:	4b6b      	ldr	r3, [pc, #428]	; (dd4 <GSM_ConnectToTrioUpgradeServer+0x364>)
     c28:	f003 f904 	bl	3e34 <sprintf>
     c2c:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
	//GSM_SendAt("AT+QIOPEN=\"TCP\",\"178.63.30.80\",6081", response, 2000);

	GSM_SendAt( buffer, response, 100);
     c30:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
     c34:	f107 0308 	add.w	r3, r7, #8
     c38:	4610      	mov	r0, r2
     c3a:	4619      	mov	r1, r3
     c3c:	2264      	movs	r2, #100	; 0x64
     c3e:	f7ff fec3 	bl	9c8 <GSM_SendAt>
	//UARTSend(PORT_GSM, buffer, cmd_count);

	//UARTSend(PORT_TRACE, buffer, cmd_count);
	int server_conn_count = 0;
     c42:	2300      	movs	r3, #0
     c44:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	int server_conn_result = FAIL;
     c48:	f04f 33ff 	mov.w	r3, #4294967295
     c4c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

	while(1){
		int recLen = ReadUart(response, PORT_GSM);
     c50:	f107 0308 	add.w	r3, r7, #8
     c54:	4618      	mov	r0, r3
     c56:	2101      	movs	r1, #1
     c58:	f002 fb12 	bl	3280 <ReadUart>
     c5c:	4603      	mov	r3, r0
     c5e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		if( recLen )
     c62:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
     c66:	2b00      	cmp	r3, #0
     c68:	d026      	beq.n	cb8 <GSM_ConnectToTrioUpgradeServer+0x248>
		{
//			TraceDumpHex( response, strlen(response) );
			if (strstr(response,"FAIL") != NULL/* || strstr(response,"ERROR") != NULL*/){ //ERROR is about format ignore
     c6a:	f107 0308 	add.w	r3, r7, #8
     c6e:	4618      	mov	r0, r3
     c70:	495b      	ldr	r1, [pc, #364]	; (de0 <GSM_ConnectToTrioUpgradeServer+0x370>)
     c72:	f004 fd96 	bl	57a2 <strstr>
     c76:	4603      	mov	r3, r0
     c78:	2b00      	cmp	r3, #0
     c7a:	d000      	beq.n	c7e <GSM_ConnectToTrioUpgradeServer+0x20e>
				//UARTSend(PORT_GSM, buffer, cmd_count); //Testing AT to server problem
				break;
     c7c:	e02d      	b.n	cda <GSM_ConnectToTrioUpgradeServer+0x26a>
			}
			else if (strstr(response,"CONNECT OK") != NULL || strstr(response,"ALREADY CONNECT") != NULL){
     c7e:	f107 0308 	add.w	r3, r7, #8
     c82:	4618      	mov	r0, r3
     c84:	4957      	ldr	r1, [pc, #348]	; (de4 <GSM_ConnectToTrioUpgradeServer+0x374>)
     c86:	f004 fd8c 	bl	57a2 <strstr>
     c8a:	4603      	mov	r3, r0
     c8c:	2b00      	cmp	r3, #0
     c8e:	d108      	bne.n	ca2 <GSM_ConnectToTrioUpgradeServer+0x232>
     c90:	f107 0308 	add.w	r3, r7, #8
     c94:	4618      	mov	r0, r3
     c96:	4954      	ldr	r1, [pc, #336]	; (de8 <GSM_ConnectToTrioUpgradeServer+0x378>)
     c98:	f004 fd83 	bl	57a2 <strstr>
     c9c:	4603      	mov	r3, r0
     c9e:	2b00      	cmp	r3, #0
     ca0:	d00a      	beq.n	cb8 <GSM_ConnectToTrioUpgradeServer+0x248>
				//UARTSend( PORT_TRACE, response, cmd_count );
				TraceDumpHex( response, recLen );
     ca2:	f107 0308 	add.w	r3, r7, #8
     ca6:	4618      	mov	r0, r3
     ca8:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
     cac:	f001 fda0 	bl	27f0 <TraceDumpHex>
				server_conn_result = SUCCESS;
     cb0:	2300      	movs	r3, #0
     cb2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
				break;
     cb6:	e010      	b.n	cda <GSM_ConnectToTrioUpgradeServer+0x26a>
			}
		}

		WDTFeed();
     cb8:	f002 fbea 	bl	3490 <WDTFeed>
		DelayMs(300);
     cbc:	f44f 7096 	mov.w	r0, #300	; 0x12c
     cc0:	f001 fd2e 	bl	2720 <DelayMs>
		server_conn_count++;
     cc4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
     cc8:	3301      	adds	r3, #1
     cca:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
		if (server_conn_count > 30)
     cce:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
     cd2:	2b1e      	cmp	r3, #30
     cd4:	dd00      	ble.n	cd8 <GSM_ConnectToTrioUpgradeServer+0x268>
			break;
     cd6:	e000      	b.n	cda <GSM_ConnectToTrioUpgradeServer+0x26a>
	}
     cd8:	e7ba      	b.n	c50 <GSM_ConnectToTrioUpgradeServer+0x1e0>

	if (server_conn_result == SUCCESS) {
     cda:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
     cde:	2b00      	cmp	r3, #0
     ce0:	d107      	bne.n	cf2 <GSM_ConnectToTrioUpgradeServer+0x282>
		TraceNL("Connected to the server.");
     ce2:	4842      	ldr	r0, [pc, #264]	; (dec <GSM_ConnectToTrioUpgradeServer+0x37c>)
     ce4:	f001 fd42 	bl	276c <TraceNL>
		connectionFailCount = 0;
     ce8:	4b41      	ldr	r3, [pc, #260]	; (df0 <GSM_ConnectToTrioUpgradeServer+0x380>)
     cea:	2200      	movs	r2, #0
     cec:	601a      	str	r2, [r3, #0]
		return SUCCESS;
     cee:	2300      	movs	r3, #0
     cf0:	e03d      	b.n	d6e <GSM_ConnectToTrioUpgradeServer+0x2fe>
	}

	TraceNL("QIOPEN failed.");
     cf2:	4840      	ldr	r0, [pc, #256]	; (df4 <GSM_ConnectToTrioUpgradeServer+0x384>)
     cf4:	f001 fd3a 	bl	276c <TraceNL>
	connectionFailCount++;
     cf8:	4b3d      	ldr	r3, [pc, #244]	; (df0 <GSM_ConnectToTrioUpgradeServer+0x380>)
     cfa:	681b      	ldr	r3, [r3, #0]
     cfc:	3301      	adds	r3, #1
     cfe:	4a3c      	ldr	r2, [pc, #240]	; (df0 <GSM_ConnectToTrioUpgradeServer+0x380>)
     d00:	6013      	str	r3, [r2, #0]
	if (connectionFailCount > 40 && connectionFailCount % 200 == 0) //10 minutes.
     d02:	4b3b      	ldr	r3, [pc, #236]	; (df0 <GSM_ConnectToTrioUpgradeServer+0x380>)
     d04:	681b      	ldr	r3, [r3, #0]
     d06:	2b28      	cmp	r3, #40	; 0x28
     d08:	dd17      	ble.n	d3a <GSM_ConnectToTrioUpgradeServer+0x2ca>
     d0a:	4b39      	ldr	r3, [pc, #228]	; (df0 <GSM_ConnectToTrioUpgradeServer+0x380>)
     d0c:	681a      	ldr	r2, [r3, #0]
     d0e:	4b3a      	ldr	r3, [pc, #232]	; (df8 <GSM_ConnectToTrioUpgradeServer+0x388>)
     d10:	fb83 1302 	smull	r1, r3, r3, r2
     d14:	1199      	asrs	r1, r3, #6
     d16:	17d3      	asrs	r3, r2, #31
     d18:	1acb      	subs	r3, r1, r3
     d1a:	21c8      	movs	r1, #200	; 0xc8
     d1c:	fb01 f303 	mul.w	r3, r1, r3
     d20:	1ad3      	subs	r3, r2, r3
     d22:	2b00      	cmp	r3, #0
     d24:	d109      	bne.n	d3a <GSM_ConnectToTrioUpgradeServer+0x2ca>
	{
		TraceNL("Hard resetting module.");
     d26:	4835      	ldr	r0, [pc, #212]	; (dfc <GSM_ConnectToTrioUpgradeServer+0x38c>)
     d28:	f001 fd20 	bl	276c <TraceNL>
		GSM_InitModule(); //Restarts and initializes module.
     d2c:	f000 f936 	bl	f9c <GSM_InitModule>
		last_hard_reset = STT_Value;
     d30:	4b33      	ldr	r3, [pc, #204]	; (e00 <GSM_ConnectToTrioUpgradeServer+0x390>)
     d32:	681b      	ldr	r3, [r3, #0]
     d34:	4a33      	ldr	r2, [pc, #204]	; (e04 <GSM_ConnectToTrioUpgradeServer+0x394>)
     d36:	6013      	str	r3, [r2, #0]
     d38:	e017      	b.n	d6a <GSM_ConnectToTrioUpgradeServer+0x2fa>
	}
	else if (connectionFailCount > 30 && connectionFailCount % 20 == 0){ //100 in production
     d3a:	4b2d      	ldr	r3, [pc, #180]	; (df0 <GSM_ConnectToTrioUpgradeServer+0x380>)
     d3c:	681b      	ldr	r3, [r3, #0]
     d3e:	2b1e      	cmp	r3, #30
     d40:	dd13      	ble.n	d6a <GSM_ConnectToTrioUpgradeServer+0x2fa>
     d42:	4b2b      	ldr	r3, [pc, #172]	; (df0 <GSM_ConnectToTrioUpgradeServer+0x380>)
     d44:	6819      	ldr	r1, [r3, #0]
     d46:	4b30      	ldr	r3, [pc, #192]	; (e08 <GSM_ConnectToTrioUpgradeServer+0x398>)
     d48:	fb83 2301 	smull	r2, r3, r3, r1
     d4c:	10da      	asrs	r2, r3, #3
     d4e:	17cb      	asrs	r3, r1, #31
     d50:	1ad2      	subs	r2, r2, r3
     d52:	4613      	mov	r3, r2
     d54:	009b      	lsls	r3, r3, #2
     d56:	4413      	add	r3, r2
     d58:	009b      	lsls	r3, r3, #2
     d5a:	1aca      	subs	r2, r1, r3
     d5c:	2a00      	cmp	r2, #0
     d5e:	d104      	bne.n	d6a <GSM_ConnectToTrioUpgradeServer+0x2fa>
		TraceNL("connectionFailCount > 40 restarting module.");
     d60:	482a      	ldr	r0, [pc, #168]	; (e0c <GSM_ConnectToTrioUpgradeServer+0x39c>)
     d62:	f001 fd03 	bl	276c <TraceNL>
		GSM_InitModule(); //Restarts and initializes module.
     d66:	f000 f919 	bl	f9c <GSM_InitModule>
	}
	return FAIL;
     d6a:	f04f 33ff 	mov.w	r3, #4294967295
}
     d6e:	4618      	mov	r0, r3
     d70:	f507 77c0 	add.w	r7, r7, #384	; 0x180
     d74:	46bd      	mov	sp, r7
     d76:	bd80      	pop	{r7, pc}
     d78:	00006924 	.word	0x00006924
     d7c:	0000694c 	.word	0x0000694c
     d80:	00006950 	.word	0x00006950
     d84:	10000d50 	.word	0x10000d50
     d88:	00006960 	.word	0x00006960
     d8c:	10000d6c 	.word	0x10000d6c
     d90:	10000d00 	.word	0x10000d00
     d94:	0000697c 	.word	0x0000697c
     d98:	00006988 	.word	0x00006988
     d9c:	0000699c 	.word	0x0000699c
     da0:	000069b0 	.word	0x000069b0
     da4:	000069c0 	.word	0x000069c0
     da8:	000069d0 	.word	0x000069d0
     dac:	000069dc 	.word	0x000069dc
     db0:	000069e8 	.word	0x000069e8
     db4:	10000cb0 	.word	0x10000cb0
     db8:	000076e8 	.word	0x000076e8
     dbc:	000069f4 	.word	0x000069f4
     dc0:	00006a04 	.word	0x00006a04
     dc4:	00006a14 	.word	0x00006a14
     dc8:	000068f4 	.word	0x000068f4
     dcc:	10000000 	.word	0x10000000
     dd0:	00006a24 	.word	0x00006a24
     dd4:	10000014 	.word	0x10000014
     dd8:	00006a34 	.word	0x00006a34
     ddc:	00006a3c 	.word	0x00006a3c
     de0:	00006a58 	.word	0x00006a58
     de4:	00006a60 	.word	0x00006a60
     de8:	00006a6c 	.word	0x00006a6c
     dec:	00006a7c 	.word	0x00006a7c
     df0:	10000028 	.word	0x10000028
     df4:	00006a98 	.word	0x00006a98
     df8:	51eb851f 	.word	0x51eb851f
     dfc:	00006aa8 	.word	0x00006aa8
     e00:	10000d24 	.word	0x10000d24
     e04:	1000001c 	.word	0x1000001c
     e08:	66666667 	.word	0x66666667
     e0c:	00006ac0 	.word	0x00006ac0

00000e10 <GSM_TCP_Send>:
** Returned value:	greater than 0 to indicate number of characters transferred
**
**                  a value less than 0 is error code, tobe defined later.
******************************************************************************/
int GSM_TCP_Send( unsigned char* msg, uint16_t len )
{
     e10:	b580      	push	{r7, lr}
     e12:	b0d0      	sub	sp, #320	; 0x140
     e14:	af00      	add	r7, sp, #0
     e16:	1d3b      	adds	r3, r7, #4
     e18:	6018      	str	r0, [r3, #0]
     e1a:	460a      	mov	r2, r1
     e1c:	1cbb      	adds	r3, r7, #2
     e1e:	801a      	strh	r2, [r3, #0]
	char response[200];
	char buffer[100];

	TraceNL("Entered GSM_TCP_Send");
     e20:	4836      	ldr	r0, [pc, #216]	; (efc <GSM_TCP_Send+0xec>)
     e22:	f001 fca3 	bl	276c <TraceNL>

	GSM_SendAt( "AT", response, 100 ); //Empty buffer
     e26:	f107 0370 	add.w	r3, r7, #112	; 0x70
     e2a:	4835      	ldr	r0, [pc, #212]	; (f00 <GSM_TCP_Send+0xf0>)
     e2c:	4619      	mov	r1, r3
     e2e:	2264      	movs	r2, #100	; 0x64
     e30:	f7ff fdca 	bl	9c8 <GSM_SendAt>

	int count = sprintf( buffer, "AT+QISEND=%d", len );
     e34:	1cbb      	adds	r3, r7, #2
     e36:	881b      	ldrh	r3, [r3, #0]
     e38:	f107 020c 	add.w	r2, r7, #12
     e3c:	4610      	mov	r0, r2
     e3e:	4931      	ldr	r1, [pc, #196]	; (f04 <GSM_TCP_Send+0xf4>)
     e40:	461a      	mov	r2, r3
     e42:	f002 fff7 	bl	3e34 <sprintf>
     e46:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	GSM_SendAt( buffer, response, 100 );
     e4a:	f107 020c 	add.w	r2, r7, #12
     e4e:	f107 0370 	add.w	r3, r7, #112	; 0x70
     e52:	4610      	mov	r0, r2
     e54:	4619      	mov	r1, r3
     e56:	2264      	movs	r2, #100	; 0x64
     e58:	f7ff fdb6 	bl	9c8 <GSM_SendAt>

	if( strchr(response, '>') != NULL )
     e5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
     e60:	4618      	mov	r0, r3
     e62:	213e      	movs	r1, #62	; 0x3e
     e64:	f004 fc1e 	bl	56a4 <strchr>
     e68:	4603      	mov	r3, r0
     e6a:	2b00      	cmp	r3, #0
     e6c:	d03b      	beq.n	ee6 <GSM_TCP_Send+0xd6>
	{
		UARTSend( PORT_GSM, msg, len );
     e6e:	1cbb      	adds	r3, r7, #2
     e70:	881a      	ldrh	r2, [r3, #0]
     e72:	1d3b      	adds	r3, r7, #4
     e74:	2001      	movs	r0, #1
     e76:	6819      	ldr	r1, [r3, #0]
     e78:	f002 f966 	bl	3148 <UARTSend>

		DelayMs( 300 );
     e7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
     e80:	f001 fc4e 	bl	2720 <DelayMs>

		ReadUart( response, PORT_GSM );
     e84:	f107 0370 	add.w	r3, r7, #112	; 0x70
     e88:	4618      	mov	r0, r3
     e8a:	2101      	movs	r1, #1
     e8c:	f002 f9f8 	bl	3280 <ReadUart>
		int sendOkCheck = 0;
     e90:	2300      	movs	r3, #0
     e92:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

		while( strstr( response, "SEND OK" ) == NULL )
     e96:	e017      	b.n	ec8 <GSM_TCP_Send+0xb8>
		{
			TraceNL( "Send OK whiling.." );
     e98:	481b      	ldr	r0, [pc, #108]	; (f08 <GSM_TCP_Send+0xf8>)
     e9a:	f001 fc67 	bl	276c <TraceNL>
			if ( sendOkCheck > 20 )
     e9e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
     ea2:	2b14      	cmp	r3, #20
     ea4:	dd02      	ble.n	eac <GSM_TCP_Send+0x9c>
				return ( FAIL );
     ea6:	f04f 33ff 	mov.w	r3, #4294967295
     eaa:	e021      	b.n	ef0 <GSM_TCP_Send+0xe0>

			DelayMs( 100 );
     eac:	2064      	movs	r0, #100	; 0x64
     eae:	f001 fc37 	bl	2720 <DelayMs>
			ReadUart( response, PORT_GSM );
     eb2:	f107 0370 	add.w	r3, r7, #112	; 0x70
     eb6:	4618      	mov	r0, r3
     eb8:	2101      	movs	r1, #1
     eba:	f002 f9e1 	bl	3280 <ReadUart>

			sendOkCheck++;
     ebe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
     ec2:	3301      	adds	r3, #1
     ec4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		DelayMs( 300 );

		ReadUart( response, PORT_GSM );
		int sendOkCheck = 0;

		while( strstr( response, "SEND OK" ) == NULL )
     ec8:	f107 0370 	add.w	r3, r7, #112	; 0x70
     ecc:	4618      	mov	r0, r3
     ece:	490f      	ldr	r1, [pc, #60]	; (f0c <GSM_TCP_Send+0xfc>)
     ed0:	f004 fc67 	bl	57a2 <strstr>
     ed4:	4603      	mov	r3, r0
     ed6:	2b00      	cmp	r3, #0
     ed8:	d0de      	beq.n	e98 <GSM_TCP_Send+0x88>
			DelayMs( 100 );
			ReadUart( response, PORT_GSM );

			sendOkCheck++;
		}
		TraceNL( "Data sent." );
     eda:	480d      	ldr	r0, [pc, #52]	; (f10 <GSM_TCP_Send+0x100>)
     edc:	f001 fc46 	bl	276c <TraceNL>
		return ( len );
     ee0:	1cbb      	adds	r3, r7, #2
     ee2:	881b      	ldrh	r3, [r3, #0]
     ee4:	e004      	b.n	ef0 <GSM_TCP_Send+0xe0>
	}
	TraceNL( "Data fail." );
     ee6:	480b      	ldr	r0, [pc, #44]	; (f14 <GSM_TCP_Send+0x104>)
     ee8:	f001 fc40 	bl	276c <TraceNL>
	return ( FAIL );
     eec:	f04f 33ff 	mov.w	r3, #4294967295
}
     ef0:	4618      	mov	r0, r3
     ef2:	f507 77a0 	add.w	r7, r7, #320	; 0x140
     ef6:	46bd      	mov	sp, r7
     ef8:	bd80      	pop	{r7, pc}
     efa:	bf00      	nop
     efc:	00006bcc 	.word	0x00006bcc
     f00:	000068f4 	.word	0x000068f4
     f04:	00006b58 	.word	0x00006b58
     f08:	00006b68 	.word	0x00006b68
     f0c:	00006b7c 	.word	0x00006b7c
     f10:	00006b84 	.word	0x00006b84
     f14:	00006b98 	.word	0x00006b98

00000f18 <GSM_TogglePwrKey>:

void GSM_TogglePwrKey() {
     f18:	b580      	push	{r7, lr}
     f1a:	af00      	add	r7, sp, #0
	//Toggle PWR_KEY
	LPC_GPIO2->FIOSET = (1 << 3);
     f1c:	4b05      	ldr	r3, [pc, #20]	; (f34 <GSM_TogglePwrKey+0x1c>)
     f1e:	2208      	movs	r2, #8
     f20:	619a      	str	r2, [r3, #24]
	DelayMs(2000);
     f22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     f26:	f001 fbfb 	bl	2720 <DelayMs>
	LPC_GPIO2->FIOCLR = (1 << 3);
     f2a:	4b02      	ldr	r3, [pc, #8]	; (f34 <GSM_TogglePwrKey+0x1c>)
     f2c:	2208      	movs	r2, #8
     f2e:	61da      	str	r2, [r3, #28]
}
     f30:	bd80      	pop	{r7, pc}
     f32:	bf00      	nop
     f34:	2009c040 	.word	0x2009c040

00000f38 <GSM_ShutdownModule>:

int GSM_ShutdownModule() {
     f38:	b580      	push	{r7, lr}
     f3a:	b09a      	sub	sp, #104	; 0x68
     f3c:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+QPOWD=0", response, 500);
     f3e:	1d3b      	adds	r3, r7, #4
     f40:	4813      	ldr	r0, [pc, #76]	; (f90 <GSM_ShutdownModule+0x58>)
     f42:	4619      	mov	r1, r3
     f44:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     f48:	f7ff fd3e 	bl	9c8 <GSM_SendAt>
	DelayMs(1000);
     f4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     f50:	f001 fbe6 	bl	2720 <DelayMs>
	memset(response, 0, sizeof(response));
     f54:	1d3b      	adds	r3, r7, #4
     f56:	4618      	mov	r0, r3
     f58:	2100      	movs	r1, #0
     f5a:	2264      	movs	r2, #100	; 0x64
     f5c:	f002 fea2 	bl	3ca4 <memset>
	GSM_SendAt("AT", response, 500);
     f60:	1d3b      	adds	r3, r7, #4
     f62:	480c      	ldr	r0, [pc, #48]	; (f94 <GSM_ShutdownModule+0x5c>)
     f64:	4619      	mov	r1, r3
     f66:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     f6a:	f7ff fd2d 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "OK") == NULL) {
     f6e:	1d3b      	adds	r3, r7, #4
     f70:	4618      	mov	r0, r3
     f72:	4909      	ldr	r1, [pc, #36]	; (f98 <GSM_ShutdownModule+0x60>)
     f74:	f004 fc15 	bl	57a2 <strstr>
     f78:	4603      	mov	r3, r0
     f7a:	2b00      	cmp	r3, #0
     f7c:	d101      	bne.n	f82 <GSM_ShutdownModule+0x4a>
		return ( SUCCESS );
     f7e:	2300      	movs	r3, #0
     f80:	e001      	b.n	f86 <GSM_ShutdownModule+0x4e>
	}
	return ( FAIL );
     f82:	f04f 33ff 	mov.w	r3, #4294967295
}
     f86:	4618      	mov	r0, r3
     f88:	3768      	adds	r7, #104	; 0x68
     f8a:	46bd      	mov	sp, r7
     f8c:	bd80      	pop	{r7, pc}
     f8e:	bf00      	nop
     f90:	00006be4 	.word	0x00006be4
     f94:	000068f4 	.word	0x000068f4
     f98:	00006bf0 	.word	0x00006bf0

00000f9c <GSM_InitModule>:
	LPC_GPIO2->FIOCLR = (1 << 2);

	return ( SUCCESS );
}

int GSM_InitModule() {
     f9c:	b580      	push	{r7, lr}
     f9e:	b09c      	sub	sp, #112	; 0x70
     fa0:	af00      	add	r7, sp, #0
	//Unset EMERG
	char response[100];
	LPC_GPIO2->FIOCLR = (1 << 2);
     fa2:	4b30      	ldr	r3, [pc, #192]	; (1064 <GSM_InitModule+0xc8>)
     fa4:	2204      	movs	r2, #4
     fa6:	61da      	str	r2, [r3, #28]
	DelayMs(1000);
     fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     fac:	f001 fbb8 	bl	2720 <DelayMs>
	GSM_TogglePwrKey();
     fb0:	f7ff ffb2 	bl	f18 <GSM_TogglePwrKey>
	int i = 0;
     fb4:	2300      	movs	r3, #0
     fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (i = 0; i < 20; i++) {
     fb8:	2300      	movs	r3, #0
     fba:	66fb      	str	r3, [r7, #108]	; 0x6c
     fbc:	e048      	b.n	1050 <GSM_InitModule+0xb4>
		GSM_SendAt("AT", response, 500);
     fbe:	1d3b      	adds	r3, r7, #4
     fc0:	4829      	ldr	r0, [pc, #164]	; (1068 <GSM_InitModule+0xcc>)
     fc2:	4619      	mov	r1, r3
     fc4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     fc8:	f7ff fcfe 	bl	9c8 <GSM_SendAt>

//		TraceDumpHex( response, strlen(response) );
		if (strstr(response, "OK") != NULL) {
     fcc:	1d3b      	adds	r3, r7, #4
     fce:	4618      	mov	r0, r3
     fd0:	4926      	ldr	r1, [pc, #152]	; (106c <GSM_InitModule+0xd0>)
     fd2:	f004 fbe6 	bl	57a2 <strstr>
     fd6:	4603      	mov	r3, r0
     fd8:	2b00      	cmp	r3, #0
     fda:	d036      	beq.n	104a <GSM_InitModule+0xae>

//			GSM_Set1152008N1( );
//
//			UARTInit(PORT_GSM, 115200);
			GSM_SendAt("AT+CMEE=2", response, 500);
     fdc:	1d3b      	adds	r3, r7, #4
     fde:	4824      	ldr	r0, [pc, #144]	; (1070 <GSM_InitModule+0xd4>)
     fe0:	4619      	mov	r1, r3
     fe2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     fe6:	f7ff fcef 	bl	9c8 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			DelayMs(500);
     fea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     fee:	f001 fb97 	bl	2720 <DelayMs>
			//Init SMS
			//SMS Text Mode
			GSM_SendAt("AT+CMGF=1", response, 500);
     ff2:	1d3b      	adds	r3, r7, #4
     ff4:	481f      	ldr	r0, [pc, #124]	; (1074 <GSM_InitModule+0xd8>)
     ff6:	4619      	mov	r1, r3
     ff8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     ffc:	f7ff fce4 	bl	9c8 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			//Initialize SMS, if not new messages does not cause +CMTI
			GSM_SendAt("AT+CNMI=2,1,0,0,0", response, 500);
    1000:	1d3b      	adds	r3, r7, #4
    1002:	481d      	ldr	r0, [pc, #116]	; (1078 <GSM_InitModule+0xdc>)
    1004:	4619      	mov	r1, r3
    1006:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    100a:	f7ff fcdd 	bl	9c8 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			int sim_check = FAIL;
    100e:	f04f 33ff 	mov.w	r3, #4294967295
    1012:	66bb      	str	r3, [r7, #104]	; 0x68
			for(;i<40;i++){
    1014:	e014      	b.n	1040 <GSM_InitModule+0xa4>
				sim_check = GSM_CheckSimCard();
    1016:	f000 f867 	bl	10e8 <GSM_CheckSimCard>
    101a:	66b8      	str	r0, [r7, #104]	; 0x68
				if (sim_check == SUCCESS){
    101c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    101e:	2b00      	cmp	r3, #0
    1020:	d103      	bne.n	102a <GSM_InitModule+0x8e>
					TraceNL("Sim card ready..\r");
    1022:	4816      	ldr	r0, [pc, #88]	; (107c <GSM_InitModule+0xe0>)
    1024:	f001 fba2 	bl	276c <TraceNL>
					break;
    1028:	e00d      	b.n	1046 <GSM_InitModule+0xaa>
				}
				else
					TraceNL("Sim not ready!\r");
    102a:	4815      	ldr	r0, [pc, #84]	; (1080 <GSM_InitModule+0xe4>)
    102c:	f001 fb9e 	bl	276c <TraceNL>
				DelayMs(200);
    1030:	20c8      	movs	r0, #200	; 0xc8
    1032:	f001 fb75 	bl	2720 <DelayMs>
				WDTFeed();
    1036:	f002 fa2b 	bl	3490 <WDTFeed>
//			TraceDumpHex( response, strlen(response) );
			//Initialize SMS, if not new messages does not cause +CMTI
			GSM_SendAt("AT+CNMI=2,1,0,0,0", response, 500);
//			TraceDumpHex( response, strlen(response) );
			int sim_check = FAIL;
			for(;i<40;i++){
    103a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    103c:	3301      	adds	r3, #1
    103e:	66fb      	str	r3, [r7, #108]	; 0x6c
    1040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1042:	2b27      	cmp	r3, #39	; 0x27
    1044:	dde7      	ble.n	1016 <GSM_InitModule+0x7a>
				else
					TraceNL("Sim not ready!\r");
				DelayMs(200);
				WDTFeed();
			}
			return sim_check;
    1046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1048:	e007      	b.n	105a <GSM_InitModule+0xbe>
	char response[100];
	LPC_GPIO2->FIOCLR = (1 << 2);
	DelayMs(1000);
	GSM_TogglePwrKey();
	int i = 0;
	for (i = 0; i < 20; i++) {
    104a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    104c:	3301      	adds	r3, #1
    104e:	66fb      	str	r3, [r7, #108]	; 0x6c
    1050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1052:	2b13      	cmp	r3, #19
    1054:	ddb3      	ble.n	fbe <GSM_InitModule+0x22>
				WDTFeed();
			}
			return sim_check;
		}
	}
	return FAIL;
    1056:	f04f 33ff 	mov.w	r3, #4294967295
}
    105a:	4618      	mov	r0, r3
    105c:	3770      	adds	r7, #112	; 0x70
    105e:	46bd      	mov	sp, r7
    1060:	bd80      	pop	{r7, pc}
    1062:	bf00      	nop
    1064:	2009c040 	.word	0x2009c040
    1068:	000068f4 	.word	0x000068f4
    106c:	00006bf0 	.word	0x00006bf0
    1070:	00006bf4 	.word	0x00006bf4
    1074:	00006c00 	.word	0x00006c00
    1078:	00006c0c 	.word	0x00006c0c
    107c:	00006c20 	.word	0x00006c20
    1080:	00006c34 	.word	0x00006c34

00001084 <GSM_GetRegStat>:
	UTIL_GetPartOfString(response, csq_str, ':', ',', 0, 0);
	return atoi(csq_str);
}


int GSM_GetRegStat(){
    1084:	b580      	push	{r7, lr}
    1086:	b09e      	sub	sp, #120	; 0x78
    1088:	af00      	add	r7, sp, #0
	char csq_str[20];
	char response[100];
	GSM_SendAt("AT+CREG?", response, 100);
    108a:	463b      	mov	r3, r7
    108c:	4812      	ldr	r0, [pc, #72]	; (10d8 <GSM_GetRegStat+0x54>)
    108e:	4619      	mov	r1, r3
    1090:	2264      	movs	r2, #100	; 0x64
    1092:	f7ff fc99 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "+CREG") != NULL && ((strstr(response, ",5") != NULL) || (strstr(response, ",1") != NULL))) {
    1096:	463b      	mov	r3, r7
    1098:	4618      	mov	r0, r3
    109a:	4910      	ldr	r1, [pc, #64]	; (10dc <GSM_GetRegStat+0x58>)
    109c:	f004 fb81 	bl	57a2 <strstr>
    10a0:	4603      	mov	r3, r0
    10a2:	2b00      	cmp	r3, #0
    10a4:	d011      	beq.n	10ca <GSM_GetRegStat+0x46>
    10a6:	463b      	mov	r3, r7
    10a8:	4618      	mov	r0, r3
    10aa:	490d      	ldr	r1, [pc, #52]	; (10e0 <GSM_GetRegStat+0x5c>)
    10ac:	f004 fb79 	bl	57a2 <strstr>
    10b0:	4603      	mov	r3, r0
    10b2:	2b00      	cmp	r3, #0
    10b4:	d107      	bne.n	10c6 <GSM_GetRegStat+0x42>
    10b6:	463b      	mov	r3, r7
    10b8:	4618      	mov	r0, r3
    10ba:	490a      	ldr	r1, [pc, #40]	; (10e4 <GSM_GetRegStat+0x60>)
    10bc:	f004 fb71 	bl	57a2 <strstr>
    10c0:	4603      	mov	r3, r0
    10c2:	2b00      	cmp	r3, #0
    10c4:	d001      	beq.n	10ca <GSM_GetRegStat+0x46>
		return SUCCESS;
    10c6:	2300      	movs	r3, #0
    10c8:	e001      	b.n	10ce <GSM_GetRegStat+0x4a>
	}
	return FAIL;
    10ca:	f04f 33ff 	mov.w	r3, #4294967295
}
    10ce:	4618      	mov	r0, r3
    10d0:	3778      	adds	r7, #120	; 0x78
    10d2:	46bd      	mov	sp, r7
    10d4:	bd80      	pop	{r7, pc}
    10d6:	bf00      	nop
    10d8:	00006c4c 	.word	0x00006c4c
    10dc:	00006c58 	.word	0x00006c58
    10e0:	00006c60 	.word	0x00006c60
    10e4:	00006c64 	.word	0x00006c64

000010e8 <GSM_CheckSimCard>:
	return FAIL;
}



int GSM_CheckSimCard() {
    10e8:	b580      	push	{r7, lr}
    10ea:	b09a      	sub	sp, #104	; 0x68
    10ec:	af00      	add	r7, sp, #0
	TraceNL("Entered check sim card.");
    10ee:	480c      	ldr	r0, [pc, #48]	; (1120 <GSM_CheckSimCard+0x38>)
    10f0:	f001 fb3c 	bl	276c <TraceNL>
	char response[100];
	GSM_SendAt("AT+CPIN?", response, 250);
    10f4:	1d3b      	adds	r3, r7, #4
    10f6:	480b      	ldr	r0, [pc, #44]	; (1124 <GSM_CheckSimCard+0x3c>)
    10f8:	4619      	mov	r1, r3
    10fa:	22fa      	movs	r2, #250	; 0xfa
    10fc:	f7ff fc64 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "READY") != NULL)
    1100:	1d3b      	adds	r3, r7, #4
    1102:	4618      	mov	r0, r3
    1104:	4908      	ldr	r1, [pc, #32]	; (1128 <GSM_CheckSimCard+0x40>)
    1106:	f004 fb4c 	bl	57a2 <strstr>
    110a:	4603      	mov	r3, r0
    110c:	2b00      	cmp	r3, #0
    110e:	d001      	beq.n	1114 <GSM_CheckSimCard+0x2c>
		return ( SUCCESS );
    1110:	2300      	movs	r3, #0
    1112:	e001      	b.n	1118 <GSM_CheckSimCard+0x30>
	return ( FAIL );
    1114:	f04f 33ff 	mov.w	r3, #4294967295
}
    1118:	4618      	mov	r0, r3
    111a:	3768      	adds	r7, #104	; 0x68
    111c:	46bd      	mov	sp, r7
    111e:	bd80      	pop	{r7, pc}
    1120:	00006c6c 	.word	0x00006c6c
    1124:	00006c84 	.word	0x00006c84
    1128:	00006c90 	.word	0x00006c90

0000112c <GSM_GetImei>:

void GSM_GetImei() {
    112c:	b580      	push	{r7, lr}
    112e:	b09a      	sub	sp, #104	; 0x68
    1130:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+GSN", response, 500);
    1132:	1d3b      	adds	r3, r7, #4
    1134:	480a      	ldr	r0, [pc, #40]	; (1160 <GSM_GetImei+0x34>)
    1136:	4619      	mov	r1, r3
    1138:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    113c:	f7ff fc44 	bl	9c8 <GSM_SendAt>
	TraceNL("IMEI : ");
    1140:	4808      	ldr	r0, [pc, #32]	; (1164 <GSM_GetImei+0x38>)
    1142:	f001 fb13 	bl	276c <TraceNL>
	strncpy(imei, response + 9, 15);
    1146:	1d3b      	adds	r3, r7, #4
    1148:	3309      	adds	r3, #9
    114a:	4807      	ldr	r0, [pc, #28]	; (1168 <GSM_GetImei+0x3c>)
    114c:	4619      	mov	r1, r3
    114e:	220f      	movs	r2, #15
    1150:	f004 fafb 	bl	574a <strncpy>
	TraceNL(imei);
    1154:	4804      	ldr	r0, [pc, #16]	; (1168 <GSM_GetImei+0x3c>)
    1156:	f001 fb09 	bl	276c <TraceNL>
}
    115a:	3768      	adds	r7, #104	; 0x68
    115c:	46bd      	mov	sp, r7
    115e:	bd80      	pop	{r7, pc}
    1160:	00006c98 	.word	0x00006c98
    1164:	00006ca0 	.word	0x00006ca0
    1168:	10000f84 	.word	0x10000f84

0000116c <GSM_GetImsi>:

void GSM_GetImsi() {
    116c:	b590      	push	{r4, r7, lr}
    116e:	b09d      	sub	sp, #116	; 0x74
    1170:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+CIMI", response, 500);
    1172:	463b      	mov	r3, r7
    1174:	4827      	ldr	r0, [pc, #156]	; (1214 <GSM_GetImsi+0xa8>)
    1176:	4619      	mov	r1, r3
    1178:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    117c:	f7ff fc24 	bl	9c8 <GSM_SendAt>
	Trace("IMSI : ");
    1180:	4825      	ldr	r0, [pc, #148]	; (1218 <GSM_GetImsi+0xac>)
    1182:	f001 fae3 	bl	274c <Trace>
	int i;
	int index = 0;
    1186:	2300      	movs	r3, #0
    1188:	66bb      	str	r3, [r7, #104]	; 0x68
	int is_start = 0;
    118a:	2300      	movs	r3, #0
    118c:	667b      	str	r3, [r7, #100]	; 0x64
	for (i = 0; i < strlen(response); i++) {
    118e:	2300      	movs	r3, #0
    1190:	66fb      	str	r3, [r7, #108]	; 0x6c
    1192:	e02c      	b.n	11ee <GSM_GetImsi+0x82>
		if (index > 19)
    1194:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1196:	2b13      	cmp	r3, #19
    1198:	dd00      	ble.n	119c <GSM_GetImsi+0x30>
			break;
    119a:	e030      	b.n	11fe <GSM_GetImsi+0x92>
		if ( isdigit(response[i]))
    119c:	463a      	mov	r2, r7
    119e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    11a0:	4413      	add	r3, r2
    11a2:	781b      	ldrb	r3, [r3, #0]
    11a4:	3380      	adds	r3, #128	; 0x80
    11a6:	4a1d      	ldr	r2, [pc, #116]	; (121c <GSM_GetImsi+0xb0>)
    11a8:	5cd3      	ldrb	r3, [r2, r3]
    11aa:	f003 0320 	and.w	r3, r3, #32
    11ae:	2b00      	cmp	r3, #0
    11b0:	d001      	beq.n	11b6 <GSM_GetImsi+0x4a>
			is_start = 1;
    11b2:	2301      	movs	r3, #1
    11b4:	667b      	str	r3, [r7, #100]	; 0x64
		if (is_start == 1 && response[i] == '\n')
    11b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    11b8:	2b01      	cmp	r3, #1
    11ba:	d106      	bne.n	11ca <GSM_GetImsi+0x5e>
    11bc:	463a      	mov	r2, r7
    11be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    11c0:	4413      	add	r3, r2
    11c2:	781b      	ldrb	r3, [r3, #0]
    11c4:	2b0a      	cmp	r3, #10
    11c6:	d100      	bne.n	11ca <GSM_GetImsi+0x5e>
			break;
    11c8:	e019      	b.n	11fe <GSM_GetImsi+0x92>
		if (is_start == 1) {
    11ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    11cc:	2b01      	cmp	r3, #1
    11ce:	d10b      	bne.n	11e8 <GSM_GetImsi+0x7c>
			imsi[index] = response[i];
    11d0:	463a      	mov	r2, r7
    11d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    11d4:	4413      	add	r3, r2
    11d6:	7819      	ldrb	r1, [r3, #0]
    11d8:	4a11      	ldr	r2, [pc, #68]	; (1220 <GSM_GetImsi+0xb4>)
    11da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    11dc:	4413      	add	r3, r2
    11de:	460a      	mov	r2, r1
    11e0:	701a      	strb	r2, [r3, #0]
			index++;
    11e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    11e4:	3301      	adds	r3, #1
    11e6:	66bb      	str	r3, [r7, #104]	; 0x68
	GSM_SendAt("AT+CIMI", response, 500);
	Trace("IMSI : ");
	int i;
	int index = 0;
	int is_start = 0;
	for (i = 0; i < strlen(response); i++) {
    11e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    11ea:	3301      	adds	r3, #1
    11ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    11ee:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    11f0:	463b      	mov	r3, r7
    11f2:	4618      	mov	r0, r3
    11f4:	f004 fa84 	bl	5700 <strlen>
    11f8:	4603      	mov	r3, r0
    11fa:	429c      	cmp	r4, r3
    11fc:	d3ca      	bcc.n	1194 <GSM_GetImsi+0x28>
		if (is_start == 1) {
			imsi[index] = response[i];
			index++;
		}
	}
	imsi[index - 1] = '\0';
    11fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1200:	3b01      	subs	r3, #1
    1202:	4a07      	ldr	r2, [pc, #28]	; (1220 <GSM_GetImsi+0xb4>)
    1204:	2100      	movs	r1, #0
    1206:	54d1      	strb	r1, [r2, r3]
	TraceNL(imsi);
    1208:	4805      	ldr	r0, [pc, #20]	; (1220 <GSM_GetImsi+0xb4>)
    120a:	f001 faaf 	bl	276c <TraceNL>
}
    120e:	3774      	adds	r7, #116	; 0x74
    1210:	46bd      	mov	sp, r7
    1212:	bd90      	pop	{r4, r7, pc}
    1214:	00006ca8 	.word	0x00006ca8
    1218:	00006cb0 	.word	0x00006cb0
    121c:	000076e8 	.word	0x000076e8
    1220:	10000f70 	.word	0x10000f70

00001224 <GSM_EchoOFF>:
	TraceNL("Setting GPS baud rate ");
}


void GSM_EchoOFF( )
{
    1224:	b580      	push	{r7, lr}
    1226:	b09a      	sub	sp, #104	; 0x68
    1228:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("ATE0", response, 500);
    122a:	1d3b      	adds	r3, r7, #4
    122c:	4805      	ldr	r0, [pc, #20]	; (1244 <GSM_EchoOFF+0x20>)
    122e:	4619      	mov	r1, r3
    1230:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1234:	f7ff fbc8 	bl	9c8 <GSM_SendAt>
	TraceNL("ECHO OFF");
    1238:	4803      	ldr	r0, [pc, #12]	; (1248 <GSM_EchoOFF+0x24>)
    123a:	f001 fa97 	bl	276c <TraceNL>
}
    123e:	3768      	adds	r7, #104	; 0x68
    1240:	46bd      	mov	sp, r7
    1242:	bd80      	pop	{r7, pc}
    1244:	00006cf0 	.word	0x00006cf0
    1248:	00006cf8 	.word	0x00006cf8

0000124c <GSM_TCP_Close>:

void GSM_TCP_Close( void )
{
    124c:	b580      	push	{r7, lr}
    124e:	b0b2      	sub	sp, #200	; 0xc8
    1250:	af00      	add	r7, sp, #0
	char response[200];
	GSM_SendAt("AT+QICLOSE", response, 500);
    1252:	463b      	mov	r3, r7
    1254:	4805      	ldr	r0, [pc, #20]	; (126c <GSM_TCP_Close+0x20>)
    1256:	4619      	mov	r1, r3
    1258:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    125c:	f7ff fbb4 	bl	9c8 <GSM_SendAt>
	TraceNL("CLOSE TCP connection ");
    1260:	4803      	ldr	r0, [pc, #12]	; (1270 <GSM_TCP_Close+0x24>)
    1262:	f001 fa83 	bl	276c <TraceNL>

}
    1266:	37c8      	adds	r7, #200	; 0xc8
    1268:	46bd      	mov	sp, r7
    126a:	bd80      	pop	{r7, pc}
    126c:	00006d04 	.word	0x00006d04
    1270:	00006d10 	.word	0x00006d10

00001274 <u16CRC_Calc16>:
**
** Returned value:  16-bit CRC
**
******************************************************************************/
uint16_t u16CRC_Calc16(const uint8_t *pu8Data, int32_t i16Len)
{
    1274:	b480      	push	{r7}
    1276:	b085      	sub	sp, #20
    1278:	af00      	add	r7, sp, #0
    127a:	6078      	str	r0, [r7, #4]
    127c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	uint16_t u16CRC = 0;
    127e:	2300      	movs	r3, #0
    1280:	81bb      	strh	r3, [r7, #12]

    while(--i16Len >= 0)
    1282:	e022      	b.n	12ca <u16CRC_Calc16+0x56>
    {
    	i = 8;
    1284:	2308      	movs	r3, #8
    1286:	73fb      	strb	r3, [r7, #15]
    	u16CRC = u16CRC ^ (((uint16_t)*pu8Data++) << 8);
    1288:	687b      	ldr	r3, [r7, #4]
    128a:	1c5a      	adds	r2, r3, #1
    128c:	607a      	str	r2, [r7, #4]
    128e:	781b      	ldrb	r3, [r3, #0]
    1290:	021b      	lsls	r3, r3, #8
    1292:	b29a      	uxth	r2, r3
    1294:	89bb      	ldrh	r3, [r7, #12]
    1296:	4053      	eors	r3, r2
    1298:	b29b      	uxth	r3, r3
    129a:	81bb      	strh	r3, [r7, #12]

    	do
        {
    		if (u16CRC & 0x8000)
    129c:	89bb      	ldrh	r3, [r7, #12]
    129e:	b21b      	sxth	r3, r3
    12a0:	2b00      	cmp	r3, #0
    12a2:	da09      	bge.n	12b8 <u16CRC_Calc16+0x44>
    		{
    			u16CRC = u16CRC << 1 ^ 0x1021;
    12a4:	89bb      	ldrh	r3, [r7, #12]
    12a6:	005b      	lsls	r3, r3, #1
    12a8:	b29b      	uxth	r3, r3
    12aa:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
    12ae:	f083 0301 	eor.w	r3, r3, #1
    12b2:	b29b      	uxth	r3, r3
    12b4:	81bb      	strh	r3, [r7, #12]
    12b6:	e002      	b.n	12be <u16CRC_Calc16+0x4a>
    		}
    		else
    		{
    			u16CRC = u16CRC << 1;
    12b8:	89bb      	ldrh	r3, [r7, #12]
    12ba:	005b      	lsls	r3, r3, #1
    12bc:	81bb      	strh	r3, [r7, #12]
    		}
        }
    	while(--i);
    12be:	7bfb      	ldrb	r3, [r7, #15]
    12c0:	3b01      	subs	r3, #1
    12c2:	73fb      	strb	r3, [r7, #15]
    12c4:	7bfb      	ldrb	r3, [r7, #15]
    12c6:	2b00      	cmp	r3, #0
    12c8:	d1e8      	bne.n	129c <u16CRC_Calc16+0x28>
uint16_t u16CRC_Calc16(const uint8_t *pu8Data, int32_t i16Len)
{
	uint8_t i;
	uint16_t u16CRC = 0;

    while(--i16Len >= 0)
    12ca:	683b      	ldr	r3, [r7, #0]
    12cc:	3b01      	subs	r3, #1
    12ce:	603b      	str	r3, [r7, #0]
    12d0:	683b      	ldr	r3, [r7, #0]
    12d2:	2b00      	cmp	r3, #0
    12d4:	dad6      	bge.n	1284 <u16CRC_Calc16+0x10>
    			u16CRC = u16CRC << 1;
    		}
        }
    	while(--i);
    }
    return u16CRC;
    12d6:	89bb      	ldrh	r3, [r7, #12]
}
    12d8:	4618      	mov	r0, r3
    12da:	3714      	adds	r7, #20
    12dc:	46bd      	mov	sp, r7
    12de:	f85d 7b04 	ldr.w	r7, [sp], #4
    12e2:	4770      	bx	lr

000012e4 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    12e4:	b480      	push	{r7}
    12e6:	b083      	sub	sp, #12
    12e8:	af00      	add	r7, sp, #0
    12ea:	4603      	mov	r3, r0
    12ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    12ee:	4908      	ldr	r1, [pc, #32]	; (1310 <NVIC_EnableIRQ+0x2c>)
    12f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    12f4:	095b      	lsrs	r3, r3, #5
    12f6:	79fa      	ldrb	r2, [r7, #7]
    12f8:	f002 021f 	and.w	r2, r2, #31
    12fc:	2001      	movs	r0, #1
    12fe:	fa00 f202 	lsl.w	r2, r0, r2
    1302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1306:	370c      	adds	r7, #12
    1308:	46bd      	mov	sp, r7
    130a:	f85d 7b04 	ldr.w	r7, [sp], #4
    130e:	4770      	bx	lr
    1310:	e000e100 	.word	0xe000e100

00001314 <I2C0_IRQHandler>:

volatile uint32_t RdIndex_1,RdIndex_0 = 0;
volatile uint32_t WrIndex_1,WrIndex_0 = 0;


void I2C0_IRQHandler(void) {
    1314:	b480      	push	{r7}
    1316:	b083      	sub	sp, #12
    1318:	af00      	add	r7, sp, #0
	uint8_t StatValue;
	/* this handler deals with master read and master write only */
	StatValue = LPC_I2C0->I2STAT;
    131a:	4ba9      	ldr	r3, [pc, #676]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    131c:	685b      	ldr	r3, [r3, #4]
    131e:	71fb      	strb	r3, [r7, #7]
	switch (StatValue) {
    1320:	79fb      	ldrb	r3, [r7, #7]
    1322:	3b08      	subs	r3, #8
    1324:	2b50      	cmp	r3, #80	; 0x50
    1326:	f200 8184 	bhi.w	1632 <I2C0_IRQHandler+0x31e>
    132a:	a201      	add	r2, pc, #4	; (adr r2, 1330 <I2C0_IRQHandler+0x1c>)
    132c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1330:	00001475 	.word	0x00001475
    1334:	00001633 	.word	0x00001633
    1338:	00001633 	.word	0x00001633
    133c:	00001633 	.word	0x00001633
    1340:	00001633 	.word	0x00001633
    1344:	00001633 	.word	0x00001633
    1348:	00001633 	.word	0x00001633
    134c:	00001633 	.word	0x00001633
    1350:	00001497 	.word	0x00001497
    1354:	00001633 	.word	0x00001633
    1358:	00001633 	.word	0x00001633
    135c:	00001633 	.word	0x00001633
    1360:	00001633 	.word	0x00001633
    1364:	00001633 	.word	0x00001633
    1368:	00001633 	.word	0x00001633
    136c:	00001633 	.word	0x00001633
    1370:	000014c1 	.word	0x000014c1
    1374:	00001633 	.word	0x00001633
    1378:	00001633 	.word	0x00001633
    137c:	00001633 	.word	0x00001633
    1380:	00001633 	.word	0x00001633
    1384:	00001633 	.word	0x00001633
    1388:	00001633 	.word	0x00001633
    138c:	00001633 	.word	0x00001633
    1390:	00001625 	.word	0x00001625
    1394:	00001633 	.word	0x00001633
    1398:	00001633 	.word	0x00001633
    139c:	00001633 	.word	0x00001633
    13a0:	00001633 	.word	0x00001633
    13a4:	00001633 	.word	0x00001633
    13a8:	00001633 	.word	0x00001633
    13ac:	00001633 	.word	0x00001633
    13b0:	000014eb 	.word	0x000014eb
    13b4:	00001633 	.word	0x00001633
    13b8:	00001633 	.word	0x00001633
    13bc:	00001633 	.word	0x00001633
    13c0:	00001633 	.word	0x00001633
    13c4:	00001633 	.word	0x00001633
    13c8:	00001633 	.word	0x00001633
    13cc:	00001633 	.word	0x00001633
    13d0:	00001531 	.word	0x00001531
    13d4:	00001633 	.word	0x00001633
    13d8:	00001633 	.word	0x00001633
    13dc:	00001633 	.word	0x00001633
    13e0:	00001633 	.word	0x00001633
    13e4:	00001633 	.word	0x00001633
    13e8:	00001633 	.word	0x00001633
    13ec:	00001633 	.word	0x00001633
    13f0:	00001633 	.word	0x00001633
    13f4:	00001633 	.word	0x00001633
    13f8:	00001633 	.word	0x00001633
    13fc:	00001633 	.word	0x00001633
    1400:	00001633 	.word	0x00001633
    1404:	00001633 	.word	0x00001633
    1408:	00001633 	.word	0x00001633
    140c:	00001633 	.word	0x00001633
    1410:	000015b1 	.word	0x000015b1
    1414:	00001633 	.word	0x00001633
    1418:	00001633 	.word	0x00001633
    141c:	00001633 	.word	0x00001633
    1420:	00001633 	.word	0x00001633
    1424:	00001633 	.word	0x00001633
    1428:	00001633 	.word	0x00001633
    142c:	00001633 	.word	0x00001633
    1430:	00001625 	.word	0x00001625
    1434:	00001633 	.word	0x00001633
    1438:	00001633 	.word	0x00001633
    143c:	00001633 	.word	0x00001633
    1440:	00001633 	.word	0x00001633
    1444:	00001633 	.word	0x00001633
    1448:	00001633 	.word	0x00001633
    144c:	00001633 	.word	0x00001633
    1450:	000015dd 	.word	0x000015dd
    1454:	00001633 	.word	0x00001633
    1458:	00001633 	.word	0x00001633
    145c:	00001633 	.word	0x00001633
    1460:	00001633 	.word	0x00001633
    1464:	00001633 	.word	0x00001633
    1468:	00001633 	.word	0x00001633
    146c:	00001633 	.word	0x00001633
    1470:	000015dd 	.word	0x000015dd
		case 0x08: /* A Start condition is issued. */
			LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    1474:	4952      	ldr	r1, [pc, #328]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    1476:	4b53      	ldr	r3, [pc, #332]	; (15c4 <I2C0_IRQHandler+0x2b0>)
    1478:	681b      	ldr	r3, [r3, #0]
    147a:	1c5a      	adds	r2, r3, #1
    147c:	4851      	ldr	r0, [pc, #324]	; (15c4 <I2C0_IRQHandler+0x2b0>)
    147e:	6002      	str	r2, [r0, #0]
    1480:	4a51      	ldr	r2, [pc, #324]	; (15c8 <I2C0_IRQHandler+0x2b4>)
    1482:	5cd3      	ldrb	r3, [r2, r3]
    1484:	b2db      	uxtb	r3, r3
    1486:	608b      	str	r3, [r1, #8]
			LPC_I2C0->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    1488:	4b4d      	ldr	r3, [pc, #308]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    148a:	2228      	movs	r2, #40	; 0x28
    148c:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = I2C_STARTED;
    148e:	4b4f      	ldr	r3, [pc, #316]	; (15cc <I2C0_IRQHandler+0x2b8>)
    1490:	2201      	movs	r2, #1
    1492:	601a      	str	r2, [r3, #0]
			break;
    1494:	e0d1      	b.n	163a <I2C0_IRQHandler+0x326>
		case 0x10: /* A repeated started is issued */
			if (!I2C0_Cmd) {
    1496:	4b4e      	ldr	r3, [pc, #312]	; (15d0 <I2C0_IRQHandler+0x2bc>)
    1498:	681b      	ldr	r3, [r3, #0]
    149a:	2b00      	cmp	r3, #0
    149c:	d109      	bne.n	14b2 <I2C0_IRQHandler+0x19e>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    149e:	4948      	ldr	r1, [pc, #288]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    14a0:	4b48      	ldr	r3, [pc, #288]	; (15c4 <I2C0_IRQHandler+0x2b0>)
    14a2:	681b      	ldr	r3, [r3, #0]
    14a4:	1c5a      	adds	r2, r3, #1
    14a6:	4847      	ldr	r0, [pc, #284]	; (15c4 <I2C0_IRQHandler+0x2b0>)
    14a8:	6002      	str	r2, [r0, #0]
    14aa:	4a47      	ldr	r2, [pc, #284]	; (15c8 <I2C0_IRQHandler+0x2b4>)
    14ac:	5cd3      	ldrb	r3, [r2, r3]
    14ae:	b2db      	uxtb	r3, r3
    14b0:	608b      	str	r3, [r1, #8]
			}
			LPC_I2C0->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    14b2:	4b43      	ldr	r3, [pc, #268]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    14b4:	2228      	movs	r2, #40	; 0x28
    14b6:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = I2C_RESTARTED;
    14b8:	4b44      	ldr	r3, [pc, #272]	; (15cc <I2C0_IRQHandler+0x2b8>)
    14ba:	2202      	movs	r2, #2
    14bc:	601a      	str	r2, [r3, #0]
			break;
    14be:	e0bc      	b.n	163a <I2C0_IRQHandler+0x326>
		case 0x18: /* Regardless, it's a ACK */
			if (I2C0_MasterState == I2C_STARTED) {
    14c0:	4b42      	ldr	r3, [pc, #264]	; (15cc <I2C0_IRQHandler+0x2b8>)
    14c2:	681b      	ldr	r3, [r3, #0]
    14c4:	2b01      	cmp	r3, #1
    14c6:	d10c      	bne.n	14e2 <I2C0_IRQHandler+0x1ce>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    14c8:	493d      	ldr	r1, [pc, #244]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    14ca:	4b3e      	ldr	r3, [pc, #248]	; (15c4 <I2C0_IRQHandler+0x2b0>)
    14cc:	681b      	ldr	r3, [r3, #0]
    14ce:	1c5a      	adds	r2, r3, #1
    14d0:	483c      	ldr	r0, [pc, #240]	; (15c4 <I2C0_IRQHandler+0x2b0>)
    14d2:	6002      	str	r2, [r0, #0]
    14d4:	4a3c      	ldr	r2, [pc, #240]	; (15c8 <I2C0_IRQHandler+0x2b4>)
    14d6:	5cd3      	ldrb	r3, [r2, r3]
    14d8:	b2db      	uxtb	r3, r3
    14da:	608b      	str	r3, [r1, #8]
				I2C0_MasterState = DATA_ACK;
    14dc:	4b3b      	ldr	r3, [pc, #236]	; (15cc <I2C0_IRQHandler+0x2b8>)
    14de:	2204      	movs	r2, #4
    14e0:	601a      	str	r2, [r3, #0]
			}
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    14e2:	4b37      	ldr	r3, [pc, #220]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    14e4:	2208      	movs	r2, #8
    14e6:	619a      	str	r2, [r3, #24]
			break;
    14e8:	e0a7      	b.n	163a <I2C0_IRQHandler+0x326>
		case 0x28: /* Data byte has been transmitted, regardless ACK or NACK */
			 if ( WrIndex_0 < I2C0_WriteLength )
    14ea:	4b36      	ldr	r3, [pc, #216]	; (15c4 <I2C0_IRQHandler+0x2b0>)
    14ec:	681a      	ldr	r2, [r3, #0]
    14ee:	4b39      	ldr	r3, [pc, #228]	; (15d4 <I2C0_IRQHandler+0x2c0>)
    14f0:	681b      	ldr	r3, [r3, #0]
    14f2:	429a      	cmp	r2, r3
    14f4:	d20a      	bcs.n	150c <I2C0_IRQHandler+0x1f8>
				{
				  LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++]; /* this should be the last one */
    14f6:	4932      	ldr	r1, [pc, #200]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    14f8:	4b32      	ldr	r3, [pc, #200]	; (15c4 <I2C0_IRQHandler+0x2b0>)
    14fa:	681b      	ldr	r3, [r3, #0]
    14fc:	1c5a      	adds	r2, r3, #1
    14fe:	4831      	ldr	r0, [pc, #196]	; (15c4 <I2C0_IRQHandler+0x2b0>)
    1500:	6002      	str	r2, [r0, #0]
    1502:	4a31      	ldr	r2, [pc, #196]	; (15c8 <I2C0_IRQHandler+0x2b4>)
    1504:	5cd3      	ldrb	r3, [r2, r3]
    1506:	b2db      	uxtb	r3, r3
    1508:	608b      	str	r3, [r1, #8]
    150a:	e00d      	b.n	1528 <I2C0_IRQHandler+0x214>
				}
				else
				{
				  if ( I2C0_ReadLength != 0 )
    150c:	4b32      	ldr	r3, [pc, #200]	; (15d8 <I2C0_IRQHandler+0x2c4>)
    150e:	681b      	ldr	r3, [r3, #0]
    1510:	2b00      	cmp	r3, #0
    1512:	d003      	beq.n	151c <I2C0_IRQHandler+0x208>
				  {
						LPC_I2C0->I2CONSET = I2CONSET_STA;   /* Set Repeated-start flag */
    1514:	4b2a      	ldr	r3, [pc, #168]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    1516:	2220      	movs	r2, #32
    1518:	601a      	str	r2, [r3, #0]
    151a:	e005      	b.n	1528 <I2C0_IRQHandler+0x214>
				  }
				  else
				  {
						LPC_I2C0->I2CONSET = I2CONSET_STO;      /* Set Stop flag */
    151c:	4b28      	ldr	r3, [pc, #160]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    151e:	2210      	movs	r2, #16
    1520:	601a      	str	r2, [r3, #0]
						I2C0_MasterState = I2C_IDLE;
    1522:	4b2a      	ldr	r3, [pc, #168]	; (15cc <I2C0_IRQHandler+0x2b8>)
    1524:	2200      	movs	r2, #0
    1526:	601a      	str	r2, [r3, #0]
				  }
				}
				LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    1528:	4b25      	ldr	r3, [pc, #148]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    152a:	2208      	movs	r2, #8
    152c:	619a      	str	r2, [r3, #24]
				break;
    152e:	e084      	b.n	163a <I2C0_IRQHandler+0x326>
		case 0x30:
			if (WrIndex_0 != I2C0_WriteLength) {
    1530:	4b24      	ldr	r3, [pc, #144]	; (15c4 <I2C0_IRQHandler+0x2b0>)
    1532:	681a      	ldr	r2, [r3, #0]
    1534:	4b27      	ldr	r3, [pc, #156]	; (15d4 <I2C0_IRQHandler+0x2c0>)
    1536:	681b      	ldr	r3, [r3, #0]
    1538:	429a      	cmp	r2, r3
    153a:	d024      	beq.n	1586 <I2C0_IRQHandler+0x272>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[1 + WrIndex_0]; /* this should be the last one */
    153c:	4a20      	ldr	r2, [pc, #128]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    153e:	4b21      	ldr	r3, [pc, #132]	; (15c4 <I2C0_IRQHandler+0x2b0>)
    1540:	681b      	ldr	r3, [r3, #0]
    1542:	3301      	adds	r3, #1
    1544:	4920      	ldr	r1, [pc, #128]	; (15c8 <I2C0_IRQHandler+0x2b4>)
    1546:	5ccb      	ldrb	r3, [r1, r3]
    1548:	b2db      	uxtb	r3, r3
    154a:	6093      	str	r3, [r2, #8]
				WrIndex_0++;
    154c:	4b1d      	ldr	r3, [pc, #116]	; (15c4 <I2C0_IRQHandler+0x2b0>)
    154e:	681b      	ldr	r3, [r3, #0]
    1550:	3301      	adds	r3, #1
    1552:	4a1c      	ldr	r2, [pc, #112]	; (15c4 <I2C0_IRQHandler+0x2b0>)
    1554:	6013      	str	r3, [r2, #0]
				if (WrIndex_0 != I2C0_WriteLength) {
    1556:	4b1b      	ldr	r3, [pc, #108]	; (15c4 <I2C0_IRQHandler+0x2b0>)
    1558:	681a      	ldr	r2, [r3, #0]
    155a:	4b1e      	ldr	r3, [pc, #120]	; (15d4 <I2C0_IRQHandler+0x2c0>)
    155c:	681b      	ldr	r3, [r3, #0]
    155e:	429a      	cmp	r2, r3
    1560:	d003      	beq.n	156a <I2C0_IRQHandler+0x256>
					I2C0_MasterState = DATA_ACK;
    1562:	4b1a      	ldr	r3, [pc, #104]	; (15cc <I2C0_IRQHandler+0x2b8>)
    1564:	2204      	movs	r2, #4
    1566:	601a      	str	r2, [r3, #0]
    1568:	e01e      	b.n	15a8 <I2C0_IRQHandler+0x294>
				} else {
					I2C0_MasterState = DATA_NACK;
    156a:	4b18      	ldr	r3, [pc, #96]	; (15cc <I2C0_IRQHandler+0x2b8>)
    156c:	2205      	movs	r2, #5
    156e:	601a      	str	r2, [r3, #0]
					if (I2C0_ReadLength != 0) {
    1570:	4b19      	ldr	r3, [pc, #100]	; (15d8 <I2C0_IRQHandler+0x2c4>)
    1572:	681b      	ldr	r3, [r3, #0]
    1574:	2b00      	cmp	r3, #0
    1576:	d017      	beq.n	15a8 <I2C0_IRQHandler+0x294>
						LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    1578:	4b11      	ldr	r3, [pc, #68]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    157a:	2220      	movs	r2, #32
    157c:	601a      	str	r2, [r3, #0]
						I2C0_MasterState = I2C_REPEATED_START;
    157e:	4b13      	ldr	r3, [pc, #76]	; (15cc <I2C0_IRQHandler+0x2b8>)
    1580:	2203      	movs	r2, #3
    1582:	601a      	str	r2, [r3, #0]
    1584:	e010      	b.n	15a8 <I2C0_IRQHandler+0x294>
					}
				}
			} else {
				if (I2C0_ReadLength != 0) {
    1586:	4b14      	ldr	r3, [pc, #80]	; (15d8 <I2C0_IRQHandler+0x2c4>)
    1588:	681b      	ldr	r3, [r3, #0]
    158a:	2b00      	cmp	r3, #0
    158c:	d006      	beq.n	159c <I2C0_IRQHandler+0x288>
					LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    158e:	4b0c      	ldr	r3, [pc, #48]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    1590:	2220      	movs	r2, #32
    1592:	601a      	str	r2, [r3, #0]
					I2C0_MasterState = I2C_REPEATED_START;
    1594:	4b0d      	ldr	r3, [pc, #52]	; (15cc <I2C0_IRQHandler+0x2b8>)
    1596:	2203      	movs	r2, #3
    1598:	601a      	str	r2, [r3, #0]
    159a:	e005      	b.n	15a8 <I2C0_IRQHandler+0x294>
				} else {
					I2C0_MasterState = DATA_NACK;
    159c:	4b0b      	ldr	r3, [pc, #44]	; (15cc <I2C0_IRQHandler+0x2b8>)
    159e:	2205      	movs	r2, #5
    15a0:	601a      	str	r2, [r3, #0]
					LPC_I2C0->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    15a2:	4b07      	ldr	r3, [pc, #28]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    15a4:	2210      	movs	r2, #16
    15a6:	601a      	str	r2, [r3, #0]
				}
			}
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    15a8:	4b05      	ldr	r3, [pc, #20]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    15aa:	2208      	movs	r2, #8
    15ac:	619a      	str	r2, [r3, #24]
			break;
    15ae:	e044      	b.n	163a <I2C0_IRQHandler+0x326>
		case 0x40: /* Master Receive, SLA_R has been sent */
			LPC_I2C0->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    15b0:	4b03      	ldr	r3, [pc, #12]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    15b2:	2204      	movs	r2, #4
    15b4:	601a      	str	r2, [r3, #0]
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    15b6:	4b02      	ldr	r3, [pc, #8]	; (15c0 <I2C0_IRQHandler+0x2ac>)
    15b8:	2208      	movs	r2, #8
    15ba:	619a      	str	r2, [r3, #24]
			break;
    15bc:	e03d      	b.n	163a <I2C0_IRQHandler+0x326>
    15be:	bf00      	nop
    15c0:	4001c000 	.word	0x4001c000
    15c4:	10000034 	.word	0x10000034
    15c8:	10001044 	.word	0x10001044
    15cc:	1000002c 	.word	0x1000002c
    15d0:	10001064 	.word	0x10001064
    15d4:	10001020 	.word	0x10001020
    15d8:	10000fc8 	.word	0x10000fc8
		case 0x50: /* Data byte has been received, regardless following ACK or NACK */
		case 0x58:
			I2C0_MasterBuffer[3 + RdIndex_0] = LPC_I2C0->I2DAT;
    15dc:	4b19      	ldr	r3, [pc, #100]	; (1644 <I2C0_IRQHandler+0x330>)
    15de:	681b      	ldr	r3, [r3, #0]
    15e0:	3303      	adds	r3, #3
    15e2:	4a19      	ldr	r2, [pc, #100]	; (1648 <I2C0_IRQHandler+0x334>)
    15e4:	6892      	ldr	r2, [r2, #8]
    15e6:	b2d1      	uxtb	r1, r2
    15e8:	4a18      	ldr	r2, [pc, #96]	; (164c <I2C0_IRQHandler+0x338>)
    15ea:	54d1      	strb	r1, [r2, r3]
			RdIndex_0++;
    15ec:	4b15      	ldr	r3, [pc, #84]	; (1644 <I2C0_IRQHandler+0x330>)
    15ee:	681b      	ldr	r3, [r3, #0]
    15f0:	3301      	adds	r3, #1
    15f2:	4a14      	ldr	r2, [pc, #80]	; (1644 <I2C0_IRQHandler+0x330>)
    15f4:	6013      	str	r3, [r2, #0]
			if (RdIndex_0 != I2C0_ReadLength) {
    15f6:	4b13      	ldr	r3, [pc, #76]	; (1644 <I2C0_IRQHandler+0x330>)
    15f8:	681a      	ldr	r2, [r3, #0]
    15fa:	4b15      	ldr	r3, [pc, #84]	; (1650 <I2C0_IRQHandler+0x33c>)
    15fc:	681b      	ldr	r3, [r3, #0]
    15fe:	429a      	cmp	r2, r3
    1600:	d003      	beq.n	160a <I2C0_IRQHandler+0x2f6>
				I2C0_MasterState = DATA_ACK;
    1602:	4b14      	ldr	r3, [pc, #80]	; (1654 <I2C0_IRQHandler+0x340>)
    1604:	2204      	movs	r2, #4
    1606:	601a      	str	r2, [r3, #0]
    1608:	e005      	b.n	1616 <I2C0_IRQHandler+0x302>
			} else {
				RdIndex_0 = 0;
    160a:	4b0e      	ldr	r3, [pc, #56]	; (1644 <I2C0_IRQHandler+0x330>)
    160c:	2200      	movs	r2, #0
    160e:	601a      	str	r2, [r3, #0]
				I2C0_MasterState = DATA_NACK;
    1610:	4b10      	ldr	r3, [pc, #64]	; (1654 <I2C0_IRQHandler+0x340>)
    1612:	2205      	movs	r2, #5
    1614:	601a      	str	r2, [r3, #0]
			}
			LPC_I2C0->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    1616:	4b0c      	ldr	r3, [pc, #48]	; (1648 <I2C0_IRQHandler+0x334>)
    1618:	2204      	movs	r2, #4
    161a:	601a      	str	r2, [r3, #0]
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    161c:	4b0a      	ldr	r3, [pc, #40]	; (1648 <I2C0_IRQHandler+0x334>)
    161e:	2208      	movs	r2, #8
    1620:	619a      	str	r2, [r3, #24]
			break;
    1622:	e00a      	b.n	163a <I2C0_IRQHandler+0x326>
		case 0x20: /* regardless, it's a NACK */
		case 0x48:
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    1624:	4b08      	ldr	r3, [pc, #32]	; (1648 <I2C0_IRQHandler+0x334>)
    1626:	2208      	movs	r2, #8
    1628:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = DATA_NACK;
    162a:	4b0a      	ldr	r3, [pc, #40]	; (1654 <I2C0_IRQHandler+0x340>)
    162c:	2205      	movs	r2, #5
    162e:	601a      	str	r2, [r3, #0]
			break;
    1630:	e003      	b.n	163a <I2C0_IRQHandler+0x326>
		case 0x38: /* Arbitration lost, in this example, we don't
		 deal with multiple master situation */
		default:
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    1632:	4b05      	ldr	r3, [pc, #20]	; (1648 <I2C0_IRQHandler+0x334>)
    1634:	2208      	movs	r2, #8
    1636:	619a      	str	r2, [r3, #24]
			break;
    1638:	bf00      	nop
	}
}
    163a:	370c      	adds	r7, #12
    163c:	46bd      	mov	sp, r7
    163e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1642:	4770      	bx	lr
    1644:	10000030 	.word	0x10000030
    1648:	4001c000 	.word	0x4001c000
    164c:	10001044 	.word	0x10001044
    1650:	10000fc8 	.word	0x10000fc8
    1654:	1000002c 	.word	0x1000002c

00001658 <I2C1_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void I2C1_IRQHandler(void) {
    1658:	b480      	push	{r7}
    165a:	b083      	sub	sp, #12
    165c:	af00      	add	r7, sp, #0
	uint8_t StatValue;
	/* this handler deals with master read and master write only */
	StatValue = LPC_I2C1->I2STAT;
    165e:	4bae      	ldr	r3, [pc, #696]	; (1918 <I2C1_IRQHandler+0x2c0>)
    1660:	685b      	ldr	r3, [r3, #4]
    1662:	71fb      	strb	r3, [r7, #7]
	switch (StatValue) {
    1664:	79fb      	ldrb	r3, [r7, #7]
    1666:	3b08      	subs	r3, #8
    1668:	2b50      	cmp	r3, #80	; 0x50
    166a:	f200 814b 	bhi.w	1904 <I2C1_IRQHandler+0x2ac>
    166e:	a201      	add	r2, pc, #4	; (adr r2, 1674 <I2C1_IRQHandler+0x1c>)
    1670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1674:	000017b9 	.word	0x000017b9
    1678:	00001905 	.word	0x00001905
    167c:	00001905 	.word	0x00001905
    1680:	00001905 	.word	0x00001905
    1684:	00001905 	.word	0x00001905
    1688:	00001905 	.word	0x00001905
    168c:	00001905 	.word	0x00001905
    1690:	00001905 	.word	0x00001905
    1694:	000017d1 	.word	0x000017d1
    1698:	00001905 	.word	0x00001905
    169c:	00001905 	.word	0x00001905
    16a0:	00001905 	.word	0x00001905
    16a4:	00001905 	.word	0x00001905
    16a8:	00001905 	.word	0x00001905
    16ac:	00001905 	.word	0x00001905
    16b0:	00001905 	.word	0x00001905
    16b4:	000017f1 	.word	0x000017f1
    16b8:	00001905 	.word	0x00001905
    16bc:	00001905 	.word	0x00001905
    16c0:	00001905 	.word	0x00001905
    16c4:	00001905 	.word	0x00001905
    16c8:	00001905 	.word	0x00001905
    16cc:	00001905 	.word	0x00001905
    16d0:	00001905 	.word	0x00001905
    16d4:	000018f7 	.word	0x000018f7
    16d8:	00001905 	.word	0x00001905
    16dc:	00001905 	.word	0x00001905
    16e0:	00001905 	.word	0x00001905
    16e4:	00001905 	.word	0x00001905
    16e8:	00001905 	.word	0x00001905
    16ec:	00001905 	.word	0x00001905
    16f0:	00001905 	.word	0x00001905
    16f4:	00001821 	.word	0x00001821
    16f8:	00001905 	.word	0x00001905
    16fc:	00001905 	.word	0x00001905
    1700:	00001905 	.word	0x00001905
    1704:	00001905 	.word	0x00001905
    1708:	00001905 	.word	0x00001905
    170c:	00001905 	.word	0x00001905
    1710:	00001905 	.word	0x00001905
    1714:	00001821 	.word	0x00001821
    1718:	00001905 	.word	0x00001905
    171c:	00001905 	.word	0x00001905
    1720:	00001905 	.word	0x00001905
    1724:	00001905 	.word	0x00001905
    1728:	00001905 	.word	0x00001905
    172c:	00001905 	.word	0x00001905
    1730:	00001905 	.word	0x00001905
    1734:	00001905 	.word	0x00001905
    1738:	00001905 	.word	0x00001905
    173c:	00001905 	.word	0x00001905
    1740:	00001905 	.word	0x00001905
    1744:	00001905 	.word	0x00001905
    1748:	00001905 	.word	0x00001905
    174c:	00001905 	.word	0x00001905
    1750:	00001905 	.word	0x00001905
    1754:	000018a1 	.word	0x000018a1
    1758:	00001905 	.word	0x00001905
    175c:	00001905 	.word	0x00001905
    1760:	00001905 	.word	0x00001905
    1764:	00001905 	.word	0x00001905
    1768:	00001905 	.word	0x00001905
    176c:	00001905 	.word	0x00001905
    1770:	00001905 	.word	0x00001905
    1774:	000018f7 	.word	0x000018f7
    1778:	00001905 	.word	0x00001905
    177c:	00001905 	.word	0x00001905
    1780:	00001905 	.word	0x00001905
    1784:	00001905 	.word	0x00001905
    1788:	00001905 	.word	0x00001905
    178c:	00001905 	.word	0x00001905
    1790:	00001905 	.word	0x00001905
    1794:	000018af 	.word	0x000018af
    1798:	00001905 	.word	0x00001905
    179c:	00001905 	.word	0x00001905
    17a0:	00001905 	.word	0x00001905
    17a4:	00001905 	.word	0x00001905
    17a8:	00001905 	.word	0x00001905
    17ac:	00001905 	.word	0x00001905
    17b0:	00001905 	.word	0x00001905
    17b4:	000018af 	.word	0x000018af
	case 0x08: /* A Start condition is issued. */
		LPC_I2C1->I2DAT = I2C1_MasterBuffer[0];
    17b8:	4b57      	ldr	r3, [pc, #348]	; (1918 <I2C1_IRQHandler+0x2c0>)
    17ba:	4a58      	ldr	r2, [pc, #352]	; (191c <I2C1_IRQHandler+0x2c4>)
    17bc:	7812      	ldrb	r2, [r2, #0]
    17be:	b2d2      	uxtb	r2, r2
    17c0:	609a      	str	r2, [r3, #8]
		LPC_I2C1->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    17c2:	4b55      	ldr	r3, [pc, #340]	; (1918 <I2C1_IRQHandler+0x2c0>)
    17c4:	2228      	movs	r2, #40	; 0x28
    17c6:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = I2C_STARTED;
    17c8:	4b55      	ldr	r3, [pc, #340]	; (1920 <I2C1_IRQHandler+0x2c8>)
    17ca:	2201      	movs	r2, #1
    17cc:	601a      	str	r2, [r3, #0]
		break;
    17ce:	e09d      	b.n	190c <I2C1_IRQHandler+0x2b4>
	case 0x10: /* A repeated started is issued */
		if (!I2C1_Cmd) {
    17d0:	4b54      	ldr	r3, [pc, #336]	; (1924 <I2C1_IRQHandler+0x2cc>)
    17d2:	681b      	ldr	r3, [r3, #0]
    17d4:	2b00      	cmp	r3, #0
    17d6:	d104      	bne.n	17e2 <I2C1_IRQHandler+0x18a>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[2];
    17d8:	4b4f      	ldr	r3, [pc, #316]	; (1918 <I2C1_IRQHandler+0x2c0>)
    17da:	4a50      	ldr	r2, [pc, #320]	; (191c <I2C1_IRQHandler+0x2c4>)
    17dc:	7892      	ldrb	r2, [r2, #2]
    17de:	b2d2      	uxtb	r2, r2
    17e0:	609a      	str	r2, [r3, #8]
		}
		LPC_I2C1->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    17e2:	4b4d      	ldr	r3, [pc, #308]	; (1918 <I2C1_IRQHandler+0x2c0>)
    17e4:	2228      	movs	r2, #40	; 0x28
    17e6:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = I2C_RESTARTED;
    17e8:	4b4d      	ldr	r3, [pc, #308]	; (1920 <I2C1_IRQHandler+0x2c8>)
    17ea:	2202      	movs	r2, #2
    17ec:	601a      	str	r2, [r3, #0]
		break;
    17ee:	e08d      	b.n	190c <I2C1_IRQHandler+0x2b4>
	case 0x18: /* Regardless, it's a ACK */
		if (I2C1_MasterState == I2C_STARTED) {
    17f0:	4b4b      	ldr	r3, [pc, #300]	; (1920 <I2C1_IRQHandler+0x2c8>)
    17f2:	681b      	ldr	r3, [r3, #0]
    17f4:	2b01      	cmp	r3, #1
    17f6:	d10f      	bne.n	1818 <I2C1_IRQHandler+0x1c0>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[1 + WrIndex_1];
    17f8:	4a47      	ldr	r2, [pc, #284]	; (1918 <I2C1_IRQHandler+0x2c0>)
    17fa:	4b4b      	ldr	r3, [pc, #300]	; (1928 <I2C1_IRQHandler+0x2d0>)
    17fc:	681b      	ldr	r3, [r3, #0]
    17fe:	3301      	adds	r3, #1
    1800:	4946      	ldr	r1, [pc, #280]	; (191c <I2C1_IRQHandler+0x2c4>)
    1802:	5ccb      	ldrb	r3, [r1, r3]
    1804:	b2db      	uxtb	r3, r3
    1806:	6093      	str	r3, [r2, #8]
			WrIndex_1++;
    1808:	4b47      	ldr	r3, [pc, #284]	; (1928 <I2C1_IRQHandler+0x2d0>)
    180a:	681b      	ldr	r3, [r3, #0]
    180c:	3301      	adds	r3, #1
    180e:	4a46      	ldr	r2, [pc, #280]	; (1928 <I2C1_IRQHandler+0x2d0>)
    1810:	6013      	str	r3, [r2, #0]
			I2C1_MasterState = DATA_ACK;
    1812:	4b43      	ldr	r3, [pc, #268]	; (1920 <I2C1_IRQHandler+0x2c8>)
    1814:	2204      	movs	r2, #4
    1816:	601a      	str	r2, [r3, #0]
		}
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    1818:	4b3f      	ldr	r3, [pc, #252]	; (1918 <I2C1_IRQHandler+0x2c0>)
    181a:	2208      	movs	r2, #8
    181c:	619a      	str	r2, [r3, #24]
		break;
    181e:	e075      	b.n	190c <I2C1_IRQHandler+0x2b4>
	case 0x28: /* Data byte has been transmitted, regardless ACK or NACK */
	case 0x30:
		if (WrIndex_1 != I2C1_WriteLength) {
    1820:	4b41      	ldr	r3, [pc, #260]	; (1928 <I2C1_IRQHandler+0x2d0>)
    1822:	681a      	ldr	r2, [r3, #0]
    1824:	4b41      	ldr	r3, [pc, #260]	; (192c <I2C1_IRQHandler+0x2d4>)
    1826:	681b      	ldr	r3, [r3, #0]
    1828:	429a      	cmp	r2, r3
    182a:	d024      	beq.n	1876 <I2C1_IRQHandler+0x21e>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[1 + WrIndex_1]; /* this should be the last one */
    182c:	4a3a      	ldr	r2, [pc, #232]	; (1918 <I2C1_IRQHandler+0x2c0>)
    182e:	4b3e      	ldr	r3, [pc, #248]	; (1928 <I2C1_IRQHandler+0x2d0>)
    1830:	681b      	ldr	r3, [r3, #0]
    1832:	3301      	adds	r3, #1
    1834:	4939      	ldr	r1, [pc, #228]	; (191c <I2C1_IRQHandler+0x2c4>)
    1836:	5ccb      	ldrb	r3, [r1, r3]
    1838:	b2db      	uxtb	r3, r3
    183a:	6093      	str	r3, [r2, #8]
			WrIndex_1++;
    183c:	4b3a      	ldr	r3, [pc, #232]	; (1928 <I2C1_IRQHandler+0x2d0>)
    183e:	681b      	ldr	r3, [r3, #0]
    1840:	3301      	adds	r3, #1
    1842:	4a39      	ldr	r2, [pc, #228]	; (1928 <I2C1_IRQHandler+0x2d0>)
    1844:	6013      	str	r3, [r2, #0]
			if (WrIndex_1 != I2C1_WriteLength) {
    1846:	4b38      	ldr	r3, [pc, #224]	; (1928 <I2C1_IRQHandler+0x2d0>)
    1848:	681a      	ldr	r2, [r3, #0]
    184a:	4b38      	ldr	r3, [pc, #224]	; (192c <I2C1_IRQHandler+0x2d4>)
    184c:	681b      	ldr	r3, [r3, #0]
    184e:	429a      	cmp	r2, r3
    1850:	d003      	beq.n	185a <I2C1_IRQHandler+0x202>
				I2C1_MasterState = DATA_ACK;
    1852:	4b33      	ldr	r3, [pc, #204]	; (1920 <I2C1_IRQHandler+0x2c8>)
    1854:	2204      	movs	r2, #4
    1856:	601a      	str	r2, [r3, #0]
    1858:	e01e      	b.n	1898 <I2C1_IRQHandler+0x240>
			} else {
				I2C1_MasterState = DATA_NACK;
    185a:	4b31      	ldr	r3, [pc, #196]	; (1920 <I2C1_IRQHandler+0x2c8>)
    185c:	2205      	movs	r2, #5
    185e:	601a      	str	r2, [r3, #0]
				if (I2C1_ReadLength != 0) {
    1860:	4b33      	ldr	r3, [pc, #204]	; (1930 <I2C1_IRQHandler+0x2d8>)
    1862:	681b      	ldr	r3, [r3, #0]
    1864:	2b00      	cmp	r3, #0
    1866:	d017      	beq.n	1898 <I2C1_IRQHandler+0x240>
					LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    1868:	4b2b      	ldr	r3, [pc, #172]	; (1918 <I2C1_IRQHandler+0x2c0>)
    186a:	2220      	movs	r2, #32
    186c:	601a      	str	r2, [r3, #0]
					I2C1_MasterState = I2C_REPEATED_START;
    186e:	4b2c      	ldr	r3, [pc, #176]	; (1920 <I2C1_IRQHandler+0x2c8>)
    1870:	2203      	movs	r2, #3
    1872:	601a      	str	r2, [r3, #0]
    1874:	e010      	b.n	1898 <I2C1_IRQHandler+0x240>
				}
			}
		} else {
			if (I2C1_ReadLength != 0) {
    1876:	4b2e      	ldr	r3, [pc, #184]	; (1930 <I2C1_IRQHandler+0x2d8>)
    1878:	681b      	ldr	r3, [r3, #0]
    187a:	2b00      	cmp	r3, #0
    187c:	d006      	beq.n	188c <I2C1_IRQHandler+0x234>
				LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    187e:	4b26      	ldr	r3, [pc, #152]	; (1918 <I2C1_IRQHandler+0x2c0>)
    1880:	2220      	movs	r2, #32
    1882:	601a      	str	r2, [r3, #0]
				I2C1_MasterState = I2C_REPEATED_START;
    1884:	4b26      	ldr	r3, [pc, #152]	; (1920 <I2C1_IRQHandler+0x2c8>)
    1886:	2203      	movs	r2, #3
    1888:	601a      	str	r2, [r3, #0]
    188a:	e005      	b.n	1898 <I2C1_IRQHandler+0x240>
			} else {
				I2C1_MasterState = DATA_NACK;
    188c:	4b24      	ldr	r3, [pc, #144]	; (1920 <I2C1_IRQHandler+0x2c8>)
    188e:	2205      	movs	r2, #5
    1890:	601a      	str	r2, [r3, #0]
				LPC_I2C1->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    1892:	4b21      	ldr	r3, [pc, #132]	; (1918 <I2C1_IRQHandler+0x2c0>)
    1894:	2210      	movs	r2, #16
    1896:	601a      	str	r2, [r3, #0]
			}
		}
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    1898:	4b1f      	ldr	r3, [pc, #124]	; (1918 <I2C1_IRQHandler+0x2c0>)
    189a:	2208      	movs	r2, #8
    189c:	619a      	str	r2, [r3, #24]
		break;
    189e:	e035      	b.n	190c <I2C1_IRQHandler+0x2b4>
	case 0x40: /* Master Receive, SLA_R has been sent */
		LPC_I2C1->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    18a0:	4b1d      	ldr	r3, [pc, #116]	; (1918 <I2C1_IRQHandler+0x2c0>)
    18a2:	2204      	movs	r2, #4
    18a4:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    18a6:	4b1c      	ldr	r3, [pc, #112]	; (1918 <I2C1_IRQHandler+0x2c0>)
    18a8:	2208      	movs	r2, #8
    18aa:	619a      	str	r2, [r3, #24]
		break;
    18ac:	e02e      	b.n	190c <I2C1_IRQHandler+0x2b4>
	case 0x50: /* Data byte has been received, regardless following ACK or NACK */
	case 0x58:
		I2C1_MasterBuffer[3 + RdIndex_1] = LPC_I2C1->I2DAT;
    18ae:	4b21      	ldr	r3, [pc, #132]	; (1934 <I2C1_IRQHandler+0x2dc>)
    18b0:	681b      	ldr	r3, [r3, #0]
    18b2:	3303      	adds	r3, #3
    18b4:	4a18      	ldr	r2, [pc, #96]	; (1918 <I2C1_IRQHandler+0x2c0>)
    18b6:	6892      	ldr	r2, [r2, #8]
    18b8:	b2d1      	uxtb	r1, r2
    18ba:	4a18      	ldr	r2, [pc, #96]	; (191c <I2C1_IRQHandler+0x2c4>)
    18bc:	54d1      	strb	r1, [r2, r3]
		RdIndex_1++;
    18be:	4b1d      	ldr	r3, [pc, #116]	; (1934 <I2C1_IRQHandler+0x2dc>)
    18c0:	681b      	ldr	r3, [r3, #0]
    18c2:	3301      	adds	r3, #1
    18c4:	4a1b      	ldr	r2, [pc, #108]	; (1934 <I2C1_IRQHandler+0x2dc>)
    18c6:	6013      	str	r3, [r2, #0]
		if (RdIndex_1 != I2C1_ReadLength) {
    18c8:	4b1a      	ldr	r3, [pc, #104]	; (1934 <I2C1_IRQHandler+0x2dc>)
    18ca:	681a      	ldr	r2, [r3, #0]
    18cc:	4b18      	ldr	r3, [pc, #96]	; (1930 <I2C1_IRQHandler+0x2d8>)
    18ce:	681b      	ldr	r3, [r3, #0]
    18d0:	429a      	cmp	r2, r3
    18d2:	d003      	beq.n	18dc <I2C1_IRQHandler+0x284>
			I2C1_MasterState = DATA_ACK;
    18d4:	4b12      	ldr	r3, [pc, #72]	; (1920 <I2C1_IRQHandler+0x2c8>)
    18d6:	2204      	movs	r2, #4
    18d8:	601a      	str	r2, [r3, #0]
    18da:	e005      	b.n	18e8 <I2C1_IRQHandler+0x290>
		} else {
			RdIndex_1 = 0;
    18dc:	4b15      	ldr	r3, [pc, #84]	; (1934 <I2C1_IRQHandler+0x2dc>)
    18de:	2200      	movs	r2, #0
    18e0:	601a      	str	r2, [r3, #0]
			I2C1_MasterState = DATA_NACK;
    18e2:	4b0f      	ldr	r3, [pc, #60]	; (1920 <I2C1_IRQHandler+0x2c8>)
    18e4:	2205      	movs	r2, #5
    18e6:	601a      	str	r2, [r3, #0]
		}
		LPC_I2C1->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    18e8:	4b0b      	ldr	r3, [pc, #44]	; (1918 <I2C1_IRQHandler+0x2c0>)
    18ea:	2204      	movs	r2, #4
    18ec:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    18ee:	4b0a      	ldr	r3, [pc, #40]	; (1918 <I2C1_IRQHandler+0x2c0>)
    18f0:	2208      	movs	r2, #8
    18f2:	619a      	str	r2, [r3, #24]
		break;
    18f4:	e00a      	b.n	190c <I2C1_IRQHandler+0x2b4>
	case 0x20: /* regardless, it's a NACK */
	case 0x48:
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    18f6:	4b08      	ldr	r3, [pc, #32]	; (1918 <I2C1_IRQHandler+0x2c0>)
    18f8:	2208      	movs	r2, #8
    18fa:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = DATA_NACK;
    18fc:	4b08      	ldr	r3, [pc, #32]	; (1920 <I2C1_IRQHandler+0x2c8>)
    18fe:	2205      	movs	r2, #5
    1900:	601a      	str	r2, [r3, #0]
		break;
    1902:	e003      	b.n	190c <I2C1_IRQHandler+0x2b4>
	case 0x38: /* Arbitration lost, in this example, we don't
	 deal with multiple master situation */
	default:
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    1904:	4b04      	ldr	r3, [pc, #16]	; (1918 <I2C1_IRQHandler+0x2c0>)
    1906:	2208      	movs	r2, #8
    1908:	619a      	str	r2, [r3, #24]
		break;
    190a:	bf00      	nop
	}
}
    190c:	370c      	adds	r7, #12
    190e:	46bd      	mov	sp, r7
    1910:	f85d 7b04 	ldr.w	r7, [sp], #4
    1914:	4770      	bx	lr
    1916:	bf00      	nop
    1918:	4005c000 	.word	0x4005c000
    191c:	10001024 	.word	0x10001024
    1920:	10000ffc 	.word	0x10000ffc
    1924:	10000ff8 	.word	0x10000ff8
    1928:	10001068 	.word	0x10001068
    192c:	10000fb8 	.word	0x10000fb8
    1930:	10000fcc 	.word	0x10000fcc
    1934:	10000fbc 	.word	0x10000fbc

00001938 <I2CStart>:
 **
 ** parameters:			None
 ** Returned value:		true or false, return false if timed out
 **
 *****************************************************************************/
uint32_t I2CStart(uint8_t port) {
    1938:	b480      	push	{r7}
    193a:	b085      	sub	sp, #20
    193c:	af00      	add	r7, sp, #0
    193e:	4603      	mov	r3, r0
    1940:	71fb      	strb	r3, [r7, #7]
	uint32_t timeout = 0;
    1942:	2300      	movs	r3, #0
    1944:	60fb      	str	r3, [r7, #12]
	uint32_t retVal = 0;
    1946:	2300      	movs	r3, #0
    1948:	60bb      	str	r3, [r7, #8]
	if (port == 0){
    194a:	79fb      	ldrb	r3, [r7, #7]
    194c:	2b00      	cmp	r3, #0
    194e:	d116      	bne.n	197e <I2CStart+0x46>
			/*--- Issue a start condition ---*/
			LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Start flag */
    1950:	4b1b      	ldr	r3, [pc, #108]	; (19c0 <I2CStart+0x88>)
    1952:	2220      	movs	r2, #32
    1954:	601a      	str	r2, [r3, #0]
			/*--- Wait until START transmitted ---*/
			while (1) {
				if (I2C0_MasterState == I2C_STARTED) {
    1956:	4b1b      	ldr	r3, [pc, #108]	; (19c4 <I2CStart+0x8c>)
    1958:	681b      	ldr	r3, [r3, #0]
    195a:	2b01      	cmp	r3, #1
    195c:	d102      	bne.n	1964 <I2CStart+0x2c>
					retVal = 1;
    195e:	2301      	movs	r3, #1
    1960:	60bb      	str	r3, [r7, #8]
					break;
    1962:	e00a      	b.n	197a <I2CStart+0x42>
				}
				if (timeout >= MAX_TIMEOUT) {
    1964:	68fb      	ldr	r3, [r7, #12]
    1966:	4a18      	ldr	r2, [pc, #96]	; (19c8 <I2CStart+0x90>)
    1968:	4293      	cmp	r3, r2
    196a:	d902      	bls.n	1972 <I2CStart+0x3a>
					retVal = 0;
    196c:	2300      	movs	r3, #0
    196e:	60bb      	str	r3, [r7, #8]
					break;
    1970:	e003      	b.n	197a <I2CStart+0x42>
				}
				timeout++;
    1972:	68fb      	ldr	r3, [r7, #12]
    1974:	3301      	adds	r3, #1
    1976:	60fb      	str	r3, [r7, #12]
			}
    1978:	e7ed      	b.n	1956 <I2CStart+0x1e>
			return (retVal);
    197a:	68bb      	ldr	r3, [r7, #8]
    197c:	e01a      	b.n	19b4 <I2CStart+0x7c>
		}
	else if (port == 1){
    197e:	79fb      	ldrb	r3, [r7, #7]
    1980:	2b01      	cmp	r3, #1
    1982:	d116      	bne.n	19b2 <I2CStart+0x7a>
		/*--- Issue a start condition ---*/
		LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Start flag */
    1984:	4b11      	ldr	r3, [pc, #68]	; (19cc <I2CStart+0x94>)
    1986:	2220      	movs	r2, #32
    1988:	601a      	str	r2, [r3, #0]
		/*--- Wait until START transmitted ---*/
		while (1) {
			if (I2C1_MasterState == I2C_STARTED) {
    198a:	4b11      	ldr	r3, [pc, #68]	; (19d0 <I2CStart+0x98>)
    198c:	681b      	ldr	r3, [r3, #0]
    198e:	2b01      	cmp	r3, #1
    1990:	d102      	bne.n	1998 <I2CStart+0x60>
				retVal = 1;
    1992:	2301      	movs	r3, #1
    1994:	60bb      	str	r3, [r7, #8]
				break;
    1996:	e00a      	b.n	19ae <I2CStart+0x76>
			}
			if (timeout >= MAX_TIMEOUT) {
    1998:	68fb      	ldr	r3, [r7, #12]
    199a:	4a0b      	ldr	r2, [pc, #44]	; (19c8 <I2CStart+0x90>)
    199c:	4293      	cmp	r3, r2
    199e:	d902      	bls.n	19a6 <I2CStart+0x6e>
				retVal = 0;
    19a0:	2300      	movs	r3, #0
    19a2:	60bb      	str	r3, [r7, #8]
				break;
    19a4:	e003      	b.n	19ae <I2CStart+0x76>
			}
			timeout++;
    19a6:	68fb      	ldr	r3, [r7, #12]
    19a8:	3301      	adds	r3, #1
    19aa:	60fb      	str	r3, [r7, #12]
		}
    19ac:	e7ed      	b.n	198a <I2CStart+0x52>
		return (retVal);
    19ae:	68bb      	ldr	r3, [r7, #8]
    19b0:	e000      	b.n	19b4 <I2CStart+0x7c>
	}
	return 0;
    19b2:	2300      	movs	r3, #0
}
    19b4:	4618      	mov	r0, r3
    19b6:	3714      	adds	r7, #20
    19b8:	46bd      	mov	sp, r7
    19ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    19be:	4770      	bx	lr
    19c0:	4001c000 	.word	0x4001c000
    19c4:	1000002c 	.word	0x1000002c
    19c8:	00fffffe 	.word	0x00fffffe
    19cc:	4005c000 	.word	0x4005c000
    19d0:	10000ffc 	.word	0x10000ffc

000019d4 <I2CStop>:
 **
 ** parameters:			None
 ** Returned value:		true or never return
 **
 *****************************************************************************/
uint32_t I2CStop(uint8_t port) {
    19d4:	b480      	push	{r7}
    19d6:	b083      	sub	sp, #12
    19d8:	af00      	add	r7, sp, #0
    19da:	4603      	mov	r3, r0
    19dc:	71fb      	strb	r3, [r7, #7]
	if (port == 0){
    19de:	79fb      	ldrb	r3, [r7, #7]
    19e0:	2b00      	cmp	r3, #0
    19e2:	d10e      	bne.n	1a02 <I2CStop+0x2e>
		LPC_I2C0->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    19e4:	4b13      	ldr	r3, [pc, #76]	; (1a34 <I2CStop+0x60>)
    19e6:	2210      	movs	r2, #16
    19e8:	601a      	str	r2, [r3, #0]
		LPC_I2C0->I2CONCLR = I2CONCLR_SIC; /* Clear SI flag */
    19ea:	4b12      	ldr	r3, [pc, #72]	; (1a34 <I2CStop+0x60>)
    19ec:	2208      	movs	r2, #8
    19ee:	619a      	str	r2, [r3, #24]
		/*--- Wait for STOP detected ---*/
		while (LPC_I2C0->I2CONSET & I2CONSET_STO);
    19f0:	bf00      	nop
    19f2:	4b10      	ldr	r3, [pc, #64]	; (1a34 <I2CStop+0x60>)
    19f4:	681b      	ldr	r3, [r3, #0]
    19f6:	f003 0310 	and.w	r3, r3, #16
    19fa:	2b00      	cmp	r3, #0
    19fc:	d1f9      	bne.n	19f2 <I2CStop+0x1e>
		return 1;
    19fe:	2301      	movs	r3, #1
    1a00:	e012      	b.n	1a28 <I2CStop+0x54>
	}else if(port == 1){
    1a02:	79fb      	ldrb	r3, [r7, #7]
    1a04:	2b01      	cmp	r3, #1
    1a06:	d10e      	bne.n	1a26 <I2CStop+0x52>
		LPC_I2C1->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    1a08:	4b0b      	ldr	r3, [pc, #44]	; (1a38 <I2CStop+0x64>)
    1a0a:	2210      	movs	r2, #16
    1a0c:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC; /* Clear SI flag */
    1a0e:	4b0a      	ldr	r3, [pc, #40]	; (1a38 <I2CStop+0x64>)
    1a10:	2208      	movs	r2, #8
    1a12:	619a      	str	r2, [r3, #24]
		/*--- Wait for STOP detected ---*/
		while (LPC_I2C1->I2CONSET & I2CONSET_STO);
    1a14:	bf00      	nop
    1a16:	4b08      	ldr	r3, [pc, #32]	; (1a38 <I2CStop+0x64>)
    1a18:	681b      	ldr	r3, [r3, #0]
    1a1a:	f003 0310 	and.w	r3, r3, #16
    1a1e:	2b00      	cmp	r3, #0
    1a20:	d1f9      	bne.n	1a16 <I2CStop+0x42>
		return 1;
    1a22:	2301      	movs	r3, #1
    1a24:	e000      	b.n	1a28 <I2CStop+0x54>
	}
	return 0;
    1a26:	2300      	movs	r3, #0
}
    1a28:	4618      	mov	r0, r3
    1a2a:	370c      	adds	r7, #12
    1a2c:	46bd      	mov	sp, r7
    1a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a32:	4770      	bx	lr
    1a34:	4001c000 	.word	0x4001c000
    1a38:	4005c000 	.word	0x4005c000

00001a3c <I2CInit>:
 ** parameters:			I2c mode is either MASTER or SLAVE
 ** Returned value:		true or false, return false if the I2C
 **				interrupt handler was not installed correctly
 **
 *****************************************************************************/
uint32_t I2CInit(uint8_t port,uint32_t I2cMode) {
    1a3c:	b580      	push	{r7, lr}
    1a3e:	b082      	sub	sp, #8
    1a40:	af00      	add	r7, sp, #0
    1a42:	4603      	mov	r3, r0
    1a44:	6039      	str	r1, [r7, #0]
    1a46:	71fb      	strb	r3, [r7, #7]
	if (port == 0){
    1a48:	79fb      	ldrb	r3, [r7, #7]
    1a4a:	2b00      	cmp	r3, #0
    1a4c:	d12a      	bne.n	1aa4 <I2CInit+0x68>
		LPC_SC->PCONP |= (1 << 7);
    1a4e:	4a34      	ldr	r2, [pc, #208]	; (1b20 <I2CInit+0xe4>)
    1a50:	4b33      	ldr	r3, [pc, #204]	; (1b20 <I2CInit+0xe4>)
    1a52:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1a5a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	    //LPC_PINCON->PINSEL1 &= ~0x03C00000;
	    //LPC_PINCON->PINSEL1 |=  0x01400000;
		/* set PIO0.27 and PIO0.28 to I2C0 SDA and SCL */
		/* function to 01 on both SDA and SCL. */
		LPC_PINCON->PINSEL1 &= ~((0x03<<22)|(0x03<<24));
    1a5e:	4a31      	ldr	r2, [pc, #196]	; (1b24 <I2CInit+0xe8>)
    1a60:	4b30      	ldr	r3, [pc, #192]	; (1b24 <I2CInit+0xe8>)
    1a62:	685b      	ldr	r3, [r3, #4]
    1a64:	f023 7370 	bic.w	r3, r3, #62914560	; 0x3c00000
    1a68:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINSEL1 |= ((0x01<<22)|(0x01<<24));
    1a6a:	4a2e      	ldr	r2, [pc, #184]	; (1b24 <I2CInit+0xe8>)
    1a6c:	4b2d      	ldr	r3, [pc, #180]	; (1b24 <I2CInit+0xe8>)
    1a6e:	685b      	ldr	r3, [r3, #4]
    1a70:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
    1a74:	6053      	str	r3, [r2, #4]
	    //LPC_SC->PCLKSEL0 &= ~(3 << 14); // clear bits
	    //LPC_SC->PCLKSEL0 |=  (3 << 14); // set to "01" (full speed)
		//PINMODE is not required for P0.27, P0.28 these are dedicated open drain I2C pins.
		/*--- Clear flags ---*/
		LPC_I2C0->I2CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC
    1a76:	4b2c      	ldr	r3, [pc, #176]	; (1b28 <I2CInit+0xec>)
    1a78:	226c      	movs	r2, #108	; 0x6c
    1a7a:	619a      	str	r2, [r3, #24]
				| I2CONCLR_I2ENC;
		/*--- Reset registers ---*/
		LPC_PINCON->I2CPADCFG &= ~((0x1<<0)|(0x1<<2));
    1a7c:	4a29      	ldr	r2, [pc, #164]	; (1b24 <I2CInit+0xe8>)
    1a7e:	4b29      	ldr	r3, [pc, #164]	; (1b24 <I2CInit+0xe8>)
    1a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    1a82:	f023 0305 	bic.w	r3, r3, #5
    1a86:	67d3      	str	r3, [r2, #124]	; 0x7c
		LPC_I2C0->I2SCLL   = I2SCLL_SCLL;
    1a88:	4b27      	ldr	r3, [pc, #156]	; (1b28 <I2CInit+0xec>)
    1a8a:	2280      	movs	r2, #128	; 0x80
    1a8c:	615a      	str	r2, [r3, #20]
		LPC_I2C0->I2SCLH   = I2SCLH_SCLH;
    1a8e:	4b26      	ldr	r3, [pc, #152]	; (1b28 <I2CInit+0xec>)
    1a90:	2280      	movs	r2, #128	; 0x80
    1a92:	611a      	str	r2, [r3, #16]
		/* Install interrupt handler */
		NVIC_EnableIRQ(I2C0_IRQn);
    1a94:	200a      	movs	r0, #10
    1a96:	f7ff fc25 	bl	12e4 <NVIC_EnableIRQ>
		LPC_I2C0->I2CONSET = I2CONSET_I2EN;
    1a9a:	4b23      	ldr	r3, [pc, #140]	; (1b28 <I2CInit+0xec>)
    1a9c:	2240      	movs	r2, #64	; 0x40
    1a9e:	601a      	str	r2, [r3, #0]
		return (1);
    1aa0:	2301      	movs	r3, #1
    1aa2:	e039      	b.n	1b18 <I2CInit+0xdc>
	}
	else if (port == 1){
    1aa4:	79fb      	ldrb	r3, [r7, #7]
    1aa6:	2b01      	cmp	r3, #1
    1aa8:	d136      	bne.n	1b18 <I2CInit+0xdc>
		LPC_SC->PCONP |= (1 << 19);
    1aaa:	4a1d      	ldr	r2, [pc, #116]	; (1b20 <I2CInit+0xe4>)
    1aac:	4b1c      	ldr	r3, [pc, #112]	; (1b20 <I2CInit+0xe4>)
    1aae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1ab2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1ab6:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		/* set PIO0.19 and PIO0.20 to I2C1 SDA and SCL */
		/* function to 11 on both SDA and SCL. */
		LPC_PINCON->PINSEL1 &= ~((0x3 << 6) | (0x3 << 8));
    1aba:	4a1a      	ldr	r2, [pc, #104]	; (1b24 <I2CInit+0xe8>)
    1abc:	4b19      	ldr	r3, [pc, #100]	; (1b24 <I2CInit+0xe8>)
    1abe:	685b      	ldr	r3, [r3, #4]
    1ac0:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
    1ac4:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINSEL1 |= ((0x3 << 6) | (0x3 << 8));
    1ac6:	4a17      	ldr	r2, [pc, #92]	; (1b24 <I2CInit+0xe8>)
    1ac8:	4b16      	ldr	r3, [pc, #88]	; (1b24 <I2CInit+0xe8>)
    1aca:	685b      	ldr	r3, [r3, #4]
    1acc:	f443 7370 	orr.w	r3, r3, #960	; 0x3c0
    1ad0:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINMODE1 &= ~((0x3 << 6) | (0x3 << 8));
    1ad2:	4a14      	ldr	r2, [pc, #80]	; (1b24 <I2CInit+0xe8>)
    1ad4:	4b13      	ldr	r3, [pc, #76]	; (1b24 <I2CInit+0xe8>)
    1ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1ad8:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
    1adc:	6453      	str	r3, [r2, #68]	; 0x44
		LPC_PINCON->PINMODE1 |= ((0x2 << 6) | (0x2 << 8)); /* No pull-up no pull-down */
    1ade:	4a11      	ldr	r2, [pc, #68]	; (1b24 <I2CInit+0xe8>)
    1ae0:	4b10      	ldr	r3, [pc, #64]	; (1b24 <I2CInit+0xe8>)
    1ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1ae4:	f443 7320 	orr.w	r3, r3, #640	; 0x280
    1ae8:	6453      	str	r3, [r2, #68]	; 0x44
		LPC_PINCON->PINMODE_OD0 |= ((0x1 << 19) | (0x1 << 20));
    1aea:	4a0e      	ldr	r2, [pc, #56]	; (1b24 <I2CInit+0xe8>)
    1aec:	4b0d      	ldr	r3, [pc, #52]	; (1b24 <I2CInit+0xe8>)
    1aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    1af0:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
    1af4:	6693      	str	r3, [r2, #104]	; 0x68

		/*--- Clear flags ---*/
		LPC_I2C1->I2CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC
    1af6:	4b0d      	ldr	r3, [pc, #52]	; (1b2c <I2CInit+0xf0>)
    1af8:	226c      	movs	r2, #108	; 0x6c
    1afa:	619a      	str	r2, [r3, #24]
				| I2CONCLR_I2ENC;

		/*--- Reset registers ---*/
		LPC_I2C1->I2SCLL = I2SCLL_SCLL;
    1afc:	4b0b      	ldr	r3, [pc, #44]	; (1b2c <I2CInit+0xf0>)
    1afe:	2280      	movs	r2, #128	; 0x80
    1b00:	615a      	str	r2, [r3, #20]
		LPC_I2C1->I2SCLH = I2SCLH_SCLH;
    1b02:	4b0a      	ldr	r3, [pc, #40]	; (1b2c <I2CInit+0xf0>)
    1b04:	2280      	movs	r2, #128	; 0x80
    1b06:	611a      	str	r2, [r3, #16]

		/* Install interrupt handler */
		NVIC_EnableIRQ(I2C1_IRQn);
    1b08:	200b      	movs	r0, #11
    1b0a:	f7ff fbeb 	bl	12e4 <NVIC_EnableIRQ>

		LPC_I2C1->I2CONSET = I2CONSET_I2EN;
    1b0e:	4b07      	ldr	r3, [pc, #28]	; (1b2c <I2CInit+0xf0>)
    1b10:	2240      	movs	r2, #64	; 0x40
    1b12:	601a      	str	r2, [r3, #0]
		return (1);
    1b14:	2301      	movs	r3, #1
    1b16:	e7ff      	b.n	1b18 <I2CInit+0xdc>
	}
}
    1b18:	4618      	mov	r0, r3
    1b1a:	3708      	adds	r7, #8
    1b1c:	46bd      	mov	sp, r7
    1b1e:	bd80      	pop	{r7, pc}
    1b20:	400fc000 	.word	0x400fc000
    1b24:	4002c000 	.word	0x4002c000
    1b28:	4001c000 	.word	0x4001c000
    1b2c:	4005c000 	.word	0x4005c000

00001b30 <I2CEngine>:
 ** Returned value:		true or false, return false only if the
 **				start condition can never be generated and
 **				timed out.
 **
 *****************************************************************************/
uint32_t I2CEngine(uint8_t port) {
    1b30:	b580      	push	{r7, lr}
    1b32:	b084      	sub	sp, #16
    1b34:	af00      	add	r7, sp, #0
    1b36:	4603      	mov	r3, r0
    1b38:	71fb      	strb	r3, [r7, #7]
	int timeout = 0;
    1b3a:	2300      	movs	r3, #0
    1b3c:	60fb      	str	r3, [r7, #12]
	if (port == 0){
    1b3e:	79fb      	ldrb	r3, [r7, #7]
    1b40:	2b00      	cmp	r3, #0
    1b42:	d12a      	bne.n	1b9a <I2CEngine+0x6a>
			I2C0_MasterState = I2C_IDLE;
    1b44:	4b2a      	ldr	r3, [pc, #168]	; (1bf0 <I2CEngine+0xc0>)
    1b46:	2200      	movs	r2, #0
    1b48:	601a      	str	r2, [r3, #0]
			RdIndex_0 = 0;
    1b4a:	4b2a      	ldr	r3, [pc, #168]	; (1bf4 <I2CEngine+0xc4>)
    1b4c:	2200      	movs	r2, #0
    1b4e:	601a      	str	r2, [r3, #0]
			WrIndex_0 = 0;
    1b50:	4b29      	ldr	r3, [pc, #164]	; (1bf8 <I2CEngine+0xc8>)
    1b52:	2200      	movs	r2, #0
    1b54:	601a      	str	r2, [r3, #0]
			if (I2CStart(port) != 1) {
    1b56:	79fb      	ldrb	r3, [r7, #7]
    1b58:	4618      	mov	r0, r3
    1b5a:	f7ff feed 	bl	1938 <I2CStart>
    1b5e:	4603      	mov	r3, r0
    1b60:	2b01      	cmp	r3, #1
    1b62:	d005      	beq.n	1b70 <I2CEngine+0x40>
				I2CStop(port);
    1b64:	79fb      	ldrb	r3, [r7, #7]
    1b66:	4618      	mov	r0, r3
    1b68:	f7ff ff34 	bl	19d4 <I2CStop>
				return (0);
    1b6c:	2300      	movs	r3, #0
    1b6e:	e03a      	b.n	1be6 <I2CEngine+0xb6>
			}

			while (1) {
				if (I2C0_MasterState == DATA_NACK) {
    1b70:	4b1f      	ldr	r3, [pc, #124]	; (1bf0 <I2CEngine+0xc0>)
    1b72:	681b      	ldr	r3, [r3, #0]
    1b74:	2b05      	cmp	r3, #5
    1b76:	d104      	bne.n	1b82 <I2CEngine+0x52>
					I2CStop(port);
    1b78:	79fb      	ldrb	r3, [r7, #7]
    1b7a:	4618      	mov	r0, r3
    1b7c:	f7ff ff2a 	bl	19d4 <I2CStop>
					break;
    1b80:	e009      	b.n	1b96 <I2CEngine+0x66>
				}
				if (timeout >= 0xFFFF) {
    1b82:	68fb      	ldr	r3, [r7, #12]
    1b84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    1b88:	4293      	cmp	r3, r2
    1b8a:	dd00      	ble.n	1b8e <I2CEngine+0x5e>
					break;
    1b8c:	e003      	b.n	1b96 <I2CEngine+0x66>
				}
				timeout++;
    1b8e:	68fb      	ldr	r3, [r7, #12]
    1b90:	3301      	adds	r3, #1
    1b92:	60fb      	str	r3, [r7, #12]
			}
    1b94:	e7ec      	b.n	1b70 <I2CEngine+0x40>
			return (1);
    1b96:	2301      	movs	r3, #1
    1b98:	e025      	b.n	1be6 <I2CEngine+0xb6>
		}
	else if (port == 1){
    1b9a:	79fb      	ldrb	r3, [r7, #7]
    1b9c:	2b01      	cmp	r3, #1
    1b9e:	d121      	bne.n	1be4 <I2CEngine+0xb4>
		I2C1_MasterState = I2C_IDLE;
    1ba0:	4b16      	ldr	r3, [pc, #88]	; (1bfc <I2CEngine+0xcc>)
    1ba2:	2200      	movs	r2, #0
    1ba4:	601a      	str	r2, [r3, #0]
		RdIndex_1 = 0;
    1ba6:	4b16      	ldr	r3, [pc, #88]	; (1c00 <I2CEngine+0xd0>)
    1ba8:	2200      	movs	r2, #0
    1baa:	601a      	str	r2, [r3, #0]
		WrIndex_1 = 0;
    1bac:	4b15      	ldr	r3, [pc, #84]	; (1c04 <I2CEngine+0xd4>)
    1bae:	2200      	movs	r2, #0
    1bb0:	601a      	str	r2, [r3, #0]
		if (I2CStart(port) != 1) {
    1bb2:	79fb      	ldrb	r3, [r7, #7]
    1bb4:	4618      	mov	r0, r3
    1bb6:	f7ff febf 	bl	1938 <I2CStart>
    1bba:	4603      	mov	r3, r0
    1bbc:	2b01      	cmp	r3, #1
    1bbe:	d005      	beq.n	1bcc <I2CEngine+0x9c>
			I2CStop(port);
    1bc0:	79fb      	ldrb	r3, [r7, #7]
    1bc2:	4618      	mov	r0, r3
    1bc4:	f7ff ff06 	bl	19d4 <I2CStop>
			return (0);
    1bc8:	2300      	movs	r3, #0
    1bca:	e00c      	b.n	1be6 <I2CEngine+0xb6>
		}

		while (1) {
			if (I2C1_MasterState == DATA_NACK) {
    1bcc:	4b0b      	ldr	r3, [pc, #44]	; (1bfc <I2CEngine+0xcc>)
    1bce:	681b      	ldr	r3, [r3, #0]
    1bd0:	2b05      	cmp	r3, #5
    1bd2:	d106      	bne.n	1be2 <I2CEngine+0xb2>
				I2CStop(port);
    1bd4:	79fb      	ldrb	r3, [r7, #7]
    1bd6:	4618      	mov	r0, r3
    1bd8:	f7ff fefc 	bl	19d4 <I2CStop>
				break;
    1bdc:	bf00      	nop
			}
		}
		return (1);
    1bde:	2301      	movs	r3, #1
    1be0:	e001      	b.n	1be6 <I2CEngine+0xb6>
		while (1) {
			if (I2C1_MasterState == DATA_NACK) {
				I2CStop(port);
				break;
			}
		}
    1be2:	e7f3      	b.n	1bcc <I2CEngine+0x9c>
		return (1);
	}
	return 0;
    1be4:	2300      	movs	r3, #0
}
    1be6:	4618      	mov	r0, r3
    1be8:	3710      	adds	r7, #16
    1bea:	46bd      	mov	sp, r7
    1bec:	bd80      	pop	{r7, pc}
    1bee:	bf00      	nop
    1bf0:	1000002c 	.word	0x1000002c
    1bf4:	10000030 	.word	0x10000030
    1bf8:	10000034 	.word	0x10000034
    1bfc:	10000ffc 	.word	0x10000ffc
    1c00:	10000fbc 	.word	0x10000fbc
    1c04:	10001068 	.word	0x10001068

00001c08 <i2c_read>:
			return 0;
	}
	return 0;
}

uint8_t i2c_read(uint8_t port, uint8_t register_addr) {
    1c08:	b580      	push	{r7, lr}
    1c0a:	b084      	sub	sp, #16
    1c0c:	af00      	add	r7, sp, #0
    1c0e:	4603      	mov	r3, r0
    1c10:	460a      	mov	r2, r1
    1c12:	71fb      	strb	r3, [r7, #7]
    1c14:	4613      	mov	r3, r2
    1c16:	71bb      	strb	r3, [r7, #6]
	int i;
	/* clear buffer */
	if (port == 0){
    1c18:	79fb      	ldrb	r3, [r7, #7]
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	d128      	bne.n	1c70 <i2c_read+0x68>
		for (i = 0; i < BUFSIZE; i++) {
    1c1e:	2300      	movs	r3, #0
    1c20:	60fb      	str	r3, [r7, #12]
    1c22:	e007      	b.n	1c34 <i2c_read+0x2c>
			I2C0_MasterBuffer[i] = 0;
    1c24:	4a2a      	ldr	r2, [pc, #168]	; (1cd0 <i2c_read+0xc8>)
    1c26:	68fb      	ldr	r3, [r7, #12]
    1c28:	4413      	add	r3, r2
    1c2a:	2200      	movs	r2, #0
    1c2c:	701a      	strb	r2, [r3, #0]

uint8_t i2c_read(uint8_t port, uint8_t register_addr) {
	int i;
	/* clear buffer */
	if (port == 0){
		for (i = 0; i < BUFSIZE; i++) {
    1c2e:	68fb      	ldr	r3, [r7, #12]
    1c30:	3301      	adds	r3, #1
    1c32:	60fb      	str	r3, [r7, #12]
    1c34:	68fb      	ldr	r3, [r7, #12]
    1c36:	2b1f      	cmp	r3, #31
    1c38:	ddf4      	ble.n	1c24 <i2c_read+0x1c>
			I2C0_MasterBuffer[i] = 0;
		}
		I2C0_WriteLength = 2;
    1c3a:	4b26      	ldr	r3, [pc, #152]	; (1cd4 <i2c_read+0xcc>)
    1c3c:	2202      	movs	r2, #2
    1c3e:	601a      	str	r2, [r3, #0]
		I2C0_ReadLength = 1;
    1c40:	4b25      	ldr	r3, [pc, #148]	; (1cd8 <i2c_read+0xd0>)
    1c42:	2201      	movs	r2, #1
    1c44:	601a      	str	r2, [r3, #0]
		I2C0_MasterBuffer[0] = 0x3A;//ADR_BYTE_MMA7455;
    1c46:	4b22      	ldr	r3, [pc, #136]	; (1cd0 <i2c_read+0xc8>)
    1c48:	223a      	movs	r2, #58	; 0x3a
    1c4a:	701a      	strb	r2, [r3, #0]
		I2C0_MasterBuffer[1] = register_addr;
    1c4c:	4a20      	ldr	r2, [pc, #128]	; (1cd0 <i2c_read+0xc8>)
    1c4e:	79bb      	ldrb	r3, [r7, #6]
    1c50:	7053      	strb	r3, [r2, #1]
		I2C0_MasterBuffer[2] = 0x3B;//ADR_BYTE_MMA7455 | RD_BIT;
    1c52:	4b1f      	ldr	r3, [pc, #124]	; (1cd0 <i2c_read+0xc8>)
    1c54:	223b      	movs	r2, #59	; 0x3b
    1c56:	709a      	strb	r2, [r3, #2]
		I2CEngine(port);
    1c58:	79fb      	ldrb	r3, [r7, #7]
    1c5a:	4618      	mov	r0, r3
    1c5c:	f7ff ff68 	bl	1b30 <I2CEngine>
		I2CStop(port);
    1c60:	79fb      	ldrb	r3, [r7, #7]
    1c62:	4618      	mov	r0, r3
    1c64:	f7ff feb6 	bl	19d4 <I2CStop>
		return (I2C0_MasterBuffer[3]);
    1c68:	4b19      	ldr	r3, [pc, #100]	; (1cd0 <i2c_read+0xc8>)
    1c6a:	78db      	ldrb	r3, [r3, #3]
    1c6c:	b2db      	uxtb	r3, r3
    1c6e:	e02b      	b.n	1cc8 <i2c_read+0xc0>
	}
	else if (port == 1){
    1c70:	79fb      	ldrb	r3, [r7, #7]
    1c72:	2b01      	cmp	r3, #1
    1c74:	d128      	bne.n	1cc8 <i2c_read+0xc0>
		for (i = 0; i < BUFSIZE; i++) {
    1c76:	2300      	movs	r3, #0
    1c78:	60fb      	str	r3, [r7, #12]
    1c7a:	e007      	b.n	1c8c <i2c_read+0x84>
			I2C1_MasterBuffer[i] = 0;
    1c7c:	4a17      	ldr	r2, [pc, #92]	; (1cdc <i2c_read+0xd4>)
    1c7e:	68fb      	ldr	r3, [r7, #12]
    1c80:	4413      	add	r3, r2
    1c82:	2200      	movs	r2, #0
    1c84:	701a      	strb	r2, [r3, #0]
		I2CEngine(port);
		I2CStop(port);
		return (I2C0_MasterBuffer[3]);
	}
	else if (port == 1){
		for (i = 0; i < BUFSIZE; i++) {
    1c86:	68fb      	ldr	r3, [r7, #12]
    1c88:	3301      	adds	r3, #1
    1c8a:	60fb      	str	r3, [r7, #12]
    1c8c:	68fb      	ldr	r3, [r7, #12]
    1c8e:	2b1f      	cmp	r3, #31
    1c90:	ddf4      	ble.n	1c7c <i2c_read+0x74>
			I2C1_MasterBuffer[i] = 0;
		}
		I2C1_WriteLength = 2;
    1c92:	4b13      	ldr	r3, [pc, #76]	; (1ce0 <i2c_read+0xd8>)
    1c94:	2202      	movs	r2, #2
    1c96:	601a      	str	r2, [r3, #0]
		I2C1_ReadLength = 1;
    1c98:	4b12      	ldr	r3, [pc, #72]	; (1ce4 <i2c_read+0xdc>)
    1c9a:	2201      	movs	r2, #1
    1c9c:	601a      	str	r2, [r3, #0]
		I2C1_MasterBuffer[0] = ADR_BYTE_24AA02;
    1c9e:	4b0f      	ldr	r3, [pc, #60]	; (1cdc <i2c_read+0xd4>)
    1ca0:	22a0      	movs	r2, #160	; 0xa0
    1ca2:	701a      	strb	r2, [r3, #0]
		I2C1_MasterBuffer[1] = register_addr;
    1ca4:	4a0d      	ldr	r2, [pc, #52]	; (1cdc <i2c_read+0xd4>)
    1ca6:	79bb      	ldrb	r3, [r7, #6]
    1ca8:	7053      	strb	r3, [r2, #1]
		I2C1_MasterBuffer[2] = ADR_BYTE_24AA02 | RD_BIT;
    1caa:	4b0c      	ldr	r3, [pc, #48]	; (1cdc <i2c_read+0xd4>)
    1cac:	22a1      	movs	r2, #161	; 0xa1
    1cae:	709a      	strb	r2, [r3, #2]
		I2CEngine(port);
    1cb0:	79fb      	ldrb	r3, [r7, #7]
    1cb2:	4618      	mov	r0, r3
    1cb4:	f7ff ff3c 	bl	1b30 <I2CEngine>
		I2CStop(port);
    1cb8:	79fb      	ldrb	r3, [r7, #7]
    1cba:	4618      	mov	r0, r3
    1cbc:	f7ff fe8a 	bl	19d4 <I2CStop>
		return (I2C1_MasterBuffer[3]);
    1cc0:	4b06      	ldr	r3, [pc, #24]	; (1cdc <i2c_read+0xd4>)
    1cc2:	78db      	ldrb	r3, [r3, #3]
    1cc4:	b2db      	uxtb	r3, r3
    1cc6:	e7ff      	b.n	1cc8 <i2c_read+0xc0>
	}
}
    1cc8:	4618      	mov	r0, r3
    1cca:	3710      	adds	r7, #16
    1ccc:	46bd      	mov	sp, r7
    1cce:	bd80      	pop	{r7, pc}
    1cd0:	10001044 	.word	0x10001044
    1cd4:	10001020 	.word	0x10001020
    1cd8:	10000fc8 	.word	0x10000fc8
    1cdc:	10001024 	.word	0x10001024
    1ce0:	10000fb8 	.word	0x10000fb8
    1ce4:	10000fcc 	.word	0x10000fcc

00001ce8 <u32IAP_PrepareSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_PrepareSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
    1ce8:	b580      	push	{r7, lr}
    1cea:	b08e      	sub	sp, #56	; 0x38
    1cec:	af00      	add	r7, sp, #0
    1cee:	6078      	str	r0, [r7, #4]
    1cf0:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1cf2:	683a      	ldr	r2, [r7, #0]
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	429a      	cmp	r2, r3
    1cf8:	d202      	bcs.n	1d00 <u32IAP_PrepareSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1cfa:	230c      	movs	r3, #12
    1cfc:	637b      	str	r3, [r7, #52]	; 0x34
    1cfe:	e00f      	b.n	1d20 <u32IAP_PrepareSectors+0x38>
	}
	else
	{
		au32Command[0] = IAP_CMD_PREPARE_SECTORS;
    1d00:	2332      	movs	r3, #50	; 0x32
    1d02:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
    1d04:	687b      	ldr	r3, [r7, #4]
    1d06:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
    1d08:	683b      	ldr	r3, [r7, #0]
    1d0a:	617b      	str	r3, [r7, #20]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1d0c:	f107 010c 	add.w	r1, r7, #12
    1d10:	f107 0220 	add.w	r2, r7, #32
    1d14:	4b05      	ldr	r3, [pc, #20]	; (1d2c <u32IAP_PrepareSectors+0x44>)
    1d16:	4608      	mov	r0, r1
    1d18:	4611      	mov	r1, r2
    1d1a:	4798      	blx	r3

		u32Status = au32Result[0];
    1d1c:	6a3b      	ldr	r3, [r7, #32]
    1d1e:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
    1d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    1d22:	4618      	mov	r0, r3
    1d24:	3738      	adds	r7, #56	; 0x38
    1d26:	46bd      	mov	sp, r7
    1d28:	bd80      	pop	{r7, pc}
    1d2a:	bf00      	nop
    1d2c:	1fff1ff1 	.word	0x1fff1ff1

00001d30 <u32IAP_CopyRAMToFlash>:
*
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_CopyRAMToFlash(uint32_t u32DstAddr, uint32_t u32SrcAddr, uint32_t u32Len)
{
    1d30:	b580      	push	{r7, lr}
    1d32:	b08e      	sub	sp, #56	; 0x38
    1d34:	af00      	add	r7, sp, #0
    1d36:	60f8      	str	r0, [r7, #12]
    1d38:	60b9      	str	r1, [r7, #8]
    1d3a:	607a      	str	r2, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1d3c:	b672      	cpsid	i
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	__disable_irq();
	au32Command[0] = IAP_CMD_COPY_RAM_TO_FLASH;
    1d3e:	2333      	movs	r3, #51	; 0x33
    1d40:	613b      	str	r3, [r7, #16]
	au32Command[1] = u32DstAddr;
    1d42:	68fb      	ldr	r3, [r7, #12]
    1d44:	617b      	str	r3, [r7, #20]
	au32Command[2] = u32SrcAddr;
    1d46:	68bb      	ldr	r3, [r7, #8]
    1d48:	61bb      	str	r3, [r7, #24]
	au32Command[3] = u32Len;
    1d4a:	687b      	ldr	r3, [r7, #4]
    1d4c:	61fb      	str	r3, [r7, #28]
	au32Command[4] = SystemCoreClock / 1000UL;	/* Core clock frequency in kHz */
    1d4e:	4b0a      	ldr	r3, [pc, #40]	; (1d78 <u32IAP_CopyRAMToFlash+0x48>)
    1d50:	681b      	ldr	r3, [r3, #0]
    1d52:	4a0a      	ldr	r2, [pc, #40]	; (1d7c <u32IAP_CopyRAMToFlash+0x4c>)
    1d54:	fba2 2303 	umull	r2, r3, r2, r3
    1d58:	099b      	lsrs	r3, r3, #6
    1d5a:	623b      	str	r3, [r7, #32]

	IAP_EXECUTE_CMD(au32Command, au32Result);
    1d5c:	f107 0110 	add.w	r1, r7, #16
    1d60:	f107 0224 	add.w	r2, r7, #36	; 0x24
    1d64:	4b06      	ldr	r3, [pc, #24]	; (1d80 <u32IAP_CopyRAMToFlash+0x50>)
    1d66:	4608      	mov	r0, r1
    1d68:	4611      	mov	r1, r2
    1d6a:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1d6c:	b662      	cpsie	i

	__enable_irq();
	return ( au32Result[0] );
    1d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1d70:	4618      	mov	r0, r3
    1d72:	3738      	adds	r7, #56	; 0x38
    1d74:	46bd      	mov	sp, r7
    1d76:	bd80      	pop	{r7, pc}
    1d78:	10000024 	.word	0x10000024
    1d7c:	10624dd3 	.word	0x10624dd3
    1d80:	1fff1ff1 	.word	0x1fff1ff1

00001d84 <u32IAP_EraseSectors>:
*
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_EraseSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
    1d84:	b580      	push	{r7, lr}
    1d86:	b08e      	sub	sp, #56	; 0x38
    1d88:	af00      	add	r7, sp, #0
    1d8a:	6078      	str	r0, [r7, #4]
    1d8c:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1d8e:	683a      	ldr	r2, [r7, #0]
    1d90:	687b      	ldr	r3, [r7, #4]
    1d92:	429a      	cmp	r2, r3
    1d94:	d202      	bcs.n	1d9c <u32IAP_EraseSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1d96:	230c      	movs	r3, #12
    1d98:	637b      	str	r3, [r7, #52]	; 0x34
    1d9a:	e018      	b.n	1dce <u32IAP_EraseSectors+0x4a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1d9c:	b672      	cpsid	i
	}
	else
	{
		__disable_irq();
		au32Command[0] = IAP_CMD_ERASE_SECTORS;
    1d9e:	2334      	movs	r3, #52	; 0x34
    1da0:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
    1da2:	687b      	ldr	r3, [r7, #4]
    1da4:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
    1da6:	683b      	ldr	r3, [r7, #0]
    1da8:	617b      	str	r3, [r7, #20]
		au32Command[3] = SystemCoreClock / 1000UL;	/* Core clock frequency in kHz */
    1daa:	4b0b      	ldr	r3, [pc, #44]	; (1dd8 <u32IAP_EraseSectors+0x54>)
    1dac:	681b      	ldr	r3, [r3, #0]
    1dae:	4a0b      	ldr	r2, [pc, #44]	; (1ddc <u32IAP_EraseSectors+0x58>)
    1db0:	fba2 2303 	umull	r2, r3, r2, r3
    1db4:	099b      	lsrs	r3, r3, #6
    1db6:	61bb      	str	r3, [r7, #24]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1db8:	f107 010c 	add.w	r1, r7, #12
    1dbc:	f107 0220 	add.w	r2, r7, #32
    1dc0:	4b07      	ldr	r3, [pc, #28]	; (1de0 <u32IAP_EraseSectors+0x5c>)
    1dc2:	4608      	mov	r0, r1
    1dc4:	4611      	mov	r1, r2
    1dc6:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1dc8:	b662      	cpsie	i

		__enable_irq();
		u32Status = au32Result[0];
    1dca:	6a3b      	ldr	r3, [r7, #32]
    1dcc:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
    1dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    1dd0:	4618      	mov	r0, r3
    1dd2:	3738      	adds	r7, #56	; 0x38
    1dd4:	46bd      	mov	sp, r7
    1dd6:	bd80      	pop	{r7, pc}
    1dd8:	10000024 	.word	0x10000024
    1ddc:	10624dd3 	.word	0x10624dd3
    1de0:	1fff1ff1 	.word	0x1fff1ff1

00001de4 <u32IAP_BlankCheckSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_BlankCheckSectors(uint32_t u32StartSector, uint32_t u32EndSector, uint32_t *pu32Result)
{
    1de4:	b580      	push	{r7, lr}
    1de6:	b090      	sub	sp, #64	; 0x40
    1de8:	af00      	add	r7, sp, #0
    1dea:	60f8      	str	r0, [r7, #12]
    1dec:	60b9      	str	r1, [r7, #8]
    1dee:	607a      	str	r2, [r7, #4]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1df0:	68ba      	ldr	r2, [r7, #8]
    1df2:	68fb      	ldr	r3, [r7, #12]
    1df4:	429a      	cmp	r2, r3
    1df6:	d202      	bcs.n	1dfe <u32IAP_BlankCheckSectors+0x1a>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1df8:	230c      	movs	r3, #12
    1dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    1dfc:	e019      	b.n	1e32 <u32IAP_BlankCheckSectors+0x4e>
	}
	else
	{
		au32Command[0] = IAP_CMD_BLANK_CHECK_SECTORS;
    1dfe:	2335      	movs	r3, #53	; 0x35
    1e00:	617b      	str	r3, [r7, #20]
		au32Command[1] = u32StartSector;
    1e02:	68fb      	ldr	r3, [r7, #12]
    1e04:	61bb      	str	r3, [r7, #24]
		au32Command[2] = u32EndSector;
    1e06:	68bb      	ldr	r3, [r7, #8]
    1e08:	61fb      	str	r3, [r7, #28]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1e0a:	f107 0114 	add.w	r1, r7, #20
    1e0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
    1e12:	4b0a      	ldr	r3, [pc, #40]	; (1e3c <u32IAP_BlankCheckSectors+0x58>)
    1e14:	4608      	mov	r0, r1
    1e16:	4611      	mov	r1, r2
    1e18:	4798      	blx	r3

		if (au32Result[0] == IAP_STA_SECTOR_NOT_BLANK)
    1e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1e1c:	2b08      	cmp	r3, #8
    1e1e:	d106      	bne.n	1e2e <u32IAP_BlankCheckSectors+0x4a>
		{
			*pu32Result       = au32Result[0];
    1e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1e22:	687b      	ldr	r3, [r7, #4]
    1e24:	601a      	str	r2, [r3, #0]
			*(pu32Result + 1) = au32Result[1];
    1e26:	687b      	ldr	r3, [r7, #4]
    1e28:	3304      	adds	r3, #4
    1e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1e2c:	601a      	str	r2, [r3, #0]
		}
		u32Status = au32Result[0];
    1e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1e30:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	return ( u32Status );
    1e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1e34:	4618      	mov	r0, r3
    1e36:	3740      	adds	r7, #64	; 0x40
    1e38:	46bd      	mov	sp, r7
    1e3a:	bd80      	pop	{r7, pc}
    1e3c:	1fff1ff1 	.word	0x1fff1ff1

00001e40 <u32IAP_Compare>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_Compare(uint32_t u32DstAddr, uint32_t u32SrcAddr, uint32_t u32Len, uint32_t *pu32Offset)
{
    1e40:	b580      	push	{r7, lr}
    1e42:	b08e      	sub	sp, #56	; 0x38
    1e44:	af00      	add	r7, sp, #0
    1e46:	60f8      	str	r0, [r7, #12]
    1e48:	60b9      	str	r1, [r7, #8]
    1e4a:	607a      	str	r2, [r7, #4]
    1e4c:	603b      	str	r3, [r7, #0]
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	au32Command[0] = IAP_CMD_COMPARE;
    1e4e:	2338      	movs	r3, #56	; 0x38
    1e50:	613b      	str	r3, [r7, #16]
	au32Command[1] = u32DstAddr;
    1e52:	68fb      	ldr	r3, [r7, #12]
    1e54:	617b      	str	r3, [r7, #20]
	au32Command[2] = u32SrcAddr;
    1e56:	68bb      	ldr	r3, [r7, #8]
    1e58:	61bb      	str	r3, [r7, #24]
	au32Command[3] = u32Len;
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	61fb      	str	r3, [r7, #28]

	IAP_EXECUTE_CMD(au32Command, au32Result);
    1e5e:	f107 0110 	add.w	r1, r7, #16
    1e62:	f107 0224 	add.w	r2, r7, #36	; 0x24
    1e66:	4b09      	ldr	r3, [pc, #36]	; (1e8c <u32IAP_Compare+0x4c>)
    1e68:	4608      	mov	r0, r1
    1e6a:	4611      	mov	r1, r2
    1e6c:	4798      	blx	r3

	if (au32Result[0] == IAP_STA_COMPARE_ERROR)
    1e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e70:	2b0a      	cmp	r3, #10
    1e72:	d105      	bne.n	1e80 <u32IAP_Compare+0x40>
	{
		if (pu32Offset != 0)
    1e74:	683b      	ldr	r3, [r7, #0]
    1e76:	2b00      	cmp	r3, #0
    1e78:	d002      	beq.n	1e80 <u32IAP_Compare+0x40>
		{
			*pu32Offset = au32Result[1];
    1e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1e7c:	683b      	ldr	r3, [r7, #0]
    1e7e:	601a      	str	r2, [r3, #0]
		}
	}
	return ( au32Result[0] );
    1e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1e82:	4618      	mov	r0, r3
    1e84:	3738      	adds	r7, #56	; 0x38
    1e86:	46bd      	mov	sp, r7
    1e88:	bd80      	pop	{r7, pc}
    1e8a:	bf00      	nop
    1e8c:	1fff1ff1 	.word	0x1fff1ff1

00001e90 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1e90:	b480      	push	{r7}
    1e92:	b083      	sub	sp, #12
    1e94:	af00      	add	r7, sp, #0
    1e96:	4603      	mov	r3, r0
    1e98:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1e9a:	4908      	ldr	r1, [pc, #32]	; (1ebc <NVIC_EnableIRQ+0x2c>)
    1e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1ea0:	095b      	lsrs	r3, r3, #5
    1ea2:	79fa      	ldrb	r2, [r7, #7]
    1ea4:	f002 021f 	and.w	r2, r2, #31
    1ea8:	2001      	movs	r0, #1
    1eaa:	fa00 f202 	lsl.w	r2, r0, r2
    1eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1eb2:	370c      	adds	r7, #12
    1eb4:	46bd      	mov	sp, r7
    1eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1eba:	4770      	bx	lr
    1ebc:	e000e100 	.word	0xe000e100

00001ec0 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1ec0:	b480      	push	{r7}
    1ec2:	b083      	sub	sp, #12
    1ec4:	af00      	add	r7, sp, #0
    1ec6:	4603      	mov	r3, r0
    1ec8:	6039      	str	r1, [r7, #0]
    1eca:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    1ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1ed0:	2b00      	cmp	r3, #0
    1ed2:	da0b      	bge.n	1eec <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    1ed4:	490d      	ldr	r1, [pc, #52]	; (1f0c <NVIC_SetPriority+0x4c>)
    1ed6:	79fb      	ldrb	r3, [r7, #7]
    1ed8:	f003 030f 	and.w	r3, r3, #15
    1edc:	3b04      	subs	r3, #4
    1ede:	683a      	ldr	r2, [r7, #0]
    1ee0:	b2d2      	uxtb	r2, r2
    1ee2:	00d2      	lsls	r2, r2, #3
    1ee4:	b2d2      	uxtb	r2, r2
    1ee6:	440b      	add	r3, r1
    1ee8:	761a      	strb	r2, [r3, #24]
    1eea:	e009      	b.n	1f00 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    1eec:	4908      	ldr	r1, [pc, #32]	; (1f10 <NVIC_SetPriority+0x50>)
    1eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1ef2:	683a      	ldr	r2, [r7, #0]
    1ef4:	b2d2      	uxtb	r2, r2
    1ef6:	00d2      	lsls	r2, r2, #3
    1ef8:	b2d2      	uxtb	r2, r2
    1efa:	440b      	add	r3, r1
    1efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    1f00:	370c      	adds	r7, #12
    1f02:	46bd      	mov	sp, r7
    1f04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f08:	4770      	bx	lr
    1f0a:	bf00      	nop
    1f0c:	e000ed00 	.word	0xe000ed00
    1f10:	e000e100 	.word	0xe000e100

00001f14 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
    1f14:	b580      	push	{r7, lr}
    1f16:	b082      	sub	sp, #8
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
    1f1c:	687b      	ldr	r3, [r7, #4]
    1f1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    1f22:	d301      	bcc.n	1f28 <SysTick_Config+0x14>
    1f24:	2301      	movs	r3, #1
    1f26:	e011      	b.n	1f4c <SysTick_Config+0x38>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
    1f28:	4a0a      	ldr	r2, [pc, #40]	; (1f54 <SysTick_Config+0x40>)
    1f2a:	687b      	ldr	r3, [r7, #4]
    1f2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1f30:	3b01      	subs	r3, #1
    1f32:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
    1f34:	f04f 30ff 	mov.w	r0, #4294967295
    1f38:	211f      	movs	r1, #31
    1f3a:	f7ff ffc1 	bl	1ec0 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    1f3e:	4b05      	ldr	r3, [pc, #20]	; (1f54 <SysTick_Config+0x40>)
    1f40:	2200      	movs	r2, #0
    1f42:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
    1f44:	4b03      	ldr	r3, [pc, #12]	; (1f54 <SysTick_Config+0x40>)
    1f46:	2207      	movs	r2, #7
    1f48:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
    1f4a:	2300      	movs	r3, #0
}
    1f4c:	4618      	mov	r0, r3
    1f4e:	3708      	adds	r7, #8
    1f50:	46bd      	mov	sp, r7
    1f52:	bd80      	pop	{r7, pc}
    1f54:	e000e010 	.word	0xe000e010

00001f58 <ConfigurePins>:
int extPowerPinVal = 0;
char cell_buf[15];
short is_cell_only = 1;


void ConfigurePins() {
    1f58:	b580      	push	{r7, lr}
    1f5a:	b082      	sub	sp, #8
    1f5c:	af00      	add	r7, sp, #0
	//PWRKEY & EMERG_OFF
	LPC_PINCON->PINSEL4 &= ~(0xFFFF); // Reset P2[0..7] = GPIO
    1f5e:	4a34      	ldr	r2, [pc, #208]	; (2030 <ConfigurePins+0xd8>)
    1f60:	4b33      	ldr	r3, [pc, #204]	; (2030 <ConfigurePins+0xd8>)
    1f62:	691b      	ldr	r3, [r3, #16]
    1f64:	0c1b      	lsrs	r3, r3, #16
    1f66:	041b      	lsls	r3, r3, #16
    1f68:	6113      	str	r3, [r2, #16]
	LPC_GPIO2->FIODIR |= 0xFF; // P2[0..7] =
    1f6a:	4a32      	ldr	r2, [pc, #200]	; (2034 <ConfigurePins+0xdc>)
    1f6c:	4b31      	ldr	r3, [pc, #196]	; (2034 <ConfigurePins+0xdc>)
    1f6e:	681b      	ldr	r3, [r3, #0]
    1f70:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1f74:	6013      	str	r3, [r2, #0]
	LPC_PINCON->PINSEL9 &= ~(0xFFFF); // Reset P4[24..31] = GPIO
    1f76:	4a2e      	ldr	r2, [pc, #184]	; (2030 <ConfigurePins+0xd8>)
    1f78:	4b2d      	ldr	r3, [pc, #180]	; (2030 <ConfigurePins+0xd8>)
    1f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1f7c:	0c1b      	lsrs	r3, r3, #16
    1f7e:	041b      	lsls	r3, r3, #16
    1f80:	6253      	str	r3, [r2, #36]	; 0x24
	LPC_GPIO4->FIODIR = (1 << 28) | (1 << 29);
    1f82:	4b2d      	ldr	r3, [pc, #180]	; (2038 <ConfigurePins+0xe0>)
    1f84:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    1f88:	601a      	str	r2, [r3, #0]
	LPC_GPIO0->FIODIR &= (1 << 7); //P0[7] DIN 1 as input --> Default mode pull up enabled.
    1f8a:	4a2c      	ldr	r2, [pc, #176]	; (203c <ConfigurePins+0xe4>)
    1f8c:	4b2b      	ldr	r3, [pc, #172]	; (203c <ConfigurePins+0xe4>)
    1f8e:	681b      	ldr	r3, [r3, #0]
    1f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1f94:	6013      	str	r3, [r2, #0]
	LPC_GPIO0->FIODIR &= ~(1 << 29 | 1 << 30); //P0[30] as input
    1f96:	4a29      	ldr	r2, [pc, #164]	; (203c <ConfigurePins+0xe4>)
    1f98:	4b28      	ldr	r3, [pc, #160]	; (203c <ConfigurePins+0xe4>)
    1f9a:	681b      	ldr	r3, [r3, #0]
    1f9c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
    1fa0:	6013      	str	r3, [r2, #0]
	LPC_GPIO0->FIODIR |= (1 << 5);
    1fa2:	4a26      	ldr	r2, [pc, #152]	; (203c <ConfigurePins+0xe4>)
    1fa4:	4b25      	ldr	r3, [pc, #148]	; (203c <ConfigurePins+0xe4>)
    1fa6:	681b      	ldr	r3, [r3, #0]
    1fa8:	f043 0320 	orr.w	r3, r3, #32
    1fac:	6013      	str	r3, [r2, #0]
	//Init ADC
	uint32_t u32PCLKDIV, u32PCLK;
	LPC_SC->PCONP |= (1 << 12);
    1fae:	4a24      	ldr	r2, [pc, #144]	; (2040 <ConfigurePins+0xe8>)
    1fb0:	4b23      	ldr	r3, [pc, #140]	; (2040 <ConfigurePins+0xe8>)
    1fb2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1fb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1fba:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	u32PCLKDIV = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
    1fbe:	4b20      	ldr	r3, [pc, #128]	; (2040 <ConfigurePins+0xe8>)
    1fc0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    1fc4:	099b      	lsrs	r3, r3, #6
    1fc6:	f003 0303 	and.w	r3, r3, #3
    1fca:	607b      	str	r3, [r7, #4]
	switch (u32PCLKDIV) {
    1fcc:	687b      	ldr	r3, [r7, #4]
    1fce:	2b02      	cmp	r3, #2
    1fd0:	d009      	beq.n	1fe6 <ConfigurePins+0x8e>
    1fd2:	2b03      	cmp	r3, #3
    1fd4:	d00a      	beq.n	1fec <ConfigurePins+0x94>
    1fd6:	2b01      	cmp	r3, #1
    1fd8:	d002      	beq.n	1fe0 <ConfigurePins+0x88>
	case 0x00:
	default:
		u32PCLK = 12000000 / 4;
    1fda:	4b1a      	ldr	r3, [pc, #104]	; (2044 <ConfigurePins+0xec>)
    1fdc:	603b      	str	r3, [r7, #0]
		break;
    1fde:	e008      	b.n	1ff2 <ConfigurePins+0x9a>
	case 0x01:
		u32PCLK = 12000000;
    1fe0:	4b19      	ldr	r3, [pc, #100]	; (2048 <ConfigurePins+0xf0>)
    1fe2:	603b      	str	r3, [r7, #0]
		break;
    1fe4:	e005      	b.n	1ff2 <ConfigurePins+0x9a>
	case 0x02:
		u32PCLK = 12000000 / 2;
    1fe6:	4b19      	ldr	r3, [pc, #100]	; (204c <ConfigurePins+0xf4>)
    1fe8:	603b      	str	r3, [r7, #0]
		break;
    1fea:	e002      	b.n	1ff2 <ConfigurePins+0x9a>
	case 0x03:
		u32PCLK = 12000000 / 8;
    1fec:	4b18      	ldr	r3, [pc, #96]	; (2050 <ConfigurePins+0xf8>)
    1fee:	603b      	str	r3, [r7, #0]
		break;
    1ff0:	bf00      	nop
	//LPC_ADC->ADCR = (1 << 3) | ((u32PCLK / 12000000 - 1) << 8) | (0 << 16) | (0
	//		<< 17) | (1 << 21) | (0 << 24) | (0 << 27);
	//LPC_PINCON->PINSEL1 |= (1U << 20);
	///ADC//
	//External Power Pin
	LPC_GPIO0->FIODIR &= ~(1 << 22);
    1ff2:	4a12      	ldr	r2, [pc, #72]	; (203c <ConfigurePins+0xe4>)
    1ff4:	4b11      	ldr	r3, [pc, #68]	; (203c <ConfigurePins+0xe4>)
    1ff6:	681b      	ldr	r3, [r3, #0]
    1ff8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    1ffc:	6013      	str	r3, [r2, #0]
	//Ignition Pin
	LPC_GPIO0->FIODIR &= ~(1 << 21);
    1ffe:	4a0f      	ldr	r2, [pc, #60]	; (203c <ConfigurePins+0xe4>)
    2000:	4b0e      	ldr	r3, [pc, #56]	; (203c <ConfigurePins+0xe4>)
    2002:	681b      	ldr	r3, [r3, #0]
    2004:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
    2008:	6013      	str	r3, [r2, #0]
	#ifdef brisa
		DIGITAL_IN1_PIN = 21;
	#endif
	LPC_GPIOINT->IO0IntEnR |= (1 << 22); // Rising edge
    200a:	4a12      	ldr	r2, [pc, #72]	; (2054 <ConfigurePins+0xfc>)
    200c:	4b11      	ldr	r3, [pc, #68]	; (2054 <ConfigurePins+0xfc>)
    200e:	691b      	ldr	r3, [r3, #16]
    2010:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    2014:	6113      	str	r3, [r2, #16]
	LPC_GPIOINT->IO0IntEnF |= (1 << 22); // Falling edge
    2016:	4a0f      	ldr	r2, [pc, #60]	; (2054 <ConfigurePins+0xfc>)
    2018:	4b0e      	ldr	r3, [pc, #56]	; (2054 <ConfigurePins+0xfc>)
    201a:	695b      	ldr	r3, [r3, #20]
    201c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    2020:	6153      	str	r3, [r2, #20]
	NVIC_EnableIRQ(EINT3_IRQn);
    2022:	2015      	movs	r0, #21
    2024:	f7ff ff34 	bl	1e90 <NVIC_EnableIRQ>
}
    2028:	3708      	adds	r7, #8
    202a:	46bd      	mov	sp, r7
    202c:	bd80      	pop	{r7, pc}
    202e:	bf00      	nop
    2030:	4002c000 	.word	0x4002c000
    2034:	2009c040 	.word	0x2009c040
    2038:	2009c080 	.word	0x2009c080
    203c:	2009c000 	.word	0x2009c000
    2040:	400fc000 	.word	0x400fc000
    2044:	002dc6c0 	.word	0x002dc6c0
    2048:	00b71b00 	.word	0x00b71b00
    204c:	005b8d80 	.word	0x005b8d80
    2050:	0016e360 	.word	0x0016e360
    2054:	40028080 	.word	0x40028080

00002058 <main>:
			is_conn = GSM_ConnectToTrio();
	}
	return is_conn;
}

int main(void) {
    2058:	b580      	push	{r7, lr}
    205a:	b0b4      	sub	sp, #208	; 0xd0
    205c:	af00      	add	r7, sp, #0
	char buffer[200];
	device_power_state = high_power_state;
    205e:	4b51      	ldr	r3, [pc, #324]	; (21a4 <main+0x14c>)
    2060:	2201      	movs	r2, #1
    2062:	701a      	strb	r2, [r3, #0]
	SystemInit();
    2064:	f001 fda4 	bl	3bb0 <SystemInit>
	LPC_SC->CLKSRCSEL |= 0x01;//0x01;
    2068:	4a4f      	ldr	r2, [pc, #316]	; (21a8 <main+0x150>)
    206a:	4b4f      	ldr	r3, [pc, #316]	; (21a8 <main+0x150>)
    206c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    2070:	f043 0301 	orr.w	r3, r3, #1
    2074:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	LPC_SC->PLL0CFG |= 0x01; // Select external osc. as main clock.
    2078:	4a4b      	ldr	r2, [pc, #300]	; (21a8 <main+0x150>)
    207a:	4b4b      	ldr	r3, [pc, #300]	; (21a8 <main+0x150>)
    207c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    2080:	f043 0301 	orr.w	r3, r3, #1
    2084:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	LPC_SC->CCLKCFG = 0x03; // Main PLL is divided by 8
    2088:	4b47      	ldr	r3, [pc, #284]	; (21a8 <main+0x150>)
    208a:	2203      	movs	r2, #3
    208c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	SystemCoreClockUpdate();
    2090:	f001 fd38 	bl	3b04 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000 - 1); // Generate f each 1 ms, used to enable DelayMs function?
    2094:	4b45      	ldr	r3, [pc, #276]	; (21ac <main+0x154>)
    2096:	681b      	ldr	r3, [r3, #0]
    2098:	4a45      	ldr	r2, [pc, #276]	; (21b0 <main+0x158>)
    209a:	fba2 2303 	umull	r2, r3, r2, r3
    209e:	099b      	lsrs	r3, r3, #6
    20a0:	3b01      	subs	r3, #1
    20a2:	4618      	mov	r0, r3
    20a4:	f7ff ff36 	bl	1f14 <SysTick_Config>
	WDTInit(WDT_FEED_30_SECS);
    20a8:	4842      	ldr	r0, [pc, #264]	; (21b4 <main+0x15c>)
    20aa:	f001 f9d3 	bl	3454 <WDTInit>

	ConfigurePins();
    20ae:	f7ff ff53 	bl	1f58 <ConfigurePins>
	UARTInit(PORT_TRACE, 115200);
    20b2:	2000      	movs	r0, #0
    20b4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    20b8:	f000 feae 	bl	2e18 <UARTInit>
	UARTInit(PORT_GSM, 115200);
    20bc:	2001      	movs	r0, #1
    20be:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    20c2:	f000 fea9 	bl	2e18 <UARTInit>
	UARTInit(PORT_GPS, Baudrate);
    20c6:	2002      	movs	r0, #2
    20c8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    20cc:	f000 fea4 	bl	2e18 <UARTInit>
	TraceNL("Hello P65 20150520.");
    20d0:	4839      	ldr	r0, [pc, #228]	; (21b8 <main+0x160>)
    20d2:	f000 fb4b 	bl	276c <TraceNL>
	sprintf(buffer, "SystemCoreClock = %d Hz\n", SystemCoreClock);
    20d6:	4b35      	ldr	r3, [pc, #212]	; (21ac <main+0x154>)
    20d8:	681b      	ldr	r3, [r3, #0]
    20da:	1d3a      	adds	r2, r7, #4
    20dc:	4610      	mov	r0, r2
    20de:	4937      	ldr	r1, [pc, #220]	; (21bc <main+0x164>)
    20e0:	461a      	mov	r2, r3
    20e2:	f001 fea7 	bl	3e34 <sprintf>
	//UARTSend(PORT_TRACE, buffer, count);
	Trace(buffer);
    20e6:	1d3b      	adds	r3, r7, #4
    20e8:	4618      	mov	r0, r3
    20ea:	f000 fb2f 	bl	274c <Trace>
	if (EEPROM_Init() == 0) /* initialize I2c */{
    20ee:	f7fe fb41 	bl	774 <EEPROM_Init>
    20f2:	4603      	mov	r3, r0
    20f4:	2b00      	cmp	r3, #0
    20f6:	d103      	bne.n	2100 <main+0xa8>
		TraceNL("EEPROM Init Error."); /* Fatal error */
    20f8:	4831      	ldr	r0, [pc, #196]	; (21c0 <main+0x168>)
    20fa:	f000 fb37 	bl	276c <TraceNL>
    20fe:	e002      	b.n	2106 <main+0xae>
	} else {
		TraceNL("EEPROM Init Ok.");
    2100:	4830      	ldr	r0, [pc, #192]	; (21c4 <main+0x16c>)
    2102:	f000 fb33 	bl	276c <TraceNL>
	}

	Trace(buffer);
    2106:	1d3b      	adds	r3, r7, #4
    2108:	4618      	mov	r0, r3
    210a:	f000 fb1f 	bl	274c <Trace>
	LoadParams();
    210e:	f7fe f8f7 	bl	300 <LoadParams>
	WDTFeed();
    2112:	f001 f9bd 	bl	3490 <WDTFeed>

	TraceNL( "Checking upgrade request" );
    2116:	482c      	ldr	r0, [pc, #176]	; (21c8 <main+0x170>)
    2118:	f000 fb28 	bl	276c <TraceNL>

	if( IsUpgradeRequested() )
    211c:	f000 f864 	bl	21e8 <IsUpgradeRequested>
    2120:	4603      	mov	r3, r0
    2122:	2b00      	cmp	r3, #0
    2124:	d027      	beq.n	2176 <main+0x11e>
	{
		TraceNL( "System image upgrade requested" );
    2126:	4829      	ldr	r0, [pc, #164]	; (21cc <main+0x174>)
    2128:	f000 fb20 	bl	276c <TraceNL>
		int8_t 	trials = 1;
    212c:	2301      	movs	r3, #1
    212e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		while( trials-- > 0 )
    2132:	e013      	b.n	215c <main+0x104>
		{
			TraceNL( "Trial" );
    2134:	4826      	ldr	r0, [pc, #152]	; (21d0 <main+0x178>)
    2136:	f000 fb19 	bl	276c <TraceNL>
			 * 	Setup a server connection to update server
			 *
			 */

			// InitializeServerConn();
			if( GSM_ConnectToTrioUpgradeServer() == SUCCESS )
    213a:	f7fe fc99 	bl	a70 <GSM_ConnectToTrioUpgradeServer>
    213e:	4603      	mov	r3, r0
    2140:	2b00      	cmp	r3, #0
    2142:	d10b      	bne.n	215c <main+0x104>
			{
				TraceNL( "Server Connection Established to Upgrade server" );
    2144:	4823      	ldr	r0, [pc, #140]	; (21d4 <main+0x17c>)
    2146:	f000 fb11 	bl	276c <TraceNL>

				//GSM_SendToServerTCP( "[ST;70;r2246;P65-20150204-1;;HELLO]" );

				WDTFeed( );
    214a:	f001 f9a1 	bl	3490 <WDTFeed>

				DownloadSecondaryImage();
    214e:	f000 f887 	bl	2260 <DownloadSecondaryImage>

				WDTFeed( );
    2152:	f001 f99d 	bl	3490 <WDTFeed>
				TraceNL( "Download finished " );
    2156:	4820      	ldr	r0, [pc, #128]	; (21d8 <main+0x180>)
    2158:	f000 fb08 	bl	276c <TraceNL>

	if( IsUpgradeRequested() )
	{
		TraceNL( "System image upgrade requested" );
		int8_t 	trials = 1;
		while( trials-- > 0 )
    215c:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
    2160:	b2d3      	uxtb	r3, r2
    2162:	3b01      	subs	r3, #1
    2164:	b2db      	uxtb	r3, r3
    2166:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    216a:	b253      	sxtb	r3, r2
    216c:	2b00      	cmp	r3, #0
    216e:	dce1      	bgt.n	2134 <main+0xdc>

				WDTFeed( );
				TraceNL( "Download finished " );
			}
		}
		TraceNL( "Finished upgrading" );
    2170:	481a      	ldr	r0, [pc, #104]	; (21dc <main+0x184>)
    2172:	f000 fafb 	bl	276c <TraceNL>
	}

	if( IsSecondaryImageValid() == SUCCESS )
    2176:	f000 fa85 	bl	2684 <IsSecondaryImageValid>
    217a:	4603      	mov	r3, r0
    217c:	2b00      	cmp	r3, #0
    217e:	d106      	bne.n	218e <main+0x136>
	{
		TraceNL( "Booting SECONDARY image" );
    2180:	4817      	ldr	r0, [pc, #92]	; (21e0 <main+0x188>)
    2182:	f000 faf3 	bl	276c <TraceNL>
		ExecuteApplicationImage( SECONDARY_IMAGE_LOAD_ADDR );
    2186:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    218a:	f000 f8cd 	bl	2328 <ExecuteApplicationImage>
	}


	TraceNL( "Booting PRIMARY image" );
    218e:	4815      	ldr	r0, [pc, #84]	; (21e4 <main+0x18c>)
    2190:	f000 faec 	bl	276c <TraceNL>
	WDTFeed( );
    2194:	f001 f97c 	bl	3490 <WDTFeed>
	ExecuteApplicationImage( PRIMARY_IMAGE_LOAD_ADDR );
    2198:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    219c:	f000 f8c4 	bl	2328 <ExecuteApplicationImage>

	while ( 1L );
    21a0:	e7fe      	b.n	21a0 <main+0x148>
    21a2:	bf00      	nop
    21a4:	10000f60 	.word	0x10000f60
    21a8:	400fc000 	.word	0x400fc000
    21ac:	10000024 	.word	0x10000024
    21b0:	10624dd3 	.word	0x10624dd3
    21b4:	0c6aea15 	.word	0x0c6aea15
    21b8:	000070d0 	.word	0x000070d0
    21bc:	000070e4 	.word	0x000070e4
    21c0:	00007100 	.word	0x00007100
    21c4:	00007114 	.word	0x00007114
    21c8:	00007124 	.word	0x00007124
    21cc:	00007140 	.word	0x00007140
    21d0:	00007160 	.word	0x00007160
    21d4:	00007168 	.word	0x00007168
    21d8:	00007198 	.word	0x00007198
    21dc:	000071ac 	.word	0x000071ac
    21e0:	000071c0 	.word	0x000071c0
    21e4:	000071d8 	.word	0x000071d8

000021e8 <IsUpgradeRequested>:
** Returned value:	TRUE	upgrade is requested
** 					FALSE   upgrade is not requested
**
******************************************************************************/
uint32_t	IsUpgradeRequested( void )
{
    21e8:	b580      	push	{r7, lr}
    21ea:	b09a      	sub	sp, #104	; 0x68
    21ec:	af00      	add	r7, sp, #0
	if( (*( (uint32_t *)UPGRADE_PARAMETERS_ADDR) ) != 0xFFFFFFFF )
    21ee:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
    21f2:	681b      	ldr	r3, [r3, #0]
    21f4:	f1b3 3fff 	cmp.w	r3, #4294967295
    21f8:	d027      	beq.n	224a <IsUpgradeRequested+0x62>
	{
		char buffer[100];
		char * port ;
		strcpy( update_service_ip, UPGRADE_PARAMETERS_ADDR );
    21fa:	4816      	ldr	r0, [pc, #88]	; (2254 <IsUpgradeRequested+0x6c>)
    21fc:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
    2200:	f003 fa5d 	bl	56be <strcpy>

		port = strchr( UPGRADE_PARAMETERS_ADDR, '\0' );
    2204:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
    2208:	2100      	movs	r1, #0
    220a:	f003 fa4b 	bl	56a4 <strchr>
    220e:	4603      	mov	r3, r0
    2210:	667b      	str	r3, [r7, #100]	; 0x64
		port++;
    2212:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2214:	3301      	adds	r3, #1
    2216:	667b      	str	r3, [r7, #100]	; 0x64
		strcpy( update_service_port, port);
    2218:	480f      	ldr	r0, [pc, #60]	; (2258 <IsUpgradeRequested+0x70>)
    221a:	6e79      	ldr	r1, [r7, #100]	; 0x64
    221c:	f003 fa4f 	bl	56be <strcpy>

		sprintf(buffer,"Update parameters %s:%s", update_service_ip, update_service_port);
    2220:	463b      	mov	r3, r7
    2222:	4618      	mov	r0, r3
    2224:	490d      	ldr	r1, [pc, #52]	; (225c <IsUpgradeRequested+0x74>)
    2226:	4a0b      	ldr	r2, [pc, #44]	; (2254 <IsUpgradeRequested+0x6c>)
    2228:	4b0b      	ldr	r3, [pc, #44]	; (2258 <IsUpgradeRequested+0x70>)
    222a:	f001 fe03 	bl	3e34 <sprintf>
		TraceNL( buffer );
    222e:	463b      	mov	r3, r7
    2230:	4618      	mov	r0, r3
    2232:	f000 fa9b 	bl	276c <TraceNL>

		u32IAP_PrepareSectors( UPGRADE_PARAMETERS_SEC, UPGRADE_PARAMETERS_SEC );
    2236:	200f      	movs	r0, #15
    2238:	210f      	movs	r1, #15
    223a:	f7ff fd55 	bl	1ce8 <u32IAP_PrepareSectors>
		u32IAP_EraseSectors( UPGRADE_PARAMETERS_SEC, UPGRADE_PARAMETERS_SEC );
    223e:	200f      	movs	r0, #15
    2240:	210f      	movs	r1, #15
    2242:	f7ff fd9f 	bl	1d84 <u32IAP_EraseSectors>
		return TRUE;
    2246:	2301      	movs	r3, #1
    2248:	e000      	b.n	224c <IsUpgradeRequested+0x64>
	}

	return FALSE;
    224a:	2300      	movs	r3, #0
}
    224c:	4618      	mov	r0, r3
    224e:	3768      	adds	r7, #104	; 0x68
    2250:	46bd      	mov	sp, r7
    2252:	bd80      	pop	{r7, pc}
    2254:	10000000 	.word	0x10000000
    2258:	10000014 	.word	0x10000014
    225c:	00007300 	.word	0x00007300

00002260 <DownloadSecondaryImage>:


void DownloadSecondaryImage( void )
{
    2260:	b590      	push	{r4, r7, lr}
    2262:	b0a3      	sub	sp, #140	; 0x8c
    2264:	af02      	add	r7, sp, #8
	uint32_t	reason[5];
	uint32_t	i;

	char buff[100];

	i = SECONDARY_IMAGE_START_SEC;
    2266:	2316      	movs	r3, #22
    2268:	67fb      	str	r3, [r7, #124]	; 0x7c
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    226a:	e00a      	b.n	2282 <DownloadSecondaryImage+0x22>
	{
		u32IAP_PrepareSectors( i, i );
    226c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    226e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    2270:	f7ff fd3a 	bl	1ce8 <u32IAP_PrepareSectors>
		u32IAP_EraseSectors( i, i );
    2274:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    2276:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    2278:	f7ff fd84 	bl	1d84 <u32IAP_EraseSectors>
	uint32_t	i;

	char buff[100];

	i = SECONDARY_IMAGE_START_SEC;
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    227c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    227e:	3301      	adds	r3, #1
    2280:	67fb      	str	r3, [r7, #124]	; 0x7c
    2282:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    2284:	2b1b      	cmp	r3, #27
    2286:	d9f1      	bls.n	226c <DownloadSecondaryImage+0xc>
	{
		u32IAP_PrepareSectors( i, i );
		u32IAP_EraseSectors( i, i );
	}
	TraceNL( "Checking if target memory is blank" );
    2288:	4821      	ldr	r0, [pc, #132]	; (2310 <DownloadSecondaryImage+0xb0>)
    228a:	f000 fa6f 	bl	276c <TraceNL>


	i = SECONDARY_IMAGE_START_SEC;
    228e:	2316      	movs	r3, #22
    2290:	67fb      	str	r3, [r7, #124]	; 0x7c
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    2292:	e02d      	b.n	22f0 <DownloadSecondaryImage+0x90>
	{
		if( u32IAP_BlankCheckSectors( i, i, &reason[0] )== IAP_STA_SECTOR_NOT_BLANK )
    2294:	f107 0368 	add.w	r3, r7, #104	; 0x68
    2298:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    229a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    229c:	461a      	mov	r2, r3
    229e:	f7ff fda1 	bl	1de4 <u32IAP_BlankCheckSectors>
    22a2:	4603      	mov	r3, r0
    22a4:	2b08      	cmp	r3, #8
    22a6:	d116      	bne.n	22d6 <DownloadSecondaryImage+0x76>
		{
			sprintf(buff, "Target sector (%d) is not blank addr: 0x%X, 0x%X", i, reason[0], reason[1] );
    22a8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    22aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    22ac:	1d3a      	adds	r2, r7, #4
    22ae:	9300      	str	r3, [sp, #0]
    22b0:	4610      	mov	r0, r2
    22b2:	4918      	ldr	r1, [pc, #96]	; (2314 <DownloadSecondaryImage+0xb4>)
    22b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    22b6:	4623      	mov	r3, r4
    22b8:	f001 fdbc 	bl	3e34 <sprintf>
			TraceNL( buff );
    22bc:	1d3b      	adds	r3, r7, #4
    22be:	4618      	mov	r0, r3
    22c0:	f000 fa54 	bl	276c <TraceNL>
			u32IAP_PrepareSectors( i, i );
    22c4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    22c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    22c8:	f7ff fd0e 	bl	1ce8 <u32IAP_PrepareSectors>
			u32IAP_EraseSectors( i, i);
    22cc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    22ce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    22d0:	f7ff fd58 	bl	1d84 <u32IAP_EraseSectors>
    22d4:	e009      	b.n	22ea <DownloadSecondaryImage+0x8a>

		}else
		{
			sprintf(buff, "Target sector (%d) is blank ", i );
    22d6:	1d3b      	adds	r3, r7, #4
    22d8:	4618      	mov	r0, r3
    22da:	490f      	ldr	r1, [pc, #60]	; (2318 <DownloadSecondaryImage+0xb8>)
    22dc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    22de:	f001 fda9 	bl	3e34 <sprintf>
			TraceNL( buff );
    22e2:	1d3b      	adds	r3, r7, #4
    22e4:	4618      	mov	r0, r3
    22e6:	f000 fa41 	bl	276c <TraceNL>
	}
	TraceNL( "Checking if target memory is blank" );


	i = SECONDARY_IMAGE_START_SEC;
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    22ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    22ec:	3301      	adds	r3, #1
    22ee:	67fb      	str	r3, [r7, #124]	; 0x7c
    22f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    22f2:	2b1b      	cmp	r3, #27
    22f4:	d9ce      	bls.n	2294 <DownloadSecondaryImage+0x34>
			TraceNL( buff );
		}
	}

	/*	Clear the received data counter using in the load_mage function */
	received_data = 0;
    22f6:	4b09      	ldr	r3, [pc, #36]	; (231c <DownloadSecondaryImage+0xbc>)
    22f8:	2200      	movs	r2, #0
    22fa:	601a      	str	r2, [r3, #0]

	TraceNL( "Starting download" );
    22fc:	4808      	ldr	r0, [pc, #32]	; (2320 <DownloadSecondaryImage+0xc0>)
    22fe:	f000 fa35 	bl	276c <TraceNL>
	/*	Store a new image into flash */
	XModem1K_Client( &load_image );
    2302:	4808      	ldr	r0, [pc, #32]	; (2324 <DownloadSecondaryImage+0xc4>)
    2304:	f001 f97a 	bl	35fc <XModem1K_Client>


}
    2308:	3784      	adds	r7, #132	; 0x84
    230a:	46bd      	mov	sp, r7
    230c:	bd90      	pop	{r4, r7, pc}
    230e:	bf00      	nop
    2310:	00007318 	.word	0x00007318
    2314:	0000733c 	.word	0x0000733c
    2318:	00007370 	.word	0x00007370
    231c:	1000043c 	.word	0x1000043c
    2320:	00007390 	.word	0x00007390
    2324:	00002359 	.word	0x00002359

00002328 <ExecuteApplicationImage>:

}


void ExecuteApplicationImage( unsigned int startAddress )
{
    2328:	b580      	push	{r7, lr}
    232a:	b084      	sub	sp, #16
    232c:	af00      	add	r7, sp, #0
    232e:	6078      	str	r0, [r7, #4]
	unsigned *p;	// used for loading address of reset handler from user flash

	/* Change the Vector Table to the
	in case the user application uses interrupts */

	SCB->VTOR = (startAddress & 0x1FFFFF80);
    2330:	4a08      	ldr	r2, [pc, #32]	; (2354 <ExecuteApplicationImage+0x2c>)
    2332:	687b      	ldr	r3, [r7, #4]
    2334:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    2338:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    233c:	6093      	str	r3, [r2, #8]

	// Load contents of second word of user flash - the reset handler address
	// in the applications vector table
	p = (unsigned *)(startAddress + 4);
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	3304      	adds	r3, #4
    2342:	60fb      	str	r3, [r7, #12]

	// Set user_code_entry to be the address contained in that second word
	// of user flash
	user_code_entry = (void *) *p;
    2344:	68fb      	ldr	r3, [r7, #12]
    2346:	681b      	ldr	r3, [r3, #0]
    2348:	60bb      	str	r3, [r7, #8]

	// Jump to user application
    user_code_entry();
    234a:	68bb      	ldr	r3, [r7, #8]
    234c:	4798      	blx	r3
}
    234e:	3710      	adds	r7, #16
    2350:	46bd      	mov	sp, r7
    2352:	bd80      	pop	{r7, pc}
    2354:	e000ed00 	.word	0xe000ed00

00002358 <load_image>:

static uint32_t load_image(uint8_t *data, uint16_t length){
    2358:	b580      	push	{r7, lr}
    235a:	b0c4      	sub	sp, #272	; 0x110
    235c:	af00      	add	r7, sp, #0
    235e:	1d3b      	adds	r3, r7, #4
    2360:	6018      	str	r0, [r3, #0]
    2362:	460a      	mov	r2, r1
    2364:	1cbb      	adds	r3, r7, #2
    2366:	801a      	strh	r2, [r3, #0]
	char buffer[250];
	uint32_t rc;
	int i;


	sprintf(buffer, "Totally received : %d   frame length : %d\r\n", received_data, length);
    2368:	4b71      	ldr	r3, [pc, #452]	; (2530 <load_image+0x1d8>)
    236a:	681a      	ldr	r2, [r3, #0]
    236c:	1cbb      	adds	r3, r7, #2
    236e:	881b      	ldrh	r3, [r3, #0]
    2370:	f107 0108 	add.w	r1, r7, #8
    2374:	4608      	mov	r0, r1
    2376:	496f      	ldr	r1, [pc, #444]	; (2534 <load_image+0x1dc>)
    2378:	f001 fd5c 	bl	3e34 <sprintf>
	Trace( buffer );
    237c:	f107 0308 	add.w	r3, r7, #8
    2380:	4618      	mov	r0, r3
    2382:	f000 f9e3 	bl	274c <Trace>

	if( length == 0 && flashWriteIndex == 0 )
    2386:	1cbb      	adds	r3, r7, #2
    2388:	881b      	ldrh	r3, [r3, #0]
    238a:	2b00      	cmp	r3, #0
    238c:	d105      	bne.n	239a <load_image+0x42>
    238e:	4b6a      	ldr	r3, [pc, #424]	; (2538 <load_image+0x1e0>)
    2390:	681b      	ldr	r3, [r3, #0]
    2392:	2b00      	cmp	r3, #0
    2394:	d101      	bne.n	239a <load_image+0x42>
	{
		// Finished and all previous data has been written
		return ( 2 ); // return non zero to indicate success
    2396:	2302      	movs	r3, #2
    2398:	e0c4      	b.n	2524 <load_image+0x1cc>
	}


	for( i = 0; i < length; i++ )
    239a:	2300      	movs	r3, #0
    239c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    23a0:	e011      	b.n	23c6 <load_image+0x6e>
	{
		flashWriteBuffer[flashWriteIndex++] = data[i];
    23a2:	4b65      	ldr	r3, [pc, #404]	; (2538 <load_image+0x1e0>)
    23a4:	681b      	ldr	r3, [r3, #0]
    23a6:	1c5a      	adds	r2, r3, #1
    23a8:	4963      	ldr	r1, [pc, #396]	; (2538 <load_image+0x1e0>)
    23aa:	600a      	str	r2, [r1, #0]
    23ac:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    23b0:	1d39      	adds	r1, r7, #4
    23b2:	6809      	ldr	r1, [r1, #0]
    23b4:	440a      	add	r2, r1
    23b6:	7811      	ldrb	r1, [r2, #0]
    23b8:	4a60      	ldr	r2, [pc, #384]	; (253c <load_image+0x1e4>)
    23ba:	54d1      	strb	r1, [r2, r3]
		// Finished and all previous data has been written
		return ( 2 ); // return non zero to indicate success
	}


	for( i = 0; i < length; i++ )
    23bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    23c0:	3301      	adds	r3, #1
    23c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    23c6:	1cbb      	adds	r3, r7, #2
    23c8:	881a      	ldrh	r2, [r3, #0]
    23ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    23ce:	429a      	cmp	r2, r3
    23d0:	dce7      	bgt.n	23a2 <load_image+0x4a>
	{
		flashWriteBuffer[flashWriteIndex++] = data[i];
	}

	if( flashWriteIndex && ((flashWriteIndex % FLASH_SECTOR_SIZE) == 0) )
    23d2:	4b59      	ldr	r3, [pc, #356]	; (2538 <load_image+0x1e0>)
    23d4:	681b      	ldr	r3, [r3, #0]
    23d6:	2b00      	cmp	r3, #0
    23d8:	f000 80a3 	beq.w	2522 <load_image+0x1ca>
    23dc:	4b56      	ldr	r3, [pc, #344]	; (2538 <load_image+0x1e0>)
    23de:	681b      	ldr	r3, [r3, #0]
    23e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    23e4:	2b00      	cmp	r3, #0
    23e6:	f040 809c 	bne.w	2522 <load_image+0x1ca>
	{
		sprintf(buffer, "Totally : %d  flashWriteIndex : %d\r\n",
    23ea:	4b51      	ldr	r3, [pc, #324]	; (2530 <load_image+0x1d8>)
    23ec:	681a      	ldr	r2, [r3, #0]
    23ee:	4b52      	ldr	r3, [pc, #328]	; (2538 <load_image+0x1e0>)
    23f0:	681b      	ldr	r3, [r3, #0]
    23f2:	f107 0108 	add.w	r1, r7, #8
    23f6:	4608      	mov	r0, r1
    23f8:	4951      	ldr	r1, [pc, #324]	; (2540 <load_image+0x1e8>)
    23fa:	f001 fd1b 	bl	3e34 <sprintf>
//		TraceDumpHex(buffer, strlen(buffer));
//		TraceDumpHex(flashWriteBuffer, flashWriteIndex);

		/*	Prepare Sectors to be flashed */
		// TODO arrange sectors for primary image
		if (u32IAP_PrepareSectors(22, 27) == IAP_STA_CMD_SUCCESS) {
    23fe:	2016      	movs	r0, #22
    2400:	211b      	movs	r1, #27
    2402:	f7ff fc71 	bl	1ce8 <u32IAP_PrepareSectors>
    2406:	4603      	mov	r3, r0
    2408:	2b00      	cmp	r3, #0
    240a:	f040 808a 	bne.w	2522 <load_image+0x1ca>
			TraceNL("prepared ");
    240e:	484d      	ldr	r0, [pc, #308]	; (2544 <load_image+0x1ec>)
    2410:	f000 f9ac 	bl	276c <TraceNL>

			rc = u32IAP_CopyRAMToFlash(
    2414:	4b46      	ldr	r3, [pc, #280]	; (2530 <load_image+0x1d8>)
    2416:	681b      	ldr	r3, [r3, #0]
    2418:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
    241c:	4947      	ldr	r1, [pc, #284]	; (253c <load_image+0x1e4>)
    241e:	4b46      	ldr	r3, [pc, #280]	; (2538 <load_image+0x1e0>)
    2420:	681b      	ldr	r3, [r3, #0]
    2422:	4610      	mov	r0, r2
    2424:	461a      	mov	r2, r3
    2426:	f7ff fc83 	bl	1d30 <u32IAP_CopyRAMToFlash>
    242a:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
					SECONDARY_IMAGE_LOAD_ADDR + received_data,
					(uint32_t) flashWriteBuffer,
					flashWriteIndex
					);

			sprintf( buffer, "Copy Ram result code : %d\r\n", rc );
    242e:	f107 0308 	add.w	r3, r7, #8
    2432:	4618      	mov	r0, r3
    2434:	4944      	ldr	r1, [pc, #272]	; (2548 <load_image+0x1f0>)
    2436:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    243a:	f001 fcfb 	bl	3e34 <sprintf>
			TraceNL( buffer );
    243e:	f107 0308 	add.w	r3, r7, #8
    2442:	4618      	mov	r0, r3
    2444:	f000 f992 	bl	276c <TraceNL>
			/*	Copy data (already) located in RAM to flash */
			if (rc == IAP_STA_CMD_SUCCESS) {
    2448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    244c:	2b00      	cmp	r3, #0
    244e:	d168      	bne.n	2522 <load_image+0x1ca>
				TraceNL( "copied " );
    2450:	483e      	ldr	r0, [pc, #248]	; (254c <load_image+0x1f4>)
    2452:	f000 f98b 	bl	276c <TraceNL>

				rc = u32IAP_Compare( SECONDARY_IMAGE_LOAD_ADDR + received_data,
    2456:	4b36      	ldr	r3, [pc, #216]	; (2530 <load_image+0x1d8>)
    2458:	681b      	ldr	r3, [r3, #0]
    245a:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
    245e:	4937      	ldr	r1, [pc, #220]	; (253c <load_image+0x1e4>)
    2460:	4b35      	ldr	r3, [pc, #212]	; (2538 <load_image+0x1e0>)
    2462:	681b      	ldr	r3, [r3, #0]
    2464:	4610      	mov	r0, r2
    2466:	461a      	mov	r2, r3
    2468:	2300      	movs	r3, #0
    246a:	f7ff fce9 	bl	1e40 <u32IAP_Compare>
    246e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
						             (uint32_t) flashWriteBuffer,
									 flashWriteIndex, 0
									);
				sprintf( buffer, "u32IAP_Compare : %d  wrote %d \r\n", rc , flashWriteIndex );
    2472:	4b31      	ldr	r3, [pc, #196]	; (2538 <load_image+0x1e0>)
    2474:	681b      	ldr	r3, [r3, #0]
    2476:	f107 0208 	add.w	r2, r7, #8
    247a:	4610      	mov	r0, r2
    247c:	4934      	ldr	r1, [pc, #208]	; (2550 <load_image+0x1f8>)
    247e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    2482:	f001 fcd7 	bl	3e34 <sprintf>
				Trace( buffer );
    2486:	f107 0308 	add.w	r3, r7, #8
    248a:	4618      	mov	r0, r3
    248c:	f000 f95e 	bl	274c <Trace>

				/*	Verify the flash contents with the contents in RAM */
				if (rc == IAP_STA_CMD_SUCCESS) {
    2490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    2494:	2b00      	cmp	r3, #0
    2496:	d10e      	bne.n	24b6 <load_image+0x15e>
					/*	Update and Print Received bytes counter */
					received_data += flashWriteIndex;
    2498:	4b25      	ldr	r3, [pc, #148]	; (2530 <load_image+0x1d8>)
    249a:	681a      	ldr	r2, [r3, #0]
    249c:	4b26      	ldr	r3, [pc, #152]	; (2538 <load_image+0x1e0>)
    249e:	681b      	ldr	r3, [r3, #0]
    24a0:	4413      	add	r3, r2
    24a2:	4a23      	ldr	r2, [pc, #140]	; (2530 <load_image+0x1d8>)
    24a4:	6013      	str	r3, [r2, #0]
					//snprintf((char *)string, MAX_STRING_SIZE, "Received %d of %d bytes", received_data, BMP->bmp_size);
					TraceNL( "verified " );
    24a6:	482b      	ldr	r0, [pc, #172]	; (2554 <load_image+0x1fc>)
    24a8:	f000 f960 	bl	276c <TraceNL>

					flashWriteIndex = 0;
    24ac:	4b22      	ldr	r3, [pc, #136]	; (2538 <load_image+0x1e0>)
    24ae:	2200      	movs	r2, #0
    24b0:	601a      	str	r2, [r3, #0]
					return (1);
    24b2:	2301      	movs	r3, #1
    24b4:	e036      	b.n	2524 <load_image+0x1cc>
				} else {
					int count;
					TraceDumpHex( SECONDARY_IMAGE_LOAD_ADDR + received_data, flashWriteIndex);
    24b6:	4b1e      	ldr	r3, [pc, #120]	; (2530 <load_image+0x1d8>)
    24b8:	681b      	ldr	r3, [r3, #0]
    24ba:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
    24be:	4b1e      	ldr	r3, [pc, #120]	; (2538 <load_image+0x1e0>)
    24c0:	681b      	ldr	r3, [r3, #0]
    24c2:	4610      	mov	r0, r2
    24c4:	4619      	mov	r1, r3
    24c6:	f000 f993 	bl	27f0 <TraceDumpHex>

					received_data += flashWriteIndex;
    24ca:	4b19      	ldr	r3, [pc, #100]	; (2530 <load_image+0x1d8>)
    24cc:	681a      	ldr	r2, [r3, #0]
    24ce:	4b1a      	ldr	r3, [pc, #104]	; (2538 <load_image+0x1e0>)
    24d0:	681b      	ldr	r3, [r3, #0]
    24d2:	4413      	add	r3, r2
    24d4:	4a16      	ldr	r2, [pc, #88]	; (2530 <load_image+0x1d8>)
    24d6:	6013      	str	r3, [r2, #0]
					//snprintf((char *)string, MAX_STRING_SIZE, "Received %d of %d bytes", received_data, BMP->bmp_size);
					TraceNL( "verification failed " );
    24d8:	481f      	ldr	r0, [pc, #124]	; (2558 <load_image+0x200>)
    24da:	f000 f947 	bl	276c <TraceNL>

					for ( count = 0; count < 100000000; count++)
    24de:	2300      	movs	r3, #0
    24e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    24e4:	e015      	b.n	2512 <load_image+0x1ba>
						if( count % 10000000 == 0)
    24e6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
    24ea:	4b1c      	ldr	r3, [pc, #112]	; (255c <load_image+0x204>)
    24ec:	fb83 1302 	smull	r1, r3, r3, r2
    24f0:	1599      	asrs	r1, r3, #22
    24f2:	17d3      	asrs	r3, r2, #31
    24f4:	1acb      	subs	r3, r1, r3
    24f6:	491a      	ldr	r1, [pc, #104]	; (2560 <load_image+0x208>)
    24f8:	fb01 f303 	mul.w	r3, r1, r3
    24fc:	1ad3      	subs	r3, r2, r3
    24fe:	2b00      	cmp	r3, #0
    2500:	d102      	bne.n	2508 <load_image+0x1b0>
							TracePutc( '.' );
    2502:	202e      	movs	r0, #46	; 0x2e
    2504:	f000 f94a 	bl	279c <TracePutc>

					received_data += flashWriteIndex;
					//snprintf((char *)string, MAX_STRING_SIZE, "Received %d of %d bytes", received_data, BMP->bmp_size);
					TraceNL( "verification failed " );

					for ( count = 0; count < 100000000; count++)
    2508:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    250c:	3301      	adds	r3, #1
    250e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    2512:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    2516:	4a13      	ldr	r2, [pc, #76]	; (2564 <load_image+0x20c>)
    2518:	4293      	cmp	r3, r2
    251a:	dde4      	ble.n	24e6 <load_image+0x18e>
						if( count % 10000000 == 0)
							TracePutc( '.' );

					flashWriteIndex = 0;
    251c:	4b06      	ldr	r3, [pc, #24]	; (2538 <load_image+0x1e0>)
    251e:	2200      	movs	r2, #0
    2520:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}

	return (0);
    2522:	2300      	movs	r3, #0
}
    2524:	4618      	mov	r0, r3
    2526:	f507 7788 	add.w	r7, r7, #272	; 0x110
    252a:	46bd      	mov	sp, r7
    252c:	bd80      	pop	{r7, pc}
    252e:	bf00      	nop
    2530:	1000043c 	.word	0x1000043c
    2534:	000073a4 	.word	0x000073a4
    2538:	10000438 	.word	0x10000438
    253c:	10000038 	.word	0x10000038
    2540:	000073d0 	.word	0x000073d0
    2544:	000073f8 	.word	0x000073f8
    2548:	00007404 	.word	0x00007404
    254c:	00007420 	.word	0x00007420
    2550:	00007428 	.word	0x00007428
    2554:	0000744c 	.word	0x0000744c
    2558:	00007458 	.word	0x00007458
    255c:	6b5fca6b 	.word	0x6b5fca6b
    2560:	00989680 	.word	0x00989680
    2564:	05f5e0ff 	.word	0x05f5e0ff

00002568 <WriteImageSignature>:
** Returned value:	none
**
******************************************************************************/

void WriteImageSignature( uint32_t  size, uint32_t crc )
{
    2568:	b580      	push	{r7, lr}
    256a:	b0c6      	sub	sp, #280	; 0x118
    256c:	af00      	add	r7, sp, #0
    256e:	1d3b      	adds	r3, r7, #4
    2570:	6018      	str	r0, [r3, #0]
    2572:	463b      	mov	r3, r7
    2574:	6019      	str	r1, [r3, #0]

	char buffer[250];
	uint32_t rc;
	int i;

	char* startAddr = (char *)(SECONDARY_IMAGE_END_ADDR - 1024);
    2576:	4b3a      	ldr	r3, [pc, #232]	; (2660 <WriteImageSignature+0xf8>)
    2578:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	sprintf(buffer, "Writing signature: 0x%X   CRC : %X\r\n", size, crc);
    257c:	f107 0108 	add.w	r1, r7, #8
    2580:	1d3a      	adds	r2, r7, #4
    2582:	463b      	mov	r3, r7
    2584:	4608      	mov	r0, r1
    2586:	4937      	ldr	r1, [pc, #220]	; (2664 <WriteImageSignature+0xfc>)
    2588:	6812      	ldr	r2, [r2, #0]
    258a:	681b      	ldr	r3, [r3, #0]
    258c:	f001 fc52 	bl	3e34 <sprintf>
	Trace( buffer );
    2590:	f107 0308 	add.w	r3, r7, #8
    2594:	4618      	mov	r0, r3
    2596:	f000 f8d9 	bl	274c <Trace>

	for( i = 0; i < 1024; i++ )
    259a:	2300      	movs	r3, #0
    259c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    25a0:	e011      	b.n	25c6 <WriteImageSignature+0x5e>
	{
		flashWriteBuffer[i++] = *startAddr++;
    25a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    25a6:	1c5a      	adds	r2, r3, #1
    25a8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
    25ac:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
    25b0:	1c51      	adds	r1, r2, #1
    25b2:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
    25b6:	7811      	ldrb	r1, [r2, #0]
    25b8:	4a2b      	ldr	r2, [pc, #172]	; (2668 <WriteImageSignature+0x100>)
    25ba:	54d1      	strb	r1, [r2, r3]


	sprintf(buffer, "Writing signature: 0x%X   CRC : %X\r\n", size, crc);
	Trace( buffer );

	for( i = 0; i < 1024; i++ )
    25bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    25c0:	3301      	adds	r3, #1
    25c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    25c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    25ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    25ce:	dbe8      	blt.n	25a2 <WriteImageSignature+0x3a>
	{
		flashWriteBuffer[i++] = *startAddr++;
	}

	uint32_t* ptrCRC = &flashWriteBuffer[ 1024 - 4 ];
    25d0:	4b26      	ldr	r3, [pc, #152]	; (266c <WriteImageSignature+0x104>)
    25d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	*ptrCRC		= crc;
    25d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    25da:	463a      	mov	r2, r7
    25dc:	6812      	ldr	r2, [r2, #0]
    25de:	601a      	str	r2, [r3, #0]

	uint32_t* ptrSize = &flashWriteBuffer[ 1024 - 8 ];
    25e0:	4b23      	ldr	r3, [pc, #140]	; (2670 <WriteImageSignature+0x108>)
    25e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	*ptrSize	= size;
    25e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    25ea:	1d3a      	adds	r2, r7, #4
    25ec:	6812      	ldr	r2, [r2, #0]
    25ee:	601a      	str	r2, [r3, #0]

	if (u32IAP_PrepareSectors(SECONDARY_IMAGE_END_SEC,
    25f0:	201b      	movs	r0, #27
    25f2:	211b      	movs	r1, #27
    25f4:	f7ff fb78 	bl	1ce8 <u32IAP_PrepareSectors>
    25f8:	4603      	mov	r3, r0
    25fa:	2b00      	cmp	r3, #0
    25fc:	d12a      	bne.n	2654 <WriteImageSignature+0xec>
			SECONDARY_IMAGE_END_SEC) == IAP_STA_CMD_SUCCESS)
	{
		TraceNL("prepared ");
    25fe:	481d      	ldr	r0, [pc, #116]	; (2674 <WriteImageSignature+0x10c>)
    2600:	f000 f8b4 	bl	276c <TraceNL>
		u32IAP_EraseSectors( SECONDARY_IMAGE_END_SEC, SECONDARY_IMAGE_END_SEC );
    2604:	201b      	movs	r0, #27
    2606:	211b      	movs	r1, #27
    2608:	f7ff fbbc 	bl	1d84 <u32IAP_EraseSectors>
		TraceNL("Erased ");
    260c:	481a      	ldr	r0, [pc, #104]	; (2678 <WriteImageSignature+0x110>)
    260e:	f000 f8ad 	bl	276c <TraceNL>

		u32IAP_PrepareSectors(SECONDARY_IMAGE_END_SEC,
    2612:	201b      	movs	r0, #27
    2614:	211b      	movs	r1, #27
    2616:	f7ff fb67 	bl	1ce8 <u32IAP_PrepareSectors>
					SECONDARY_IMAGE_END_SEC);
		rc = u32IAP_CopyRAMToFlash((SECONDARY_IMAGE_END_ADDR - 1024),
    261a:	4b13      	ldr	r3, [pc, #76]	; (2668 <WriteImageSignature+0x100>)
    261c:	4810      	ldr	r0, [pc, #64]	; (2660 <WriteImageSignature+0xf8>)
    261e:	4619      	mov	r1, r3
    2620:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2624:	f7ff fb84 	bl	1d30 <u32IAP_CopyRAMToFlash>
    2628:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
				(uint32_t) flashWriteBuffer, 1024);

		sprintf(buffer, "Copy Ram result code : %d\r\n", rc);
    262c:	f107 0308 	add.w	r3, r7, #8
    2630:	4618      	mov	r0, r3
    2632:	4912      	ldr	r1, [pc, #72]	; (267c <WriteImageSignature+0x114>)
    2634:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    2638:	f001 fbfc 	bl	3e34 <sprintf>
		TraceNL(buffer);
    263c:	f107 0308 	add.w	r3, r7, #8
    2640:	4618      	mov	r0, r3
    2642:	f000 f893 	bl	276c <TraceNL>
		/*	Copy data (already) located in RAM to flash */
		if (rc == IAP_STA_CMD_SUCCESS) {
    2646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    264a:	2b00      	cmp	r3, #0
    264c:	d102      	bne.n	2654 <WriteImageSignature+0xec>
			TraceNL("copied ");
    264e:	480c      	ldr	r0, [pc, #48]	; (2680 <WriteImageSignature+0x118>)
    2650:	f000 f88c 	bl	276c <TraceNL>
		}
	}

	return;
    2654:	bf00      	nop
}
    2656:	f507 778c 	add.w	r7, r7, #280	; 0x118
    265a:	46bd      	mov	sp, r7
    265c:	bd80      	pop	{r7, pc}
    265e:	bf00      	nop
    2660:	0006fc00 	.word	0x0006fc00
    2664:	00007470 	.word	0x00007470
    2668:	10000038 	.word	0x10000038
    266c:	10000434 	.word	0x10000434
    2670:	10000430 	.word	0x10000430
    2674:	000073f8 	.word	0x000073f8
    2678:	00007498 	.word	0x00007498
    267c:	00007404 	.word	0x00007404
    2680:	00007420 	.word	0x00007420

00002684 <IsSecondaryImageValid>:


static int32_t IsSecondaryImageValid( void )
{
    2684:	b580      	push	{r7, lr}
    2686:	b09c      	sub	sp, #112	; 0x70
    2688:	af00      	add	r7, sp, #0
	char buffer[100];

	uint32_t size = *(uint32_t *)(SECONDARY_IMAGE_END_ADDR - 8);
    268a:	4b1a      	ldr	r3, [pc, #104]	; (26f4 <IsSecondaryImageValid+0x70>)
    268c:	681b      	ldr	r3, [r3, #0]
    268e:	66fb      	str	r3, [r7, #108]	; 0x6c

	uint16_t crc  = *(uint16_t *)(SECONDARY_IMAGE_END_ADDR - 4);
    2690:	4b19      	ldr	r3, [pc, #100]	; (26f8 <IsSecondaryImageValid+0x74>)
    2692:	881b      	ldrh	r3, [r3, #0]
    2694:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	sprintf(buffer, "Signature: 0x%X   CRC : %X\r\n", size, crc);
    2698:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
    269c:	1d3a      	adds	r2, r7, #4
    269e:	4610      	mov	r0, r2
    26a0:	4916      	ldr	r1, [pc, #88]	; (26fc <IsSecondaryImageValid+0x78>)
    26a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    26a4:	f001 fbc6 	bl	3e34 <sprintf>
	Trace( buffer );
    26a8:	1d3b      	adds	r3, r7, #4
    26aa:	4618      	mov	r0, r3
    26ac:	f000 f84e 	bl	274c <Trace>

	uint16_t calculatedCRC = u16CRC_Calc16( SECONDARY_IMAGE_LOAD_ADDR, size );
    26b0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    26b4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
    26b6:	f7fe fddd 	bl	1274 <u16CRC_Calc16>
    26ba:	4603      	mov	r3, r0
    26bc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

	sprintf( buffer, "Calculated Image CRC: 0x%X\r\n", calculatedCRC );
    26c0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
    26c4:	1d3a      	adds	r2, r7, #4
    26c6:	4610      	mov	r0, r2
    26c8:	490d      	ldr	r1, [pc, #52]	; (2700 <IsSecondaryImageValid+0x7c>)
    26ca:	461a      	mov	r2, r3
    26cc:	f001 fbb2 	bl	3e34 <sprintf>
	Trace( buffer );
    26d0:	1d3b      	adds	r3, r7, #4
    26d2:	4618      	mov	r0, r3
    26d4:	f000 f83a 	bl	274c <Trace>

	if( crc == calculatedCRC )
    26d8:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
    26dc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
    26e0:	429a      	cmp	r2, r3
    26e2:	d101      	bne.n	26e8 <IsSecondaryImageValid+0x64>
		return ( 0 );  // image is valid
    26e4:	2300      	movs	r3, #0
    26e6:	e000      	b.n	26ea <IsSecondaryImageValid+0x66>

	return ( 1 );  //image is not valid
    26e8:	2301      	movs	r3, #1
}
    26ea:	4618      	mov	r0, r3
    26ec:	3770      	adds	r7, #112	; 0x70
    26ee:	46bd      	mov	sp, r7
    26f0:	bd80      	pop	{r7, pc}
    26f2:	bf00      	nop
    26f4:	0006fff8 	.word	0x0006fff8
    26f8:	0006fffc 	.word	0x0006fffc
    26fc:	000074a0 	.word	0x000074a0
    2700:	000074c0 	.word	0x000074c0

00002704 <SysTick_Handler>:
 *  Created on: 14 Kas 2012
 *      Author: trio
 */
#include <LPC17xx.h>
#include "timer.h"
void SysTick_Handler(void) {
    2704:	b480      	push	{r7}
    2706:	af00      	add	r7, sp, #0
	STT_Value++;
    2708:	4b04      	ldr	r3, [pc, #16]	; (271c <SysTick_Handler+0x18>)
    270a:	681b      	ldr	r3, [r3, #0]
    270c:	3301      	adds	r3, #1
    270e:	4a03      	ldr	r2, [pc, #12]	; (271c <SysTick_Handler+0x18>)
    2710:	6013      	str	r3, [r2, #0]
}
    2712:	46bd      	mov	sp, r7
    2714:	f85d 7b04 	ldr.w	r7, [sp], #4
    2718:	4770      	bx	lr
    271a:	bf00      	nop
    271c:	10000d24 	.word	0x10000d24

00002720 <DelayMs>:

void DelayMs(unsigned int t) // 65536 max.
{
    2720:	b480      	push	{r7}
    2722:	b085      	sub	sp, #20
    2724:	af00      	add	r7, sp, #0
    2726:	6078      	str	r0, [r7, #4]
	unsigned long temp;
	temp = STT_Value;
    2728:	4b07      	ldr	r3, [pc, #28]	; (2748 <DelayMs+0x28>)
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	60fb      	str	r3, [r7, #12]
	while ((STT_Value - temp) < t);
    272e:	bf00      	nop
    2730:	4b05      	ldr	r3, [pc, #20]	; (2748 <DelayMs+0x28>)
    2732:	681a      	ldr	r2, [r3, #0]
    2734:	68fb      	ldr	r3, [r7, #12]
    2736:	1ad2      	subs	r2, r2, r3
    2738:	687b      	ldr	r3, [r7, #4]
    273a:	429a      	cmp	r2, r3
    273c:	d3f8      	bcc.n	2730 <DelayMs+0x10>
}
    273e:	3714      	adds	r7, #20
    2740:	46bd      	mov	sp, r7
    2742:	f85d 7b04 	ldr.w	r7, [sp], #4
    2746:	4770      	bx	lr
    2748:	10000d24 	.word	0x10000d24

0000274c <Trace>:
#include <string.h>
#include <trace.h>


void Trace( char* msg)
{
    274c:	b580      	push	{r7, lr}
    274e:	b082      	sub	sp, #8
    2750:	af00      	add	r7, sp, #0
    2752:	6078      	str	r0, [r7, #4]

	UARTSend(PORT_TRACE, (unsigned char*)msg, strlen(msg));
    2754:	6878      	ldr	r0, [r7, #4]
    2756:	f002 ffd3 	bl	5700 <strlen>
    275a:	4603      	mov	r3, r0
    275c:	2000      	movs	r0, #0
    275e:	6879      	ldr	r1, [r7, #4]
    2760:	461a      	mov	r2, r3
    2762:	f000 fcf1 	bl	3148 <UARTSend>

}
    2766:	3708      	adds	r7, #8
    2768:	46bd      	mov	sp, r7
    276a:	bd80      	pop	{r7, pc}

0000276c <TraceNL>:

void TraceNL( char* msg)
{
    276c:	b580      	push	{r7, lr}
    276e:	b082      	sub	sp, #8
    2770:	af00      	add	r7, sp, #0
    2772:	6078      	str	r0, [r7, #4]
	UARTSend(PORT_TRACE, (unsigned char*)msg, strlen(msg));
    2774:	6878      	ldr	r0, [r7, #4]
    2776:	f002 ffc3 	bl	5700 <strlen>
    277a:	4603      	mov	r3, r0
    277c:	2000      	movs	r0, #0
    277e:	6879      	ldr	r1, [r7, #4]
    2780:	461a      	mov	r2, r3
    2782:	f000 fce1 	bl	3148 <UARTSend>
	UARTSend(PORT_TRACE, (unsigned char*)"\r\n", 2);
    2786:	2000      	movs	r0, #0
    2788:	4903      	ldr	r1, [pc, #12]	; (2798 <TraceNL+0x2c>)
    278a:	2202      	movs	r2, #2
    278c:	f000 fcdc 	bl	3148 <UARTSend>
}
    2790:	3708      	adds	r7, #8
    2792:	46bd      	mov	sp, r7
    2794:	bd80      	pop	{r7, pc}
    2796:	bf00      	nop
    2798:	000074e0 	.word	0x000074e0

0000279c <TracePutc>:

void TracePutc( char c )
{
    279c:	b580      	push	{r7, lr}
    279e:	b082      	sub	sp, #8
    27a0:	af00      	add	r7, sp, #0
    27a2:	4603      	mov	r3, r0
    27a4:	71fb      	strb	r3, [r7, #7]
	UARTSend(PORT_TRACE, (unsigned char*)&c, 1L);
    27a6:	1dfb      	adds	r3, r7, #7
    27a8:	2000      	movs	r0, #0
    27aa:	4619      	mov	r1, r3
    27ac:	2201      	movs	r2, #1
    27ae:	f000 fccb 	bl	3148 <UARTSend>
}
    27b2:	3708      	adds	r7, #8
    27b4:	46bd      	mov	sp, r7
    27b6:	bd80      	pop	{r7, pc}

000027b8 <TracePutcHex>:

void TracePutcHex( char c )
{
    27b8:	b580      	push	{r7, lr}
    27ba:	b086      	sub	sp, #24
    27bc:	af00      	add	r7, sp, #0
    27be:	4603      	mov	r3, r0
    27c0:	71fb      	strb	r3, [r7, #7]
	unsigned char  buff[10];
    int count;
	count = sprintf( buff, "%02x", c);
    27c2:	79fb      	ldrb	r3, [r7, #7]
    27c4:	f107 0208 	add.w	r2, r7, #8
    27c8:	4610      	mov	r0, r2
    27ca:	4908      	ldr	r1, [pc, #32]	; (27ec <TracePutcHex+0x34>)
    27cc:	461a      	mov	r2, r3
    27ce:	f001 fb31 	bl	3e34 <sprintf>
    27d2:	6178      	str	r0, [r7, #20]
	UARTSend( PORT_TRACE, buff, count );
    27d4:	697b      	ldr	r3, [r7, #20]
    27d6:	f107 0208 	add.w	r2, r7, #8
    27da:	2000      	movs	r0, #0
    27dc:	4611      	mov	r1, r2
    27de:	461a      	mov	r2, r3
    27e0:	f000 fcb2 	bl	3148 <UARTSend>

}
    27e4:	3718      	adds	r7, #24
    27e6:	46bd      	mov	sp, r7
    27e8:	bd80      	pop	{r7, pc}
    27ea:	bf00      	nop
    27ec:	000074e4 	.word	0x000074e4

000027f0 <TraceDumpHex>:

void TraceDumpHex( char* pMsg, int len )
{
    27f0:	b580      	push	{r7, lr}
    27f2:	b0d6      	sub	sp, #344	; 0x158
    27f4:	af00      	add	r7, sp, #0
    27f6:	1d3b      	adds	r3, r7, #4
    27f8:	6018      	str	r0, [r3, #0]
    27fa:	463b      	mov	r3, r7
    27fc:	6019      	str	r1, [r3, #0]
#if defined (BOOTROM_DEBUG)

	int i, count;
	unsigned char buffer[300];
	unsigned char buff[17];
	unsigned char *pc = (unsigned char*) pMsg;
    27fe:	1d3b      	adds	r3, r7, #4
    2800:	681b      	ldr	r3, [r3, #0]
    2802:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

	UARTSend( PORT_TRACE, "\r\n", 2);
    2806:	2000      	movs	r0, #0
    2808:	495a      	ldr	r1, [pc, #360]	; (2974 <TraceDumpHex+0x184>)
    280a:	2202      	movs	r2, #2
    280c:	f000 fc9c 	bl	3148 <UARTSend>
	// Process every byte in the data.
	for (i = 0; i < len; i++) {
    2810:	2300      	movs	r3, #0
    2812:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    2816:	e07d      	b.n	2914 <TraceDumpHex+0x124>
		// Multiple of 16 means new line (with line offset).

		if ((i % 16) == 0) {
    2818:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    281c:	f003 030f 	and.w	r3, r3, #15
    2820:	2b00      	cmp	r3, #0
    2822:	d117      	bne.n	2854 <TraceDumpHex+0x64>
			// Just don't print ASCII for the zeroth line.
			if (i != 0) {
    2824:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    2828:	2b00      	cmp	r3, #0
    282a:	d013      	beq.n	2854 <TraceDumpHex+0x64>
				count = sprintf(buffer, "  %s\r\n", buff);
    282c:	f107 0220 	add.w	r2, r7, #32
    2830:	f107 030c 	add.w	r3, r7, #12
    2834:	4610      	mov	r0, r2
    2836:	4950      	ldr	r1, [pc, #320]	; (2978 <TraceDumpHex+0x188>)
    2838:	461a      	mov	r2, r3
    283a:	f001 fafb 	bl	3e34 <sprintf>
    283e:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
				UARTSend( PORT_TRACE, buffer, count);
    2842:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    2846:	f107 0220 	add.w	r2, r7, #32
    284a:	2000      	movs	r0, #0
    284c:	4611      	mov	r1, r2
    284e:	461a      	mov	r2, r3
    2850:	f000 fc7a 	bl	3148 <UARTSend>
			}
		}
		count = sprintf(buffer, " %02x", pc[i]);
    2854:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    2858:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    285c:	4413      	add	r3, r2
    285e:	781b      	ldrb	r3, [r3, #0]
    2860:	461a      	mov	r2, r3
    2862:	f107 0320 	add.w	r3, r7, #32
    2866:	4618      	mov	r0, r3
    2868:	4944      	ldr	r1, [pc, #272]	; (297c <TraceDumpHex+0x18c>)
    286a:	f001 fae3 	bl	3e34 <sprintf>
    286e:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
		UARTSend( PORT_TRACE, buffer, count );
    2872:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    2876:	f107 0220 	add.w	r2, r7, #32
    287a:	2000      	movs	r0, #0
    287c:	4611      	mov	r1, r2
    287e:	461a      	mov	r2, r3
    2880:	f000 fc62 	bl	3148 <UARTSend>

		// And store a printable ASCII character for later.
		if ((pc[i] < 0x20) || (pc[i] > 0x7e))
    2884:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    2888:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    288c:	4413      	add	r3, r2
    288e:	781b      	ldrb	r3, [r3, #0]
    2890:	2b1f      	cmp	r3, #31
    2892:	d907      	bls.n	28a4 <TraceDumpHex+0xb4>
    2894:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    2898:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    289c:	4413      	add	r3, r2
    289e:	781b      	ldrb	r3, [r3, #0]
    28a0:	2b7e      	cmp	r3, #126	; 0x7e
    28a2:	d90f      	bls.n	28c4 <TraceDumpHex+0xd4>
			buff[i % 16] = '.';
    28a4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    28a8:	4b35      	ldr	r3, [pc, #212]	; (2980 <TraceDumpHex+0x190>)
    28aa:	4013      	ands	r3, r2
    28ac:	2b00      	cmp	r3, #0
    28ae:	da03      	bge.n	28b8 <TraceDumpHex+0xc8>
    28b0:	3b01      	subs	r3, #1
    28b2:	f063 030f 	orn	r3, r3, #15
    28b6:	3301      	adds	r3, #1
    28b8:	461a      	mov	r2, r3
    28ba:	f107 030c 	add.w	r3, r7, #12
    28be:	212e      	movs	r1, #46	; 0x2e
    28c0:	5499      	strb	r1, [r3, r2]
    28c2:	e013      	b.n	28ec <TraceDumpHex+0xfc>
		else
			buff[i % 16] = pc[i];
    28c4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    28c8:	4b2d      	ldr	r3, [pc, #180]	; (2980 <TraceDumpHex+0x190>)
    28ca:	4013      	ands	r3, r2
    28cc:	2b00      	cmp	r3, #0
    28ce:	da03      	bge.n	28d8 <TraceDumpHex+0xe8>
    28d0:	3b01      	subs	r3, #1
    28d2:	f063 030f 	orn	r3, r3, #15
    28d6:	3301      	adds	r3, #1
    28d8:	4619      	mov	r1, r3
    28da:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    28de:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    28e2:	4413      	add	r3, r2
    28e4:	781a      	ldrb	r2, [r3, #0]
    28e6:	f107 030c 	add.w	r3, r7, #12
    28ea:	545a      	strb	r2, [r3, r1]
		buff[(i % 16) + 1] = '\0';
    28ec:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    28f0:	4b23      	ldr	r3, [pc, #140]	; (2980 <TraceDumpHex+0x190>)
    28f2:	4013      	ands	r3, r2
    28f4:	2b00      	cmp	r3, #0
    28f6:	da03      	bge.n	2900 <TraceDumpHex+0x110>
    28f8:	3b01      	subs	r3, #1
    28fa:	f063 030f 	orn	r3, r3, #15
    28fe:	3301      	adds	r3, #1
    2900:	3301      	adds	r3, #1
    2902:	f107 020c 	add.w	r2, r7, #12
    2906:	2100      	movs	r1, #0
    2908:	54d1      	strb	r1, [r2, r3]
	unsigned char buff[17];
	unsigned char *pc = (unsigned char*) pMsg;

	UARTSend( PORT_TRACE, "\r\n", 2);
	// Process every byte in the data.
	for (i = 0; i < len; i++) {
    290a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    290e:	3301      	adds	r3, #1
    2910:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    2914:	463b      	mov	r3, r7
    2916:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    291a:	681b      	ldr	r3, [r3, #0]
    291c:	429a      	cmp	r2, r3
    291e:	f6ff af7b 	blt.w	2818 <TraceDumpHex+0x28>
			buff[i % 16] = pc[i];
		buff[(i % 16) + 1] = '\0';
	}

    // Pad out last line if not exactly 16 characters.
    while ((i % 16) != 0) {
    2922:	e009      	b.n	2938 <TraceDumpHex+0x148>
    	UARTSend( PORT_TRACE, "   ", 3);
    2924:	2000      	movs	r0, #0
    2926:	4917      	ldr	r1, [pc, #92]	; (2984 <TraceDumpHex+0x194>)
    2928:	2203      	movs	r2, #3
    292a:	f000 fc0d 	bl	3148 <UARTSend>
        i++;
    292e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    2932:	3301      	adds	r3, #1
    2934:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			buff[i % 16] = pc[i];
		buff[(i % 16) + 1] = '\0';
	}

    // Pad out last line if not exactly 16 characters.
    while ((i % 16) != 0) {
    2938:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    293c:	f003 030f 	and.w	r3, r3, #15
    2940:	2b00      	cmp	r3, #0
    2942:	d1ef      	bne.n	2924 <TraceDumpHex+0x134>
    	UARTSend( PORT_TRACE, "   ", 3);
        i++;
    }
	count = sprintf(buffer, "  %s\r\n", buff);
    2944:	f107 0220 	add.w	r2, r7, #32
    2948:	f107 030c 	add.w	r3, r7, #12
    294c:	4610      	mov	r0, r2
    294e:	490a      	ldr	r1, [pc, #40]	; (2978 <TraceDumpHex+0x188>)
    2950:	461a      	mov	r2, r3
    2952:	f001 fa6f 	bl	3e34 <sprintf>
    2956:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
	UARTSend( PORT_TRACE, buffer, count);
    295a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    295e:	f107 0220 	add.w	r2, r7, #32
    2962:	2000      	movs	r0, #0
    2964:	4611      	mov	r1, r2
    2966:	461a      	mov	r2, r3
    2968:	f000 fbee 	bl	3148 <UARTSend>
#endif
}
    296c:	f507 77ac 	add.w	r7, r7, #344	; 0x158
    2970:	46bd      	mov	sp, r7
    2972:	bd80      	pop	{r7, pc}
    2974:	000074e0 	.word	0x000074e0
    2978:	000074ec 	.word	0x000074ec
    297c:	000074f4 	.word	0x000074f4
    2980:	8000000f 	.word	0x8000000f
    2984:	000074fc 	.word	0x000074fc

00002988 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    2988:	b480      	push	{r7}
    298a:	b083      	sub	sp, #12
    298c:	af00      	add	r7, sp, #0
    298e:	4603      	mov	r3, r0
    2990:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    2992:	4908      	ldr	r1, [pc, #32]	; (29b4 <NVIC_EnableIRQ+0x2c>)
    2994:	f997 3007 	ldrsb.w	r3, [r7, #7]
    2998:	095b      	lsrs	r3, r3, #5
    299a:	79fa      	ldrb	r2, [r7, #7]
    299c:	f002 021f 	and.w	r2, r2, #31
    29a0:	2001      	movs	r0, #1
    29a2:	fa00 f202 	lsl.w	r2, r0, r2
    29a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    29aa:	370c      	adds	r7, #12
    29ac:	46bd      	mov	sp, r7
    29ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    29b2:	4770      	bx	lr
    29b4:	e000e100 	.word	0xe000e100

000029b8 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
    29b8:	b480      	push	{r7}
    29ba:	b083      	sub	sp, #12
    29bc:	af00      	add	r7, sp, #0
    29be:	4603      	mov	r3, r0
    29c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    29c2:	4909      	ldr	r1, [pc, #36]	; (29e8 <NVIC_DisableIRQ+0x30>)
    29c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    29c8:	095b      	lsrs	r3, r3, #5
    29ca:	79fa      	ldrb	r2, [r7, #7]
    29cc:	f002 021f 	and.w	r2, r2, #31
    29d0:	2001      	movs	r0, #1
    29d2:	fa00 f202 	lsl.w	r2, r0, r2
    29d6:	3320      	adds	r3, #32
    29d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    29dc:	370c      	adds	r7, #12
    29de:	46bd      	mov	sp, r7
    29e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    29e4:	4770      	bx	lr
    29e6:	bf00      	nop
    29e8:	e000e100 	.word	0xe000e100

000029ec <UART0_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART0_IRQHandler(void) {
    29ec:	b480      	push	{r7}
    29ee:	b083      	sub	sp, #12
    29f0:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART0->IIR;
    29f2:	4b3b      	ldr	r3, [pc, #236]	; (2ae0 <UART0_IRQHandler+0xf4>)
    29f4:	689b      	ldr	r3, [r3, #8]
    29f6:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    29f8:	79bb      	ldrb	r3, [r7, #6]
    29fa:	085b      	lsrs	r3, r3, #1
    29fc:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    29fe:	79bb      	ldrb	r3, [r7, #6]
    2a00:	f003 0307 	and.w	r3, r3, #7
    2a04:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    2a06:	79bb      	ldrb	r3, [r7, #6]
    2a08:	2b03      	cmp	r3, #3
    2a0a:	d12c      	bne.n	2a66 <UART0_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART0->LSR;
    2a0c:	4b34      	ldr	r3, [pc, #208]	; (2ae0 <UART0_IRQHandler+0xf4>)
    2a0e:	7d1b      	ldrb	r3, [r3, #20]
    2a10:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2a12:	797b      	ldrb	r3, [r7, #5]
    2a14:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2a18:	2b00      	cmp	r3, #0
    2a1a:	d006      	beq.n	2a2a <UART0_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART0Status = LSRValue;
    2a1c:	797b      	ldrb	r3, [r7, #5]
    2a1e:	4a31      	ldr	r2, [pc, #196]	; (2ae4 <UART0_IRQHandler+0xf8>)
    2a20:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART0->RBR; /* Dummy read on RX to clear
    2a22:	4b2f      	ldr	r3, [pc, #188]	; (2ae0 <UART0_IRQHandler+0xf4>)
    2a24:	781b      	ldrb	r3, [r3, #0]
    2a26:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2a28:	e055      	b.n	2ad6 <UART0_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    2a2a:	797b      	ldrb	r3, [r7, #5]
    2a2c:	f003 0301 	and.w	r3, r3, #1
    2a30:	2b00      	cmp	r3, #0
    2a32:	d050      	beq.n	2ad6 <UART0_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART0Buffer[UART0Count] = LPC_UART0->RBR;
    2a34:	4b2c      	ldr	r3, [pc, #176]	; (2ae8 <UART0_IRQHandler+0xfc>)
    2a36:	881b      	ldrh	r3, [r3, #0]
    2a38:	b29b      	uxth	r3, r3
    2a3a:	461a      	mov	r2, r3
    2a3c:	4b28      	ldr	r3, [pc, #160]	; (2ae0 <UART0_IRQHandler+0xf4>)
    2a3e:	781b      	ldrb	r3, [r3, #0]
    2a40:	b2d9      	uxtb	r1, r3
    2a42:	4b2a      	ldr	r3, [pc, #168]	; (2aec <UART0_IRQHandler+0x100>)
    2a44:	5499      	strb	r1, [r3, r2]
			UART0Count++;
    2a46:	4b28      	ldr	r3, [pc, #160]	; (2ae8 <UART0_IRQHandler+0xfc>)
    2a48:	881b      	ldrh	r3, [r3, #0]
    2a4a:	b29b      	uxth	r3, r3
    2a4c:	3301      	adds	r3, #1
    2a4e:	b29a      	uxth	r2, r3
    2a50:	4b25      	ldr	r3, [pc, #148]	; (2ae8 <UART0_IRQHandler+0xfc>)
    2a52:	801a      	strh	r2, [r3, #0]
			if (UART0Count == BUFSIZE) {
    2a54:	4b24      	ldr	r3, [pc, #144]	; (2ae8 <UART0_IRQHandler+0xfc>)
    2a56:	881b      	ldrh	r3, [r3, #0]
    2a58:	b29b      	uxth	r3, r3
    2a5a:	2bff      	cmp	r3, #255	; 0xff
    2a5c:	d13b      	bne.n	2ad6 <UART0_IRQHandler+0xea>
				UART0Count = 0; /* buffer overflow */
    2a5e:	4b22      	ldr	r3, [pc, #136]	; (2ae8 <UART0_IRQHandler+0xfc>)
    2a60:	2200      	movs	r2, #0
    2a62:	801a      	strh	r2, [r3, #0]
    2a64:	e037      	b.n	2ad6 <UART0_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2a66:	79bb      	ldrb	r3, [r7, #6]
    2a68:	2b02      	cmp	r3, #2
    2a6a:	d118      	bne.n	2a9e <UART0_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART0Buffer[UART0Count] = LPC_UART0->RBR;
    2a6c:	4b1e      	ldr	r3, [pc, #120]	; (2ae8 <UART0_IRQHandler+0xfc>)
    2a6e:	881b      	ldrh	r3, [r3, #0]
    2a70:	b29b      	uxth	r3, r3
    2a72:	461a      	mov	r2, r3
    2a74:	4b1a      	ldr	r3, [pc, #104]	; (2ae0 <UART0_IRQHandler+0xf4>)
    2a76:	781b      	ldrb	r3, [r3, #0]
    2a78:	b2d9      	uxtb	r1, r3
    2a7a:	4b1c      	ldr	r3, [pc, #112]	; (2aec <UART0_IRQHandler+0x100>)
    2a7c:	5499      	strb	r1, [r3, r2]
		UART0Count++;
    2a7e:	4b1a      	ldr	r3, [pc, #104]	; (2ae8 <UART0_IRQHandler+0xfc>)
    2a80:	881b      	ldrh	r3, [r3, #0]
    2a82:	b29b      	uxth	r3, r3
    2a84:	3301      	adds	r3, #1
    2a86:	b29a      	uxth	r2, r3
    2a88:	4b17      	ldr	r3, [pc, #92]	; (2ae8 <UART0_IRQHandler+0xfc>)
    2a8a:	801a      	strh	r2, [r3, #0]
		if (UART0Count == BUFSIZE) {
    2a8c:	4b16      	ldr	r3, [pc, #88]	; (2ae8 <UART0_IRQHandler+0xfc>)
    2a8e:	881b      	ldrh	r3, [r3, #0]
    2a90:	b29b      	uxth	r3, r3
    2a92:	2bff      	cmp	r3, #255	; 0xff
    2a94:	d11f      	bne.n	2ad6 <UART0_IRQHandler+0xea>
			UART0Count = 0; /* buffer overflow */
    2a96:	4b14      	ldr	r3, [pc, #80]	; (2ae8 <UART0_IRQHandler+0xfc>)
    2a98:	2200      	movs	r2, #0
    2a9a:	801a      	strh	r2, [r3, #0]
    2a9c:	e01b      	b.n	2ad6 <UART0_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2a9e:	79bb      	ldrb	r3, [r7, #6]
    2aa0:	2b06      	cmp	r3, #6
    2aa2:	d106      	bne.n	2ab2 <UART0_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART0Status |= 0x100; /* Bit 9 as the CTI error */
    2aa4:	4b0f      	ldr	r3, [pc, #60]	; (2ae4 <UART0_IRQHandler+0xf8>)
    2aa6:	681b      	ldr	r3, [r3, #0]
    2aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2aac:	4a0d      	ldr	r2, [pc, #52]	; (2ae4 <UART0_IRQHandler+0xf8>)
    2aae:	6013      	str	r3, [r2, #0]
    2ab0:	e011      	b.n	2ad6 <UART0_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2ab2:	79bb      	ldrb	r3, [r7, #6]
    2ab4:	2b01      	cmp	r3, #1
    2ab6:	d10e      	bne.n	2ad6 <UART0_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART0->LSR; /* Check status in the LSR to see if
    2ab8:	4b09      	ldr	r3, [pc, #36]	; (2ae0 <UART0_IRQHandler+0xf4>)
    2aba:	7d1b      	ldrb	r3, [r3, #20]
    2abc:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    2abe:	797b      	ldrb	r3, [r7, #5]
    2ac0:	f003 0320 	and.w	r3, r3, #32
    2ac4:	2b00      	cmp	r3, #0
    2ac6:	d003      	beq.n	2ad0 <UART0_IRQHandler+0xe4>
			UART0TxEmpty = 1;
    2ac8:	4b09      	ldr	r3, [pc, #36]	; (2af0 <UART0_IRQHandler+0x104>)
    2aca:	2201      	movs	r2, #1
    2acc:	701a      	strb	r2, [r3, #0]
    2ace:	e002      	b.n	2ad6 <UART0_IRQHandler+0xea>
		} else {
			UART0TxEmpty = 0;
    2ad0:	4b07      	ldr	r3, [pc, #28]	; (2af0 <UART0_IRQHandler+0x104>)
    2ad2:	2200      	movs	r2, #0
    2ad4:	701a      	strb	r2, [r3, #0]
		}
	}
}
    2ad6:	370c      	adds	r7, #12
    2ad8:	46bd      	mov	sp, r7
    2ada:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ade:	4770      	bx	lr
    2ae0:	4000c000 	.word	0x4000c000
    2ae4:	10001ecc 	.word	0x10001ecc
    2ae8:	10000440 	.word	0x10000440
    2aec:	100014cc 	.word	0x100014cc
    2af0:	10000020 	.word	0x10000020

00002af4 <UART1_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART1_IRQHandler(void) {
    2af4:	b480      	push	{r7}
    2af6:	b083      	sub	sp, #12
    2af8:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART1->IIR;
    2afa:	4b3d      	ldr	r3, [pc, #244]	; (2bf0 <UART1_IRQHandler+0xfc>)
    2afc:	689b      	ldr	r3, [r3, #8]
    2afe:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    2b00:	79bb      	ldrb	r3, [r7, #6]
    2b02:	085b      	lsrs	r3, r3, #1
    2b04:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    2b06:	79bb      	ldrb	r3, [r7, #6]
    2b08:	f003 0307 	and.w	r3, r3, #7
    2b0c:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    2b0e:	79bb      	ldrb	r3, [r7, #6]
    2b10:	2b03      	cmp	r3, #3
    2b12:	d12e      	bne.n	2b72 <UART1_IRQHandler+0x7e>
	{
		LSRValue = LPC_UART1->LSR;
    2b14:	4b36      	ldr	r3, [pc, #216]	; (2bf0 <UART1_IRQHandler+0xfc>)
    2b16:	7d1b      	ldrb	r3, [r3, #20]
    2b18:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2b1a:	797b      	ldrb	r3, [r7, #5]
    2b1c:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2b20:	2b00      	cmp	r3, #0
    2b22:	d006      	beq.n	2b32 <UART1_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART1Status = LSRValue;
    2b24:	797b      	ldrb	r3, [r7, #5]
    2b26:	4a33      	ldr	r2, [pc, #204]	; (2bf4 <UART1_IRQHandler+0x100>)
    2b28:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART1->RBR; /* Dummy read on RX to clear
    2b2a:	4b31      	ldr	r3, [pc, #196]	; (2bf0 <UART1_IRQHandler+0xfc>)
    2b2c:	781b      	ldrb	r3, [r3, #0]
    2b2e:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2b30:	e059      	b.n	2be6 <UART1_IRQHandler+0xf2>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    2b32:	797b      	ldrb	r3, [r7, #5]
    2b34:	f003 0301 	and.w	r3, r3, #1
    2b38:	2b00      	cmp	r3, #0
    2b3a:	d054      	beq.n	2be6 <UART1_IRQHandler+0xf2>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART1Buffer[UART1Count] = LPC_UART1->RBR;
    2b3c:	4b2e      	ldr	r3, [pc, #184]	; (2bf8 <UART1_IRQHandler+0x104>)
    2b3e:	881b      	ldrh	r3, [r3, #0]
    2b40:	b29b      	uxth	r3, r3
    2b42:	461a      	mov	r2, r3
    2b44:	4b2a      	ldr	r3, [pc, #168]	; (2bf0 <UART1_IRQHandler+0xfc>)
    2b46:	781b      	ldrb	r3, [r3, #0]
    2b48:	b2d9      	uxtb	r1, r3
    2b4a:	4b2c      	ldr	r3, [pc, #176]	; (2bfc <UART1_IRQHandler+0x108>)
    2b4c:	5499      	strb	r1, [r3, r2]
			UART1Count++;
    2b4e:	4b2a      	ldr	r3, [pc, #168]	; (2bf8 <UART1_IRQHandler+0x104>)
    2b50:	881b      	ldrh	r3, [r3, #0]
    2b52:	b29b      	uxth	r3, r3
    2b54:	3301      	adds	r3, #1
    2b56:	b29a      	uxth	r2, r3
    2b58:	4b27      	ldr	r3, [pc, #156]	; (2bf8 <UART1_IRQHandler+0x104>)
    2b5a:	801a      	strh	r2, [r3, #0]
			if (UART1Count == GSM_UART_BUFFER_SIZE) {
    2b5c:	4b26      	ldr	r3, [pc, #152]	; (2bf8 <UART1_IRQHandler+0x104>)
    2b5e:	881b      	ldrh	r3, [r3, #0]
    2b60:	b29b      	uxth	r3, r3
    2b62:	f240 424c 	movw	r2, #1100	; 0x44c
    2b66:	4293      	cmp	r3, r2
    2b68:	d13d      	bne.n	2be6 <UART1_IRQHandler+0xf2>
				UART1Count = 0; /* buffer overflow */
    2b6a:	4b23      	ldr	r3, [pc, #140]	; (2bf8 <UART1_IRQHandler+0x104>)
    2b6c:	2200      	movs	r2, #0
    2b6e:	801a      	strh	r2, [r3, #0]
    2b70:	e039      	b.n	2be6 <UART1_IRQHandler+0xf2>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2b72:	79bb      	ldrb	r3, [r7, #6]
    2b74:	2b02      	cmp	r3, #2
    2b76:	d11a      	bne.n	2bae <UART1_IRQHandler+0xba>
	{
		/* Receive Data Available */
		UART1Buffer[UART1Count] = LPC_UART1->RBR;
    2b78:	4b1f      	ldr	r3, [pc, #124]	; (2bf8 <UART1_IRQHandler+0x104>)
    2b7a:	881b      	ldrh	r3, [r3, #0]
    2b7c:	b29b      	uxth	r3, r3
    2b7e:	461a      	mov	r2, r3
    2b80:	4b1b      	ldr	r3, [pc, #108]	; (2bf0 <UART1_IRQHandler+0xfc>)
    2b82:	781b      	ldrb	r3, [r3, #0]
    2b84:	b2d9      	uxtb	r1, r3
    2b86:	4b1d      	ldr	r3, [pc, #116]	; (2bfc <UART1_IRQHandler+0x108>)
    2b88:	5499      	strb	r1, [r3, r2]
		UART1Count++;
    2b8a:	4b1b      	ldr	r3, [pc, #108]	; (2bf8 <UART1_IRQHandler+0x104>)
    2b8c:	881b      	ldrh	r3, [r3, #0]
    2b8e:	b29b      	uxth	r3, r3
    2b90:	3301      	adds	r3, #1
    2b92:	b29a      	uxth	r2, r3
    2b94:	4b18      	ldr	r3, [pc, #96]	; (2bf8 <UART1_IRQHandler+0x104>)
    2b96:	801a      	strh	r2, [r3, #0]
		if (UART1Count == GSM_UART_BUFFER_SIZE) {
    2b98:	4b17      	ldr	r3, [pc, #92]	; (2bf8 <UART1_IRQHandler+0x104>)
    2b9a:	881b      	ldrh	r3, [r3, #0]
    2b9c:	b29b      	uxth	r3, r3
    2b9e:	f240 424c 	movw	r2, #1100	; 0x44c
    2ba2:	4293      	cmp	r3, r2
    2ba4:	d11f      	bne.n	2be6 <UART1_IRQHandler+0xf2>
			UART1Count = 0; /* buffer overflow */
    2ba6:	4b14      	ldr	r3, [pc, #80]	; (2bf8 <UART1_IRQHandler+0x104>)
    2ba8:	2200      	movs	r2, #0
    2baa:	801a      	strh	r2, [r3, #0]
    2bac:	e01b      	b.n	2be6 <UART1_IRQHandler+0xf2>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2bae:	79bb      	ldrb	r3, [r7, #6]
    2bb0:	2b06      	cmp	r3, #6
    2bb2:	d106      	bne.n	2bc2 <UART1_IRQHandler+0xce>
	{
		/* Character Time-out indicator */
		UART1Status |= 0x100; /* Bit 9 as the CTI error */
    2bb4:	4b0f      	ldr	r3, [pc, #60]	; (2bf4 <UART1_IRQHandler+0x100>)
    2bb6:	681b      	ldr	r3, [r3, #0]
    2bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2bbc:	4a0d      	ldr	r2, [pc, #52]	; (2bf4 <UART1_IRQHandler+0x100>)
    2bbe:	6013      	str	r3, [r2, #0]
    2bc0:	e011      	b.n	2be6 <UART1_IRQHandler+0xf2>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2bc2:	79bb      	ldrb	r3, [r7, #6]
    2bc4:	2b01      	cmp	r3, #1
    2bc6:	d10e      	bne.n	2be6 <UART1_IRQHandler+0xf2>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART1->LSR; /* Check status in the LSR to see if
    2bc8:	4b09      	ldr	r3, [pc, #36]	; (2bf0 <UART1_IRQHandler+0xfc>)
    2bca:	7d1b      	ldrb	r3, [r3, #20]
    2bcc:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    2bce:	797b      	ldrb	r3, [r7, #5]
    2bd0:	f003 0320 	and.w	r3, r3, #32
    2bd4:	2b00      	cmp	r3, #0
    2bd6:	d003      	beq.n	2be0 <UART1_IRQHandler+0xec>
			UART1TxEmpty = 1;
    2bd8:	4b09      	ldr	r3, [pc, #36]	; (2c00 <UART1_IRQHandler+0x10c>)
    2bda:	2201      	movs	r2, #1
    2bdc:	701a      	strb	r2, [r3, #0]
    2bde:	e002      	b.n	2be6 <UART1_IRQHandler+0xf2>
		} else {
			UART1TxEmpty = 0;
    2be0:	4b07      	ldr	r3, [pc, #28]	; (2c00 <UART1_IRQHandler+0x10c>)
    2be2:	2200      	movs	r2, #0
    2be4:	701a      	strb	r2, [r3, #0]
		}
	}

}
    2be6:	370c      	adds	r7, #12
    2be8:	46bd      	mov	sp, r7
    2bea:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bee:	4770      	bx	lr
    2bf0:	40010000 	.word	0x40010000
    2bf4:	100015cc 	.word	0x100015cc
    2bf8:	10000442 	.word	0x10000442
    2bfc:	10001070 	.word	0x10001070
    2c00:	10000021 	.word	0x10000021

00002c04 <UART2_IRQHandler>:

void UART2_IRQHandler(void) {
    2c04:	b480      	push	{r7}
    2c06:	b083      	sub	sp, #12
    2c08:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;
	IIRValue = LPC_UART2->IIR;
    2c0a:	4b3c      	ldr	r3, [pc, #240]	; (2cfc <UART2_IRQHandler+0xf8>)
    2c0c:	689b      	ldr	r3, [r3, #8]
    2c0e:	71bb      	strb	r3, [r7, #6]
	IIRValue >>= 1; /* skip pending bit in IIR */
    2c10:	79bb      	ldrb	r3, [r7, #6]
    2c12:	085b      	lsrs	r3, r3, #1
    2c14:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    2c16:	79bb      	ldrb	r3, [r7, #6]
    2c18:	f003 0307 	and.w	r3, r3, #7
    2c1c:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    2c1e:	79bb      	ldrb	r3, [r7, #6]
    2c20:	2b03      	cmp	r3, #3
    2c22:	d12d      	bne.n	2c80 <UART2_IRQHandler+0x7c>
	{
		LSRValue = LPC_UART2->LSR;
    2c24:	4b35      	ldr	r3, [pc, #212]	; (2cfc <UART2_IRQHandler+0xf8>)
    2c26:	7d1b      	ldrb	r3, [r3, #20]
    2c28:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2c2a:	797b      	ldrb	r3, [r7, #5]
    2c2c:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2c30:	2b00      	cmp	r3, #0
    2c32:	d006      	beq.n	2c42 <UART2_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART2Status = LSRValue;
    2c34:	797b      	ldrb	r3, [r7, #5]
    2c36:	4a32      	ldr	r2, [pc, #200]	; (2d00 <UART2_IRQHandler+0xfc>)
    2c38:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART2->RBR; /* Dummy read on RX to clear
    2c3a:	4b30      	ldr	r3, [pc, #192]	; (2cfc <UART2_IRQHandler+0xf8>)
    2c3c:	781b      	ldrb	r3, [r3, #0]
    2c3e:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2c40:	e057      	b.n	2cf2 <UART2_IRQHandler+0xee>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    2c42:	797b      	ldrb	r3, [r7, #5]
    2c44:	f003 0301 	and.w	r3, r3, #1
    2c48:	2b00      	cmp	r3, #0
    2c4a:	d052      	beq.n	2cf2 <UART2_IRQHandler+0xee>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART2Buffer[UART2Count] = LPC_UART2->RBR;
    2c4c:	4b2d      	ldr	r3, [pc, #180]	; (2d04 <UART2_IRQHandler+0x100>)
    2c4e:	881b      	ldrh	r3, [r3, #0]
    2c50:	b29b      	uxth	r3, r3
    2c52:	461a      	mov	r2, r3
    2c54:	4b29      	ldr	r3, [pc, #164]	; (2cfc <UART2_IRQHandler+0xf8>)
    2c56:	781b      	ldrb	r3, [r3, #0]
    2c58:	b2d9      	uxtb	r1, r3
    2c5a:	4b2b      	ldr	r3, [pc, #172]	; (2d08 <UART2_IRQHandler+0x104>)
    2c5c:	5499      	strb	r1, [r3, r2]
			UART2Count++;
    2c5e:	4b29      	ldr	r3, [pc, #164]	; (2d04 <UART2_IRQHandler+0x100>)
    2c60:	881b      	ldrh	r3, [r3, #0]
    2c62:	b29b      	uxth	r3, r3
    2c64:	3301      	adds	r3, #1
    2c66:	b29a      	uxth	r2, r3
    2c68:	4b26      	ldr	r3, [pc, #152]	; (2d04 <UART2_IRQHandler+0x100>)
    2c6a:	801a      	strh	r2, [r3, #0]
			if (UART2Count >= UART2_BUFFSIZE) {
    2c6c:	4b25      	ldr	r3, [pc, #148]	; (2d04 <UART2_IRQHandler+0x100>)
    2c6e:	881b      	ldrh	r3, [r3, #0]
    2c70:	b29b      	uxth	r3, r3
    2c72:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    2c76:	d33c      	bcc.n	2cf2 <UART2_IRQHandler+0xee>
				UART2Count = 0; /* buffer overflow */
    2c78:	4b22      	ldr	r3, [pc, #136]	; (2d04 <UART2_IRQHandler+0x100>)
    2c7a:	2200      	movs	r2, #0
    2c7c:	801a      	strh	r2, [r3, #0]
    2c7e:	e038      	b.n	2cf2 <UART2_IRQHandler+0xee>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2c80:	79bb      	ldrb	r3, [r7, #6]
    2c82:	2b02      	cmp	r3, #2
    2c84:	d119      	bne.n	2cba <UART2_IRQHandler+0xb6>
	{
		/* Receive Data Available */
		UART2Buffer[UART2Count] = LPC_UART2->RBR;
    2c86:	4b1f      	ldr	r3, [pc, #124]	; (2d04 <UART2_IRQHandler+0x100>)
    2c88:	881b      	ldrh	r3, [r3, #0]
    2c8a:	b29b      	uxth	r3, r3
    2c8c:	461a      	mov	r2, r3
    2c8e:	4b1b      	ldr	r3, [pc, #108]	; (2cfc <UART2_IRQHandler+0xf8>)
    2c90:	781b      	ldrb	r3, [r3, #0]
    2c92:	b2d9      	uxtb	r1, r3
    2c94:	4b1c      	ldr	r3, [pc, #112]	; (2d08 <UART2_IRQHandler+0x104>)
    2c96:	5499      	strb	r1, [r3, r2]
		UART2Count++;
    2c98:	4b1a      	ldr	r3, [pc, #104]	; (2d04 <UART2_IRQHandler+0x100>)
    2c9a:	881b      	ldrh	r3, [r3, #0]
    2c9c:	b29b      	uxth	r3, r3
    2c9e:	3301      	adds	r3, #1
    2ca0:	b29a      	uxth	r2, r3
    2ca2:	4b18      	ldr	r3, [pc, #96]	; (2d04 <UART2_IRQHandler+0x100>)
    2ca4:	801a      	strh	r2, [r3, #0]
		if (UART2Count >= UART2_BUFFSIZE) {
    2ca6:	4b17      	ldr	r3, [pc, #92]	; (2d04 <UART2_IRQHandler+0x100>)
    2ca8:	881b      	ldrh	r3, [r3, #0]
    2caa:	b29b      	uxth	r3, r3
    2cac:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    2cb0:	d31f      	bcc.n	2cf2 <UART2_IRQHandler+0xee>
			UART2Count = 0; /* buffer overflow */
    2cb2:	4b14      	ldr	r3, [pc, #80]	; (2d04 <UART2_IRQHandler+0x100>)
    2cb4:	2200      	movs	r2, #0
    2cb6:	801a      	strh	r2, [r3, #0]
    2cb8:	e01b      	b.n	2cf2 <UART2_IRQHandler+0xee>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2cba:	79bb      	ldrb	r3, [r7, #6]
    2cbc:	2b06      	cmp	r3, #6
    2cbe:	d106      	bne.n	2cce <UART2_IRQHandler+0xca>
	{
		/* Character Time-out indicator */
		UART2Status |= 0x100; /* Bit 9 as the CTI error */
    2cc0:	4b0f      	ldr	r3, [pc, #60]	; (2d00 <UART2_IRQHandler+0xfc>)
    2cc2:	681b      	ldr	r3, [r3, #0]
    2cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2cc8:	4a0d      	ldr	r2, [pc, #52]	; (2d00 <UART2_IRQHandler+0xfc>)
    2cca:	6013      	str	r3, [r2, #0]
    2ccc:	e011      	b.n	2cf2 <UART2_IRQHandler+0xee>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2cce:	79bb      	ldrb	r3, [r7, #6]
    2cd0:	2b01      	cmp	r3, #1
    2cd2:	d10e      	bne.n	2cf2 <UART2_IRQHandler+0xee>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART2->LSR; /* Check status in the LSR to see if
    2cd4:	4b09      	ldr	r3, [pc, #36]	; (2cfc <UART2_IRQHandler+0xf8>)
    2cd6:	7d1b      	ldrb	r3, [r3, #20]
    2cd8:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    2cda:	797b      	ldrb	r3, [r7, #5]
    2cdc:	f003 0320 	and.w	r3, r3, #32
    2ce0:	2b00      	cmp	r3, #0
    2ce2:	d003      	beq.n	2cec <UART2_IRQHandler+0xe8>
			UART2TxEmpty = 1;
    2ce4:	4b09      	ldr	r3, [pc, #36]	; (2d0c <UART2_IRQHandler+0x108>)
    2ce6:	2201      	movs	r2, #1
    2ce8:	701a      	strb	r2, [r3, #0]
    2cea:	e002      	b.n	2cf2 <UART2_IRQHandler+0xee>
		} else {
			UART2TxEmpty = 0;
    2cec:	4b07      	ldr	r3, [pc, #28]	; (2d0c <UART2_IRQHandler+0x108>)
    2cee:	2200      	movs	r2, #0
    2cf0:	701a      	strb	r2, [r3, #0]
		}
	}
}
    2cf2:	370c      	adds	r7, #12
    2cf4:	46bd      	mov	sp, r7
    2cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cfa:	4770      	bx	lr
    2cfc:	40098000 	.word	0x40098000
    2d00:	100014c0 	.word	0x100014c0
    2d04:	10000444 	.word	0x10000444
    2d08:	100016d4 	.word	0x100016d4
    2d0c:	10000023 	.word	0x10000023

00002d10 <UART3_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART3_IRQHandler(void) {
    2d10:	b480      	push	{r7}
    2d12:	b083      	sub	sp, #12
    2d14:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART3->IIR;
    2d16:	4b3b      	ldr	r3, [pc, #236]	; (2e04 <UART3_IRQHandler+0xf4>)
    2d18:	689b      	ldr	r3, [r3, #8]
    2d1a:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    2d1c:	79bb      	ldrb	r3, [r7, #6]
    2d1e:	085b      	lsrs	r3, r3, #1
    2d20:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    2d22:	79bb      	ldrb	r3, [r7, #6]
    2d24:	f003 0307 	and.w	r3, r3, #7
    2d28:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    2d2a:	79bb      	ldrb	r3, [r7, #6]
    2d2c:	2b03      	cmp	r3, #3
    2d2e:	d12c      	bne.n	2d8a <UART3_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART3->LSR;
    2d30:	4b34      	ldr	r3, [pc, #208]	; (2e04 <UART3_IRQHandler+0xf4>)
    2d32:	7d1b      	ldrb	r3, [r3, #20]
    2d34:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2d36:	797b      	ldrb	r3, [r7, #5]
    2d38:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2d3c:	2b00      	cmp	r3, #0
    2d3e:	d006      	beq.n	2d4e <UART3_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART3Status = LSRValue;
    2d40:	797b      	ldrb	r3, [r7, #5]
    2d42:	4a31      	ldr	r2, [pc, #196]	; (2e08 <UART3_IRQHandler+0xf8>)
    2d44:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART3->RBR; /* Dummy read on RX to clear
    2d46:	4b2f      	ldr	r3, [pc, #188]	; (2e04 <UART3_IRQHandler+0xf4>)
    2d48:	781b      	ldrb	r3, [r3, #0]
    2d4a:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2d4c:	e055      	b.n	2dfa <UART3_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    2d4e:	797b      	ldrb	r3, [r7, #5]
    2d50:	f003 0301 	and.w	r3, r3, #1
    2d54:	2b00      	cmp	r3, #0
    2d56:	d050      	beq.n	2dfa <UART3_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART3Buffer[UART3Count] = LPC_UART3->RBR;
    2d58:	4b2c      	ldr	r3, [pc, #176]	; (2e0c <UART3_IRQHandler+0xfc>)
    2d5a:	881b      	ldrh	r3, [r3, #0]
    2d5c:	b29b      	uxth	r3, r3
    2d5e:	461a      	mov	r2, r3
    2d60:	4b28      	ldr	r3, [pc, #160]	; (2e04 <UART3_IRQHandler+0xf4>)
    2d62:	781b      	ldrb	r3, [r3, #0]
    2d64:	b2d9      	uxtb	r1, r3
    2d66:	4b2a      	ldr	r3, [pc, #168]	; (2e10 <UART3_IRQHandler+0x100>)
    2d68:	5499      	strb	r1, [r3, r2]
			UART3Count++;
    2d6a:	4b28      	ldr	r3, [pc, #160]	; (2e0c <UART3_IRQHandler+0xfc>)
    2d6c:	881b      	ldrh	r3, [r3, #0]
    2d6e:	b29b      	uxth	r3, r3
    2d70:	3301      	adds	r3, #1
    2d72:	b29a      	uxth	r2, r3
    2d74:	4b25      	ldr	r3, [pc, #148]	; (2e0c <UART3_IRQHandler+0xfc>)
    2d76:	801a      	strh	r2, [r3, #0]
			if (UART3Count == BUFSIZE) {
    2d78:	4b24      	ldr	r3, [pc, #144]	; (2e0c <UART3_IRQHandler+0xfc>)
    2d7a:	881b      	ldrh	r3, [r3, #0]
    2d7c:	b29b      	uxth	r3, r3
    2d7e:	2bff      	cmp	r3, #255	; 0xff
    2d80:	d13b      	bne.n	2dfa <UART3_IRQHandler+0xea>
				UART3Count = 0; /* buffer overflow */
    2d82:	4b22      	ldr	r3, [pc, #136]	; (2e0c <UART3_IRQHandler+0xfc>)
    2d84:	2200      	movs	r2, #0
    2d86:	801a      	strh	r2, [r3, #0]
    2d88:	e037      	b.n	2dfa <UART3_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2d8a:	79bb      	ldrb	r3, [r7, #6]
    2d8c:	2b02      	cmp	r3, #2
    2d8e:	d118      	bne.n	2dc2 <UART3_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART3Buffer[UART3Count] = LPC_UART3->RBR;
    2d90:	4b1e      	ldr	r3, [pc, #120]	; (2e0c <UART3_IRQHandler+0xfc>)
    2d92:	881b      	ldrh	r3, [r3, #0]
    2d94:	b29b      	uxth	r3, r3
    2d96:	461a      	mov	r2, r3
    2d98:	4b1a      	ldr	r3, [pc, #104]	; (2e04 <UART3_IRQHandler+0xf4>)
    2d9a:	781b      	ldrb	r3, [r3, #0]
    2d9c:	b2d9      	uxtb	r1, r3
    2d9e:	4b1c      	ldr	r3, [pc, #112]	; (2e10 <UART3_IRQHandler+0x100>)
    2da0:	5499      	strb	r1, [r3, r2]
		UART3Count++;
    2da2:	4b1a      	ldr	r3, [pc, #104]	; (2e0c <UART3_IRQHandler+0xfc>)
    2da4:	881b      	ldrh	r3, [r3, #0]
    2da6:	b29b      	uxth	r3, r3
    2da8:	3301      	adds	r3, #1
    2daa:	b29a      	uxth	r2, r3
    2dac:	4b17      	ldr	r3, [pc, #92]	; (2e0c <UART3_IRQHandler+0xfc>)
    2dae:	801a      	strh	r2, [r3, #0]
		if (UART3Count == BUFSIZE) {
    2db0:	4b16      	ldr	r3, [pc, #88]	; (2e0c <UART3_IRQHandler+0xfc>)
    2db2:	881b      	ldrh	r3, [r3, #0]
    2db4:	b29b      	uxth	r3, r3
    2db6:	2bff      	cmp	r3, #255	; 0xff
    2db8:	d11f      	bne.n	2dfa <UART3_IRQHandler+0xea>
			UART3Count = 0; /* buffer overflow */
    2dba:	4b14      	ldr	r3, [pc, #80]	; (2e0c <UART3_IRQHandler+0xfc>)
    2dbc:	2200      	movs	r2, #0
    2dbe:	801a      	strh	r2, [r3, #0]
    2dc0:	e01b      	b.n	2dfa <UART3_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2dc2:	79bb      	ldrb	r3, [r7, #6]
    2dc4:	2b06      	cmp	r3, #6
    2dc6:	d106      	bne.n	2dd6 <UART3_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART3Status |= 0x100; /* Bit 9 as the CTI error */
    2dc8:	4b0f      	ldr	r3, [pc, #60]	; (2e08 <UART3_IRQHandler+0xf8>)
    2dca:	681b      	ldr	r3, [r3, #0]
    2dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2dd0:	4a0d      	ldr	r2, [pc, #52]	; (2e08 <UART3_IRQHandler+0xf8>)
    2dd2:	6013      	str	r3, [r2, #0]
    2dd4:	e011      	b.n	2dfa <UART3_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2dd6:	79bb      	ldrb	r3, [r7, #6]
    2dd8:	2b01      	cmp	r3, #1
    2dda:	d10e      	bne.n	2dfa <UART3_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART3->LSR; /* Check status in the LSR to see if
    2ddc:	4b09      	ldr	r3, [pc, #36]	; (2e04 <UART3_IRQHandler+0xf4>)
    2dde:	7d1b      	ldrb	r3, [r3, #20]
    2de0:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    2de2:	797b      	ldrb	r3, [r7, #5]
    2de4:	f003 0320 	and.w	r3, r3, #32
    2de8:	2b00      	cmp	r3, #0
    2dea:	d003      	beq.n	2df4 <UART3_IRQHandler+0xe4>
			UART3TxEmpty = 1;
    2dec:	4b09      	ldr	r3, [pc, #36]	; (2e14 <UART3_IRQHandler+0x104>)
    2dee:	2201      	movs	r2, #1
    2df0:	701a      	strb	r2, [r3, #0]
    2df2:	e002      	b.n	2dfa <UART3_IRQHandler+0xea>
		} else {
			UART3TxEmpty = 0;
    2df4:	4b07      	ldr	r3, [pc, #28]	; (2e14 <UART3_IRQHandler+0x104>)
    2df6:	2200      	movs	r2, #0
    2df8:	701a      	strb	r2, [r3, #0]
		}
	}
}
    2dfa:	370c      	adds	r7, #12
    2dfc:	46bd      	mov	sp, r7
    2dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e02:	4770      	bx	lr
    2e04:	4009c000 	.word	0x4009c000
    2e08:	100014c8 	.word	0x100014c8
    2e0c:	10000446 	.word	0x10000446
    2e10:	100015d4 	.word	0x100015d4
    2e14:	10000022 	.word	0x10000022

00002e18 <UARTInit>:
 ** Returned value:		true or false, return false only if the
 **						interrupt handler can't be installed to the
 **						VIC table
 **
 *****************************************************************************/
uint32_t UARTInit(uint32_t PortNum, uint32_t baudrate) {
    2e18:	b580      	push	{r7, lr}
    2e1a:	b086      	sub	sp, #24
    2e1c:	af00      	add	r7, sp, #0
    2e1e:	6078      	str	r0, [r7, #4]
    2e20:	6039      	str	r1, [r7, #0]
	uint32_t Fdiv;
	uint32_t pclkdiv, pclk;
	if (PortNum == 0) {
    2e22:	687b      	ldr	r3, [r7, #4]
    2e24:	2b00      	cmp	r3, #0
    2e26:	d15b      	bne.n	2ee0 <UARTInit+0xc8>
		LPC_PINCON->PINSEL0 &= ~0x000000F0;
    2e28:	4aa5      	ldr	r2, [pc, #660]	; (30c0 <UARTInit+0x2a8>)
    2e2a:	4ba5      	ldr	r3, [pc, #660]	; (30c0 <UARTInit+0x2a8>)
    2e2c:	681b      	ldr	r3, [r3, #0]
    2e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2e32:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00000050; /* RxD0 is P0.3 and TxD0 is P0.2 */
    2e34:	4aa2      	ldr	r2, [pc, #648]	; (30c0 <UARTInit+0x2a8>)
    2e36:	4ba2      	ldr	r3, [pc, #648]	; (30c0 <UARTInit+0x2a8>)
    2e38:	681b      	ldr	r3, [r3, #0]
    2e3a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    2e3e:	6013      	str	r3, [r2, #0]
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART0 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
    2e40:	4ba0      	ldr	r3, [pc, #640]	; (30c4 <UARTInit+0x2ac>)
    2e42:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2e46:	099b      	lsrs	r3, r3, #6
    2e48:	f003 0303 	and.w	r3, r3, #3
    2e4c:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2e4e:	693b      	ldr	r3, [r7, #16]
    2e50:	2b02      	cmp	r3, #2
    2e52:	d00c      	beq.n	2e6e <UARTInit+0x56>
    2e54:	2b03      	cmp	r3, #3
    2e56:	d00f      	beq.n	2e78 <UARTInit+0x60>
    2e58:	2b01      	cmp	r3, #1
    2e5a:	d004      	beq.n	2e66 <UARTInit+0x4e>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2e5c:	4b9a      	ldr	r3, [pc, #616]	; (30c8 <UARTInit+0x2b0>)
    2e5e:	681b      	ldr	r3, [r3, #0]
    2e60:	089b      	lsrs	r3, r3, #2
    2e62:	617b      	str	r3, [r7, #20]
			break;
    2e64:	e00d      	b.n	2e82 <UARTInit+0x6a>
		case 0x01:
			pclk = SystemCoreClock;
    2e66:	4b98      	ldr	r3, [pc, #608]	; (30c8 <UARTInit+0x2b0>)
    2e68:	681b      	ldr	r3, [r3, #0]
    2e6a:	617b      	str	r3, [r7, #20]
			break;
    2e6c:	e009      	b.n	2e82 <UARTInit+0x6a>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2e6e:	4b96      	ldr	r3, [pc, #600]	; (30c8 <UARTInit+0x2b0>)
    2e70:	681b      	ldr	r3, [r3, #0]
    2e72:	085b      	lsrs	r3, r3, #1
    2e74:	617b      	str	r3, [r7, #20]
			break;
    2e76:	e004      	b.n	2e82 <UARTInit+0x6a>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2e78:	4b93      	ldr	r3, [pc, #588]	; (30c8 <UARTInit+0x2b0>)
    2e7a:	681b      	ldr	r3, [r3, #0]
    2e7c:	08db      	lsrs	r3, r3, #3
    2e7e:	617b      	str	r3, [r7, #20]
			break;
    2e80:	bf00      	nop
		}
		LPC_UART0->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2e82:	4b92      	ldr	r3, [pc, #584]	; (30cc <UARTInit+0x2b4>)
    2e84:	2283      	movs	r2, #131	; 0x83
    2e86:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2e88:	697b      	ldr	r3, [r7, #20]
    2e8a:	091a      	lsrs	r2, r3, #4
    2e8c:	683b      	ldr	r3, [r7, #0]
    2e8e:	fbb2 f3f3 	udiv	r3, r2, r3
    2e92:	60fb      	str	r3, [r7, #12]
		if (baudrate == 115200){
    2e94:	683b      	ldr	r3, [r7, #0]
    2e96:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2e9a:	d10a      	bne.n	2eb2 <UARTInit+0x9a>
			LPC_UART0->DLM = 0;
    2e9c:	4b8b      	ldr	r3, [pc, #556]	; (30cc <UARTInit+0x2b4>)
    2e9e:	2200      	movs	r2, #0
    2ea0:	711a      	strb	r2, [r3, #4]
			LPC_UART0->DLL = 9;
    2ea2:	4b8a      	ldr	r3, [pc, #552]	; (30cc <UARTInit+0x2b4>)
    2ea4:	2209      	movs	r2, #9
    2ea6:	701a      	strb	r2, [r3, #0]
			LPC_UART0->FDR=1<<0|1<<5;
    2ea8:	4b88      	ldr	r3, [pc, #544]	; (30cc <UARTInit+0x2b4>)
    2eaa:	2221      	movs	r2, #33	; 0x21
    2eac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    2eb0:	e008      	b.n	2ec4 <UARTInit+0xac>
		}else{
			LPC_UART0->DLM = Fdiv / 256;
    2eb2:	4a86      	ldr	r2, [pc, #536]	; (30cc <UARTInit+0x2b4>)
    2eb4:	68fb      	ldr	r3, [r7, #12]
    2eb6:	0a1b      	lsrs	r3, r3, #8
    2eb8:	b2db      	uxtb	r3, r3
    2eba:	7113      	strb	r3, [r2, #4]
			LPC_UART0->DLL = Fdiv % 256;
    2ebc:	4b83      	ldr	r3, [pc, #524]	; (30cc <UARTInit+0x2b4>)
    2ebe:	68fa      	ldr	r2, [r7, #12]
    2ec0:	b2d2      	uxtb	r2, r2
    2ec2:	701a      	strb	r2, [r3, #0]
		}
		LPC_UART0->LCR = 0x03; /* DLAB = 0 */
    2ec4:	4b81      	ldr	r3, [pc, #516]	; (30cc <UARTInit+0x2b4>)
    2ec6:	2203      	movs	r2, #3
    2ec8:	731a      	strb	r2, [r3, #12]
		LPC_UART0->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2eca:	4b80      	ldr	r3, [pc, #512]	; (30cc <UARTInit+0x2b4>)
    2ecc:	2207      	movs	r2, #7
    2ece:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART0_IRQn);
    2ed0:	2005      	movs	r0, #5
    2ed2:	f7ff fd59 	bl	2988 <NVIC_EnableIRQ>
		LPC_UART0->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART0 interrupt */
    2ed6:	4b7d      	ldr	r3, [pc, #500]	; (30cc <UARTInit+0x2b4>)
    2ed8:	2207      	movs	r2, #7
    2eda:	605a      	str	r2, [r3, #4]
		return (TRUE);
    2edc:	2301      	movs	r3, #1
    2ede:	e12a      	b.n	3136 <UARTInit+0x31e>
	} else if (PortNum == 1) {
    2ee0:	687b      	ldr	r3, [r7, #4]
    2ee2:	2b01      	cmp	r3, #1
    2ee4:	d165      	bne.n	2fb2 <UARTInit+0x19a>
		NVIC_DisableIRQ(UART1_IRQn);
    2ee6:	2006      	movs	r0, #6
    2ee8:	f7ff fd66 	bl	29b8 <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 4;
    2eec:	4a75      	ldr	r2, [pc, #468]	; (30c4 <UARTInit+0x2ac>)
    2eee:	4b75      	ldr	r3, [pc, #468]	; (30c4 <UARTInit+0x2ac>)
    2ef0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2ef4:	f043 0310 	orr.w	r3, r3, #16
    2ef8:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL4 &= ~0x0000000F;
    2efc:	4a70      	ldr	r2, [pc, #448]	; (30c0 <UARTInit+0x2a8>)
    2efe:	4b70      	ldr	r3, [pc, #448]	; (30c0 <UARTInit+0x2a8>)
    2f00:	691b      	ldr	r3, [r3, #16]
    2f02:	f023 030f 	bic.w	r3, r3, #15
    2f06:	6113      	str	r3, [r2, #16]
		LPC_PINCON->PINSEL4 |= 0x0000000A; /* Enable RxD1 P0.16, TxD1 P0.15 */
    2f08:	4a6d      	ldr	r2, [pc, #436]	; (30c0 <UARTInit+0x2a8>)
    2f0a:	4b6d      	ldr	r3, [pc, #436]	; (30c0 <UARTInit+0x2a8>)
    2f0c:	691b      	ldr	r3, [r3, #16]
    2f0e:	f043 030a 	orr.w	r3, r3, #10
    2f12:	6113      	str	r3, [r2, #16]

		//| 1<<25; //Enable PCUART1
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 8,9 are for UART1 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
    2f14:	4b6b      	ldr	r3, [pc, #428]	; (30c4 <UARTInit+0x2ac>)
    2f16:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2f1a:	0a1b      	lsrs	r3, r3, #8
    2f1c:	f003 0303 	and.w	r3, r3, #3
    2f20:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2f22:	693b      	ldr	r3, [r7, #16]
    2f24:	2b02      	cmp	r3, #2
    2f26:	d00c      	beq.n	2f42 <UARTInit+0x12a>
    2f28:	2b03      	cmp	r3, #3
    2f2a:	d00f      	beq.n	2f4c <UARTInit+0x134>
    2f2c:	2b01      	cmp	r3, #1
    2f2e:	d004      	beq.n	2f3a <UARTInit+0x122>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2f30:	4b65      	ldr	r3, [pc, #404]	; (30c8 <UARTInit+0x2b0>)
    2f32:	681b      	ldr	r3, [r3, #0]
    2f34:	089b      	lsrs	r3, r3, #2
    2f36:	617b      	str	r3, [r7, #20]
			break;
    2f38:	e00d      	b.n	2f56 <UARTInit+0x13e>
		case 0x01:
			pclk = SystemCoreClock;
    2f3a:	4b63      	ldr	r3, [pc, #396]	; (30c8 <UARTInit+0x2b0>)
    2f3c:	681b      	ldr	r3, [r3, #0]
    2f3e:	617b      	str	r3, [r7, #20]
			break;
    2f40:	e009      	b.n	2f56 <UARTInit+0x13e>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2f42:	4b61      	ldr	r3, [pc, #388]	; (30c8 <UARTInit+0x2b0>)
    2f44:	681b      	ldr	r3, [r3, #0]
    2f46:	085b      	lsrs	r3, r3, #1
    2f48:	617b      	str	r3, [r7, #20]
			break;
    2f4a:	e004      	b.n	2f56 <UARTInit+0x13e>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2f4c:	4b5e      	ldr	r3, [pc, #376]	; (30c8 <UARTInit+0x2b0>)
    2f4e:	681b      	ldr	r3, [r3, #0]
    2f50:	08db      	lsrs	r3, r3, #3
    2f52:	617b      	str	r3, [r7, #20]
			break;
    2f54:	bf00      	nop
		}
		LPC_UART1->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2f56:	4b5e      	ldr	r3, [pc, #376]	; (30d0 <UARTInit+0x2b8>)
    2f58:	2283      	movs	r2, #131	; 0x83
    2f5a:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2f5c:	697b      	ldr	r3, [r7, #20]
    2f5e:	091a      	lsrs	r2, r3, #4
    2f60:	683b      	ldr	r3, [r7, #0]
    2f62:	fbb2 f3f3 	udiv	r3, r2, r3
    2f66:	60fb      	str	r3, [r7, #12]

		if (baudrate == 115200){
    2f68:	683b      	ldr	r3, [r7, #0]
    2f6a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2f6e:	d109      	bne.n	2f84 <UARTInit+0x16c>
			LPC_UART1->DLM = 0;
    2f70:	4b57      	ldr	r3, [pc, #348]	; (30d0 <UARTInit+0x2b8>)
    2f72:	2200      	movs	r2, #0
    2f74:	711a      	strb	r2, [r3, #4]
			LPC_UART1->DLL = 9;
    2f76:	4b56      	ldr	r3, [pc, #344]	; (30d0 <UARTInit+0x2b8>)
    2f78:	2209      	movs	r2, #9
    2f7a:	701a      	strb	r2, [r3, #0]
			LPC_UART1->FDR=1<<0|1<<5;
    2f7c:	4b54      	ldr	r3, [pc, #336]	; (30d0 <UARTInit+0x2b8>)
    2f7e:	2221      	movs	r2, #33	; 0x21
    2f80:	629a      	str	r2, [r3, #40]	; 0x28
    2f82:	e008      	b.n	2f96 <UARTInit+0x17e>
		}else{
			LPC_UART1->DLM = Fdiv / 256;
    2f84:	4a52      	ldr	r2, [pc, #328]	; (30d0 <UARTInit+0x2b8>)
    2f86:	68fb      	ldr	r3, [r7, #12]
    2f88:	0a1b      	lsrs	r3, r3, #8
    2f8a:	b2db      	uxtb	r3, r3
    2f8c:	7113      	strb	r3, [r2, #4]
			LPC_UART1->DLL = Fdiv % 256;
    2f8e:	4b50      	ldr	r3, [pc, #320]	; (30d0 <UARTInit+0x2b8>)
    2f90:	68fa      	ldr	r2, [r7, #12]
    2f92:	b2d2      	uxtb	r2, r2
    2f94:	701a      	strb	r2, [r3, #0]
		}
		LPC_UART1->LCR = 0x03; /* DLAB = 0 */
    2f96:	4b4e      	ldr	r3, [pc, #312]	; (30d0 <UARTInit+0x2b8>)
    2f98:	2203      	movs	r2, #3
    2f9a:	731a      	strb	r2, [r3, #12]
		LPC_UART1->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2f9c:	4b4c      	ldr	r3, [pc, #304]	; (30d0 <UARTInit+0x2b8>)
    2f9e:	2207      	movs	r2, #7
    2fa0:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART1_IRQn);
    2fa2:	2006      	movs	r0, #6
    2fa4:	f7ff fcf0 	bl	2988 <NVIC_EnableIRQ>
		LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART1 interrupt */
    2fa8:	4b49      	ldr	r3, [pc, #292]	; (30d0 <UARTInit+0x2b8>)
    2faa:	2207      	movs	r2, #7
    2fac:	605a      	str	r2, [r3, #4]
		return (TRUE);
    2fae:	2301      	movs	r3, #1
    2fb0:	e0c1      	b.n	3136 <UARTInit+0x31e>
	} else if (PortNum == 2) {
    2fb2:	687b      	ldr	r3, [r7, #4]
    2fb4:	2b02      	cmp	r3, #2
    2fb6:	d157      	bne.n	3068 <UARTInit+0x250>
		NVIC_DisableIRQ(UART2_IRQn);
    2fb8:	2007      	movs	r0, #7
    2fba:	f7ff fcfd 	bl	29b8 <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 24; // UART 2 PCONP bit 24
    2fbe:	4a41      	ldr	r2, [pc, #260]	; (30c4 <UARTInit+0x2ac>)
    2fc0:	4b40      	ldr	r3, [pc, #256]	; (30c4 <UARTInit+0x2ac>)
    2fc2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2fca:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL0 &= ~0x00F00000;
    2fce:	4a3c      	ldr	r2, [pc, #240]	; (30c0 <UARTInit+0x2a8>)
    2fd0:	4b3b      	ldr	r3, [pc, #236]	; (30c0 <UARTInit+0x2a8>)
    2fd2:	681b      	ldr	r3, [r3, #0]
    2fd4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    2fd8:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00500000; /* Enable TxD2 on 0.10, RxD2 on 0.11 */
    2fda:	4a39      	ldr	r2, [pc, #228]	; (30c0 <UARTInit+0x2a8>)
    2fdc:	4b38      	ldr	r3, [pc, #224]	; (30c0 <UARTInit+0x2a8>)
    2fde:	681b      	ldr	r3, [r3, #0]
    2fe0:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
    2fe4:	6013      	str	r3, [r2, #0]
		pclkdiv = (LPC_SC->PCLKSEL0 >> 16) & 0x03;
    2fe6:	4b37      	ldr	r3, [pc, #220]	; (30c4 <UARTInit+0x2ac>)
    2fe8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2fec:	0c1b      	lsrs	r3, r3, #16
    2fee:	f003 0303 	and.w	r3, r3, #3
    2ff2:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2ff4:	693b      	ldr	r3, [r7, #16]
    2ff6:	2b02      	cmp	r3, #2
    2ff8:	d00c      	beq.n	3014 <UARTInit+0x1fc>
    2ffa:	2b03      	cmp	r3, #3
    2ffc:	d00f      	beq.n	301e <UARTInit+0x206>
    2ffe:	2b01      	cmp	r3, #1
    3000:	d004      	beq.n	300c <UARTInit+0x1f4>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    3002:	4b31      	ldr	r3, [pc, #196]	; (30c8 <UARTInit+0x2b0>)
    3004:	681b      	ldr	r3, [r3, #0]
    3006:	089b      	lsrs	r3, r3, #2
    3008:	617b      	str	r3, [r7, #20]
			break;
    300a:	e00d      	b.n	3028 <UARTInit+0x210>
		case 0x01:
			pclk = SystemCoreClock;
    300c:	4b2e      	ldr	r3, [pc, #184]	; (30c8 <UARTInit+0x2b0>)
    300e:	681b      	ldr	r3, [r3, #0]
    3010:	617b      	str	r3, [r7, #20]
			break;
    3012:	e009      	b.n	3028 <UARTInit+0x210>
		case 0x02:
			pclk = SystemCoreClock / 2;
    3014:	4b2c      	ldr	r3, [pc, #176]	; (30c8 <UARTInit+0x2b0>)
    3016:	681b      	ldr	r3, [r3, #0]
    3018:	085b      	lsrs	r3, r3, #1
    301a:	617b      	str	r3, [r7, #20]
			break;
    301c:	e004      	b.n	3028 <UARTInit+0x210>
		case 0x03:
			pclk = SystemCoreClock / 8;
    301e:	4b2a      	ldr	r3, [pc, #168]	; (30c8 <UARTInit+0x2b0>)
    3020:	681b      	ldr	r3, [r3, #0]
    3022:	08db      	lsrs	r3, r3, #3
    3024:	617b      	str	r3, [r7, #20]
			break;
    3026:	bf00      	nop
		}
		LPC_UART2->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    3028:	4b2a      	ldr	r3, [pc, #168]	; (30d4 <UARTInit+0x2bc>)
    302a:	2283      	movs	r2, #131	; 0x83
    302c:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    302e:	697b      	ldr	r3, [r7, #20]
    3030:	091a      	lsrs	r2, r3, #4
    3032:	683b      	ldr	r3, [r7, #0]
    3034:	fbb2 f3f3 	udiv	r3, r2, r3
    3038:	60fb      	str	r3, [r7, #12]
		LPC_UART2->DLM = Fdiv / 256;
    303a:	4a26      	ldr	r2, [pc, #152]	; (30d4 <UARTInit+0x2bc>)
    303c:	68fb      	ldr	r3, [r7, #12]
    303e:	0a1b      	lsrs	r3, r3, #8
    3040:	b2db      	uxtb	r3, r3
    3042:	7113      	strb	r3, [r2, #4]
		LPC_UART2->DLL = Fdiv % 256;
    3044:	4b23      	ldr	r3, [pc, #140]	; (30d4 <UARTInit+0x2bc>)
    3046:	68fa      	ldr	r2, [r7, #12]
    3048:	b2d2      	uxtb	r2, r2
    304a:	701a      	strb	r2, [r3, #0]
		LPC_UART2->LCR = 0x03; /* DLAB = 0 */
    304c:	4b21      	ldr	r3, [pc, #132]	; (30d4 <UARTInit+0x2bc>)
    304e:	2203      	movs	r2, #3
    3050:	731a      	strb	r2, [r3, #12]
		LPC_UART2->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    3052:	4b20      	ldr	r3, [pc, #128]	; (30d4 <UARTInit+0x2bc>)
    3054:	2207      	movs	r2, #7
    3056:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART2_IRQn);
    3058:	2007      	movs	r0, #7
    305a:	f7ff fc95 	bl	2988 <NVIC_EnableIRQ>
		LPC_UART2->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART2 interrupt */
    305e:	4b1d      	ldr	r3, [pc, #116]	; (30d4 <UARTInit+0x2bc>)
    3060:	2207      	movs	r2, #7
    3062:	605a      	str	r2, [r3, #4]
		//LPC_UART2->IER = IER_THRE; /* Polling */
		//LPC_UART2->TER = (1 << 7);
		return (TRUE);
    3064:	2301      	movs	r3, #1
    3066:	e066      	b.n	3136 <UARTInit+0x31e>
	} else if (PortNum == 3) {
    3068:	687b      	ldr	r3, [r7, #4]
    306a:	2b03      	cmp	r3, #3
    306c:	d162      	bne.n	3134 <UARTInit+0x31c>
		LPC_PINCON->PINSEL0 &= ~0x0000000F;
    306e:	4a14      	ldr	r2, [pc, #80]	; (30c0 <UARTInit+0x2a8>)
    3070:	4b13      	ldr	r3, [pc, #76]	; (30c0 <UARTInit+0x2a8>)
    3072:	681b      	ldr	r3, [r3, #0]
    3074:	f023 030f 	bic.w	r3, r3, #15
    3078:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x0000000A; /* RxD3 is P0.1 and TxD3 is P0.0 */
    307a:	4a11      	ldr	r2, [pc, #68]	; (30c0 <UARTInit+0x2a8>)
    307c:	4b10      	ldr	r3, [pc, #64]	; (30c0 <UARTInit+0x2a8>)
    307e:	681b      	ldr	r3, [r3, #0]
    3080:	f043 030a 	orr.w	r3, r3, #10
    3084:	6013      	str	r3, [r2, #0]
		LPC_SC->PCONP |= 1 << 4 | 1 << 25; //Enable PCUART1
    3086:	4a0f      	ldr	r2, [pc, #60]	; (30c4 <UARTInit+0x2ac>)
    3088:	4b0e      	ldr	r3, [pc, #56]	; (30c4 <UARTInit+0x2ac>)
    308a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    308e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    3092:	f043 0310 	orr.w	r3, r3, #16
    3096:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART3 */
		pclkdiv = (LPC_SC->PCLKSEL1 >> 18) & 0x03;
    309a:	4b0a      	ldr	r3, [pc, #40]	; (30c4 <UARTInit+0x2ac>)
    309c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
    30a0:	0c9b      	lsrs	r3, r3, #18
    30a2:	f003 0303 	and.w	r3, r3, #3
    30a6:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    30a8:	693b      	ldr	r3, [r7, #16]
    30aa:	2b02      	cmp	r3, #2
    30ac:	d018      	beq.n	30e0 <UARTInit+0x2c8>
    30ae:	2b03      	cmp	r3, #3
    30b0:	d01b      	beq.n	30ea <UARTInit+0x2d2>
    30b2:	2b01      	cmp	r3, #1
    30b4:	d010      	beq.n	30d8 <UARTInit+0x2c0>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    30b6:	4b04      	ldr	r3, [pc, #16]	; (30c8 <UARTInit+0x2b0>)
    30b8:	681b      	ldr	r3, [r3, #0]
    30ba:	089b      	lsrs	r3, r3, #2
    30bc:	617b      	str	r3, [r7, #20]
			break;
    30be:	e019      	b.n	30f4 <UARTInit+0x2dc>
    30c0:	4002c000 	.word	0x4002c000
    30c4:	400fc000 	.word	0x400fc000
    30c8:	10000024 	.word	0x10000024
    30cc:	4000c000 	.word	0x4000c000
    30d0:	40010000 	.word	0x40010000
    30d4:	40098000 	.word	0x40098000
		case 0x01:
			pclk = SystemCoreClock;
    30d8:	4b19      	ldr	r3, [pc, #100]	; (3140 <UARTInit+0x328>)
    30da:	681b      	ldr	r3, [r3, #0]
    30dc:	617b      	str	r3, [r7, #20]
			break;
    30de:	e009      	b.n	30f4 <UARTInit+0x2dc>
		case 0x02:
			pclk = SystemCoreClock / 2;
    30e0:	4b17      	ldr	r3, [pc, #92]	; (3140 <UARTInit+0x328>)
    30e2:	681b      	ldr	r3, [r3, #0]
    30e4:	085b      	lsrs	r3, r3, #1
    30e6:	617b      	str	r3, [r7, #20]
			break;
    30e8:	e004      	b.n	30f4 <UARTInit+0x2dc>
		case 0x03:
			pclk = SystemCoreClock / 8;
    30ea:	4b15      	ldr	r3, [pc, #84]	; (3140 <UARTInit+0x328>)
    30ec:	681b      	ldr	r3, [r3, #0]
    30ee:	08db      	lsrs	r3, r3, #3
    30f0:	617b      	str	r3, [r7, #20]
			break;
    30f2:	bf00      	nop
		}
		LPC_UART3->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    30f4:	4b13      	ldr	r3, [pc, #76]	; (3144 <UARTInit+0x32c>)
    30f6:	2283      	movs	r2, #131	; 0x83
    30f8:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    30fa:	697b      	ldr	r3, [r7, #20]
    30fc:	091a      	lsrs	r2, r3, #4
    30fe:	683b      	ldr	r3, [r7, #0]
    3100:	fbb2 f3f3 	udiv	r3, r2, r3
    3104:	60fb      	str	r3, [r7, #12]
		LPC_UART3->DLM = Fdiv / 256;
    3106:	4a0f      	ldr	r2, [pc, #60]	; (3144 <UARTInit+0x32c>)
    3108:	68fb      	ldr	r3, [r7, #12]
    310a:	0a1b      	lsrs	r3, r3, #8
    310c:	b2db      	uxtb	r3, r3
    310e:	7113      	strb	r3, [r2, #4]
		LPC_UART3->DLL = Fdiv % 256;
    3110:	4b0c      	ldr	r3, [pc, #48]	; (3144 <UARTInit+0x32c>)
    3112:	68fa      	ldr	r2, [r7, #12]
    3114:	b2d2      	uxtb	r2, r2
    3116:	701a      	strb	r2, [r3, #0]
		LPC_UART3->LCR = 0x03; /* DLAB = 0 */
    3118:	4b0a      	ldr	r3, [pc, #40]	; (3144 <UARTInit+0x32c>)
    311a:	2203      	movs	r2, #3
    311c:	731a      	strb	r2, [r3, #12]
		LPC_UART3->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    311e:	4b09      	ldr	r3, [pc, #36]	; (3144 <UARTInit+0x32c>)
    3120:	2207      	movs	r2, #7
    3122:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART3_IRQn);
    3124:	2008      	movs	r0, #8
    3126:	f7ff fc2f 	bl	2988 <NVIC_EnableIRQ>
		LPC_UART3->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART3 interrupt */
    312a:	4b06      	ldr	r3, [pc, #24]	; (3144 <UARTInit+0x32c>)
    312c:	2207      	movs	r2, #7
    312e:	605a      	str	r2, [r3, #4]
		return (TRUE);
    3130:	2301      	movs	r3, #1
    3132:	e000      	b.n	3136 <UARTInit+0x31e>
	}
	return (FALSE);
    3134:	2300      	movs	r3, #0
}
    3136:	4618      	mov	r0, r3
    3138:	3718      	adds	r7, #24
    313a:	46bd      	mov	sp, r7
    313c:	bd80      	pop	{r7, pc}
    313e:	bf00      	nop
    3140:	10000024 	.word	0x10000024
    3144:	4009c000 	.word	0x4009c000

00003148 <UARTSend>:
 **
 ** parameters:			portNum, buffer pointer, and data length
 ** Returned value:		None
 **
 *****************************************************************************/
void UARTSend(uint32_t portNum, uint8_t *buffer, uint32_t Length) {
    3148:	b480      	push	{r7}
    314a:	b087      	sub	sp, #28
    314c:	af00      	add	r7, sp, #0
    314e:	60f8      	str	r0, [r7, #12]
    3150:	60b9      	str	r1, [r7, #8]
    3152:	607a      	str	r2, [r7, #4]
	uint8_t *BufferPtr = buffer;
    3154:	68bb      	ldr	r3, [r7, #8]
    3156:	613b      	str	r3, [r7, #16]
	int index = 0;
    3158:	2300      	movs	r3, #0
    315a:	617b      	str	r3, [r7, #20]
	if (portNum == 0) {
    315c:	68fb      	ldr	r3, [r7, #12]
    315e:	2b00      	cmp	r3, #0
    3160:	d11b      	bne.n	319a <UARTSend+0x52>
		while (Length != 0) {
    3162:	e016      	b.n	3192 <UARTSend+0x4a>
			/* THRE status, contain valid data */
			while (!(UART0TxEmpty & 0x01));
    3164:	bf00      	nop
    3166:	4b3e      	ldr	r3, [pc, #248]	; (3260 <UARTSend+0x118>)
    3168:	781b      	ldrb	r3, [r3, #0]
    316a:	b2db      	uxtb	r3, r3
    316c:	f003 0301 	and.w	r3, r3, #1
    3170:	2b00      	cmp	r3, #0
    3172:	d0f8      	beq.n	3166 <UARTSend+0x1e>
			LPC_UART0->THR = BufferPtr[index];
    3174:	493b      	ldr	r1, [pc, #236]	; (3264 <UARTSend+0x11c>)
    3176:	697b      	ldr	r3, [r7, #20]
    3178:	693a      	ldr	r2, [r7, #16]
    317a:	4413      	add	r3, r2
    317c:	781b      	ldrb	r3, [r3, #0]
    317e:	700b      	strb	r3, [r1, #0]
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
    3180:	4b37      	ldr	r3, [pc, #220]	; (3260 <UARTSend+0x118>)
    3182:	2200      	movs	r2, #0
    3184:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    3186:	697b      	ldr	r3, [r7, #20]
    3188:	3301      	adds	r3, #1
    318a:	617b      	str	r3, [r7, #20]
			Length--;
    318c:	687b      	ldr	r3, [r7, #4]
    318e:	3b01      	subs	r3, #1
    3190:	607b      	str	r3, [r7, #4]
 *****************************************************************************/
void UARTSend(uint32_t portNum, uint8_t *buffer, uint32_t Length) {
	uint8_t *BufferPtr = buffer;
	int index = 0;
	if (portNum == 0) {
		while (Length != 0) {
    3192:	687b      	ldr	r3, [r7, #4]
    3194:	2b00      	cmp	r3, #0
    3196:	d1e5      	bne.n	3164 <UARTSend+0x1c>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    3198:	e05c      	b.n	3254 <UARTSend+0x10c>
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
    319a:	68fb      	ldr	r3, [r7, #12]
    319c:	2b01      	cmp	r3, #1
    319e:	d11b      	bne.n	31d8 <UARTSend+0x90>
		while (Length != 0) {
    31a0:	e016      	b.n	31d0 <UARTSend+0x88>
			/* THRE status, contain valid data */
			while (!(UART1TxEmpty & 0x01));
    31a2:	bf00      	nop
    31a4:	4b30      	ldr	r3, [pc, #192]	; (3268 <UARTSend+0x120>)
    31a6:	781b      	ldrb	r3, [r3, #0]
    31a8:	b2db      	uxtb	r3, r3
    31aa:	f003 0301 	and.w	r3, r3, #1
    31ae:	2b00      	cmp	r3, #0
    31b0:	d0f8      	beq.n	31a4 <UARTSend+0x5c>
			LPC_UART1->THR = BufferPtr[index];
    31b2:	492e      	ldr	r1, [pc, #184]	; (326c <UARTSend+0x124>)
    31b4:	697b      	ldr	r3, [r7, #20]
    31b6:	693a      	ldr	r2, [r7, #16]
    31b8:	4413      	add	r3, r2
    31ba:	781b      	ldrb	r3, [r3, #0]
    31bc:	700b      	strb	r3, [r1, #0]
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
    31be:	4b2a      	ldr	r3, [pc, #168]	; (3268 <UARTSend+0x120>)
    31c0:	2200      	movs	r2, #0
    31c2:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    31c4:	697b      	ldr	r3, [r7, #20]
    31c6:	3301      	adds	r3, #1
    31c8:	617b      	str	r3, [r7, #20]
			Length--;
    31ca:	687b      	ldr	r3, [r7, #4]
    31cc:	3b01      	subs	r3, #1
    31ce:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
		while (Length != 0) {
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	2b00      	cmp	r3, #0
    31d4:	d1e5      	bne.n	31a2 <UARTSend+0x5a>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    31d6:	e03d      	b.n	3254 <UARTSend+0x10c>
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
    31d8:	68fb      	ldr	r3, [r7, #12]
    31da:	2b02      	cmp	r3, #2
    31dc:	d11b      	bne.n	3216 <UARTSend+0xce>
		while (Length != 0) {
    31de:	e016      	b.n	320e <UARTSend+0xc6>
			/* THRE status, contain valid data */
			while (!(UART2TxEmpty & 0x01));
    31e0:	bf00      	nop
    31e2:	4b23      	ldr	r3, [pc, #140]	; (3270 <UARTSend+0x128>)
    31e4:	781b      	ldrb	r3, [r3, #0]
    31e6:	b2db      	uxtb	r3, r3
    31e8:	f003 0301 	and.w	r3, r3, #1
    31ec:	2b00      	cmp	r3, #0
    31ee:	d0f8      	beq.n	31e2 <UARTSend+0x9a>
			LPC_UART2->THR = BufferPtr[index];
    31f0:	4920      	ldr	r1, [pc, #128]	; (3274 <UARTSend+0x12c>)
    31f2:	697b      	ldr	r3, [r7, #20]
    31f4:	693a      	ldr	r2, [r7, #16]
    31f6:	4413      	add	r3, r2
    31f8:	781b      	ldrb	r3, [r3, #0]
    31fa:	700b      	strb	r3, [r1, #0]
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
    31fc:	4b1c      	ldr	r3, [pc, #112]	; (3270 <UARTSend+0x128>)
    31fe:	2200      	movs	r2, #0
    3200:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    3202:	697b      	ldr	r3, [r7, #20]
    3204:	3301      	adds	r3, #1
    3206:	617b      	str	r3, [r7, #20]
			Length--;
    3208:	687b      	ldr	r3, [r7, #4]
    320a:	3b01      	subs	r3, #1
    320c:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
		while (Length != 0) {
    320e:	687b      	ldr	r3, [r7, #4]
    3210:	2b00      	cmp	r3, #0
    3212:	d1e5      	bne.n	31e0 <UARTSend+0x98>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    3214:	e01e      	b.n	3254 <UARTSend+0x10c>
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
    3216:	68fb      	ldr	r3, [r7, #12]
    3218:	2b03      	cmp	r3, #3
    321a:	d11a      	bne.n	3252 <UARTSend+0x10a>
		while (Length != 0) {
    321c:	e016      	b.n	324c <UARTSend+0x104>
			/* THRE status, contain valid data */
			while (!(UART3TxEmpty & 0x01));
    321e:	bf00      	nop
    3220:	4b15      	ldr	r3, [pc, #84]	; (3278 <UARTSend+0x130>)
    3222:	781b      	ldrb	r3, [r3, #0]
    3224:	b2db      	uxtb	r3, r3
    3226:	f003 0301 	and.w	r3, r3, #1
    322a:	2b00      	cmp	r3, #0
    322c:	d0f8      	beq.n	3220 <UARTSend+0xd8>
			LPC_UART3->THR = BufferPtr[index];
    322e:	4913      	ldr	r1, [pc, #76]	; (327c <UARTSend+0x134>)
    3230:	697b      	ldr	r3, [r7, #20]
    3232:	693a      	ldr	r2, [r7, #16]
    3234:	4413      	add	r3, r2
    3236:	781b      	ldrb	r3, [r3, #0]
    3238:	700b      	strb	r3, [r1, #0]
			UART3TxEmpty = 0; /* not empty in the THR until it shifts out */
    323a:	4b0f      	ldr	r3, [pc, #60]	; (3278 <UARTSend+0x130>)
    323c:	2200      	movs	r2, #0
    323e:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    3240:	697b      	ldr	r3, [r7, #20]
    3242:	3301      	adds	r3, #1
    3244:	617b      	str	r3, [r7, #20]
			Length--;
    3246:	687b      	ldr	r3, [r7, #4]
    3248:	3b01      	subs	r3, #1
    324a:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
		while (Length != 0) {
    324c:	687b      	ldr	r3, [r7, #4]
    324e:	2b00      	cmp	r3, #0
    3250:	d1e5      	bne.n	321e <UARTSend+0xd6>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    3252:	bf00      	nop
}
    3254:	371c      	adds	r7, #28
    3256:	46bd      	mov	sp, r7
    3258:	f85d 7b04 	ldr.w	r7, [sp], #4
    325c:	4770      	bx	lr
    325e:	bf00      	nop
    3260:	10000020 	.word	0x10000020
    3264:	4000c000 	.word	0x4000c000
    3268:	10000021 	.word	0x10000021
    326c:	40010000 	.word	0x40010000
    3270:	10000023 	.word	0x10000023
    3274:	40098000 	.word	0x40098000
    3278:	10000022 	.word	0x10000022
    327c:	4009c000 	.word	0x4009c000

00003280 <ReadUart>:

uint16_t ReadUart( uint8_t *veri, uint8_t PortNum )
{
    3280:	b480      	push	{r7}
    3282:	b087      	sub	sp, #28
    3284:	af00      	add	r7, sp, #0
    3286:	6078      	str	r0, [r7, #4]
    3288:	460b      	mov	r3, r1
    328a:	70fb      	strb	r3, [r7, #3]
	uint8_t *veri_ptr = veri;
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	617b      	str	r3, [r7, #20]
	uint16_t buff_count = 0;
    3290:	2300      	movs	r3, #0
    3292:	827b      	strh	r3, [r7, #18]
	if (PortNum == 0) {
    3294:	78fb      	ldrb	r3, [r7, #3]
    3296:	2b00      	cmp	r3, #0
    3298:	d122      	bne.n	32e0 <ReadUart+0x60>
		if (UART0Count > 0) {
    329a:	4b4e      	ldr	r3, [pc, #312]	; (33d4 <ReadUart+0x154>)
    329c:	881b      	ldrh	r3, [r3, #0]
    329e:	b29b      	uxth	r3, r3
    32a0:	2b00      	cmp	r3, #0
    32a2:	d01d      	beq.n	32e0 <ReadUart+0x60>
			while (buff_count < UART0Count) {
    32a4:	e00b      	b.n	32be <ReadUart+0x3e>
				*veri_ptr = UART0Buffer[buff_count];
    32a6:	8a7b      	ldrh	r3, [r7, #18]
    32a8:	4a4b      	ldr	r2, [pc, #300]	; (33d8 <ReadUart+0x158>)
    32aa:	5cd3      	ldrb	r3, [r2, r3]
    32ac:	b2da      	uxtb	r2, r3
    32ae:	697b      	ldr	r3, [r7, #20]
    32b0:	701a      	strb	r2, [r3, #0]
				buff_count++;
    32b2:	8a7b      	ldrh	r3, [r7, #18]
    32b4:	3301      	adds	r3, #1
    32b6:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    32b8:	697b      	ldr	r3, [r7, #20]
    32ba:	3301      	adds	r3, #1
    32bc:	617b      	str	r3, [r7, #20]
{
	uint8_t *veri_ptr = veri;
	uint16_t buff_count = 0;
	if (PortNum == 0) {
		if (UART0Count > 0) {
			while (buff_count < UART0Count) {
    32be:	4b45      	ldr	r3, [pc, #276]	; (33d4 <ReadUart+0x154>)
    32c0:	881b      	ldrh	r3, [r3, #0]
    32c2:	b29b      	uxth	r3, r3
    32c4:	8a7a      	ldrh	r2, [r7, #18]
    32c6:	429a      	cmp	r2, r3
    32c8:	d3ed      	bcc.n	32a6 <ReadUart+0x26>
				*veri_ptr = UART0Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    32ca:	697b      	ldr	r3, [r7, #20]
    32cc:	2200      	movs	r2, #0
    32ce:	701a      	strb	r2, [r3, #0]
			uint16_t len = UART0Count;
    32d0:	4b40      	ldr	r3, [pc, #256]	; (33d4 <ReadUart+0x154>)
    32d2:	881b      	ldrh	r3, [r3, #0]
    32d4:	823b      	strh	r3, [r7, #16]
			UART0Count = 0;
    32d6:	4b3f      	ldr	r3, [pc, #252]	; (33d4 <ReadUart+0x154>)
    32d8:	2200      	movs	r2, #0
    32da:	801a      	strh	r2, [r3, #0]
			return ( len );
    32dc:	8a3b      	ldrh	r3, [r7, #16]
    32de:	e073      	b.n	33c8 <ReadUart+0x148>
		}
	}
	if (PortNum == 1) {
    32e0:	78fb      	ldrb	r3, [r7, #3]
    32e2:	2b01      	cmp	r3, #1
    32e4:	d124      	bne.n	3330 <ReadUart+0xb0>



		if (UART1Count > 0) {
    32e6:	4b3d      	ldr	r3, [pc, #244]	; (33dc <ReadUart+0x15c>)
    32e8:	881b      	ldrh	r3, [r3, #0]
    32ea:	b29b      	uxth	r3, r3
    32ec:	2b00      	cmp	r3, #0
    32ee:	d06a      	beq.n	33c6 <ReadUart+0x146>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    32f0:	b672      	cpsid	i

			__disable_irq();

			while (buff_count < UART1Count) {
    32f2:	e00b      	b.n	330c <ReadUart+0x8c>
				*veri_ptr = UART1Buffer[buff_count];
    32f4:	8a7b      	ldrh	r3, [r7, #18]
    32f6:	4a3a      	ldr	r2, [pc, #232]	; (33e0 <ReadUart+0x160>)
    32f8:	5cd3      	ldrb	r3, [r2, r3]
    32fa:	b2da      	uxtb	r2, r3
    32fc:	697b      	ldr	r3, [r7, #20]
    32fe:	701a      	strb	r2, [r3, #0]
				buff_count++;
    3300:	8a7b      	ldrh	r3, [r7, #18]
    3302:	3301      	adds	r3, #1
    3304:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    3306:	697b      	ldr	r3, [r7, #20]
    3308:	3301      	adds	r3, #1
    330a:	617b      	str	r3, [r7, #20]

		if (UART1Count > 0) {

			__disable_irq();

			while (buff_count < UART1Count) {
    330c:	4b33      	ldr	r3, [pc, #204]	; (33dc <ReadUart+0x15c>)
    330e:	881b      	ldrh	r3, [r3, #0]
    3310:	b29b      	uxth	r3, r3
    3312:	8a7a      	ldrh	r2, [r7, #18]
    3314:	429a      	cmp	r2, r3
    3316:	d3ed      	bcc.n	32f4 <ReadUart+0x74>
				*veri_ptr = UART1Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    3318:	697b      	ldr	r3, [r7, #20]
    331a:	2200      	movs	r2, #0
    331c:	701a      	strb	r2, [r3, #0]
			uint16_t len = UART1Count;
    331e:	4b2f      	ldr	r3, [pc, #188]	; (33dc <ReadUart+0x15c>)
    3320:	881b      	ldrh	r3, [r3, #0]
    3322:	81fb      	strh	r3, [r7, #14]
			UART1Count = 0;
    3324:	4b2d      	ldr	r3, [pc, #180]	; (33dc <ReadUart+0x15c>)
    3326:	2200      	movs	r2, #0
    3328:	801a      	strh	r2, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    332a:	b662      	cpsie	i

			__enable_irq();
			return ( len );
    332c:	89fb      	ldrh	r3, [r7, #14]
    332e:	e04b      	b.n	33c8 <ReadUart+0x148>
		}
	}//GPS Port
	else if (PortNum == 2) {
    3330:	78fb      	ldrb	r3, [r7, #3]
    3332:	2b02      	cmp	r3, #2
    3334:	d11f      	bne.n	3376 <ReadUart+0xf6>
		if (UART2Count > 0) {
    3336:	4b2b      	ldr	r3, [pc, #172]	; (33e4 <ReadUart+0x164>)
    3338:	881b      	ldrh	r3, [r3, #0]
    333a:	b29b      	uxth	r3, r3
    333c:	2b00      	cmp	r3, #0
    333e:	d042      	beq.n	33c6 <ReadUart+0x146>
			while (buff_count < UART2Count) {
    3340:	e00b      	b.n	335a <ReadUart+0xda>
				*veri_ptr = UART2Buffer[buff_count];
    3342:	8a7b      	ldrh	r3, [r7, #18]
    3344:	4a28      	ldr	r2, [pc, #160]	; (33e8 <ReadUart+0x168>)
    3346:	5cd3      	ldrb	r3, [r2, r3]
    3348:	b2da      	uxtb	r2, r3
    334a:	697b      	ldr	r3, [r7, #20]
    334c:	701a      	strb	r2, [r3, #0]
				buff_count++;
    334e:	8a7b      	ldrh	r3, [r7, #18]
    3350:	3301      	adds	r3, #1
    3352:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    3354:	697b      	ldr	r3, [r7, #20]
    3356:	3301      	adds	r3, #1
    3358:	617b      	str	r3, [r7, #20]
			return ( len );
		}
	}//GPS Port
	else if (PortNum == 2) {
		if (UART2Count > 0) {
			while (buff_count < UART2Count) {
    335a:	4b22      	ldr	r3, [pc, #136]	; (33e4 <ReadUart+0x164>)
    335c:	881b      	ldrh	r3, [r3, #0]
    335e:	b29b      	uxth	r3, r3
    3360:	8a7a      	ldrh	r2, [r7, #18]
    3362:	429a      	cmp	r2, r3
    3364:	d3ed      	bcc.n	3342 <ReadUart+0xc2>
				*veri_ptr = UART2Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    3366:	697b      	ldr	r3, [r7, #20]
    3368:	2200      	movs	r2, #0
    336a:	701a      	strb	r2, [r3, #0]
			UART2Count = 0;
    336c:	4b1d      	ldr	r3, [pc, #116]	; (33e4 <ReadUart+0x164>)
    336e:	2200      	movs	r2, #0
    3370:	801a      	strh	r2, [r3, #0]
			return buff_count;
    3372:	8a7b      	ldrh	r3, [r7, #18]
    3374:	e028      	b.n	33c8 <ReadUart+0x148>
		}
	} else if (PortNum == 3) {
    3376:	78fb      	ldrb	r3, [r7, #3]
    3378:	2b03      	cmp	r3, #3
    337a:	d124      	bne.n	33c6 <ReadUart+0x146>
		if (UART3Count > 0) {
    337c:	4b1b      	ldr	r3, [pc, #108]	; (33ec <ReadUart+0x16c>)
    337e:	881b      	ldrh	r3, [r3, #0]
    3380:	b29b      	uxth	r3, r3
    3382:	2b00      	cmp	r3, #0
    3384:	d01f      	beq.n	33c6 <ReadUart+0x146>
			while (buff_count < UART3Count) {
    3386:	e00b      	b.n	33a0 <ReadUart+0x120>
				*veri_ptr = UART3Buffer[buff_count];
    3388:	8a7b      	ldrh	r3, [r7, #18]
    338a:	4a19      	ldr	r2, [pc, #100]	; (33f0 <ReadUart+0x170>)
    338c:	5cd3      	ldrb	r3, [r2, r3]
    338e:	b2da      	uxtb	r2, r3
    3390:	697b      	ldr	r3, [r7, #20]
    3392:	701a      	strb	r2, [r3, #0]
				buff_count++;
    3394:	8a7b      	ldrh	r3, [r7, #18]
    3396:	3301      	adds	r3, #1
    3398:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    339a:	697b      	ldr	r3, [r7, #20]
    339c:	3301      	adds	r3, #1
    339e:	617b      	str	r3, [r7, #20]
			UART2Count = 0;
			return buff_count;
		}
	} else if (PortNum == 3) {
		if (UART3Count > 0) {
			while (buff_count < UART3Count) {
    33a0:	4b12      	ldr	r3, [pc, #72]	; (33ec <ReadUart+0x16c>)
    33a2:	881b      	ldrh	r3, [r3, #0]
    33a4:	b29b      	uxth	r3, r3
    33a6:	8a7a      	ldrh	r2, [r7, #18]
    33a8:	429a      	cmp	r2, r3
    33aa:	d3ed      	bcc.n	3388 <ReadUart+0x108>
				*veri_ptr = UART3Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    33ac:	697b      	ldr	r3, [r7, #20]
    33ae:	2200      	movs	r2, #0
    33b0:	701a      	strb	r2, [r3, #0]
			int len = UART3Count;
    33b2:	4b0e      	ldr	r3, [pc, #56]	; (33ec <ReadUart+0x16c>)
    33b4:	881b      	ldrh	r3, [r3, #0]
    33b6:	b29b      	uxth	r3, r3
    33b8:	60bb      	str	r3, [r7, #8]
			UART3Count = 0;
    33ba:	4b0c      	ldr	r3, [pc, #48]	; (33ec <ReadUart+0x16c>)
    33bc:	2200      	movs	r2, #0
    33be:	801a      	strh	r2, [r3, #0]
			return len;
    33c0:	68bb      	ldr	r3, [r7, #8]
    33c2:	b29b      	uxth	r3, r3
    33c4:	e000      	b.n	33c8 <ReadUart+0x148>
		}
	}
	return 0;
    33c6:	2300      	movs	r3, #0
}
    33c8:	4618      	mov	r0, r3
    33ca:	371c      	adds	r7, #28
    33cc:	46bd      	mov	sp, r7
    33ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    33d2:	4770      	bx	lr
    33d4:	10000440 	.word	0x10000440
    33d8:	100014cc 	.word	0x100014cc
    33dc:	10000442 	.word	0x10000442
    33e0:	10001070 	.word	0x10001070
    33e4:	10000444 	.word	0x10000444
    33e8:	100016d4 	.word	0x100016d4
    33ec:	10000446 	.word	0x10000446
    33f0:	100015d4 	.word	0x100015d4

000033f4 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    33f4:	b480      	push	{r7}
    33f6:	b083      	sub	sp, #12
    33f8:	af00      	add	r7, sp, #0
    33fa:	4603      	mov	r3, r0
    33fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    33fe:	4908      	ldr	r1, [pc, #32]	; (3420 <NVIC_EnableIRQ+0x2c>)
    3400:	f997 3007 	ldrsb.w	r3, [r7, #7]
    3404:	095b      	lsrs	r3, r3, #5
    3406:	79fa      	ldrb	r2, [r7, #7]
    3408:	f002 021f 	and.w	r2, r2, #31
    340c:	2001      	movs	r0, #1
    340e:	fa00 f202 	lsl.w	r2, r0, r2
    3412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3416:	370c      	adds	r7, #12
    3418:	46bd      	mov	sp, r7
    341a:	f85d 7b04 	ldr.w	r7, [sp], #4
    341e:	4770      	bx	lr
    3420:	e000e100 	.word	0xe000e100

00003424 <WDT_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void WDT_IRQHandler(void) {
    3424:	b480      	push	{r7}
    3426:	af00      	add	r7, sp, #0
	LPC_WDT->WDMOD &= ~WDTOF; /* clear the time-out terrupt flag */
    3428:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    342c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3430:	781b      	ldrb	r3, [r3, #0]
    3432:	b2db      	uxtb	r3, r3
    3434:	f023 0304 	bic.w	r3, r3, #4
    3438:	b2db      	uxtb	r3, r3
    343a:	7013      	strb	r3, [r2, #0]
	wdt_counter++;
    343c:	4b04      	ldr	r3, [pc, #16]	; (3450 <WDT_IRQHandler+0x2c>)
    343e:	681b      	ldr	r3, [r3, #0]
    3440:	3301      	adds	r3, #1
    3442:	4a03      	ldr	r2, [pc, #12]	; (3450 <WDT_IRQHandler+0x2c>)
    3444:	6013      	str	r3, [r2, #0]
	return;
    3446:	bf00      	nop
}
    3448:	46bd      	mov	sp, r7
    344a:	f85d 7b04 	ldr.w	r7, [sp], #4
    344e:	4770      	bx	lr
    3450:	10001ed0 	.word	0x10001ed0

00003454 <WDTInit>:
	//WDT_SetTimeOutRTC(300 * 1000 * 1000);
	LPC_WDT->WDMOD = 0x3;
	//WDTFeed();
}

uint32_t WDTInit(uint32_t feed) {
    3454:	b580      	push	{r7, lr}
    3456:	b082      	sub	sp, #8
    3458:	af00      	add	r7, sp, #0
    345a:	6078      	str	r0, [r7, #4]
	wdt_counter = 0;
    345c:	4b0b      	ldr	r3, [pc, #44]	; (348c <WDTInit+0x38>)
    345e:	2200      	movs	r2, #0
    3460:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(WDT_IRQn);
    3462:	2000      	movs	r0, #0
    3464:	f7ff ffc6 	bl	33f4 <NVIC_EnableIRQ>
	LPC_WDT->WDCLKSEL = 0x1;//0x0 = IRC (Internal RC Oscillator) ,0x1 = APB Peripheral clock
    3468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    346c:	2201      	movs	r2, #1
    346e:	611a      	str	r2, [r3, #16]
	//IRC is active even in Deep Sleep, and WDT Interrupt can wake up MCU in this mode.
	LPC_WDT->WDTC = feed; /* once WDEN is set, the WDT will start after feeding */
    3470:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3474:	687b      	ldr	r3, [r7, #4]
    3476:	6053      	str	r3, [r2, #4]
	LPC_WDT->WDMOD = 0x3;
    3478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    347c:	2203      	movs	r2, #3
    347e:	701a      	strb	r2, [r3, #0]
	WDTFeed();
    3480:	f000 f806 	bl	3490 <WDTFeed>
}
    3484:	4618      	mov	r0, r3
    3486:	3708      	adds	r7, #8
    3488:	46bd      	mov	sp, r7
    348a:	bd80      	pop	{r7, pc}
    348c:	10001ed0 	.word	0x10001ed0

00003490 <WDTFeed>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void WDTFeed(void) {
    3490:	b480      	push	{r7}
    3492:	af00      	add	r7, sp, #0
	LPC_WDT->WDFEED = 0xAA; /* Feeding sequence */
    3494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3498:	22aa      	movs	r2, #170	; 0xaa
    349a:	721a      	strb	r2, [r3, #8]
	LPC_WDT->WDFEED = 0x55;
    349c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    34a0:	2255      	movs	r2, #85	; 0x55
    34a2:	721a      	strb	r2, [r3, #8]
	return;
    34a4:	bf00      	nop
}
    34a6:	46bd      	mov	sp, r7
    34a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    34ac:	4770      	bx	lr
    34ae:	bf00      	nop

000034b0 <XModemReadByte>:
//	(*pByte) = receiveBuf[dataIndex++];
//	return (1);
//}


uint8_t XModemReadByte( unsigned char* pByte) {
    34b0:	b580      	push	{r7, lr}
    34b2:	b08a      	sub	sp, #40	; 0x28
    34b4:	af00      	add	r7, sp, #0
    34b6:	6078      	str	r0, [r7, #4]
	char* pnewline;
	char asciiLen[10];
	unsigned int len, i;
	unsigned dataoffset;

	if (dataIndex >= dataLen) {
    34b8:	4b49      	ldr	r3, [pc, #292]	; (35e0 <XModemReadByte+0x130>)
    34ba:	881a      	ldrh	r2, [r3, #0]
    34bc:	4b49      	ldr	r3, [pc, #292]	; (35e4 <XModemReadByte+0x134>)
    34be:	881b      	ldrh	r3, [r3, #0]
    34c0:	429a      	cmp	r2, r3
    34c2:	d37c      	bcc.n	35be <XModemReadByte+0x10e>
		// all buffer consumed read more from TCP connection
		dataLen = GSM_TCP_Recv( receiveBuf, RECEIVE_BUFF_LEN );
    34c4:	4848      	ldr	r0, [pc, #288]	; (35e8 <XModemReadByte+0x138>)
    34c6:	f240 414c 	movw	r1, #1100	; 0x44c
    34ca:	f7fd fabb 	bl	a44 <GSM_TCP_Recv>
    34ce:	4603      	mov	r3, r0
    34d0:	b29a      	uxth	r2, r3
    34d2:	4b44      	ldr	r3, [pc, #272]	; (35e4 <XModemReadByte+0x134>)
    34d4:	801a      	strh	r2, [r3, #0]
		receiveBuf[dataLen] = '\0';
    34d6:	4b43      	ldr	r3, [pc, #268]	; (35e4 <XModemReadByte+0x134>)
    34d8:	881b      	ldrh	r3, [r3, #0]
    34da:	461a      	mov	r2, r3
    34dc:	4b42      	ldr	r3, [pc, #264]	; (35e8 <XModemReadByte+0x138>)
    34de:	2100      	movs	r1, #0
    34e0:	5499      	strb	r1, [r3, r2]

		// find the length of the message between
		// ",TCP," and "\r\n"
		pdata = strstr( receiveBuf, "IPD" );
    34e2:	4841      	ldr	r0, [pc, #260]	; (35e8 <XModemReadByte+0x138>)
    34e4:	4941      	ldr	r1, [pc, #260]	; (35ec <XModemReadByte+0x13c>)
    34e6:	f002 f95c 	bl	57a2 <strstr>
    34ea:	4603      	mov	r3, r0
    34ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (pdata == NULL)
    34ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    34f0:	2b00      	cmp	r3, #0
    34f2:	d117      	bne.n	3524 <XModemReadByte+0x74>
		{
			pdata = strstr( receiveBuf, ",TCP," );
    34f4:	483c      	ldr	r0, [pc, #240]	; (35e8 <XModemReadByte+0x138>)
    34f6:	493e      	ldr	r1, [pc, #248]	; (35f0 <XModemReadByte+0x140>)
    34f8:	f002 f953 	bl	57a2 <strstr>
    34fc:	4603      	mov	r3, r0
    34fe:	627b      	str	r3, [r7, #36]	; 0x24
			if (pdata == NULL) {
    3500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3502:	2b00      	cmp	r3, #0
    3504:	d101      	bne.n	350a <XModemReadByte+0x5a>
				return (0);
    3506:	2300      	movs	r3, #0
    3508:	e065      	b.n	35d6 <XModemReadByte+0x126>
			}

			pnewline = strstr(pdata, "\r\n");
    350a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    350c:	4939      	ldr	r1, [pc, #228]	; (35f4 <XModemReadByte+0x144>)
    350e:	f002 f948 	bl	57a2 <strstr>
    3512:	4603      	mov	r3, r0
    3514:	623b      	str	r3, [r7, #32]
			dataoffset = 2;
    3516:	2302      	movs	r3, #2
    3518:	61bb      	str	r3, [r7, #24]
			if (pnewline == NULL) {
    351a:	6a3b      	ldr	r3, [r7, #32]
    351c:	2b00      	cmp	r3, #0
    351e:	d10e      	bne.n	353e <XModemReadByte+0x8e>
				return (0);
    3520:	2300      	movs	r3, #0
    3522:	e058      	b.n	35d6 <XModemReadByte+0x126>
			}

		} else
		{
			pnewline = strstr( pdata, "TCP:" );
    3524:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3526:	4934      	ldr	r1, [pc, #208]	; (35f8 <XModemReadByte+0x148>)
    3528:	f002 f93b 	bl	57a2 <strstr>
    352c:	4603      	mov	r3, r0
    352e:	623b      	str	r3, [r7, #32]
			if (pnewline == NULL) {
    3530:	6a3b      	ldr	r3, [r7, #32]
    3532:	2b00      	cmp	r3, #0
    3534:	d101      	bne.n	353a <XModemReadByte+0x8a>
				return (0);
    3536:	2300      	movs	r3, #0
    3538:	e04d      	b.n	35d6 <XModemReadByte+0x126>
			}
			dataoffset = 4;
    353a:	2304      	movs	r3, #4
    353c:	61bb      	str	r3, [r7, #24]
		}

		strncpy( asciiLen, pdata + 3, pnewline - pdata );
    353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3540:	1cd9      	adds	r1, r3, #3
    3542:	6a3a      	ldr	r2, [r7, #32]
    3544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3546:	1ad3      	subs	r3, r2, r3
    3548:	f107 0208 	add.w	r2, r7, #8
    354c:	4610      	mov	r0, r2
    354e:	461a      	mov	r2, r3
    3550:	f002 f8fb 	bl	574a <strncpy>

		asciiLen[pnewline - pdata] = '\0';
    3554:	6a3a      	ldr	r2, [r7, #32]
    3556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3558:	1ad3      	subs	r3, r2, r3
    355a:	f107 0228 	add.w	r2, r7, #40	; 0x28
    355e:	4413      	add	r3, r2
    3560:	2200      	movs	r2, #0
    3562:	f803 2c20 	strb.w	r2, [r3, #-32]

		len = atoi(asciiLen);
    3566:	f107 0308 	add.w	r3, r7, #8
    356a:	4618      	mov	r0, r3
    356c:	f002 f86e 	bl	564c <atoi>
    3570:	4603      	mov	r3, r0
    3572:	617b      	str	r3, [r7, #20]

//		int count = sprintf(asciiLen, "%d", len );
//		asciiLen[count] = '\0';
//		TraceDumpHex(asciiLen, strlen(asciiLen));

		for (i = 0; i < len; i++) {
    3574:	2300      	movs	r3, #0
    3576:	61fb      	str	r3, [r7, #28]
    3578:	e00d      	b.n	3596 <XModemReadByte+0xe6>
			receiveBuf[i] = *(pnewline + dataoffset + i);
    357a:	69ba      	ldr	r2, [r7, #24]
    357c:	69fb      	ldr	r3, [r7, #28]
    357e:	4413      	add	r3, r2
    3580:	6a3a      	ldr	r2, [r7, #32]
    3582:	4413      	add	r3, r2
    3584:	7819      	ldrb	r1, [r3, #0]
    3586:	4a18      	ldr	r2, [pc, #96]	; (35e8 <XModemReadByte+0x138>)
    3588:	69fb      	ldr	r3, [r7, #28]
    358a:	4413      	add	r3, r2
    358c:	460a      	mov	r2, r1
    358e:	701a      	strb	r2, [r3, #0]

//		int count = sprintf(asciiLen, "%d", len );
//		asciiLen[count] = '\0';
//		TraceDumpHex(asciiLen, strlen(asciiLen));

		for (i = 0; i < len; i++) {
    3590:	69fb      	ldr	r3, [r7, #28]
    3592:	3301      	adds	r3, #1
    3594:	61fb      	str	r3, [r7, #28]
    3596:	69fa      	ldr	r2, [r7, #28]
    3598:	697b      	ldr	r3, [r7, #20]
    359a:	429a      	cmp	r2, r3
    359c:	d3ed      	bcc.n	357a <XModemReadByte+0xca>
			receiveBuf[i] = *(pnewline + dataoffset + i);
		}
		dataLen   = len;
    359e:	697b      	ldr	r3, [r7, #20]
    35a0:	b29a      	uxth	r2, r3
    35a2:	4b10      	ldr	r3, [pc, #64]	; (35e4 <XModemReadByte+0x134>)
    35a4:	801a      	strh	r2, [r3, #0]
		dataIndex = 0;
    35a6:	4b0e      	ldr	r3, [pc, #56]	; (35e0 <XModemReadByte+0x130>)
    35a8:	2200      	movs	r2, #0
    35aa:	801a      	strh	r2, [r3, #0]
		if( dataLen <= 0 ) {
    35ac:	4b0d      	ldr	r3, [pc, #52]	; (35e4 <XModemReadByte+0x134>)
    35ae:	881b      	ldrh	r3, [r3, #0]
    35b0:	2b00      	cmp	r3, #0
    35b2:	d104      	bne.n	35be <XModemReadByte+0x10e>
			dataLen = 0;
    35b4:	4b0b      	ldr	r3, [pc, #44]	; (35e4 <XModemReadByte+0x134>)
    35b6:	2200      	movs	r2, #0
    35b8:	801a      	strh	r2, [r3, #0]
			return (0);  // no data available
    35ba:	2300      	movs	r3, #0
    35bc:	e00b      	b.n	35d6 <XModemReadByte+0x126>
		}
	}

	(*pByte) = receiveBuf[dataIndex++];
    35be:	4b08      	ldr	r3, [pc, #32]	; (35e0 <XModemReadByte+0x130>)
    35c0:	881b      	ldrh	r3, [r3, #0]
    35c2:	1c5a      	adds	r2, r3, #1
    35c4:	b291      	uxth	r1, r2
    35c6:	4a06      	ldr	r2, [pc, #24]	; (35e0 <XModemReadByte+0x130>)
    35c8:	8011      	strh	r1, [r2, #0]
    35ca:	461a      	mov	r2, r3
    35cc:	4b06      	ldr	r3, [pc, #24]	; (35e8 <XModemReadByte+0x138>)
    35ce:	5c9a      	ldrb	r2, [r3, r2]
    35d0:	687b      	ldr	r3, [r7, #4]
    35d2:	701a      	strb	r2, [r3, #0]
	return (1);
    35d4:	2301      	movs	r3, #1
}
    35d6:	4618      	mov	r0, r3
    35d8:	3728      	adds	r7, #40	; 0x28
    35da:	46bd      	mov	sp, r7
    35dc:	bd80      	pop	{r7, pc}
    35de:	bf00      	nop
    35e0:	10000c96 	.word	0x10000c96
    35e4:	10000c94 	.word	0x10000c94
    35e8:	10000848 	.word	0x10000848
    35ec:	00007500 	.word	0x00007500
    35f0:	00007504 	.word	0x00007504
    35f4:	0000750c 	.word	0x0000750c
    35f8:	00007510 	.word	0x00007510

000035fc <XModem1K_Client>:


int XModem1K_Client(
		uint32_t (*pu32Xmodem1kRxPacketCallback)(uint8_t *pu8Data,
				uint16_t u16Len)) {
    35fc:	b580      	push	{r7, lr}
    35fe:	b0be      	sub	sp, #248	; 0xf8
    3600:	af00      	add	r7, sp, #0
    3602:	6078      	str	r0, [r7, #4]
	uint32_t u32InProgress = 1;
    3604:	2301      	movs	r3, #1
    3606:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	uint32_t u32State = STATE_IDLE;
    360a:	2300      	movs	r3, #0
    360c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint32_t u32ByteCount;
	uint32_t u32PktLen;
	uint16_t u16CRC, calculatedCRC;
	uint16_t frameNum = 0;
    3610:	2300      	movs	r3, #0
    3612:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8

	uint32_t trials;

	/* Prepare UART for RX/TX */

	while (u32InProgress) {
    3616:	e226      	b.n	3a66 <XModem1K_Client+0x46a>
		WDTFeed();
    3618:	f7ff ff3a 	bl	3490 <WDTFeed>
		switch (u32State) {
    361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    3620:	2b01      	cmp	r3, #1
    3622:	d01e      	beq.n	3662 <XModem1K_Client+0x66>
    3624:	2b01      	cmp	r3, #1
    3626:	d302      	bcc.n	362e <XModem1K_Client+0x32>
    3628:	2b02      	cmp	r3, #2
    362a:	d061      	beq.n	36f0 <XModem1K_Client+0xf4>
    362c:	e21a      	b.n	3a64 <XModem1K_Client+0x468>
		case STATE_IDLE: {

			/* Send command to server indicating we are ready to receive */
			uint8_t u8Cmd = POLL;
    362e:	2343      	movs	r3, #67	; 0x43
    3630:	73fb      	strb	r3, [r7, #15]

			TraceNL( "Start downloading" );
    3632:	48db      	ldr	r0, [pc, #876]	; (39a0 <XModem1K_Client+0x3a4>)
    3634:	f7ff f89a 	bl	276c <TraceNL>
			TracePutcHex( u8Cmd );
    3638:	7bfb      	ldrb	r3, [r7, #15]
    363a:	4618      	mov	r0, r3
    363c:	f7ff f8bc 	bl	27b8 <TracePutcHex>
			GSM_TCP_Send(&u8Cmd, 1);
    3640:	f107 030f 	add.w	r3, r7, #15
    3644:	4618      	mov	r0, r3
    3646:	2101      	movs	r1, #1
    3648:	f7fd fbe2 	bl	e10 <GSM_TCP_Send>

			/* Start timeout to send another poll if we do not get a response */
			vTimerStart(POLL_PERIOD_ms);
    364c:	f644 6020 	movw	r0, #20000	; 0x4e20
    3650:	f000 fa1a 	bl	3a88 <vTimerStart>
			trials   = DOWNLOAD_MAX_TRIALS;
    3654:	2303      	movs	r3, #3
    3656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

			u32State = STATE_CONNECTING;
    365a:	2301      	movs	r3, #1
    365c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		}
			break;
    3660:	e201      	b.n	3a66 <XModem1K_Client+0x46a>

		case STATE_CONNECTING: {
			uint8_t u8Data;

			/* Check if a character has been received on the UART */
			if( XModemReadByte( &u8Data ) )
    3662:	f107 030e 	add.w	r3, r7, #14
    3666:	4618      	mov	r0, r3
    3668:	f7ff ff22 	bl	34b0 <XModemReadByte>
    366c:	4603      	mov	r3, r0
    366e:	2b00      	cmp	r3, #0
    3670:	d011      	beq.n	3696 <XModem1K_Client+0x9a>
			{
				/* Expecting a start of packet character */
				if( u8Data == SOH )
    3672:	7bbb      	ldrb	r3, [r7, #14]
    3674:	2b01      	cmp	r3, #1
    3676:	d13a      	bne.n	36ee <XModem1K_Client+0xf2>
				{
					/* SOH indicates short pay load packet is being transmitted */
					u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    3678:	f44f 6380 	mov.w	r3, #1024	; 0x400
    367c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
					u32ByteCount = 1;
    3680:	2301      	movs	r3, #1
    3682:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

					/* Start packet timeout */
					vTimerStart( PACKET_TIMEOUT_PERIOD_ms);
    3686:	f644 6020 	movw	r0, #20000	; 0x4e20
    368a:	f000 f9fd 	bl	3a88 <vTimerStart>

					/* Wait for a further characters */
					u32State = STATE_RECEIVING;
    368e:	2302      	movs	r3, #2
    3690:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    3694:	e1e7      	b.n	3a66 <XModem1K_Client+0x46a>
				}
			} else /* No data received yet, check poll command timeout */
			{
				if ((LPC_TIM0->TCR & 0x01) == 0) {
    3696:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    369a:	685b      	ldr	r3, [r3, #4]
    369c:	f003 0301 	and.w	r3, r3, #1
    36a0:	2b00      	cmp	r3, #0
    36a2:	f040 81e0 	bne.w	3a66 <XModem1K_Client+0x46a>
					/* Timeout expired following poll command transmission so try again.. */
					uint8_t u8Cmd = POLL;
    36a6:	2343      	movs	r3, #67	; 0x43
    36a8:	737b      	strb	r3, [r7, #13]

					if (trials-- > 0) {
    36aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    36ae:	1e5a      	subs	r2, r3, #1
    36b0:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
    36b4:	2b00      	cmp	r3, #0
    36b6:	d014      	beq.n	36e2 <XModem1K_Client+0xe6>
						TraceNL("Connecting state timer expired sending  new request  ");
    36b8:	48ba      	ldr	r0, [pc, #744]	; (39a4 <XModem1K_Client+0x3a8>)
    36ba:	f7ff f857 	bl	276c <TraceNL>
						TracePutcHex( u8Cmd );
    36be:	7b7b      	ldrb	r3, [r7, #13]
    36c0:	4618      	mov	r0, r3
    36c2:	f7ff f879 	bl	27b8 <TracePutcHex>
						TraceNL("\r\n");
    36c6:	48b8      	ldr	r0, [pc, #736]	; (39a8 <XModem1K_Client+0x3ac>)
    36c8:	f7ff f850 	bl	276c <TraceNL>
						GSM_TCP_Send(&u8Cmd, 1);
    36cc:	f107 030d 	add.w	r3, r7, #13
    36d0:	4618      	mov	r0, r3
    36d2:	2101      	movs	r1, #1
    36d4:	f7fd fb9c 	bl	e10 <GSM_TCP_Send>

					/*
					 * Restart timeout to send another poll
					 * if we do not get a response
					 */
					vTimerStart( POLL_PERIOD_ms);
    36d8:	f644 6020 	movw	r0, #20000	; 0x4e20
    36dc:	f000 f9d4 	bl	3a88 <vTimerStart>
    36e0:	e005      	b.n	36ee <XModem1K_Client+0xf2>
						TraceNL("Connecting state timer expired sending  new request  ");
						TracePutcHex( u8Cmd );
						TraceNL("\r\n");
						GSM_TCP_Send(&u8Cmd, 1);
					} else {
						TraceNL("No reply give up upgrading");
    36e2:	48b2      	ldr	r0, [pc, #712]	; (39ac <XModem1K_Client+0x3b0>)
    36e4:	f7ff f842 	bl	276c <TraceNL>
						return ( DOWNLOAD_ERR_TIMEOUT );
    36e8:	f04f 33ff 	mov.w	r3, #4294967295
    36ec:	e1c0      	b.n	3a70 <XModem1K_Client+0x474>
					 */
					vTimerStart( POLL_PERIOD_ms);
				}
			}
		}
			break;
    36ee:	e1ba      	b.n	3a66 <XModem1K_Client+0x46a>

		case STATE_RECEIVING: {
			uint8_t u8Data;

			/* Check if a character has been received on the UART */
			if( XModemReadByte( &u8Data ) )
    36f0:	f107 030c 	add.w	r3, r7, #12
    36f4:	4618      	mov	r0, r3
    36f6:	f7ff fedb 	bl	34b0 <XModemReadByte>
    36fa:	4603      	mov	r3, r0
    36fc:	2b00      	cmp	r3, #0
    36fe:	f000 8189 	beq.w	3a14 <XModem1K_Client+0x418>
			{
				// TracePutcHex( u8Data );
				/* Position of received byte determines action we take */
				if( u32ByteCount == 0 )
    3702:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3706:	2b00      	cmp	r3, #0
    3708:	f040 80b2 	bne.w	3870 <XModem1K_Client+0x274>
				{
					/* Expecting a start of packet character */
					if( u8Data == SOH ) {
    370c:	7b3b      	ldrb	r3, [r7, #12]
    370e:	2b01      	cmp	r3, #1
    3710:	d10b      	bne.n	372a <XModem1K_Client+0x12e>
						/* SOH indicates short pay load packet is being transmitted */
						u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    3712:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3716:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
						u32ByteCount = 1;
    371a:	2301      	movs	r3, #1
    371c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

						/* Start packet timeout */
						vTimerStart(PACKET_TIMEOUT_PERIOD_ms);
    3720:	f644 6020 	movw	r0, #20000	; 0x4e20
    3724:	f000 f9b0 	bl	3a88 <vTimerStart>
    3728:	e19b      	b.n	3a62 <XModem1K_Client+0x466>
					} else if (u8Data == EOT) {
    372a:	7b3b      	ldrb	r3, [r7, #12]
    372c:	2b04      	cmp	r3, #4
    372e:	f040 8198 	bne.w	3a62 <XModem1K_Client+0x466>
						TraceNL("Received EOT ");
    3732:	489f      	ldr	r0, [pc, #636]	; (39b0 <XModem1K_Client+0x3b4>)
    3734:	f7ff f81a 	bl	276c <TraceNL>
						/* Server indicating transmission is complete */
						TraceNL("Closing TCP connection ");
    3738:	489e      	ldr	r0, [pc, #632]	; (39b4 <XModem1K_Client+0x3b8>)
    373a:	f7ff f817 	bl	276c <TraceNL>
						GSM_TCP_Close( );
    373e:	f7fd fd85 	bl	124c <GSM_TCP_Close>

						u32InProgress = 0;
    3742:	2300      	movs	r3, #0
    3744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

						sprintf( buffer, "byte count: %d, packet len %d\r\n", u32ByteCount, u32PktLen);
    3748:	f107 0310 	add.w	r3, r7, #16
    374c:	4618      	mov	r0, r3
    374e:	499a      	ldr	r1, [pc, #616]	; (39b8 <XModem1K_Client+0x3bc>)
    3750:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    3754:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    3758:	f000 fb6c 	bl	3e34 <sprintf>
						Trace( buffer, strlen( buffer ) );
    375c:	f107 0310 	add.w	r3, r7, #16
    3760:	4618      	mov	r0, r3
    3762:	f001 ffcd 	bl	5700 <strlen>
    3766:	4602      	mov	r2, r0
    3768:	f107 0310 	add.w	r3, r7, #16
    376c:	4618      	mov	r0, r3
    376e:	4611      	mov	r1, r2
    3770:	f7fe ffec 	bl	274c <Trace>

						/* Call the call back function to indicated a complete transmission */
						/* If length == 0, then EOT */
						pu32Xmodem1kRxPacketCallback( SECONDARY_IMAGE_LOAD_ADDR, 0);
    3774:	687b      	ldr	r3, [r7, #4]
    3776:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    377a:	2100      	movs	r1, #0
    377c:	4798      	blx	r3

						uint32_t imageSize;
						uint16_t imageCRC;

						XModemReadByte( &u8Data );
    377e:	f107 030c 	add.w	r3, r7, #12
    3782:	4618      	mov	r0, r3
    3784:	f7ff fe94 	bl	34b0 <XModemReadByte>
						imageSize = u8Data << 24 & 0xFF000000;
    3788:	7b3b      	ldrb	r3, [r7, #12]
    378a:	061b      	lsls	r3, r3, #24
    378c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

						XModemReadByte( &u8Data );
    3790:	f107 030c 	add.w	r3, r7, #12
    3794:	4618      	mov	r0, r3
    3796:	f7ff fe8b 	bl	34b0 <XModemReadByte>
						imageSize |= u8Data << 16 & 0x00FF0000;
    379a:	7b3b      	ldrb	r3, [r7, #12]
    379c:	041b      	lsls	r3, r3, #16
    379e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    37a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
    37a6:	4313      	orrs	r3, r2
    37a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

						XModemReadByte( &u8Data );
    37ac:	f107 030c 	add.w	r3, r7, #12
    37b0:	4618      	mov	r0, r3
    37b2:	f7ff fe7d 	bl	34b0 <XModemReadByte>
						imageSize |= u8Data << 8 & 0x0000FF00;
    37b6:	7b3b      	ldrb	r3, [r7, #12]
    37b8:	021b      	lsls	r3, r3, #8
    37ba:	b29b      	uxth	r3, r3
    37bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
    37c0:	4313      	orrs	r3, r2
    37c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

						XModemReadByte( &u8Data );
    37c6:	f107 030c 	add.w	r3, r7, #12
    37ca:	4618      	mov	r0, r3
    37cc:	f7ff fe70 	bl	34b0 <XModemReadByte>
						imageSize |= u8Data << 0 & 0x000000FF;
    37d0:	7b3b      	ldrb	r3, [r7, #12]
    37d2:	461a      	mov	r2, r3
    37d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    37d8:	4313      	orrs	r3, r2
    37da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc


						XModemReadByte( &u8Data );
    37de:	f107 030c 	add.w	r3, r7, #12
    37e2:	4618      	mov	r0, r3
    37e4:	f7ff fe64 	bl	34b0 <XModemReadByte>
						imageCRC = u8Data << 8 & 0xFF00;
    37e8:	7b3b      	ldrb	r3, [r7, #12]
    37ea:	021b      	lsls	r3, r3, #8
    37ec:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda

						XModemReadByte( &u8Data );
    37f0:	f107 030c 	add.w	r3, r7, #12
    37f4:	4618      	mov	r0, r3
    37f6:	f7ff fe5b 	bl	34b0 <XModemReadByte>
						imageCRC |= u8Data << 0 & 0x00FF;
    37fa:	7b3b      	ldrb	r3, [r7, #12]
    37fc:	b29a      	uxth	r2, r3
    37fe:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
    3802:	4313      	orrs	r3, r2
    3804:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda

						sprintf( buffer, "file size: 0x%X, CRC: 0x%X\r\n", imageSize, imageCRC );
    3808:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
    380c:	f107 0210 	add.w	r2, r7, #16
    3810:	4610      	mov	r0, r2
    3812:	496a      	ldr	r1, [pc, #424]	; (39bc <XModem1K_Client+0x3c0>)
    3814:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
    3818:	f000 fb0c 	bl	3e34 <sprintf>
						Trace( buffer );
    381c:	f107 0310 	add.w	r3, r7, #16
    3820:	4618      	mov	r0, r3
    3822:	f7fe ff93 	bl	274c <Trace>

						calculatedCRC = u16CRC_Calc16( SECONDARY_IMAGE_LOAD_ADDR, imageSize );
    3826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    382a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    382e:	4619      	mov	r1, r3
    3830:	f7fd fd20 	bl	1274 <u16CRC_Calc16>
    3834:	4603      	mov	r3, r0
    3836:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8

						sprintf( buffer, "Calculated Image CRC: 0x%X\r\n", calculatedCRC );
    383a:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
    383e:	f107 0210 	add.w	r2, r7, #16
    3842:	4610      	mov	r0, r2
    3844:	495e      	ldr	r1, [pc, #376]	; (39c0 <XModem1K_Client+0x3c4>)
    3846:	461a      	mov	r2, r3
    3848:	f000 faf4 	bl	3e34 <sprintf>
						Trace( buffer );
    384c:	f107 0310 	add.w	r3, r7, #16
    3850:	4618      	mov	r0, r3
    3852:	f7fe ff7b 	bl	274c <Trace>

						WriteImageSignature( imageSize, (0xFFFF0000 | (0x0000FFFF & (uint32_t)imageCRC)) );
    3856:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
    385a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    385e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3862:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
    3866:	4619      	mov	r1, r3
    3868:	f7fe fe7e 	bl	2568 <WriteImageSignature>

					    // We should have completed the image reception now dump it to see if any problem.
						// TraceDumpHex( SECONDARY_IMAGE_LOAD_ADDR, 20000 );

						return ( 0 );
    386c:	2300      	movs	r3, #0
    386e:	e0ff      	b.n	3a70 <XModem1K_Client+0x474>

					} else {
						// Unexpected char ignore it
					}
				} else if (u32ByteCount == 1) {
    3870:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3874:	2b01      	cmp	r3, #1
    3876:	d108      	bne.n	388a <XModem1K_Client+0x28e>
					/* Byte 1 is the packet number - should be different from last one we received */
					frameNum = u8Data;
    3878:	7b3b      	ldrb	r3, [r7, #12]
    387a:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
					u32ByteCount++;
    387e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3882:	3301      	adds	r3, #1
    3884:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    3888:	e0eb      	b.n	3a62 <XModem1K_Client+0x466>
				} else if (u32ByteCount == 2) {
    388a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    388e:	2b02      	cmp	r3, #2
    3890:	d11f      	bne.n	38d2 <XModem1K_Client+0x2d6>
					/* Byte 2 is the packet number inverted - check for error with last byte */
					frameNum <<= 8;
    3892:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
    3896:	021b      	lsls	r3, r3, #8
    3898:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
					frameNum |= u8Data;
    389c:	7b3b      	ldrb	r3, [r7, #12]
    389e:	b29a      	uxth	r2, r3
    38a0:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
    38a4:	4313      	orrs	r3, r2
    38a6:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
					sprintf( buffer, "frame number :  %d\r\n", frameNum );
    38aa:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
    38ae:	f107 0210 	add.w	r2, r7, #16
    38b2:	4610      	mov	r0, r2
    38b4:	4943      	ldr	r1, [pc, #268]	; (39c4 <XModem1K_Client+0x3c8>)
    38b6:	461a      	mov	r2, r3
    38b8:	f000 fabc 	bl	3e34 <sprintf>
				    TraceNL( buffer );
    38bc:	f107 0310 	add.w	r3, r7, #16
    38c0:	4618      	mov	r0, r3
    38c2:	f7fe ff53 	bl	276c <TraceNL>

					u32ByteCount++;
    38c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    38ca:	3301      	adds	r3, #1
    38cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    38d0:	e0c7      	b.n	3a62 <XModem1K_Client+0x466>
				} else if( ((u32ByteCount == (SHORT_PACKET_PAYLOAD_LEN+3)) &&
    38d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    38d6:	f240 4203 	movw	r2, #1027	; 0x403
    38da:	4293      	cmp	r3, r2
    38dc:	d10d      	bne.n	38fa <XModem1K_Client+0x2fe>
    38de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    38e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    38e6:	d108      	bne.n	38fa <XModem1K_Client+0x2fe>
						    (u32PktLen == SHORT_PACKET_PAYLOAD_LEN)) )
				{
					/* If pay load is short byte 131 is the MS byte of the packet CRC, if pay load
					 is long byte 1027 is the MS byte of the packet CRC. */
					u16CRC = u8Data;
    38e8:	7b3b      	ldrb	r3, [r7, #12]
    38ea:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
					u32ByteCount++;
    38ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    38f2:	3301      	adds	r3, #1
    38f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    38f8:	e08b      	b.n	3a12 <XModem1K_Client+0x416>

				}
				else if( (u32ByteCount == (SHORT_PACKET_PAYLOAD_LEN+4)) &&
    38fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    38fe:	f240 4204 	movw	r2, #1028	; 0x404
    3902:	4293      	cmp	r3, r2
    3904:	d179      	bne.n	39fa <XModem1K_Client+0x3fe>
    3906:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    390a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    390e:	d174      	bne.n	39fa <XModem1K_Client+0x3fe>
						 (u32PktLen == SHORT_PACKET_PAYLOAD_LEN) )
				{
					/* If pay load is short byte 132 is the LS byte of the packet CRC, if pay load
					 is long byte 1028 is the LS byte of the packet CRC. */
					u16CRC <<= 8;
    3910:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
    3914:	021b      	lsls	r3, r3, #8
    3916:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
					u16CRC |= u8Data;
    391a:	7b3b      	ldrb	r3, [r7, #12]
    391c:	b29a      	uxth	r2, r3
    391e:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
    3922:	4313      	orrs	r3, r2
    3924:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea

					calculatedCRC = u16CRC_Calc16( &au8RxBuffer[0], u32PktLen );
    3928:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    392c:	4826      	ldr	r0, [pc, #152]	; (39c8 <XModem1K_Client+0x3cc>)
    392e:	4619      	mov	r1, r3
    3930:	f7fd fca0 	bl	1274 <u16CRC_Calc16>
    3934:	4603      	mov	r3, r0
    3936:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
					sprintf( buffer, "calculated CRC : 0x%X\r\n", calculatedCRC );
    393a:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
    393e:	f107 0210 	add.w	r2, r7, #16
    3942:	4610      	mov	r0, r2
    3944:	4921      	ldr	r1, [pc, #132]	; (39cc <XModem1K_Client+0x3d0>)
    3946:	461a      	mov	r2, r3
    3948:	f000 fa74 	bl	3e34 <sprintf>
				    TraceNL( buffer );
    394c:	f107 0310 	add.w	r3, r7, #16
    3950:	4618      	mov	r0, r3
    3952:	f7fe ff0b 	bl	276c <TraceNL>

					/* Check the received CRC against the CRC we generate on the packet data */
					if( calculatedCRC == u16CRC )
    3956:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
    395a:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
    395e:	429a      	cmp	r2, r3
    3960:	d13c      	bne.n	39dc <XModem1K_Client+0x3e0>
					{
						uint8_t u8Cmd;

						u8Cmd = ACK;
    3962:	2306      	movs	r3, #6
    3964:	72fb      	strb	r3, [r7, #11]
						GSM_TCP_Send( &u8Cmd, 1 );
    3966:	f107 030b 	add.w	r3, r7, #11
    396a:	4618      	mov	r0, r3
    396c:	2101      	movs	r1, #1
    396e:	f7fd fa4f 	bl	e10 <GSM_TCP_Send>

						WDTFeed();
    3972:	f7ff fd8d 	bl	3490 <WDTFeed>
						// write to flash
						pu32Xmodem1kRxPacketCallback( &au8RxBuffer[0], u32PktLen );
    3976:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    397a:	b29a      	uxth	r2, r3
    397c:	687b      	ldr	r3, [r7, #4]
    397e:	4812      	ldr	r0, [pc, #72]	; (39c8 <XModem1K_Client+0x3cc>)
    3980:	4611      	mov	r1, r2
    3982:	4798      	blx	r3

						TraceNL("Received a frame ");
    3984:	4812      	ldr	r0, [pc, #72]	; (39d0 <XModem1K_Client+0x3d4>)
    3986:	f7fe fef1 	bl	276c <TraceNL>
						TraceNL("Sending  ACK ");
    398a:	4812      	ldr	r0, [pc, #72]	; (39d4 <XModem1K_Client+0x3d8>)
    398c:	f7fe feee 	bl	276c <TraceNL>
						TraceNL("CRC matches \r\n");
    3990:	4811      	ldr	r0, [pc, #68]	; (39d8 <XModem1K_Client+0x3dc>)
    3992:	f7fe feeb 	bl	276c <TraceNL>
						DelayMs( 100 );
    3996:	2064      	movs	r0, #100	; 0x64
    3998:	f7fe fec2 	bl	2720 <DelayMs>
    399c:	e029      	b.n	39f2 <XModem1K_Client+0x3f6>
    399e:	bf00      	nop
    39a0:	00007518 	.word	0x00007518
    39a4:	0000752c 	.word	0x0000752c
    39a8:	0000750c 	.word	0x0000750c
    39ac:	00007564 	.word	0x00007564
    39b0:	00007580 	.word	0x00007580
    39b4:	00007590 	.word	0x00007590
    39b8:	000075a8 	.word	0x000075a8
    39bc:	000075c8 	.word	0x000075c8
    39c0:	000075e8 	.word	0x000075e8
    39c4:	00007608 	.word	0x00007608
    39c8:	10000448 	.word	0x10000448
    39cc:	00007620 	.word	0x00007620
    39d0:	00007638 	.word	0x00007638
    39d4:	0000764c 	.word	0x0000764c
    39d8:	0000765c 	.word	0x0000765c

					} else /* Error CRC calculated does not match that received */
					{
						/* Indicate problem to server - should result in packet being resent.. */
						uint8_t u8Cmd = NAK;
    39dc:	2315      	movs	r3, #21
    39de:	72bb      	strb	r3, [r7, #10]
						TraceNL("CRC does not match  NAK ing");
    39e0:	4825      	ldr	r0, [pc, #148]	; (3a78 <XModem1K_Client+0x47c>)
    39e2:	f7fe fec3 	bl	276c <TraceNL>
						GSM_TCP_Send(&u8Cmd, 1);
    39e6:	f107 030a 	add.w	r3, r7, #10
    39ea:	4618      	mov	r0, r3
    39ec:	2101      	movs	r1, #1
    39ee:	f7fd fa0f 	bl	e10 <GSM_TCP_Send>
					}
					u32ByteCount = 0;
    39f2:	2300      	movs	r3, #0
    39f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
					u32ByteCount++;

				}
				else if( (u32ByteCount == (SHORT_PACKET_PAYLOAD_LEN+4)) &&
						 (u32PktLen == SHORT_PACKET_PAYLOAD_LEN) )
				{
    39f8:	e00b      	b.n	3a12 <XModem1K_Client+0x416>
					}
					u32ByteCount = 0;

				} else {
					/* Must be pay load data so store */
					au8RxBuffer[u32ByteCount - PACKET_HEADER_LEN] = u8Data;
    39fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    39fe:	3b03      	subs	r3, #3
    3a00:	7b39      	ldrb	r1, [r7, #12]
    3a02:	4a1e      	ldr	r2, [pc, #120]	; (3a7c <XModem1K_Client+0x480>)
    3a04:	54d1      	strb	r1, [r2, r3]
					u32ByteCount++;
    3a06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3a0a:	3301      	adds	r3, #1
    3a0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    3a10:	e027      	b.n	3a62 <XModem1K_Client+0x466>
    3a12:	e026      	b.n	3a62 <XModem1K_Client+0x466>
				}
			}
			else
			{
				if( (LPC_TIM0->TCR & 0x01) == 0 )
    3a14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3a18:	685b      	ldr	r3, [r3, #4]
    3a1a:	f003 0301 	and.w	r3, r3, #1
    3a1e:	2b00      	cmp	r3, #0
    3a20:	d11f      	bne.n	3a62 <XModem1K_Client+0x466>
				{
					/* Timeout expired no data received stop upgrade  */
					if (trials-- > 0)
    3a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    3a26:	1e5a      	subs	r2, r3, #1
    3a28:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
    3a2c:	2b00      	cmp	r3, #0
    3a2e:	d012      	beq.n	3a56 <XModem1K_Client+0x45a>
					{
						TraceNL("Time out in RECEIVING   ");
    3a30:	4813      	ldr	r0, [pc, #76]	; (3a80 <XModem1K_Client+0x484>)
    3a32:	f7fe fe9b 	bl	276c <TraceNL>
						uint8_t u8Cmd = NAK;
    3a36:	2315      	movs	r3, #21
    3a38:	727b      	strb	r3, [r7, #9]
						GSM_TCP_Send(&u8Cmd, 1);
    3a3a:	f107 0309 	add.w	r3, r7, #9
    3a3e:	4618      	mov	r0, r3
    3a40:	2101      	movs	r1, #1
    3a42:	f7fd f9e5 	bl	e10 <GSM_TCP_Send>

						u32ByteCount = 0;
    3a46:	2300      	movs	r3, #0
    3a48:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
						vTimerStart( POLL_PERIOD_ms);
    3a4c:	f644 6020 	movw	r0, #20000	; 0x4e20
    3a50:	f000 f81a 	bl	3a88 <vTimerStart>
    3a54:	e005      	b.n	3a62 <XModem1K_Client+0x466>
					} else {
						// no more trying giving up upgrading
						TraceNL("Download process failed giving up upgrading");
    3a56:	480b      	ldr	r0, [pc, #44]	; (3a84 <XModem1K_Client+0x488>)
    3a58:	f7fe fe88 	bl	276c <TraceNL>
						return ( DOWNLOAD_ERR_TIMEOUT );
    3a5c:	f04f 33ff 	mov.w	r3, #4294967295
    3a60:	e006      	b.n	3a70 <XModem1K_Client+0x474>
					}
				}
			}
		}
			break;
    3a62:	e000      	b.n	3a66 <XModem1K_Client+0x46a>

		default:
			break;
    3a64:	bf00      	nop

	uint32_t trials;

	/* Prepare UART for RX/TX */

	while (u32InProgress) {
    3a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    3a6a:	2b00      	cmp	r3, #0
    3a6c:	f47f add4 	bne.w	3618 <XModem1K_Client+0x1c>

		default:
			break;
		}
	}
}
    3a70:	4618      	mov	r0, r3
    3a72:	37f8      	adds	r7, #248	; 0xf8
    3a74:	46bd      	mov	sp, r7
    3a76:	bd80      	pop	{r7, pc}
    3a78:	0000766c 	.word	0x0000766c
    3a7c:	10000448 	.word	0x10000448
    3a80:	00007688 	.word	0x00007688
    3a84:	000076a4 	.word	0x000076a4

00003a88 <vTimerStart>:
 ** Parameters:	     None
 **
 ** Returned value:  None
 **
 *****************************************************************************/
static void vTimerStart(uint32_t u32Periodms) {
    3a88:	b480      	push	{r7}
    3a8a:	b083      	sub	sp, #12
    3a8c:	af00      	add	r7, sp, #0
    3a8e:	6078      	str	r0, [r7, #4]
	/* Enable the timer clock */
	LPC_SC->PCONP |= (1UL << 1);
    3a90:	4a19      	ldr	r2, [pc, #100]	; (3af8 <vTimerStart+0x70>)
    3a92:	4b19      	ldr	r3, [pc, #100]	; (3af8 <vTimerStart+0x70>)
    3a94:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    3a98:	f043 0302 	orr.w	r3, r3, #2
    3a9c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

	/* Configure the timer so that we can poll for a match */
	LPC_TIM0->TCR = 0x02; /* reset timer */
    3aa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3aa4:	2202      	movs	r2, #2
    3aa6:	605a      	str	r2, [r3, #4]
	LPC_TIM0->PR = 0x00; /* set prescaler to zero */
    3aa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3aac:	2200      	movs	r2, #0
    3aae:	60da      	str	r2, [r3, #12]
	LPC_TIM0->MR0 = u32Periodms
    3ab0:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
			* ((SystemCoreClock / 4 / (LPC_TIM0->PR + 1)) / 1000UL);
    3ab4:	4b11      	ldr	r3, [pc, #68]	; (3afc <vTimerStart+0x74>)
    3ab6:	681b      	ldr	r3, [r3, #0]
    3ab8:	4a11      	ldr	r2, [pc, #68]	; (3b00 <vTimerStart+0x78>)
    3aba:	fba2 2303 	umull	r2, r3, r2, r3
    3abe:	0a1a      	lsrs	r2, r3, #8
    3ac0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3ac4:	68db      	ldr	r3, [r3, #12]
    3ac6:	3301      	adds	r3, #1
    3ac8:	fbb2 f3f3 	udiv	r3, r2, r3
    3acc:	687a      	ldr	r2, [r7, #4]
    3ace:	fb02 f303 	mul.w	r3, r2, r3
	LPC_SC->PCONP |= (1UL << 1);

	/* Configure the timer so that we can poll for a match */
	LPC_TIM0->TCR = 0x02; /* reset timer */
	LPC_TIM0->PR = 0x00; /* set prescaler to zero */
	LPC_TIM0->MR0 = u32Periodms
    3ad2:	618b      	str	r3, [r1, #24]
			* ((SystemCoreClock / 4 / (LPC_TIM0->PR + 1)) / 1000UL);
	LPC_TIM0->IR = 0xFF; /* reset all interrupts */
    3ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3ad8:	22ff      	movs	r2, #255	; 0xff
    3ada:	601a      	str	r2, [r3, #0]
	LPC_TIM0->MCR = 0x04; /* stop timer on match */
    3adc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3ae0:	2204      	movs	r2, #4
    3ae2:	615a      	str	r2, [r3, #20]
	LPC_TIM0->TCR = 0x01; /* start timer */
    3ae4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3ae8:	2201      	movs	r2, #1
    3aea:	605a      	str	r2, [r3, #4]
}
    3aec:	370c      	adds	r7, #12
    3aee:	46bd      	mov	sp, r7
    3af0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3af4:	4770      	bx	lr
    3af6:	bf00      	nop
    3af8:	400fc000 	.word	0x400fc000
    3afc:	10000024 	.word	0x10000024
    3b00:	10624dd3 	.word	0x10624dd3

00003b04 <SystemCoreClockUpdate>:

/*----------------------------------------------------------------------------
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
    3b04:	b538      	push	{r3, r4, r5, lr}

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    3b06:	4b24      	ldr	r3, [pc, #144]	; (3b98 <SystemCoreClockUpdate+0x94>)
    3b08:	4c24      	ldr	r4, [pc, #144]	; (3b9c <SystemCoreClockUpdate+0x98>)
    3b0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3b0e:	f3c2 6201 	ubfx	r2, r2, #24, #2
    3b12:	2a03      	cmp	r2, #3
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3b14:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    3b18:	f002 0203 	and.w	r2, r2, #3
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    3b1c:	d128      	bne.n	3b70 <SystemCoreClockUpdate+0x6c>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    3b1e:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3b22:	2a01      	cmp	r2, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    3b24:	f3c1 010e 	ubfx	r1, r1, #0, #15
    3b28:	f101 0101 	add.w	r1, r1, #1
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3b2c:	d009      	beq.n	3b42 <SystemCoreClockUpdate+0x3e>
    3b2e:	2a02      	cmp	r2, #2
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    3b30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    3b34:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    3b38:	f3c2 4207 	ubfx	r2, r2, #16, #8
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3b3c:	d009      	beq.n	3b52 <SystemCoreClockUpdate+0x4e>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = (IRC_OSC * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3b3e:	4818      	ldr	r0, [pc, #96]	; (3ba0 <SystemCoreClockUpdate+0x9c>)
    3b40:	e009      	b.n	3b56 <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    3b42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    3b46:	4817      	ldr	r0, [pc, #92]	; (3ba4 <SystemCoreClockUpdate+0xa0>)
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
    3b48:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    3b4c:	f3c2 4207 	ubfx	r2, r2, #16, #8
    3b50:	e001      	b.n	3b56 <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3b52:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
    3b56:	3201      	adds	r2, #1
    3b58:	2300      	movs	r3, #0
    3b5a:	fba1 0100 	umull	r0, r1, r1, r0
    3b5e:	f002 f933 	bl	5dc8 <__aeabi_uldivmod>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    3b62:	b2ea      	uxtb	r2, r5
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    3b64:	3201      	adds	r2, #1
    3b66:	2300      	movs	r3, #0
    3b68:	f002 f92e 	bl	5dc8 <__aeabi_uldivmod>
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
    3b6c:	6020      	str	r0, [r4, #0]
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    3b6e:	bd38      	pop	{r3, r4, r5, pc}
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3b70:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3b74:	2a01      	cmp	r2, #1
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3b76:	b2db      	uxtb	r3, r3
    3b78:	f103 0301 	add.w	r3, r3, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3b7c:	d003      	beq.n	3b86 <SystemCoreClockUpdate+0x82>
    3b7e:	2a02      	cmp	r2, #2
    3b80:	d003      	beq.n	3b8a <SystemCoreClockUpdate+0x86>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3b82:	4a09      	ldr	r2, [pc, #36]	; (3ba8 <SystemCoreClockUpdate+0xa4>)
    3b84:	e003      	b.n	3b8e <SystemCoreClockUpdate+0x8a>
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3b86:	4a09      	ldr	r2, [pc, #36]	; (3bac <SystemCoreClockUpdate+0xa8>)
    3b88:	e001      	b.n	3b8e <SystemCoreClockUpdate+0x8a>
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3b8a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
    3b8e:	fbb2 f3f3 	udiv	r3, r2, r3
    3b92:	6023      	str	r3, [r4, #0]
    3b94:	bd38      	pop	{r3, r4, r5, pc}
    3b96:	bf00      	nop
    3b98:	400fc000 	.word	0x400fc000
    3b9c:	10000024 	.word	0x10000024
    3ba0:	007a1200 	.word	0x007a1200
    3ba4:	016e3600 	.word	0x016e3600
    3ba8:	003d0900 	.word	0x003d0900
    3bac:	00b71b00 	.word	0x00b71b00

00003bb0 <SystemInit>:
 *         Initialize the System.
 */
void SystemInit (void)
{
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
    3bb0:	4b34      	ldr	r3, [pc, #208]	; (3c84 <SystemInit+0xd4>)
    3bb2:	2220      	movs	r2, #32
    3bb4:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    3bb8:	461a      	mov	r2, r3
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    3bba:	f8d2 11a0 	ldr.w	r1, [r2, #416]	; 0x1a0
    3bbe:	4b31      	ldr	r3, [pc, #196]	; (3c84 <SystemInit+0xd4>)
    3bc0:	0648      	lsls	r0, r1, #25
    3bc2:	d5fa      	bpl.n	3bba <SystemInit+0xa>
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    3bc4:	2203      	movs	r2, #3
    3bc6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    3bca:	2200      	movs	r2, #0
    3bcc:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    3bd0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    3bd4:	4a2c      	ldr	r2, [pc, #176]	; (3c88 <SystemInit+0xd8>)
  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    3bd6:	2001      	movs	r0, #1
    3bd8:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    3bdc:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    3bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
  LPC_SC->PLL0FEED  = 0x55;
    3be2:	2255      	movs	r2, #85	; 0x55

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    3be4:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3be8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    3bec:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    3bf0:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3bf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    3bf8:	4b22      	ldr	r3, [pc, #136]	; (3c84 <SystemInit+0xd4>)
    3bfa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3bfe:	0151      	lsls	r1, r2, #5
    3c00:	d5fa      	bpl.n	3bf8 <SystemInit+0x48>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    3c02:	2203      	movs	r2, #3
    3c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    3c08:	22aa      	movs	r2, #170	; 0xaa
    3c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3c0e:	2255      	movs	r2, #85	; 0x55
    3c10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    3c14:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
    3c18:	4a1a      	ldr	r2, [pc, #104]	; (3c84 <SystemInit+0xd4>)
    3c1a:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
    3c1e:	d0f9      	beq.n	3c14 <SystemInit+0x64>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
    3c20:	2323      	movs	r3, #35	; 0x23
    3c22:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0xAA;
    3c26:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PLL1FEED  = 0x55;
    3c28:	2355      	movs	r3, #85	; 0x55

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    3c2a:	2001      	movs	r0, #1
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
  LPC_SC->PLL1FEED  = 0xAA;
    3c2c:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3c30:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    3c34:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    3c38:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3c3c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    3c40:	4b10      	ldr	r3, [pc, #64]	; (3c84 <SystemInit+0xd4>)
    3c42:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    3c46:	0552      	lsls	r2, r2, #21
    3c48:	d5fa      	bpl.n	3c40 <SystemInit+0x90>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    3c4a:	2203      	movs	r2, #3
    3c4c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    3c50:	22aa      	movs	r2, #170	; 0xaa
    3c52:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3c56:	2255      	movs	r2, #85	; 0x55
    3c58:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    3c5c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    3c60:	4a08      	ldr	r2, [pc, #32]	; (3c84 <SystemInit+0xd4>)
    3c62:	f411 7f40 	tst.w	r1, #768	; 0x300
    3c66:	d0f9      	beq.n	3c5c <SystemInit+0xac>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    3c68:	4b08      	ldr	r3, [pc, #32]	; (3c8c <SystemInit+0xdc>)
    3c6a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    3c6e:	2300      	movs	r3, #0
    3c70:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = (LPC_SC->FLASHCFG & ~0x0000F000) | FLASHCFG_Val;
    3c74:	6813      	ldr	r3, [r2, #0]
    3c76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
    3c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    3c7e:	6013      	str	r3, [r2, #0]
    3c80:	4770      	bx	lr
    3c82:	bf00      	nop
    3c84:	400fc000 	.word	0x400fc000
    3c88:	00050063 	.word	0x00050063
    3c8c:	042887de 	.word	0x042887de

00003c90 <__main>:
    3c90:	b508      	push	{r3, lr}
    3c92:	2000      	movs	r0, #0
    3c94:	4601      	mov	r1, r0
    3c96:	4602      	mov	r2, r0
    3c98:	f000 fd82 	bl	47a0 <_initio>
    3c9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3ca0:	f7fe b9da 	b.w	2058 <main>

00003ca4 <memset>:
    3ca4:	f002 bcf8 	b.w	6698 <__aeabi_lowlevel_memset>

00003ca8 <malloc>:
    3ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3caa:	4b31      	ldr	r3, [pc, #196]	; (3d70 <malloc+0xc8>)
    3cac:	1cc5      	adds	r5, r0, #3
    3cae:	681c      	ldr	r4, [r3, #0]
    3cb0:	08ad      	lsrs	r5, r5, #2
    3cb2:	b198      	cbz	r0, 3cdc <malloc+0x34>
    3cb4:	461f      	mov	r7, r3
    3cb6:	2600      	movs	r6, #0
    3cb8:	f105 0e0a 	add.w	lr, r5, #10
    3cbc:	f105 0c03 	add.w	ip, r5, #3
    3cc0:	e005      	b.n	3cce <malloc+0x26>
    3cc2:	6823      	ldr	r3, [r4, #0]
    3cc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    3cc8:	d014      	beq.n	3cf4 <malloc+0x4c>
    3cca:	4626      	mov	r6, r4
    3ccc:	68a4      	ldr	r4, [r4, #8]
    3cce:	2c00      	cmp	r4, #0
    3cd0:	d1f7      	bne.n	3cc2 <malloc+0x1a>
    3cd2:	300c      	adds	r0, #12
    3cd4:	f001 fd74 	bl	57c0 <_sbrk>
    3cd8:	1c43      	adds	r3, r0, #1
    3cda:	d110      	bne.n	3cfe <malloc+0x56>
    3cdc:	2000      	movs	r0, #0
    3cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ce0:	6811      	ldr	r1, [r2, #0]
    3ce2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    3ce6:	d115      	bne.n	3d14 <malloc+0x6c>
    3ce8:	6851      	ldr	r1, [r2, #4]
    3cea:	440b      	add	r3, r1
    3cec:	3303      	adds	r3, #3
    3cee:	6063      	str	r3, [r4, #4]
    3cf0:	6893      	ldr	r3, [r2, #8]
    3cf2:	60a3      	str	r3, [r4, #8]
    3cf4:	68a2      	ldr	r2, [r4, #8]
    3cf6:	6863      	ldr	r3, [r4, #4]
    3cf8:	2a00      	cmp	r2, #0
    3cfa:	d1f1      	bne.n	3ce0 <malloc+0x38>
    3cfc:	e00a      	b.n	3d14 <malloc+0x6c>
    3cfe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    3d02:	e880 0028 	stmia.w	r0, {r3, r5}
    3d06:	6084      	str	r4, [r0, #8]
    3d08:	b90e      	cbnz	r6, 3d0e <malloc+0x66>
    3d0a:	6038      	str	r0, [r7, #0]
    3d0c:	e000      	b.n	3d10 <malloc+0x68>
    3d0e:	60b0      	str	r0, [r6, #8]
    3d10:	300c      	adds	r0, #12
    3d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d14:	42ab      	cmp	r3, r5
    3d16:	db07      	blt.n	3d28 <malloc+0x80>
    3d18:	459c      	cmp	ip, r3
    3d1a:	db05      	blt.n	3d28 <malloc+0x80>
    3d1c:	4620      	mov	r0, r4
    3d1e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    3d22:	f840 3b0c 	str.w	r3, [r0], #12
    3d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d28:	4573      	cmp	r3, lr
    3d2a:	d911      	bls.n	3d50 <malloc+0xa8>
    3d2c:	4620      	mov	r0, r4
    3d2e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    3d32:	6065      	str	r5, [r4, #4]
    3d34:	f840 1b0c 	str.w	r1, [r0], #12
    3d38:	eb00 0185 	add.w	r1, r0, r5, lsl #2
    3d3c:	60a1      	str	r1, [r4, #8]
    3d3e:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    3d42:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    3d46:	1b5d      	subs	r5, r3, r5
    3d48:	3d03      	subs	r5, #3
    3d4a:	604d      	str	r5, [r1, #4]
    3d4c:	608a      	str	r2, [r1, #8]
    3d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d50:	2a00      	cmp	r2, #0
    3d52:	d1ba      	bne.n	3cca <malloc+0x22>
    3d54:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    3d58:	f001 fd32 	bl	57c0 <_sbrk>
    3d5c:	3001      	adds	r0, #1
    3d5e:	d0bd      	beq.n	3cdc <malloc+0x34>
    3d60:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    3d64:	e884 0028 	stmia.w	r4, {r3, r5}
    3d68:	f104 000c 	add.w	r0, r4, #12
    3d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d6e:	bf00      	nop
    3d70:	10002018 	.word	0x10002018

00003d74 <free>:
    3d74:	b1a8      	cbz	r0, 3da2 <free+0x2e>
    3d76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3d7a:	f840 3c0c 	str.w	r3, [r0, #-12]
    3d7e:	f850 2c04 	ldr.w	r2, [r0, #-4]
    3d82:	b172      	cbz	r2, 3da2 <free+0x2e>
    3d84:	6813      	ldr	r3, [r2, #0]
    3d86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    3d8a:	d10a      	bne.n	3da2 <free+0x2e>
    3d8c:	6853      	ldr	r3, [r2, #4]
    3d8e:	f850 1c08 	ldr.w	r1, [r0, #-8]
    3d92:	440b      	add	r3, r1
    3d94:	3303      	adds	r3, #3
    3d96:	f840 3c08 	str.w	r3, [r0, #-8]
    3d9a:	6893      	ldr	r3, [r2, #8]
    3d9c:	f840 3c04 	str.w	r3, [r0, #-4]
    3da0:	e7ed      	b.n	3d7e <free+0xa>
    3da2:	4770      	bx	lr

00003da4 <_Csys_alloc>:
    3da4:	b510      	push	{r4, lr}
    3da6:	f7ff ff7f 	bl	3ca8 <malloc>
    3daa:	4604      	mov	r4, r0
    3dac:	b928      	cbnz	r0, 3dba <_Csys_alloc+0x16>
    3dae:	4904      	ldr	r1, [pc, #16]	; (3dc0 <_Csys_alloc+0x1c>)
    3db0:	2217      	movs	r2, #23
    3db2:	f002 fc9d 	bl	66f0 <__sys_write>
    3db6:	f002 fc88 	bl	66ca <__sys_appexit>
    3dba:	4620      	mov	r0, r4
    3dbc:	bd10      	pop	{r4, pc}
    3dbe:	bf00      	nop
    3dc0:	000076d0 	.word	0x000076d0

00003dc4 <fp_round>:
    3dc4:	5c42      	ldrb	r2, [r0, r1]
    3dc6:	1843      	adds	r3, r0, r1
    3dc8:	2a34      	cmp	r2, #52	; 0x34
    3dca:	dc01      	bgt.n	3dd0 <fp_round+0xc>
    3dcc:	2000      	movs	r0, #0
    3dce:	4770      	bx	lr
    3dd0:	2a35      	cmp	r2, #53	; 0x35
    3dd2:	d106      	bne.n	3de2 <fp_round+0x1e>
    3dd4:	4619      	mov	r1, r3
    3dd6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    3dda:	2a30      	cmp	r2, #48	; 0x30
    3ddc:	d0fb      	beq.n	3dd6 <fp_round+0x12>
    3dde:	2a00      	cmp	r2, #0
    3de0:	d0f4      	beq.n	3dcc <fp_round+0x8>
    3de2:	461a      	mov	r2, r3
    3de4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    3de8:	2939      	cmp	r1, #57	; 0x39
    3dea:	d102      	bne.n	3df2 <fp_round+0x2e>
    3dec:	2130      	movs	r1, #48	; 0x30
    3dee:	7011      	strb	r1, [r2, #0]
    3df0:	e7f8      	b.n	3de4 <fp_round+0x20>
    3df2:	3101      	adds	r1, #1
    3df4:	7011      	strb	r1, [r2, #0]
    3df6:	7802      	ldrb	r2, [r0, #0]
    3df8:	2a30      	cmp	r2, #48	; 0x30
    3dfa:	d0e7      	beq.n	3dcc <fp_round+0x8>
    3dfc:	1a1a      	subs	r2, r3, r0
    3dfe:	2a00      	cmp	r2, #0
    3e00:	db03      	blt.n	3e0a <fp_round+0x46>
    3e02:	f813 2901 	ldrb.w	r2, [r3], #-1
    3e06:	709a      	strb	r2, [r3, #2]
    3e08:	e7f8      	b.n	3dfc <fp_round+0x38>
    3e0a:	2001      	movs	r0, #1
    3e0c:	4770      	bx	lr

00003e0e <pr_dec.constprop.1>:
    3e0e:	b510      	push	{r4, lr}
    3e10:	1f8c      	subs	r4, r1, #6
    3e12:	42a1      	cmp	r1, r4
    3e14:	d00d      	beq.n	3e32 <pr_dec.constprop.1+0x24>
    3e16:	230a      	movs	r3, #10
    3e18:	fb90 f3f3 	sdiv	r3, r0, r3
    3e1c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    3e20:	3030      	adds	r0, #48	; 0x30
    3e22:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
    3e26:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    3e2a:	f801 0901 	strb.w	r0, [r1], #-1
    3e2e:	4618      	mov	r0, r3
    3e30:	e7ef      	b.n	3e12 <pr_dec.constprop.1+0x4>
    3e32:	bd10      	pop	{r4, pc}

00003e34 <sprintf>:
    3e34:	b40e      	push	{r1, r2, r3}
    3e36:	b530      	push	{r4, r5, lr}
    3e38:	4605      	mov	r5, r0
    3e3a:	b090      	sub	sp, #64	; 0x40
    3e3c:	ab13      	add	r3, sp, #76	; 0x4c
    3e3e:	f853 4b04 	ldr.w	r4, [r3], #4
    3e42:	2100      	movs	r1, #0
    3e44:	2228      	movs	r2, #40	; 0x28
    3e46:	a806      	add	r0, sp, #24
    3e48:	9305      	str	r3, [sp, #20]
    3e4a:	f7ff ff2b 	bl	3ca4 <memset>
    3e4e:	230a      	movs	r3, #10
    3e50:	9309      	str	r3, [sp, #36]	; 0x24
    3e52:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    3e56:	9308      	str	r3, [sp, #32]
    3e58:	9b05      	ldr	r3, [sp, #20]
    3e5a:	9400      	str	r4, [sp, #0]
    3e5c:	9301      	str	r3, [sp, #4]
    3e5e:	4b0f      	ldr	r3, [pc, #60]	; (3e9c <sprintf+0x68>)
    3e60:	a806      	add	r0, sp, #24
    3e62:	9302      	str	r3, [sp, #8]
    3e64:	f04f 32ff 	mov.w	r2, #4294967295
    3e68:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    3e6c:	9506      	str	r5, [sp, #24]
    3e6e:	f000 fce9 	bl	4844 <__vfprintf>
    3e72:	9b08      	ldr	r3, [sp, #32]
    3e74:	4604      	mov	r4, r0
    3e76:	3b01      	subs	r3, #1
    3e78:	2b00      	cmp	r3, #0
    3e7a:	9308      	str	r3, [sp, #32]
    3e7c:	db03      	blt.n	3e86 <sprintf+0x52>
    3e7e:	9b06      	ldr	r3, [sp, #24]
    3e80:	2200      	movs	r2, #0
    3e82:	701a      	strb	r2, [r3, #0]
    3e84:	e003      	b.n	3e8e <sprintf+0x5a>
    3e86:	2000      	movs	r0, #0
    3e88:	a906      	add	r1, sp, #24
    3e8a:	f001 fcdb 	bl	5844 <__flsbuf>
    3e8e:	4620      	mov	r0, r4
    3e90:	b010      	add	sp, #64	; 0x40
    3e92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3e96:	b003      	add	sp, #12
    3e98:	4770      	bx	lr
    3e9a:	bf00      	nop
    3e9c:	00003ea1 	.word	0x00003ea1

00003ea0 <fp_display>:
    3ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ea4:	4614      	mov	r4, r2
    3ea6:	f647 72f0 	movw	r2, #32752	; 0x7ff0
    3eaa:	684e      	ldr	r6, [r1, #4]
    3eac:	b09f      	sub	sp, #124	; 0x7c
    3eae:	9306      	str	r3, [sp, #24]
    3eb0:	f3c6 430f 	ubfx	r3, r6, #16, #16
    3eb4:	f023 030f 	bic.w	r3, r3, #15
    3eb8:	045b      	lsls	r3, r3, #17
    3eba:	680f      	ldr	r7, [r1, #0]
    3ebc:	0c5b      	lsrs	r3, r3, #17
    3ebe:	4293      	cmp	r3, r2
    3ec0:	9005      	str	r0, [sp, #20]
    3ec2:	f8dd b0a4 	ldr.w	fp, [sp, #164]	; 0xa4
    3ec6:	9708      	str	r7, [sp, #32]
    3ec8:	9607      	str	r6, [sp, #28]
    3eca:	d127      	bne.n	3f1c <fp_display+0x7c>
    3ecc:	2300      	movs	r3, #0
    3ece:	70e3      	strb	r3, [r4, #3]
    3ed0:	f3c6 0313 	ubfx	r3, r6, #0, #20
    3ed4:	433b      	orrs	r3, r7
    3ed6:	f04f 036e 	mov.w	r3, #110	; 0x6e
    3eda:	d115      	bne.n	3f08 <fp_display+0x68>
    3edc:	2269      	movs	r2, #105	; 0x69
    3ede:	7063      	strb	r3, [r4, #1]
    3ee0:	2e00      	cmp	r6, #0
    3ee2:	f04f 0366 	mov.w	r3, #102	; 0x66
    3ee6:	7022      	strb	r2, [r4, #0]
    3ee8:	70a3      	strb	r3, [r4, #2]
    3eea:	da01      	bge.n	3ef0 <fp_display+0x50>
    3eec:	4b84      	ldr	r3, [pc, #528]	; (4100 <fp_display+0x260>)
    3eee:	e010      	b.n	3f12 <fp_display+0x72>
    3ef0:	9b06      	ldr	r3, [sp, #24]
    3ef2:	079a      	lsls	r2, r3, #30
    3ef4:	d406      	bmi.n	3f04 <fp_display+0x64>
    3ef6:	4a83      	ldr	r2, [pc, #524]	; (4104 <fp_display+0x264>)
    3ef8:	f013 0f04 	tst.w	r3, #4
    3efc:	4b82      	ldr	r3, [pc, #520]	; (4108 <fp_display+0x268>)
    3efe:	bf08      	it	eq
    3f00:	4613      	moveq	r3, r2
    3f02:	e006      	b.n	3f12 <fp_display+0x72>
    3f04:	4b81      	ldr	r3, [pc, #516]	; (410c <fp_display+0x26c>)
    3f06:	e004      	b.n	3f12 <fp_display+0x72>
    3f08:	7023      	strb	r3, [r4, #0]
    3f0a:	2261      	movs	r2, #97	; 0x61
    3f0c:	70a3      	strb	r3, [r4, #2]
    3f0e:	4b7d      	ldr	r3, [pc, #500]	; (4104 <fp_display+0x264>)
    3f10:	7062      	strb	r2, [r4, #1]
    3f12:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    3f14:	2003      	movs	r0, #3
    3f16:	6013      	str	r3, [r2, #0]
    3f18:	f000 bc3f 	b.w	479a <fp_display+0x8fa>
    3f1c:	9b05      	ldr	r3, [sp, #20]
    3f1e:	f023 0320 	bic.w	r3, r3, #32
    3f22:	2b41      	cmp	r3, #65	; 0x41
    3f24:	f000 8244 	beq.w	43b0 <fp_display+0x510>
    3f28:	4638      	mov	r0, r7
    3f2a:	4631      	mov	r1, r6
    3f2c:	2200      	movs	r2, #0
    3f2e:	2300      	movs	r3, #0
    3f30:	f002 fb28 	bl	6584 <__aeabi_dcmplt>
    3f34:	b138      	cbz	r0, 3f46 <fp_display+0xa6>
    3f36:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    3f3a:	9a08      	ldr	r2, [sp, #32]
    3f3c:	461e      	mov	r6, r3
    3f3e:	2301      	movs	r3, #1
    3f40:	4617      	mov	r7, r2
    3f42:	9309      	str	r3, [sp, #36]	; 0x24
    3f44:	e000      	b.n	3f48 <fp_display+0xa8>
    3f46:	9009      	str	r0, [sp, #36]	; 0x24
    3f48:	4638      	mov	r0, r7
    3f4a:	4631      	mov	r1, r6
    3f4c:	2200      	movs	r2, #0
    3f4e:	2300      	movs	r3, #0
    3f50:	f002 fb02 	bl	6558 <__aeabi_dcmpeq>
    3f54:	2800      	cmp	r0, #0
    3f56:	f040 820d 	bne.w	4374 <fp_display+0x4d4>
    3f5a:	f240 152d 	movw	r5, #301	; 0x12d
    3f5e:	aa11      	add	r2, sp, #68	; 0x44
    3f60:	4638      	mov	r0, r7
    3f62:	4631      	mov	r1, r6
    3f64:	f001 fd70 	bl	5a48 <_frexpl>
    3f68:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3f6a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3f6e:	4355      	muls	r5, r2
    3f70:	f5a5 53ab 	sub.w	r3, r5, #5472	; 0x1560
    3f74:	3b1c      	subs	r3, #28
    3f76:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    3f7a:	fb93 f5f5 	sdiv	r5, r3, r5
    3f7e:	2000      	movs	r0, #0
    3f80:	4963      	ldr	r1, [pc, #396]	; (4110 <fp_display+0x270>)
    3f82:	1aaa      	subs	r2, r5, r2
    3f84:	f001 fd8e 	bl	5aa4 <_ldexpl>
    3f88:	2d00      	cmp	r5, #0
    3f8a:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3f8e:	da06      	bge.n	3f9e <fp_display+0xfe>
    3f90:	a355      	add	r3, pc, #340	; (adr r3, 40e8 <fp_display+0x248>)
    3f92:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f96:	426e      	negs	r6, r5
    3f98:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    3f9c:	e006      	b.n	3fac <fp_display+0x10c>
    3f9e:	4b5d      	ldr	r3, [pc, #372]	; (4114 <fp_display+0x274>)
    3fa0:	f04f 0200 	mov.w	r2, #0
    3fa4:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    3fa8:	d016      	beq.n	3fd8 <fp_display+0x138>
    3faa:	462e      	mov	r6, r5
    3fac:	07f3      	lsls	r3, r6, #31
    3fae:	d509      	bpl.n	3fc4 <fp_display+0x124>
    3fb0:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3fb4:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3fb8:	f001 ffc2 	bl	5f40 <__aeabi_dmul>
    3fbc:	2e01      	cmp	r6, #1
    3fbe:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3fc2:	d009      	beq.n	3fd8 <fp_display+0x138>
    3fc4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3fc8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3fcc:	f001 ffb8 	bl	5f40 <__aeabi_dmul>
    3fd0:	1076      	asrs	r6, r6, #1
    3fd2:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    3fd6:	e7e9      	b.n	3fac <fp_display+0x10c>
    3fd8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3fdc:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    3fe0:	f002 f83e 	bl	6060 <__aeabi_ddiv>
    3fe4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3fe8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3fec:	a340      	add	r3, pc, #256	; (adr r3, 40f0 <fp_display+0x250>)
    3fee:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ff2:	f002 fac7 	bl	6584 <__aeabi_dcmplt>
    3ff6:	b188      	cbz	r0, 401c <fp_display+0x17c>
    3ff8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3ffc:	2200      	movs	r2, #0
    3ffe:	4b46      	ldr	r3, [pc, #280]	; (4118 <fp_display+0x278>)
    4000:	f001 ff9e 	bl	5f40 <__aeabi_dmul>
    4004:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    4008:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    400c:	2200      	movs	r2, #0
    400e:	4b42      	ldr	r3, [pc, #264]	; (4118 <fp_display+0x278>)
    4010:	f002 f826 	bl	6060 <__aeabi_ddiv>
    4014:	3d01      	subs	r5, #1
    4016:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    401a:	e7e5      	b.n	3fe8 <fp_display+0x148>
    401c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    4020:	a335      	add	r3, pc, #212	; (adr r3, 40f8 <fp_display+0x258>)
    4022:	e9d3 2300 	ldrd	r2, r3, [r3]
    4026:	f002 fb09 	bl	663c <__aeabi_dcmpge>
    402a:	b188      	cbz	r0, 4050 <fp_display+0x1b0>
    402c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    4030:	2200      	movs	r2, #0
    4032:	4b39      	ldr	r3, [pc, #228]	; (4118 <fp_display+0x278>)
    4034:	f002 f814 	bl	6060 <__aeabi_ddiv>
    4038:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    403c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    4040:	2200      	movs	r2, #0
    4042:	4b35      	ldr	r3, [pc, #212]	; (4118 <fp_display+0x278>)
    4044:	f001 ff7c 	bl	5f40 <__aeabi_dmul>
    4048:	3501      	adds	r5, #1
    404a:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    404e:	e7e5      	b.n	401c <fp_display+0x17c>
    4050:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    4054:	f002 fa32 	bl	64bc <__aeabi_d2iz>
    4058:	426b      	negs	r3, r5
    405a:	ea13 0325 	ands.w	r3, r3, r5, asr #32
    405e:	bf38      	it	cc
    4060:	462b      	movcc	r3, r5
    4062:	4682      	mov	sl, r0
    4064:	930e      	str	r3, [sp, #56]	; 0x38
    4066:	4650      	mov	r0, sl
    4068:	f002 fa6c 	bl	6544 <__aeabi_i2d>
    406c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    406e:	1aaa      	subs	r2, r5, r2
    4070:	f001 fd18 	bl	5aa4 <_ldexpl>
    4074:	2200      	movs	r2, #0
    4076:	2300      	movs	r3, #0
    4078:	2d00      	cmp	r5, #0
    407a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    407e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    4082:	da4b      	bge.n	411c <fp_display+0x27c>
    4084:	a118      	add	r1, pc, #96	; (adr r1, 40e8 <fp_display+0x248>)
    4086:	e9d1 0100 	ldrd	r0, r1, [r1]
    408a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    408e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    4092:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    4096:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    409a:	f04f 0800 	mov.w	r8, #0
    409e:	4642      	mov	r2, r8
    40a0:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    40a4:	464b      	mov	r3, r9
    40a6:	f002 f883 	bl	61b0 <__aeabi_dsub>
    40aa:	4602      	mov	r2, r0
    40ac:	460b      	mov	r3, r1
    40ae:	4630      	mov	r0, r6
    40b0:	4639      	mov	r1, r7
    40b2:	f002 f969 	bl	6388 <__aeabi_dadd>
    40b6:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    40ba:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    40be:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    40c2:	2200      	movs	r2, #0
    40c4:	4b13      	ldr	r3, [pc, #76]	; (4114 <fp_display+0x274>)
    40c6:	f001 ff3b 	bl	5f40 <__aeabi_dmul>
    40ca:	4602      	mov	r2, r0
    40cc:	460b      	mov	r3, r1
    40ce:	2000      	movs	r0, #0
    40d0:	490f      	ldr	r1, [pc, #60]	; (4110 <fp_display+0x270>)
    40d2:	f002 f86d 	bl	61b0 <__aeabi_dsub>
    40d6:	2200      	movs	r2, #0
    40d8:	4b0e      	ldr	r3, [pc, #56]	; (4114 <fp_display+0x274>)
    40da:	f001 ffc1 	bl	6060 <__aeabi_ddiv>
    40de:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    40e2:	e024      	b.n	412e <fp_display+0x28e>
    40e4:	f3af 8000 	nop.w
    40e8:	9999999a 	.word	0x9999999a
    40ec:	3fc99999 	.word	0x3fc99999
    40f0:	00000000 	.word	0x00000000
    40f4:	40f86a00 	.word	0x40f86a00
    40f8:	00000000 	.word	0x00000000
    40fc:	412e8480 	.word	0x412e8480
    4100:	0000789a 	.word	0x0000789a
    4104:	000076e7 	.word	0x000076e7
    4108:	0000786a 	.word	0x0000786a
    410c:	00007868 	.word	0x00007868
    4110:	3ff00000 	.word	0x3ff00000
    4114:	40140000 	.word	0x40140000
    4118:	40240000 	.word	0x40240000
    411c:	49ae      	ldr	r1, [pc, #696]	; (43d8 <fp_display+0x538>)
    411e:	f04f 0000 	mov.w	r0, #0
    4122:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    4126:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    412a:	f000 8089 	beq.w	4240 <fp_display+0x3a0>
    412e:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    4132:	f01c 0f01 	tst.w	ip, #1
    4136:	d048      	beq.n	41ca <fp_display+0x32a>
    4138:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    413c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    4140:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    4144:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    4148:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    414c:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    4150:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    4154:	f001 fef4 	bl	5f40 <__aeabi_dmul>
    4158:	4632      	mov	r2, r6
    415a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    415e:	463b      	mov	r3, r7
    4160:	4640      	mov	r0, r8
    4162:	4649      	mov	r1, r9
    4164:	f002 f910 	bl	6388 <__aeabi_dadd>
    4168:	4602      	mov	r2, r0
    416a:	460b      	mov	r3, r1
    416c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4170:	f001 fee6 	bl	5f40 <__aeabi_dmul>
    4174:	4602      	mov	r2, r0
    4176:	460b      	mov	r3, r1
    4178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    417c:	f002 f904 	bl	6388 <__aeabi_dadd>
    4180:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    4184:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    4188:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    418c:	f001 fed8 	bl	5f40 <__aeabi_dmul>
    4190:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    4194:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    4198:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    419c:	f04f 0800 	mov.w	r8, #0
    41a0:	4642      	mov	r2, r8
    41a2:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    41a6:	464b      	mov	r3, r9
    41a8:	f002 f802 	bl	61b0 <__aeabi_dsub>
    41ac:	4602      	mov	r2, r0
    41ae:	460b      	mov	r3, r1
    41b0:	4630      	mov	r0, r6
    41b2:	4639      	mov	r1, r7
    41b4:	f002 f8e8 	bl	6388 <__aeabi_dadd>
    41b8:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    41bc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    41c0:	f1bc 0f01 	cmp.w	ip, #1
    41c4:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
    41c8:	d03a      	beq.n	4240 <fp_display+0x3a0>
    41ca:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    41ce:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    41d2:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    41d6:	4602      	mov	r2, r0
    41d8:	460b      	mov	r3, r1
    41da:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    41de:	f002 f8d3 	bl	6388 <__aeabi_dadd>
    41e2:	4632      	mov	r2, r6
    41e4:	463b      	mov	r3, r7
    41e6:	f002 f8cf 	bl	6388 <__aeabi_dadd>
    41ea:	4602      	mov	r2, r0
    41ec:	460b      	mov	r3, r1
    41ee:	4640      	mov	r0, r8
    41f0:	4649      	mov	r1, r9
    41f2:	f001 fea5 	bl	5f40 <__aeabi_dmul>
    41f6:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    41fa:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    41fe:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    4202:	f001 fe9d 	bl	5f40 <__aeabi_dmul>
    4206:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    420a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    420e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    4212:	f04f 0800 	mov.w	r8, #0
    4216:	4642      	mov	r2, r8
    4218:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    421c:	464b      	mov	r3, r9
    421e:	f001 ffc7 	bl	61b0 <__aeabi_dsub>
    4222:	4602      	mov	r2, r0
    4224:	460b      	mov	r3, r1
    4226:	4630      	mov	r0, r6
    4228:	4639      	mov	r1, r7
    422a:	f002 f8ad 	bl	6388 <__aeabi_dadd>
    422e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    4232:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    4236:	ea4f 0c6c 	mov.w	ip, ip, asr #1
    423a:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    423e:	e778      	b.n	4132 <fp_display+0x292>
    4240:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    4244:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    4248:	f002 f9ca 	bl	65e0 <__aeabi_dcmple>
    424c:	b910      	cbnz	r0, 4254 <fp_display+0x3b4>
    424e:	f10a 3aff 	add.w	sl, sl, #4294967295
    4252:	e708      	b.n	4066 <fp_display+0x1c6>
    4254:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    4258:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    425c:	f001 ffa8 	bl	61b0 <__aeabi_dsub>
    4260:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    4264:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    4268:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    426c:	f001 ffa0 	bl	61b0 <__aeabi_dsub>
    4270:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    4274:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    4278:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    427c:	f001 fef0 	bl	6060 <__aeabi_ddiv>
    4280:	a353      	add	r3, pc, #332	; (adr r3, 43d0 <fp_display+0x530>)
    4282:	e9d3 2300 	ldrd	r2, r3, [r3]
    4286:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    428a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    428e:	f001 fe57 	bl	5f40 <__aeabi_dmul>
    4292:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    4296:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    429a:	f002 f90f 	bl	64bc <__aeabi_d2iz>
    429e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    42a2:	4680      	mov	r8, r0
    42a4:	f002 f94e 	bl	6544 <__aeabi_i2d>
    42a8:	4602      	mov	r2, r0
    42aa:	460b      	mov	r3, r1
    42ac:	4630      	mov	r0, r6
    42ae:	4639      	mov	r1, r7
    42b0:	f001 ff7e 	bl	61b0 <__aeabi_dsub>
    42b4:	a346      	add	r3, pc, #280	; (adr r3, 43d0 <fp_display+0x530>)
    42b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    42ba:	f001 fe41 	bl	5f40 <__aeabi_dmul>
    42be:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    42c2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    42c6:	f002 f8f9 	bl	64bc <__aeabi_d2iz>
    42ca:	4606      	mov	r6, r0
    42cc:	2e00      	cmp	r6, #0
    42ce:	da06      	bge.n	42de <fp_display+0x43e>
    42d0:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
    42d4:	f506 7610 	add.w	r6, r6, #576	; 0x240
    42d8:	f108 38ff 	add.w	r8, r8, #4294967295
    42dc:	e7f6      	b.n	42cc <fp_display+0x42c>
    42de:	4b3f      	ldr	r3, [pc, #252]	; (43dc <fp_display+0x53c>)
    42e0:	429e      	cmp	r6, r3
    42e2:	dd06      	ble.n	42f2 <fp_display+0x452>
    42e4:	f5a6 2674 	sub.w	r6, r6, #999424	; 0xf4000
    42e8:	f5a6 7610 	sub.w	r6, r6, #576	; 0x240
    42ec:	f108 0801 	add.w	r8, r8, #1
    42f0:	e7f5      	b.n	42de <fp_display+0x43e>
    42f2:	f1b8 0f00 	cmp.w	r8, #0
    42f6:	da06      	bge.n	4306 <fp_display+0x466>
    42f8:	f508 2874 	add.w	r8, r8, #999424	; 0xf4000
    42fc:	f508 7810 	add.w	r8, r8, #576	; 0x240
    4300:	f10a 3aff 	add.w	sl, sl, #4294967295
    4304:	e7f5      	b.n	42f2 <fp_display+0x452>
    4306:	4598      	cmp	r8, r3
    4308:	dd06      	ble.n	4318 <fp_display+0x478>
    430a:	f5a8 2874 	sub.w	r8, r8, #999424	; 0xf4000
    430e:	f5a8 7810 	sub.w	r8, r8, #576	; 0x240
    4312:	f10a 0a01 	add.w	sl, sl, #1
    4316:	e7f6      	b.n	4306 <fp_display+0x466>
    4318:	4b31      	ldr	r3, [pc, #196]	; (43e0 <fp_display+0x540>)
    431a:	4650      	mov	r0, sl
    431c:	459a      	cmp	sl, r3
    431e:	dc11      	bgt.n	4344 <fp_display+0x4a4>
    4320:	3301      	adds	r3, #1
    4322:	fb98 f2f3 	sdiv	r2, r8, r3
    4326:	fb96 f3f3 	sdiv	r3, r6, r3
    432a:	482e      	ldr	r0, [pc, #184]	; (43e4 <fp_display+0x544>)
    432c:	210a      	movs	r1, #10
    432e:	fb00 8802 	mla	r8, r0, r2, r8
    4332:	fb00 6603 	mla	r6, r0, r3, r6
    4336:	fb01 2a0a 	mla	sl, r1, sl, r2
    433a:	fb01 3808 	mla	r8, r1, r8, r3
    433e:	434e      	muls	r6, r1
    4340:	3d01      	subs	r5, #1
    4342:	e01c      	b.n	437e <fp_display+0x4de>
    4344:	4b25      	ldr	r3, [pc, #148]	; (43dc <fp_display+0x53c>)
    4346:	459a      	cmp	sl, r3
    4348:	dd19      	ble.n	437e <fp_display+0x4de>
    434a:	220a      	movs	r2, #10
    434c:	fb9a faf2 	sdiv	sl, sl, r2
    4350:	f06f 0309 	mvn.w	r3, #9
    4354:	fb03 000a 	mla	r0, r3, sl, r0
    4358:	4923      	ldr	r1, [pc, #140]	; (43e8 <fp_display+0x548>)
    435a:	3501      	adds	r5, #1
    435c:	fb01 8000 	mla	r0, r1, r0, r8
    4360:	fb90 f8f2 	sdiv	r8, r0, r2
    4364:	fb03 0308 	mla	r3, r3, r8, r0
    4368:	fb01 6603 	mla	r6, r1, r3, r6
    436c:	3605      	adds	r6, #5
    436e:	fb96 f6f2 	sdiv	r6, r6, r2
    4372:	e004      	b.n	437e <fp_display+0x4de>
    4374:	2600      	movs	r6, #0
    4376:	46b0      	mov	r8, r6
    4378:	46b2      	mov	sl, r6
    437a:	f06f 0504 	mvn.w	r5, #4
    437e:	4621      	mov	r1, r4
    4380:	2730      	movs	r7, #48	; 0x30
    4382:	f801 7b06 	strb.w	r7, [r1], #6
    4386:	4650      	mov	r0, sl
    4388:	f7ff fd41 	bl	3e0e <pr_dec.constprop.1>
    438c:	4640      	mov	r0, r8
    438e:	f104 010c 	add.w	r1, r4, #12
    4392:	f7ff fd3c 	bl	3e0e <pr_dec.constprop.1>
    4396:	4630      	mov	r0, r6
    4398:	f104 0112 	add.w	r1, r4, #18
    439c:	f7ff fd37 	bl	3e0e <pr_dec.constprop.1>
    43a0:	2300      	movs	r3, #0
    43a2:	7523      	strb	r3, [r4, #20]
    43a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    43a6:	3505      	adds	r5, #5
    43a8:	74e7      	strb	r7, [r4, #19]
    43aa:	ea43 0585 	orr.w	r5, r3, r5, lsl #2
    43ae:	e000      	b.n	43b2 <fp_display+0x512>
    43b0:	2500      	movs	r5, #0
    43b2:	07ef      	lsls	r7, r5, #31
    43b4:	d501      	bpl.n	43ba <fp_display+0x51a>
    43b6:	4b0d      	ldr	r3, [pc, #52]	; (43ec <fp_display+0x54c>)
    43b8:	e01f      	b.n	43fa <fp_display+0x55a>
    43ba:	9b06      	ldr	r3, [sp, #24]
    43bc:	079e      	lsls	r6, r3, #30
    43be:	d41b      	bmi.n	43f8 <fp_display+0x558>
    43c0:	4a0b      	ldr	r2, [pc, #44]	; (43f0 <fp_display+0x550>)
    43c2:	f013 0f04 	tst.w	r3, #4
    43c6:	4b0b      	ldr	r3, [pc, #44]	; (43f4 <fp_display+0x554>)
    43c8:	bf08      	it	eq
    43ca:	4613      	moveq	r3, r2
    43cc:	e015      	b.n	43fa <fp_display+0x55a>
    43ce:	bf00      	nop
    43d0:	00000000 	.word	0x00000000
    43d4:	412e8480 	.word	0x412e8480
    43d8:	40140000 	.word	0x40140000
    43dc:	000f423f 	.word	0x000f423f
    43e0:	0001869f 	.word	0x0001869f
    43e4:	fffe7960 	.word	0xfffe7960
    43e8:	000f4240 	.word	0x000f4240
    43ec:	0000789a 	.word	0x0000789a
    43f0:	000076e7 	.word	0x000076e7
    43f4:	0000786a 	.word	0x0000786a
    43f8:	4bad      	ldr	r3, [pc, #692]	; (46b0 <fp_display+0x810>)
    43fa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    43fc:	f025 0501 	bic.w	r5, r5, #1
    4400:	6013      	str	r3, [r2, #0]
    4402:	2304      	movs	r3, #4
    4404:	fb95 f5f3 	sdiv	r5, r5, r3
    4408:	9b05      	ldr	r3, [sp, #20]
    440a:	f8db 6000 	ldr.w	r6, [fp]
    440e:	2b61      	cmp	r3, #97	; 0x61
    4410:	d010      	beq.n	4434 <fp_display+0x594>
    4412:	dc06      	bgt.n	4422 <fp_display+0x582>
    4414:	2b45      	cmp	r3, #69	; 0x45
    4416:	d067      	beq.n	44e8 <fp_display+0x648>
    4418:	2b47      	cmp	r3, #71	; 0x47
    441a:	d048      	beq.n	44ae <fp_display+0x60e>
    441c:	2b41      	cmp	r3, #65	; 0x41
    441e:	d144      	bne.n	44aa <fp_display+0x60a>
    4420:	e008      	b.n	4434 <fp_display+0x594>
    4422:	9b05      	ldr	r3, [sp, #20]
    4424:	2b66      	cmp	r3, #102	; 0x66
    4426:	f000 80df 	beq.w	45e8 <fp_display+0x748>
    442a:	2b67      	cmp	r3, #103	; 0x67
    442c:	d03f      	beq.n	44ae <fp_display+0x60e>
    442e:	2b65      	cmp	r3, #101	; 0x65
    4430:	d13b      	bne.n	44aa <fp_display+0x60a>
    4432:	e059      	b.n	44e8 <fp_display+0x648>
    4434:	9b07      	ldr	r3, [sp, #28]
    4436:	2000      	movs	r0, #0
    4438:	f3c3 0113 	ubfx	r1, r3, #0, #20
    443c:	9b08      	ldr	r3, [sp, #32]
    443e:	4318      	orrs	r0, r3
    4440:	9b07      	ldr	r3, [sp, #28]
    4442:	f3c3 520a 	ubfx	r2, r3, #20, #11
    4446:	b112      	cbz	r2, 444e <fp_display+0x5ae>
    4448:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
    444c:	e004      	b.n	4458 <fp_display+0x5b8>
    444e:	ea50 0301 	orrs.w	r3, r0, r1
    4452:	4b98      	ldr	r3, [pc, #608]	; (46b4 <fp_display+0x814>)
    4454:	bf08      	it	eq
    4456:	2300      	moveq	r3, #0
    4458:	2a00      	cmp	r2, #0
    445a:	bf0c      	ite	eq
    445c:	2230      	moveq	r2, #48	; 0x30
    445e:	2231      	movne	r2, #49	; 0x31
    4460:	b966      	cbnz	r6, 447c <fp_display+0x5dc>
    4462:	9d06      	ldr	r5, [sp, #24]
    4464:	072d      	lsls	r5, r5, #28
    4466:	d409      	bmi.n	447c <fp_display+0x5dc>
    4468:	9d05      	ldr	r5, [sp, #20]
    446a:	4620      	mov	r0, r4
    446c:	4992      	ldr	r1, [pc, #584]	; (46b8 <fp_display+0x818>)
    446e:	4c93      	ldr	r4, [pc, #588]	; (46bc <fp_display+0x81c>)
    4470:	2d61      	cmp	r5, #97	; 0x61
    4472:	bf08      	it	eq
    4474:	4621      	moveq	r1, r4
    4476:	f7ff fcdd 	bl	3e34 <sprintf>
    447a:	e00c      	b.n	4496 <fp_display+0x5f6>
    447c:	e9cd 0100 	strd	r0, r1, [sp]
    4480:	9302      	str	r3, [sp, #8]
    4482:	4620      	mov	r0, r4
    4484:	4b8e      	ldr	r3, [pc, #568]	; (46c0 <fp_display+0x820>)
    4486:	498f      	ldr	r1, [pc, #572]	; (46c4 <fp_display+0x824>)
    4488:	9c05      	ldr	r4, [sp, #20]
    448a:	2c61      	cmp	r4, #97	; 0x61
    448c:	bf18      	it	ne
    448e:	4619      	movne	r1, r3
    4490:	4633      	mov	r3, r6
    4492:	f7ff fccf 	bl	3e34 <sprintf>
    4496:	4a8c      	ldr	r2, [pc, #560]	; (46c8 <fp_display+0x828>)
    4498:	4b8c      	ldr	r3, [pc, #560]	; (46cc <fp_display+0x82c>)
    449a:	9907      	ldr	r1, [sp, #28]
    449c:	ea33 0321 	bics.w	r3, r3, r1, asr #32
    44a0:	bf28      	it	cs
    44a2:	4613      	movcs	r3, r2
    44a4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    44a6:	6013      	str	r3, [r2, #0]
    44a8:	e177      	b.n	479a <fp_display+0x8fa>
    44aa:	2367      	movs	r3, #103	; 0x67
    44ac:	9305      	str	r3, [sp, #20]
    44ae:	9b06      	ldr	r3, [sp, #24]
    44b0:	2e00      	cmp	r6, #0
    44b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    44b6:	9306      	str	r3, [sp, #24]
    44b8:	bfdc      	itt	le
    44ba:	2301      	movle	r3, #1
    44bc:	f8cb 3000 	strle.w	r3, [fp]
    44c0:	f8db 1000 	ldr.w	r1, [fp]
    44c4:	4620      	mov	r0, r4
    44c6:	2911      	cmp	r1, #17
    44c8:	bfd4      	ite	le
    44ca:	3101      	addle	r1, #1
    44cc:	2112      	movgt	r1, #18
    44ce:	f7ff fc79 	bl	3dc4 <fp_round>
    44d2:	f8db 3000 	ldr.w	r3, [fp]
    44d6:	4405      	add	r5, r0
    44d8:	429d      	cmp	r5, r3
    44da:	db7e      	blt.n	45da <fp_display+0x73a>
    44dc:	3b01      	subs	r3, #1
    44de:	f8cb 3000 	str.w	r3, [fp]
    44e2:	9b05      	ldr	r3, [sp, #20]
    44e4:	3b02      	subs	r3, #2
    44e6:	9305      	str	r3, [sp, #20]
    44e8:	f8db 3000 	ldr.w	r3, [fp]
    44ec:	2b11      	cmp	r3, #17
    44ee:	bfc1      	itttt	gt
    44f0:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    44f2:	3b11      	subgt	r3, #17
    44f4:	6013      	strgt	r3, [r2, #0]
    44f6:	2311      	movgt	r3, #17
    44f8:	bfc8      	it	gt
    44fa:	f8cb 3000 	strgt.w	r3, [fp]
    44fe:	9b06      	ldr	r3, [sp, #24]
    4500:	f8db 6000 	ldr.w	r6, [fp]
    4504:	f413 6700 	ands.w	r7, r3, #2048	; 0x800
    4508:	f106 0602 	add.w	r6, r6, #2
    450c:	d104      	bne.n	4518 <fp_display+0x678>
    450e:	4620      	mov	r0, r4
    4510:	4631      	mov	r1, r6
    4512:	f7ff fc57 	bl	3dc4 <fp_round>
    4516:	4405      	add	r5, r0
    4518:	7863      	ldrb	r3, [r4, #1]
    451a:	7023      	strb	r3, [r4, #0]
    451c:	f8db 3000 	ldr.w	r3, [fp]
    4520:	b923      	cbnz	r3, 452c <fp_display+0x68c>
    4522:	f640 0308 	movw	r3, #2056	; 0x808
    4526:	9a06      	ldr	r2, [sp, #24]
    4528:	4013      	ands	r3, r2
    452a:	b113      	cbz	r3, 4532 <fp_display+0x692>
    452c:	232e      	movs	r3, #46	; 0x2e
    452e:	7063      	strb	r3, [r4, #1]
    4530:	e000      	b.n	4534 <fp_display+0x694>
    4532:	2601      	movs	r6, #1
    4534:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    4536:	681b      	ldr	r3, [r3, #0]
    4538:	2b00      	cmp	r3, #0
    453a:	bfc2      	ittt	gt
    453c:	233e      	movgt	r3, #62	; 0x3e
    453e:	55a3      	strbgt	r3, [r4, r6]
    4540:	3601      	addgt	r6, #1
    4542:	b177      	cbz	r7, 4562 <fp_display+0x6c2>
    4544:	9b06      	ldr	r3, [sp, #24]
    4546:	071f      	lsls	r7, r3, #28
    4548:	d40b      	bmi.n	4562 <fp_display+0x6c2>
    454a:	19a2      	adds	r2, r4, r6
    454c:	1b16      	subs	r6, r2, r4
    454e:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
    4552:	2b30      	cmp	r3, #48	; 0x30
    4554:	d0fa      	beq.n	454c <fp_display+0x6ac>
    4556:	2b3e      	cmp	r3, #62	; 0x3e
    4558:	d0f8      	beq.n	454c <fp_display+0x6ac>
    455a:	2b2e      	cmp	r3, #46	; 0x2e
    455c:	bf08      	it	eq
    455e:	f106 36ff 	addeq.w	r6, r6, #4294967295
    4562:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4566:	2d00      	cmp	r5, #0
    4568:	55a3      	strb	r3, [r4, r6]
    456a:	bfb8      	it	lt
    456c:	426d      	neglt	r5, r5
    456e:	f106 0302 	add.w	r3, r6, #2
    4572:	f106 0201 	add.w	r2, r6, #1
    4576:	bfb5      	itete	lt
    4578:	212d      	movlt	r1, #45	; 0x2d
    457a:	212b      	movge	r1, #43	; 0x2b
    457c:	461e      	movlt	r6, r3
    457e:	461e      	movge	r6, r3
    4580:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
    4584:	54a1      	strb	r1, [r4, r2]
    4586:	db0a      	blt.n	459e <fp_display+0x6fe>
    4588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    458c:	fb95 f2f2 	sdiv	r2, r5, r2
    4590:	f102 0130 	add.w	r1, r2, #48	; 0x30
    4594:	54e1      	strb	r1, [r4, r3]
    4596:	494e      	ldr	r1, [pc, #312]	; (46d0 <fp_display+0x830>)
    4598:	1c5e      	adds	r6, r3, #1
    459a:	fb01 5502 	mla	r5, r1, r2, r5
    459e:	2d63      	cmp	r5, #99	; 0x63
    45a0:	dd0a      	ble.n	45b8 <fp_display+0x718>
    45a2:	2364      	movs	r3, #100	; 0x64
    45a4:	fb95 f3f3 	sdiv	r3, r5, r3
    45a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
    45ac:	55a2      	strb	r2, [r4, r6]
    45ae:	f06f 0263 	mvn.w	r2, #99	; 0x63
    45b2:	fb02 5503 	mla	r5, r2, r3, r5
    45b6:	3601      	adds	r6, #1
    45b8:	230a      	movs	r3, #10
    45ba:	fb95 f3f3 	sdiv	r3, r5, r3
    45be:	f103 0230 	add.w	r2, r3, #48	; 0x30
    45c2:	55a2      	strb	r2, [r4, r6]
    45c4:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    45c8:	3530      	adds	r5, #48	; 0x30
    45ca:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
    45ce:	4434      	add	r4, r6
    45d0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    45d4:	7063      	strb	r3, [r4, #1]
    45d6:	1cb0      	adds	r0, r6, #2
    45d8:	e0df      	b.n	479a <fp_display+0x8fa>
    45da:	1d2a      	adds	r2, r5, #4
    45dc:	f6ff af7e 	blt.w	44dc <fp_display+0x63c>
    45e0:	43ea      	mvns	r2, r5
    45e2:	4413      	add	r3, r2
    45e4:	f8cb 3000 	str.w	r3, [fp]
    45e8:	9a06      	ldr	r2, [sp, #24]
    45ea:	2d00      	cmp	r5, #0
    45ec:	f8db 3000 	ldr.w	r3, [fp]
    45f0:	f402 6700 	and.w	r7, r2, #2048	; 0x800
    45f4:	da4c      	bge.n	4690 <fp_display+0x7f0>
    45f6:	f1c5 0800 	rsb	r8, r5, #0
    45fa:	1c5a      	adds	r2, r3, #1
    45fc:	4590      	cmp	r8, r2
    45fe:	dd09      	ble.n	4614 <fp_display+0x774>
    4600:	2330      	movs	r3, #48	; 0x30
    4602:	7023      	strb	r3, [r4, #0]
    4604:	232e      	movs	r3, #46	; 0x2e
    4606:	7063      	strb	r3, [r4, #1]
    4608:	f8db 3000 	ldr.w	r3, [fp]
    460c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    460e:	2602      	movs	r6, #2
    4610:	6013      	str	r3, [r2, #0]
    4612:	e038      	b.n	4686 <fp_display+0x7e6>
    4614:	442b      	add	r3, r5
    4616:	1c9e      	adds	r6, r3, #2
    4618:	2e12      	cmp	r6, #18
    461a:	bfc1      	itttt	gt
    461c:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    461e:	3b11      	subgt	r3, #17
    4620:	6013      	strgt	r3, [r2, #0]
    4622:	2613      	movgt	r6, #19
    4624:	b95f      	cbnz	r7, 463e <fp_display+0x79e>
    4626:	4620      	mov	r0, r4
    4628:	4631      	mov	r1, r6
    462a:	f7ff fbcb 	bl	3dc4 <fp_round>
    462e:	b130      	cbz	r0, 463e <fp_display+0x79e>
    4630:	ea7f 0805 	mvns.w	r8, r5
    4634:	f106 0601 	add.w	r6, r6, #1
    4638:	d101      	bne.n	463e <fp_display+0x79e>
    463a:	7863      	ldrb	r3, [r4, #1]
    463c:	e00d      	b.n	465a <fp_display+0x7ba>
    463e:	f1b8 0f01 	cmp.w	r8, #1
    4642:	eb04 0306 	add.w	r3, r4, r6
    4646:	d10c      	bne.n	4662 <fp_display+0x7c2>
    4648:	1b1a      	subs	r2, r3, r4
    464a:	2a00      	cmp	r2, #0
    464c:	dd03      	ble.n	4656 <fp_display+0x7b6>
    464e:	f813 2901 	ldrb.w	r2, [r3], #-1
    4652:	709a      	strb	r2, [r3, #2]
    4654:	e7f8      	b.n	4648 <fp_display+0x7a8>
    4656:	3601      	adds	r6, #1
    4658:	2330      	movs	r3, #48	; 0x30
    465a:	7023      	strb	r3, [r4, #0]
    465c:	232e      	movs	r3, #46	; 0x2e
    465e:	7063      	strb	r3, [r4, #1]
    4660:	e011      	b.n	4686 <fp_display+0x7e6>
    4662:	1b1a      	subs	r2, r3, r4
    4664:	2a00      	cmp	r2, #0
    4666:	dd03      	ble.n	4670 <fp_display+0x7d0>
    4668:	f813 2901 	ldrb.w	r2, [r3], #-1
    466c:	70da      	strb	r2, [r3, #3]
    466e:	e7f8      	b.n	4662 <fp_display+0x7c2>
    4670:	2330      	movs	r3, #48	; 0x30
    4672:	7023      	strb	r3, [r4, #0]
    4674:	232e      	movs	r3, #46	; 0x2e
    4676:	7063      	strb	r3, [r4, #1]
    4678:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    467a:	233c      	movs	r3, #60	; 0x3c
    467c:	70a3      	strb	r3, [r4, #2]
    467e:	f108 33ff 	add.w	r3, r8, #4294967295
    4682:	3602      	adds	r6, #2
    4684:	6013      	str	r3, [r2, #0]
    4686:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    4688:	681b      	ldr	r3, [r3, #0]
    468a:	2b00      	cmp	r3, #0
    468c:	dc38      	bgt.n	4700 <fp_display+0x860>
    468e:	e06c      	b.n	476a <fp_display+0x8ca>
    4690:	eb05 0803 	add.w	r8, r5, r3
    4694:	f108 0602 	add.w	r6, r8, #2
    4698:	2e12      	cmp	r6, #18
    469a:	dd50      	ble.n	473e <fp_display+0x89e>
    469c:	b9d7      	cbnz	r7, 46d4 <fp_display+0x834>
    469e:	4620      	mov	r0, r4
    46a0:	2113      	movs	r1, #19
    46a2:	f7ff fb8f 	bl	3dc4 <fp_round>
    46a6:	b1a8      	cbz	r0, 46d4 <fp_display+0x834>
    46a8:	3501      	adds	r5, #1
    46aa:	2614      	movs	r6, #20
    46ac:	e013      	b.n	46d6 <fp_display+0x836>
    46ae:	bf00      	nop
    46b0:	00007868 	.word	0x00007868
    46b4:	fffffc01 	.word	0xfffffc01
    46b8:	00007874 	.word	0x00007874
    46bc:	0000786c 	.word	0x0000786c
    46c0:	0000788b 	.word	0x0000788b
    46c4:	0000787c 	.word	0x0000787c
    46c8:	0000789a 	.word	0x0000789a
    46cc:	000076e7 	.word	0x000076e7
    46d0:	fffffc18 	.word	0xfffffc18
    46d4:	2613      	movs	r6, #19
    46d6:	1e72      	subs	r2, r6, #1
    46d8:	4295      	cmp	r5, r2
    46da:	4623      	mov	r3, r4
    46dc:	da14      	bge.n	4708 <fp_display+0x868>
    46de:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    46e2:	f803 2c01 	strb.w	r2, [r3, #-1]
    46e6:	1b1a      	subs	r2, r3, r4
    46e8:	42aa      	cmp	r2, r5
    46ea:	ddf8      	ble.n	46de <fp_display+0x83e>
    46ec:	1963      	adds	r3, r4, r5
    46ee:	222e      	movs	r2, #46	; 0x2e
    46f0:	705a      	strb	r2, [r3, #1]
    46f2:	f8db 3000 	ldr.w	r3, [fp]
    46f6:	441d      	add	r5, r3
    46f8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    46fa:	3d11      	subs	r5, #17
    46fc:	601d      	str	r5, [r3, #0]
    46fe:	b3a5      	cbz	r5, 476a <fp_display+0x8ca>
    4700:	233e      	movs	r3, #62	; 0x3e
    4702:	55a3      	strb	r3, [r4, r6]
    4704:	3601      	adds	r6, #1
    4706:	e030      	b.n	476a <fp_display+0x8ca>
    4708:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    470c:	f803 1c01 	strb.w	r1, [r3, #-1]
    4710:	1b19      	subs	r1, r3, r4
    4712:	4291      	cmp	r1, r2
    4714:	dbf8      	blt.n	4708 <fp_display+0x868>
    4716:	19a3      	adds	r3, r4, r6
    4718:	223c      	movs	r2, #60	; 0x3c
    471a:	f803 2c01 	strb.w	r2, [r3, #-1]
    471e:	1bad      	subs	r5, r5, r6
    4720:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    4722:	222e      	movs	r2, #46	; 0x2e
    4724:	3502      	adds	r5, #2
    4726:	601d      	str	r5, [r3, #0]
    4728:	55a2      	strb	r2, [r4, r6]
    472a:	f8db 2000 	ldr.w	r2, [fp]
    472e:	1c73      	adds	r3, r6, #1
    4730:	b1d2      	cbz	r2, 4768 <fp_display+0x8c8>
    4732:	992b      	ldr	r1, [sp, #172]	; 0xac
    4734:	3602      	adds	r6, #2
    4736:	600a      	str	r2, [r1, #0]
    4738:	223e      	movs	r2, #62	; 0x3e
    473a:	54e2      	strb	r2, [r4, r3]
    473c:	e015      	b.n	476a <fp_display+0x8ca>
    473e:	b93f      	cbnz	r7, 4750 <fp_display+0x8b0>
    4740:	4620      	mov	r0, r4
    4742:	4631      	mov	r1, r6
    4744:	f7ff fb3e 	bl	3dc4 <fp_round>
    4748:	b110      	cbz	r0, 4750 <fp_display+0x8b0>
    474a:	3501      	adds	r5, #1
    474c:	f108 0603 	add.w	r6, r8, #3
    4750:	4623      	mov	r3, r4
    4752:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    4756:	f803 2c01 	strb.w	r2, [r3, #-1]
    475a:	1b1a      	subs	r2, r3, r4
    475c:	42aa      	cmp	r2, r5
    475e:	ddf8      	ble.n	4752 <fp_display+0x8b2>
    4760:	4425      	add	r5, r4
    4762:	232e      	movs	r3, #46	; 0x2e
    4764:	706b      	strb	r3, [r5, #1]
    4766:	e000      	b.n	476a <fp_display+0x8ca>
    4768:	461e      	mov	r6, r3
    476a:	b16f      	cbz	r7, 4788 <fp_display+0x8e8>
    476c:	9b06      	ldr	r3, [sp, #24]
    476e:	0718      	lsls	r0, r3, #28
    4770:	d412      	bmi.n	4798 <fp_display+0x8f8>
    4772:	19a0      	adds	r0, r4, r6
    4774:	1b06      	subs	r6, r0, r4
    4776:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
    477a:	2b30      	cmp	r3, #48	; 0x30
    477c:	d0fa      	beq.n	4774 <fp_display+0x8d4>
    477e:	2b3e      	cmp	r3, #62	; 0x3e
    4780:	d0f8      	beq.n	4774 <fp_display+0x8d4>
    4782:	2b2e      	cmp	r3, #46	; 0x2e
    4784:	d108      	bne.n	4798 <fp_display+0x8f8>
    4786:	e005      	b.n	4794 <fp_display+0x8f4>
    4788:	f8db 3000 	ldr.w	r3, [fp]
    478c:	b923      	cbnz	r3, 4798 <fp_display+0x8f8>
    478e:	9b06      	ldr	r3, [sp, #24]
    4790:	0719      	lsls	r1, r3, #28
    4792:	d401      	bmi.n	4798 <fp_display+0x8f8>
    4794:	1e70      	subs	r0, r6, #1
    4796:	e000      	b.n	479a <fp_display+0x8fa>
    4798:	4630      	mov	r0, r6
    479a:	b01f      	add	sp, #124	; 0x7c
    479c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000047a0 <_initio>:
    47a0:	b510      	push	{r4, lr}
    47a2:	2100      	movs	r1, #0
    47a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    47a8:	4822      	ldr	r0, [pc, #136]	; (4834 <_initio+0x94>)
    47aa:	f7ff fa7b 	bl	3ca4 <memset>
    47ae:	20c0      	movs	r0, #192	; 0xc0
    47b0:	f7ff faf8 	bl	3da4 <_Csys_alloc>
    47b4:	4c20      	ldr	r4, [pc, #128]	; (4838 <_initio+0x98>)
    47b6:	2100      	movs	r1, #0
    47b8:	22c0      	movs	r2, #192	; 0xc0
    47ba:	6020      	str	r0, [r4, #0]
    47bc:	f7ff fa72 	bl	3ca4 <memset>
    47c0:	6820      	ldr	r0, [r4, #0]
    47c2:	2300      	movs	r3, #0
    47c4:	4c1b      	ldr	r4, [pc, #108]	; (4834 <_initio+0x94>)
    47c6:	2228      	movs	r2, #40	; 0x28
    47c8:	2118      	movs	r1, #24
    47ca:	fb02 4203 	mla	r2, r2, r3, r4
    47ce:	fb01 0103 	mla	r1, r1, r3, r0
    47d2:	3301      	adds	r3, #1
    47d4:	2b08      	cmp	r3, #8
    47d6:	6251      	str	r1, [r2, #36]	; 0x24
    47d8:	d1f4      	bne.n	47c4 <_initio+0x24>
    47da:	4622      	mov	r2, r4
    47dc:	4917      	ldr	r1, [pc, #92]	; (483c <_initio+0x9c>)
    47de:	2000      	movs	r0, #0
    47e0:	f001 f8d1 	bl	5986 <_fdopen>
    47e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    47e8:	4620      	mov	r0, r4
    47ea:	2100      	movs	r1, #0
    47ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
    47f0:	f000 ff38 	bl	5664 <setvbuf>
    47f4:	f104 0228 	add.w	r2, r4, #40	; 0x28
    47f8:	4911      	ldr	r1, [pc, #68]	; (4840 <_initio+0xa0>)
    47fa:	2001      	movs	r0, #1
    47fc:	f001 f8c3 	bl	5986 <_fdopen>
    4800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4804:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4808:	2100      	movs	r1, #0
    480a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    480e:	f000 ff29 	bl	5664 <setvbuf>
    4812:	f104 0250 	add.w	r2, r4, #80	; 0x50
    4816:	490a      	ldr	r1, [pc, #40]	; (4840 <_initio+0xa0>)
    4818:	2002      	movs	r0, #2
    481a:	f001 f8b4 	bl	5986 <_fdopen>
    481e:	f104 0050 	add.w	r0, r4, #80	; 0x50
    4822:	2100      	movs	r1, #0
    4824:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    482c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4830:	f000 bf18 	b.w	5664 <setvbuf>
    4834:	10001ed8 	.word	0x10001ed8
    4838:	10001ed4 	.word	0x10001ed4
    483c:	0000789c 	.word	0x0000789c
    4840:	0000789e 	.word	0x0000789e

00004844 <__vfprintf>:
    4844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4848:	4604      	mov	r4, r0
    484a:	b0ad      	sub	sp, #180	; 0xb4
    484c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    4850:	f8dd 80dc 	ldr.w	r8, [sp, #220]	; 0xdc
    4854:	2200      	movs	r2, #0
    4856:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    4858:	9205      	str	r2, [sp, #20]
    485a:	7818      	ldrb	r0, [r3, #0]
    485c:	1c5d      	adds	r5, r3, #1
    485e:	2800      	cmp	r0, #0
    4860:	f000 863d 	beq.w	54de <__vfprintf+0xc9a>
    4864:	2825      	cmp	r0, #37	; 0x25
    4866:	d102      	bne.n	486e <__vfprintf+0x2a>
    4868:	462a      	mov	r2, r5
    486a:	2700      	movs	r7, #0
    486c:	e023      	b.n	48b6 <__vfprintf+0x72>
    486e:	9b05      	ldr	r3, [sp, #20]
    4870:	ea4f 7be3 	mov.w	fp, r3, asr #31
    4874:	461a      	mov	r2, r3
    4876:	1c5e      	adds	r6, r3, #1
    4878:	465b      	mov	r3, fp
    487a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    487e:	4552      	cmp	r2, sl
    4880:	eb73 030b 	sbcs.w	r3, r3, fp
    4884:	f280 8627 	bge.w	54d6 <__vfprintf+0xc92>
    4888:	68a3      	ldr	r3, [r4, #8]
    488a:	3b01      	subs	r3, #1
    488c:	2b00      	cmp	r3, #0
    488e:	60a3      	str	r3, [r4, #8]
    4890:	db05      	blt.n	489e <__vfprintf+0x5a>
    4892:	6823      	ldr	r3, [r4, #0]
    4894:	1c5a      	adds	r2, r3, #1
    4896:	6022      	str	r2, [r4, #0]
    4898:	7018      	strb	r0, [r3, #0]
    489a:	f000 be1c 	b.w	54d6 <__vfprintf+0xc92>
    489e:	4621      	mov	r1, r4
    48a0:	f000 ffd0 	bl	5844 <__flsbuf>
    48a4:	f000 be17 	b.w	54d6 <__vfprintf+0xc92>
    48a8:	d90b      	bls.n	48c2 <__vfprintf+0x7e>
    48aa:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
    48ae:	d111      	bne.n	48d4 <__vfprintf+0x90>
    48b0:	f047 0701 	orr.w	r7, r7, #1
    48b4:	462a      	mov	r2, r5
    48b6:	f815 9b01 	ldrb.w	r9, [r5], #1
    48ba:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
    48be:	d1f3      	bne.n	48a8 <__vfprintf+0x64>
    48c0:	e00e      	b.n	48e0 <__vfprintf+0x9c>
    48c2:	f1b9 0f20 	cmp.w	r9, #32
    48c6:	d00e      	beq.n	48e6 <__vfprintf+0xa2>
    48c8:	f1b9 0f23 	cmp.w	r9, #35	; 0x23
    48cc:	d10e      	bne.n	48ec <__vfprintf+0xa8>
    48ce:	f047 0708 	orr.w	r7, r7, #8
    48d2:	e7ef      	b.n	48b4 <__vfprintf+0x70>
    48d4:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    48d8:	d108      	bne.n	48ec <__vfprintf+0xa8>
    48da:	f447 7700 	orr.w	r7, r7, #512	; 0x200
    48de:	e7e9      	b.n	48b4 <__vfprintf+0x70>
    48e0:	f047 0702 	orr.w	r7, r7, #2
    48e4:	e7e6      	b.n	48b4 <__vfprintf+0x70>
    48e6:	f047 0704 	orr.w	r7, r7, #4
    48ea:	e7e3      	b.n	48b4 <__vfprintf+0x70>
    48ec:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    48f0:	d001      	beq.n	48f6 <__vfprintf+0xb2>
    48f2:	2300      	movs	r3, #0
    48f4:	e00d      	b.n	4912 <__vfprintf+0xce>
    48f6:	f8d8 3000 	ldr.w	r3, [r8]
    48fa:	f108 0104 	add.w	r1, r8, #4
    48fe:	2b00      	cmp	r3, #0
    4900:	bfbc      	itt	lt
    4902:	425b      	neglt	r3, r3
    4904:	f087 0701 	eorlt.w	r7, r7, #1
    4908:	1c95      	adds	r5, r2, #2
    490a:	f892 9001 	ldrb.w	r9, [r2, #1]
    490e:	4688      	mov	r8, r1
    4910:	e00a      	b.n	4928 <__vfprintf+0xe4>
    4912:	f1a9 0230 	sub.w	r2, r9, #48	; 0x30
    4916:	b2d1      	uxtb	r1, r2
    4918:	2909      	cmp	r1, #9
    491a:	d805      	bhi.n	4928 <__vfprintf+0xe4>
    491c:	210a      	movs	r1, #10
    491e:	fb01 2303 	mla	r3, r1, r3, r2
    4922:	f815 9b01 	ldrb.w	r9, [r5], #1
    4926:	e7f4      	b.n	4912 <__vfprintf+0xce>
    4928:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    492c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
    4930:	930f      	str	r3, [sp, #60]	; 0x3c
    4932:	d124      	bne.n	497e <__vfprintf+0x13a>
    4934:	f895 9000 	ldrb.w	r9, [r5]
    4938:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    493c:	d003      	beq.n	4946 <__vfprintf+0x102>
    493e:	2300      	movs	r3, #0
    4940:	3501      	adds	r5, #1
    4942:	9306      	str	r3, [sp, #24]
    4944:	e008      	b.n	4958 <__vfprintf+0x114>
    4946:	f8d8 3000 	ldr.w	r3, [r8]
    494a:	f895 9001 	ldrb.w	r9, [r5, #1]
    494e:	9306      	str	r3, [sp, #24]
    4950:	f108 0804 	add.w	r8, r8, #4
    4954:	3502      	adds	r5, #2
    4956:	e00c      	b.n	4972 <__vfprintf+0x12e>
    4958:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    495c:	b2da      	uxtb	r2, r3
    495e:	2a09      	cmp	r2, #9
    4960:	d807      	bhi.n	4972 <__vfprintf+0x12e>
    4962:	9906      	ldr	r1, [sp, #24]
    4964:	220a      	movs	r2, #10
    4966:	fb02 3301 	mla	r3, r2, r1, r3
    496a:	f815 9b01 	ldrb.w	r9, [r5], #1
    496e:	9306      	str	r3, [sp, #24]
    4970:	e7f2      	b.n	4958 <__vfprintf+0x114>
    4972:	9b06      	ldr	r3, [sp, #24]
    4974:	2b00      	cmp	r3, #0
    4976:	db02      	blt.n	497e <__vfprintf+0x13a>
    4978:	f047 0710 	orr.w	r7, r7, #16
    497c:	e001      	b.n	4982 <__vfprintf+0x13e>
    497e:	2300      	movs	r3, #0
    4980:	9306      	str	r3, [sp, #24]
    4982:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    4986:	d10d      	bne.n	49a4 <__vfprintf+0x160>
    4988:	f895 9000 	ldrb.w	r9, [r5]
    498c:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    4990:	bf03      	ittte	eq
    4992:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    4996:	f047 0760 	orreq.w	r7, r7, #96	; 0x60
    499a:	3502      	addeq	r5, #2
    499c:	3501      	addne	r5, #1
    499e:	bf18      	it	ne
    49a0:	f047 0720 	orrne.w	r7, r7, #32
    49a4:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
    49a8:	d002      	beq.n	49b0 <__vfprintf+0x16c>
    49aa:	f1b9 0f71 	cmp.w	r9, #113	; 0x71
    49ae:	d104      	bne.n	49ba <__vfprintf+0x176>
    49b0:	f895 9000 	ldrb.w	r9, [r5]
    49b4:	f047 0760 	orr.w	r7, r7, #96	; 0x60
    49b8:	e01f      	b.n	49fa <__vfprintf+0x1b6>
    49ba:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    49be:	d10e      	bne.n	49de <__vfprintf+0x19a>
    49c0:	f895 9000 	ldrb.w	r9, [r5]
    49c4:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    49c8:	bf03      	ittte	eq
    49ca:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    49ce:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
    49d2:	3502      	addeq	r5, #2
    49d4:	3501      	addne	r5, #1
    49d6:	bf18      	it	ne
    49d8:	f047 0780 	orrne.w	r7, r7, #128	; 0x80
    49dc:	e00e      	b.n	49fc <__vfprintf+0x1b8>
    49de:	f1b9 0f6a 	cmp.w	r9, #106	; 0x6a
    49e2:	d102      	bne.n	49ea <__vfprintf+0x1a6>
    49e4:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    49e8:	e005      	b.n	49f6 <__vfprintf+0x1b2>
    49ea:	f1b9 0f7a 	cmp.w	r9, #122	; 0x7a
    49ee:	d002      	beq.n	49f6 <__vfprintf+0x1b2>
    49f0:	f1b9 0f74 	cmp.w	r9, #116	; 0x74
    49f4:	d102      	bne.n	49fc <__vfprintf+0x1b8>
    49f6:	f895 9000 	ldrb.w	r9, [r5]
    49fa:	3501      	adds	r5, #1
    49fc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    4a00:	dc25      	bgt.n	4a4e <__vfprintf+0x20a>
    4a02:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    4a06:	f280 826e 	bge.w	4ee6 <__vfprintf+0x6a2>
    4a0a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    4a0e:	f000 826a 	beq.w	4ee6 <__vfprintf+0x6a2>
    4a12:	dc0c      	bgt.n	4a2e <__vfprintf+0x1ea>
    4a14:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    4a18:	f000 825f 	beq.w	4eda <__vfprintf+0x696>
    4a1c:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    4a20:	f000 8261 	beq.w	4ee6 <__vfprintf+0x6a2>
    4a24:	f1b9 0f00 	cmp.w	r9, #0
    4a28:	f000 80b4 	beq.w	4b94 <__vfprintf+0x350>
    4a2c:	e031      	b.n	4a92 <__vfprintf+0x24e>
    4a2e:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    4a32:	f000 8252 	beq.w	4eda <__vfprintf+0x696>
    4a36:	dc04      	bgt.n	4a42 <__vfprintf+0x1fe>
    4a38:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    4a3c:	f000 8171 	beq.w	4d22 <__vfprintf+0x4de>
    4a40:	e027      	b.n	4a92 <__vfprintf+0x24e>
    4a42:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
    4a46:	d01e      	beq.n	4a86 <__vfprintf+0x242>
    4a48:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    4a4c:	e00c      	b.n	4a68 <__vfprintf+0x224>
    4a4e:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    4a52:	f000 81b4 	beq.w	4dbe <__vfprintf+0x57a>
    4a56:	dc0a      	bgt.n	4a6e <__vfprintf+0x22a>
    4a58:	f1b9 0f6e 	cmp.w	r9, #110	; 0x6e
    4a5c:	f000 809f 	beq.w	4b9e <__vfprintf+0x35a>
    4a60:	f300 81b6 	bgt.w	4dd0 <__vfprintf+0x58c>
    4a64:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    4a68:	f000 81f4 	beq.w	4e54 <__vfprintf+0x610>
    4a6c:	e011      	b.n	4a92 <__vfprintf+0x24e>
    4a6e:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    4a72:	f000 81cd 	beq.w	4e10 <__vfprintf+0x5cc>
    4a76:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    4a7a:	f000 8179 	beq.w	4d70 <__vfprintf+0x52c>
    4a7e:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
    4a82:	d106      	bne.n	4a92 <__vfprintf+0x24e>
    4a84:	e0ae      	b.n	4be4 <__vfprintf+0x3a0>
    4a86:	f108 0304 	add.w	r3, r8, #4
    4a8a:	930e      	str	r3, [sp, #56]	; 0x38
    4a8c:	f8d8 9000 	ldr.w	r9, [r8]
    4a90:	e001      	b.n	4a96 <__vfprintf+0x252>
    4a92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    4a96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4a98:	f103 3aff 	add.w	sl, r3, #4294967295
    4a9c:	f017 0301 	ands.w	r3, r7, #1
    4aa0:	9306      	str	r3, [sp, #24]
    4aa2:	d12e      	bne.n	4b02 <__vfprintf+0x2be>
    4aa4:	f417 7f00 	tst.w	r7, #512	; 0x200
    4aa8:	bf14      	ite	ne
    4aaa:	f04f 0830 	movne.w	r8, #48	; 0x30
    4aae:	f04f 0820 	moveq.w	r8, #32
    4ab2:	2600      	movs	r6, #0
    4ab4:	2700      	movs	r7, #0
    4ab6:	9b05      	ldr	r3, [sp, #20]
    4ab8:	199a      	adds	r2, r3, r6
    4aba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4abc:	f1a3 0a02 	sub.w	sl, r3, #2
    4ac0:	ebba 0a06 	subs.w	sl, sl, r6
    4ac4:	d41c      	bmi.n	4b00 <__vfprintf+0x2bc>
    4ac6:	9b05      	ldr	r3, [sp, #20]
    4ac8:	18f0      	adds	r0, r6, r3
    4aca:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    4ace:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    4ad2:	4290      	cmp	r0, r2
    4ad4:	eb71 0303 	sbcs.w	r3, r1, r3
    4ad8:	da0e      	bge.n	4af8 <__vfprintf+0x2b4>
    4ada:	68a2      	ldr	r2, [r4, #8]
    4adc:	3a01      	subs	r2, #1
    4ade:	2a00      	cmp	r2, #0
    4ae0:	60a2      	str	r2, [r4, #8]
    4ae2:	db05      	blt.n	4af0 <__vfprintf+0x2ac>
    4ae4:	6822      	ldr	r2, [r4, #0]
    4ae6:	1c51      	adds	r1, r2, #1
    4ae8:	6021      	str	r1, [r4, #0]
    4aea:	f882 8000 	strb.w	r8, [r2]
    4aee:	e003      	b.n	4af8 <__vfprintf+0x2b4>
    4af0:	4640      	mov	r0, r8
    4af2:	4621      	mov	r1, r4
    4af4:	f000 fea6 	bl	5844 <__flsbuf>
    4af8:	3601      	adds	r6, #1
    4afa:	f147 0700 	adc.w	r7, r7, #0
    4afe:	e7da      	b.n	4ab6 <__vfprintf+0x272>
    4b00:	9205      	str	r2, [sp, #20]
    4b02:	9b05      	ldr	r3, [sp, #20]
    4b04:	17d9      	asrs	r1, r3, #31
    4b06:	461a      	mov	r2, r3
    4b08:	f103 0b01 	add.w	fp, r3, #1
    4b0c:	460b      	mov	r3, r1
    4b0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4b12:	4282      	cmp	r2, r0
    4b14:	418b      	sbcs	r3, r1
    4b16:	da0e      	bge.n	4b36 <__vfprintf+0x2f2>
    4b18:	68a3      	ldr	r3, [r4, #8]
    4b1a:	3b01      	subs	r3, #1
    4b1c:	2b00      	cmp	r3, #0
    4b1e:	60a3      	str	r3, [r4, #8]
    4b20:	db05      	blt.n	4b2e <__vfprintf+0x2ea>
    4b22:	6823      	ldr	r3, [r4, #0]
    4b24:	1c5a      	adds	r2, r3, #1
    4b26:	6022      	str	r2, [r4, #0]
    4b28:	f883 9000 	strb.w	r9, [r3]
    4b2c:	e003      	b.n	4b36 <__vfprintf+0x2f2>
    4b2e:	4648      	mov	r0, r9
    4b30:	4621      	mov	r1, r4
    4b32:	f000 fe87 	bl	5844 <__flsbuf>
    4b36:	9b06      	ldr	r3, [sp, #24]
    4b38:	b91b      	cbnz	r3, 4b42 <__vfprintf+0x2fe>
    4b3a:	f8cd b014 	str.w	fp, [sp, #20]
    4b3e:	f000 bcc7 	b.w	54d0 <__vfprintf+0xc8c>
    4b42:	2600      	movs	r6, #0
    4b44:	2700      	movs	r7, #0
    4b46:	43f3      	mvns	r3, r6
    4b48:	eb13 0f0a 	cmn.w	r3, sl
    4b4c:	d41b      	bmi.n	4b86 <__vfprintf+0x342>
    4b4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4b52:	eb16 020b 	adds.w	r2, r6, fp
    4b56:	eb47 73eb 	adc.w	r3, r7, fp, asr #31
    4b5a:	4282      	cmp	r2, r0
    4b5c:	418b      	sbcs	r3, r1
    4b5e:	da0e      	bge.n	4b7e <__vfprintf+0x33a>
    4b60:	68a3      	ldr	r3, [r4, #8]
    4b62:	3b01      	subs	r3, #1
    4b64:	2b00      	cmp	r3, #0
    4b66:	60a3      	str	r3, [r4, #8]
    4b68:	db05      	blt.n	4b76 <__vfprintf+0x332>
    4b6a:	6823      	ldr	r3, [r4, #0]
    4b6c:	1c5a      	adds	r2, r3, #1
    4b6e:	6022      	str	r2, [r4, #0]
    4b70:	2220      	movs	r2, #32
    4b72:	701a      	strb	r2, [r3, #0]
    4b74:	e003      	b.n	4b7e <__vfprintf+0x33a>
    4b76:	2020      	movs	r0, #32
    4b78:	4621      	mov	r1, r4
    4b7a:	f000 fe63 	bl	5844 <__flsbuf>
    4b7e:	3601      	adds	r6, #1
    4b80:	f147 0700 	adc.w	r7, r7, #0
    4b84:	e7df      	b.n	4b46 <__vfprintf+0x302>
    4b86:	465b      	mov	r3, fp
    4b88:	f1ba 0f00 	cmp.w	sl, #0
    4b8c:	bfa8      	it	ge
    4b8e:	4453      	addge	r3, sl
    4b90:	f000 bc9d 	b.w	54ce <__vfprintf+0xc8a>
    4b94:	3d01      	subs	r5, #1
    4b96:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    4b9a:	f000 bc99 	b.w	54d0 <__vfprintf+0xc8c>
    4b9e:	f108 0304 	add.w	r3, r8, #4
    4ba2:	f017 0f40 	tst.w	r7, #64	; 0x40
    4ba6:	930e      	str	r3, [sp, #56]	; 0x38
    4ba8:	f8d8 3000 	ldr.w	r3, [r8]
    4bac:	d006      	beq.n	4bbc <__vfprintf+0x378>
    4bae:	9a05      	ldr	r2, [sp, #20]
    4bb0:	4610      	mov	r0, r2
    4bb2:	17d1      	asrs	r1, r2, #31
    4bb4:	e9c3 0100 	strd	r0, r1, [r3]
    4bb8:	f000 bc8a 	b.w	54d0 <__vfprintf+0xc8c>
    4bbc:	06be      	lsls	r6, r7, #26
    4bbe:	d40d      	bmi.n	4bdc <__vfprintf+0x398>
    4bc0:	05f8      	lsls	r0, r7, #23
    4bc2:	d504      	bpl.n	4bce <__vfprintf+0x38a>
    4bc4:	f89d 2014 	ldrb.w	r2, [sp, #20]
    4bc8:	701a      	strb	r2, [r3, #0]
    4bca:	f000 bc81 	b.w	54d0 <__vfprintf+0xc8c>
    4bce:	0639      	lsls	r1, r7, #24
    4bd0:	d504      	bpl.n	4bdc <__vfprintf+0x398>
    4bd2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    4bd6:	801a      	strh	r2, [r3, #0]
    4bd8:	f000 bc7a 	b.w	54d0 <__vfprintf+0xc8c>
    4bdc:	9a05      	ldr	r2, [sp, #20]
    4bde:	601a      	str	r2, [r3, #0]
    4be0:	f000 bc76 	b.w	54d0 <__vfprintf+0xc8c>
    4be4:	f108 0304 	add.w	r3, r8, #4
    4be8:	930e      	str	r3, [sp, #56]	; 0x38
    4bea:	f8d8 9000 	ldr.w	r9, [r8]
    4bee:	4bab      	ldr	r3, [pc, #684]	; (4e9c <__vfprintf+0x658>)
    4bf0:	f1b9 0f00 	cmp.w	r9, #0
    4bf4:	bf08      	it	eq
    4bf6:	4699      	moveq	r9, r3
    4bf8:	4648      	mov	r0, r9
    4bfa:	f000 fd81 	bl	5700 <strlen>
    4bfe:	06fa      	lsls	r2, r7, #27
    4c00:	4682      	mov	sl, r0
    4c02:	d503      	bpl.n	4c0c <__vfprintf+0x3c8>
    4c04:	9b06      	ldr	r3, [sp, #24]
    4c06:	4298      	cmp	r0, r3
    4c08:	bfa8      	it	ge
    4c0a:	469a      	movge	sl, r3
    4c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4c0e:	ebca 0b03 	rsb	fp, sl, r3
    4c12:	f017 0301 	ands.w	r3, r7, #1
    4c16:	9306      	str	r3, [sp, #24]
    4c18:	d131      	bne.n	4c7e <__vfprintf+0x43a>
    4c1a:	f417 7f00 	tst.w	r7, #512	; 0x200
    4c1e:	bf14      	ite	ne
    4c20:	f04f 0830 	movne.w	r8, #48	; 0x30
    4c24:	f04f 0820 	moveq.w	r8, #32
    4c28:	2600      	movs	r6, #0
    4c2a:	2700      	movs	r7, #0
    4c2c:	f10b 32ff 	add.w	r2, fp, #4294967295
    4c30:	1b91      	subs	r1, r2, r6
    4c32:	2900      	cmp	r1, #0
    4c34:	db1c      	blt.n	4c70 <__vfprintf+0x42c>
    4c36:	9b05      	ldr	r3, [sp, #20]
    4c38:	18f0      	adds	r0, r6, r3
    4c3a:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    4c3e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    4c42:	4290      	cmp	r0, r2
    4c44:	eb71 0303 	sbcs.w	r3, r1, r3
    4c48:	da0e      	bge.n	4c68 <__vfprintf+0x424>
    4c4a:	68a2      	ldr	r2, [r4, #8]
    4c4c:	3a01      	subs	r2, #1
    4c4e:	2a00      	cmp	r2, #0
    4c50:	60a2      	str	r2, [r4, #8]
    4c52:	db05      	blt.n	4c60 <__vfprintf+0x41c>
    4c54:	6822      	ldr	r2, [r4, #0]
    4c56:	1c51      	adds	r1, r2, #1
    4c58:	6021      	str	r1, [r4, #0]
    4c5a:	f882 8000 	strb.w	r8, [r2]
    4c5e:	e003      	b.n	4c68 <__vfprintf+0x424>
    4c60:	4640      	mov	r0, r8
    4c62:	4621      	mov	r1, r4
    4c64:	f000 fdee 	bl	5844 <__flsbuf>
    4c68:	3601      	adds	r6, #1
    4c6a:	f147 0700 	adc.w	r7, r7, #0
    4c6e:	e7dd      	b.n	4c2c <__vfprintf+0x3e8>
    4c70:	9b05      	ldr	r3, [sp, #20]
    4c72:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    4c76:	445b      	add	r3, fp
    4c78:	9305      	str	r3, [sp, #20]
    4c7a:	ebcb 0b02 	rsb	fp, fp, r2
    4c7e:	2600      	movs	r6, #0
    4c80:	2700      	movs	r7, #0
    4c82:	45b2      	cmp	sl, r6
    4c84:	9b05      	ldr	r3, [sp, #20]
    4c86:	dd1c      	ble.n	4cc2 <__vfprintf+0x47e>
    4c88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4c8c:	18f2      	adds	r2, r6, r3
    4c8e:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    4c92:	4282      	cmp	r2, r0
    4c94:	418b      	sbcs	r3, r1
    4c96:	da10      	bge.n	4cba <__vfprintf+0x476>
    4c98:	68a3      	ldr	r3, [r4, #8]
    4c9a:	3b01      	subs	r3, #1
    4c9c:	2b00      	cmp	r3, #0
    4c9e:	60a3      	str	r3, [r4, #8]
    4ca0:	eb09 0306 	add.w	r3, r9, r6
    4ca4:	db05      	blt.n	4cb2 <__vfprintf+0x46e>
    4ca6:	6822      	ldr	r2, [r4, #0]
    4ca8:	1c51      	adds	r1, r2, #1
    4caa:	6021      	str	r1, [r4, #0]
    4cac:	781b      	ldrb	r3, [r3, #0]
    4cae:	7013      	strb	r3, [r2, #0]
    4cb0:	e003      	b.n	4cba <__vfprintf+0x476>
    4cb2:	7818      	ldrb	r0, [r3, #0]
    4cb4:	4621      	mov	r1, r4
    4cb6:	f000 fdc5 	bl	5844 <__flsbuf>
    4cba:	3601      	adds	r6, #1
    4cbc:	f147 0700 	adc.w	r7, r7, #0
    4cc0:	e7df      	b.n	4c82 <__vfprintf+0x43e>
    4cc2:	f1ba 0f00 	cmp.w	sl, #0
    4cc6:	bfa8      	it	ge
    4cc8:	4453      	addge	r3, sl
    4cca:	9305      	str	r3, [sp, #20]
    4ccc:	9b06      	ldr	r3, [sp, #24]
    4cce:	2b00      	cmp	r3, #0
    4cd0:	f000 83fe 	beq.w	54d0 <__vfprintf+0xc8c>
    4cd4:	2600      	movs	r6, #0
    4cd6:	2700      	movs	r7, #0
    4cd8:	43f3      	mvns	r3, r6
    4cda:	eb13 0f0b 	cmn.w	r3, fp
    4cde:	9b05      	ldr	r3, [sp, #20]
    4ce0:	d41a      	bmi.n	4d18 <__vfprintf+0x4d4>
    4ce2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4ce6:	18f2      	adds	r2, r6, r3
    4ce8:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    4cec:	4282      	cmp	r2, r0
    4cee:	418b      	sbcs	r3, r1
    4cf0:	da0e      	bge.n	4d10 <__vfprintf+0x4cc>
    4cf2:	68a3      	ldr	r3, [r4, #8]
    4cf4:	3b01      	subs	r3, #1
    4cf6:	2b00      	cmp	r3, #0
    4cf8:	60a3      	str	r3, [r4, #8]
    4cfa:	db05      	blt.n	4d08 <__vfprintf+0x4c4>
    4cfc:	6823      	ldr	r3, [r4, #0]
    4cfe:	1c5a      	adds	r2, r3, #1
    4d00:	6022      	str	r2, [r4, #0]
    4d02:	2220      	movs	r2, #32
    4d04:	701a      	strb	r2, [r3, #0]
    4d06:	e003      	b.n	4d10 <__vfprintf+0x4cc>
    4d08:	2020      	movs	r0, #32
    4d0a:	4621      	mov	r1, r4
    4d0c:	f000 fd9a 	bl	5844 <__flsbuf>
    4d10:	3601      	adds	r6, #1
    4d12:	f147 0700 	adc.w	r7, r7, #0
    4d16:	e7df      	b.n	4cd8 <__vfprintf+0x494>
    4d18:	f1bb 0f00 	cmp.w	fp, #0
    4d1c:	bfa8      	it	ge
    4d1e:	445b      	addge	r3, fp
    4d20:	e3d5      	b.n	54ce <__vfprintf+0xc8a>
    4d22:	067b      	lsls	r3, r7, #25
    4d24:	d509      	bpl.n	4d3a <__vfprintf+0x4f6>
    4d26:	f108 0807 	add.w	r8, r8, #7
    4d2a:	f028 0807 	bic.w	r8, r8, #7
    4d2e:	f108 0308 	add.w	r3, r8, #8
    4d32:	930e      	str	r3, [sp, #56]	; 0x38
    4d34:	e9d8 2300 	ldrd	r2, r3, [r8]
    4d38:	e005      	b.n	4d46 <__vfprintf+0x502>
    4d3a:	f108 0304 	add.w	r3, r8, #4
    4d3e:	f8d8 2000 	ldr.w	r2, [r8]
    4d42:	930e      	str	r3, [sp, #56]	; 0x38
    4d44:	2300      	movs	r3, #0
    4d46:	063e      	lsls	r6, r7, #24
    4d48:	d501      	bpl.n	4d4e <__vfprintf+0x50a>
    4d4a:	b292      	uxth	r2, r2
    4d4c:	e003      	b.n	4d56 <__vfprintf+0x512>
    4d4e:	05f8      	lsls	r0, r7, #23
    4d50:	d502      	bpl.n	4d58 <__vfprintf+0x514>
    4d52:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4d56:	2300      	movs	r3, #0
    4d58:	4951      	ldr	r1, [pc, #324]	; (4ea0 <__vfprintf+0x65c>)
    4d5a:	f017 0f08 	tst.w	r7, #8
    4d5e:	4851      	ldr	r0, [pc, #324]	; (4ea4 <__vfprintf+0x660>)
    4d60:	bf08      	it	eq
    4d62:	4608      	moveq	r0, r1
    4d64:	06f9      	lsls	r1, r7, #27
    4d66:	f140 80d6 	bpl.w	4f16 <__vfprintf+0x6d2>
    4d6a:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4d6e:	e0d2      	b.n	4f16 <__vfprintf+0x6d2>
    4d70:	067b      	lsls	r3, r7, #25
    4d72:	d509      	bpl.n	4d88 <__vfprintf+0x544>
    4d74:	f108 0807 	add.w	r8, r8, #7
    4d78:	f028 0807 	bic.w	r8, r8, #7
    4d7c:	f108 0308 	add.w	r3, r8, #8
    4d80:	930e      	str	r3, [sp, #56]	; 0x38
    4d82:	e9d8 2300 	ldrd	r2, r3, [r8]
    4d86:	e005      	b.n	4d94 <__vfprintf+0x550>
    4d88:	f108 0304 	add.w	r3, r8, #4
    4d8c:	f8d8 2000 	ldr.w	r2, [r8]
    4d90:	930e      	str	r3, [sp, #56]	; 0x38
    4d92:	2300      	movs	r3, #0
    4d94:	063e      	lsls	r6, r7, #24
    4d96:	d501      	bpl.n	4d9c <__vfprintf+0x558>
    4d98:	b292      	uxth	r2, r2
    4d9a:	e003      	b.n	4da4 <__vfprintf+0x560>
    4d9c:	05f8      	lsls	r0, r7, #23
    4d9e:	d502      	bpl.n	4da6 <__vfprintf+0x562>
    4da0:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4da4:	2300      	movs	r3, #0
    4da6:	493e      	ldr	r1, [pc, #248]	; (4ea0 <__vfprintf+0x65c>)
    4da8:	f017 0f08 	tst.w	r7, #8
    4dac:	483e      	ldr	r0, [pc, #248]	; (4ea8 <__vfprintf+0x664>)
    4dae:	bf08      	it	eq
    4db0:	4608      	moveq	r0, r1
    4db2:	06f9      	lsls	r1, r7, #27
    4db4:	f140 80b1 	bpl.w	4f1a <__vfprintf+0x6d6>
    4db8:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4dbc:	e0ad      	b.n	4f1a <__vfprintf+0x6d6>
    4dbe:	f108 0304 	add.w	r3, r8, #4
    4dc2:	930e      	str	r3, [sp, #56]	; 0x38
    4dc4:	f8d8 2000 	ldr.w	r2, [r8]
    4dc8:	2300      	movs	r3, #0
    4dca:	4938      	ldr	r1, [pc, #224]	; (4eac <__vfprintf+0x668>)
    4dcc:	4836      	ldr	r0, [pc, #216]	; (4ea8 <__vfprintf+0x664>)
    4dce:	e0a7      	b.n	4f20 <__vfprintf+0x6dc>
    4dd0:	067e      	lsls	r6, r7, #25
    4dd2:	d509      	bpl.n	4de8 <__vfprintf+0x5a4>
    4dd4:	f108 0807 	add.w	r8, r8, #7
    4dd8:	f028 0807 	bic.w	r8, r8, #7
    4ddc:	f108 0308 	add.w	r3, r8, #8
    4de0:	930e      	str	r3, [sp, #56]	; 0x38
    4de2:	e9d8 2300 	ldrd	r2, r3, [r8]
    4de6:	e005      	b.n	4df4 <__vfprintf+0x5b0>
    4de8:	f108 0304 	add.w	r3, r8, #4
    4dec:	f8d8 2000 	ldr.w	r2, [r8]
    4df0:	930e      	str	r3, [sp, #56]	; 0x38
    4df2:	2300      	movs	r3, #0
    4df4:	0638      	lsls	r0, r7, #24
    4df6:	d501      	bpl.n	4dfc <__vfprintf+0x5b8>
    4df8:	b292      	uxth	r2, r2
    4dfa:	e003      	b.n	4e04 <__vfprintf+0x5c0>
    4dfc:	05f9      	lsls	r1, r7, #23
    4dfe:	d502      	bpl.n	4e06 <__vfprintf+0x5c2>
    4e00:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4e04:	2300      	movs	r3, #0
    4e06:	f017 0f08 	tst.w	r7, #8
    4e0a:	4925      	ldr	r1, [pc, #148]	; (4ea0 <__vfprintf+0x65c>)
    4e0c:	4828      	ldr	r0, [pc, #160]	; (4eb0 <__vfprintf+0x66c>)
    4e0e:	e059      	b.n	4ec4 <__vfprintf+0x680>
    4e10:	067e      	lsls	r6, r7, #25
    4e12:	d509      	bpl.n	4e28 <__vfprintf+0x5e4>
    4e14:	f108 0807 	add.w	r8, r8, #7
    4e18:	f028 0807 	bic.w	r8, r8, #7
    4e1c:	f108 0308 	add.w	r3, r8, #8
    4e20:	930e      	str	r3, [sp, #56]	; 0x38
    4e22:	e9d8 2300 	ldrd	r2, r3, [r8]
    4e26:	e005      	b.n	4e34 <__vfprintf+0x5f0>
    4e28:	f108 0304 	add.w	r3, r8, #4
    4e2c:	f8d8 2000 	ldr.w	r2, [r8]
    4e30:	930e      	str	r3, [sp, #56]	; 0x38
    4e32:	2300      	movs	r3, #0
    4e34:	0638      	lsls	r0, r7, #24
    4e36:	d501      	bpl.n	4e3c <__vfprintf+0x5f8>
    4e38:	b292      	uxth	r2, r2
    4e3a:	e003      	b.n	4e44 <__vfprintf+0x600>
    4e3c:	05f9      	lsls	r1, r7, #23
    4e3e:	d502      	bpl.n	4e46 <__vfprintf+0x602>
    4e40:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4e44:	2300      	movs	r3, #0
    4e46:	f017 0110 	ands.w	r1, r7, #16
    4e4a:	d068      	beq.n	4f1e <__vfprintf+0x6da>
    4e4c:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4e50:	2100      	movs	r1, #0
    4e52:	e064      	b.n	4f1e <__vfprintf+0x6da>
    4e54:	067b      	lsls	r3, r7, #25
    4e56:	d509      	bpl.n	4e6c <__vfprintf+0x628>
    4e58:	f108 0807 	add.w	r8, r8, #7
    4e5c:	f028 0807 	bic.w	r8, r8, #7
    4e60:	f108 0308 	add.w	r3, r8, #8
    4e64:	930e      	str	r3, [sp, #56]	; 0x38
    4e66:	e9d8 2300 	ldrd	r2, r3, [r8]
    4e6a:	e005      	b.n	4e78 <__vfprintf+0x634>
    4e6c:	f8d8 2000 	ldr.w	r2, [r8]
    4e70:	f108 0304 	add.w	r3, r8, #4
    4e74:	930e      	str	r3, [sp, #56]	; 0x38
    4e76:	17d3      	asrs	r3, r2, #31
    4e78:	063e      	lsls	r6, r7, #24
    4e7a:	d501      	bpl.n	4e80 <__vfprintf+0x63c>
    4e7c:	b212      	sxth	r2, r2
    4e7e:	e002      	b.n	4e86 <__vfprintf+0x642>
    4e80:	05f8      	lsls	r0, r7, #23
    4e82:	d501      	bpl.n	4e88 <__vfprintf+0x644>
    4e84:	b252      	sxtb	r2, r2
    4e86:	17d3      	asrs	r3, r2, #31
    4e88:	2a00      	cmp	r2, #0
    4e8a:	f173 0100 	sbcs.w	r1, r3, #0
    4e8e:	da13      	bge.n	4eb8 <__vfprintf+0x674>
    4e90:	4252      	negs	r2, r2
    4e92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4e96:	4807      	ldr	r0, [pc, #28]	; (4eb4 <__vfprintf+0x670>)
    4e98:	e018      	b.n	4ecc <__vfprintf+0x688>
    4e9a:	bf00      	nop
    4e9c:	000078a0 	.word	0x000078a0
    4ea0:	000076e7 	.word	0x000076e7
    4ea4:	000078a7 	.word	0x000078a7
    4ea8:	000078aa 	.word	0x000078aa
    4eac:	000078c0 	.word	0x000078c0
    4eb0:	000078ad 	.word	0x000078ad
    4eb4:	0000789a 	.word	0x0000789a
    4eb8:	07b9      	lsls	r1, r7, #30
    4eba:	d406      	bmi.n	4eca <__vfprintf+0x686>
    4ebc:	49b6      	ldr	r1, [pc, #728]	; (5198 <__vfprintf+0x954>)
    4ebe:	48b7      	ldr	r0, [pc, #732]	; (519c <__vfprintf+0x958>)
    4ec0:	f017 0f04 	tst.w	r7, #4
    4ec4:	bf08      	it	eq
    4ec6:	4608      	moveq	r0, r1
    4ec8:	e000      	b.n	4ecc <__vfprintf+0x688>
    4eca:	48b5      	ldr	r0, [pc, #724]	; (51a0 <__vfprintf+0x95c>)
    4ecc:	f017 0110 	ands.w	r1, r7, #16
    4ed0:	d026      	beq.n	4f20 <__vfprintf+0x6dc>
    4ed2:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4ed6:	2100      	movs	r1, #0
    4ed8:	e022      	b.n	4f20 <__vfprintf+0x6dc>
    4eda:	06fb      	lsls	r3, r7, #27
    4edc:	bf5e      	ittt	pl
    4ede:	230d      	movpl	r3, #13
    4ee0:	f047 0710 	orrpl.w	r7, r7, #16
    4ee4:	9306      	strpl	r3, [sp, #24]
    4ee6:	9b06      	ldr	r3, [sp, #24]
    4ee8:	f017 0f10 	tst.w	r7, #16
    4eec:	f108 0807 	add.w	r8, r8, #7
    4ef0:	bf08      	it	eq
    4ef2:	2306      	moveq	r3, #6
    4ef4:	f028 0807 	bic.w	r8, r8, #7
    4ef8:	9306      	str	r3, [sp, #24]
    4efa:	2100      	movs	r1, #0
    4efc:	f108 0308 	add.w	r3, r8, #8
    4f00:	930e      	str	r3, [sp, #56]	; 0x38
    4f02:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
    4f06:	e9d8 2300 	ldrd	r2, r3, [r8]
    4f0a:	4608      	mov	r0, r1
    4f0c:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
    4f10:	2200      	movs	r2, #0
    4f12:	2300      	movs	r3, #0
    4f14:	e004      	b.n	4f20 <__vfprintf+0x6dc>
    4f16:	49a3      	ldr	r1, [pc, #652]	; (51a4 <__vfprintf+0x960>)
    4f18:	e002      	b.n	4f20 <__vfprintf+0x6dc>
    4f1a:	49a3      	ldr	r1, [pc, #652]	; (51a8 <__vfprintf+0x964>)
    4f1c:	e000      	b.n	4f20 <__vfprintf+0x6dc>
    4f1e:	489e      	ldr	r0, [pc, #632]	; (5198 <__vfprintf+0x954>)
    4f20:	9e05      	ldr	r6, [sp, #20]
    4f22:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    4f26:	ebba 0a06 	subs.w	sl, sl, r6
    4f2a:	eb6b 7be6 	sbc.w	fp, fp, r6, asr #31
    4f2e:	e9cd ab08 	strd	sl, fp, [sp, #32]
    4f32:	9e06      	ldr	r6, [sp, #24]
    4f34:	901f      	str	r0, [sp, #124]	; 0x7c
    4f36:	f04f 30ff 	mov.w	r0, #4294967295
    4f3a:	9020      	str	r0, [sp, #128]	; 0x80
    4f3c:	9021      	str	r0, [sp, #132]	; 0x84
    4f3e:	961e      	str	r6, [sp, #120]	; 0x78
    4f40:	2000      	movs	r0, #0
    4f42:	f04f 0e55 	mov.w	lr, #85	; 0x55
    4f46:	ae24      	add	r6, sp, #144	; 0x90
    4f48:	f800 e006 	strb.w	lr, [r0, r6]
    4f4c:	3001      	adds	r0, #1
    4f4e:	2820      	cmp	r0, #32
    4f50:	d1f7      	bne.n	4f42 <__vfprintf+0x6fe>
    4f52:	f417 6f82 	tst.w	r7, #1040	; 0x410
    4f56:	bf04      	itt	eq
    4f58:	2001      	moveq	r0, #1
    4f5a:	901e      	streq	r0, [sp, #120]	; 0x78
    4f5c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    4f60:	dc1b      	bgt.n	4f9a <__vfprintf+0x756>
    4f62:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    4f66:	f280 80d4 	bge.w	5112 <__vfprintf+0x8ce>
    4f6a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    4f6e:	f000 80d0 	beq.w	5112 <__vfprintf+0x8ce>
    4f72:	dc08      	bgt.n	4f86 <__vfprintf+0x742>
    4f74:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    4f78:	f000 80cb 	beq.w	5112 <__vfprintf+0x8ce>
    4f7c:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    4f80:	f040 80d7 	bne.w	5132 <__vfprintf+0x8ee>
    4f84:	e0c5      	b.n	5112 <__vfprintf+0x8ce>
    4f86:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    4f8a:	f000 80c2 	beq.w	5112 <__vfprintf+0x8ce>
    4f8e:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    4f92:	d017      	beq.n	4fc4 <__vfprintf+0x780>
    4f94:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    4f98:	e011      	b.n	4fbe <__vfprintf+0x77a>
    4f9a:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    4f9e:	d014      	beq.n	4fca <__vfprintf+0x786>
    4fa0:	dc08      	bgt.n	4fb4 <__vfprintf+0x770>
    4fa2:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    4fa6:	d00d      	beq.n	4fc4 <__vfprintf+0x780>
    4fa8:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
    4fac:	f040 80c1 	bne.w	5132 <__vfprintf+0x8ee>
    4fb0:	2100      	movs	r1, #0
    4fb2:	e020      	b.n	4ff6 <__vfprintf+0x7b2>
    4fb4:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    4fb8:	d004      	beq.n	4fc4 <__vfprintf+0x780>
    4fba:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    4fbe:	f040 80b8 	bne.w	5132 <__vfprintf+0x8ee>
    4fc2:	e002      	b.n	4fca <__vfprintf+0x786>
    4fc4:	f04f 0e00 	mov.w	lr, #0
    4fc8:	e027      	b.n	501a <__vfprintf+0x7d6>
    4fca:	2000      	movs	r0, #0
    4fcc:	ea52 0e03 	orrs.w	lr, r2, r3
    4fd0:	4606      	mov	r6, r0
    4fd2:	f000 80af 	beq.w	5134 <__vfprintf+0x8f0>
    4fd6:	f002 060f 	and.w	r6, r2, #15
    4fda:	f811 e006 	ldrb.w	lr, [r1, r6]
    4fde:	ae24      	add	r6, sp, #144	; 0x90
    4fe0:	f800 e006 	strb.w	lr, [r0, r6]
    4fe4:	0916      	lsrs	r6, r2, #4
    4fe6:	ea46 7603 	orr.w	r6, r6, r3, lsl #28
    4fea:	ea4f 1e13 	mov.w	lr, r3, lsr #4
    4fee:	4632      	mov	r2, r6
    4ff0:	4673      	mov	r3, lr
    4ff2:	3001      	adds	r0, #1
    4ff4:	e7ea      	b.n	4fcc <__vfprintf+0x788>
    4ff6:	ea52 0003 	orrs.w	r0, r2, r3
    4ffa:	460e      	mov	r6, r1
    4ffc:	f000 809a 	beq.w	5134 <__vfprintf+0x8f0>
    5000:	f002 0007 	and.w	r0, r2, #7
    5004:	3030      	adds	r0, #48	; 0x30
    5006:	ae24      	add	r6, sp, #144	; 0x90
    5008:	5588      	strb	r0, [r1, r6]
    500a:	08d0      	lsrs	r0, r2, #3
    500c:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
    5010:	08de      	lsrs	r6, r3, #3
    5012:	4602      	mov	r2, r0
    5014:	4633      	mov	r3, r6
    5016:	3101      	adds	r1, #1
    5018:	e7ed      	b.n	4ff6 <__vfprintf+0x7b2>
    501a:	ea52 0103 	orrs.w	r1, r2, r3
    501e:	4676      	mov	r6, lr
    5020:	f000 8088 	beq.w	5134 <__vfprintf+0x8f0>
    5024:	0891      	lsrs	r1, r2, #2
    5026:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
    502a:	9118      	str	r1, [sp, #96]	; 0x60
    502c:	0899      	lsrs	r1, r3, #2
    502e:	9119      	str	r1, [sp, #100]	; 0x64
    5030:	0859      	lsrs	r1, r3, #1
    5032:	ea4f 0032 	mov.w	r0, r2, rrx
    5036:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    503a:	eb18 0800 	adds.w	r8, r8, r0
    503e:	4640      	mov	r0, r8
    5040:	eb49 0901 	adc.w	r9, r9, r1
    5044:	4649      	mov	r1, r9
    5046:	0906      	lsrs	r6, r0, #4
    5048:	ea46 7609 	orr.w	r6, r6, r9, lsl #28
    504c:	9610      	str	r6, [sp, #64]	; 0x40
    504e:	090e      	lsrs	r6, r1, #4
    5050:	9611      	str	r6, [sp, #68]	; 0x44
    5052:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
    5056:	eb18 0800 	adds.w	r8, r8, r0
    505a:	4640      	mov	r0, r8
    505c:	eb49 0901 	adc.w	r9, r9, r1
    5060:	4649      	mov	r1, r9
    5062:	0a06      	lsrs	r6, r0, #8
    5064:	ea46 6609 	orr.w	r6, r6, r9, lsl #24
    5068:	9612      	str	r6, [sp, #72]	; 0x48
    506a:	0a0e      	lsrs	r6, r1, #8
    506c:	9613      	str	r6, [sp, #76]	; 0x4c
    506e:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    5072:	eb18 0800 	adds.w	r8, r8, r0
    5076:	4640      	mov	r0, r8
    5078:	eb49 0901 	adc.w	r9, r9, r1
    507c:	4649      	mov	r1, r9
    507e:	0c06      	lsrs	r6, r0, #16
    5080:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
    5084:	9614      	str	r6, [sp, #80]	; 0x50
    5086:	0c0e      	lsrs	r6, r1, #16
    5088:	9615      	str	r6, [sp, #84]	; 0x54
    508a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    508e:	eb18 0800 	adds.w	r8, r8, r0
    5092:	eb49 0901 	adc.w	r9, r9, r1
    5096:	4640      	mov	r0, r8
    5098:	4649      	mov	r1, r9
    509a:	2600      	movs	r6, #0
    509c:	961b      	str	r6, [sp, #108]	; 0x6c
    509e:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    50a2:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    50a6:	eb18 0800 	adds.w	r8, r8, r0
    50aa:	eb49 0901 	adc.w	r9, r9, r1
    50ae:	4640      	mov	r0, r8
    50b0:	4649      	mov	r1, r9
    50b2:	08c6      	lsrs	r6, r0, #3
    50b4:	08c9      	lsrs	r1, r1, #3
    50b6:	1d90      	adds	r0, r2, #6
    50b8:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
    50bc:	910d      	str	r1, [sp, #52]	; 0x34
    50be:	f143 0100 	adc.w	r1, r3, #0
    50c2:	230a      	movs	r3, #10
    50c4:	fba6 8903 	umull	r8, r9, r6, r3
    50c8:	960c      	str	r6, [sp, #48]	; 0x30
    50ca:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    50cc:	ebb0 0008 	subs.w	r0, r0, r8
    50d0:	fb03 9906 	mla	r9, r3, r6, r9
    50d4:	ea4f 1610 	mov.w	r6, r0, lsr #4
    50d8:	eb61 0109 	sbc.w	r1, r1, r9
    50dc:	ea46 7601 	orr.w	r6, r6, r1, lsl #28
    50e0:	0909      	lsrs	r1, r1, #4
    50e2:	9616      	str	r6, [sp, #88]	; 0x58
    50e4:	9117      	str	r1, [sp, #92]	; 0x5c
    50e6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    50ea:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
    50ee:	eb10 0008 	adds.w	r0, r0, r8
    50f2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    50f6:	f102 0230 	add.w	r2, r2, #48	; 0x30
    50fa:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    50fe:	eb41 0109 	adc.w	r1, r1, r9
    5102:	ab24      	add	r3, sp, #144	; 0x90
    5104:	f80e 2003 	strb.w	r2, [lr, r3]
    5108:	f10e 0e01 	add.w	lr, lr, #1
    510c:	4602      	mov	r2, r0
    510e:	460b      	mov	r3, r1
    5110:	e783      	b.n	501a <__vfprintf+0x7d6>
    5112:	ab1f      	add	r3, sp, #124	; 0x7c
    5114:	9300      	str	r3, [sp, #0]
    5116:	ab1e      	add	r3, sp, #120	; 0x78
    5118:	9301      	str	r3, [sp, #4]
    511a:	ab20      	add	r3, sp, #128	; 0x80
    511c:	9302      	str	r3, [sp, #8]
    511e:	ab21      	add	r3, sp, #132	; 0x84
    5120:	9303      	str	r3, [sp, #12]
    5122:	9e38      	ldr	r6, [sp, #224]	; 0xe0
    5124:	4648      	mov	r0, r9
    5126:	a922      	add	r1, sp, #136	; 0x88
    5128:	aa24      	add	r2, sp, #144	; 0x90
    512a:	463b      	mov	r3, r7
    512c:	47b0      	blx	r6
    512e:	4606      	mov	r6, r0
    5130:	e000      	b.n	5134 <__vfprintf+0x8f0>
    5132:	2600      	movs	r6, #0
    5134:	f417 6380 	ands.w	r3, r7, #1024	; 0x400
    5138:	931c      	str	r3, [sp, #112]	; 0x70
    513a:	d00e      	beq.n	515a <__vfprintf+0x916>
    513c:	2300      	movs	r3, #0
    513e:	931e      	str	r3, [sp, #120]	; 0x78
    5140:	9b20      	ldr	r3, [sp, #128]	; 0x80
    5142:	2b00      	cmp	r3, #0
    5144:	bfc4      	itt	gt
    5146:	f103 33ff 	addgt.w	r3, r3, #4294967295
    514a:	931e      	strgt	r3, [sp, #120]	; 0x78
    514c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    514e:	2b00      	cmp	r3, #0
    5150:	dd08      	ble.n	5164 <__vfprintf+0x920>
    5152:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    5154:	3b01      	subs	r3, #1
    5156:	4413      	add	r3, r2
    5158:	e003      	b.n	5162 <__vfprintf+0x91e>
    515a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    515c:	1b9b      	subs	r3, r3, r6
    515e:	bf48      	it	mi
    5160:	2300      	movmi	r3, #0
    5162:	931e      	str	r3, [sp, #120]	; 0x78
    5164:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5166:	981f      	ldr	r0, [sp, #124]	; 0x7c
    5168:	eb06 0803 	add.w	r8, r6, r3
    516c:	f000 fac8 	bl	5700 <strlen>
    5170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5172:	ebc8 0b03 	rsb	fp, r8, r3
    5176:	f007 0301 	and.w	r3, r7, #1
    517a:	930f      	str	r3, [sp, #60]	; 0x3c
    517c:	f240 2301 	movw	r3, #513	; 0x201
    5180:	403b      	ands	r3, r7
    5182:	ebc0 0b0b 	rsb	fp, r0, fp
    5186:	b18b      	cbz	r3, 51ac <__vfprintf+0x968>
    5188:	f04f 0a00 	mov.w	sl, #0
    518c:	f04f 0800 	mov.w	r8, #0
    5190:	f04f 0900 	mov.w	r9, #0
    5194:	e040      	b.n	5218 <__vfprintf+0x9d4>
    5196:	bf00      	nop
    5198:	000076e7 	.word	0x000076e7
    519c:	0000786a 	.word	0x0000786a
    51a0:	00007868 	.word	0x00007868
    51a4:	000078af 	.word	0x000078af
    51a8:	000078c0 	.word	0x000078c0
    51ac:	f04f 0800 	mov.w	r8, #0
    51b0:	f04f 0900 	mov.w	r9, #0
    51b4:	f10b 33ff 	add.w	r3, fp, #4294967295
    51b8:	ebc8 0203 	rsb	r2, r8, r3
    51bc:	2a00      	cmp	r2, #0
    51be:	db19      	blt.n	51f4 <__vfprintf+0x9b0>
    51c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    51c4:	4590      	cmp	r8, r2
    51c6:	eb79 0303 	sbcs.w	r3, r9, r3
    51ca:	da0e      	bge.n	51ea <__vfprintf+0x9a6>
    51cc:	68a3      	ldr	r3, [r4, #8]
    51ce:	3b01      	subs	r3, #1
    51d0:	2b00      	cmp	r3, #0
    51d2:	60a3      	str	r3, [r4, #8]
    51d4:	db05      	blt.n	51e2 <__vfprintf+0x99e>
    51d6:	6823      	ldr	r3, [r4, #0]
    51d8:	1c5a      	adds	r2, r3, #1
    51da:	6022      	str	r2, [r4, #0]
    51dc:	2220      	movs	r2, #32
    51de:	701a      	strb	r2, [r3, #0]
    51e0:	e003      	b.n	51ea <__vfprintf+0x9a6>
    51e2:	2020      	movs	r0, #32
    51e4:	4621      	mov	r1, r4
    51e6:	f000 fb2d 	bl	5844 <__flsbuf>
    51ea:	f118 0801 	adds.w	r8, r8, #1
    51ee:	f149 0900 	adc.w	r9, r9, #0
    51f2:	e7df      	b.n	51b4 <__vfprintf+0x970>
    51f4:	ea2b 7aeb 	bic.w	sl, fp, fp, asr #31
    51f8:	ebca 0b03 	rsb	fp, sl, r3
    51fc:	e7c6      	b.n	518c <__vfprintf+0x948>
    51fe:	eb18 020a 	adds.w	r2, r8, sl
    5202:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    5206:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    520a:	4282      	cmp	r2, r0
    520c:	418b      	sbcs	r3, r1
    520e:	db0e      	blt.n	522e <__vfprintf+0x9ea>
    5210:	f118 0801 	adds.w	r8, r8, #1
    5214:	f149 0900 	adc.w	r9, r9, #0
    5218:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    521a:	eb0a 0308 	add.w	r3, sl, r8
    521e:	1c51      	adds	r1, r2, #1
    5220:	911f      	str	r1, [sp, #124]	; 0x7c
    5222:	f892 e000 	ldrb.w	lr, [r2]
    5226:	f1be 0f00 	cmp.w	lr, #0
    522a:	d1e8      	bne.n	51fe <__vfprintf+0x9ba>
    522c:	e00f      	b.n	524e <__vfprintf+0xa0a>
    522e:	68a3      	ldr	r3, [r4, #8]
    5230:	3b01      	subs	r3, #1
    5232:	2b00      	cmp	r3, #0
    5234:	60a3      	str	r3, [r4, #8]
    5236:	db05      	blt.n	5244 <__vfprintf+0xa00>
    5238:	6823      	ldr	r3, [r4, #0]
    523a:	1c5a      	adds	r2, r3, #1
    523c:	6022      	str	r2, [r4, #0]
    523e:	f883 e000 	strb.w	lr, [r3]
    5242:	e7e5      	b.n	5210 <__vfprintf+0x9cc>
    5244:	4670      	mov	r0, lr
    5246:	4621      	mov	r1, r4
    5248:	f000 fafc 	bl	5844 <__flsbuf>
    524c:	e7e0      	b.n	5210 <__vfprintf+0x9cc>
    524e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5250:	469a      	mov	sl, r3
    5252:	2a00      	cmp	r2, #0
    5254:	d135      	bne.n	52c2 <__vfprintf+0xa7e>
    5256:	f417 7f00 	tst.w	r7, #512	; 0x200
    525a:	bf14      	ite	ne
    525c:	2730      	movne	r7, #48	; 0x30
    525e:	2720      	moveq	r7, #32
    5260:	2000      	movs	r0, #0
    5262:	2100      	movs	r1, #0
    5264:	e9cd 0106 	strd	r0, r1, [sp, #24]
    5268:	9906      	ldr	r1, [sp, #24]
    526a:	f10b 32ff 	add.w	r2, fp, #4294967295
    526e:	1a51      	subs	r1, r2, r1
    5270:	2900      	cmp	r1, #0
    5272:	db20      	blt.n	52b6 <__vfprintf+0xa72>
    5274:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    5278:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    527c:	18c0      	adds	r0, r0, r3
    527e:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
    5282:	4540      	cmp	r0, r8
    5284:	eb71 0209 	sbcs.w	r2, r1, r9
    5288:	da0f      	bge.n	52aa <__vfprintf+0xa66>
    528a:	68a2      	ldr	r2, [r4, #8]
    528c:	3a01      	subs	r2, #1
    528e:	2a00      	cmp	r2, #0
    5290:	60a2      	str	r2, [r4, #8]
    5292:	db04      	blt.n	529e <__vfprintf+0xa5a>
    5294:	6822      	ldr	r2, [r4, #0]
    5296:	1c51      	adds	r1, r2, #1
    5298:	6021      	str	r1, [r4, #0]
    529a:	7017      	strb	r7, [r2, #0]
    529c:	e005      	b.n	52aa <__vfprintf+0xa66>
    529e:	4638      	mov	r0, r7
    52a0:	4621      	mov	r1, r4
    52a2:	931d      	str	r3, [sp, #116]	; 0x74
    52a4:	f000 face 	bl	5844 <__flsbuf>
    52a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    52aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    52ae:	3001      	adds	r0, #1
    52b0:	f141 0100 	adc.w	r1, r1, #0
    52b4:	e7d6      	b.n	5264 <__vfprintf+0xa20>
    52b6:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    52ba:	eb03 0a0b 	add.w	sl, r3, fp
    52be:	ebcb 0b02 	rsb	fp, fp, r2
    52c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    52c4:	2b00      	cmp	r3, #0
    52c6:	d07c      	beq.n	53c2 <__vfprintf+0xb7e>
    52c8:	2700      	movs	r7, #0
    52ca:	42b7      	cmp	r7, r6
    52cc:	f280 80d5 	bge.w	547a <__vfprintf+0xc36>
    52d0:	ab24      	add	r3, sp, #144	; 0x90
    52d2:	f817 e003 	ldrb.w	lr, [r7, r3]
    52d6:	f1be 0f3c 	cmp.w	lr, #60	; 0x3c
    52da:	d007      	beq.n	52ec <__vfprintf+0xaa8>
    52dc:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
    52e0:	d151      	bne.n	5386 <__vfprintf+0xb42>
    52e2:	f04f 0800 	mov.w	r8, #0
    52e6:	f04f 0900 	mov.w	r9, #0
    52ea:	e034      	b.n	5356 <__vfprintf+0xb12>
    52ec:	f04f 0800 	mov.w	r8, #0
    52f0:	f04f 0900 	mov.w	r9, #0
    52f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
    52f6:	eb0a 0308 	add.w	r3, sl, r8
    52fa:	3a01      	subs	r2, #1
    52fc:	2a00      	cmp	r2, #0
    52fe:	9220      	str	r2, [sp, #128]	; 0x80
    5300:	db5c      	blt.n	53bc <__vfprintf+0xb78>
    5302:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5306:	eb18 020a 	adds.w	r2, r8, sl
    530a:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    530e:	4282      	cmp	r2, r0
    5310:	418b      	sbcs	r3, r1
    5312:	da0e      	bge.n	5332 <__vfprintf+0xaee>
    5314:	68a3      	ldr	r3, [r4, #8]
    5316:	3b01      	subs	r3, #1
    5318:	2b00      	cmp	r3, #0
    531a:	60a3      	str	r3, [r4, #8]
    531c:	db05      	blt.n	532a <__vfprintf+0xae6>
    531e:	6823      	ldr	r3, [r4, #0]
    5320:	1c5a      	adds	r2, r3, #1
    5322:	6022      	str	r2, [r4, #0]
    5324:	2230      	movs	r2, #48	; 0x30
    5326:	701a      	strb	r2, [r3, #0]
    5328:	e003      	b.n	5332 <__vfprintf+0xaee>
    532a:	2030      	movs	r0, #48	; 0x30
    532c:	4621      	mov	r1, r4
    532e:	f000 fa89 	bl	5844 <__flsbuf>
    5332:	f118 0801 	adds.w	r8, r8, #1
    5336:	f149 0900 	adc.w	r9, r9, #0
    533a:	e7db      	b.n	52f4 <__vfprintf+0xab0>
    533c:	eb18 020a 	adds.w	r2, r8, sl
    5340:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    5344:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5348:	4282      	cmp	r2, r0
    534a:	418b      	sbcs	r3, r1
    534c:	db0b      	blt.n	5366 <__vfprintf+0xb22>
    534e:	f118 0801 	adds.w	r8, r8, #1
    5352:	f149 0900 	adc.w	r9, r9, #0
    5356:	9a21      	ldr	r2, [sp, #132]	; 0x84
    5358:	eb0a 0308 	add.w	r3, sl, r8
    535c:	3a01      	subs	r2, #1
    535e:	2a00      	cmp	r2, #0
    5360:	9221      	str	r2, [sp, #132]	; 0x84
    5362:	daeb      	bge.n	533c <__vfprintf+0xaf8>
    5364:	e02a      	b.n	53bc <__vfprintf+0xb78>
    5366:	68a3      	ldr	r3, [r4, #8]
    5368:	3b01      	subs	r3, #1
    536a:	2b00      	cmp	r3, #0
    536c:	60a3      	str	r3, [r4, #8]
    536e:	db05      	blt.n	537c <__vfprintf+0xb38>
    5370:	6823      	ldr	r3, [r4, #0]
    5372:	1c5a      	adds	r2, r3, #1
    5374:	6022      	str	r2, [r4, #0]
    5376:	2230      	movs	r2, #48	; 0x30
    5378:	701a      	strb	r2, [r3, #0]
    537a:	e7e8      	b.n	534e <__vfprintf+0xb0a>
    537c:	4621      	mov	r1, r4
    537e:	2030      	movs	r0, #48	; 0x30
    5380:	f000 fa60 	bl	5844 <__flsbuf>
    5384:	e7e3      	b.n	534e <__vfprintf+0xb0a>
    5386:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    538a:	ea4f 79ea 	mov.w	r9, sl, asr #31
    538e:	4582      	cmp	sl, r0
    5390:	eb79 0201 	sbcs.w	r2, r9, r1
    5394:	f10a 0301 	add.w	r3, sl, #1
    5398:	da10      	bge.n	53bc <__vfprintf+0xb78>
    539a:	68a2      	ldr	r2, [r4, #8]
    539c:	3a01      	subs	r2, #1
    539e:	2a00      	cmp	r2, #0
    53a0:	60a2      	str	r2, [r4, #8]
    53a2:	db05      	blt.n	53b0 <__vfprintf+0xb6c>
    53a4:	6822      	ldr	r2, [r4, #0]
    53a6:	1c51      	adds	r1, r2, #1
    53a8:	6021      	str	r1, [r4, #0]
    53aa:	f882 e000 	strb.w	lr, [r2]
    53ae:	e005      	b.n	53bc <__vfprintf+0xb78>
    53b0:	4670      	mov	r0, lr
    53b2:	4621      	mov	r1, r4
    53b4:	9306      	str	r3, [sp, #24]
    53b6:	f000 fa45 	bl	5844 <__flsbuf>
    53ba:	9b06      	ldr	r3, [sp, #24]
    53bc:	3701      	adds	r7, #1
    53be:	469a      	mov	sl, r3
    53c0:	e783      	b.n	52ca <__vfprintf+0xa86>
    53c2:	f04f 0800 	mov.w	r8, #0
    53c6:	f04f 0900 	mov.w	r9, #0
    53ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    53cc:	eb0a 0708 	add.w	r7, sl, r8
    53d0:	3b01      	subs	r3, #1
    53d2:	2b00      	cmp	r3, #0
    53d4:	931e      	str	r3, [sp, #120]	; 0x78
    53d6:	db1c      	blt.n	5412 <__vfprintf+0xbce>
    53d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    53dc:	eb18 020a 	adds.w	r2, r8, sl
    53e0:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    53e4:	4282      	cmp	r2, r0
    53e6:	418b      	sbcs	r3, r1
    53e8:	da0e      	bge.n	5408 <__vfprintf+0xbc4>
    53ea:	68a3      	ldr	r3, [r4, #8]
    53ec:	3b01      	subs	r3, #1
    53ee:	2b00      	cmp	r3, #0
    53f0:	60a3      	str	r3, [r4, #8]
    53f2:	db05      	blt.n	5400 <__vfprintf+0xbbc>
    53f4:	6823      	ldr	r3, [r4, #0]
    53f6:	1c5a      	adds	r2, r3, #1
    53f8:	6022      	str	r2, [r4, #0]
    53fa:	2230      	movs	r2, #48	; 0x30
    53fc:	701a      	strb	r2, [r3, #0]
    53fe:	e003      	b.n	5408 <__vfprintf+0xbc4>
    5400:	2030      	movs	r0, #48	; 0x30
    5402:	4621      	mov	r1, r4
    5404:	f000 fa1e 	bl	5844 <__flsbuf>
    5408:	f118 0801 	adds.w	r8, r8, #1
    540c:	f149 0900 	adc.w	r9, r9, #0
    5410:	e7db      	b.n	53ca <__vfprintf+0xb86>
    5412:	ab2c      	add	r3, sp, #176	; 0xb0
    5414:	eb03 0a06 	add.w	sl, r3, r6
    5418:	f1aa 0a21 	sub.w	sl, sl, #33	; 0x21
    541c:	f04f 0800 	mov.w	r8, #0
    5420:	f04f 0900 	mov.w	r9, #0
    5424:	ebc8 0306 	rsb	r3, r8, r6
    5428:	2b00      	cmp	r3, #0
    542a:	dd20      	ble.n	546e <__vfprintf+0xc2a>
    542c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5430:	eb18 0207 	adds.w	r2, r8, r7
    5434:	eb49 73e7 	adc.w	r3, r9, r7, asr #31
    5438:	4282      	cmp	r2, r0
    543a:	418b      	sbcs	r3, r1
    543c:	da10      	bge.n	5460 <__vfprintf+0xc1c>
    543e:	68a3      	ldr	r3, [r4, #8]
    5440:	3b01      	subs	r3, #1
    5442:	2b00      	cmp	r3, #0
    5444:	60a3      	str	r3, [r4, #8]
    5446:	db06      	blt.n	5456 <__vfprintf+0xc12>
    5448:	6823      	ldr	r3, [r4, #0]
    544a:	1c5a      	adds	r2, r3, #1
    544c:	6022      	str	r2, [r4, #0]
    544e:	f89a 2000 	ldrb.w	r2, [sl]
    5452:	701a      	strb	r2, [r3, #0]
    5454:	e004      	b.n	5460 <__vfprintf+0xc1c>
    5456:	f89a 0000 	ldrb.w	r0, [sl]
    545a:	4621      	mov	r1, r4
    545c:	f000 f9f2 	bl	5844 <__flsbuf>
    5460:	f118 0801 	adds.w	r8, r8, #1
    5464:	f10a 3aff 	add.w	sl, sl, #4294967295
    5468:	f149 0900 	adc.w	r9, r9, #0
    546c:	e7da      	b.n	5424 <__vfprintf+0xbe0>
    546e:	2e00      	cmp	r6, #0
    5470:	bfac      	ite	ge
    5472:	eb07 0a06 	addge.w	sl, r7, r6
    5476:	f107 0a00 	addlt.w	sl, r7, #0
    547a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    547c:	b32b      	cbz	r3, 54ca <__vfprintf+0xc86>
    547e:	2600      	movs	r6, #0
    5480:	2700      	movs	r7, #0
    5482:	43f3      	mvns	r3, r6
    5484:	eb13 0f0b 	cmn.w	r3, fp
    5488:	d41b      	bmi.n	54c2 <__vfprintf+0xc7e>
    548a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    548e:	eb16 020a 	adds.w	r2, r6, sl
    5492:	eb47 73ea 	adc.w	r3, r7, sl, asr #31
    5496:	4282      	cmp	r2, r0
    5498:	418b      	sbcs	r3, r1
    549a:	da0e      	bge.n	54ba <__vfprintf+0xc76>
    549c:	68a3      	ldr	r3, [r4, #8]
    549e:	3b01      	subs	r3, #1
    54a0:	2b00      	cmp	r3, #0
    54a2:	60a3      	str	r3, [r4, #8]
    54a4:	db05      	blt.n	54b2 <__vfprintf+0xc6e>
    54a6:	6823      	ldr	r3, [r4, #0]
    54a8:	1c5a      	adds	r2, r3, #1
    54aa:	6022      	str	r2, [r4, #0]
    54ac:	2220      	movs	r2, #32
    54ae:	701a      	strb	r2, [r3, #0]
    54b0:	e003      	b.n	54ba <__vfprintf+0xc76>
    54b2:	2020      	movs	r0, #32
    54b4:	4621      	mov	r1, r4
    54b6:	f000 f9c5 	bl	5844 <__flsbuf>
    54ba:	3601      	adds	r6, #1
    54bc:	f147 0700 	adc.w	r7, r7, #0
    54c0:	e7df      	b.n	5482 <__vfprintf+0xc3e>
    54c2:	f1bb 0f00 	cmp.w	fp, #0
    54c6:	bfa8      	it	ge
    54c8:	44da      	addge	sl, fp
    54ca:	9b05      	ldr	r3, [sp, #20]
    54cc:	4453      	add	r3, sl
    54ce:	9305      	str	r3, [sp, #20]
    54d0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    54d4:	9e05      	ldr	r6, [sp, #20]
    54d6:	9605      	str	r6, [sp, #20]
    54d8:	462b      	mov	r3, r5
    54da:	f7ff b9be 	b.w	485a <__vfprintf+0x16>
    54de:	9805      	ldr	r0, [sp, #20]
    54e0:	b02d      	add	sp, #180	; 0xb4
    54e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54e6:	bf00      	nop

000054e8 <ch_val>:
    54e8:	4b0a      	ldr	r3, [pc, #40]	; (5514 <ch_val+0x2c>)
    54ea:	4403      	add	r3, r0
    54ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
    54f0:	069a      	lsls	r2, r3, #26
    54f2:	d501      	bpl.n	54f8 <ch_val+0x10>
    54f4:	3830      	subs	r0, #48	; 0x30
    54f6:	e008      	b.n	550a <ch_val+0x22>
    54f8:	071a      	lsls	r2, r3, #28
    54fa:	d501      	bpl.n	5500 <ch_val+0x18>
    54fc:	3857      	subs	r0, #87	; 0x57
    54fe:	e004      	b.n	550a <ch_val+0x22>
    5500:	06db      	lsls	r3, r3, #27
    5502:	bf4c      	ite	mi
    5504:	3837      	submi	r0, #55	; 0x37
    5506:	f04f 30ff 	movpl.w	r0, #4294967295
    550a:	4288      	cmp	r0, r1
    550c:	bfa8      	it	ge
    550e:	f04f 30ff 	movge.w	r0, #4294967295
    5512:	4770      	bx	lr
    5514:	000076e8 	.word	0x000076e8

00005518 <_strtoul>:
    5518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    551c:	4680      	mov	r8, r0
    551e:	4689      	mov	r9, r1
    5520:	4616      	mov	r6, r2
    5522:	4603      	mov	r3, r0
    5524:	461d      	mov	r5, r3
    5526:	f815 0b01 	ldrb.w	r0, [r5], #1
    552a:	b1d0      	cbz	r0, 5562 <_strtoul+0x4a>
    552c:	4a27      	ldr	r2, [pc, #156]	; (55cc <_strtoul+0xb4>)
    552e:	4402      	add	r2, r0
    5530:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
    5534:	07d2      	lsls	r2, r2, #31
    5536:	d501      	bpl.n	553c <_strtoul+0x24>
    5538:	462b      	mov	r3, r5
    553a:	e7f3      	b.n	5524 <_strtoul+0xc>
    553c:	2830      	cmp	r0, #48	; 0x30
    553e:	d110      	bne.n	5562 <_strtoul+0x4a>
    5540:	7858      	ldrb	r0, [r3, #1]
    5542:	1c9d      	adds	r5, r3, #2
    5544:	f000 02df 	and.w	r2, r0, #223	; 0xdf
    5548:	2a58      	cmp	r2, #88	; 0x58
    554a:	d106      	bne.n	555a <_strtoul+0x42>
    554c:	f036 0710 	bics.w	r7, r6, #16
    5550:	d13a      	bne.n	55c8 <_strtoul+0xb0>
    5552:	1cdd      	adds	r5, r3, #3
    5554:	7898      	ldrb	r0, [r3, #2]
    5556:	2610      	movs	r6, #16
    5558:	e008      	b.n	556c <_strtoul+0x54>
    555a:	2701      	movs	r7, #1
    555c:	b936      	cbnz	r6, 556c <_strtoul+0x54>
    555e:	2608      	movs	r6, #8
    5560:	e004      	b.n	556c <_strtoul+0x54>
    5562:	b10e      	cbz	r6, 5568 <_strtoul+0x50>
    5564:	2700      	movs	r7, #0
    5566:	e001      	b.n	556c <_strtoul+0x54>
    5568:	4637      	mov	r7, r6
    556a:	260a      	movs	r6, #10
    556c:	2400      	movs	r4, #0
    556e:	46a2      	mov	sl, r4
    5570:	46a3      	mov	fp, r4
    5572:	4631      	mov	r1, r6
    5574:	f7ff ffb8 	bl	54e8 <ch_val>
    5578:	2800      	cmp	r0, #0
    557a:	db0e      	blt.n	559a <_strtoul+0x82>
    557c:	fb06 0004 	mla	r0, r6, r4, r0
    5580:	0c03      	lsrs	r3, r0, #16
    5582:	fb06 3a0a 	mla	sl, r6, sl, r3
    5586:	f5ba 3f80 	cmp.w	sl, #65536	; 0x10000
    558a:	b284      	uxth	r4, r0
    558c:	bf28      	it	cs
    558e:	f04f 0b01 	movcs.w	fp, #1
    5592:	f815 0b01 	ldrb.w	r0, [r5], #1
    5596:	2701      	movs	r7, #1
    5598:	e7eb      	b.n	5572 <_strtoul+0x5a>
    559a:	f1b9 0f00 	cmp.w	r9, #0
    559e:	d005      	beq.n	55ac <_strtoul+0x94>
    55a0:	b10f      	cbz	r7, 55a6 <_strtoul+0x8e>
    55a2:	3d01      	subs	r5, #1
    55a4:	e000      	b.n	55a8 <_strtoul+0x90>
    55a6:	4645      	mov	r5, r8
    55a8:	f8c9 5000 	str.w	r5, [r9]
    55ac:	f1bb 0f00 	cmp.w	fp, #0
    55b0:	d006      	beq.n	55c0 <_strtoul+0xa8>
    55b2:	4b07      	ldr	r3, [pc, #28]	; (55d0 <_strtoul+0xb8>)
    55b4:	2222      	movs	r2, #34	; 0x22
    55b6:	601a      	str	r2, [r3, #0]
    55b8:	f04f 30ff 	mov.w	r0, #4294967295
    55bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55c0:	ea44 400a 	orr.w	r0, r4, sl, lsl #16
    55c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55c8:	2701      	movs	r7, #1
    55ca:	e7cf      	b.n	556c <_strtoul+0x54>
    55cc:	000076e8 	.word	0x000076e8
    55d0:	10000c98 	.word	0x10000c98

000055d4 <strtol>:
    55d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    55d6:	460e      	mov	r6, r1
    55d8:	4607      	mov	r7, r0
    55da:	4601      	mov	r1, r0
    55dc:	460d      	mov	r5, r1
    55de:	f815 3b01 	ldrb.w	r3, [r5], #1
    55e2:	b17b      	cbz	r3, 5604 <strtol+0x30>
    55e4:	4817      	ldr	r0, [pc, #92]	; (5644 <strtol+0x70>)
    55e6:	4418      	add	r0, r3
    55e8:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
    55ec:	f014 0401 	ands.w	r4, r4, #1
    55f0:	d001      	beq.n	55f6 <strtol+0x22>
    55f2:	4629      	mov	r1, r5
    55f4:	e7f2      	b.n	55dc <strtol+0x8>
    55f6:	2b2b      	cmp	r3, #43	; 0x2b
    55f8:	d006      	beq.n	5608 <strtol+0x34>
    55fa:	2b2d      	cmp	r3, #45	; 0x2d
    55fc:	d102      	bne.n	5604 <strtol+0x30>
    55fe:	f44f 7400 	mov.w	r4, #512	; 0x200
    5602:	e001      	b.n	5608 <strtol+0x34>
    5604:	460d      	mov	r5, r1
    5606:	2400      	movs	r4, #0
    5608:	4628      	mov	r0, r5
    560a:	a901      	add	r1, sp, #4
    560c:	f7ff ff84 	bl	5518 <_strtoul>
    5610:	b126      	cbz	r6, 561c <strtol+0x48>
    5612:	9b01      	ldr	r3, [sp, #4]
    5614:	42ab      	cmp	r3, r5
    5616:	bf08      	it	eq
    5618:	463b      	moveq	r3, r7
    561a:	6033      	str	r3, [r6, #0]
    561c:	05a3      	lsls	r3, r4, #22
    561e:	d508      	bpl.n	5632 <strtol+0x5e>
    5620:	4240      	negs	r0, r0
    5622:	2800      	cmp	r0, #0
    5624:	dd0c      	ble.n	5640 <strtol+0x6c>
    5626:	4b08      	ldr	r3, [pc, #32]	; (5648 <strtol+0x74>)
    5628:	2222      	movs	r2, #34	; 0x22
    562a:	601a      	str	r2, [r3, #0]
    562c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    5630:	e006      	b.n	5640 <strtol+0x6c>
    5632:	2800      	cmp	r0, #0
    5634:	bfbf      	itttt	lt
    5636:	4b04      	ldrlt	r3, [pc, #16]	; (5648 <strtol+0x74>)
    5638:	2222      	movlt	r2, #34	; 0x22
    563a:	601a      	strlt	r2, [r3, #0]
    563c:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
    5640:	b003      	add	sp, #12
    5642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5644:	000076e8 	.word	0x000076e8
    5648:	10000c98 	.word	0x10000c98

0000564c <atoi>:
    564c:	b538      	push	{r3, r4, r5, lr}
    564e:	4c04      	ldr	r4, [pc, #16]	; (5660 <atoi+0x14>)
    5650:	2100      	movs	r1, #0
    5652:	6825      	ldr	r5, [r4, #0]
    5654:	220a      	movs	r2, #10
    5656:	f7ff ffbd 	bl	55d4 <strtol>
    565a:	6025      	str	r5, [r4, #0]
    565c:	bd38      	pop	{r3, r4, r5, pc}
    565e:	bf00      	nop
    5660:	10000c98 	.word	0x10000c98

00005664 <setvbuf>:
    5664:	b570      	push	{r4, r5, r6, lr}
    5666:	68c4      	ldr	r4, [r0, #12]
    5668:	07a5      	lsls	r5, r4, #30
    566a:	d017      	beq.n	569c <setvbuf+0x38>
    566c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    5670:	d009      	beq.n	5686 <setvbuf+0x22>
    5672:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    5676:	d003      	beq.n	5680 <setvbuf+0x1c>
    5678:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    567c:	d10e      	bne.n	569c <setvbuf+0x38>
    567e:	e002      	b.n	5686 <setvbuf+0x22>
    5680:	6a41      	ldr	r1, [r0, #36]	; 0x24
    5682:	2301      	movs	r3, #1
    5684:	e003      	b.n	568e <setvbuf+0x2a>
    5686:	4d06      	ldr	r5, [pc, #24]	; (56a0 <setvbuf+0x3c>)
    5688:	1e5e      	subs	r6, r3, #1
    568a:	42ae      	cmp	r6, r5
    568c:	d806      	bhi.n	569c <setvbuf+0x38>
    568e:	4314      	orrs	r4, r2
    5690:	6101      	str	r1, [r0, #16]
    5692:	6001      	str	r1, [r0, #0]
    5694:	61c3      	str	r3, [r0, #28]
    5696:	60c4      	str	r4, [r0, #12]
    5698:	2000      	movs	r0, #0
    569a:	bd70      	pop	{r4, r5, r6, pc}
    569c:	2001      	movs	r0, #1
    569e:	bd70      	pop	{r4, r5, r6, pc}
    56a0:	00fffffe 	.word	0x00fffffe

000056a4 <strchr>:
    56a4:	b510      	push	{r4, lr}
    56a6:	4603      	mov	r3, r0
    56a8:	f810 2b01 	ldrb.w	r2, [r0], #1
    56ac:	b2cc      	uxtb	r4, r1
    56ae:	42a2      	cmp	r2, r4
    56b0:	d003      	beq.n	56ba <strchr+0x16>
    56b2:	2a00      	cmp	r2, #0
    56b4:	d1f7      	bne.n	56a6 <strchr+0x2>
    56b6:	4610      	mov	r0, r2
    56b8:	bd10      	pop	{r4, pc}
    56ba:	4618      	mov	r0, r3
    56bc:	bd10      	pop	{r4, pc}

000056be <strcpy>:
    56be:	ea40 0301 	orr.w	r3, r0, r1
    56c2:	079b      	lsls	r3, r3, #30
    56c4:	b510      	push	{r4, lr}
    56c6:	d113      	bne.n	56f0 <strcpy+0x32>
    56c8:	4602      	mov	r2, r0
    56ca:	3904      	subs	r1, #4
    56cc:	f851 3f04 	ldr.w	r3, [r1, #4]!
    56d0:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
    56d4:	ea24 0403 	bic.w	r4, r4, r3
    56d8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    56dc:	d102      	bne.n	56e4 <strcpy+0x26>
    56de:	f842 3b04 	str.w	r3, [r2], #4
    56e2:	e7f3      	b.n	56cc <strcpy+0xe>
    56e4:	b2d9      	uxtb	r1, r3
    56e6:	f802 1b01 	strb.w	r1, [r2], #1
    56ea:	b141      	cbz	r1, 56fe <strcpy+0x40>
    56ec:	121b      	asrs	r3, r3, #8
    56ee:	e7f9      	b.n	56e4 <strcpy+0x26>
    56f0:	1e42      	subs	r2, r0, #1
    56f2:	f811 3b01 	ldrb.w	r3, [r1], #1
    56f6:	f802 3f01 	strb.w	r3, [r2, #1]!
    56fa:	2b00      	cmp	r3, #0
    56fc:	d1f9      	bne.n	56f2 <strcpy+0x34>
    56fe:	bd10      	pop	{r4, pc}

00005700 <strlen>:
    5700:	b510      	push	{r4, lr}
    5702:	1c42      	adds	r2, r0, #1
    5704:	0783      	lsls	r3, r0, #30
    5706:	d005      	beq.n	5714 <strlen+0x14>
    5708:	f810 3b01 	ldrb.w	r3, [r0], #1
    570c:	2b00      	cmp	r3, #0
    570e:	d1f9      	bne.n	5704 <strlen+0x4>
    5710:	1a80      	subs	r0, r0, r2
    5712:	bd10      	pop	{r4, pc}
    5714:	4603      	mov	r3, r0
    5716:	f850 1b04 	ldr.w	r1, [r0], #4
    571a:	f1a1 3401 	sub.w	r4, r1, #16843009	; 0x1010101
    571e:	ea24 0401 	bic.w	r4, r4, r1
    5722:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    5726:	d0f5      	beq.n	5714 <strlen+0x14>
    5728:	f011 0fff 	tst.w	r1, #255	; 0xff
    572c:	d00a      	beq.n	5744 <strlen+0x44>
    572e:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
    5732:	d005      	beq.n	5740 <strlen+0x40>
    5734:	f411 0f7f 	tst.w	r1, #16711680	; 0xff0000
    5738:	bf14      	ite	ne
    573a:	4603      	movne	r3, r0
    573c:	3303      	addeq	r3, #3
    573e:	e002      	b.n	5746 <strlen+0x46>
    5740:	3302      	adds	r3, #2
    5742:	e000      	b.n	5746 <strlen+0x46>
    5744:	3301      	adds	r3, #1
    5746:	1a98      	subs	r0, r3, r2
    5748:	bd10      	pop	{r4, pc}

0000574a <strncpy>:
    574a:	ea40 0301 	orr.w	r3, r0, r1
    574e:	b570      	push	{r4, r5, r6, lr}
    5750:	079d      	lsls	r5, r3, #30
    5752:	d111      	bne.n	5778 <strncpy+0x2e>
    5754:	460e      	mov	r6, r1
    5756:	4603      	mov	r3, r0
    5758:	2a03      	cmp	r2, #3
    575a:	4631      	mov	r1, r6
    575c:	d90d      	bls.n	577a <strncpy+0x30>
    575e:	f856 5b04 	ldr.w	r5, [r6], #4
    5762:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    5766:	ea24 0405 	bic.w	r4, r4, r5
    576a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    576e:	d104      	bne.n	577a <strncpy+0x30>
    5770:	f843 5b04 	str.w	r5, [r3], #4
    5774:	3a04      	subs	r2, #4
    5776:	e7ef      	b.n	5758 <strncpy+0xe>
    5778:	4603      	mov	r3, r0
    577a:	3a01      	subs	r2, #1
    577c:	1c54      	adds	r4, r2, #1
    577e:	d00f      	beq.n	57a0 <strncpy+0x56>
    5780:	f811 4b01 	ldrb.w	r4, [r1], #1
    5784:	1e55      	subs	r5, r2, #1
    5786:	f803 4b01 	strb.w	r4, [r3], #1
    578a:	b93c      	cbnz	r4, 579c <strncpy+0x52>
    578c:	441a      	add	r2, r3
    578e:	4293      	cmp	r3, r2
    5790:	d003      	beq.n	579a <strncpy+0x50>
    5792:	2100      	movs	r1, #0
    5794:	f803 1b01 	strb.w	r1, [r3], #1
    5798:	e7f9      	b.n	578e <strncpy+0x44>
    579a:	bd70      	pop	{r4, r5, r6, pc}
    579c:	462a      	mov	r2, r5
    579e:	e7ed      	b.n	577c <strncpy+0x32>
    57a0:	bd70      	pop	{r4, r5, r6, pc}

000057a2 <strstr>:
    57a2:	b510      	push	{r4, lr}
    57a4:	2300      	movs	r3, #0
    57a6:	5cca      	ldrb	r2, [r1, r3]
    57a8:	b14a      	cbz	r2, 57be <strstr+0x1c>
    57aa:	5cc4      	ldrb	r4, [r0, r3]
    57ac:	4294      	cmp	r4, r2
    57ae:	d101      	bne.n	57b4 <strstr+0x12>
    57b0:	3301      	adds	r3, #1
    57b2:	e7f8      	b.n	57a6 <strstr+0x4>
    57b4:	f810 3b01 	ldrb.w	r3, [r0], #1
    57b8:	2b00      	cmp	r3, #0
    57ba:	d1f3      	bne.n	57a4 <strstr+0x2>
    57bc:	4618      	mov	r0, r3
    57be:	bd10      	pop	{r4, pc}

000057c0 <_sbrk>:
    57c0:	b538      	push	{r3, r4, r5, lr}
    57c2:	4b0c      	ldr	r3, [pc, #48]	; (57f4 <_sbrk+0x34>)
    57c4:	681a      	ldr	r2, [r3, #0]
    57c6:	b90a      	cbnz	r2, 57cc <_sbrk+0xc>
    57c8:	4a0b      	ldr	r2, [pc, #44]	; (57f8 <_sbrk+0x38>)
    57ca:	601a      	str	r2, [r3, #0]
    57cc:	1cc4      	adds	r4, r0, #3
    57ce:	681d      	ldr	r5, [r3, #0]
    57d0:	f024 0403 	bic.w	r4, r4, #3
    57d4:	442c      	add	r4, r5
    57d6:	4620      	mov	r0, r4
    57d8:	f000 fac8 	bl	5d6c <__check_heap_overflow>
    57dc:	b918      	cbnz	r0, 57e6 <_sbrk+0x26>
    57de:	4b05      	ldr	r3, [pc, #20]	; (57f4 <_sbrk+0x34>)
    57e0:	4628      	mov	r0, r5
    57e2:	601c      	str	r4, [r3, #0]
    57e4:	bd38      	pop	{r3, r4, r5, pc}
    57e6:	4b05      	ldr	r3, [pc, #20]	; (57fc <_sbrk+0x3c>)
    57e8:	220c      	movs	r2, #12
    57ea:	601a      	str	r2, [r3, #0]
    57ec:	f04f 30ff 	mov.w	r0, #4294967295
    57f0:	bd38      	pop	{r3, r4, r5, pc}
    57f2:	bf00      	nop
    57f4:	1000201c 	.word	0x1000201c
    57f8:	10002020 	.word	0x10002020
    57fc:	10000c98 	.word	0x10000c98

00005800 <_deferredlazyseek>:
    5800:	68c3      	ldr	r3, [r0, #12]
    5802:	b510      	push	{r4, lr}
    5804:	f023 0320 	bic.w	r3, r3, #32
    5808:	60c3      	str	r3, [r0, #12]
    580a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    580c:	6982      	ldr	r2, [r0, #24]
    580e:	685b      	ldr	r3, [r3, #4]
    5810:	4604      	mov	r4, r0
    5812:	429a      	cmp	r2, r3
    5814:	d00f      	beq.n	5836 <_deferredlazyseek+0x36>
    5816:	f000 f8eb 	bl	59f0 <_fflush>
    581a:	68e3      	ldr	r3, [r4, #12]
    581c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    581e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    5822:	f023 0310 	bic.w	r3, r3, #16
    5826:	f043 0310 	orr.w	r3, r3, #16
    582a:	60e3      	str	r3, [r4, #12]
    582c:	6853      	ldr	r3, [r2, #4]
    582e:	61a3      	str	r3, [r4, #24]
    5830:	6923      	ldr	r3, [r4, #16]
    5832:	6093      	str	r3, [r2, #8]
    5834:	6023      	str	r3, [r4, #0]
    5836:	68e3      	ldr	r3, [r4, #12]
    5838:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    583c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    5840:	60e3      	str	r3, [r4, #12]
    5842:	bd10      	pop	{r4, pc}

00005844 <__flsbuf>:
    5844:	68cb      	ldr	r3, [r1, #12]
    5846:	b570      	push	{r4, r5, r6, lr}
    5848:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
    584c:	069b      	lsls	r3, r3, #26
    584e:	4605      	mov	r5, r0
    5850:	460c      	mov	r4, r1
    5852:	60ca      	str	r2, [r1, #12]
    5854:	d502      	bpl.n	585c <__flsbuf+0x18>
    5856:	4608      	mov	r0, r1
    5858:	f7ff ffd2 	bl	5800 <_deferredlazyseek>
    585c:	68a1      	ldr	r1, [r4, #8]
    585e:	68e3      	ldr	r3, [r4, #12]
    5860:	1c4e      	adds	r6, r1, #1
    5862:	da0d      	bge.n	5880 <__flsbuf+0x3c>
    5864:	0598      	lsls	r0, r3, #22
    5866:	d40b      	bmi.n	5880 <__flsbuf+0x3c>
    5868:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
    586c:	60e3      	str	r3, [r4, #12]
    586e:	f06f 0201 	mvn.w	r2, #1
    5872:	6823      	ldr	r3, [r4, #0]
    5874:	1a52      	subs	r2, r2, r1
    5876:	60a2      	str	r2, [r4, #8]
    5878:	1c5a      	adds	r2, r3, #1
    587a:	6022      	str	r2, [r4, #0]
    587c:	701d      	strb	r5, [r3, #0]
    587e:	e056      	b.n	592e <__flsbuf+0xea>
    5880:	f241 028a 	movw	r2, #4234	; 0x108a
    5884:	401a      	ands	r2, r3
    5886:	2a02      	cmp	r2, #2
    5888:	461e      	mov	r6, r3
    588a:	d005      	beq.n	5898 <__flsbuf+0x54>
    588c:	2200      	movs	r2, #0
    588e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5892:	60a2      	str	r2, [r4, #8]
    5894:	60e3      	str	r3, [r4, #12]
    5896:	e052      	b.n	593e <__flsbuf+0xfa>
    5898:	f24a 0110 	movw	r1, #40976	; 0xa010
    589c:	4019      	ands	r1, r3
    589e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    58a2:	d10a      	bne.n	58ba <__flsbuf+0x76>
    58a4:	2100      	movs	r1, #0
    58a6:	4620      	mov	r0, r4
    58a8:	f000 f9a8 	bl	5bfc <fseek>
    58ac:	68e3      	ldr	r3, [r4, #12]
    58ae:	0699      	lsls	r1, r3, #26
    58b0:	d502      	bpl.n	58b8 <__flsbuf+0x74>
    58b2:	4620      	mov	r0, r4
    58b4:	f7ff ffa4 	bl	5800 <_deferredlazyseek>
    58b8:	68e6      	ldr	r6, [r4, #12]
    58ba:	f446 3390 	orr.w	r3, r6, #73728	; 0x12000
    58be:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    58c2:	60e3      	str	r3, [r4, #12]
    58c4:	d11c      	bne.n	5900 <__flsbuf+0xbc>
    58c6:	6960      	ldr	r0, [r4, #20]
    58c8:	f000 ff06 	bl	66d8 <__sys_istty>
    58cc:	b150      	cbz	r0, 58e4 <__flsbuf+0xa0>
    58ce:	0572      	lsls	r2, r6, #21
    58d0:	d508      	bpl.n	58e4 <__flsbuf+0xa0>
    58d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    58d4:	6123      	str	r3, [r4, #16]
    58d6:	6023      	str	r3, [r4, #0]
    58d8:	2301      	movs	r3, #1
    58da:	61e3      	str	r3, [r4, #28]
    58dc:	f446 3392 	orr.w	r3, r6, #74752	; 0x12400
    58e0:	60e3      	str	r3, [r4, #12]
    58e2:	e00d      	b.n	5900 <__flsbuf+0xbc>
    58e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    58e8:	f7fe fa5c 	bl	3da4 <_Csys_alloc>
    58ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    58f0:	68e2      	ldr	r2, [r4, #12]
    58f2:	61e3      	str	r3, [r4, #28]
    58f4:	f446 3394 	orr.w	r3, r6, #75776	; 0x12800
    58f8:	431a      	orrs	r2, r3
    58fa:	6120      	str	r0, [r4, #16]
    58fc:	6020      	str	r0, [r4, #0]
    58fe:	60e2      	str	r2, [r4, #12]
    5900:	f413 6f10 	tst.w	r3, #2304	; 0x900
    5904:	6821      	ldr	r1, [r4, #0]
    5906:	6926      	ldr	r6, [r4, #16]
    5908:	d01c      	beq.n	5944 <__flsbuf+0x100>
    590a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    590c:	689b      	ldr	r3, [r3, #8]
    590e:	428b      	cmp	r3, r1
    5910:	bf2c      	ite	cs
    5912:	ebc6 0103 	rsbcs	r1, r6, r3
    5916:	ebc6 0101 	rsbcc	r1, r6, r1
    591a:	b951      	cbnz	r1, 5932 <__flsbuf+0xee>
    591c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    591e:	1c72      	adds	r2, r6, #1
    5920:	609a      	str	r2, [r3, #8]
    5922:	6022      	str	r2, [r4, #0]
    5924:	69e2      	ldr	r2, [r4, #28]
    5926:	1e51      	subs	r1, r2, #1
    5928:	60a1      	str	r1, [r4, #8]
    592a:	60da      	str	r2, [r3, #12]
    592c:	7035      	strb	r5, [r6, #0]
    592e:	b2e8      	uxtb	r0, r5
    5930:	bd70      	pop	{r4, r5, r6, pc}
    5932:	4630      	mov	r0, r6
    5934:	4622      	mov	r2, r4
    5936:	f000 f8db 	bl	5af0 <_Cwritebuf>
    593a:	2800      	cmp	r0, #0
    593c:	d0ee      	beq.n	591c <__flsbuf+0xd8>
    593e:	f04f 30ff 	mov.w	r0, #4294967295
    5942:	bd70      	pop	{r4, r5, r6, pc}
    5944:	1c4a      	adds	r2, r1, #1
    5946:	b2ed      	uxtb	r5, r5
    5948:	6022      	str	r2, [r4, #0]
    594a:	700d      	strb	r5, [r1, #0]
    594c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    594e:	6821      	ldr	r1, [r4, #0]
    5950:	6882      	ldr	r2, [r0, #8]
    5952:	428a      	cmp	r2, r1
    5954:	bf2c      	ite	cs
    5956:	ebc6 0102 	rsbcs	r1, r6, r2
    595a:	ebc6 0101 	rsbcc	r1, r6, r1
    595e:	69e2      	ldr	r2, [r4, #28]
    5960:	055b      	lsls	r3, r3, #21
    5962:	60c2      	str	r2, [r0, #12]
    5964:	d403      	bmi.n	596e <__flsbuf+0x12a>
    5966:	2d0a      	cmp	r5, #10
    5968:	d001      	beq.n	596e <__flsbuf+0x12a>
    596a:	4291      	cmp	r1, r2
    596c:	db09      	blt.n	5982 <__flsbuf+0x13e>
    596e:	2300      	movs	r3, #0
    5970:	6086      	str	r6, [r0, #8]
    5972:	4622      	mov	r2, r4
    5974:	6026      	str	r6, [r4, #0]
    5976:	60a3      	str	r3, [r4, #8]
    5978:	4630      	mov	r0, r6
    597a:	f000 f8b9 	bl	5af0 <_Cwritebuf>
    597e:	2800      	cmp	r0, #0
    5980:	d1dd      	bne.n	593e <__flsbuf+0xfa>
    5982:	4628      	mov	r0, r5
    5984:	bd70      	pop	{r4, r5, r6, pc}

00005986 <_fdopen>:
    5986:	b570      	push	{r4, r5, r6, lr}
    5988:	460d      	mov	r5, r1
    598a:	4606      	mov	r6, r0
    598c:	4610      	mov	r0, r2
    598e:	4614      	mov	r4, r2
    5990:	f000 f8e6 	bl	5b60 <fclose>
    5994:	782b      	ldrb	r3, [r5, #0]
    5996:	2b72      	cmp	r3, #114	; 0x72
    5998:	d00a      	beq.n	59b0 <_fdopen+0x2a>
    599a:	2b77      	cmp	r3, #119	; 0x77
    599c:	d005      	beq.n	59aa <_fdopen+0x24>
    599e:	2b61      	cmp	r3, #97	; 0x61
    59a0:	d123      	bne.n	59ea <_fdopen+0x64>
    59a2:	2308      	movs	r3, #8
    59a4:	f248 0202 	movw	r2, #32770	; 0x8002
    59a8:	e004      	b.n	59b4 <_fdopen+0x2e>
    59aa:	2304      	movs	r3, #4
    59ac:	2202      	movs	r2, #2
    59ae:	e001      	b.n	59b4 <_fdopen+0x2e>
    59b0:	2300      	movs	r3, #0
    59b2:	2201      	movs	r2, #1
    59b4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    59b8:	292b      	cmp	r1, #43	; 0x2b
    59ba:	d006      	beq.n	59ca <_fdopen+0x44>
    59bc:	2962      	cmp	r1, #98	; 0x62
    59be:	d109      	bne.n	59d4 <_fdopen+0x4e>
    59c0:	f042 0204 	orr.w	r2, r2, #4
    59c4:	f043 0301 	orr.w	r3, r3, #1
    59c8:	e7f4      	b.n	59b4 <_fdopen+0x2e>
    59ca:	f042 0203 	orr.w	r2, r2, #3
    59ce:	f043 0302 	orr.w	r3, r3, #2
    59d2:	e7ef      	b.n	59b4 <_fdopen+0x2e>
    59d4:	071b      	lsls	r3, r3, #28
    59d6:	60e2      	str	r2, [r4, #12]
    59d8:	6166      	str	r6, [r4, #20]
    59da:	4620      	mov	r0, r4
    59dc:	d507      	bpl.n	59ee <_fdopen+0x68>
    59de:	2100      	movs	r1, #0
    59e0:	2202      	movs	r2, #2
    59e2:	f000 f90b 	bl	5bfc <fseek>
    59e6:	4620      	mov	r0, r4
    59e8:	bd70      	pop	{r4, r5, r6, pc}
    59ea:	2000      	movs	r0, #0
    59ec:	bd70      	pop	{r4, r5, r6, pc}
    59ee:	bd70      	pop	{r4, r5, r6, pc}

000059f0 <_fflush>:
    59f0:	b538      	push	{r3, r4, r5, lr}
    59f2:	4604      	mov	r4, r0
    59f4:	6a42      	ldr	r2, [r0, #36]	; 0x24
    59f6:	6905      	ldr	r5, [r0, #16]
    59f8:	6803      	ldr	r3, [r0, #0]
    59fa:	68c0      	ldr	r0, [r0, #12]
    59fc:	6891      	ldr	r1, [r2, #8]
    59fe:	f420 2200 	bic.w	r2, r0, #524288	; 0x80000
    5a02:	60e2      	str	r2, [r4, #12]
    5a04:	f000 0282 	and.w	r2, r0, #130	; 0x82
    5a08:	2a02      	cmp	r2, #2
    5a0a:	d002      	beq.n	5a12 <_fflush+0x22>
    5a0c:	f04f 30ff 	mov.w	r0, #4294967295
    5a10:	bd38      	pop	{r3, r4, r5, pc}
    5a12:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
    5a16:	d016      	beq.n	5a46 <_fflush+0x56>
    5a18:	4299      	cmp	r1, r3
    5a1a:	bf38      	it	cc
    5a1c:	4619      	movcc	r1, r3
    5a1e:	42a9      	cmp	r1, r5
    5a20:	d109      	bne.n	5a36 <_fflush+0x46>
    5a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5a24:	2000      	movs	r0, #0
    5a26:	609d      	str	r5, [r3, #8]
    5a28:	68e3      	ldr	r3, [r4, #12]
    5a2a:	6025      	str	r5, [r4, #0]
    5a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5a30:	60a0      	str	r0, [r4, #8]
    5a32:	60e3      	str	r3, [r4, #12]
    5a34:	bd38      	pop	{r3, r4, r5, pc}
    5a36:	4628      	mov	r0, r5
    5a38:	1b49      	subs	r1, r1, r5
    5a3a:	4622      	mov	r2, r4
    5a3c:	f000 f858 	bl	5af0 <_Cwritebuf>
    5a40:	2800      	cmp	r0, #0
    5a42:	d0ee      	beq.n	5a22 <_fflush+0x32>
    5a44:	e7e2      	b.n	5a0c <_fflush+0x1c>
    5a46:	bd38      	pop	{r3, r4, r5, pc}

00005a48 <_frexpl>:
    5a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a4a:	4615      	mov	r5, r2
    5a4c:	2300      	movs	r3, #0
    5a4e:	2200      	movs	r2, #0
    5a50:	4606      	mov	r6, r0
    5a52:	460f      	mov	r7, r1
    5a54:	f000 fd80 	bl	6558 <__aeabi_dcmpeq>
    5a58:	b120      	cbz	r0, 5a64 <_frexpl+0x1c>
    5a5a:	2300      	movs	r3, #0
    5a5c:	602b      	str	r3, [r5, #0]
    5a5e:	2000      	movs	r0, #0
    5a60:	2100      	movs	r1, #0
    5a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a64:	f3c7 530a 	ubfx	r3, r7, #20, #11
    5a68:	4630      	mov	r0, r6
    5a6a:	4639      	mov	r1, r7
    5a6c:	f2a3 34fe 	subw	r4, r3, #1022	; 0x3fe
    5a70:	b98b      	cbnz	r3, 5a96 <_frexpl+0x4e>
    5a72:	4632      	mov	r2, r6
    5a74:	f3c7 0313 	ubfx	r3, r7, #0, #20
    5a78:	0fd7      	lsrs	r7, r2, #31
    5a7a:	f403 2600 	and.w	r6, r3, #524288	; 0x80000
    5a7e:	ea47 0343 	orr.w	r3, r7, r3, lsl #1
    5a82:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5a86:	0052      	lsls	r2, r2, #1
    5a88:	b11e      	cbz	r6, 5a92 <_frexpl+0x4a>
    5a8a:	f363 0113 	bfi	r1, r3, #0, #20
    5a8e:	4610      	mov	r0, r2
    5a90:	e001      	b.n	5a96 <_frexpl+0x4e>
    5a92:	3c01      	subs	r4, #1
    5a94:	e7f0      	b.n	5a78 <_frexpl+0x30>
    5a96:	f240 33fe 	movw	r3, #1022	; 0x3fe
    5a9a:	602c      	str	r4, [r5, #0]
    5a9c:	f363 511e 	bfi	r1, r3, #20, #11
    5aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005aa4 <_ldexpl>:
    5aa4:	b570      	push	{r4, r5, r6, lr}
    5aa6:	2300      	movs	r3, #0
    5aa8:	4616      	mov	r6, r2
    5aaa:	2200      	movs	r2, #0
    5aac:	4604      	mov	r4, r0
    5aae:	460d      	mov	r5, r1
    5ab0:	f000 fd52 	bl	6558 <__aeabi_dcmpeq>
    5ab4:	b110      	cbz	r0, 5abc <_ldexpl+0x18>
    5ab6:	2000      	movs	r0, #0
    5ab8:	2100      	movs	r1, #0
    5aba:	bd70      	pop	{r4, r5, r6, pc}
    5abc:	f240 73fe 	movw	r3, #2046	; 0x7fe
    5ac0:	f3c5 520a 	ubfx	r2, r5, #20, #11
    5ac4:	4432      	add	r2, r6
    5ac6:	429a      	cmp	r2, r3
    5ac8:	4620      	mov	r0, r4
    5aca:	4629      	mov	r1, r5
    5acc:	dd06      	ble.n	5adc <_ldexpl+0x38>
    5ace:	4b06      	ldr	r3, [pc, #24]	; (5ae8 <_ldexpl+0x44>)
    5ad0:	2222      	movs	r2, #34	; 0x22
    5ad2:	601a      	str	r2, [r3, #0]
    5ad4:	4b05      	ldr	r3, [pc, #20]	; (5aec <_ldexpl+0x48>)
    5ad6:	e9d3 0100 	ldrd	r0, r1, [r3]
    5ada:	bd70      	pop	{r4, r5, r6, pc}
    5adc:	2a00      	cmp	r2, #0
    5ade:	ddea      	ble.n	5ab6 <_ldexpl+0x12>
    5ae0:	f362 511e 	bfi	r1, r2, #20, #11
    5ae4:	bd70      	pop	{r4, r5, r6, pc}
    5ae6:	bf00      	nop
    5ae8:	10000c98 	.word	0x10000c98
    5aec:	000078d8 	.word	0x000078d8

00005af0 <_Cwritebuf>:
    5af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5af4:	68d5      	ldr	r5, [r2, #12]
    5af6:	4680      	mov	r8, r0
    5af8:	02eb      	lsls	r3, r5, #11
    5afa:	460e      	mov	r6, r1
    5afc:	4614      	mov	r4, r2
    5afe:	6957      	ldr	r7, [r2, #20]
    5b00:	d505      	bpl.n	5b0e <_Cwritebuf+0x1e>
    5b02:	4638      	mov	r0, r7
    5b04:	f000 fde5 	bl	66d2 <__sys_flen>
    5b08:	f045 0510 	orr.w	r5, r5, #16
    5b0c:	61a0      	str	r0, [r4, #24]
    5b0e:	4b13      	ldr	r3, [pc, #76]	; (5b5c <_Cwritebuf+0x6c>)
    5b10:	402b      	ands	r3, r5
    5b12:	b153      	cbz	r3, 5b2a <_Cwritebuf+0x3a>
    5b14:	4638      	mov	r0, r7
    5b16:	69a1      	ldr	r1, [r4, #24]
    5b18:	f000 fde4 	bl	66e4 <__sys_seek>
    5b1c:	2800      	cmp	r0, #0
    5b1e:	db14      	blt.n	5b4a <_Cwritebuf+0x5a>
    5b20:	f425 3500 	bic.w	r5, r5, #131072	; 0x20000
    5b24:	f025 0510 	bic.w	r5, r5, #16
    5b28:	60e5      	str	r5, [r4, #12]
    5b2a:	4632      	mov	r2, r6
    5b2c:	4638      	mov	r0, r7
    5b2e:	4641      	mov	r1, r8
    5b30:	f000 fdde 	bl	66f0 <__sys_write>
    5b34:	1b80      	subs	r0, r0, r6
    5b36:	bf18      	it	ne
    5b38:	f04f 30ff 	movne.w	r0, #4294967295
    5b3c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
    5b40:	1af6      	subs	r6, r6, r3
    5b42:	69a3      	ldr	r3, [r4, #24]
    5b44:	441e      	add	r6, r3
    5b46:	61a6      	str	r6, [r4, #24]
    5b48:	b128      	cbz	r0, 5b56 <_Cwritebuf+0x66>
    5b4a:	68e3      	ldr	r3, [r4, #12]
    5b4c:	f04f 30ff 	mov.w	r0, #4294967295
    5b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5b54:	60e3      	str	r3, [r4, #12]
    5b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b5a:	bf00      	nop
    5b5c:	00020010 	.word	0x00020010

00005b60 <fclose>:
    5b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b64:	f100 050c 	add.w	r5, r0, #12
    5b68:	e895 01a0 	ldmia.w	r5, {r5, r7, r8}
    5b6c:	07a9      	lsls	r1, r5, #30
    5b6e:	b088      	sub	sp, #32
    5b70:	4604      	mov	r4, r0
    5b72:	6a46      	ldr	r6, [r0, #36]	; 0x24
    5b74:	d025      	beq.n	5bc2 <fclose+0x62>
    5b76:	072a      	lsls	r2, r5, #28
    5b78:	d416      	bmi.n	5ba8 <fclose+0x48>
    5b7a:	f000 f827 	bl	5bcc <fflush>
    5b7e:	4640      	mov	r0, r8
    5b80:	f000 fda4 	bl	66cc <__sys_close>
    5b84:	052b      	lsls	r3, r5, #20
    5b86:	d502      	bpl.n	5b8e <fclose+0x2e>
    5b88:	4638      	mov	r0, r7
    5b8a:	f7fe f8f3 	bl	3d74 <free>
    5b8e:	0dad      	lsrs	r5, r5, #22
    5b90:	05ad      	lsls	r5, r5, #22
    5b92:	f115 4fa5 	cmn.w	r5, #1384120320	; 0x52800000
    5b96:	d107      	bne.n	5ba8 <fclose+0x48>
    5b98:	4668      	mov	r0, sp
    5b9a:	6a21      	ldr	r1, [r4, #32]
    5b9c:	2220      	movs	r2, #32
    5b9e:	f000 fda4 	bl	66ea <__sys_tmpnam>
    5ba2:	4668      	mov	r0, sp
    5ba4:	f000 f8d8 	bl	5d58 <remove>
    5ba8:	2100      	movs	r1, #0
    5baa:	2218      	movs	r2, #24
    5bac:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5bae:	f7fe f879 	bl	3ca4 <memset>
    5bb2:	4620      	mov	r0, r4
    5bb4:	2100      	movs	r1, #0
    5bb6:	2228      	movs	r2, #40	; 0x28
    5bb8:	f7fe f874 	bl	3ca4 <memset>
    5bbc:	6266      	str	r6, [r4, #36]	; 0x24
    5bbe:	2000      	movs	r0, #0
    5bc0:	e001      	b.n	5bc6 <fclose+0x66>
    5bc2:	f04f 30ff 	mov.w	r0, #4294967295
    5bc6:	b008      	add	sp, #32
    5bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005bcc <fflush>:
    5bcc:	b538      	push	{r3, r4, r5, lr}
    5bce:	4604      	mov	r4, r0
    5bd0:	b118      	cbz	r0, 5bda <fflush+0xe>
    5bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5bd6:	f000 b8d5 	b.w	5d84 <_do_fflush>
    5bda:	4605      	mov	r5, r0
    5bdc:	4806      	ldr	r0, [pc, #24]	; (5bf8 <fflush+0x2c>)
    5bde:	4420      	add	r0, r4
    5be0:	f000 f8d0 	bl	5d84 <_do_fflush>
    5be4:	3428      	adds	r4, #40	; 0x28
    5be6:	2800      	cmp	r0, #0
    5be8:	bf18      	it	ne
    5bea:	f04f 35ff 	movne.w	r5, #4294967295
    5bee:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
    5bf2:	d1f3      	bne.n	5bdc <fflush+0x10>
    5bf4:	4628      	mov	r0, r5
    5bf6:	bd38      	pop	{r3, r4, r5, pc}
    5bf8:	10001ed8 	.word	0x10001ed8

00005bfc <fseek>:
    5bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5c00:	68c6      	ldr	r6, [r0, #12]
    5c02:	4b41      	ldr	r3, [pc, #260]	; (5d08 <fseek+0x10c>)
    5c04:	4604      	mov	r4, r0
    5c06:	4033      	ands	r3, r6
    5c08:	460d      	mov	r5, r1
    5c0a:	4690      	mov	r8, r2
    5c0c:	f8d0 9014 	ldr.w	r9, [r0, #20]
    5c10:	2b00      	cmp	r3, #0
    5c12:	d075      	beq.n	5d00 <fseek+0x104>
    5c14:	4648      	mov	r0, r9
    5c16:	f000 fd5f 	bl	66d8 <__sys_istty>
    5c1a:	4607      	mov	r7, r0
    5c1c:	2800      	cmp	r0, #0
    5c1e:	d16f      	bne.n	5d00 <fseek+0x104>
    5c20:	f1b8 0f01 	cmp.w	r8, #1
    5c24:	d006      	beq.n	5c34 <fseek+0x38>
    5c26:	f1b8 0f02 	cmp.w	r8, #2
    5c2a:	d008      	beq.n	5c3e <fseek+0x42>
    5c2c:	f1b8 0f00 	cmp.w	r8, #0
    5c30:	d166      	bne.n	5d00 <fseek+0x104>
    5c32:	e029      	b.n	5c88 <fseek+0x8c>
    5c34:	4620      	mov	r0, r4
    5c36:	f000 f869 	bl	5d0c <ftell>
    5c3a:	4405      	add	r5, r0
    5c3c:	e024      	b.n	5c88 <fseek+0x8c>
    5c3e:	4648      	mov	r0, r9
    5c40:	f000 fd47 	bl	66d2 <__sys_flen>
    5c44:	f1b0 0e00 	subs.w	lr, r0, #0
    5c48:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    5c4c:	da04      	bge.n	5c58 <fseek+0x5c>
    5c4e:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    5c52:	60e1      	str	r1, [r4, #12]
    5c54:	2701      	movs	r7, #1
    5c56:	e054      	b.n	5d02 <fseek+0x106>
    5c58:	6823      	ldr	r3, [r4, #0]
    5c5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5c5c:	461a      	mov	r2, r3
    5c5e:	69a3      	ldr	r3, [r4, #24]
    5c60:	4619      	mov	r1, r3
    5c62:	6883      	ldr	r3, [r0, #8]
    5c64:	4293      	cmp	r3, r2
    5c66:	bf2c      	ite	cs
    5c68:	18c9      	addcs	r1, r1, r3
    5c6a:	1889      	addcc	r1, r1, r2
    5c6c:	6923      	ldr	r3, [r4, #16]
    5c6e:	f01c 0f20 	tst.w	ip, #32
    5c72:	eba1 0303 	sub.w	r3, r1, r3
    5c76:	d003      	beq.n	5c80 <fseek+0x84>
    5c78:	6842      	ldr	r2, [r0, #4]
    5c7a:	4293      	cmp	r3, r2
    5c7c:	bfb8      	it	lt
    5c7e:	4613      	movlt	r3, r2
    5c80:	4573      	cmp	r3, lr
    5c82:	bfac      	ite	ge
    5c84:	18ed      	addge	r5, r5, r3
    5c86:	4475      	addlt	r5, lr
    5c88:	2d00      	cmp	r5, #0
    5c8a:	db39      	blt.n	5d00 <fseek+0x104>
    5c8c:	f416 5f00 	tst.w	r6, #8192	; 0x2000
    5c90:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5c92:	d004      	beq.n	5c9e <fseek+0xa2>
    5c94:	6823      	ldr	r3, [r4, #0]
    5c96:	6891      	ldr	r1, [r2, #8]
    5c98:	4299      	cmp	r1, r3
    5c9a:	bf38      	it	cc
    5c9c:	6093      	strcc	r3, [r2, #8]
    5c9e:	69a1      	ldr	r1, [r4, #24]
    5ca0:	428d      	cmp	r5, r1
    5ca2:	db10      	blt.n	5cc6 <fseek+0xca>
    5ca4:	6890      	ldr	r0, [r2, #8]
    5ca6:	6823      	ldr	r3, [r4, #0]
    5ca8:	f8d4 e010 	ldr.w	lr, [r4, #16]
    5cac:	4283      	cmp	r3, r0
    5cae:	bf38      	it	cc
    5cb0:	4603      	movcc	r3, r0
    5cb2:	1858      	adds	r0, r3, r1
    5cb4:	ebce 0000 	rsb	r0, lr, r0
    5cb8:	4285      	cmp	r5, r0
    5cba:	dc04      	bgt.n	5cc6 <fseek+0xca>
    5cbc:	68d0      	ldr	r0, [r2, #12]
    5cbe:	eb01 0c00 	add.w	ip, r1, r0
    5cc2:	4565      	cmp	r5, ip
    5cc4:	db06      	blt.n	5cd4 <fseek+0xd8>
    5cc6:	2300      	movs	r3, #0
    5cc8:	60a3      	str	r3, [r4, #8]
    5cca:	6063      	str	r3, [r4, #4]
    5ccc:	f046 0620 	orr.w	r6, r6, #32
    5cd0:	6055      	str	r5, [r2, #4]
    5cd2:	e00f      	b.n	5cf4 <fseek+0xf8>
    5cd4:	1a6d      	subs	r5, r5, r1
    5cd6:	07b1      	lsls	r1, r6, #30
    5cd8:	bf44      	itt	mi
    5cda:	1a28      	submi	r0, r5, r0
    5cdc:	60a0      	strmi	r0, [r4, #8]
    5cde:	07f2      	lsls	r2, r6, #31
    5ce0:	bf44      	itt	mi
    5ce2:	ebc3 030e 	rsbmi	r3, r3, lr
    5ce6:	195b      	addmi	r3, r3, r5
    5ce8:	4475      	add	r5, lr
    5cea:	bf48      	it	mi
    5cec:	6063      	strmi	r3, [r4, #4]
    5cee:	6025      	str	r5, [r4, #0]
    5cf0:	f026 0620 	bic.w	r6, r6, #32
    5cf4:	f426 2603 	bic.w	r6, r6, #536576	; 0x83000
    5cf8:	f026 0640 	bic.w	r6, r6, #64	; 0x40
    5cfc:	60e6      	str	r6, [r4, #12]
    5cfe:	e000      	b.n	5d02 <fseek+0x106>
    5d00:	2702      	movs	r7, #2
    5d02:	4638      	mov	r0, r7
    5d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5d08:	00100003 	.word	0x00100003

00005d0c <ftell>:
    5d0c:	68c3      	ldr	r3, [r0, #12]
    5d0e:	079a      	lsls	r2, r3, #30
    5d10:	d105      	bne.n	5d1e <ftell+0x12>
    5d12:	4b10      	ldr	r3, [pc, #64]	; (5d54 <ftell+0x48>)
    5d14:	2221      	movs	r2, #33	; 0x21
    5d16:	601a      	str	r2, [r3, #0]
    5d18:	f04f 30ff 	mov.w	r0, #4294967295
    5d1c:	4770      	bx	lr
    5d1e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    5d22:	f003 0320 	and.w	r3, r3, #32
    5d26:	d00a      	beq.n	5d3e <ftell+0x32>
    5d28:	b113      	cbz	r3, 5d30 <ftell+0x24>
    5d2a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5d2c:	6858      	ldr	r0, [r3, #4]
    5d2e:	e004      	b.n	5d3a <ftell+0x2e>
    5d30:	6802      	ldr	r2, [r0, #0]
    5d32:	6983      	ldr	r3, [r0, #24]
    5d34:	6900      	ldr	r0, [r0, #16]
    5d36:	4413      	add	r3, r2
    5d38:	1a18      	subs	r0, r3, r0
    5d3a:	3801      	subs	r0, #1
    5d3c:	4770      	bx	lr
    5d3e:	b113      	cbz	r3, 5d46 <ftell+0x3a>
    5d40:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5d42:	6858      	ldr	r0, [r3, #4]
    5d44:	4770      	bx	lr
    5d46:	6802      	ldr	r2, [r0, #0]
    5d48:	6983      	ldr	r3, [r0, #24]
    5d4a:	6900      	ldr	r0, [r0, #16]
    5d4c:	4413      	add	r3, r2
    5d4e:	1a18      	subs	r0, r3, r0
    5d50:	4770      	bx	lr
    5d52:	bf00      	nop
    5d54:	10000c98 	.word	0x10000c98

00005d58 <remove>:
    5d58:	b510      	push	{r4, lr}
    5d5a:	4604      	mov	r4, r0
    5d5c:	f7ff fcd0 	bl	5700 <strlen>
    5d60:	4601      	mov	r1, r0
    5d62:	4620      	mov	r0, r4
    5d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5d68:	f000 bcb9 	b.w	66de <__sys_remove>

00005d6c <__check_heap_overflow>:
    5d6c:	4b04      	ldr	r3, [pc, #16]	; (5d80 <__check_heap_overflow+0x14>)
    5d6e:	b123      	cbz	r3, 5d7a <__check_heap_overflow+0xe>
    5d70:	4298      	cmp	r0, r3
    5d72:	bf34      	ite	cc
    5d74:	2000      	movcc	r0, #0
    5d76:	2001      	movcs	r0, #1
    5d78:	4770      	bx	lr
    5d7a:	4618      	mov	r0, r3
    5d7c:	4770      	bx	lr
    5d7e:	bf00      	nop
    5d80:	00000000 	.word	0x00000000

00005d84 <_do_fflush>:
    5d84:	68c2      	ldr	r2, [r0, #12]
    5d86:	b570      	push	{r4, r5, r6, lr}
    5d88:	f012 0303 	ands.w	r3, r2, #3
    5d8c:	4604      	mov	r4, r0
    5d8e:	d019      	beq.n	5dc4 <_do_fflush+0x40>
    5d90:	0693      	lsls	r3, r2, #26
    5d92:	d504      	bpl.n	5d9e <_do_fflush+0x1a>
    5d94:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5d96:	685d      	ldr	r5, [r3, #4]
    5d98:	f7ff fd32 	bl	5800 <_deferredlazyseek>
    5d9c:	e004      	b.n	5da8 <_do_fflush+0x24>
    5d9e:	6805      	ldr	r5, [r0, #0]
    5da0:	6983      	ldr	r3, [r0, #24]
    5da2:	442b      	add	r3, r5
    5da4:	6905      	ldr	r5, [r0, #16]
    5da6:	1b5d      	subs	r5, r3, r5
    5da8:	68e3      	ldr	r3, [r4, #12]
    5daa:	4620      	mov	r0, r4
    5dac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    5db0:	60e3      	str	r3, [r4, #12]
    5db2:	f7ff fe1d 	bl	59f0 <_fflush>
    5db6:	4606      	mov	r6, r0
    5db8:	4629      	mov	r1, r5
    5dba:	4620      	mov	r0, r4
    5dbc:	2200      	movs	r2, #0
    5dbe:	f7ff ff1d 	bl	5bfc <fseek>
    5dc2:	4633      	mov	r3, r6
    5dc4:	4618      	mov	r0, r3
    5dc6:	bd70      	pop	{r4, r5, r6, pc}

00005dc8 <__aeabi_uldivmod>:
    5dc8:	f05f 0c00 	movs.w	ip, #0

00005dcc <__bhs_ldivmod1>:
    5dcc:	b530      	push	{r4, r5, lr}
    5dce:	001c      	movs	r4, r3
    5dd0:	d122      	bne.n	5e18 <ldiv64>
    5dd2:	0012      	movs	r2, r2
    5dd4:	d06f      	beq.n	5eb6 <ldiv_divzero>
    5dd6:	4291      	cmp	r1, r2
    5dd8:	d306      	bcc.n	5de8 <ldiv32>
    5dda:	4605      	mov	r5, r0
    5ddc:	4608      	mov	r0, r1
    5dde:	2100      	movs	r1, #0
    5de0:	f000 f86f 	bl	5ec2 <udiv6432>
    5de4:	4604      	mov	r4, r0
    5de6:	4628      	mov	r0, r5

00005de8 <ldiv32>:
    5de8:	f000 f86b 	bl	5ec2 <udiv6432>
    5dec:	460a      	mov	r2, r1
    5dee:	4621      	mov	r1, r4

00005df0 <ldiv_return>:
    5df0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5df4:	f01c 4f40 	tst.w	ip, #3221225472	; 0xc0000000
    5df8:	bf08      	it	eq
    5dfa:	4770      	bxeq	lr
    5dfc:	d503      	bpl.n	5e06 <ldiv_sign>
    5dfe:	4249      	negs	r1, r1
    5e00:	4240      	negs	r0, r0
    5e02:	f161 0100 	sbc.w	r1, r1, #0

00005e06 <ldiv_sign>:
    5e06:	ea5f 0c8c 	movs.w	ip, ip, lsl #2
    5e0a:	bf38      	it	cc
    5e0c:	4770      	bxcc	lr
    5e0e:	425b      	negs	r3, r3
    5e10:	4252      	negs	r2, r2
    5e12:	f163 0300 	sbc.w	r3, r3, #0
    5e16:	4770      	bx	lr

00005e18 <ldiv64>:
    5e18:	d442      	bmi.n	5ea0 <ldiv_res01>
    5e1a:	0c1c      	lsrs	r4, r3, #16
    5e1c:	bf04      	itt	eq
    5e1e:	041b      	lsleq	r3, r3, #16
    5e20:	f10c 0c10 	addeq.w	ip, ip, #16
    5e24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    5e28:	bf04      	itt	eq
    5e2a:	021b      	lsleq	r3, r3, #8
    5e2c:	f10c 0c08 	addeq.w	ip, ip, #8
    5e30:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    5e34:	bf04      	itt	eq
    5e36:	011b      	lsleq	r3, r3, #4
    5e38:	f10c 0c04 	addeq.w	ip, ip, #4
    5e3c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    5e40:	bf04      	itt	eq
    5e42:	f10c 0c02 	addeq.w	ip, ip, #2
    5e46:	ea5f 0383 	movseq.w	r3, r3, lsl #2
    5e4a:	bf5c      	itt	pl
    5e4c:	f10c 0c01 	addpl.w	ip, ip, #1
    5e50:	005b      	lslpl	r3, r3, #1
    5e52:	f1cc 0e20 	rsb	lr, ip, #32
    5e56:	fa22 f40e 	lsr.w	r4, r2, lr
    5e5a:	4323      	orrs	r3, r4
    5e5c:	fa02 f20c 	lsl.w	r2, r2, ip
    5e60:	fa00 f50c 	lsl.w	r5, r0, ip
    5e64:	fa20 f00e 	lsr.w	r0, r0, lr
    5e68:	fa01 f40c 	lsl.w	r4, r1, ip
    5e6c:	4320      	orrs	r0, r4
    5e6e:	fa21 f10e 	lsr.w	r1, r1, lr
    5e72:	4614      	mov	r4, r2
    5e74:	461a      	mov	r2, r3
    5e76:	f000 f824 	bl	5ec2 <udiv6432>
    5e7a:	fba4 2300 	umull	r2, r3, r4, r0
    5e7e:	1aaa      	subs	r2, r5, r2
    5e80:	eb71 0303 	sbcs.w	r3, r1, r3
    5e84:	bf3c      	itt	cc
    5e86:	191b      	addcc	r3, r3, r4
    5e88:	3801      	subcc	r0, #1
    5e8a:	f1cc 0e20 	rsb	lr, ip, #32
    5e8e:	fa22 f20c 	lsr.w	r2, r2, ip
    5e92:	fa03 f40e 	lsl.w	r4, r3, lr
    5e96:	4322      	orrs	r2, r4
    5e98:	fa23 f30c 	lsr.w	r3, r3, ip
    5e9c:	2100      	movs	r1, #0
    5e9e:	e7a7      	b.n	5df0 <ldiv_return>

00005ea0 <ldiv_res01>:
    5ea0:	1a82      	subs	r2, r0, r2
    5ea2:	eb71 0303 	sbcs.w	r3, r1, r3
    5ea6:	bf3c      	itt	cc
    5ea8:	4602      	movcc	r2, r0
    5eaa:	460b      	movcc	r3, r1
    5eac:	f04f 0100 	mov.w	r1, #0
    5eb0:	f141 0000 	adc.w	r0, r1, #0
    5eb4:	e79c      	b.n	5df0 <ldiv_return>

00005eb6 <ldiv_divzero>:
    5eb6:	2000      	movs	r0, #0
    5eb8:	2100      	movs	r1, #0
    5eba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5ebe:	f000 b83d 	b.w	5f3c <__aeabi_idiv0>

00005ec2 <udiv6432>:
    5ec2:	2304      	movs	r3, #4
    5ec4:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    5ec8:	d209      	bcs.n	5ede <udiv6432_entry>

00005eca <udiv6432_loop1>:
    5eca:	0209      	lsls	r1, r1, #8
    5ecc:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
    5ed0:	0200      	lsls	r0, r0, #8
    5ed2:	3b01      	subs	r3, #1
    5ed4:	bf08      	it	eq
    5ed6:	4770      	bxeq	lr
    5ed8:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    5edc:	d3f5      	bcc.n	5eca <udiv6432_loop1>

00005ede <udiv6432_entry>:
    5ede:	1800      	adds	r0, r0, r0

00005ee0 <udiv6432_loop>:
    5ee0:	4149      	adcs	r1, r1
    5ee2:	bf34      	ite	cc
    5ee4:	4291      	cmpcc	r1, r2
    5ee6:	1a89      	subcs	r1, r1, r2
    5ee8:	4140      	adcs	r0, r0
    5eea:	4149      	adcs	r1, r1
    5eec:	bf34      	ite	cc
    5eee:	4291      	cmpcc	r1, r2
    5ef0:	1a89      	subcs	r1, r1, r2
    5ef2:	4140      	adcs	r0, r0
    5ef4:	4149      	adcs	r1, r1
    5ef6:	bf34      	ite	cc
    5ef8:	4291      	cmpcc	r1, r2
    5efa:	1a89      	subcs	r1, r1, r2
    5efc:	4140      	adcs	r0, r0
    5efe:	4149      	adcs	r1, r1
    5f00:	bf34      	ite	cc
    5f02:	4291      	cmpcc	r1, r2
    5f04:	1a89      	subcs	r1, r1, r2
    5f06:	4140      	adcs	r0, r0
    5f08:	4149      	adcs	r1, r1
    5f0a:	bf34      	ite	cc
    5f0c:	4291      	cmpcc	r1, r2
    5f0e:	1a89      	subcs	r1, r1, r2
    5f10:	4140      	adcs	r0, r0
    5f12:	4149      	adcs	r1, r1
    5f14:	bf34      	ite	cc
    5f16:	4291      	cmpcc	r1, r2
    5f18:	1a89      	subcs	r1, r1, r2
    5f1a:	4140      	adcs	r0, r0
    5f1c:	4149      	adcs	r1, r1
    5f1e:	bf34      	ite	cc
    5f20:	4291      	cmpcc	r1, r2
    5f22:	1a89      	subcs	r1, r1, r2
    5f24:	4140      	adcs	r0, r0
    5f26:	4149      	adcs	r1, r1
    5f28:	bf34      	ite	cc
    5f2a:	4291      	cmpcc	r1, r2
    5f2c:	1a89      	subcs	r1, r1, r2
    5f2e:	4140      	adcs	r0, r0
    5f30:	f1a3 0301 	sub.w	r3, r3, #1
    5f34:	f013 0f0f 	tst.w	r3, #15
    5f38:	d1d2      	bne.n	5ee0 <udiv6432_loop>
    5f3a:	4770      	bx	lr

00005f3c <__aeabi_idiv0>:
    5f3c:	4770      	bx	lr
	...

00005f40 <__aeabi_dmul>:
    5f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f44:	f3c1 540a 	ubfx	r4, r1, #20, #11
    5f48:	2c00      	cmp	r4, #0
    5f4a:	d054      	beq.n	5ff6 <__aeabi_dmul+0xb6>
    5f4c:	f240 76ff 	movw	r6, #2047	; 0x7ff
    5f50:	42b4      	cmp	r4, r6
    5f52:	d050      	beq.n	5ff6 <__aeabi_dmul+0xb6>
    5f54:	f3c3 550a 	ubfx	r5, r3, #20, #11
    5f58:	2d00      	cmp	r5, #0
    5f5a:	d04c      	beq.n	5ff6 <__aeabi_dmul+0xb6>
    5f5c:	42b5      	cmp	r5, r6
    5f5e:	d04a      	beq.n	5ff6 <__aeabi_dmul+0xb6>
    5f60:	f3c1 0e13 	ubfx	lr, r1, #0, #20
    5f64:	ea4f 2ac2 	mov.w	sl, r2, lsl #11
    5f68:	f44e 1e80 	orr.w	lr, lr, #1048576	; 0x100000
    5f6c:	fbae 670a 	umull	r6, r7, lr, sl
    5f70:	fbaa ab00 	umull	sl, fp, sl, r0
    5f74:	eb16 080b 	adds.w	r8, r6, fp
    5f78:	463e      	mov	r6, r7
    5f7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    5f7e:	ea42 22c3 	orr.w	r2, r2, r3, lsl #11
    5f82:	f04f 0900 	mov.w	r9, #0
    5f86:	f149 0900 	adc.w	r9, r9, #0
    5f8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    5f8e:	fbe0 8902 	umlal	r8, r9, r0, r2
    5f92:	2700      	movs	r7, #0
    5f94:	eb16 0609 	adds.w	r6, r6, r9
    5f98:	f147 0700 	adc.w	r7, r7, #0
    5f9c:	fbee 6702 	umlal	r6, r7, lr, r2
    5fa0:	404b      	eors	r3, r1
    5fa2:	f5b7 1f80 	cmp.w	r7, #1048576	; 0x100000
    5fa6:	442c      	add	r4, r5
    5fa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    5fac:	ea48 089a 	orr.w	r8, r8, sl, lsr #2
    5fb0:	d24b      	bcs.n	604a <__aeabi_dmul+0x10a>
    5fb2:	19b6      	adds	r6, r6, r6
    5fb4:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    5fb8:	417f      	adcs	r7, r7
    5fba:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
    5fbe:	4316      	orrs	r6, r2
    5fc0:	ea4f 0848 	mov.w	r8, r8, lsl #1
    5fc4:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    5fc8:	18b6      	adds	r6, r6, r2
    5fca:	f240 72fd 	movw	r2, #2045	; 0x7fd
    5fce:	f147 0700 	adc.w	r7, r7, #0
    5fd2:	f1b8 4f00 	cmp.w	r8, #2147483648	; 0x80000000
    5fd6:	4635      	mov	r5, r6
    5fd8:	bf08      	it	eq
    5fda:	f026 0501 	biceq.w	r5, r6, #1
    5fde:	4294      	cmp	r4, r2
    5fe0:	d936      	bls.n	6050 <__aeabi_dmul+0x110>
    5fe2:	2c00      	cmp	r4, #0
    5fe4:	bfa4      	itt	ge
    5fe6:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    5fea:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    5fee:	2000      	movs	r0, #0
    5ff0:	4619      	mov	r1, r3
    5ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ff6:	ea83 0201 	eor.w	r2, r3, r1
    5ffa:	0049      	lsls	r1, r1, #1
    5ffc:	f511 1f00 	cmn.w	r1, #2097152	; 0x200000
    6000:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
    6004:	d213      	bcs.n	602e <__aeabi_dmul+0xee>
    6006:	005b      	lsls	r3, r3, #1
    6008:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    600c:	d317      	bcc.n	603e <__aeabi_dmul+0xfe>
    600e:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    6012:	d80d      	bhi.n	6030 <__aeabi_dmul+0xf0>
    6014:	0d49      	lsrs	r1, r1, #21
    6016:	0549      	lsls	r1, r1, #21
    6018:	2000      	movs	r0, #0
    601a:	b169      	cbz	r1, 6038 <__aeabi_dmul+0xf8>
    601c:	0d5b      	lsrs	r3, r3, #21
    601e:	055b      	lsls	r3, r3, #21
    6020:	b153      	cbz	r3, 6038 <__aeabi_dmul+0xf8>
    6022:	f042 42ff 	orr.w	r2, r2, #2139095040	; 0x7f800000
    6026:	f442 01e0 	orr.w	r1, r2, #7340032	; 0x700000
    602a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    602e:	d00a      	beq.n	6046 <__aeabi_dmul+0x106>
    6030:	2000      	movs	r0, #0
    6032:	490a      	ldr	r1, [pc, #40]	; (605c <__aeabi_dmul+0x11c>)
    6034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6038:	4908      	ldr	r1, [pc, #32]	; (605c <__aeabi_dmul+0x11c>)
    603a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    603e:	2000      	movs	r0, #0
    6040:	4611      	mov	r1, r2
    6042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6046:	005b      	lsls	r3, r3, #1
    6048:	e7e1      	b.n	600e <__aeabi_dmul+0xce>
    604a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    604e:	e7b9      	b.n	5fc4 <__aeabi_dmul+0x84>
    6050:	433b      	orrs	r3, r7
    6052:	eb03 5104 	add.w	r1, r3, r4, lsl #20
    6056:	4628      	mov	r0, r5
    6058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    605c:	7ff80000 	.word	0x7ff80000

00006060 <__aeabi_ddiv>:
    6060:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
    6064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6068:	f1bc 0f00 	cmp.w	ip, #0
    606c:	d053      	beq.n	6116 <__aeabi_ddiv+0xb6>
    606e:	f240 74ff 	movw	r4, #2047	; 0x7ff
    6072:	45a4      	cmp	ip, r4
    6074:	d04f      	beq.n	6116 <__aeabi_ddiv+0xb6>
    6076:	f3c3 580a 	ubfx	r8, r3, #20, #11
    607a:	f1b8 0f00 	cmp.w	r8, #0
    607e:	d04a      	beq.n	6116 <__aeabi_ddiv+0xb6>
    6080:	45a0      	cmp	r8, r4
    6082:	d048      	beq.n	6116 <__aeabi_ddiv+0xb6>
    6084:	ea4f 5a50 	mov.w	sl, r0, lsr #21
    6088:	ea4f 5952 	mov.w	r9, r2, lsr #21
    608c:	02c4      	lsls	r4, r0, #11
    608e:	02d6      	lsls	r6, r2, #11
    6090:	ea4a 20c1 	orr.w	r0, sl, r1, lsl #11
    6094:	ea49 22c3 	orr.w	r2, r9, r3, lsl #11
    6098:	f040 4500 	orr.w	r5, r0, #2147483648	; 0x80000000
    609c:	f042 4700 	orr.w	r7, r2, #2147483648	; 0x80000000
    60a0:	42bd      	cmp	r5, r7
    60a2:	bf08      	it	eq
    60a4:	42b4      	cmpeq	r4, r6
    60a6:	ebc8 0c0c 	rsb	ip, r8, ip
    60aa:	ea83 0801 	eor.w	r8, r3, r1
    60ae:	d25d      	bcs.n	616c <__aeabi_ddiv+0x10c>
    60b0:	f20c 3cfd 	addw	ip, ip, #1021	; 0x3fd
    60b4:	0879      	lsrs	r1, r7, #1
    60b6:	ea4f 0036 	mov.w	r0, r6, rrx
    60ba:	2334      	movs	r3, #52	; 0x34
    60bc:	2200      	movs	r2, #0
    60be:	e000      	b.n	60c2 <__aeabi_ddiv+0x62>
    60c0:	3b01      	subs	r3, #1
    60c2:	428d      	cmp	r5, r1
    60c4:	bf08      	it	eq
    60c6:	4284      	cmpeq	r4, r0
    60c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    60cc:	d304      	bcc.n	60d8 <__aeabi_ddiv+0x78>
    60ce:	1a24      	subs	r4, r4, r0
    60d0:	eb65 0501 	sbc.w	r5, r5, r1
    60d4:	f042 0201 	orr.w	r2, r2, #1
    60d8:	1924      	adds	r4, r4, r4
    60da:	416d      	adcs	r5, r5
    60dc:	2b20      	cmp	r3, #32
    60de:	d062      	beq.n	61a6 <__aeabi_ddiv+0x146>
    60e0:	2b00      	cmp	r3, #0
    60e2:	d1ed      	bne.n	60c0 <__aeabi_ddiv+0x60>
    60e4:	428d      	cmp	r5, r1
    60e6:	bf08      	it	eq
    60e8:	4284      	cmpeq	r4, r0
    60ea:	d303      	bcc.n	60f4 <__aeabi_ddiv+0x94>
    60ec:	3201      	adds	r2, #1
    60ee:	bf08      	it	eq
    60f0:	f10e 0e01 	addeq.w	lr, lr, #1
    60f4:	f240 71fd 	movw	r1, #2045	; 0x7fd
    60f8:	458c      	cmp	ip, r1
    60fa:	f008 4300 	and.w	r3, r8, #2147483648	; 0x80000000
    60fe:	d93b      	bls.n	6178 <__aeabi_ddiv+0x118>
    6100:	f1bc 0f00 	cmp.w	ip, #0
    6104:	bfa4      	itt	ge
    6106:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    610a:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    610e:	2000      	movs	r0, #0
    6110:	4619      	mov	r1, r3
    6112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6116:	004a      	lsls	r2, r1, #1
    6118:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    611c:	d81c      	bhi.n	6158 <__aeabi_ddiv+0xf8>
    611e:	005c      	lsls	r4, r3, #1
    6120:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    6124:	d818      	bhi.n	6158 <__aeabi_ddiv+0xf8>
    6126:	ea43 0001 	orr.w	r0, r3, r1
    612a:	f3c0 500a 	ubfx	r0, r0, #20, #11
    612e:	0545      	lsls	r5, r0, #21
    6130:	b1b0      	cbz	r0, 6160 <__aeabi_ddiv+0x100>
    6132:	0d50      	lsrs	r0, r2, #21
    6134:	4059      	eors	r1, r3
    6136:	0540      	lsls	r0, r0, #21
    6138:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    613c:	b1a0      	cbz	r0, 6168 <__aeabi_ddiv+0x108>
    613e:	0d60      	lsrs	r0, r4, #21
    6140:	0540      	lsls	r0, r0, #21
    6142:	b348      	cbz	r0, 6198 <__aeabi_ddiv+0x138>
    6144:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    6148:	d11d      	bne.n	6186 <__aeabi_ddiv+0x126>
    614a:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    614e:	d003      	beq.n	6158 <__aeabi_ddiv+0xf8>
    6150:	2200      	movs	r2, #0
    6152:	4610      	mov	r0, r2
    6154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6158:	2000      	movs	r0, #0
    615a:	4914      	ldr	r1, [pc, #80]	; (61ac <__aeabi_ddiv+0x14c>)
    615c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6160:	4912      	ldr	r1, [pc, #72]	; (61ac <__aeabi_ddiv+0x14c>)
    6162:	4628      	mov	r0, r5
    6164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    616c:	086d      	lsrs	r5, r5, #1
    616e:	ea4f 0434 	mov.w	r4, r4, rrx
    6172:	f20c 3cfe 	addw	ip, ip, #1022	; 0x3fe
    6176:	e79d      	b.n	60b4 <__aeabi_ddiv+0x54>
    6178:	eb03 530c 	add.w	r3, r3, ip, lsl #20
    617c:	eb03 010e 	add.w	r1, r3, lr
    6180:	4610      	mov	r0, r2
    6182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6186:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    618a:	2200      	movs	r2, #0
    618c:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    6190:	4610      	mov	r0, r2
    6192:	4619      	mov	r1, r3
    6194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6198:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    619c:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    61a0:	4619      	mov	r1, r3
    61a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    61a6:	4696      	mov	lr, r2
    61a8:	e78a      	b.n	60c0 <__aeabi_ddiv+0x60>
    61aa:	bf00      	nop
    61ac:	7ff80000 	.word	0x7ff80000

000061b0 <__aeabi_dsub>:
    61b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    61b2:	ea93 0401 	eors.w	r4, r3, r1
    61b6:	460d      	mov	r5, r1
    61b8:	f100 80cc 	bmi.w	6354 <__aeabi_dsub+0x1a4>
    61bc:	4299      	cmp	r1, r3
    61be:	4606      	mov	r6, r0
    61c0:	d270      	bcs.n	62a4 <__aeabi_dsub+0xf4>
    61c2:	4056      	eors	r6, r2
    61c4:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    61c8:	4072      	eors	r2, r6
    61ca:	4056      	eors	r6, r2
    61cc:	404d      	eors	r5, r1
    61ce:	404b      	eors	r3, r1
    61d0:	f240 70ff 	movw	r0, #2047	; 0x7ff
    61d4:	0d2c      	lsrs	r4, r5, #20
    61d6:	f424 6100 	bic.w	r1, r4, #2048	; 0x800
    61da:	4281      	cmp	r1, r0
    61dc:	eba4 5713 	sub.w	r7, r4, r3, lsr #20
    61e0:	f000 8096 	beq.w	6310 <__aeabi_dsub+0x160>
    61e4:	428f      	cmp	r7, r1
    61e6:	f000 8099 	beq.w	631c <__aeabi_dsub+0x16c>
    61ea:	f3c5 0513 	ubfx	r5, r5, #0, #20
    61ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
    61f2:	2f1f      	cmp	r7, #31
    61f4:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
    61f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    61fc:	d857      	bhi.n	62ae <__aeabi_dsub+0xfe>
    61fe:	f1c7 0020 	rsb	r0, r7, #32
    6202:	fa03 fe00 	lsl.w	lr, r3, r0
    6206:	fa22 f107 	lsr.w	r1, r2, r7
    620a:	ea4e 0101 	orr.w	r1, lr, r1
    620e:	40fb      	lsrs	r3, r7
    6210:	1a71      	subs	r1, r6, r1
    6212:	1aed      	subs	r5, r5, r3
    6214:	428e      	cmp	r6, r1
    6216:	bf38      	it	cc
    6218:	f105 35ff 	addcc.w	r5, r5, #4294967295
    621c:	fa12 f300 	lsls.w	r3, r2, r0
    6220:	d006      	beq.n	6230 <__aeabi_dsub+0x80>
    6222:	3901      	subs	r1, #1
    6224:	1c4f      	adds	r7, r1, #1
    6226:	f1c3 0300 	rsb	r3, r3, #0
    622a:	bf08      	it	eq
    622c:	f105 35ff 	addeq.w	r5, r5, #4294967295
    6230:	f415 1fc0 	tst.w	r5, #1572864	; 0x180000
    6234:	d158      	bne.n	62e8 <__aeabi_dsub+0x138>
    6236:	0fdb      	lsrs	r3, r3, #31
    6238:	0fca      	lsrs	r2, r1, #31
    623a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    623e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    6242:	ea53 0502 	orrs.w	r5, r3, r2
    6246:	f000 809a 	beq.w	637e <__aeabi_dsub+0x1ce>
    624a:	0b51      	lsrs	r1, r2, #13
    624c:	f1a4 0502 	sub.w	r5, r4, #2
    6250:	d108      	bne.n	6264 <__aeabi_dsub+0xb4>
    6252:	0e19      	lsrs	r1, r3, #24
    6254:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
    6258:	0b51      	lsrs	r1, r2, #13
    625a:	f1a5 0508 	sub.w	r5, r5, #8
    625e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    6262:	d0f6      	beq.n	6252 <__aeabi_dsub+0xa2>
    6264:	0c51      	lsrs	r1, r2, #17
    6266:	d104      	bne.n	6272 <__aeabi_dsub+0xc2>
    6268:	0f19      	lsrs	r1, r3, #28
    626a:	3d04      	subs	r5, #4
    626c:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    6270:	011b      	lsls	r3, r3, #4
    6272:	0cd1      	lsrs	r1, r2, #19
    6274:	d104      	bne.n	6280 <__aeabi_dsub+0xd0>
    6276:	0f99      	lsrs	r1, r3, #30
    6278:	3d02      	subs	r5, #2
    627a:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
    627e:	009b      	lsls	r3, r3, #2
    6280:	0d11      	lsrs	r1, r2, #20
    6282:	d104      	bne.n	628e <__aeabi_dsub+0xde>
    6284:	0fd9      	lsrs	r1, r3, #31
    6286:	3d01      	subs	r5, #1
    6288:	ea41 0242 	orr.w	r2, r1, r2, lsl #1
    628c:	005b      	lsls	r3, r3, #1
    628e:	0ae4      	lsrs	r4, r4, #11
    6290:	ebb4 2fd5 	cmp.w	r4, r5, lsr #11
    6294:	f04f 0000 	mov.w	r0, #0
    6298:	bf06      	itte	eq
    629a:	eb02 5105 	addeq.w	r1, r2, r5, lsl #20
    629e:	4618      	moveq	r0, r3
    62a0:	07e1      	lslne	r1, r4, #31
    62a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62a4:	4290      	cmp	r0, r2
    62a6:	d893      	bhi.n	61d0 <__aeabi_dsub+0x20>
    62a8:	4299      	cmp	r1, r3
    62aa:	d191      	bne.n	61d0 <__aeabi_dsub+0x20>
    62ac:	e789      	b.n	61c2 <__aeabi_dsub+0x12>
    62ae:	2f35      	cmp	r7, #53	; 0x35
    62b0:	d826      	bhi.n	6300 <__aeabi_dsub+0x150>
    62b2:	f1a7 0020 	sub.w	r0, r7, #32
    62b6:	fa23 f100 	lsr.w	r1, r3, r0
    62ba:	1a71      	subs	r1, r6, r1
    62bc:	428e      	cmp	r6, r1
    62be:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    62c2:	fa22 f000 	lsr.w	r0, r2, r0
    62c6:	bf38      	it	cc
    62c8:	f105 35ff 	addcc.w	r5, r5, #4294967295
    62cc:	40bb      	lsls	r3, r7
    62ce:	0612      	lsls	r2, r2, #24
    62d0:	ea43 0300 	orr.w	r3, r3, r0
    62d4:	d048      	beq.n	6368 <__aeabi_dsub+0x1b8>
    62d6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    62da:	3901      	subs	r1, #1
    62dc:	1c4e      	adds	r6, r1, #1
    62de:	f1c3 0300 	rsb	r3, r3, #0
    62e2:	bf08      	it	eq
    62e4:	f105 35ff 	addeq.w	r5, r5, #4294967295
    62e8:	02e8      	lsls	r0, r5, #11
    62ea:	d42e      	bmi.n	634a <__aeabi_dsub+0x19a>
    62ec:	3c01      	subs	r4, #1
    62ee:	0562      	lsls	r2, r4, #21
    62f0:	d037      	beq.n	6362 <__aeabi_dsub+0x1b2>
    62f2:	0fde      	lsrs	r6, r3, #31
    62f4:	0fca      	lsrs	r2, r1, #31
    62f6:	ea42 0545 	orr.w	r5, r2, r5, lsl #1
    62fa:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
    62fe:	005b      	lsls	r3, r3, #1
    6300:	2b00      	cmp	r3, #0
    6302:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    6306:	db11      	blt.n	632c <__aeabi_dsub+0x17c>
    6308:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    630c:	4630      	mov	r0, r6
    630e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6310:	032b      	lsls	r3, r5, #12
    6312:	d117      	bne.n	6344 <__aeabi_dsub+0x194>
    6314:	b387      	cbz	r7, 6378 <__aeabi_dsub+0x1c8>
    6316:	4630      	mov	r0, r6
    6318:	4629      	mov	r1, r5
    631a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    631c:	f240 73fe 	movw	r3, #2046	; 0x7fe
    6320:	429f      	cmp	r7, r3
    6322:	d8f5      	bhi.n	6310 <__aeabi_dsub+0x160>
    6324:	b99f      	cbnz	r7, 634e <__aeabi_dsub+0x19e>
    6326:	4639      	mov	r1, r7
    6328:	4638      	mov	r0, r7
    632a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    632c:	3601      	adds	r6, #1
    632e:	bf08      	it	eq
    6330:	3501      	addeq	r5, #1
    6332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    6336:	bf08      	it	eq
    6338:	f026 0601 	biceq.w	r6, r6, #1
    633c:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    6340:	4630      	mov	r0, r6
    6342:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6344:	2000      	movs	r0, #0
    6346:	490f      	ldr	r1, [pc, #60]	; (6384 <__aeabi_dsub+0x1d4>)
    6348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    634a:	460e      	mov	r6, r1
    634c:	e7d8      	b.n	6300 <__aeabi_dsub+0x150>
    634e:	4629      	mov	r1, r5
    6350:	4630      	mov	r0, r6
    6352:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6354:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    6358:	462b      	mov	r3, r5
    635a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    635e:	f000 b813 	b.w	6388 <__aeabi_dadd>
    6362:	0521      	lsls	r1, r4, #20
    6364:	4610      	mov	r0, r2
    6366:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6368:	2b00      	cmp	r3, #0
    636a:	d1b6      	bne.n	62da <__aeabi_dsub+0x12a>
    636c:	02ea      	lsls	r2, r5, #11
    636e:	d5bd      	bpl.n	62ec <__aeabi_dsub+0x13c>
    6370:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    6374:	460e      	mov	r6, r1
    6376:	e7c7      	b.n	6308 <__aeabi_dsub+0x158>
    6378:	4902      	ldr	r1, [pc, #8]	; (6384 <__aeabi_dsub+0x1d4>)
    637a:	4638      	mov	r0, r7
    637c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    637e:	4629      	mov	r1, r5
    6380:	4628      	mov	r0, r5
    6382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6384:	7ff80000 	.word	0x7ff80000

00006388 <__aeabi_dadd>:
    6388:	b5f0      	push	{r4, r5, r6, r7, lr}
    638a:	ea93 0601 	eors.w	r6, r3, r1
    638e:	460c      	mov	r4, r1
    6390:	f100 8087 	bmi.w	64a2 <__aeabi_dadd+0x11a>
    6394:	4299      	cmp	r1, r3
    6396:	4605      	mov	r5, r0
    6398:	d339      	bcc.n	640e <__aeabi_dadd+0x86>
    639a:	f240 70ff 	movw	r0, #2047	; 0x7ff
    639e:	0d26      	lsrs	r6, r4, #20
    63a0:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    63a4:	4281      	cmp	r1, r0
    63a6:	d03f      	beq.n	6428 <__aeabi_dadd+0xa0>
    63a8:	eba6 5713 	sub.w	r7, r6, r3, lsr #20
    63ac:	428f      	cmp	r7, r1
    63ae:	d04c      	beq.n	644a <__aeabi_dadd+0xc2>
    63b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
    63b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    63b8:	2f1f      	cmp	r7, #31
    63ba:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    63be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    63c2:	d838      	bhi.n	6436 <__aeabi_dadd+0xae>
    63c4:	f1c7 0020 	rsb	r0, r7, #32
    63c8:	fa03 fe00 	lsl.w	lr, r3, r0
    63cc:	fa22 f107 	lsr.w	r1, r2, r7
    63d0:	40fb      	lsrs	r3, r7
    63d2:	ea4e 0101 	orr.w	r1, lr, r1
    63d6:	441c      	add	r4, r3
    63d8:	186d      	adds	r5, r5, r1
    63da:	bf28      	it	cs
    63dc:	3401      	addcs	r4, #1
    63de:	fa02 f300 	lsl.w	r3, r2, r0
    63e2:	02a2      	lsls	r2, r4, #10
    63e4:	d529      	bpl.n	643a <__aeabi_dadd+0xb2>
    63e6:	3501      	adds	r5, #1
    63e8:	bf08      	it	eq
    63ea:	3401      	addeq	r4, #1
    63ec:	b90b      	cbnz	r3, 63f2 <__aeabi_dadd+0x6a>
    63ee:	f025 0502 	bic.w	r5, r5, #2
    63f2:	0533      	lsls	r3, r6, #20
    63f4:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    63f8:	005a      	lsls	r2, r3, #1
    63fa:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    63fe:	f04f 0000 	mov.w	r0, #0
    6402:	d240      	bcs.n	6486 <__aeabi_dadd+0xfe>
    6404:	07e4      	lsls	r4, r4, #31
    6406:	4619      	mov	r1, r3
    6408:	ea44 0055 	orr.w	r0, r4, r5, lsr #1
    640c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    640e:	f240 70ff 	movw	r0, #2047	; 0x7ff
    6412:	4074      	eors	r4, r6
    6414:	4073      	eors	r3, r6
    6416:	0d26      	lsrs	r6, r4, #20
    6418:	4055      	eors	r5, r2
    641a:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    641e:	406a      	eors	r2, r5
    6420:	4281      	cmp	r1, r0
    6422:	ea85 0502 	eor.w	r5, r5, r2
    6426:	d1bf      	bne.n	63a8 <__aeabi_dadd+0x20>
    6428:	0323      	lsls	r3, r4, #12
    642a:	f04f 0000 	mov.w	r0, #0
    642e:	d136      	bne.n	649e <__aeabi_dadd+0x116>
    6430:	4621      	mov	r1, r4
    6432:	4628      	mov	r0, r5
    6434:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6436:	2f35      	cmp	r7, #53	; 0x35
    6438:	d911      	bls.n	645e <__aeabi_dadd+0xd6>
    643a:	2b00      	cmp	r3, #0
    643c:	f106 36ff 	add.w	r6, r6, #4294967295
    6440:	db24      	blt.n	648c <__aeabi_dadd+0x104>
    6442:	eb04 5106 	add.w	r1, r4, r6, lsl #20
    6446:	4628      	mov	r0, r5
    6448:	bdf0      	pop	{r4, r5, r6, r7, pc}
    644a:	f240 73fe 	movw	r3, #2046	; 0x7fe
    644e:	429f      	cmp	r7, r3
    6450:	d8ea      	bhi.n	6428 <__aeabi_dadd+0xa0>
    6452:	2f00      	cmp	r7, #0
    6454:	d1ec      	bne.n	6430 <__aeabi_dadd+0xa8>
    6456:	f004 4100 	and.w	r1, r4, #2147483648	; 0x80000000
    645a:	4638      	mov	r0, r7
    645c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    645e:	f1a7 0120 	sub.w	r1, r7, #32
    6462:	fa23 f001 	lsr.w	r0, r3, r1
    6466:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    646a:	40bb      	lsls	r3, r7
    646c:	fa22 f101 	lsr.w	r1, r2, r1
    6470:	182d      	adds	r5, r5, r0
    6472:	ea43 0301 	orr.w	r3, r3, r1
    6476:	d31b      	bcc.n	64b0 <__aeabi_dadd+0x128>
    6478:	0612      	lsls	r2, r2, #24
    647a:	f104 0401 	add.w	r4, r4, #1
    647e:	d0b0      	beq.n	63e2 <__aeabi_dadd+0x5a>
    6480:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    6484:	e7ad      	b.n	63e2 <__aeabi_dadd+0x5a>
    6486:	3601      	adds	r6, #1
    6488:	0531      	lsls	r1, r6, #20
    648a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    648c:	3501      	adds	r5, #1
    648e:	bf08      	it	eq
    6490:	3401      	addeq	r4, #1
    6492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    6496:	bf08      	it	eq
    6498:	f025 0501 	biceq.w	r5, r5, #1
    649c:	e7d1      	b.n	6442 <__aeabi_dadd+0xba>
    649e:	4906      	ldr	r1, [pc, #24]	; (64b8 <__aeabi_dadd+0x130>)
    64a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64a2:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    64a6:	462b      	mov	r3, r5
    64a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    64ac:	f7ff be80 	b.w	61b0 <__aeabi_dsub>
    64b0:	0612      	lsls	r2, r2, #24
    64b2:	d1e5      	bne.n	6480 <__aeabi_dadd+0xf8>
    64b4:	e7c1      	b.n	643a <__aeabi_dadd+0xb2>
    64b6:	bf00      	nop
    64b8:	7ff80000 	.word	0x7ff80000

000064bc <__aeabi_d2iz>:
    64bc:	02cb      	lsls	r3, r1, #11
    64be:	0d0a      	lsrs	r2, r1, #20
    64c0:	ea43 5050 	orr.w	r0, r3, r0, lsr #21
    64c4:	f5c2 6383 	rsb	r3, r2, #1048	; 0x418
    64c8:	3306      	adds	r3, #6
    64ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    64ce:	2bff      	cmp	r3, #255	; 0xff
    64d0:	fa20 f003 	lsr.w	r0, r0, r3
    64d4:	d90f      	bls.n	64f6 <__aeabi_d2iz+0x3a>
    64d6:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    64da:	d00d      	beq.n	64f8 <__aeabi_d2iz+0x3c>
    64dc:	f011 4080 	ands.w	r0, r1, #1073741824	; 0x40000000
    64e0:	d009      	beq.n	64f6 <__aeabi_d2iz+0x3a>
    64e2:	004b      	lsls	r3, r1, #1
    64e4:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    64e8:	d804      	bhi.n	64f4 <__aeabi_d2iz+0x38>
    64ea:	0fc8      	lsrs	r0, r1, #31
    64ec:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    64f0:	3801      	subs	r0, #1
    64f2:	4770      	bx	lr
    64f4:	2000      	movs	r0, #0
    64f6:	4770      	bx	lr
    64f8:	4240      	negs	r0, r0
    64fa:	4770      	bx	lr

000064fc <__bhs_ui2d>:
    64fc:	b1f0      	cbz	r0, 653c <__bhs_ui2d+0x40>
    64fe:	0c03      	lsrs	r3, r0, #16
    6500:	bf0c      	ite	eq
    6502:	0400      	lsleq	r0, r0, #16
    6504:	f101 7180 	addne.w	r1, r1, #16777216	; 0x1000000
    6508:	0e03      	lsrs	r3, r0, #24
    650a:	bf0c      	ite	eq
    650c:	0200      	lsleq	r0, r0, #8
    650e:	f501 0100 	addne.w	r1, r1, #8388608	; 0x800000
    6512:	0f03      	lsrs	r3, r0, #28
    6514:	bf0c      	ite	eq
    6516:	0100      	lsleq	r0, r0, #4
    6518:	f501 0180 	addne.w	r1, r1, #4194304	; 0x400000
    651c:	0f83      	lsrs	r3, r0, #30
    651e:	bf0c      	ite	eq
    6520:	0080      	lsleq	r0, r0, #2
    6522:	f501 1100 	addne.w	r1, r1, #2097152	; 0x200000
    6526:	2800      	cmp	r0, #0
    6528:	bfac      	ite	ge
    652a:	0040      	lslge	r0, r0, #1
    652c:	f501 1180 	addlt.w	r1, r1, #1048576	; 0x100000
    6530:	eb01 23e0 	add.w	r3, r1, r0, asr #11
    6534:	0542      	lsls	r2, r0, #21
    6536:	4610      	mov	r0, r2
    6538:	4619      	mov	r1, r3
    653a:	4770      	bx	lr
    653c:	4603      	mov	r3, r0
    653e:	4619      	mov	r1, r3
    6540:	4770      	bx	lr
    6542:	bf00      	nop

00006544 <__aeabi_i2d>:
    6544:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
    6548:	0fc3      	lsrs	r3, r0, #31
    654a:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
    654e:	18d0      	adds	r0, r2, r3
    6550:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6554:	f7ff bfd2 	b.w	64fc <__bhs_ui2d>

00006558 <__aeabi_dcmpeq>:
    6558:	b510      	push	{r4, lr}
    655a:	004c      	lsls	r4, r1, #1
    655c:	ea54 0e00 	orrs.w	lr, r4, r0
    6560:	d102      	bne.n	6568 <__aeabi_dcmpeq+0x10>
    6562:	ea52 0e43 	orrs.w	lr, r2, r3, lsl #1
    6566:	d00b      	beq.n	6580 <__aeabi_dcmpeq+0x28>
    6568:	4299      	cmp	r1, r3
    656a:	d001      	beq.n	6570 <__aeabi_dcmpeq+0x18>
    656c:	2000      	movs	r0, #0
    656e:	bd10      	pop	{r4, pc}
    6570:	4290      	cmp	r0, r2
    6572:	d1fb      	bne.n	656c <__aeabi_dcmpeq+0x14>
    6574:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    6578:	bf8c      	ite	hi
    657a:	2000      	movhi	r0, #0
    657c:	2001      	movls	r0, #1
    657e:	bd10      	pop	{r4, pc}
    6580:	2001      	movs	r0, #1
    6582:	bd10      	pop	{r4, pc}

00006584 <__aeabi_dcmplt>:
    6584:	b430      	push	{r4, r5}
    6586:	ea53 0401 	orrs.w	r4, r3, r1
    658a:	d409      	bmi.n	65a0 <__aeabi_dcmplt+0x1c>
    658c:	005c      	lsls	r4, r3, #1
    658e:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    6592:	d802      	bhi.n	659a <__aeabi_dcmplt+0x16>
    6594:	4299      	cmp	r1, r3
    6596:	d317      	bcc.n	65c8 <__aeabi_dcmplt+0x44>
    6598:	d019      	beq.n	65ce <__aeabi_dcmplt+0x4a>
    659a:	2000      	movs	r0, #0
    659c:	bc30      	pop	{r4, r5}
    659e:	4770      	bx	lr
    65a0:	004d      	lsls	r5, r1, #1
    65a2:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    65a6:	d8f8      	bhi.n	659a <__aeabi_dcmplt+0x16>
    65a8:	005c      	lsls	r4, r3, #1
    65aa:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    65ae:	d8f4      	bhi.n	659a <__aeabi_dcmplt+0x16>
    65b0:	4305      	orrs	r5, r0
    65b2:	d101      	bne.n	65b8 <__aeabi_dcmplt+0x34>
    65b4:	4314      	orrs	r4, r2
    65b6:	d010      	beq.n	65da <__aeabi_dcmplt+0x56>
    65b8:	4299      	cmp	r1, r3
    65ba:	d805      	bhi.n	65c8 <__aeabi_dcmplt+0x44>
    65bc:	d1ed      	bne.n	659a <__aeabi_dcmplt+0x16>
    65be:	4290      	cmp	r0, r2
    65c0:	bf94      	ite	ls
    65c2:	2000      	movls	r0, #0
    65c4:	2001      	movhi	r0, #1
    65c6:	e7e9      	b.n	659c <__aeabi_dcmplt+0x18>
    65c8:	2001      	movs	r0, #1
    65ca:	bc30      	pop	{r4, r5}
    65cc:	4770      	bx	lr
    65ce:	4290      	cmp	r0, r2
    65d0:	bf2c      	ite	cs
    65d2:	2000      	movcs	r0, #0
    65d4:	2001      	movcc	r0, #1
    65d6:	bc30      	pop	{r4, r5}
    65d8:	4770      	bx	lr
    65da:	4620      	mov	r0, r4
    65dc:	e7de      	b.n	659c <__aeabi_dcmplt+0x18>
    65de:	bf00      	nop

000065e0 <__aeabi_dcmple>:
    65e0:	b430      	push	{r4, r5}
    65e2:	ea53 0401 	orrs.w	r4, r3, r1
    65e6:	d409      	bmi.n	65fc <__aeabi_dcmple+0x1c>
    65e8:	005c      	lsls	r4, r3, #1
    65ea:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    65ee:	d802      	bhi.n	65f6 <__aeabi_dcmple+0x16>
    65f0:	4299      	cmp	r1, r3
    65f2:	d319      	bcc.n	6628 <__aeabi_dcmple+0x48>
    65f4:	d01b      	beq.n	662e <__aeabi_dcmple+0x4e>
    65f6:	2000      	movs	r0, #0
    65f8:	bc30      	pop	{r4, r5}
    65fa:	4770      	bx	lr
    65fc:	004c      	lsls	r4, r1, #1
    65fe:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    6602:	d8f8      	bhi.n	65f6 <__aeabi_dcmple+0x16>
    6604:	005d      	lsls	r5, r3, #1
    6606:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    660a:	d8f4      	bhi.n	65f6 <__aeabi_dcmple+0x16>
    660c:	4299      	cmp	r1, r3
    660e:	d80b      	bhi.n	6628 <__aeabi_dcmple+0x48>
    6610:	d008      	beq.n	6624 <__aeabi_dcmple+0x44>
    6612:	ea54 0300 	orrs.w	r3, r4, r0
    6616:	d1ee      	bne.n	65f6 <__aeabi_dcmple+0x16>
    6618:	ea55 0302 	orrs.w	r3, r5, r2
    661c:	bf0c      	ite	eq
    661e:	2001      	moveq	r0, #1
    6620:	2000      	movne	r0, #0
    6622:	e7e9      	b.n	65f8 <__aeabi_dcmple+0x18>
    6624:	4290      	cmp	r0, r2
    6626:	d3f4      	bcc.n	6612 <__aeabi_dcmple+0x32>
    6628:	bc30      	pop	{r4, r5}
    662a:	2001      	movs	r0, #1
    662c:	4770      	bx	lr
    662e:	4290      	cmp	r0, r2
    6630:	bf8c      	ite	hi
    6632:	2000      	movhi	r0, #0
    6634:	2001      	movls	r0, #1
    6636:	bc30      	pop	{r4, r5}
    6638:	4770      	bx	lr
    663a:	bf00      	nop

0000663c <__aeabi_dcmpge>:
    663c:	b430      	push	{r4, r5}
    663e:	ea53 0401 	orrs.w	r4, r3, r1
    6642:	ea4f 0441 	mov.w	r4, r1, lsl #1
    6646:	d408      	bmi.n	665a <__aeabi_dcmpge+0x1e>
    6648:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    664c:	d802      	bhi.n	6654 <__aeabi_dcmpge+0x18>
    664e:	4299      	cmp	r1, r3
    6650:	d818      	bhi.n	6684 <__aeabi_dcmpge+0x48>
    6652:	d01a      	beq.n	668a <__aeabi_dcmpge+0x4e>
    6654:	2000      	movs	r0, #0
    6656:	bc30      	pop	{r4, r5}
    6658:	4770      	bx	lr
    665a:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    665e:	d8f9      	bhi.n	6654 <__aeabi_dcmpge+0x18>
    6660:	005d      	lsls	r5, r3, #1
    6662:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    6666:	d8f5      	bhi.n	6654 <__aeabi_dcmpge+0x18>
    6668:	4299      	cmp	r1, r3
    666a:	d30b      	bcc.n	6684 <__aeabi_dcmpge+0x48>
    666c:	d008      	beq.n	6680 <__aeabi_dcmpge+0x44>
    666e:	ea54 0300 	orrs.w	r3, r4, r0
    6672:	d1ef      	bne.n	6654 <__aeabi_dcmpge+0x18>
    6674:	ea55 0302 	orrs.w	r3, r5, r2
    6678:	bf0c      	ite	eq
    667a:	2001      	moveq	r0, #1
    667c:	2000      	movne	r0, #0
    667e:	e7ea      	b.n	6656 <__aeabi_dcmpge+0x1a>
    6680:	4290      	cmp	r0, r2
    6682:	d8f4      	bhi.n	666e <__aeabi_dcmpge+0x32>
    6684:	bc30      	pop	{r4, r5}
    6686:	2001      	movs	r0, #1
    6688:	4770      	bx	lr
    668a:	4290      	cmp	r0, r2
    668c:	bf34      	ite	cc
    668e:	2000      	movcc	r0, #0
    6690:	2001      	movcs	r0, #1
    6692:	bc30      	pop	{r4, r5}
    6694:	4770      	bx	lr
    6696:	bf00      	nop

00006698 <__aeabi_lowlevel_memset>:
    6698:	4603      	mov	r3, r0
    669a:	f013 0f03 	tst.w	r3, #3
    669e:	d10e      	bne.n	66be <memset1a>
    66a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    66a4:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    66a8:	ea41 4101 	orr.w	r1, r1, r1, lsl #16

000066ac <__bhs_memset4>:
    66ac:	3a04      	subs	r2, #4

000066ae <memset4>:
    66ae:	bf24      	itt	cs
    66b0:	f843 1b04 	strcs.w	r1, [r3], #4
    66b4:	f1b2 0204 	subscs.w	r2, r2, #4
    66b8:	d2f9      	bcs.n	66ae <memset4>

000066ba <memset1>:
    66ba:	f102 0204 	add.w	r2, r2, #4

000066be <memset1a>:
    66be:	3a01      	subs	r2, #1
    66c0:	bf24      	itt	cs
    66c2:	f803 1b01 	strbcs.w	r1, [r3], #1
    66c6:	e7fa      	bcs.n	66be <memset1a>
    66c8:	4770      	bx	lr

000066ca <__sys_appexit>:
    66ca:	e7fe      	b.n	66ca <__sys_appexit>

000066cc <__sys_close>:
    66cc:	f04f 30ff 	mov.w	r0, #4294967295
    66d0:	4770      	bx	lr

000066d2 <__sys_flen>:
    66d2:	f04f 30ff 	mov.w	r0, #4294967295
    66d6:	4770      	bx	lr

000066d8 <__sys_istty>:
    66d8:	f04f 30ff 	mov.w	r0, #4294967295
    66dc:	4770      	bx	lr

000066de <__sys_remove>:
    66de:	f04f 30ff 	mov.w	r0, #4294967295
    66e2:	4770      	bx	lr

000066e4 <__sys_seek>:
    66e4:	f04f 30ff 	mov.w	r0, #4294967295
    66e8:	4770      	bx	lr

000066ea <__sys_tmpnam>:
    66ea:	f04f 30ff 	mov.w	r0, #4294967295
    66ee:	4770      	bx	lr

000066f0 <__sys_write>:
    66f0:	4610      	mov	r0, r2
    66f2:	4770      	bx	lr
    66f4:	2e383731 	.word	0x2e383731
    66f8:	332e3336 	.word	0x332e3336
    66fc:	31382e30 	.word	0x31382e30
    6700:	00000000 	.word	0x00000000
    6704:	65746e69 	.word	0x65746e69
    6708:	74656e72 	.word	0x74656e72
    670c:	00000000 	.word	0x00000000
    6710:	61646f76 	.word	0x61646f76
    6714:	656e6f66 	.word	0x656e6f66
    6718:	00000000 	.word	0x00000000
    671c:	656c694d 	.word	0x656c694d
    6720:	3a656761 	.word	0x3a656761
    6724:	0a642520 	.word	0x0a642520
    6728:	00000000 	.word	0x00000000
    672c:	5f726570 	.word	0x5f726570
    6730:	6f6e6769 	.word	0x6f6e6769
    6734:	7265706e 	.word	0x7265706e
    6738:	5f646f69 	.word	0x5f646f69
    673c:	3a6c6176 	.word	0x3a6c6176
    6740:	0a642520 	.word	0x0a642520
    6744:	00000000 	.word	0x00000000
    6748:	5f726570 	.word	0x5f726570
    674c:	6f6e6769 	.word	0x6f6e6769
    6750:	65706666 	.word	0x65706666
    6754:	646f6972 	.word	0x646f6972
    6758:	6c61765f 	.word	0x6c61765f
    675c:	6425203a 	.word	0x6425203a
    6760:	6570202c 	.word	0x6570202c
    6764:	67695f72 	.word	0x67695f72
    6768:	66666f6e 	.word	0x66666f6e
    676c:	69726570 	.word	0x69726570
    6770:	765f646f 	.word	0x765f646f
    6774:	6f286c61 	.word	0x6f286c61
    6778:	69676972 	.word	0x69676972
    677c:	296c616e 	.word	0x296c616e
    6780:	6425203a 	.word	0x6425203a
    6784:	0000000a 	.word	0x0000000a
    6788:	5f726570 	.word	0x5f726570
    678c:	6f6e6769 	.word	0x6f6e6769
    6790:	616f726e 	.word	0x616f726e
    6794:	676e696d 	.word	0x676e696d
    6798:	69726570 	.word	0x69726570
    679c:	765f646f 	.word	0x765f646f
    67a0:	203a6c61 	.word	0x203a6c61
    67a4:	000a6425 	.word	0x000a6425
    67a8:	5f726570 	.word	0x5f726570
    67ac:	6f6e6769 	.word	0x6f6e6769
    67b0:	6f726666 	.word	0x6f726666
    67b4:	6e696d61 	.word	0x6e696d61
    67b8:	72657067 	.word	0x72657067
    67bc:	5f646f69 	.word	0x5f646f69
    67c0:	3a6c6176 	.word	0x3a6c6176
    67c4:	0a642520 	.word	0x0a642520
    67c8:	00000000 	.word	0x00000000
    67cc:	5f726570 	.word	0x5f726570
    67d0:	70776f6c 	.word	0x70776f6c
    67d4:	6a5f776f 	.word	0x6a5f776f
    67d8:	5f747375 	.word	0x5f747375
    67dc:	656b6177 	.word	0x656b6177
    67e0:	6425203a 	.word	0x6425203a
    67e4:	0000000a 	.word	0x0000000a
    67e8:	5f726570 	.word	0x5f726570
    67ec:	70776f6c 	.word	0x70776f6c
    67f0:	635f776f 	.word	0x635f776f
    67f4:	65636e61 	.word	0x65636e61
    67f8:	25203a6c 	.word	0x25203a6c
    67fc:	00000a64 	.word	0x00000a64
    6800:	5f726570 	.word	0x5f726570
    6804:	70776f6c 	.word	0x70776f6c
    6808:	705f776f 	.word	0x705f776f
    680c:	6f697265 	.word	0x6f697265
    6810:	726f2864 	.word	0x726f2864
    6814:	6e696769 	.word	0x6e696769
    6818:	3a296c61 	.word	0x3a296c61
    681c:	0a642520 	.word	0x0a642520
    6820:	00000000 	.word	0x00000000
    6824:	5f726570 	.word	0x5f726570
    6828:	70776f6c 	.word	0x70776f6c
    682c:	705f776f 	.word	0x705f776f
    6830:	6f697265 	.word	0x6f697265
    6834:	25203a64 	.word	0x25203a64
    6838:	00000a64 	.word	0x00000a64
    683c:	5f726570 	.word	0x5f726570
    6840:	70776f6c 	.word	0x70776f6c
    6844:	6d5f776f 	.word	0x6d5f776f
    6848:	3a65646f 	.word	0x3a65646f
    684c:	0a642520 	.word	0x0a642520
    6850:	00000000 	.word	0x00000000
    6854:	5f726570 	.word	0x5f726570
    6858:	66666f63 	.word	0x66666f63
    685c:	635f6565 	.word	0x635f6565
    6860:	746e756f 	.word	0x746e756f
    6864:	203a7265 	.word	0x203a7265
    6868:	000a6425 	.word	0x000a6425
    686c:	3e2d2d2d 	.word	0x3e2d2d2d
    6870:	0d732520 	.word	0x0d732520
    6874:	0000000a 	.word	0x0000000a
    6878:	0a0d7325 	.word	0x0a0d7325
    687c:	00000000 	.word	0x00000000
    6880:	512b5441 	.word	0x512b5441
    6884:	3d445249 	.word	0x3d445249
    6888:	2c312c31 	.word	0x2c312c31
    688c:	31312c30 	.word	0x31312c30
    6890:	00003030 	.word	0x00003030
    6894:	65746e45 	.word	0x65746e45
    6898:	20646572 	.word	0x20646572
    689c:	63656843 	.word	0x63656843
    68a0:	4d53476b 	.word	0x4d53476b
    68a4:	66667542 	.word	0x66667542
    68a8:	00007265 	.word	0x00007265
    68ac:	512b5441 	.word	0x512b5441
    68b0:	3d445249 	.word	0x3d445249
    68b4:	2c312c31 	.word	0x2c312c31
    68b8:	30332c30 	.word	0x30332c30
    68bc:	00000030 	.word	0x00000030
    68c0:	54455323 	.word	0x54455323
    68c4:	0000003b 	.word	0x0000003b
    68c8:	7373654d 	.word	0x7373654d
    68cc:	20656761 	.word	0x20656761
    68d0:	6d6f7246 	.word	0x6d6f7246
    68d4:	72655320 	.word	0x72655320
    68d8:	20726576 	.word	0x20726576
    68dc:	0000203a 	.word	0x0000203a
    68e0:	65746e45 	.word	0x65746e45
    68e4:	20646572 	.word	0x20646572
    68e8:	64616572 	.word	0x64616572
    68ec:	736d7320 	.word	0x736d7320
    68f0:	0000002e 	.word	0x0000002e
    68f4:	00005441 	.word	0x00005441
    68f8:	432b5441 	.word	0x432b5441
    68fc:	3d52474d 	.word	0x3d52474d
    6900:	00000031 	.word	0x00000031
    6904:	432b5441 	.word	0x432b5441
    6908:	3d44474d 	.word	0x3d44474d
    690c:	00342c31 	.word	0x00342c31
    6910:	7373654d 	.word	0x7373654d
    6914:	20656761 	.word	0x20656761
    6918:	6d6f7246 	.word	0x6d6f7246
    691c:	534d5320 	.word	0x534d5320
    6920:	00203a20 	.word	0x00203a20
    6924:	65746e45 	.word	0x65746e45
    6928:	20646572 	.word	0x20646572
    692c:	5f4d5347 	.word	0x5f4d5347
    6930:	6e6e6f43 	.word	0x6e6e6f43
    6934:	54746365 	.word	0x54746365
    6938:	6972546f 	.word	0x6972546f
    693c:	6770556f 	.word	0x6770556f
    6940:	65646172 	.word	0x65646172
    6944:	76726553 	.word	0x76726553
    6948:	00007265 	.word	0x00007265
    694c:	00495441 	.word	0x00495441
    6950:	512b5441 	.word	0x512b5441
    6954:	43474649 	.word	0x43474649
    6958:	313d544e 	.word	0x313d544e
    695c:	00000000 	.word	0x00000000
    6960:	512b5441 	.word	0x512b5441
    6964:	47534349 	.word	0x47534349
    6968:	2c313d50 	.word	0x2c313d50
    696c:	22732522 	.word	0x22732522
    6970:	7325222c 	.word	0x7325222c
    6974:	25222c22 	.word	0x25222c22
    6978:	00002273 	.word	0x00002273
    697c:	512b5441 	.word	0x512b5441
    6980:	58554d49 	.word	0x58554d49
    6984:	0000303d 	.word	0x0000303d
    6988:	512b5441 	.word	0x512b5441
    698c:	54414256 	.word	0x54414256
    6990:	2c303d54 	.word	0x2c303d54
    6994:	30303533 	.word	0x30303533
    6998:	0000302c 	.word	0x0000302c
    699c:	512b5441 	.word	0x512b5441
    69a0:	54414256 	.word	0x54414256
    69a4:	2c313d54 	.word	0x2c313d54
    69a8:	30303333 	.word	0x30303333
    69ac:	0000302c 	.word	0x0000302c
    69b0:	512b5441 	.word	0x512b5441
    69b4:	4f485349 	.word	0x4f485349
    69b8:	3d415257 	.word	0x3d415257
    69bc:	00000031 	.word	0x00000031
    69c0:	512b5441 	.word	0x512b5441
    69c4:	4f485349 	.word	0x4f485349
    69c8:	3d545057 	.word	0x3d545057
    69cc:	00000031 	.word	0x00000031
    69d0:	512b5441 	.word	0x512b5441
    69d4:	49444e49 	.word	0x49444e49
    69d8:	0000303d 	.word	0x0000303d
    69dc:	512b5441 	.word	0x512b5441
    69e0:	41454849 	.word	0x41454849
    69e4:	00313d44 	.word	0x00313d44
    69e8:	512b5441 	.word	0x512b5441
    69ec:	444f4d49 	.word	0x444f4d49
    69f0:	00303d45 	.word	0x00303d45
    69f4:	512b5441 	.word	0x512b5441
    69f8:	534e4449 	.word	0x534e4449
    69fc:	313d5049 	.word	0x313d5049
    6a00:	00000000 	.word	0x00000000
    6a04:	512b5441 	.word	0x512b5441
    6a08:	534e4449 	.word	0x534e4449
    6a0c:	303d5049 	.word	0x303d5049
    6a10:	00000000 	.word	0x00000000
    6a14:	512b5441 	.word	0x512b5441
    6a18:	4c435047 	.word	0x4c435047
    6a1c:	3d535341 	.word	0x3d535341
    6a20:	00003231 	.word	0x00003231
    6a24:	342e3634 	.word	0x342e3634
    6a28:	3030312e 	.word	0x3030312e
    6a2c:	3836312e 	.word	0x3836312e
    6a30:	00000000 	.word	0x00000000
    6a34:	37303035 	.word	0x37303035
    6a38:	00000000 	.word	0x00000000
    6a3c:	512b5441 	.word	0x512b5441
    6a40:	45504f49 	.word	0x45504f49
    6a44:	54223d4e 	.word	0x54223d4e
    6a48:	2c225043 	.word	0x2c225043
    6a4c:	22732522 	.word	0x22732522
    6a50:	0d73252c 	.word	0x0d73252c
    6a54:	0000000a 	.word	0x0000000a
    6a58:	4c494146 	.word	0x4c494146
    6a5c:	00000000 	.word	0x00000000
    6a60:	4e4e4f43 	.word	0x4e4e4f43
    6a64:	20544345 	.word	0x20544345
    6a68:	00004b4f 	.word	0x00004b4f
    6a6c:	45524c41 	.word	0x45524c41
    6a70:	20594441 	.word	0x20594441
    6a74:	4e4e4f43 	.word	0x4e4e4f43
    6a78:	00544345 	.word	0x00544345
    6a7c:	6e6e6f43 	.word	0x6e6e6f43
    6a80:	65746365 	.word	0x65746365
    6a84:	6f742064 	.word	0x6f742064
    6a88:	65687420 	.word	0x65687420
    6a8c:	72657320 	.word	0x72657320
    6a90:	2e726576 	.word	0x2e726576
    6a94:	00000000 	.word	0x00000000
    6a98:	504f4951 	.word	0x504f4951
    6a9c:	66204e45 	.word	0x66204e45
    6aa0:	656c6961 	.word	0x656c6961
    6aa4:	00002e64 	.word	0x00002e64
    6aa8:	64726148 	.word	0x64726148
    6aac:	73657220 	.word	0x73657220
    6ab0:	69747465 	.word	0x69747465
    6ab4:	6d20676e 	.word	0x6d20676e
    6ab8:	6c75646f 	.word	0x6c75646f
    6abc:	00002e65 	.word	0x00002e65
    6ac0:	6e6e6f63 	.word	0x6e6e6f63
    6ac4:	69746365 	.word	0x69746365
    6ac8:	61466e6f 	.word	0x61466e6f
    6acc:	6f436c69 	.word	0x6f436c69
    6ad0:	20746e75 	.word	0x20746e75
    6ad4:	3034203e 	.word	0x3034203e
    6ad8:	73657220 	.word	0x73657220
    6adc:	74726174 	.word	0x74726174
    6ae0:	20676e69 	.word	0x20676e69
    6ae4:	75646f6d 	.word	0x75646f6d
    6ae8:	002e656c 	.word	0x002e656c
    6aec:	65746e45 	.word	0x65746e45
    6af0:	20646572 	.word	0x20646572
    6af4:	6e6e6f43 	.word	0x6e6e6f43
    6af8:	6f746365 	.word	0x6f746365
    6afc:	6f697254 	.word	0x6f697254
    6b00:	00000000 	.word	0x00000000
    6b04:	512b5441 	.word	0x512b5441
    6b08:	49444e49 	.word	0x49444e49
    6b0c:	0000313d 	.word	0x0000313d
    6b10:	512b5441 	.word	0x512b5441
    6b14:	4c435047 	.word	0x4c435047
    6b18:	3d535341 	.word	0x3d535341
    6b1c:	00000038 	.word	0x00000038
    6b20:	512b5441 	.word	0x512b5441
    6b24:	45504f49 	.word	0x45504f49
    6b28:	54223d4e 	.word	0x54223d4e
    6b2c:	2c225043 	.word	0x2c225043
    6b30:	22732522 	.word	0x22732522
    6b34:	0d64252c 	.word	0x0d64252c
    6b38:	00000000 	.word	0x00000000
    6b3c:	65746e45 	.word	0x65746e45
    6b40:	20646572 	.word	0x20646572
    6b44:	5f4d5347 	.word	0x5f4d5347
    6b48:	646e6553 	.word	0x646e6553
    6b4c:	65536f54 	.word	0x65536f54
    6b50:	72657672 	.word	0x72657672
    6b54:	00504354 	.word	0x00504354
    6b58:	512b5441 	.word	0x512b5441
    6b5c:	4e455349 	.word	0x4e455349
    6b60:	64253d44 	.word	0x64253d44
    6b64:	00000000 	.word	0x00000000
    6b68:	646e6553 	.word	0x646e6553
    6b6c:	204b4f20 	.word	0x204b4f20
    6b70:	6c696877 	.word	0x6c696877
    6b74:	2e676e69 	.word	0x2e676e69
    6b78:	0000002e 	.word	0x0000002e
    6b7c:	444e4553 	.word	0x444e4553
    6b80:	004b4f20 	.word	0x004b4f20
    6b84:	61746144 	.word	0x61746144
    6b88:	6e657320 	.word	0x6e657320
    6b8c:	00002e74 	.word	0x00002e74
    6b90:	4f525245 	.word	0x4f525245
    6b94:	00000052 	.word	0x00000052
    6b98:	61746144 	.word	0x61746144
    6b9c:	69616620 	.word	0x69616620
    6ba0:	00002e6c 	.word	0x00002e6c
    6ba4:	3b54535b 	.word	0x3b54535b
    6ba8:	30377325 	.word	0x30377325
    6bac:	3232723b 	.word	0x3232723b
    6bb0:	503b3634 	.word	0x503b3634
    6bb4:	322d3536 	.word	0x322d3536
    6bb8:	30373530 	.word	0x30373530
    6bbc:	2d343032 	.word	0x2d343032
    6bc0:	73253b31 	.word	0x73253b31
    6bc4:	5d73253b 	.word	0x5d73253b
    6bc8:	00000000 	.word	0x00000000
    6bcc:	65746e45 	.word	0x65746e45
    6bd0:	20646572 	.word	0x20646572
    6bd4:	5f4d5347 	.word	0x5f4d5347
    6bd8:	5f504354 	.word	0x5f504354
    6bdc:	646e6553 	.word	0x646e6553
    6be0:	00000000 	.word	0x00000000
    6be4:	512b5441 	.word	0x512b5441
    6be8:	44574f50 	.word	0x44574f50
    6bec:	0000303d 	.word	0x0000303d
    6bf0:	00004b4f 	.word	0x00004b4f
    6bf4:	432b5441 	.word	0x432b5441
    6bf8:	3d45454d 	.word	0x3d45454d
    6bfc:	00000032 	.word	0x00000032
    6c00:	432b5441 	.word	0x432b5441
    6c04:	3d46474d 	.word	0x3d46474d
    6c08:	00000031 	.word	0x00000031
    6c0c:	432b5441 	.word	0x432b5441
    6c10:	3d494d4e 	.word	0x3d494d4e
    6c14:	2c312c32 	.word	0x2c312c32
    6c18:	2c302c30 	.word	0x2c302c30
    6c1c:	00000030 	.word	0x00000030
    6c20:	206d6953 	.word	0x206d6953
    6c24:	64726163 	.word	0x64726163
    6c28:	61657220 	.word	0x61657220
    6c2c:	2e2e7964 	.word	0x2e2e7964
    6c30:	0000000d 	.word	0x0000000d
    6c34:	206d6953 	.word	0x206d6953
    6c38:	20746f6e 	.word	0x20746f6e
    6c3c:	64616572 	.word	0x64616572
    6c40:	000d2179 	.word	0x000d2179
    6c44:	432b5441 	.word	0x432b5441
    6c48:	00005153 	.word	0x00005153
    6c4c:	432b5441 	.word	0x432b5441
    6c50:	3f474552 	.word	0x3f474552
    6c54:	00000000 	.word	0x00000000
    6c58:	4552432b 	.word	0x4552432b
    6c5c:	00000047 	.word	0x00000047
    6c60:	0000352c 	.word	0x0000352c
    6c64:	0000312c 	.word	0x0000312c
    6c68:	002c352c 	.word	0x002c352c
    6c6c:	65746e45 	.word	0x65746e45
    6c70:	20646572 	.word	0x20646572
    6c74:	63656863 	.word	0x63656863
    6c78:	6973206b 	.word	0x6973206b
    6c7c:	6163206d 	.word	0x6163206d
    6c80:	002e6472 	.word	0x002e6472
    6c84:	432b5441 	.word	0x432b5441
    6c88:	3f4e4950 	.word	0x3f4e4950
    6c8c:	00000000 	.word	0x00000000
    6c90:	44414552 	.word	0x44414552
    6c94:	00000059 	.word	0x00000059
    6c98:	472b5441 	.word	0x472b5441
    6c9c:	00004e53 	.word	0x00004e53
    6ca0:	49454d49 	.word	0x49454d49
    6ca4:	00203a20 	.word	0x00203a20
    6ca8:	432b5441 	.word	0x432b5441
    6cac:	00494d49 	.word	0x00494d49
    6cb0:	49534d49 	.word	0x49534d49
    6cb4:	00203a20 	.word	0x00203a20
    6cb8:	31455441 	.word	0x31455441
    6cbc:	00000000 	.word	0x00000000
    6cc0:	4f484345 	.word	0x4f484345
    6cc4:	004e4f20 	.word	0x004e4f20
    6cc8:	492b5441 	.word	0x492b5441
    6ccc:	313d5250 	.word	0x313d5250
    6cd0:	30323531 	.word	0x30323531
    6cd4:	00000030 	.word	0x00000030
    6cd8:	74746553 	.word	0x74746553
    6cdc:	20676e69 	.word	0x20676e69
    6ce0:	20535047 	.word	0x20535047
    6ce4:	64756162 	.word	0x64756162
    6ce8:	74617220 	.word	0x74617220
    6cec:	00002065 	.word	0x00002065
    6cf0:	30455441 	.word	0x30455441
    6cf4:	00000000 	.word	0x00000000
    6cf8:	4f484345 	.word	0x4f484345
    6cfc:	46464f20 	.word	0x46464f20
    6d00:	00000000 	.word	0x00000000
    6d04:	512b5441 	.word	0x512b5441
    6d08:	4f4c4349 	.word	0x4f4c4349
    6d0c:	00004553 	.word	0x00004553
    6d10:	534f4c43 	.word	0x534f4c43
    6d14:	43542045 	.word	0x43542045
    6d18:	6f632050 	.word	0x6f632050
    6d1c:	63656e6e 	.word	0x63656e6e
    6d20:	6e6f6974 	.word	0x6e6f6974
    6d24:	00000020 	.word	0x00000020
    6d28:	65746e45 	.word	0x65746e45
    6d2c:	20646572 	.word	0x20646572
    6d30:	656e6547 	.word	0x656e6547
    6d34:	65746172 	.word	0x65746172
    6d38:	73654d54 	.word	0x73654d54
    6d3c:	65676173 	.word	0x65676173
    6d40:	00002928 	.word	0x00002928
    6d44:	6c727473 	.word	0x6c727473
    6d48:	6c286e65 	.word	0x6c286e65
    6d4c:	5f747361 	.word	0x5f747361
    6d50:	696c6176 	.word	0x696c6176
    6d54:	70675f64 	.word	0x70675f64
    6d58:	29636d72 	.word	0x29636d72
    6d5c:	25203a20 	.word	0x25203a20
    6d60:	00000d64 	.word	0x00000d64
    6d64:	7325545b 	.word	0x7325545b
    6d68:	474f4e2d 	.word	0x474f4e2d
    6d6c:	00005350 	.word	0x00005350
    6d70:	20535047 	.word	0x20535047
    6d74:	696c6156 	.word	0x696c6156
    6d78:	203a2064 	.word	0x203a2064
    6d7c:	6c727473 	.word	0x6c727473
    6d80:	6c286e65 	.word	0x6c286e65
    6d84:	5f747361 	.word	0x5f747361
    6d88:	696c6176 	.word	0x696c6176
    6d8c:	70675f64 	.word	0x70675f64
    6d90:	29636d72 	.word	0x29636d72
    6d94:	25203a20 	.word	0x25203a20
    6d98:	6c202c64 	.word	0x6c202c64
    6d9c:	5f747361 	.word	0x5f747361
    6da0:	696c6176 	.word	0x696c6176
    6da4:	70675f64 	.word	0x70675f64
    6da8:	3a636d72 	.word	0x3a636d72
    6dac:	25203a20 	.word	0x25203a20
    6db0:	00000d73 	.word	0x00000d73
    6db4:	0000002c 	.word	0x0000002c
    6db8:	00005825 	.word	0x00005825
    6dbc:	65657053 	.word	0x65657053
    6dc0:	54532064 	.word	0x54532064
    6dc4:	203a2052 	.word	0x203a2052
    6dc8:	00000000 	.word	0x00000000
    6dcc:	20726944 	.word	0x20726944
    6dd0:	20525453 	.word	0x20525453
    6dd4:	0000203a 	.word	0x0000203a
    6dd8:	00006425 	.word	0x00006425
    6ddc:	0000004e 	.word	0x0000004e
    6de0:	00000057 	.word	0x00000057
    6de4:	00000053 	.word	0x00000053
    6de8:	00000045 	.word	0x00000045
    6dec:	454d5f54 	.word	0x454d5f54
    6df0:	47415353 	.word	0x47415353
    6df4:	00003a45 	.word	0x00003a45
    6df8:	7325545b 	.word	0x7325545b
    6dfc:	73257325 	.word	0x73257325
    6e00:	73257325 	.word	0x73257325
    6e04:	73257325 	.word	0x73257325
    6e08:	64256425 	.word	0x64256425
    6e0c:	73257325 	.word	0x73257325
    6e10:	00000000 	.word	0x00000000
    6e14:	302d7325 	.word	0x302d7325
    6e18:	253a3032 	.word	0x253a3032
    6e1c:	00000064 	.word	0x00000064
    6e20:	313b7325 	.word	0x313b7325
    6e24:	253a3430 	.word	0x253a3430
    6e28:	00000058 	.word	0x00000058
    6e2c:	253b7325 	.word	0x253b7325
    6e30:	00000073 	.word	0x00000073
    6e34:	303b7325 	.word	0x303b7325
    6e38:	253a3232 	.word	0x253a3232
    6e3c:	00000073 	.word	0x00000073
    6e40:	313b7325 	.word	0x313b7325
    6e44:	253a3230 	.word	0x253a3230
    6e48:	00000073 	.word	0x00000073
    6e4c:	313b7325 	.word	0x313b7325
    6e50:	253a3530 	.word	0x253a3530
    6e54:	00000064 	.word	0x00000064
    6e58:	303b7325 	.word	0x303b7325
    6e5c:	253a3332 	.word	0x253a3332
    6e60:	00005d64 	.word	0x00005d64
    6e64:	65746e45 	.word	0x65746e45
    6e68:	20646572 	.word	0x20646572
    6e6c:	6e616843 	.word	0x6e616843
    6e70:	43206567 	.word	0x43206567
    6e74:	69666e6f 	.word	0x69666e6f
    6e78:	61727567 	.word	0x61727567
    6e7c:	6e6f6974 	.word	0x6e6f6974
    6e80:	00000000 	.word	0x00000000
    6e84:	54455323 	.word	0x54455323
    6e88:	0000003b 	.word	0x0000003b
    6e8c:	61726150 	.word	0x61726150
    6e90:	3a20316d 	.word	0x3a20316d
    6e94:	2c732520 	.word	0x2c732520
    6e98:	72615020 	.word	0x72615020
    6e9c:	20326d61 	.word	0x20326d61
    6ea0:	7325203a 	.word	0x7325203a
    6ea4:	6150202c 	.word	0x6150202c
    6ea8:	336d6172 	.word	0x336d6172
    6eac:	25203a20 	.word	0x25203a20
    6eb0:	50202c73 	.word	0x50202c73
    6eb4:	6d617261 	.word	0x6d617261
    6eb8:	203a2034 	.word	0x203a2034
    6ebc:	202c7325 	.word	0x202c7325
    6ec0:	61726150 	.word	0x61726150
    6ec4:	3a20356d 	.word	0x3a20356d
    6ec8:	0d732520 	.word	0x0d732520
    6ecc:	00000000 	.word	0x00000000
    6ed0:	00000031 	.word	0x00000031
    6ed4:	00003130 	.word	0x00003130
    6ed8:	502d5049 	.word	0x502d5049
    6edc:	2074726f 	.word	0x2074726f
    6ee0:	75716552 	.word	0x75716552
    6ee4:	2c747365 	.word	0x2c747365
    6ee8:	20504920 	.word	0x20504920
    6eec:	7325203a 	.word	0x7325203a
    6ef0:	6f50202c 	.word	0x6f50202c
    6ef4:	3a207472 	.word	0x3a207472
    6ef8:	0d732520 	.word	0x0d732520
    6efc:	00000000 	.word	0x00000000
    6f00:	00003231 	.word	0x00003231
    6f04:	65736552 	.word	0x65736552
    6f08:	65722074 	.word	0x65722074
    6f0c:	73657571 	.word	0x73657571
    6f10:	65722074 	.word	0x65722074
    6f14:	76696563 	.word	0x76696563
    6f18:	202c6465 	.word	0x202c6465
    6f1c:	65736572 	.word	0x65736572
    6f20:	00002e74 	.word	0x00002e74
    6f24:	00003532 	.word	0x00003532
    6f28:	204e5041 	.word	0x204e5041
    6f2c:	75716552 	.word	0x75716552
    6f30:	2c747365 	.word	0x2c747365
    6f34:	4e504120 	.word	0x4e504120
    6f38:	25203a20 	.word	0x25203a20
    6f3c:	55202c73 	.word	0x55202c73
    6f40:	20524553 	.word	0x20524553
    6f44:	7325203a 	.word	0x7325203a
    6f48:	4150202c 	.word	0x4150202c
    6f4c:	3a205353 	.word	0x3a205353
    6f50:	0d732520 	.word	0x0d732520
    6f54:	00000000 	.word	0x00000000
    6f58:	00000034 	.word	0x00000034
    6f5c:	00003430 	.word	0x00003430
    6f60:	00000030 	.word	0x00000030
    6f64:	61647055 	.word	0x61647055
    6f68:	50206574 	.word	0x50206574
    6f6c:	6f697265 	.word	0x6f697265
    6f70:	68432064 	.word	0x68432064
    6f74:	65676e61 	.word	0x65676e61
    6f78:	71655220 	.word	0x71655220
    6f7c:	74736575 	.word	0x74736575
    6f80:	4e4f202c 	.word	0x4e4f202c
    6f84:	25203a20 	.word	0x25203a20
    6f88:	4f202c73 	.word	0x4f202c73
    6f8c:	3a204646 	.word	0x3a204646
    6f90:	0d732520 	.word	0x0d732520
    6f94:	00000000 	.word	0x00000000
    6f98:	61647055 	.word	0x61647055
    6f9c:	50206574 	.word	0x50206574
    6fa0:	6f697265 	.word	0x6f697265
    6fa4:	6f522864 	.word	0x6f522864
    6fa8:	6e696d61 	.word	0x6e696d61
    6fac:	43202967 	.word	0x43202967
    6fb0:	676e6168 	.word	0x676e6168
    6fb4:	65522065 	.word	0x65522065
    6fb8:	73657571 	.word	0x73657571
    6fbc:	4f202c74 	.word	0x4f202c74
    6fc0:	203a204e 	.word	0x203a204e
    6fc4:	202c7325 	.word	0x202c7325
    6fc8:	2046464f 	.word	0x2046464f
    6fcc:	7325203a 	.word	0x7325203a
    6fd0:	0000000d 	.word	0x0000000d
    6fd4:	00003131 	.word	0x00003131
    6fd8:	6e616843 	.word	0x6e616843
    6fdc:	4d206567 	.word	0x4d206567
    6fe0:	61656c69 	.word	0x61656c69
    6fe4:	002e6567 	.word	0x002e6567
    6fe8:	00003233 	.word	0x00003233
    6fec:	20776f4c 	.word	0x20776f4c
    6ff0:	65776f70 	.word	0x65776f70
    6ff4:	6f6d2072 	.word	0x6f6d2072
    6ff8:	002e6564 	.word	0x002e6564
    6ffc:	00003333 	.word	0x00003333
    7000:	20776f4c 	.word	0x20776f4c
    7004:	65776f70 	.word	0x65776f70
    7008:	61772072 	.word	0x61772072
    700c:	7520656b 	.word	0x7520656b
    7010:	65702070 	.word	0x65702070
    7014:	646f6972 	.word	0x646f6972
    7018:	0000002e 	.word	0x0000002e
    701c:	00003433 	.word	0x00003433
    7020:	20776f4c 	.word	0x20776f4c
    7024:	65776f70 	.word	0x65776f70
    7028:	6f6d2072 	.word	0x6f6d2072
    702c:	73206564 	.word	0x73206564
    7030:	63656c65 	.word	0x63656c65
    7034:	6e6f6974 	.word	0x6e6f6974
    7038:	45454420 	.word	0x45454420
    703c:	4f502050 	.word	0x4f502050
    7040:	20524557 	.word	0x20524557
    7044:	4e574f44 	.word	0x4e574f44
    7048:	20737620 	.word	0x20737620
    704c:	45574f50 	.word	0x45574f50
    7050:	4f442052 	.word	0x4f442052
    7054:	00004e57 	.word	0x00004e57
    7058:	00003332 	.word	0x00003332
    705c:	646e6553 	.word	0x646e6553
    7060:	6f702020 	.word	0x6f702020
    7064:	69746973 	.word	0x69746973
    7068:	00006e6f 	.word	0x00006e6f
    706c:	00000000 	.word	0x00000000
    7070:	54455340 	.word	0x54455340
    7074:	3773253b 	.word	0x3773253b
    7078:	73253b30 	.word	0x73253b30
    707c:	00000000 	.word	0x00000000
    7080:	7774654e 	.word	0x7774654e
    7084:	206b726f 	.word	0x206b726f
    7088:	69676572 	.word	0x69676572
    708c:	61727473 	.word	0x61727473
    7090:	6e6f6974 	.word	0x6e6f6974
    7094:	72726520 	.word	0x72726520
    7098:	0000726f 	.word	0x0000726f
    709c:	69676552 	.word	0x69676552
    70a0:	72657473 	.word	0x72657473
    70a4:	74206465 	.word	0x74206465
    70a8:	7367206f 	.word	0x7367206f
    70ac:	656e206d 	.word	0x656e206d
    70b0:	726f7774 	.word	0x726f7774
    70b4:	00002e6b 	.word	0x00002e6b
    70b8:	6e676953 	.word	0x6e676953
    70bc:	53206c61 	.word	0x53206c61
    70c0:	6e657274 	.word	0x6e657274
    70c4:	20687467 	.word	0x20687467
    70c8:	6425203a 	.word	0x6425203a
    70cc:	0000000a 	.word	0x0000000a
    70d0:	6c6c6548 	.word	0x6c6c6548
    70d4:	3650206f 	.word	0x3650206f
    70d8:	30322035 	.word	0x30322035
    70dc:	35303531 	.word	0x35303531
    70e0:	002e3032 	.word	0x002e3032
    70e4:	74737953 	.word	0x74737953
    70e8:	6f436d65 	.word	0x6f436d65
    70ec:	6c436572 	.word	0x6c436572
    70f0:	206b636f 	.word	0x206b636f
    70f4:	6425203d 	.word	0x6425203d
    70f8:	0a7a4820 	.word	0x0a7a4820
    70fc:	00000000 	.word	0x00000000
    7100:	52504545 	.word	0x52504545
    7104:	49204d4f 	.word	0x49204d4f
    7108:	2074696e 	.word	0x2074696e
    710c:	6f727245 	.word	0x6f727245
    7110:	00002e72 	.word	0x00002e72
    7114:	52504545 	.word	0x52504545
    7118:	49204d4f 	.word	0x49204d4f
    711c:	2074696e 	.word	0x2074696e
    7120:	002e6b4f 	.word	0x002e6b4f
    7124:	63656843 	.word	0x63656843
    7128:	676e696b 	.word	0x676e696b
    712c:	67707520 	.word	0x67707520
    7130:	65646172 	.word	0x65646172
    7134:	71657220 	.word	0x71657220
    7138:	74736575 	.word	0x74736575
    713c:	00000000 	.word	0x00000000
    7140:	74737953 	.word	0x74737953
    7144:	69206d65 	.word	0x69206d65
    7148:	6567616d 	.word	0x6567616d
    714c:	67707520 	.word	0x67707520
    7150:	65646172 	.word	0x65646172
    7154:	71657220 	.word	0x71657220
    7158:	74736575 	.word	0x74736575
    715c:	00006465 	.word	0x00006465
    7160:	61697254 	.word	0x61697254
    7164:	0000006c 	.word	0x0000006c
    7168:	76726553 	.word	0x76726553
    716c:	43207265 	.word	0x43207265
    7170:	656e6e6f 	.word	0x656e6e6f
    7174:	6f697463 	.word	0x6f697463
    7178:	7345206e 	.word	0x7345206e
    717c:	6c626174 	.word	0x6c626174
    7180:	65687369 	.word	0x65687369
    7184:	6f742064 	.word	0x6f742064
    7188:	67705520 	.word	0x67705520
    718c:	65646172 	.word	0x65646172
    7190:	72657320 	.word	0x72657320
    7194:	00726576 	.word	0x00726576
    7198:	6e776f44 	.word	0x6e776f44
    719c:	64616f6c 	.word	0x64616f6c
    71a0:	6e696620 	.word	0x6e696620
    71a4:	65687369 	.word	0x65687369
    71a8:	00002064 	.word	0x00002064
    71ac:	696e6946 	.word	0x696e6946
    71b0:	64656873 	.word	0x64656873
    71b4:	67707520 	.word	0x67707520
    71b8:	69646172 	.word	0x69646172
    71bc:	0000676e 	.word	0x0000676e
    71c0:	746f6f42 	.word	0x746f6f42
    71c4:	20676e69 	.word	0x20676e69
    71c8:	4f434553 	.word	0x4f434553
    71cc:	5241444e 	.word	0x5241444e
    71d0:	6d692059 	.word	0x6d692059
    71d4:	00656761 	.word	0x00656761
    71d8:	746f6f42 	.word	0x746f6f42
    71dc:	20676e69 	.word	0x20676e69
    71e0:	4d495250 	.word	0x4d495250
    71e4:	20595241 	.word	0x20595241
    71e8:	67616d69 	.word	0x67616d69
    71ec:	00000065 	.word	0x00000065
    71f0:	6d697250 	.word	0x6d697250
    71f4:	20797261 	.word	0x20797261
    71f8:	67616d49 	.word	0x67616d49
    71fc:	69732065 	.word	0x69732065
    7200:	2073657a 	.word	0x2073657a
    7204:	25783028 	.word	0x25783028
    7208:	3d3d2058 	.word	0x3d3d2058
    720c:	25783020 	.word	0x25783020
    7210:	000d2958 	.word	0x000d2958
    7214:	6f636553 	.word	0x6f636553
    7218:	7261646e 	.word	0x7261646e
    721c:	6d492079 	.word	0x6d492079
    7220:	20656761 	.word	0x20656761
    7224:	657a6973 	.word	0x657a6973
    7228:	30282073 	.word	0x30282073
    722c:	20582578 	.word	0x20582578
    7230:	30203d3d 	.word	0x30203d3d
    7234:	29582578 	.word	0x29582578
    7238:	0000000d 	.word	0x0000000d
    723c:	68746f42 	.word	0x68746f42
    7240:	616d6920 	.word	0x616d6920
    7244:	20736567 	.word	0x20736567
    7248:	20657261 	.word	0x20657261
    724c:	61766e69 	.word	0x61766e69
    7250:	0064696c 	.word	0x0064696c
    7254:	6d697250 	.word	0x6d697250
    7258:	20797261 	.word	0x20797261
    725c:	67616d49 	.word	0x67616d49
    7260:	65762065 	.word	0x65762065
    7264:	6f697372 	.word	0x6f697372
    7268:	203d206e 	.word	0x203d206e
    726c:	58257830 	.word	0x58257830
    7270:	0000000d 	.word	0x0000000d
    7274:	6f636553 	.word	0x6f636553
    7278:	7261646e 	.word	0x7261646e
    727c:	6d492079 	.word	0x6d492079
    7280:	20656761 	.word	0x20656761
    7284:	73726576 	.word	0x73726576
    7288:	206e6f69 	.word	0x206e6f69
    728c:	7830203d 	.word	0x7830203d
    7290:	000d5825 	.word	0x000d5825
    7294:	63656843 	.word	0x63656843
    7298:	676e696b 	.word	0x676e696b
    729c:	43524320 	.word	0x43524320
    72a0:	00000000 	.word	0x00000000
    72a4:	6d697250 	.word	0x6d697250
    72a8:	20797261 	.word	0x20797261
    72ac:	67616d49 	.word	0x67616d49
    72b0:	79742065 	.word	0x79742065
    72b4:	3d206570 	.word	0x3d206570
    72b8:	2c642520 	.word	0x2c642520
    72bc:	72657620 	.word	0x72657620
    72c0:	6e6f6973 	.word	0x6e6f6973
    72c4:	30203d20 	.word	0x30203d20
    72c8:	32302578 	.word	0x32302578
    72cc:	00000d58 	.word	0x00000d58
    72d0:	6f636553 	.word	0x6f636553
    72d4:	7261646e 	.word	0x7261646e
    72d8:	6d492079 	.word	0x6d492079
    72dc:	20656761 	.word	0x20656761
    72e0:	65707974 	.word	0x65707974
    72e4:	25203d20 	.word	0x25203d20
    72e8:	76202c64 	.word	0x76202c64
    72ec:	69737265 	.word	0x69737265
    72f0:	3d206e6f 	.word	0x3d206e6f
    72f4:	25783020 	.word	0x25783020
    72f8:	0d583230 	.word	0x0d583230
    72fc:	00000000 	.word	0x00000000
    7300:	61647055 	.word	0x61647055
    7304:	70206574 	.word	0x70206574
    7308:	6d617261 	.word	0x6d617261
    730c:	72657465 	.word	0x72657465
    7310:	73252073 	.word	0x73252073
    7314:	0073253a 	.word	0x0073253a
    7318:	63656843 	.word	0x63656843
    731c:	676e696b 	.word	0x676e696b
    7320:	20666920 	.word	0x20666920
    7324:	67726174 	.word	0x67726174
    7328:	6d207465 	.word	0x6d207465
    732c:	726f6d65 	.word	0x726f6d65
    7330:	73692079 	.word	0x73692079
    7334:	616c6220 	.word	0x616c6220
    7338:	00006b6e 	.word	0x00006b6e
    733c:	67726154 	.word	0x67726154
    7340:	73207465 	.word	0x73207465
    7344:	6f746365 	.word	0x6f746365
    7348:	25282072 	.word	0x25282072
    734c:	69202964 	.word	0x69202964
    7350:	6f6e2073 	.word	0x6f6e2073
    7354:	6c622074 	.word	0x6c622074
    7358:	206b6e61 	.word	0x206b6e61
    735c:	72646461 	.word	0x72646461
    7360:	7830203a 	.word	0x7830203a
    7364:	202c5825 	.word	0x202c5825
    7368:	58257830 	.word	0x58257830
    736c:	00000000 	.word	0x00000000
    7370:	67726154 	.word	0x67726154
    7374:	73207465 	.word	0x73207465
    7378:	6f746365 	.word	0x6f746365
    737c:	25282072 	.word	0x25282072
    7380:	69202964 	.word	0x69202964
    7384:	6c622073 	.word	0x6c622073
    7388:	206b6e61 	.word	0x206b6e61
    738c:	00000000 	.word	0x00000000
    7390:	72617453 	.word	0x72617453
    7394:	676e6974 	.word	0x676e6974
    7398:	776f6420 	.word	0x776f6420
    739c:	616f6c6e 	.word	0x616f6c6e
    73a0:	00000064 	.word	0x00000064
    73a4:	61746f54 	.word	0x61746f54
    73a8:	20796c6c 	.word	0x20796c6c
    73ac:	65636572 	.word	0x65636572
    73b0:	64657669 	.word	0x64657669
    73b4:	25203a20 	.word	0x25203a20
    73b8:	20202064 	.word	0x20202064
    73bc:	6d617266 	.word	0x6d617266
    73c0:	656c2065 	.word	0x656c2065
    73c4:	6874676e 	.word	0x6874676e
    73c8:	25203a20 	.word	0x25203a20
    73cc:	000a0d64 	.word	0x000a0d64
    73d0:	61746f54 	.word	0x61746f54
    73d4:	20796c6c 	.word	0x20796c6c
    73d8:	6425203a 	.word	0x6425203a
    73dc:	6c662020 	.word	0x6c662020
    73e0:	57687361 	.word	0x57687361
    73e4:	65746972 	.word	0x65746972
    73e8:	65646e49 	.word	0x65646e49
    73ec:	203a2078 	.word	0x203a2078
    73f0:	0a0d6425 	.word	0x0a0d6425
    73f4:	00000000 	.word	0x00000000
    73f8:	70657270 	.word	0x70657270
    73fc:	64657261 	.word	0x64657261
    7400:	00000020 	.word	0x00000020
    7404:	79706f43 	.word	0x79706f43
    7408:	6d615220 	.word	0x6d615220
    740c:	73657220 	.word	0x73657220
    7410:	20746c75 	.word	0x20746c75
    7414:	65646f63 	.word	0x65646f63
    7418:	25203a20 	.word	0x25203a20
    741c:	000a0d64 	.word	0x000a0d64
    7420:	69706f63 	.word	0x69706f63
    7424:	00206465 	.word	0x00206465
    7428:	49323375 	.word	0x49323375
    742c:	435f5041 	.word	0x435f5041
    7430:	61706d6f 	.word	0x61706d6f
    7434:	3a206572 	.word	0x3a206572
    7438:	20642520 	.word	0x20642520
    743c:	6f727720 	.word	0x6f727720
    7440:	25206574 	.word	0x25206574
    7444:	0a0d2064 	.word	0x0a0d2064
    7448:	00000000 	.word	0x00000000
    744c:	69726576 	.word	0x69726576
    7450:	64656966 	.word	0x64656966
    7454:	00000020 	.word	0x00000020
    7458:	69726576 	.word	0x69726576
    745c:	61636966 	.word	0x61636966
    7460:	6e6f6974 	.word	0x6e6f6974
    7464:	69616620 	.word	0x69616620
    7468:	2064656c 	.word	0x2064656c
    746c:	00000000 	.word	0x00000000
    7470:	74697257 	.word	0x74697257
    7474:	20676e69 	.word	0x20676e69
    7478:	6e676973 	.word	0x6e676973
    747c:	72757461 	.word	0x72757461
    7480:	30203a65 	.word	0x30203a65
    7484:	20582578 	.word	0x20582578
    7488:	52432020 	.word	0x52432020
    748c:	203a2043 	.word	0x203a2043
    7490:	0a0d5825 	.word	0x0a0d5825
    7494:	00000000 	.word	0x00000000
    7498:	73617245 	.word	0x73617245
    749c:	00206465 	.word	0x00206465
    74a0:	6e676953 	.word	0x6e676953
    74a4:	72757461 	.word	0x72757461
    74a8:	30203a65 	.word	0x30203a65
    74ac:	20582578 	.word	0x20582578
    74b0:	52432020 	.word	0x52432020
    74b4:	203a2043 	.word	0x203a2043
    74b8:	0a0d5825 	.word	0x0a0d5825
    74bc:	00000000 	.word	0x00000000
    74c0:	636c6143 	.word	0x636c6143
    74c4:	74616c75 	.word	0x74616c75
    74c8:	49206465 	.word	0x49206465
    74cc:	6567616d 	.word	0x6567616d
    74d0:	43524320 	.word	0x43524320
    74d4:	7830203a 	.word	0x7830203a
    74d8:	0a0d5825 	.word	0x0a0d5825
    74dc:	00000000 	.word	0x00000000
    74e0:	00000a0d 	.word	0x00000a0d
    74e4:	78323025 	.word	0x78323025
    74e8:	00000000 	.word	0x00000000
    74ec:	73252020 	.word	0x73252020
    74f0:	00000a0d 	.word	0x00000a0d
    74f4:	32302520 	.word	0x32302520
    74f8:	00000078 	.word	0x00000078
    74fc:	00202020 	.word	0x00202020
    7500:	00445049 	.word	0x00445049
    7504:	5043542c 	.word	0x5043542c
    7508:	0000002c 	.word	0x0000002c
    750c:	00000a0d 	.word	0x00000a0d
    7510:	3a504354 	.word	0x3a504354
    7514:	00000000 	.word	0x00000000
    7518:	72617453 	.word	0x72617453
    751c:	6f642074 	.word	0x6f642074
    7520:	6f6c6e77 	.word	0x6f6c6e77
    7524:	6e696461 	.word	0x6e696461
    7528:	00000067 	.word	0x00000067
    752c:	6e6e6f43 	.word	0x6e6e6f43
    7530:	69746365 	.word	0x69746365
    7534:	7320676e 	.word	0x7320676e
    7538:	65746174 	.word	0x65746174
    753c:	6d697420 	.word	0x6d697420
    7540:	65207265 	.word	0x65207265
    7544:	72697078 	.word	0x72697078
    7548:	73206465 	.word	0x73206465
    754c:	69646e65 	.word	0x69646e65
    7550:	2020676e 	.word	0x2020676e
    7554:	2077656e 	.word	0x2077656e
    7558:	75716572 	.word	0x75716572
    755c:	20747365 	.word	0x20747365
    7560:	00000020 	.word	0x00000020
    7564:	72206f4e 	.word	0x72206f4e
    7568:	796c7065 	.word	0x796c7065
    756c:	76696720 	.word	0x76696720
    7570:	70752065 	.word	0x70752065
    7574:	67707520 	.word	0x67707520
    7578:	69646172 	.word	0x69646172
    757c:	0000676e 	.word	0x0000676e
    7580:	65636552 	.word	0x65636552
    7584:	64657669 	.word	0x64657669
    7588:	544f4520 	.word	0x544f4520
    758c:	00000020 	.word	0x00000020
    7590:	736f6c43 	.word	0x736f6c43
    7594:	20676e69 	.word	0x20676e69
    7598:	20504354 	.word	0x20504354
    759c:	6e6e6f63 	.word	0x6e6e6f63
    75a0:	69746365 	.word	0x69746365
    75a4:	00206e6f 	.word	0x00206e6f
    75a8:	65747962 	.word	0x65747962
    75ac:	756f6320 	.word	0x756f6320
    75b0:	203a746e 	.word	0x203a746e
    75b4:	202c6425 	.word	0x202c6425
    75b8:	6b636170 	.word	0x6b636170
    75bc:	6c207465 	.word	0x6c207465
    75c0:	25206e65 	.word	0x25206e65
    75c4:	000a0d64 	.word	0x000a0d64
    75c8:	656c6966 	.word	0x656c6966
    75cc:	7a697320 	.word	0x7a697320
    75d0:	30203a65 	.word	0x30203a65
    75d4:	2c582578 	.word	0x2c582578
    75d8:	43524320 	.word	0x43524320
    75dc:	7830203a 	.word	0x7830203a
    75e0:	0a0d5825 	.word	0x0a0d5825
    75e4:	00000000 	.word	0x00000000
    75e8:	636c6143 	.word	0x636c6143
    75ec:	74616c75 	.word	0x74616c75
    75f0:	49206465 	.word	0x49206465
    75f4:	6567616d 	.word	0x6567616d
    75f8:	43524320 	.word	0x43524320
    75fc:	7830203a 	.word	0x7830203a
    7600:	0a0d5825 	.word	0x0a0d5825
    7604:	00000000 	.word	0x00000000
    7608:	6d617266 	.word	0x6d617266
    760c:	756e2065 	.word	0x756e2065
    7610:	7265626d 	.word	0x7265626d
    7614:	20203a20 	.word	0x20203a20
    7618:	0a0d6425 	.word	0x0a0d6425
    761c:	00000000 	.word	0x00000000
    7620:	636c6163 	.word	0x636c6163
    7624:	74616c75 	.word	0x74616c75
    7628:	43206465 	.word	0x43206465
    762c:	3a204352 	.word	0x3a204352
    7630:	25783020 	.word	0x25783020
    7634:	000a0d58 	.word	0x000a0d58
    7638:	65636552 	.word	0x65636552
    763c:	64657669 	.word	0x64657669
    7640:	66206120 	.word	0x66206120
    7644:	656d6172 	.word	0x656d6172
    7648:	00000020 	.word	0x00000020
    764c:	646e6553 	.word	0x646e6553
    7650:	20676e69 	.word	0x20676e69
    7654:	4b434120 	.word	0x4b434120
    7658:	00000020 	.word	0x00000020
    765c:	20435243 	.word	0x20435243
    7660:	6374616d 	.word	0x6374616d
    7664:	20736568 	.word	0x20736568
    7668:	00000a0d 	.word	0x00000a0d
    766c:	20435243 	.word	0x20435243
    7670:	73656f64 	.word	0x73656f64
    7674:	746f6e20 	.word	0x746f6e20
    7678:	74616d20 	.word	0x74616d20
    767c:	20206863 	.word	0x20206863
    7680:	204b414e 	.word	0x204b414e
    7684:	00676e69 	.word	0x00676e69
    7688:	656d6954 	.word	0x656d6954
    768c:	74756f20 	.word	0x74756f20
    7690:	206e6920 	.word	0x206e6920
    7694:	45434552 	.word	0x45434552
    7698:	4e495649 	.word	0x4e495649
    769c:	20202047 	.word	0x20202047
    76a0:	00000000 	.word	0x00000000
    76a4:	6e776f44 	.word	0x6e776f44
    76a8:	64616f6c 	.word	0x64616f6c
    76ac:	6f727020 	.word	0x6f727020
    76b0:	73736563 	.word	0x73736563
    76b4:	69616620 	.word	0x69616620
    76b8:	2064656c 	.word	0x2064656c
    76bc:	69766967 	.word	0x69766967
    76c0:	7520676e 	.word	0x7520676e
    76c4:	70752070 	.word	0x70752070
    76c8:	64617267 	.word	0x64617267
    76cc:	00676e69 	.word	0x00676e69
    76d0:	202a2a2a 	.word	0x202a2a2a
    76d4:	7973435f 	.word	0x7973435f
    76d8:	6c615f73 	.word	0x6c615f73
    76dc:	20636f6c 	.word	0x20636f6c
    76e0:	6c696166 	.word	0x6c696166
    76e4:	000a6465 	.word	0x000a6465

000076e8 <__ctype>:
	...
    7768:	40404040 40404040 41414140 40404141     @@@@@@@@@AAAAA@@
    7778:	40404040 40404040 40404040 40404040     @@@@@@@@@@@@@@@@
    7788:	02020205 02020202 02020202 02020202     ................
    7798:	20202020 20202020 02022020 02020202               ......
    77a8:	90909002 10909090 10101010 10101010     ................
    77b8:	10101010 10101010 02101010 02020202     ................
    77c8:	88888802 08888888 08080808 08080808     ................
    77d8:	08080808 08080808 02080808 40020202     ...............@
	...
    7868:	0020002b 63257830 00642570 63255830     +. .0x%cp%d.0X%c
    7878:	00642550 63257830 2a2e252e 70786c6c     P%d.0x%c.%.*llxp
    7888:	30006425 2e632558 6c2a2e25 2550586c     %d.0X%c.%.*llXP%
    7898:	002d0064 00770072 6c756e28 3000296c     d.-.r.w.(null).0
    78a8:	78300058 30003000 34333231 38373635     X.0x.0.012345678
    78b8:	43424139 00464544 33323130 37363534     9ABCDEF.01234567
    78c8:	62613938 66656463 00000000 00000000     89abcdef........

000078d8 <__huge_vall>:
    78d8:	ffffffff 7fefffff                       ........
