
secBootLoader.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

	//MODE 0 = Deep Power Down
	//MODE 1 = Power Down
}

void LoadTimings() {
       0:	c0 7f 00 10 71 01 00 00 e9 01 00 00 f1 01 00 00     ....q...........
	char buffer[200];
	//LOAD Ignition On Period
	per_ignonperiod_val = EEPROM_LoadInt64(cal_ign_on_period);
      10:	f9 01 00 00 01 02 00 00 09 02 00 00 00 00 00 00     ................
	...
	if (per_ignonperiod_val == 0 || per_ignonperiod_val > 14400)
      2c:	11 02 00 00 19 02 00 00 00 00 00 00 21 02 00 00     ............!...
		per_ignonperiod_val = 60;
	sprintf(buffer, "per_ignonperiod_val: %d\n", (int)per_ignonperiod_val);
      3c:	15 1c 00 00 21 29 00 00 31 02 00 00 31 02 00 00     ....!)..1...1...
	TraceNL(buffer);
	//LOAD Ignition Off Period
	per_ignoffperiod_val = (int)EEPROM_LoadInt64(cal_ign_off_period);
      4c:	31 02 00 00 31 02 00 00 e1 1e 00 00 ed 1f 00 00     1...1...........
      5c:	fd 20 00 00 09 22 00 00 31 02 00 00 c1 0c 00 00     . ..."..1.......
	int original_per_ignoffperiod_val = per_ignoffperiod_val;
	if (per_ignoffperiod_val == 0 || per_ignoffperiod_val > 14400) //4 hours max.
      6c:	05 10 00 00 31 02 00 00 31 02 00 00 31 02 00 00     ....1...1...1...
		per_ignoffperiod_val = 120;
      7c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
	sprintf(buffer, "per_ignoffperiod_val: %d, per_ignoffperiod_val(original): %d\n", (int)per_ignoffperiod_val,(int)original_per_ignoffperiod_val);
      8c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
	TraceNL(buffer);
      9c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
	//LOAD Ignition On Roaming Period
	per_ignonroamingperiod_val = (int)EEPROM_LoadInt64(cal_ign_on_roaming_period);
      ac:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
	if (per_ignonroamingperiod_val == 0 || per_ignonroamingperiod_val > 14400)
      bc:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...

000000cc <__data_section_table>:
		per_ignonroamingperiod_val = 1800;
      cc:	00006600 	.word	0x00006600
	sprintf(buffer, "per_ignonroamingperiod_val: %d\n", (int)per_ignonroamingperiod_val);
      d0:	10000000 	.word	0x10000000
      d4:	00000028 	.word	0x00000028
      d8:	00006600 	.word	0x00006600
      dc:	2007c000 	.word	0x2007c000
	TraceNL(buffer);
      e0:	00000000 	.word	0x00000000

000000e4 <__bss_section_table>:
      e4:	10000028 	.word	0x10000028
	//LOAD Ignition Off Roaming Period
	per_ignoffroamingperiod_val = (int)EEPROM_LoadInt64(cal_ign_off_roaming_period);
      e8:	0000216c 	.word	0x0000216c
      ec:	2007c000 	.word	0x2007c000
      f0:	00000000 	.word	0x00000000

000000f4 <data_init>:
      f4:	b480      	push	{r7}
      f6:	b089      	sub	sp, #36	; 0x24
      f8:	af00      	add	r7, sp, #0
      fa:	60f8      	str	r0, [r7, #12]
	if (per_ignoffroamingperiod_val == 0 || per_ignoffroamingperiod_val > 14400)
      fc:	60b9      	str	r1, [r7, #8]
      fe:	607a      	str	r2, [r7, #4]
     100:	68bb      	ldr	r3, [r7, #8]
     102:	61fb      	str	r3, [r7, #28]
     104:	68fb      	ldr	r3, [r7, #12]
     106:	61bb      	str	r3, [r7, #24]
     108:	2300      	movs	r3, #0
     10a:	617b      	str	r3, [r7, #20]
     10c:	e00a      	b.n	124 <data_init+0x30>
		per_ignoffroamingperiod_val = 7200;
     10e:	69fb      	ldr	r3, [r7, #28]
     110:	1d1a      	adds	r2, r3, #4
     112:	61fa      	str	r2, [r7, #28]
     114:	69ba      	ldr	r2, [r7, #24]
	sprintf(buffer, "per_ignoffroamingperiod_val: %d\n", (int)per_ignoffroamingperiod_val);
     116:	1d11      	adds	r1, r2, #4
     118:	61b9      	str	r1, [r7, #24]
     11a:	6812      	ldr	r2, [r2, #0]
     11c:	601a      	str	r2, [r3, #0]
     11e:	697b      	ldr	r3, [r7, #20]
     120:	3304      	adds	r3, #4
     122:	617b      	str	r3, [r7, #20]
     124:	697a      	ldr	r2, [r7, #20]
	TraceNL(buffer);
     126:	687b      	ldr	r3, [r7, #4]
     128:	429a      	cmp	r2, r3
     12a:	d3f0      	bcc.n	10e <data_init+0x1a>
     12c:	3724      	adds	r7, #36	; 0x24
	per_lowpow_just_wake = (int)EEPROM_LoadInt64(cal_lowpow_just_wake);
     12e:	46bd      	mov	sp, r7
     130:	f85d 7b04 	ldr.w	r7, [sp], #4
     134:	4770      	bx	lr
     136:	bf00      	nop

00000138 <bss_init>:
     138:	b480      	push	{r7}
     13a:	b085      	sub	sp, #20
     13c:	af00      	add	r7, sp, #0
     13e:	6078      	str	r0, [r7, #4]
     140:	6039      	str	r1, [r7, #0]
     142:	687b      	ldr	r3, [r7, #4]
	sprintf(buffer, "per_lowpow_just_wake: %d\n", (int)per_lowpow_just_wake);
     144:	60fb      	str	r3, [r7, #12]
     146:	2300      	movs	r3, #0
     148:	60bb      	str	r3, [r7, #8]
     14a:	e007      	b.n	15c <bss_init+0x24>
     14c:	68fb      	ldr	r3, [r7, #12]
     14e:	1d1a      	adds	r2, r3, #4
     150:	60fa      	str	r2, [r7, #12]
     152:	2200      	movs	r2, #0
	TraceNL(buffer);
     154:	601a      	str	r2, [r3, #0]
     156:	68bb      	ldr	r3, [r7, #8]
     158:	3304      	adds	r3, #4
     15a:	60bb      	str	r3, [r7, #8]
	per_lowpow_cancel = (int)EEPROM_LoadInt64(cal_lowpow_cancel);
     15c:	68ba      	ldr	r2, [r7, #8]
     15e:	683b      	ldr	r3, [r7, #0]
     160:	429a      	cmp	r2, r3
     162:	d3f3      	bcc.n	14c <bss_init+0x14>
     164:	3714      	adds	r7, #20
     166:	46bd      	mov	sp, r7
     168:	f85d 7b04 	ldr.w	r7, [sp], #4
     16c:	4770      	bx	lr
     16e:	bf00      	nop

00000170 <ResetISR>:
     170:	b580      	push	{r7, lr}
	if (per_lowpow_cancel > 2)
     172:	b084      	sub	sp, #16
     174:	af00      	add	r7, sp, #0
     176:	4b19      	ldr	r3, [pc, #100]	; (1dc <ResetISR+0x6c>)
     178:	60fb      	str	r3, [r7, #12]
		per_lowpow_cancel = 0;
     17a:	e013      	b.n	1a4 <ResetISR+0x34>
     17c:	68fb      	ldr	r3, [r7, #12]
     17e:	1d1a      	adds	r2, r3, #4
	sprintf(buffer, "per_lowpow_cancel: %d\n", (int)per_lowpow_cancel);
     180:	60fa      	str	r2, [r7, #12]
     182:	681b      	ldr	r3, [r3, #0]
     184:	60bb      	str	r3, [r7, #8]
     186:	68fb      	ldr	r3, [r7, #12]
     188:	1d1a      	adds	r2, r3, #4
     18a:	60fa      	str	r2, [r7, #12]
     18c:	681b      	ldr	r3, [r3, #0]
     18e:	607b      	str	r3, [r7, #4]
	TraceNL(buffer);
     190:	68fb      	ldr	r3, [r7, #12]
     192:	1d1a      	adds	r2, r3, #4
     194:	60fa      	str	r2, [r7, #12]
     196:	681b      	ldr	r3, [r3, #0]
	//LOAD Low Power Wake Up Period
	per_lowpow_period = (int)EEPROM_LoadInt64(cal_lowpow_period);
     198:	603b      	str	r3, [r7, #0]
     19a:	68b8      	ldr	r0, [r7, #8]
     19c:	6879      	ldr	r1, [r7, #4]
     19e:	683a      	ldr	r2, [r7, #0]
     1a0:	f7ff ffa8 	bl	f4 <data_init>
     1a4:	68fb      	ldr	r3, [r7, #12]
     1a6:	4a0e      	ldr	r2, [pc, #56]	; (1e0 <ResetISR+0x70>)
     1a8:	4293      	cmp	r3, r2
     1aa:	d3e7      	bcc.n	17c <ResetISR+0xc>
     1ac:	e00d      	b.n	1ca <ResetISR+0x5a>
	sprintf(buffer, "per_lowpow_period(original): %d\n", (int)per_lowpow_period);
     1ae:	68fb      	ldr	r3, [r7, #12]
     1b0:	1d1a      	adds	r2, r3, #4
     1b2:	60fa      	str	r2, [r7, #12]
     1b4:	681b      	ldr	r3, [r3, #0]
     1b6:	607b      	str	r3, [r7, #4]
     1b8:	68fb      	ldr	r3, [r7, #12]
     1ba:	1d1a      	adds	r2, r3, #4
     1bc:	60fa      	str	r2, [r7, #12]
	TraceNL(buffer);
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	603b      	str	r3, [r7, #0]
     1c2:	6878      	ldr	r0, [r7, #4]
     1c4:	6839      	ldr	r1, [r7, #0]
	if (per_lowpow_period < 1 || per_lowpow_period > 2880){ //No period more than 2 days.
     1c6:	f7ff ffb7 	bl	138 <bss_init>
     1ca:	68fb      	ldr	r3, [r7, #12]
     1cc:	4a05      	ldr	r2, [pc, #20]	; (1e4 <ResetISR+0x74>)
     1ce:	4293      	cmp	r3, r2
     1d0:	d3ed      	bcc.n	1ae <ResetISR+0x3e>
     1d2:	f002 ff61 	bl	3098 <SystemInit>
     1d6:	f002 ffcf 	bl	3178 <__main>
		per_lowpow_period = 59;
     1da:	e7fe      	b.n	1da <ResetISR+0x6a>
     1dc:	000000cc 	.word	0x000000cc
		#endif
		#ifdef CABINET_DEMO
			per_lowpow_period = 15; //59;//1Hour
		#endif
	}
	sprintf(buffer, "per_lowpow_period: %d\n", (int)per_lowpow_period);
     1e0:	000000e4 	.word	0x000000e4
     1e4:	000000f4 	.word	0x000000f4

000001e8 <NMI_Handler>:
     1e8:	b480      	push	{r7}
     1ea:	af00      	add	r7, sp, #0
     1ec:	e7fe      	b.n	1ec <NMI_Handler+0x4>
	TraceNL(buffer);
     1ee:	bf00      	nop

000001f0 <HardFault_Handler>:
     1f0:	b480      	push	{r7}
     1f2:	af00      	add	r7, sp, #0
     1f4:	e7fe      	b.n	1f4 <HardFault_Handler+0x4>
	per_lowpow_mode = (int)EEPROM_LoadInt64(cal_lowpow_mode);
     1f6:	bf00      	nop

000001f8 <MemManage_Handler>:
     1f8:	b480      	push	{r7}
     1fa:	af00      	add	r7, sp, #0
     1fc:	e7fe      	b.n	1fc <MemManage_Handler+0x4>
     1fe:	bf00      	nop

00000200 <BusFault_Handler>:
     200:	b480      	push	{r7}
     202:	af00      	add	r7, sp, #0
     204:	e7fe      	b.n	204 <BusFault_Handler+0x4>
     206:	bf00      	nop

00000208 <UsageFault_Handler>:
     208:	b480      	push	{r7}
     20a:	af00      	add	r7, sp, #0
	if (per_lowpow_mode > 2){
     20c:	e7fe      	b.n	20c <UsageFault_Handler+0x4>
     20e:	bf00      	nop

00000210 <SVC_Handler>:
     210:	b480      	push	{r7}
     212:	af00      	add	r7, sp, #0
		per_lowpow_mode = 0;
     214:	e7fe      	b.n	214 <SVC_Handler+0x4>
     216:	bf00      	nop

00000218 <DebugMon_Handler>:
     218:	b480      	push	{r7}
		#ifdef CABINET_DEMO
			per_lowpow_mode = 1; //Light sleep
		#endif
	}
	sprintf(buffer, "per_lowpow_mode: %d\n", (int)per_lowpow_mode);
     21a:	af00      	add	r7, sp, #0
     21c:	e7fe      	b.n	21c <DebugMon_Handler+0x4>
     21e:	bf00      	nop

00000220 <PendSV_Handler>:
     220:	b480      	push	{r7}
     222:	af00      	add	r7, sp, #0
     224:	e7fe      	b.n	224 <PendSV_Handler+0x4>
     226:	bf00      	nop
     228:	b480      	push	{r7}
	TraceNL(buffer);
     22a:	af00      	add	r7, sp, #0
     22c:	e7fe      	b.n	22c <PendSV_Handler+0xc>
     22e:	bf00      	nop

00000230 <ADC_IRQHandler>:
     230:	b480      	push	{r7}
	per_coffe_counter = (int)EEPROM_LoadInt64(cal_coffee_counter);
     232:	af00      	add	r7, sp, #0
     234:	e7fe      	b.n	234 <ADC_IRQHandler+0x4>
     236:	bf00      	nop
     238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     23c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	sprintf(buffer, "per_coffee_counter: %d\n", (int)per_coffe_counter);
     248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     24c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	TraceNL(buffer);
     258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     25c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
}
     260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     26c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     27c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     28c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     29c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000002fc <CRP_WORD>:
     2fc:	ffff ffff                                   ....

00000300 <GSM_SendAt>:
static unsigned long int last_hard_reset = -1;
static int connectionFailCount = 0;


uint16_t GSM_SendAt( char* cmd, char *response, int delay )
{
     300:	b580      	push	{r7, lr}
     302:	b0a0      	sub	sp, #128	; 0x80
     304:	af00      	add	r7, sp, #0
     306:	60f8      	str	r0, [r7, #12]
     308:	60b9      	str	r1, [r7, #8]
     30a:	607a      	str	r2, [r7, #4]
	char buffer[100];
	uint16_t	len;

	sprintf( buffer, "---> %s\r\n", cmd );
     30c:	f107 0314 	add.w	r3, r7, #20
     310:	4618      	mov	r0, r3
     312:	4918      	ldr	r1, [pc, #96]	; (374 <GSM_SendAt+0x74>)
     314:	68fa      	ldr	r2, [r7, #12]
     316:	f002 ff73 	bl	3200 <sprintf>
	Trace( buffer );
     31a:	f107 0314 	add.w	r3, r7, #20
     31e:	4618      	mov	r0, r3
     320:	f001 fc9c 	bl	1c5c <Trace>

	int count = sprintf( buffer, "%s\r\n", cmd );
     324:	f107 0314 	add.w	r3, r7, #20
     328:	4618      	mov	r0, r3
     32a:	4913      	ldr	r1, [pc, #76]	; (378 <GSM_SendAt+0x78>)
     32c:	68fa      	ldr	r2, [r7, #12]
     32e:	f002 ff67 	bl	3200 <sprintf>
     332:	67f8      	str	r0, [r7, #124]	; 0x7c
	UARTSend( PORT_GSM, buffer, count );
     334:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     336:	f107 0214 	add.w	r2, r7, #20
     33a:	2001      	movs	r0, #1
     33c:	4611      	mov	r1, r2
     33e:	461a      	mov	r2, r3
     340:	f002 f980 	bl	2644 <UARTSend>

	DelayMs( delay );
     344:	687b      	ldr	r3, [r7, #4]
     346:	4618      	mov	r0, r3
     348:	f001 fc72 	bl	1c30 <DelayMs>

	len = ReadUart( response, PORT_GSM );
     34c:	68b8      	ldr	r0, [r7, #8]
     34e:	2101      	movs	r1, #1
     350:	f002 fa14 	bl	277c <ReadUart>
     354:	4603      	mov	r3, r0
     356:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	response[len] = '\0';
     35a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
     35e:	68ba      	ldr	r2, [r7, #8]
     360:	4413      	add	r3, r2
     362:	2200      	movs	r2, #0
     364:	701a      	strb	r2, [r3, #0]

    return ( len );
     366:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
}
     36a:	4618      	mov	r0, r3
     36c:	3780      	adds	r7, #128	; 0x80
     36e:	46bd      	mov	sp, r7
     370:	bd80      	pop	{r7, pc}
     372:	bf00      	nop
     374:	00005be0 	.word	0x00005be0
     378:	00005bec 	.word	0x00005bec

0000037c <GSM_TCP_Recv>:

int16_t GSM_TCP_Recv( char* pDataBuf, int16_t maxBytes )
{
     37c:	b580      	push	{r7, lr}
     37e:	b082      	sub	sp, #8
     380:	af00      	add	r7, sp, #0
     382:	6078      	str	r0, [r7, #4]
     384:	460b      	mov	r3, r1
     386:	807b      	strh	r3, [r7, #2]
	return ( GSM_SendAt( "AT+QIRD=1,1,0,1100", pDataBuf, 1000 ) );
     388:	4806      	ldr	r0, [pc, #24]	; (3a4 <GSM_TCP_Recv+0x28>)
     38a:	6879      	ldr	r1, [r7, #4]
     38c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     390:	f7ff ffb6 	bl	300 <GSM_SendAt>
     394:	4603      	mov	r3, r0
     396:	b29b      	uxth	r3, r3
     398:	b21b      	sxth	r3, r3
}
     39a:	4618      	mov	r0, r3
     39c:	3708      	adds	r7, #8
     39e:	46bd      	mov	sp, r7
     3a0:	bd80      	pop	{r7, pc}
     3a2:	bf00      	nop
     3a4:	00005bf4 	.word	0x00005bf4

000003a8 <GSM_ConnectToTrioUpgradeServer>:

int GSM_ConnectToTrioUpgradeServer( void )
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b0de      	sub	sp, #376	; 0x178
     3ac:	af02      	add	r7, sp, #8
	char buffer[200];
	char response[150];

	TraceNL("Entered GSM_ConnectToTrioUpgradeServer");
     3ae:	48ac      	ldr	r0, [pc, #688]	; (660 <GSM_ConnectToTrioUpgradeServer+0x2b8>)
     3b0:	f001 fc64 	bl	1c7c <TraceNL>

	int init_result = GSM_InitModule();
     3b4:	f000 fa60 	bl	878 <GSM_InitModule>
     3b8:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
	if (init_result == FAIL){
     3bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
     3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
     3c4:	d109      	bne.n	3da <GSM_ConnectToTrioUpgradeServer+0x32>
		GSM_ShutdownModule();
     3c6:	f000 fa25 	bl	814 <GSM_ShutdownModule>
		DelayMs(2000);
     3ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     3ce:	f001 fc2f 	bl	1c30 <DelayMs>
		init_result = GSM_InitModule();
     3d2:	f000 fa51 	bl	878 <GSM_InitModule>
     3d6:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
	}

	WDTFeed();
     3da:	f002 fad9 	bl	2990 <WDTFeed>

	if( init_result == FAIL )
     3de:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
     3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
     3e6:	d102      	bne.n	3ee <GSM_ConnectToTrioUpgradeServer+0x46>
		return ( init_result );
     3e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
     3ec:	e133      	b.n	656 <GSM_ConnectToTrioUpgradeServer+0x2ae>

	//GSM_EchoOFF();
	GSM_GetImei();
     3ee:	f000 fb0b 	bl	a08 <GSM_GetImei>
	GSM_GetImsi();
     3f2:	f000 fb29 	bl	a48 <GSM_GetImsi>
	GSM_GetRegStat();
     3f6:	f000 fab3 	bl	960 <GSM_GetRegStat>

	GSM_SendAt("ATI", response, 500);
     3fa:	463b      	mov	r3, r7
     3fc:	4899      	ldr	r0, [pc, #612]	; (664 <GSM_ConnectToTrioUpgradeServer+0x2bc>)
     3fe:	4619      	mov	r1, r3
     400:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     404:	f7ff ff7c 	bl	300 <GSM_SendAt>
	WDTFeed();
     408:	f002 fac2 	bl	2990 <WDTFeed>
	GSM_SendAt("AT+QIFGCNT=1", response, 500);
     40c:	463b      	mov	r3, r7
     40e:	4896      	ldr	r0, [pc, #600]	; (668 <GSM_ConnectToTrioUpgradeServer+0x2c0>)
     410:	4619      	mov	r1, r3
     412:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     416:	f7ff ff73 	bl	300 <GSM_SendAt>

	memset(buffer, 0, sizeof(buffer));
     41a:	f107 0398 	add.w	r3, r7, #152	; 0x98
     41e:	4618      	mov	r0, r3
     420:	2100      	movs	r1, #0
     422:	22c8      	movs	r2, #200	; 0xc8
     424:	f002 feb2 	bl	318c <memset>
	sprintf(buffer, "AT+QICSGP=1,\"%s\",\"%s\",\"%s\"", per_apn_val, per_apnuser_val, per_apnpass_val);
     428:	f107 0298 	add.w	r2, r7, #152	; 0x98
     42c:	4b8f      	ldr	r3, [pc, #572]	; (66c <GSM_ConnectToTrioUpgradeServer+0x2c4>)
     42e:	9300      	str	r3, [sp, #0]
     430:	4610      	mov	r0, r2
     432:	498f      	ldr	r1, [pc, #572]	; (670 <GSM_ConnectToTrioUpgradeServer+0x2c8>)
     434:	4a8f      	ldr	r2, [pc, #572]	; (674 <GSM_ConnectToTrioUpgradeServer+0x2cc>)
     436:	4b90      	ldr	r3, [pc, #576]	; (678 <GSM_ConnectToTrioUpgradeServer+0x2d0>)
     438:	f002 fee2 	bl	3200 <sprintf>

	GSM_SendAt(buffer, response, 100);
     43c:	f107 0298 	add.w	r2, r7, #152	; 0x98
     440:	463b      	mov	r3, r7
     442:	4610      	mov	r0, r2
     444:	4619      	mov	r1, r3
     446:	2264      	movs	r2, #100	; 0x64
     448:	f7ff ff5a 	bl	300 <GSM_SendAt>
	GSM_SendAt("AT+QIMUX=0", response, 100);
     44c:	463b      	mov	r3, r7
     44e:	488b      	ldr	r0, [pc, #556]	; (67c <GSM_ConnectToTrioUpgradeServer+0x2d4>)
     450:	4619      	mov	r1, r3
     452:	2264      	movs	r2, #100	; 0x64
     454:	f7ff ff54 	bl	300 <GSM_SendAt>
	GSM_SendAt("AT+QVBATT=0,3500,0", response, 100); //Disable low power shut down and warning.
     458:	463b      	mov	r3, r7
     45a:	4889      	ldr	r0, [pc, #548]	; (680 <GSM_ConnectToTrioUpgradeServer+0x2d8>)
     45c:	4619      	mov	r1, r3
     45e:	2264      	movs	r2, #100	; 0x64
     460:	f7ff ff4e 	bl	300 <GSM_SendAt>
	GSM_SendAt("AT+QVBATT=1,3300,0",response,100); // Disable 3.3 volt cutoff.
     464:	463b      	mov	r3, r7
     466:	4887      	ldr	r0, [pc, #540]	; (684 <GSM_ConnectToTrioUpgradeServer+0x2dc>)
     468:	4619      	mov	r1, r3
     46a:	2264      	movs	r2, #100	; 0x64
     46c:	f7ff ff48 	bl	300 <GSM_SendAt>

	GSM_SendAt("AT+QISHOWRA=1", response, 100); // show remote address
     470:	463b      	mov	r3, r7
     472:	4885      	ldr	r0, [pc, #532]	; (688 <GSM_ConnectToTrioUpgradeServer+0x2e0>)
     474:	4619      	mov	r1, r3
     476:	2264      	movs	r2, #100	; 0x64
     478:	f7ff ff42 	bl	300 <GSM_SendAt>
	GSM_SendAt("AT+QISHOWPT=1", response, 100); // show protocol type ,TCP, or UDP
     47c:	463b      	mov	r3, r7
     47e:	4883      	ldr	r0, [pc, #524]	; (68c <GSM_ConnectToTrioUpgradeServer+0x2e4>)
     480:	4619      	mov	r1, r3
     482:	2264      	movs	r2, #100	; 0x64
     484:	f7ff ff3c 	bl	300 <GSM_SendAt>
	GSM_SendAt("AT+QINDI=0", response, 100);    //  disable indicator
     488:	463b      	mov	r3, r7
     48a:	4881      	ldr	r0, [pc, #516]	; (690 <GSM_ConnectToTrioUpgradeServer+0x2e8>)
     48c:	4619      	mov	r1, r3
     48e:	2264      	movs	r2, #100	; 0x64
     490:	f7ff ff36 	bl	300 <GSM_SendAt>
	GSM_SendAt("AT+QIHEAD=1", response, 100);    //
     494:	463b      	mov	r3, r7
     496:	487f      	ldr	r0, [pc, #508]	; (694 <GSM_ConnectToTrioUpgradeServer+0x2ec>)
     498:	4619      	mov	r1, r3
     49a:	2264      	movs	r2, #100	; 0x64
     49c:	f7ff ff30 	bl	300 <GSM_SendAt>

	GSM_SendAt("AT+QIMODE=0", response, 100);   //Non Transparent Mode
     4a0:	463b      	mov	r3, r7
     4a2:	487d      	ldr	r0, [pc, #500]	; (698 <GSM_ConnectToTrioUpgradeServer+0x2f0>)
     4a4:	4619      	mov	r1, r3
     4a6:	2264      	movs	r2, #100	; 0x64
     4a8:	f7ff ff2a 	bl	300 <GSM_SendAt>

	memset(buffer, 0, sizeof(buffer));
     4ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
     4b0:	4618      	mov	r0, r3
     4b2:	2100      	movs	r1, #0
     4b4:	22c8      	movs	r2, #200	; 0xc8
     4b6:	f002 fe69 	bl	318c <memset>
	if (isalpha(per_ip_val[0])){ //DNS
     4ba:	4b78      	ldr	r3, [pc, #480]	; (69c <GSM_ConnectToTrioUpgradeServer+0x2f4>)
     4bc:	781b      	ldrb	r3, [r3, #0]
     4be:	3380      	adds	r3, #128	; 0x80
     4c0:	4a77      	ldr	r2, [pc, #476]	; (6a0 <GSM_ConnectToTrioUpgradeServer+0x2f8>)
     4c2:	5cd3      	ldrb	r3, [r2, r3]
     4c4:	f003 0318 	and.w	r3, r3, #24
     4c8:	2b00      	cmp	r3, #0
     4ca:	d011      	beq.n	4f0 <GSM_ConnectToTrioUpgradeServer+0x148>
		GSM_SendAt("AT+QIDNSIP=1", response, 100);
     4cc:	463b      	mov	r3, r7
     4ce:	4875      	ldr	r0, [pc, #468]	; (6a4 <GSM_ConnectToTrioUpgradeServer+0x2fc>)
     4d0:	4619      	mov	r1, r3
     4d2:	2264      	movs	r2, #100	; 0x64
     4d4:	f7ff ff14 	bl	300 <GSM_SendAt>
		TraceDumpHex( response, strlen(response) );
     4d8:	463b      	mov	r3, r7
     4da:	4618      	mov	r0, r3
     4dc:	f004 faf8 	bl	4ad0 <strlen>
     4e0:	4603      	mov	r3, r0
     4e2:	461a      	mov	r2, r3
     4e4:	463b      	mov	r3, r7
     4e6:	4618      	mov	r0, r3
     4e8:	4611      	mov	r1, r2
     4ea:	f001 fbfb 	bl	1ce4 <TraceDumpHex>
     4ee:	e005      	b.n	4fc <GSM_ConnectToTrioUpgradeServer+0x154>
	}else
		GSM_SendAt("AT+QIDNSIP=0", response, 100);
     4f0:	463b      	mov	r3, r7
     4f2:	486d      	ldr	r0, [pc, #436]	; (6a8 <GSM_ConnectToTrioUpgradeServer+0x300>)
     4f4:	4619      	mov	r1, r3
     4f6:	2264      	movs	r2, #100	; 0x64
     4f8:	f7ff ff02 	bl	300 <GSM_SendAt>

	GSM_SendAt("AT+QGPCLASS=12", response, 100);
     4fc:	463b      	mov	r3, r7
     4fe:	486b      	ldr	r0, [pc, #428]	; (6ac <GSM_ConnectToTrioUpgradeServer+0x304>)
     500:	4619      	mov	r1, r3
     502:	2264      	movs	r2, #100	; 0x64
     504:	f7ff fefc 	bl	300 <GSM_SendAt>
	GSM_SendAt("AT",response,100);
     508:	463b      	mov	r3, r7
     50a:	4869      	ldr	r0, [pc, #420]	; (6b0 <GSM_ConnectToTrioUpgradeServer+0x308>)
     50c:	4619      	mov	r1, r3
     50e:	2264      	movs	r2, #100	; 0x64
     510:	f7ff fef6 	bl	300 <GSM_SendAt>

	sprintf( buffer, "AT+QIOPEN=\"TCP\",\"%s\",%s\r\n", update_service_ip, update_service_port );
     514:	f107 0398 	add.w	r3, r7, #152	; 0x98
     518:	4618      	mov	r0, r3
     51a:	4966      	ldr	r1, [pc, #408]	; (6b4 <GSM_ConnectToTrioUpgradeServer+0x30c>)
     51c:	4a66      	ldr	r2, [pc, #408]	; (6b8 <GSM_ConnectToTrioUpgradeServer+0x310>)
     51e:	4b67      	ldr	r3, [pc, #412]	; (6bc <GSM_ConnectToTrioUpgradeServer+0x314>)
     520:	f002 fe6e 	bl	3200 <sprintf>

	GSM_SendAt( buffer, response, 100);
     524:	f107 0298 	add.w	r2, r7, #152	; 0x98
     528:	463b      	mov	r3, r7
     52a:	4610      	mov	r0, r2
     52c:	4619      	mov	r1, r3
     52e:	2264      	movs	r2, #100	; 0x64
     530:	f7ff fee6 	bl	300 <GSM_SendAt>

	int server_conn_count = 0;
     534:	2300      	movs	r3, #0
     536:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	int server_conn_result = FAIL;
     53a:	f04f 33ff 	mov.w	r3, #4294967295
     53e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

	while(1){
		int recLen = ReadUart(response, PORT_GSM);
     542:	463b      	mov	r3, r7
     544:	4618      	mov	r0, r3
     546:	2101      	movs	r1, #1
     548:	f002 f918 	bl	277c <ReadUart>
     54c:	4603      	mov	r3, r0
     54e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
		if( recLen )
     552:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
     556:	2b00      	cmp	r3, #0
     558:	d022      	beq.n	5a0 <GSM_ConnectToTrioUpgradeServer+0x1f8>
		{
			if( strstr(response,"FAIL") != NULL )
     55a:	463b      	mov	r3, r7
     55c:	4618      	mov	r0, r3
     55e:	4958      	ldr	r1, [pc, #352]	; (6c0 <GSM_ConnectToTrioUpgradeServer+0x318>)
     560:	f004 fb07 	bl	4b72 <strstr>
     564:	4603      	mov	r3, r0
     566:	2b00      	cmp	r3, #0
     568:	d000      	beq.n	56c <GSM_ConnectToTrioUpgradeServer+0x1c4>
			{ //ERROR is about format ignore
				break;
     56a:	e02a      	b.n	5c2 <GSM_ConnectToTrioUpgradeServer+0x21a>
			}
			else if( strstr(response,"CONNECT OK") != NULL || strstr(response,"ALREADY CONNECT") != NULL )
     56c:	463b      	mov	r3, r7
     56e:	4618      	mov	r0, r3
     570:	4954      	ldr	r1, [pc, #336]	; (6c4 <GSM_ConnectToTrioUpgradeServer+0x31c>)
     572:	f004 fafe 	bl	4b72 <strstr>
     576:	4603      	mov	r3, r0
     578:	2b00      	cmp	r3, #0
     57a:	d107      	bne.n	58c <GSM_ConnectToTrioUpgradeServer+0x1e4>
     57c:	463b      	mov	r3, r7
     57e:	4618      	mov	r0, r3
     580:	4951      	ldr	r1, [pc, #324]	; (6c8 <GSM_ConnectToTrioUpgradeServer+0x320>)
     582:	f004 faf6 	bl	4b72 <strstr>
     586:	4603      	mov	r3, r0
     588:	2b00      	cmp	r3, #0
     58a:	d009      	beq.n	5a0 <GSM_ConnectToTrioUpgradeServer+0x1f8>
			{
				TraceDumpHex( response, recLen );
     58c:	463b      	mov	r3, r7
     58e:	4618      	mov	r0, r3
     590:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
     594:	f001 fba6 	bl	1ce4 <TraceDumpHex>
				server_conn_result = SUCCESS;
     598:	2300      	movs	r3, #0
     59a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
				break;
     59e:	e010      	b.n	5c2 <GSM_ConnectToTrioUpgradeServer+0x21a>
			}
		}

		WDTFeed();
     5a0:	f002 f9f6 	bl	2990 <WDTFeed>
		DelayMs(300);
     5a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
     5a8:	f001 fb42 	bl	1c30 <DelayMs>
		server_conn_count++;
     5ac:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
     5b0:	3301      	adds	r3, #1
     5b2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		if (server_conn_count > 30)
     5b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
     5ba:	2b1e      	cmp	r3, #30
     5bc:	dd00      	ble.n	5c0 <GSM_ConnectToTrioUpgradeServer+0x218>
			break;
     5be:	e000      	b.n	5c2 <GSM_ConnectToTrioUpgradeServer+0x21a>
	}
     5c0:	e7bf      	b.n	542 <GSM_ConnectToTrioUpgradeServer+0x19a>

	if (server_conn_result == SUCCESS) {
     5c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
     5c6:	2b00      	cmp	r3, #0
     5c8:	d107      	bne.n	5da <GSM_ConnectToTrioUpgradeServer+0x232>
		TraceNL("Connected to the server.");
     5ca:	4840      	ldr	r0, [pc, #256]	; (6cc <GSM_ConnectToTrioUpgradeServer+0x324>)
     5cc:	f001 fb56 	bl	1c7c <TraceNL>
		connectionFailCount = 0;
     5d0:	4b3f      	ldr	r3, [pc, #252]	; (6d0 <GSM_ConnectToTrioUpgradeServer+0x328>)
     5d2:	2200      	movs	r2, #0
     5d4:	601a      	str	r2, [r3, #0]
		return SUCCESS;
     5d6:	2300      	movs	r3, #0
     5d8:	e03d      	b.n	656 <GSM_ConnectToTrioUpgradeServer+0x2ae>
	}

	TraceNL("QIOPEN failed.");
     5da:	483e      	ldr	r0, [pc, #248]	; (6d4 <GSM_ConnectToTrioUpgradeServer+0x32c>)
     5dc:	f001 fb4e 	bl	1c7c <TraceNL>
	connectionFailCount++;
     5e0:	4b3b      	ldr	r3, [pc, #236]	; (6d0 <GSM_ConnectToTrioUpgradeServer+0x328>)
     5e2:	681b      	ldr	r3, [r3, #0]
     5e4:	3301      	adds	r3, #1
     5e6:	4a3a      	ldr	r2, [pc, #232]	; (6d0 <GSM_ConnectToTrioUpgradeServer+0x328>)
     5e8:	6013      	str	r3, [r2, #0]
	if (connectionFailCount > 40 && connectionFailCount % 200 == 0) //10 minutes.
     5ea:	4b39      	ldr	r3, [pc, #228]	; (6d0 <GSM_ConnectToTrioUpgradeServer+0x328>)
     5ec:	681b      	ldr	r3, [r3, #0]
     5ee:	2b28      	cmp	r3, #40	; 0x28
     5f0:	dd17      	ble.n	622 <GSM_ConnectToTrioUpgradeServer+0x27a>
     5f2:	4b37      	ldr	r3, [pc, #220]	; (6d0 <GSM_ConnectToTrioUpgradeServer+0x328>)
     5f4:	681a      	ldr	r2, [r3, #0]
     5f6:	4b38      	ldr	r3, [pc, #224]	; (6d8 <GSM_ConnectToTrioUpgradeServer+0x330>)
     5f8:	fb83 1302 	smull	r1, r3, r3, r2
     5fc:	1199      	asrs	r1, r3, #6
     5fe:	17d3      	asrs	r3, r2, #31
     600:	1acb      	subs	r3, r1, r3
     602:	21c8      	movs	r1, #200	; 0xc8
     604:	fb01 f303 	mul.w	r3, r1, r3
     608:	1ad3      	subs	r3, r2, r3
     60a:	2b00      	cmp	r3, #0
     60c:	d109      	bne.n	622 <GSM_ConnectToTrioUpgradeServer+0x27a>
	{
		TraceNL("Hard resetting module.");
     60e:	4833      	ldr	r0, [pc, #204]	; (6dc <GSM_ConnectToTrioUpgradeServer+0x334>)
     610:	f001 fb34 	bl	1c7c <TraceNL>
		GSM_InitModule(); //Restarts and initializes module.
     614:	f000 f930 	bl	878 <GSM_InitModule>
		last_hard_reset = STT_Value;
     618:	4b31      	ldr	r3, [pc, #196]	; (6e0 <GSM_ConnectToTrioUpgradeServer+0x338>)
     61a:	681b      	ldr	r3, [r3, #0]
     61c:	4a31      	ldr	r2, [pc, #196]	; (6e4 <GSM_ConnectToTrioUpgradeServer+0x33c>)
     61e:	6013      	str	r3, [r2, #0]
     620:	e017      	b.n	652 <GSM_ConnectToTrioUpgradeServer+0x2aa>
	}
	else if (connectionFailCount > 30 && connectionFailCount % 20 == 0){ //100 in production
     622:	4b2b      	ldr	r3, [pc, #172]	; (6d0 <GSM_ConnectToTrioUpgradeServer+0x328>)
     624:	681b      	ldr	r3, [r3, #0]
     626:	2b1e      	cmp	r3, #30
     628:	dd13      	ble.n	652 <GSM_ConnectToTrioUpgradeServer+0x2aa>
     62a:	4b29      	ldr	r3, [pc, #164]	; (6d0 <GSM_ConnectToTrioUpgradeServer+0x328>)
     62c:	6819      	ldr	r1, [r3, #0]
     62e:	4b2e      	ldr	r3, [pc, #184]	; (6e8 <GSM_ConnectToTrioUpgradeServer+0x340>)
     630:	fb83 2301 	smull	r2, r3, r3, r1
     634:	10da      	asrs	r2, r3, #3
     636:	17cb      	asrs	r3, r1, #31
     638:	1ad2      	subs	r2, r2, r3
     63a:	4613      	mov	r3, r2
     63c:	009b      	lsls	r3, r3, #2
     63e:	4413      	add	r3, r2
     640:	009b      	lsls	r3, r3, #2
     642:	1aca      	subs	r2, r1, r3
     644:	2a00      	cmp	r2, #0
     646:	d104      	bne.n	652 <GSM_ConnectToTrioUpgradeServer+0x2aa>
		TraceNL("connectionFailCount > 40 restarting module.");
     648:	4828      	ldr	r0, [pc, #160]	; (6ec <GSM_ConnectToTrioUpgradeServer+0x344>)
     64a:	f001 fb17 	bl	1c7c <TraceNL>
		GSM_InitModule(); //Restarts and initializes module.
     64e:	f000 f913 	bl	878 <GSM_InitModule>
	}
	return FAIL;
     652:	f04f 33ff 	mov.w	r3, #4294967295
}
     656:	4618      	mov	r0, r3
     658:	f507 77b8 	add.w	r7, r7, #368	; 0x170
     65c:	46bd      	mov	sp, r7
     65e:	bd80      	pop	{r7, pc}
     660:	00005c08 	.word	0x00005c08
     664:	00005c30 	.word	0x00005c30
     668:	00005c34 	.word	0x00005c34
     66c:	10000948 	.word	0x10000948
     670:	00005c44 	.word	0x00005c44
     674:	10000964 	.word	0x10000964
     678:	100008f8 	.word	0x100008f8
     67c:	00005c60 	.word	0x00005c60
     680:	00005c6c 	.word	0x00005c6c
     684:	00005c80 	.word	0x00005c80
     688:	00005c94 	.word	0x00005c94
     68c:	00005ca4 	.word	0x00005ca4
     690:	00005cb4 	.word	0x00005cb4
     694:	00005cc0 	.word	0x00005cc0
     698:	00005ccc 	.word	0x00005ccc
     69c:	100008a8 	.word	0x100008a8
     6a0:	000063f4 	.word	0x000063f4
     6a4:	00005cd8 	.word	0x00005cd8
     6a8:	00005ce8 	.word	0x00005ce8
     6ac:	00005cf8 	.word	0x00005cf8
     6b0:	00005d08 	.word	0x00005d08
     6b4:	00005d0c 	.word	0x00005d0c
     6b8:	10000000 	.word	0x10000000
     6bc:	10000014 	.word	0x10000014
     6c0:	00005d28 	.word	0x00005d28
     6c4:	00005d30 	.word	0x00005d30
     6c8:	00005d3c 	.word	0x00005d3c
     6cc:	00005d4c 	.word	0x00005d4c
     6d0:	10000028 	.word	0x10000028
     6d4:	00005d68 	.word	0x00005d68
     6d8:	51eb851f 	.word	0x51eb851f
     6dc:	00005d78 	.word	0x00005d78
     6e0:	1000091c 	.word	0x1000091c
     6e4:	1000001c 	.word	0x1000001c
     6e8:	66666667 	.word	0x66666667
     6ec:	00005d90 	.word	0x00005d90

000006f0 <GSM_TCP_Send>:
** Returned value:	greater than 0 to indicate number of characters transferred
**
**                  a value less than 0 is error code, tobe defined later.
******************************************************************************/
int GSM_TCP_Send( char* msg, uint16_t len )
{
     6f0:	b580      	push	{r7, lr}
     6f2:	b0ce      	sub	sp, #312	; 0x138
     6f4:	af00      	add	r7, sp, #0
     6f6:	1d3b      	adds	r3, r7, #4
     6f8:	6018      	str	r0, [r3, #0]
     6fa:	460a      	mov	r2, r1
     6fc:	1cbb      	adds	r3, r7, #2
     6fe:	801a      	strh	r2, [r3, #0]
	char response[200];
	char buffer[100];

	TraceNL("Entered GSM_TCP_Send");
     700:	4835      	ldr	r0, [pc, #212]	; (7d8 <GSM_TCP_Send+0xe8>)
     702:	f001 fabb 	bl	1c7c <TraceNL>

	GSM_SendAt( "AT", response, 100 ); //Empty buffer
     706:	f107 036c 	add.w	r3, r7, #108	; 0x6c
     70a:	4834      	ldr	r0, [pc, #208]	; (7dc <GSM_TCP_Send+0xec>)
     70c:	4619      	mov	r1, r3
     70e:	2264      	movs	r2, #100	; 0x64
     710:	f7ff fdf6 	bl	300 <GSM_SendAt>

	sprintf( buffer, "AT+QISEND=%d", len );
     714:	1cbb      	adds	r3, r7, #2
     716:	881b      	ldrh	r3, [r3, #0]
     718:	f107 0208 	add.w	r2, r7, #8
     71c:	4610      	mov	r0, r2
     71e:	4930      	ldr	r1, [pc, #192]	; (7e0 <GSM_TCP_Send+0xf0>)
     720:	461a      	mov	r2, r3
     722:	f002 fd6d 	bl	3200 <sprintf>
	GSM_SendAt( buffer, response, 100 );
     726:	f107 0208 	add.w	r2, r7, #8
     72a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
     72e:	4610      	mov	r0, r2
     730:	4619      	mov	r1, r3
     732:	2264      	movs	r2, #100	; 0x64
     734:	f7ff fde4 	bl	300 <GSM_SendAt>

	if( strchr(response, '>') != NULL )
     738:	f107 036c 	add.w	r3, r7, #108	; 0x6c
     73c:	4618      	mov	r0, r3
     73e:	213e      	movs	r1, #62	; 0x3e
     740:	f004 f998 	bl	4a74 <strchr>
     744:	4603      	mov	r3, r0
     746:	2b00      	cmp	r3, #0
     748:	d03b      	beq.n	7c2 <GSM_TCP_Send+0xd2>
	{
		UARTSend( PORT_GSM, msg, len );
     74a:	1cbb      	adds	r3, r7, #2
     74c:	881a      	ldrh	r2, [r3, #0]
     74e:	1d3b      	adds	r3, r7, #4
     750:	2001      	movs	r0, #1
     752:	6819      	ldr	r1, [r3, #0]
     754:	f001 ff76 	bl	2644 <UARTSend>

		DelayMs( 300 );
     758:	f44f 7096 	mov.w	r0, #300	; 0x12c
     75c:	f001 fa68 	bl	1c30 <DelayMs>

		ReadUart( response, PORT_GSM );
     760:	f107 036c 	add.w	r3, r7, #108	; 0x6c
     764:	4618      	mov	r0, r3
     766:	2101      	movs	r1, #1
     768:	f002 f808 	bl	277c <ReadUart>
		int sendOkCheck = 0;
     76c:	2300      	movs	r3, #0
     76e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

		while( strstr( response, "SEND OK" ) == NULL )
     772:	e017      	b.n	7a4 <GSM_TCP_Send+0xb4>
		{
			TraceNL( "Send OK whiling.." );
     774:	481b      	ldr	r0, [pc, #108]	; (7e4 <GSM_TCP_Send+0xf4>)
     776:	f001 fa81 	bl	1c7c <TraceNL>
			if ( sendOkCheck > 20 )
     77a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
     77e:	2b14      	cmp	r3, #20
     780:	dd02      	ble.n	788 <GSM_TCP_Send+0x98>
				return ( FAIL );
     782:	f04f 33ff 	mov.w	r3, #4294967295
     786:	e021      	b.n	7cc <GSM_TCP_Send+0xdc>

			DelayMs( 100 );
     788:	2064      	movs	r0, #100	; 0x64
     78a:	f001 fa51 	bl	1c30 <DelayMs>
			ReadUart( response, PORT_GSM );
     78e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
     792:	4618      	mov	r0, r3
     794:	2101      	movs	r1, #1
     796:	f001 fff1 	bl	277c <ReadUart>

			sendOkCheck++;
     79a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
     79e:	3301      	adds	r3, #1
     7a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		DelayMs( 300 );

		ReadUart( response, PORT_GSM );
		int sendOkCheck = 0;

		while( strstr( response, "SEND OK" ) == NULL )
     7a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
     7a8:	4618      	mov	r0, r3
     7aa:	490f      	ldr	r1, [pc, #60]	; (7e8 <GSM_TCP_Send+0xf8>)
     7ac:	f004 f9e1 	bl	4b72 <strstr>
     7b0:	4603      	mov	r3, r0
     7b2:	2b00      	cmp	r3, #0
     7b4:	d0de      	beq.n	774 <GSM_TCP_Send+0x84>
			DelayMs( 100 );
			ReadUart( response, PORT_GSM );

			sendOkCheck++;
		}
		TraceNL( "Data sent." );
     7b6:	480d      	ldr	r0, [pc, #52]	; (7ec <GSM_TCP_Send+0xfc>)
     7b8:	f001 fa60 	bl	1c7c <TraceNL>
		return ( len );
     7bc:	1cbb      	adds	r3, r7, #2
     7be:	881b      	ldrh	r3, [r3, #0]
     7c0:	e004      	b.n	7cc <GSM_TCP_Send+0xdc>
	}
	TraceNL( "Data fail." );
     7c2:	480b      	ldr	r0, [pc, #44]	; (7f0 <GSM_TCP_Send+0x100>)
     7c4:	f001 fa5a 	bl	1c7c <TraceNL>
	return ( FAIL );
     7c8:	f04f 33ff 	mov.w	r3, #4294967295
}
     7cc:	4618      	mov	r0, r3
     7ce:	f507 779c 	add.w	r7, r7, #312	; 0x138
     7d2:	46bd      	mov	sp, r7
     7d4:	bd80      	pop	{r7, pc}
     7d6:	bf00      	nop
     7d8:	00005e24 	.word	0x00005e24
     7dc:	00005d08 	.word	0x00005d08
     7e0:	00005dd8 	.word	0x00005dd8
     7e4:	00005de8 	.word	0x00005de8
     7e8:	00005dfc 	.word	0x00005dfc
     7ec:	00005e04 	.word	0x00005e04
     7f0:	00005e18 	.word	0x00005e18

000007f4 <GSM_TogglePwrKey>:

void GSM_TogglePwrKey() {
     7f4:	b580      	push	{r7, lr}
     7f6:	af00      	add	r7, sp, #0
	//Toggle PWR_KEY
	LPC_GPIO2->FIOSET = (1 << 3);
     7f8:	4b05      	ldr	r3, [pc, #20]	; (810 <GSM_TogglePwrKey+0x1c>)
     7fa:	2208      	movs	r2, #8
     7fc:	619a      	str	r2, [r3, #24]
	DelayMs(2000);
     7fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     802:	f001 fa15 	bl	1c30 <DelayMs>
	LPC_GPIO2->FIOCLR = (1 << 3);
     806:	4b02      	ldr	r3, [pc, #8]	; (810 <GSM_TogglePwrKey+0x1c>)
     808:	2208      	movs	r2, #8
     80a:	61da      	str	r2, [r3, #28]
}
     80c:	bd80      	pop	{r7, pc}
     80e:	bf00      	nop
     810:	2009c040 	.word	0x2009c040

00000814 <GSM_ShutdownModule>:

int GSM_ShutdownModule() {
     814:	b580      	push	{r7, lr}
     816:	b09a      	sub	sp, #104	; 0x68
     818:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+QPOWD=0", response, 500);
     81a:	1d3b      	adds	r3, r7, #4
     81c:	4813      	ldr	r0, [pc, #76]	; (86c <GSM_ShutdownModule+0x58>)
     81e:	4619      	mov	r1, r3
     820:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     824:	f7ff fd6c 	bl	300 <GSM_SendAt>
	DelayMs(1000);
     828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     82c:	f001 fa00 	bl	1c30 <DelayMs>
	memset(response, 0, sizeof(response));
     830:	1d3b      	adds	r3, r7, #4
     832:	4618      	mov	r0, r3
     834:	2100      	movs	r1, #0
     836:	2264      	movs	r2, #100	; 0x64
     838:	f002 fca8 	bl	318c <memset>
	GSM_SendAt("AT", response, 500);
     83c:	1d3b      	adds	r3, r7, #4
     83e:	480c      	ldr	r0, [pc, #48]	; (870 <GSM_ShutdownModule+0x5c>)
     840:	4619      	mov	r1, r3
     842:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     846:	f7ff fd5b 	bl	300 <GSM_SendAt>
	if (strstr(response, "OK") == NULL) {
     84a:	1d3b      	adds	r3, r7, #4
     84c:	4618      	mov	r0, r3
     84e:	4909      	ldr	r1, [pc, #36]	; (874 <GSM_ShutdownModule+0x60>)
     850:	f004 f98f 	bl	4b72 <strstr>
     854:	4603      	mov	r3, r0
     856:	2b00      	cmp	r3, #0
     858:	d101      	bne.n	85e <GSM_ShutdownModule+0x4a>
		return ( SUCCESS );
     85a:	2300      	movs	r3, #0
     85c:	e001      	b.n	862 <GSM_ShutdownModule+0x4e>
	}
	return ( FAIL );
     85e:	f04f 33ff 	mov.w	r3, #4294967295
}
     862:	4618      	mov	r0, r3
     864:	3768      	adds	r7, #104	; 0x68
     866:	46bd      	mov	sp, r7
     868:	bd80      	pop	{r7, pc}
     86a:	bf00      	nop
     86c:	00005e3c 	.word	0x00005e3c
     870:	00005d08 	.word	0x00005d08
     874:	00005e48 	.word	0x00005e48

00000878 <GSM_InitModule>:
	LPC_GPIO2->FIOCLR = (1 << 2);

	return ( SUCCESS );
}

int GSM_InitModule() {
     878:	b580      	push	{r7, lr}
     87a:	b09c      	sub	sp, #112	; 0x70
     87c:	af00      	add	r7, sp, #0
	//Unset EMERG
	char response[100];
	LPC_GPIO2->FIOCLR = (1 << 2);
     87e:	4b30      	ldr	r3, [pc, #192]	; (940 <GSM_InitModule+0xc8>)
     880:	2204      	movs	r2, #4
     882:	61da      	str	r2, [r3, #28]
	DelayMs(1000);
     884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     888:	f001 f9d2 	bl	1c30 <DelayMs>
	GSM_TogglePwrKey();
     88c:	f7ff ffb2 	bl	7f4 <GSM_TogglePwrKey>
	int i = 0;
     890:	2300      	movs	r3, #0
     892:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (i = 0; i < 20; i++) {
     894:	2300      	movs	r3, #0
     896:	66fb      	str	r3, [r7, #108]	; 0x6c
     898:	e048      	b.n	92c <GSM_InitModule+0xb4>
		GSM_SendAt("AT", response, 500);
     89a:	1d3b      	adds	r3, r7, #4
     89c:	4829      	ldr	r0, [pc, #164]	; (944 <GSM_InitModule+0xcc>)
     89e:	4619      	mov	r1, r3
     8a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     8a4:	f7ff fd2c 	bl	300 <GSM_SendAt>

//		TraceDumpHex( response, strlen(response) );
		if (strstr(response, "OK") != NULL) {
     8a8:	1d3b      	adds	r3, r7, #4
     8aa:	4618      	mov	r0, r3
     8ac:	4926      	ldr	r1, [pc, #152]	; (948 <GSM_InitModule+0xd0>)
     8ae:	f004 f960 	bl	4b72 <strstr>
     8b2:	4603      	mov	r3, r0
     8b4:	2b00      	cmp	r3, #0
     8b6:	d036      	beq.n	926 <GSM_InitModule+0xae>

//			GSM_Set1152008N1( );
//
//			UARTInit(PORT_GSM, 115200);
			GSM_SendAt("AT+CMEE=2", response, 500);
     8b8:	1d3b      	adds	r3, r7, #4
     8ba:	4824      	ldr	r0, [pc, #144]	; (94c <GSM_InitModule+0xd4>)
     8bc:	4619      	mov	r1, r3
     8be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     8c2:	f7ff fd1d 	bl	300 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			DelayMs(500);
     8c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     8ca:	f001 f9b1 	bl	1c30 <DelayMs>
			//Init SMS
			//SMS Text Mode
			GSM_SendAt("AT+CMGF=1", response, 500);
     8ce:	1d3b      	adds	r3, r7, #4
     8d0:	481f      	ldr	r0, [pc, #124]	; (950 <GSM_InitModule+0xd8>)
     8d2:	4619      	mov	r1, r3
     8d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     8d8:	f7ff fd12 	bl	300 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			//Initialize SMS, if not new messages does not cause +CMTI
			GSM_SendAt("AT+CNMI=2,1,0,0,0", response, 500);
     8dc:	1d3b      	adds	r3, r7, #4
     8de:	481d      	ldr	r0, [pc, #116]	; (954 <GSM_InitModule+0xdc>)
     8e0:	4619      	mov	r1, r3
     8e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     8e6:	f7ff fd0b 	bl	300 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			int sim_check = FAIL;
     8ea:	f04f 33ff 	mov.w	r3, #4294967295
     8ee:	66bb      	str	r3, [r7, #104]	; 0x68
			for(;i<40;i++){
     8f0:	e014      	b.n	91c <GSM_InitModule+0xa4>
				sim_check = GSM_CheckSimCard();
     8f2:	f000 f867 	bl	9c4 <GSM_CheckSimCard>
     8f6:	66b8      	str	r0, [r7, #104]	; 0x68
				if (sim_check == SUCCESS){
     8f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     8fa:	2b00      	cmp	r3, #0
     8fc:	d103      	bne.n	906 <GSM_InitModule+0x8e>
					TraceNL("Sim card ready..\r");
     8fe:	4816      	ldr	r0, [pc, #88]	; (958 <GSM_InitModule+0xe0>)
     900:	f001 f9bc 	bl	1c7c <TraceNL>
					break;
     904:	e00d      	b.n	922 <GSM_InitModule+0xaa>
				}
				else
					TraceNL("Sim not ready!\r");
     906:	4815      	ldr	r0, [pc, #84]	; (95c <GSM_InitModule+0xe4>)
     908:	f001 f9b8 	bl	1c7c <TraceNL>
				DelayMs(200);
     90c:	20c8      	movs	r0, #200	; 0xc8
     90e:	f001 f98f 	bl	1c30 <DelayMs>
				WDTFeed();
     912:	f002 f83d 	bl	2990 <WDTFeed>
//			TraceDumpHex( response, strlen(response) );
			//Initialize SMS, if not new messages does not cause +CMTI
			GSM_SendAt("AT+CNMI=2,1,0,0,0", response, 500);
//			TraceDumpHex( response, strlen(response) );
			int sim_check = FAIL;
			for(;i<40;i++){
     916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     918:	3301      	adds	r3, #1
     91a:	66fb      	str	r3, [r7, #108]	; 0x6c
     91c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     91e:	2b27      	cmp	r3, #39	; 0x27
     920:	dde7      	ble.n	8f2 <GSM_InitModule+0x7a>
				else
					TraceNL("Sim not ready!\r");
				DelayMs(200);
				WDTFeed();
			}
			return sim_check;
     922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     924:	e007      	b.n	936 <GSM_InitModule+0xbe>
	char response[100];
	LPC_GPIO2->FIOCLR = (1 << 2);
	DelayMs(1000);
	GSM_TogglePwrKey();
	int i = 0;
	for (i = 0; i < 20; i++) {
     926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     928:	3301      	adds	r3, #1
     92a:	66fb      	str	r3, [r7, #108]	; 0x6c
     92c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     92e:	2b13      	cmp	r3, #19
     930:	ddb3      	ble.n	89a <GSM_InitModule+0x22>
				WDTFeed();
			}
			return sim_check;
		}
	}
	return FAIL;
     932:	f04f 33ff 	mov.w	r3, #4294967295
}
     936:	4618      	mov	r0, r3
     938:	3770      	adds	r7, #112	; 0x70
     93a:	46bd      	mov	sp, r7
     93c:	bd80      	pop	{r7, pc}
     93e:	bf00      	nop
     940:	2009c040 	.word	0x2009c040
     944:	00005d08 	.word	0x00005d08
     948:	00005e48 	.word	0x00005e48
     94c:	00005e4c 	.word	0x00005e4c
     950:	00005e58 	.word	0x00005e58
     954:	00005e64 	.word	0x00005e64
     958:	00005e78 	.word	0x00005e78
     95c:	00005e8c 	.word	0x00005e8c

00000960 <GSM_GetRegStat>:




int GSM_GetRegStat(){
     960:	b580      	push	{r7, lr}
     962:	b09a      	sub	sp, #104	; 0x68
     964:	af00      	add	r7, sp, #0

	char response[100];
	GSM_SendAt("AT+CREG?", response, 100);
     966:	1d3b      	adds	r3, r7, #4
     968:	4812      	ldr	r0, [pc, #72]	; (9b4 <GSM_GetRegStat+0x54>)
     96a:	4619      	mov	r1, r3
     96c:	2264      	movs	r2, #100	; 0x64
     96e:	f7ff fcc7 	bl	300 <GSM_SendAt>
	if (strstr(response, "+CREG") != NULL && ((strstr(response, ",5") != NULL) || (strstr(response, ",1") != NULL))) {
     972:	1d3b      	adds	r3, r7, #4
     974:	4618      	mov	r0, r3
     976:	4910      	ldr	r1, [pc, #64]	; (9b8 <GSM_GetRegStat+0x58>)
     978:	f004 f8fb 	bl	4b72 <strstr>
     97c:	4603      	mov	r3, r0
     97e:	2b00      	cmp	r3, #0
     980:	d011      	beq.n	9a6 <GSM_GetRegStat+0x46>
     982:	1d3b      	adds	r3, r7, #4
     984:	4618      	mov	r0, r3
     986:	490d      	ldr	r1, [pc, #52]	; (9bc <GSM_GetRegStat+0x5c>)
     988:	f004 f8f3 	bl	4b72 <strstr>
     98c:	4603      	mov	r3, r0
     98e:	2b00      	cmp	r3, #0
     990:	d107      	bne.n	9a2 <GSM_GetRegStat+0x42>
     992:	1d3b      	adds	r3, r7, #4
     994:	4618      	mov	r0, r3
     996:	490a      	ldr	r1, [pc, #40]	; (9c0 <GSM_GetRegStat+0x60>)
     998:	f004 f8eb 	bl	4b72 <strstr>
     99c:	4603      	mov	r3, r0
     99e:	2b00      	cmp	r3, #0
     9a0:	d001      	beq.n	9a6 <GSM_GetRegStat+0x46>
		return SUCCESS;
     9a2:	2300      	movs	r3, #0
     9a4:	e001      	b.n	9aa <GSM_GetRegStat+0x4a>
	}
	return FAIL;
     9a6:	f04f 33ff 	mov.w	r3, #4294967295
}
     9aa:	4618      	mov	r0, r3
     9ac:	3768      	adds	r7, #104	; 0x68
     9ae:	46bd      	mov	sp, r7
     9b0:	bd80      	pop	{r7, pc}
     9b2:	bf00      	nop
     9b4:	00005e9c 	.word	0x00005e9c
     9b8:	00005ea8 	.word	0x00005ea8
     9bc:	00005eb0 	.word	0x00005eb0
     9c0:	00005eb4 	.word	0x00005eb4

000009c4 <GSM_CheckSimCard>:
	}
	cell_str[index] = '\0';
}


int GSM_CheckSimCard() {
     9c4:	b580      	push	{r7, lr}
     9c6:	b09a      	sub	sp, #104	; 0x68
     9c8:	af00      	add	r7, sp, #0
	TraceNL("Entered check sim card.");
     9ca:	480c      	ldr	r0, [pc, #48]	; (9fc <GSM_CheckSimCard+0x38>)
     9cc:	f001 f956 	bl	1c7c <TraceNL>
	char response[100];
	GSM_SendAt("AT+CPIN?", response, 250);
     9d0:	1d3b      	adds	r3, r7, #4
     9d2:	480b      	ldr	r0, [pc, #44]	; (a00 <GSM_CheckSimCard+0x3c>)
     9d4:	4619      	mov	r1, r3
     9d6:	22fa      	movs	r2, #250	; 0xfa
     9d8:	f7ff fc92 	bl	300 <GSM_SendAt>
	if (strstr(response, "READY") != NULL)
     9dc:	1d3b      	adds	r3, r7, #4
     9de:	4618      	mov	r0, r3
     9e0:	4908      	ldr	r1, [pc, #32]	; (a04 <GSM_CheckSimCard+0x40>)
     9e2:	f004 f8c6 	bl	4b72 <strstr>
     9e6:	4603      	mov	r3, r0
     9e8:	2b00      	cmp	r3, #0
     9ea:	d001      	beq.n	9f0 <GSM_CheckSimCard+0x2c>
		return ( SUCCESS );
     9ec:	2300      	movs	r3, #0
     9ee:	e001      	b.n	9f4 <GSM_CheckSimCard+0x30>
	return ( FAIL );
     9f0:	f04f 33ff 	mov.w	r3, #4294967295
}
     9f4:	4618      	mov	r0, r3
     9f6:	3768      	adds	r7, #104	; 0x68
     9f8:	46bd      	mov	sp, r7
     9fa:	bd80      	pop	{r7, pc}
     9fc:	00005eb8 	.word	0x00005eb8
     a00:	00005ed0 	.word	0x00005ed0
     a04:	00005edc 	.word	0x00005edc

00000a08 <GSM_GetImei>:

void GSM_GetImei() {
     a08:	b580      	push	{r7, lr}
     a0a:	b09a      	sub	sp, #104	; 0x68
     a0c:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+GSN", response, 500);
     a0e:	1d3b      	adds	r3, r7, #4
     a10:	480a      	ldr	r0, [pc, #40]	; (a3c <GSM_GetImei+0x34>)
     a12:	4619      	mov	r1, r3
     a14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     a18:	f7ff fc72 	bl	300 <GSM_SendAt>
	TraceNL("IMEI : ");
     a1c:	4808      	ldr	r0, [pc, #32]	; (a40 <GSM_GetImei+0x38>)
     a1e:	f001 f92d 	bl	1c7c <TraceNL>
	strncpy(imei, response + 9, 15);
     a22:	1d3b      	adds	r3, r7, #4
     a24:	3309      	adds	r3, #9
     a26:	4807      	ldr	r0, [pc, #28]	; (a44 <GSM_GetImei+0x3c>)
     a28:	4619      	mov	r1, r3
     a2a:	220f      	movs	r2, #15
     a2c:	f004 f875 	bl	4b1a <strncpy>
	TraceNL(imei);
     a30:	4804      	ldr	r0, [pc, #16]	; (a44 <GSM_GetImei+0x3c>)
     a32:	f001 f923 	bl	1c7c <TraceNL>
}
     a36:	3768      	adds	r7, #104	; 0x68
     a38:	46bd      	mov	sp, r7
     a3a:	bd80      	pop	{r7, pc}
     a3c:	00005ee4 	.word	0x00005ee4
     a40:	00005eec 	.word	0x00005eec
     a44:	10000998 	.word	0x10000998

00000a48 <GSM_GetImsi>:

void GSM_GetImsi() {
     a48:	b590      	push	{r4, r7, lr}
     a4a:	b09d      	sub	sp, #116	; 0x74
     a4c:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+CIMI", response, 500);
     a4e:	463b      	mov	r3, r7
     a50:	4827      	ldr	r0, [pc, #156]	; (af0 <GSM_GetImsi+0xa8>)
     a52:	4619      	mov	r1, r3
     a54:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     a58:	f7ff fc52 	bl	300 <GSM_SendAt>
	Trace("IMSI : ");
     a5c:	4825      	ldr	r0, [pc, #148]	; (af4 <GSM_GetImsi+0xac>)
     a5e:	f001 f8fd 	bl	1c5c <Trace>
	int i;
	int index = 0;
     a62:	2300      	movs	r3, #0
     a64:	66bb      	str	r3, [r7, #104]	; 0x68
	int is_start = 0;
     a66:	2300      	movs	r3, #0
     a68:	667b      	str	r3, [r7, #100]	; 0x64
	for (i = 0; i < strlen(response); i++) {
     a6a:	2300      	movs	r3, #0
     a6c:	66fb      	str	r3, [r7, #108]	; 0x6c
     a6e:	e02c      	b.n	aca <GSM_GetImsi+0x82>
		if (index > 19)
     a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     a72:	2b13      	cmp	r3, #19
     a74:	dd00      	ble.n	a78 <GSM_GetImsi+0x30>
			break;
     a76:	e030      	b.n	ada <GSM_GetImsi+0x92>
		if ( isdigit(response[i]))
     a78:	463a      	mov	r2, r7
     a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     a7c:	4413      	add	r3, r2
     a7e:	781b      	ldrb	r3, [r3, #0]
     a80:	3380      	adds	r3, #128	; 0x80
     a82:	4a1d      	ldr	r2, [pc, #116]	; (af8 <GSM_GetImsi+0xb0>)
     a84:	5cd3      	ldrb	r3, [r2, r3]
     a86:	f003 0320 	and.w	r3, r3, #32
     a8a:	2b00      	cmp	r3, #0
     a8c:	d001      	beq.n	a92 <GSM_GetImsi+0x4a>
			is_start = 1;
     a8e:	2301      	movs	r3, #1
     a90:	667b      	str	r3, [r7, #100]	; 0x64
		if (is_start == 1 && response[i] == '\n')
     a92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     a94:	2b01      	cmp	r3, #1
     a96:	d106      	bne.n	aa6 <GSM_GetImsi+0x5e>
     a98:	463a      	mov	r2, r7
     a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     a9c:	4413      	add	r3, r2
     a9e:	781b      	ldrb	r3, [r3, #0]
     aa0:	2b0a      	cmp	r3, #10
     aa2:	d100      	bne.n	aa6 <GSM_GetImsi+0x5e>
			break;
     aa4:	e019      	b.n	ada <GSM_GetImsi+0x92>
		if (is_start == 1) {
     aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     aa8:	2b01      	cmp	r3, #1
     aaa:	d10b      	bne.n	ac4 <GSM_GetImsi+0x7c>
			imsi[index] = response[i];
     aac:	463a      	mov	r2, r7
     aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     ab0:	4413      	add	r3, r2
     ab2:	7819      	ldrb	r1, [r3, #0]
     ab4:	4a11      	ldr	r2, [pc, #68]	; (afc <GSM_GetImsi+0xb4>)
     ab6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     ab8:	4413      	add	r3, r2
     aba:	460a      	mov	r2, r1
     abc:	701a      	strb	r2, [r3, #0]
			index++;
     abe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     ac0:	3301      	adds	r3, #1
     ac2:	66bb      	str	r3, [r7, #104]	; 0x68
	GSM_SendAt("AT+CIMI", response, 500);
	Trace("IMSI : ");
	int i;
	int index = 0;
	int is_start = 0;
	for (i = 0; i < strlen(response); i++) {
     ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     ac6:	3301      	adds	r3, #1
     ac8:	66fb      	str	r3, [r7, #108]	; 0x6c
     aca:	6efc      	ldr	r4, [r7, #108]	; 0x6c
     acc:	463b      	mov	r3, r7
     ace:	4618      	mov	r0, r3
     ad0:	f003 fffe 	bl	4ad0 <strlen>
     ad4:	4603      	mov	r3, r0
     ad6:	429c      	cmp	r4, r3
     ad8:	d3ca      	bcc.n	a70 <GSM_GetImsi+0x28>
		if (is_start == 1) {
			imsi[index] = response[i];
			index++;
		}
	}
	imsi[index - 1] = '\0';
     ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     adc:	3b01      	subs	r3, #1
     ade:	4a07      	ldr	r2, [pc, #28]	; (afc <GSM_GetImsi+0xb4>)
     ae0:	2100      	movs	r1, #0
     ae2:	54d1      	strb	r1, [r2, r3]
	TraceNL(imsi);
     ae4:	4805      	ldr	r0, [pc, #20]	; (afc <GSM_GetImsi+0xb4>)
     ae6:	f001 f8c9 	bl	1c7c <TraceNL>
}
     aea:	3774      	adds	r7, #116	; 0x74
     aec:	46bd      	mov	sp, r7
     aee:	bd90      	pop	{r4, r7, pc}
     af0:	00005ef4 	.word	0x00005ef4
     af4:	00005efc 	.word	0x00005efc
     af8:	000063f4 	.word	0x000063f4
     afc:	10000984 	.word	0x10000984

00000b00 <GSM_TCP_Close>:
	GSM_SendAt("ATE0", response, 500);
	TraceNL("ECHO OFF");
}

void GSM_TCP_Close( void )
{
     b00:	b580      	push	{r7, lr}
     b02:	b0b2      	sub	sp, #200	; 0xc8
     b04:	af00      	add	r7, sp, #0
	char response[200];
	GSM_SendAt("AT+QICLOSE", response, 500);
     b06:	463b      	mov	r3, r7
     b08:	4805      	ldr	r0, [pc, #20]	; (b20 <GSM_TCP_Close+0x20>)
     b0a:	4619      	mov	r1, r3
     b0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     b10:	f7ff fbf6 	bl	300 <GSM_SendAt>
	TraceNL("CLOSE TCP connection ");
     b14:	4803      	ldr	r0, [pc, #12]	; (b24 <GSM_TCP_Close+0x24>)
     b16:	f001 f8b1 	bl	1c7c <TraceNL>

}
     b1a:	37c8      	adds	r7, #200	; 0xc8
     b1c:	46bd      	mov	sp, r7
     b1e:	bd80      	pop	{r7, pc}
     b20:	00005f28 	.word	0x00005f28
     b24:	00005f34 	.word	0x00005f34

00000b28 <reflect>:
 * Returns:		The reflection of the original data.
 *
 *********************************************************************/
static unsigned long
reflect(unsigned long data, unsigned char nBits)
{
     b28:	b480      	push	{r7}
     b2a:	b085      	sub	sp, #20
     b2c:	af00      	add	r7, sp, #0
     b2e:	6078      	str	r0, [r7, #4]
     b30:	460b      	mov	r3, r1
     b32:	70fb      	strb	r3, [r7, #3]
	unsigned long  reflection = 0x00000000;
     b34:	2300      	movs	r3, #0
     b36:	60fb      	str	r3, [r7, #12]
	unsigned char  bit;

	/*
	 * Reflect the data about the center bit.
	 */
	for (bit = 0; bit < nBits; ++bit)
     b38:	2300      	movs	r3, #0
     b3a:	72fb      	strb	r3, [r7, #11]
     b3c:	e015      	b.n	b6a <reflect+0x42>
	{
		/*
		 * If the LSB bit is set, set the reflection of it.
		 */
		if (data & 0x01)
     b3e:	687b      	ldr	r3, [r7, #4]
     b40:	f003 0301 	and.w	r3, r3, #1
     b44:	2b00      	cmp	r3, #0
     b46:	d00a      	beq.n	b5e <reflect+0x36>
		{
			reflection |= (1 << ((nBits - 1) - bit));
     b48:	78fb      	ldrb	r3, [r7, #3]
     b4a:	1e5a      	subs	r2, r3, #1
     b4c:	7afb      	ldrb	r3, [r7, #11]
     b4e:	1ad3      	subs	r3, r2, r3
     b50:	2201      	movs	r2, #1
     b52:	fa02 f303 	lsl.w	r3, r2, r3
     b56:	461a      	mov	r2, r3
     b58:	68fb      	ldr	r3, [r7, #12]
     b5a:	4313      	orrs	r3, r2
     b5c:	60fb      	str	r3, [r7, #12]
		}

		data = (data >> 1);
     b5e:	687b      	ldr	r3, [r7, #4]
     b60:	085b      	lsrs	r3, r3, #1
     b62:	607b      	str	r3, [r7, #4]
	unsigned char  bit;

	/*
	 * Reflect the data about the center bit.
	 */
	for (bit = 0; bit < nBits; ++bit)
     b64:	7afb      	ldrb	r3, [r7, #11]
     b66:	3301      	adds	r3, #1
     b68:	72fb      	strb	r3, [r7, #11]
     b6a:	7afa      	ldrb	r2, [r7, #11]
     b6c:	78fb      	ldrb	r3, [r7, #3]
     b6e:	429a      	cmp	r2, r3
     b70:	d3e5      	bcc.n	b3e <reflect+0x16>
		}

		data = (data >> 1);
	}

	return (reflection);
     b72:	68fb      	ldr	r3, [r7, #12]

}	/* reflect() */
     b74:	4618      	mov	r0, r3
     b76:	3714      	adds	r7, #20
     b78:	46bd      	mov	sp, r7
     b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
     b7e:	4770      	bx	lr

00000b80 <crcInit>:
 * Returns:		None defined.
 *
 *********************************************************************/
void
crcInit(void)
{
     b80:	b480      	push	{r7}
     b82:	b085      	sub	sp, #20
     b84:	af00      	add	r7, sp, #0


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
     b86:	2300      	movs	r3, #0
     b88:	60bb      	str	r3, [r7, #8]
     b8a:	e01f      	b.n	bcc <crcInit+0x4c>
    {
        /*
         * Start with the dividend followed by zeros.
         */
        remainder = dividend << (WIDTH - 8);
     b8c:	68bb      	ldr	r3, [r7, #8]
     b8e:	061b      	lsls	r3, r3, #24
     b90:	60fb      	str	r3, [r7, #12]

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
     b92:	2308      	movs	r3, #8
     b94:	71fb      	strb	r3, [r7, #7]
     b96:	e00e      	b.n	bb6 <crcInit+0x36>
        {
            /*
             * Try to divide the current data bit.
             */
            if (remainder & TOPBIT)
     b98:	68fb      	ldr	r3, [r7, #12]
     b9a:	2b00      	cmp	r3, #0
     b9c:	da05      	bge.n	baa <crcInit+0x2a>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
     b9e:	68fb      	ldr	r3, [r7, #12]
     ba0:	005a      	lsls	r2, r3, #1
     ba2:	4b0e      	ldr	r3, [pc, #56]	; (bdc <crcInit+0x5c>)
     ba4:	4053      	eors	r3, r2
     ba6:	60fb      	str	r3, [r7, #12]
     ba8:	e002      	b.n	bb0 <crcInit+0x30>
            }
            else
            {
                remainder = (remainder << 1);
     baa:	68fb      	ldr	r3, [r7, #12]
     bac:	005b      	lsls	r3, r3, #1
     bae:	60fb      	str	r3, [r7, #12]
        remainder = dividend << (WIDTH - 8);

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
     bb0:	79fb      	ldrb	r3, [r7, #7]
     bb2:	3b01      	subs	r3, #1
     bb4:	71fb      	strb	r3, [r7, #7]
     bb6:	79fb      	ldrb	r3, [r7, #7]
     bb8:	2b00      	cmp	r3, #0
     bba:	d1ed      	bne.n	b98 <crcInit+0x18>
        }

        /*
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
     bbc:	4908      	ldr	r1, [pc, #32]	; (be0 <crcInit+0x60>)
     bbe:	68bb      	ldr	r3, [r7, #8]
     bc0:	68fa      	ldr	r2, [r7, #12]
     bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
     bc6:	68bb      	ldr	r3, [r7, #8]
     bc8:	3301      	adds	r3, #1
     bca:	60bb      	str	r3, [r7, #8]
     bcc:	68bb      	ldr	r3, [r7, #8]
     bce:	2bff      	cmp	r3, #255	; 0xff
     bd0:	dddc      	ble.n	b8c <crcInit+0xc>
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    }

}   /* crcInit() */
     bd2:	3714      	adds	r7, #20
     bd4:	46bd      	mov	sp, r7
     bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
     bda:	4770      	bx	lr
     bdc:	04c11db7 	.word	0x04c11db7
     be0:	100009ac 	.word	0x100009ac

00000be4 <crcFast>:
 * Returns:		The CRC of the message.
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
     be4:	b580      	push	{r7, lr}
     be6:	b086      	sub	sp, #24
     be8:	af00      	add	r7, sp, #0
     bea:	6078      	str	r0, [r7, #4]
     bec:	6039      	str	r1, [r7, #0]
    crc	           remainder = INITIAL_REMAINDER;
     bee:	f04f 33ff 	mov.w	r3, #4294967295
     bf2:	617b      	str	r3, [r7, #20]


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
     bf4:	2300      	movs	r3, #0
     bf6:	613b      	str	r3, [r7, #16]
     bf8:	e019      	b.n	c2e <crcFast+0x4a>
    {
        data = REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8));
     bfa:	693b      	ldr	r3, [r7, #16]
     bfc:	687a      	ldr	r2, [r7, #4]
     bfe:	4413      	add	r3, r2
     c00:	781b      	ldrb	r3, [r3, #0]
     c02:	4618      	mov	r0, r3
     c04:	2108      	movs	r1, #8
     c06:	f7ff ff8f 	bl	b28 <reflect>
     c0a:	4603      	mov	r3, r0
     c0c:	b2da      	uxtb	r2, r3
     c0e:	697b      	ldr	r3, [r7, #20]
     c10:	0e1b      	lsrs	r3, r3, #24
     c12:	b2db      	uxtb	r3, r3
     c14:	4053      	eors	r3, r2
     c16:	73fb      	strb	r3, [r7, #15]
  		remainder = crcTable[data] ^ (remainder << 8);
     c18:	7bfb      	ldrb	r3, [r7, #15]
     c1a:	4a0c      	ldr	r2, [pc, #48]	; (c4c <crcFast+0x68>)
     c1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     c20:	697b      	ldr	r3, [r7, #20]
     c22:	021b      	lsls	r3, r3, #8
     c24:	4053      	eors	r3, r2
     c26:	617b      	str	r3, [r7, #20]


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
     c28:	693b      	ldr	r3, [r7, #16]
     c2a:	3301      	adds	r3, #1
     c2c:	613b      	str	r3, [r7, #16]
     c2e:	693a      	ldr	r2, [r7, #16]
     c30:	683b      	ldr	r3, [r7, #0]
     c32:	429a      	cmp	r2, r3
     c34:	dbe1      	blt.n	bfa <crcFast+0x16>
    }

    /*
     * The final remainder is the CRC.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
     c36:	6978      	ldr	r0, [r7, #20]
     c38:	2120      	movs	r1, #32
     c3a:	f7ff ff75 	bl	b28 <reflect>
     c3e:	4603      	mov	r3, r0
     c40:	43db      	mvns	r3, r3

}   /* crcFast() */
     c42:	4618      	mov	r0, r3
     c44:	3718      	adds	r7, #24
     c46:	46bd      	mov	sp, r7
     c48:	bd80      	pop	{r7, pc}
     c4a:	bf00      	nop
     c4c:	100009ac 	.word	0x100009ac

00000c50 <u16CRC_Calc16>:
**
** Returned value:  16-bit CRC
**
******************************************************************************/
uint16_t u16CRC_Calc16(const uint8_t *pu8Data, int32_t i16Len)
{
     c50:	b480      	push	{r7}
     c52:	b085      	sub	sp, #20
     c54:	af00      	add	r7, sp, #0
     c56:	6078      	str	r0, [r7, #4]
     c58:	6039      	str	r1, [r7, #0]
	uint8_t i;
	uint16_t u16CRC = 0;
     c5a:	2300      	movs	r3, #0
     c5c:	81bb      	strh	r3, [r7, #12]

    while(--i16Len >= 0)
     c5e:	e022      	b.n	ca6 <u16CRC_Calc16+0x56>
    {
    	i = 8;
     c60:	2308      	movs	r3, #8
     c62:	73fb      	strb	r3, [r7, #15]
    	u16CRC = u16CRC ^ (((uint16_t)*pu8Data++) << 8);
     c64:	687b      	ldr	r3, [r7, #4]
     c66:	1c5a      	adds	r2, r3, #1
     c68:	607a      	str	r2, [r7, #4]
     c6a:	781b      	ldrb	r3, [r3, #0]
     c6c:	021b      	lsls	r3, r3, #8
     c6e:	b29a      	uxth	r2, r3
     c70:	89bb      	ldrh	r3, [r7, #12]
     c72:	4053      	eors	r3, r2
     c74:	b29b      	uxth	r3, r3
     c76:	81bb      	strh	r3, [r7, #12]

    	do
        {
    		if (u16CRC & 0x8000)
     c78:	89bb      	ldrh	r3, [r7, #12]
     c7a:	b21b      	sxth	r3, r3
     c7c:	2b00      	cmp	r3, #0
     c7e:	da09      	bge.n	c94 <u16CRC_Calc16+0x44>
    		{
    			u16CRC = u16CRC << 1 ^ 0x1021;
     c80:	89bb      	ldrh	r3, [r7, #12]
     c82:	005b      	lsls	r3, r3, #1
     c84:	b29b      	uxth	r3, r3
     c86:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
     c8a:	f083 0301 	eor.w	r3, r3, #1
     c8e:	b29b      	uxth	r3, r3
     c90:	81bb      	strh	r3, [r7, #12]
     c92:	e002      	b.n	c9a <u16CRC_Calc16+0x4a>
    		}
    		else
    		{
    			u16CRC = u16CRC << 1;
     c94:	89bb      	ldrh	r3, [r7, #12]
     c96:	005b      	lsls	r3, r3, #1
     c98:	81bb      	strh	r3, [r7, #12]
    		}
        }
    	while(--i);
     c9a:	7bfb      	ldrb	r3, [r7, #15]
     c9c:	3b01      	subs	r3, #1
     c9e:	73fb      	strb	r3, [r7, #15]
     ca0:	7bfb      	ldrb	r3, [r7, #15]
     ca2:	2b00      	cmp	r3, #0
     ca4:	d1e8      	bne.n	c78 <u16CRC_Calc16+0x28>
uint16_t u16CRC_Calc16(const uint8_t *pu8Data, int32_t i16Len)
{
	uint8_t i;
	uint16_t u16CRC = 0;

    while(--i16Len >= 0)
     ca6:	683b      	ldr	r3, [r7, #0]
     ca8:	3b01      	subs	r3, #1
     caa:	603b      	str	r3, [r7, #0]
     cac:	683b      	ldr	r3, [r7, #0]
     cae:	2b00      	cmp	r3, #0
     cb0:	dad6      	bge.n	c60 <u16CRC_Calc16+0x10>
    			u16CRC = u16CRC << 1;
    		}
        }
    	while(--i);
    }
    return u16CRC;
     cb2:	89bb      	ldrh	r3, [r7, #12]
}
     cb4:	4618      	mov	r0, r3
     cb6:	3714      	adds	r7, #20
     cb8:	46bd      	mov	sp, r7
     cba:	f85d 7b04 	ldr.w	r7, [sp], #4
     cbe:	4770      	bx	lr

00000cc0 <I2C0_IRQHandler>:

volatile uint32_t RdIndex_1,RdIndex_0 = 0;
volatile uint32_t WrIndex_1,WrIndex_0 = 0;


void I2C0_IRQHandler(void) {
     cc0:	b480      	push	{r7}
     cc2:	b083      	sub	sp, #12
     cc4:	af00      	add	r7, sp, #0
	uint8_t StatValue;
	/* this handler deals with master read and master write only */
	StatValue = LPC_I2C0->I2STAT;
     cc6:	4ba9      	ldr	r3, [pc, #676]	; (f6c <I2C0_IRQHandler+0x2ac>)
     cc8:	685b      	ldr	r3, [r3, #4]
     cca:	71fb      	strb	r3, [r7, #7]
	switch (StatValue) {
     ccc:	79fb      	ldrb	r3, [r7, #7]
     cce:	3b08      	subs	r3, #8
     cd0:	2b50      	cmp	r3, #80	; 0x50
     cd2:	f200 8184 	bhi.w	fde <I2C0_IRQHandler+0x31e>
     cd6:	a201      	add	r2, pc, #4	; (adr r2, cdc <I2C0_IRQHandler+0x1c>)
     cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     cdc:	00000e21 	.word	0x00000e21
     ce0:	00000fdf 	.word	0x00000fdf
     ce4:	00000fdf 	.word	0x00000fdf
     ce8:	00000fdf 	.word	0x00000fdf
     cec:	00000fdf 	.word	0x00000fdf
     cf0:	00000fdf 	.word	0x00000fdf
     cf4:	00000fdf 	.word	0x00000fdf
     cf8:	00000fdf 	.word	0x00000fdf
     cfc:	00000e43 	.word	0x00000e43
     d00:	00000fdf 	.word	0x00000fdf
     d04:	00000fdf 	.word	0x00000fdf
     d08:	00000fdf 	.word	0x00000fdf
     d0c:	00000fdf 	.word	0x00000fdf
     d10:	00000fdf 	.word	0x00000fdf
     d14:	00000fdf 	.word	0x00000fdf
     d18:	00000fdf 	.word	0x00000fdf
     d1c:	00000e6d 	.word	0x00000e6d
     d20:	00000fdf 	.word	0x00000fdf
     d24:	00000fdf 	.word	0x00000fdf
     d28:	00000fdf 	.word	0x00000fdf
     d2c:	00000fdf 	.word	0x00000fdf
     d30:	00000fdf 	.word	0x00000fdf
     d34:	00000fdf 	.word	0x00000fdf
     d38:	00000fdf 	.word	0x00000fdf
     d3c:	00000fd1 	.word	0x00000fd1
     d40:	00000fdf 	.word	0x00000fdf
     d44:	00000fdf 	.word	0x00000fdf
     d48:	00000fdf 	.word	0x00000fdf
     d4c:	00000fdf 	.word	0x00000fdf
     d50:	00000fdf 	.word	0x00000fdf
     d54:	00000fdf 	.word	0x00000fdf
     d58:	00000fdf 	.word	0x00000fdf
     d5c:	00000e97 	.word	0x00000e97
     d60:	00000fdf 	.word	0x00000fdf
     d64:	00000fdf 	.word	0x00000fdf
     d68:	00000fdf 	.word	0x00000fdf
     d6c:	00000fdf 	.word	0x00000fdf
     d70:	00000fdf 	.word	0x00000fdf
     d74:	00000fdf 	.word	0x00000fdf
     d78:	00000fdf 	.word	0x00000fdf
     d7c:	00000edd 	.word	0x00000edd
     d80:	00000fdf 	.word	0x00000fdf
     d84:	00000fdf 	.word	0x00000fdf
     d88:	00000fdf 	.word	0x00000fdf
     d8c:	00000fdf 	.word	0x00000fdf
     d90:	00000fdf 	.word	0x00000fdf
     d94:	00000fdf 	.word	0x00000fdf
     d98:	00000fdf 	.word	0x00000fdf
     d9c:	00000fdf 	.word	0x00000fdf
     da0:	00000fdf 	.word	0x00000fdf
     da4:	00000fdf 	.word	0x00000fdf
     da8:	00000fdf 	.word	0x00000fdf
     dac:	00000fdf 	.word	0x00000fdf
     db0:	00000fdf 	.word	0x00000fdf
     db4:	00000fdf 	.word	0x00000fdf
     db8:	00000fdf 	.word	0x00000fdf
     dbc:	00000f5d 	.word	0x00000f5d
     dc0:	00000fdf 	.word	0x00000fdf
     dc4:	00000fdf 	.word	0x00000fdf
     dc8:	00000fdf 	.word	0x00000fdf
     dcc:	00000fdf 	.word	0x00000fdf
     dd0:	00000fdf 	.word	0x00000fdf
     dd4:	00000fdf 	.word	0x00000fdf
     dd8:	00000fdf 	.word	0x00000fdf
     ddc:	00000fd1 	.word	0x00000fd1
     de0:	00000fdf 	.word	0x00000fdf
     de4:	00000fdf 	.word	0x00000fdf
     de8:	00000fdf 	.word	0x00000fdf
     dec:	00000fdf 	.word	0x00000fdf
     df0:	00000fdf 	.word	0x00000fdf
     df4:	00000fdf 	.word	0x00000fdf
     df8:	00000fdf 	.word	0x00000fdf
     dfc:	00000f89 	.word	0x00000f89
     e00:	00000fdf 	.word	0x00000fdf
     e04:	00000fdf 	.word	0x00000fdf
     e08:	00000fdf 	.word	0x00000fdf
     e0c:	00000fdf 	.word	0x00000fdf
     e10:	00000fdf 	.word	0x00000fdf
     e14:	00000fdf 	.word	0x00000fdf
     e18:	00000fdf 	.word	0x00000fdf
     e1c:	00000f89 	.word	0x00000f89
		case 0x08: /* A Start condition is issued. */
			LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
     e20:	4952      	ldr	r1, [pc, #328]	; (f6c <I2C0_IRQHandler+0x2ac>)
     e22:	4b53      	ldr	r3, [pc, #332]	; (f70 <I2C0_IRQHandler+0x2b0>)
     e24:	681b      	ldr	r3, [r3, #0]
     e26:	1c5a      	adds	r2, r3, #1
     e28:	4851      	ldr	r0, [pc, #324]	; (f70 <I2C0_IRQHandler+0x2b0>)
     e2a:	6002      	str	r2, [r0, #0]
     e2c:	4a51      	ldr	r2, [pc, #324]	; (f74 <I2C0_IRQHandler+0x2b4>)
     e2e:	5cd3      	ldrb	r3, [r2, r3]
     e30:	b2db      	uxtb	r3, r3
     e32:	608b      	str	r3, [r1, #8]
			LPC_I2C0->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
     e34:	4b4d      	ldr	r3, [pc, #308]	; (f6c <I2C0_IRQHandler+0x2ac>)
     e36:	2228      	movs	r2, #40	; 0x28
     e38:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = I2C_STARTED;
     e3a:	4b4f      	ldr	r3, [pc, #316]	; (f78 <I2C0_IRQHandler+0x2b8>)
     e3c:	2201      	movs	r2, #1
     e3e:	601a      	str	r2, [r3, #0]
			break;
     e40:	e0d1      	b.n	fe6 <I2C0_IRQHandler+0x326>
		case 0x10: /* A repeated started is issued */
			if (!I2C0_Cmd) {
     e42:	4b4e      	ldr	r3, [pc, #312]	; (f7c <I2C0_IRQHandler+0x2bc>)
     e44:	681b      	ldr	r3, [r3, #0]
     e46:	2b00      	cmp	r3, #0
     e48:	d109      	bne.n	e5e <I2C0_IRQHandler+0x19e>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
     e4a:	4948      	ldr	r1, [pc, #288]	; (f6c <I2C0_IRQHandler+0x2ac>)
     e4c:	4b48      	ldr	r3, [pc, #288]	; (f70 <I2C0_IRQHandler+0x2b0>)
     e4e:	681b      	ldr	r3, [r3, #0]
     e50:	1c5a      	adds	r2, r3, #1
     e52:	4847      	ldr	r0, [pc, #284]	; (f70 <I2C0_IRQHandler+0x2b0>)
     e54:	6002      	str	r2, [r0, #0]
     e56:	4a47      	ldr	r2, [pc, #284]	; (f74 <I2C0_IRQHandler+0x2b4>)
     e58:	5cd3      	ldrb	r3, [r2, r3]
     e5a:	b2db      	uxtb	r3, r3
     e5c:	608b      	str	r3, [r1, #8]
			}
			LPC_I2C0->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
     e5e:	4b43      	ldr	r3, [pc, #268]	; (f6c <I2C0_IRQHandler+0x2ac>)
     e60:	2228      	movs	r2, #40	; 0x28
     e62:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = I2C_RESTARTED;
     e64:	4b44      	ldr	r3, [pc, #272]	; (f78 <I2C0_IRQHandler+0x2b8>)
     e66:	2202      	movs	r2, #2
     e68:	601a      	str	r2, [r3, #0]
			break;
     e6a:	e0bc      	b.n	fe6 <I2C0_IRQHandler+0x326>
		case 0x18: /* Regardless, it's a ACK */
			if (I2C0_MasterState == I2C_STARTED) {
     e6c:	4b42      	ldr	r3, [pc, #264]	; (f78 <I2C0_IRQHandler+0x2b8>)
     e6e:	681b      	ldr	r3, [r3, #0]
     e70:	2b01      	cmp	r3, #1
     e72:	d10c      	bne.n	e8e <I2C0_IRQHandler+0x1ce>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
     e74:	493d      	ldr	r1, [pc, #244]	; (f6c <I2C0_IRQHandler+0x2ac>)
     e76:	4b3e      	ldr	r3, [pc, #248]	; (f70 <I2C0_IRQHandler+0x2b0>)
     e78:	681b      	ldr	r3, [r3, #0]
     e7a:	1c5a      	adds	r2, r3, #1
     e7c:	483c      	ldr	r0, [pc, #240]	; (f70 <I2C0_IRQHandler+0x2b0>)
     e7e:	6002      	str	r2, [r0, #0]
     e80:	4a3c      	ldr	r2, [pc, #240]	; (f74 <I2C0_IRQHandler+0x2b4>)
     e82:	5cd3      	ldrb	r3, [r2, r3]
     e84:	b2db      	uxtb	r3, r3
     e86:	608b      	str	r3, [r1, #8]
				I2C0_MasterState = DATA_ACK;
     e88:	4b3b      	ldr	r3, [pc, #236]	; (f78 <I2C0_IRQHandler+0x2b8>)
     e8a:	2204      	movs	r2, #4
     e8c:	601a      	str	r2, [r3, #0]
			}
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
     e8e:	4b37      	ldr	r3, [pc, #220]	; (f6c <I2C0_IRQHandler+0x2ac>)
     e90:	2208      	movs	r2, #8
     e92:	619a      	str	r2, [r3, #24]
			break;
     e94:	e0a7      	b.n	fe6 <I2C0_IRQHandler+0x326>
		case 0x28: /* Data byte has been transmitted, regardless ACK or NACK */
			 if ( WrIndex_0 < I2C0_WriteLength )
     e96:	4b36      	ldr	r3, [pc, #216]	; (f70 <I2C0_IRQHandler+0x2b0>)
     e98:	681a      	ldr	r2, [r3, #0]
     e9a:	4b39      	ldr	r3, [pc, #228]	; (f80 <I2C0_IRQHandler+0x2c0>)
     e9c:	681b      	ldr	r3, [r3, #0]
     e9e:	429a      	cmp	r2, r3
     ea0:	d20a      	bcs.n	eb8 <I2C0_IRQHandler+0x1f8>
				{
				  LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++]; /* this should be the last one */
     ea2:	4932      	ldr	r1, [pc, #200]	; (f6c <I2C0_IRQHandler+0x2ac>)
     ea4:	4b32      	ldr	r3, [pc, #200]	; (f70 <I2C0_IRQHandler+0x2b0>)
     ea6:	681b      	ldr	r3, [r3, #0]
     ea8:	1c5a      	adds	r2, r3, #1
     eaa:	4831      	ldr	r0, [pc, #196]	; (f70 <I2C0_IRQHandler+0x2b0>)
     eac:	6002      	str	r2, [r0, #0]
     eae:	4a31      	ldr	r2, [pc, #196]	; (f74 <I2C0_IRQHandler+0x2b4>)
     eb0:	5cd3      	ldrb	r3, [r2, r3]
     eb2:	b2db      	uxtb	r3, r3
     eb4:	608b      	str	r3, [r1, #8]
     eb6:	e00d      	b.n	ed4 <I2C0_IRQHandler+0x214>
				}
				else
				{
				  if ( I2C0_ReadLength != 0 )
     eb8:	4b32      	ldr	r3, [pc, #200]	; (f84 <I2C0_IRQHandler+0x2c4>)
     eba:	681b      	ldr	r3, [r3, #0]
     ebc:	2b00      	cmp	r3, #0
     ebe:	d003      	beq.n	ec8 <I2C0_IRQHandler+0x208>
				  {
						LPC_I2C0->I2CONSET = I2CONSET_STA;   /* Set Repeated-start flag */
     ec0:	4b2a      	ldr	r3, [pc, #168]	; (f6c <I2C0_IRQHandler+0x2ac>)
     ec2:	2220      	movs	r2, #32
     ec4:	601a      	str	r2, [r3, #0]
     ec6:	e005      	b.n	ed4 <I2C0_IRQHandler+0x214>
				  }
				  else
				  {
						LPC_I2C0->I2CONSET = I2CONSET_STO;      /* Set Stop flag */
     ec8:	4b28      	ldr	r3, [pc, #160]	; (f6c <I2C0_IRQHandler+0x2ac>)
     eca:	2210      	movs	r2, #16
     ecc:	601a      	str	r2, [r3, #0]
						I2C0_MasterState = I2C_IDLE;
     ece:	4b2a      	ldr	r3, [pc, #168]	; (f78 <I2C0_IRQHandler+0x2b8>)
     ed0:	2200      	movs	r2, #0
     ed2:	601a      	str	r2, [r3, #0]
				  }
				}
				LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
     ed4:	4b25      	ldr	r3, [pc, #148]	; (f6c <I2C0_IRQHandler+0x2ac>)
     ed6:	2208      	movs	r2, #8
     ed8:	619a      	str	r2, [r3, #24]
				break;
     eda:	e084      	b.n	fe6 <I2C0_IRQHandler+0x326>
		case 0x30:
			if (WrIndex_0 != I2C0_WriteLength) {
     edc:	4b24      	ldr	r3, [pc, #144]	; (f70 <I2C0_IRQHandler+0x2b0>)
     ede:	681a      	ldr	r2, [r3, #0]
     ee0:	4b27      	ldr	r3, [pc, #156]	; (f80 <I2C0_IRQHandler+0x2c0>)
     ee2:	681b      	ldr	r3, [r3, #0]
     ee4:	429a      	cmp	r2, r3
     ee6:	d024      	beq.n	f32 <I2C0_IRQHandler+0x272>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[1 + WrIndex_0]; /* this should be the last one */
     ee8:	4a20      	ldr	r2, [pc, #128]	; (f6c <I2C0_IRQHandler+0x2ac>)
     eea:	4b21      	ldr	r3, [pc, #132]	; (f70 <I2C0_IRQHandler+0x2b0>)
     eec:	681b      	ldr	r3, [r3, #0]
     eee:	3301      	adds	r3, #1
     ef0:	4920      	ldr	r1, [pc, #128]	; (f74 <I2C0_IRQHandler+0x2b4>)
     ef2:	5ccb      	ldrb	r3, [r1, r3]
     ef4:	b2db      	uxtb	r3, r3
     ef6:	6093      	str	r3, [r2, #8]
				WrIndex_0++;
     ef8:	4b1d      	ldr	r3, [pc, #116]	; (f70 <I2C0_IRQHandler+0x2b0>)
     efa:	681b      	ldr	r3, [r3, #0]
     efc:	3301      	adds	r3, #1
     efe:	4a1c      	ldr	r2, [pc, #112]	; (f70 <I2C0_IRQHandler+0x2b0>)
     f00:	6013      	str	r3, [r2, #0]
				if (WrIndex_0 != I2C0_WriteLength) {
     f02:	4b1b      	ldr	r3, [pc, #108]	; (f70 <I2C0_IRQHandler+0x2b0>)
     f04:	681a      	ldr	r2, [r3, #0]
     f06:	4b1e      	ldr	r3, [pc, #120]	; (f80 <I2C0_IRQHandler+0x2c0>)
     f08:	681b      	ldr	r3, [r3, #0]
     f0a:	429a      	cmp	r2, r3
     f0c:	d003      	beq.n	f16 <I2C0_IRQHandler+0x256>
					I2C0_MasterState = DATA_ACK;
     f0e:	4b1a      	ldr	r3, [pc, #104]	; (f78 <I2C0_IRQHandler+0x2b8>)
     f10:	2204      	movs	r2, #4
     f12:	601a      	str	r2, [r3, #0]
     f14:	e01e      	b.n	f54 <I2C0_IRQHandler+0x294>
				} else {
					I2C0_MasterState = DATA_NACK;
     f16:	4b18      	ldr	r3, [pc, #96]	; (f78 <I2C0_IRQHandler+0x2b8>)
     f18:	2205      	movs	r2, #5
     f1a:	601a      	str	r2, [r3, #0]
					if (I2C0_ReadLength != 0) {
     f1c:	4b19      	ldr	r3, [pc, #100]	; (f84 <I2C0_IRQHandler+0x2c4>)
     f1e:	681b      	ldr	r3, [r3, #0]
     f20:	2b00      	cmp	r3, #0
     f22:	d017      	beq.n	f54 <I2C0_IRQHandler+0x294>
						LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
     f24:	4b11      	ldr	r3, [pc, #68]	; (f6c <I2C0_IRQHandler+0x2ac>)
     f26:	2220      	movs	r2, #32
     f28:	601a      	str	r2, [r3, #0]
						I2C0_MasterState = I2C_REPEATED_START;
     f2a:	4b13      	ldr	r3, [pc, #76]	; (f78 <I2C0_IRQHandler+0x2b8>)
     f2c:	2203      	movs	r2, #3
     f2e:	601a      	str	r2, [r3, #0]
     f30:	e010      	b.n	f54 <I2C0_IRQHandler+0x294>
					}
				}
			} else {
				if (I2C0_ReadLength != 0) {
     f32:	4b14      	ldr	r3, [pc, #80]	; (f84 <I2C0_IRQHandler+0x2c4>)
     f34:	681b      	ldr	r3, [r3, #0]
     f36:	2b00      	cmp	r3, #0
     f38:	d006      	beq.n	f48 <I2C0_IRQHandler+0x288>
					LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
     f3a:	4b0c      	ldr	r3, [pc, #48]	; (f6c <I2C0_IRQHandler+0x2ac>)
     f3c:	2220      	movs	r2, #32
     f3e:	601a      	str	r2, [r3, #0]
					I2C0_MasterState = I2C_REPEATED_START;
     f40:	4b0d      	ldr	r3, [pc, #52]	; (f78 <I2C0_IRQHandler+0x2b8>)
     f42:	2203      	movs	r2, #3
     f44:	601a      	str	r2, [r3, #0]
     f46:	e005      	b.n	f54 <I2C0_IRQHandler+0x294>
				} else {
					I2C0_MasterState = DATA_NACK;
     f48:	4b0b      	ldr	r3, [pc, #44]	; (f78 <I2C0_IRQHandler+0x2b8>)
     f4a:	2205      	movs	r2, #5
     f4c:	601a      	str	r2, [r3, #0]
					LPC_I2C0->I2CONSET = I2CONSET_STO; /* Set Stop flag */
     f4e:	4b07      	ldr	r3, [pc, #28]	; (f6c <I2C0_IRQHandler+0x2ac>)
     f50:	2210      	movs	r2, #16
     f52:	601a      	str	r2, [r3, #0]
				}
			}
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
     f54:	4b05      	ldr	r3, [pc, #20]	; (f6c <I2C0_IRQHandler+0x2ac>)
     f56:	2208      	movs	r2, #8
     f58:	619a      	str	r2, [r3, #24]
			break;
     f5a:	e044      	b.n	fe6 <I2C0_IRQHandler+0x326>
		case 0x40: /* Master Receive, SLA_R has been sent */
			LPC_I2C0->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
     f5c:	4b03      	ldr	r3, [pc, #12]	; (f6c <I2C0_IRQHandler+0x2ac>)
     f5e:	2204      	movs	r2, #4
     f60:	601a      	str	r2, [r3, #0]
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
     f62:	4b02      	ldr	r3, [pc, #8]	; (f6c <I2C0_IRQHandler+0x2ac>)
     f64:	2208      	movs	r2, #8
     f66:	619a      	str	r2, [r3, #24]
			break;
     f68:	e03d      	b.n	fe6 <I2C0_IRQHandler+0x326>
     f6a:	bf00      	nop
     f6c:	4001c000 	.word	0x4001c000
     f70:	10000034 	.word	0x10000034
     f74:	100010d8 	.word	0x100010d8
     f78:	1000002c 	.word	0x1000002c
     f7c:	100011d8 	.word	0x100011d8
     f80:	10000fd4 	.word	0x10000fd4
     f84:	10000dbc 	.word	0x10000dbc
		case 0x50: /* Data byte has been received, regardless following ACK or NACK */
		case 0x58:
			I2C0_MasterBuffer[3 + RdIndex_0] = LPC_I2C0->I2DAT;
     f88:	4b19      	ldr	r3, [pc, #100]	; (ff0 <I2C0_IRQHandler+0x330>)
     f8a:	681b      	ldr	r3, [r3, #0]
     f8c:	3303      	adds	r3, #3
     f8e:	4a19      	ldr	r2, [pc, #100]	; (ff4 <I2C0_IRQHandler+0x334>)
     f90:	6892      	ldr	r2, [r2, #8]
     f92:	b2d1      	uxtb	r1, r2
     f94:	4a18      	ldr	r2, [pc, #96]	; (ff8 <I2C0_IRQHandler+0x338>)
     f96:	54d1      	strb	r1, [r2, r3]
			RdIndex_0++;
     f98:	4b15      	ldr	r3, [pc, #84]	; (ff0 <I2C0_IRQHandler+0x330>)
     f9a:	681b      	ldr	r3, [r3, #0]
     f9c:	3301      	adds	r3, #1
     f9e:	4a14      	ldr	r2, [pc, #80]	; (ff0 <I2C0_IRQHandler+0x330>)
     fa0:	6013      	str	r3, [r2, #0]
			if (RdIndex_0 != I2C0_ReadLength) {
     fa2:	4b13      	ldr	r3, [pc, #76]	; (ff0 <I2C0_IRQHandler+0x330>)
     fa4:	681a      	ldr	r2, [r3, #0]
     fa6:	4b15      	ldr	r3, [pc, #84]	; (ffc <I2C0_IRQHandler+0x33c>)
     fa8:	681b      	ldr	r3, [r3, #0]
     faa:	429a      	cmp	r2, r3
     fac:	d003      	beq.n	fb6 <I2C0_IRQHandler+0x2f6>
				I2C0_MasterState = DATA_ACK;
     fae:	4b14      	ldr	r3, [pc, #80]	; (1000 <I2C0_IRQHandler+0x340>)
     fb0:	2204      	movs	r2, #4
     fb2:	601a      	str	r2, [r3, #0]
     fb4:	e005      	b.n	fc2 <I2C0_IRQHandler+0x302>
			} else {
				RdIndex_0 = 0;
     fb6:	4b0e      	ldr	r3, [pc, #56]	; (ff0 <I2C0_IRQHandler+0x330>)
     fb8:	2200      	movs	r2, #0
     fba:	601a      	str	r2, [r3, #0]
				I2C0_MasterState = DATA_NACK;
     fbc:	4b10      	ldr	r3, [pc, #64]	; (1000 <I2C0_IRQHandler+0x340>)
     fbe:	2205      	movs	r2, #5
     fc0:	601a      	str	r2, [r3, #0]
			}
			LPC_I2C0->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
     fc2:	4b0c      	ldr	r3, [pc, #48]	; (ff4 <I2C0_IRQHandler+0x334>)
     fc4:	2204      	movs	r2, #4
     fc6:	601a      	str	r2, [r3, #0]
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
     fc8:	4b0a      	ldr	r3, [pc, #40]	; (ff4 <I2C0_IRQHandler+0x334>)
     fca:	2208      	movs	r2, #8
     fcc:	619a      	str	r2, [r3, #24]
			break;
     fce:	e00a      	b.n	fe6 <I2C0_IRQHandler+0x326>
		case 0x20: /* regardless, it's a NACK */
		case 0x48:
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
     fd0:	4b08      	ldr	r3, [pc, #32]	; (ff4 <I2C0_IRQHandler+0x334>)
     fd2:	2208      	movs	r2, #8
     fd4:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = DATA_NACK;
     fd6:	4b0a      	ldr	r3, [pc, #40]	; (1000 <I2C0_IRQHandler+0x340>)
     fd8:	2205      	movs	r2, #5
     fda:	601a      	str	r2, [r3, #0]
			break;
     fdc:	e003      	b.n	fe6 <I2C0_IRQHandler+0x326>
		case 0x38: /* Arbitration lost, in this example, we don't
		 deal with multiple master situation */
		default:
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
     fde:	4b05      	ldr	r3, [pc, #20]	; (ff4 <I2C0_IRQHandler+0x334>)
     fe0:	2208      	movs	r2, #8
     fe2:	619a      	str	r2, [r3, #24]
			break;
     fe4:	bf00      	nop
	}
}
     fe6:	370c      	adds	r7, #12
     fe8:	46bd      	mov	sp, r7
     fea:	f85d 7b04 	ldr.w	r7, [sp], #4
     fee:	4770      	bx	lr
     ff0:	10000030 	.word	0x10000030
     ff4:	4001c000 	.word	0x4001c000
     ff8:	100010d8 	.word	0x100010d8
     ffc:	10000dbc 	.word	0x10000dbc
    1000:	1000002c 	.word	0x1000002c

00001004 <I2C1_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void I2C1_IRQHandler(void) {
    1004:	b480      	push	{r7}
    1006:	b083      	sub	sp, #12
    1008:	af00      	add	r7, sp, #0
	uint8_t StatValue;
	/* this handler deals with master read and master write only */
	StatValue = LPC_I2C1->I2STAT;
    100a:	4bae      	ldr	r3, [pc, #696]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    100c:	685b      	ldr	r3, [r3, #4]
    100e:	71fb      	strb	r3, [r7, #7]
	switch (StatValue) {
    1010:	79fb      	ldrb	r3, [r7, #7]
    1012:	3b08      	subs	r3, #8
    1014:	2b50      	cmp	r3, #80	; 0x50
    1016:	f200 814b 	bhi.w	12b0 <I2C1_IRQHandler+0x2ac>
    101a:	a201      	add	r2, pc, #4	; (adr r2, 1020 <I2C1_IRQHandler+0x1c>)
    101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1020:	00001165 	.word	0x00001165
    1024:	000012b1 	.word	0x000012b1
    1028:	000012b1 	.word	0x000012b1
    102c:	000012b1 	.word	0x000012b1
    1030:	000012b1 	.word	0x000012b1
    1034:	000012b1 	.word	0x000012b1
    1038:	000012b1 	.word	0x000012b1
    103c:	000012b1 	.word	0x000012b1
    1040:	0000117d 	.word	0x0000117d
    1044:	000012b1 	.word	0x000012b1
    1048:	000012b1 	.word	0x000012b1
    104c:	000012b1 	.word	0x000012b1
    1050:	000012b1 	.word	0x000012b1
    1054:	000012b1 	.word	0x000012b1
    1058:	000012b1 	.word	0x000012b1
    105c:	000012b1 	.word	0x000012b1
    1060:	0000119d 	.word	0x0000119d
    1064:	000012b1 	.word	0x000012b1
    1068:	000012b1 	.word	0x000012b1
    106c:	000012b1 	.word	0x000012b1
    1070:	000012b1 	.word	0x000012b1
    1074:	000012b1 	.word	0x000012b1
    1078:	000012b1 	.word	0x000012b1
    107c:	000012b1 	.word	0x000012b1
    1080:	000012a3 	.word	0x000012a3
    1084:	000012b1 	.word	0x000012b1
    1088:	000012b1 	.word	0x000012b1
    108c:	000012b1 	.word	0x000012b1
    1090:	000012b1 	.word	0x000012b1
    1094:	000012b1 	.word	0x000012b1
    1098:	000012b1 	.word	0x000012b1
    109c:	000012b1 	.word	0x000012b1
    10a0:	000011cd 	.word	0x000011cd
    10a4:	000012b1 	.word	0x000012b1
    10a8:	000012b1 	.word	0x000012b1
    10ac:	000012b1 	.word	0x000012b1
    10b0:	000012b1 	.word	0x000012b1
    10b4:	000012b1 	.word	0x000012b1
    10b8:	000012b1 	.word	0x000012b1
    10bc:	000012b1 	.word	0x000012b1
    10c0:	000011cd 	.word	0x000011cd
    10c4:	000012b1 	.word	0x000012b1
    10c8:	000012b1 	.word	0x000012b1
    10cc:	000012b1 	.word	0x000012b1
    10d0:	000012b1 	.word	0x000012b1
    10d4:	000012b1 	.word	0x000012b1
    10d8:	000012b1 	.word	0x000012b1
    10dc:	000012b1 	.word	0x000012b1
    10e0:	000012b1 	.word	0x000012b1
    10e4:	000012b1 	.word	0x000012b1
    10e8:	000012b1 	.word	0x000012b1
    10ec:	000012b1 	.word	0x000012b1
    10f0:	000012b1 	.word	0x000012b1
    10f4:	000012b1 	.word	0x000012b1
    10f8:	000012b1 	.word	0x000012b1
    10fc:	000012b1 	.word	0x000012b1
    1100:	0000124d 	.word	0x0000124d
    1104:	000012b1 	.word	0x000012b1
    1108:	000012b1 	.word	0x000012b1
    110c:	000012b1 	.word	0x000012b1
    1110:	000012b1 	.word	0x000012b1
    1114:	000012b1 	.word	0x000012b1
    1118:	000012b1 	.word	0x000012b1
    111c:	000012b1 	.word	0x000012b1
    1120:	000012a3 	.word	0x000012a3
    1124:	000012b1 	.word	0x000012b1
    1128:	000012b1 	.word	0x000012b1
    112c:	000012b1 	.word	0x000012b1
    1130:	000012b1 	.word	0x000012b1
    1134:	000012b1 	.word	0x000012b1
    1138:	000012b1 	.word	0x000012b1
    113c:	000012b1 	.word	0x000012b1
    1140:	0000125b 	.word	0x0000125b
    1144:	000012b1 	.word	0x000012b1
    1148:	000012b1 	.word	0x000012b1
    114c:	000012b1 	.word	0x000012b1
    1150:	000012b1 	.word	0x000012b1
    1154:	000012b1 	.word	0x000012b1
    1158:	000012b1 	.word	0x000012b1
    115c:	000012b1 	.word	0x000012b1
    1160:	0000125b 	.word	0x0000125b
	case 0x08: /* A Start condition is issued. */
		LPC_I2C1->I2DAT = I2C1_MasterBuffer[0];
    1164:	4b57      	ldr	r3, [pc, #348]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    1166:	4a58      	ldr	r2, [pc, #352]	; (12c8 <I2C1_IRQHandler+0x2c4>)
    1168:	7812      	ldrb	r2, [r2, #0]
    116a:	b2d2      	uxtb	r2, r2
    116c:	609a      	str	r2, [r3, #8]
		LPC_I2C1->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    116e:	4b55      	ldr	r3, [pc, #340]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    1170:	2228      	movs	r2, #40	; 0x28
    1172:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = I2C_STARTED;
    1174:	4b55      	ldr	r3, [pc, #340]	; (12cc <I2C1_IRQHandler+0x2c8>)
    1176:	2201      	movs	r2, #1
    1178:	601a      	str	r2, [r3, #0]
		break;
    117a:	e09d      	b.n	12b8 <I2C1_IRQHandler+0x2b4>
	case 0x10: /* A repeated started is issued */
		if (!I2C1_Cmd) {
    117c:	4b54      	ldr	r3, [pc, #336]	; (12d0 <I2C1_IRQHandler+0x2cc>)
    117e:	681b      	ldr	r3, [r3, #0]
    1180:	2b00      	cmp	r3, #0
    1182:	d104      	bne.n	118e <I2C1_IRQHandler+0x18a>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[2];
    1184:	4b4f      	ldr	r3, [pc, #316]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    1186:	4a50      	ldr	r2, [pc, #320]	; (12c8 <I2C1_IRQHandler+0x2c4>)
    1188:	7892      	ldrb	r2, [r2, #2]
    118a:	b2d2      	uxtb	r2, r2
    118c:	609a      	str	r2, [r3, #8]
		}
		LPC_I2C1->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    118e:	4b4d      	ldr	r3, [pc, #308]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    1190:	2228      	movs	r2, #40	; 0x28
    1192:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = I2C_RESTARTED;
    1194:	4b4d      	ldr	r3, [pc, #308]	; (12cc <I2C1_IRQHandler+0x2c8>)
    1196:	2202      	movs	r2, #2
    1198:	601a      	str	r2, [r3, #0]
		break;
    119a:	e08d      	b.n	12b8 <I2C1_IRQHandler+0x2b4>
	case 0x18: /* Regardless, it's a ACK */
		if (I2C1_MasterState == I2C_STARTED) {
    119c:	4b4b      	ldr	r3, [pc, #300]	; (12cc <I2C1_IRQHandler+0x2c8>)
    119e:	681b      	ldr	r3, [r3, #0]
    11a0:	2b01      	cmp	r3, #1
    11a2:	d10f      	bne.n	11c4 <I2C1_IRQHandler+0x1c0>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[1 + WrIndex_1];
    11a4:	4a47      	ldr	r2, [pc, #284]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    11a6:	4b4b      	ldr	r3, [pc, #300]	; (12d4 <I2C1_IRQHandler+0x2d0>)
    11a8:	681b      	ldr	r3, [r3, #0]
    11aa:	3301      	adds	r3, #1
    11ac:	4946      	ldr	r1, [pc, #280]	; (12c8 <I2C1_IRQHandler+0x2c4>)
    11ae:	5ccb      	ldrb	r3, [r1, r3]
    11b0:	b2db      	uxtb	r3, r3
    11b2:	6093      	str	r3, [r2, #8]
			WrIndex_1++;
    11b4:	4b47      	ldr	r3, [pc, #284]	; (12d4 <I2C1_IRQHandler+0x2d0>)
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	3301      	adds	r3, #1
    11ba:	4a46      	ldr	r2, [pc, #280]	; (12d4 <I2C1_IRQHandler+0x2d0>)
    11bc:	6013      	str	r3, [r2, #0]
			I2C1_MasterState = DATA_ACK;
    11be:	4b43      	ldr	r3, [pc, #268]	; (12cc <I2C1_IRQHandler+0x2c8>)
    11c0:	2204      	movs	r2, #4
    11c2:	601a      	str	r2, [r3, #0]
		}
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    11c4:	4b3f      	ldr	r3, [pc, #252]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    11c6:	2208      	movs	r2, #8
    11c8:	619a      	str	r2, [r3, #24]
		break;
    11ca:	e075      	b.n	12b8 <I2C1_IRQHandler+0x2b4>
	case 0x28: /* Data byte has been transmitted, regardless ACK or NACK */
	case 0x30:
		if (WrIndex_1 != I2C1_WriteLength) {
    11cc:	4b41      	ldr	r3, [pc, #260]	; (12d4 <I2C1_IRQHandler+0x2d0>)
    11ce:	681a      	ldr	r2, [r3, #0]
    11d0:	4b41      	ldr	r3, [pc, #260]	; (12d8 <I2C1_IRQHandler+0x2d4>)
    11d2:	681b      	ldr	r3, [r3, #0]
    11d4:	429a      	cmp	r2, r3
    11d6:	d024      	beq.n	1222 <I2C1_IRQHandler+0x21e>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[1 + WrIndex_1]; /* this should be the last one */
    11d8:	4a3a      	ldr	r2, [pc, #232]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    11da:	4b3e      	ldr	r3, [pc, #248]	; (12d4 <I2C1_IRQHandler+0x2d0>)
    11dc:	681b      	ldr	r3, [r3, #0]
    11de:	3301      	adds	r3, #1
    11e0:	4939      	ldr	r1, [pc, #228]	; (12c8 <I2C1_IRQHandler+0x2c4>)
    11e2:	5ccb      	ldrb	r3, [r1, r3]
    11e4:	b2db      	uxtb	r3, r3
    11e6:	6093      	str	r3, [r2, #8]
			WrIndex_1++;
    11e8:	4b3a      	ldr	r3, [pc, #232]	; (12d4 <I2C1_IRQHandler+0x2d0>)
    11ea:	681b      	ldr	r3, [r3, #0]
    11ec:	3301      	adds	r3, #1
    11ee:	4a39      	ldr	r2, [pc, #228]	; (12d4 <I2C1_IRQHandler+0x2d0>)
    11f0:	6013      	str	r3, [r2, #0]
			if (WrIndex_1 != I2C1_WriteLength) {
    11f2:	4b38      	ldr	r3, [pc, #224]	; (12d4 <I2C1_IRQHandler+0x2d0>)
    11f4:	681a      	ldr	r2, [r3, #0]
    11f6:	4b38      	ldr	r3, [pc, #224]	; (12d8 <I2C1_IRQHandler+0x2d4>)
    11f8:	681b      	ldr	r3, [r3, #0]
    11fa:	429a      	cmp	r2, r3
    11fc:	d003      	beq.n	1206 <I2C1_IRQHandler+0x202>
				I2C1_MasterState = DATA_ACK;
    11fe:	4b33      	ldr	r3, [pc, #204]	; (12cc <I2C1_IRQHandler+0x2c8>)
    1200:	2204      	movs	r2, #4
    1202:	601a      	str	r2, [r3, #0]
    1204:	e01e      	b.n	1244 <I2C1_IRQHandler+0x240>
			} else {
				I2C1_MasterState = DATA_NACK;
    1206:	4b31      	ldr	r3, [pc, #196]	; (12cc <I2C1_IRQHandler+0x2c8>)
    1208:	2205      	movs	r2, #5
    120a:	601a      	str	r2, [r3, #0]
				if (I2C1_ReadLength != 0) {
    120c:	4b33      	ldr	r3, [pc, #204]	; (12dc <I2C1_IRQHandler+0x2d8>)
    120e:	681b      	ldr	r3, [r3, #0]
    1210:	2b00      	cmp	r3, #0
    1212:	d017      	beq.n	1244 <I2C1_IRQHandler+0x240>
					LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    1214:	4b2b      	ldr	r3, [pc, #172]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    1216:	2220      	movs	r2, #32
    1218:	601a      	str	r2, [r3, #0]
					I2C1_MasterState = I2C_REPEATED_START;
    121a:	4b2c      	ldr	r3, [pc, #176]	; (12cc <I2C1_IRQHandler+0x2c8>)
    121c:	2203      	movs	r2, #3
    121e:	601a      	str	r2, [r3, #0]
    1220:	e010      	b.n	1244 <I2C1_IRQHandler+0x240>
				}
			}
		} else {
			if (I2C1_ReadLength != 0) {
    1222:	4b2e      	ldr	r3, [pc, #184]	; (12dc <I2C1_IRQHandler+0x2d8>)
    1224:	681b      	ldr	r3, [r3, #0]
    1226:	2b00      	cmp	r3, #0
    1228:	d006      	beq.n	1238 <I2C1_IRQHandler+0x234>
				LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    122a:	4b26      	ldr	r3, [pc, #152]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    122c:	2220      	movs	r2, #32
    122e:	601a      	str	r2, [r3, #0]
				I2C1_MasterState = I2C_REPEATED_START;
    1230:	4b26      	ldr	r3, [pc, #152]	; (12cc <I2C1_IRQHandler+0x2c8>)
    1232:	2203      	movs	r2, #3
    1234:	601a      	str	r2, [r3, #0]
    1236:	e005      	b.n	1244 <I2C1_IRQHandler+0x240>
			} else {
				I2C1_MasterState = DATA_NACK;
    1238:	4b24      	ldr	r3, [pc, #144]	; (12cc <I2C1_IRQHandler+0x2c8>)
    123a:	2205      	movs	r2, #5
    123c:	601a      	str	r2, [r3, #0]
				LPC_I2C1->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    123e:	4b21      	ldr	r3, [pc, #132]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    1240:	2210      	movs	r2, #16
    1242:	601a      	str	r2, [r3, #0]
			}
		}
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    1244:	4b1f      	ldr	r3, [pc, #124]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    1246:	2208      	movs	r2, #8
    1248:	619a      	str	r2, [r3, #24]
		break;
    124a:	e035      	b.n	12b8 <I2C1_IRQHandler+0x2b4>
	case 0x40: /* Master Receive, SLA_R has been sent */
		LPC_I2C1->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    124c:	4b1d      	ldr	r3, [pc, #116]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    124e:	2204      	movs	r2, #4
    1250:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    1252:	4b1c      	ldr	r3, [pc, #112]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    1254:	2208      	movs	r2, #8
    1256:	619a      	str	r2, [r3, #24]
		break;
    1258:	e02e      	b.n	12b8 <I2C1_IRQHandler+0x2b4>
	case 0x50: /* Data byte has been received, regardless following ACK or NACK */
	case 0x58:
		I2C1_MasterBuffer[3 + RdIndex_1] = LPC_I2C1->I2DAT;
    125a:	4b21      	ldr	r3, [pc, #132]	; (12e0 <I2C1_IRQHandler+0x2dc>)
    125c:	681b      	ldr	r3, [r3, #0]
    125e:	3303      	adds	r3, #3
    1260:	4a18      	ldr	r2, [pc, #96]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    1262:	6892      	ldr	r2, [r2, #8]
    1264:	b2d1      	uxtb	r1, r2
    1266:	4a18      	ldr	r2, [pc, #96]	; (12c8 <I2C1_IRQHandler+0x2c4>)
    1268:	54d1      	strb	r1, [r2, r3]
		RdIndex_1++;
    126a:	4b1d      	ldr	r3, [pc, #116]	; (12e0 <I2C1_IRQHandler+0x2dc>)
    126c:	681b      	ldr	r3, [r3, #0]
    126e:	3301      	adds	r3, #1
    1270:	4a1b      	ldr	r2, [pc, #108]	; (12e0 <I2C1_IRQHandler+0x2dc>)
    1272:	6013      	str	r3, [r2, #0]
		if (RdIndex_1 != I2C1_ReadLength) {
    1274:	4b1a      	ldr	r3, [pc, #104]	; (12e0 <I2C1_IRQHandler+0x2dc>)
    1276:	681a      	ldr	r2, [r3, #0]
    1278:	4b18      	ldr	r3, [pc, #96]	; (12dc <I2C1_IRQHandler+0x2d8>)
    127a:	681b      	ldr	r3, [r3, #0]
    127c:	429a      	cmp	r2, r3
    127e:	d003      	beq.n	1288 <I2C1_IRQHandler+0x284>
			I2C1_MasterState = DATA_ACK;
    1280:	4b12      	ldr	r3, [pc, #72]	; (12cc <I2C1_IRQHandler+0x2c8>)
    1282:	2204      	movs	r2, #4
    1284:	601a      	str	r2, [r3, #0]
    1286:	e005      	b.n	1294 <I2C1_IRQHandler+0x290>
		} else {
			RdIndex_1 = 0;
    1288:	4b15      	ldr	r3, [pc, #84]	; (12e0 <I2C1_IRQHandler+0x2dc>)
    128a:	2200      	movs	r2, #0
    128c:	601a      	str	r2, [r3, #0]
			I2C1_MasterState = DATA_NACK;
    128e:	4b0f      	ldr	r3, [pc, #60]	; (12cc <I2C1_IRQHandler+0x2c8>)
    1290:	2205      	movs	r2, #5
    1292:	601a      	str	r2, [r3, #0]
		}
		LPC_I2C1->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    1294:	4b0b      	ldr	r3, [pc, #44]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    1296:	2204      	movs	r2, #4
    1298:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    129a:	4b0a      	ldr	r3, [pc, #40]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    129c:	2208      	movs	r2, #8
    129e:	619a      	str	r2, [r3, #24]
		break;
    12a0:	e00a      	b.n	12b8 <I2C1_IRQHandler+0x2b4>
	case 0x20: /* regardless, it's a NACK */
	case 0x48:
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    12a2:	4b08      	ldr	r3, [pc, #32]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    12a4:	2208      	movs	r2, #8
    12a6:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = DATA_NACK;
    12a8:	4b08      	ldr	r3, [pc, #32]	; (12cc <I2C1_IRQHandler+0x2c8>)
    12aa:	2205      	movs	r2, #5
    12ac:	601a      	str	r2, [r3, #0]
		break;
    12ae:	e003      	b.n	12b8 <I2C1_IRQHandler+0x2b4>
	case 0x38: /* Arbitration lost, in this example, we don't
	 deal with multiple master situation */
	default:
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    12b0:	4b04      	ldr	r3, [pc, #16]	; (12c4 <I2C1_IRQHandler+0x2c0>)
    12b2:	2208      	movs	r2, #8
    12b4:	619a      	str	r2, [r3, #24]
		break;
    12b6:	bf00      	nop
	}
}
    12b8:	370c      	adds	r7, #12
    12ba:	46bd      	mov	sp, r7
    12bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    12c0:	4770      	bx	lr
    12c2:	bf00      	nop
    12c4:	4005c000 	.word	0x4005c000
    12c8:	10000fd8 	.word	0x10000fd8
    12cc:	10000ed0 	.word	0x10000ed0
    12d0:	10000ecc 	.word	0x10000ecc
    12d4:	100011dc 	.word	0x100011dc
    12d8:	10000dac 	.word	0x10000dac
    12dc:	10000dc0 	.word	0x10000dc0
    12e0:	10000db0 	.word	0x10000db0

000012e4 <u32IAP_PrepareSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_PrepareSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
    12e4:	b580      	push	{r7, lr}
    12e6:	b08e      	sub	sp, #56	; 0x38
    12e8:	af00      	add	r7, sp, #0
    12ea:	6078      	str	r0, [r7, #4]
    12ec:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    12ee:	683a      	ldr	r2, [r7, #0]
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	429a      	cmp	r2, r3
    12f4:	d202      	bcs.n	12fc <u32IAP_PrepareSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    12f6:	230c      	movs	r3, #12
    12f8:	637b      	str	r3, [r7, #52]	; 0x34
    12fa:	e00f      	b.n	131c <u32IAP_PrepareSectors+0x38>
	}
	else
	{
		au32Command[0] = IAP_CMD_PREPARE_SECTORS;
    12fc:	2332      	movs	r3, #50	; 0x32
    12fe:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
    1300:	687b      	ldr	r3, [r7, #4]
    1302:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
    1304:	683b      	ldr	r3, [r7, #0]
    1306:	617b      	str	r3, [r7, #20]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1308:	f107 010c 	add.w	r1, r7, #12
    130c:	f107 0220 	add.w	r2, r7, #32
    1310:	4b05      	ldr	r3, [pc, #20]	; (1328 <u32IAP_PrepareSectors+0x44>)
    1312:	4608      	mov	r0, r1
    1314:	4611      	mov	r1, r2
    1316:	4798      	blx	r3

		u32Status = au32Result[0];
    1318:	6a3b      	ldr	r3, [r7, #32]
    131a:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
    131c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    131e:	4618      	mov	r0, r3
    1320:	3738      	adds	r7, #56	; 0x38
    1322:	46bd      	mov	sp, r7
    1324:	bd80      	pop	{r7, pc}
    1326:	bf00      	nop
    1328:	1fff1ff1 	.word	0x1fff1ff1

0000132c <u32IAP_CopyRAMToFlash>:
*
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_CopyRAMToFlash(uint32_t u32DstAddr, uint32_t u32SrcAddr, uint32_t u32Len)
{
    132c:	b580      	push	{r7, lr}
    132e:	b08e      	sub	sp, #56	; 0x38
    1330:	af00      	add	r7, sp, #0
    1332:	60f8      	str	r0, [r7, #12]
    1334:	60b9      	str	r1, [r7, #8]
    1336:	607a      	str	r2, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1338:	b672      	cpsid	i
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	__disable_irq();
	au32Command[0] = IAP_CMD_COPY_RAM_TO_FLASH;
    133a:	2333      	movs	r3, #51	; 0x33
    133c:	613b      	str	r3, [r7, #16]
	au32Command[1] = u32DstAddr;
    133e:	68fb      	ldr	r3, [r7, #12]
    1340:	617b      	str	r3, [r7, #20]
	au32Command[2] = u32SrcAddr;
    1342:	68bb      	ldr	r3, [r7, #8]
    1344:	61bb      	str	r3, [r7, #24]
	au32Command[3] = u32Len;
    1346:	687b      	ldr	r3, [r7, #4]
    1348:	61fb      	str	r3, [r7, #28]
	au32Command[4] = SystemCoreClock / 1000UL;	/* Core clock frequency in kHz */
    134a:	4b0a      	ldr	r3, [pc, #40]	; (1374 <u32IAP_CopyRAMToFlash+0x48>)
    134c:	681b      	ldr	r3, [r3, #0]
    134e:	4a0a      	ldr	r2, [pc, #40]	; (1378 <u32IAP_CopyRAMToFlash+0x4c>)
    1350:	fba2 2303 	umull	r2, r3, r2, r3
    1354:	099b      	lsrs	r3, r3, #6
    1356:	623b      	str	r3, [r7, #32]

	IAP_EXECUTE_CMD(au32Command, au32Result);
    1358:	f107 0110 	add.w	r1, r7, #16
    135c:	f107 0224 	add.w	r2, r7, #36	; 0x24
    1360:	4b06      	ldr	r3, [pc, #24]	; (137c <u32IAP_CopyRAMToFlash+0x50>)
    1362:	4608      	mov	r0, r1
    1364:	4611      	mov	r1, r2
    1366:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1368:	b662      	cpsie	i

	__enable_irq();
	return ( au32Result[0] );
    136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    136c:	4618      	mov	r0, r3
    136e:	3738      	adds	r7, #56	; 0x38
    1370:	46bd      	mov	sp, r7
    1372:	bd80      	pop	{r7, pc}
    1374:	10000024 	.word	0x10000024
    1378:	10624dd3 	.word	0x10624dd3
    137c:	1fff1ff1 	.word	0x1fff1ff1

00001380 <u32IAP_EraseSectors>:
*
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_EraseSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
    1380:	b580      	push	{r7, lr}
    1382:	b08e      	sub	sp, #56	; 0x38
    1384:	af00      	add	r7, sp, #0
    1386:	6078      	str	r0, [r7, #4]
    1388:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    138a:	683a      	ldr	r2, [r7, #0]
    138c:	687b      	ldr	r3, [r7, #4]
    138e:	429a      	cmp	r2, r3
    1390:	d202      	bcs.n	1398 <u32IAP_EraseSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1392:	230c      	movs	r3, #12
    1394:	637b      	str	r3, [r7, #52]	; 0x34
    1396:	e018      	b.n	13ca <u32IAP_EraseSectors+0x4a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1398:	b672      	cpsid	i
	}
	else
	{
		__disable_irq();
		au32Command[0] = IAP_CMD_ERASE_SECTORS;
    139a:	2334      	movs	r3, #52	; 0x34
    139c:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
    139e:	687b      	ldr	r3, [r7, #4]
    13a0:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
    13a2:	683b      	ldr	r3, [r7, #0]
    13a4:	617b      	str	r3, [r7, #20]
		au32Command[3] = SystemCoreClock / 1000UL;	/* Core clock frequency in kHz */
    13a6:	4b0b      	ldr	r3, [pc, #44]	; (13d4 <u32IAP_EraseSectors+0x54>)
    13a8:	681b      	ldr	r3, [r3, #0]
    13aa:	4a0b      	ldr	r2, [pc, #44]	; (13d8 <u32IAP_EraseSectors+0x58>)
    13ac:	fba2 2303 	umull	r2, r3, r2, r3
    13b0:	099b      	lsrs	r3, r3, #6
    13b2:	61bb      	str	r3, [r7, #24]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    13b4:	f107 010c 	add.w	r1, r7, #12
    13b8:	f107 0220 	add.w	r2, r7, #32
    13bc:	4b07      	ldr	r3, [pc, #28]	; (13dc <u32IAP_EraseSectors+0x5c>)
    13be:	4608      	mov	r0, r1
    13c0:	4611      	mov	r1, r2
    13c2:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    13c4:	b662      	cpsie	i

		__enable_irq();
		u32Status = au32Result[0];
    13c6:	6a3b      	ldr	r3, [r7, #32]
    13c8:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
    13ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    13cc:	4618      	mov	r0, r3
    13ce:	3738      	adds	r7, #56	; 0x38
    13d0:	46bd      	mov	sp, r7
    13d2:	bd80      	pop	{r7, pc}
    13d4:	10000024 	.word	0x10000024
    13d8:	10624dd3 	.word	0x10624dd3
    13dc:	1fff1ff1 	.word	0x1fff1ff1

000013e0 <u32IAP_BlankCheckSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_BlankCheckSectors(uint32_t u32StartSector, uint32_t u32EndSector, uint32_t *pu32Result)
{
    13e0:	b580      	push	{r7, lr}
    13e2:	b090      	sub	sp, #64	; 0x40
    13e4:	af00      	add	r7, sp, #0
    13e6:	60f8      	str	r0, [r7, #12]
    13e8:	60b9      	str	r1, [r7, #8]
    13ea:	607a      	str	r2, [r7, #4]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    13ec:	68ba      	ldr	r2, [r7, #8]
    13ee:	68fb      	ldr	r3, [r7, #12]
    13f0:	429a      	cmp	r2, r3
    13f2:	d202      	bcs.n	13fa <u32IAP_BlankCheckSectors+0x1a>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    13f4:	230c      	movs	r3, #12
    13f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    13f8:	e019      	b.n	142e <u32IAP_BlankCheckSectors+0x4e>
	}
	else
	{
		au32Command[0] = IAP_CMD_BLANK_CHECK_SECTORS;
    13fa:	2335      	movs	r3, #53	; 0x35
    13fc:	617b      	str	r3, [r7, #20]
		au32Command[1] = u32StartSector;
    13fe:	68fb      	ldr	r3, [r7, #12]
    1400:	61bb      	str	r3, [r7, #24]
		au32Command[2] = u32EndSector;
    1402:	68bb      	ldr	r3, [r7, #8]
    1404:	61fb      	str	r3, [r7, #28]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1406:	f107 0114 	add.w	r1, r7, #20
    140a:	f107 0228 	add.w	r2, r7, #40	; 0x28
    140e:	4b0a      	ldr	r3, [pc, #40]	; (1438 <u32IAP_BlankCheckSectors+0x58>)
    1410:	4608      	mov	r0, r1
    1412:	4611      	mov	r1, r2
    1414:	4798      	blx	r3

		if (au32Result[0] == IAP_STA_SECTOR_NOT_BLANK)
    1416:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1418:	2b08      	cmp	r3, #8
    141a:	d106      	bne.n	142a <u32IAP_BlankCheckSectors+0x4a>
		{
			*pu32Result       = au32Result[0];
    141c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	601a      	str	r2, [r3, #0]
			*(pu32Result + 1) = au32Result[1];
    1422:	687b      	ldr	r3, [r7, #4]
    1424:	3304      	adds	r3, #4
    1426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1428:	601a      	str	r2, [r3, #0]
		}
		u32Status = au32Result[0];
    142a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    142c:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	return ( u32Status );
    142e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1430:	4618      	mov	r0, r3
    1432:	3740      	adds	r7, #64	; 0x40
    1434:	46bd      	mov	sp, r7
    1436:	bd80      	pop	{r7, pc}
    1438:	1fff1ff1 	.word	0x1fff1ff1

0000143c <u32IAP_Compare>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_Compare(uint32_t u32DstAddr, uint32_t u32SrcAddr, uint32_t u32Len, uint32_t *pu32Offset)
{
    143c:	b580      	push	{r7, lr}
    143e:	b08e      	sub	sp, #56	; 0x38
    1440:	af00      	add	r7, sp, #0
    1442:	60f8      	str	r0, [r7, #12]
    1444:	60b9      	str	r1, [r7, #8]
    1446:	607a      	str	r2, [r7, #4]
    1448:	603b      	str	r3, [r7, #0]
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	au32Command[0] = IAP_CMD_COMPARE;
    144a:	2338      	movs	r3, #56	; 0x38
    144c:	613b      	str	r3, [r7, #16]
	au32Command[1] = u32DstAddr;
    144e:	68fb      	ldr	r3, [r7, #12]
    1450:	617b      	str	r3, [r7, #20]
	au32Command[2] = u32SrcAddr;
    1452:	68bb      	ldr	r3, [r7, #8]
    1454:	61bb      	str	r3, [r7, #24]
	au32Command[3] = u32Len;
    1456:	687b      	ldr	r3, [r7, #4]
    1458:	61fb      	str	r3, [r7, #28]

	IAP_EXECUTE_CMD(au32Command, au32Result);
    145a:	f107 0110 	add.w	r1, r7, #16
    145e:	f107 0224 	add.w	r2, r7, #36	; 0x24
    1462:	4b09      	ldr	r3, [pc, #36]	; (1488 <u32IAP_Compare+0x4c>)
    1464:	4608      	mov	r0, r1
    1466:	4611      	mov	r1, r2
    1468:	4798      	blx	r3

	if (au32Result[0] == IAP_STA_COMPARE_ERROR)
    146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    146c:	2b0a      	cmp	r3, #10
    146e:	d105      	bne.n	147c <u32IAP_Compare+0x40>
	{
		if (pu32Offset != 0)
    1470:	683b      	ldr	r3, [r7, #0]
    1472:	2b00      	cmp	r3, #0
    1474:	d002      	beq.n	147c <u32IAP_Compare+0x40>
		{
			*pu32Offset = au32Result[1];
    1476:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1478:	683b      	ldr	r3, [r7, #0]
    147a:	601a      	str	r2, [r3, #0]
		}
	}
	return ( au32Result[0] );
    147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    147e:	4618      	mov	r0, r3
    1480:	3738      	adds	r7, #56	; 0x38
    1482:	46bd      	mov	sp, r7
    1484:	bd80      	pop	{r7, pc}
    1486:	bf00      	nop
    1488:	1fff1ff1 	.word	0x1fff1ff1

0000148c <WriteImageSignature>:
**
** Returned value:	none
**
******************************************************************************/
void WriteImageSignature( uint32_t  size, uint32_t crc )
{
    148c:	b580      	push	{r7, lr}
    148e:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
    1492:	af00      	add	r7, sp, #0
    1494:	1d3b      	adds	r3, r7, #4
    1496:	6018      	str	r0, [r3, #0]
    1498:	463b      	mov	r3, r7
    149a:	6019      	str	r1, [r3, #0]

	char buffer[1024];
	uint32_t rc;
	int i;

	char* startAddr = (char *)(SECONDARY_IMAGE_END_ADDR - 1024);
    149c:	4b42      	ldr	r3, [pc, #264]	; (15a8 <WriteImageSignature+0x11c>)
    149e:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

	sprintf(buffer, "Writing signature: 0x%X   CRC : %X\r\n", size, crc);
    14a2:	f107 0108 	add.w	r1, r7, #8
    14a6:	1d3a      	adds	r2, r7, #4
    14a8:	463b      	mov	r3, r7
    14aa:	4608      	mov	r0, r1
    14ac:	493f      	ldr	r1, [pc, #252]	; (15ac <WriteImageSignature+0x120>)
    14ae:	6812      	ldr	r2, [r2, #0]
    14b0:	681b      	ldr	r3, [r3, #0]
    14b2:	f001 fea5 	bl	3200 <sprintf>
	Trace( buffer );
    14b6:	f107 0308 	add.w	r3, r7, #8
    14ba:	4618      	mov	r0, r3
    14bc:	f000 fbce 	bl	1c5c <Trace>

	for( i = 0; i < 1024; i++ )
    14c0:	2300      	movs	r3, #0
    14c2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
    14c6:	e012      	b.n	14ee <WriteImageSignature+0x62>
	{
		buffer[i++] = *startAddr++;
    14c8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
    14cc:	1c5a      	adds	r2, r3, #1
    14ce:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
    14d2:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    14d6:	1c51      	adds	r1, r2, #1
    14d8:	f8c7 1418 	str.w	r1, [r7, #1048]	; 0x418
    14dc:	7811      	ldrb	r1, [r2, #0]
    14de:	f107 0208 	add.w	r2, r7, #8
    14e2:	54d1      	strb	r1, [r2, r3]
	char* startAddr = (char *)(SECONDARY_IMAGE_END_ADDR - 1024);

	sprintf(buffer, "Writing signature: 0x%X   CRC : %X\r\n", size, crc);
	Trace( buffer );

	for( i = 0; i < 1024; i++ )
    14e4:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
    14e8:	3301      	adds	r3, #1
    14ea:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
    14ee:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
    14f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    14f6:	dbe7      	blt.n	14c8 <WriteImageSignature+0x3c>
	{
		buffer[i++] = *startAddr++;
	}

	uint32_t* ptrCRC  = (uint32_t*)&buffer[ 1024 - 4 ];
    14f8:	f107 0308 	add.w	r3, r7, #8
    14fc:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
    1500:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	*ptrCRC		= crc;
    1504:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
    1508:	463a      	mov	r2, r7
    150a:	6812      	ldr	r2, [r2, #0]
    150c:	601a      	str	r2, [r3, #0]

	uint32_t* ptrSize = (uint32_t*)&buffer[ 1024 - 8 ];
    150e:	f107 0308 	add.w	r3, r7, #8
    1512:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
    1516:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	*ptrSize	= size;
    151a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
    151e:	1d3a      	adds	r2, r7, #4
    1520:	6812      	ldr	r2, [r2, #0]
    1522:	601a      	str	r2, [r3, #0]

	uint32_t* ptrConst = (uint32_t*)&buffer[ 1024 - 12 ];
    1524:	f107 0308 	add.w	r3, r7, #8
    1528:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
    152c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	*ptrConst	= IMAGE_CONSTANT;
    1530:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
    1534:	4a1e      	ldr	r2, [pc, #120]	; (15b0 <WriteImageSignature+0x124>)
    1536:	601a      	str	r2, [r3, #0]

	if (u32IAP_PrepareSectors(SECONDARY_IMAGE_END_SEC,
    1538:	201b      	movs	r0, #27
    153a:	211b      	movs	r1, #27
    153c:	f7ff fed2 	bl	12e4 <u32IAP_PrepareSectors>
    1540:	4603      	mov	r3, r0
    1542:	2b00      	cmp	r3, #0
    1544:	d12b      	bne.n	159e <WriteImageSignature+0x112>
			SECONDARY_IMAGE_END_SEC) == IAP_STA_CMD_SUCCESS)
	{
		TraceNL("prepared ");
    1546:	481b      	ldr	r0, [pc, #108]	; (15b4 <WriteImageSignature+0x128>)
    1548:	f000 fb98 	bl	1c7c <TraceNL>
		u32IAP_EraseSectors( SECONDARY_IMAGE_END_SEC, SECONDARY_IMAGE_END_SEC );
    154c:	201b      	movs	r0, #27
    154e:	211b      	movs	r1, #27
    1550:	f7ff ff16 	bl	1380 <u32IAP_EraseSectors>
		TraceNL("Erased ");
    1554:	4818      	ldr	r0, [pc, #96]	; (15b8 <WriteImageSignature+0x12c>)
    1556:	f000 fb91 	bl	1c7c <TraceNL>

		u32IAP_PrepareSectors(SECONDARY_IMAGE_END_SEC,	SECONDARY_IMAGE_END_SEC);
    155a:	201b      	movs	r0, #27
    155c:	211b      	movs	r1, #27
    155e:	f7ff fec1 	bl	12e4 <u32IAP_PrepareSectors>

		rc = u32IAP_CopyRAMToFlash((SECONDARY_IMAGE_END_ADDR - 1024), (uint32_t) buffer, 1024);
    1562:	f107 0308 	add.w	r3, r7, #8
    1566:	4810      	ldr	r0, [pc, #64]	; (15a8 <WriteImageSignature+0x11c>)
    1568:	4619      	mov	r1, r3
    156a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    156e:	f7ff fedd 	bl	132c <u32IAP_CopyRAMToFlash>
    1572:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408

		sprintf(buffer, "Copy Ram result code : %d\r\n", rc);
    1576:	f107 0308 	add.w	r3, r7, #8
    157a:	4618      	mov	r0, r3
    157c:	490f      	ldr	r1, [pc, #60]	; (15bc <WriteImageSignature+0x130>)
    157e:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
    1582:	f001 fe3d 	bl	3200 <sprintf>
		TraceNL(buffer);
    1586:	f107 0308 	add.w	r3, r7, #8
    158a:	4618      	mov	r0, r3
    158c:	f000 fb76 	bl	1c7c <TraceNL>
		/*	Copy data (already) located in RAM to flash */
		if (rc == IAP_STA_CMD_SUCCESS) {
    1590:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
    1594:	2b00      	cmp	r3, #0
    1596:	d102      	bne.n	159e <WriteImageSignature+0x112>
			TraceNL("copied ");
    1598:	4809      	ldr	r0, [pc, #36]	; (15c0 <WriteImageSignature+0x134>)
    159a:	f000 fb6f 	bl	1c7c <TraceNL>
		}
	}

	return;
    159e:	bf00      	nop
}
    15a0:	f507 6784 	add.w	r7, r7, #1056	; 0x420
    15a4:	46bd      	mov	sp, r7
    15a6:	bd80      	pop	{r7, pc}
    15a8:	0006fc00 	.word	0x0006fc00
    15ac:	00005f4c 	.word	0x00005f4c
    15b0:	aa55bc47 	.word	0xaa55bc47
    15b4:	00005f74 	.word	0x00005f74
    15b8:	00005f80 	.word	0x00005f80
    15bc:	00005f88 	.word	0x00005f88
    15c0:	00005fa4 	.word	0x00005fa4

000015c4 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    15c4:	b480      	push	{r7}
    15c6:	b083      	sub	sp, #12
    15c8:	af00      	add	r7, sp, #0
    15ca:	4603      	mov	r3, r0
    15cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    15ce:	4908      	ldr	r1, [pc, #32]	; (15f0 <NVIC_EnableIRQ+0x2c>)
    15d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    15d4:	095b      	lsrs	r3, r3, #5
    15d6:	79fa      	ldrb	r2, [r7, #7]
    15d8:	f002 021f 	and.w	r2, r2, #31
    15dc:	2001      	movs	r0, #1
    15de:	fa00 f202 	lsl.w	r2, r0, r2
    15e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    15e6:	370c      	adds	r7, #12
    15e8:	46bd      	mov	sp, r7
    15ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ee:	4770      	bx	lr
    15f0:	e000e100 	.word	0xe000e100

000015f4 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    15f4:	b480      	push	{r7}
    15f6:	b083      	sub	sp, #12
    15f8:	af00      	add	r7, sp, #0
    15fa:	4603      	mov	r3, r0
    15fc:	6039      	str	r1, [r7, #0]
    15fe:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    1600:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1604:	2b00      	cmp	r3, #0
    1606:	da0b      	bge.n	1620 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    1608:	490d      	ldr	r1, [pc, #52]	; (1640 <NVIC_SetPriority+0x4c>)
    160a:	79fb      	ldrb	r3, [r7, #7]
    160c:	f003 030f 	and.w	r3, r3, #15
    1610:	3b04      	subs	r3, #4
    1612:	683a      	ldr	r2, [r7, #0]
    1614:	b2d2      	uxtb	r2, r2
    1616:	00d2      	lsls	r2, r2, #3
    1618:	b2d2      	uxtb	r2, r2
    161a:	440b      	add	r3, r1
    161c:	761a      	strb	r2, [r3, #24]
    161e:	e009      	b.n	1634 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    1620:	4908      	ldr	r1, [pc, #32]	; (1644 <NVIC_SetPriority+0x50>)
    1622:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1626:	683a      	ldr	r2, [r7, #0]
    1628:	b2d2      	uxtb	r2, r2
    162a:	00d2      	lsls	r2, r2, #3
    162c:	b2d2      	uxtb	r2, r2
    162e:	440b      	add	r3, r1
    1630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    1634:	370c      	adds	r7, #12
    1636:	46bd      	mov	sp, r7
    1638:	f85d 7b04 	ldr.w	r7, [sp], #4
    163c:	4770      	bx	lr
    163e:	bf00      	nop
    1640:	e000ed00 	.word	0xe000ed00
    1644:	e000e100 	.word	0xe000e100

00001648 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
    1648:	b580      	push	{r7, lr}
    164a:	b082      	sub	sp, #8
    164c:	af00      	add	r7, sp, #0
    164e:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
    1650:	687b      	ldr	r3, [r7, #4]
    1652:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    1656:	d301      	bcc.n	165c <SysTick_Config+0x14>
    1658:	2301      	movs	r3, #1
    165a:	e011      	b.n	1680 <SysTick_Config+0x38>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
    165c:	4a0a      	ldr	r2, [pc, #40]	; (1688 <SysTick_Config+0x40>)
    165e:	687b      	ldr	r3, [r7, #4]
    1660:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1664:	3b01      	subs	r3, #1
    1666:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
    1668:	f04f 30ff 	mov.w	r0, #4294967295
    166c:	211f      	movs	r1, #31
    166e:	f7ff ffc1 	bl	15f4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    1672:	4b05      	ldr	r3, [pc, #20]	; (1688 <SysTick_Config+0x40>)
    1674:	2200      	movs	r2, #0
    1676:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
    1678:	4b03      	ldr	r3, [pc, #12]	; (1688 <SysTick_Config+0x40>)
    167a:	2207      	movs	r2, #7
    167c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
    167e:	2300      	movs	r3, #0
}
    1680:	4618      	mov	r0, r3
    1682:	3708      	adds	r7, #8
    1684:	46bd      	mov	sp, r7
    1686:	bd80      	pop	{r7, pc}
    1688:	e000e010 	.word	0xe000e010

0000168c <main>:
static uint32_t received_data = 0;



int main(void)
{
    168c:	b580      	push	{r7, lr}
    168e:	b0b4      	sub	sp, #208	; 0xd0
    1690:	af00      	add	r7, sp, #0
	char buffer[200];

	SystemInit();
    1692:	f001 fd01 	bl	3098 <SystemInit>

	LPC_SC->CLKSRCSEL |= 0x01;//0x01;
    1696:	4a42      	ldr	r2, [pc, #264]	; (17a0 <main+0x114>)
    1698:	4b41      	ldr	r3, [pc, #260]	; (17a0 <main+0x114>)
    169a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    169e:	f043 0301 	orr.w	r3, r3, #1
    16a2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	LPC_SC->PLL0CFG	  |= 0x01; // Select external osc. as main clock.
    16a6:	4a3e      	ldr	r2, [pc, #248]	; (17a0 <main+0x114>)
    16a8:	4b3d      	ldr	r3, [pc, #244]	; (17a0 <main+0x114>)
    16aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    16ae:	f043 0301 	orr.w	r3, r3, #1
    16b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	LPC_SC->CCLKCFG	   = 0x03; // Main PLL is divided by 8
    16b6:	4b3a      	ldr	r3, [pc, #232]	; (17a0 <main+0x114>)
    16b8:	2203      	movs	r2, #3
    16ba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	SystemCoreClockUpdate();
    16be:	f001 fc95 	bl	2fec <SystemCoreClockUpdate>
	// Generate f each 1 ms, used to enable DelayMs function
	SysTick_Config(SystemCoreClock / 1000 - 1);
    16c2:	4b38      	ldr	r3, [pc, #224]	; (17a4 <main+0x118>)
    16c4:	681b      	ldr	r3, [r3, #0]
    16c6:	4a38      	ldr	r2, [pc, #224]	; (17a8 <main+0x11c>)
    16c8:	fba2 2303 	umull	r2, r3, r2, r3
    16cc:	099b      	lsrs	r3, r3, #6
    16ce:	3b01      	subs	r3, #1
    16d0:	4618      	mov	r0, r3
    16d2:	f7ff ffb9 	bl	1648 <SysTick_Config>

	WDTInit(WDT_FEED_30_SECS);
    16d6:	4835      	ldr	r0, [pc, #212]	; (17ac <main+0x120>)
    16d8:	f001 f93a 	bl	2950 <WDTInit>

	ConfigurePins();
    16dc:	f000 fa1a 	bl	1b14 <ConfigurePins>

	UARTInit( PORT_TRACE, 115200 );
    16e0:	2000      	movs	r0, #0
    16e2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    16e6:	f000 fe15 	bl	2314 <UARTInit>
	UARTInit( PORT_GSM,   115200 );
    16ea:	2001      	movs	r0, #1
    16ec:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    16f0:	f000 fe10 	bl	2314 <UARTInit>

	TraceNL("\r\nBooting up");
    16f4:	482e      	ldr	r0, [pc, #184]	; (17b0 <main+0x124>)
    16f6:	f000 fac1 	bl	1c7c <TraceNL>
	sprintf(buffer, "SystemCoreClock = %d Hz\r\n", SystemCoreClock);
    16fa:	4b2a      	ldr	r3, [pc, #168]	; (17a4 <main+0x118>)
    16fc:	681b      	ldr	r3, [r3, #0]
    16fe:	1d3a      	adds	r2, r7, #4
    1700:	4610      	mov	r0, r2
    1702:	492c      	ldr	r1, [pc, #176]	; (17b4 <main+0x128>)
    1704:	461a      	mov	r2, r3
    1706:	f001 fd7b 	bl	3200 <sprintf>
	Trace(buffer);
    170a:	1d3b      	adds	r3, r7, #4
    170c:	4618      	mov	r0, r3
    170e:	f000 faa5 	bl	1c5c <Trace>

	WDTFeed();
    1712:	f001 f93d 	bl	2990 <WDTFeed>
	TraceNL( "Checking upgrade request" );
    1716:	4828      	ldr	r0, [pc, #160]	; (17b8 <main+0x12c>)
    1718:	f000 fab0 	bl	1c7c <TraceNL>

	if( IsUpgradeRequested() )
    171c:	f000 f85a 	bl	17d4 <IsUpgradeRequested>
    1720:	4603      	mov	r3, r0
    1722:	2b00      	cmp	r3, #0
    1724:	d025      	beq.n	1772 <main+0xe6>
	{
		TraceNL( "System image upgrade requested" );
    1726:	4825      	ldr	r0, [pc, #148]	; (17bc <main+0x130>)
    1728:	f000 faa8 	bl	1c7c <TraceNL>
		int8_t 	trials = 3;
    172c:	2303      	movs	r3, #3
    172e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		while( trials-- > 0 )
    1732:	e011      	b.n	1758 <main+0xcc>
		{
			/*
			 * 	Initialize GSM module
			 * 	Setup a server connection to update server
			 */
			if( GSM_ConnectToTrioUpgradeServer() == SUCCESS )
    1734:	f7fe fe38 	bl	3a8 <GSM_ConnectToTrioUpgradeServer>
    1738:	4603      	mov	r3, r0
    173a:	2b00      	cmp	r3, #0
    173c:	d10c      	bne.n	1758 <main+0xcc>
			{
				TraceNL( "Server Connection Established to Upgrade server" );
    173e:	4820      	ldr	r0, [pc, #128]	; (17c0 <main+0x134>)
    1740:	f000 fa9c 	bl	1c7c <TraceNL>
				WDTFeed( );
    1744:	f001 f924 	bl	2990 <WDTFeed>
				DownloadSecondaryImage();
    1748:	f000 f880 	bl	184c <DownloadSecondaryImage>
				WDTFeed( );
    174c:	f001 f920 	bl	2990 <WDTFeed>
				TraceNL( "Download finished " );
    1750:	481c      	ldr	r0, [pc, #112]	; (17c4 <main+0x138>)
    1752:	f000 fa93 	bl	1c7c <TraceNL>
				break;
    1756:	e009      	b.n	176c <main+0xe0>

	if( IsUpgradeRequested() )
	{
		TraceNL( "System image upgrade requested" );
		int8_t 	trials = 3;
		while( trials-- > 0 )
    1758:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
    175c:	b2d3      	uxtb	r3, r2
    175e:	3b01      	subs	r3, #1
    1760:	b2db      	uxtb	r3, r3
    1762:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    1766:	b253      	sxtb	r3, r2
    1768:	2b00      	cmp	r3, #0
    176a:	dce3      	bgt.n	1734 <main+0xa8>
				WDTFeed( );
				TraceNL( "Download finished " );
				break;
			}
		}
		TraceNL( "Finished upgrading" );
    176c:	4816      	ldr	r0, [pc, #88]	; (17c8 <main+0x13c>)
    176e:	f000 fa85 	bl	1c7c <TraceNL>
	}

	if( IsSecondaryImageValid() == SUCCESS )
    1772:	f000 f987 	bl	1a84 <IsSecondaryImageValid>
    1776:	4603      	mov	r3, r0
    1778:	2b00      	cmp	r3, #0
    177a:	d106      	bne.n	178a <main+0xfe>
	{
		TraceNL( "Booting SECONDARY image" );
    177c:	4813      	ldr	r0, [pc, #76]	; (17cc <main+0x140>)
    177e:	f000 fa7d 	bl	1c7c <TraceNL>
		ExecuteApplicationImage( SECONDARY_IMAGE_LOAD_ADDR );
    1782:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1786:	f000 f8c5 	bl	1914 <ExecuteApplicationImage>
	}

	TraceNL( "Booting PRIMARY image" );
    178a:	4811      	ldr	r0, [pc, #68]	; (17d0 <main+0x144>)
    178c:	f000 fa76 	bl	1c7c <TraceNL>
	WDTFeed( );
    1790:	f001 f8fe 	bl	2990 <WDTFeed>
	ExecuteApplicationImage( PRIMARY_IMAGE_LOAD_ADDR );
    1794:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    1798:	f000 f8bc 	bl	1914 <ExecuteApplicationImage>

	while ( 1L );
    179c:	e7fe      	b.n	179c <main+0x110>
    179e:	bf00      	nop
    17a0:	400fc000 	.word	0x400fc000
    17a4:	10000024 	.word	0x10000024
    17a8:	10624dd3 	.word	0x10624dd3
    17ac:	0c6aea15 	.word	0x0c6aea15
    17b0:	00005fac 	.word	0x00005fac
    17b4:	00005fbc 	.word	0x00005fbc
    17b8:	00005fd8 	.word	0x00005fd8
    17bc:	00005ff4 	.word	0x00005ff4
    17c0:	00006014 	.word	0x00006014
    17c4:	00006044 	.word	0x00006044
    17c8:	00006058 	.word	0x00006058
    17cc:	0000606c 	.word	0x0000606c
    17d0:	00006084 	.word	0x00006084

000017d4 <IsUpgradeRequested>:
** Returned value:	TRUE	upgrade is requested
** 					FALSE   upgrade is not requested
**
******************************************************************************/
uint32_t	IsUpgradeRequested( void )
{
    17d4:	b580      	push	{r7, lr}
    17d6:	b09a      	sub	sp, #104	; 0x68
    17d8:	af00      	add	r7, sp, #0
	if( (*( (uint32_t *)UPGRADE_PARAMETERS_ADDR) ) != 0xFFFFFFFF )
    17da:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
    17de:	681b      	ldr	r3, [r3, #0]
    17e0:	f1b3 3fff 	cmp.w	r3, #4294967295
    17e4:	d026      	beq.n	1834 <IsUpgradeRequested+0x60>
	{
		/* TODO : IP and port may be checked for validity */
		char buffer[100];
		char * port ;
		strcpy( update_service_ip, (char*)UPGRADE_PARAMETERS_ADDR );
    17e6:	4816      	ldr	r0, [pc, #88]	; (1840 <IsUpgradeRequested+0x6c>)
    17e8:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
    17ec:	f003 f94f 	bl	4a8e <strcpy>

		port = strchr( (char*)UPGRADE_PARAMETERS_ADDR, '\0' );
    17f0:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
    17f4:	2100      	movs	r1, #0
    17f6:	f003 f93d 	bl	4a74 <strchr>
    17fa:	6678      	str	r0, [r7, #100]	; 0x64
		port++;
    17fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    17fe:	3301      	adds	r3, #1
    1800:	667b      	str	r3, [r7, #100]	; 0x64
		strcpy( update_service_port, port);
    1802:	4810      	ldr	r0, [pc, #64]	; (1844 <IsUpgradeRequested+0x70>)
    1804:	6e79      	ldr	r1, [r7, #100]	; 0x64
    1806:	f003 f942 	bl	4a8e <strcpy>

		sprintf(buffer,"Update parameters %s:%s", update_service_ip, update_service_port);
    180a:	463b      	mov	r3, r7
    180c:	4618      	mov	r0, r3
    180e:	490e      	ldr	r1, [pc, #56]	; (1848 <IsUpgradeRequested+0x74>)
    1810:	4a0b      	ldr	r2, [pc, #44]	; (1840 <IsUpgradeRequested+0x6c>)
    1812:	4b0c      	ldr	r3, [pc, #48]	; (1844 <IsUpgradeRequested+0x70>)
    1814:	f001 fcf4 	bl	3200 <sprintf>
		TraceNL( buffer );
    1818:	463b      	mov	r3, r7
    181a:	4618      	mov	r0, r3
    181c:	f000 fa2e 	bl	1c7c <TraceNL>

		/* We are erasing the ip and port information in case of any failure
		 * during upgrade procedure to prevent us retrying update unnecesarily
		 */
		u32IAP_PrepareSectors( UPGRADE_PARAMETERS_SEC, UPGRADE_PARAMETERS_SEC );
    1820:	200f      	movs	r0, #15
    1822:	210f      	movs	r1, #15
    1824:	f7ff fd5e 	bl	12e4 <u32IAP_PrepareSectors>
		u32IAP_EraseSectors( UPGRADE_PARAMETERS_SEC, UPGRADE_PARAMETERS_SEC );
    1828:	200f      	movs	r0, #15
    182a:	210f      	movs	r1, #15
    182c:	f7ff fda8 	bl	1380 <u32IAP_EraseSectors>
		return TRUE;
    1830:	2301      	movs	r3, #1
    1832:	e000      	b.n	1836 <IsUpgradeRequested+0x62>
	}

	return FALSE;
    1834:	2300      	movs	r3, #0
}
    1836:	4618      	mov	r0, r3
    1838:	3768      	adds	r7, #104	; 0x68
    183a:	46bd      	mov	sp, r7
    183c:	bd80      	pop	{r7, pc}
    183e:	bf00      	nop
    1840:	10000000 	.word	0x10000000
    1844:	10000014 	.word	0x10000014
    1848:	0000609c 	.word	0x0000609c

0000184c <DownloadSecondaryImage>:


void DownloadSecondaryImage( void )
{
    184c:	b590      	push	{r4, r7, lr}
    184e:	b0a3      	sub	sp, #140	; 0x8c
    1850:	af02      	add	r7, sp, #8
	uint32_t	reason[5];
	uint32_t	i;

	char buff[100];

	i = SECONDARY_IMAGE_START_SEC;
    1852:	2316      	movs	r3, #22
    1854:	67fb      	str	r3, [r7, #124]	; 0x7c
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    1856:	e00a      	b.n	186e <DownloadSecondaryImage+0x22>
	{
		u32IAP_PrepareSectors( i, i );
    1858:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    185a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    185c:	f7ff fd42 	bl	12e4 <u32IAP_PrepareSectors>
		u32IAP_EraseSectors( i, i );
    1860:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    1862:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    1864:	f7ff fd8c 	bl	1380 <u32IAP_EraseSectors>
	uint32_t	i;

	char buff[100];

	i = SECONDARY_IMAGE_START_SEC;
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    1868:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    186a:	3301      	adds	r3, #1
    186c:	67fb      	str	r3, [r7, #124]	; 0x7c
    186e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1870:	2b1b      	cmp	r3, #27
    1872:	d9f1      	bls.n	1858 <DownloadSecondaryImage+0xc>
	{
		u32IAP_PrepareSectors( i, i );
		u32IAP_EraseSectors( i, i );
	}
	TraceNL( "Checking if target memory is blank" );
    1874:	4821      	ldr	r0, [pc, #132]	; (18fc <DownloadSecondaryImage+0xb0>)
    1876:	f000 fa01 	bl	1c7c <TraceNL>


	i = SECONDARY_IMAGE_START_SEC;
    187a:	2316      	movs	r3, #22
    187c:	67fb      	str	r3, [r7, #124]	; 0x7c
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    187e:	e02d      	b.n	18dc <DownloadSecondaryImage+0x90>
	{
		if( u32IAP_BlankCheckSectors( i, i, &reason[0] )== IAP_STA_SECTOR_NOT_BLANK )
    1880:	f107 0368 	add.w	r3, r7, #104	; 0x68
    1884:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    1886:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    1888:	461a      	mov	r2, r3
    188a:	f7ff fda9 	bl	13e0 <u32IAP_BlankCheckSectors>
    188e:	4603      	mov	r3, r0
    1890:	2b08      	cmp	r3, #8
    1892:	d116      	bne.n	18c2 <DownloadSecondaryImage+0x76>
		{
			sprintf(buff, "Target sector (%d) is not blank addr: 0x%X, 0x%X", i, reason[0], reason[1] );
    1894:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    1896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1898:	1d3a      	adds	r2, r7, #4
    189a:	9300      	str	r3, [sp, #0]
    189c:	4610      	mov	r0, r2
    189e:	4918      	ldr	r1, [pc, #96]	; (1900 <DownloadSecondaryImage+0xb4>)
    18a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    18a2:	4623      	mov	r3, r4
    18a4:	f001 fcac 	bl	3200 <sprintf>
			TraceNL( buff );
    18a8:	1d3b      	adds	r3, r7, #4
    18aa:	4618      	mov	r0, r3
    18ac:	f000 f9e6 	bl	1c7c <TraceNL>
			u32IAP_PrepareSectors( i, i );
    18b0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    18b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    18b4:	f7ff fd16 	bl	12e4 <u32IAP_PrepareSectors>
			u32IAP_EraseSectors( i, i);
    18b8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    18ba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    18bc:	f7ff fd60 	bl	1380 <u32IAP_EraseSectors>
    18c0:	e009      	b.n	18d6 <DownloadSecondaryImage+0x8a>

		}else
		{
			sprintf(buff, "Target sector (%d) is blank ", i );
    18c2:	1d3b      	adds	r3, r7, #4
    18c4:	4618      	mov	r0, r3
    18c6:	490f      	ldr	r1, [pc, #60]	; (1904 <DownloadSecondaryImage+0xb8>)
    18c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    18ca:	f001 fc99 	bl	3200 <sprintf>
			TraceNL( buff );
    18ce:	1d3b      	adds	r3, r7, #4
    18d0:	4618      	mov	r0, r3
    18d2:	f000 f9d3 	bl	1c7c <TraceNL>
	}
	TraceNL( "Checking if target memory is blank" );


	i = SECONDARY_IMAGE_START_SEC;
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    18d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    18d8:	3301      	adds	r3, #1
    18da:	67fb      	str	r3, [r7, #124]	; 0x7c
    18dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    18de:	2b1b      	cmp	r3, #27
    18e0:	d9ce      	bls.n	1880 <DownloadSecondaryImage+0x34>
			TraceNL( buff );
		}
	}

	/*	Clear the received data counter using in the load_mage function */
	received_data = 0;
    18e2:	4b09      	ldr	r3, [pc, #36]	; (1908 <DownloadSecondaryImage+0xbc>)
    18e4:	2200      	movs	r2, #0
    18e6:	601a      	str	r2, [r3, #0]

	TraceNL( "Starting download" );
    18e8:	4808      	ldr	r0, [pc, #32]	; (190c <DownloadSecondaryImage+0xc0>)
    18ea:	f000 f9c7 	bl	1c7c <TraceNL>
	/*	Store a new image into flash */
	XModem1K_Client( &loadImage );
    18ee:	4808      	ldr	r0, [pc, #32]	; (1910 <DownloadSecondaryImage+0xc4>)
    18f0:	f001 f900 	bl	2af4 <XModem1K_Client>


}
    18f4:	3784      	adds	r7, #132	; 0x84
    18f6:	46bd      	mov	sp, r7
    18f8:	bd90      	pop	{r4, r7, pc}
    18fa:	bf00      	nop
    18fc:	000060b4 	.word	0x000060b4
    1900:	000060d8 	.word	0x000060d8
    1904:	0000610c 	.word	0x0000610c
    1908:	10000038 	.word	0x10000038
    190c:	0000612c 	.word	0x0000612c
    1910:	00001945 	.word	0x00001945

00001914 <ExecuteApplicationImage>:

void ExecuteApplicationImage( unsigned int startAddress )
{
    1914:	b580      	push	{r7, lr}
    1916:	b084      	sub	sp, #16
    1918:	af00      	add	r7, sp, #0
    191a:	6078      	str	r0, [r7, #4]
	unsigned *p;	// used for loading address of reset handler from user flash

	/* Change the Vector Table to the
	in case the user application uses interrupts */

	SCB->VTOR = (startAddress & 0x1FFFFF80);
    191c:	4a08      	ldr	r2, [pc, #32]	; (1940 <ExecuteApplicationImage+0x2c>)
    191e:	687b      	ldr	r3, [r7, #4]
    1920:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    1924:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1928:	6093      	str	r3, [r2, #8]

	// Load contents of second word of user flash - the reset handler address
	// in the applications vector table
	p = (unsigned *)(startAddress + 4);
    192a:	687b      	ldr	r3, [r7, #4]
    192c:	3304      	adds	r3, #4
    192e:	60fb      	str	r3, [r7, #12]

	// Set user_code_entry to be the address contained in that second word
	// of user flash
	user_code_entry = (void *) *p;
    1930:	68fb      	ldr	r3, [r7, #12]
    1932:	681b      	ldr	r3, [r3, #0]
    1934:	60bb      	str	r3, [r7, #8]

	// Jump to user application
    user_code_entry();
    1936:	68bb      	ldr	r3, [r7, #8]
    1938:	4798      	blx	r3
}
    193a:	3710      	adds	r7, #16
    193c:	46bd      	mov	sp, r7
    193e:	bd80      	pop	{r7, pc}
    1940:	e000ed00 	.word	0xe000ed00

00001944 <loadImage>:

static uint32_t loadImage( uint8_t *data, uint16_t length )
{
    1944:	b580      	push	{r7, lr}
    1946:	b0c2      	sub	sp, #264	; 0x108
    1948:	af00      	add	r7, sp, #0
    194a:	1d3b      	adds	r3, r7, #4
    194c:	6018      	str	r0, [r3, #0]
    194e:	460a      	mov	r2, r1
    1950:	1cbb      	adds	r3, r7, #2
    1952:	801a      	strh	r2, [r3, #0]
	char buffer[250];
	uint32_t rc;

	sprintf(buffer, "Totally received : %d   frame length : %d\r\n", received_data, length);
    1954:	4b43      	ldr	r3, [pc, #268]	; (1a64 <loadImage+0x120>)
    1956:	681a      	ldr	r2, [r3, #0]
    1958:	1cbb      	adds	r3, r7, #2
    195a:	881b      	ldrh	r3, [r3, #0]
    195c:	f107 0108 	add.w	r1, r7, #8
    1960:	4608      	mov	r0, r1
    1962:	4941      	ldr	r1, [pc, #260]	; (1a68 <loadImage+0x124>)
    1964:	f001 fc4c 	bl	3200 <sprintf>
	Trace( buffer );
    1968:	f107 0308 	add.w	r3, r7, #8
    196c:	4618      	mov	r0, r3
    196e:	f000 f975 	bl	1c5c <Trace>

	if( data != NULL && length )
    1972:	1d3b      	adds	r3, r7, #4
    1974:	681b      	ldr	r3, [r3, #0]
    1976:	2b00      	cmp	r3, #0
    1978:	d06d      	beq.n	1a56 <loadImage+0x112>
    197a:	1cbb      	adds	r3, r7, #2
    197c:	881b      	ldrh	r3, [r3, #0]
    197e:	2b00      	cmp	r3, #0
    1980:	d069      	beq.n	1a56 <loadImage+0x112>
	{
		/*	Prepare Sectors to be flashed */
		if (u32IAP_PrepareSectors( SECONDARY_IMAGE_START_SEC, SECONDARY_IMAGE_END_SEC ) == IAP_STA_CMD_SUCCESS)
    1982:	2016      	movs	r0, #22
    1984:	211b      	movs	r1, #27
    1986:	f7ff fcad 	bl	12e4 <u32IAP_PrepareSectors>
    198a:	4603      	mov	r3, r0
    198c:	2b00      	cmp	r3, #0
    198e:	d162      	bne.n	1a56 <loadImage+0x112>
		{
			TraceNL("prepared ");
    1990:	4836      	ldr	r0, [pc, #216]	; (1a6c <loadImage+0x128>)
    1992:	f000 f973 	bl	1c7c <TraceNL>

			rc = u32IAP_CopyRAMToFlash(
    1996:	4b33      	ldr	r3, [pc, #204]	; (1a64 <loadImage+0x120>)
    1998:	681b      	ldr	r3, [r3, #0]
    199a:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
    199e:	1d3b      	adds	r3, r7, #4
    19a0:	681a      	ldr	r2, [r3, #0]
    19a2:	1cbb      	adds	r3, r7, #2
    19a4:	881b      	ldrh	r3, [r3, #0]
    19a6:	4608      	mov	r0, r1
    19a8:	4611      	mov	r1, r2
    19aa:	461a      	mov	r2, r3
    19ac:	f7ff fcbe 	bl	132c <u32IAP_CopyRAMToFlash>
    19b0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
					SECONDARY_IMAGE_LOAD_ADDR + received_data,
					(uint32_t) data,
					length
					);

			sprintf( buffer, "Copy Ram result code : %d\r\n", rc );
    19b4:	f107 0308 	add.w	r3, r7, #8
    19b8:	4618      	mov	r0, r3
    19ba:	492d      	ldr	r1, [pc, #180]	; (1a70 <loadImage+0x12c>)
    19bc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    19c0:	f001 fc1e 	bl	3200 <sprintf>
			TraceNL( buffer );
    19c4:	f107 0308 	add.w	r3, r7, #8
    19c8:	4618      	mov	r0, r3
    19ca:	f000 f957 	bl	1c7c <TraceNL>
			/*	Copy data (already) located in RAM to flash */
			if (rc == IAP_STA_CMD_SUCCESS)
    19ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    19d2:	2b00      	cmp	r3, #0
    19d4:	d13f      	bne.n	1a56 <loadImage+0x112>
			{
				TraceNL( "copied " );
    19d6:	4827      	ldr	r0, [pc, #156]	; (1a74 <loadImage+0x130>)
    19d8:	f000 f950 	bl	1c7c <TraceNL>
				rc = u32IAP_Compare( SECONDARY_IMAGE_LOAD_ADDR + received_data,
    19dc:	4b21      	ldr	r3, [pc, #132]	; (1a64 <loadImage+0x120>)
    19de:	681b      	ldr	r3, [r3, #0]
    19e0:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
    19e4:	1d3b      	adds	r3, r7, #4
    19e6:	681a      	ldr	r2, [r3, #0]
    19e8:	1cbb      	adds	r3, r7, #2
    19ea:	881b      	ldrh	r3, [r3, #0]
    19ec:	4608      	mov	r0, r1
    19ee:	4611      	mov	r1, r2
    19f0:	461a      	mov	r2, r3
    19f2:	2300      	movs	r3, #0
    19f4:	f7ff fd22 	bl	143c <u32IAP_Compare>
    19f8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
						             (uint32_t) data,
									 length, 0
									);
				sprintf( buffer, "u32IAP_Compare : %d  wrote %d \r\n", rc , length );
    19fc:	1cbb      	adds	r3, r7, #2
    19fe:	881b      	ldrh	r3, [r3, #0]
    1a00:	f107 0208 	add.w	r2, r7, #8
    1a04:	4610      	mov	r0, r2
    1a06:	491c      	ldr	r1, [pc, #112]	; (1a78 <loadImage+0x134>)
    1a08:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    1a0c:	f001 fbf8 	bl	3200 <sprintf>
				Trace( buffer );
    1a10:	f107 0308 	add.w	r3, r7, #8
    1a14:	4618      	mov	r0, r3
    1a16:	f000 f921 	bl	1c5c <Trace>

				/*	Verify the flash contents with the contents in RAM */
				if (rc == IAP_STA_CMD_SUCCESS)
    1a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    1a1e:	2b00      	cmp	r3, #0
    1a20:	d10b      	bne.n	1a3a <loadImage+0xf6>
				{
					/*	Update and Print Received bytes counter */
					received_data += length;
    1a22:	1cbb      	adds	r3, r7, #2
    1a24:	881a      	ldrh	r2, [r3, #0]
    1a26:	4b0f      	ldr	r3, [pc, #60]	; (1a64 <loadImage+0x120>)
    1a28:	681b      	ldr	r3, [r3, #0]
    1a2a:	4413      	add	r3, r2
    1a2c:	4a0d      	ldr	r2, [pc, #52]	; (1a64 <loadImage+0x120>)
    1a2e:	6013      	str	r3, [r2, #0]
					TraceNL( "verified " );
    1a30:	4812      	ldr	r0, [pc, #72]	; (1a7c <loadImage+0x138>)
    1a32:	f000 f923 	bl	1c7c <TraceNL>
					return (1);
    1a36:	2301      	movs	r3, #1
    1a38:	e00e      	b.n	1a58 <loadImage+0x114>
				} else {
					TraceDumpHex( (char*)(SECONDARY_IMAGE_LOAD_ADDR + received_data), length );
    1a3a:	4b0a      	ldr	r3, [pc, #40]	; (1a64 <loadImage+0x120>)
    1a3c:	681b      	ldr	r3, [r3, #0]
    1a3e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    1a42:	461a      	mov	r2, r3
    1a44:	1cbb      	adds	r3, r7, #2
    1a46:	881b      	ldrh	r3, [r3, #0]
    1a48:	4610      	mov	r0, r2
    1a4a:	4619      	mov	r1, r3
    1a4c:	f000 f94a 	bl	1ce4 <TraceDumpHex>
					TraceNL( "verification failed " );
    1a50:	480b      	ldr	r0, [pc, #44]	; (1a80 <loadImage+0x13c>)
    1a52:	f000 f913 	bl	1c7c <TraceNL>
				}
			}
		}
	}

	return (0);
    1a56:	2300      	movs	r3, #0
}
    1a58:	4618      	mov	r0, r3
    1a5a:	f507 7784 	add.w	r7, r7, #264	; 0x108
    1a5e:	46bd      	mov	sp, r7
    1a60:	bd80      	pop	{r7, pc}
    1a62:	bf00      	nop
    1a64:	10000038 	.word	0x10000038
    1a68:	00006140 	.word	0x00006140
    1a6c:	0000616c 	.word	0x0000616c
    1a70:	00006178 	.word	0x00006178
    1a74:	00006194 	.word	0x00006194
    1a78:	0000619c 	.word	0x0000619c
    1a7c:	000061c0 	.word	0x000061c0
    1a80:	000061cc 	.word	0x000061cc

00001a84 <IsSecondaryImageValid>:


static int32_t IsSecondaryImageValid( void )
{
    1a84:	b580      	push	{r7, lr}
    1a86:	b09e      	sub	sp, #120	; 0x78
    1a88:	af00      	add	r7, sp, #0
	char buffer[100];


	uint32_t size = *(uint32_t *)(SECONDARY_IMAGE_END_ADDR - 8);
    1a8a:	4b1c      	ldr	r3, [pc, #112]	; (1afc <IsSecondaryImageValid+0x78>)
    1a8c:	681b      	ldr	r3, [r3, #0]
    1a8e:	677b      	str	r3, [r7, #116]	; 0x74

	uint32_t crc  = *(uint32_t *)(SECONDARY_IMAGE_END_ADDR - 4);
    1a90:	4b1b      	ldr	r3, [pc, #108]	; (1b00 <IsSecondaryImageValid+0x7c>)
    1a92:	681b      	ldr	r3, [r3, #0]
    1a94:	673b      	str	r3, [r7, #112]	; 0x70

	uint32_t constant = *(uint32_t *)(SECONDARY_IMAGE_END_ADDR - 12);
    1a96:	4b1b      	ldr	r3, [pc, #108]	; (1b04 <IsSecondaryImageValid+0x80>)
    1a98:	681b      	ldr	r3, [r3, #0]
    1a9a:	66fb      	str	r3, [r7, #108]	; 0x6c

	// the constant at address (SECONDARY_IMAGE_END_ADDR - 12)
	// has to be same as IMAGE_CONSTANT
	if( constant != IMAGE_CONSTANT )
    1a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1a9e:	4a1a      	ldr	r2, [pc, #104]	; (1b08 <IsSecondaryImageValid+0x84>)
    1aa0:	4293      	cmp	r3, r2
    1aa2:	d001      	beq.n	1aa8 <IsSecondaryImageValid+0x24>
		return (1);
    1aa4:	2301      	movs	r3, #1
    1aa6:	e024      	b.n	1af2 <IsSecondaryImageValid+0x6e>

	sprintf(buffer, "Signature: 0x%X   CRC : %X\r\n", size, crc);
    1aa8:	1d3b      	adds	r3, r7, #4
    1aaa:	4618      	mov	r0, r3
    1aac:	4917      	ldr	r1, [pc, #92]	; (1b0c <IsSecondaryImageValid+0x88>)
    1aae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    1ab0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1ab2:	f001 fba5 	bl	3200 <sprintf>
	Trace( buffer );
    1ab6:	1d3b      	adds	r3, r7, #4
    1ab8:	4618      	mov	r0, r3
    1aba:	f000 f8cf 	bl	1c5c <Trace>

	crcInit( );
    1abe:	f7ff f85f 	bl	b80 <crcInit>

	uint32_t calculatedCRC32 = crcFast( (uint8_t*)SECONDARY_IMAGE_LOAD_ADDR, size );
    1ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1ac4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1ac8:	4619      	mov	r1, r3
    1aca:	f7ff f88b 	bl	be4 <crcFast>
    1ace:	66b8      	str	r0, [r7, #104]	; 0x68

	sprintf( buffer, "Calculated Image CRC32: 0x%X\r\n", calculatedCRC32 );
    1ad0:	1d3b      	adds	r3, r7, #4
    1ad2:	4618      	mov	r0, r3
    1ad4:	490e      	ldr	r1, [pc, #56]	; (1b10 <IsSecondaryImageValid+0x8c>)
    1ad6:	6eba      	ldr	r2, [r7, #104]	; 0x68
    1ad8:	f001 fb92 	bl	3200 <sprintf>
	Trace( buffer );
    1adc:	1d3b      	adds	r3, r7, #4
    1ade:	4618      	mov	r0, r3
    1ae0:	f000 f8bc 	bl	1c5c <Trace>

	if( crc == calculatedCRC32 )
    1ae4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1ae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1ae8:	429a      	cmp	r2, r3
    1aea:	d101      	bne.n	1af0 <IsSecondaryImageValid+0x6c>
		return ( 0 );  // image is valid
    1aec:	2300      	movs	r3, #0
    1aee:	e000      	b.n	1af2 <IsSecondaryImageValid+0x6e>

	return ( 1 );  //image is not valid
    1af0:	2301      	movs	r3, #1
}
    1af2:	4618      	mov	r0, r3
    1af4:	3778      	adds	r7, #120	; 0x78
    1af6:	46bd      	mov	sp, r7
    1af8:	bd80      	pop	{r7, pc}
    1afa:	bf00      	nop
    1afc:	0006fff8 	.word	0x0006fff8
    1b00:	0006fffc 	.word	0x0006fffc
    1b04:	0006fff4 	.word	0x0006fff4
    1b08:	aa55bc47 	.word	0xaa55bc47
    1b0c:	000061e4 	.word	0x000061e4
    1b10:	00006204 	.word	0x00006204

00001b14 <ConfigurePins>:


void ConfigurePins( void )
{
    1b14:	b580      	push	{r7, lr}
    1b16:	b082      	sub	sp, #8
    1b18:	af00      	add	r7, sp, #0
	//PWRKEY & EMERG_OFF
	LPC_PINCON->PINSEL4 &= ~(0xFFFF); // Reset P2[0..7] = GPIO
    1b1a:	4a34      	ldr	r2, [pc, #208]	; (1bec <ConfigurePins+0xd8>)
    1b1c:	4b33      	ldr	r3, [pc, #204]	; (1bec <ConfigurePins+0xd8>)
    1b1e:	691b      	ldr	r3, [r3, #16]
    1b20:	0c1b      	lsrs	r3, r3, #16
    1b22:	041b      	lsls	r3, r3, #16
    1b24:	6113      	str	r3, [r2, #16]
	LPC_GPIO2->FIODIR |= 0xFF; // P2[0..7] =
    1b26:	4a32      	ldr	r2, [pc, #200]	; (1bf0 <ConfigurePins+0xdc>)
    1b28:	4b31      	ldr	r3, [pc, #196]	; (1bf0 <ConfigurePins+0xdc>)
    1b2a:	681b      	ldr	r3, [r3, #0]
    1b2c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1b30:	6013      	str	r3, [r2, #0]
	LPC_PINCON->PINSEL9 &= ~(0xFFFF); // Reset P4[24..31] = GPIO
    1b32:	4a2e      	ldr	r2, [pc, #184]	; (1bec <ConfigurePins+0xd8>)
    1b34:	4b2d      	ldr	r3, [pc, #180]	; (1bec <ConfigurePins+0xd8>)
    1b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1b38:	0c1b      	lsrs	r3, r3, #16
    1b3a:	041b      	lsls	r3, r3, #16
    1b3c:	6253      	str	r3, [r2, #36]	; 0x24
	LPC_GPIO4->FIODIR = (1 << 28) | (1 << 29);
    1b3e:	4b2d      	ldr	r3, [pc, #180]	; (1bf4 <ConfigurePins+0xe0>)
    1b40:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    1b44:	601a      	str	r2, [r3, #0]
	LPC_GPIO0->FIODIR &= (1 << 7); //P0[7] DIN 1 as input --> Default mode pull up enabled.
    1b46:	4a2c      	ldr	r2, [pc, #176]	; (1bf8 <ConfigurePins+0xe4>)
    1b48:	4b2b      	ldr	r3, [pc, #172]	; (1bf8 <ConfigurePins+0xe4>)
    1b4a:	681b      	ldr	r3, [r3, #0]
    1b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1b50:	6013      	str	r3, [r2, #0]
	LPC_GPIO0->FIODIR &= ~(1 << 29 | 1 << 30); //P0[30] as input
    1b52:	4a29      	ldr	r2, [pc, #164]	; (1bf8 <ConfigurePins+0xe4>)
    1b54:	4b28      	ldr	r3, [pc, #160]	; (1bf8 <ConfigurePins+0xe4>)
    1b56:	681b      	ldr	r3, [r3, #0]
    1b58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
    1b5c:	6013      	str	r3, [r2, #0]
	LPC_GPIO0->FIODIR |= (1 << 5);
    1b5e:	4a26      	ldr	r2, [pc, #152]	; (1bf8 <ConfigurePins+0xe4>)
    1b60:	4b25      	ldr	r3, [pc, #148]	; (1bf8 <ConfigurePins+0xe4>)
    1b62:	681b      	ldr	r3, [r3, #0]
    1b64:	f043 0320 	orr.w	r3, r3, #32
    1b68:	6013      	str	r3, [r2, #0]
	//Init ADC
	uint32_t u32PCLKDIV, u32PCLK;
	LPC_SC->PCONP |= (1 << 12);
    1b6a:	4a24      	ldr	r2, [pc, #144]	; (1bfc <ConfigurePins+0xe8>)
    1b6c:	4b23      	ldr	r3, [pc, #140]	; (1bfc <ConfigurePins+0xe8>)
    1b6e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1b72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1b76:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	u32PCLKDIV = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
    1b7a:	4b20      	ldr	r3, [pc, #128]	; (1bfc <ConfigurePins+0xe8>)
    1b7c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    1b80:	099b      	lsrs	r3, r3, #6
    1b82:	f003 0303 	and.w	r3, r3, #3
    1b86:	607b      	str	r3, [r7, #4]
	switch (u32PCLKDIV) {
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	2b02      	cmp	r3, #2
    1b8c:	d009      	beq.n	1ba2 <ConfigurePins+0x8e>
    1b8e:	2b03      	cmp	r3, #3
    1b90:	d00a      	beq.n	1ba8 <ConfigurePins+0x94>
    1b92:	2b01      	cmp	r3, #1
    1b94:	d002      	beq.n	1b9c <ConfigurePins+0x88>
	case 0x00:
	default:
		u32PCLK = 12000000 / 4;
    1b96:	4b1a      	ldr	r3, [pc, #104]	; (1c00 <ConfigurePins+0xec>)
    1b98:	603b      	str	r3, [r7, #0]
		break;
    1b9a:	e008      	b.n	1bae <ConfigurePins+0x9a>
	case 0x01:
		u32PCLK = 12000000;
    1b9c:	4b19      	ldr	r3, [pc, #100]	; (1c04 <ConfigurePins+0xf0>)
    1b9e:	603b      	str	r3, [r7, #0]
		break;
    1ba0:	e005      	b.n	1bae <ConfigurePins+0x9a>
	case 0x02:
		u32PCLK = 12000000 / 2;
    1ba2:	4b19      	ldr	r3, [pc, #100]	; (1c08 <ConfigurePins+0xf4>)
    1ba4:	603b      	str	r3, [r7, #0]
		break;
    1ba6:	e002      	b.n	1bae <ConfigurePins+0x9a>
	case 0x03:
		u32PCLK = 12000000 / 8;
    1ba8:	4b18      	ldr	r3, [pc, #96]	; (1c0c <ConfigurePins+0xf8>)
    1baa:	603b      	str	r3, [r7, #0]
		break;
    1bac:	bf00      	nop
	//LPC_ADC->ADCR = (1 << 3) | ((u32PCLK / 12000000 - 1) << 8) | (0 << 16) | (0
	//		<< 17) | (1 << 21) | (0 << 24) | (0 << 27);
	//LPC_PINCON->PINSEL1 |= (1U << 20);
	///ADC//
	//External Power Pin
	LPC_GPIO0->FIODIR &= ~(1 << 22);
    1bae:	4a12      	ldr	r2, [pc, #72]	; (1bf8 <ConfigurePins+0xe4>)
    1bb0:	4b11      	ldr	r3, [pc, #68]	; (1bf8 <ConfigurePins+0xe4>)
    1bb2:	681b      	ldr	r3, [r3, #0]
    1bb4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    1bb8:	6013      	str	r3, [r2, #0]
	//Ignition Pin
	LPC_GPIO0->FIODIR &= ~(1 << 21);
    1bba:	4a0f      	ldr	r2, [pc, #60]	; (1bf8 <ConfigurePins+0xe4>)
    1bbc:	4b0e      	ldr	r3, [pc, #56]	; (1bf8 <ConfigurePins+0xe4>)
    1bbe:	681b      	ldr	r3, [r3, #0]
    1bc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
    1bc4:	6013      	str	r3, [r2, #0]
	#ifdef brisa
		DIGITAL_IN1_PIN = 21;
	#endif
	LPC_GPIOINT->IO0IntEnR |= (1 << 22); // Rising edge
    1bc6:	4a12      	ldr	r2, [pc, #72]	; (1c10 <ConfigurePins+0xfc>)
    1bc8:	4b11      	ldr	r3, [pc, #68]	; (1c10 <ConfigurePins+0xfc>)
    1bca:	691b      	ldr	r3, [r3, #16]
    1bcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1bd0:	6113      	str	r3, [r2, #16]
	LPC_GPIOINT->IO0IntEnF |= (1 << 22); // Falling edge
    1bd2:	4a0f      	ldr	r2, [pc, #60]	; (1c10 <ConfigurePins+0xfc>)
    1bd4:	4b0e      	ldr	r3, [pc, #56]	; (1c10 <ConfigurePins+0xfc>)
    1bd6:	695b      	ldr	r3, [r3, #20]
    1bd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1bdc:	6153      	str	r3, [r2, #20]
	NVIC_EnableIRQ(EINT3_IRQn);
    1bde:	2015      	movs	r0, #21
    1be0:	f7ff fcf0 	bl	15c4 <NVIC_EnableIRQ>
}
    1be4:	3708      	adds	r7, #8
    1be6:	46bd      	mov	sp, r7
    1be8:	bd80      	pop	{r7, pc}
    1bea:	bf00      	nop
    1bec:	4002c000 	.word	0x4002c000
    1bf0:	2009c040 	.word	0x2009c040
    1bf4:	2009c080 	.word	0x2009c080
    1bf8:	2009c000 	.word	0x2009c000
    1bfc:	400fc000 	.word	0x400fc000
    1c00:	002dc6c0 	.word	0x002dc6c0
    1c04:	00b71b00 	.word	0x00b71b00
    1c08:	005b8d80 	.word	0x005b8d80
    1c0c:	0016e360 	.word	0x0016e360
    1c10:	40028080 	.word	0x40028080

00001c14 <SysTick_Handler>:
 *  Created on: 14 Kas 2012
 *      Author: trio
 */
#include <LPC17xx.h>
#include "timer.h"
void SysTick_Handler(void) {
    1c14:	b480      	push	{r7}
    1c16:	af00      	add	r7, sp, #0
	STT_Value++;
    1c18:	4b04      	ldr	r3, [pc, #16]	; (1c2c <SysTick_Handler+0x18>)
    1c1a:	681b      	ldr	r3, [r3, #0]
    1c1c:	3301      	adds	r3, #1
    1c1e:	4a03      	ldr	r2, [pc, #12]	; (1c2c <SysTick_Handler+0x18>)
    1c20:	6013      	str	r3, [r2, #0]
}
    1c22:	46bd      	mov	sp, r7
    1c24:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c28:	4770      	bx	lr
    1c2a:	bf00      	nop
    1c2c:	1000091c 	.word	0x1000091c

00001c30 <DelayMs>:

void DelayMs(unsigned int t) // 65536 max.
{
    1c30:	b480      	push	{r7}
    1c32:	b085      	sub	sp, #20
    1c34:	af00      	add	r7, sp, #0
    1c36:	6078      	str	r0, [r7, #4]
	unsigned long temp;
	temp = STT_Value;
    1c38:	4b07      	ldr	r3, [pc, #28]	; (1c58 <DelayMs+0x28>)
    1c3a:	681b      	ldr	r3, [r3, #0]
    1c3c:	60fb      	str	r3, [r7, #12]
	while ((STT_Value - temp) < t);
    1c3e:	bf00      	nop
    1c40:	4b05      	ldr	r3, [pc, #20]	; (1c58 <DelayMs+0x28>)
    1c42:	681a      	ldr	r2, [r3, #0]
    1c44:	68fb      	ldr	r3, [r7, #12]
    1c46:	1ad2      	subs	r2, r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	429a      	cmp	r2, r3
    1c4c:	d3f8      	bcc.n	1c40 <DelayMs+0x10>
}
    1c4e:	3714      	adds	r7, #20
    1c50:	46bd      	mov	sp, r7
    1c52:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c56:	4770      	bx	lr
    1c58:	1000091c 	.word	0x1000091c

00001c5c <Trace>:
#include <stdio.h>
#include <trace.h>


void Trace( char* msg)
{
    1c5c:	b580      	push	{r7, lr}
    1c5e:	b082      	sub	sp, #8
    1c60:	af00      	add	r7, sp, #0
    1c62:	6078      	str	r0, [r7, #4]
	UARTSend( PORT_TRACE, msg, strlen(msg) );
    1c64:	6878      	ldr	r0, [r7, #4]
    1c66:	f002 ff33 	bl	4ad0 <strlen>
    1c6a:	4603      	mov	r3, r0
    1c6c:	2000      	movs	r0, #0
    1c6e:	6879      	ldr	r1, [r7, #4]
    1c70:	461a      	mov	r2, r3
    1c72:	f000 fce7 	bl	2644 <UARTSend>
}
    1c76:	3708      	adds	r7, #8
    1c78:	46bd      	mov	sp, r7
    1c7a:	bd80      	pop	{r7, pc}

00001c7c <TraceNL>:

void TraceNL( char* msg)
{
    1c7c:	b580      	push	{r7, lr}
    1c7e:	b082      	sub	sp, #8
    1c80:	af00      	add	r7, sp, #0
    1c82:	6078      	str	r0, [r7, #4]
	UARTSend(PORT_TRACE, msg, strlen(msg));
    1c84:	6878      	ldr	r0, [r7, #4]
    1c86:	f002 ff23 	bl	4ad0 <strlen>
    1c8a:	4603      	mov	r3, r0
    1c8c:	2000      	movs	r0, #0
    1c8e:	6879      	ldr	r1, [r7, #4]
    1c90:	461a      	mov	r2, r3
    1c92:	f000 fcd7 	bl	2644 <UARTSend>
	UARTSend(PORT_TRACE, "\r\n", 2);
    1c96:	2000      	movs	r0, #0
    1c98:	4903      	ldr	r1, [pc, #12]	; (1ca8 <TraceNL+0x2c>)
    1c9a:	2202      	movs	r2, #2
    1c9c:	f000 fcd2 	bl	2644 <UARTSend>
}
    1ca0:	3708      	adds	r7, #8
    1ca2:	46bd      	mov	sp, r7
    1ca4:	bd80      	pop	{r7, pc}
    1ca6:	bf00      	nop
    1ca8:	00006224 	.word	0x00006224

00001cac <TracePutcHex>:
{
	UARTSend(PORT_TRACE, &c, 1L);
}

void TracePutcHex( char c )
{
    1cac:	b580      	push	{r7, lr}
    1cae:	b086      	sub	sp, #24
    1cb0:	af00      	add	r7, sp, #0
    1cb2:	4603      	mov	r3, r0
    1cb4:	71fb      	strb	r3, [r7, #7]
	char  buff[10];
    int count;
	count = sprintf( buff, "%02x", c);
    1cb6:	79fb      	ldrb	r3, [r7, #7]
    1cb8:	f107 0208 	add.w	r2, r7, #8
    1cbc:	4610      	mov	r0, r2
    1cbe:	4908      	ldr	r1, [pc, #32]	; (1ce0 <TracePutcHex+0x34>)
    1cc0:	461a      	mov	r2, r3
    1cc2:	f001 fa9d 	bl	3200 <sprintf>
    1cc6:	6178      	str	r0, [r7, #20]
	UARTSend( PORT_TRACE, buff, count );
    1cc8:	697b      	ldr	r3, [r7, #20]
    1cca:	f107 0208 	add.w	r2, r7, #8
    1cce:	2000      	movs	r0, #0
    1cd0:	4611      	mov	r1, r2
    1cd2:	461a      	mov	r2, r3
    1cd4:	f000 fcb6 	bl	2644 <UARTSend>

}
    1cd8:	3718      	adds	r7, #24
    1cda:	46bd      	mov	sp, r7
    1cdc:	bd80      	pop	{r7, pc}
    1cde:	bf00      	nop
    1ce0:	00006228 	.word	0x00006228

00001ce4 <TraceDumpHex>:

void TraceDumpHex( char* pMsg, int len )
{
    1ce4:	b580      	push	{r7, lr}
    1ce6:	b0d6      	sub	sp, #344	; 0x158
    1ce8:	af00      	add	r7, sp, #0
    1cea:	1d3b      	adds	r3, r7, #4
    1cec:	6018      	str	r0, [r3, #0]
    1cee:	463b      	mov	r3, r7
    1cf0:	6019      	str	r1, [r3, #0]
#if defined (BOOTROM_DEBUG)

	int i, count;
	char buffer[300];
	char buff[17];
	char *pc = pMsg;
    1cf2:	1d3b      	adds	r3, r7, #4
    1cf4:	681b      	ldr	r3, [r3, #0]
    1cf6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

	UARTSend( PORT_TRACE, "\r\n", 2);
    1cfa:	2000      	movs	r0, #0
    1cfc:	495a      	ldr	r1, [pc, #360]	; (1e68 <TraceDumpHex+0x184>)
    1cfe:	2202      	movs	r2, #2
    1d00:	f000 fca0 	bl	2644 <UARTSend>
	// Process every byte in the data.
	for (i = 0; i < len; i++) {
    1d04:	2300      	movs	r3, #0
    1d06:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    1d0a:	e07d      	b.n	1e08 <TraceDumpHex+0x124>
		// Multiple of 16 means new line (with line offset).

		if ((i % 16) == 0) {
    1d0c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1d10:	f003 030f 	and.w	r3, r3, #15
    1d14:	2b00      	cmp	r3, #0
    1d16:	d117      	bne.n	1d48 <TraceDumpHex+0x64>
			// Just don't print ASCII for the zeroth line.
			if (i != 0) {
    1d18:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1d1c:	2b00      	cmp	r3, #0
    1d1e:	d013      	beq.n	1d48 <TraceDumpHex+0x64>
				count = sprintf(buffer, "  %s\r\n", buff);
    1d20:	f107 0220 	add.w	r2, r7, #32
    1d24:	f107 030c 	add.w	r3, r7, #12
    1d28:	4610      	mov	r0, r2
    1d2a:	4950      	ldr	r1, [pc, #320]	; (1e6c <TraceDumpHex+0x188>)
    1d2c:	461a      	mov	r2, r3
    1d2e:	f001 fa67 	bl	3200 <sprintf>
    1d32:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
				UARTSend( PORT_TRACE, buffer, count);
    1d36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    1d3a:	f107 0220 	add.w	r2, r7, #32
    1d3e:	2000      	movs	r0, #0
    1d40:	4611      	mov	r1, r2
    1d42:	461a      	mov	r2, r3
    1d44:	f000 fc7e 	bl	2644 <UARTSend>
			}
		}
		count = sprintf(buffer, " %02x", pc[i]);
    1d48:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1d4c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    1d50:	4413      	add	r3, r2
    1d52:	781b      	ldrb	r3, [r3, #0]
    1d54:	461a      	mov	r2, r3
    1d56:	f107 0320 	add.w	r3, r7, #32
    1d5a:	4618      	mov	r0, r3
    1d5c:	4944      	ldr	r1, [pc, #272]	; (1e70 <TraceDumpHex+0x18c>)
    1d5e:	f001 fa4f 	bl	3200 <sprintf>
    1d62:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
		UARTSend( PORT_TRACE, buffer, count );
    1d66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    1d6a:	f107 0220 	add.w	r2, r7, #32
    1d6e:	2000      	movs	r0, #0
    1d70:	4611      	mov	r1, r2
    1d72:	461a      	mov	r2, r3
    1d74:	f000 fc66 	bl	2644 <UARTSend>

		// And store a printable ASCII character for later.
		if ((pc[i] < 0x20) || (pc[i] > 0x7e))
    1d78:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1d7c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    1d80:	4413      	add	r3, r2
    1d82:	781b      	ldrb	r3, [r3, #0]
    1d84:	2b1f      	cmp	r3, #31
    1d86:	d907      	bls.n	1d98 <TraceDumpHex+0xb4>
    1d88:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1d8c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    1d90:	4413      	add	r3, r2
    1d92:	781b      	ldrb	r3, [r3, #0]
    1d94:	2b7e      	cmp	r3, #126	; 0x7e
    1d96:	d90f      	bls.n	1db8 <TraceDumpHex+0xd4>
			buff[i % 16] = '.';
    1d98:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    1d9c:	4b35      	ldr	r3, [pc, #212]	; (1e74 <TraceDumpHex+0x190>)
    1d9e:	4013      	ands	r3, r2
    1da0:	2b00      	cmp	r3, #0
    1da2:	da03      	bge.n	1dac <TraceDumpHex+0xc8>
    1da4:	3b01      	subs	r3, #1
    1da6:	f063 030f 	orn	r3, r3, #15
    1daa:	3301      	adds	r3, #1
    1dac:	461a      	mov	r2, r3
    1dae:	f107 030c 	add.w	r3, r7, #12
    1db2:	212e      	movs	r1, #46	; 0x2e
    1db4:	5499      	strb	r1, [r3, r2]
    1db6:	e013      	b.n	1de0 <TraceDumpHex+0xfc>
		else
			buff[i % 16] = pc[i];
    1db8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    1dbc:	4b2d      	ldr	r3, [pc, #180]	; (1e74 <TraceDumpHex+0x190>)
    1dbe:	4013      	ands	r3, r2
    1dc0:	2b00      	cmp	r3, #0
    1dc2:	da03      	bge.n	1dcc <TraceDumpHex+0xe8>
    1dc4:	3b01      	subs	r3, #1
    1dc6:	f063 030f 	orn	r3, r3, #15
    1dca:	3301      	adds	r3, #1
    1dcc:	4619      	mov	r1, r3
    1dce:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1dd2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    1dd6:	4413      	add	r3, r2
    1dd8:	781a      	ldrb	r2, [r3, #0]
    1dda:	f107 030c 	add.w	r3, r7, #12
    1dde:	545a      	strb	r2, [r3, r1]
		buff[(i % 16) + 1] = '\0';
    1de0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    1de4:	4b23      	ldr	r3, [pc, #140]	; (1e74 <TraceDumpHex+0x190>)
    1de6:	4013      	ands	r3, r2
    1de8:	2b00      	cmp	r3, #0
    1dea:	da03      	bge.n	1df4 <TraceDumpHex+0x110>
    1dec:	3b01      	subs	r3, #1
    1dee:	f063 030f 	orn	r3, r3, #15
    1df2:	3301      	adds	r3, #1
    1df4:	3301      	adds	r3, #1
    1df6:	f107 020c 	add.w	r2, r7, #12
    1dfa:	2100      	movs	r1, #0
    1dfc:	54d1      	strb	r1, [r2, r3]
	char buff[17];
	char *pc = pMsg;

	UARTSend( PORT_TRACE, "\r\n", 2);
	// Process every byte in the data.
	for (i = 0; i < len; i++) {
    1dfe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1e02:	3301      	adds	r3, #1
    1e04:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    1e08:	463b      	mov	r3, r7
    1e0a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    1e0e:	681b      	ldr	r3, [r3, #0]
    1e10:	429a      	cmp	r2, r3
    1e12:	f6ff af7b 	blt.w	1d0c <TraceDumpHex+0x28>
			buff[i % 16] = pc[i];
		buff[(i % 16) + 1] = '\0';
	}

    // Pad out last line if not exactly 16 characters.
    while ((i % 16) != 0) {
    1e16:	e009      	b.n	1e2c <TraceDumpHex+0x148>
    	UARTSend( PORT_TRACE, "   ", 3);
    1e18:	2000      	movs	r0, #0
    1e1a:	4917      	ldr	r1, [pc, #92]	; (1e78 <TraceDumpHex+0x194>)
    1e1c:	2203      	movs	r2, #3
    1e1e:	f000 fc11 	bl	2644 <UARTSend>
        i++;
    1e22:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1e26:	3301      	adds	r3, #1
    1e28:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			buff[i % 16] = pc[i];
		buff[(i % 16) + 1] = '\0';
	}

    // Pad out last line if not exactly 16 characters.
    while ((i % 16) != 0) {
    1e2c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1e30:	f003 030f 	and.w	r3, r3, #15
    1e34:	2b00      	cmp	r3, #0
    1e36:	d1ef      	bne.n	1e18 <TraceDumpHex+0x134>
    	UARTSend( PORT_TRACE, "   ", 3);
        i++;
    }
	count = sprintf(buffer, "  %s\r\n", buff);
    1e38:	f107 0220 	add.w	r2, r7, #32
    1e3c:	f107 030c 	add.w	r3, r7, #12
    1e40:	4610      	mov	r0, r2
    1e42:	490a      	ldr	r1, [pc, #40]	; (1e6c <TraceDumpHex+0x188>)
    1e44:	461a      	mov	r2, r3
    1e46:	f001 f9db 	bl	3200 <sprintf>
    1e4a:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
	UARTSend( PORT_TRACE, buffer, count);
    1e4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    1e52:	f107 0220 	add.w	r2, r7, #32
    1e56:	2000      	movs	r0, #0
    1e58:	4611      	mov	r1, r2
    1e5a:	461a      	mov	r2, r3
    1e5c:	f000 fbf2 	bl	2644 <UARTSend>
#endif
}
    1e60:	f507 77ac 	add.w	r7, r7, #344	; 0x158
    1e64:	46bd      	mov	sp, r7
    1e66:	bd80      	pop	{r7, pc}
    1e68:	00006224 	.word	0x00006224
    1e6c:	00006230 	.word	0x00006230
    1e70:	00006238 	.word	0x00006238
    1e74:	8000000f 	.word	0x8000000f
    1e78:	00006240 	.word	0x00006240

00001e7c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1e7c:	b480      	push	{r7}
    1e7e:	b083      	sub	sp, #12
    1e80:	af00      	add	r7, sp, #0
    1e82:	4603      	mov	r3, r0
    1e84:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1e86:	4908      	ldr	r1, [pc, #32]	; (1ea8 <NVIC_EnableIRQ+0x2c>)
    1e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1e8c:	095b      	lsrs	r3, r3, #5
    1e8e:	79fa      	ldrb	r2, [r7, #7]
    1e90:	f002 021f 	and.w	r2, r2, #31
    1e94:	2001      	movs	r0, #1
    1e96:	fa00 f202 	lsl.w	r2, r0, r2
    1e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1e9e:	370c      	adds	r7, #12
    1ea0:	46bd      	mov	sp, r7
    1ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea6:	4770      	bx	lr
    1ea8:	e000e100 	.word	0xe000e100

00001eac <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
    1eac:	b480      	push	{r7}
    1eae:	b083      	sub	sp, #12
    1eb0:	af00      	add	r7, sp, #0
    1eb2:	4603      	mov	r3, r0
    1eb4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    1eb6:	4909      	ldr	r1, [pc, #36]	; (1edc <NVIC_DisableIRQ+0x30>)
    1eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1ebc:	095b      	lsrs	r3, r3, #5
    1ebe:	79fa      	ldrb	r2, [r7, #7]
    1ec0:	f002 021f 	and.w	r2, r2, #31
    1ec4:	2001      	movs	r0, #1
    1ec6:	fa00 f202 	lsl.w	r2, r0, r2
    1eca:	3320      	adds	r3, #32
    1ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1ed0:	370c      	adds	r7, #12
    1ed2:	46bd      	mov	sp, r7
    1ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ed8:	4770      	bx	lr
    1eda:	bf00      	nop
    1edc:	e000e100 	.word	0xe000e100

00001ee0 <UART0_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART0_IRQHandler(void) {
    1ee0:	b480      	push	{r7}
    1ee2:	b083      	sub	sp, #12
    1ee4:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART0->IIR;
    1ee6:	4b3c      	ldr	r3, [pc, #240]	; (1fd8 <UART0_IRQHandler+0xf8>)
    1ee8:	689b      	ldr	r3, [r3, #8]
    1eea:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    1eec:	79bb      	ldrb	r3, [r7, #6]
    1eee:	085b      	lsrs	r3, r3, #1
    1ef0:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    1ef2:	79bb      	ldrb	r3, [r7, #6]
    1ef4:	f003 0307 	and.w	r3, r3, #7
    1ef8:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    1efa:	79bb      	ldrb	r3, [r7, #6]
    1efc:	2b03      	cmp	r3, #3
    1efe:	d12d      	bne.n	1f5c <UART0_IRQHandler+0x7c>
	{
		LSRValue = LPC_UART0->LSR;
    1f00:	4b35      	ldr	r3, [pc, #212]	; (1fd8 <UART0_IRQHandler+0xf8>)
    1f02:	7d1b      	ldrb	r3, [r3, #20]
    1f04:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    1f06:	797b      	ldrb	r3, [r7, #5]
    1f08:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    1f0c:	2b00      	cmp	r3, #0
    1f0e:	d006      	beq.n	1f1e <UART0_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART0Status = LSRValue;
    1f10:	797b      	ldrb	r3, [r7, #5]
    1f12:	4a32      	ldr	r2, [pc, #200]	; (1fdc <UART0_IRQHandler+0xfc>)
    1f14:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART0->RBR; /* Dummy read on RX to clear
    1f16:	4b30      	ldr	r3, [pc, #192]	; (1fd8 <UART0_IRQHandler+0xf8>)
    1f18:	781b      	ldrb	r3, [r3, #0]
    1f1a:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    1f1c:	e057      	b.n	1fce <UART0_IRQHandler+0xee>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    1f1e:	797b      	ldrb	r3, [r7, #5]
    1f20:	f003 0301 	and.w	r3, r3, #1
    1f24:	2b00      	cmp	r3, #0
    1f26:	d052      	beq.n	1fce <UART0_IRQHandler+0xee>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART0Buffer[UART0Count] = LPC_UART0->RBR;
    1f28:	4b2d      	ldr	r3, [pc, #180]	; (1fe0 <UART0_IRQHandler+0x100>)
    1f2a:	881b      	ldrh	r3, [r3, #0]
    1f2c:	b29b      	uxth	r3, r3
    1f2e:	461a      	mov	r2, r3
    1f30:	4b29      	ldr	r3, [pc, #164]	; (1fd8 <UART0_IRQHandler+0xf8>)
    1f32:	781b      	ldrb	r3, [r3, #0]
    1f34:	b2d9      	uxtb	r1, r3
    1f36:	4b2b      	ldr	r3, [pc, #172]	; (1fe4 <UART0_IRQHandler+0x104>)
    1f38:	5499      	strb	r1, [r3, r2]
			UART0Count++;
    1f3a:	4b29      	ldr	r3, [pc, #164]	; (1fe0 <UART0_IRQHandler+0x100>)
    1f3c:	881b      	ldrh	r3, [r3, #0]
    1f3e:	b29b      	uxth	r3, r3
    1f40:	3301      	adds	r3, #1
    1f42:	b29a      	uxth	r2, r3
    1f44:	4b26      	ldr	r3, [pc, #152]	; (1fe0 <UART0_IRQHandler+0x100>)
    1f46:	801a      	strh	r2, [r3, #0]
			if (UART0Count == BUFSIZE) {
    1f48:	4b25      	ldr	r3, [pc, #148]	; (1fe0 <UART0_IRQHandler+0x100>)
    1f4a:	881b      	ldrh	r3, [r3, #0]
    1f4c:	b29b      	uxth	r3, r3
    1f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    1f52:	d13c      	bne.n	1fce <UART0_IRQHandler+0xee>
				UART0Count = 0; /* buffer overflow */
    1f54:	4b22      	ldr	r3, [pc, #136]	; (1fe0 <UART0_IRQHandler+0x100>)
    1f56:	2200      	movs	r2, #0
    1f58:	801a      	strh	r2, [r3, #0]
    1f5a:	e038      	b.n	1fce <UART0_IRQHandler+0xee>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    1f5c:	79bb      	ldrb	r3, [r7, #6]
    1f5e:	2b02      	cmp	r3, #2
    1f60:	d119      	bne.n	1f96 <UART0_IRQHandler+0xb6>
	{
		/* Receive Data Available */
		UART0Buffer[UART0Count] = LPC_UART0->RBR;
    1f62:	4b1f      	ldr	r3, [pc, #124]	; (1fe0 <UART0_IRQHandler+0x100>)
    1f64:	881b      	ldrh	r3, [r3, #0]
    1f66:	b29b      	uxth	r3, r3
    1f68:	461a      	mov	r2, r3
    1f6a:	4b1b      	ldr	r3, [pc, #108]	; (1fd8 <UART0_IRQHandler+0xf8>)
    1f6c:	781b      	ldrb	r3, [r3, #0]
    1f6e:	b2d9      	uxtb	r1, r3
    1f70:	4b1c      	ldr	r3, [pc, #112]	; (1fe4 <UART0_IRQHandler+0x104>)
    1f72:	5499      	strb	r1, [r3, r2]
		UART0Count++;
    1f74:	4b1a      	ldr	r3, [pc, #104]	; (1fe0 <UART0_IRQHandler+0x100>)
    1f76:	881b      	ldrh	r3, [r3, #0]
    1f78:	b29b      	uxth	r3, r3
    1f7a:	3301      	adds	r3, #1
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	4b18      	ldr	r3, [pc, #96]	; (1fe0 <UART0_IRQHandler+0x100>)
    1f80:	801a      	strh	r2, [r3, #0]
		if (UART0Count == BUFSIZE) {
    1f82:	4b17      	ldr	r3, [pc, #92]	; (1fe0 <UART0_IRQHandler+0x100>)
    1f84:	881b      	ldrh	r3, [r3, #0]
    1f86:	b29b      	uxth	r3, r3
    1f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    1f8c:	d11f      	bne.n	1fce <UART0_IRQHandler+0xee>
			UART0Count = 0; /* buffer overflow */
    1f8e:	4b14      	ldr	r3, [pc, #80]	; (1fe0 <UART0_IRQHandler+0x100>)
    1f90:	2200      	movs	r2, #0
    1f92:	801a      	strh	r2, [r3, #0]
    1f94:	e01b      	b.n	1fce <UART0_IRQHandler+0xee>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    1f96:	79bb      	ldrb	r3, [r7, #6]
    1f98:	2b06      	cmp	r3, #6
    1f9a:	d106      	bne.n	1faa <UART0_IRQHandler+0xca>
	{
		/* Character Time-out indicator */
		UART0Status |= 0x100; /* Bit 9 as the CTI error */
    1f9c:	4b0f      	ldr	r3, [pc, #60]	; (1fdc <UART0_IRQHandler+0xfc>)
    1f9e:	681b      	ldr	r3, [r3, #0]
    1fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1fa4:	4a0d      	ldr	r2, [pc, #52]	; (1fdc <UART0_IRQHandler+0xfc>)
    1fa6:	6013      	str	r3, [r2, #0]
    1fa8:	e011      	b.n	1fce <UART0_IRQHandler+0xee>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    1faa:	79bb      	ldrb	r3, [r7, #6]
    1fac:	2b01      	cmp	r3, #1
    1fae:	d10e      	bne.n	1fce <UART0_IRQHandler+0xee>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART0->LSR; /* Check status in the LSR to see if
    1fb0:	4b09      	ldr	r3, [pc, #36]	; (1fd8 <UART0_IRQHandler+0xf8>)
    1fb2:	7d1b      	ldrb	r3, [r3, #20]
    1fb4:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    1fb6:	797b      	ldrb	r3, [r7, #5]
    1fb8:	f003 0320 	and.w	r3, r3, #32
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	d003      	beq.n	1fc8 <UART0_IRQHandler+0xe8>
			UART0TxEmpty = 1;
    1fc0:	4b09      	ldr	r3, [pc, #36]	; (1fe8 <UART0_IRQHandler+0x108>)
    1fc2:	2201      	movs	r2, #1
    1fc4:	701a      	strb	r2, [r3, #0]
    1fc6:	e002      	b.n	1fce <UART0_IRQHandler+0xee>
		} else {
			UART0TxEmpty = 0;
    1fc8:	4b07      	ldr	r3, [pc, #28]	; (1fe8 <UART0_IRQHandler+0x108>)
    1fca:	2200      	movs	r2, #0
    1fcc:	701a      	strb	r2, [r3, #0]
		}
	}
}
    1fce:	370c      	adds	r7, #12
    1fd0:	46bd      	mov	sp, r7
    1fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd6:	4770      	bx	lr
    1fd8:	4000c000 	.word	0x4000c000
    1fdc:	10002040 	.word	0x10002040
    1fe0:	1000003c 	.word	0x1000003c
    1fe4:	10001640 	.word	0x10001640
    1fe8:	10000020 	.word	0x10000020

00001fec <UART1_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART1_IRQHandler(void) {
    1fec:	b480      	push	{r7}
    1fee:	b083      	sub	sp, #12
    1ff0:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART1->IIR;
    1ff2:	4b3d      	ldr	r3, [pc, #244]	; (20e8 <UART1_IRQHandler+0xfc>)
    1ff4:	689b      	ldr	r3, [r3, #8]
    1ff6:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    1ff8:	79bb      	ldrb	r3, [r7, #6]
    1ffa:	085b      	lsrs	r3, r3, #1
    1ffc:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    1ffe:	79bb      	ldrb	r3, [r7, #6]
    2000:	f003 0307 	and.w	r3, r3, #7
    2004:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    2006:	79bb      	ldrb	r3, [r7, #6]
    2008:	2b03      	cmp	r3, #3
    200a:	d12e      	bne.n	206a <UART1_IRQHandler+0x7e>
	{
		LSRValue = LPC_UART1->LSR;
    200c:	4b36      	ldr	r3, [pc, #216]	; (20e8 <UART1_IRQHandler+0xfc>)
    200e:	7d1b      	ldrb	r3, [r3, #20]
    2010:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2012:	797b      	ldrb	r3, [r7, #5]
    2014:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2018:	2b00      	cmp	r3, #0
    201a:	d006      	beq.n	202a <UART1_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART1Status = LSRValue;
    201c:	797b      	ldrb	r3, [r7, #5]
    201e:	4a33      	ldr	r2, [pc, #204]	; (20ec <UART1_IRQHandler+0x100>)
    2020:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART1->RBR; /* Dummy read on RX to clear
    2022:	4b31      	ldr	r3, [pc, #196]	; (20e8 <UART1_IRQHandler+0xfc>)
    2024:	781b      	ldrb	r3, [r3, #0]
    2026:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2028:	e059      	b.n	20de <UART1_IRQHandler+0xf2>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    202a:	797b      	ldrb	r3, [r7, #5]
    202c:	f003 0301 	and.w	r3, r3, #1
    2030:	2b00      	cmp	r3, #0
    2032:	d054      	beq.n	20de <UART1_IRQHandler+0xf2>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART1Buffer[UART1Count] = LPC_UART1->RBR;
    2034:	4b2e      	ldr	r3, [pc, #184]	; (20f0 <UART1_IRQHandler+0x104>)
    2036:	881b      	ldrh	r3, [r3, #0]
    2038:	b29b      	uxth	r3, r3
    203a:	461a      	mov	r2, r3
    203c:	4b2a      	ldr	r3, [pc, #168]	; (20e8 <UART1_IRQHandler+0xfc>)
    203e:	781b      	ldrb	r3, [r3, #0]
    2040:	b2d9      	uxtb	r1, r3
    2042:	4b2c      	ldr	r3, [pc, #176]	; (20f4 <UART1_IRQHandler+0x108>)
    2044:	5499      	strb	r1, [r3, r2]
			UART1Count++;
    2046:	4b2a      	ldr	r3, [pc, #168]	; (20f0 <UART1_IRQHandler+0x104>)
    2048:	881b      	ldrh	r3, [r3, #0]
    204a:	b29b      	uxth	r3, r3
    204c:	3301      	adds	r3, #1
    204e:	b29a      	uxth	r2, r3
    2050:	4b27      	ldr	r3, [pc, #156]	; (20f0 <UART1_IRQHandler+0x104>)
    2052:	801a      	strh	r2, [r3, #0]
			if (UART1Count == GSM_UART_BUFFER_SIZE) {
    2054:	4b26      	ldr	r3, [pc, #152]	; (20f0 <UART1_IRQHandler+0x104>)
    2056:	881b      	ldrh	r3, [r3, #0]
    2058:	b29b      	uxth	r3, r3
    205a:	f240 424c 	movw	r2, #1100	; 0x44c
    205e:	4293      	cmp	r3, r2
    2060:	d13d      	bne.n	20de <UART1_IRQHandler+0xf2>
				UART1Count = 0; /* buffer overflow */
    2062:	4b23      	ldr	r3, [pc, #140]	; (20f0 <UART1_IRQHandler+0x104>)
    2064:	2200      	movs	r2, #0
    2066:	801a      	strh	r2, [r3, #0]
    2068:	e039      	b.n	20de <UART1_IRQHandler+0xf2>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    206a:	79bb      	ldrb	r3, [r7, #6]
    206c:	2b02      	cmp	r3, #2
    206e:	d11a      	bne.n	20a6 <UART1_IRQHandler+0xba>
	{
		/* Receive Data Available */
		UART1Buffer[UART1Count] = LPC_UART1->RBR;
    2070:	4b1f      	ldr	r3, [pc, #124]	; (20f0 <UART1_IRQHandler+0x104>)
    2072:	881b      	ldrh	r3, [r3, #0]
    2074:	b29b      	uxth	r3, r3
    2076:	461a      	mov	r2, r3
    2078:	4b1b      	ldr	r3, [pc, #108]	; (20e8 <UART1_IRQHandler+0xfc>)
    207a:	781b      	ldrb	r3, [r3, #0]
    207c:	b2d9      	uxtb	r1, r3
    207e:	4b1d      	ldr	r3, [pc, #116]	; (20f4 <UART1_IRQHandler+0x108>)
    2080:	5499      	strb	r1, [r3, r2]
		UART1Count++;
    2082:	4b1b      	ldr	r3, [pc, #108]	; (20f0 <UART1_IRQHandler+0x104>)
    2084:	881b      	ldrh	r3, [r3, #0]
    2086:	b29b      	uxth	r3, r3
    2088:	3301      	adds	r3, #1
    208a:	b29a      	uxth	r2, r3
    208c:	4b18      	ldr	r3, [pc, #96]	; (20f0 <UART1_IRQHandler+0x104>)
    208e:	801a      	strh	r2, [r3, #0]
		if (UART1Count == GSM_UART_BUFFER_SIZE) {
    2090:	4b17      	ldr	r3, [pc, #92]	; (20f0 <UART1_IRQHandler+0x104>)
    2092:	881b      	ldrh	r3, [r3, #0]
    2094:	b29b      	uxth	r3, r3
    2096:	f240 424c 	movw	r2, #1100	; 0x44c
    209a:	4293      	cmp	r3, r2
    209c:	d11f      	bne.n	20de <UART1_IRQHandler+0xf2>
			UART1Count = 0; /* buffer overflow */
    209e:	4b14      	ldr	r3, [pc, #80]	; (20f0 <UART1_IRQHandler+0x104>)
    20a0:	2200      	movs	r2, #0
    20a2:	801a      	strh	r2, [r3, #0]
    20a4:	e01b      	b.n	20de <UART1_IRQHandler+0xf2>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    20a6:	79bb      	ldrb	r3, [r7, #6]
    20a8:	2b06      	cmp	r3, #6
    20aa:	d106      	bne.n	20ba <UART1_IRQHandler+0xce>
	{
		/* Character Time-out indicator */
		UART1Status |= 0x100; /* Bit 9 as the CTI error */
    20ac:	4b0f      	ldr	r3, [pc, #60]	; (20ec <UART1_IRQHandler+0x100>)
    20ae:	681b      	ldr	r3, [r3, #0]
    20b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    20b4:	4a0d      	ldr	r2, [pc, #52]	; (20ec <UART1_IRQHandler+0x100>)
    20b6:	6013      	str	r3, [r2, #0]
    20b8:	e011      	b.n	20de <UART1_IRQHandler+0xf2>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    20ba:	79bb      	ldrb	r3, [r7, #6]
    20bc:	2b01      	cmp	r3, #1
    20be:	d10e      	bne.n	20de <UART1_IRQHandler+0xf2>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART1->LSR; /* Check status in the LSR to see if
    20c0:	4b09      	ldr	r3, [pc, #36]	; (20e8 <UART1_IRQHandler+0xfc>)
    20c2:	7d1b      	ldrb	r3, [r3, #20]
    20c4:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    20c6:	797b      	ldrb	r3, [r7, #5]
    20c8:	f003 0320 	and.w	r3, r3, #32
    20cc:	2b00      	cmp	r3, #0
    20ce:	d003      	beq.n	20d8 <UART1_IRQHandler+0xec>
			UART1TxEmpty = 1;
    20d0:	4b09      	ldr	r3, [pc, #36]	; (20f8 <UART1_IRQHandler+0x10c>)
    20d2:	2201      	movs	r2, #1
    20d4:	701a      	strb	r2, [r3, #0]
    20d6:	e002      	b.n	20de <UART1_IRQHandler+0xf2>
		} else {
			UART1TxEmpty = 0;
    20d8:	4b07      	ldr	r3, [pc, #28]	; (20f8 <UART1_IRQHandler+0x10c>)
    20da:	2200      	movs	r2, #0
    20dc:	701a      	strb	r2, [r3, #0]
		}
	}

}
    20de:	370c      	adds	r7, #12
    20e0:	46bd      	mov	sp, r7
    20e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    20e6:	4770      	bx	lr
    20e8:	40010000 	.word	0x40010000
    20ec:	10001740 	.word	0x10001740
    20f0:	1000003e 	.word	0x1000003e
    20f4:	100011e4 	.word	0x100011e4
    20f8:	10000021 	.word	0x10000021

000020fc <UART2_IRQHandler>:

void UART2_IRQHandler(void) {
    20fc:	b480      	push	{r7}
    20fe:	b083      	sub	sp, #12
    2100:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;
	IIRValue = LPC_UART2->IIR;
    2102:	4b3c      	ldr	r3, [pc, #240]	; (21f4 <UART2_IRQHandler+0xf8>)
    2104:	689b      	ldr	r3, [r3, #8]
    2106:	71bb      	strb	r3, [r7, #6]
	IIRValue >>= 1; /* skip pending bit in IIR */
    2108:	79bb      	ldrb	r3, [r7, #6]
    210a:	085b      	lsrs	r3, r3, #1
    210c:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    210e:	79bb      	ldrb	r3, [r7, #6]
    2110:	f003 0307 	and.w	r3, r3, #7
    2114:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    2116:	79bb      	ldrb	r3, [r7, #6]
    2118:	2b03      	cmp	r3, #3
    211a:	d12d      	bne.n	2178 <UART2_IRQHandler+0x7c>
	{
		LSRValue = LPC_UART2->LSR;
    211c:	4b35      	ldr	r3, [pc, #212]	; (21f4 <UART2_IRQHandler+0xf8>)
    211e:	7d1b      	ldrb	r3, [r3, #20]
    2120:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2122:	797b      	ldrb	r3, [r7, #5]
    2124:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2128:	2b00      	cmp	r3, #0
    212a:	d006      	beq.n	213a <UART2_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART2Status = LSRValue;
    212c:	797b      	ldrb	r3, [r7, #5]
    212e:	4a32      	ldr	r2, [pc, #200]	; (21f8 <UART2_IRQHandler+0xfc>)
    2130:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART2->RBR; /* Dummy read on RX to clear
    2132:	4b30      	ldr	r3, [pc, #192]	; (21f4 <UART2_IRQHandler+0xf8>)
    2134:	781b      	ldrb	r3, [r3, #0]
    2136:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2138:	e057      	b.n	21ea <UART2_IRQHandler+0xee>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    213a:	797b      	ldrb	r3, [r7, #5]
    213c:	f003 0301 	and.w	r3, r3, #1
    2140:	2b00      	cmp	r3, #0
    2142:	d052      	beq.n	21ea <UART2_IRQHandler+0xee>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART2Buffer[UART2Count] = LPC_UART2->RBR;
    2144:	4b2d      	ldr	r3, [pc, #180]	; (21fc <UART2_IRQHandler+0x100>)
    2146:	881b      	ldrh	r3, [r3, #0]
    2148:	b29b      	uxth	r3, r3
    214a:	461a      	mov	r2, r3
    214c:	4b29      	ldr	r3, [pc, #164]	; (21f4 <UART2_IRQHandler+0xf8>)
    214e:	781b      	ldrb	r3, [r3, #0]
    2150:	b2d9      	uxtb	r1, r3
    2152:	4b2b      	ldr	r3, [pc, #172]	; (2200 <UART2_IRQHandler+0x104>)
    2154:	5499      	strb	r1, [r3, r2]
			UART2Count++;
    2156:	4b29      	ldr	r3, [pc, #164]	; (21fc <UART2_IRQHandler+0x100>)
    2158:	881b      	ldrh	r3, [r3, #0]
    215a:	b29b      	uxth	r3, r3
    215c:	3301      	adds	r3, #1
    215e:	b29a      	uxth	r2, r3
    2160:	4b26      	ldr	r3, [pc, #152]	; (21fc <UART2_IRQHandler+0x100>)
    2162:	801a      	strh	r2, [r3, #0]
			if (UART2Count >= UART2_BUFFSIZE) {
    2164:	4b25      	ldr	r3, [pc, #148]	; (21fc <UART2_IRQHandler+0x100>)
    2166:	881b      	ldrh	r3, [r3, #0]
    2168:	b29b      	uxth	r3, r3
    216a:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    216e:	d33c      	bcc.n	21ea <UART2_IRQHandler+0xee>
				UART2Count = 0; /* buffer overflow */
    2170:	4b22      	ldr	r3, [pc, #136]	; (21fc <UART2_IRQHandler+0x100>)
    2172:	2200      	movs	r2, #0
    2174:	801a      	strh	r2, [r3, #0]
    2176:	e038      	b.n	21ea <UART2_IRQHandler+0xee>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2178:	79bb      	ldrb	r3, [r7, #6]
    217a:	2b02      	cmp	r3, #2
    217c:	d119      	bne.n	21b2 <UART2_IRQHandler+0xb6>
	{
		/* Receive Data Available */
		UART2Buffer[UART2Count] = LPC_UART2->RBR;
    217e:	4b1f      	ldr	r3, [pc, #124]	; (21fc <UART2_IRQHandler+0x100>)
    2180:	881b      	ldrh	r3, [r3, #0]
    2182:	b29b      	uxth	r3, r3
    2184:	461a      	mov	r2, r3
    2186:	4b1b      	ldr	r3, [pc, #108]	; (21f4 <UART2_IRQHandler+0xf8>)
    2188:	781b      	ldrb	r3, [r3, #0]
    218a:	b2d9      	uxtb	r1, r3
    218c:	4b1c      	ldr	r3, [pc, #112]	; (2200 <UART2_IRQHandler+0x104>)
    218e:	5499      	strb	r1, [r3, r2]
		UART2Count++;
    2190:	4b1a      	ldr	r3, [pc, #104]	; (21fc <UART2_IRQHandler+0x100>)
    2192:	881b      	ldrh	r3, [r3, #0]
    2194:	b29b      	uxth	r3, r3
    2196:	3301      	adds	r3, #1
    2198:	b29a      	uxth	r2, r3
    219a:	4b18      	ldr	r3, [pc, #96]	; (21fc <UART2_IRQHandler+0x100>)
    219c:	801a      	strh	r2, [r3, #0]
		if (UART2Count >= UART2_BUFFSIZE) {
    219e:	4b17      	ldr	r3, [pc, #92]	; (21fc <UART2_IRQHandler+0x100>)
    21a0:	881b      	ldrh	r3, [r3, #0]
    21a2:	b29b      	uxth	r3, r3
    21a4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    21a8:	d31f      	bcc.n	21ea <UART2_IRQHandler+0xee>
			UART2Count = 0; /* buffer overflow */
    21aa:	4b14      	ldr	r3, [pc, #80]	; (21fc <UART2_IRQHandler+0x100>)
    21ac:	2200      	movs	r2, #0
    21ae:	801a      	strh	r2, [r3, #0]
    21b0:	e01b      	b.n	21ea <UART2_IRQHandler+0xee>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    21b2:	79bb      	ldrb	r3, [r7, #6]
    21b4:	2b06      	cmp	r3, #6
    21b6:	d106      	bne.n	21c6 <UART2_IRQHandler+0xca>
	{
		/* Character Time-out indicator */
		UART2Status |= 0x100; /* Bit 9 as the CTI error */
    21b8:	4b0f      	ldr	r3, [pc, #60]	; (21f8 <UART2_IRQHandler+0xfc>)
    21ba:	681b      	ldr	r3, [r3, #0]
    21bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    21c0:	4a0d      	ldr	r2, [pc, #52]	; (21f8 <UART2_IRQHandler+0xfc>)
    21c2:	6013      	str	r3, [r2, #0]
    21c4:	e011      	b.n	21ea <UART2_IRQHandler+0xee>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    21c6:	79bb      	ldrb	r3, [r7, #6]
    21c8:	2b01      	cmp	r3, #1
    21ca:	d10e      	bne.n	21ea <UART2_IRQHandler+0xee>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART2->LSR; /* Check status in the LSR to see if
    21cc:	4b09      	ldr	r3, [pc, #36]	; (21f4 <UART2_IRQHandler+0xf8>)
    21ce:	7d1b      	ldrb	r3, [r3, #20]
    21d0:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    21d2:	797b      	ldrb	r3, [r7, #5]
    21d4:	f003 0320 	and.w	r3, r3, #32
    21d8:	2b00      	cmp	r3, #0
    21da:	d003      	beq.n	21e4 <UART2_IRQHandler+0xe8>
			UART2TxEmpty = 1;
    21dc:	4b09      	ldr	r3, [pc, #36]	; (2204 <UART2_IRQHandler+0x108>)
    21de:	2201      	movs	r2, #1
    21e0:	701a      	strb	r2, [r3, #0]
    21e2:	e002      	b.n	21ea <UART2_IRQHandler+0xee>
		} else {
			UART2TxEmpty = 0;
    21e4:	4b07      	ldr	r3, [pc, #28]	; (2204 <UART2_IRQHandler+0x108>)
    21e6:	2200      	movs	r2, #0
    21e8:	701a      	strb	r2, [r3, #0]
		}
	}
}
    21ea:	370c      	adds	r7, #12
    21ec:	46bd      	mov	sp, r7
    21ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    21f2:	4770      	bx	lr
    21f4:	40098000 	.word	0x40098000
    21f8:	10001634 	.word	0x10001634
    21fc:	10000040 	.word	0x10000040
    2200:	10001848 	.word	0x10001848
    2204:	10000023 	.word	0x10000023

00002208 <UART3_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART3_IRQHandler(void) {
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART3->IIR;
    220e:	4b3c      	ldr	r3, [pc, #240]	; (2300 <UART3_IRQHandler+0xf8>)
    2210:	689b      	ldr	r3, [r3, #8]
    2212:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    2214:	79bb      	ldrb	r3, [r7, #6]
    2216:	085b      	lsrs	r3, r3, #1
    2218:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    221a:	79bb      	ldrb	r3, [r7, #6]
    221c:	f003 0307 	and.w	r3, r3, #7
    2220:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    2222:	79bb      	ldrb	r3, [r7, #6]
    2224:	2b03      	cmp	r3, #3
    2226:	d12d      	bne.n	2284 <UART3_IRQHandler+0x7c>
	{
		LSRValue = LPC_UART3->LSR;
    2228:	4b35      	ldr	r3, [pc, #212]	; (2300 <UART3_IRQHandler+0xf8>)
    222a:	7d1b      	ldrb	r3, [r3, #20]
    222c:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    222e:	797b      	ldrb	r3, [r7, #5]
    2230:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2234:	2b00      	cmp	r3, #0
    2236:	d006      	beq.n	2246 <UART3_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART3Status = LSRValue;
    2238:	797b      	ldrb	r3, [r7, #5]
    223a:	4a32      	ldr	r2, [pc, #200]	; (2304 <UART3_IRQHandler+0xfc>)
    223c:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART3->RBR; /* Dummy read on RX to clear
    223e:	4b30      	ldr	r3, [pc, #192]	; (2300 <UART3_IRQHandler+0xf8>)
    2240:	781b      	ldrb	r3, [r3, #0]
    2242:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2244:	e057      	b.n	22f6 <UART3_IRQHandler+0xee>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    2246:	797b      	ldrb	r3, [r7, #5]
    2248:	f003 0301 	and.w	r3, r3, #1
    224c:	2b00      	cmp	r3, #0
    224e:	d052      	beq.n	22f6 <UART3_IRQHandler+0xee>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART3Buffer[UART3Count] = LPC_UART3->RBR;
    2250:	4b2d      	ldr	r3, [pc, #180]	; (2308 <UART3_IRQHandler+0x100>)
    2252:	881b      	ldrh	r3, [r3, #0]
    2254:	b29b      	uxth	r3, r3
    2256:	461a      	mov	r2, r3
    2258:	4b29      	ldr	r3, [pc, #164]	; (2300 <UART3_IRQHandler+0xf8>)
    225a:	781b      	ldrb	r3, [r3, #0]
    225c:	b2d9      	uxtb	r1, r3
    225e:	4b2b      	ldr	r3, [pc, #172]	; (230c <UART3_IRQHandler+0x104>)
    2260:	5499      	strb	r1, [r3, r2]
			UART3Count++;
    2262:	4b29      	ldr	r3, [pc, #164]	; (2308 <UART3_IRQHandler+0x100>)
    2264:	881b      	ldrh	r3, [r3, #0]
    2266:	b29b      	uxth	r3, r3
    2268:	3301      	adds	r3, #1
    226a:	b29a      	uxth	r2, r3
    226c:	4b26      	ldr	r3, [pc, #152]	; (2308 <UART3_IRQHandler+0x100>)
    226e:	801a      	strh	r2, [r3, #0]
			if (UART3Count == BUFSIZE) {
    2270:	4b25      	ldr	r3, [pc, #148]	; (2308 <UART3_IRQHandler+0x100>)
    2272:	881b      	ldrh	r3, [r3, #0]
    2274:	b29b      	uxth	r3, r3
    2276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    227a:	d13c      	bne.n	22f6 <UART3_IRQHandler+0xee>
				UART3Count = 0; /* buffer overflow */
    227c:	4b22      	ldr	r3, [pc, #136]	; (2308 <UART3_IRQHandler+0x100>)
    227e:	2200      	movs	r2, #0
    2280:	801a      	strh	r2, [r3, #0]
    2282:	e038      	b.n	22f6 <UART3_IRQHandler+0xee>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2284:	79bb      	ldrb	r3, [r7, #6]
    2286:	2b02      	cmp	r3, #2
    2288:	d119      	bne.n	22be <UART3_IRQHandler+0xb6>
	{
		/* Receive Data Available */
		UART3Buffer[UART3Count] = LPC_UART3->RBR;
    228a:	4b1f      	ldr	r3, [pc, #124]	; (2308 <UART3_IRQHandler+0x100>)
    228c:	881b      	ldrh	r3, [r3, #0]
    228e:	b29b      	uxth	r3, r3
    2290:	461a      	mov	r2, r3
    2292:	4b1b      	ldr	r3, [pc, #108]	; (2300 <UART3_IRQHandler+0xf8>)
    2294:	781b      	ldrb	r3, [r3, #0]
    2296:	b2d9      	uxtb	r1, r3
    2298:	4b1c      	ldr	r3, [pc, #112]	; (230c <UART3_IRQHandler+0x104>)
    229a:	5499      	strb	r1, [r3, r2]
		UART3Count++;
    229c:	4b1a      	ldr	r3, [pc, #104]	; (2308 <UART3_IRQHandler+0x100>)
    229e:	881b      	ldrh	r3, [r3, #0]
    22a0:	b29b      	uxth	r3, r3
    22a2:	3301      	adds	r3, #1
    22a4:	b29a      	uxth	r2, r3
    22a6:	4b18      	ldr	r3, [pc, #96]	; (2308 <UART3_IRQHandler+0x100>)
    22a8:	801a      	strh	r2, [r3, #0]
		if (UART3Count == BUFSIZE) {
    22aa:	4b17      	ldr	r3, [pc, #92]	; (2308 <UART3_IRQHandler+0x100>)
    22ac:	881b      	ldrh	r3, [r3, #0]
    22ae:	b29b      	uxth	r3, r3
    22b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    22b4:	d11f      	bne.n	22f6 <UART3_IRQHandler+0xee>
			UART3Count = 0; /* buffer overflow */
    22b6:	4b14      	ldr	r3, [pc, #80]	; (2308 <UART3_IRQHandler+0x100>)
    22b8:	2200      	movs	r2, #0
    22ba:	801a      	strh	r2, [r3, #0]
    22bc:	e01b      	b.n	22f6 <UART3_IRQHandler+0xee>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    22be:	79bb      	ldrb	r3, [r7, #6]
    22c0:	2b06      	cmp	r3, #6
    22c2:	d106      	bne.n	22d2 <UART3_IRQHandler+0xca>
	{
		/* Character Time-out indicator */
		UART3Status |= 0x100; /* Bit 9 as the CTI error */
    22c4:	4b0f      	ldr	r3, [pc, #60]	; (2304 <UART3_IRQHandler+0xfc>)
    22c6:	681b      	ldr	r3, [r3, #0]
    22c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    22cc:	4a0d      	ldr	r2, [pc, #52]	; (2304 <UART3_IRQHandler+0xfc>)
    22ce:	6013      	str	r3, [r2, #0]
    22d0:	e011      	b.n	22f6 <UART3_IRQHandler+0xee>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    22d2:	79bb      	ldrb	r3, [r7, #6]
    22d4:	2b01      	cmp	r3, #1
    22d6:	d10e      	bne.n	22f6 <UART3_IRQHandler+0xee>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART3->LSR; /* Check status in the LSR to see if
    22d8:	4b09      	ldr	r3, [pc, #36]	; (2300 <UART3_IRQHandler+0xf8>)
    22da:	7d1b      	ldrb	r3, [r3, #20]
    22dc:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    22de:	797b      	ldrb	r3, [r7, #5]
    22e0:	f003 0320 	and.w	r3, r3, #32
    22e4:	2b00      	cmp	r3, #0
    22e6:	d003      	beq.n	22f0 <UART3_IRQHandler+0xe8>
			UART3TxEmpty = 1;
    22e8:	4b09      	ldr	r3, [pc, #36]	; (2310 <UART3_IRQHandler+0x108>)
    22ea:	2201      	movs	r2, #1
    22ec:	701a      	strb	r2, [r3, #0]
    22ee:	e002      	b.n	22f6 <UART3_IRQHandler+0xee>
		} else {
			UART3TxEmpty = 0;
    22f0:	4b07      	ldr	r3, [pc, #28]	; (2310 <UART3_IRQHandler+0x108>)
    22f2:	2200      	movs	r2, #0
    22f4:	701a      	strb	r2, [r3, #0]
		}
	}
}
    22f6:	370c      	adds	r7, #12
    22f8:	46bd      	mov	sp, r7
    22fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    22fe:	4770      	bx	lr
    2300:	4009c000 	.word	0x4009c000
    2304:	1000163c 	.word	0x1000163c
    2308:	10000042 	.word	0x10000042
    230c:	10001748 	.word	0x10001748
    2310:	10000022 	.word	0x10000022

00002314 <UARTInit>:
 ** Returned value:		true or false, return false only if the
 **						interrupt handler can't be installed to the
 **						VIC table
 **
 *****************************************************************************/
uint32_t UARTInit(uint32_t PortNum, uint32_t baudrate) {
    2314:	b580      	push	{r7, lr}
    2316:	b086      	sub	sp, #24
    2318:	af00      	add	r7, sp, #0
    231a:	6078      	str	r0, [r7, #4]
    231c:	6039      	str	r1, [r7, #0]
	uint32_t Fdiv;
	uint32_t pclkdiv, pclk;
	if (PortNum == 0) {
    231e:	687b      	ldr	r3, [r7, #4]
    2320:	2b00      	cmp	r3, #0
    2322:	d15b      	bne.n	23dc <UARTInit+0xc8>
		LPC_PINCON->PINSEL0 &= ~0x000000F0;
    2324:	4aa5      	ldr	r2, [pc, #660]	; (25bc <UARTInit+0x2a8>)
    2326:	4ba5      	ldr	r3, [pc, #660]	; (25bc <UARTInit+0x2a8>)
    2328:	681b      	ldr	r3, [r3, #0]
    232a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    232e:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00000050; /* RxD0 is P0.3 and TxD0 is P0.2 */
    2330:	4aa2      	ldr	r2, [pc, #648]	; (25bc <UARTInit+0x2a8>)
    2332:	4ba2      	ldr	r3, [pc, #648]	; (25bc <UARTInit+0x2a8>)
    2334:	681b      	ldr	r3, [r3, #0]
    2336:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    233a:	6013      	str	r3, [r2, #0]
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART0 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
    233c:	4ba0      	ldr	r3, [pc, #640]	; (25c0 <UARTInit+0x2ac>)
    233e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2342:	099b      	lsrs	r3, r3, #6
    2344:	f003 0303 	and.w	r3, r3, #3
    2348:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    234a:	693b      	ldr	r3, [r7, #16]
    234c:	2b02      	cmp	r3, #2
    234e:	d00c      	beq.n	236a <UARTInit+0x56>
    2350:	2b03      	cmp	r3, #3
    2352:	d00f      	beq.n	2374 <UARTInit+0x60>
    2354:	2b01      	cmp	r3, #1
    2356:	d004      	beq.n	2362 <UARTInit+0x4e>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2358:	4b9a      	ldr	r3, [pc, #616]	; (25c4 <UARTInit+0x2b0>)
    235a:	681b      	ldr	r3, [r3, #0]
    235c:	089b      	lsrs	r3, r3, #2
    235e:	617b      	str	r3, [r7, #20]
			break;
    2360:	e00d      	b.n	237e <UARTInit+0x6a>
		case 0x01:
			pclk = SystemCoreClock;
    2362:	4b98      	ldr	r3, [pc, #608]	; (25c4 <UARTInit+0x2b0>)
    2364:	681b      	ldr	r3, [r3, #0]
    2366:	617b      	str	r3, [r7, #20]
			break;
    2368:	e009      	b.n	237e <UARTInit+0x6a>
		case 0x02:
			pclk = SystemCoreClock / 2;
    236a:	4b96      	ldr	r3, [pc, #600]	; (25c4 <UARTInit+0x2b0>)
    236c:	681b      	ldr	r3, [r3, #0]
    236e:	085b      	lsrs	r3, r3, #1
    2370:	617b      	str	r3, [r7, #20]
			break;
    2372:	e004      	b.n	237e <UARTInit+0x6a>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2374:	4b93      	ldr	r3, [pc, #588]	; (25c4 <UARTInit+0x2b0>)
    2376:	681b      	ldr	r3, [r3, #0]
    2378:	08db      	lsrs	r3, r3, #3
    237a:	617b      	str	r3, [r7, #20]
			break;
    237c:	bf00      	nop
		}
		LPC_UART0->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    237e:	4b92      	ldr	r3, [pc, #584]	; (25c8 <UARTInit+0x2b4>)
    2380:	2283      	movs	r2, #131	; 0x83
    2382:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2384:	697b      	ldr	r3, [r7, #20]
    2386:	091a      	lsrs	r2, r3, #4
    2388:	683b      	ldr	r3, [r7, #0]
    238a:	fbb2 f3f3 	udiv	r3, r2, r3
    238e:	60fb      	str	r3, [r7, #12]
		if (baudrate == 115200){
    2390:	683b      	ldr	r3, [r7, #0]
    2392:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2396:	d10a      	bne.n	23ae <UARTInit+0x9a>
			LPC_UART0->DLM = 0;
    2398:	4b8b      	ldr	r3, [pc, #556]	; (25c8 <UARTInit+0x2b4>)
    239a:	2200      	movs	r2, #0
    239c:	711a      	strb	r2, [r3, #4]
			LPC_UART0->DLL = 9;
    239e:	4b8a      	ldr	r3, [pc, #552]	; (25c8 <UARTInit+0x2b4>)
    23a0:	2209      	movs	r2, #9
    23a2:	701a      	strb	r2, [r3, #0]
			LPC_UART0->FDR=1<<0|1<<5;
    23a4:	4b88      	ldr	r3, [pc, #544]	; (25c8 <UARTInit+0x2b4>)
    23a6:	2221      	movs	r2, #33	; 0x21
    23a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    23ac:	e008      	b.n	23c0 <UARTInit+0xac>
		}else{
			LPC_UART0->DLM = Fdiv / 256;
    23ae:	4a86      	ldr	r2, [pc, #536]	; (25c8 <UARTInit+0x2b4>)
    23b0:	68fb      	ldr	r3, [r7, #12]
    23b2:	0a1b      	lsrs	r3, r3, #8
    23b4:	b2db      	uxtb	r3, r3
    23b6:	7113      	strb	r3, [r2, #4]
			LPC_UART0->DLL = Fdiv % 256;
    23b8:	4b83      	ldr	r3, [pc, #524]	; (25c8 <UARTInit+0x2b4>)
    23ba:	68fa      	ldr	r2, [r7, #12]
    23bc:	b2d2      	uxtb	r2, r2
    23be:	701a      	strb	r2, [r3, #0]
		}
		LPC_UART0->LCR = 0x03; /* DLAB = 0 */
    23c0:	4b81      	ldr	r3, [pc, #516]	; (25c8 <UARTInit+0x2b4>)
    23c2:	2203      	movs	r2, #3
    23c4:	731a      	strb	r2, [r3, #12]
		LPC_UART0->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    23c6:	4b80      	ldr	r3, [pc, #512]	; (25c8 <UARTInit+0x2b4>)
    23c8:	2207      	movs	r2, #7
    23ca:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART0_IRQn);
    23cc:	2005      	movs	r0, #5
    23ce:	f7ff fd55 	bl	1e7c <NVIC_EnableIRQ>
		LPC_UART0->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART0 interrupt */
    23d2:	4b7d      	ldr	r3, [pc, #500]	; (25c8 <UARTInit+0x2b4>)
    23d4:	2207      	movs	r2, #7
    23d6:	605a      	str	r2, [r3, #4]
		return (TRUE);
    23d8:	2301      	movs	r3, #1
    23da:	e12a      	b.n	2632 <UARTInit+0x31e>
	} else if (PortNum == 1) {
    23dc:	687b      	ldr	r3, [r7, #4]
    23de:	2b01      	cmp	r3, #1
    23e0:	d165      	bne.n	24ae <UARTInit+0x19a>
		NVIC_DisableIRQ(UART1_IRQn);
    23e2:	2006      	movs	r0, #6
    23e4:	f7ff fd62 	bl	1eac <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 4;
    23e8:	4a75      	ldr	r2, [pc, #468]	; (25c0 <UARTInit+0x2ac>)
    23ea:	4b75      	ldr	r3, [pc, #468]	; (25c0 <UARTInit+0x2ac>)
    23ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    23f0:	f043 0310 	orr.w	r3, r3, #16
    23f4:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL4 &= ~0x0000000F;
    23f8:	4a70      	ldr	r2, [pc, #448]	; (25bc <UARTInit+0x2a8>)
    23fa:	4b70      	ldr	r3, [pc, #448]	; (25bc <UARTInit+0x2a8>)
    23fc:	691b      	ldr	r3, [r3, #16]
    23fe:	f023 030f 	bic.w	r3, r3, #15
    2402:	6113      	str	r3, [r2, #16]
		LPC_PINCON->PINSEL4 |= 0x0000000A; /* Enable RxD1 P0.16, TxD1 P0.15 */
    2404:	4a6d      	ldr	r2, [pc, #436]	; (25bc <UARTInit+0x2a8>)
    2406:	4b6d      	ldr	r3, [pc, #436]	; (25bc <UARTInit+0x2a8>)
    2408:	691b      	ldr	r3, [r3, #16]
    240a:	f043 030a 	orr.w	r3, r3, #10
    240e:	6113      	str	r3, [r2, #16]

		//| 1<<25; //Enable PCUART1
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 8,9 are for UART1 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
    2410:	4b6b      	ldr	r3, [pc, #428]	; (25c0 <UARTInit+0x2ac>)
    2412:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2416:	0a1b      	lsrs	r3, r3, #8
    2418:	f003 0303 	and.w	r3, r3, #3
    241c:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    241e:	693b      	ldr	r3, [r7, #16]
    2420:	2b02      	cmp	r3, #2
    2422:	d00c      	beq.n	243e <UARTInit+0x12a>
    2424:	2b03      	cmp	r3, #3
    2426:	d00f      	beq.n	2448 <UARTInit+0x134>
    2428:	2b01      	cmp	r3, #1
    242a:	d004      	beq.n	2436 <UARTInit+0x122>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    242c:	4b65      	ldr	r3, [pc, #404]	; (25c4 <UARTInit+0x2b0>)
    242e:	681b      	ldr	r3, [r3, #0]
    2430:	089b      	lsrs	r3, r3, #2
    2432:	617b      	str	r3, [r7, #20]
			break;
    2434:	e00d      	b.n	2452 <UARTInit+0x13e>
		case 0x01:
			pclk = SystemCoreClock;
    2436:	4b63      	ldr	r3, [pc, #396]	; (25c4 <UARTInit+0x2b0>)
    2438:	681b      	ldr	r3, [r3, #0]
    243a:	617b      	str	r3, [r7, #20]
			break;
    243c:	e009      	b.n	2452 <UARTInit+0x13e>
		case 0x02:
			pclk = SystemCoreClock / 2;
    243e:	4b61      	ldr	r3, [pc, #388]	; (25c4 <UARTInit+0x2b0>)
    2440:	681b      	ldr	r3, [r3, #0]
    2442:	085b      	lsrs	r3, r3, #1
    2444:	617b      	str	r3, [r7, #20]
			break;
    2446:	e004      	b.n	2452 <UARTInit+0x13e>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2448:	4b5e      	ldr	r3, [pc, #376]	; (25c4 <UARTInit+0x2b0>)
    244a:	681b      	ldr	r3, [r3, #0]
    244c:	08db      	lsrs	r3, r3, #3
    244e:	617b      	str	r3, [r7, #20]
			break;
    2450:	bf00      	nop
		}
		LPC_UART1->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2452:	4b5e      	ldr	r3, [pc, #376]	; (25cc <UARTInit+0x2b8>)
    2454:	2283      	movs	r2, #131	; 0x83
    2456:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2458:	697b      	ldr	r3, [r7, #20]
    245a:	091a      	lsrs	r2, r3, #4
    245c:	683b      	ldr	r3, [r7, #0]
    245e:	fbb2 f3f3 	udiv	r3, r2, r3
    2462:	60fb      	str	r3, [r7, #12]

		if (baudrate == 115200){
    2464:	683b      	ldr	r3, [r7, #0]
    2466:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    246a:	d109      	bne.n	2480 <UARTInit+0x16c>
			LPC_UART1->DLM = 0;
    246c:	4b57      	ldr	r3, [pc, #348]	; (25cc <UARTInit+0x2b8>)
    246e:	2200      	movs	r2, #0
    2470:	711a      	strb	r2, [r3, #4]
			LPC_UART1->DLL = 9;
    2472:	4b56      	ldr	r3, [pc, #344]	; (25cc <UARTInit+0x2b8>)
    2474:	2209      	movs	r2, #9
    2476:	701a      	strb	r2, [r3, #0]
			LPC_UART1->FDR=1<<0|1<<5;
    2478:	4b54      	ldr	r3, [pc, #336]	; (25cc <UARTInit+0x2b8>)
    247a:	2221      	movs	r2, #33	; 0x21
    247c:	629a      	str	r2, [r3, #40]	; 0x28
    247e:	e008      	b.n	2492 <UARTInit+0x17e>
		}else{
			LPC_UART1->DLM = Fdiv / 256;
    2480:	4a52      	ldr	r2, [pc, #328]	; (25cc <UARTInit+0x2b8>)
    2482:	68fb      	ldr	r3, [r7, #12]
    2484:	0a1b      	lsrs	r3, r3, #8
    2486:	b2db      	uxtb	r3, r3
    2488:	7113      	strb	r3, [r2, #4]
			LPC_UART1->DLL = Fdiv % 256;
    248a:	4b50      	ldr	r3, [pc, #320]	; (25cc <UARTInit+0x2b8>)
    248c:	68fa      	ldr	r2, [r7, #12]
    248e:	b2d2      	uxtb	r2, r2
    2490:	701a      	strb	r2, [r3, #0]
		}
		LPC_UART1->LCR = 0x03; /* DLAB = 0 */
    2492:	4b4e      	ldr	r3, [pc, #312]	; (25cc <UARTInit+0x2b8>)
    2494:	2203      	movs	r2, #3
    2496:	731a      	strb	r2, [r3, #12]
		LPC_UART1->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2498:	4b4c      	ldr	r3, [pc, #304]	; (25cc <UARTInit+0x2b8>)
    249a:	2207      	movs	r2, #7
    249c:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART1_IRQn);
    249e:	2006      	movs	r0, #6
    24a0:	f7ff fcec 	bl	1e7c <NVIC_EnableIRQ>
		LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART1 interrupt */
    24a4:	4b49      	ldr	r3, [pc, #292]	; (25cc <UARTInit+0x2b8>)
    24a6:	2207      	movs	r2, #7
    24a8:	605a      	str	r2, [r3, #4]
		return (TRUE);
    24aa:	2301      	movs	r3, #1
    24ac:	e0c1      	b.n	2632 <UARTInit+0x31e>
	} else if (PortNum == 2) {
    24ae:	687b      	ldr	r3, [r7, #4]
    24b0:	2b02      	cmp	r3, #2
    24b2:	d157      	bne.n	2564 <UARTInit+0x250>
		NVIC_DisableIRQ(UART2_IRQn);
    24b4:	2007      	movs	r0, #7
    24b6:	f7ff fcf9 	bl	1eac <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 24; // UART 2 PCONP bit 24
    24ba:	4a41      	ldr	r2, [pc, #260]	; (25c0 <UARTInit+0x2ac>)
    24bc:	4b40      	ldr	r3, [pc, #256]	; (25c0 <UARTInit+0x2ac>)
    24be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    24c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    24c6:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL0 &= ~0x00F00000;
    24ca:	4a3c      	ldr	r2, [pc, #240]	; (25bc <UARTInit+0x2a8>)
    24cc:	4b3b      	ldr	r3, [pc, #236]	; (25bc <UARTInit+0x2a8>)
    24ce:	681b      	ldr	r3, [r3, #0]
    24d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    24d4:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00500000; /* Enable TxD2 on 0.10, RxD2 on 0.11 */
    24d6:	4a39      	ldr	r2, [pc, #228]	; (25bc <UARTInit+0x2a8>)
    24d8:	4b38      	ldr	r3, [pc, #224]	; (25bc <UARTInit+0x2a8>)
    24da:	681b      	ldr	r3, [r3, #0]
    24dc:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
    24e0:	6013      	str	r3, [r2, #0]
		pclkdiv = (LPC_SC->PCLKSEL0 >> 16) & 0x03;
    24e2:	4b37      	ldr	r3, [pc, #220]	; (25c0 <UARTInit+0x2ac>)
    24e4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    24e8:	0c1b      	lsrs	r3, r3, #16
    24ea:	f003 0303 	and.w	r3, r3, #3
    24ee:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    24f0:	693b      	ldr	r3, [r7, #16]
    24f2:	2b02      	cmp	r3, #2
    24f4:	d00c      	beq.n	2510 <UARTInit+0x1fc>
    24f6:	2b03      	cmp	r3, #3
    24f8:	d00f      	beq.n	251a <UARTInit+0x206>
    24fa:	2b01      	cmp	r3, #1
    24fc:	d004      	beq.n	2508 <UARTInit+0x1f4>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    24fe:	4b31      	ldr	r3, [pc, #196]	; (25c4 <UARTInit+0x2b0>)
    2500:	681b      	ldr	r3, [r3, #0]
    2502:	089b      	lsrs	r3, r3, #2
    2504:	617b      	str	r3, [r7, #20]
			break;
    2506:	e00d      	b.n	2524 <UARTInit+0x210>
		case 0x01:
			pclk = SystemCoreClock;
    2508:	4b2e      	ldr	r3, [pc, #184]	; (25c4 <UARTInit+0x2b0>)
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	617b      	str	r3, [r7, #20]
			break;
    250e:	e009      	b.n	2524 <UARTInit+0x210>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2510:	4b2c      	ldr	r3, [pc, #176]	; (25c4 <UARTInit+0x2b0>)
    2512:	681b      	ldr	r3, [r3, #0]
    2514:	085b      	lsrs	r3, r3, #1
    2516:	617b      	str	r3, [r7, #20]
			break;
    2518:	e004      	b.n	2524 <UARTInit+0x210>
		case 0x03:
			pclk = SystemCoreClock / 8;
    251a:	4b2a      	ldr	r3, [pc, #168]	; (25c4 <UARTInit+0x2b0>)
    251c:	681b      	ldr	r3, [r3, #0]
    251e:	08db      	lsrs	r3, r3, #3
    2520:	617b      	str	r3, [r7, #20]
			break;
    2522:	bf00      	nop
		}
		LPC_UART2->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2524:	4b2a      	ldr	r3, [pc, #168]	; (25d0 <UARTInit+0x2bc>)
    2526:	2283      	movs	r2, #131	; 0x83
    2528:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    252a:	697b      	ldr	r3, [r7, #20]
    252c:	091a      	lsrs	r2, r3, #4
    252e:	683b      	ldr	r3, [r7, #0]
    2530:	fbb2 f3f3 	udiv	r3, r2, r3
    2534:	60fb      	str	r3, [r7, #12]
		LPC_UART2->DLM = Fdiv / 256;
    2536:	4a26      	ldr	r2, [pc, #152]	; (25d0 <UARTInit+0x2bc>)
    2538:	68fb      	ldr	r3, [r7, #12]
    253a:	0a1b      	lsrs	r3, r3, #8
    253c:	b2db      	uxtb	r3, r3
    253e:	7113      	strb	r3, [r2, #4]
		LPC_UART2->DLL = Fdiv % 256;
    2540:	4b23      	ldr	r3, [pc, #140]	; (25d0 <UARTInit+0x2bc>)
    2542:	68fa      	ldr	r2, [r7, #12]
    2544:	b2d2      	uxtb	r2, r2
    2546:	701a      	strb	r2, [r3, #0]
		LPC_UART2->LCR = 0x03; /* DLAB = 0 */
    2548:	4b21      	ldr	r3, [pc, #132]	; (25d0 <UARTInit+0x2bc>)
    254a:	2203      	movs	r2, #3
    254c:	731a      	strb	r2, [r3, #12]
		LPC_UART2->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    254e:	4b20      	ldr	r3, [pc, #128]	; (25d0 <UARTInit+0x2bc>)
    2550:	2207      	movs	r2, #7
    2552:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART2_IRQn);
    2554:	2007      	movs	r0, #7
    2556:	f7ff fc91 	bl	1e7c <NVIC_EnableIRQ>
		LPC_UART2->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART2 interrupt */
    255a:	4b1d      	ldr	r3, [pc, #116]	; (25d0 <UARTInit+0x2bc>)
    255c:	2207      	movs	r2, #7
    255e:	605a      	str	r2, [r3, #4]
		//LPC_UART2->IER = IER_THRE; /* Polling */
		//LPC_UART2->TER = (1 << 7);
		return (TRUE);
    2560:	2301      	movs	r3, #1
    2562:	e066      	b.n	2632 <UARTInit+0x31e>
	} else if (PortNum == 3) {
    2564:	687b      	ldr	r3, [r7, #4]
    2566:	2b03      	cmp	r3, #3
    2568:	d162      	bne.n	2630 <UARTInit+0x31c>
		LPC_PINCON->PINSEL0 &= ~0x0000000F;
    256a:	4a14      	ldr	r2, [pc, #80]	; (25bc <UARTInit+0x2a8>)
    256c:	4b13      	ldr	r3, [pc, #76]	; (25bc <UARTInit+0x2a8>)
    256e:	681b      	ldr	r3, [r3, #0]
    2570:	f023 030f 	bic.w	r3, r3, #15
    2574:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x0000000A; /* RxD3 is P0.1 and TxD3 is P0.0 */
    2576:	4a11      	ldr	r2, [pc, #68]	; (25bc <UARTInit+0x2a8>)
    2578:	4b10      	ldr	r3, [pc, #64]	; (25bc <UARTInit+0x2a8>)
    257a:	681b      	ldr	r3, [r3, #0]
    257c:	f043 030a 	orr.w	r3, r3, #10
    2580:	6013      	str	r3, [r2, #0]
		LPC_SC->PCONP |= 1 << 4 | 1 << 25; //Enable PCUART1
    2582:	4a0f      	ldr	r2, [pc, #60]	; (25c0 <UARTInit+0x2ac>)
    2584:	4b0e      	ldr	r3, [pc, #56]	; (25c0 <UARTInit+0x2ac>)
    2586:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    258a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    258e:	f043 0310 	orr.w	r3, r3, #16
    2592:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART3 */
		pclkdiv = (LPC_SC->PCLKSEL1 >> 18) & 0x03;
    2596:	4b0a      	ldr	r3, [pc, #40]	; (25c0 <UARTInit+0x2ac>)
    2598:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
    259c:	0c9b      	lsrs	r3, r3, #18
    259e:	f003 0303 	and.w	r3, r3, #3
    25a2:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    25a4:	693b      	ldr	r3, [r7, #16]
    25a6:	2b02      	cmp	r3, #2
    25a8:	d018      	beq.n	25dc <UARTInit+0x2c8>
    25aa:	2b03      	cmp	r3, #3
    25ac:	d01b      	beq.n	25e6 <UARTInit+0x2d2>
    25ae:	2b01      	cmp	r3, #1
    25b0:	d010      	beq.n	25d4 <UARTInit+0x2c0>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    25b2:	4b04      	ldr	r3, [pc, #16]	; (25c4 <UARTInit+0x2b0>)
    25b4:	681b      	ldr	r3, [r3, #0]
    25b6:	089b      	lsrs	r3, r3, #2
    25b8:	617b      	str	r3, [r7, #20]
			break;
    25ba:	e019      	b.n	25f0 <UARTInit+0x2dc>
    25bc:	4002c000 	.word	0x4002c000
    25c0:	400fc000 	.word	0x400fc000
    25c4:	10000024 	.word	0x10000024
    25c8:	4000c000 	.word	0x4000c000
    25cc:	40010000 	.word	0x40010000
    25d0:	40098000 	.word	0x40098000
		case 0x01:
			pclk = SystemCoreClock;
    25d4:	4b19      	ldr	r3, [pc, #100]	; (263c <UARTInit+0x328>)
    25d6:	681b      	ldr	r3, [r3, #0]
    25d8:	617b      	str	r3, [r7, #20]
			break;
    25da:	e009      	b.n	25f0 <UARTInit+0x2dc>
		case 0x02:
			pclk = SystemCoreClock / 2;
    25dc:	4b17      	ldr	r3, [pc, #92]	; (263c <UARTInit+0x328>)
    25de:	681b      	ldr	r3, [r3, #0]
    25e0:	085b      	lsrs	r3, r3, #1
    25e2:	617b      	str	r3, [r7, #20]
			break;
    25e4:	e004      	b.n	25f0 <UARTInit+0x2dc>
		case 0x03:
			pclk = SystemCoreClock / 8;
    25e6:	4b15      	ldr	r3, [pc, #84]	; (263c <UARTInit+0x328>)
    25e8:	681b      	ldr	r3, [r3, #0]
    25ea:	08db      	lsrs	r3, r3, #3
    25ec:	617b      	str	r3, [r7, #20]
			break;
    25ee:	bf00      	nop
		}
		LPC_UART3->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    25f0:	4b13      	ldr	r3, [pc, #76]	; (2640 <UARTInit+0x32c>)
    25f2:	2283      	movs	r2, #131	; 0x83
    25f4:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    25f6:	697b      	ldr	r3, [r7, #20]
    25f8:	091a      	lsrs	r2, r3, #4
    25fa:	683b      	ldr	r3, [r7, #0]
    25fc:	fbb2 f3f3 	udiv	r3, r2, r3
    2600:	60fb      	str	r3, [r7, #12]
		LPC_UART3->DLM = Fdiv / 256;
    2602:	4a0f      	ldr	r2, [pc, #60]	; (2640 <UARTInit+0x32c>)
    2604:	68fb      	ldr	r3, [r7, #12]
    2606:	0a1b      	lsrs	r3, r3, #8
    2608:	b2db      	uxtb	r3, r3
    260a:	7113      	strb	r3, [r2, #4]
		LPC_UART3->DLL = Fdiv % 256;
    260c:	4b0c      	ldr	r3, [pc, #48]	; (2640 <UARTInit+0x32c>)
    260e:	68fa      	ldr	r2, [r7, #12]
    2610:	b2d2      	uxtb	r2, r2
    2612:	701a      	strb	r2, [r3, #0]
		LPC_UART3->LCR = 0x03; /* DLAB = 0 */
    2614:	4b0a      	ldr	r3, [pc, #40]	; (2640 <UARTInit+0x32c>)
    2616:	2203      	movs	r2, #3
    2618:	731a      	strb	r2, [r3, #12]
		LPC_UART3->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    261a:	4b09      	ldr	r3, [pc, #36]	; (2640 <UARTInit+0x32c>)
    261c:	2207      	movs	r2, #7
    261e:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART3_IRQn);
    2620:	2008      	movs	r0, #8
    2622:	f7ff fc2b 	bl	1e7c <NVIC_EnableIRQ>
		LPC_UART3->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART3 interrupt */
    2626:	4b06      	ldr	r3, [pc, #24]	; (2640 <UARTInit+0x32c>)
    2628:	2207      	movs	r2, #7
    262a:	605a      	str	r2, [r3, #4]
		return (TRUE);
    262c:	2301      	movs	r3, #1
    262e:	e000      	b.n	2632 <UARTInit+0x31e>
	}
	return (FALSE);
    2630:	2300      	movs	r3, #0
}
    2632:	4618      	mov	r0, r3
    2634:	3718      	adds	r7, #24
    2636:	46bd      	mov	sp, r7
    2638:	bd80      	pop	{r7, pc}
    263a:	bf00      	nop
    263c:	10000024 	.word	0x10000024
    2640:	4009c000 	.word	0x4009c000

00002644 <UARTSend>:
 **
 ** parameters:			portNum, buffer pointer, and data length
 ** Returned value:		None
 **
 *****************************************************************************/
void UARTSend(uint32_t portNum, char *buffer, uint32_t Length) {
    2644:	b480      	push	{r7}
    2646:	b087      	sub	sp, #28
    2648:	af00      	add	r7, sp, #0
    264a:	60f8      	str	r0, [r7, #12]
    264c:	60b9      	str	r1, [r7, #8]
    264e:	607a      	str	r2, [r7, #4]
	char *BufferPtr = buffer;
    2650:	68bb      	ldr	r3, [r7, #8]
    2652:	613b      	str	r3, [r7, #16]
	int index = 0;
    2654:	2300      	movs	r3, #0
    2656:	617b      	str	r3, [r7, #20]
	if (portNum == 0) {
    2658:	68fb      	ldr	r3, [r7, #12]
    265a:	2b00      	cmp	r3, #0
    265c:	d11b      	bne.n	2696 <UARTSend+0x52>
		while (Length != 0) {
    265e:	e016      	b.n	268e <UARTSend+0x4a>
			/* THRE status, contain valid data */
			while (!(UART0TxEmpty & 0x01));
    2660:	bf00      	nop
    2662:	4b3e      	ldr	r3, [pc, #248]	; (275c <UARTSend+0x118>)
    2664:	781b      	ldrb	r3, [r3, #0]
    2666:	b2db      	uxtb	r3, r3
    2668:	f003 0301 	and.w	r3, r3, #1
    266c:	2b00      	cmp	r3, #0
    266e:	d0f8      	beq.n	2662 <UARTSend+0x1e>
			LPC_UART0->THR = BufferPtr[index];
    2670:	493b      	ldr	r1, [pc, #236]	; (2760 <UARTSend+0x11c>)
    2672:	697b      	ldr	r3, [r7, #20]
    2674:	693a      	ldr	r2, [r7, #16]
    2676:	4413      	add	r3, r2
    2678:	781b      	ldrb	r3, [r3, #0]
    267a:	700b      	strb	r3, [r1, #0]
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
    267c:	4b37      	ldr	r3, [pc, #220]	; (275c <UARTSend+0x118>)
    267e:	2200      	movs	r2, #0
    2680:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    2682:	697b      	ldr	r3, [r7, #20]
    2684:	3301      	adds	r3, #1
    2686:	617b      	str	r3, [r7, #20]
			Length--;
    2688:	687b      	ldr	r3, [r7, #4]
    268a:	3b01      	subs	r3, #1
    268c:	607b      	str	r3, [r7, #4]
 *****************************************************************************/
void UARTSend(uint32_t portNum, char *buffer, uint32_t Length) {
	char *BufferPtr = buffer;
	int index = 0;
	if (portNum == 0) {
		while (Length != 0) {
    268e:	687b      	ldr	r3, [r7, #4]
    2690:	2b00      	cmp	r3, #0
    2692:	d1e5      	bne.n	2660 <UARTSend+0x1c>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    2694:	e05c      	b.n	2750 <UARTSend+0x10c>
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
    2696:	68fb      	ldr	r3, [r7, #12]
    2698:	2b01      	cmp	r3, #1
    269a:	d11b      	bne.n	26d4 <UARTSend+0x90>
		while (Length != 0) {
    269c:	e016      	b.n	26cc <UARTSend+0x88>
			/* THRE status, contain valid data */
			while (!(UART1TxEmpty & 0x01));
    269e:	bf00      	nop
    26a0:	4b30      	ldr	r3, [pc, #192]	; (2764 <UARTSend+0x120>)
    26a2:	781b      	ldrb	r3, [r3, #0]
    26a4:	b2db      	uxtb	r3, r3
    26a6:	f003 0301 	and.w	r3, r3, #1
    26aa:	2b00      	cmp	r3, #0
    26ac:	d0f8      	beq.n	26a0 <UARTSend+0x5c>
			LPC_UART1->THR = BufferPtr[index];
    26ae:	492e      	ldr	r1, [pc, #184]	; (2768 <UARTSend+0x124>)
    26b0:	697b      	ldr	r3, [r7, #20]
    26b2:	693a      	ldr	r2, [r7, #16]
    26b4:	4413      	add	r3, r2
    26b6:	781b      	ldrb	r3, [r3, #0]
    26b8:	700b      	strb	r3, [r1, #0]
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
    26ba:	4b2a      	ldr	r3, [pc, #168]	; (2764 <UARTSend+0x120>)
    26bc:	2200      	movs	r2, #0
    26be:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    26c0:	697b      	ldr	r3, [r7, #20]
    26c2:	3301      	adds	r3, #1
    26c4:	617b      	str	r3, [r7, #20]
			Length--;
    26c6:	687b      	ldr	r3, [r7, #4]
    26c8:	3b01      	subs	r3, #1
    26ca:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
		while (Length != 0) {
    26cc:	687b      	ldr	r3, [r7, #4]
    26ce:	2b00      	cmp	r3, #0
    26d0:	d1e5      	bne.n	269e <UARTSend+0x5a>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    26d2:	e03d      	b.n	2750 <UARTSend+0x10c>
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
    26d4:	68fb      	ldr	r3, [r7, #12]
    26d6:	2b02      	cmp	r3, #2
    26d8:	d11b      	bne.n	2712 <UARTSend+0xce>
		while (Length != 0) {
    26da:	e016      	b.n	270a <UARTSend+0xc6>
			/* THRE status, contain valid data */
			while (!(UART2TxEmpty & 0x01));
    26dc:	bf00      	nop
    26de:	4b23      	ldr	r3, [pc, #140]	; (276c <UARTSend+0x128>)
    26e0:	781b      	ldrb	r3, [r3, #0]
    26e2:	b2db      	uxtb	r3, r3
    26e4:	f003 0301 	and.w	r3, r3, #1
    26e8:	2b00      	cmp	r3, #0
    26ea:	d0f8      	beq.n	26de <UARTSend+0x9a>
			LPC_UART2->THR = BufferPtr[index];
    26ec:	4920      	ldr	r1, [pc, #128]	; (2770 <UARTSend+0x12c>)
    26ee:	697b      	ldr	r3, [r7, #20]
    26f0:	693a      	ldr	r2, [r7, #16]
    26f2:	4413      	add	r3, r2
    26f4:	781b      	ldrb	r3, [r3, #0]
    26f6:	700b      	strb	r3, [r1, #0]
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
    26f8:	4b1c      	ldr	r3, [pc, #112]	; (276c <UARTSend+0x128>)
    26fa:	2200      	movs	r2, #0
    26fc:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    26fe:	697b      	ldr	r3, [r7, #20]
    2700:	3301      	adds	r3, #1
    2702:	617b      	str	r3, [r7, #20]
			Length--;
    2704:	687b      	ldr	r3, [r7, #4]
    2706:	3b01      	subs	r3, #1
    2708:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
		while (Length != 0) {
    270a:	687b      	ldr	r3, [r7, #4]
    270c:	2b00      	cmp	r3, #0
    270e:	d1e5      	bne.n	26dc <UARTSend+0x98>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    2710:	e01e      	b.n	2750 <UARTSend+0x10c>
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
    2712:	68fb      	ldr	r3, [r7, #12]
    2714:	2b03      	cmp	r3, #3
    2716:	d11a      	bne.n	274e <UARTSend+0x10a>
		while (Length != 0) {
    2718:	e016      	b.n	2748 <UARTSend+0x104>
			/* THRE status, contain valid data */
			while (!(UART3TxEmpty & 0x01));
    271a:	bf00      	nop
    271c:	4b15      	ldr	r3, [pc, #84]	; (2774 <UARTSend+0x130>)
    271e:	781b      	ldrb	r3, [r3, #0]
    2720:	b2db      	uxtb	r3, r3
    2722:	f003 0301 	and.w	r3, r3, #1
    2726:	2b00      	cmp	r3, #0
    2728:	d0f8      	beq.n	271c <UARTSend+0xd8>
			LPC_UART3->THR = BufferPtr[index];
    272a:	4913      	ldr	r1, [pc, #76]	; (2778 <UARTSend+0x134>)
    272c:	697b      	ldr	r3, [r7, #20]
    272e:	693a      	ldr	r2, [r7, #16]
    2730:	4413      	add	r3, r2
    2732:	781b      	ldrb	r3, [r3, #0]
    2734:	700b      	strb	r3, [r1, #0]
			UART3TxEmpty = 0; /* not empty in the THR until it shifts out */
    2736:	4b0f      	ldr	r3, [pc, #60]	; (2774 <UARTSend+0x130>)
    2738:	2200      	movs	r2, #0
    273a:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    273c:	697b      	ldr	r3, [r7, #20]
    273e:	3301      	adds	r3, #1
    2740:	617b      	str	r3, [r7, #20]
			Length--;
    2742:	687b      	ldr	r3, [r7, #4]
    2744:	3b01      	subs	r3, #1
    2746:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
		while (Length != 0) {
    2748:	687b      	ldr	r3, [r7, #4]
    274a:	2b00      	cmp	r3, #0
    274c:	d1e5      	bne.n	271a <UARTSend+0xd6>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    274e:	bf00      	nop
}
    2750:	371c      	adds	r7, #28
    2752:	46bd      	mov	sp, r7
    2754:	f85d 7b04 	ldr.w	r7, [sp], #4
    2758:	4770      	bx	lr
    275a:	bf00      	nop
    275c:	10000020 	.word	0x10000020
    2760:	4000c000 	.word	0x4000c000
    2764:	10000021 	.word	0x10000021
    2768:	40010000 	.word	0x40010000
    276c:	10000023 	.word	0x10000023
    2770:	40098000 	.word	0x40098000
    2774:	10000022 	.word	0x10000022
    2778:	4009c000 	.word	0x4009c000

0000277c <ReadUart>:

uint16_t ReadUart( char* veri, uint8_t PortNum )
{
    277c:	b480      	push	{r7}
    277e:	b087      	sub	sp, #28
    2780:	af00      	add	r7, sp, #0
    2782:	6078      	str	r0, [r7, #4]
    2784:	460b      	mov	r3, r1
    2786:	70fb      	strb	r3, [r7, #3]
	char* veri_ptr = veri;
    2788:	687b      	ldr	r3, [r7, #4]
    278a:	617b      	str	r3, [r7, #20]
	uint16_t buff_count = 0;
    278c:	2300      	movs	r3, #0
    278e:	827b      	strh	r3, [r7, #18]
	if (PortNum == 0) {
    2790:	78fb      	ldrb	r3, [r7, #3]
    2792:	2b00      	cmp	r3, #0
    2794:	d122      	bne.n	27dc <ReadUart+0x60>
		if (UART0Count > 0) {
    2796:	4b4e      	ldr	r3, [pc, #312]	; (28d0 <ReadUart+0x154>)
    2798:	881b      	ldrh	r3, [r3, #0]
    279a:	b29b      	uxth	r3, r3
    279c:	2b00      	cmp	r3, #0
    279e:	d01d      	beq.n	27dc <ReadUart+0x60>
			while (buff_count < UART0Count) {
    27a0:	e00b      	b.n	27ba <ReadUart+0x3e>
				*veri_ptr = UART0Buffer[buff_count];
    27a2:	8a7b      	ldrh	r3, [r7, #18]
    27a4:	4a4b      	ldr	r2, [pc, #300]	; (28d4 <ReadUart+0x158>)
    27a6:	5cd3      	ldrb	r3, [r2, r3]
    27a8:	b2da      	uxtb	r2, r3
    27aa:	697b      	ldr	r3, [r7, #20]
    27ac:	701a      	strb	r2, [r3, #0]
				buff_count++;
    27ae:	8a7b      	ldrh	r3, [r7, #18]
    27b0:	3301      	adds	r3, #1
    27b2:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    27b4:	697b      	ldr	r3, [r7, #20]
    27b6:	3301      	adds	r3, #1
    27b8:	617b      	str	r3, [r7, #20]
{
	char* veri_ptr = veri;
	uint16_t buff_count = 0;
	if (PortNum == 0) {
		if (UART0Count > 0) {
			while (buff_count < UART0Count) {
    27ba:	4b45      	ldr	r3, [pc, #276]	; (28d0 <ReadUart+0x154>)
    27bc:	881b      	ldrh	r3, [r3, #0]
    27be:	b29b      	uxth	r3, r3
    27c0:	8a7a      	ldrh	r2, [r7, #18]
    27c2:	429a      	cmp	r2, r3
    27c4:	d3ed      	bcc.n	27a2 <ReadUart+0x26>
				*veri_ptr = UART0Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    27c6:	697b      	ldr	r3, [r7, #20]
    27c8:	2200      	movs	r2, #0
    27ca:	701a      	strb	r2, [r3, #0]
			uint16_t len = UART0Count;
    27cc:	4b40      	ldr	r3, [pc, #256]	; (28d0 <ReadUart+0x154>)
    27ce:	881b      	ldrh	r3, [r3, #0]
    27d0:	823b      	strh	r3, [r7, #16]
			UART0Count = 0;
    27d2:	4b3f      	ldr	r3, [pc, #252]	; (28d0 <ReadUart+0x154>)
    27d4:	2200      	movs	r2, #0
    27d6:	801a      	strh	r2, [r3, #0]
			return ( len );
    27d8:	8a3b      	ldrh	r3, [r7, #16]
    27da:	e073      	b.n	28c4 <ReadUart+0x148>
		}
	}
	if (PortNum == 1) {
    27dc:	78fb      	ldrb	r3, [r7, #3]
    27de:	2b01      	cmp	r3, #1
    27e0:	d124      	bne.n	282c <ReadUart+0xb0>



		if (UART1Count > 0) {
    27e2:	4b3d      	ldr	r3, [pc, #244]	; (28d8 <ReadUart+0x15c>)
    27e4:	881b      	ldrh	r3, [r3, #0]
    27e6:	b29b      	uxth	r3, r3
    27e8:	2b00      	cmp	r3, #0
    27ea:	d06a      	beq.n	28c2 <ReadUart+0x146>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    27ec:	b672      	cpsid	i

			__disable_irq();

			while (buff_count < UART1Count) {
    27ee:	e00b      	b.n	2808 <ReadUart+0x8c>
				*veri_ptr = UART1Buffer[buff_count];
    27f0:	8a7b      	ldrh	r3, [r7, #18]
    27f2:	4a3a      	ldr	r2, [pc, #232]	; (28dc <ReadUart+0x160>)
    27f4:	5cd3      	ldrb	r3, [r2, r3]
    27f6:	b2da      	uxtb	r2, r3
    27f8:	697b      	ldr	r3, [r7, #20]
    27fa:	701a      	strb	r2, [r3, #0]
				buff_count++;
    27fc:	8a7b      	ldrh	r3, [r7, #18]
    27fe:	3301      	adds	r3, #1
    2800:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    2802:	697b      	ldr	r3, [r7, #20]
    2804:	3301      	adds	r3, #1
    2806:	617b      	str	r3, [r7, #20]

		if (UART1Count > 0) {

			__disable_irq();

			while (buff_count < UART1Count) {
    2808:	4b33      	ldr	r3, [pc, #204]	; (28d8 <ReadUart+0x15c>)
    280a:	881b      	ldrh	r3, [r3, #0]
    280c:	b29b      	uxth	r3, r3
    280e:	8a7a      	ldrh	r2, [r7, #18]
    2810:	429a      	cmp	r2, r3
    2812:	d3ed      	bcc.n	27f0 <ReadUart+0x74>
				*veri_ptr = UART1Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    2814:	697b      	ldr	r3, [r7, #20]
    2816:	2200      	movs	r2, #0
    2818:	701a      	strb	r2, [r3, #0]
			uint16_t len = UART1Count;
    281a:	4b2f      	ldr	r3, [pc, #188]	; (28d8 <ReadUart+0x15c>)
    281c:	881b      	ldrh	r3, [r3, #0]
    281e:	81fb      	strh	r3, [r7, #14]
			UART1Count = 0;
    2820:	4b2d      	ldr	r3, [pc, #180]	; (28d8 <ReadUart+0x15c>)
    2822:	2200      	movs	r2, #0
    2824:	801a      	strh	r2, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2826:	b662      	cpsie	i

			__enable_irq();
			return ( len );
    2828:	89fb      	ldrh	r3, [r7, #14]
    282a:	e04b      	b.n	28c4 <ReadUart+0x148>
		}
	}//GPS Port
	else if (PortNum == 2) {
    282c:	78fb      	ldrb	r3, [r7, #3]
    282e:	2b02      	cmp	r3, #2
    2830:	d11f      	bne.n	2872 <ReadUart+0xf6>
		if (UART2Count > 0) {
    2832:	4b2b      	ldr	r3, [pc, #172]	; (28e0 <ReadUart+0x164>)
    2834:	881b      	ldrh	r3, [r3, #0]
    2836:	b29b      	uxth	r3, r3
    2838:	2b00      	cmp	r3, #0
    283a:	d042      	beq.n	28c2 <ReadUart+0x146>
			while (buff_count < UART2Count) {
    283c:	e00b      	b.n	2856 <ReadUart+0xda>
				*veri_ptr = UART2Buffer[buff_count];
    283e:	8a7b      	ldrh	r3, [r7, #18]
    2840:	4a28      	ldr	r2, [pc, #160]	; (28e4 <ReadUart+0x168>)
    2842:	5cd3      	ldrb	r3, [r2, r3]
    2844:	b2da      	uxtb	r2, r3
    2846:	697b      	ldr	r3, [r7, #20]
    2848:	701a      	strb	r2, [r3, #0]
				buff_count++;
    284a:	8a7b      	ldrh	r3, [r7, #18]
    284c:	3301      	adds	r3, #1
    284e:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    2850:	697b      	ldr	r3, [r7, #20]
    2852:	3301      	adds	r3, #1
    2854:	617b      	str	r3, [r7, #20]
			return ( len );
		}
	}//GPS Port
	else if (PortNum == 2) {
		if (UART2Count > 0) {
			while (buff_count < UART2Count) {
    2856:	4b22      	ldr	r3, [pc, #136]	; (28e0 <ReadUart+0x164>)
    2858:	881b      	ldrh	r3, [r3, #0]
    285a:	b29b      	uxth	r3, r3
    285c:	8a7a      	ldrh	r2, [r7, #18]
    285e:	429a      	cmp	r2, r3
    2860:	d3ed      	bcc.n	283e <ReadUart+0xc2>
				*veri_ptr = UART2Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    2862:	697b      	ldr	r3, [r7, #20]
    2864:	2200      	movs	r2, #0
    2866:	701a      	strb	r2, [r3, #0]
			UART2Count = 0;
    2868:	4b1d      	ldr	r3, [pc, #116]	; (28e0 <ReadUart+0x164>)
    286a:	2200      	movs	r2, #0
    286c:	801a      	strh	r2, [r3, #0]
			return buff_count;
    286e:	8a7b      	ldrh	r3, [r7, #18]
    2870:	e028      	b.n	28c4 <ReadUart+0x148>
		}
	} else if (PortNum == 3) {
    2872:	78fb      	ldrb	r3, [r7, #3]
    2874:	2b03      	cmp	r3, #3
    2876:	d124      	bne.n	28c2 <ReadUart+0x146>
		if (UART3Count > 0) {
    2878:	4b1b      	ldr	r3, [pc, #108]	; (28e8 <ReadUart+0x16c>)
    287a:	881b      	ldrh	r3, [r3, #0]
    287c:	b29b      	uxth	r3, r3
    287e:	2b00      	cmp	r3, #0
    2880:	d01f      	beq.n	28c2 <ReadUart+0x146>
			while (buff_count < UART3Count) {
    2882:	e00b      	b.n	289c <ReadUart+0x120>
				*veri_ptr = UART3Buffer[buff_count];
    2884:	8a7b      	ldrh	r3, [r7, #18]
    2886:	4a19      	ldr	r2, [pc, #100]	; (28ec <ReadUart+0x170>)
    2888:	5cd3      	ldrb	r3, [r2, r3]
    288a:	b2da      	uxtb	r2, r3
    288c:	697b      	ldr	r3, [r7, #20]
    288e:	701a      	strb	r2, [r3, #0]
				buff_count++;
    2890:	8a7b      	ldrh	r3, [r7, #18]
    2892:	3301      	adds	r3, #1
    2894:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    2896:	697b      	ldr	r3, [r7, #20]
    2898:	3301      	adds	r3, #1
    289a:	617b      	str	r3, [r7, #20]
			UART2Count = 0;
			return buff_count;
		}
	} else if (PortNum == 3) {
		if (UART3Count > 0) {
			while (buff_count < UART3Count) {
    289c:	4b12      	ldr	r3, [pc, #72]	; (28e8 <ReadUart+0x16c>)
    289e:	881b      	ldrh	r3, [r3, #0]
    28a0:	b29b      	uxth	r3, r3
    28a2:	8a7a      	ldrh	r2, [r7, #18]
    28a4:	429a      	cmp	r2, r3
    28a6:	d3ed      	bcc.n	2884 <ReadUart+0x108>
				*veri_ptr = UART3Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    28a8:	697b      	ldr	r3, [r7, #20]
    28aa:	2200      	movs	r2, #0
    28ac:	701a      	strb	r2, [r3, #0]
			int len = UART3Count;
    28ae:	4b0e      	ldr	r3, [pc, #56]	; (28e8 <ReadUart+0x16c>)
    28b0:	881b      	ldrh	r3, [r3, #0]
    28b2:	b29b      	uxth	r3, r3
    28b4:	60bb      	str	r3, [r7, #8]
			UART3Count = 0;
    28b6:	4b0c      	ldr	r3, [pc, #48]	; (28e8 <ReadUart+0x16c>)
    28b8:	2200      	movs	r2, #0
    28ba:	801a      	strh	r2, [r3, #0]
			return len;
    28bc:	68bb      	ldr	r3, [r7, #8]
    28be:	b29b      	uxth	r3, r3
    28c0:	e000      	b.n	28c4 <ReadUart+0x148>
		}
	}
	return 0;
    28c2:	2300      	movs	r3, #0
}
    28c4:	4618      	mov	r0, r3
    28c6:	371c      	adds	r7, #28
    28c8:	46bd      	mov	sp, r7
    28ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    28ce:	4770      	bx	lr
    28d0:	1000003c 	.word	0x1000003c
    28d4:	10001640 	.word	0x10001640
    28d8:	1000003e 	.word	0x1000003e
    28dc:	100011e4 	.word	0x100011e4
    28e0:	10000040 	.word	0x10000040
    28e4:	10001848 	.word	0x10001848
    28e8:	10000042 	.word	0x10000042
    28ec:	10001748 	.word	0x10001748

000028f0 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    28f0:	b480      	push	{r7}
    28f2:	b083      	sub	sp, #12
    28f4:	af00      	add	r7, sp, #0
    28f6:	4603      	mov	r3, r0
    28f8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    28fa:	4908      	ldr	r1, [pc, #32]	; (291c <NVIC_EnableIRQ+0x2c>)
    28fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
    2900:	095b      	lsrs	r3, r3, #5
    2902:	79fa      	ldrb	r2, [r7, #7]
    2904:	f002 021f 	and.w	r2, r2, #31
    2908:	2001      	movs	r0, #1
    290a:	fa00 f202 	lsl.w	r2, r0, r2
    290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2912:	370c      	adds	r7, #12
    2914:	46bd      	mov	sp, r7
    2916:	f85d 7b04 	ldr.w	r7, [sp], #4
    291a:	4770      	bx	lr
    291c:	e000e100 	.word	0xe000e100

00002920 <WDT_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void WDT_IRQHandler(void) {
    2920:	b480      	push	{r7}
    2922:	af00      	add	r7, sp, #0
	LPC_WDT->WDMOD &= ~WDTOF; /* clear the time-out terrupt flag */
    2924:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    292c:	781b      	ldrb	r3, [r3, #0]
    292e:	b2db      	uxtb	r3, r3
    2930:	f023 0304 	bic.w	r3, r3, #4
    2934:	b2db      	uxtb	r3, r3
    2936:	7013      	strb	r3, [r2, #0]
	wdt_counter++;
    2938:	4b04      	ldr	r3, [pc, #16]	; (294c <WDT_IRQHandler+0x2c>)
    293a:	681b      	ldr	r3, [r3, #0]
    293c:	3301      	adds	r3, #1
    293e:	4a03      	ldr	r2, [pc, #12]	; (294c <WDT_IRQHandler+0x2c>)
    2940:	6013      	str	r3, [r2, #0]
	return;
    2942:	bf00      	nop
}
    2944:	46bd      	mov	sp, r7
    2946:	f85d 7b04 	ldr.w	r7, [sp], #4
    294a:	4770      	bx	lr
    294c:	10002044 	.word	0x10002044

00002950 <WDTInit>:
	LPC_WDT->WDMOD = 0x3;
	//WDTFeed();
	return (0);
}

uint32_t WDTInit(uint32_t feed) {
    2950:	b580      	push	{r7, lr}
    2952:	b082      	sub	sp, #8
    2954:	af00      	add	r7, sp, #0
    2956:	6078      	str	r0, [r7, #4]
	wdt_counter = 0;
    2958:	4b0c      	ldr	r3, [pc, #48]	; (298c <WDTInit+0x3c>)
    295a:	2200      	movs	r2, #0
    295c:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(WDT_IRQn);
    295e:	2000      	movs	r0, #0
    2960:	f7ff ffc6 	bl	28f0 <NVIC_EnableIRQ>
	LPC_WDT->WDCLKSEL = 0x1;//0x0 = IRC (Internal RC Oscillator) ,0x1 = APB Peripheral clock
    2964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2968:	2201      	movs	r2, #1
    296a:	611a      	str	r2, [r3, #16]
	//IRC is active even in Deep Sleep, and WDT Interrupt can wake up MCU in this mode.
	LPC_WDT->WDTC = feed; /* once WDEN is set, the WDT will start after feeding */
    296c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2970:	687b      	ldr	r3, [r7, #4]
    2972:	6053      	str	r3, [r2, #4]
	LPC_WDT->WDMOD = 0x3;
    2974:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2978:	2203      	movs	r2, #3
    297a:	701a      	strb	r2, [r3, #0]
	WDTFeed();
    297c:	f000 f808 	bl	2990 <WDTFeed>
	return (0);
    2980:	2300      	movs	r3, #0
}
    2982:	4618      	mov	r0, r3
    2984:	3708      	adds	r7, #8
    2986:	46bd      	mov	sp, r7
    2988:	bd80      	pop	{r7, pc}
    298a:	bf00      	nop
    298c:	10002044 	.word	0x10002044

00002990 <WDTFeed>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void WDTFeed(void) {
    2990:	b480      	push	{r7}
    2992:	af00      	add	r7, sp, #0
	LPC_WDT->WDFEED = 0xAA; /* Feeding sequence */
    2994:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2998:	22aa      	movs	r2, #170	; 0xaa
    299a:	721a      	strb	r2, [r3, #8]
	LPC_WDT->WDFEED = 0x55;
    299c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29a0:	2255      	movs	r2, #85	; 0x55
    29a2:	721a      	strb	r2, [r3, #8]
	return;
    29a4:	bf00      	nop
}
    29a6:	46bd      	mov	sp, r7
    29a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ac:	4770      	bx	lr
    29ae:	bf00      	nop

000029b0 <XModemReadByte>:
static char receiveBuf[RECEIVE_BUFF_LEN];
static uint16_t dataLen = 0;		// number of bytes in the buffer
static uint16_t dataIndex = 0;  // current byte to be processed

uint8_t XModemReadByte( char* pByte )
{
    29b0:	b580      	push	{r7, lr}
    29b2:	b08a      	sub	sp, #40	; 0x28
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
	char* pnewline;
	char asciiLen[10];
	unsigned int len, i;
	unsigned dataoffset;

	if (dataIndex >= dataLen) {
    29b8:	4b47      	ldr	r3, [pc, #284]	; (2ad8 <XModemReadByte+0x128>)
    29ba:	881a      	ldrh	r2, [r3, #0]
    29bc:	4b47      	ldr	r3, [pc, #284]	; (2adc <XModemReadByte+0x12c>)
    29be:	881b      	ldrh	r3, [r3, #0]
    29c0:	429a      	cmp	r2, r3
    29c2:	d378      	bcc.n	2ab6 <XModemReadByte+0x106>
		// all buffer consumed read more from TCP connection
		dataLen = GSM_TCP_Recv( receiveBuf, RECEIVE_BUFF_LEN );
    29c4:	4846      	ldr	r0, [pc, #280]	; (2ae0 <XModemReadByte+0x130>)
    29c6:	f240 414c 	movw	r1, #1100	; 0x44c
    29ca:	f7fd fcd7 	bl	37c <GSM_TCP_Recv>
    29ce:	4603      	mov	r3, r0
    29d0:	b29a      	uxth	r2, r3
    29d2:	4b42      	ldr	r3, [pc, #264]	; (2adc <XModemReadByte+0x12c>)
    29d4:	801a      	strh	r2, [r3, #0]
		receiveBuf[dataLen] = '\0';
    29d6:	4b41      	ldr	r3, [pc, #260]	; (2adc <XModemReadByte+0x12c>)
    29d8:	881b      	ldrh	r3, [r3, #0]
    29da:	461a      	mov	r2, r3
    29dc:	4b40      	ldr	r3, [pc, #256]	; (2ae0 <XModemReadByte+0x130>)
    29de:	2100      	movs	r1, #0
    29e0:	5499      	strb	r1, [r3, r2]

		// find the length of the message between
		// ",TCP," and "\r\n"
		pdata = strstr( receiveBuf, "IPD" );
    29e2:	483f      	ldr	r0, [pc, #252]	; (2ae0 <XModemReadByte+0x130>)
    29e4:	493f      	ldr	r1, [pc, #252]	; (2ae4 <XModemReadByte+0x134>)
    29e6:	f002 f8c4 	bl	4b72 <strstr>
    29ea:	6278      	str	r0, [r7, #36]	; 0x24
		if (pdata == NULL)
    29ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    29ee:	2b00      	cmp	r3, #0
    29f0:	d115      	bne.n	2a1e <XModemReadByte+0x6e>
		{
			pdata = strstr( receiveBuf, ",TCP," );
    29f2:	483b      	ldr	r0, [pc, #236]	; (2ae0 <XModemReadByte+0x130>)
    29f4:	493c      	ldr	r1, [pc, #240]	; (2ae8 <XModemReadByte+0x138>)
    29f6:	f002 f8bc 	bl	4b72 <strstr>
    29fa:	6278      	str	r0, [r7, #36]	; 0x24
			if (pdata == NULL) {
    29fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    29fe:	2b00      	cmp	r3, #0
    2a00:	d101      	bne.n	2a06 <XModemReadByte+0x56>
				return (0);
    2a02:	2300      	movs	r3, #0
    2a04:	e063      	b.n	2ace <XModemReadByte+0x11e>
			}

			pnewline = strstr(pdata, "\r\n");
    2a06:	6a78      	ldr	r0, [r7, #36]	; 0x24
    2a08:	4938      	ldr	r1, [pc, #224]	; (2aec <XModemReadByte+0x13c>)
    2a0a:	f002 f8b2 	bl	4b72 <strstr>
    2a0e:	6238      	str	r0, [r7, #32]
			dataoffset = 2;
    2a10:	2302      	movs	r3, #2
    2a12:	61bb      	str	r3, [r7, #24]
			if (pnewline == NULL) {
    2a14:	6a3b      	ldr	r3, [r7, #32]
    2a16:	2b00      	cmp	r3, #0
    2a18:	d10d      	bne.n	2a36 <XModemReadByte+0x86>
				return (0);
    2a1a:	2300      	movs	r3, #0
    2a1c:	e057      	b.n	2ace <XModemReadByte+0x11e>
			}

		} else
		{
			pnewline = strstr( pdata, "TCP:" );
    2a1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    2a20:	4933      	ldr	r1, [pc, #204]	; (2af0 <XModemReadByte+0x140>)
    2a22:	f002 f8a6 	bl	4b72 <strstr>
    2a26:	6238      	str	r0, [r7, #32]
			if (pnewline == NULL) {
    2a28:	6a3b      	ldr	r3, [r7, #32]
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	d101      	bne.n	2a32 <XModemReadByte+0x82>
				return (0);
    2a2e:	2300      	movs	r3, #0
    2a30:	e04d      	b.n	2ace <XModemReadByte+0x11e>
			}
			dataoffset = 4;
    2a32:	2304      	movs	r3, #4
    2a34:	61bb      	str	r3, [r7, #24]
		}

		strncpy( asciiLen, pdata + 3, pnewline - pdata );
    2a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a38:	1cd9      	adds	r1, r3, #3
    2a3a:	6a3a      	ldr	r2, [r7, #32]
    2a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a3e:	1ad3      	subs	r3, r2, r3
    2a40:	461a      	mov	r2, r3
    2a42:	f107 0308 	add.w	r3, r7, #8
    2a46:	4618      	mov	r0, r3
    2a48:	f002 f867 	bl	4b1a <strncpy>

		asciiLen[pnewline - pdata] = '\0';
    2a4c:	6a3a      	ldr	r2, [r7, #32]
    2a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a50:	1ad3      	subs	r3, r2, r3
    2a52:	f107 0228 	add.w	r2, r7, #40	; 0x28
    2a56:	4413      	add	r3, r2
    2a58:	2200      	movs	r2, #0
    2a5a:	f803 2c20 	strb.w	r2, [r3, #-32]

		len = atoi(asciiLen);
    2a5e:	f107 0308 	add.w	r3, r7, #8
    2a62:	4618      	mov	r0, r3
    2a64:	f001 ffda 	bl	4a1c <atoi>
    2a68:	4603      	mov	r3, r0
    2a6a:	617b      	str	r3, [r7, #20]

		for (i = 0; i < len; i++) {
    2a6c:	2300      	movs	r3, #0
    2a6e:	61fb      	str	r3, [r7, #28]
    2a70:	e00d      	b.n	2a8e <XModemReadByte+0xde>
			receiveBuf[i] = *(pnewline + dataoffset + i);
    2a72:	69ba      	ldr	r2, [r7, #24]
    2a74:	69fb      	ldr	r3, [r7, #28]
    2a76:	4413      	add	r3, r2
    2a78:	6a3a      	ldr	r2, [r7, #32]
    2a7a:	4413      	add	r3, r2
    2a7c:	7819      	ldrb	r1, [r3, #0]
    2a7e:	4a18      	ldr	r2, [pc, #96]	; (2ae0 <XModemReadByte+0x130>)
    2a80:	69fb      	ldr	r3, [r7, #28]
    2a82:	4413      	add	r3, r2
    2a84:	460a      	mov	r2, r1
    2a86:	701a      	strb	r2, [r3, #0]

		asciiLen[pnewline - pdata] = '\0';

		len = atoi(asciiLen);

		for (i = 0; i < len; i++) {
    2a88:	69fb      	ldr	r3, [r7, #28]
    2a8a:	3301      	adds	r3, #1
    2a8c:	61fb      	str	r3, [r7, #28]
    2a8e:	69fa      	ldr	r2, [r7, #28]
    2a90:	697b      	ldr	r3, [r7, #20]
    2a92:	429a      	cmp	r2, r3
    2a94:	d3ed      	bcc.n	2a72 <XModemReadByte+0xc2>
			receiveBuf[i] = *(pnewline + dataoffset + i);
		}
		dataLen   = len;
    2a96:	697b      	ldr	r3, [r7, #20]
    2a98:	b29a      	uxth	r2, r3
    2a9a:	4b10      	ldr	r3, [pc, #64]	; (2adc <XModemReadByte+0x12c>)
    2a9c:	801a      	strh	r2, [r3, #0]
		dataIndex = 0;
    2a9e:	4b0e      	ldr	r3, [pc, #56]	; (2ad8 <XModemReadByte+0x128>)
    2aa0:	2200      	movs	r2, #0
    2aa2:	801a      	strh	r2, [r3, #0]
		if( dataLen <= 0 ) {
    2aa4:	4b0d      	ldr	r3, [pc, #52]	; (2adc <XModemReadByte+0x12c>)
    2aa6:	881b      	ldrh	r3, [r3, #0]
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d104      	bne.n	2ab6 <XModemReadByte+0x106>
			dataLen = 0;
    2aac:	4b0b      	ldr	r3, [pc, #44]	; (2adc <XModemReadByte+0x12c>)
    2aae:	2200      	movs	r2, #0
    2ab0:	801a      	strh	r2, [r3, #0]
			return (0);  // no data available
    2ab2:	2300      	movs	r3, #0
    2ab4:	e00b      	b.n	2ace <XModemReadByte+0x11e>
		}
	}

	(*pByte) = receiveBuf[dataIndex++];
    2ab6:	4b08      	ldr	r3, [pc, #32]	; (2ad8 <XModemReadByte+0x128>)
    2ab8:	881b      	ldrh	r3, [r3, #0]
    2aba:	1c5a      	adds	r2, r3, #1
    2abc:	b291      	uxth	r1, r2
    2abe:	4a06      	ldr	r2, [pc, #24]	; (2ad8 <XModemReadByte+0x128>)
    2ac0:	8011      	strh	r1, [r2, #0]
    2ac2:	461a      	mov	r2, r3
    2ac4:	4b06      	ldr	r3, [pc, #24]	; (2ae0 <XModemReadByte+0x130>)
    2ac6:	5c9a      	ldrb	r2, [r3, r2]
    2ac8:	687b      	ldr	r3, [r7, #4]
    2aca:	701a      	strb	r2, [r3, #0]
	return (1);
    2acc:	2301      	movs	r3, #1
}
    2ace:	4618      	mov	r0, r3
    2ad0:	3728      	adds	r7, #40	; 0x28
    2ad2:	46bd      	mov	sp, r7
    2ad4:	bd80      	pop	{r7, pc}
    2ad6:	bf00      	nop
    2ad8:	10000892 	.word	0x10000892
    2adc:	10000890 	.word	0x10000890
    2ae0:	10000444 	.word	0x10000444
    2ae4:	00006244 	.word	0x00006244
    2ae8:	00006248 	.word	0x00006248
    2aec:	00006250 	.word	0x00006250
    2af0:	00006254 	.word	0x00006254

00002af4 <XModem1K_Client>:


int XModem1K_Client(
		uint32_t (*pu32Xmodem1kRxPacketCallback)(uint8_t *pu8Data,
				uint16_t u16Len)) {
    2af4:	b580      	push	{r7, lr}
    2af6:	b0c0      	sub	sp, #256	; 0x100
    2af8:	af00      	add	r7, sp, #0
    2afa:	6078      	str	r0, [r7, #4]
	uint32_t u32InProgress = 1;
    2afc:	2301      	movs	r3, #1
    2afe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	uint32_t u32State = STATE_IDLE;
    2b02:	2300      	movs	r3, #0
    2b04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	uint32_t u32ByteCount;
	uint32_t u32PktLen;
	uint16_t u16CRC, calculatedCRC;
	uint16_t frameNum = 0;
    2b08:	2300      	movs	r3, #0
    2b0a:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0

	uint32_t trials;

	/* Prepare UART for RX/TX */

	while (u32InProgress) {
    2b0e:	e21a      	b.n	2f46 <XModem1K_Client+0x452>
		WDTFeed();
    2b10:	f7ff ff3e 	bl	2990 <WDTFeed>
		switch (u32State) {
    2b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
    2b18:	2b01      	cmp	r3, #1
    2b1a:	d01e      	beq.n	2b5a <XModem1K_Client+0x66>
    2b1c:	2b01      	cmp	r3, #1
    2b1e:	d302      	bcc.n	2b26 <XModem1K_Client+0x32>
    2b20:	2b02      	cmp	r3, #2
    2b22:	d061      	beq.n	2be8 <XModem1K_Client+0xf4>
    2b24:	e20e      	b.n	2f44 <XModem1K_Client+0x450>
		case STATE_IDLE: {

			/* Send command to server indicating we are ready to receive */
			char u8Cmd = POLL;
    2b26:	2343      	movs	r3, #67	; 0x43
    2b28:	74fb      	strb	r3, [r7, #19]

			TraceNL( "Start downloading" );
    2b2a:	48d6      	ldr	r0, [pc, #856]	; (2e84 <XModem1K_Client+0x390>)
    2b2c:	f7ff f8a6 	bl	1c7c <TraceNL>
			TracePutcHex( u8Cmd );
    2b30:	7cfb      	ldrb	r3, [r7, #19]
    2b32:	4618      	mov	r0, r3
    2b34:	f7ff f8ba 	bl	1cac <TracePutcHex>
			GSM_TCP_Send(&u8Cmd, 1);
    2b38:	f107 0313 	add.w	r3, r7, #19
    2b3c:	4618      	mov	r0, r3
    2b3e:	2101      	movs	r1, #1
    2b40:	f7fd fdd6 	bl	6f0 <GSM_TCP_Send>

			/* Start timeout to send another poll if we do not get a response */
			vTimerStart(POLL_PERIOD_ms);
    2b44:	f644 6020 	movw	r0, #20000	; 0x4e20
    2b48:	f000 fa12 	bl	2f70 <vTimerStart>
			trials   = DOWNLOAD_MAX_TRIALS;
    2b4c:	2303      	movs	r3, #3
    2b4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

			u32State = STATE_CONNECTING;
    2b52:	2301      	movs	r3, #1
    2b54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		}
			break;
    2b58:	e1f5      	b.n	2f46 <XModem1K_Client+0x452>

		case STATE_CONNECTING: {
			char u8Data;

			/* Check if a character has been received on the UART */
			if( XModemReadByte( &u8Data ) )
    2b5a:	f107 0312 	add.w	r3, r7, #18
    2b5e:	4618      	mov	r0, r3
    2b60:	f7ff ff26 	bl	29b0 <XModemReadByte>
    2b64:	4603      	mov	r3, r0
    2b66:	2b00      	cmp	r3, #0
    2b68:	d011      	beq.n	2b8e <XModem1K_Client+0x9a>
			{
				/* Expecting a start of packet character */
				if( u8Data == SOH )
    2b6a:	7cbb      	ldrb	r3, [r7, #18]
    2b6c:	2b01      	cmp	r3, #1
    2b6e:	d13a      	bne.n	2be6 <XModem1K_Client+0xf2>
				{
					/* SOH indicates short pay load packet is being transmitted */
					u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    2b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2b74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
					u32ByteCount = 1;
    2b78:	2301      	movs	r3, #1
    2b7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

					/* Start packet timeout */
					vTimerStart( PACKET_TIMEOUT_PERIOD_ms);
    2b7e:	f644 6020 	movw	r0, #20000	; 0x4e20
    2b82:	f000 f9f5 	bl	2f70 <vTimerStart>

					/* Wait for a further characters */
					u32State = STATE_RECEIVING;
    2b86:	2302      	movs	r3, #2
    2b88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    2b8c:	e1db      	b.n	2f46 <XModem1K_Client+0x452>
				}
			} else /* No data received yet, check poll command timeout */
			{
				if ((LPC_TIM0->TCR & 0x01) == 0) {
    2b8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2b92:	685b      	ldr	r3, [r3, #4]
    2b94:	f003 0301 	and.w	r3, r3, #1
    2b98:	2b00      	cmp	r3, #0
    2b9a:	f040 81d4 	bne.w	2f46 <XModem1K_Client+0x452>
					/* Timeout expired following poll command transmission so try again.. */
					char u8Cmd = POLL;
    2b9e:	2343      	movs	r3, #67	; 0x43
    2ba0:	747b      	strb	r3, [r7, #17]

					if (trials-- > 0) {
    2ba2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    2ba6:	1e5a      	subs	r2, r3, #1
    2ba8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
    2bac:	2b00      	cmp	r3, #0
    2bae:	d014      	beq.n	2bda <XModem1K_Client+0xe6>
						TraceNL("Connecting state timer expired sending  new request  ");
    2bb0:	48b5      	ldr	r0, [pc, #724]	; (2e88 <XModem1K_Client+0x394>)
    2bb2:	f7ff f863 	bl	1c7c <TraceNL>
						TracePutcHex( u8Cmd );
    2bb6:	7c7b      	ldrb	r3, [r7, #17]
    2bb8:	4618      	mov	r0, r3
    2bba:	f7ff f877 	bl	1cac <TracePutcHex>
						TraceNL("\r\n");
    2bbe:	48b3      	ldr	r0, [pc, #716]	; (2e8c <XModem1K_Client+0x398>)
    2bc0:	f7ff f85c 	bl	1c7c <TraceNL>
						GSM_TCP_Send(&u8Cmd, 1);
    2bc4:	f107 0311 	add.w	r3, r7, #17
    2bc8:	4618      	mov	r0, r3
    2bca:	2101      	movs	r1, #1
    2bcc:	f7fd fd90 	bl	6f0 <GSM_TCP_Send>

					/*
					 * Restart timeout to send another poll
					 * if we do not get a response
					 */
					vTimerStart( POLL_PERIOD_ms);
    2bd0:	f644 6020 	movw	r0, #20000	; 0x4e20
    2bd4:	f000 f9cc 	bl	2f70 <vTimerStart>
    2bd8:	e005      	b.n	2be6 <XModem1K_Client+0xf2>
						TraceNL("Connecting state timer expired sending  new request  ");
						TracePutcHex( u8Cmd );
						TraceNL("\r\n");
						GSM_TCP_Send(&u8Cmd, 1);
					} else {
						TraceNL("No reply give up upgrading");
    2bda:	48ad      	ldr	r0, [pc, #692]	; (2e90 <XModem1K_Client+0x39c>)
    2bdc:	f7ff f84e 	bl	1c7c <TraceNL>
						return ( DOWNLOAD_ERR_TIMEOUT );
    2be0:	f04f 33ff 	mov.w	r3, #4294967295
    2be4:	e1b6      	b.n	2f54 <XModem1K_Client+0x460>
					 */
					vTimerStart( POLL_PERIOD_ms);
				}
			}
		}
			break;
    2be6:	e1ae      	b.n	2f46 <XModem1K_Client+0x452>

		case STATE_RECEIVING: {
			char u8Data;

			/* Check if a character has been received on the UART */
			if( XModemReadByte( &u8Data ) )
    2be8:	f107 0310 	add.w	r3, r7, #16
    2bec:	4618      	mov	r0, r3
    2bee:	f7ff fedf 	bl	29b0 <XModemReadByte>
    2bf2:	4603      	mov	r3, r0
    2bf4:	2b00      	cmp	r3, #0
    2bf6:	f000 817d 	beq.w	2ef4 <XModem1K_Client+0x400>
			{
				// TracePutcHex( u8Data );
				/* Position of received byte determines action we take */
				if( u32ByteCount == 0 )
    2bfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
    2bfe:	2b00      	cmp	r3, #0
    2c00:	f040 80a9 	bne.w	2d56 <XModem1K_Client+0x262>
				{
					/* Expecting a start of packet character */
					if( u8Data == SOH ) {
    2c04:	7c3b      	ldrb	r3, [r7, #16]
    2c06:	2b01      	cmp	r3, #1
    2c08:	d10b      	bne.n	2c22 <XModem1K_Client+0x12e>
						/* SOH indicates short pay load packet is being transmitted */
						u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    2c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2c0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
						u32ByteCount = 1;
    2c12:	2301      	movs	r3, #1
    2c14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

						/* Start packet timeout */
						vTimerStart(PACKET_TIMEOUT_PERIOD_ms);
    2c18:	f644 6020 	movw	r0, #20000	; 0x4e20
    2c1c:	f000 f9a8 	bl	2f70 <vTimerStart>
    2c20:	e18f      	b.n	2f42 <XModem1K_Client+0x44e>
					} else if (u8Data == EOT) {
    2c22:	7c3b      	ldrb	r3, [r7, #16]
    2c24:	2b04      	cmp	r3, #4
    2c26:	f040 818c 	bne.w	2f42 <XModem1K_Client+0x44e>
						TraceNL("Received EOT ");
    2c2a:	489a      	ldr	r0, [pc, #616]	; (2e94 <XModem1K_Client+0x3a0>)
    2c2c:	f7ff f826 	bl	1c7c <TraceNL>
						/* Server indicating transmission is complete */
						TraceNL("Closing TCP connection ");
    2c30:	4899      	ldr	r0, [pc, #612]	; (2e98 <XModem1K_Client+0x3a4>)
    2c32:	f7ff f823 	bl	1c7c <TraceNL>
						GSM_TCP_Close( );
    2c36:	f7fd ff63 	bl	b00 <GSM_TCP_Close>

						u32InProgress = 0;
    2c3a:	2300      	movs	r3, #0
    2c3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

						sprintf( buffer, "byte count: %d, packet len %d\r\n", u32ByteCount, u32PktLen);
    2c40:	f107 0314 	add.w	r3, r7, #20
    2c44:	4618      	mov	r0, r3
    2c46:	4995      	ldr	r1, [pc, #596]	; (2e9c <XModem1K_Client+0x3a8>)
    2c48:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
    2c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    2c50:	f000 fad6 	bl	3200 <sprintf>
						Trace( buffer );
    2c54:	f107 0314 	add.w	r3, r7, #20
    2c58:	4618      	mov	r0, r3
    2c5a:	f7fe ffff 	bl	1c5c <Trace>

						/* Call the call back function to indicated a complete transmission */
						/* If length == 0, then EOT */
						pu32Xmodem1kRxPacketCallback( (uint8_t *)SECONDARY_IMAGE_LOAD_ADDR, 0);
    2c5e:	687b      	ldr	r3, [r7, #4]
    2c60:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2c64:	2100      	movs	r1, #0
    2c66:	4798      	blx	r3

						uint32_t imageSize;
						uint32_t imageCRC;

						XModemReadByte( &u8Data );
    2c68:	f107 0310 	add.w	r3, r7, #16
    2c6c:	4618      	mov	r0, r3
    2c6e:	f7ff fe9f 	bl	29b0 <XModemReadByte>
						imageSize = u8Data << 24 & 0xFF000000;
    2c72:	7c3b      	ldrb	r3, [r7, #16]
    2c74:	061b      	lsls	r3, r3, #24
    2c76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

						XModemReadByte( &u8Data );
    2c7a:	f107 0310 	add.w	r3, r7, #16
    2c7e:	4618      	mov	r0, r3
    2c80:	f7ff fe96 	bl	29b0 <XModemReadByte>
						imageSize |= u8Data << 16 & 0x00FF0000;
    2c84:	7c3b      	ldrb	r3, [r7, #16]
    2c86:	041b      	lsls	r3, r3, #16
    2c88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    2c8c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    2c90:	4313      	orrs	r3, r2
    2c92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

						XModemReadByte( &u8Data );
    2c96:	f107 0310 	add.w	r3, r7, #16
    2c9a:	4618      	mov	r0, r3
    2c9c:	f7ff fe88 	bl	29b0 <XModemReadByte>
						imageSize |= u8Data << 8 & 0x0000FF00;
    2ca0:	7c3b      	ldrb	r3, [r7, #16]
    2ca2:	021b      	lsls	r3, r3, #8
    2ca4:	b29b      	uxth	r3, r3
    2ca6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    2caa:	4313      	orrs	r3, r2
    2cac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

						XModemReadByte( &u8Data );
    2cb0:	f107 0310 	add.w	r3, r7, #16
    2cb4:	4618      	mov	r0, r3
    2cb6:	f7ff fe7b 	bl	29b0 <XModemReadByte>
						imageSize |= u8Data << 0 & 0x000000FF;
    2cba:	7c3b      	ldrb	r3, [r7, #16]
    2cbc:	461a      	mov	r2, r3
    2cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    2cc2:	4313      	orrs	r3, r2
    2cc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

						// CRC
						XModemReadByte( &u8Data );
    2cc8:	f107 0310 	add.w	r3, r7, #16
    2ccc:	4618      	mov	r0, r3
    2cce:	f7ff fe6f 	bl	29b0 <XModemReadByte>
						imageCRC = u8Data << 24 & 0xFF000000;
    2cd2:	7c3b      	ldrb	r3, [r7, #16]
    2cd4:	061b      	lsls	r3, r3, #24
    2cd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

						XModemReadByte( &u8Data );
    2cda:	f107 0310 	add.w	r3, r7, #16
    2cde:	4618      	mov	r0, r3
    2ce0:	f7ff fe66 	bl	29b0 <XModemReadByte>
						imageCRC |= u8Data << 16 & 0x00FF0000;
    2ce4:	7c3b      	ldrb	r3, [r7, #16]
    2ce6:	041b      	lsls	r3, r3, #16
    2ce8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    2cec:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
    2cf0:	4313      	orrs	r3, r2
    2cf2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

						XModemReadByte( &u8Data );
    2cf6:	f107 0310 	add.w	r3, r7, #16
    2cfa:	4618      	mov	r0, r3
    2cfc:	f7ff fe58 	bl	29b0 <XModemReadByte>
						imageCRC |= u8Data << 8 & 0x0000FF00;
    2d00:	7c3b      	ldrb	r3, [r7, #16]
    2d02:	021b      	lsls	r3, r3, #8
    2d04:	b29b      	uxth	r3, r3
    2d06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
    2d0a:	4313      	orrs	r3, r2
    2d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

						XModemReadByte( &u8Data );
    2d10:	f107 0310 	add.w	r3, r7, #16
    2d14:	4618      	mov	r0, r3
    2d16:	f7ff fe4b 	bl	29b0 <XModemReadByte>
						imageCRC |= u8Data << 0 & 0x000000FF;
    2d1a:	7c3b      	ldrb	r3, [r7, #16]
    2d1c:	461a      	mov	r2, r3
    2d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    2d22:	4313      	orrs	r3, r2
    2d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

						sprintf( buffer, "file size: 0x%X, CRC: 0x%X\r\n", imageSize, imageCRC );
    2d28:	f107 0314 	add.w	r3, r7, #20
    2d2c:	4618      	mov	r0, r3
    2d2e:	495c      	ldr	r1, [pc, #368]	; (2ea0 <XModem1K_Client+0x3ac>)
    2d30:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    2d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    2d38:	f000 fa62 	bl	3200 <sprintf>
						Trace( buffer );
    2d3c:	f107 0314 	add.w	r3, r7, #20
    2d40:	4618      	mov	r0, r3
    2d42:	f7fe ff8b 	bl	1c5c <Trace>

						WriteImageSignature( imageSize, imageCRC );
    2d46:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
    2d4a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    2d4e:	f7fe fb9d 	bl	148c <WriteImageSignature>

						return ( 0 );
    2d52:	2300      	movs	r3, #0
    2d54:	e0fe      	b.n	2f54 <XModem1K_Client+0x460>

					} else {
						// Unexpected char ignore it
					}
				} else if (u32ByteCount == 1) {
    2d56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
    2d5a:	2b01      	cmp	r3, #1
    2d5c:	d108      	bne.n	2d70 <XModem1K_Client+0x27c>
					/* Byte 1 is the packet number - should be different from last one we received */
					frameNum = u8Data;
    2d5e:	7c3b      	ldrb	r3, [r7, #16]
    2d60:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
					u32ByteCount++;
    2d64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
    2d68:	3301      	adds	r3, #1
    2d6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    2d6e:	e0e8      	b.n	2f42 <XModem1K_Client+0x44e>
				} else if (u32ByteCount == 2) {
    2d70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
    2d74:	2b02      	cmp	r3, #2
    2d76:	d11f      	bne.n	2db8 <XModem1K_Client+0x2c4>
					/* Byte 2 is the packet number inverted - check for error with last byte */
					frameNum <<= 8;
    2d78:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
    2d7c:	021b      	lsls	r3, r3, #8
    2d7e:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
					frameNum |= u8Data;
    2d82:	7c3b      	ldrb	r3, [r7, #16]
    2d84:	b29a      	uxth	r2, r3
    2d86:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
    2d8a:	4313      	orrs	r3, r2
    2d8c:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
					sprintf( buffer, "frame number :  %d\r\n", frameNum );
    2d90:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
    2d94:	f107 0214 	add.w	r2, r7, #20
    2d98:	4610      	mov	r0, r2
    2d9a:	4942      	ldr	r1, [pc, #264]	; (2ea4 <XModem1K_Client+0x3b0>)
    2d9c:	461a      	mov	r2, r3
    2d9e:	f000 fa2f 	bl	3200 <sprintf>
				    TraceNL( buffer );
    2da2:	f107 0314 	add.w	r3, r7, #20
    2da6:	4618      	mov	r0, r3
    2da8:	f7fe ff68 	bl	1c7c <TraceNL>

					u32ByteCount++;
    2dac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
    2db0:	3301      	adds	r3, #1
    2db2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    2db6:	e0c4      	b.n	2f42 <XModem1K_Client+0x44e>
				} else if( ((u32ByteCount == (SHORT_PACKET_PAYLOAD_LEN+3)) &&
    2db8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
    2dbc:	f240 4203 	movw	r2, #1027	; 0x403
    2dc0:	4293      	cmp	r3, r2
    2dc2:	d10d      	bne.n	2de0 <XModem1K_Client+0x2ec>
    2dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    2dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2dcc:	d108      	bne.n	2de0 <XModem1K_Client+0x2ec>
						    (u32PktLen == SHORT_PACKET_PAYLOAD_LEN)) )
				{
					/* If pay load is short byte 131 is the MS byte of the packet CRC, if pay load
					 is long byte 1027 is the MS byte of the packet CRC. */
					u16CRC = u8Data;
    2dce:	7c3b      	ldrb	r3, [r7, #16]
    2dd0:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
					u32ByteCount++;
    2dd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
    2dd8:	3301      	adds	r3, #1
    2dda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    2dde:	e088      	b.n	2ef2 <XModem1K_Client+0x3fe>

				}
				else if( (u32ByteCount == (SHORT_PACKET_PAYLOAD_LEN+4)) &&
    2de0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
    2de4:	f240 4204 	movw	r2, #1028	; 0x404
    2de8:	4293      	cmp	r3, r2
    2dea:	d176      	bne.n	2eda <XModem1K_Client+0x3e6>
    2dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    2df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2df4:	d171      	bne.n	2eda <XModem1K_Client+0x3e6>
						 (u32PktLen == SHORT_PACKET_PAYLOAD_LEN) )
				{
					/* If pay load is short byte 132 is the LS byte of the packet CRC, if pay load
					 is long byte 1028 is the LS byte of the packet CRC. */
					u16CRC <<= 8;
    2df6:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
    2dfa:	021b      	lsls	r3, r3, #8
    2dfc:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
					u16CRC |= u8Data;
    2e00:	7c3b      	ldrb	r3, [r7, #16]
    2e02:	b29a      	uxth	r2, r3
    2e04:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
    2e08:	4313      	orrs	r3, r2
    2e0a:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2

					calculatedCRC = u16CRC_Calc16( &au8RxBuffer[0], u32PktLen );
    2e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    2e12:	4825      	ldr	r0, [pc, #148]	; (2ea8 <XModem1K_Client+0x3b4>)
    2e14:	4619      	mov	r1, r3
    2e16:	f7fd ff1b 	bl	c50 <u16CRC_Calc16>
    2e1a:	4603      	mov	r3, r0
    2e1c:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
					sprintf( buffer, "calculated CRC : 0x%X\r\n", calculatedCRC );
    2e20:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
    2e24:	f107 0214 	add.w	r2, r7, #20
    2e28:	4610      	mov	r0, r2
    2e2a:	4920      	ldr	r1, [pc, #128]	; (2eac <XModem1K_Client+0x3b8>)
    2e2c:	461a      	mov	r2, r3
    2e2e:	f000 f9e7 	bl	3200 <sprintf>
				    TraceNL( buffer );
    2e32:	f107 0314 	add.w	r3, r7, #20
    2e36:	4618      	mov	r0, r3
    2e38:	f7fe ff20 	bl	1c7c <TraceNL>

					/* Check the received CRC against the CRC we generate on the packet data */
					if( calculatedCRC == u16CRC )
    2e3c:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
    2e40:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
    2e44:	429a      	cmp	r2, r3
    2e46:	d139      	bne.n	2ebc <XModem1K_Client+0x3c8>
					{
						char u8Cmd;

						u8Cmd = ACK;
    2e48:	2306      	movs	r3, #6
    2e4a:	73fb      	strb	r3, [r7, #15]
						GSM_TCP_Send( &u8Cmd, 1 );
    2e4c:	f107 030f 	add.w	r3, r7, #15
    2e50:	4618      	mov	r0, r3
    2e52:	2101      	movs	r1, #1
    2e54:	f7fd fc4c 	bl	6f0 <GSM_TCP_Send>

						WDTFeed();
    2e58:	f7ff fd9a 	bl	2990 <WDTFeed>
						// write to flash
						pu32Xmodem1kRxPacketCallback( &au8RxBuffer[0], u32PktLen );
    2e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    2e60:	b29a      	uxth	r2, r3
    2e62:	687b      	ldr	r3, [r7, #4]
    2e64:	4810      	ldr	r0, [pc, #64]	; (2ea8 <XModem1K_Client+0x3b4>)
    2e66:	4611      	mov	r1, r2
    2e68:	4798      	blx	r3

						TraceNL("Received a frame ");
    2e6a:	4811      	ldr	r0, [pc, #68]	; (2eb0 <XModem1K_Client+0x3bc>)
    2e6c:	f7fe ff06 	bl	1c7c <TraceNL>
						TraceNL("Sending  ACK ");
    2e70:	4810      	ldr	r0, [pc, #64]	; (2eb4 <XModem1K_Client+0x3c0>)
    2e72:	f7fe ff03 	bl	1c7c <TraceNL>
						TraceNL("CRC matches \r\n");
    2e76:	4810      	ldr	r0, [pc, #64]	; (2eb8 <XModem1K_Client+0x3c4>)
    2e78:	f7fe ff00 	bl	1c7c <TraceNL>
						DelayMs( 100 );
    2e7c:	2064      	movs	r0, #100	; 0x64
    2e7e:	f7fe fed7 	bl	1c30 <DelayMs>
    2e82:	e026      	b.n	2ed2 <XModem1K_Client+0x3de>
    2e84:	0000625c 	.word	0x0000625c
    2e88:	00006270 	.word	0x00006270
    2e8c:	00006250 	.word	0x00006250
    2e90:	000062a8 	.word	0x000062a8
    2e94:	000062c4 	.word	0x000062c4
    2e98:	000062d4 	.word	0x000062d4
    2e9c:	000062ec 	.word	0x000062ec
    2ea0:	0000630c 	.word	0x0000630c
    2ea4:	0000632c 	.word	0x0000632c
    2ea8:	10000044 	.word	0x10000044
    2eac:	00006344 	.word	0x00006344
    2eb0:	0000635c 	.word	0x0000635c
    2eb4:	00006370 	.word	0x00006370
    2eb8:	00006380 	.word	0x00006380

					} else /* Error CRC calculated does not match that received */
					{
						/* Indicate problem to server - should result in packet being resent.. */
						char u8Cmd = NAK;
    2ebc:	2315      	movs	r3, #21
    2ebe:	73bb      	strb	r3, [r7, #14]
						TraceNL("CRC does not match  NAK ing");
    2ec0:	4827      	ldr	r0, [pc, #156]	; (2f60 <XModem1K_Client+0x46c>)
    2ec2:	f7fe fedb 	bl	1c7c <TraceNL>
						GSM_TCP_Send(&u8Cmd, 1);
    2ec6:	f107 030e 	add.w	r3, r7, #14
    2eca:	4618      	mov	r0, r3
    2ecc:	2101      	movs	r1, #1
    2ece:	f7fd fc0f 	bl	6f0 <GSM_TCP_Send>
					}
					u32ByteCount = 0;
    2ed2:	2300      	movs	r3, #0
    2ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    2ed8:	e00b      	b.n	2ef2 <XModem1K_Client+0x3fe>

				} else {
					/* Must be pay load data so store */
					au8RxBuffer[u32ByteCount - PACKET_HEADER_LEN] = u8Data;
    2eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
    2ede:	3b03      	subs	r3, #3
    2ee0:	7c39      	ldrb	r1, [r7, #16]
    2ee2:	4a20      	ldr	r2, [pc, #128]	; (2f64 <XModem1K_Client+0x470>)
    2ee4:	54d1      	strb	r1, [r2, r3]
					u32ByteCount++;
    2ee6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
    2eea:	3301      	adds	r3, #1
    2eec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    2ef0:	e027      	b.n	2f42 <XModem1K_Client+0x44e>
    2ef2:	e026      	b.n	2f42 <XModem1K_Client+0x44e>
				}
			}
			else
			{
				if( (LPC_TIM0->TCR & 0x01) == 0 )
    2ef4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2ef8:	685b      	ldr	r3, [r3, #4]
    2efa:	f003 0301 	and.w	r3, r3, #1
    2efe:	2b00      	cmp	r3, #0
    2f00:	d11f      	bne.n	2f42 <XModem1K_Client+0x44e>
				{
					/* Timeout expired no data received stop upgrade  */
					if (trials-- > 0)
    2f02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    2f06:	1e5a      	subs	r2, r3, #1
    2f08:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
    2f0c:	2b00      	cmp	r3, #0
    2f0e:	d012      	beq.n	2f36 <XModem1K_Client+0x442>
					{
						TraceNL("Time out in RECEIVING   ");
    2f10:	4815      	ldr	r0, [pc, #84]	; (2f68 <XModem1K_Client+0x474>)
    2f12:	f7fe feb3 	bl	1c7c <TraceNL>
						char u8Cmd = NAK;
    2f16:	2315      	movs	r3, #21
    2f18:	737b      	strb	r3, [r7, #13]
						GSM_TCP_Send(&u8Cmd, 1);
    2f1a:	f107 030d 	add.w	r3, r7, #13
    2f1e:	4618      	mov	r0, r3
    2f20:	2101      	movs	r1, #1
    2f22:	f7fd fbe5 	bl	6f0 <GSM_TCP_Send>

						u32ByteCount = 0;
    2f26:	2300      	movs	r3, #0
    2f28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
						vTimerStart( POLL_PERIOD_ms);
    2f2c:	f644 6020 	movw	r0, #20000	; 0x4e20
    2f30:	f000 f81e 	bl	2f70 <vTimerStart>
    2f34:	e005      	b.n	2f42 <XModem1K_Client+0x44e>
					} else {
						// no more trying giving up upgrading
						TraceNL("Download process failed giving up upgrading");
    2f36:	480d      	ldr	r0, [pc, #52]	; (2f6c <XModem1K_Client+0x478>)
    2f38:	f7fe fea0 	bl	1c7c <TraceNL>
						return ( DOWNLOAD_ERR_TIMEOUT );
    2f3c:	f04f 33ff 	mov.w	r3, #4294967295
    2f40:	e008      	b.n	2f54 <XModem1K_Client+0x460>
					}
				}
			}
		}
			break;
    2f42:	e000      	b.n	2f46 <XModem1K_Client+0x452>

		default:
			break;
    2f44:	bf00      	nop

	uint32_t trials;

	/* Prepare UART for RX/TX */

	while (u32InProgress) {
    2f46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2f4a:	2b00      	cmp	r3, #0
    2f4c:	f47f ade0 	bne.w	2b10 <XModem1K_Client+0x1c>

		default:
			break;
		}
	}
	return ( DOWNLOAD_ERR_TIMEOUT );
    2f50:	f04f 33ff 	mov.w	r3, #4294967295
}
    2f54:	4618      	mov	r0, r3
    2f56:	f507 7780 	add.w	r7, r7, #256	; 0x100
    2f5a:	46bd      	mov	sp, r7
    2f5c:	bd80      	pop	{r7, pc}
    2f5e:	bf00      	nop
    2f60:	00006390 	.word	0x00006390
    2f64:	10000044 	.word	0x10000044
    2f68:	000063ac 	.word	0x000063ac
    2f6c:	000063c8 	.word	0x000063c8

00002f70 <vTimerStart>:
 ** Parameters:	     None
 **
 ** Returned value:  None
 **
 *****************************************************************************/
static void vTimerStart(uint32_t u32Periodms) {
    2f70:	b480      	push	{r7}
    2f72:	b083      	sub	sp, #12
    2f74:	af00      	add	r7, sp, #0
    2f76:	6078      	str	r0, [r7, #4]
	/* Enable the timer clock */
	LPC_SC->PCONP |= (1UL << 1);
    2f78:	4a19      	ldr	r2, [pc, #100]	; (2fe0 <vTimerStart+0x70>)
    2f7a:	4b19      	ldr	r3, [pc, #100]	; (2fe0 <vTimerStart+0x70>)
    2f7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2f80:	f043 0302 	orr.w	r3, r3, #2
    2f84:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

	/* Configure the timer so that we can poll for a match */
	LPC_TIM0->TCR = 0x02; /* reset timer */
    2f88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2f8c:	2202      	movs	r2, #2
    2f8e:	605a      	str	r2, [r3, #4]
	LPC_TIM0->PR = 0x00; /* set prescaler to zero */
    2f90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2f94:	2200      	movs	r2, #0
    2f96:	60da      	str	r2, [r3, #12]
	LPC_TIM0->MR0 = u32Periodms
    2f98:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
			* ((SystemCoreClock / 4 / (LPC_TIM0->PR + 1)) / 1000UL);
    2f9c:	4b11      	ldr	r3, [pc, #68]	; (2fe4 <vTimerStart+0x74>)
    2f9e:	681b      	ldr	r3, [r3, #0]
    2fa0:	4a11      	ldr	r2, [pc, #68]	; (2fe8 <vTimerStart+0x78>)
    2fa2:	fba2 2303 	umull	r2, r3, r2, r3
    2fa6:	0a1a      	lsrs	r2, r3, #8
    2fa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2fac:	68db      	ldr	r3, [r3, #12]
    2fae:	3301      	adds	r3, #1
    2fb0:	fbb2 f3f3 	udiv	r3, r2, r3
    2fb4:	687a      	ldr	r2, [r7, #4]
    2fb6:	fb02 f303 	mul.w	r3, r2, r3
	LPC_SC->PCONP |= (1UL << 1);

	/* Configure the timer so that we can poll for a match */
	LPC_TIM0->TCR = 0x02; /* reset timer */
	LPC_TIM0->PR = 0x00; /* set prescaler to zero */
	LPC_TIM0->MR0 = u32Periodms
    2fba:	618b      	str	r3, [r1, #24]
			* ((SystemCoreClock / 4 / (LPC_TIM0->PR + 1)) / 1000UL);
	LPC_TIM0->IR = 0xFF; /* reset all interrupts */
    2fbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2fc0:	22ff      	movs	r2, #255	; 0xff
    2fc2:	601a      	str	r2, [r3, #0]
	LPC_TIM0->MCR = 0x04; /* stop timer on match */
    2fc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2fc8:	2204      	movs	r2, #4
    2fca:	615a      	str	r2, [r3, #20]
	LPC_TIM0->TCR = 0x01; /* start timer */
    2fcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2fd0:	2201      	movs	r2, #1
    2fd2:	605a      	str	r2, [r3, #4]
}
    2fd4:	370c      	adds	r7, #12
    2fd6:	46bd      	mov	sp, r7
    2fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fdc:	4770      	bx	lr
    2fde:	bf00      	nop
    2fe0:	400fc000 	.word	0x400fc000
    2fe4:	10000024 	.word	0x10000024
    2fe8:	10624dd3 	.word	0x10624dd3

00002fec <SystemCoreClockUpdate>:

/*----------------------------------------------------------------------------
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
    2fec:	b538      	push	{r3, r4, r5, lr}

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    2fee:	4b24      	ldr	r3, [pc, #144]	; (3080 <SystemCoreClockUpdate+0x94>)
    2ff0:	4c24      	ldr	r4, [pc, #144]	; (3084 <SystemCoreClockUpdate+0x98>)
    2ff2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2ff6:	f3c2 6201 	ubfx	r2, r2, #24, #2
    2ffa:	2a03      	cmp	r2, #3
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    2ffc:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    3000:	f002 0203 	and.w	r2, r2, #3
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    3004:	d128      	bne.n	3058 <SystemCoreClockUpdate+0x6c>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    3006:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    300a:	2a01      	cmp	r2, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    300c:	f3c1 010e 	ubfx	r1, r1, #0, #15
    3010:	f101 0101 	add.w	r1, r1, #1
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3014:	d009      	beq.n	302a <SystemCoreClockUpdate+0x3e>
    3016:	2a02      	cmp	r2, #2
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    3018:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    301c:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    3020:	f3c2 4207 	ubfx	r2, r2, #16, #8
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3024:	d009      	beq.n	303a <SystemCoreClockUpdate+0x4e>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = (IRC_OSC * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3026:	4818      	ldr	r0, [pc, #96]	; (3088 <SystemCoreClockUpdate+0x9c>)
    3028:	e009      	b.n	303e <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    302a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    302e:	4817      	ldr	r0, [pc, #92]	; (308c <SystemCoreClockUpdate+0xa0>)
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
    3030:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    3034:	f3c2 4207 	ubfx	r2, r2, #16, #8
    3038:	e001      	b.n	303e <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    303a:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
    303e:	3201      	adds	r2, #1
    3040:	2300      	movs	r3, #0
    3042:	fba1 0100 	umull	r0, r1, r1, r0
    3046:	f002 f935 	bl	52b4 <__aeabi_uldivmod>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    304a:	b2ea      	uxtb	r2, r5
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    304c:	3201      	adds	r2, #1
    304e:	2300      	movs	r3, #0
    3050:	f002 f930 	bl	52b4 <__aeabi_uldivmod>
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
    3054:	6020      	str	r0, [r4, #0]
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    3056:	bd38      	pop	{r3, r4, r5, pc}
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3058:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    305c:	2a01      	cmp	r2, #1
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    305e:	b2db      	uxtb	r3, r3
    3060:	f103 0301 	add.w	r3, r3, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3064:	d003      	beq.n	306e <SystemCoreClockUpdate+0x82>
    3066:	2a02      	cmp	r2, #2
    3068:	d003      	beq.n	3072 <SystemCoreClockUpdate+0x86>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    306a:	4a09      	ldr	r2, [pc, #36]	; (3090 <SystemCoreClockUpdate+0xa4>)
    306c:	e003      	b.n	3076 <SystemCoreClockUpdate+0x8a>
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    306e:	4a09      	ldr	r2, [pc, #36]	; (3094 <SystemCoreClockUpdate+0xa8>)
    3070:	e001      	b.n	3076 <SystemCoreClockUpdate+0x8a>
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3072:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
    3076:	fbb2 f3f3 	udiv	r3, r2, r3
    307a:	6023      	str	r3, [r4, #0]
    307c:	bd38      	pop	{r3, r4, r5, pc}
    307e:	bf00      	nop
    3080:	400fc000 	.word	0x400fc000
    3084:	10000024 	.word	0x10000024
    3088:	007a1200 	.word	0x007a1200
    308c:	016e3600 	.word	0x016e3600
    3090:	003d0900 	.word	0x003d0900
    3094:	00b71b00 	.word	0x00b71b00

00003098 <SystemInit>:
 *         Initialize the System.
 */
void SystemInit (void)
{
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
    3098:	4b34      	ldr	r3, [pc, #208]	; (316c <SystemInit+0xd4>)
    309a:	2220      	movs	r2, #32
    309c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    30a0:	461a      	mov	r2, r3
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    30a2:	f8d2 11a0 	ldr.w	r1, [r2, #416]	; 0x1a0
    30a6:	4b31      	ldr	r3, [pc, #196]	; (316c <SystemInit+0xd4>)
    30a8:	0648      	lsls	r0, r1, #25
    30aa:	d5fa      	bpl.n	30a2 <SystemInit+0xa>
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    30ac:	2203      	movs	r2, #3
    30ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    30b2:	2200      	movs	r2, #0
    30b4:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    30b8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    30bc:	4a2c      	ldr	r2, [pc, #176]	; (3170 <SystemInit+0xd8>)
  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    30be:	2001      	movs	r0, #1
    30c0:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    30c4:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    30c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
  LPC_SC->PLL0FEED  = 0x55;
    30ca:	2255      	movs	r2, #85	; 0x55

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    30cc:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    30d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    30d4:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    30d8:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    30dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    30e0:	4b22      	ldr	r3, [pc, #136]	; (316c <SystemInit+0xd4>)
    30e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    30e6:	0151      	lsls	r1, r2, #5
    30e8:	d5fa      	bpl.n	30e0 <SystemInit+0x48>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    30ea:	2203      	movs	r2, #3
    30ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    30f0:	22aa      	movs	r2, #170	; 0xaa
    30f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    30f6:	2255      	movs	r2, #85	; 0x55
    30f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    30fc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
    3100:	4a1a      	ldr	r2, [pc, #104]	; (316c <SystemInit+0xd4>)
    3102:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
    3106:	d0f9      	beq.n	30fc <SystemInit+0x64>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
    3108:	2323      	movs	r3, #35	; 0x23
    310a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0xAA;
    310e:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PLL1FEED  = 0x55;
    3110:	2355      	movs	r3, #85	; 0x55

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    3112:	2001      	movs	r0, #1
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
  LPC_SC->PLL1FEED  = 0xAA;
    3114:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3118:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    311c:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    3120:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3124:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    3128:	4b10      	ldr	r3, [pc, #64]	; (316c <SystemInit+0xd4>)
    312a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    312e:	0552      	lsls	r2, r2, #21
    3130:	d5fa      	bpl.n	3128 <SystemInit+0x90>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    3132:	2203      	movs	r2, #3
    3134:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    3138:	22aa      	movs	r2, #170	; 0xaa
    313a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    313e:	2255      	movs	r2, #85	; 0x55
    3140:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    3144:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    3148:	4a08      	ldr	r2, [pc, #32]	; (316c <SystemInit+0xd4>)
    314a:	f411 7f40 	tst.w	r1, #768	; 0x300
    314e:	d0f9      	beq.n	3144 <SystemInit+0xac>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    3150:	4b08      	ldr	r3, [pc, #32]	; (3174 <SystemInit+0xdc>)
    3152:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    3156:	2300      	movs	r3, #0
    3158:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = (LPC_SC->FLASHCFG & ~0x0000F000) | FLASHCFG_Val;
    315c:	6813      	ldr	r3, [r2, #0]
    315e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
    3162:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    3166:	6013      	str	r3, [r2, #0]
    3168:	4770      	bx	lr
    316a:	bf00      	nop
    316c:	400fc000 	.word	0x400fc000
    3170:	00050063 	.word	0x00050063
    3174:	042887de 	.word	0x042887de

00003178 <__main>:
    3178:	b508      	push	{r3, lr}
    317a:	2000      	movs	r0, #0
    317c:	4601      	mov	r1, r0
    317e:	4602      	mov	r2, r0
    3180:	f000 fcf6 	bl	3b70 <_initio>
    3184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3188:	f7fe ba80 	b.w	168c <main>

0000318c <memset>:
    318c:	f002 bcfa 	b.w	5b84 <__aeabi_lowlevel_memset>

00003190 <fp_round>:
    3190:	5c42      	ldrb	r2, [r0, r1]
    3192:	1843      	adds	r3, r0, r1
    3194:	2a34      	cmp	r2, #52	; 0x34
    3196:	dc01      	bgt.n	319c <fp_round+0xc>
    3198:	2000      	movs	r0, #0
    319a:	4770      	bx	lr
    319c:	2a35      	cmp	r2, #53	; 0x35
    319e:	d106      	bne.n	31ae <fp_round+0x1e>
    31a0:	4619      	mov	r1, r3
    31a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    31a6:	2a30      	cmp	r2, #48	; 0x30
    31a8:	d0fb      	beq.n	31a2 <fp_round+0x12>
    31aa:	2a00      	cmp	r2, #0
    31ac:	d0f4      	beq.n	3198 <fp_round+0x8>
    31ae:	461a      	mov	r2, r3
    31b0:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    31b4:	2939      	cmp	r1, #57	; 0x39
    31b6:	d102      	bne.n	31be <fp_round+0x2e>
    31b8:	2130      	movs	r1, #48	; 0x30
    31ba:	7011      	strb	r1, [r2, #0]
    31bc:	e7f8      	b.n	31b0 <fp_round+0x20>
    31be:	3101      	adds	r1, #1
    31c0:	7011      	strb	r1, [r2, #0]
    31c2:	7802      	ldrb	r2, [r0, #0]
    31c4:	2a30      	cmp	r2, #48	; 0x30
    31c6:	d0e7      	beq.n	3198 <fp_round+0x8>
    31c8:	1a1a      	subs	r2, r3, r0
    31ca:	2a00      	cmp	r2, #0
    31cc:	db03      	blt.n	31d6 <fp_round+0x46>
    31ce:	f813 2901 	ldrb.w	r2, [r3], #-1
    31d2:	709a      	strb	r2, [r3, #2]
    31d4:	e7f8      	b.n	31c8 <fp_round+0x38>
    31d6:	2001      	movs	r0, #1
    31d8:	4770      	bx	lr

000031da <pr_dec.constprop.1>:
    31da:	b510      	push	{r4, lr}
    31dc:	1f8c      	subs	r4, r1, #6
    31de:	42a1      	cmp	r1, r4
    31e0:	d00d      	beq.n	31fe <pr_dec.constprop.1+0x24>
    31e2:	230a      	movs	r3, #10
    31e4:	fb90 f3f3 	sdiv	r3, r0, r3
    31e8:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    31ec:	3030      	adds	r0, #48	; 0x30
    31ee:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
    31f2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    31f6:	f801 0901 	strb.w	r0, [r1], #-1
    31fa:	4618      	mov	r0, r3
    31fc:	e7ef      	b.n	31de <pr_dec.constprop.1+0x4>
    31fe:	bd10      	pop	{r4, pc}

00003200 <sprintf>:
    3200:	b40e      	push	{r1, r2, r3}
    3202:	b530      	push	{r4, r5, lr}
    3204:	4605      	mov	r5, r0
    3206:	b090      	sub	sp, #64	; 0x40
    3208:	ab13      	add	r3, sp, #76	; 0x4c
    320a:	f853 4b04 	ldr.w	r4, [r3], #4
    320e:	2100      	movs	r1, #0
    3210:	2228      	movs	r2, #40	; 0x28
    3212:	a806      	add	r0, sp, #24
    3214:	9305      	str	r3, [sp, #20]
    3216:	f7ff ffb9 	bl	318c <memset>
    321a:	230a      	movs	r3, #10
    321c:	9309      	str	r3, [sp, #36]	; 0x24
    321e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    3222:	9308      	str	r3, [sp, #32]
    3224:	9b05      	ldr	r3, [sp, #20]
    3226:	9400      	str	r4, [sp, #0]
    3228:	9301      	str	r3, [sp, #4]
    322a:	4b0f      	ldr	r3, [pc, #60]	; (3268 <sprintf+0x68>)
    322c:	a806      	add	r0, sp, #24
    322e:	9302      	str	r3, [sp, #8]
    3230:	f04f 32ff 	mov.w	r2, #4294967295
    3234:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    3238:	9506      	str	r5, [sp, #24]
    323a:	f000 fceb 	bl	3c14 <__vfprintf>
    323e:	9b08      	ldr	r3, [sp, #32]
    3240:	4604      	mov	r4, r0
    3242:	3b01      	subs	r3, #1
    3244:	2b00      	cmp	r3, #0
    3246:	9308      	str	r3, [sp, #32]
    3248:	db03      	blt.n	3252 <sprintf+0x52>
    324a:	9b06      	ldr	r3, [sp, #24]
    324c:	2200      	movs	r2, #0
    324e:	701a      	strb	r2, [r3, #0]
    3250:	e003      	b.n	325a <sprintf+0x5a>
    3252:	2000      	movs	r0, #0
    3254:	a906      	add	r1, sp, #24
    3256:	f001 fcbd 	bl	4bd4 <__flsbuf>
    325a:	4620      	mov	r0, r4
    325c:	b010      	add	sp, #64	; 0x40
    325e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3262:	b003      	add	sp, #12
    3264:	4770      	bx	lr
    3266:	bf00      	nop
    3268:	00003271 	.word	0x00003271
    326c:	00000000 	.word	0x00000000

00003270 <fp_display>:
    3270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3274:	4614      	mov	r4, r2
    3276:	f647 72f0 	movw	r2, #32752	; 0x7ff0
    327a:	684e      	ldr	r6, [r1, #4]
    327c:	b09f      	sub	sp, #124	; 0x7c
    327e:	9306      	str	r3, [sp, #24]
    3280:	f3c6 430f 	ubfx	r3, r6, #16, #16
    3284:	f023 030f 	bic.w	r3, r3, #15
    3288:	045b      	lsls	r3, r3, #17
    328a:	680f      	ldr	r7, [r1, #0]
    328c:	0c5b      	lsrs	r3, r3, #17
    328e:	4293      	cmp	r3, r2
    3290:	9005      	str	r0, [sp, #20]
    3292:	f8dd b0a4 	ldr.w	fp, [sp, #164]	; 0xa4
    3296:	9708      	str	r7, [sp, #32]
    3298:	9607      	str	r6, [sp, #28]
    329a:	d127      	bne.n	32ec <fp_display+0x7c>
    329c:	2300      	movs	r3, #0
    329e:	70e3      	strb	r3, [r4, #3]
    32a0:	f3c6 0313 	ubfx	r3, r6, #0, #20
    32a4:	433b      	orrs	r3, r7
    32a6:	f04f 036e 	mov.w	r3, #110	; 0x6e
    32aa:	d115      	bne.n	32d8 <fp_display+0x68>
    32ac:	2269      	movs	r2, #105	; 0x69
    32ae:	7063      	strb	r3, [r4, #1]
    32b0:	2e00      	cmp	r6, #0
    32b2:	f04f 0366 	mov.w	r3, #102	; 0x66
    32b6:	7022      	strb	r2, [r4, #0]
    32b8:	70a3      	strb	r3, [r4, #2]
    32ba:	da01      	bge.n	32c0 <fp_display+0x50>
    32bc:	4b84      	ldr	r3, [pc, #528]	; (34d0 <fp_display+0x260>)
    32be:	e010      	b.n	32e2 <fp_display+0x72>
    32c0:	9b06      	ldr	r3, [sp, #24]
    32c2:	079a      	lsls	r2, r3, #30
    32c4:	d406      	bmi.n	32d4 <fp_display+0x64>
    32c6:	4a83      	ldr	r2, [pc, #524]	; (34d4 <fp_display+0x264>)
    32c8:	f013 0f04 	tst.w	r3, #4
    32cc:	4b82      	ldr	r3, [pc, #520]	; (34d8 <fp_display+0x268>)
    32ce:	bf08      	it	eq
    32d0:	4613      	moveq	r3, r2
    32d2:	e006      	b.n	32e2 <fp_display+0x72>
    32d4:	4b81      	ldr	r3, [pc, #516]	; (34dc <fp_display+0x26c>)
    32d6:	e004      	b.n	32e2 <fp_display+0x72>
    32d8:	7023      	strb	r3, [r4, #0]
    32da:	2261      	movs	r2, #97	; 0x61
    32dc:	70a3      	strb	r3, [r4, #2]
    32de:	4b7d      	ldr	r3, [pc, #500]	; (34d4 <fp_display+0x264>)
    32e0:	7062      	strb	r2, [r4, #1]
    32e2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    32e4:	2003      	movs	r0, #3
    32e6:	6013      	str	r3, [r2, #0]
    32e8:	f000 bc3f 	b.w	3b6a <fp_display+0x8fa>
    32ec:	9b05      	ldr	r3, [sp, #20]
    32ee:	f023 0320 	bic.w	r3, r3, #32
    32f2:	2b41      	cmp	r3, #65	; 0x41
    32f4:	f000 8244 	beq.w	3780 <fp_display+0x510>
    32f8:	4638      	mov	r0, r7
    32fa:	4631      	mov	r1, r6
    32fc:	2200      	movs	r2, #0
    32fe:	2300      	movs	r3, #0
    3300:	f002 fbb6 	bl	5a70 <__aeabi_dcmplt>
    3304:	b138      	cbz	r0, 3316 <fp_display+0xa6>
    3306:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    330a:	9a08      	ldr	r2, [sp, #32]
    330c:	461e      	mov	r6, r3
    330e:	2301      	movs	r3, #1
    3310:	4617      	mov	r7, r2
    3312:	9309      	str	r3, [sp, #36]	; 0x24
    3314:	e000      	b.n	3318 <fp_display+0xa8>
    3316:	9009      	str	r0, [sp, #36]	; 0x24
    3318:	4638      	mov	r0, r7
    331a:	4631      	mov	r1, r6
    331c:	2200      	movs	r2, #0
    331e:	2300      	movs	r3, #0
    3320:	f002 fb90 	bl	5a44 <__aeabi_dcmpeq>
    3324:	2800      	cmp	r0, #0
    3326:	f040 820d 	bne.w	3744 <fp_display+0x4d4>
    332a:	f240 152d 	movw	r5, #301	; 0x12d
    332e:	aa11      	add	r2, sp, #68	; 0x44
    3330:	4638      	mov	r0, r7
    3332:	4631      	mov	r1, r6
    3334:	f001 fd50 	bl	4dd8 <_frexpl>
    3338:	9a11      	ldr	r2, [sp, #68]	; 0x44
    333a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    333e:	4355      	muls	r5, r2
    3340:	f5a5 53ab 	sub.w	r3, r5, #5472	; 0x1560
    3344:	3b1c      	subs	r3, #28
    3346:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    334a:	fb93 f5f5 	sdiv	r5, r3, r5
    334e:	2000      	movs	r0, #0
    3350:	4963      	ldr	r1, [pc, #396]	; (34e0 <fp_display+0x270>)
    3352:	1aaa      	subs	r2, r5, r2
    3354:	f001 fd6e 	bl	4e34 <_ldexpl>
    3358:	2d00      	cmp	r5, #0
    335a:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    335e:	da06      	bge.n	336e <fp_display+0xfe>
    3360:	a355      	add	r3, pc, #340	; (adr r3, 34b8 <fp_display+0x248>)
    3362:	e9d3 2300 	ldrd	r2, r3, [r3]
    3366:	426e      	negs	r6, r5
    3368:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    336c:	e006      	b.n	337c <fp_display+0x10c>
    336e:	4b5d      	ldr	r3, [pc, #372]	; (34e4 <fp_display+0x274>)
    3370:	f04f 0200 	mov.w	r2, #0
    3374:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    3378:	d016      	beq.n	33a8 <fp_display+0x138>
    337a:	462e      	mov	r6, r5
    337c:	07f3      	lsls	r3, r6, #31
    337e:	d509      	bpl.n	3394 <fp_display+0x124>
    3380:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3384:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3388:	f002 f850 	bl	542c <__aeabi_dmul>
    338c:	2e01      	cmp	r6, #1
    338e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3392:	d009      	beq.n	33a8 <fp_display+0x138>
    3394:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3398:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    339c:	f002 f846 	bl	542c <__aeabi_dmul>
    33a0:	1076      	asrs	r6, r6, #1
    33a2:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    33a6:	e7e9      	b.n	337c <fp_display+0x10c>
    33a8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    33ac:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    33b0:	f002 f8cc 	bl	554c <__aeabi_ddiv>
    33b4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    33b8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    33bc:	a340      	add	r3, pc, #256	; (adr r3, 34c0 <fp_display+0x250>)
    33be:	e9d3 2300 	ldrd	r2, r3, [r3]
    33c2:	f002 fb55 	bl	5a70 <__aeabi_dcmplt>
    33c6:	b188      	cbz	r0, 33ec <fp_display+0x17c>
    33c8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    33cc:	2200      	movs	r2, #0
    33ce:	4b46      	ldr	r3, [pc, #280]	; (34e8 <fp_display+0x278>)
    33d0:	f002 f82c 	bl	542c <__aeabi_dmul>
    33d4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    33d8:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    33dc:	2200      	movs	r2, #0
    33de:	4b42      	ldr	r3, [pc, #264]	; (34e8 <fp_display+0x278>)
    33e0:	f002 f8b4 	bl	554c <__aeabi_ddiv>
    33e4:	3d01      	subs	r5, #1
    33e6:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    33ea:	e7e5      	b.n	33b8 <fp_display+0x148>
    33ec:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    33f0:	a335      	add	r3, pc, #212	; (adr r3, 34c8 <fp_display+0x258>)
    33f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    33f6:	f002 fb97 	bl	5b28 <__aeabi_dcmpge>
    33fa:	b188      	cbz	r0, 3420 <fp_display+0x1b0>
    33fc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3400:	2200      	movs	r2, #0
    3402:	4b39      	ldr	r3, [pc, #228]	; (34e8 <fp_display+0x278>)
    3404:	f002 f8a2 	bl	554c <__aeabi_ddiv>
    3408:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    340c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3410:	2200      	movs	r2, #0
    3412:	4b35      	ldr	r3, [pc, #212]	; (34e8 <fp_display+0x278>)
    3414:	f002 f80a 	bl	542c <__aeabi_dmul>
    3418:	3501      	adds	r5, #1
    341a:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    341e:	e7e5      	b.n	33ec <fp_display+0x17c>
    3420:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3424:	f002 fac0 	bl	59a8 <__aeabi_d2iz>
    3428:	426b      	negs	r3, r5
    342a:	ea13 0325 	ands.w	r3, r3, r5, asr #32
    342e:	bf38      	it	cc
    3430:	462b      	movcc	r3, r5
    3432:	4682      	mov	sl, r0
    3434:	930e      	str	r3, [sp, #56]	; 0x38
    3436:	4650      	mov	r0, sl
    3438:	f002 fafa 	bl	5a30 <__aeabi_i2d>
    343c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    343e:	1aaa      	subs	r2, r5, r2
    3440:	f001 fcf8 	bl	4e34 <_ldexpl>
    3444:	2200      	movs	r2, #0
    3446:	2300      	movs	r3, #0
    3448:	2d00      	cmp	r5, #0
    344a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    344e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    3452:	da4b      	bge.n	34ec <fp_display+0x27c>
    3454:	a118      	add	r1, pc, #96	; (adr r1, 34b8 <fp_display+0x248>)
    3456:	e9d1 0100 	ldrd	r0, r1, [r1]
    345a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    345e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    3462:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    3466:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    346a:	f04f 0800 	mov.w	r8, #0
    346e:	4642      	mov	r2, r8
    3470:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    3474:	464b      	mov	r3, r9
    3476:	f002 f911 	bl	569c <__aeabi_dsub>
    347a:	4602      	mov	r2, r0
    347c:	460b      	mov	r3, r1
    347e:	4630      	mov	r0, r6
    3480:	4639      	mov	r1, r7
    3482:	f002 f9f7 	bl	5874 <__aeabi_dadd>
    3486:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    348a:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    348e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3492:	2200      	movs	r2, #0
    3494:	4b13      	ldr	r3, [pc, #76]	; (34e4 <fp_display+0x274>)
    3496:	f001 ffc9 	bl	542c <__aeabi_dmul>
    349a:	4602      	mov	r2, r0
    349c:	460b      	mov	r3, r1
    349e:	2000      	movs	r0, #0
    34a0:	490f      	ldr	r1, [pc, #60]	; (34e0 <fp_display+0x270>)
    34a2:	f002 f8fb 	bl	569c <__aeabi_dsub>
    34a6:	2200      	movs	r2, #0
    34a8:	4b0e      	ldr	r3, [pc, #56]	; (34e4 <fp_display+0x274>)
    34aa:	f002 f84f 	bl	554c <__aeabi_ddiv>
    34ae:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    34b2:	e024      	b.n	34fe <fp_display+0x28e>
    34b4:	f3af 8000 	nop.w
    34b8:	9999999a 	.word	0x9999999a
    34bc:	3fc99999 	.word	0x3fc99999
    34c0:	00000000 	.word	0x00000000
    34c4:	40f86a00 	.word	0x40f86a00
    34c8:	00000000 	.word	0x00000000
    34cc:	412e8480 	.word	0x412e8480
    34d0:	000065a6 	.word	0x000065a6
    34d4:	000065ff 	.word	0x000065ff
    34d8:	00006576 	.word	0x00006576
    34dc:	00006574 	.word	0x00006574
    34e0:	3ff00000 	.word	0x3ff00000
    34e4:	40140000 	.word	0x40140000
    34e8:	40240000 	.word	0x40240000
    34ec:	49ae      	ldr	r1, [pc, #696]	; (37a8 <fp_display+0x538>)
    34ee:	f04f 0000 	mov.w	r0, #0
    34f2:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    34f6:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    34fa:	f000 8089 	beq.w	3610 <fp_display+0x3a0>
    34fe:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    3502:	f01c 0f01 	tst.w	ip, #1
    3506:	d048      	beq.n	359a <fp_display+0x32a>
    3508:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    350c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    3510:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    3514:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    3518:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    351c:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    3520:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    3524:	f001 ff82 	bl	542c <__aeabi_dmul>
    3528:	4632      	mov	r2, r6
    352a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    352e:	463b      	mov	r3, r7
    3530:	4640      	mov	r0, r8
    3532:	4649      	mov	r1, r9
    3534:	f002 f99e 	bl	5874 <__aeabi_dadd>
    3538:	4602      	mov	r2, r0
    353a:	460b      	mov	r3, r1
    353c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    3540:	f001 ff74 	bl	542c <__aeabi_dmul>
    3544:	4602      	mov	r2, r0
    3546:	460b      	mov	r3, r1
    3548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    354c:	f002 f992 	bl	5874 <__aeabi_dadd>
    3550:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    3554:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3558:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    355c:	f001 ff66 	bl	542c <__aeabi_dmul>
    3560:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3564:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    3568:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    356c:	f04f 0800 	mov.w	r8, #0
    3570:	4642      	mov	r2, r8
    3572:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    3576:	464b      	mov	r3, r9
    3578:	f002 f890 	bl	569c <__aeabi_dsub>
    357c:	4602      	mov	r2, r0
    357e:	460b      	mov	r3, r1
    3580:	4630      	mov	r0, r6
    3582:	4639      	mov	r1, r7
    3584:	f002 f976 	bl	5874 <__aeabi_dadd>
    3588:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    358c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    3590:	f1bc 0f01 	cmp.w	ip, #1
    3594:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
    3598:	d03a      	beq.n	3610 <fp_display+0x3a0>
    359a:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    359e:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    35a2:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    35a6:	4602      	mov	r2, r0
    35a8:	460b      	mov	r3, r1
    35aa:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    35ae:	f002 f961 	bl	5874 <__aeabi_dadd>
    35b2:	4632      	mov	r2, r6
    35b4:	463b      	mov	r3, r7
    35b6:	f002 f95d 	bl	5874 <__aeabi_dadd>
    35ba:	4602      	mov	r2, r0
    35bc:	460b      	mov	r3, r1
    35be:	4640      	mov	r0, r8
    35c0:	4649      	mov	r1, r9
    35c2:	f001 ff33 	bl	542c <__aeabi_dmul>
    35c6:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    35ca:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    35ce:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    35d2:	f001 ff2b 	bl	542c <__aeabi_dmul>
    35d6:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    35da:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    35de:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    35e2:	f04f 0800 	mov.w	r8, #0
    35e6:	4642      	mov	r2, r8
    35e8:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    35ec:	464b      	mov	r3, r9
    35ee:	f002 f855 	bl	569c <__aeabi_dsub>
    35f2:	4602      	mov	r2, r0
    35f4:	460b      	mov	r3, r1
    35f6:	4630      	mov	r0, r6
    35f8:	4639      	mov	r1, r7
    35fa:	f002 f93b 	bl	5874 <__aeabi_dadd>
    35fe:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    3602:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    3606:	ea4f 0c6c 	mov.w	ip, ip, asr #1
    360a:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    360e:	e778      	b.n	3502 <fp_display+0x292>
    3610:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3614:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    3618:	f002 fa58 	bl	5acc <__aeabi_dcmple>
    361c:	b910      	cbnz	r0, 3624 <fp_display+0x3b4>
    361e:	f10a 3aff 	add.w	sl, sl, #4294967295
    3622:	e708      	b.n	3436 <fp_display+0x1c6>
    3624:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    3628:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    362c:	f002 f836 	bl	569c <__aeabi_dsub>
    3630:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3634:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    3638:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    363c:	f002 f82e 	bl	569c <__aeabi_dsub>
    3640:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3644:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    3648:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    364c:	f001 ff7e 	bl	554c <__aeabi_ddiv>
    3650:	a353      	add	r3, pc, #332	; (adr r3, 37a0 <fp_display+0x530>)
    3652:	e9d3 2300 	ldrd	r2, r3, [r3]
    3656:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    365a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    365e:	f001 fee5 	bl	542c <__aeabi_dmul>
    3662:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3666:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    366a:	f002 f99d 	bl	59a8 <__aeabi_d2iz>
    366e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    3672:	4680      	mov	r8, r0
    3674:	f002 f9dc 	bl	5a30 <__aeabi_i2d>
    3678:	4602      	mov	r2, r0
    367a:	460b      	mov	r3, r1
    367c:	4630      	mov	r0, r6
    367e:	4639      	mov	r1, r7
    3680:	f002 f80c 	bl	569c <__aeabi_dsub>
    3684:	a346      	add	r3, pc, #280	; (adr r3, 37a0 <fp_display+0x530>)
    3686:	e9d3 2300 	ldrd	r2, r3, [r3]
    368a:	f001 fecf 	bl	542c <__aeabi_dmul>
    368e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3692:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3696:	f002 f987 	bl	59a8 <__aeabi_d2iz>
    369a:	4606      	mov	r6, r0
    369c:	2e00      	cmp	r6, #0
    369e:	da06      	bge.n	36ae <fp_display+0x43e>
    36a0:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
    36a4:	f506 7610 	add.w	r6, r6, #576	; 0x240
    36a8:	f108 38ff 	add.w	r8, r8, #4294967295
    36ac:	e7f6      	b.n	369c <fp_display+0x42c>
    36ae:	4b3f      	ldr	r3, [pc, #252]	; (37ac <fp_display+0x53c>)
    36b0:	429e      	cmp	r6, r3
    36b2:	dd06      	ble.n	36c2 <fp_display+0x452>
    36b4:	f5a6 2674 	sub.w	r6, r6, #999424	; 0xf4000
    36b8:	f5a6 7610 	sub.w	r6, r6, #576	; 0x240
    36bc:	f108 0801 	add.w	r8, r8, #1
    36c0:	e7f5      	b.n	36ae <fp_display+0x43e>
    36c2:	f1b8 0f00 	cmp.w	r8, #0
    36c6:	da06      	bge.n	36d6 <fp_display+0x466>
    36c8:	f508 2874 	add.w	r8, r8, #999424	; 0xf4000
    36cc:	f508 7810 	add.w	r8, r8, #576	; 0x240
    36d0:	f10a 3aff 	add.w	sl, sl, #4294967295
    36d4:	e7f5      	b.n	36c2 <fp_display+0x452>
    36d6:	4598      	cmp	r8, r3
    36d8:	dd06      	ble.n	36e8 <fp_display+0x478>
    36da:	f5a8 2874 	sub.w	r8, r8, #999424	; 0xf4000
    36de:	f5a8 7810 	sub.w	r8, r8, #576	; 0x240
    36e2:	f10a 0a01 	add.w	sl, sl, #1
    36e6:	e7f6      	b.n	36d6 <fp_display+0x466>
    36e8:	4b31      	ldr	r3, [pc, #196]	; (37b0 <fp_display+0x540>)
    36ea:	4650      	mov	r0, sl
    36ec:	459a      	cmp	sl, r3
    36ee:	dc11      	bgt.n	3714 <fp_display+0x4a4>
    36f0:	3301      	adds	r3, #1
    36f2:	fb98 f2f3 	sdiv	r2, r8, r3
    36f6:	fb96 f3f3 	sdiv	r3, r6, r3
    36fa:	482e      	ldr	r0, [pc, #184]	; (37b4 <fp_display+0x544>)
    36fc:	210a      	movs	r1, #10
    36fe:	fb00 8802 	mla	r8, r0, r2, r8
    3702:	fb00 6603 	mla	r6, r0, r3, r6
    3706:	fb01 2a0a 	mla	sl, r1, sl, r2
    370a:	fb01 3808 	mla	r8, r1, r8, r3
    370e:	434e      	muls	r6, r1
    3710:	3d01      	subs	r5, #1
    3712:	e01c      	b.n	374e <fp_display+0x4de>
    3714:	4b25      	ldr	r3, [pc, #148]	; (37ac <fp_display+0x53c>)
    3716:	459a      	cmp	sl, r3
    3718:	dd19      	ble.n	374e <fp_display+0x4de>
    371a:	220a      	movs	r2, #10
    371c:	fb9a faf2 	sdiv	sl, sl, r2
    3720:	f06f 0309 	mvn.w	r3, #9
    3724:	fb03 000a 	mla	r0, r3, sl, r0
    3728:	4923      	ldr	r1, [pc, #140]	; (37b8 <fp_display+0x548>)
    372a:	3501      	adds	r5, #1
    372c:	fb01 8000 	mla	r0, r1, r0, r8
    3730:	fb90 f8f2 	sdiv	r8, r0, r2
    3734:	fb03 0308 	mla	r3, r3, r8, r0
    3738:	fb01 6603 	mla	r6, r1, r3, r6
    373c:	3605      	adds	r6, #5
    373e:	fb96 f6f2 	sdiv	r6, r6, r2
    3742:	e004      	b.n	374e <fp_display+0x4de>
    3744:	2600      	movs	r6, #0
    3746:	46b0      	mov	r8, r6
    3748:	46b2      	mov	sl, r6
    374a:	f06f 0504 	mvn.w	r5, #4
    374e:	4621      	mov	r1, r4
    3750:	2730      	movs	r7, #48	; 0x30
    3752:	f801 7b06 	strb.w	r7, [r1], #6
    3756:	4650      	mov	r0, sl
    3758:	f7ff fd3f 	bl	31da <pr_dec.constprop.1>
    375c:	4640      	mov	r0, r8
    375e:	f104 010c 	add.w	r1, r4, #12
    3762:	f7ff fd3a 	bl	31da <pr_dec.constprop.1>
    3766:	4630      	mov	r0, r6
    3768:	f104 0112 	add.w	r1, r4, #18
    376c:	f7ff fd35 	bl	31da <pr_dec.constprop.1>
    3770:	2300      	movs	r3, #0
    3772:	7523      	strb	r3, [r4, #20]
    3774:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3776:	3505      	adds	r5, #5
    3778:	74e7      	strb	r7, [r4, #19]
    377a:	ea43 0585 	orr.w	r5, r3, r5, lsl #2
    377e:	e000      	b.n	3782 <fp_display+0x512>
    3780:	2500      	movs	r5, #0
    3782:	07ef      	lsls	r7, r5, #31
    3784:	d501      	bpl.n	378a <fp_display+0x51a>
    3786:	4b0d      	ldr	r3, [pc, #52]	; (37bc <fp_display+0x54c>)
    3788:	e01f      	b.n	37ca <fp_display+0x55a>
    378a:	9b06      	ldr	r3, [sp, #24]
    378c:	079e      	lsls	r6, r3, #30
    378e:	d41b      	bmi.n	37c8 <fp_display+0x558>
    3790:	4a0b      	ldr	r2, [pc, #44]	; (37c0 <fp_display+0x550>)
    3792:	f013 0f04 	tst.w	r3, #4
    3796:	4b0b      	ldr	r3, [pc, #44]	; (37c4 <fp_display+0x554>)
    3798:	bf08      	it	eq
    379a:	4613      	moveq	r3, r2
    379c:	e015      	b.n	37ca <fp_display+0x55a>
    379e:	bf00      	nop
    37a0:	00000000 	.word	0x00000000
    37a4:	412e8480 	.word	0x412e8480
    37a8:	40140000 	.word	0x40140000
    37ac:	000f423f 	.word	0x000f423f
    37b0:	0001869f 	.word	0x0001869f
    37b4:	fffe7960 	.word	0xfffe7960
    37b8:	000f4240 	.word	0x000f4240
    37bc:	000065a6 	.word	0x000065a6
    37c0:	000065ff 	.word	0x000065ff
    37c4:	00006576 	.word	0x00006576
    37c8:	4bad      	ldr	r3, [pc, #692]	; (3a80 <fp_display+0x810>)
    37ca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    37cc:	f025 0501 	bic.w	r5, r5, #1
    37d0:	6013      	str	r3, [r2, #0]
    37d2:	2304      	movs	r3, #4
    37d4:	fb95 f5f3 	sdiv	r5, r5, r3
    37d8:	9b05      	ldr	r3, [sp, #20]
    37da:	f8db 6000 	ldr.w	r6, [fp]
    37de:	2b61      	cmp	r3, #97	; 0x61
    37e0:	d010      	beq.n	3804 <fp_display+0x594>
    37e2:	dc06      	bgt.n	37f2 <fp_display+0x582>
    37e4:	2b45      	cmp	r3, #69	; 0x45
    37e6:	d067      	beq.n	38b8 <fp_display+0x648>
    37e8:	2b47      	cmp	r3, #71	; 0x47
    37ea:	d048      	beq.n	387e <fp_display+0x60e>
    37ec:	2b41      	cmp	r3, #65	; 0x41
    37ee:	d144      	bne.n	387a <fp_display+0x60a>
    37f0:	e008      	b.n	3804 <fp_display+0x594>
    37f2:	9b05      	ldr	r3, [sp, #20]
    37f4:	2b66      	cmp	r3, #102	; 0x66
    37f6:	f000 80df 	beq.w	39b8 <fp_display+0x748>
    37fa:	2b67      	cmp	r3, #103	; 0x67
    37fc:	d03f      	beq.n	387e <fp_display+0x60e>
    37fe:	2b65      	cmp	r3, #101	; 0x65
    3800:	d13b      	bne.n	387a <fp_display+0x60a>
    3802:	e059      	b.n	38b8 <fp_display+0x648>
    3804:	9b07      	ldr	r3, [sp, #28]
    3806:	2000      	movs	r0, #0
    3808:	f3c3 0113 	ubfx	r1, r3, #0, #20
    380c:	9b08      	ldr	r3, [sp, #32]
    380e:	4318      	orrs	r0, r3
    3810:	9b07      	ldr	r3, [sp, #28]
    3812:	f3c3 520a 	ubfx	r2, r3, #20, #11
    3816:	b112      	cbz	r2, 381e <fp_display+0x5ae>
    3818:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
    381c:	e004      	b.n	3828 <fp_display+0x5b8>
    381e:	ea50 0301 	orrs.w	r3, r0, r1
    3822:	4b98      	ldr	r3, [pc, #608]	; (3a84 <fp_display+0x814>)
    3824:	bf08      	it	eq
    3826:	2300      	moveq	r3, #0
    3828:	2a00      	cmp	r2, #0
    382a:	bf0c      	ite	eq
    382c:	2230      	moveq	r2, #48	; 0x30
    382e:	2231      	movne	r2, #49	; 0x31
    3830:	b966      	cbnz	r6, 384c <fp_display+0x5dc>
    3832:	9d06      	ldr	r5, [sp, #24]
    3834:	072d      	lsls	r5, r5, #28
    3836:	d409      	bmi.n	384c <fp_display+0x5dc>
    3838:	9d05      	ldr	r5, [sp, #20]
    383a:	4620      	mov	r0, r4
    383c:	4992      	ldr	r1, [pc, #584]	; (3a88 <fp_display+0x818>)
    383e:	4c93      	ldr	r4, [pc, #588]	; (3a8c <fp_display+0x81c>)
    3840:	2d61      	cmp	r5, #97	; 0x61
    3842:	bf08      	it	eq
    3844:	4621      	moveq	r1, r4
    3846:	f7ff fcdb 	bl	3200 <sprintf>
    384a:	e00c      	b.n	3866 <fp_display+0x5f6>
    384c:	e9cd 0100 	strd	r0, r1, [sp]
    3850:	9302      	str	r3, [sp, #8]
    3852:	4620      	mov	r0, r4
    3854:	4b8e      	ldr	r3, [pc, #568]	; (3a90 <fp_display+0x820>)
    3856:	498f      	ldr	r1, [pc, #572]	; (3a94 <fp_display+0x824>)
    3858:	9c05      	ldr	r4, [sp, #20]
    385a:	2c61      	cmp	r4, #97	; 0x61
    385c:	bf18      	it	ne
    385e:	4619      	movne	r1, r3
    3860:	4633      	mov	r3, r6
    3862:	f7ff fccd 	bl	3200 <sprintf>
    3866:	4a8c      	ldr	r2, [pc, #560]	; (3a98 <fp_display+0x828>)
    3868:	4b8c      	ldr	r3, [pc, #560]	; (3a9c <fp_display+0x82c>)
    386a:	9907      	ldr	r1, [sp, #28]
    386c:	ea33 0321 	bics.w	r3, r3, r1, asr #32
    3870:	bf28      	it	cs
    3872:	4613      	movcs	r3, r2
    3874:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    3876:	6013      	str	r3, [r2, #0]
    3878:	e177      	b.n	3b6a <fp_display+0x8fa>
    387a:	2367      	movs	r3, #103	; 0x67
    387c:	9305      	str	r3, [sp, #20]
    387e:	9b06      	ldr	r3, [sp, #24]
    3880:	2e00      	cmp	r6, #0
    3882:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    3886:	9306      	str	r3, [sp, #24]
    3888:	bfdc      	itt	le
    388a:	2301      	movle	r3, #1
    388c:	f8cb 3000 	strle.w	r3, [fp]
    3890:	f8db 1000 	ldr.w	r1, [fp]
    3894:	4620      	mov	r0, r4
    3896:	2911      	cmp	r1, #17
    3898:	bfd4      	ite	le
    389a:	3101      	addle	r1, #1
    389c:	2112      	movgt	r1, #18
    389e:	f7ff fc77 	bl	3190 <fp_round>
    38a2:	f8db 3000 	ldr.w	r3, [fp]
    38a6:	4405      	add	r5, r0
    38a8:	429d      	cmp	r5, r3
    38aa:	db7e      	blt.n	39aa <fp_display+0x73a>
    38ac:	3b01      	subs	r3, #1
    38ae:	f8cb 3000 	str.w	r3, [fp]
    38b2:	9b05      	ldr	r3, [sp, #20]
    38b4:	3b02      	subs	r3, #2
    38b6:	9305      	str	r3, [sp, #20]
    38b8:	f8db 3000 	ldr.w	r3, [fp]
    38bc:	2b11      	cmp	r3, #17
    38be:	bfc1      	itttt	gt
    38c0:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    38c2:	3b11      	subgt	r3, #17
    38c4:	6013      	strgt	r3, [r2, #0]
    38c6:	2311      	movgt	r3, #17
    38c8:	bfc8      	it	gt
    38ca:	f8cb 3000 	strgt.w	r3, [fp]
    38ce:	9b06      	ldr	r3, [sp, #24]
    38d0:	f8db 6000 	ldr.w	r6, [fp]
    38d4:	f413 6700 	ands.w	r7, r3, #2048	; 0x800
    38d8:	f106 0602 	add.w	r6, r6, #2
    38dc:	d104      	bne.n	38e8 <fp_display+0x678>
    38de:	4620      	mov	r0, r4
    38e0:	4631      	mov	r1, r6
    38e2:	f7ff fc55 	bl	3190 <fp_round>
    38e6:	4405      	add	r5, r0
    38e8:	7863      	ldrb	r3, [r4, #1]
    38ea:	7023      	strb	r3, [r4, #0]
    38ec:	f8db 3000 	ldr.w	r3, [fp]
    38f0:	b923      	cbnz	r3, 38fc <fp_display+0x68c>
    38f2:	f640 0308 	movw	r3, #2056	; 0x808
    38f6:	9a06      	ldr	r2, [sp, #24]
    38f8:	4013      	ands	r3, r2
    38fa:	b113      	cbz	r3, 3902 <fp_display+0x692>
    38fc:	232e      	movs	r3, #46	; 0x2e
    38fe:	7063      	strb	r3, [r4, #1]
    3900:	e000      	b.n	3904 <fp_display+0x694>
    3902:	2601      	movs	r6, #1
    3904:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    3906:	681b      	ldr	r3, [r3, #0]
    3908:	2b00      	cmp	r3, #0
    390a:	bfc2      	ittt	gt
    390c:	233e      	movgt	r3, #62	; 0x3e
    390e:	55a3      	strbgt	r3, [r4, r6]
    3910:	3601      	addgt	r6, #1
    3912:	b177      	cbz	r7, 3932 <fp_display+0x6c2>
    3914:	9b06      	ldr	r3, [sp, #24]
    3916:	071f      	lsls	r7, r3, #28
    3918:	d40b      	bmi.n	3932 <fp_display+0x6c2>
    391a:	19a2      	adds	r2, r4, r6
    391c:	1b16      	subs	r6, r2, r4
    391e:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
    3922:	2b30      	cmp	r3, #48	; 0x30
    3924:	d0fa      	beq.n	391c <fp_display+0x6ac>
    3926:	2b3e      	cmp	r3, #62	; 0x3e
    3928:	d0f8      	beq.n	391c <fp_display+0x6ac>
    392a:	2b2e      	cmp	r3, #46	; 0x2e
    392c:	bf08      	it	eq
    392e:	f106 36ff 	addeq.w	r6, r6, #4294967295
    3932:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3936:	2d00      	cmp	r5, #0
    3938:	55a3      	strb	r3, [r4, r6]
    393a:	bfb8      	it	lt
    393c:	426d      	neglt	r5, r5
    393e:	f106 0302 	add.w	r3, r6, #2
    3942:	f106 0201 	add.w	r2, r6, #1
    3946:	bfb5      	itete	lt
    3948:	212d      	movlt	r1, #45	; 0x2d
    394a:	212b      	movge	r1, #43	; 0x2b
    394c:	461e      	movlt	r6, r3
    394e:	461e      	movge	r6, r3
    3950:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
    3954:	54a1      	strb	r1, [r4, r2]
    3956:	db0a      	blt.n	396e <fp_display+0x6fe>
    3958:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    395c:	fb95 f2f2 	sdiv	r2, r5, r2
    3960:	f102 0130 	add.w	r1, r2, #48	; 0x30
    3964:	54e1      	strb	r1, [r4, r3]
    3966:	494e      	ldr	r1, [pc, #312]	; (3aa0 <fp_display+0x830>)
    3968:	1c5e      	adds	r6, r3, #1
    396a:	fb01 5502 	mla	r5, r1, r2, r5
    396e:	2d63      	cmp	r5, #99	; 0x63
    3970:	dd0a      	ble.n	3988 <fp_display+0x718>
    3972:	2364      	movs	r3, #100	; 0x64
    3974:	fb95 f3f3 	sdiv	r3, r5, r3
    3978:	f103 0230 	add.w	r2, r3, #48	; 0x30
    397c:	55a2      	strb	r2, [r4, r6]
    397e:	f06f 0263 	mvn.w	r2, #99	; 0x63
    3982:	fb02 5503 	mla	r5, r2, r3, r5
    3986:	3601      	adds	r6, #1
    3988:	230a      	movs	r3, #10
    398a:	fb95 f3f3 	sdiv	r3, r5, r3
    398e:	f103 0230 	add.w	r2, r3, #48	; 0x30
    3992:	55a2      	strb	r2, [r4, r6]
    3994:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    3998:	3530      	adds	r5, #48	; 0x30
    399a:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
    399e:	4434      	add	r4, r6
    39a0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    39a4:	7063      	strb	r3, [r4, #1]
    39a6:	1cb0      	adds	r0, r6, #2
    39a8:	e0df      	b.n	3b6a <fp_display+0x8fa>
    39aa:	1d2a      	adds	r2, r5, #4
    39ac:	f6ff af7e 	blt.w	38ac <fp_display+0x63c>
    39b0:	43ea      	mvns	r2, r5
    39b2:	4413      	add	r3, r2
    39b4:	f8cb 3000 	str.w	r3, [fp]
    39b8:	9a06      	ldr	r2, [sp, #24]
    39ba:	2d00      	cmp	r5, #0
    39bc:	f8db 3000 	ldr.w	r3, [fp]
    39c0:	f402 6700 	and.w	r7, r2, #2048	; 0x800
    39c4:	da4c      	bge.n	3a60 <fp_display+0x7f0>
    39c6:	f1c5 0800 	rsb	r8, r5, #0
    39ca:	1c5a      	adds	r2, r3, #1
    39cc:	4590      	cmp	r8, r2
    39ce:	dd09      	ble.n	39e4 <fp_display+0x774>
    39d0:	2330      	movs	r3, #48	; 0x30
    39d2:	7023      	strb	r3, [r4, #0]
    39d4:	232e      	movs	r3, #46	; 0x2e
    39d6:	7063      	strb	r3, [r4, #1]
    39d8:	f8db 3000 	ldr.w	r3, [fp]
    39dc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    39de:	2602      	movs	r6, #2
    39e0:	6013      	str	r3, [r2, #0]
    39e2:	e038      	b.n	3a56 <fp_display+0x7e6>
    39e4:	442b      	add	r3, r5
    39e6:	1c9e      	adds	r6, r3, #2
    39e8:	2e12      	cmp	r6, #18
    39ea:	bfc1      	itttt	gt
    39ec:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    39ee:	3b11      	subgt	r3, #17
    39f0:	6013      	strgt	r3, [r2, #0]
    39f2:	2613      	movgt	r6, #19
    39f4:	b95f      	cbnz	r7, 3a0e <fp_display+0x79e>
    39f6:	4620      	mov	r0, r4
    39f8:	4631      	mov	r1, r6
    39fa:	f7ff fbc9 	bl	3190 <fp_round>
    39fe:	b130      	cbz	r0, 3a0e <fp_display+0x79e>
    3a00:	ea7f 0805 	mvns.w	r8, r5
    3a04:	f106 0601 	add.w	r6, r6, #1
    3a08:	d101      	bne.n	3a0e <fp_display+0x79e>
    3a0a:	7863      	ldrb	r3, [r4, #1]
    3a0c:	e00d      	b.n	3a2a <fp_display+0x7ba>
    3a0e:	f1b8 0f01 	cmp.w	r8, #1
    3a12:	eb04 0306 	add.w	r3, r4, r6
    3a16:	d10c      	bne.n	3a32 <fp_display+0x7c2>
    3a18:	1b1a      	subs	r2, r3, r4
    3a1a:	2a00      	cmp	r2, #0
    3a1c:	dd03      	ble.n	3a26 <fp_display+0x7b6>
    3a1e:	f813 2901 	ldrb.w	r2, [r3], #-1
    3a22:	709a      	strb	r2, [r3, #2]
    3a24:	e7f8      	b.n	3a18 <fp_display+0x7a8>
    3a26:	3601      	adds	r6, #1
    3a28:	2330      	movs	r3, #48	; 0x30
    3a2a:	7023      	strb	r3, [r4, #0]
    3a2c:	232e      	movs	r3, #46	; 0x2e
    3a2e:	7063      	strb	r3, [r4, #1]
    3a30:	e011      	b.n	3a56 <fp_display+0x7e6>
    3a32:	1b1a      	subs	r2, r3, r4
    3a34:	2a00      	cmp	r2, #0
    3a36:	dd03      	ble.n	3a40 <fp_display+0x7d0>
    3a38:	f813 2901 	ldrb.w	r2, [r3], #-1
    3a3c:	70da      	strb	r2, [r3, #3]
    3a3e:	e7f8      	b.n	3a32 <fp_display+0x7c2>
    3a40:	2330      	movs	r3, #48	; 0x30
    3a42:	7023      	strb	r3, [r4, #0]
    3a44:	232e      	movs	r3, #46	; 0x2e
    3a46:	7063      	strb	r3, [r4, #1]
    3a48:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    3a4a:	233c      	movs	r3, #60	; 0x3c
    3a4c:	70a3      	strb	r3, [r4, #2]
    3a4e:	f108 33ff 	add.w	r3, r8, #4294967295
    3a52:	3602      	adds	r6, #2
    3a54:	6013      	str	r3, [r2, #0]
    3a56:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    3a58:	681b      	ldr	r3, [r3, #0]
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	dc38      	bgt.n	3ad0 <fp_display+0x860>
    3a5e:	e06c      	b.n	3b3a <fp_display+0x8ca>
    3a60:	eb05 0803 	add.w	r8, r5, r3
    3a64:	f108 0602 	add.w	r6, r8, #2
    3a68:	2e12      	cmp	r6, #18
    3a6a:	dd50      	ble.n	3b0e <fp_display+0x89e>
    3a6c:	b9d7      	cbnz	r7, 3aa4 <fp_display+0x834>
    3a6e:	4620      	mov	r0, r4
    3a70:	2113      	movs	r1, #19
    3a72:	f7ff fb8d 	bl	3190 <fp_round>
    3a76:	b1a8      	cbz	r0, 3aa4 <fp_display+0x834>
    3a78:	3501      	adds	r5, #1
    3a7a:	2614      	movs	r6, #20
    3a7c:	e013      	b.n	3aa6 <fp_display+0x836>
    3a7e:	bf00      	nop
    3a80:	00006574 	.word	0x00006574
    3a84:	fffffc01 	.word	0xfffffc01
    3a88:	00006580 	.word	0x00006580
    3a8c:	00006578 	.word	0x00006578
    3a90:	00006597 	.word	0x00006597
    3a94:	00006588 	.word	0x00006588
    3a98:	000065a6 	.word	0x000065a6
    3a9c:	000065ff 	.word	0x000065ff
    3aa0:	fffffc18 	.word	0xfffffc18
    3aa4:	2613      	movs	r6, #19
    3aa6:	1e72      	subs	r2, r6, #1
    3aa8:	4295      	cmp	r5, r2
    3aaa:	4623      	mov	r3, r4
    3aac:	da14      	bge.n	3ad8 <fp_display+0x868>
    3aae:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3ab2:	f803 2c01 	strb.w	r2, [r3, #-1]
    3ab6:	1b1a      	subs	r2, r3, r4
    3ab8:	42aa      	cmp	r2, r5
    3aba:	ddf8      	ble.n	3aae <fp_display+0x83e>
    3abc:	1963      	adds	r3, r4, r5
    3abe:	222e      	movs	r2, #46	; 0x2e
    3ac0:	705a      	strb	r2, [r3, #1]
    3ac2:	f8db 3000 	ldr.w	r3, [fp]
    3ac6:	441d      	add	r5, r3
    3ac8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    3aca:	3d11      	subs	r5, #17
    3acc:	601d      	str	r5, [r3, #0]
    3ace:	b3a5      	cbz	r5, 3b3a <fp_display+0x8ca>
    3ad0:	233e      	movs	r3, #62	; 0x3e
    3ad2:	55a3      	strb	r3, [r4, r6]
    3ad4:	3601      	adds	r6, #1
    3ad6:	e030      	b.n	3b3a <fp_display+0x8ca>
    3ad8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    3adc:	f803 1c01 	strb.w	r1, [r3, #-1]
    3ae0:	1b19      	subs	r1, r3, r4
    3ae2:	4291      	cmp	r1, r2
    3ae4:	dbf8      	blt.n	3ad8 <fp_display+0x868>
    3ae6:	19a3      	adds	r3, r4, r6
    3ae8:	223c      	movs	r2, #60	; 0x3c
    3aea:	f803 2c01 	strb.w	r2, [r3, #-1]
    3aee:	1bad      	subs	r5, r5, r6
    3af0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    3af2:	222e      	movs	r2, #46	; 0x2e
    3af4:	3502      	adds	r5, #2
    3af6:	601d      	str	r5, [r3, #0]
    3af8:	55a2      	strb	r2, [r4, r6]
    3afa:	f8db 2000 	ldr.w	r2, [fp]
    3afe:	1c73      	adds	r3, r6, #1
    3b00:	b1d2      	cbz	r2, 3b38 <fp_display+0x8c8>
    3b02:	992b      	ldr	r1, [sp, #172]	; 0xac
    3b04:	3602      	adds	r6, #2
    3b06:	600a      	str	r2, [r1, #0]
    3b08:	223e      	movs	r2, #62	; 0x3e
    3b0a:	54e2      	strb	r2, [r4, r3]
    3b0c:	e015      	b.n	3b3a <fp_display+0x8ca>
    3b0e:	b93f      	cbnz	r7, 3b20 <fp_display+0x8b0>
    3b10:	4620      	mov	r0, r4
    3b12:	4631      	mov	r1, r6
    3b14:	f7ff fb3c 	bl	3190 <fp_round>
    3b18:	b110      	cbz	r0, 3b20 <fp_display+0x8b0>
    3b1a:	3501      	adds	r5, #1
    3b1c:	f108 0603 	add.w	r6, r8, #3
    3b20:	4623      	mov	r3, r4
    3b22:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3b26:	f803 2c01 	strb.w	r2, [r3, #-1]
    3b2a:	1b1a      	subs	r2, r3, r4
    3b2c:	42aa      	cmp	r2, r5
    3b2e:	ddf8      	ble.n	3b22 <fp_display+0x8b2>
    3b30:	4425      	add	r5, r4
    3b32:	232e      	movs	r3, #46	; 0x2e
    3b34:	706b      	strb	r3, [r5, #1]
    3b36:	e000      	b.n	3b3a <fp_display+0x8ca>
    3b38:	461e      	mov	r6, r3
    3b3a:	b16f      	cbz	r7, 3b58 <fp_display+0x8e8>
    3b3c:	9b06      	ldr	r3, [sp, #24]
    3b3e:	0718      	lsls	r0, r3, #28
    3b40:	d412      	bmi.n	3b68 <fp_display+0x8f8>
    3b42:	19a0      	adds	r0, r4, r6
    3b44:	1b06      	subs	r6, r0, r4
    3b46:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
    3b4a:	2b30      	cmp	r3, #48	; 0x30
    3b4c:	d0fa      	beq.n	3b44 <fp_display+0x8d4>
    3b4e:	2b3e      	cmp	r3, #62	; 0x3e
    3b50:	d0f8      	beq.n	3b44 <fp_display+0x8d4>
    3b52:	2b2e      	cmp	r3, #46	; 0x2e
    3b54:	d108      	bne.n	3b68 <fp_display+0x8f8>
    3b56:	e005      	b.n	3b64 <fp_display+0x8f4>
    3b58:	f8db 3000 	ldr.w	r3, [fp]
    3b5c:	b923      	cbnz	r3, 3b68 <fp_display+0x8f8>
    3b5e:	9b06      	ldr	r3, [sp, #24]
    3b60:	0719      	lsls	r1, r3, #28
    3b62:	d401      	bmi.n	3b68 <fp_display+0x8f8>
    3b64:	1e70      	subs	r0, r6, #1
    3b66:	e000      	b.n	3b6a <fp_display+0x8fa>
    3b68:	4630      	mov	r0, r6
    3b6a:	b01f      	add	sp, #124	; 0x7c
    3b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003b70 <_initio>:
    3b70:	b510      	push	{r4, lr}
    3b72:	2100      	movs	r1, #0
    3b74:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3b78:	4822      	ldr	r0, [pc, #136]	; (3c04 <_initio+0x94>)
    3b7a:	f7ff fb07 	bl	318c <memset>
    3b7e:	20c0      	movs	r0, #192	; 0xc0
    3b80:	f001 fa34 	bl	4fec <_Csys_alloc>
    3b84:	4c20      	ldr	r4, [pc, #128]	; (3c08 <_initio+0x98>)
    3b86:	2100      	movs	r1, #0
    3b88:	22c0      	movs	r2, #192	; 0xc0
    3b8a:	6020      	str	r0, [r4, #0]
    3b8c:	f7ff fafe 	bl	318c <memset>
    3b90:	6820      	ldr	r0, [r4, #0]
    3b92:	2300      	movs	r3, #0
    3b94:	4c1b      	ldr	r4, [pc, #108]	; (3c04 <_initio+0x94>)
    3b96:	2228      	movs	r2, #40	; 0x28
    3b98:	2118      	movs	r1, #24
    3b9a:	fb02 4203 	mla	r2, r2, r3, r4
    3b9e:	fb01 0103 	mla	r1, r1, r3, r0
    3ba2:	3301      	adds	r3, #1
    3ba4:	2b08      	cmp	r3, #8
    3ba6:	6251      	str	r1, [r2, #36]	; 0x24
    3ba8:	d1f4      	bne.n	3b94 <_initio+0x24>
    3baa:	4622      	mov	r2, r4
    3bac:	4917      	ldr	r1, [pc, #92]	; (3c0c <_initio+0x9c>)
    3bae:	2000      	movs	r0, #0
    3bb0:	f001 f8b1 	bl	4d16 <_fdopen>
    3bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3bb8:	4620      	mov	r0, r4
    3bba:	2100      	movs	r1, #0
    3bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3bc0:	f000 ff38 	bl	4a34 <setvbuf>
    3bc4:	f104 0228 	add.w	r2, r4, #40	; 0x28
    3bc8:	4911      	ldr	r1, [pc, #68]	; (3c10 <_initio+0xa0>)
    3bca:	2001      	movs	r0, #1
    3bcc:	f001 f8a3 	bl	4d16 <_fdopen>
    3bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3bd4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3bd8:	2100      	movs	r1, #0
    3bda:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3bde:	f000 ff29 	bl	4a34 <setvbuf>
    3be2:	f104 0250 	add.w	r2, r4, #80	; 0x50
    3be6:	490a      	ldr	r1, [pc, #40]	; (3c10 <_initio+0xa0>)
    3be8:	2002      	movs	r0, #2
    3bea:	f001 f894 	bl	4d16 <_fdopen>
    3bee:	f104 0050 	add.w	r0, r4, #80	; 0x50
    3bf2:	2100      	movs	r1, #0
    3bf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3c00:	f000 bf18 	b.w	4a34 <setvbuf>
    3c04:	1000204c 	.word	0x1000204c
    3c08:	10002048 	.word	0x10002048
    3c0c:	000065a8 	.word	0x000065a8
    3c10:	000065aa 	.word	0x000065aa

00003c14 <__vfprintf>:
    3c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c18:	4604      	mov	r4, r0
    3c1a:	b0ad      	sub	sp, #180	; 0xb4
    3c1c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    3c20:	f8dd 80dc 	ldr.w	r8, [sp, #220]	; 0xdc
    3c24:	2200      	movs	r2, #0
    3c26:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    3c28:	9205      	str	r2, [sp, #20]
    3c2a:	7818      	ldrb	r0, [r3, #0]
    3c2c:	1c5d      	adds	r5, r3, #1
    3c2e:	2800      	cmp	r0, #0
    3c30:	f000 863d 	beq.w	48ae <__vfprintf+0xc9a>
    3c34:	2825      	cmp	r0, #37	; 0x25
    3c36:	d102      	bne.n	3c3e <__vfprintf+0x2a>
    3c38:	462a      	mov	r2, r5
    3c3a:	2700      	movs	r7, #0
    3c3c:	e023      	b.n	3c86 <__vfprintf+0x72>
    3c3e:	9b05      	ldr	r3, [sp, #20]
    3c40:	ea4f 7be3 	mov.w	fp, r3, asr #31
    3c44:	461a      	mov	r2, r3
    3c46:	1c5e      	adds	r6, r3, #1
    3c48:	465b      	mov	r3, fp
    3c4a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    3c4e:	4552      	cmp	r2, sl
    3c50:	eb73 030b 	sbcs.w	r3, r3, fp
    3c54:	f280 8627 	bge.w	48a6 <__vfprintf+0xc92>
    3c58:	68a3      	ldr	r3, [r4, #8]
    3c5a:	3b01      	subs	r3, #1
    3c5c:	2b00      	cmp	r3, #0
    3c5e:	60a3      	str	r3, [r4, #8]
    3c60:	db05      	blt.n	3c6e <__vfprintf+0x5a>
    3c62:	6823      	ldr	r3, [r4, #0]
    3c64:	1c5a      	adds	r2, r3, #1
    3c66:	6022      	str	r2, [r4, #0]
    3c68:	7018      	strb	r0, [r3, #0]
    3c6a:	f000 be1c 	b.w	48a6 <__vfprintf+0xc92>
    3c6e:	4621      	mov	r1, r4
    3c70:	f000 ffb0 	bl	4bd4 <__flsbuf>
    3c74:	f000 be17 	b.w	48a6 <__vfprintf+0xc92>
    3c78:	d90b      	bls.n	3c92 <__vfprintf+0x7e>
    3c7a:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
    3c7e:	d111      	bne.n	3ca4 <__vfprintf+0x90>
    3c80:	f047 0701 	orr.w	r7, r7, #1
    3c84:	462a      	mov	r2, r5
    3c86:	f815 9b01 	ldrb.w	r9, [r5], #1
    3c8a:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
    3c8e:	d1f3      	bne.n	3c78 <__vfprintf+0x64>
    3c90:	e00e      	b.n	3cb0 <__vfprintf+0x9c>
    3c92:	f1b9 0f20 	cmp.w	r9, #32
    3c96:	d00e      	beq.n	3cb6 <__vfprintf+0xa2>
    3c98:	f1b9 0f23 	cmp.w	r9, #35	; 0x23
    3c9c:	d10e      	bne.n	3cbc <__vfprintf+0xa8>
    3c9e:	f047 0708 	orr.w	r7, r7, #8
    3ca2:	e7ef      	b.n	3c84 <__vfprintf+0x70>
    3ca4:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    3ca8:	d108      	bne.n	3cbc <__vfprintf+0xa8>
    3caa:	f447 7700 	orr.w	r7, r7, #512	; 0x200
    3cae:	e7e9      	b.n	3c84 <__vfprintf+0x70>
    3cb0:	f047 0702 	orr.w	r7, r7, #2
    3cb4:	e7e6      	b.n	3c84 <__vfprintf+0x70>
    3cb6:	f047 0704 	orr.w	r7, r7, #4
    3cba:	e7e3      	b.n	3c84 <__vfprintf+0x70>
    3cbc:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    3cc0:	d001      	beq.n	3cc6 <__vfprintf+0xb2>
    3cc2:	2300      	movs	r3, #0
    3cc4:	e00d      	b.n	3ce2 <__vfprintf+0xce>
    3cc6:	f8d8 3000 	ldr.w	r3, [r8]
    3cca:	f108 0104 	add.w	r1, r8, #4
    3cce:	2b00      	cmp	r3, #0
    3cd0:	bfbc      	itt	lt
    3cd2:	425b      	neglt	r3, r3
    3cd4:	f087 0701 	eorlt.w	r7, r7, #1
    3cd8:	1c95      	adds	r5, r2, #2
    3cda:	f892 9001 	ldrb.w	r9, [r2, #1]
    3cde:	4688      	mov	r8, r1
    3ce0:	e00a      	b.n	3cf8 <__vfprintf+0xe4>
    3ce2:	f1a9 0230 	sub.w	r2, r9, #48	; 0x30
    3ce6:	b2d1      	uxtb	r1, r2
    3ce8:	2909      	cmp	r1, #9
    3cea:	d805      	bhi.n	3cf8 <__vfprintf+0xe4>
    3cec:	210a      	movs	r1, #10
    3cee:	fb01 2303 	mla	r3, r1, r3, r2
    3cf2:	f815 9b01 	ldrb.w	r9, [r5], #1
    3cf6:	e7f4      	b.n	3ce2 <__vfprintf+0xce>
    3cf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3cfc:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
    3d00:	930f      	str	r3, [sp, #60]	; 0x3c
    3d02:	d124      	bne.n	3d4e <__vfprintf+0x13a>
    3d04:	f895 9000 	ldrb.w	r9, [r5]
    3d08:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    3d0c:	d003      	beq.n	3d16 <__vfprintf+0x102>
    3d0e:	2300      	movs	r3, #0
    3d10:	3501      	adds	r5, #1
    3d12:	9306      	str	r3, [sp, #24]
    3d14:	e008      	b.n	3d28 <__vfprintf+0x114>
    3d16:	f8d8 3000 	ldr.w	r3, [r8]
    3d1a:	f895 9001 	ldrb.w	r9, [r5, #1]
    3d1e:	9306      	str	r3, [sp, #24]
    3d20:	f108 0804 	add.w	r8, r8, #4
    3d24:	3502      	adds	r5, #2
    3d26:	e00c      	b.n	3d42 <__vfprintf+0x12e>
    3d28:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    3d2c:	b2da      	uxtb	r2, r3
    3d2e:	2a09      	cmp	r2, #9
    3d30:	d807      	bhi.n	3d42 <__vfprintf+0x12e>
    3d32:	9906      	ldr	r1, [sp, #24]
    3d34:	220a      	movs	r2, #10
    3d36:	fb02 3301 	mla	r3, r2, r1, r3
    3d3a:	f815 9b01 	ldrb.w	r9, [r5], #1
    3d3e:	9306      	str	r3, [sp, #24]
    3d40:	e7f2      	b.n	3d28 <__vfprintf+0x114>
    3d42:	9b06      	ldr	r3, [sp, #24]
    3d44:	2b00      	cmp	r3, #0
    3d46:	db02      	blt.n	3d4e <__vfprintf+0x13a>
    3d48:	f047 0710 	orr.w	r7, r7, #16
    3d4c:	e001      	b.n	3d52 <__vfprintf+0x13e>
    3d4e:	2300      	movs	r3, #0
    3d50:	9306      	str	r3, [sp, #24]
    3d52:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    3d56:	d10d      	bne.n	3d74 <__vfprintf+0x160>
    3d58:	f895 9000 	ldrb.w	r9, [r5]
    3d5c:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    3d60:	bf03      	ittte	eq
    3d62:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    3d66:	f047 0760 	orreq.w	r7, r7, #96	; 0x60
    3d6a:	3502      	addeq	r5, #2
    3d6c:	3501      	addne	r5, #1
    3d6e:	bf18      	it	ne
    3d70:	f047 0720 	orrne.w	r7, r7, #32
    3d74:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
    3d78:	d002      	beq.n	3d80 <__vfprintf+0x16c>
    3d7a:	f1b9 0f71 	cmp.w	r9, #113	; 0x71
    3d7e:	d104      	bne.n	3d8a <__vfprintf+0x176>
    3d80:	f895 9000 	ldrb.w	r9, [r5]
    3d84:	f047 0760 	orr.w	r7, r7, #96	; 0x60
    3d88:	e01f      	b.n	3dca <__vfprintf+0x1b6>
    3d8a:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    3d8e:	d10e      	bne.n	3dae <__vfprintf+0x19a>
    3d90:	f895 9000 	ldrb.w	r9, [r5]
    3d94:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    3d98:	bf03      	ittte	eq
    3d9a:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    3d9e:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
    3da2:	3502      	addeq	r5, #2
    3da4:	3501      	addne	r5, #1
    3da6:	bf18      	it	ne
    3da8:	f047 0780 	orrne.w	r7, r7, #128	; 0x80
    3dac:	e00e      	b.n	3dcc <__vfprintf+0x1b8>
    3dae:	f1b9 0f6a 	cmp.w	r9, #106	; 0x6a
    3db2:	d102      	bne.n	3dba <__vfprintf+0x1a6>
    3db4:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    3db8:	e005      	b.n	3dc6 <__vfprintf+0x1b2>
    3dba:	f1b9 0f7a 	cmp.w	r9, #122	; 0x7a
    3dbe:	d002      	beq.n	3dc6 <__vfprintf+0x1b2>
    3dc0:	f1b9 0f74 	cmp.w	r9, #116	; 0x74
    3dc4:	d102      	bne.n	3dcc <__vfprintf+0x1b8>
    3dc6:	f895 9000 	ldrb.w	r9, [r5]
    3dca:	3501      	adds	r5, #1
    3dcc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    3dd0:	dc25      	bgt.n	3e1e <__vfprintf+0x20a>
    3dd2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    3dd6:	f280 826e 	bge.w	42b6 <__vfprintf+0x6a2>
    3dda:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    3dde:	f000 826a 	beq.w	42b6 <__vfprintf+0x6a2>
    3de2:	dc0c      	bgt.n	3dfe <__vfprintf+0x1ea>
    3de4:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    3de8:	f000 825f 	beq.w	42aa <__vfprintf+0x696>
    3dec:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    3df0:	f000 8261 	beq.w	42b6 <__vfprintf+0x6a2>
    3df4:	f1b9 0f00 	cmp.w	r9, #0
    3df8:	f000 80b4 	beq.w	3f64 <__vfprintf+0x350>
    3dfc:	e031      	b.n	3e62 <__vfprintf+0x24e>
    3dfe:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    3e02:	f000 8252 	beq.w	42aa <__vfprintf+0x696>
    3e06:	dc04      	bgt.n	3e12 <__vfprintf+0x1fe>
    3e08:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    3e0c:	f000 8171 	beq.w	40f2 <__vfprintf+0x4de>
    3e10:	e027      	b.n	3e62 <__vfprintf+0x24e>
    3e12:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
    3e16:	d01e      	beq.n	3e56 <__vfprintf+0x242>
    3e18:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    3e1c:	e00c      	b.n	3e38 <__vfprintf+0x224>
    3e1e:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    3e22:	f000 81b4 	beq.w	418e <__vfprintf+0x57a>
    3e26:	dc0a      	bgt.n	3e3e <__vfprintf+0x22a>
    3e28:	f1b9 0f6e 	cmp.w	r9, #110	; 0x6e
    3e2c:	f000 809f 	beq.w	3f6e <__vfprintf+0x35a>
    3e30:	f300 81b6 	bgt.w	41a0 <__vfprintf+0x58c>
    3e34:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    3e38:	f000 81f4 	beq.w	4224 <__vfprintf+0x610>
    3e3c:	e011      	b.n	3e62 <__vfprintf+0x24e>
    3e3e:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    3e42:	f000 81cd 	beq.w	41e0 <__vfprintf+0x5cc>
    3e46:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    3e4a:	f000 8179 	beq.w	4140 <__vfprintf+0x52c>
    3e4e:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
    3e52:	d106      	bne.n	3e62 <__vfprintf+0x24e>
    3e54:	e0ae      	b.n	3fb4 <__vfprintf+0x3a0>
    3e56:	f108 0304 	add.w	r3, r8, #4
    3e5a:	930e      	str	r3, [sp, #56]	; 0x38
    3e5c:	f8d8 9000 	ldr.w	r9, [r8]
    3e60:	e001      	b.n	3e66 <__vfprintf+0x252>
    3e62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    3e66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3e68:	f103 3aff 	add.w	sl, r3, #4294967295
    3e6c:	f017 0301 	ands.w	r3, r7, #1
    3e70:	9306      	str	r3, [sp, #24]
    3e72:	d12e      	bne.n	3ed2 <__vfprintf+0x2be>
    3e74:	f417 7f00 	tst.w	r7, #512	; 0x200
    3e78:	bf14      	ite	ne
    3e7a:	f04f 0830 	movne.w	r8, #48	; 0x30
    3e7e:	f04f 0820 	moveq.w	r8, #32
    3e82:	2600      	movs	r6, #0
    3e84:	2700      	movs	r7, #0
    3e86:	9b05      	ldr	r3, [sp, #20]
    3e88:	199a      	adds	r2, r3, r6
    3e8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3e8c:	f1a3 0a02 	sub.w	sl, r3, #2
    3e90:	ebba 0a06 	subs.w	sl, sl, r6
    3e94:	d41c      	bmi.n	3ed0 <__vfprintf+0x2bc>
    3e96:	9b05      	ldr	r3, [sp, #20]
    3e98:	18f0      	adds	r0, r6, r3
    3e9a:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    3e9e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    3ea2:	4290      	cmp	r0, r2
    3ea4:	eb71 0303 	sbcs.w	r3, r1, r3
    3ea8:	da0e      	bge.n	3ec8 <__vfprintf+0x2b4>
    3eaa:	68a2      	ldr	r2, [r4, #8]
    3eac:	3a01      	subs	r2, #1
    3eae:	2a00      	cmp	r2, #0
    3eb0:	60a2      	str	r2, [r4, #8]
    3eb2:	db05      	blt.n	3ec0 <__vfprintf+0x2ac>
    3eb4:	6822      	ldr	r2, [r4, #0]
    3eb6:	1c51      	adds	r1, r2, #1
    3eb8:	6021      	str	r1, [r4, #0]
    3eba:	f882 8000 	strb.w	r8, [r2]
    3ebe:	e003      	b.n	3ec8 <__vfprintf+0x2b4>
    3ec0:	4640      	mov	r0, r8
    3ec2:	4621      	mov	r1, r4
    3ec4:	f000 fe86 	bl	4bd4 <__flsbuf>
    3ec8:	3601      	adds	r6, #1
    3eca:	f147 0700 	adc.w	r7, r7, #0
    3ece:	e7da      	b.n	3e86 <__vfprintf+0x272>
    3ed0:	9205      	str	r2, [sp, #20]
    3ed2:	9b05      	ldr	r3, [sp, #20]
    3ed4:	17d9      	asrs	r1, r3, #31
    3ed6:	461a      	mov	r2, r3
    3ed8:	f103 0b01 	add.w	fp, r3, #1
    3edc:	460b      	mov	r3, r1
    3ede:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    3ee2:	4282      	cmp	r2, r0
    3ee4:	418b      	sbcs	r3, r1
    3ee6:	da0e      	bge.n	3f06 <__vfprintf+0x2f2>
    3ee8:	68a3      	ldr	r3, [r4, #8]
    3eea:	3b01      	subs	r3, #1
    3eec:	2b00      	cmp	r3, #0
    3eee:	60a3      	str	r3, [r4, #8]
    3ef0:	db05      	blt.n	3efe <__vfprintf+0x2ea>
    3ef2:	6823      	ldr	r3, [r4, #0]
    3ef4:	1c5a      	adds	r2, r3, #1
    3ef6:	6022      	str	r2, [r4, #0]
    3ef8:	f883 9000 	strb.w	r9, [r3]
    3efc:	e003      	b.n	3f06 <__vfprintf+0x2f2>
    3efe:	4648      	mov	r0, r9
    3f00:	4621      	mov	r1, r4
    3f02:	f000 fe67 	bl	4bd4 <__flsbuf>
    3f06:	9b06      	ldr	r3, [sp, #24]
    3f08:	b91b      	cbnz	r3, 3f12 <__vfprintf+0x2fe>
    3f0a:	f8cd b014 	str.w	fp, [sp, #20]
    3f0e:	f000 bcc7 	b.w	48a0 <__vfprintf+0xc8c>
    3f12:	2600      	movs	r6, #0
    3f14:	2700      	movs	r7, #0
    3f16:	43f3      	mvns	r3, r6
    3f18:	eb13 0f0a 	cmn.w	r3, sl
    3f1c:	d41b      	bmi.n	3f56 <__vfprintf+0x342>
    3f1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    3f22:	eb16 020b 	adds.w	r2, r6, fp
    3f26:	eb47 73eb 	adc.w	r3, r7, fp, asr #31
    3f2a:	4282      	cmp	r2, r0
    3f2c:	418b      	sbcs	r3, r1
    3f2e:	da0e      	bge.n	3f4e <__vfprintf+0x33a>
    3f30:	68a3      	ldr	r3, [r4, #8]
    3f32:	3b01      	subs	r3, #1
    3f34:	2b00      	cmp	r3, #0
    3f36:	60a3      	str	r3, [r4, #8]
    3f38:	db05      	blt.n	3f46 <__vfprintf+0x332>
    3f3a:	6823      	ldr	r3, [r4, #0]
    3f3c:	1c5a      	adds	r2, r3, #1
    3f3e:	6022      	str	r2, [r4, #0]
    3f40:	2220      	movs	r2, #32
    3f42:	701a      	strb	r2, [r3, #0]
    3f44:	e003      	b.n	3f4e <__vfprintf+0x33a>
    3f46:	2020      	movs	r0, #32
    3f48:	4621      	mov	r1, r4
    3f4a:	f000 fe43 	bl	4bd4 <__flsbuf>
    3f4e:	3601      	adds	r6, #1
    3f50:	f147 0700 	adc.w	r7, r7, #0
    3f54:	e7df      	b.n	3f16 <__vfprintf+0x302>
    3f56:	465b      	mov	r3, fp
    3f58:	f1ba 0f00 	cmp.w	sl, #0
    3f5c:	bfa8      	it	ge
    3f5e:	4453      	addge	r3, sl
    3f60:	f000 bc9d 	b.w	489e <__vfprintf+0xc8a>
    3f64:	3d01      	subs	r5, #1
    3f66:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    3f6a:	f000 bc99 	b.w	48a0 <__vfprintf+0xc8c>
    3f6e:	f108 0304 	add.w	r3, r8, #4
    3f72:	f017 0f40 	tst.w	r7, #64	; 0x40
    3f76:	930e      	str	r3, [sp, #56]	; 0x38
    3f78:	f8d8 3000 	ldr.w	r3, [r8]
    3f7c:	d006      	beq.n	3f8c <__vfprintf+0x378>
    3f7e:	9a05      	ldr	r2, [sp, #20]
    3f80:	4610      	mov	r0, r2
    3f82:	17d1      	asrs	r1, r2, #31
    3f84:	e9c3 0100 	strd	r0, r1, [r3]
    3f88:	f000 bc8a 	b.w	48a0 <__vfprintf+0xc8c>
    3f8c:	06be      	lsls	r6, r7, #26
    3f8e:	d40d      	bmi.n	3fac <__vfprintf+0x398>
    3f90:	05f8      	lsls	r0, r7, #23
    3f92:	d504      	bpl.n	3f9e <__vfprintf+0x38a>
    3f94:	f89d 2014 	ldrb.w	r2, [sp, #20]
    3f98:	701a      	strb	r2, [r3, #0]
    3f9a:	f000 bc81 	b.w	48a0 <__vfprintf+0xc8c>
    3f9e:	0639      	lsls	r1, r7, #24
    3fa0:	d504      	bpl.n	3fac <__vfprintf+0x398>
    3fa2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    3fa6:	801a      	strh	r2, [r3, #0]
    3fa8:	f000 bc7a 	b.w	48a0 <__vfprintf+0xc8c>
    3fac:	9a05      	ldr	r2, [sp, #20]
    3fae:	601a      	str	r2, [r3, #0]
    3fb0:	f000 bc76 	b.w	48a0 <__vfprintf+0xc8c>
    3fb4:	f108 0304 	add.w	r3, r8, #4
    3fb8:	930e      	str	r3, [sp, #56]	; 0x38
    3fba:	f8d8 9000 	ldr.w	r9, [r8]
    3fbe:	4bab      	ldr	r3, [pc, #684]	; (426c <__vfprintf+0x658>)
    3fc0:	f1b9 0f00 	cmp.w	r9, #0
    3fc4:	bf08      	it	eq
    3fc6:	4699      	moveq	r9, r3
    3fc8:	4648      	mov	r0, r9
    3fca:	f000 fd81 	bl	4ad0 <strlen>
    3fce:	06fa      	lsls	r2, r7, #27
    3fd0:	4682      	mov	sl, r0
    3fd2:	d503      	bpl.n	3fdc <__vfprintf+0x3c8>
    3fd4:	9b06      	ldr	r3, [sp, #24]
    3fd6:	4298      	cmp	r0, r3
    3fd8:	bfa8      	it	ge
    3fda:	469a      	movge	sl, r3
    3fdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3fde:	ebca 0b03 	rsb	fp, sl, r3
    3fe2:	f017 0301 	ands.w	r3, r7, #1
    3fe6:	9306      	str	r3, [sp, #24]
    3fe8:	d131      	bne.n	404e <__vfprintf+0x43a>
    3fea:	f417 7f00 	tst.w	r7, #512	; 0x200
    3fee:	bf14      	ite	ne
    3ff0:	f04f 0830 	movne.w	r8, #48	; 0x30
    3ff4:	f04f 0820 	moveq.w	r8, #32
    3ff8:	2600      	movs	r6, #0
    3ffa:	2700      	movs	r7, #0
    3ffc:	f10b 32ff 	add.w	r2, fp, #4294967295
    4000:	1b91      	subs	r1, r2, r6
    4002:	2900      	cmp	r1, #0
    4004:	db1c      	blt.n	4040 <__vfprintf+0x42c>
    4006:	9b05      	ldr	r3, [sp, #20]
    4008:	18f0      	adds	r0, r6, r3
    400a:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    400e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    4012:	4290      	cmp	r0, r2
    4014:	eb71 0303 	sbcs.w	r3, r1, r3
    4018:	da0e      	bge.n	4038 <__vfprintf+0x424>
    401a:	68a2      	ldr	r2, [r4, #8]
    401c:	3a01      	subs	r2, #1
    401e:	2a00      	cmp	r2, #0
    4020:	60a2      	str	r2, [r4, #8]
    4022:	db05      	blt.n	4030 <__vfprintf+0x41c>
    4024:	6822      	ldr	r2, [r4, #0]
    4026:	1c51      	adds	r1, r2, #1
    4028:	6021      	str	r1, [r4, #0]
    402a:	f882 8000 	strb.w	r8, [r2]
    402e:	e003      	b.n	4038 <__vfprintf+0x424>
    4030:	4640      	mov	r0, r8
    4032:	4621      	mov	r1, r4
    4034:	f000 fdce 	bl	4bd4 <__flsbuf>
    4038:	3601      	adds	r6, #1
    403a:	f147 0700 	adc.w	r7, r7, #0
    403e:	e7dd      	b.n	3ffc <__vfprintf+0x3e8>
    4040:	9b05      	ldr	r3, [sp, #20]
    4042:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    4046:	445b      	add	r3, fp
    4048:	9305      	str	r3, [sp, #20]
    404a:	ebcb 0b02 	rsb	fp, fp, r2
    404e:	2600      	movs	r6, #0
    4050:	2700      	movs	r7, #0
    4052:	45b2      	cmp	sl, r6
    4054:	9b05      	ldr	r3, [sp, #20]
    4056:	dd1c      	ble.n	4092 <__vfprintf+0x47e>
    4058:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    405c:	18f2      	adds	r2, r6, r3
    405e:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    4062:	4282      	cmp	r2, r0
    4064:	418b      	sbcs	r3, r1
    4066:	da10      	bge.n	408a <__vfprintf+0x476>
    4068:	68a3      	ldr	r3, [r4, #8]
    406a:	3b01      	subs	r3, #1
    406c:	2b00      	cmp	r3, #0
    406e:	60a3      	str	r3, [r4, #8]
    4070:	eb09 0306 	add.w	r3, r9, r6
    4074:	db05      	blt.n	4082 <__vfprintf+0x46e>
    4076:	6822      	ldr	r2, [r4, #0]
    4078:	1c51      	adds	r1, r2, #1
    407a:	6021      	str	r1, [r4, #0]
    407c:	781b      	ldrb	r3, [r3, #0]
    407e:	7013      	strb	r3, [r2, #0]
    4080:	e003      	b.n	408a <__vfprintf+0x476>
    4082:	7818      	ldrb	r0, [r3, #0]
    4084:	4621      	mov	r1, r4
    4086:	f000 fda5 	bl	4bd4 <__flsbuf>
    408a:	3601      	adds	r6, #1
    408c:	f147 0700 	adc.w	r7, r7, #0
    4090:	e7df      	b.n	4052 <__vfprintf+0x43e>
    4092:	f1ba 0f00 	cmp.w	sl, #0
    4096:	bfa8      	it	ge
    4098:	4453      	addge	r3, sl
    409a:	9305      	str	r3, [sp, #20]
    409c:	9b06      	ldr	r3, [sp, #24]
    409e:	2b00      	cmp	r3, #0
    40a0:	f000 83fe 	beq.w	48a0 <__vfprintf+0xc8c>
    40a4:	2600      	movs	r6, #0
    40a6:	2700      	movs	r7, #0
    40a8:	43f3      	mvns	r3, r6
    40aa:	eb13 0f0b 	cmn.w	r3, fp
    40ae:	9b05      	ldr	r3, [sp, #20]
    40b0:	d41a      	bmi.n	40e8 <__vfprintf+0x4d4>
    40b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    40b6:	18f2      	adds	r2, r6, r3
    40b8:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    40bc:	4282      	cmp	r2, r0
    40be:	418b      	sbcs	r3, r1
    40c0:	da0e      	bge.n	40e0 <__vfprintf+0x4cc>
    40c2:	68a3      	ldr	r3, [r4, #8]
    40c4:	3b01      	subs	r3, #1
    40c6:	2b00      	cmp	r3, #0
    40c8:	60a3      	str	r3, [r4, #8]
    40ca:	db05      	blt.n	40d8 <__vfprintf+0x4c4>
    40cc:	6823      	ldr	r3, [r4, #0]
    40ce:	1c5a      	adds	r2, r3, #1
    40d0:	6022      	str	r2, [r4, #0]
    40d2:	2220      	movs	r2, #32
    40d4:	701a      	strb	r2, [r3, #0]
    40d6:	e003      	b.n	40e0 <__vfprintf+0x4cc>
    40d8:	2020      	movs	r0, #32
    40da:	4621      	mov	r1, r4
    40dc:	f000 fd7a 	bl	4bd4 <__flsbuf>
    40e0:	3601      	adds	r6, #1
    40e2:	f147 0700 	adc.w	r7, r7, #0
    40e6:	e7df      	b.n	40a8 <__vfprintf+0x494>
    40e8:	f1bb 0f00 	cmp.w	fp, #0
    40ec:	bfa8      	it	ge
    40ee:	445b      	addge	r3, fp
    40f0:	e3d5      	b.n	489e <__vfprintf+0xc8a>
    40f2:	067b      	lsls	r3, r7, #25
    40f4:	d509      	bpl.n	410a <__vfprintf+0x4f6>
    40f6:	f108 0807 	add.w	r8, r8, #7
    40fa:	f028 0807 	bic.w	r8, r8, #7
    40fe:	f108 0308 	add.w	r3, r8, #8
    4102:	930e      	str	r3, [sp, #56]	; 0x38
    4104:	e9d8 2300 	ldrd	r2, r3, [r8]
    4108:	e005      	b.n	4116 <__vfprintf+0x502>
    410a:	f108 0304 	add.w	r3, r8, #4
    410e:	f8d8 2000 	ldr.w	r2, [r8]
    4112:	930e      	str	r3, [sp, #56]	; 0x38
    4114:	2300      	movs	r3, #0
    4116:	063e      	lsls	r6, r7, #24
    4118:	d501      	bpl.n	411e <__vfprintf+0x50a>
    411a:	b292      	uxth	r2, r2
    411c:	e003      	b.n	4126 <__vfprintf+0x512>
    411e:	05f8      	lsls	r0, r7, #23
    4120:	d502      	bpl.n	4128 <__vfprintf+0x514>
    4122:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4126:	2300      	movs	r3, #0
    4128:	4951      	ldr	r1, [pc, #324]	; (4270 <__vfprintf+0x65c>)
    412a:	f017 0f08 	tst.w	r7, #8
    412e:	4851      	ldr	r0, [pc, #324]	; (4274 <__vfprintf+0x660>)
    4130:	bf08      	it	eq
    4132:	4608      	moveq	r0, r1
    4134:	06f9      	lsls	r1, r7, #27
    4136:	f140 80d6 	bpl.w	42e6 <__vfprintf+0x6d2>
    413a:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    413e:	e0d2      	b.n	42e6 <__vfprintf+0x6d2>
    4140:	067b      	lsls	r3, r7, #25
    4142:	d509      	bpl.n	4158 <__vfprintf+0x544>
    4144:	f108 0807 	add.w	r8, r8, #7
    4148:	f028 0807 	bic.w	r8, r8, #7
    414c:	f108 0308 	add.w	r3, r8, #8
    4150:	930e      	str	r3, [sp, #56]	; 0x38
    4152:	e9d8 2300 	ldrd	r2, r3, [r8]
    4156:	e005      	b.n	4164 <__vfprintf+0x550>
    4158:	f108 0304 	add.w	r3, r8, #4
    415c:	f8d8 2000 	ldr.w	r2, [r8]
    4160:	930e      	str	r3, [sp, #56]	; 0x38
    4162:	2300      	movs	r3, #0
    4164:	063e      	lsls	r6, r7, #24
    4166:	d501      	bpl.n	416c <__vfprintf+0x558>
    4168:	b292      	uxth	r2, r2
    416a:	e003      	b.n	4174 <__vfprintf+0x560>
    416c:	05f8      	lsls	r0, r7, #23
    416e:	d502      	bpl.n	4176 <__vfprintf+0x562>
    4170:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4174:	2300      	movs	r3, #0
    4176:	493e      	ldr	r1, [pc, #248]	; (4270 <__vfprintf+0x65c>)
    4178:	f017 0f08 	tst.w	r7, #8
    417c:	483e      	ldr	r0, [pc, #248]	; (4278 <__vfprintf+0x664>)
    417e:	bf08      	it	eq
    4180:	4608      	moveq	r0, r1
    4182:	06f9      	lsls	r1, r7, #27
    4184:	f140 80b1 	bpl.w	42ea <__vfprintf+0x6d6>
    4188:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    418c:	e0ad      	b.n	42ea <__vfprintf+0x6d6>
    418e:	f108 0304 	add.w	r3, r8, #4
    4192:	930e      	str	r3, [sp, #56]	; 0x38
    4194:	f8d8 2000 	ldr.w	r2, [r8]
    4198:	2300      	movs	r3, #0
    419a:	4938      	ldr	r1, [pc, #224]	; (427c <__vfprintf+0x668>)
    419c:	4836      	ldr	r0, [pc, #216]	; (4278 <__vfprintf+0x664>)
    419e:	e0a7      	b.n	42f0 <__vfprintf+0x6dc>
    41a0:	067e      	lsls	r6, r7, #25
    41a2:	d509      	bpl.n	41b8 <__vfprintf+0x5a4>
    41a4:	f108 0807 	add.w	r8, r8, #7
    41a8:	f028 0807 	bic.w	r8, r8, #7
    41ac:	f108 0308 	add.w	r3, r8, #8
    41b0:	930e      	str	r3, [sp, #56]	; 0x38
    41b2:	e9d8 2300 	ldrd	r2, r3, [r8]
    41b6:	e005      	b.n	41c4 <__vfprintf+0x5b0>
    41b8:	f108 0304 	add.w	r3, r8, #4
    41bc:	f8d8 2000 	ldr.w	r2, [r8]
    41c0:	930e      	str	r3, [sp, #56]	; 0x38
    41c2:	2300      	movs	r3, #0
    41c4:	0638      	lsls	r0, r7, #24
    41c6:	d501      	bpl.n	41cc <__vfprintf+0x5b8>
    41c8:	b292      	uxth	r2, r2
    41ca:	e003      	b.n	41d4 <__vfprintf+0x5c0>
    41cc:	05f9      	lsls	r1, r7, #23
    41ce:	d502      	bpl.n	41d6 <__vfprintf+0x5c2>
    41d0:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    41d4:	2300      	movs	r3, #0
    41d6:	f017 0f08 	tst.w	r7, #8
    41da:	4925      	ldr	r1, [pc, #148]	; (4270 <__vfprintf+0x65c>)
    41dc:	4828      	ldr	r0, [pc, #160]	; (4280 <__vfprintf+0x66c>)
    41de:	e059      	b.n	4294 <__vfprintf+0x680>
    41e0:	067e      	lsls	r6, r7, #25
    41e2:	d509      	bpl.n	41f8 <__vfprintf+0x5e4>
    41e4:	f108 0807 	add.w	r8, r8, #7
    41e8:	f028 0807 	bic.w	r8, r8, #7
    41ec:	f108 0308 	add.w	r3, r8, #8
    41f0:	930e      	str	r3, [sp, #56]	; 0x38
    41f2:	e9d8 2300 	ldrd	r2, r3, [r8]
    41f6:	e005      	b.n	4204 <__vfprintf+0x5f0>
    41f8:	f108 0304 	add.w	r3, r8, #4
    41fc:	f8d8 2000 	ldr.w	r2, [r8]
    4200:	930e      	str	r3, [sp, #56]	; 0x38
    4202:	2300      	movs	r3, #0
    4204:	0638      	lsls	r0, r7, #24
    4206:	d501      	bpl.n	420c <__vfprintf+0x5f8>
    4208:	b292      	uxth	r2, r2
    420a:	e003      	b.n	4214 <__vfprintf+0x600>
    420c:	05f9      	lsls	r1, r7, #23
    420e:	d502      	bpl.n	4216 <__vfprintf+0x602>
    4210:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4214:	2300      	movs	r3, #0
    4216:	f017 0110 	ands.w	r1, r7, #16
    421a:	d068      	beq.n	42ee <__vfprintf+0x6da>
    421c:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4220:	2100      	movs	r1, #0
    4222:	e064      	b.n	42ee <__vfprintf+0x6da>
    4224:	067b      	lsls	r3, r7, #25
    4226:	d509      	bpl.n	423c <__vfprintf+0x628>
    4228:	f108 0807 	add.w	r8, r8, #7
    422c:	f028 0807 	bic.w	r8, r8, #7
    4230:	f108 0308 	add.w	r3, r8, #8
    4234:	930e      	str	r3, [sp, #56]	; 0x38
    4236:	e9d8 2300 	ldrd	r2, r3, [r8]
    423a:	e005      	b.n	4248 <__vfprintf+0x634>
    423c:	f8d8 2000 	ldr.w	r2, [r8]
    4240:	f108 0304 	add.w	r3, r8, #4
    4244:	930e      	str	r3, [sp, #56]	; 0x38
    4246:	17d3      	asrs	r3, r2, #31
    4248:	063e      	lsls	r6, r7, #24
    424a:	d501      	bpl.n	4250 <__vfprintf+0x63c>
    424c:	b212      	sxth	r2, r2
    424e:	e002      	b.n	4256 <__vfprintf+0x642>
    4250:	05f8      	lsls	r0, r7, #23
    4252:	d501      	bpl.n	4258 <__vfprintf+0x644>
    4254:	b252      	sxtb	r2, r2
    4256:	17d3      	asrs	r3, r2, #31
    4258:	2a00      	cmp	r2, #0
    425a:	f173 0100 	sbcs.w	r1, r3, #0
    425e:	da13      	bge.n	4288 <__vfprintf+0x674>
    4260:	4252      	negs	r2, r2
    4262:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4266:	4807      	ldr	r0, [pc, #28]	; (4284 <__vfprintf+0x670>)
    4268:	e018      	b.n	429c <__vfprintf+0x688>
    426a:	bf00      	nop
    426c:	000065ac 	.word	0x000065ac
    4270:	000065ff 	.word	0x000065ff
    4274:	000065b3 	.word	0x000065b3
    4278:	000065b6 	.word	0x000065b6
    427c:	000065cc 	.word	0x000065cc
    4280:	000065b9 	.word	0x000065b9
    4284:	000065a6 	.word	0x000065a6
    4288:	07b9      	lsls	r1, r7, #30
    428a:	d406      	bmi.n	429a <__vfprintf+0x686>
    428c:	49b6      	ldr	r1, [pc, #728]	; (4568 <__vfprintf+0x954>)
    428e:	48b7      	ldr	r0, [pc, #732]	; (456c <__vfprintf+0x958>)
    4290:	f017 0f04 	tst.w	r7, #4
    4294:	bf08      	it	eq
    4296:	4608      	moveq	r0, r1
    4298:	e000      	b.n	429c <__vfprintf+0x688>
    429a:	48b5      	ldr	r0, [pc, #724]	; (4570 <__vfprintf+0x95c>)
    429c:	f017 0110 	ands.w	r1, r7, #16
    42a0:	d026      	beq.n	42f0 <__vfprintf+0x6dc>
    42a2:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    42a6:	2100      	movs	r1, #0
    42a8:	e022      	b.n	42f0 <__vfprintf+0x6dc>
    42aa:	06fb      	lsls	r3, r7, #27
    42ac:	bf5e      	ittt	pl
    42ae:	230d      	movpl	r3, #13
    42b0:	f047 0710 	orrpl.w	r7, r7, #16
    42b4:	9306      	strpl	r3, [sp, #24]
    42b6:	9b06      	ldr	r3, [sp, #24]
    42b8:	f017 0f10 	tst.w	r7, #16
    42bc:	f108 0807 	add.w	r8, r8, #7
    42c0:	bf08      	it	eq
    42c2:	2306      	moveq	r3, #6
    42c4:	f028 0807 	bic.w	r8, r8, #7
    42c8:	9306      	str	r3, [sp, #24]
    42ca:	2100      	movs	r1, #0
    42cc:	f108 0308 	add.w	r3, r8, #8
    42d0:	930e      	str	r3, [sp, #56]	; 0x38
    42d2:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
    42d6:	e9d8 2300 	ldrd	r2, r3, [r8]
    42da:	4608      	mov	r0, r1
    42dc:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
    42e0:	2200      	movs	r2, #0
    42e2:	2300      	movs	r3, #0
    42e4:	e004      	b.n	42f0 <__vfprintf+0x6dc>
    42e6:	49a3      	ldr	r1, [pc, #652]	; (4574 <__vfprintf+0x960>)
    42e8:	e002      	b.n	42f0 <__vfprintf+0x6dc>
    42ea:	49a3      	ldr	r1, [pc, #652]	; (4578 <__vfprintf+0x964>)
    42ec:	e000      	b.n	42f0 <__vfprintf+0x6dc>
    42ee:	489e      	ldr	r0, [pc, #632]	; (4568 <__vfprintf+0x954>)
    42f0:	9e05      	ldr	r6, [sp, #20]
    42f2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    42f6:	ebba 0a06 	subs.w	sl, sl, r6
    42fa:	eb6b 7be6 	sbc.w	fp, fp, r6, asr #31
    42fe:	e9cd ab08 	strd	sl, fp, [sp, #32]
    4302:	9e06      	ldr	r6, [sp, #24]
    4304:	901f      	str	r0, [sp, #124]	; 0x7c
    4306:	f04f 30ff 	mov.w	r0, #4294967295
    430a:	9020      	str	r0, [sp, #128]	; 0x80
    430c:	9021      	str	r0, [sp, #132]	; 0x84
    430e:	961e      	str	r6, [sp, #120]	; 0x78
    4310:	2000      	movs	r0, #0
    4312:	f04f 0e55 	mov.w	lr, #85	; 0x55
    4316:	ae24      	add	r6, sp, #144	; 0x90
    4318:	f800 e006 	strb.w	lr, [r0, r6]
    431c:	3001      	adds	r0, #1
    431e:	2820      	cmp	r0, #32
    4320:	d1f7      	bne.n	4312 <__vfprintf+0x6fe>
    4322:	f417 6f82 	tst.w	r7, #1040	; 0x410
    4326:	bf04      	itt	eq
    4328:	2001      	moveq	r0, #1
    432a:	901e      	streq	r0, [sp, #120]	; 0x78
    432c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    4330:	dc1b      	bgt.n	436a <__vfprintf+0x756>
    4332:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    4336:	f280 80d4 	bge.w	44e2 <__vfprintf+0x8ce>
    433a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    433e:	f000 80d0 	beq.w	44e2 <__vfprintf+0x8ce>
    4342:	dc08      	bgt.n	4356 <__vfprintf+0x742>
    4344:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    4348:	f000 80cb 	beq.w	44e2 <__vfprintf+0x8ce>
    434c:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    4350:	f040 80d7 	bne.w	4502 <__vfprintf+0x8ee>
    4354:	e0c5      	b.n	44e2 <__vfprintf+0x8ce>
    4356:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    435a:	f000 80c2 	beq.w	44e2 <__vfprintf+0x8ce>
    435e:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    4362:	d017      	beq.n	4394 <__vfprintf+0x780>
    4364:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    4368:	e011      	b.n	438e <__vfprintf+0x77a>
    436a:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    436e:	d014      	beq.n	439a <__vfprintf+0x786>
    4370:	dc08      	bgt.n	4384 <__vfprintf+0x770>
    4372:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    4376:	d00d      	beq.n	4394 <__vfprintf+0x780>
    4378:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
    437c:	f040 80c1 	bne.w	4502 <__vfprintf+0x8ee>
    4380:	2100      	movs	r1, #0
    4382:	e020      	b.n	43c6 <__vfprintf+0x7b2>
    4384:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    4388:	d004      	beq.n	4394 <__vfprintf+0x780>
    438a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    438e:	f040 80b8 	bne.w	4502 <__vfprintf+0x8ee>
    4392:	e002      	b.n	439a <__vfprintf+0x786>
    4394:	f04f 0e00 	mov.w	lr, #0
    4398:	e027      	b.n	43ea <__vfprintf+0x7d6>
    439a:	2000      	movs	r0, #0
    439c:	ea52 0e03 	orrs.w	lr, r2, r3
    43a0:	4606      	mov	r6, r0
    43a2:	f000 80af 	beq.w	4504 <__vfprintf+0x8f0>
    43a6:	f002 060f 	and.w	r6, r2, #15
    43aa:	f811 e006 	ldrb.w	lr, [r1, r6]
    43ae:	ae24      	add	r6, sp, #144	; 0x90
    43b0:	f800 e006 	strb.w	lr, [r0, r6]
    43b4:	0916      	lsrs	r6, r2, #4
    43b6:	ea46 7603 	orr.w	r6, r6, r3, lsl #28
    43ba:	ea4f 1e13 	mov.w	lr, r3, lsr #4
    43be:	4632      	mov	r2, r6
    43c0:	4673      	mov	r3, lr
    43c2:	3001      	adds	r0, #1
    43c4:	e7ea      	b.n	439c <__vfprintf+0x788>
    43c6:	ea52 0003 	orrs.w	r0, r2, r3
    43ca:	460e      	mov	r6, r1
    43cc:	f000 809a 	beq.w	4504 <__vfprintf+0x8f0>
    43d0:	f002 0007 	and.w	r0, r2, #7
    43d4:	3030      	adds	r0, #48	; 0x30
    43d6:	ae24      	add	r6, sp, #144	; 0x90
    43d8:	5588      	strb	r0, [r1, r6]
    43da:	08d0      	lsrs	r0, r2, #3
    43dc:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
    43e0:	08de      	lsrs	r6, r3, #3
    43e2:	4602      	mov	r2, r0
    43e4:	4633      	mov	r3, r6
    43e6:	3101      	adds	r1, #1
    43e8:	e7ed      	b.n	43c6 <__vfprintf+0x7b2>
    43ea:	ea52 0103 	orrs.w	r1, r2, r3
    43ee:	4676      	mov	r6, lr
    43f0:	f000 8088 	beq.w	4504 <__vfprintf+0x8f0>
    43f4:	0891      	lsrs	r1, r2, #2
    43f6:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
    43fa:	9118      	str	r1, [sp, #96]	; 0x60
    43fc:	0899      	lsrs	r1, r3, #2
    43fe:	9119      	str	r1, [sp, #100]	; 0x64
    4400:	0859      	lsrs	r1, r3, #1
    4402:	ea4f 0032 	mov.w	r0, r2, rrx
    4406:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    440a:	eb18 0800 	adds.w	r8, r8, r0
    440e:	4640      	mov	r0, r8
    4410:	eb49 0901 	adc.w	r9, r9, r1
    4414:	4649      	mov	r1, r9
    4416:	0906      	lsrs	r6, r0, #4
    4418:	ea46 7609 	orr.w	r6, r6, r9, lsl #28
    441c:	9610      	str	r6, [sp, #64]	; 0x40
    441e:	090e      	lsrs	r6, r1, #4
    4420:	9611      	str	r6, [sp, #68]	; 0x44
    4422:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
    4426:	eb18 0800 	adds.w	r8, r8, r0
    442a:	4640      	mov	r0, r8
    442c:	eb49 0901 	adc.w	r9, r9, r1
    4430:	4649      	mov	r1, r9
    4432:	0a06      	lsrs	r6, r0, #8
    4434:	ea46 6609 	orr.w	r6, r6, r9, lsl #24
    4438:	9612      	str	r6, [sp, #72]	; 0x48
    443a:	0a0e      	lsrs	r6, r1, #8
    443c:	9613      	str	r6, [sp, #76]	; 0x4c
    443e:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    4442:	eb18 0800 	adds.w	r8, r8, r0
    4446:	4640      	mov	r0, r8
    4448:	eb49 0901 	adc.w	r9, r9, r1
    444c:	4649      	mov	r1, r9
    444e:	0c06      	lsrs	r6, r0, #16
    4450:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
    4454:	9614      	str	r6, [sp, #80]	; 0x50
    4456:	0c0e      	lsrs	r6, r1, #16
    4458:	9615      	str	r6, [sp, #84]	; 0x54
    445a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    445e:	eb18 0800 	adds.w	r8, r8, r0
    4462:	eb49 0901 	adc.w	r9, r9, r1
    4466:	4640      	mov	r0, r8
    4468:	4649      	mov	r1, r9
    446a:	2600      	movs	r6, #0
    446c:	961b      	str	r6, [sp, #108]	; 0x6c
    446e:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    4472:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    4476:	eb18 0800 	adds.w	r8, r8, r0
    447a:	eb49 0901 	adc.w	r9, r9, r1
    447e:	4640      	mov	r0, r8
    4480:	4649      	mov	r1, r9
    4482:	08c6      	lsrs	r6, r0, #3
    4484:	08c9      	lsrs	r1, r1, #3
    4486:	1d90      	adds	r0, r2, #6
    4488:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
    448c:	910d      	str	r1, [sp, #52]	; 0x34
    448e:	f143 0100 	adc.w	r1, r3, #0
    4492:	230a      	movs	r3, #10
    4494:	fba6 8903 	umull	r8, r9, r6, r3
    4498:	960c      	str	r6, [sp, #48]	; 0x30
    449a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    449c:	ebb0 0008 	subs.w	r0, r0, r8
    44a0:	fb03 9906 	mla	r9, r3, r6, r9
    44a4:	ea4f 1610 	mov.w	r6, r0, lsr #4
    44a8:	eb61 0109 	sbc.w	r1, r1, r9
    44ac:	ea46 7601 	orr.w	r6, r6, r1, lsl #28
    44b0:	0909      	lsrs	r1, r1, #4
    44b2:	9616      	str	r6, [sp, #88]	; 0x58
    44b4:	9117      	str	r1, [sp, #92]	; 0x5c
    44b6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    44ba:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
    44be:	eb10 0008 	adds.w	r0, r0, r8
    44c2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    44c6:	f102 0230 	add.w	r2, r2, #48	; 0x30
    44ca:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    44ce:	eb41 0109 	adc.w	r1, r1, r9
    44d2:	ab24      	add	r3, sp, #144	; 0x90
    44d4:	f80e 2003 	strb.w	r2, [lr, r3]
    44d8:	f10e 0e01 	add.w	lr, lr, #1
    44dc:	4602      	mov	r2, r0
    44de:	460b      	mov	r3, r1
    44e0:	e783      	b.n	43ea <__vfprintf+0x7d6>
    44e2:	ab1f      	add	r3, sp, #124	; 0x7c
    44e4:	9300      	str	r3, [sp, #0]
    44e6:	ab1e      	add	r3, sp, #120	; 0x78
    44e8:	9301      	str	r3, [sp, #4]
    44ea:	ab20      	add	r3, sp, #128	; 0x80
    44ec:	9302      	str	r3, [sp, #8]
    44ee:	ab21      	add	r3, sp, #132	; 0x84
    44f0:	9303      	str	r3, [sp, #12]
    44f2:	9e38      	ldr	r6, [sp, #224]	; 0xe0
    44f4:	4648      	mov	r0, r9
    44f6:	a922      	add	r1, sp, #136	; 0x88
    44f8:	aa24      	add	r2, sp, #144	; 0x90
    44fa:	463b      	mov	r3, r7
    44fc:	47b0      	blx	r6
    44fe:	4606      	mov	r6, r0
    4500:	e000      	b.n	4504 <__vfprintf+0x8f0>
    4502:	2600      	movs	r6, #0
    4504:	f417 6380 	ands.w	r3, r7, #1024	; 0x400
    4508:	931c      	str	r3, [sp, #112]	; 0x70
    450a:	d00e      	beq.n	452a <__vfprintf+0x916>
    450c:	2300      	movs	r3, #0
    450e:	931e      	str	r3, [sp, #120]	; 0x78
    4510:	9b20      	ldr	r3, [sp, #128]	; 0x80
    4512:	2b00      	cmp	r3, #0
    4514:	bfc4      	itt	gt
    4516:	f103 33ff 	addgt.w	r3, r3, #4294967295
    451a:	931e      	strgt	r3, [sp, #120]	; 0x78
    451c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    451e:	2b00      	cmp	r3, #0
    4520:	dd08      	ble.n	4534 <__vfprintf+0x920>
    4522:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    4524:	3b01      	subs	r3, #1
    4526:	4413      	add	r3, r2
    4528:	e003      	b.n	4532 <__vfprintf+0x91e>
    452a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    452c:	1b9b      	subs	r3, r3, r6
    452e:	bf48      	it	mi
    4530:	2300      	movmi	r3, #0
    4532:	931e      	str	r3, [sp, #120]	; 0x78
    4534:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    4536:	981f      	ldr	r0, [sp, #124]	; 0x7c
    4538:	eb06 0803 	add.w	r8, r6, r3
    453c:	f000 fac8 	bl	4ad0 <strlen>
    4540:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4542:	ebc8 0b03 	rsb	fp, r8, r3
    4546:	f007 0301 	and.w	r3, r7, #1
    454a:	930f      	str	r3, [sp, #60]	; 0x3c
    454c:	f240 2301 	movw	r3, #513	; 0x201
    4550:	403b      	ands	r3, r7
    4552:	ebc0 0b0b 	rsb	fp, r0, fp
    4556:	b18b      	cbz	r3, 457c <__vfprintf+0x968>
    4558:	f04f 0a00 	mov.w	sl, #0
    455c:	f04f 0800 	mov.w	r8, #0
    4560:	f04f 0900 	mov.w	r9, #0
    4564:	e040      	b.n	45e8 <__vfprintf+0x9d4>
    4566:	bf00      	nop
    4568:	000065ff 	.word	0x000065ff
    456c:	00006576 	.word	0x00006576
    4570:	00006574 	.word	0x00006574
    4574:	000065bb 	.word	0x000065bb
    4578:	000065cc 	.word	0x000065cc
    457c:	f04f 0800 	mov.w	r8, #0
    4580:	f04f 0900 	mov.w	r9, #0
    4584:	f10b 33ff 	add.w	r3, fp, #4294967295
    4588:	ebc8 0203 	rsb	r2, r8, r3
    458c:	2a00      	cmp	r2, #0
    458e:	db19      	blt.n	45c4 <__vfprintf+0x9b0>
    4590:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    4594:	4590      	cmp	r8, r2
    4596:	eb79 0303 	sbcs.w	r3, r9, r3
    459a:	da0e      	bge.n	45ba <__vfprintf+0x9a6>
    459c:	68a3      	ldr	r3, [r4, #8]
    459e:	3b01      	subs	r3, #1
    45a0:	2b00      	cmp	r3, #0
    45a2:	60a3      	str	r3, [r4, #8]
    45a4:	db05      	blt.n	45b2 <__vfprintf+0x99e>
    45a6:	6823      	ldr	r3, [r4, #0]
    45a8:	1c5a      	adds	r2, r3, #1
    45aa:	6022      	str	r2, [r4, #0]
    45ac:	2220      	movs	r2, #32
    45ae:	701a      	strb	r2, [r3, #0]
    45b0:	e003      	b.n	45ba <__vfprintf+0x9a6>
    45b2:	2020      	movs	r0, #32
    45b4:	4621      	mov	r1, r4
    45b6:	f000 fb0d 	bl	4bd4 <__flsbuf>
    45ba:	f118 0801 	adds.w	r8, r8, #1
    45be:	f149 0900 	adc.w	r9, r9, #0
    45c2:	e7df      	b.n	4584 <__vfprintf+0x970>
    45c4:	ea2b 7aeb 	bic.w	sl, fp, fp, asr #31
    45c8:	ebca 0b03 	rsb	fp, sl, r3
    45cc:	e7c6      	b.n	455c <__vfprintf+0x948>
    45ce:	eb18 020a 	adds.w	r2, r8, sl
    45d2:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    45d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    45da:	4282      	cmp	r2, r0
    45dc:	418b      	sbcs	r3, r1
    45de:	db0e      	blt.n	45fe <__vfprintf+0x9ea>
    45e0:	f118 0801 	adds.w	r8, r8, #1
    45e4:	f149 0900 	adc.w	r9, r9, #0
    45e8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    45ea:	eb0a 0308 	add.w	r3, sl, r8
    45ee:	1c51      	adds	r1, r2, #1
    45f0:	911f      	str	r1, [sp, #124]	; 0x7c
    45f2:	f892 e000 	ldrb.w	lr, [r2]
    45f6:	f1be 0f00 	cmp.w	lr, #0
    45fa:	d1e8      	bne.n	45ce <__vfprintf+0x9ba>
    45fc:	e00f      	b.n	461e <__vfprintf+0xa0a>
    45fe:	68a3      	ldr	r3, [r4, #8]
    4600:	3b01      	subs	r3, #1
    4602:	2b00      	cmp	r3, #0
    4604:	60a3      	str	r3, [r4, #8]
    4606:	db05      	blt.n	4614 <__vfprintf+0xa00>
    4608:	6823      	ldr	r3, [r4, #0]
    460a:	1c5a      	adds	r2, r3, #1
    460c:	6022      	str	r2, [r4, #0]
    460e:	f883 e000 	strb.w	lr, [r3]
    4612:	e7e5      	b.n	45e0 <__vfprintf+0x9cc>
    4614:	4670      	mov	r0, lr
    4616:	4621      	mov	r1, r4
    4618:	f000 fadc 	bl	4bd4 <__flsbuf>
    461c:	e7e0      	b.n	45e0 <__vfprintf+0x9cc>
    461e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4620:	469a      	mov	sl, r3
    4622:	2a00      	cmp	r2, #0
    4624:	d135      	bne.n	4692 <__vfprintf+0xa7e>
    4626:	f417 7f00 	tst.w	r7, #512	; 0x200
    462a:	bf14      	ite	ne
    462c:	2730      	movne	r7, #48	; 0x30
    462e:	2720      	moveq	r7, #32
    4630:	2000      	movs	r0, #0
    4632:	2100      	movs	r1, #0
    4634:	e9cd 0106 	strd	r0, r1, [sp, #24]
    4638:	9906      	ldr	r1, [sp, #24]
    463a:	f10b 32ff 	add.w	r2, fp, #4294967295
    463e:	1a51      	subs	r1, r2, r1
    4640:	2900      	cmp	r1, #0
    4642:	db20      	blt.n	4686 <__vfprintf+0xa72>
    4644:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    4648:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    464c:	18c0      	adds	r0, r0, r3
    464e:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
    4652:	4540      	cmp	r0, r8
    4654:	eb71 0209 	sbcs.w	r2, r1, r9
    4658:	da0f      	bge.n	467a <__vfprintf+0xa66>
    465a:	68a2      	ldr	r2, [r4, #8]
    465c:	3a01      	subs	r2, #1
    465e:	2a00      	cmp	r2, #0
    4660:	60a2      	str	r2, [r4, #8]
    4662:	db04      	blt.n	466e <__vfprintf+0xa5a>
    4664:	6822      	ldr	r2, [r4, #0]
    4666:	1c51      	adds	r1, r2, #1
    4668:	6021      	str	r1, [r4, #0]
    466a:	7017      	strb	r7, [r2, #0]
    466c:	e005      	b.n	467a <__vfprintf+0xa66>
    466e:	4638      	mov	r0, r7
    4670:	4621      	mov	r1, r4
    4672:	931d      	str	r3, [sp, #116]	; 0x74
    4674:	f000 faae 	bl	4bd4 <__flsbuf>
    4678:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    467a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    467e:	3001      	adds	r0, #1
    4680:	f141 0100 	adc.w	r1, r1, #0
    4684:	e7d6      	b.n	4634 <__vfprintf+0xa20>
    4686:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    468a:	eb03 0a0b 	add.w	sl, r3, fp
    468e:	ebcb 0b02 	rsb	fp, fp, r2
    4692:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4694:	2b00      	cmp	r3, #0
    4696:	d07c      	beq.n	4792 <__vfprintf+0xb7e>
    4698:	2700      	movs	r7, #0
    469a:	42b7      	cmp	r7, r6
    469c:	f280 80d5 	bge.w	484a <__vfprintf+0xc36>
    46a0:	ab24      	add	r3, sp, #144	; 0x90
    46a2:	f817 e003 	ldrb.w	lr, [r7, r3]
    46a6:	f1be 0f3c 	cmp.w	lr, #60	; 0x3c
    46aa:	d007      	beq.n	46bc <__vfprintf+0xaa8>
    46ac:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
    46b0:	d151      	bne.n	4756 <__vfprintf+0xb42>
    46b2:	f04f 0800 	mov.w	r8, #0
    46b6:	f04f 0900 	mov.w	r9, #0
    46ba:	e034      	b.n	4726 <__vfprintf+0xb12>
    46bc:	f04f 0800 	mov.w	r8, #0
    46c0:	f04f 0900 	mov.w	r9, #0
    46c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
    46c6:	eb0a 0308 	add.w	r3, sl, r8
    46ca:	3a01      	subs	r2, #1
    46cc:	2a00      	cmp	r2, #0
    46ce:	9220      	str	r2, [sp, #128]	; 0x80
    46d0:	db5c      	blt.n	478c <__vfprintf+0xb78>
    46d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    46d6:	eb18 020a 	adds.w	r2, r8, sl
    46da:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    46de:	4282      	cmp	r2, r0
    46e0:	418b      	sbcs	r3, r1
    46e2:	da0e      	bge.n	4702 <__vfprintf+0xaee>
    46e4:	68a3      	ldr	r3, [r4, #8]
    46e6:	3b01      	subs	r3, #1
    46e8:	2b00      	cmp	r3, #0
    46ea:	60a3      	str	r3, [r4, #8]
    46ec:	db05      	blt.n	46fa <__vfprintf+0xae6>
    46ee:	6823      	ldr	r3, [r4, #0]
    46f0:	1c5a      	adds	r2, r3, #1
    46f2:	6022      	str	r2, [r4, #0]
    46f4:	2230      	movs	r2, #48	; 0x30
    46f6:	701a      	strb	r2, [r3, #0]
    46f8:	e003      	b.n	4702 <__vfprintf+0xaee>
    46fa:	2030      	movs	r0, #48	; 0x30
    46fc:	4621      	mov	r1, r4
    46fe:	f000 fa69 	bl	4bd4 <__flsbuf>
    4702:	f118 0801 	adds.w	r8, r8, #1
    4706:	f149 0900 	adc.w	r9, r9, #0
    470a:	e7db      	b.n	46c4 <__vfprintf+0xab0>
    470c:	eb18 020a 	adds.w	r2, r8, sl
    4710:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    4714:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4718:	4282      	cmp	r2, r0
    471a:	418b      	sbcs	r3, r1
    471c:	db0b      	blt.n	4736 <__vfprintf+0xb22>
    471e:	f118 0801 	adds.w	r8, r8, #1
    4722:	f149 0900 	adc.w	r9, r9, #0
    4726:	9a21      	ldr	r2, [sp, #132]	; 0x84
    4728:	eb0a 0308 	add.w	r3, sl, r8
    472c:	3a01      	subs	r2, #1
    472e:	2a00      	cmp	r2, #0
    4730:	9221      	str	r2, [sp, #132]	; 0x84
    4732:	daeb      	bge.n	470c <__vfprintf+0xaf8>
    4734:	e02a      	b.n	478c <__vfprintf+0xb78>
    4736:	68a3      	ldr	r3, [r4, #8]
    4738:	3b01      	subs	r3, #1
    473a:	2b00      	cmp	r3, #0
    473c:	60a3      	str	r3, [r4, #8]
    473e:	db05      	blt.n	474c <__vfprintf+0xb38>
    4740:	6823      	ldr	r3, [r4, #0]
    4742:	1c5a      	adds	r2, r3, #1
    4744:	6022      	str	r2, [r4, #0]
    4746:	2230      	movs	r2, #48	; 0x30
    4748:	701a      	strb	r2, [r3, #0]
    474a:	e7e8      	b.n	471e <__vfprintf+0xb0a>
    474c:	4621      	mov	r1, r4
    474e:	2030      	movs	r0, #48	; 0x30
    4750:	f000 fa40 	bl	4bd4 <__flsbuf>
    4754:	e7e3      	b.n	471e <__vfprintf+0xb0a>
    4756:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    475a:	ea4f 79ea 	mov.w	r9, sl, asr #31
    475e:	4582      	cmp	sl, r0
    4760:	eb79 0201 	sbcs.w	r2, r9, r1
    4764:	f10a 0301 	add.w	r3, sl, #1
    4768:	da10      	bge.n	478c <__vfprintf+0xb78>
    476a:	68a2      	ldr	r2, [r4, #8]
    476c:	3a01      	subs	r2, #1
    476e:	2a00      	cmp	r2, #0
    4770:	60a2      	str	r2, [r4, #8]
    4772:	db05      	blt.n	4780 <__vfprintf+0xb6c>
    4774:	6822      	ldr	r2, [r4, #0]
    4776:	1c51      	adds	r1, r2, #1
    4778:	6021      	str	r1, [r4, #0]
    477a:	f882 e000 	strb.w	lr, [r2]
    477e:	e005      	b.n	478c <__vfprintf+0xb78>
    4780:	4670      	mov	r0, lr
    4782:	4621      	mov	r1, r4
    4784:	9306      	str	r3, [sp, #24]
    4786:	f000 fa25 	bl	4bd4 <__flsbuf>
    478a:	9b06      	ldr	r3, [sp, #24]
    478c:	3701      	adds	r7, #1
    478e:	469a      	mov	sl, r3
    4790:	e783      	b.n	469a <__vfprintf+0xa86>
    4792:	f04f 0800 	mov.w	r8, #0
    4796:	f04f 0900 	mov.w	r9, #0
    479a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    479c:	eb0a 0708 	add.w	r7, sl, r8
    47a0:	3b01      	subs	r3, #1
    47a2:	2b00      	cmp	r3, #0
    47a4:	931e      	str	r3, [sp, #120]	; 0x78
    47a6:	db1c      	blt.n	47e2 <__vfprintf+0xbce>
    47a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    47ac:	eb18 020a 	adds.w	r2, r8, sl
    47b0:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    47b4:	4282      	cmp	r2, r0
    47b6:	418b      	sbcs	r3, r1
    47b8:	da0e      	bge.n	47d8 <__vfprintf+0xbc4>
    47ba:	68a3      	ldr	r3, [r4, #8]
    47bc:	3b01      	subs	r3, #1
    47be:	2b00      	cmp	r3, #0
    47c0:	60a3      	str	r3, [r4, #8]
    47c2:	db05      	blt.n	47d0 <__vfprintf+0xbbc>
    47c4:	6823      	ldr	r3, [r4, #0]
    47c6:	1c5a      	adds	r2, r3, #1
    47c8:	6022      	str	r2, [r4, #0]
    47ca:	2230      	movs	r2, #48	; 0x30
    47cc:	701a      	strb	r2, [r3, #0]
    47ce:	e003      	b.n	47d8 <__vfprintf+0xbc4>
    47d0:	2030      	movs	r0, #48	; 0x30
    47d2:	4621      	mov	r1, r4
    47d4:	f000 f9fe 	bl	4bd4 <__flsbuf>
    47d8:	f118 0801 	adds.w	r8, r8, #1
    47dc:	f149 0900 	adc.w	r9, r9, #0
    47e0:	e7db      	b.n	479a <__vfprintf+0xb86>
    47e2:	ab2c      	add	r3, sp, #176	; 0xb0
    47e4:	eb03 0a06 	add.w	sl, r3, r6
    47e8:	f1aa 0a21 	sub.w	sl, sl, #33	; 0x21
    47ec:	f04f 0800 	mov.w	r8, #0
    47f0:	f04f 0900 	mov.w	r9, #0
    47f4:	ebc8 0306 	rsb	r3, r8, r6
    47f8:	2b00      	cmp	r3, #0
    47fa:	dd20      	ble.n	483e <__vfprintf+0xc2a>
    47fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4800:	eb18 0207 	adds.w	r2, r8, r7
    4804:	eb49 73e7 	adc.w	r3, r9, r7, asr #31
    4808:	4282      	cmp	r2, r0
    480a:	418b      	sbcs	r3, r1
    480c:	da10      	bge.n	4830 <__vfprintf+0xc1c>
    480e:	68a3      	ldr	r3, [r4, #8]
    4810:	3b01      	subs	r3, #1
    4812:	2b00      	cmp	r3, #0
    4814:	60a3      	str	r3, [r4, #8]
    4816:	db06      	blt.n	4826 <__vfprintf+0xc12>
    4818:	6823      	ldr	r3, [r4, #0]
    481a:	1c5a      	adds	r2, r3, #1
    481c:	6022      	str	r2, [r4, #0]
    481e:	f89a 2000 	ldrb.w	r2, [sl]
    4822:	701a      	strb	r2, [r3, #0]
    4824:	e004      	b.n	4830 <__vfprintf+0xc1c>
    4826:	f89a 0000 	ldrb.w	r0, [sl]
    482a:	4621      	mov	r1, r4
    482c:	f000 f9d2 	bl	4bd4 <__flsbuf>
    4830:	f118 0801 	adds.w	r8, r8, #1
    4834:	f10a 3aff 	add.w	sl, sl, #4294967295
    4838:	f149 0900 	adc.w	r9, r9, #0
    483c:	e7da      	b.n	47f4 <__vfprintf+0xbe0>
    483e:	2e00      	cmp	r6, #0
    4840:	bfac      	ite	ge
    4842:	eb07 0a06 	addge.w	sl, r7, r6
    4846:	f107 0a00 	addlt.w	sl, r7, #0
    484a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    484c:	b32b      	cbz	r3, 489a <__vfprintf+0xc86>
    484e:	2600      	movs	r6, #0
    4850:	2700      	movs	r7, #0
    4852:	43f3      	mvns	r3, r6
    4854:	eb13 0f0b 	cmn.w	r3, fp
    4858:	d41b      	bmi.n	4892 <__vfprintf+0xc7e>
    485a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    485e:	eb16 020a 	adds.w	r2, r6, sl
    4862:	eb47 73ea 	adc.w	r3, r7, sl, asr #31
    4866:	4282      	cmp	r2, r0
    4868:	418b      	sbcs	r3, r1
    486a:	da0e      	bge.n	488a <__vfprintf+0xc76>
    486c:	68a3      	ldr	r3, [r4, #8]
    486e:	3b01      	subs	r3, #1
    4870:	2b00      	cmp	r3, #0
    4872:	60a3      	str	r3, [r4, #8]
    4874:	db05      	blt.n	4882 <__vfprintf+0xc6e>
    4876:	6823      	ldr	r3, [r4, #0]
    4878:	1c5a      	adds	r2, r3, #1
    487a:	6022      	str	r2, [r4, #0]
    487c:	2220      	movs	r2, #32
    487e:	701a      	strb	r2, [r3, #0]
    4880:	e003      	b.n	488a <__vfprintf+0xc76>
    4882:	2020      	movs	r0, #32
    4884:	4621      	mov	r1, r4
    4886:	f000 f9a5 	bl	4bd4 <__flsbuf>
    488a:	3601      	adds	r6, #1
    488c:	f147 0700 	adc.w	r7, r7, #0
    4890:	e7df      	b.n	4852 <__vfprintf+0xc3e>
    4892:	f1bb 0f00 	cmp.w	fp, #0
    4896:	bfa8      	it	ge
    4898:	44da      	addge	sl, fp
    489a:	9b05      	ldr	r3, [sp, #20]
    489c:	4453      	add	r3, sl
    489e:	9305      	str	r3, [sp, #20]
    48a0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    48a4:	9e05      	ldr	r6, [sp, #20]
    48a6:	9605      	str	r6, [sp, #20]
    48a8:	462b      	mov	r3, r5
    48aa:	f7ff b9be 	b.w	3c2a <__vfprintf+0x16>
    48ae:	9805      	ldr	r0, [sp, #20]
    48b0:	b02d      	add	sp, #180	; 0xb4
    48b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48b6:	bf00      	nop

000048b8 <ch_val>:
    48b8:	4b0a      	ldr	r3, [pc, #40]	; (48e4 <ch_val+0x2c>)
    48ba:	4403      	add	r3, r0
    48bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
    48c0:	069a      	lsls	r2, r3, #26
    48c2:	d501      	bpl.n	48c8 <ch_val+0x10>
    48c4:	3830      	subs	r0, #48	; 0x30
    48c6:	e008      	b.n	48da <ch_val+0x22>
    48c8:	071a      	lsls	r2, r3, #28
    48ca:	d501      	bpl.n	48d0 <ch_val+0x18>
    48cc:	3857      	subs	r0, #87	; 0x57
    48ce:	e004      	b.n	48da <ch_val+0x22>
    48d0:	06db      	lsls	r3, r3, #27
    48d2:	bf4c      	ite	mi
    48d4:	3837      	submi	r0, #55	; 0x37
    48d6:	f04f 30ff 	movpl.w	r0, #4294967295
    48da:	4288      	cmp	r0, r1
    48dc:	bfa8      	it	ge
    48de:	f04f 30ff 	movge.w	r0, #4294967295
    48e2:	4770      	bx	lr
    48e4:	000063f4 	.word	0x000063f4

000048e8 <_strtoul>:
    48e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    48ec:	4680      	mov	r8, r0
    48ee:	4689      	mov	r9, r1
    48f0:	4616      	mov	r6, r2
    48f2:	4603      	mov	r3, r0
    48f4:	461d      	mov	r5, r3
    48f6:	f815 0b01 	ldrb.w	r0, [r5], #1
    48fa:	b1d0      	cbz	r0, 4932 <_strtoul+0x4a>
    48fc:	4a27      	ldr	r2, [pc, #156]	; (499c <_strtoul+0xb4>)
    48fe:	4402      	add	r2, r0
    4900:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
    4904:	07d2      	lsls	r2, r2, #31
    4906:	d501      	bpl.n	490c <_strtoul+0x24>
    4908:	462b      	mov	r3, r5
    490a:	e7f3      	b.n	48f4 <_strtoul+0xc>
    490c:	2830      	cmp	r0, #48	; 0x30
    490e:	d110      	bne.n	4932 <_strtoul+0x4a>
    4910:	7858      	ldrb	r0, [r3, #1]
    4912:	1c9d      	adds	r5, r3, #2
    4914:	f000 02df 	and.w	r2, r0, #223	; 0xdf
    4918:	2a58      	cmp	r2, #88	; 0x58
    491a:	d106      	bne.n	492a <_strtoul+0x42>
    491c:	f036 0710 	bics.w	r7, r6, #16
    4920:	d13a      	bne.n	4998 <_strtoul+0xb0>
    4922:	1cdd      	adds	r5, r3, #3
    4924:	7898      	ldrb	r0, [r3, #2]
    4926:	2610      	movs	r6, #16
    4928:	e008      	b.n	493c <_strtoul+0x54>
    492a:	2701      	movs	r7, #1
    492c:	b936      	cbnz	r6, 493c <_strtoul+0x54>
    492e:	2608      	movs	r6, #8
    4930:	e004      	b.n	493c <_strtoul+0x54>
    4932:	b10e      	cbz	r6, 4938 <_strtoul+0x50>
    4934:	2700      	movs	r7, #0
    4936:	e001      	b.n	493c <_strtoul+0x54>
    4938:	4637      	mov	r7, r6
    493a:	260a      	movs	r6, #10
    493c:	2400      	movs	r4, #0
    493e:	46a2      	mov	sl, r4
    4940:	46a3      	mov	fp, r4
    4942:	4631      	mov	r1, r6
    4944:	f7ff ffb8 	bl	48b8 <ch_val>
    4948:	2800      	cmp	r0, #0
    494a:	db0e      	blt.n	496a <_strtoul+0x82>
    494c:	fb06 0004 	mla	r0, r6, r4, r0
    4950:	0c03      	lsrs	r3, r0, #16
    4952:	fb06 3a0a 	mla	sl, r6, sl, r3
    4956:	f5ba 3f80 	cmp.w	sl, #65536	; 0x10000
    495a:	b284      	uxth	r4, r0
    495c:	bf28      	it	cs
    495e:	f04f 0b01 	movcs.w	fp, #1
    4962:	f815 0b01 	ldrb.w	r0, [r5], #1
    4966:	2701      	movs	r7, #1
    4968:	e7eb      	b.n	4942 <_strtoul+0x5a>
    496a:	f1b9 0f00 	cmp.w	r9, #0
    496e:	d005      	beq.n	497c <_strtoul+0x94>
    4970:	b10f      	cbz	r7, 4976 <_strtoul+0x8e>
    4972:	3d01      	subs	r5, #1
    4974:	e000      	b.n	4978 <_strtoul+0x90>
    4976:	4645      	mov	r5, r8
    4978:	f8c9 5000 	str.w	r5, [r9]
    497c:	f1bb 0f00 	cmp.w	fp, #0
    4980:	d006      	beq.n	4990 <_strtoul+0xa8>
    4982:	4b07      	ldr	r3, [pc, #28]	; (49a0 <_strtoul+0xb8>)
    4984:	2222      	movs	r2, #34	; 0x22
    4986:	601a      	str	r2, [r3, #0]
    4988:	f04f 30ff 	mov.w	r0, #4294967295
    498c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4990:	ea44 400a 	orr.w	r0, r4, sl, lsl #16
    4994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4998:	2701      	movs	r7, #1
    499a:	e7cf      	b.n	493c <_strtoul+0x54>
    499c:	000063f4 	.word	0x000063f4
    49a0:	10000894 	.word	0x10000894

000049a4 <strtol>:
    49a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    49a6:	460e      	mov	r6, r1
    49a8:	4607      	mov	r7, r0
    49aa:	4601      	mov	r1, r0
    49ac:	460d      	mov	r5, r1
    49ae:	f815 3b01 	ldrb.w	r3, [r5], #1
    49b2:	b17b      	cbz	r3, 49d4 <strtol+0x30>
    49b4:	4817      	ldr	r0, [pc, #92]	; (4a14 <strtol+0x70>)
    49b6:	4418      	add	r0, r3
    49b8:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
    49bc:	f014 0401 	ands.w	r4, r4, #1
    49c0:	d001      	beq.n	49c6 <strtol+0x22>
    49c2:	4629      	mov	r1, r5
    49c4:	e7f2      	b.n	49ac <strtol+0x8>
    49c6:	2b2b      	cmp	r3, #43	; 0x2b
    49c8:	d006      	beq.n	49d8 <strtol+0x34>
    49ca:	2b2d      	cmp	r3, #45	; 0x2d
    49cc:	d102      	bne.n	49d4 <strtol+0x30>
    49ce:	f44f 7400 	mov.w	r4, #512	; 0x200
    49d2:	e001      	b.n	49d8 <strtol+0x34>
    49d4:	460d      	mov	r5, r1
    49d6:	2400      	movs	r4, #0
    49d8:	4628      	mov	r0, r5
    49da:	a901      	add	r1, sp, #4
    49dc:	f7ff ff84 	bl	48e8 <_strtoul>
    49e0:	b126      	cbz	r6, 49ec <strtol+0x48>
    49e2:	9b01      	ldr	r3, [sp, #4]
    49e4:	42ab      	cmp	r3, r5
    49e6:	bf08      	it	eq
    49e8:	463b      	moveq	r3, r7
    49ea:	6033      	str	r3, [r6, #0]
    49ec:	05a3      	lsls	r3, r4, #22
    49ee:	d508      	bpl.n	4a02 <strtol+0x5e>
    49f0:	4240      	negs	r0, r0
    49f2:	2800      	cmp	r0, #0
    49f4:	dd0c      	ble.n	4a10 <strtol+0x6c>
    49f6:	4b08      	ldr	r3, [pc, #32]	; (4a18 <strtol+0x74>)
    49f8:	2222      	movs	r2, #34	; 0x22
    49fa:	601a      	str	r2, [r3, #0]
    49fc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    4a00:	e006      	b.n	4a10 <strtol+0x6c>
    4a02:	2800      	cmp	r0, #0
    4a04:	bfbf      	itttt	lt
    4a06:	4b04      	ldrlt	r3, [pc, #16]	; (4a18 <strtol+0x74>)
    4a08:	2222      	movlt	r2, #34	; 0x22
    4a0a:	601a      	strlt	r2, [r3, #0]
    4a0c:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
    4a10:	b003      	add	sp, #12
    4a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a14:	000063f4 	.word	0x000063f4
    4a18:	10000894 	.word	0x10000894

00004a1c <atoi>:
    4a1c:	b538      	push	{r3, r4, r5, lr}
    4a1e:	4c04      	ldr	r4, [pc, #16]	; (4a30 <atoi+0x14>)
    4a20:	2100      	movs	r1, #0
    4a22:	6825      	ldr	r5, [r4, #0]
    4a24:	220a      	movs	r2, #10
    4a26:	f7ff ffbd 	bl	49a4 <strtol>
    4a2a:	6025      	str	r5, [r4, #0]
    4a2c:	bd38      	pop	{r3, r4, r5, pc}
    4a2e:	bf00      	nop
    4a30:	10000894 	.word	0x10000894

00004a34 <setvbuf>:
    4a34:	b570      	push	{r4, r5, r6, lr}
    4a36:	68c4      	ldr	r4, [r0, #12]
    4a38:	07a5      	lsls	r5, r4, #30
    4a3a:	d017      	beq.n	4a6c <setvbuf+0x38>
    4a3c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    4a40:	d009      	beq.n	4a56 <setvbuf+0x22>
    4a42:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    4a46:	d003      	beq.n	4a50 <setvbuf+0x1c>
    4a48:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    4a4c:	d10e      	bne.n	4a6c <setvbuf+0x38>
    4a4e:	e002      	b.n	4a56 <setvbuf+0x22>
    4a50:	6a41      	ldr	r1, [r0, #36]	; 0x24
    4a52:	2301      	movs	r3, #1
    4a54:	e003      	b.n	4a5e <setvbuf+0x2a>
    4a56:	4d06      	ldr	r5, [pc, #24]	; (4a70 <setvbuf+0x3c>)
    4a58:	1e5e      	subs	r6, r3, #1
    4a5a:	42ae      	cmp	r6, r5
    4a5c:	d806      	bhi.n	4a6c <setvbuf+0x38>
    4a5e:	4314      	orrs	r4, r2
    4a60:	6101      	str	r1, [r0, #16]
    4a62:	6001      	str	r1, [r0, #0]
    4a64:	61c3      	str	r3, [r0, #28]
    4a66:	60c4      	str	r4, [r0, #12]
    4a68:	2000      	movs	r0, #0
    4a6a:	bd70      	pop	{r4, r5, r6, pc}
    4a6c:	2001      	movs	r0, #1
    4a6e:	bd70      	pop	{r4, r5, r6, pc}
    4a70:	00fffffe 	.word	0x00fffffe

00004a74 <strchr>:
    4a74:	b510      	push	{r4, lr}
    4a76:	4603      	mov	r3, r0
    4a78:	f810 2b01 	ldrb.w	r2, [r0], #1
    4a7c:	b2cc      	uxtb	r4, r1
    4a7e:	42a2      	cmp	r2, r4
    4a80:	d003      	beq.n	4a8a <strchr+0x16>
    4a82:	2a00      	cmp	r2, #0
    4a84:	d1f7      	bne.n	4a76 <strchr+0x2>
    4a86:	4610      	mov	r0, r2
    4a88:	bd10      	pop	{r4, pc}
    4a8a:	4618      	mov	r0, r3
    4a8c:	bd10      	pop	{r4, pc}

00004a8e <strcpy>:
    4a8e:	ea40 0301 	orr.w	r3, r0, r1
    4a92:	079b      	lsls	r3, r3, #30
    4a94:	b510      	push	{r4, lr}
    4a96:	d113      	bne.n	4ac0 <strcpy+0x32>
    4a98:	4602      	mov	r2, r0
    4a9a:	3904      	subs	r1, #4
    4a9c:	f851 3f04 	ldr.w	r3, [r1, #4]!
    4aa0:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
    4aa4:	ea24 0403 	bic.w	r4, r4, r3
    4aa8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    4aac:	d102      	bne.n	4ab4 <strcpy+0x26>
    4aae:	f842 3b04 	str.w	r3, [r2], #4
    4ab2:	e7f3      	b.n	4a9c <strcpy+0xe>
    4ab4:	b2d9      	uxtb	r1, r3
    4ab6:	f802 1b01 	strb.w	r1, [r2], #1
    4aba:	b141      	cbz	r1, 4ace <strcpy+0x40>
    4abc:	121b      	asrs	r3, r3, #8
    4abe:	e7f9      	b.n	4ab4 <strcpy+0x26>
    4ac0:	1e42      	subs	r2, r0, #1
    4ac2:	f811 3b01 	ldrb.w	r3, [r1], #1
    4ac6:	f802 3f01 	strb.w	r3, [r2, #1]!
    4aca:	2b00      	cmp	r3, #0
    4acc:	d1f9      	bne.n	4ac2 <strcpy+0x34>
    4ace:	bd10      	pop	{r4, pc}

00004ad0 <strlen>:
    4ad0:	b510      	push	{r4, lr}
    4ad2:	1c42      	adds	r2, r0, #1
    4ad4:	0783      	lsls	r3, r0, #30
    4ad6:	d005      	beq.n	4ae4 <strlen+0x14>
    4ad8:	f810 3b01 	ldrb.w	r3, [r0], #1
    4adc:	2b00      	cmp	r3, #0
    4ade:	d1f9      	bne.n	4ad4 <strlen+0x4>
    4ae0:	1a80      	subs	r0, r0, r2
    4ae2:	bd10      	pop	{r4, pc}
    4ae4:	4603      	mov	r3, r0
    4ae6:	f850 1b04 	ldr.w	r1, [r0], #4
    4aea:	f1a1 3401 	sub.w	r4, r1, #16843009	; 0x1010101
    4aee:	ea24 0401 	bic.w	r4, r4, r1
    4af2:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    4af6:	d0f5      	beq.n	4ae4 <strlen+0x14>
    4af8:	f011 0fff 	tst.w	r1, #255	; 0xff
    4afc:	d00a      	beq.n	4b14 <strlen+0x44>
    4afe:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
    4b02:	d005      	beq.n	4b10 <strlen+0x40>
    4b04:	f411 0f7f 	tst.w	r1, #16711680	; 0xff0000
    4b08:	bf14      	ite	ne
    4b0a:	4603      	movne	r3, r0
    4b0c:	3303      	addeq	r3, #3
    4b0e:	e002      	b.n	4b16 <strlen+0x46>
    4b10:	3302      	adds	r3, #2
    4b12:	e000      	b.n	4b16 <strlen+0x46>
    4b14:	3301      	adds	r3, #1
    4b16:	1a98      	subs	r0, r3, r2
    4b18:	bd10      	pop	{r4, pc}

00004b1a <strncpy>:
    4b1a:	ea40 0301 	orr.w	r3, r0, r1
    4b1e:	b570      	push	{r4, r5, r6, lr}
    4b20:	079d      	lsls	r5, r3, #30
    4b22:	d111      	bne.n	4b48 <strncpy+0x2e>
    4b24:	460e      	mov	r6, r1
    4b26:	4603      	mov	r3, r0
    4b28:	2a03      	cmp	r2, #3
    4b2a:	4631      	mov	r1, r6
    4b2c:	d90d      	bls.n	4b4a <strncpy+0x30>
    4b2e:	f856 5b04 	ldr.w	r5, [r6], #4
    4b32:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    4b36:	ea24 0405 	bic.w	r4, r4, r5
    4b3a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    4b3e:	d104      	bne.n	4b4a <strncpy+0x30>
    4b40:	f843 5b04 	str.w	r5, [r3], #4
    4b44:	3a04      	subs	r2, #4
    4b46:	e7ef      	b.n	4b28 <strncpy+0xe>
    4b48:	4603      	mov	r3, r0
    4b4a:	3a01      	subs	r2, #1
    4b4c:	1c54      	adds	r4, r2, #1
    4b4e:	d00f      	beq.n	4b70 <strncpy+0x56>
    4b50:	f811 4b01 	ldrb.w	r4, [r1], #1
    4b54:	1e55      	subs	r5, r2, #1
    4b56:	f803 4b01 	strb.w	r4, [r3], #1
    4b5a:	b93c      	cbnz	r4, 4b6c <strncpy+0x52>
    4b5c:	441a      	add	r2, r3
    4b5e:	4293      	cmp	r3, r2
    4b60:	d003      	beq.n	4b6a <strncpy+0x50>
    4b62:	2100      	movs	r1, #0
    4b64:	f803 1b01 	strb.w	r1, [r3], #1
    4b68:	e7f9      	b.n	4b5e <strncpy+0x44>
    4b6a:	bd70      	pop	{r4, r5, r6, pc}
    4b6c:	462a      	mov	r2, r5
    4b6e:	e7ed      	b.n	4b4c <strncpy+0x32>
    4b70:	bd70      	pop	{r4, r5, r6, pc}

00004b72 <strstr>:
    4b72:	b510      	push	{r4, lr}
    4b74:	2300      	movs	r3, #0
    4b76:	5cca      	ldrb	r2, [r1, r3]
    4b78:	b14a      	cbz	r2, 4b8e <strstr+0x1c>
    4b7a:	5cc4      	ldrb	r4, [r0, r3]
    4b7c:	4294      	cmp	r4, r2
    4b7e:	d101      	bne.n	4b84 <strstr+0x12>
    4b80:	3301      	adds	r3, #1
    4b82:	e7f8      	b.n	4b76 <strstr+0x4>
    4b84:	f810 3b01 	ldrb.w	r3, [r0], #1
    4b88:	2b00      	cmp	r3, #0
    4b8a:	d1f3      	bne.n	4b74 <strstr+0x2>
    4b8c:	4618      	mov	r0, r3
    4b8e:	bd10      	pop	{r4, pc}

00004b90 <_deferredlazyseek>:
    4b90:	68c3      	ldr	r3, [r0, #12]
    4b92:	b510      	push	{r4, lr}
    4b94:	f023 0320 	bic.w	r3, r3, #32
    4b98:	60c3      	str	r3, [r0, #12]
    4b9a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4b9c:	6982      	ldr	r2, [r0, #24]
    4b9e:	685b      	ldr	r3, [r3, #4]
    4ba0:	4604      	mov	r4, r0
    4ba2:	429a      	cmp	r2, r3
    4ba4:	d00f      	beq.n	4bc6 <_deferredlazyseek+0x36>
    4ba6:	f000 f8eb 	bl	4d80 <_fflush>
    4baa:	68e3      	ldr	r3, [r4, #12]
    4bac:	6a62      	ldr	r2, [r4, #36]	; 0x24
    4bae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    4bb2:	f023 0310 	bic.w	r3, r3, #16
    4bb6:	f043 0310 	orr.w	r3, r3, #16
    4bba:	60e3      	str	r3, [r4, #12]
    4bbc:	6853      	ldr	r3, [r2, #4]
    4bbe:	61a3      	str	r3, [r4, #24]
    4bc0:	6923      	ldr	r3, [r4, #16]
    4bc2:	6093      	str	r3, [r2, #8]
    4bc4:	6023      	str	r3, [r4, #0]
    4bc6:	68e3      	ldr	r3, [r4, #12]
    4bc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    4bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    4bd0:	60e3      	str	r3, [r4, #12]
    4bd2:	bd10      	pop	{r4, pc}

00004bd4 <__flsbuf>:
    4bd4:	68cb      	ldr	r3, [r1, #12]
    4bd6:	b570      	push	{r4, r5, r6, lr}
    4bd8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
    4bdc:	069b      	lsls	r3, r3, #26
    4bde:	4605      	mov	r5, r0
    4be0:	460c      	mov	r4, r1
    4be2:	60ca      	str	r2, [r1, #12]
    4be4:	d502      	bpl.n	4bec <__flsbuf+0x18>
    4be6:	4608      	mov	r0, r1
    4be8:	f7ff ffd2 	bl	4b90 <_deferredlazyseek>
    4bec:	68a1      	ldr	r1, [r4, #8]
    4bee:	68e3      	ldr	r3, [r4, #12]
    4bf0:	1c4e      	adds	r6, r1, #1
    4bf2:	da0d      	bge.n	4c10 <__flsbuf+0x3c>
    4bf4:	0598      	lsls	r0, r3, #22
    4bf6:	d40b      	bmi.n	4c10 <__flsbuf+0x3c>
    4bf8:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
    4bfc:	60e3      	str	r3, [r4, #12]
    4bfe:	f06f 0201 	mvn.w	r2, #1
    4c02:	6823      	ldr	r3, [r4, #0]
    4c04:	1a52      	subs	r2, r2, r1
    4c06:	60a2      	str	r2, [r4, #8]
    4c08:	1c5a      	adds	r2, r3, #1
    4c0a:	6022      	str	r2, [r4, #0]
    4c0c:	701d      	strb	r5, [r3, #0]
    4c0e:	e056      	b.n	4cbe <__flsbuf+0xea>
    4c10:	f241 028a 	movw	r2, #4234	; 0x108a
    4c14:	401a      	ands	r2, r3
    4c16:	2a02      	cmp	r2, #2
    4c18:	461e      	mov	r6, r3
    4c1a:	d005      	beq.n	4c28 <__flsbuf+0x54>
    4c1c:	2200      	movs	r2, #0
    4c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4c22:	60a2      	str	r2, [r4, #8]
    4c24:	60e3      	str	r3, [r4, #12]
    4c26:	e052      	b.n	4cce <__flsbuf+0xfa>
    4c28:	f24a 0110 	movw	r1, #40976	; 0xa010
    4c2c:	4019      	ands	r1, r3
    4c2e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    4c32:	d10a      	bne.n	4c4a <__flsbuf+0x76>
    4c34:	2100      	movs	r1, #0
    4c36:	4620      	mov	r0, r4
    4c38:	f000 fa36 	bl	50a8 <fseek>
    4c3c:	68e3      	ldr	r3, [r4, #12]
    4c3e:	0699      	lsls	r1, r3, #26
    4c40:	d502      	bpl.n	4c48 <__flsbuf+0x74>
    4c42:	4620      	mov	r0, r4
    4c44:	f7ff ffa4 	bl	4b90 <_deferredlazyseek>
    4c48:	68e6      	ldr	r6, [r4, #12]
    4c4a:	f446 3390 	orr.w	r3, r6, #73728	; 0x12000
    4c4e:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    4c52:	60e3      	str	r3, [r4, #12]
    4c54:	d11c      	bne.n	4c90 <__flsbuf+0xbc>
    4c56:	6960      	ldr	r0, [r4, #20]
    4c58:	f000 ffb4 	bl	5bc4 <__sys_istty>
    4c5c:	b150      	cbz	r0, 4c74 <__flsbuf+0xa0>
    4c5e:	0572      	lsls	r2, r6, #21
    4c60:	d508      	bpl.n	4c74 <__flsbuf+0xa0>
    4c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4c64:	6123      	str	r3, [r4, #16]
    4c66:	6023      	str	r3, [r4, #0]
    4c68:	2301      	movs	r3, #1
    4c6a:	61e3      	str	r3, [r4, #28]
    4c6c:	f446 3392 	orr.w	r3, r6, #74752	; 0x12400
    4c70:	60e3      	str	r3, [r4, #12]
    4c72:	e00d      	b.n	4c90 <__flsbuf+0xbc>
    4c74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4c78:	f000 f9b8 	bl	4fec <_Csys_alloc>
    4c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4c80:	68e2      	ldr	r2, [r4, #12]
    4c82:	61e3      	str	r3, [r4, #28]
    4c84:	f446 3394 	orr.w	r3, r6, #75776	; 0x12800
    4c88:	431a      	orrs	r2, r3
    4c8a:	6120      	str	r0, [r4, #16]
    4c8c:	6020      	str	r0, [r4, #0]
    4c8e:	60e2      	str	r2, [r4, #12]
    4c90:	f413 6f10 	tst.w	r3, #2304	; 0x900
    4c94:	6821      	ldr	r1, [r4, #0]
    4c96:	6926      	ldr	r6, [r4, #16]
    4c98:	d01c      	beq.n	4cd4 <__flsbuf+0x100>
    4c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4c9c:	689b      	ldr	r3, [r3, #8]
    4c9e:	428b      	cmp	r3, r1
    4ca0:	bf2c      	ite	cs
    4ca2:	ebc6 0103 	rsbcs	r1, r6, r3
    4ca6:	ebc6 0101 	rsbcc	r1, r6, r1
    4caa:	b951      	cbnz	r1, 4cc2 <__flsbuf+0xee>
    4cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4cae:	1c72      	adds	r2, r6, #1
    4cb0:	609a      	str	r2, [r3, #8]
    4cb2:	6022      	str	r2, [r4, #0]
    4cb4:	69e2      	ldr	r2, [r4, #28]
    4cb6:	1e51      	subs	r1, r2, #1
    4cb8:	60a1      	str	r1, [r4, #8]
    4cba:	60da      	str	r2, [r3, #12]
    4cbc:	7035      	strb	r5, [r6, #0]
    4cbe:	b2e8      	uxtb	r0, r5
    4cc0:	bd70      	pop	{r4, r5, r6, pc}
    4cc2:	4630      	mov	r0, r6
    4cc4:	4622      	mov	r2, r4
    4cc6:	f000 f8db 	bl	4e80 <_Cwritebuf>
    4cca:	2800      	cmp	r0, #0
    4ccc:	d0ee      	beq.n	4cac <__flsbuf+0xd8>
    4cce:	f04f 30ff 	mov.w	r0, #4294967295
    4cd2:	bd70      	pop	{r4, r5, r6, pc}
    4cd4:	1c4a      	adds	r2, r1, #1
    4cd6:	b2ed      	uxtb	r5, r5
    4cd8:	6022      	str	r2, [r4, #0]
    4cda:	700d      	strb	r5, [r1, #0]
    4cdc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4cde:	6821      	ldr	r1, [r4, #0]
    4ce0:	6882      	ldr	r2, [r0, #8]
    4ce2:	428a      	cmp	r2, r1
    4ce4:	bf2c      	ite	cs
    4ce6:	ebc6 0102 	rsbcs	r1, r6, r2
    4cea:	ebc6 0101 	rsbcc	r1, r6, r1
    4cee:	69e2      	ldr	r2, [r4, #28]
    4cf0:	055b      	lsls	r3, r3, #21
    4cf2:	60c2      	str	r2, [r0, #12]
    4cf4:	d403      	bmi.n	4cfe <__flsbuf+0x12a>
    4cf6:	2d0a      	cmp	r5, #10
    4cf8:	d001      	beq.n	4cfe <__flsbuf+0x12a>
    4cfa:	4291      	cmp	r1, r2
    4cfc:	db09      	blt.n	4d12 <__flsbuf+0x13e>
    4cfe:	2300      	movs	r3, #0
    4d00:	6086      	str	r6, [r0, #8]
    4d02:	4622      	mov	r2, r4
    4d04:	6026      	str	r6, [r4, #0]
    4d06:	60a3      	str	r3, [r4, #8]
    4d08:	4630      	mov	r0, r6
    4d0a:	f000 f8b9 	bl	4e80 <_Cwritebuf>
    4d0e:	2800      	cmp	r0, #0
    4d10:	d1dd      	bne.n	4cce <__flsbuf+0xfa>
    4d12:	4628      	mov	r0, r5
    4d14:	bd70      	pop	{r4, r5, r6, pc}

00004d16 <_fdopen>:
    4d16:	b570      	push	{r4, r5, r6, lr}
    4d18:	460d      	mov	r5, r1
    4d1a:	4606      	mov	r6, r0
    4d1c:	4610      	mov	r0, r2
    4d1e:	4614      	mov	r4, r2
    4d20:	f000 f974 	bl	500c <fclose>
    4d24:	782b      	ldrb	r3, [r5, #0]
    4d26:	2b72      	cmp	r3, #114	; 0x72
    4d28:	d00a      	beq.n	4d40 <_fdopen+0x2a>
    4d2a:	2b77      	cmp	r3, #119	; 0x77
    4d2c:	d005      	beq.n	4d3a <_fdopen+0x24>
    4d2e:	2b61      	cmp	r3, #97	; 0x61
    4d30:	d123      	bne.n	4d7a <_fdopen+0x64>
    4d32:	2308      	movs	r3, #8
    4d34:	f248 0202 	movw	r2, #32770	; 0x8002
    4d38:	e004      	b.n	4d44 <_fdopen+0x2e>
    4d3a:	2304      	movs	r3, #4
    4d3c:	2202      	movs	r2, #2
    4d3e:	e001      	b.n	4d44 <_fdopen+0x2e>
    4d40:	2300      	movs	r3, #0
    4d42:	2201      	movs	r2, #1
    4d44:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    4d48:	292b      	cmp	r1, #43	; 0x2b
    4d4a:	d006      	beq.n	4d5a <_fdopen+0x44>
    4d4c:	2962      	cmp	r1, #98	; 0x62
    4d4e:	d109      	bne.n	4d64 <_fdopen+0x4e>
    4d50:	f042 0204 	orr.w	r2, r2, #4
    4d54:	f043 0301 	orr.w	r3, r3, #1
    4d58:	e7f4      	b.n	4d44 <_fdopen+0x2e>
    4d5a:	f042 0203 	orr.w	r2, r2, #3
    4d5e:	f043 0302 	orr.w	r3, r3, #2
    4d62:	e7ef      	b.n	4d44 <_fdopen+0x2e>
    4d64:	071b      	lsls	r3, r3, #28
    4d66:	60e2      	str	r2, [r4, #12]
    4d68:	6166      	str	r6, [r4, #20]
    4d6a:	4620      	mov	r0, r4
    4d6c:	d507      	bpl.n	4d7e <_fdopen+0x68>
    4d6e:	2100      	movs	r1, #0
    4d70:	2202      	movs	r2, #2
    4d72:	f000 f999 	bl	50a8 <fseek>
    4d76:	4620      	mov	r0, r4
    4d78:	bd70      	pop	{r4, r5, r6, pc}
    4d7a:	2000      	movs	r0, #0
    4d7c:	bd70      	pop	{r4, r5, r6, pc}
    4d7e:	bd70      	pop	{r4, r5, r6, pc}

00004d80 <_fflush>:
    4d80:	b538      	push	{r3, r4, r5, lr}
    4d82:	4604      	mov	r4, r0
    4d84:	6a42      	ldr	r2, [r0, #36]	; 0x24
    4d86:	6905      	ldr	r5, [r0, #16]
    4d88:	6803      	ldr	r3, [r0, #0]
    4d8a:	68c0      	ldr	r0, [r0, #12]
    4d8c:	6891      	ldr	r1, [r2, #8]
    4d8e:	f420 2200 	bic.w	r2, r0, #524288	; 0x80000
    4d92:	60e2      	str	r2, [r4, #12]
    4d94:	f000 0282 	and.w	r2, r0, #130	; 0x82
    4d98:	2a02      	cmp	r2, #2
    4d9a:	d002      	beq.n	4da2 <_fflush+0x22>
    4d9c:	f04f 30ff 	mov.w	r0, #4294967295
    4da0:	bd38      	pop	{r3, r4, r5, pc}
    4da2:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
    4da6:	d016      	beq.n	4dd6 <_fflush+0x56>
    4da8:	4299      	cmp	r1, r3
    4daa:	bf38      	it	cc
    4dac:	4619      	movcc	r1, r3
    4dae:	42a9      	cmp	r1, r5
    4db0:	d109      	bne.n	4dc6 <_fflush+0x46>
    4db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4db4:	2000      	movs	r0, #0
    4db6:	609d      	str	r5, [r3, #8]
    4db8:	68e3      	ldr	r3, [r4, #12]
    4dba:	6025      	str	r5, [r4, #0]
    4dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4dc0:	60a0      	str	r0, [r4, #8]
    4dc2:	60e3      	str	r3, [r4, #12]
    4dc4:	bd38      	pop	{r3, r4, r5, pc}
    4dc6:	4628      	mov	r0, r5
    4dc8:	1b49      	subs	r1, r1, r5
    4dca:	4622      	mov	r2, r4
    4dcc:	f000 f858 	bl	4e80 <_Cwritebuf>
    4dd0:	2800      	cmp	r0, #0
    4dd2:	d0ee      	beq.n	4db2 <_fflush+0x32>
    4dd4:	e7e2      	b.n	4d9c <_fflush+0x1c>
    4dd6:	bd38      	pop	{r3, r4, r5, pc}

00004dd8 <_frexpl>:
    4dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4dda:	4615      	mov	r5, r2
    4ddc:	2300      	movs	r3, #0
    4dde:	2200      	movs	r2, #0
    4de0:	4606      	mov	r6, r0
    4de2:	460f      	mov	r7, r1
    4de4:	f000 fe2e 	bl	5a44 <__aeabi_dcmpeq>
    4de8:	b120      	cbz	r0, 4df4 <_frexpl+0x1c>
    4dea:	2300      	movs	r3, #0
    4dec:	602b      	str	r3, [r5, #0]
    4dee:	2000      	movs	r0, #0
    4df0:	2100      	movs	r1, #0
    4df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4df4:	f3c7 530a 	ubfx	r3, r7, #20, #11
    4df8:	4630      	mov	r0, r6
    4dfa:	4639      	mov	r1, r7
    4dfc:	f2a3 34fe 	subw	r4, r3, #1022	; 0x3fe
    4e00:	b98b      	cbnz	r3, 4e26 <_frexpl+0x4e>
    4e02:	4632      	mov	r2, r6
    4e04:	f3c7 0313 	ubfx	r3, r7, #0, #20
    4e08:	0fd7      	lsrs	r7, r2, #31
    4e0a:	f403 2600 	and.w	r6, r3, #524288	; 0x80000
    4e0e:	ea47 0343 	orr.w	r3, r7, r3, lsl #1
    4e12:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4e16:	0052      	lsls	r2, r2, #1
    4e18:	b11e      	cbz	r6, 4e22 <_frexpl+0x4a>
    4e1a:	f363 0113 	bfi	r1, r3, #0, #20
    4e1e:	4610      	mov	r0, r2
    4e20:	e001      	b.n	4e26 <_frexpl+0x4e>
    4e22:	3c01      	subs	r4, #1
    4e24:	e7f0      	b.n	4e08 <_frexpl+0x30>
    4e26:	f240 33fe 	movw	r3, #1022	; 0x3fe
    4e2a:	602c      	str	r4, [r5, #0]
    4e2c:	f363 511e 	bfi	r1, r3, #20, #11
    4e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004e34 <_ldexpl>:
    4e34:	b570      	push	{r4, r5, r6, lr}
    4e36:	2300      	movs	r3, #0
    4e38:	4616      	mov	r6, r2
    4e3a:	2200      	movs	r2, #0
    4e3c:	4604      	mov	r4, r0
    4e3e:	460d      	mov	r5, r1
    4e40:	f000 fe00 	bl	5a44 <__aeabi_dcmpeq>
    4e44:	b110      	cbz	r0, 4e4c <_ldexpl+0x18>
    4e46:	2000      	movs	r0, #0
    4e48:	2100      	movs	r1, #0
    4e4a:	bd70      	pop	{r4, r5, r6, pc}
    4e4c:	f240 73fe 	movw	r3, #2046	; 0x7fe
    4e50:	f3c5 520a 	ubfx	r2, r5, #20, #11
    4e54:	4432      	add	r2, r6
    4e56:	429a      	cmp	r2, r3
    4e58:	4620      	mov	r0, r4
    4e5a:	4629      	mov	r1, r5
    4e5c:	dd06      	ble.n	4e6c <_ldexpl+0x38>
    4e5e:	4b06      	ldr	r3, [pc, #24]	; (4e78 <_ldexpl+0x44>)
    4e60:	2222      	movs	r2, #34	; 0x22
    4e62:	601a      	str	r2, [r3, #0]
    4e64:	4b05      	ldr	r3, [pc, #20]	; (4e7c <_ldexpl+0x48>)
    4e66:	e9d3 0100 	ldrd	r0, r1, [r3]
    4e6a:	bd70      	pop	{r4, r5, r6, pc}
    4e6c:	2a00      	cmp	r2, #0
    4e6e:	ddea      	ble.n	4e46 <_ldexpl+0x12>
    4e70:	f362 511e 	bfi	r1, r2, #20, #11
    4e74:	bd70      	pop	{r4, r5, r6, pc}
    4e76:	bf00      	nop
    4e78:	10000894 	.word	0x10000894
    4e7c:	000065e0 	.word	0x000065e0

00004e80 <_Cwritebuf>:
    4e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e84:	68d5      	ldr	r5, [r2, #12]
    4e86:	4680      	mov	r8, r0
    4e88:	02eb      	lsls	r3, r5, #11
    4e8a:	460e      	mov	r6, r1
    4e8c:	4614      	mov	r4, r2
    4e8e:	6957      	ldr	r7, [r2, #20]
    4e90:	d505      	bpl.n	4e9e <_Cwritebuf+0x1e>
    4e92:	4638      	mov	r0, r7
    4e94:	f000 fe93 	bl	5bbe <__sys_flen>
    4e98:	f045 0510 	orr.w	r5, r5, #16
    4e9c:	61a0      	str	r0, [r4, #24]
    4e9e:	4b13      	ldr	r3, [pc, #76]	; (4eec <_Cwritebuf+0x6c>)
    4ea0:	402b      	ands	r3, r5
    4ea2:	b153      	cbz	r3, 4eba <_Cwritebuf+0x3a>
    4ea4:	4638      	mov	r0, r7
    4ea6:	69a1      	ldr	r1, [r4, #24]
    4ea8:	f000 fe92 	bl	5bd0 <__sys_seek>
    4eac:	2800      	cmp	r0, #0
    4eae:	db14      	blt.n	4eda <_Cwritebuf+0x5a>
    4eb0:	f425 3500 	bic.w	r5, r5, #131072	; 0x20000
    4eb4:	f025 0510 	bic.w	r5, r5, #16
    4eb8:	60e5      	str	r5, [r4, #12]
    4eba:	4632      	mov	r2, r6
    4ebc:	4638      	mov	r0, r7
    4ebe:	4641      	mov	r1, r8
    4ec0:	f000 fe8c 	bl	5bdc <__sys_write>
    4ec4:	1b80      	subs	r0, r0, r6
    4ec6:	bf18      	it	ne
    4ec8:	f04f 30ff 	movne.w	r0, #4294967295
    4ecc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
    4ed0:	1af6      	subs	r6, r6, r3
    4ed2:	69a3      	ldr	r3, [r4, #24]
    4ed4:	441e      	add	r6, r3
    4ed6:	61a6      	str	r6, [r4, #24]
    4ed8:	b128      	cbz	r0, 4ee6 <_Cwritebuf+0x66>
    4eda:	68e3      	ldr	r3, [r4, #12]
    4edc:	f04f 30ff 	mov.w	r0, #4294967295
    4ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4ee4:	60e3      	str	r3, [r4, #12]
    4ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4eea:	bf00      	nop
    4eec:	00020010 	.word	0x00020010

00004ef0 <malloc>:
    4ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ef2:	4b31      	ldr	r3, [pc, #196]	; (4fb8 <malloc+0xc8>)
    4ef4:	1cc5      	adds	r5, r0, #3
    4ef6:	681c      	ldr	r4, [r3, #0]
    4ef8:	08ad      	lsrs	r5, r5, #2
    4efa:	b198      	cbz	r0, 4f24 <malloc+0x34>
    4efc:	461f      	mov	r7, r3
    4efe:	2600      	movs	r6, #0
    4f00:	f105 0e0a 	add.w	lr, r5, #10
    4f04:	f105 0c03 	add.w	ip, r5, #3
    4f08:	e005      	b.n	4f16 <malloc+0x26>
    4f0a:	6823      	ldr	r3, [r4, #0]
    4f0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    4f10:	d014      	beq.n	4f3c <malloc+0x4c>
    4f12:	4626      	mov	r6, r4
    4f14:	68a4      	ldr	r4, [r4, #8]
    4f16:	2c00      	cmp	r4, #0
    4f18:	d1f7      	bne.n	4f0a <malloc+0x1a>
    4f1a:	300c      	adds	r0, #12
    4f1c:	f000 f97c 	bl	5218 <_sbrk>
    4f20:	1c43      	adds	r3, r0, #1
    4f22:	d110      	bne.n	4f46 <malloc+0x56>
    4f24:	2000      	movs	r0, #0
    4f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f28:	6811      	ldr	r1, [r2, #0]
    4f2a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    4f2e:	d115      	bne.n	4f5c <malloc+0x6c>
    4f30:	6851      	ldr	r1, [r2, #4]
    4f32:	440b      	add	r3, r1
    4f34:	3303      	adds	r3, #3
    4f36:	6063      	str	r3, [r4, #4]
    4f38:	6893      	ldr	r3, [r2, #8]
    4f3a:	60a3      	str	r3, [r4, #8]
    4f3c:	68a2      	ldr	r2, [r4, #8]
    4f3e:	6863      	ldr	r3, [r4, #4]
    4f40:	2a00      	cmp	r2, #0
    4f42:	d1f1      	bne.n	4f28 <malloc+0x38>
    4f44:	e00a      	b.n	4f5c <malloc+0x6c>
    4f46:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    4f4a:	e880 0028 	stmia.w	r0, {r3, r5}
    4f4e:	6084      	str	r4, [r0, #8]
    4f50:	b90e      	cbnz	r6, 4f56 <malloc+0x66>
    4f52:	6038      	str	r0, [r7, #0]
    4f54:	e000      	b.n	4f58 <malloc+0x68>
    4f56:	60b0      	str	r0, [r6, #8]
    4f58:	300c      	adds	r0, #12
    4f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f5c:	42ab      	cmp	r3, r5
    4f5e:	db07      	blt.n	4f70 <malloc+0x80>
    4f60:	459c      	cmp	ip, r3
    4f62:	db05      	blt.n	4f70 <malloc+0x80>
    4f64:	4620      	mov	r0, r4
    4f66:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    4f6a:	f840 3b0c 	str.w	r3, [r0], #12
    4f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f70:	4573      	cmp	r3, lr
    4f72:	d911      	bls.n	4f98 <malloc+0xa8>
    4f74:	4620      	mov	r0, r4
    4f76:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    4f7a:	6065      	str	r5, [r4, #4]
    4f7c:	f840 1b0c 	str.w	r1, [r0], #12
    4f80:	eb00 0185 	add.w	r1, r0, r5, lsl #2
    4f84:	60a1      	str	r1, [r4, #8]
    4f86:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    4f8a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    4f8e:	1b5d      	subs	r5, r3, r5
    4f90:	3d03      	subs	r5, #3
    4f92:	604d      	str	r5, [r1, #4]
    4f94:	608a      	str	r2, [r1, #8]
    4f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f98:	2a00      	cmp	r2, #0
    4f9a:	d1ba      	bne.n	4f12 <malloc+0x22>
    4f9c:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    4fa0:	f000 f93a 	bl	5218 <_sbrk>
    4fa4:	3001      	adds	r0, #1
    4fa6:	d0bd      	beq.n	4f24 <malloc+0x34>
    4fa8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    4fac:	e884 0028 	stmia.w	r4, {r3, r5}
    4fb0:	f104 000c 	add.w	r0, r4, #12
    4fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fb6:	bf00      	nop
    4fb8:	1000218c 	.word	0x1000218c

00004fbc <free>:
    4fbc:	b1a8      	cbz	r0, 4fea <free+0x2e>
    4fbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4fc2:	f840 3c0c 	str.w	r3, [r0, #-12]
    4fc6:	f850 2c04 	ldr.w	r2, [r0, #-4]
    4fca:	b172      	cbz	r2, 4fea <free+0x2e>
    4fcc:	6813      	ldr	r3, [r2, #0]
    4fce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    4fd2:	d10a      	bne.n	4fea <free+0x2e>
    4fd4:	6853      	ldr	r3, [r2, #4]
    4fd6:	f850 1c08 	ldr.w	r1, [r0, #-8]
    4fda:	440b      	add	r3, r1
    4fdc:	3303      	adds	r3, #3
    4fde:	f840 3c08 	str.w	r3, [r0, #-8]
    4fe2:	6893      	ldr	r3, [r2, #8]
    4fe4:	f840 3c04 	str.w	r3, [r0, #-4]
    4fe8:	e7ed      	b.n	4fc6 <free+0xa>
    4fea:	4770      	bx	lr

00004fec <_Csys_alloc>:
    4fec:	b510      	push	{r4, lr}
    4fee:	f7ff ff7f 	bl	4ef0 <malloc>
    4ff2:	4604      	mov	r4, r0
    4ff4:	b928      	cbnz	r0, 5002 <_Csys_alloc+0x16>
    4ff6:	4904      	ldr	r1, [pc, #16]	; (5008 <_Csys_alloc+0x1c>)
    4ff8:	2217      	movs	r2, #23
    4ffa:	f000 fdef 	bl	5bdc <__sys_write>
    4ffe:	f000 fdda 	bl	5bb6 <__sys_appexit>
    5002:	4620      	mov	r0, r4
    5004:	bd10      	pop	{r4, pc}
    5006:	bf00      	nop
    5008:	000065e8 	.word	0x000065e8

0000500c <fclose>:
    500c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5010:	f100 050c 	add.w	r5, r0, #12
    5014:	e895 01a0 	ldmia.w	r5, {r5, r7, r8}
    5018:	07a9      	lsls	r1, r5, #30
    501a:	b088      	sub	sp, #32
    501c:	4604      	mov	r4, r0
    501e:	6a46      	ldr	r6, [r0, #36]	; 0x24
    5020:	d025      	beq.n	506e <fclose+0x62>
    5022:	072a      	lsls	r2, r5, #28
    5024:	d416      	bmi.n	5054 <fclose+0x48>
    5026:	f000 f827 	bl	5078 <fflush>
    502a:	4640      	mov	r0, r8
    502c:	f000 fdc4 	bl	5bb8 <__sys_close>
    5030:	052b      	lsls	r3, r5, #20
    5032:	d502      	bpl.n	503a <fclose+0x2e>
    5034:	4638      	mov	r0, r7
    5036:	f7ff ffc1 	bl	4fbc <free>
    503a:	0dad      	lsrs	r5, r5, #22
    503c:	05ad      	lsls	r5, r5, #22
    503e:	f115 4fa5 	cmn.w	r5, #1384120320	; 0x52800000
    5042:	d107      	bne.n	5054 <fclose+0x48>
    5044:	4668      	mov	r0, sp
    5046:	6a21      	ldr	r1, [r4, #32]
    5048:	2220      	movs	r2, #32
    504a:	f000 fdc4 	bl	5bd6 <__sys_tmpnam>
    504e:	4668      	mov	r0, sp
    5050:	f000 f8d8 	bl	5204 <remove>
    5054:	2100      	movs	r1, #0
    5056:	2218      	movs	r2, #24
    5058:	6a60      	ldr	r0, [r4, #36]	; 0x24
    505a:	f7fe f897 	bl	318c <memset>
    505e:	4620      	mov	r0, r4
    5060:	2100      	movs	r1, #0
    5062:	2228      	movs	r2, #40	; 0x28
    5064:	f7fe f892 	bl	318c <memset>
    5068:	6266      	str	r6, [r4, #36]	; 0x24
    506a:	2000      	movs	r0, #0
    506c:	e001      	b.n	5072 <fclose+0x66>
    506e:	f04f 30ff 	mov.w	r0, #4294967295
    5072:	b008      	add	sp, #32
    5074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005078 <fflush>:
    5078:	b538      	push	{r3, r4, r5, lr}
    507a:	4604      	mov	r4, r0
    507c:	b118      	cbz	r0, 5086 <fflush+0xe>
    507e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5082:	f000 b8e9 	b.w	5258 <_do_fflush>
    5086:	4605      	mov	r5, r0
    5088:	4806      	ldr	r0, [pc, #24]	; (50a4 <fflush+0x2c>)
    508a:	4420      	add	r0, r4
    508c:	f000 f8e4 	bl	5258 <_do_fflush>
    5090:	3428      	adds	r4, #40	; 0x28
    5092:	2800      	cmp	r0, #0
    5094:	bf18      	it	ne
    5096:	f04f 35ff 	movne.w	r5, #4294967295
    509a:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
    509e:	d1f3      	bne.n	5088 <fflush+0x10>
    50a0:	4628      	mov	r0, r5
    50a2:	bd38      	pop	{r3, r4, r5, pc}
    50a4:	1000204c 	.word	0x1000204c

000050a8 <fseek>:
    50a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    50ac:	68c6      	ldr	r6, [r0, #12]
    50ae:	4b41      	ldr	r3, [pc, #260]	; (51b4 <fseek+0x10c>)
    50b0:	4604      	mov	r4, r0
    50b2:	4033      	ands	r3, r6
    50b4:	460d      	mov	r5, r1
    50b6:	4690      	mov	r8, r2
    50b8:	f8d0 9014 	ldr.w	r9, [r0, #20]
    50bc:	2b00      	cmp	r3, #0
    50be:	d075      	beq.n	51ac <fseek+0x104>
    50c0:	4648      	mov	r0, r9
    50c2:	f000 fd7f 	bl	5bc4 <__sys_istty>
    50c6:	4607      	mov	r7, r0
    50c8:	2800      	cmp	r0, #0
    50ca:	d16f      	bne.n	51ac <fseek+0x104>
    50cc:	f1b8 0f01 	cmp.w	r8, #1
    50d0:	d006      	beq.n	50e0 <fseek+0x38>
    50d2:	f1b8 0f02 	cmp.w	r8, #2
    50d6:	d008      	beq.n	50ea <fseek+0x42>
    50d8:	f1b8 0f00 	cmp.w	r8, #0
    50dc:	d166      	bne.n	51ac <fseek+0x104>
    50de:	e029      	b.n	5134 <fseek+0x8c>
    50e0:	4620      	mov	r0, r4
    50e2:	f000 f869 	bl	51b8 <ftell>
    50e6:	4405      	add	r5, r0
    50e8:	e024      	b.n	5134 <fseek+0x8c>
    50ea:	4648      	mov	r0, r9
    50ec:	f000 fd67 	bl	5bbe <__sys_flen>
    50f0:	f1b0 0e00 	subs.w	lr, r0, #0
    50f4:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    50f8:	da04      	bge.n	5104 <fseek+0x5c>
    50fa:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    50fe:	60e1      	str	r1, [r4, #12]
    5100:	2701      	movs	r7, #1
    5102:	e054      	b.n	51ae <fseek+0x106>
    5104:	6823      	ldr	r3, [r4, #0]
    5106:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5108:	461a      	mov	r2, r3
    510a:	69a3      	ldr	r3, [r4, #24]
    510c:	4619      	mov	r1, r3
    510e:	6883      	ldr	r3, [r0, #8]
    5110:	4293      	cmp	r3, r2
    5112:	bf2c      	ite	cs
    5114:	18c9      	addcs	r1, r1, r3
    5116:	1889      	addcc	r1, r1, r2
    5118:	6923      	ldr	r3, [r4, #16]
    511a:	f01c 0f20 	tst.w	ip, #32
    511e:	eba1 0303 	sub.w	r3, r1, r3
    5122:	d003      	beq.n	512c <fseek+0x84>
    5124:	6842      	ldr	r2, [r0, #4]
    5126:	4293      	cmp	r3, r2
    5128:	bfb8      	it	lt
    512a:	4613      	movlt	r3, r2
    512c:	4573      	cmp	r3, lr
    512e:	bfac      	ite	ge
    5130:	18ed      	addge	r5, r5, r3
    5132:	4475      	addlt	r5, lr
    5134:	2d00      	cmp	r5, #0
    5136:	db39      	blt.n	51ac <fseek+0x104>
    5138:	f416 5f00 	tst.w	r6, #8192	; 0x2000
    513c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    513e:	d004      	beq.n	514a <fseek+0xa2>
    5140:	6823      	ldr	r3, [r4, #0]
    5142:	6891      	ldr	r1, [r2, #8]
    5144:	4299      	cmp	r1, r3
    5146:	bf38      	it	cc
    5148:	6093      	strcc	r3, [r2, #8]
    514a:	69a1      	ldr	r1, [r4, #24]
    514c:	428d      	cmp	r5, r1
    514e:	db10      	blt.n	5172 <fseek+0xca>
    5150:	6890      	ldr	r0, [r2, #8]
    5152:	6823      	ldr	r3, [r4, #0]
    5154:	f8d4 e010 	ldr.w	lr, [r4, #16]
    5158:	4283      	cmp	r3, r0
    515a:	bf38      	it	cc
    515c:	4603      	movcc	r3, r0
    515e:	1858      	adds	r0, r3, r1
    5160:	ebce 0000 	rsb	r0, lr, r0
    5164:	4285      	cmp	r5, r0
    5166:	dc04      	bgt.n	5172 <fseek+0xca>
    5168:	68d0      	ldr	r0, [r2, #12]
    516a:	eb01 0c00 	add.w	ip, r1, r0
    516e:	4565      	cmp	r5, ip
    5170:	db06      	blt.n	5180 <fseek+0xd8>
    5172:	2300      	movs	r3, #0
    5174:	60a3      	str	r3, [r4, #8]
    5176:	6063      	str	r3, [r4, #4]
    5178:	f046 0620 	orr.w	r6, r6, #32
    517c:	6055      	str	r5, [r2, #4]
    517e:	e00f      	b.n	51a0 <fseek+0xf8>
    5180:	1a6d      	subs	r5, r5, r1
    5182:	07b1      	lsls	r1, r6, #30
    5184:	bf44      	itt	mi
    5186:	1a28      	submi	r0, r5, r0
    5188:	60a0      	strmi	r0, [r4, #8]
    518a:	07f2      	lsls	r2, r6, #31
    518c:	bf44      	itt	mi
    518e:	ebc3 030e 	rsbmi	r3, r3, lr
    5192:	195b      	addmi	r3, r3, r5
    5194:	4475      	add	r5, lr
    5196:	bf48      	it	mi
    5198:	6063      	strmi	r3, [r4, #4]
    519a:	6025      	str	r5, [r4, #0]
    519c:	f026 0620 	bic.w	r6, r6, #32
    51a0:	f426 2603 	bic.w	r6, r6, #536576	; 0x83000
    51a4:	f026 0640 	bic.w	r6, r6, #64	; 0x40
    51a8:	60e6      	str	r6, [r4, #12]
    51aa:	e000      	b.n	51ae <fseek+0x106>
    51ac:	2702      	movs	r7, #2
    51ae:	4638      	mov	r0, r7
    51b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    51b4:	00100003 	.word	0x00100003

000051b8 <ftell>:
    51b8:	68c3      	ldr	r3, [r0, #12]
    51ba:	079a      	lsls	r2, r3, #30
    51bc:	d105      	bne.n	51ca <ftell+0x12>
    51be:	4b10      	ldr	r3, [pc, #64]	; (5200 <ftell+0x48>)
    51c0:	2221      	movs	r2, #33	; 0x21
    51c2:	601a      	str	r2, [r3, #0]
    51c4:	f04f 30ff 	mov.w	r0, #4294967295
    51c8:	4770      	bx	lr
    51ca:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    51ce:	f003 0320 	and.w	r3, r3, #32
    51d2:	d00a      	beq.n	51ea <ftell+0x32>
    51d4:	b113      	cbz	r3, 51dc <ftell+0x24>
    51d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    51d8:	6858      	ldr	r0, [r3, #4]
    51da:	e004      	b.n	51e6 <ftell+0x2e>
    51dc:	6802      	ldr	r2, [r0, #0]
    51de:	6983      	ldr	r3, [r0, #24]
    51e0:	6900      	ldr	r0, [r0, #16]
    51e2:	4413      	add	r3, r2
    51e4:	1a18      	subs	r0, r3, r0
    51e6:	3801      	subs	r0, #1
    51e8:	4770      	bx	lr
    51ea:	b113      	cbz	r3, 51f2 <ftell+0x3a>
    51ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
    51ee:	6858      	ldr	r0, [r3, #4]
    51f0:	4770      	bx	lr
    51f2:	6802      	ldr	r2, [r0, #0]
    51f4:	6983      	ldr	r3, [r0, #24]
    51f6:	6900      	ldr	r0, [r0, #16]
    51f8:	4413      	add	r3, r2
    51fa:	1a18      	subs	r0, r3, r0
    51fc:	4770      	bx	lr
    51fe:	bf00      	nop
    5200:	10000894 	.word	0x10000894

00005204 <remove>:
    5204:	b510      	push	{r4, lr}
    5206:	4604      	mov	r4, r0
    5208:	f7ff fc62 	bl	4ad0 <strlen>
    520c:	4601      	mov	r1, r0
    520e:	4620      	mov	r0, r4
    5210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5214:	f000 bcd9 	b.w	5bca <__sys_remove>

00005218 <_sbrk>:
    5218:	b538      	push	{r3, r4, r5, lr}
    521a:	4b0c      	ldr	r3, [pc, #48]	; (524c <_sbrk+0x34>)
    521c:	681a      	ldr	r2, [r3, #0]
    521e:	b90a      	cbnz	r2, 5224 <_sbrk+0xc>
    5220:	4a0b      	ldr	r2, [pc, #44]	; (5250 <_sbrk+0x38>)
    5222:	601a      	str	r2, [r3, #0]
    5224:	1cc4      	adds	r4, r0, #3
    5226:	681d      	ldr	r5, [r3, #0]
    5228:	f024 0403 	bic.w	r4, r4, #3
    522c:	442c      	add	r4, r5
    522e:	4620      	mov	r0, r4
    5230:	f000 f834 	bl	529c <__check_heap_overflow>
    5234:	b918      	cbnz	r0, 523e <_sbrk+0x26>
    5236:	4b05      	ldr	r3, [pc, #20]	; (524c <_sbrk+0x34>)
    5238:	4628      	mov	r0, r5
    523a:	601c      	str	r4, [r3, #0]
    523c:	bd38      	pop	{r3, r4, r5, pc}
    523e:	4b05      	ldr	r3, [pc, #20]	; (5254 <_sbrk+0x3c>)
    5240:	220c      	movs	r2, #12
    5242:	601a      	str	r2, [r3, #0]
    5244:	f04f 30ff 	mov.w	r0, #4294967295
    5248:	bd38      	pop	{r3, r4, r5, pc}
    524a:	bf00      	nop
    524c:	10002190 	.word	0x10002190
    5250:	10002194 	.word	0x10002194
    5254:	10000894 	.word	0x10000894

00005258 <_do_fflush>:
    5258:	68c2      	ldr	r2, [r0, #12]
    525a:	b570      	push	{r4, r5, r6, lr}
    525c:	f012 0303 	ands.w	r3, r2, #3
    5260:	4604      	mov	r4, r0
    5262:	d019      	beq.n	5298 <_do_fflush+0x40>
    5264:	0693      	lsls	r3, r2, #26
    5266:	d504      	bpl.n	5272 <_do_fflush+0x1a>
    5268:	6a43      	ldr	r3, [r0, #36]	; 0x24
    526a:	685d      	ldr	r5, [r3, #4]
    526c:	f7ff fc90 	bl	4b90 <_deferredlazyseek>
    5270:	e004      	b.n	527c <_do_fflush+0x24>
    5272:	6805      	ldr	r5, [r0, #0]
    5274:	6983      	ldr	r3, [r0, #24]
    5276:	442b      	add	r3, r5
    5278:	6905      	ldr	r5, [r0, #16]
    527a:	1b5d      	subs	r5, r3, r5
    527c:	68e3      	ldr	r3, [r4, #12]
    527e:	4620      	mov	r0, r4
    5280:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    5284:	60e3      	str	r3, [r4, #12]
    5286:	f7ff fd7b 	bl	4d80 <_fflush>
    528a:	4606      	mov	r6, r0
    528c:	4629      	mov	r1, r5
    528e:	4620      	mov	r0, r4
    5290:	2200      	movs	r2, #0
    5292:	f7ff ff09 	bl	50a8 <fseek>
    5296:	4633      	mov	r3, r6
    5298:	4618      	mov	r0, r3
    529a:	bd70      	pop	{r4, r5, r6, pc}

0000529c <__check_heap_overflow>:
    529c:	4b04      	ldr	r3, [pc, #16]	; (52b0 <__check_heap_overflow+0x14>)
    529e:	b123      	cbz	r3, 52aa <__check_heap_overflow+0xe>
    52a0:	4298      	cmp	r0, r3
    52a2:	bf34      	ite	cc
    52a4:	2000      	movcc	r0, #0
    52a6:	2001      	movcs	r0, #1
    52a8:	4770      	bx	lr
    52aa:	4618      	mov	r0, r3
    52ac:	4770      	bx	lr
    52ae:	bf00      	nop
    52b0:	00000000 	.word	0x00000000

000052b4 <__aeabi_uldivmod>:
    52b4:	f05f 0c00 	movs.w	ip, #0

000052b8 <__bhs_ldivmod1>:
    52b8:	b530      	push	{r4, r5, lr}
    52ba:	001c      	movs	r4, r3
    52bc:	d122      	bne.n	5304 <ldiv64>
    52be:	0012      	movs	r2, r2
    52c0:	d06f      	beq.n	53a2 <ldiv_divzero>
    52c2:	4291      	cmp	r1, r2
    52c4:	d306      	bcc.n	52d4 <ldiv32>
    52c6:	4605      	mov	r5, r0
    52c8:	4608      	mov	r0, r1
    52ca:	2100      	movs	r1, #0
    52cc:	f000 f86f 	bl	53ae <udiv6432>
    52d0:	4604      	mov	r4, r0
    52d2:	4628      	mov	r0, r5

000052d4 <ldiv32>:
    52d4:	f000 f86b 	bl	53ae <udiv6432>
    52d8:	460a      	mov	r2, r1
    52da:	4621      	mov	r1, r4

000052dc <ldiv_return>:
    52dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    52e0:	f01c 4f40 	tst.w	ip, #3221225472	; 0xc0000000
    52e4:	bf08      	it	eq
    52e6:	4770      	bxeq	lr
    52e8:	d503      	bpl.n	52f2 <ldiv_sign>
    52ea:	4249      	negs	r1, r1
    52ec:	4240      	negs	r0, r0
    52ee:	f161 0100 	sbc.w	r1, r1, #0

000052f2 <ldiv_sign>:
    52f2:	ea5f 0c8c 	movs.w	ip, ip, lsl #2
    52f6:	bf38      	it	cc
    52f8:	4770      	bxcc	lr
    52fa:	425b      	negs	r3, r3
    52fc:	4252      	negs	r2, r2
    52fe:	f163 0300 	sbc.w	r3, r3, #0
    5302:	4770      	bx	lr

00005304 <ldiv64>:
    5304:	d442      	bmi.n	538c <ldiv_res01>
    5306:	0c1c      	lsrs	r4, r3, #16
    5308:	bf04      	itt	eq
    530a:	041b      	lsleq	r3, r3, #16
    530c:	f10c 0c10 	addeq.w	ip, ip, #16
    5310:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    5314:	bf04      	itt	eq
    5316:	021b      	lsleq	r3, r3, #8
    5318:	f10c 0c08 	addeq.w	ip, ip, #8
    531c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    5320:	bf04      	itt	eq
    5322:	011b      	lsleq	r3, r3, #4
    5324:	f10c 0c04 	addeq.w	ip, ip, #4
    5328:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    532c:	bf04      	itt	eq
    532e:	f10c 0c02 	addeq.w	ip, ip, #2
    5332:	ea5f 0383 	movseq.w	r3, r3, lsl #2
    5336:	bf5c      	itt	pl
    5338:	f10c 0c01 	addpl.w	ip, ip, #1
    533c:	005b      	lslpl	r3, r3, #1
    533e:	f1cc 0e20 	rsb	lr, ip, #32
    5342:	fa22 f40e 	lsr.w	r4, r2, lr
    5346:	4323      	orrs	r3, r4
    5348:	fa02 f20c 	lsl.w	r2, r2, ip
    534c:	fa00 f50c 	lsl.w	r5, r0, ip
    5350:	fa20 f00e 	lsr.w	r0, r0, lr
    5354:	fa01 f40c 	lsl.w	r4, r1, ip
    5358:	4320      	orrs	r0, r4
    535a:	fa21 f10e 	lsr.w	r1, r1, lr
    535e:	4614      	mov	r4, r2
    5360:	461a      	mov	r2, r3
    5362:	f000 f824 	bl	53ae <udiv6432>
    5366:	fba4 2300 	umull	r2, r3, r4, r0
    536a:	1aaa      	subs	r2, r5, r2
    536c:	eb71 0303 	sbcs.w	r3, r1, r3
    5370:	bf3c      	itt	cc
    5372:	191b      	addcc	r3, r3, r4
    5374:	3801      	subcc	r0, #1
    5376:	f1cc 0e20 	rsb	lr, ip, #32
    537a:	fa22 f20c 	lsr.w	r2, r2, ip
    537e:	fa03 f40e 	lsl.w	r4, r3, lr
    5382:	4322      	orrs	r2, r4
    5384:	fa23 f30c 	lsr.w	r3, r3, ip
    5388:	2100      	movs	r1, #0
    538a:	e7a7      	b.n	52dc <ldiv_return>

0000538c <ldiv_res01>:
    538c:	1a82      	subs	r2, r0, r2
    538e:	eb71 0303 	sbcs.w	r3, r1, r3
    5392:	bf3c      	itt	cc
    5394:	4602      	movcc	r2, r0
    5396:	460b      	movcc	r3, r1
    5398:	f04f 0100 	mov.w	r1, #0
    539c:	f141 0000 	adc.w	r0, r1, #0
    53a0:	e79c      	b.n	52dc <ldiv_return>

000053a2 <ldiv_divzero>:
    53a2:	2000      	movs	r0, #0
    53a4:	2100      	movs	r1, #0
    53a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    53aa:	f000 b83d 	b.w	5428 <__aeabi_idiv0>

000053ae <udiv6432>:
    53ae:	2304      	movs	r3, #4
    53b0:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    53b4:	d209      	bcs.n	53ca <udiv6432_entry>

000053b6 <udiv6432_loop1>:
    53b6:	0209      	lsls	r1, r1, #8
    53b8:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
    53bc:	0200      	lsls	r0, r0, #8
    53be:	3b01      	subs	r3, #1
    53c0:	bf08      	it	eq
    53c2:	4770      	bxeq	lr
    53c4:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    53c8:	d3f5      	bcc.n	53b6 <udiv6432_loop1>

000053ca <udiv6432_entry>:
    53ca:	1800      	adds	r0, r0, r0

000053cc <udiv6432_loop>:
    53cc:	4149      	adcs	r1, r1
    53ce:	bf34      	ite	cc
    53d0:	4291      	cmpcc	r1, r2
    53d2:	1a89      	subcs	r1, r1, r2
    53d4:	4140      	adcs	r0, r0
    53d6:	4149      	adcs	r1, r1
    53d8:	bf34      	ite	cc
    53da:	4291      	cmpcc	r1, r2
    53dc:	1a89      	subcs	r1, r1, r2
    53de:	4140      	adcs	r0, r0
    53e0:	4149      	adcs	r1, r1
    53e2:	bf34      	ite	cc
    53e4:	4291      	cmpcc	r1, r2
    53e6:	1a89      	subcs	r1, r1, r2
    53e8:	4140      	adcs	r0, r0
    53ea:	4149      	adcs	r1, r1
    53ec:	bf34      	ite	cc
    53ee:	4291      	cmpcc	r1, r2
    53f0:	1a89      	subcs	r1, r1, r2
    53f2:	4140      	adcs	r0, r0
    53f4:	4149      	adcs	r1, r1
    53f6:	bf34      	ite	cc
    53f8:	4291      	cmpcc	r1, r2
    53fa:	1a89      	subcs	r1, r1, r2
    53fc:	4140      	adcs	r0, r0
    53fe:	4149      	adcs	r1, r1
    5400:	bf34      	ite	cc
    5402:	4291      	cmpcc	r1, r2
    5404:	1a89      	subcs	r1, r1, r2
    5406:	4140      	adcs	r0, r0
    5408:	4149      	adcs	r1, r1
    540a:	bf34      	ite	cc
    540c:	4291      	cmpcc	r1, r2
    540e:	1a89      	subcs	r1, r1, r2
    5410:	4140      	adcs	r0, r0
    5412:	4149      	adcs	r1, r1
    5414:	bf34      	ite	cc
    5416:	4291      	cmpcc	r1, r2
    5418:	1a89      	subcs	r1, r1, r2
    541a:	4140      	adcs	r0, r0
    541c:	f1a3 0301 	sub.w	r3, r3, #1
    5420:	f013 0f0f 	tst.w	r3, #15
    5424:	d1d2      	bne.n	53cc <udiv6432_loop>
    5426:	4770      	bx	lr

00005428 <__aeabi_idiv0>:
    5428:	4770      	bx	lr
	...

0000542c <__aeabi_dmul>:
    542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5430:	f3c1 540a 	ubfx	r4, r1, #20, #11
    5434:	2c00      	cmp	r4, #0
    5436:	d054      	beq.n	54e2 <__aeabi_dmul+0xb6>
    5438:	f240 76ff 	movw	r6, #2047	; 0x7ff
    543c:	42b4      	cmp	r4, r6
    543e:	d050      	beq.n	54e2 <__aeabi_dmul+0xb6>
    5440:	f3c3 550a 	ubfx	r5, r3, #20, #11
    5444:	2d00      	cmp	r5, #0
    5446:	d04c      	beq.n	54e2 <__aeabi_dmul+0xb6>
    5448:	42b5      	cmp	r5, r6
    544a:	d04a      	beq.n	54e2 <__aeabi_dmul+0xb6>
    544c:	f3c1 0e13 	ubfx	lr, r1, #0, #20
    5450:	ea4f 2ac2 	mov.w	sl, r2, lsl #11
    5454:	f44e 1e80 	orr.w	lr, lr, #1048576	; 0x100000
    5458:	fbae 670a 	umull	r6, r7, lr, sl
    545c:	fbaa ab00 	umull	sl, fp, sl, r0
    5460:	eb16 080b 	adds.w	r8, r6, fp
    5464:	463e      	mov	r6, r7
    5466:	ea4f 5252 	mov.w	r2, r2, lsr #21
    546a:	ea42 22c3 	orr.w	r2, r2, r3, lsl #11
    546e:	f04f 0900 	mov.w	r9, #0
    5472:	f149 0900 	adc.w	r9, r9, #0
    5476:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    547a:	fbe0 8902 	umlal	r8, r9, r0, r2
    547e:	2700      	movs	r7, #0
    5480:	eb16 0609 	adds.w	r6, r6, r9
    5484:	f147 0700 	adc.w	r7, r7, #0
    5488:	fbee 6702 	umlal	r6, r7, lr, r2
    548c:	404b      	eors	r3, r1
    548e:	f5b7 1f80 	cmp.w	r7, #1048576	; 0x100000
    5492:	442c      	add	r4, r5
    5494:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    5498:	ea48 089a 	orr.w	r8, r8, sl, lsr #2
    549c:	d24b      	bcs.n	5536 <__aeabi_dmul+0x10a>
    549e:	19b6      	adds	r6, r6, r6
    54a0:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    54a4:	417f      	adcs	r7, r7
    54a6:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
    54aa:	4316      	orrs	r6, r2
    54ac:	ea4f 0848 	mov.w	r8, r8, lsl #1
    54b0:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    54b4:	18b6      	adds	r6, r6, r2
    54b6:	f240 72fd 	movw	r2, #2045	; 0x7fd
    54ba:	f147 0700 	adc.w	r7, r7, #0
    54be:	f1b8 4f00 	cmp.w	r8, #2147483648	; 0x80000000
    54c2:	4635      	mov	r5, r6
    54c4:	bf08      	it	eq
    54c6:	f026 0501 	biceq.w	r5, r6, #1
    54ca:	4294      	cmp	r4, r2
    54cc:	d936      	bls.n	553c <__aeabi_dmul+0x110>
    54ce:	2c00      	cmp	r4, #0
    54d0:	bfa4      	itt	ge
    54d2:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    54d6:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    54da:	2000      	movs	r0, #0
    54dc:	4619      	mov	r1, r3
    54de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54e2:	ea83 0201 	eor.w	r2, r3, r1
    54e6:	0049      	lsls	r1, r1, #1
    54e8:	f511 1f00 	cmn.w	r1, #2097152	; 0x200000
    54ec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
    54f0:	d213      	bcs.n	551a <__aeabi_dmul+0xee>
    54f2:	005b      	lsls	r3, r3, #1
    54f4:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    54f8:	d317      	bcc.n	552a <__aeabi_dmul+0xfe>
    54fa:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    54fe:	d80d      	bhi.n	551c <__aeabi_dmul+0xf0>
    5500:	0d49      	lsrs	r1, r1, #21
    5502:	0549      	lsls	r1, r1, #21
    5504:	2000      	movs	r0, #0
    5506:	b169      	cbz	r1, 5524 <__aeabi_dmul+0xf8>
    5508:	0d5b      	lsrs	r3, r3, #21
    550a:	055b      	lsls	r3, r3, #21
    550c:	b153      	cbz	r3, 5524 <__aeabi_dmul+0xf8>
    550e:	f042 42ff 	orr.w	r2, r2, #2139095040	; 0x7f800000
    5512:	f442 01e0 	orr.w	r1, r2, #7340032	; 0x700000
    5516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    551a:	d00a      	beq.n	5532 <__aeabi_dmul+0x106>
    551c:	2000      	movs	r0, #0
    551e:	490a      	ldr	r1, [pc, #40]	; (5548 <__aeabi_dmul+0x11c>)
    5520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5524:	4908      	ldr	r1, [pc, #32]	; (5548 <__aeabi_dmul+0x11c>)
    5526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    552a:	2000      	movs	r0, #0
    552c:	4611      	mov	r1, r2
    552e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5532:	005b      	lsls	r3, r3, #1
    5534:	e7e1      	b.n	54fa <__aeabi_dmul+0xce>
    5536:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    553a:	e7b9      	b.n	54b0 <__aeabi_dmul+0x84>
    553c:	433b      	orrs	r3, r7
    553e:	eb03 5104 	add.w	r1, r3, r4, lsl #20
    5542:	4628      	mov	r0, r5
    5544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5548:	7ff80000 	.word	0x7ff80000

0000554c <__aeabi_ddiv>:
    554c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
    5550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5554:	f1bc 0f00 	cmp.w	ip, #0
    5558:	d053      	beq.n	5602 <__aeabi_ddiv+0xb6>
    555a:	f240 74ff 	movw	r4, #2047	; 0x7ff
    555e:	45a4      	cmp	ip, r4
    5560:	d04f      	beq.n	5602 <__aeabi_ddiv+0xb6>
    5562:	f3c3 580a 	ubfx	r8, r3, #20, #11
    5566:	f1b8 0f00 	cmp.w	r8, #0
    556a:	d04a      	beq.n	5602 <__aeabi_ddiv+0xb6>
    556c:	45a0      	cmp	r8, r4
    556e:	d048      	beq.n	5602 <__aeabi_ddiv+0xb6>
    5570:	ea4f 5a50 	mov.w	sl, r0, lsr #21
    5574:	ea4f 5952 	mov.w	r9, r2, lsr #21
    5578:	02c4      	lsls	r4, r0, #11
    557a:	02d6      	lsls	r6, r2, #11
    557c:	ea4a 20c1 	orr.w	r0, sl, r1, lsl #11
    5580:	ea49 22c3 	orr.w	r2, r9, r3, lsl #11
    5584:	f040 4500 	orr.w	r5, r0, #2147483648	; 0x80000000
    5588:	f042 4700 	orr.w	r7, r2, #2147483648	; 0x80000000
    558c:	42bd      	cmp	r5, r7
    558e:	bf08      	it	eq
    5590:	42b4      	cmpeq	r4, r6
    5592:	ebc8 0c0c 	rsb	ip, r8, ip
    5596:	ea83 0801 	eor.w	r8, r3, r1
    559a:	d25d      	bcs.n	5658 <__aeabi_ddiv+0x10c>
    559c:	f20c 3cfd 	addw	ip, ip, #1021	; 0x3fd
    55a0:	0879      	lsrs	r1, r7, #1
    55a2:	ea4f 0036 	mov.w	r0, r6, rrx
    55a6:	2334      	movs	r3, #52	; 0x34
    55a8:	2200      	movs	r2, #0
    55aa:	e000      	b.n	55ae <__aeabi_ddiv+0x62>
    55ac:	3b01      	subs	r3, #1
    55ae:	428d      	cmp	r5, r1
    55b0:	bf08      	it	eq
    55b2:	4284      	cmpeq	r4, r0
    55b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    55b8:	d304      	bcc.n	55c4 <__aeabi_ddiv+0x78>
    55ba:	1a24      	subs	r4, r4, r0
    55bc:	eb65 0501 	sbc.w	r5, r5, r1
    55c0:	f042 0201 	orr.w	r2, r2, #1
    55c4:	1924      	adds	r4, r4, r4
    55c6:	416d      	adcs	r5, r5
    55c8:	2b20      	cmp	r3, #32
    55ca:	d062      	beq.n	5692 <__aeabi_ddiv+0x146>
    55cc:	2b00      	cmp	r3, #0
    55ce:	d1ed      	bne.n	55ac <__aeabi_ddiv+0x60>
    55d0:	428d      	cmp	r5, r1
    55d2:	bf08      	it	eq
    55d4:	4284      	cmpeq	r4, r0
    55d6:	d303      	bcc.n	55e0 <__aeabi_ddiv+0x94>
    55d8:	3201      	adds	r2, #1
    55da:	bf08      	it	eq
    55dc:	f10e 0e01 	addeq.w	lr, lr, #1
    55e0:	f240 71fd 	movw	r1, #2045	; 0x7fd
    55e4:	458c      	cmp	ip, r1
    55e6:	f008 4300 	and.w	r3, r8, #2147483648	; 0x80000000
    55ea:	d93b      	bls.n	5664 <__aeabi_ddiv+0x118>
    55ec:	f1bc 0f00 	cmp.w	ip, #0
    55f0:	bfa4      	itt	ge
    55f2:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    55f6:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    55fa:	2000      	movs	r0, #0
    55fc:	4619      	mov	r1, r3
    55fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5602:	004a      	lsls	r2, r1, #1
    5604:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    5608:	d81c      	bhi.n	5644 <__aeabi_ddiv+0xf8>
    560a:	005c      	lsls	r4, r3, #1
    560c:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5610:	d818      	bhi.n	5644 <__aeabi_ddiv+0xf8>
    5612:	ea43 0001 	orr.w	r0, r3, r1
    5616:	f3c0 500a 	ubfx	r0, r0, #20, #11
    561a:	0545      	lsls	r5, r0, #21
    561c:	b1b0      	cbz	r0, 564c <__aeabi_ddiv+0x100>
    561e:	0d50      	lsrs	r0, r2, #21
    5620:	4059      	eors	r1, r3
    5622:	0540      	lsls	r0, r0, #21
    5624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    5628:	b1a0      	cbz	r0, 5654 <__aeabi_ddiv+0x108>
    562a:	0d60      	lsrs	r0, r4, #21
    562c:	0540      	lsls	r0, r0, #21
    562e:	b348      	cbz	r0, 5684 <__aeabi_ddiv+0x138>
    5630:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5634:	d11d      	bne.n	5672 <__aeabi_ddiv+0x126>
    5636:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    563a:	d003      	beq.n	5644 <__aeabi_ddiv+0xf8>
    563c:	2200      	movs	r2, #0
    563e:	4610      	mov	r0, r2
    5640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5644:	2000      	movs	r0, #0
    5646:	4914      	ldr	r1, [pc, #80]	; (5698 <__aeabi_ddiv+0x14c>)
    5648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    564c:	4912      	ldr	r1, [pc, #72]	; (5698 <__aeabi_ddiv+0x14c>)
    564e:	4628      	mov	r0, r5
    5650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5658:	086d      	lsrs	r5, r5, #1
    565a:	ea4f 0434 	mov.w	r4, r4, rrx
    565e:	f20c 3cfe 	addw	ip, ip, #1022	; 0x3fe
    5662:	e79d      	b.n	55a0 <__aeabi_ddiv+0x54>
    5664:	eb03 530c 	add.w	r3, r3, ip, lsl #20
    5668:	eb03 010e 	add.w	r1, r3, lr
    566c:	4610      	mov	r0, r2
    566e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5672:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    5676:	2200      	movs	r2, #0
    5678:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    567c:	4610      	mov	r0, r2
    567e:	4619      	mov	r1, r3
    5680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5684:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    5688:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    568c:	4619      	mov	r1, r3
    568e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5692:	4696      	mov	lr, r2
    5694:	e78a      	b.n	55ac <__aeabi_ddiv+0x60>
    5696:	bf00      	nop
    5698:	7ff80000 	.word	0x7ff80000

0000569c <__aeabi_dsub>:
    569c:	b5f0      	push	{r4, r5, r6, r7, lr}
    569e:	ea93 0401 	eors.w	r4, r3, r1
    56a2:	460d      	mov	r5, r1
    56a4:	f100 80cc 	bmi.w	5840 <__aeabi_dsub+0x1a4>
    56a8:	4299      	cmp	r1, r3
    56aa:	4606      	mov	r6, r0
    56ac:	d270      	bcs.n	5790 <__aeabi_dsub+0xf4>
    56ae:	4056      	eors	r6, r2
    56b0:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    56b4:	4072      	eors	r2, r6
    56b6:	4056      	eors	r6, r2
    56b8:	404d      	eors	r5, r1
    56ba:	404b      	eors	r3, r1
    56bc:	f240 70ff 	movw	r0, #2047	; 0x7ff
    56c0:	0d2c      	lsrs	r4, r5, #20
    56c2:	f424 6100 	bic.w	r1, r4, #2048	; 0x800
    56c6:	4281      	cmp	r1, r0
    56c8:	eba4 5713 	sub.w	r7, r4, r3, lsr #20
    56cc:	f000 8096 	beq.w	57fc <__aeabi_dsub+0x160>
    56d0:	428f      	cmp	r7, r1
    56d2:	f000 8099 	beq.w	5808 <__aeabi_dsub+0x16c>
    56d6:	f3c5 0513 	ubfx	r5, r5, #0, #20
    56da:	f3c3 0313 	ubfx	r3, r3, #0, #20
    56de:	2f1f      	cmp	r7, #31
    56e0:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
    56e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    56e8:	d857      	bhi.n	579a <__aeabi_dsub+0xfe>
    56ea:	f1c7 0020 	rsb	r0, r7, #32
    56ee:	fa03 fe00 	lsl.w	lr, r3, r0
    56f2:	fa22 f107 	lsr.w	r1, r2, r7
    56f6:	ea4e 0101 	orr.w	r1, lr, r1
    56fa:	40fb      	lsrs	r3, r7
    56fc:	1a71      	subs	r1, r6, r1
    56fe:	1aed      	subs	r5, r5, r3
    5700:	428e      	cmp	r6, r1
    5702:	bf38      	it	cc
    5704:	f105 35ff 	addcc.w	r5, r5, #4294967295
    5708:	fa12 f300 	lsls.w	r3, r2, r0
    570c:	d006      	beq.n	571c <__aeabi_dsub+0x80>
    570e:	3901      	subs	r1, #1
    5710:	1c4f      	adds	r7, r1, #1
    5712:	f1c3 0300 	rsb	r3, r3, #0
    5716:	bf08      	it	eq
    5718:	f105 35ff 	addeq.w	r5, r5, #4294967295
    571c:	f415 1fc0 	tst.w	r5, #1572864	; 0x180000
    5720:	d158      	bne.n	57d4 <__aeabi_dsub+0x138>
    5722:	0fdb      	lsrs	r3, r3, #31
    5724:	0fca      	lsrs	r2, r1, #31
    5726:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    572a:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    572e:	ea53 0502 	orrs.w	r5, r3, r2
    5732:	f000 809a 	beq.w	586a <__aeabi_dsub+0x1ce>
    5736:	0b51      	lsrs	r1, r2, #13
    5738:	f1a4 0502 	sub.w	r5, r4, #2
    573c:	d108      	bne.n	5750 <__aeabi_dsub+0xb4>
    573e:	0e19      	lsrs	r1, r3, #24
    5740:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
    5744:	0b51      	lsrs	r1, r2, #13
    5746:	f1a5 0508 	sub.w	r5, r5, #8
    574a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    574e:	d0f6      	beq.n	573e <__aeabi_dsub+0xa2>
    5750:	0c51      	lsrs	r1, r2, #17
    5752:	d104      	bne.n	575e <__aeabi_dsub+0xc2>
    5754:	0f19      	lsrs	r1, r3, #28
    5756:	3d04      	subs	r5, #4
    5758:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    575c:	011b      	lsls	r3, r3, #4
    575e:	0cd1      	lsrs	r1, r2, #19
    5760:	d104      	bne.n	576c <__aeabi_dsub+0xd0>
    5762:	0f99      	lsrs	r1, r3, #30
    5764:	3d02      	subs	r5, #2
    5766:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
    576a:	009b      	lsls	r3, r3, #2
    576c:	0d11      	lsrs	r1, r2, #20
    576e:	d104      	bne.n	577a <__aeabi_dsub+0xde>
    5770:	0fd9      	lsrs	r1, r3, #31
    5772:	3d01      	subs	r5, #1
    5774:	ea41 0242 	orr.w	r2, r1, r2, lsl #1
    5778:	005b      	lsls	r3, r3, #1
    577a:	0ae4      	lsrs	r4, r4, #11
    577c:	ebb4 2fd5 	cmp.w	r4, r5, lsr #11
    5780:	f04f 0000 	mov.w	r0, #0
    5784:	bf06      	itte	eq
    5786:	eb02 5105 	addeq.w	r1, r2, r5, lsl #20
    578a:	4618      	moveq	r0, r3
    578c:	07e1      	lslne	r1, r4, #31
    578e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5790:	4290      	cmp	r0, r2
    5792:	d893      	bhi.n	56bc <__aeabi_dsub+0x20>
    5794:	4299      	cmp	r1, r3
    5796:	d191      	bne.n	56bc <__aeabi_dsub+0x20>
    5798:	e789      	b.n	56ae <__aeabi_dsub+0x12>
    579a:	2f35      	cmp	r7, #53	; 0x35
    579c:	d826      	bhi.n	57ec <__aeabi_dsub+0x150>
    579e:	f1a7 0020 	sub.w	r0, r7, #32
    57a2:	fa23 f100 	lsr.w	r1, r3, r0
    57a6:	1a71      	subs	r1, r6, r1
    57a8:	428e      	cmp	r6, r1
    57aa:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    57ae:	fa22 f000 	lsr.w	r0, r2, r0
    57b2:	bf38      	it	cc
    57b4:	f105 35ff 	addcc.w	r5, r5, #4294967295
    57b8:	40bb      	lsls	r3, r7
    57ba:	0612      	lsls	r2, r2, #24
    57bc:	ea43 0300 	orr.w	r3, r3, r0
    57c0:	d048      	beq.n	5854 <__aeabi_dsub+0x1b8>
    57c2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    57c6:	3901      	subs	r1, #1
    57c8:	1c4e      	adds	r6, r1, #1
    57ca:	f1c3 0300 	rsb	r3, r3, #0
    57ce:	bf08      	it	eq
    57d0:	f105 35ff 	addeq.w	r5, r5, #4294967295
    57d4:	02e8      	lsls	r0, r5, #11
    57d6:	d42e      	bmi.n	5836 <__aeabi_dsub+0x19a>
    57d8:	3c01      	subs	r4, #1
    57da:	0562      	lsls	r2, r4, #21
    57dc:	d037      	beq.n	584e <__aeabi_dsub+0x1b2>
    57de:	0fde      	lsrs	r6, r3, #31
    57e0:	0fca      	lsrs	r2, r1, #31
    57e2:	ea42 0545 	orr.w	r5, r2, r5, lsl #1
    57e6:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
    57ea:	005b      	lsls	r3, r3, #1
    57ec:	2b00      	cmp	r3, #0
    57ee:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    57f2:	db11      	blt.n	5818 <__aeabi_dsub+0x17c>
    57f4:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    57f8:	4630      	mov	r0, r6
    57fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57fc:	032b      	lsls	r3, r5, #12
    57fe:	d117      	bne.n	5830 <__aeabi_dsub+0x194>
    5800:	b387      	cbz	r7, 5864 <__aeabi_dsub+0x1c8>
    5802:	4630      	mov	r0, r6
    5804:	4629      	mov	r1, r5
    5806:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5808:	f240 73fe 	movw	r3, #2046	; 0x7fe
    580c:	429f      	cmp	r7, r3
    580e:	d8f5      	bhi.n	57fc <__aeabi_dsub+0x160>
    5810:	b99f      	cbnz	r7, 583a <__aeabi_dsub+0x19e>
    5812:	4639      	mov	r1, r7
    5814:	4638      	mov	r0, r7
    5816:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5818:	3601      	adds	r6, #1
    581a:	bf08      	it	eq
    581c:	3501      	addeq	r5, #1
    581e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5822:	bf08      	it	eq
    5824:	f026 0601 	biceq.w	r6, r6, #1
    5828:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    582c:	4630      	mov	r0, r6
    582e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5830:	2000      	movs	r0, #0
    5832:	490f      	ldr	r1, [pc, #60]	; (5870 <__aeabi_dsub+0x1d4>)
    5834:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5836:	460e      	mov	r6, r1
    5838:	e7d8      	b.n	57ec <__aeabi_dsub+0x150>
    583a:	4629      	mov	r1, r5
    583c:	4630      	mov	r0, r6
    583e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5840:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    5844:	462b      	mov	r3, r5
    5846:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    584a:	f000 b813 	b.w	5874 <__aeabi_dadd>
    584e:	0521      	lsls	r1, r4, #20
    5850:	4610      	mov	r0, r2
    5852:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5854:	2b00      	cmp	r3, #0
    5856:	d1b6      	bne.n	57c6 <__aeabi_dsub+0x12a>
    5858:	02ea      	lsls	r2, r5, #11
    585a:	d5bd      	bpl.n	57d8 <__aeabi_dsub+0x13c>
    585c:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    5860:	460e      	mov	r6, r1
    5862:	e7c7      	b.n	57f4 <__aeabi_dsub+0x158>
    5864:	4902      	ldr	r1, [pc, #8]	; (5870 <__aeabi_dsub+0x1d4>)
    5866:	4638      	mov	r0, r7
    5868:	bdf0      	pop	{r4, r5, r6, r7, pc}
    586a:	4629      	mov	r1, r5
    586c:	4628      	mov	r0, r5
    586e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5870:	7ff80000 	.word	0x7ff80000

00005874 <__aeabi_dadd>:
    5874:	b5f0      	push	{r4, r5, r6, r7, lr}
    5876:	ea93 0601 	eors.w	r6, r3, r1
    587a:	460c      	mov	r4, r1
    587c:	f100 8087 	bmi.w	598e <__aeabi_dadd+0x11a>
    5880:	4299      	cmp	r1, r3
    5882:	4605      	mov	r5, r0
    5884:	d339      	bcc.n	58fa <__aeabi_dadd+0x86>
    5886:	f240 70ff 	movw	r0, #2047	; 0x7ff
    588a:	0d26      	lsrs	r6, r4, #20
    588c:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    5890:	4281      	cmp	r1, r0
    5892:	d03f      	beq.n	5914 <__aeabi_dadd+0xa0>
    5894:	eba6 5713 	sub.w	r7, r6, r3, lsr #20
    5898:	428f      	cmp	r7, r1
    589a:	d04c      	beq.n	5936 <__aeabi_dadd+0xc2>
    589c:	f3c4 0413 	ubfx	r4, r4, #0, #20
    58a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    58a4:	2f1f      	cmp	r7, #31
    58a6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    58aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    58ae:	d838      	bhi.n	5922 <__aeabi_dadd+0xae>
    58b0:	f1c7 0020 	rsb	r0, r7, #32
    58b4:	fa03 fe00 	lsl.w	lr, r3, r0
    58b8:	fa22 f107 	lsr.w	r1, r2, r7
    58bc:	40fb      	lsrs	r3, r7
    58be:	ea4e 0101 	orr.w	r1, lr, r1
    58c2:	441c      	add	r4, r3
    58c4:	186d      	adds	r5, r5, r1
    58c6:	bf28      	it	cs
    58c8:	3401      	addcs	r4, #1
    58ca:	fa02 f300 	lsl.w	r3, r2, r0
    58ce:	02a2      	lsls	r2, r4, #10
    58d0:	d529      	bpl.n	5926 <__aeabi_dadd+0xb2>
    58d2:	3501      	adds	r5, #1
    58d4:	bf08      	it	eq
    58d6:	3401      	addeq	r4, #1
    58d8:	b90b      	cbnz	r3, 58de <__aeabi_dadd+0x6a>
    58da:	f025 0502 	bic.w	r5, r5, #2
    58de:	0533      	lsls	r3, r6, #20
    58e0:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    58e4:	005a      	lsls	r2, r3, #1
    58e6:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    58ea:	f04f 0000 	mov.w	r0, #0
    58ee:	d240      	bcs.n	5972 <__aeabi_dadd+0xfe>
    58f0:	07e4      	lsls	r4, r4, #31
    58f2:	4619      	mov	r1, r3
    58f4:	ea44 0055 	orr.w	r0, r4, r5, lsr #1
    58f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58fa:	f240 70ff 	movw	r0, #2047	; 0x7ff
    58fe:	4074      	eors	r4, r6
    5900:	4073      	eors	r3, r6
    5902:	0d26      	lsrs	r6, r4, #20
    5904:	4055      	eors	r5, r2
    5906:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    590a:	406a      	eors	r2, r5
    590c:	4281      	cmp	r1, r0
    590e:	ea85 0502 	eor.w	r5, r5, r2
    5912:	d1bf      	bne.n	5894 <__aeabi_dadd+0x20>
    5914:	0323      	lsls	r3, r4, #12
    5916:	f04f 0000 	mov.w	r0, #0
    591a:	d136      	bne.n	598a <__aeabi_dadd+0x116>
    591c:	4621      	mov	r1, r4
    591e:	4628      	mov	r0, r5
    5920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5922:	2f35      	cmp	r7, #53	; 0x35
    5924:	d911      	bls.n	594a <__aeabi_dadd+0xd6>
    5926:	2b00      	cmp	r3, #0
    5928:	f106 36ff 	add.w	r6, r6, #4294967295
    592c:	db24      	blt.n	5978 <__aeabi_dadd+0x104>
    592e:	eb04 5106 	add.w	r1, r4, r6, lsl #20
    5932:	4628      	mov	r0, r5
    5934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5936:	f240 73fe 	movw	r3, #2046	; 0x7fe
    593a:	429f      	cmp	r7, r3
    593c:	d8ea      	bhi.n	5914 <__aeabi_dadd+0xa0>
    593e:	2f00      	cmp	r7, #0
    5940:	d1ec      	bne.n	591c <__aeabi_dadd+0xa8>
    5942:	f004 4100 	and.w	r1, r4, #2147483648	; 0x80000000
    5946:	4638      	mov	r0, r7
    5948:	bdf0      	pop	{r4, r5, r6, r7, pc}
    594a:	f1a7 0120 	sub.w	r1, r7, #32
    594e:	fa23 f001 	lsr.w	r0, r3, r1
    5952:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    5956:	40bb      	lsls	r3, r7
    5958:	fa22 f101 	lsr.w	r1, r2, r1
    595c:	182d      	adds	r5, r5, r0
    595e:	ea43 0301 	orr.w	r3, r3, r1
    5962:	d31b      	bcc.n	599c <__aeabi_dadd+0x128>
    5964:	0612      	lsls	r2, r2, #24
    5966:	f104 0401 	add.w	r4, r4, #1
    596a:	d0b0      	beq.n	58ce <__aeabi_dadd+0x5a>
    596c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    5970:	e7ad      	b.n	58ce <__aeabi_dadd+0x5a>
    5972:	3601      	adds	r6, #1
    5974:	0531      	lsls	r1, r6, #20
    5976:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5978:	3501      	adds	r5, #1
    597a:	bf08      	it	eq
    597c:	3401      	addeq	r4, #1
    597e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5982:	bf08      	it	eq
    5984:	f025 0501 	biceq.w	r5, r5, #1
    5988:	e7d1      	b.n	592e <__aeabi_dadd+0xba>
    598a:	4906      	ldr	r1, [pc, #24]	; (59a4 <__aeabi_dadd+0x130>)
    598c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    598e:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    5992:	462b      	mov	r3, r5
    5994:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5998:	f7ff be80 	b.w	569c <__aeabi_dsub>
    599c:	0612      	lsls	r2, r2, #24
    599e:	d1e5      	bne.n	596c <__aeabi_dadd+0xf8>
    59a0:	e7c1      	b.n	5926 <__aeabi_dadd+0xb2>
    59a2:	bf00      	nop
    59a4:	7ff80000 	.word	0x7ff80000

000059a8 <__aeabi_d2iz>:
    59a8:	02cb      	lsls	r3, r1, #11
    59aa:	0d0a      	lsrs	r2, r1, #20
    59ac:	ea43 5050 	orr.w	r0, r3, r0, lsr #21
    59b0:	f5c2 6383 	rsb	r3, r2, #1048	; 0x418
    59b4:	3306      	adds	r3, #6
    59b6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    59ba:	2bff      	cmp	r3, #255	; 0xff
    59bc:	fa20 f003 	lsr.w	r0, r0, r3
    59c0:	d90f      	bls.n	59e2 <__aeabi_d2iz+0x3a>
    59c2:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    59c6:	d00d      	beq.n	59e4 <__aeabi_d2iz+0x3c>
    59c8:	f011 4080 	ands.w	r0, r1, #1073741824	; 0x40000000
    59cc:	d009      	beq.n	59e2 <__aeabi_d2iz+0x3a>
    59ce:	004b      	lsls	r3, r1, #1
    59d0:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    59d4:	d804      	bhi.n	59e0 <__aeabi_d2iz+0x38>
    59d6:	0fc8      	lsrs	r0, r1, #31
    59d8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    59dc:	3801      	subs	r0, #1
    59de:	4770      	bx	lr
    59e0:	2000      	movs	r0, #0
    59e2:	4770      	bx	lr
    59e4:	4240      	negs	r0, r0
    59e6:	4770      	bx	lr

000059e8 <__bhs_ui2d>:
    59e8:	b1f0      	cbz	r0, 5a28 <__bhs_ui2d+0x40>
    59ea:	0c03      	lsrs	r3, r0, #16
    59ec:	bf0c      	ite	eq
    59ee:	0400      	lsleq	r0, r0, #16
    59f0:	f101 7180 	addne.w	r1, r1, #16777216	; 0x1000000
    59f4:	0e03      	lsrs	r3, r0, #24
    59f6:	bf0c      	ite	eq
    59f8:	0200      	lsleq	r0, r0, #8
    59fa:	f501 0100 	addne.w	r1, r1, #8388608	; 0x800000
    59fe:	0f03      	lsrs	r3, r0, #28
    5a00:	bf0c      	ite	eq
    5a02:	0100      	lsleq	r0, r0, #4
    5a04:	f501 0180 	addne.w	r1, r1, #4194304	; 0x400000
    5a08:	0f83      	lsrs	r3, r0, #30
    5a0a:	bf0c      	ite	eq
    5a0c:	0080      	lsleq	r0, r0, #2
    5a0e:	f501 1100 	addne.w	r1, r1, #2097152	; 0x200000
    5a12:	2800      	cmp	r0, #0
    5a14:	bfac      	ite	ge
    5a16:	0040      	lslge	r0, r0, #1
    5a18:	f501 1180 	addlt.w	r1, r1, #1048576	; 0x100000
    5a1c:	eb01 23e0 	add.w	r3, r1, r0, asr #11
    5a20:	0542      	lsls	r2, r0, #21
    5a22:	4610      	mov	r0, r2
    5a24:	4619      	mov	r1, r3
    5a26:	4770      	bx	lr
    5a28:	4603      	mov	r3, r0
    5a2a:	4619      	mov	r1, r3
    5a2c:	4770      	bx	lr
    5a2e:	bf00      	nop

00005a30 <__aeabi_i2d>:
    5a30:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
    5a34:	0fc3      	lsrs	r3, r0, #31
    5a36:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
    5a3a:	18d0      	adds	r0, r2, r3
    5a3c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5a40:	f7ff bfd2 	b.w	59e8 <__bhs_ui2d>

00005a44 <__aeabi_dcmpeq>:
    5a44:	b510      	push	{r4, lr}
    5a46:	004c      	lsls	r4, r1, #1
    5a48:	ea54 0e00 	orrs.w	lr, r4, r0
    5a4c:	d102      	bne.n	5a54 <__aeabi_dcmpeq+0x10>
    5a4e:	ea52 0e43 	orrs.w	lr, r2, r3, lsl #1
    5a52:	d00b      	beq.n	5a6c <__aeabi_dcmpeq+0x28>
    5a54:	4299      	cmp	r1, r3
    5a56:	d001      	beq.n	5a5c <__aeabi_dcmpeq+0x18>
    5a58:	2000      	movs	r0, #0
    5a5a:	bd10      	pop	{r4, pc}
    5a5c:	4290      	cmp	r0, r2
    5a5e:	d1fb      	bne.n	5a58 <__aeabi_dcmpeq+0x14>
    5a60:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5a64:	bf8c      	ite	hi
    5a66:	2000      	movhi	r0, #0
    5a68:	2001      	movls	r0, #1
    5a6a:	bd10      	pop	{r4, pc}
    5a6c:	2001      	movs	r0, #1
    5a6e:	bd10      	pop	{r4, pc}

00005a70 <__aeabi_dcmplt>:
    5a70:	b430      	push	{r4, r5}
    5a72:	ea53 0401 	orrs.w	r4, r3, r1
    5a76:	d409      	bmi.n	5a8c <__aeabi_dcmplt+0x1c>
    5a78:	005c      	lsls	r4, r3, #1
    5a7a:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5a7e:	d802      	bhi.n	5a86 <__aeabi_dcmplt+0x16>
    5a80:	4299      	cmp	r1, r3
    5a82:	d317      	bcc.n	5ab4 <__aeabi_dcmplt+0x44>
    5a84:	d019      	beq.n	5aba <__aeabi_dcmplt+0x4a>
    5a86:	2000      	movs	r0, #0
    5a88:	bc30      	pop	{r4, r5}
    5a8a:	4770      	bx	lr
    5a8c:	004d      	lsls	r5, r1, #1
    5a8e:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    5a92:	d8f8      	bhi.n	5a86 <__aeabi_dcmplt+0x16>
    5a94:	005c      	lsls	r4, r3, #1
    5a96:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5a9a:	d8f4      	bhi.n	5a86 <__aeabi_dcmplt+0x16>
    5a9c:	4305      	orrs	r5, r0
    5a9e:	d101      	bne.n	5aa4 <__aeabi_dcmplt+0x34>
    5aa0:	4314      	orrs	r4, r2
    5aa2:	d010      	beq.n	5ac6 <__aeabi_dcmplt+0x56>
    5aa4:	4299      	cmp	r1, r3
    5aa6:	d805      	bhi.n	5ab4 <__aeabi_dcmplt+0x44>
    5aa8:	d1ed      	bne.n	5a86 <__aeabi_dcmplt+0x16>
    5aaa:	4290      	cmp	r0, r2
    5aac:	bf94      	ite	ls
    5aae:	2000      	movls	r0, #0
    5ab0:	2001      	movhi	r0, #1
    5ab2:	e7e9      	b.n	5a88 <__aeabi_dcmplt+0x18>
    5ab4:	2001      	movs	r0, #1
    5ab6:	bc30      	pop	{r4, r5}
    5ab8:	4770      	bx	lr
    5aba:	4290      	cmp	r0, r2
    5abc:	bf2c      	ite	cs
    5abe:	2000      	movcs	r0, #0
    5ac0:	2001      	movcc	r0, #1
    5ac2:	bc30      	pop	{r4, r5}
    5ac4:	4770      	bx	lr
    5ac6:	4620      	mov	r0, r4
    5ac8:	e7de      	b.n	5a88 <__aeabi_dcmplt+0x18>
    5aca:	bf00      	nop

00005acc <__aeabi_dcmple>:
    5acc:	b430      	push	{r4, r5}
    5ace:	ea53 0401 	orrs.w	r4, r3, r1
    5ad2:	d409      	bmi.n	5ae8 <__aeabi_dcmple+0x1c>
    5ad4:	005c      	lsls	r4, r3, #1
    5ad6:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5ada:	d802      	bhi.n	5ae2 <__aeabi_dcmple+0x16>
    5adc:	4299      	cmp	r1, r3
    5ade:	d319      	bcc.n	5b14 <__aeabi_dcmple+0x48>
    5ae0:	d01b      	beq.n	5b1a <__aeabi_dcmple+0x4e>
    5ae2:	2000      	movs	r0, #0
    5ae4:	bc30      	pop	{r4, r5}
    5ae6:	4770      	bx	lr
    5ae8:	004c      	lsls	r4, r1, #1
    5aea:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5aee:	d8f8      	bhi.n	5ae2 <__aeabi_dcmple+0x16>
    5af0:	005d      	lsls	r5, r3, #1
    5af2:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    5af6:	d8f4      	bhi.n	5ae2 <__aeabi_dcmple+0x16>
    5af8:	4299      	cmp	r1, r3
    5afa:	d80b      	bhi.n	5b14 <__aeabi_dcmple+0x48>
    5afc:	d008      	beq.n	5b10 <__aeabi_dcmple+0x44>
    5afe:	ea54 0300 	orrs.w	r3, r4, r0
    5b02:	d1ee      	bne.n	5ae2 <__aeabi_dcmple+0x16>
    5b04:	ea55 0302 	orrs.w	r3, r5, r2
    5b08:	bf0c      	ite	eq
    5b0a:	2001      	moveq	r0, #1
    5b0c:	2000      	movne	r0, #0
    5b0e:	e7e9      	b.n	5ae4 <__aeabi_dcmple+0x18>
    5b10:	4290      	cmp	r0, r2
    5b12:	d3f4      	bcc.n	5afe <__aeabi_dcmple+0x32>
    5b14:	bc30      	pop	{r4, r5}
    5b16:	2001      	movs	r0, #1
    5b18:	4770      	bx	lr
    5b1a:	4290      	cmp	r0, r2
    5b1c:	bf8c      	ite	hi
    5b1e:	2000      	movhi	r0, #0
    5b20:	2001      	movls	r0, #1
    5b22:	bc30      	pop	{r4, r5}
    5b24:	4770      	bx	lr
    5b26:	bf00      	nop

00005b28 <__aeabi_dcmpge>:
    5b28:	b430      	push	{r4, r5}
    5b2a:	ea53 0401 	orrs.w	r4, r3, r1
    5b2e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    5b32:	d408      	bmi.n	5b46 <__aeabi_dcmpge+0x1e>
    5b34:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5b38:	d802      	bhi.n	5b40 <__aeabi_dcmpge+0x18>
    5b3a:	4299      	cmp	r1, r3
    5b3c:	d818      	bhi.n	5b70 <__aeabi_dcmpge+0x48>
    5b3e:	d01a      	beq.n	5b76 <__aeabi_dcmpge+0x4e>
    5b40:	2000      	movs	r0, #0
    5b42:	bc30      	pop	{r4, r5}
    5b44:	4770      	bx	lr
    5b46:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5b4a:	d8f9      	bhi.n	5b40 <__aeabi_dcmpge+0x18>
    5b4c:	005d      	lsls	r5, r3, #1
    5b4e:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    5b52:	d8f5      	bhi.n	5b40 <__aeabi_dcmpge+0x18>
    5b54:	4299      	cmp	r1, r3
    5b56:	d30b      	bcc.n	5b70 <__aeabi_dcmpge+0x48>
    5b58:	d008      	beq.n	5b6c <__aeabi_dcmpge+0x44>
    5b5a:	ea54 0300 	orrs.w	r3, r4, r0
    5b5e:	d1ef      	bne.n	5b40 <__aeabi_dcmpge+0x18>
    5b60:	ea55 0302 	orrs.w	r3, r5, r2
    5b64:	bf0c      	ite	eq
    5b66:	2001      	moveq	r0, #1
    5b68:	2000      	movne	r0, #0
    5b6a:	e7ea      	b.n	5b42 <__aeabi_dcmpge+0x1a>
    5b6c:	4290      	cmp	r0, r2
    5b6e:	d8f4      	bhi.n	5b5a <__aeabi_dcmpge+0x32>
    5b70:	bc30      	pop	{r4, r5}
    5b72:	2001      	movs	r0, #1
    5b74:	4770      	bx	lr
    5b76:	4290      	cmp	r0, r2
    5b78:	bf34      	ite	cc
    5b7a:	2000      	movcc	r0, #0
    5b7c:	2001      	movcs	r0, #1
    5b7e:	bc30      	pop	{r4, r5}
    5b80:	4770      	bx	lr
    5b82:	bf00      	nop

00005b84 <__aeabi_lowlevel_memset>:
    5b84:	4603      	mov	r3, r0
    5b86:	f013 0f03 	tst.w	r3, #3
    5b8a:	d10e      	bne.n	5baa <memset1a>
    5b8c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5b90:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    5b94:	ea41 4101 	orr.w	r1, r1, r1, lsl #16

00005b98 <__bhs_memset4>:
    5b98:	3a04      	subs	r2, #4

00005b9a <memset4>:
    5b9a:	bf24      	itt	cs
    5b9c:	f843 1b04 	strcs.w	r1, [r3], #4
    5ba0:	f1b2 0204 	subscs.w	r2, r2, #4
    5ba4:	d2f9      	bcs.n	5b9a <memset4>

00005ba6 <memset1>:
    5ba6:	f102 0204 	add.w	r2, r2, #4

00005baa <memset1a>:
    5baa:	3a01      	subs	r2, #1
    5bac:	bf24      	itt	cs
    5bae:	f803 1b01 	strbcs.w	r1, [r3], #1
    5bb2:	e7fa      	bcs.n	5baa <memset1a>
    5bb4:	4770      	bx	lr

00005bb6 <__sys_appexit>:
    5bb6:	e7fe      	b.n	5bb6 <__sys_appexit>

00005bb8 <__sys_close>:
    5bb8:	f04f 30ff 	mov.w	r0, #4294967295
    5bbc:	4770      	bx	lr

00005bbe <__sys_flen>:
    5bbe:	f04f 30ff 	mov.w	r0, #4294967295
    5bc2:	4770      	bx	lr

00005bc4 <__sys_istty>:
    5bc4:	f04f 30ff 	mov.w	r0, #4294967295
    5bc8:	4770      	bx	lr

00005bca <__sys_remove>:
    5bca:	f04f 30ff 	mov.w	r0, #4294967295
    5bce:	4770      	bx	lr

00005bd0 <__sys_seek>:
    5bd0:	f04f 30ff 	mov.w	r0, #4294967295
    5bd4:	4770      	bx	lr

00005bd6 <__sys_tmpnam>:
    5bd6:	f04f 30ff 	mov.w	r0, #4294967295
    5bda:	4770      	bx	lr

00005bdc <__sys_write>:
    5bdc:	4610      	mov	r0, r2
    5bde:	4770      	bx	lr
    5be0:	3e2d2d2d 	.word	0x3e2d2d2d
    5be4:	0d732520 	.word	0x0d732520
    5be8:	0000000a 	.word	0x0000000a
    5bec:	0a0d7325 	.word	0x0a0d7325
    5bf0:	00000000 	.word	0x00000000
    5bf4:	512b5441 	.word	0x512b5441
    5bf8:	3d445249 	.word	0x3d445249
    5bfc:	2c312c31 	.word	0x2c312c31
    5c00:	31312c30 	.word	0x31312c30
    5c04:	00003030 	.word	0x00003030
    5c08:	65746e45 	.word	0x65746e45
    5c0c:	20646572 	.word	0x20646572
    5c10:	5f4d5347 	.word	0x5f4d5347
    5c14:	6e6e6f43 	.word	0x6e6e6f43
    5c18:	54746365 	.word	0x54746365
    5c1c:	6972546f 	.word	0x6972546f
    5c20:	6770556f 	.word	0x6770556f
    5c24:	65646172 	.word	0x65646172
    5c28:	76726553 	.word	0x76726553
    5c2c:	00007265 	.word	0x00007265
    5c30:	00495441 	.word	0x00495441
    5c34:	512b5441 	.word	0x512b5441
    5c38:	43474649 	.word	0x43474649
    5c3c:	313d544e 	.word	0x313d544e
    5c40:	00000000 	.word	0x00000000
    5c44:	512b5441 	.word	0x512b5441
    5c48:	47534349 	.word	0x47534349
    5c4c:	2c313d50 	.word	0x2c313d50
    5c50:	22732522 	.word	0x22732522
    5c54:	7325222c 	.word	0x7325222c
    5c58:	25222c22 	.word	0x25222c22
    5c5c:	00002273 	.word	0x00002273
    5c60:	512b5441 	.word	0x512b5441
    5c64:	58554d49 	.word	0x58554d49
    5c68:	0000303d 	.word	0x0000303d
    5c6c:	512b5441 	.word	0x512b5441
    5c70:	54414256 	.word	0x54414256
    5c74:	2c303d54 	.word	0x2c303d54
    5c78:	30303533 	.word	0x30303533
    5c7c:	0000302c 	.word	0x0000302c
    5c80:	512b5441 	.word	0x512b5441
    5c84:	54414256 	.word	0x54414256
    5c88:	2c313d54 	.word	0x2c313d54
    5c8c:	30303333 	.word	0x30303333
    5c90:	0000302c 	.word	0x0000302c
    5c94:	512b5441 	.word	0x512b5441
    5c98:	4f485349 	.word	0x4f485349
    5c9c:	3d415257 	.word	0x3d415257
    5ca0:	00000031 	.word	0x00000031
    5ca4:	512b5441 	.word	0x512b5441
    5ca8:	4f485349 	.word	0x4f485349
    5cac:	3d545057 	.word	0x3d545057
    5cb0:	00000031 	.word	0x00000031
    5cb4:	512b5441 	.word	0x512b5441
    5cb8:	49444e49 	.word	0x49444e49
    5cbc:	0000303d 	.word	0x0000303d
    5cc0:	512b5441 	.word	0x512b5441
    5cc4:	41454849 	.word	0x41454849
    5cc8:	00313d44 	.word	0x00313d44
    5ccc:	512b5441 	.word	0x512b5441
    5cd0:	444f4d49 	.word	0x444f4d49
    5cd4:	00303d45 	.word	0x00303d45
    5cd8:	512b5441 	.word	0x512b5441
    5cdc:	534e4449 	.word	0x534e4449
    5ce0:	313d5049 	.word	0x313d5049
    5ce4:	00000000 	.word	0x00000000
    5ce8:	512b5441 	.word	0x512b5441
    5cec:	534e4449 	.word	0x534e4449
    5cf0:	303d5049 	.word	0x303d5049
    5cf4:	00000000 	.word	0x00000000
    5cf8:	512b5441 	.word	0x512b5441
    5cfc:	4c435047 	.word	0x4c435047
    5d00:	3d535341 	.word	0x3d535341
    5d04:	00003231 	.word	0x00003231
    5d08:	00005441 	.word	0x00005441
    5d0c:	512b5441 	.word	0x512b5441
    5d10:	45504f49 	.word	0x45504f49
    5d14:	54223d4e 	.word	0x54223d4e
    5d18:	2c225043 	.word	0x2c225043
    5d1c:	22732522 	.word	0x22732522
    5d20:	0d73252c 	.word	0x0d73252c
    5d24:	0000000a 	.word	0x0000000a
    5d28:	4c494146 	.word	0x4c494146
    5d2c:	00000000 	.word	0x00000000
    5d30:	4e4e4f43 	.word	0x4e4e4f43
    5d34:	20544345 	.word	0x20544345
    5d38:	00004b4f 	.word	0x00004b4f
    5d3c:	45524c41 	.word	0x45524c41
    5d40:	20594441 	.word	0x20594441
    5d44:	4e4e4f43 	.word	0x4e4e4f43
    5d48:	00544345 	.word	0x00544345
    5d4c:	6e6e6f43 	.word	0x6e6e6f43
    5d50:	65746365 	.word	0x65746365
    5d54:	6f742064 	.word	0x6f742064
    5d58:	65687420 	.word	0x65687420
    5d5c:	72657320 	.word	0x72657320
    5d60:	2e726576 	.word	0x2e726576
    5d64:	00000000 	.word	0x00000000
    5d68:	504f4951 	.word	0x504f4951
    5d6c:	66204e45 	.word	0x66204e45
    5d70:	656c6961 	.word	0x656c6961
    5d74:	00002e64 	.word	0x00002e64
    5d78:	64726148 	.word	0x64726148
    5d7c:	73657220 	.word	0x73657220
    5d80:	69747465 	.word	0x69747465
    5d84:	6d20676e 	.word	0x6d20676e
    5d88:	6c75646f 	.word	0x6c75646f
    5d8c:	00002e65 	.word	0x00002e65
    5d90:	6e6e6f63 	.word	0x6e6e6f63
    5d94:	69746365 	.word	0x69746365
    5d98:	61466e6f 	.word	0x61466e6f
    5d9c:	6f436c69 	.word	0x6f436c69
    5da0:	20746e75 	.word	0x20746e75
    5da4:	3034203e 	.word	0x3034203e
    5da8:	73657220 	.word	0x73657220
    5dac:	74726174 	.word	0x74726174
    5db0:	20676e69 	.word	0x20676e69
    5db4:	75646f6d 	.word	0x75646f6d
    5db8:	002e656c 	.word	0x002e656c
    5dbc:	65746e45 	.word	0x65746e45
    5dc0:	20646572 	.word	0x20646572
    5dc4:	5f4d5347 	.word	0x5f4d5347
    5dc8:	646e6553 	.word	0x646e6553
    5dcc:	65536f54 	.word	0x65536f54
    5dd0:	72657672 	.word	0x72657672
    5dd4:	00504354 	.word	0x00504354
    5dd8:	512b5441 	.word	0x512b5441
    5ddc:	4e455349 	.word	0x4e455349
    5de0:	64253d44 	.word	0x64253d44
    5de4:	00000000 	.word	0x00000000
    5de8:	646e6553 	.word	0x646e6553
    5dec:	204b4f20 	.word	0x204b4f20
    5df0:	6c696877 	.word	0x6c696877
    5df4:	2e676e69 	.word	0x2e676e69
    5df8:	0000002e 	.word	0x0000002e
    5dfc:	444e4553 	.word	0x444e4553
    5e00:	004b4f20 	.word	0x004b4f20
    5e04:	61746144 	.word	0x61746144
    5e08:	6e657320 	.word	0x6e657320
    5e0c:	00002e74 	.word	0x00002e74
    5e10:	4f525245 	.word	0x4f525245
    5e14:	00000052 	.word	0x00000052
    5e18:	61746144 	.word	0x61746144
    5e1c:	69616620 	.word	0x69616620
    5e20:	00002e6c 	.word	0x00002e6c
    5e24:	65746e45 	.word	0x65746e45
    5e28:	20646572 	.word	0x20646572
    5e2c:	5f4d5347 	.word	0x5f4d5347
    5e30:	5f504354 	.word	0x5f504354
    5e34:	646e6553 	.word	0x646e6553
    5e38:	00000000 	.word	0x00000000
    5e3c:	512b5441 	.word	0x512b5441
    5e40:	44574f50 	.word	0x44574f50
    5e44:	0000303d 	.word	0x0000303d
    5e48:	00004b4f 	.word	0x00004b4f
    5e4c:	432b5441 	.word	0x432b5441
    5e50:	3d45454d 	.word	0x3d45454d
    5e54:	00000032 	.word	0x00000032
    5e58:	432b5441 	.word	0x432b5441
    5e5c:	3d46474d 	.word	0x3d46474d
    5e60:	00000031 	.word	0x00000031
    5e64:	432b5441 	.word	0x432b5441
    5e68:	3d494d4e 	.word	0x3d494d4e
    5e6c:	2c312c32 	.word	0x2c312c32
    5e70:	2c302c30 	.word	0x2c302c30
    5e74:	00000030 	.word	0x00000030
    5e78:	206d6953 	.word	0x206d6953
    5e7c:	64726163 	.word	0x64726163
    5e80:	61657220 	.word	0x61657220
    5e84:	2e2e7964 	.word	0x2e2e7964
    5e88:	0000000d 	.word	0x0000000d
    5e8c:	206d6953 	.word	0x206d6953
    5e90:	20746f6e 	.word	0x20746f6e
    5e94:	64616572 	.word	0x64616572
    5e98:	000d2179 	.word	0x000d2179
    5e9c:	432b5441 	.word	0x432b5441
    5ea0:	3f474552 	.word	0x3f474552
    5ea4:	00000000 	.word	0x00000000
    5ea8:	4552432b 	.word	0x4552432b
    5eac:	00000047 	.word	0x00000047
    5eb0:	0000352c 	.word	0x0000352c
    5eb4:	0000312c 	.word	0x0000312c
    5eb8:	65746e45 	.word	0x65746e45
    5ebc:	20646572 	.word	0x20646572
    5ec0:	63656863 	.word	0x63656863
    5ec4:	6973206b 	.word	0x6973206b
    5ec8:	6163206d 	.word	0x6163206d
    5ecc:	002e6472 	.word	0x002e6472
    5ed0:	432b5441 	.word	0x432b5441
    5ed4:	3f4e4950 	.word	0x3f4e4950
    5ed8:	00000000 	.word	0x00000000
    5edc:	44414552 	.word	0x44414552
    5ee0:	00000059 	.word	0x00000059
    5ee4:	472b5441 	.word	0x472b5441
    5ee8:	00004e53 	.word	0x00004e53
    5eec:	49454d49 	.word	0x49454d49
    5ef0:	00203a20 	.word	0x00203a20
    5ef4:	432b5441 	.word	0x432b5441
    5ef8:	00494d49 	.word	0x00494d49
    5efc:	49534d49 	.word	0x49534d49
    5f00:	00203a20 	.word	0x00203a20
    5f04:	31455441 	.word	0x31455441
    5f08:	00000000 	.word	0x00000000
    5f0c:	4f484345 	.word	0x4f484345
    5f10:	004e4f20 	.word	0x004e4f20
    5f14:	30455441 	.word	0x30455441
    5f18:	00000000 	.word	0x00000000
    5f1c:	4f484345 	.word	0x4f484345
    5f20:	46464f20 	.word	0x46464f20
    5f24:	00000000 	.word	0x00000000
    5f28:	512b5441 	.word	0x512b5441
    5f2c:	4f4c4349 	.word	0x4f4c4349
    5f30:	00004553 	.word	0x00004553
    5f34:	534f4c43 	.word	0x534f4c43
    5f38:	43542045 	.word	0x43542045
    5f3c:	6f632050 	.word	0x6f632050
    5f40:	63656e6e 	.word	0x63656e6e
    5f44:	6e6f6974 	.word	0x6e6f6974
    5f48:	00000020 	.word	0x00000020
    5f4c:	74697257 	.word	0x74697257
    5f50:	20676e69 	.word	0x20676e69
    5f54:	6e676973 	.word	0x6e676973
    5f58:	72757461 	.word	0x72757461
    5f5c:	30203a65 	.word	0x30203a65
    5f60:	20582578 	.word	0x20582578
    5f64:	52432020 	.word	0x52432020
    5f68:	203a2043 	.word	0x203a2043
    5f6c:	0a0d5825 	.word	0x0a0d5825
    5f70:	00000000 	.word	0x00000000
    5f74:	70657270 	.word	0x70657270
    5f78:	64657261 	.word	0x64657261
    5f7c:	00000020 	.word	0x00000020
    5f80:	73617245 	.word	0x73617245
    5f84:	00206465 	.word	0x00206465
    5f88:	79706f43 	.word	0x79706f43
    5f8c:	6d615220 	.word	0x6d615220
    5f90:	73657220 	.word	0x73657220
    5f94:	20746c75 	.word	0x20746c75
    5f98:	65646f63 	.word	0x65646f63
    5f9c:	25203a20 	.word	0x25203a20
    5fa0:	000a0d64 	.word	0x000a0d64
    5fa4:	69706f63 	.word	0x69706f63
    5fa8:	00206465 	.word	0x00206465
    5fac:	6f420a0d 	.word	0x6f420a0d
    5fb0:	6e69746f 	.word	0x6e69746f
    5fb4:	70752067 	.word	0x70752067
    5fb8:	00000000 	.word	0x00000000
    5fbc:	74737953 	.word	0x74737953
    5fc0:	6f436d65 	.word	0x6f436d65
    5fc4:	6c436572 	.word	0x6c436572
    5fc8:	206b636f 	.word	0x206b636f
    5fcc:	6425203d 	.word	0x6425203d
    5fd0:	0d7a4820 	.word	0x0d7a4820
    5fd4:	0000000a 	.word	0x0000000a
    5fd8:	63656843 	.word	0x63656843
    5fdc:	676e696b 	.word	0x676e696b
    5fe0:	67707520 	.word	0x67707520
    5fe4:	65646172 	.word	0x65646172
    5fe8:	71657220 	.word	0x71657220
    5fec:	74736575 	.word	0x74736575
    5ff0:	00000000 	.word	0x00000000
    5ff4:	74737953 	.word	0x74737953
    5ff8:	69206d65 	.word	0x69206d65
    5ffc:	6567616d 	.word	0x6567616d
    6000:	67707520 	.word	0x67707520
    6004:	65646172 	.word	0x65646172
    6008:	71657220 	.word	0x71657220
    600c:	74736575 	.word	0x74736575
    6010:	00006465 	.word	0x00006465
    6014:	76726553 	.word	0x76726553
    6018:	43207265 	.word	0x43207265
    601c:	656e6e6f 	.word	0x656e6e6f
    6020:	6f697463 	.word	0x6f697463
    6024:	7345206e 	.word	0x7345206e
    6028:	6c626174 	.word	0x6c626174
    602c:	65687369 	.word	0x65687369
    6030:	6f742064 	.word	0x6f742064
    6034:	67705520 	.word	0x67705520
    6038:	65646172 	.word	0x65646172
    603c:	72657320 	.word	0x72657320
    6040:	00726576 	.word	0x00726576
    6044:	6e776f44 	.word	0x6e776f44
    6048:	64616f6c 	.word	0x64616f6c
    604c:	6e696620 	.word	0x6e696620
    6050:	65687369 	.word	0x65687369
    6054:	00002064 	.word	0x00002064
    6058:	696e6946 	.word	0x696e6946
    605c:	64656873 	.word	0x64656873
    6060:	67707520 	.word	0x67707520
    6064:	69646172 	.word	0x69646172
    6068:	0000676e 	.word	0x0000676e
    606c:	746f6f42 	.word	0x746f6f42
    6070:	20676e69 	.word	0x20676e69
    6074:	4f434553 	.word	0x4f434553
    6078:	5241444e 	.word	0x5241444e
    607c:	6d692059 	.word	0x6d692059
    6080:	00656761 	.word	0x00656761
    6084:	746f6f42 	.word	0x746f6f42
    6088:	20676e69 	.word	0x20676e69
    608c:	4d495250 	.word	0x4d495250
    6090:	20595241 	.word	0x20595241
    6094:	67616d69 	.word	0x67616d69
    6098:	00000065 	.word	0x00000065
    609c:	61647055 	.word	0x61647055
    60a0:	70206574 	.word	0x70206574
    60a4:	6d617261 	.word	0x6d617261
    60a8:	72657465 	.word	0x72657465
    60ac:	73252073 	.word	0x73252073
    60b0:	0073253a 	.word	0x0073253a
    60b4:	63656843 	.word	0x63656843
    60b8:	676e696b 	.word	0x676e696b
    60bc:	20666920 	.word	0x20666920
    60c0:	67726174 	.word	0x67726174
    60c4:	6d207465 	.word	0x6d207465
    60c8:	726f6d65 	.word	0x726f6d65
    60cc:	73692079 	.word	0x73692079
    60d0:	616c6220 	.word	0x616c6220
    60d4:	00006b6e 	.word	0x00006b6e
    60d8:	67726154 	.word	0x67726154
    60dc:	73207465 	.word	0x73207465
    60e0:	6f746365 	.word	0x6f746365
    60e4:	25282072 	.word	0x25282072
    60e8:	69202964 	.word	0x69202964
    60ec:	6f6e2073 	.word	0x6f6e2073
    60f0:	6c622074 	.word	0x6c622074
    60f4:	206b6e61 	.word	0x206b6e61
    60f8:	72646461 	.word	0x72646461
    60fc:	7830203a 	.word	0x7830203a
    6100:	202c5825 	.word	0x202c5825
    6104:	58257830 	.word	0x58257830
    6108:	00000000 	.word	0x00000000
    610c:	67726154 	.word	0x67726154
    6110:	73207465 	.word	0x73207465
    6114:	6f746365 	.word	0x6f746365
    6118:	25282072 	.word	0x25282072
    611c:	69202964 	.word	0x69202964
    6120:	6c622073 	.word	0x6c622073
    6124:	206b6e61 	.word	0x206b6e61
    6128:	00000000 	.word	0x00000000
    612c:	72617453 	.word	0x72617453
    6130:	676e6974 	.word	0x676e6974
    6134:	776f6420 	.word	0x776f6420
    6138:	616f6c6e 	.word	0x616f6c6e
    613c:	00000064 	.word	0x00000064
    6140:	61746f54 	.word	0x61746f54
    6144:	20796c6c 	.word	0x20796c6c
    6148:	65636572 	.word	0x65636572
    614c:	64657669 	.word	0x64657669
    6150:	25203a20 	.word	0x25203a20
    6154:	20202064 	.word	0x20202064
    6158:	6d617266 	.word	0x6d617266
    615c:	656c2065 	.word	0x656c2065
    6160:	6874676e 	.word	0x6874676e
    6164:	25203a20 	.word	0x25203a20
    6168:	000a0d64 	.word	0x000a0d64
    616c:	70657270 	.word	0x70657270
    6170:	64657261 	.word	0x64657261
    6174:	00000020 	.word	0x00000020
    6178:	79706f43 	.word	0x79706f43
    617c:	6d615220 	.word	0x6d615220
    6180:	73657220 	.word	0x73657220
    6184:	20746c75 	.word	0x20746c75
    6188:	65646f63 	.word	0x65646f63
    618c:	25203a20 	.word	0x25203a20
    6190:	000a0d64 	.word	0x000a0d64
    6194:	69706f63 	.word	0x69706f63
    6198:	00206465 	.word	0x00206465
    619c:	49323375 	.word	0x49323375
    61a0:	435f5041 	.word	0x435f5041
    61a4:	61706d6f 	.word	0x61706d6f
    61a8:	3a206572 	.word	0x3a206572
    61ac:	20642520 	.word	0x20642520
    61b0:	6f727720 	.word	0x6f727720
    61b4:	25206574 	.word	0x25206574
    61b8:	0a0d2064 	.word	0x0a0d2064
    61bc:	00000000 	.word	0x00000000
    61c0:	69726576 	.word	0x69726576
    61c4:	64656966 	.word	0x64656966
    61c8:	00000020 	.word	0x00000020
    61cc:	69726576 	.word	0x69726576
    61d0:	61636966 	.word	0x61636966
    61d4:	6e6f6974 	.word	0x6e6f6974
    61d8:	69616620 	.word	0x69616620
    61dc:	2064656c 	.word	0x2064656c
    61e0:	00000000 	.word	0x00000000
    61e4:	6e676953 	.word	0x6e676953
    61e8:	72757461 	.word	0x72757461
    61ec:	30203a65 	.word	0x30203a65
    61f0:	20582578 	.word	0x20582578
    61f4:	52432020 	.word	0x52432020
    61f8:	203a2043 	.word	0x203a2043
    61fc:	0a0d5825 	.word	0x0a0d5825
    6200:	00000000 	.word	0x00000000
    6204:	636c6143 	.word	0x636c6143
    6208:	74616c75 	.word	0x74616c75
    620c:	49206465 	.word	0x49206465
    6210:	6567616d 	.word	0x6567616d
    6214:	43524320 	.word	0x43524320
    6218:	203a3233 	.word	0x203a3233
    621c:	58257830 	.word	0x58257830
    6220:	00000a0d 	.word	0x00000a0d
    6224:	00000a0d 	.word	0x00000a0d
    6228:	78323025 	.word	0x78323025
    622c:	00000000 	.word	0x00000000
    6230:	73252020 	.word	0x73252020
    6234:	00000a0d 	.word	0x00000a0d
    6238:	32302520 	.word	0x32302520
    623c:	00000078 	.word	0x00000078
    6240:	00202020 	.word	0x00202020
    6244:	00445049 	.word	0x00445049
    6248:	5043542c 	.word	0x5043542c
    624c:	0000002c 	.word	0x0000002c
    6250:	00000a0d 	.word	0x00000a0d
    6254:	3a504354 	.word	0x3a504354
    6258:	00000000 	.word	0x00000000
    625c:	72617453 	.word	0x72617453
    6260:	6f642074 	.word	0x6f642074
    6264:	6f6c6e77 	.word	0x6f6c6e77
    6268:	6e696461 	.word	0x6e696461
    626c:	00000067 	.word	0x00000067
    6270:	6e6e6f43 	.word	0x6e6e6f43
    6274:	69746365 	.word	0x69746365
    6278:	7320676e 	.word	0x7320676e
    627c:	65746174 	.word	0x65746174
    6280:	6d697420 	.word	0x6d697420
    6284:	65207265 	.word	0x65207265
    6288:	72697078 	.word	0x72697078
    628c:	73206465 	.word	0x73206465
    6290:	69646e65 	.word	0x69646e65
    6294:	2020676e 	.word	0x2020676e
    6298:	2077656e 	.word	0x2077656e
    629c:	75716572 	.word	0x75716572
    62a0:	20747365 	.word	0x20747365
    62a4:	00000020 	.word	0x00000020
    62a8:	72206f4e 	.word	0x72206f4e
    62ac:	796c7065 	.word	0x796c7065
    62b0:	76696720 	.word	0x76696720
    62b4:	70752065 	.word	0x70752065
    62b8:	67707520 	.word	0x67707520
    62bc:	69646172 	.word	0x69646172
    62c0:	0000676e 	.word	0x0000676e
    62c4:	65636552 	.word	0x65636552
    62c8:	64657669 	.word	0x64657669
    62cc:	544f4520 	.word	0x544f4520
    62d0:	00000020 	.word	0x00000020
    62d4:	736f6c43 	.word	0x736f6c43
    62d8:	20676e69 	.word	0x20676e69
    62dc:	20504354 	.word	0x20504354
    62e0:	6e6e6f63 	.word	0x6e6e6f63
    62e4:	69746365 	.word	0x69746365
    62e8:	00206e6f 	.word	0x00206e6f
    62ec:	65747962 	.word	0x65747962
    62f0:	756f6320 	.word	0x756f6320
    62f4:	203a746e 	.word	0x203a746e
    62f8:	202c6425 	.word	0x202c6425
    62fc:	6b636170 	.word	0x6b636170
    6300:	6c207465 	.word	0x6c207465
    6304:	25206e65 	.word	0x25206e65
    6308:	000a0d64 	.word	0x000a0d64
    630c:	656c6966 	.word	0x656c6966
    6310:	7a697320 	.word	0x7a697320
    6314:	30203a65 	.word	0x30203a65
    6318:	2c582578 	.word	0x2c582578
    631c:	43524320 	.word	0x43524320
    6320:	7830203a 	.word	0x7830203a
    6324:	0a0d5825 	.word	0x0a0d5825
    6328:	00000000 	.word	0x00000000
    632c:	6d617266 	.word	0x6d617266
    6330:	756e2065 	.word	0x756e2065
    6334:	7265626d 	.word	0x7265626d
    6338:	20203a20 	.word	0x20203a20
    633c:	0a0d6425 	.word	0x0a0d6425
    6340:	00000000 	.word	0x00000000
    6344:	636c6163 	.word	0x636c6163
    6348:	74616c75 	.word	0x74616c75
    634c:	43206465 	.word	0x43206465
    6350:	3a204352 	.word	0x3a204352
    6354:	25783020 	.word	0x25783020
    6358:	000a0d58 	.word	0x000a0d58
    635c:	65636552 	.word	0x65636552
    6360:	64657669 	.word	0x64657669
    6364:	66206120 	.word	0x66206120
    6368:	656d6172 	.word	0x656d6172
    636c:	00000020 	.word	0x00000020
    6370:	646e6553 	.word	0x646e6553
    6374:	20676e69 	.word	0x20676e69
    6378:	4b434120 	.word	0x4b434120
    637c:	00000020 	.word	0x00000020
    6380:	20435243 	.word	0x20435243
    6384:	6374616d 	.word	0x6374616d
    6388:	20736568 	.word	0x20736568
    638c:	00000a0d 	.word	0x00000a0d
    6390:	20435243 	.word	0x20435243
    6394:	73656f64 	.word	0x73656f64
    6398:	746f6e20 	.word	0x746f6e20
    639c:	74616d20 	.word	0x74616d20
    63a0:	20206863 	.word	0x20206863
    63a4:	204b414e 	.word	0x204b414e
    63a8:	00676e69 	.word	0x00676e69
    63ac:	656d6954 	.word	0x656d6954
    63b0:	74756f20 	.word	0x74756f20
    63b4:	206e6920 	.word	0x206e6920
    63b8:	45434552 	.word	0x45434552
    63bc:	4e495649 	.word	0x4e495649
    63c0:	20202047 	.word	0x20202047
    63c4:	00000000 	.word	0x00000000
    63c8:	6e776f44 	.word	0x6e776f44
    63cc:	64616f6c 	.word	0x64616f6c
    63d0:	6f727020 	.word	0x6f727020
    63d4:	73736563 	.word	0x73736563
    63d8:	69616620 	.word	0x69616620
    63dc:	2064656c 	.word	0x2064656c
    63e0:	69766967 	.word	0x69766967
    63e4:	7520676e 	.word	0x7520676e
    63e8:	70752070 	.word	0x70752070
    63ec:	64617267 	.word	0x64617267
    63f0:	00676e69 	.word	0x00676e69

000063f4 <__ctype>:
	...
    6474:	40404040 40404040 41414140 40404141     @@@@@@@@@AAAAA@@
    6484:	40404040 40404040 40404040 40404040     @@@@@@@@@@@@@@@@
    6494:	02020205 02020202 02020202 02020202     ................
    64a4:	20202020 20202020 02022020 02020202               ......
    64b4:	90909002 10909090 10101010 10101010     ................
    64c4:	10101010 10101010 02101010 02020202     ................
    64d4:	88888802 08888888 08080808 08080808     ................
    64e4:	08080808 08080808 02080808 40020202     ...............@
	...
    6574:	0020002b 63257830 00642570 63255830     +. .0x%cp%d.0X%c
    6584:	00642550 63257830 2a2e252e 70786c6c     P%d.0x%c.%.*llxp
    6594:	30006425 2e632558 6c2a2e25 2550586c     %d.0X%c.%.*llXP%
    65a4:	002d0064 00770072 6c756e28 3000296c     d.-.r.w.(null).0
    65b4:	78300058 30003000 34333231 38373635     X.0x.0.012345678
    65c4:	43424139 00464544 33323130 37363534     9ABCDEF.01234567
    65d4:	62613938 66656463 00000000              89abcdef....

000065e0 <__huge_vall>:
    65e0:	ffffffff 7fefffff 202a2a2a 7973435f     ........*** _Csy
    65f0:	6c615f73 20636f6c 6c696166 000a6465     s_alloc failed..
