
secBootLoader.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

	//MODE 0 = Deep Power Down
	//MODE 1 = Power Down
}

void LoadTimings() {
       0:	00 80 00 10 71 01 00 00 e9 01 00 00 f1 01 00 00     ....q...........
	char buffer[200];
	//LOAD Ignition On Period
	per_ignonperiod_val = EEPROM_LoadInt64(cal_ign_on_period);
      10:	f9 01 00 00 01 02 00 00 09 02 00 00 00 00 00 00     ................
	...
	if (per_ignonperiod_val == 0 || per_ignonperiod_val > 14400)
      2c:	11 02 00 00 19 02 00 00 00 00 00 00 21 02 00 00     ............!...
		per_ignonperiod_val = 60;
	sprintf(buffer, "per_ignonperiod_val: %d\n", (int)per_ignonperiod_val);
      3c:	c5 1a 00 00 d1 27 00 00 31 02 00 00 31 02 00 00     .....'..1...1...
	TraceNL(buffer);
	//LOAD Ignition Off Period
	per_ignoffperiod_val = (int)EEPROM_LoadInt64(cal_ign_off_period);
      4c:	31 02 00 00 31 02 00 00 91 1d 00 00 9d 1e 00 00     1...1...........
      5c:	ad 1f 00 00 b9 20 00 00 31 02 00 00 99 0b 00 00     ..... ..1.......
	int original_per_ignoffperiod_val = per_ignoffperiod_val;
	if (per_ignoffperiod_val == 0 || per_ignoffperiod_val > 14400) //4 hours max.
      6c:	dd 0e 00 00 31 02 00 00 31 02 00 00 31 02 00 00     ....1...1...1...
		per_ignoffperiod_val = 120;
      7c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
	sprintf(buffer, "per_ignoffperiod_val: %d, per_ignoffperiod_val(original): %d\n", (int)per_ignoffperiod_val,(int)original_per_ignoffperiod_val);
      8c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
	TraceNL(buffer);
      9c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
	//LOAD Ignition On Roaming Period
	per_ignonroamingperiod_val = (int)EEPROM_LoadInt64(cal_ign_on_roaming_period);
      ac:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
	if (per_ignonroamingperiod_val == 0 || per_ignonroamingperiod_val > 14400)
      bc:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...

000000cc <__data_section_table>:
		per_ignonroamingperiod_val = 1800;
      cc:	00006548 	.word	0x00006548
	sprintf(buffer, "per_ignonroamingperiod_val: %d\n", (int)per_ignonroamingperiod_val);
      d0:	10000000 	.word	0x10000000
      d4:	00000028 	.word	0x00000028
      d8:	00006548 	.word	0x00006548
      dc:	2007c000 	.word	0x2007c000
	TraceNL(buffer);
      e0:	00000000 	.word	0x00000000

000000e4 <__bss_section_table>:
      e4:	10000028 	.word	0x10000028
	//LOAD Ignition Off Roaming Period
	per_ignoffroamingperiod_val = (int)EEPROM_LoadInt64(cal_ign_off_roaming_period);
      e8:	00001d8c 	.word	0x00001d8c
      ec:	2007c000 	.word	0x2007c000
      f0:	00000000 	.word	0x00000000

000000f4 <data_init>:
      f4:	b480      	push	{r7}
      f6:	b089      	sub	sp, #36	; 0x24
      f8:	af00      	add	r7, sp, #0
      fa:	60f8      	str	r0, [r7, #12]
	if (per_ignoffroamingperiod_val == 0 || per_ignoffroamingperiod_val > 14400)
      fc:	60b9      	str	r1, [r7, #8]
      fe:	607a      	str	r2, [r7, #4]
     100:	68bb      	ldr	r3, [r7, #8]
     102:	61fb      	str	r3, [r7, #28]
     104:	68fb      	ldr	r3, [r7, #12]
     106:	61bb      	str	r3, [r7, #24]
     108:	2300      	movs	r3, #0
     10a:	617b      	str	r3, [r7, #20]
     10c:	e00a      	b.n	124 <data_init+0x30>
		per_ignoffroamingperiod_val = 7200;
     10e:	69fb      	ldr	r3, [r7, #28]
     110:	1d1a      	adds	r2, r3, #4
     112:	61fa      	str	r2, [r7, #28]
     114:	69ba      	ldr	r2, [r7, #24]
	sprintf(buffer, "per_ignoffroamingperiod_val: %d\n", (int)per_ignoffroamingperiod_val);
     116:	1d11      	adds	r1, r2, #4
     118:	61b9      	str	r1, [r7, #24]
     11a:	6812      	ldr	r2, [r2, #0]
     11c:	601a      	str	r2, [r3, #0]
     11e:	697b      	ldr	r3, [r7, #20]
     120:	3304      	adds	r3, #4
     122:	617b      	str	r3, [r7, #20]
     124:	697a      	ldr	r2, [r7, #20]
	TraceNL(buffer);
     126:	687b      	ldr	r3, [r7, #4]
     128:	429a      	cmp	r2, r3
     12a:	d3f0      	bcc.n	10e <data_init+0x1a>
     12c:	3724      	adds	r7, #36	; 0x24
	per_lowpow_just_wake = (int)EEPROM_LoadInt64(cal_lowpow_just_wake);
     12e:	46bd      	mov	sp, r7
     130:	f85d 7b04 	ldr.w	r7, [sp], #4
     134:	4770      	bx	lr
     136:	bf00      	nop

00000138 <bss_init>:
     138:	b480      	push	{r7}
     13a:	b085      	sub	sp, #20
     13c:	af00      	add	r7, sp, #0
     13e:	6078      	str	r0, [r7, #4]
     140:	6039      	str	r1, [r7, #0]
     142:	687b      	ldr	r3, [r7, #4]
	sprintf(buffer, "per_lowpow_just_wake: %d\n", (int)per_lowpow_just_wake);
     144:	60fb      	str	r3, [r7, #12]
     146:	2300      	movs	r3, #0
     148:	60bb      	str	r3, [r7, #8]
     14a:	e007      	b.n	15c <bss_init+0x24>
     14c:	68fb      	ldr	r3, [r7, #12]
     14e:	1d1a      	adds	r2, r3, #4
     150:	60fa      	str	r2, [r7, #12]
     152:	2200      	movs	r2, #0
	TraceNL(buffer);
     154:	601a      	str	r2, [r3, #0]
     156:	68bb      	ldr	r3, [r7, #8]
     158:	3304      	adds	r3, #4
     15a:	60bb      	str	r3, [r7, #8]
	per_lowpow_cancel = (int)EEPROM_LoadInt64(cal_lowpow_cancel);
     15c:	68ba      	ldr	r2, [r7, #8]
     15e:	683b      	ldr	r3, [r7, #0]
     160:	429a      	cmp	r2, r3
     162:	d3f3      	bcc.n	14c <bss_init+0x14>
     164:	3714      	adds	r7, #20
     166:	46bd      	mov	sp, r7
     168:	f85d 7b04 	ldr.w	r7, [sp], #4
     16c:	4770      	bx	lr
     16e:	bf00      	nop

00000170 <ResetISR>:
     170:	b580      	push	{r7, lr}
	if (per_lowpow_cancel > 2)
     172:	b084      	sub	sp, #16
     174:	af00      	add	r7, sp, #0
     176:	4b19      	ldr	r3, [pc, #100]	; (1dc <ResetISR+0x6c>)
     178:	60fb      	str	r3, [r7, #12]
		per_lowpow_cancel = 0;
     17a:	e013      	b.n	1a4 <ResetISR+0x34>
     17c:	68fb      	ldr	r3, [r7, #12]
     17e:	1d1a      	adds	r2, r3, #4
	sprintf(buffer, "per_lowpow_cancel: %d\n", (int)per_lowpow_cancel);
     180:	60fa      	str	r2, [r7, #12]
     182:	681b      	ldr	r3, [r3, #0]
     184:	60bb      	str	r3, [r7, #8]
     186:	68fb      	ldr	r3, [r7, #12]
     188:	1d1a      	adds	r2, r3, #4
     18a:	60fa      	str	r2, [r7, #12]
     18c:	681b      	ldr	r3, [r3, #0]
     18e:	607b      	str	r3, [r7, #4]
	TraceNL(buffer);
     190:	68fb      	ldr	r3, [r7, #12]
     192:	1d1a      	adds	r2, r3, #4
     194:	60fa      	str	r2, [r7, #12]
     196:	681b      	ldr	r3, [r3, #0]
	//LOAD Low Power Wake Up Period
	per_lowpow_period = (int)EEPROM_LoadInt64(cal_lowpow_period);
     198:	603b      	str	r3, [r7, #0]
     19a:	68b8      	ldr	r0, [r7, #8]
     19c:	6879      	ldr	r1, [r7, #4]
     19e:	683a      	ldr	r2, [r7, #0]
     1a0:	f7ff ffa8 	bl	f4 <data_init>
     1a4:	68fb      	ldr	r3, [r7, #12]
     1a6:	4a0e      	ldr	r2, [pc, #56]	; (1e0 <ResetISR+0x70>)
     1a8:	4293      	cmp	r3, r2
     1aa:	d3e7      	bcc.n	17c <ResetISR+0xc>
     1ac:	e00d      	b.n	1ca <ResetISR+0x5a>
	sprintf(buffer, "per_lowpow_period(original): %d\n", (int)per_lowpow_period);
     1ae:	68fb      	ldr	r3, [r7, #12]
     1b0:	1d1a      	adds	r2, r3, #4
     1b2:	60fa      	str	r2, [r7, #12]
     1b4:	681b      	ldr	r3, [r3, #0]
     1b6:	607b      	str	r3, [r7, #4]
     1b8:	68fb      	ldr	r3, [r7, #12]
     1ba:	1d1a      	adds	r2, r3, #4
     1bc:	60fa      	str	r2, [r7, #12]
	TraceNL(buffer);
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	603b      	str	r3, [r7, #0]
     1c2:	6878      	ldr	r0, [r7, #4]
     1c4:	6839      	ldr	r1, [r7, #0]
	if (per_lowpow_period < 1 || per_lowpow_period > 2880){ //No period more than 2 days.
     1c6:	f7ff ffb7 	bl	138 <bss_init>
     1ca:	68fb      	ldr	r3, [r7, #12]
     1cc:	4a05      	ldr	r2, [pc, #20]	; (1e4 <ResetISR+0x74>)
     1ce:	4293      	cmp	r3, r2
     1d0:	d3ed      	bcc.n	1ae <ResetISR+0x3e>
     1d2:	f002 febb 	bl	2f4c <SystemInit>
     1d6:	f002 ff29 	bl	302c <__main>
		per_lowpow_period = 59;
     1da:	e7fe      	b.n	1da <ResetISR+0x6a>
     1dc:	000000cc 	.word	0x000000cc
		#endif
		#ifdef CABINET_DEMO
			per_lowpow_period = 15; //59;//1Hour
		#endif
	}
	sprintf(buffer, "per_lowpow_period: %d\n", (int)per_lowpow_period);
     1e0:	000000e4 	.word	0x000000e4
     1e4:	000000f4 	.word	0x000000f4

000001e8 <NMI_Handler>:
     1e8:	b480      	push	{r7}
     1ea:	af00      	add	r7, sp, #0
     1ec:	e7fe      	b.n	1ec <NMI_Handler+0x4>
	TraceNL(buffer);
     1ee:	bf00      	nop

000001f0 <HardFault_Handler>:
     1f0:	b480      	push	{r7}
     1f2:	af00      	add	r7, sp, #0
     1f4:	e7fe      	b.n	1f4 <HardFault_Handler+0x4>
	per_lowpow_mode = (int)EEPROM_LoadInt64(cal_lowpow_mode);
     1f6:	bf00      	nop

000001f8 <MemManage_Handler>:
     1f8:	b480      	push	{r7}
     1fa:	af00      	add	r7, sp, #0
     1fc:	e7fe      	b.n	1fc <MemManage_Handler+0x4>
     1fe:	bf00      	nop

00000200 <BusFault_Handler>:
     200:	b480      	push	{r7}
     202:	af00      	add	r7, sp, #0
     204:	e7fe      	b.n	204 <BusFault_Handler+0x4>
     206:	bf00      	nop

00000208 <UsageFault_Handler>:
     208:	b480      	push	{r7}
     20a:	af00      	add	r7, sp, #0
	if (per_lowpow_mode > 2){
     20c:	e7fe      	b.n	20c <UsageFault_Handler+0x4>
     20e:	bf00      	nop

00000210 <SVC_Handler>:
     210:	b480      	push	{r7}
     212:	af00      	add	r7, sp, #0
		per_lowpow_mode = 0;
     214:	e7fe      	b.n	214 <SVC_Handler+0x4>
     216:	bf00      	nop

00000218 <DebugMon_Handler>:
     218:	b480      	push	{r7}
		#ifdef CABINET_DEMO
			per_lowpow_mode = 1; //Light sleep
		#endif
	}
	sprintf(buffer, "per_lowpow_mode: %d\n", (int)per_lowpow_mode);
     21a:	af00      	add	r7, sp, #0
     21c:	e7fe      	b.n	21c <DebugMon_Handler+0x4>
     21e:	bf00      	nop

00000220 <PendSV_Handler>:
     220:	b480      	push	{r7}
     222:	af00      	add	r7, sp, #0
     224:	e7fe      	b.n	224 <PendSV_Handler+0x4>
     226:	bf00      	nop
     228:	b480      	push	{r7}
	TraceNL(buffer);
     22a:	af00      	add	r7, sp, #0
     22c:	e7fe      	b.n	22c <PendSV_Handler+0xc>
     22e:	bf00      	nop

00000230 <ADC_IRQHandler>:
     230:	b480      	push	{r7}
	per_coffe_counter = (int)EEPROM_LoadInt64(cal_coffee_counter);
     232:	af00      	add	r7, sp, #0
     234:	e7fe      	b.n	234 <ADC_IRQHandler+0x4>
     236:	bf00      	nop
     238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     23c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	sprintf(buffer, "per_coffee_counter: %d\n", (int)per_coffe_counter);
     248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     24c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	TraceNL(buffer);
     258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     25c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
}
     260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     26c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     27c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     28c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     29c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000002fc <CRP_WORD>:
     2fc:	ffff ffff                                   ....

00000300 <GSM_SendAt>:
static unsigned long int last_hard_reset = -1;
static int connectionFailCount = 0;


uint16_t GSM_SendAt( char* cmd, char *response, int delay )
{
     300:	b580      	push	{r7, lr}
     302:	b0a0      	sub	sp, #128	; 0x80
     304:	af00      	add	r7, sp, #0
     306:	60f8      	str	r0, [r7, #12]
     308:	60b9      	str	r1, [r7, #8]
     30a:	607a      	str	r2, [r7, #4]
	char buffer[100];
	uint16_t	len;

	sprintf( buffer, "---> %s\r\n", cmd );
     30c:	f107 0314 	add.w	r3, r7, #20
     310:	4618      	mov	r0, r3
     312:	4918      	ldr	r1, [pc, #96]	; (374 <GSM_SendAt+0x74>)
     314:	68fa      	ldr	r2, [r7, #12]
     316:	f002 fecd 	bl	30b4 <sprintf>
	Trace( buffer );
     31a:	f107 0314 	add.w	r3, r7, #20
     31e:	4618      	mov	r0, r3
     320:	f001 fbf4 	bl	1b0c <Trace>

	int count = sprintf( buffer, "%s\r\n", cmd );
     324:	f107 0314 	add.w	r3, r7, #20
     328:	4618      	mov	r0, r3
     32a:	4913      	ldr	r1, [pc, #76]	; (378 <GSM_SendAt+0x78>)
     32c:	68fa      	ldr	r2, [r7, #12]
     32e:	f002 fec1 	bl	30b4 <sprintf>
     332:	67f8      	str	r0, [r7, #124]	; 0x7c
	UARTSend( PORT_GSM, buffer, count );
     334:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     336:	f107 0214 	add.w	r2, r7, #20
     33a:	2001      	movs	r0, #1
     33c:	4611      	mov	r1, r2
     33e:	461a      	mov	r2, r3
     340:	f002 f8d8 	bl	24f4 <UARTSend>

	DelayMs( delay );
     344:	687b      	ldr	r3, [r7, #4]
     346:	4618      	mov	r0, r3
     348:	f001 fbca 	bl	1ae0 <DelayMs>

	len = ReadUart( response, PORT_GSM );
     34c:	68b8      	ldr	r0, [r7, #8]
     34e:	2101      	movs	r1, #1
     350:	f002 f96c 	bl	262c <ReadUart>
     354:	4603      	mov	r3, r0
     356:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	response[len] = '\0';
     35a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
     35e:	68ba      	ldr	r2, [r7, #8]
     360:	4413      	add	r3, r2
     362:	2200      	movs	r2, #0
     364:	701a      	strb	r2, [r3, #0]

    return ( len );
     366:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
}
     36a:	4618      	mov	r0, r3
     36c:	3780      	adds	r7, #128	; 0x80
     36e:	46bd      	mov	sp, r7
     370:	bd80      	pop	{r7, pc}
     372:	bf00      	nop
     374:	00005a90 	.word	0x00005a90
     378:	00005a9c 	.word	0x00005a9c

0000037c <GSM_TCP_Recv>:

int16_t GSM_TCP_Recv( char* pDataBuf, int16_t maxBytes )
{
     37c:	b580      	push	{r7, lr}
     37e:	b082      	sub	sp, #8
     380:	af00      	add	r7, sp, #0
     382:	6078      	str	r0, [r7, #4]
     384:	460b      	mov	r3, r1
     386:	807b      	strh	r3, [r7, #2]
	return ( GSM_SendAt( "AT+QIRD=1,1,0,1100", pDataBuf, 1000 ) );
     388:	4806      	ldr	r0, [pc, #24]	; (3a4 <GSM_TCP_Recv+0x28>)
     38a:	6879      	ldr	r1, [r7, #4]
     38c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     390:	f7ff ffb6 	bl	300 <GSM_SendAt>
     394:	4603      	mov	r3, r0
     396:	b29b      	uxth	r3, r3
     398:	b21b      	sxth	r3, r3
}
     39a:	4618      	mov	r0, r3
     39c:	3708      	adds	r7, #8
     39e:	46bd      	mov	sp, r7
     3a0:	bd80      	pop	{r7, pc}
     3a2:	bf00      	nop
     3a4:	00005aa4 	.word	0x00005aa4

000003a8 <GSM_ConnectToTrioUpgradeServer>:

int GSM_ConnectToTrioUpgradeServer( void )
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b0de      	sub	sp, #376	; 0x178
     3ac:	af02      	add	r7, sp, #8
	char buffer[200];
	char response[150];

	TraceNL("Entered GSM_ConnectToTrioUpgradeServer");
     3ae:	48ac      	ldr	r0, [pc, #688]	; (660 <GSM_ConnectToTrioUpgradeServer+0x2b8>)
     3b0:	f001 fbbc 	bl	1b2c <TraceNL>

	int init_result = GSM_InitModule();
     3b4:	f000 fa60 	bl	878 <GSM_InitModule>
     3b8:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
	if (init_result == FAIL){
     3bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
     3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
     3c4:	d109      	bne.n	3da <GSM_ConnectToTrioUpgradeServer+0x32>
		GSM_ShutdownModule();
     3c6:	f000 fa25 	bl	814 <GSM_ShutdownModule>
		DelayMs(2000);
     3ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     3ce:	f001 fb87 	bl	1ae0 <DelayMs>
		init_result = GSM_InitModule();
     3d2:	f000 fa51 	bl	878 <GSM_InitModule>
     3d6:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
	}

	WDTFeed();
     3da:	f002 fa31 	bl	2840 <WDTFeed>

	if( init_result == FAIL )
     3de:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
     3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
     3e6:	d102      	bne.n	3ee <GSM_ConnectToTrioUpgradeServer+0x46>
		return ( init_result );
     3e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
     3ec:	e133      	b.n	656 <GSM_ConnectToTrioUpgradeServer+0x2ae>

	//GSM_EchoOFF();
	GSM_GetImei();
     3ee:	f000 fb0b 	bl	a08 <GSM_GetImei>
	GSM_GetImsi();
     3f2:	f000 fb29 	bl	a48 <GSM_GetImsi>
	GSM_GetRegStat();
     3f6:	f000 fab3 	bl	960 <GSM_GetRegStat>

	GSM_SendAt("ATI", response, 500);
     3fa:	463b      	mov	r3, r7
     3fc:	4899      	ldr	r0, [pc, #612]	; (664 <GSM_ConnectToTrioUpgradeServer+0x2bc>)
     3fe:	4619      	mov	r1, r3
     400:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     404:	f7ff ff7c 	bl	300 <GSM_SendAt>
	WDTFeed();
     408:	f002 fa1a 	bl	2840 <WDTFeed>
	GSM_SendAt("AT+QIFGCNT=1", response, 500);
     40c:	463b      	mov	r3, r7
     40e:	4896      	ldr	r0, [pc, #600]	; (668 <GSM_ConnectToTrioUpgradeServer+0x2c0>)
     410:	4619      	mov	r1, r3
     412:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     416:	f7ff ff73 	bl	300 <GSM_SendAt>

	memset(buffer, 0, sizeof(buffer));
     41a:	f107 0398 	add.w	r3, r7, #152	; 0x98
     41e:	4618      	mov	r0, r3
     420:	2100      	movs	r1, #0
     422:	22c8      	movs	r2, #200	; 0xc8
     424:	f002 fe0c 	bl	3040 <memset>
	sprintf(buffer, "AT+QICSGP=1,\"%s\",\"%s\",\"%s\"", per_apn_val, per_apnuser_val, per_apnpass_val);
     428:	f107 0298 	add.w	r2, r7, #152	; 0x98
     42c:	4b8f      	ldr	r3, [pc, #572]	; (66c <GSM_ConnectToTrioUpgradeServer+0x2c4>)
     42e:	9300      	str	r3, [sp, #0]
     430:	4610      	mov	r0, r2
     432:	498f      	ldr	r1, [pc, #572]	; (670 <GSM_ConnectToTrioUpgradeServer+0x2c8>)
     434:	4a8f      	ldr	r2, [pc, #572]	; (674 <GSM_ConnectToTrioUpgradeServer+0x2cc>)
     436:	4b90      	ldr	r3, [pc, #576]	; (678 <GSM_ConnectToTrioUpgradeServer+0x2d0>)
     438:	f002 fe3c 	bl	30b4 <sprintf>

	GSM_SendAt(buffer, response, 100);
     43c:	f107 0298 	add.w	r2, r7, #152	; 0x98
     440:	463b      	mov	r3, r7
     442:	4610      	mov	r0, r2
     444:	4619      	mov	r1, r3
     446:	2264      	movs	r2, #100	; 0x64
     448:	f7ff ff5a 	bl	300 <GSM_SendAt>
	GSM_SendAt("AT+QIMUX=0", response, 100);
     44c:	463b      	mov	r3, r7
     44e:	488b      	ldr	r0, [pc, #556]	; (67c <GSM_ConnectToTrioUpgradeServer+0x2d4>)
     450:	4619      	mov	r1, r3
     452:	2264      	movs	r2, #100	; 0x64
     454:	f7ff ff54 	bl	300 <GSM_SendAt>
	GSM_SendAt("AT+QVBATT=0,3500,0", response, 100); //Disable low power shut down and warning.
     458:	463b      	mov	r3, r7
     45a:	4889      	ldr	r0, [pc, #548]	; (680 <GSM_ConnectToTrioUpgradeServer+0x2d8>)
     45c:	4619      	mov	r1, r3
     45e:	2264      	movs	r2, #100	; 0x64
     460:	f7ff ff4e 	bl	300 <GSM_SendAt>
	GSM_SendAt("AT+QVBATT=1,3300,0",response,100); // Disable 3.3 volt cutoff.
     464:	463b      	mov	r3, r7
     466:	4887      	ldr	r0, [pc, #540]	; (684 <GSM_ConnectToTrioUpgradeServer+0x2dc>)
     468:	4619      	mov	r1, r3
     46a:	2264      	movs	r2, #100	; 0x64
     46c:	f7ff ff48 	bl	300 <GSM_SendAt>

	GSM_SendAt("AT+QISHOWRA=1", response, 100); // show remote address
     470:	463b      	mov	r3, r7
     472:	4885      	ldr	r0, [pc, #532]	; (688 <GSM_ConnectToTrioUpgradeServer+0x2e0>)
     474:	4619      	mov	r1, r3
     476:	2264      	movs	r2, #100	; 0x64
     478:	f7ff ff42 	bl	300 <GSM_SendAt>
	GSM_SendAt("AT+QISHOWPT=1", response, 100); // show protocol type ,TCP, or UDP
     47c:	463b      	mov	r3, r7
     47e:	4883      	ldr	r0, [pc, #524]	; (68c <GSM_ConnectToTrioUpgradeServer+0x2e4>)
     480:	4619      	mov	r1, r3
     482:	2264      	movs	r2, #100	; 0x64
     484:	f7ff ff3c 	bl	300 <GSM_SendAt>
	GSM_SendAt("AT+QINDI=0", response, 100);    //  disable indicator
     488:	463b      	mov	r3, r7
     48a:	4881      	ldr	r0, [pc, #516]	; (690 <GSM_ConnectToTrioUpgradeServer+0x2e8>)
     48c:	4619      	mov	r1, r3
     48e:	2264      	movs	r2, #100	; 0x64
     490:	f7ff ff36 	bl	300 <GSM_SendAt>
	GSM_SendAt("AT+QIHEAD=1", response, 100);    //
     494:	463b      	mov	r3, r7
     496:	487f      	ldr	r0, [pc, #508]	; (694 <GSM_ConnectToTrioUpgradeServer+0x2ec>)
     498:	4619      	mov	r1, r3
     49a:	2264      	movs	r2, #100	; 0x64
     49c:	f7ff ff30 	bl	300 <GSM_SendAt>

	GSM_SendAt("AT+QIMODE=0", response, 100);   //Non Transparent Mode
     4a0:	463b      	mov	r3, r7
     4a2:	487d      	ldr	r0, [pc, #500]	; (698 <GSM_ConnectToTrioUpgradeServer+0x2f0>)
     4a4:	4619      	mov	r1, r3
     4a6:	2264      	movs	r2, #100	; 0x64
     4a8:	f7ff ff2a 	bl	300 <GSM_SendAt>

	memset(buffer, 0, sizeof(buffer));
     4ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
     4b0:	4618      	mov	r0, r3
     4b2:	2100      	movs	r1, #0
     4b4:	22c8      	movs	r2, #200	; 0xc8
     4b6:	f002 fdc3 	bl	3040 <memset>
	if (isalpha(per_ip_val[0])){ //DNS
     4ba:	4b78      	ldr	r3, [pc, #480]	; (69c <GSM_ConnectToTrioUpgradeServer+0x2f4>)
     4bc:	781b      	ldrb	r3, [r3, #0]
     4be:	3380      	adds	r3, #128	; 0x80
     4c0:	4a77      	ldr	r2, [pc, #476]	; (6a0 <GSM_ConnectToTrioUpgradeServer+0x2f8>)
     4c2:	5cd3      	ldrb	r3, [r2, r3]
     4c4:	f003 0318 	and.w	r3, r3, #24
     4c8:	2b00      	cmp	r3, #0
     4ca:	d011      	beq.n	4f0 <GSM_ConnectToTrioUpgradeServer+0x148>
		GSM_SendAt("AT+QIDNSIP=1", response, 100);
     4cc:	463b      	mov	r3, r7
     4ce:	4875      	ldr	r0, [pc, #468]	; (6a4 <GSM_ConnectToTrioUpgradeServer+0x2fc>)
     4d0:	4619      	mov	r1, r3
     4d2:	2264      	movs	r2, #100	; 0x64
     4d4:	f7ff ff14 	bl	300 <GSM_SendAt>
		TraceDumpHex( response, strlen(response) );
     4d8:	463b      	mov	r3, r7
     4da:	4618      	mov	r0, r3
     4dc:	f004 fa50 	bl	4980 <strlen>
     4e0:	4603      	mov	r3, r0
     4e2:	461a      	mov	r2, r3
     4e4:	463b      	mov	r3, r7
     4e6:	4618      	mov	r0, r3
     4e8:	4611      	mov	r1, r2
     4ea:	f001 fb53 	bl	1b94 <TraceDumpHex>
     4ee:	e005      	b.n	4fc <GSM_ConnectToTrioUpgradeServer+0x154>
	}else
		GSM_SendAt("AT+QIDNSIP=0", response, 100);
     4f0:	463b      	mov	r3, r7
     4f2:	486d      	ldr	r0, [pc, #436]	; (6a8 <GSM_ConnectToTrioUpgradeServer+0x300>)
     4f4:	4619      	mov	r1, r3
     4f6:	2264      	movs	r2, #100	; 0x64
     4f8:	f7ff ff02 	bl	300 <GSM_SendAt>

	GSM_SendAt("AT+QGPCLASS=12", response, 100);
     4fc:	463b      	mov	r3, r7
     4fe:	486b      	ldr	r0, [pc, #428]	; (6ac <GSM_ConnectToTrioUpgradeServer+0x304>)
     500:	4619      	mov	r1, r3
     502:	2264      	movs	r2, #100	; 0x64
     504:	f7ff fefc 	bl	300 <GSM_SendAt>
	GSM_SendAt("AT",response,100);
     508:	463b      	mov	r3, r7
     50a:	4869      	ldr	r0, [pc, #420]	; (6b0 <GSM_ConnectToTrioUpgradeServer+0x308>)
     50c:	4619      	mov	r1, r3
     50e:	2264      	movs	r2, #100	; 0x64
     510:	f7ff fef6 	bl	300 <GSM_SendAt>

	sprintf( buffer, "AT+QIOPEN=\"TCP\",\"%s\",%s\r\n", update_service_ip, update_service_port );
     514:	f107 0398 	add.w	r3, r7, #152	; 0x98
     518:	4618      	mov	r0, r3
     51a:	4966      	ldr	r1, [pc, #408]	; (6b4 <GSM_ConnectToTrioUpgradeServer+0x30c>)
     51c:	4a66      	ldr	r2, [pc, #408]	; (6b8 <GSM_ConnectToTrioUpgradeServer+0x310>)
     51e:	4b67      	ldr	r3, [pc, #412]	; (6bc <GSM_ConnectToTrioUpgradeServer+0x314>)
     520:	f002 fdc8 	bl	30b4 <sprintf>

	GSM_SendAt( buffer, response, 100);
     524:	f107 0298 	add.w	r2, r7, #152	; 0x98
     528:	463b      	mov	r3, r7
     52a:	4610      	mov	r0, r2
     52c:	4619      	mov	r1, r3
     52e:	2264      	movs	r2, #100	; 0x64
     530:	f7ff fee6 	bl	300 <GSM_SendAt>

	int server_conn_count = 0;
     534:	2300      	movs	r3, #0
     536:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	int server_conn_result = FAIL;
     53a:	f04f 33ff 	mov.w	r3, #4294967295
     53e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

	while(1){
		int recLen = ReadUart(response, PORT_GSM);
     542:	463b      	mov	r3, r7
     544:	4618      	mov	r0, r3
     546:	2101      	movs	r1, #1
     548:	f002 f870 	bl	262c <ReadUart>
     54c:	4603      	mov	r3, r0
     54e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
		if( recLen )
     552:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
     556:	2b00      	cmp	r3, #0
     558:	d022      	beq.n	5a0 <GSM_ConnectToTrioUpgradeServer+0x1f8>
		{
			if( strstr(response,"FAIL") != NULL )
     55a:	463b      	mov	r3, r7
     55c:	4618      	mov	r0, r3
     55e:	4958      	ldr	r1, [pc, #352]	; (6c0 <GSM_ConnectToTrioUpgradeServer+0x318>)
     560:	f004 fa5f 	bl	4a22 <strstr>
     564:	4603      	mov	r3, r0
     566:	2b00      	cmp	r3, #0
     568:	d000      	beq.n	56c <GSM_ConnectToTrioUpgradeServer+0x1c4>
			{ //ERROR is about format ignore
				break;
     56a:	e02a      	b.n	5c2 <GSM_ConnectToTrioUpgradeServer+0x21a>
			}
			else if( strstr(response,"CONNECT OK") != NULL || strstr(response,"ALREADY CONNECT") != NULL )
     56c:	463b      	mov	r3, r7
     56e:	4618      	mov	r0, r3
     570:	4954      	ldr	r1, [pc, #336]	; (6c4 <GSM_ConnectToTrioUpgradeServer+0x31c>)
     572:	f004 fa56 	bl	4a22 <strstr>
     576:	4603      	mov	r3, r0
     578:	2b00      	cmp	r3, #0
     57a:	d107      	bne.n	58c <GSM_ConnectToTrioUpgradeServer+0x1e4>
     57c:	463b      	mov	r3, r7
     57e:	4618      	mov	r0, r3
     580:	4951      	ldr	r1, [pc, #324]	; (6c8 <GSM_ConnectToTrioUpgradeServer+0x320>)
     582:	f004 fa4e 	bl	4a22 <strstr>
     586:	4603      	mov	r3, r0
     588:	2b00      	cmp	r3, #0
     58a:	d009      	beq.n	5a0 <GSM_ConnectToTrioUpgradeServer+0x1f8>
			{
				TraceDumpHex( response, recLen );
     58c:	463b      	mov	r3, r7
     58e:	4618      	mov	r0, r3
     590:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
     594:	f001 fafe 	bl	1b94 <TraceDumpHex>
				server_conn_result = SUCCESS;
     598:	2300      	movs	r3, #0
     59a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
				break;
     59e:	e010      	b.n	5c2 <GSM_ConnectToTrioUpgradeServer+0x21a>
			}
		}

		WDTFeed();
     5a0:	f002 f94e 	bl	2840 <WDTFeed>
		DelayMs(300);
     5a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
     5a8:	f001 fa9a 	bl	1ae0 <DelayMs>
		server_conn_count++;
     5ac:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
     5b0:	3301      	adds	r3, #1
     5b2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		if (server_conn_count > 30)
     5b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
     5ba:	2b1e      	cmp	r3, #30
     5bc:	dd00      	ble.n	5c0 <GSM_ConnectToTrioUpgradeServer+0x218>
			break;
     5be:	e000      	b.n	5c2 <GSM_ConnectToTrioUpgradeServer+0x21a>
	}
     5c0:	e7bf      	b.n	542 <GSM_ConnectToTrioUpgradeServer+0x19a>

	if (server_conn_result == SUCCESS) {
     5c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
     5c6:	2b00      	cmp	r3, #0
     5c8:	d107      	bne.n	5da <GSM_ConnectToTrioUpgradeServer+0x232>
		TraceNL("Connected to the server.");
     5ca:	4840      	ldr	r0, [pc, #256]	; (6cc <GSM_ConnectToTrioUpgradeServer+0x324>)
     5cc:	f001 faae 	bl	1b2c <TraceNL>
		connectionFailCount = 0;
     5d0:	4b3f      	ldr	r3, [pc, #252]	; (6d0 <GSM_ConnectToTrioUpgradeServer+0x328>)
     5d2:	2200      	movs	r2, #0
     5d4:	601a      	str	r2, [r3, #0]
		return SUCCESS;
     5d6:	2300      	movs	r3, #0
     5d8:	e03d      	b.n	656 <GSM_ConnectToTrioUpgradeServer+0x2ae>
	}

	TraceNL("QIOPEN failed.");
     5da:	483e      	ldr	r0, [pc, #248]	; (6d4 <GSM_ConnectToTrioUpgradeServer+0x32c>)
     5dc:	f001 faa6 	bl	1b2c <TraceNL>
	connectionFailCount++;
     5e0:	4b3b      	ldr	r3, [pc, #236]	; (6d0 <GSM_ConnectToTrioUpgradeServer+0x328>)
     5e2:	681b      	ldr	r3, [r3, #0]
     5e4:	3301      	adds	r3, #1
     5e6:	4a3a      	ldr	r2, [pc, #232]	; (6d0 <GSM_ConnectToTrioUpgradeServer+0x328>)
     5e8:	6013      	str	r3, [r2, #0]
	if (connectionFailCount > 40 && connectionFailCount % 200 == 0) //10 minutes.
     5ea:	4b39      	ldr	r3, [pc, #228]	; (6d0 <GSM_ConnectToTrioUpgradeServer+0x328>)
     5ec:	681b      	ldr	r3, [r3, #0]
     5ee:	2b28      	cmp	r3, #40	; 0x28
     5f0:	dd17      	ble.n	622 <GSM_ConnectToTrioUpgradeServer+0x27a>
     5f2:	4b37      	ldr	r3, [pc, #220]	; (6d0 <GSM_ConnectToTrioUpgradeServer+0x328>)
     5f4:	681a      	ldr	r2, [r3, #0]
     5f6:	4b38      	ldr	r3, [pc, #224]	; (6d8 <GSM_ConnectToTrioUpgradeServer+0x330>)
     5f8:	fb83 1302 	smull	r1, r3, r3, r2
     5fc:	1199      	asrs	r1, r3, #6
     5fe:	17d3      	asrs	r3, r2, #31
     600:	1acb      	subs	r3, r1, r3
     602:	21c8      	movs	r1, #200	; 0xc8
     604:	fb01 f303 	mul.w	r3, r1, r3
     608:	1ad3      	subs	r3, r2, r3
     60a:	2b00      	cmp	r3, #0
     60c:	d109      	bne.n	622 <GSM_ConnectToTrioUpgradeServer+0x27a>
	{
		TraceNL("Hard resetting module.");
     60e:	4833      	ldr	r0, [pc, #204]	; (6dc <GSM_ConnectToTrioUpgradeServer+0x334>)
     610:	f001 fa8c 	bl	1b2c <TraceNL>
		GSM_InitModule(); //Restarts and initializes module.
     614:	f000 f930 	bl	878 <GSM_InitModule>
		last_hard_reset = STT_Value;
     618:	4b31      	ldr	r3, [pc, #196]	; (6e0 <GSM_ConnectToTrioUpgradeServer+0x338>)
     61a:	681b      	ldr	r3, [r3, #0]
     61c:	4a31      	ldr	r2, [pc, #196]	; (6e4 <GSM_ConnectToTrioUpgradeServer+0x33c>)
     61e:	6013      	str	r3, [r2, #0]
     620:	e017      	b.n	652 <GSM_ConnectToTrioUpgradeServer+0x2aa>
	}
	else if (connectionFailCount > 30 && connectionFailCount % 20 == 0){ //100 in production
     622:	4b2b      	ldr	r3, [pc, #172]	; (6d0 <GSM_ConnectToTrioUpgradeServer+0x328>)
     624:	681b      	ldr	r3, [r3, #0]
     626:	2b1e      	cmp	r3, #30
     628:	dd13      	ble.n	652 <GSM_ConnectToTrioUpgradeServer+0x2aa>
     62a:	4b29      	ldr	r3, [pc, #164]	; (6d0 <GSM_ConnectToTrioUpgradeServer+0x328>)
     62c:	6819      	ldr	r1, [r3, #0]
     62e:	4b2e      	ldr	r3, [pc, #184]	; (6e8 <GSM_ConnectToTrioUpgradeServer+0x340>)
     630:	fb83 2301 	smull	r2, r3, r3, r1
     634:	10da      	asrs	r2, r3, #3
     636:	17cb      	asrs	r3, r1, #31
     638:	1ad2      	subs	r2, r2, r3
     63a:	4613      	mov	r3, r2
     63c:	009b      	lsls	r3, r3, #2
     63e:	4413      	add	r3, r2
     640:	009b      	lsls	r3, r3, #2
     642:	1aca      	subs	r2, r1, r3
     644:	2a00      	cmp	r2, #0
     646:	d104      	bne.n	652 <GSM_ConnectToTrioUpgradeServer+0x2aa>
		TraceNL("connectionFailCount > 40 restarting module.");
     648:	4828      	ldr	r0, [pc, #160]	; (6ec <GSM_ConnectToTrioUpgradeServer+0x344>)
     64a:	f001 fa6f 	bl	1b2c <TraceNL>
		GSM_InitModule(); //Restarts and initializes module.
     64e:	f000 f913 	bl	878 <GSM_InitModule>
	}
	return FAIL;
     652:	f04f 33ff 	mov.w	r3, #4294967295
}
     656:	4618      	mov	r0, r3
     658:	f507 77b8 	add.w	r7, r7, #368	; 0x170
     65c:	46bd      	mov	sp, r7
     65e:	bd80      	pop	{r7, pc}
     660:	00005ab8 	.word	0x00005ab8
     664:	00005ae0 	.word	0x00005ae0
     668:	00005ae4 	.word	0x00005ae4
     66c:	10000948 	.word	0x10000948
     670:	00005af4 	.word	0x00005af4
     674:	10000964 	.word	0x10000964
     678:	100008f8 	.word	0x100008f8
     67c:	00005b10 	.word	0x00005b10
     680:	00005b1c 	.word	0x00005b1c
     684:	00005b30 	.word	0x00005b30
     688:	00005b44 	.word	0x00005b44
     68c:	00005b54 	.word	0x00005b54
     690:	00005b64 	.word	0x00005b64
     694:	00005b70 	.word	0x00005b70
     698:	00005b7c 	.word	0x00005b7c
     69c:	100008a8 	.word	0x100008a8
     6a0:	0000633c 	.word	0x0000633c
     6a4:	00005b88 	.word	0x00005b88
     6a8:	00005b98 	.word	0x00005b98
     6ac:	00005ba8 	.word	0x00005ba8
     6b0:	00005bb8 	.word	0x00005bb8
     6b4:	00005bbc 	.word	0x00005bbc
     6b8:	10000000 	.word	0x10000000
     6bc:	10000014 	.word	0x10000014
     6c0:	00005bd8 	.word	0x00005bd8
     6c4:	00005be0 	.word	0x00005be0
     6c8:	00005bec 	.word	0x00005bec
     6cc:	00005bfc 	.word	0x00005bfc
     6d0:	10000028 	.word	0x10000028
     6d4:	00005c18 	.word	0x00005c18
     6d8:	51eb851f 	.word	0x51eb851f
     6dc:	00005c28 	.word	0x00005c28
     6e0:	1000091c 	.word	0x1000091c
     6e4:	1000001c 	.word	0x1000001c
     6e8:	66666667 	.word	0x66666667
     6ec:	00005c40 	.word	0x00005c40

000006f0 <GSM_TCP_Send>:
** Returned value:	greater than 0 to indicate number of characters transferred
**
**                  a value less than 0 is error code, tobe defined later.
******************************************************************************/
int GSM_TCP_Send( char* msg, uint16_t len )
{
     6f0:	b580      	push	{r7, lr}
     6f2:	b0ce      	sub	sp, #312	; 0x138
     6f4:	af00      	add	r7, sp, #0
     6f6:	1d3b      	adds	r3, r7, #4
     6f8:	6018      	str	r0, [r3, #0]
     6fa:	460a      	mov	r2, r1
     6fc:	1cbb      	adds	r3, r7, #2
     6fe:	801a      	strh	r2, [r3, #0]
	char response[200];
	char buffer[100];

	TraceNL("Entered GSM_TCP_Send");
     700:	4835      	ldr	r0, [pc, #212]	; (7d8 <GSM_TCP_Send+0xe8>)
     702:	f001 fa13 	bl	1b2c <TraceNL>

	GSM_SendAt( "AT", response, 100 ); //Empty buffer
     706:	f107 036c 	add.w	r3, r7, #108	; 0x6c
     70a:	4834      	ldr	r0, [pc, #208]	; (7dc <GSM_TCP_Send+0xec>)
     70c:	4619      	mov	r1, r3
     70e:	2264      	movs	r2, #100	; 0x64
     710:	f7ff fdf6 	bl	300 <GSM_SendAt>

	sprintf( buffer, "AT+QISEND=%d", len );
     714:	1cbb      	adds	r3, r7, #2
     716:	881b      	ldrh	r3, [r3, #0]
     718:	f107 0208 	add.w	r2, r7, #8
     71c:	4610      	mov	r0, r2
     71e:	4930      	ldr	r1, [pc, #192]	; (7e0 <GSM_TCP_Send+0xf0>)
     720:	461a      	mov	r2, r3
     722:	f002 fcc7 	bl	30b4 <sprintf>
	GSM_SendAt( buffer, response, 100 );
     726:	f107 0208 	add.w	r2, r7, #8
     72a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
     72e:	4610      	mov	r0, r2
     730:	4619      	mov	r1, r3
     732:	2264      	movs	r2, #100	; 0x64
     734:	f7ff fde4 	bl	300 <GSM_SendAt>

	if( strchr(response, '>') != NULL )
     738:	f107 036c 	add.w	r3, r7, #108	; 0x6c
     73c:	4618      	mov	r0, r3
     73e:	213e      	movs	r1, #62	; 0x3e
     740:	f004 f8f0 	bl	4924 <strchr>
     744:	4603      	mov	r3, r0
     746:	2b00      	cmp	r3, #0
     748:	d03b      	beq.n	7c2 <GSM_TCP_Send+0xd2>
	{
		UARTSend( PORT_GSM, msg, len );
     74a:	1cbb      	adds	r3, r7, #2
     74c:	881a      	ldrh	r2, [r3, #0]
     74e:	1d3b      	adds	r3, r7, #4
     750:	2001      	movs	r0, #1
     752:	6819      	ldr	r1, [r3, #0]
     754:	f001 fece 	bl	24f4 <UARTSend>

		DelayMs( 300 );
     758:	f44f 7096 	mov.w	r0, #300	; 0x12c
     75c:	f001 f9c0 	bl	1ae0 <DelayMs>

		ReadUart( response, PORT_GSM );
     760:	f107 036c 	add.w	r3, r7, #108	; 0x6c
     764:	4618      	mov	r0, r3
     766:	2101      	movs	r1, #1
     768:	f001 ff60 	bl	262c <ReadUart>
		int sendOkCheck = 0;
     76c:	2300      	movs	r3, #0
     76e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

		while( strstr( response, "SEND OK" ) == NULL )
     772:	e017      	b.n	7a4 <GSM_TCP_Send+0xb4>
		{
			TraceNL( "Send OK whiling.." );
     774:	481b      	ldr	r0, [pc, #108]	; (7e4 <GSM_TCP_Send+0xf4>)
     776:	f001 f9d9 	bl	1b2c <TraceNL>
			if ( sendOkCheck > 20 )
     77a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
     77e:	2b14      	cmp	r3, #20
     780:	dd02      	ble.n	788 <GSM_TCP_Send+0x98>
				return ( FAIL );
     782:	f04f 33ff 	mov.w	r3, #4294967295
     786:	e021      	b.n	7cc <GSM_TCP_Send+0xdc>

			DelayMs( 100 );
     788:	2064      	movs	r0, #100	; 0x64
     78a:	f001 f9a9 	bl	1ae0 <DelayMs>
			ReadUart( response, PORT_GSM );
     78e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
     792:	4618      	mov	r0, r3
     794:	2101      	movs	r1, #1
     796:	f001 ff49 	bl	262c <ReadUart>

			sendOkCheck++;
     79a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
     79e:	3301      	adds	r3, #1
     7a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		DelayMs( 300 );

		ReadUart( response, PORT_GSM );
		int sendOkCheck = 0;

		while( strstr( response, "SEND OK" ) == NULL )
     7a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
     7a8:	4618      	mov	r0, r3
     7aa:	490f      	ldr	r1, [pc, #60]	; (7e8 <GSM_TCP_Send+0xf8>)
     7ac:	f004 f939 	bl	4a22 <strstr>
     7b0:	4603      	mov	r3, r0
     7b2:	2b00      	cmp	r3, #0
     7b4:	d0de      	beq.n	774 <GSM_TCP_Send+0x84>
			DelayMs( 100 );
			ReadUart( response, PORT_GSM );

			sendOkCheck++;
		}
		TraceNL( "Data sent." );
     7b6:	480d      	ldr	r0, [pc, #52]	; (7ec <GSM_TCP_Send+0xfc>)
     7b8:	f001 f9b8 	bl	1b2c <TraceNL>
		return ( len );
     7bc:	1cbb      	adds	r3, r7, #2
     7be:	881b      	ldrh	r3, [r3, #0]
     7c0:	e004      	b.n	7cc <GSM_TCP_Send+0xdc>
	}
	TraceNL( "Data fail." );
     7c2:	480b      	ldr	r0, [pc, #44]	; (7f0 <GSM_TCP_Send+0x100>)
     7c4:	f001 f9b2 	bl	1b2c <TraceNL>
	return ( FAIL );
     7c8:	f04f 33ff 	mov.w	r3, #4294967295
}
     7cc:	4618      	mov	r0, r3
     7ce:	f507 779c 	add.w	r7, r7, #312	; 0x138
     7d2:	46bd      	mov	sp, r7
     7d4:	bd80      	pop	{r7, pc}
     7d6:	bf00      	nop
     7d8:	00005d24 	.word	0x00005d24
     7dc:	00005bb8 	.word	0x00005bb8
     7e0:	00005cd8 	.word	0x00005cd8
     7e4:	00005ce8 	.word	0x00005ce8
     7e8:	00005cfc 	.word	0x00005cfc
     7ec:	00005d04 	.word	0x00005d04
     7f0:	00005d18 	.word	0x00005d18

000007f4 <GSM_TogglePwrKey>:

void GSM_TogglePwrKey() {
     7f4:	b580      	push	{r7, lr}
     7f6:	af00      	add	r7, sp, #0
	//Toggle PWR_KEY
	LPC_GPIO2->FIOSET = (1 << 3);
     7f8:	4b05      	ldr	r3, [pc, #20]	; (810 <GSM_TogglePwrKey+0x1c>)
     7fa:	2208      	movs	r2, #8
     7fc:	619a      	str	r2, [r3, #24]
	DelayMs(2000);
     7fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     802:	f001 f96d 	bl	1ae0 <DelayMs>
	LPC_GPIO2->FIOCLR = (1 << 3);
     806:	4b02      	ldr	r3, [pc, #8]	; (810 <GSM_TogglePwrKey+0x1c>)
     808:	2208      	movs	r2, #8
     80a:	61da      	str	r2, [r3, #28]
}
     80c:	bd80      	pop	{r7, pc}
     80e:	bf00      	nop
     810:	2009c040 	.word	0x2009c040

00000814 <GSM_ShutdownModule>:

int GSM_ShutdownModule() {
     814:	b580      	push	{r7, lr}
     816:	b09a      	sub	sp, #104	; 0x68
     818:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+QPOWD=0", response, 500);
     81a:	1d3b      	adds	r3, r7, #4
     81c:	4813      	ldr	r0, [pc, #76]	; (86c <GSM_ShutdownModule+0x58>)
     81e:	4619      	mov	r1, r3
     820:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     824:	f7ff fd6c 	bl	300 <GSM_SendAt>
	DelayMs(1000);
     828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     82c:	f001 f958 	bl	1ae0 <DelayMs>
	memset(response, 0, sizeof(response));
     830:	1d3b      	adds	r3, r7, #4
     832:	4618      	mov	r0, r3
     834:	2100      	movs	r1, #0
     836:	2264      	movs	r2, #100	; 0x64
     838:	f002 fc02 	bl	3040 <memset>
	GSM_SendAt("AT", response, 500);
     83c:	1d3b      	adds	r3, r7, #4
     83e:	480c      	ldr	r0, [pc, #48]	; (870 <GSM_ShutdownModule+0x5c>)
     840:	4619      	mov	r1, r3
     842:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     846:	f7ff fd5b 	bl	300 <GSM_SendAt>
	if (strstr(response, "OK") == NULL) {
     84a:	1d3b      	adds	r3, r7, #4
     84c:	4618      	mov	r0, r3
     84e:	4909      	ldr	r1, [pc, #36]	; (874 <GSM_ShutdownModule+0x60>)
     850:	f004 f8e7 	bl	4a22 <strstr>
     854:	4603      	mov	r3, r0
     856:	2b00      	cmp	r3, #0
     858:	d101      	bne.n	85e <GSM_ShutdownModule+0x4a>
		return ( SUCCESS );
     85a:	2300      	movs	r3, #0
     85c:	e001      	b.n	862 <GSM_ShutdownModule+0x4e>
	}
	return ( FAIL );
     85e:	f04f 33ff 	mov.w	r3, #4294967295
}
     862:	4618      	mov	r0, r3
     864:	3768      	adds	r7, #104	; 0x68
     866:	46bd      	mov	sp, r7
     868:	bd80      	pop	{r7, pc}
     86a:	bf00      	nop
     86c:	00005d3c 	.word	0x00005d3c
     870:	00005bb8 	.word	0x00005bb8
     874:	00005d48 	.word	0x00005d48

00000878 <GSM_InitModule>:
	LPC_GPIO2->FIOCLR = (1 << 2);

	return ( SUCCESS );
}

int GSM_InitModule() {
     878:	b580      	push	{r7, lr}
     87a:	b09c      	sub	sp, #112	; 0x70
     87c:	af00      	add	r7, sp, #0
	//Unset EMERG
	char response[100];
	LPC_GPIO2->FIOCLR = (1 << 2);
     87e:	4b30      	ldr	r3, [pc, #192]	; (940 <GSM_InitModule+0xc8>)
     880:	2204      	movs	r2, #4
     882:	61da      	str	r2, [r3, #28]
	DelayMs(1000);
     884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     888:	f001 f92a 	bl	1ae0 <DelayMs>
	GSM_TogglePwrKey();
     88c:	f7ff ffb2 	bl	7f4 <GSM_TogglePwrKey>
	int i = 0;
     890:	2300      	movs	r3, #0
     892:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (i = 0; i < 20; i++) {
     894:	2300      	movs	r3, #0
     896:	66fb      	str	r3, [r7, #108]	; 0x6c
     898:	e048      	b.n	92c <GSM_InitModule+0xb4>
		GSM_SendAt("AT", response, 500);
     89a:	1d3b      	adds	r3, r7, #4
     89c:	4829      	ldr	r0, [pc, #164]	; (944 <GSM_InitModule+0xcc>)
     89e:	4619      	mov	r1, r3
     8a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     8a4:	f7ff fd2c 	bl	300 <GSM_SendAt>

//		TraceDumpHex( response, strlen(response) );
		if (strstr(response, "OK") != NULL) {
     8a8:	1d3b      	adds	r3, r7, #4
     8aa:	4618      	mov	r0, r3
     8ac:	4926      	ldr	r1, [pc, #152]	; (948 <GSM_InitModule+0xd0>)
     8ae:	f004 f8b8 	bl	4a22 <strstr>
     8b2:	4603      	mov	r3, r0
     8b4:	2b00      	cmp	r3, #0
     8b6:	d036      	beq.n	926 <GSM_InitModule+0xae>

//			GSM_Set1152008N1( );
//
//			UARTInit(PORT_GSM, 115200);
			GSM_SendAt("AT+CMEE=2", response, 500);
     8b8:	1d3b      	adds	r3, r7, #4
     8ba:	4824      	ldr	r0, [pc, #144]	; (94c <GSM_InitModule+0xd4>)
     8bc:	4619      	mov	r1, r3
     8be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     8c2:	f7ff fd1d 	bl	300 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			DelayMs(500);
     8c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     8ca:	f001 f909 	bl	1ae0 <DelayMs>
			//Init SMS
			//SMS Text Mode
			GSM_SendAt("AT+CMGF=1", response, 500);
     8ce:	1d3b      	adds	r3, r7, #4
     8d0:	481f      	ldr	r0, [pc, #124]	; (950 <GSM_InitModule+0xd8>)
     8d2:	4619      	mov	r1, r3
     8d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     8d8:	f7ff fd12 	bl	300 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			//Initialize SMS, if not new messages does not cause +CMTI
			GSM_SendAt("AT+CNMI=2,1,0,0,0", response, 500);
     8dc:	1d3b      	adds	r3, r7, #4
     8de:	481d      	ldr	r0, [pc, #116]	; (954 <GSM_InitModule+0xdc>)
     8e0:	4619      	mov	r1, r3
     8e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     8e6:	f7ff fd0b 	bl	300 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			int sim_check = FAIL;
     8ea:	f04f 33ff 	mov.w	r3, #4294967295
     8ee:	66bb      	str	r3, [r7, #104]	; 0x68
			for(;i<40;i++){
     8f0:	e014      	b.n	91c <GSM_InitModule+0xa4>
				sim_check = GSM_CheckSimCard();
     8f2:	f000 f867 	bl	9c4 <GSM_CheckSimCard>
     8f6:	66b8      	str	r0, [r7, #104]	; 0x68
				if (sim_check == SUCCESS){
     8f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     8fa:	2b00      	cmp	r3, #0
     8fc:	d103      	bne.n	906 <GSM_InitModule+0x8e>
					TraceNL("Sim card ready..\r");
     8fe:	4816      	ldr	r0, [pc, #88]	; (958 <GSM_InitModule+0xe0>)
     900:	f001 f914 	bl	1b2c <TraceNL>
					break;
     904:	e00d      	b.n	922 <GSM_InitModule+0xaa>
				}
				else
					TraceNL("Sim not ready!\r");
     906:	4815      	ldr	r0, [pc, #84]	; (95c <GSM_InitModule+0xe4>)
     908:	f001 f910 	bl	1b2c <TraceNL>
				DelayMs(200);
     90c:	20c8      	movs	r0, #200	; 0xc8
     90e:	f001 f8e7 	bl	1ae0 <DelayMs>
				WDTFeed();
     912:	f001 ff95 	bl	2840 <WDTFeed>
//			TraceDumpHex( response, strlen(response) );
			//Initialize SMS, if not new messages does not cause +CMTI
			GSM_SendAt("AT+CNMI=2,1,0,0,0", response, 500);
//			TraceDumpHex( response, strlen(response) );
			int sim_check = FAIL;
			for(;i<40;i++){
     916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     918:	3301      	adds	r3, #1
     91a:	66fb      	str	r3, [r7, #108]	; 0x6c
     91c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     91e:	2b27      	cmp	r3, #39	; 0x27
     920:	dde7      	ble.n	8f2 <GSM_InitModule+0x7a>
				else
					TraceNL("Sim not ready!\r");
				DelayMs(200);
				WDTFeed();
			}
			return sim_check;
     922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     924:	e007      	b.n	936 <GSM_InitModule+0xbe>
	char response[100];
	LPC_GPIO2->FIOCLR = (1 << 2);
	DelayMs(1000);
	GSM_TogglePwrKey();
	int i = 0;
	for (i = 0; i < 20; i++) {
     926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     928:	3301      	adds	r3, #1
     92a:	66fb      	str	r3, [r7, #108]	; 0x6c
     92c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     92e:	2b13      	cmp	r3, #19
     930:	ddb3      	ble.n	89a <GSM_InitModule+0x22>
				WDTFeed();
			}
			return sim_check;
		}
	}
	return FAIL;
     932:	f04f 33ff 	mov.w	r3, #4294967295
}
     936:	4618      	mov	r0, r3
     938:	3770      	adds	r7, #112	; 0x70
     93a:	46bd      	mov	sp, r7
     93c:	bd80      	pop	{r7, pc}
     93e:	bf00      	nop
     940:	2009c040 	.word	0x2009c040
     944:	00005bb8 	.word	0x00005bb8
     948:	00005d48 	.word	0x00005d48
     94c:	00005d4c 	.word	0x00005d4c
     950:	00005d58 	.word	0x00005d58
     954:	00005d64 	.word	0x00005d64
     958:	00005d78 	.word	0x00005d78
     95c:	00005d8c 	.word	0x00005d8c

00000960 <GSM_GetRegStat>:




int GSM_GetRegStat(){
     960:	b580      	push	{r7, lr}
     962:	b09a      	sub	sp, #104	; 0x68
     964:	af00      	add	r7, sp, #0

	char response[100];
	GSM_SendAt("AT+CREG?", response, 100);
     966:	1d3b      	adds	r3, r7, #4
     968:	4812      	ldr	r0, [pc, #72]	; (9b4 <GSM_GetRegStat+0x54>)
     96a:	4619      	mov	r1, r3
     96c:	2264      	movs	r2, #100	; 0x64
     96e:	f7ff fcc7 	bl	300 <GSM_SendAt>
	if (strstr(response, "+CREG") != NULL && ((strstr(response, ",5") != NULL) || (strstr(response, ",1") != NULL))) {
     972:	1d3b      	adds	r3, r7, #4
     974:	4618      	mov	r0, r3
     976:	4910      	ldr	r1, [pc, #64]	; (9b8 <GSM_GetRegStat+0x58>)
     978:	f004 f853 	bl	4a22 <strstr>
     97c:	4603      	mov	r3, r0
     97e:	2b00      	cmp	r3, #0
     980:	d011      	beq.n	9a6 <GSM_GetRegStat+0x46>
     982:	1d3b      	adds	r3, r7, #4
     984:	4618      	mov	r0, r3
     986:	490d      	ldr	r1, [pc, #52]	; (9bc <GSM_GetRegStat+0x5c>)
     988:	f004 f84b 	bl	4a22 <strstr>
     98c:	4603      	mov	r3, r0
     98e:	2b00      	cmp	r3, #0
     990:	d107      	bne.n	9a2 <GSM_GetRegStat+0x42>
     992:	1d3b      	adds	r3, r7, #4
     994:	4618      	mov	r0, r3
     996:	490a      	ldr	r1, [pc, #40]	; (9c0 <GSM_GetRegStat+0x60>)
     998:	f004 f843 	bl	4a22 <strstr>
     99c:	4603      	mov	r3, r0
     99e:	2b00      	cmp	r3, #0
     9a0:	d001      	beq.n	9a6 <GSM_GetRegStat+0x46>
		return SUCCESS;
     9a2:	2300      	movs	r3, #0
     9a4:	e001      	b.n	9aa <GSM_GetRegStat+0x4a>
	}
	return FAIL;
     9a6:	f04f 33ff 	mov.w	r3, #4294967295
}
     9aa:	4618      	mov	r0, r3
     9ac:	3768      	adds	r7, #104	; 0x68
     9ae:	46bd      	mov	sp, r7
     9b0:	bd80      	pop	{r7, pc}
     9b2:	bf00      	nop
     9b4:	00005d9c 	.word	0x00005d9c
     9b8:	00005da8 	.word	0x00005da8
     9bc:	00005db0 	.word	0x00005db0
     9c0:	00005db4 	.word	0x00005db4

000009c4 <GSM_CheckSimCard>:
	}
	cell_str[index] = '\0';
}


int GSM_CheckSimCard() {
     9c4:	b580      	push	{r7, lr}
     9c6:	b09a      	sub	sp, #104	; 0x68
     9c8:	af00      	add	r7, sp, #0
	TraceNL("Entered check sim card.");
     9ca:	480c      	ldr	r0, [pc, #48]	; (9fc <GSM_CheckSimCard+0x38>)
     9cc:	f001 f8ae 	bl	1b2c <TraceNL>
	char response[100];
	GSM_SendAt("AT+CPIN?", response, 250);
     9d0:	1d3b      	adds	r3, r7, #4
     9d2:	480b      	ldr	r0, [pc, #44]	; (a00 <GSM_CheckSimCard+0x3c>)
     9d4:	4619      	mov	r1, r3
     9d6:	22fa      	movs	r2, #250	; 0xfa
     9d8:	f7ff fc92 	bl	300 <GSM_SendAt>
	if (strstr(response, "READY") != NULL)
     9dc:	1d3b      	adds	r3, r7, #4
     9de:	4618      	mov	r0, r3
     9e0:	4908      	ldr	r1, [pc, #32]	; (a04 <GSM_CheckSimCard+0x40>)
     9e2:	f004 f81e 	bl	4a22 <strstr>
     9e6:	4603      	mov	r3, r0
     9e8:	2b00      	cmp	r3, #0
     9ea:	d001      	beq.n	9f0 <GSM_CheckSimCard+0x2c>
		return ( SUCCESS );
     9ec:	2300      	movs	r3, #0
     9ee:	e001      	b.n	9f4 <GSM_CheckSimCard+0x30>
	return ( FAIL );
     9f0:	f04f 33ff 	mov.w	r3, #4294967295
}
     9f4:	4618      	mov	r0, r3
     9f6:	3768      	adds	r7, #104	; 0x68
     9f8:	46bd      	mov	sp, r7
     9fa:	bd80      	pop	{r7, pc}
     9fc:	00005db8 	.word	0x00005db8
     a00:	00005dd0 	.word	0x00005dd0
     a04:	00005ddc 	.word	0x00005ddc

00000a08 <GSM_GetImei>:

void GSM_GetImei() {
     a08:	b580      	push	{r7, lr}
     a0a:	b09a      	sub	sp, #104	; 0x68
     a0c:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+GSN", response, 500);
     a0e:	1d3b      	adds	r3, r7, #4
     a10:	480a      	ldr	r0, [pc, #40]	; (a3c <GSM_GetImei+0x34>)
     a12:	4619      	mov	r1, r3
     a14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     a18:	f7ff fc72 	bl	300 <GSM_SendAt>
	TraceNL("IMEI : ");
     a1c:	4808      	ldr	r0, [pc, #32]	; (a40 <GSM_GetImei+0x38>)
     a1e:	f001 f885 	bl	1b2c <TraceNL>
	strncpy(imei, response + 9, 15);
     a22:	1d3b      	adds	r3, r7, #4
     a24:	3309      	adds	r3, #9
     a26:	4807      	ldr	r0, [pc, #28]	; (a44 <GSM_GetImei+0x3c>)
     a28:	4619      	mov	r1, r3
     a2a:	220f      	movs	r2, #15
     a2c:	f003 ffcd 	bl	49ca <strncpy>
	TraceNL(imei);
     a30:	4804      	ldr	r0, [pc, #16]	; (a44 <GSM_GetImei+0x3c>)
     a32:	f001 f87b 	bl	1b2c <TraceNL>
}
     a36:	3768      	adds	r7, #104	; 0x68
     a38:	46bd      	mov	sp, r7
     a3a:	bd80      	pop	{r7, pc}
     a3c:	00005de4 	.word	0x00005de4
     a40:	00005dec 	.word	0x00005dec
     a44:	10000998 	.word	0x10000998

00000a48 <GSM_GetImsi>:

void GSM_GetImsi() {
     a48:	b590      	push	{r4, r7, lr}
     a4a:	b09d      	sub	sp, #116	; 0x74
     a4c:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+CIMI", response, 500);
     a4e:	463b      	mov	r3, r7
     a50:	4827      	ldr	r0, [pc, #156]	; (af0 <GSM_GetImsi+0xa8>)
     a52:	4619      	mov	r1, r3
     a54:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     a58:	f7ff fc52 	bl	300 <GSM_SendAt>
	Trace("IMSI : ");
     a5c:	4825      	ldr	r0, [pc, #148]	; (af4 <GSM_GetImsi+0xac>)
     a5e:	f001 f855 	bl	1b0c <Trace>
	int i;
	int index = 0;
     a62:	2300      	movs	r3, #0
     a64:	66bb      	str	r3, [r7, #104]	; 0x68
	int is_start = 0;
     a66:	2300      	movs	r3, #0
     a68:	667b      	str	r3, [r7, #100]	; 0x64
	for (i = 0; i < strlen(response); i++) {
     a6a:	2300      	movs	r3, #0
     a6c:	66fb      	str	r3, [r7, #108]	; 0x6c
     a6e:	e02c      	b.n	aca <GSM_GetImsi+0x82>
		if (index > 19)
     a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     a72:	2b13      	cmp	r3, #19
     a74:	dd00      	ble.n	a78 <GSM_GetImsi+0x30>
			break;
     a76:	e030      	b.n	ada <GSM_GetImsi+0x92>
		if ( isdigit(response[i]))
     a78:	463a      	mov	r2, r7
     a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     a7c:	4413      	add	r3, r2
     a7e:	781b      	ldrb	r3, [r3, #0]
     a80:	3380      	adds	r3, #128	; 0x80
     a82:	4a1d      	ldr	r2, [pc, #116]	; (af8 <GSM_GetImsi+0xb0>)
     a84:	5cd3      	ldrb	r3, [r2, r3]
     a86:	f003 0320 	and.w	r3, r3, #32
     a8a:	2b00      	cmp	r3, #0
     a8c:	d001      	beq.n	a92 <GSM_GetImsi+0x4a>
			is_start = 1;
     a8e:	2301      	movs	r3, #1
     a90:	667b      	str	r3, [r7, #100]	; 0x64
		if (is_start == 1 && response[i] == '\n')
     a92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     a94:	2b01      	cmp	r3, #1
     a96:	d106      	bne.n	aa6 <GSM_GetImsi+0x5e>
     a98:	463a      	mov	r2, r7
     a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     a9c:	4413      	add	r3, r2
     a9e:	781b      	ldrb	r3, [r3, #0]
     aa0:	2b0a      	cmp	r3, #10
     aa2:	d100      	bne.n	aa6 <GSM_GetImsi+0x5e>
			break;
     aa4:	e019      	b.n	ada <GSM_GetImsi+0x92>
		if (is_start == 1) {
     aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     aa8:	2b01      	cmp	r3, #1
     aaa:	d10b      	bne.n	ac4 <GSM_GetImsi+0x7c>
			imsi[index] = response[i];
     aac:	463a      	mov	r2, r7
     aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     ab0:	4413      	add	r3, r2
     ab2:	7819      	ldrb	r1, [r3, #0]
     ab4:	4a11      	ldr	r2, [pc, #68]	; (afc <GSM_GetImsi+0xb4>)
     ab6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     ab8:	4413      	add	r3, r2
     aba:	460a      	mov	r2, r1
     abc:	701a      	strb	r2, [r3, #0]
			index++;
     abe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     ac0:	3301      	adds	r3, #1
     ac2:	66bb      	str	r3, [r7, #104]	; 0x68
	GSM_SendAt("AT+CIMI", response, 500);
	Trace("IMSI : ");
	int i;
	int index = 0;
	int is_start = 0;
	for (i = 0; i < strlen(response); i++) {
     ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     ac6:	3301      	adds	r3, #1
     ac8:	66fb      	str	r3, [r7, #108]	; 0x6c
     aca:	6efc      	ldr	r4, [r7, #108]	; 0x6c
     acc:	463b      	mov	r3, r7
     ace:	4618      	mov	r0, r3
     ad0:	f003 ff56 	bl	4980 <strlen>
     ad4:	4603      	mov	r3, r0
     ad6:	429c      	cmp	r4, r3
     ad8:	d3ca      	bcc.n	a70 <GSM_GetImsi+0x28>
		if (is_start == 1) {
			imsi[index] = response[i];
			index++;
		}
	}
	imsi[index - 1] = '\0';
     ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     adc:	3b01      	subs	r3, #1
     ade:	4a07      	ldr	r2, [pc, #28]	; (afc <GSM_GetImsi+0xb4>)
     ae0:	2100      	movs	r1, #0
     ae2:	54d1      	strb	r1, [r2, r3]
	TraceNL(imsi);
     ae4:	4805      	ldr	r0, [pc, #20]	; (afc <GSM_GetImsi+0xb4>)
     ae6:	f001 f821 	bl	1b2c <TraceNL>
}
     aea:	3774      	adds	r7, #116	; 0x74
     aec:	46bd      	mov	sp, r7
     aee:	bd90      	pop	{r4, r7, pc}
     af0:	00005df4 	.word	0x00005df4
     af4:	00005dfc 	.word	0x00005dfc
     af8:	0000633c 	.word	0x0000633c
     afc:	10000984 	.word	0x10000984

00000b00 <GSM_TCP_Close>:
	GSM_SendAt("ATE0", response, 500);
	TraceNL("ECHO OFF");
}

void GSM_TCP_Close( void )
{
     b00:	b580      	push	{r7, lr}
     b02:	b0b2      	sub	sp, #200	; 0xc8
     b04:	af00      	add	r7, sp, #0
	char response[200];
	GSM_SendAt("AT+QICLOSE", response, 500);
     b06:	463b      	mov	r3, r7
     b08:	4805      	ldr	r0, [pc, #20]	; (b20 <GSM_TCP_Close+0x20>)
     b0a:	4619      	mov	r1, r3
     b0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     b10:	f7ff fbf6 	bl	300 <GSM_SendAt>
	TraceNL("CLOSE TCP connection ");
     b14:	4803      	ldr	r0, [pc, #12]	; (b24 <GSM_TCP_Close+0x24>)
     b16:	f001 f809 	bl	1b2c <TraceNL>

}
     b1a:	37c8      	adds	r7, #200	; 0xc8
     b1c:	46bd      	mov	sp, r7
     b1e:	bd80      	pop	{r7, pc}
     b20:	00005e50 	.word	0x00005e50
     b24:	00005e5c 	.word	0x00005e5c

00000b28 <u16CRC_Calc16>:
**
** Returned value:  16-bit CRC
**
******************************************************************************/
uint16_t u16CRC_Calc16(const uint8_t *pu8Data, int32_t i16Len)
{
     b28:	b480      	push	{r7}
     b2a:	b085      	sub	sp, #20
     b2c:	af00      	add	r7, sp, #0
     b2e:	6078      	str	r0, [r7, #4]
     b30:	6039      	str	r1, [r7, #0]
	uint8_t i;
	uint16_t u16CRC = 0;
     b32:	2300      	movs	r3, #0
     b34:	81bb      	strh	r3, [r7, #12]

    while(--i16Len >= 0)
     b36:	e022      	b.n	b7e <u16CRC_Calc16+0x56>
    {
    	i = 8;
     b38:	2308      	movs	r3, #8
     b3a:	73fb      	strb	r3, [r7, #15]
    	u16CRC = u16CRC ^ (((uint16_t)*pu8Data++) << 8);
     b3c:	687b      	ldr	r3, [r7, #4]
     b3e:	1c5a      	adds	r2, r3, #1
     b40:	607a      	str	r2, [r7, #4]
     b42:	781b      	ldrb	r3, [r3, #0]
     b44:	021b      	lsls	r3, r3, #8
     b46:	b29a      	uxth	r2, r3
     b48:	89bb      	ldrh	r3, [r7, #12]
     b4a:	4053      	eors	r3, r2
     b4c:	b29b      	uxth	r3, r3
     b4e:	81bb      	strh	r3, [r7, #12]

    	do
        {
    		if (u16CRC & 0x8000)
     b50:	89bb      	ldrh	r3, [r7, #12]
     b52:	b21b      	sxth	r3, r3
     b54:	2b00      	cmp	r3, #0
     b56:	da09      	bge.n	b6c <u16CRC_Calc16+0x44>
    		{
    			u16CRC = u16CRC << 1 ^ 0x1021;
     b58:	89bb      	ldrh	r3, [r7, #12]
     b5a:	005b      	lsls	r3, r3, #1
     b5c:	b29b      	uxth	r3, r3
     b5e:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
     b62:	f083 0301 	eor.w	r3, r3, #1
     b66:	b29b      	uxth	r3, r3
     b68:	81bb      	strh	r3, [r7, #12]
     b6a:	e002      	b.n	b72 <u16CRC_Calc16+0x4a>
    		}
    		else
    		{
    			u16CRC = u16CRC << 1;
     b6c:	89bb      	ldrh	r3, [r7, #12]
     b6e:	005b      	lsls	r3, r3, #1
     b70:	81bb      	strh	r3, [r7, #12]
    		}
        }
    	while(--i);
     b72:	7bfb      	ldrb	r3, [r7, #15]
     b74:	3b01      	subs	r3, #1
     b76:	73fb      	strb	r3, [r7, #15]
     b78:	7bfb      	ldrb	r3, [r7, #15]
     b7a:	2b00      	cmp	r3, #0
     b7c:	d1e8      	bne.n	b50 <u16CRC_Calc16+0x28>
uint16_t u16CRC_Calc16(const uint8_t *pu8Data, int32_t i16Len)
{
	uint8_t i;
	uint16_t u16CRC = 0;

    while(--i16Len >= 0)
     b7e:	683b      	ldr	r3, [r7, #0]
     b80:	3b01      	subs	r3, #1
     b82:	603b      	str	r3, [r7, #0]
     b84:	683b      	ldr	r3, [r7, #0]
     b86:	2b00      	cmp	r3, #0
     b88:	dad6      	bge.n	b38 <u16CRC_Calc16+0x10>
    			u16CRC = u16CRC << 1;
    		}
        }
    	while(--i);
    }
    return u16CRC;
     b8a:	89bb      	ldrh	r3, [r7, #12]
}
     b8c:	4618      	mov	r0, r3
     b8e:	3714      	adds	r7, #20
     b90:	46bd      	mov	sp, r7
     b92:	f85d 7b04 	ldr.w	r7, [sp], #4
     b96:	4770      	bx	lr

00000b98 <I2C0_IRQHandler>:

volatile uint32_t RdIndex_1,RdIndex_0 = 0;
volatile uint32_t WrIndex_1,WrIndex_0 = 0;


void I2C0_IRQHandler(void) {
     b98:	b480      	push	{r7}
     b9a:	b083      	sub	sp, #12
     b9c:	af00      	add	r7, sp, #0
	uint8_t StatValue;
	/* this handler deals with master read and master write only */
	StatValue = LPC_I2C0->I2STAT;
     b9e:	4ba9      	ldr	r3, [pc, #676]	; (e44 <I2C0_IRQHandler+0x2ac>)
     ba0:	685b      	ldr	r3, [r3, #4]
     ba2:	71fb      	strb	r3, [r7, #7]
	switch (StatValue) {
     ba4:	79fb      	ldrb	r3, [r7, #7]
     ba6:	3b08      	subs	r3, #8
     ba8:	2b50      	cmp	r3, #80	; 0x50
     baa:	f200 8184 	bhi.w	eb6 <I2C0_IRQHandler+0x31e>
     bae:	a201      	add	r2, pc, #4	; (adr r2, bb4 <I2C0_IRQHandler+0x1c>)
     bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     bb4:	00000cf9 	.word	0x00000cf9
     bb8:	00000eb7 	.word	0x00000eb7
     bbc:	00000eb7 	.word	0x00000eb7
     bc0:	00000eb7 	.word	0x00000eb7
     bc4:	00000eb7 	.word	0x00000eb7
     bc8:	00000eb7 	.word	0x00000eb7
     bcc:	00000eb7 	.word	0x00000eb7
     bd0:	00000eb7 	.word	0x00000eb7
     bd4:	00000d1b 	.word	0x00000d1b
     bd8:	00000eb7 	.word	0x00000eb7
     bdc:	00000eb7 	.word	0x00000eb7
     be0:	00000eb7 	.word	0x00000eb7
     be4:	00000eb7 	.word	0x00000eb7
     be8:	00000eb7 	.word	0x00000eb7
     bec:	00000eb7 	.word	0x00000eb7
     bf0:	00000eb7 	.word	0x00000eb7
     bf4:	00000d45 	.word	0x00000d45
     bf8:	00000eb7 	.word	0x00000eb7
     bfc:	00000eb7 	.word	0x00000eb7
     c00:	00000eb7 	.word	0x00000eb7
     c04:	00000eb7 	.word	0x00000eb7
     c08:	00000eb7 	.word	0x00000eb7
     c0c:	00000eb7 	.word	0x00000eb7
     c10:	00000eb7 	.word	0x00000eb7
     c14:	00000ea9 	.word	0x00000ea9
     c18:	00000eb7 	.word	0x00000eb7
     c1c:	00000eb7 	.word	0x00000eb7
     c20:	00000eb7 	.word	0x00000eb7
     c24:	00000eb7 	.word	0x00000eb7
     c28:	00000eb7 	.word	0x00000eb7
     c2c:	00000eb7 	.word	0x00000eb7
     c30:	00000eb7 	.word	0x00000eb7
     c34:	00000d6f 	.word	0x00000d6f
     c38:	00000eb7 	.word	0x00000eb7
     c3c:	00000eb7 	.word	0x00000eb7
     c40:	00000eb7 	.word	0x00000eb7
     c44:	00000eb7 	.word	0x00000eb7
     c48:	00000eb7 	.word	0x00000eb7
     c4c:	00000eb7 	.word	0x00000eb7
     c50:	00000eb7 	.word	0x00000eb7
     c54:	00000db5 	.word	0x00000db5
     c58:	00000eb7 	.word	0x00000eb7
     c5c:	00000eb7 	.word	0x00000eb7
     c60:	00000eb7 	.word	0x00000eb7
     c64:	00000eb7 	.word	0x00000eb7
     c68:	00000eb7 	.word	0x00000eb7
     c6c:	00000eb7 	.word	0x00000eb7
     c70:	00000eb7 	.word	0x00000eb7
     c74:	00000eb7 	.word	0x00000eb7
     c78:	00000eb7 	.word	0x00000eb7
     c7c:	00000eb7 	.word	0x00000eb7
     c80:	00000eb7 	.word	0x00000eb7
     c84:	00000eb7 	.word	0x00000eb7
     c88:	00000eb7 	.word	0x00000eb7
     c8c:	00000eb7 	.word	0x00000eb7
     c90:	00000eb7 	.word	0x00000eb7
     c94:	00000e35 	.word	0x00000e35
     c98:	00000eb7 	.word	0x00000eb7
     c9c:	00000eb7 	.word	0x00000eb7
     ca0:	00000eb7 	.word	0x00000eb7
     ca4:	00000eb7 	.word	0x00000eb7
     ca8:	00000eb7 	.word	0x00000eb7
     cac:	00000eb7 	.word	0x00000eb7
     cb0:	00000eb7 	.word	0x00000eb7
     cb4:	00000ea9 	.word	0x00000ea9
     cb8:	00000eb7 	.word	0x00000eb7
     cbc:	00000eb7 	.word	0x00000eb7
     cc0:	00000eb7 	.word	0x00000eb7
     cc4:	00000eb7 	.word	0x00000eb7
     cc8:	00000eb7 	.word	0x00000eb7
     ccc:	00000eb7 	.word	0x00000eb7
     cd0:	00000eb7 	.word	0x00000eb7
     cd4:	00000e61 	.word	0x00000e61
     cd8:	00000eb7 	.word	0x00000eb7
     cdc:	00000eb7 	.word	0x00000eb7
     ce0:	00000eb7 	.word	0x00000eb7
     ce4:	00000eb7 	.word	0x00000eb7
     ce8:	00000eb7 	.word	0x00000eb7
     cec:	00000eb7 	.word	0x00000eb7
     cf0:	00000eb7 	.word	0x00000eb7
     cf4:	00000e61 	.word	0x00000e61
		case 0x08: /* A Start condition is issued. */
			LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
     cf8:	4952      	ldr	r1, [pc, #328]	; (e44 <I2C0_IRQHandler+0x2ac>)
     cfa:	4b53      	ldr	r3, [pc, #332]	; (e48 <I2C0_IRQHandler+0x2b0>)
     cfc:	681b      	ldr	r3, [r3, #0]
     cfe:	1c5a      	adds	r2, r3, #1
     d00:	4851      	ldr	r0, [pc, #324]	; (e48 <I2C0_IRQHandler+0x2b0>)
     d02:	6002      	str	r2, [r0, #0]
     d04:	4a51      	ldr	r2, [pc, #324]	; (e4c <I2C0_IRQHandler+0x2b4>)
     d06:	5cd3      	ldrb	r3, [r2, r3]
     d08:	b2db      	uxtb	r3, r3
     d0a:	608b      	str	r3, [r1, #8]
			LPC_I2C0->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
     d0c:	4b4d      	ldr	r3, [pc, #308]	; (e44 <I2C0_IRQHandler+0x2ac>)
     d0e:	2228      	movs	r2, #40	; 0x28
     d10:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = I2C_STARTED;
     d12:	4b4f      	ldr	r3, [pc, #316]	; (e50 <I2C0_IRQHandler+0x2b8>)
     d14:	2201      	movs	r2, #1
     d16:	601a      	str	r2, [r3, #0]
			break;
     d18:	e0d1      	b.n	ebe <I2C0_IRQHandler+0x326>
		case 0x10: /* A repeated started is issued */
			if (!I2C0_Cmd) {
     d1a:	4b4e      	ldr	r3, [pc, #312]	; (e54 <I2C0_IRQHandler+0x2bc>)
     d1c:	681b      	ldr	r3, [r3, #0]
     d1e:	2b00      	cmp	r3, #0
     d20:	d109      	bne.n	d36 <I2C0_IRQHandler+0x19e>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
     d22:	4948      	ldr	r1, [pc, #288]	; (e44 <I2C0_IRQHandler+0x2ac>)
     d24:	4b48      	ldr	r3, [pc, #288]	; (e48 <I2C0_IRQHandler+0x2b0>)
     d26:	681b      	ldr	r3, [r3, #0]
     d28:	1c5a      	adds	r2, r3, #1
     d2a:	4847      	ldr	r0, [pc, #284]	; (e48 <I2C0_IRQHandler+0x2b0>)
     d2c:	6002      	str	r2, [r0, #0]
     d2e:	4a47      	ldr	r2, [pc, #284]	; (e4c <I2C0_IRQHandler+0x2b4>)
     d30:	5cd3      	ldrb	r3, [r2, r3]
     d32:	b2db      	uxtb	r3, r3
     d34:	608b      	str	r3, [r1, #8]
			}
			LPC_I2C0->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
     d36:	4b43      	ldr	r3, [pc, #268]	; (e44 <I2C0_IRQHandler+0x2ac>)
     d38:	2228      	movs	r2, #40	; 0x28
     d3a:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = I2C_RESTARTED;
     d3c:	4b44      	ldr	r3, [pc, #272]	; (e50 <I2C0_IRQHandler+0x2b8>)
     d3e:	2202      	movs	r2, #2
     d40:	601a      	str	r2, [r3, #0]
			break;
     d42:	e0bc      	b.n	ebe <I2C0_IRQHandler+0x326>
		case 0x18: /* Regardless, it's a ACK */
			if (I2C0_MasterState == I2C_STARTED) {
     d44:	4b42      	ldr	r3, [pc, #264]	; (e50 <I2C0_IRQHandler+0x2b8>)
     d46:	681b      	ldr	r3, [r3, #0]
     d48:	2b01      	cmp	r3, #1
     d4a:	d10c      	bne.n	d66 <I2C0_IRQHandler+0x1ce>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
     d4c:	493d      	ldr	r1, [pc, #244]	; (e44 <I2C0_IRQHandler+0x2ac>)
     d4e:	4b3e      	ldr	r3, [pc, #248]	; (e48 <I2C0_IRQHandler+0x2b0>)
     d50:	681b      	ldr	r3, [r3, #0]
     d52:	1c5a      	adds	r2, r3, #1
     d54:	483c      	ldr	r0, [pc, #240]	; (e48 <I2C0_IRQHandler+0x2b0>)
     d56:	6002      	str	r2, [r0, #0]
     d58:	4a3c      	ldr	r2, [pc, #240]	; (e4c <I2C0_IRQHandler+0x2b4>)
     d5a:	5cd3      	ldrb	r3, [r2, r3]
     d5c:	b2db      	uxtb	r3, r3
     d5e:	608b      	str	r3, [r1, #8]
				I2C0_MasterState = DATA_ACK;
     d60:	4b3b      	ldr	r3, [pc, #236]	; (e50 <I2C0_IRQHandler+0x2b8>)
     d62:	2204      	movs	r2, #4
     d64:	601a      	str	r2, [r3, #0]
			}
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
     d66:	4b37      	ldr	r3, [pc, #220]	; (e44 <I2C0_IRQHandler+0x2ac>)
     d68:	2208      	movs	r2, #8
     d6a:	619a      	str	r2, [r3, #24]
			break;
     d6c:	e0a7      	b.n	ebe <I2C0_IRQHandler+0x326>
		case 0x28: /* Data byte has been transmitted, regardless ACK or NACK */
			 if ( WrIndex_0 < I2C0_WriteLength )
     d6e:	4b36      	ldr	r3, [pc, #216]	; (e48 <I2C0_IRQHandler+0x2b0>)
     d70:	681a      	ldr	r2, [r3, #0]
     d72:	4b39      	ldr	r3, [pc, #228]	; (e58 <I2C0_IRQHandler+0x2c0>)
     d74:	681b      	ldr	r3, [r3, #0]
     d76:	429a      	cmp	r2, r3
     d78:	d20a      	bcs.n	d90 <I2C0_IRQHandler+0x1f8>
				{
				  LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++]; /* this should be the last one */
     d7a:	4932      	ldr	r1, [pc, #200]	; (e44 <I2C0_IRQHandler+0x2ac>)
     d7c:	4b32      	ldr	r3, [pc, #200]	; (e48 <I2C0_IRQHandler+0x2b0>)
     d7e:	681b      	ldr	r3, [r3, #0]
     d80:	1c5a      	adds	r2, r3, #1
     d82:	4831      	ldr	r0, [pc, #196]	; (e48 <I2C0_IRQHandler+0x2b0>)
     d84:	6002      	str	r2, [r0, #0]
     d86:	4a31      	ldr	r2, [pc, #196]	; (e4c <I2C0_IRQHandler+0x2b4>)
     d88:	5cd3      	ldrb	r3, [r2, r3]
     d8a:	b2db      	uxtb	r3, r3
     d8c:	608b      	str	r3, [r1, #8]
     d8e:	e00d      	b.n	dac <I2C0_IRQHandler+0x214>
				}
				else
				{
				  if ( I2C0_ReadLength != 0 )
     d90:	4b32      	ldr	r3, [pc, #200]	; (e5c <I2C0_IRQHandler+0x2c4>)
     d92:	681b      	ldr	r3, [r3, #0]
     d94:	2b00      	cmp	r3, #0
     d96:	d003      	beq.n	da0 <I2C0_IRQHandler+0x208>
				  {
						LPC_I2C0->I2CONSET = I2CONSET_STA;   /* Set Repeated-start flag */
     d98:	4b2a      	ldr	r3, [pc, #168]	; (e44 <I2C0_IRQHandler+0x2ac>)
     d9a:	2220      	movs	r2, #32
     d9c:	601a      	str	r2, [r3, #0]
     d9e:	e005      	b.n	dac <I2C0_IRQHandler+0x214>
				  }
				  else
				  {
						LPC_I2C0->I2CONSET = I2CONSET_STO;      /* Set Stop flag */
     da0:	4b28      	ldr	r3, [pc, #160]	; (e44 <I2C0_IRQHandler+0x2ac>)
     da2:	2210      	movs	r2, #16
     da4:	601a      	str	r2, [r3, #0]
						I2C0_MasterState = I2C_IDLE;
     da6:	4b2a      	ldr	r3, [pc, #168]	; (e50 <I2C0_IRQHandler+0x2b8>)
     da8:	2200      	movs	r2, #0
     daa:	601a      	str	r2, [r3, #0]
				  }
				}
				LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
     dac:	4b25      	ldr	r3, [pc, #148]	; (e44 <I2C0_IRQHandler+0x2ac>)
     dae:	2208      	movs	r2, #8
     db0:	619a      	str	r2, [r3, #24]
				break;
     db2:	e084      	b.n	ebe <I2C0_IRQHandler+0x326>
		case 0x30:
			if (WrIndex_0 != I2C0_WriteLength) {
     db4:	4b24      	ldr	r3, [pc, #144]	; (e48 <I2C0_IRQHandler+0x2b0>)
     db6:	681a      	ldr	r2, [r3, #0]
     db8:	4b27      	ldr	r3, [pc, #156]	; (e58 <I2C0_IRQHandler+0x2c0>)
     dba:	681b      	ldr	r3, [r3, #0]
     dbc:	429a      	cmp	r2, r3
     dbe:	d024      	beq.n	e0a <I2C0_IRQHandler+0x272>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[1 + WrIndex_0]; /* this should be the last one */
     dc0:	4a20      	ldr	r2, [pc, #128]	; (e44 <I2C0_IRQHandler+0x2ac>)
     dc2:	4b21      	ldr	r3, [pc, #132]	; (e48 <I2C0_IRQHandler+0x2b0>)
     dc4:	681b      	ldr	r3, [r3, #0]
     dc6:	3301      	adds	r3, #1
     dc8:	4920      	ldr	r1, [pc, #128]	; (e4c <I2C0_IRQHandler+0x2b4>)
     dca:	5ccb      	ldrb	r3, [r1, r3]
     dcc:	b2db      	uxtb	r3, r3
     dce:	6093      	str	r3, [r2, #8]
				WrIndex_0++;
     dd0:	4b1d      	ldr	r3, [pc, #116]	; (e48 <I2C0_IRQHandler+0x2b0>)
     dd2:	681b      	ldr	r3, [r3, #0]
     dd4:	3301      	adds	r3, #1
     dd6:	4a1c      	ldr	r2, [pc, #112]	; (e48 <I2C0_IRQHandler+0x2b0>)
     dd8:	6013      	str	r3, [r2, #0]
				if (WrIndex_0 != I2C0_WriteLength) {
     dda:	4b1b      	ldr	r3, [pc, #108]	; (e48 <I2C0_IRQHandler+0x2b0>)
     ddc:	681a      	ldr	r2, [r3, #0]
     dde:	4b1e      	ldr	r3, [pc, #120]	; (e58 <I2C0_IRQHandler+0x2c0>)
     de0:	681b      	ldr	r3, [r3, #0]
     de2:	429a      	cmp	r2, r3
     de4:	d003      	beq.n	dee <I2C0_IRQHandler+0x256>
					I2C0_MasterState = DATA_ACK;
     de6:	4b1a      	ldr	r3, [pc, #104]	; (e50 <I2C0_IRQHandler+0x2b8>)
     de8:	2204      	movs	r2, #4
     dea:	601a      	str	r2, [r3, #0]
     dec:	e01e      	b.n	e2c <I2C0_IRQHandler+0x294>
				} else {
					I2C0_MasterState = DATA_NACK;
     dee:	4b18      	ldr	r3, [pc, #96]	; (e50 <I2C0_IRQHandler+0x2b8>)
     df0:	2205      	movs	r2, #5
     df2:	601a      	str	r2, [r3, #0]
					if (I2C0_ReadLength != 0) {
     df4:	4b19      	ldr	r3, [pc, #100]	; (e5c <I2C0_IRQHandler+0x2c4>)
     df6:	681b      	ldr	r3, [r3, #0]
     df8:	2b00      	cmp	r3, #0
     dfa:	d017      	beq.n	e2c <I2C0_IRQHandler+0x294>
						LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
     dfc:	4b11      	ldr	r3, [pc, #68]	; (e44 <I2C0_IRQHandler+0x2ac>)
     dfe:	2220      	movs	r2, #32
     e00:	601a      	str	r2, [r3, #0]
						I2C0_MasterState = I2C_REPEATED_START;
     e02:	4b13      	ldr	r3, [pc, #76]	; (e50 <I2C0_IRQHandler+0x2b8>)
     e04:	2203      	movs	r2, #3
     e06:	601a      	str	r2, [r3, #0]
     e08:	e010      	b.n	e2c <I2C0_IRQHandler+0x294>
					}
				}
			} else {
				if (I2C0_ReadLength != 0) {
     e0a:	4b14      	ldr	r3, [pc, #80]	; (e5c <I2C0_IRQHandler+0x2c4>)
     e0c:	681b      	ldr	r3, [r3, #0]
     e0e:	2b00      	cmp	r3, #0
     e10:	d006      	beq.n	e20 <I2C0_IRQHandler+0x288>
					LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
     e12:	4b0c      	ldr	r3, [pc, #48]	; (e44 <I2C0_IRQHandler+0x2ac>)
     e14:	2220      	movs	r2, #32
     e16:	601a      	str	r2, [r3, #0]
					I2C0_MasterState = I2C_REPEATED_START;
     e18:	4b0d      	ldr	r3, [pc, #52]	; (e50 <I2C0_IRQHandler+0x2b8>)
     e1a:	2203      	movs	r2, #3
     e1c:	601a      	str	r2, [r3, #0]
     e1e:	e005      	b.n	e2c <I2C0_IRQHandler+0x294>
				} else {
					I2C0_MasterState = DATA_NACK;
     e20:	4b0b      	ldr	r3, [pc, #44]	; (e50 <I2C0_IRQHandler+0x2b8>)
     e22:	2205      	movs	r2, #5
     e24:	601a      	str	r2, [r3, #0]
					LPC_I2C0->I2CONSET = I2CONSET_STO; /* Set Stop flag */
     e26:	4b07      	ldr	r3, [pc, #28]	; (e44 <I2C0_IRQHandler+0x2ac>)
     e28:	2210      	movs	r2, #16
     e2a:	601a      	str	r2, [r3, #0]
				}
			}
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
     e2c:	4b05      	ldr	r3, [pc, #20]	; (e44 <I2C0_IRQHandler+0x2ac>)
     e2e:	2208      	movs	r2, #8
     e30:	619a      	str	r2, [r3, #24]
			break;
     e32:	e044      	b.n	ebe <I2C0_IRQHandler+0x326>
		case 0x40: /* Master Receive, SLA_R has been sent */
			LPC_I2C0->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
     e34:	4b03      	ldr	r3, [pc, #12]	; (e44 <I2C0_IRQHandler+0x2ac>)
     e36:	2204      	movs	r2, #4
     e38:	601a      	str	r2, [r3, #0]
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
     e3a:	4b02      	ldr	r3, [pc, #8]	; (e44 <I2C0_IRQHandler+0x2ac>)
     e3c:	2208      	movs	r2, #8
     e3e:	619a      	str	r2, [r3, #24]
			break;
     e40:	e03d      	b.n	ebe <I2C0_IRQHandler+0x326>
     e42:	bf00      	nop
     e44:	4001c000 	.word	0x4001c000
     e48:	10000034 	.word	0x10000034
     e4c:	10000cf8 	.word	0x10000cf8
     e50:	1000002c 	.word	0x1000002c
     e54:	10000df8 	.word	0x10000df8
     e58:	10000bf4 	.word	0x10000bf4
     e5c:	100009dc 	.word	0x100009dc
		case 0x50: /* Data byte has been received, regardless following ACK or NACK */
		case 0x58:
			I2C0_MasterBuffer[3 + RdIndex_0] = LPC_I2C0->I2DAT;
     e60:	4b19      	ldr	r3, [pc, #100]	; (ec8 <I2C0_IRQHandler+0x330>)
     e62:	681b      	ldr	r3, [r3, #0]
     e64:	3303      	adds	r3, #3
     e66:	4a19      	ldr	r2, [pc, #100]	; (ecc <I2C0_IRQHandler+0x334>)
     e68:	6892      	ldr	r2, [r2, #8]
     e6a:	b2d1      	uxtb	r1, r2
     e6c:	4a18      	ldr	r2, [pc, #96]	; (ed0 <I2C0_IRQHandler+0x338>)
     e6e:	54d1      	strb	r1, [r2, r3]
			RdIndex_0++;
     e70:	4b15      	ldr	r3, [pc, #84]	; (ec8 <I2C0_IRQHandler+0x330>)
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	3301      	adds	r3, #1
     e76:	4a14      	ldr	r2, [pc, #80]	; (ec8 <I2C0_IRQHandler+0x330>)
     e78:	6013      	str	r3, [r2, #0]
			if (RdIndex_0 != I2C0_ReadLength) {
     e7a:	4b13      	ldr	r3, [pc, #76]	; (ec8 <I2C0_IRQHandler+0x330>)
     e7c:	681a      	ldr	r2, [r3, #0]
     e7e:	4b15      	ldr	r3, [pc, #84]	; (ed4 <I2C0_IRQHandler+0x33c>)
     e80:	681b      	ldr	r3, [r3, #0]
     e82:	429a      	cmp	r2, r3
     e84:	d003      	beq.n	e8e <I2C0_IRQHandler+0x2f6>
				I2C0_MasterState = DATA_ACK;
     e86:	4b14      	ldr	r3, [pc, #80]	; (ed8 <I2C0_IRQHandler+0x340>)
     e88:	2204      	movs	r2, #4
     e8a:	601a      	str	r2, [r3, #0]
     e8c:	e005      	b.n	e9a <I2C0_IRQHandler+0x302>
			} else {
				RdIndex_0 = 0;
     e8e:	4b0e      	ldr	r3, [pc, #56]	; (ec8 <I2C0_IRQHandler+0x330>)
     e90:	2200      	movs	r2, #0
     e92:	601a      	str	r2, [r3, #0]
				I2C0_MasterState = DATA_NACK;
     e94:	4b10      	ldr	r3, [pc, #64]	; (ed8 <I2C0_IRQHandler+0x340>)
     e96:	2205      	movs	r2, #5
     e98:	601a      	str	r2, [r3, #0]
			}
			LPC_I2C0->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
     e9a:	4b0c      	ldr	r3, [pc, #48]	; (ecc <I2C0_IRQHandler+0x334>)
     e9c:	2204      	movs	r2, #4
     e9e:	601a      	str	r2, [r3, #0]
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
     ea0:	4b0a      	ldr	r3, [pc, #40]	; (ecc <I2C0_IRQHandler+0x334>)
     ea2:	2208      	movs	r2, #8
     ea4:	619a      	str	r2, [r3, #24]
			break;
     ea6:	e00a      	b.n	ebe <I2C0_IRQHandler+0x326>
		case 0x20: /* regardless, it's a NACK */
		case 0x48:
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
     ea8:	4b08      	ldr	r3, [pc, #32]	; (ecc <I2C0_IRQHandler+0x334>)
     eaa:	2208      	movs	r2, #8
     eac:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = DATA_NACK;
     eae:	4b0a      	ldr	r3, [pc, #40]	; (ed8 <I2C0_IRQHandler+0x340>)
     eb0:	2205      	movs	r2, #5
     eb2:	601a      	str	r2, [r3, #0]
			break;
     eb4:	e003      	b.n	ebe <I2C0_IRQHandler+0x326>
		case 0x38: /* Arbitration lost, in this example, we don't
		 deal with multiple master situation */
		default:
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
     eb6:	4b05      	ldr	r3, [pc, #20]	; (ecc <I2C0_IRQHandler+0x334>)
     eb8:	2208      	movs	r2, #8
     eba:	619a      	str	r2, [r3, #24]
			break;
     ebc:	bf00      	nop
	}
}
     ebe:	370c      	adds	r7, #12
     ec0:	46bd      	mov	sp, r7
     ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
     ec6:	4770      	bx	lr
     ec8:	10000030 	.word	0x10000030
     ecc:	4001c000 	.word	0x4001c000
     ed0:	10000cf8 	.word	0x10000cf8
     ed4:	100009dc 	.word	0x100009dc
     ed8:	1000002c 	.word	0x1000002c

00000edc <I2C1_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void I2C1_IRQHandler(void) {
     edc:	b480      	push	{r7}
     ede:	b083      	sub	sp, #12
     ee0:	af00      	add	r7, sp, #0
	uint8_t StatValue;
	/* this handler deals with master read and master write only */
	StatValue = LPC_I2C1->I2STAT;
     ee2:	4bae      	ldr	r3, [pc, #696]	; (119c <I2C1_IRQHandler+0x2c0>)
     ee4:	685b      	ldr	r3, [r3, #4]
     ee6:	71fb      	strb	r3, [r7, #7]
	switch (StatValue) {
     ee8:	79fb      	ldrb	r3, [r7, #7]
     eea:	3b08      	subs	r3, #8
     eec:	2b50      	cmp	r3, #80	; 0x50
     eee:	f200 814b 	bhi.w	1188 <I2C1_IRQHandler+0x2ac>
     ef2:	a201      	add	r2, pc, #4	; (adr r2, ef8 <I2C1_IRQHandler+0x1c>)
     ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     ef8:	0000103d 	.word	0x0000103d
     efc:	00001189 	.word	0x00001189
     f00:	00001189 	.word	0x00001189
     f04:	00001189 	.word	0x00001189
     f08:	00001189 	.word	0x00001189
     f0c:	00001189 	.word	0x00001189
     f10:	00001189 	.word	0x00001189
     f14:	00001189 	.word	0x00001189
     f18:	00001055 	.word	0x00001055
     f1c:	00001189 	.word	0x00001189
     f20:	00001189 	.word	0x00001189
     f24:	00001189 	.word	0x00001189
     f28:	00001189 	.word	0x00001189
     f2c:	00001189 	.word	0x00001189
     f30:	00001189 	.word	0x00001189
     f34:	00001189 	.word	0x00001189
     f38:	00001075 	.word	0x00001075
     f3c:	00001189 	.word	0x00001189
     f40:	00001189 	.word	0x00001189
     f44:	00001189 	.word	0x00001189
     f48:	00001189 	.word	0x00001189
     f4c:	00001189 	.word	0x00001189
     f50:	00001189 	.word	0x00001189
     f54:	00001189 	.word	0x00001189
     f58:	0000117b 	.word	0x0000117b
     f5c:	00001189 	.word	0x00001189
     f60:	00001189 	.word	0x00001189
     f64:	00001189 	.word	0x00001189
     f68:	00001189 	.word	0x00001189
     f6c:	00001189 	.word	0x00001189
     f70:	00001189 	.word	0x00001189
     f74:	00001189 	.word	0x00001189
     f78:	000010a5 	.word	0x000010a5
     f7c:	00001189 	.word	0x00001189
     f80:	00001189 	.word	0x00001189
     f84:	00001189 	.word	0x00001189
     f88:	00001189 	.word	0x00001189
     f8c:	00001189 	.word	0x00001189
     f90:	00001189 	.word	0x00001189
     f94:	00001189 	.word	0x00001189
     f98:	000010a5 	.word	0x000010a5
     f9c:	00001189 	.word	0x00001189
     fa0:	00001189 	.word	0x00001189
     fa4:	00001189 	.word	0x00001189
     fa8:	00001189 	.word	0x00001189
     fac:	00001189 	.word	0x00001189
     fb0:	00001189 	.word	0x00001189
     fb4:	00001189 	.word	0x00001189
     fb8:	00001189 	.word	0x00001189
     fbc:	00001189 	.word	0x00001189
     fc0:	00001189 	.word	0x00001189
     fc4:	00001189 	.word	0x00001189
     fc8:	00001189 	.word	0x00001189
     fcc:	00001189 	.word	0x00001189
     fd0:	00001189 	.word	0x00001189
     fd4:	00001189 	.word	0x00001189
     fd8:	00001125 	.word	0x00001125
     fdc:	00001189 	.word	0x00001189
     fe0:	00001189 	.word	0x00001189
     fe4:	00001189 	.word	0x00001189
     fe8:	00001189 	.word	0x00001189
     fec:	00001189 	.word	0x00001189
     ff0:	00001189 	.word	0x00001189
     ff4:	00001189 	.word	0x00001189
     ff8:	0000117b 	.word	0x0000117b
     ffc:	00001189 	.word	0x00001189
    1000:	00001189 	.word	0x00001189
    1004:	00001189 	.word	0x00001189
    1008:	00001189 	.word	0x00001189
    100c:	00001189 	.word	0x00001189
    1010:	00001189 	.word	0x00001189
    1014:	00001189 	.word	0x00001189
    1018:	00001133 	.word	0x00001133
    101c:	00001189 	.word	0x00001189
    1020:	00001189 	.word	0x00001189
    1024:	00001189 	.word	0x00001189
    1028:	00001189 	.word	0x00001189
    102c:	00001189 	.word	0x00001189
    1030:	00001189 	.word	0x00001189
    1034:	00001189 	.word	0x00001189
    1038:	00001133 	.word	0x00001133
	case 0x08: /* A Start condition is issued. */
		LPC_I2C1->I2DAT = I2C1_MasterBuffer[0];
    103c:	4b57      	ldr	r3, [pc, #348]	; (119c <I2C1_IRQHandler+0x2c0>)
    103e:	4a58      	ldr	r2, [pc, #352]	; (11a0 <I2C1_IRQHandler+0x2c4>)
    1040:	7812      	ldrb	r2, [r2, #0]
    1042:	b2d2      	uxtb	r2, r2
    1044:	609a      	str	r2, [r3, #8]
		LPC_I2C1->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    1046:	4b55      	ldr	r3, [pc, #340]	; (119c <I2C1_IRQHandler+0x2c0>)
    1048:	2228      	movs	r2, #40	; 0x28
    104a:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = I2C_STARTED;
    104c:	4b55      	ldr	r3, [pc, #340]	; (11a4 <I2C1_IRQHandler+0x2c8>)
    104e:	2201      	movs	r2, #1
    1050:	601a      	str	r2, [r3, #0]
		break;
    1052:	e09d      	b.n	1190 <I2C1_IRQHandler+0x2b4>
	case 0x10: /* A repeated started is issued */
		if (!I2C1_Cmd) {
    1054:	4b54      	ldr	r3, [pc, #336]	; (11a8 <I2C1_IRQHandler+0x2cc>)
    1056:	681b      	ldr	r3, [r3, #0]
    1058:	2b00      	cmp	r3, #0
    105a:	d104      	bne.n	1066 <I2C1_IRQHandler+0x18a>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[2];
    105c:	4b4f      	ldr	r3, [pc, #316]	; (119c <I2C1_IRQHandler+0x2c0>)
    105e:	4a50      	ldr	r2, [pc, #320]	; (11a0 <I2C1_IRQHandler+0x2c4>)
    1060:	7892      	ldrb	r2, [r2, #2]
    1062:	b2d2      	uxtb	r2, r2
    1064:	609a      	str	r2, [r3, #8]
		}
		LPC_I2C1->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    1066:	4b4d      	ldr	r3, [pc, #308]	; (119c <I2C1_IRQHandler+0x2c0>)
    1068:	2228      	movs	r2, #40	; 0x28
    106a:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = I2C_RESTARTED;
    106c:	4b4d      	ldr	r3, [pc, #308]	; (11a4 <I2C1_IRQHandler+0x2c8>)
    106e:	2202      	movs	r2, #2
    1070:	601a      	str	r2, [r3, #0]
		break;
    1072:	e08d      	b.n	1190 <I2C1_IRQHandler+0x2b4>
	case 0x18: /* Regardless, it's a ACK */
		if (I2C1_MasterState == I2C_STARTED) {
    1074:	4b4b      	ldr	r3, [pc, #300]	; (11a4 <I2C1_IRQHandler+0x2c8>)
    1076:	681b      	ldr	r3, [r3, #0]
    1078:	2b01      	cmp	r3, #1
    107a:	d10f      	bne.n	109c <I2C1_IRQHandler+0x1c0>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[1 + WrIndex_1];
    107c:	4a47      	ldr	r2, [pc, #284]	; (119c <I2C1_IRQHandler+0x2c0>)
    107e:	4b4b      	ldr	r3, [pc, #300]	; (11ac <I2C1_IRQHandler+0x2d0>)
    1080:	681b      	ldr	r3, [r3, #0]
    1082:	3301      	adds	r3, #1
    1084:	4946      	ldr	r1, [pc, #280]	; (11a0 <I2C1_IRQHandler+0x2c4>)
    1086:	5ccb      	ldrb	r3, [r1, r3]
    1088:	b2db      	uxtb	r3, r3
    108a:	6093      	str	r3, [r2, #8]
			WrIndex_1++;
    108c:	4b47      	ldr	r3, [pc, #284]	; (11ac <I2C1_IRQHandler+0x2d0>)
    108e:	681b      	ldr	r3, [r3, #0]
    1090:	3301      	adds	r3, #1
    1092:	4a46      	ldr	r2, [pc, #280]	; (11ac <I2C1_IRQHandler+0x2d0>)
    1094:	6013      	str	r3, [r2, #0]
			I2C1_MasterState = DATA_ACK;
    1096:	4b43      	ldr	r3, [pc, #268]	; (11a4 <I2C1_IRQHandler+0x2c8>)
    1098:	2204      	movs	r2, #4
    109a:	601a      	str	r2, [r3, #0]
		}
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    109c:	4b3f      	ldr	r3, [pc, #252]	; (119c <I2C1_IRQHandler+0x2c0>)
    109e:	2208      	movs	r2, #8
    10a0:	619a      	str	r2, [r3, #24]
		break;
    10a2:	e075      	b.n	1190 <I2C1_IRQHandler+0x2b4>
	case 0x28: /* Data byte has been transmitted, regardless ACK or NACK */
	case 0x30:
		if (WrIndex_1 != I2C1_WriteLength) {
    10a4:	4b41      	ldr	r3, [pc, #260]	; (11ac <I2C1_IRQHandler+0x2d0>)
    10a6:	681a      	ldr	r2, [r3, #0]
    10a8:	4b41      	ldr	r3, [pc, #260]	; (11b0 <I2C1_IRQHandler+0x2d4>)
    10aa:	681b      	ldr	r3, [r3, #0]
    10ac:	429a      	cmp	r2, r3
    10ae:	d024      	beq.n	10fa <I2C1_IRQHandler+0x21e>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[1 + WrIndex_1]; /* this should be the last one */
    10b0:	4a3a      	ldr	r2, [pc, #232]	; (119c <I2C1_IRQHandler+0x2c0>)
    10b2:	4b3e      	ldr	r3, [pc, #248]	; (11ac <I2C1_IRQHandler+0x2d0>)
    10b4:	681b      	ldr	r3, [r3, #0]
    10b6:	3301      	adds	r3, #1
    10b8:	4939      	ldr	r1, [pc, #228]	; (11a0 <I2C1_IRQHandler+0x2c4>)
    10ba:	5ccb      	ldrb	r3, [r1, r3]
    10bc:	b2db      	uxtb	r3, r3
    10be:	6093      	str	r3, [r2, #8]
			WrIndex_1++;
    10c0:	4b3a      	ldr	r3, [pc, #232]	; (11ac <I2C1_IRQHandler+0x2d0>)
    10c2:	681b      	ldr	r3, [r3, #0]
    10c4:	3301      	adds	r3, #1
    10c6:	4a39      	ldr	r2, [pc, #228]	; (11ac <I2C1_IRQHandler+0x2d0>)
    10c8:	6013      	str	r3, [r2, #0]
			if (WrIndex_1 != I2C1_WriteLength) {
    10ca:	4b38      	ldr	r3, [pc, #224]	; (11ac <I2C1_IRQHandler+0x2d0>)
    10cc:	681a      	ldr	r2, [r3, #0]
    10ce:	4b38      	ldr	r3, [pc, #224]	; (11b0 <I2C1_IRQHandler+0x2d4>)
    10d0:	681b      	ldr	r3, [r3, #0]
    10d2:	429a      	cmp	r2, r3
    10d4:	d003      	beq.n	10de <I2C1_IRQHandler+0x202>
				I2C1_MasterState = DATA_ACK;
    10d6:	4b33      	ldr	r3, [pc, #204]	; (11a4 <I2C1_IRQHandler+0x2c8>)
    10d8:	2204      	movs	r2, #4
    10da:	601a      	str	r2, [r3, #0]
    10dc:	e01e      	b.n	111c <I2C1_IRQHandler+0x240>
			} else {
				I2C1_MasterState = DATA_NACK;
    10de:	4b31      	ldr	r3, [pc, #196]	; (11a4 <I2C1_IRQHandler+0x2c8>)
    10e0:	2205      	movs	r2, #5
    10e2:	601a      	str	r2, [r3, #0]
				if (I2C1_ReadLength != 0) {
    10e4:	4b33      	ldr	r3, [pc, #204]	; (11b4 <I2C1_IRQHandler+0x2d8>)
    10e6:	681b      	ldr	r3, [r3, #0]
    10e8:	2b00      	cmp	r3, #0
    10ea:	d017      	beq.n	111c <I2C1_IRQHandler+0x240>
					LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    10ec:	4b2b      	ldr	r3, [pc, #172]	; (119c <I2C1_IRQHandler+0x2c0>)
    10ee:	2220      	movs	r2, #32
    10f0:	601a      	str	r2, [r3, #0]
					I2C1_MasterState = I2C_REPEATED_START;
    10f2:	4b2c      	ldr	r3, [pc, #176]	; (11a4 <I2C1_IRQHandler+0x2c8>)
    10f4:	2203      	movs	r2, #3
    10f6:	601a      	str	r2, [r3, #0]
    10f8:	e010      	b.n	111c <I2C1_IRQHandler+0x240>
				}
			}
		} else {
			if (I2C1_ReadLength != 0) {
    10fa:	4b2e      	ldr	r3, [pc, #184]	; (11b4 <I2C1_IRQHandler+0x2d8>)
    10fc:	681b      	ldr	r3, [r3, #0]
    10fe:	2b00      	cmp	r3, #0
    1100:	d006      	beq.n	1110 <I2C1_IRQHandler+0x234>
				LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    1102:	4b26      	ldr	r3, [pc, #152]	; (119c <I2C1_IRQHandler+0x2c0>)
    1104:	2220      	movs	r2, #32
    1106:	601a      	str	r2, [r3, #0]
				I2C1_MasterState = I2C_REPEATED_START;
    1108:	4b26      	ldr	r3, [pc, #152]	; (11a4 <I2C1_IRQHandler+0x2c8>)
    110a:	2203      	movs	r2, #3
    110c:	601a      	str	r2, [r3, #0]
    110e:	e005      	b.n	111c <I2C1_IRQHandler+0x240>
			} else {
				I2C1_MasterState = DATA_NACK;
    1110:	4b24      	ldr	r3, [pc, #144]	; (11a4 <I2C1_IRQHandler+0x2c8>)
    1112:	2205      	movs	r2, #5
    1114:	601a      	str	r2, [r3, #0]
				LPC_I2C1->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    1116:	4b21      	ldr	r3, [pc, #132]	; (119c <I2C1_IRQHandler+0x2c0>)
    1118:	2210      	movs	r2, #16
    111a:	601a      	str	r2, [r3, #0]
			}
		}
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    111c:	4b1f      	ldr	r3, [pc, #124]	; (119c <I2C1_IRQHandler+0x2c0>)
    111e:	2208      	movs	r2, #8
    1120:	619a      	str	r2, [r3, #24]
		break;
    1122:	e035      	b.n	1190 <I2C1_IRQHandler+0x2b4>
	case 0x40: /* Master Receive, SLA_R has been sent */
		LPC_I2C1->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    1124:	4b1d      	ldr	r3, [pc, #116]	; (119c <I2C1_IRQHandler+0x2c0>)
    1126:	2204      	movs	r2, #4
    1128:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    112a:	4b1c      	ldr	r3, [pc, #112]	; (119c <I2C1_IRQHandler+0x2c0>)
    112c:	2208      	movs	r2, #8
    112e:	619a      	str	r2, [r3, #24]
		break;
    1130:	e02e      	b.n	1190 <I2C1_IRQHandler+0x2b4>
	case 0x50: /* Data byte has been received, regardless following ACK or NACK */
	case 0x58:
		I2C1_MasterBuffer[3 + RdIndex_1] = LPC_I2C1->I2DAT;
    1132:	4b21      	ldr	r3, [pc, #132]	; (11b8 <I2C1_IRQHandler+0x2dc>)
    1134:	681b      	ldr	r3, [r3, #0]
    1136:	3303      	adds	r3, #3
    1138:	4a18      	ldr	r2, [pc, #96]	; (119c <I2C1_IRQHandler+0x2c0>)
    113a:	6892      	ldr	r2, [r2, #8]
    113c:	b2d1      	uxtb	r1, r2
    113e:	4a18      	ldr	r2, [pc, #96]	; (11a0 <I2C1_IRQHandler+0x2c4>)
    1140:	54d1      	strb	r1, [r2, r3]
		RdIndex_1++;
    1142:	4b1d      	ldr	r3, [pc, #116]	; (11b8 <I2C1_IRQHandler+0x2dc>)
    1144:	681b      	ldr	r3, [r3, #0]
    1146:	3301      	adds	r3, #1
    1148:	4a1b      	ldr	r2, [pc, #108]	; (11b8 <I2C1_IRQHandler+0x2dc>)
    114a:	6013      	str	r3, [r2, #0]
		if (RdIndex_1 != I2C1_ReadLength) {
    114c:	4b1a      	ldr	r3, [pc, #104]	; (11b8 <I2C1_IRQHandler+0x2dc>)
    114e:	681a      	ldr	r2, [r3, #0]
    1150:	4b18      	ldr	r3, [pc, #96]	; (11b4 <I2C1_IRQHandler+0x2d8>)
    1152:	681b      	ldr	r3, [r3, #0]
    1154:	429a      	cmp	r2, r3
    1156:	d003      	beq.n	1160 <I2C1_IRQHandler+0x284>
			I2C1_MasterState = DATA_ACK;
    1158:	4b12      	ldr	r3, [pc, #72]	; (11a4 <I2C1_IRQHandler+0x2c8>)
    115a:	2204      	movs	r2, #4
    115c:	601a      	str	r2, [r3, #0]
    115e:	e005      	b.n	116c <I2C1_IRQHandler+0x290>
		} else {
			RdIndex_1 = 0;
    1160:	4b15      	ldr	r3, [pc, #84]	; (11b8 <I2C1_IRQHandler+0x2dc>)
    1162:	2200      	movs	r2, #0
    1164:	601a      	str	r2, [r3, #0]
			I2C1_MasterState = DATA_NACK;
    1166:	4b0f      	ldr	r3, [pc, #60]	; (11a4 <I2C1_IRQHandler+0x2c8>)
    1168:	2205      	movs	r2, #5
    116a:	601a      	str	r2, [r3, #0]
		}
		LPC_I2C1->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    116c:	4b0b      	ldr	r3, [pc, #44]	; (119c <I2C1_IRQHandler+0x2c0>)
    116e:	2204      	movs	r2, #4
    1170:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    1172:	4b0a      	ldr	r3, [pc, #40]	; (119c <I2C1_IRQHandler+0x2c0>)
    1174:	2208      	movs	r2, #8
    1176:	619a      	str	r2, [r3, #24]
		break;
    1178:	e00a      	b.n	1190 <I2C1_IRQHandler+0x2b4>
	case 0x20: /* regardless, it's a NACK */
	case 0x48:
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    117a:	4b08      	ldr	r3, [pc, #32]	; (119c <I2C1_IRQHandler+0x2c0>)
    117c:	2208      	movs	r2, #8
    117e:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = DATA_NACK;
    1180:	4b08      	ldr	r3, [pc, #32]	; (11a4 <I2C1_IRQHandler+0x2c8>)
    1182:	2205      	movs	r2, #5
    1184:	601a      	str	r2, [r3, #0]
		break;
    1186:	e003      	b.n	1190 <I2C1_IRQHandler+0x2b4>
	case 0x38: /* Arbitration lost, in this example, we don't
	 deal with multiple master situation */
	default:
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    1188:	4b04      	ldr	r3, [pc, #16]	; (119c <I2C1_IRQHandler+0x2c0>)
    118a:	2208      	movs	r2, #8
    118c:	619a      	str	r2, [r3, #24]
		break;
    118e:	bf00      	nop
	}
}
    1190:	370c      	adds	r7, #12
    1192:	46bd      	mov	sp, r7
    1194:	f85d 7b04 	ldr.w	r7, [sp], #4
    1198:	4770      	bx	lr
    119a:	bf00      	nop
    119c:	4005c000 	.word	0x4005c000
    11a0:	10000bf8 	.word	0x10000bf8
    11a4:	10000af0 	.word	0x10000af0
    11a8:	10000aec 	.word	0x10000aec
    11ac:	10000dfc 	.word	0x10000dfc
    11b0:	100009cc 	.word	0x100009cc
    11b4:	100009e0 	.word	0x100009e0
    11b8:	100009d0 	.word	0x100009d0

000011bc <u32IAP_PrepareSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_PrepareSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
    11bc:	b580      	push	{r7, lr}
    11be:	b08e      	sub	sp, #56	; 0x38
    11c0:	af00      	add	r7, sp, #0
    11c2:	6078      	str	r0, [r7, #4]
    11c4:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    11c6:	683a      	ldr	r2, [r7, #0]
    11c8:	687b      	ldr	r3, [r7, #4]
    11ca:	429a      	cmp	r2, r3
    11cc:	d202      	bcs.n	11d4 <u32IAP_PrepareSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    11ce:	230c      	movs	r3, #12
    11d0:	637b      	str	r3, [r7, #52]	; 0x34
    11d2:	e00f      	b.n	11f4 <u32IAP_PrepareSectors+0x38>
	}
	else
	{
		au32Command[0] = IAP_CMD_PREPARE_SECTORS;
    11d4:	2332      	movs	r3, #50	; 0x32
    11d6:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
    11d8:	687b      	ldr	r3, [r7, #4]
    11da:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
    11dc:	683b      	ldr	r3, [r7, #0]
    11de:	617b      	str	r3, [r7, #20]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    11e0:	f107 010c 	add.w	r1, r7, #12
    11e4:	f107 0220 	add.w	r2, r7, #32
    11e8:	4b05      	ldr	r3, [pc, #20]	; (1200 <u32IAP_PrepareSectors+0x44>)
    11ea:	4608      	mov	r0, r1
    11ec:	4611      	mov	r1, r2
    11ee:	4798      	blx	r3

		u32Status = au32Result[0];
    11f0:	6a3b      	ldr	r3, [r7, #32]
    11f2:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
    11f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    11f6:	4618      	mov	r0, r3
    11f8:	3738      	adds	r7, #56	; 0x38
    11fa:	46bd      	mov	sp, r7
    11fc:	bd80      	pop	{r7, pc}
    11fe:	bf00      	nop
    1200:	1fff1ff1 	.word	0x1fff1ff1

00001204 <u32IAP_CopyRAMToFlash>:
*
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_CopyRAMToFlash(uint32_t u32DstAddr, uint32_t u32SrcAddr, uint32_t u32Len)
{
    1204:	b580      	push	{r7, lr}
    1206:	b08e      	sub	sp, #56	; 0x38
    1208:	af00      	add	r7, sp, #0
    120a:	60f8      	str	r0, [r7, #12]
    120c:	60b9      	str	r1, [r7, #8]
    120e:	607a      	str	r2, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1210:	b672      	cpsid	i
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	__disable_irq();
	au32Command[0] = IAP_CMD_COPY_RAM_TO_FLASH;
    1212:	2333      	movs	r3, #51	; 0x33
    1214:	613b      	str	r3, [r7, #16]
	au32Command[1] = u32DstAddr;
    1216:	68fb      	ldr	r3, [r7, #12]
    1218:	617b      	str	r3, [r7, #20]
	au32Command[2] = u32SrcAddr;
    121a:	68bb      	ldr	r3, [r7, #8]
    121c:	61bb      	str	r3, [r7, #24]
	au32Command[3] = u32Len;
    121e:	687b      	ldr	r3, [r7, #4]
    1220:	61fb      	str	r3, [r7, #28]
	au32Command[4] = SystemCoreClock / 1000UL;	/* Core clock frequency in kHz */
    1222:	4b0a      	ldr	r3, [pc, #40]	; (124c <u32IAP_CopyRAMToFlash+0x48>)
    1224:	681b      	ldr	r3, [r3, #0]
    1226:	4a0a      	ldr	r2, [pc, #40]	; (1250 <u32IAP_CopyRAMToFlash+0x4c>)
    1228:	fba2 2303 	umull	r2, r3, r2, r3
    122c:	099b      	lsrs	r3, r3, #6
    122e:	623b      	str	r3, [r7, #32]

	IAP_EXECUTE_CMD(au32Command, au32Result);
    1230:	f107 0110 	add.w	r1, r7, #16
    1234:	f107 0224 	add.w	r2, r7, #36	; 0x24
    1238:	4b06      	ldr	r3, [pc, #24]	; (1254 <u32IAP_CopyRAMToFlash+0x50>)
    123a:	4608      	mov	r0, r1
    123c:	4611      	mov	r1, r2
    123e:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1240:	b662      	cpsie	i

	__enable_irq();
	return ( au32Result[0] );
    1242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1244:	4618      	mov	r0, r3
    1246:	3738      	adds	r7, #56	; 0x38
    1248:	46bd      	mov	sp, r7
    124a:	bd80      	pop	{r7, pc}
    124c:	10000024 	.word	0x10000024
    1250:	10624dd3 	.word	0x10624dd3
    1254:	1fff1ff1 	.word	0x1fff1ff1

00001258 <u32IAP_EraseSectors>:
*
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_EraseSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
    1258:	b580      	push	{r7, lr}
    125a:	b08e      	sub	sp, #56	; 0x38
    125c:	af00      	add	r7, sp, #0
    125e:	6078      	str	r0, [r7, #4]
    1260:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1262:	683a      	ldr	r2, [r7, #0]
    1264:	687b      	ldr	r3, [r7, #4]
    1266:	429a      	cmp	r2, r3
    1268:	d202      	bcs.n	1270 <u32IAP_EraseSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    126a:	230c      	movs	r3, #12
    126c:	637b      	str	r3, [r7, #52]	; 0x34
    126e:	e018      	b.n	12a2 <u32IAP_EraseSectors+0x4a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1270:	b672      	cpsid	i
	}
	else
	{
		__disable_irq();
		au32Command[0] = IAP_CMD_ERASE_SECTORS;
    1272:	2334      	movs	r3, #52	; 0x34
    1274:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
    1276:	687b      	ldr	r3, [r7, #4]
    1278:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
    127a:	683b      	ldr	r3, [r7, #0]
    127c:	617b      	str	r3, [r7, #20]
		au32Command[3] = SystemCoreClock / 1000UL;	/* Core clock frequency in kHz */
    127e:	4b0b      	ldr	r3, [pc, #44]	; (12ac <u32IAP_EraseSectors+0x54>)
    1280:	681b      	ldr	r3, [r3, #0]
    1282:	4a0b      	ldr	r2, [pc, #44]	; (12b0 <u32IAP_EraseSectors+0x58>)
    1284:	fba2 2303 	umull	r2, r3, r2, r3
    1288:	099b      	lsrs	r3, r3, #6
    128a:	61bb      	str	r3, [r7, #24]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    128c:	f107 010c 	add.w	r1, r7, #12
    1290:	f107 0220 	add.w	r2, r7, #32
    1294:	4b07      	ldr	r3, [pc, #28]	; (12b4 <u32IAP_EraseSectors+0x5c>)
    1296:	4608      	mov	r0, r1
    1298:	4611      	mov	r1, r2
    129a:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    129c:	b662      	cpsie	i

		__enable_irq();
		u32Status = au32Result[0];
    129e:	6a3b      	ldr	r3, [r7, #32]
    12a0:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
    12a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    12a4:	4618      	mov	r0, r3
    12a6:	3738      	adds	r7, #56	; 0x38
    12a8:	46bd      	mov	sp, r7
    12aa:	bd80      	pop	{r7, pc}
    12ac:	10000024 	.word	0x10000024
    12b0:	10624dd3 	.word	0x10624dd3
    12b4:	1fff1ff1 	.word	0x1fff1ff1

000012b8 <u32IAP_BlankCheckSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_BlankCheckSectors(uint32_t u32StartSector, uint32_t u32EndSector, uint32_t *pu32Result)
{
    12b8:	b580      	push	{r7, lr}
    12ba:	b090      	sub	sp, #64	; 0x40
    12bc:	af00      	add	r7, sp, #0
    12be:	60f8      	str	r0, [r7, #12]
    12c0:	60b9      	str	r1, [r7, #8]
    12c2:	607a      	str	r2, [r7, #4]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    12c4:	68ba      	ldr	r2, [r7, #8]
    12c6:	68fb      	ldr	r3, [r7, #12]
    12c8:	429a      	cmp	r2, r3
    12ca:	d202      	bcs.n	12d2 <u32IAP_BlankCheckSectors+0x1a>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    12cc:	230c      	movs	r3, #12
    12ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    12d0:	e019      	b.n	1306 <u32IAP_BlankCheckSectors+0x4e>
	}
	else
	{
		au32Command[0] = IAP_CMD_BLANK_CHECK_SECTORS;
    12d2:	2335      	movs	r3, #53	; 0x35
    12d4:	617b      	str	r3, [r7, #20]
		au32Command[1] = u32StartSector;
    12d6:	68fb      	ldr	r3, [r7, #12]
    12d8:	61bb      	str	r3, [r7, #24]
		au32Command[2] = u32EndSector;
    12da:	68bb      	ldr	r3, [r7, #8]
    12dc:	61fb      	str	r3, [r7, #28]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    12de:	f107 0114 	add.w	r1, r7, #20
    12e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
    12e6:	4b0a      	ldr	r3, [pc, #40]	; (1310 <u32IAP_BlankCheckSectors+0x58>)
    12e8:	4608      	mov	r0, r1
    12ea:	4611      	mov	r1, r2
    12ec:	4798      	blx	r3

		if (au32Result[0] == IAP_STA_SECTOR_NOT_BLANK)
    12ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    12f0:	2b08      	cmp	r3, #8
    12f2:	d106      	bne.n	1302 <u32IAP_BlankCheckSectors+0x4a>
		{
			*pu32Result       = au32Result[0];
    12f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	601a      	str	r2, [r3, #0]
			*(pu32Result + 1) = au32Result[1];
    12fa:	687b      	ldr	r3, [r7, #4]
    12fc:	3304      	adds	r3, #4
    12fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1300:	601a      	str	r2, [r3, #0]
		}
		u32Status = au32Result[0];
    1302:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1304:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	return ( u32Status );
    1306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1308:	4618      	mov	r0, r3
    130a:	3740      	adds	r7, #64	; 0x40
    130c:	46bd      	mov	sp, r7
    130e:	bd80      	pop	{r7, pc}
    1310:	1fff1ff1 	.word	0x1fff1ff1

00001314 <u32IAP_Compare>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_Compare(uint32_t u32DstAddr, uint32_t u32SrcAddr, uint32_t u32Len, uint32_t *pu32Offset)
{
    1314:	b580      	push	{r7, lr}
    1316:	b08e      	sub	sp, #56	; 0x38
    1318:	af00      	add	r7, sp, #0
    131a:	60f8      	str	r0, [r7, #12]
    131c:	60b9      	str	r1, [r7, #8]
    131e:	607a      	str	r2, [r7, #4]
    1320:	603b      	str	r3, [r7, #0]
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	au32Command[0] = IAP_CMD_COMPARE;
    1322:	2338      	movs	r3, #56	; 0x38
    1324:	613b      	str	r3, [r7, #16]
	au32Command[1] = u32DstAddr;
    1326:	68fb      	ldr	r3, [r7, #12]
    1328:	617b      	str	r3, [r7, #20]
	au32Command[2] = u32SrcAddr;
    132a:	68bb      	ldr	r3, [r7, #8]
    132c:	61bb      	str	r3, [r7, #24]
	au32Command[3] = u32Len;
    132e:	687b      	ldr	r3, [r7, #4]
    1330:	61fb      	str	r3, [r7, #28]

	IAP_EXECUTE_CMD(au32Command, au32Result);
    1332:	f107 0110 	add.w	r1, r7, #16
    1336:	f107 0224 	add.w	r2, r7, #36	; 0x24
    133a:	4b09      	ldr	r3, [pc, #36]	; (1360 <u32IAP_Compare+0x4c>)
    133c:	4608      	mov	r0, r1
    133e:	4611      	mov	r1, r2
    1340:	4798      	blx	r3

	if (au32Result[0] == IAP_STA_COMPARE_ERROR)
    1342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1344:	2b0a      	cmp	r3, #10
    1346:	d105      	bne.n	1354 <u32IAP_Compare+0x40>
	{
		if (pu32Offset != 0)
    1348:	683b      	ldr	r3, [r7, #0]
    134a:	2b00      	cmp	r3, #0
    134c:	d002      	beq.n	1354 <u32IAP_Compare+0x40>
		{
			*pu32Offset = au32Result[1];
    134e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1350:	683b      	ldr	r3, [r7, #0]
    1352:	601a      	str	r2, [r3, #0]
		}
	}
	return ( au32Result[0] );
    1354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1356:	4618      	mov	r0, r3
    1358:	3738      	adds	r7, #56	; 0x38
    135a:	46bd      	mov	sp, r7
    135c:	bd80      	pop	{r7, pc}
    135e:	bf00      	nop
    1360:	1fff1ff1 	.word	0x1fff1ff1

00001364 <WriteImageSignature>:
**
** Returned value:	none
**
******************************************************************************/
void WriteImageSignature( uint32_t  size, uint32_t crc )
{
    1364:	b580      	push	{r7, lr}
    1366:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
    136a:	af00      	add	r7, sp, #0
    136c:	1d3b      	adds	r3, r7, #4
    136e:	6018      	str	r0, [r3, #0]
    1370:	463b      	mov	r3, r7
    1372:	6019      	str	r1, [r3, #0]

	char buffer[1024];
	uint32_t rc;
	int i;

	char* startAddr = (char *)(SECONDARY_IMAGE_END_ADDR - 1024);
    1374:	4b3d      	ldr	r3, [pc, #244]	; (146c <WriteImageSignature+0x108>)
    1376:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

	sprintf(buffer, "Writing signature: 0x%X   CRC : %X\r\n", size, crc);
    137a:	f107 010c 	add.w	r1, r7, #12
    137e:	1d3a      	adds	r2, r7, #4
    1380:	463b      	mov	r3, r7
    1382:	4608      	mov	r0, r1
    1384:	493a      	ldr	r1, [pc, #232]	; (1470 <WriteImageSignature+0x10c>)
    1386:	6812      	ldr	r2, [r2, #0]
    1388:	681b      	ldr	r3, [r3, #0]
    138a:	f001 fe93 	bl	30b4 <sprintf>
	Trace( buffer );
    138e:	f107 030c 	add.w	r3, r7, #12
    1392:	4618      	mov	r0, r3
    1394:	f000 fbba 	bl	1b0c <Trace>

	for( i = 0; i < 1024; i++ )
    1398:	2300      	movs	r3, #0
    139a:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
    139e:	e012      	b.n	13c6 <WriteImageSignature+0x62>
	{
		buffer[i++] = *startAddr++;
    13a0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
    13a4:	1c5a      	adds	r2, r3, #1
    13a6:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
    13aa:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    13ae:	1c51      	adds	r1, r2, #1
    13b0:	f8c7 1418 	str.w	r1, [r7, #1048]	; 0x418
    13b4:	7811      	ldrb	r1, [r2, #0]
    13b6:	f107 020c 	add.w	r2, r7, #12
    13ba:	54d1      	strb	r1, [r2, r3]
	char* startAddr = (char *)(SECONDARY_IMAGE_END_ADDR - 1024);

	sprintf(buffer, "Writing signature: 0x%X   CRC : %X\r\n", size, crc);
	Trace( buffer );

	for( i = 0; i < 1024; i++ )
    13bc:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
    13c0:	3301      	adds	r3, #1
    13c2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
    13c6:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
    13ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    13ce:	dbe7      	blt.n	13a0 <WriteImageSignature+0x3c>
	{
		buffer[i++] = *startAddr++;
	}

	uint32_t* ptrCRC  = (uint32_t*)&buffer[ 1024 - 4 ];
    13d0:	f107 030c 	add.w	r3, r7, #12
    13d4:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
    13d8:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	*ptrCRC		= crc;
    13dc:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
    13e0:	463a      	mov	r2, r7
    13e2:	6812      	ldr	r2, [r2, #0]
    13e4:	601a      	str	r2, [r3, #0]

	uint32_t* ptrSize = (uint32_t*)&buffer[ 1024 - 8 ];
    13e6:	f107 030c 	add.w	r3, r7, #12
    13ea:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
    13ee:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	*ptrSize	= size;
    13f2:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
    13f6:	1d3a      	adds	r2, r7, #4
    13f8:	6812      	ldr	r2, [r2, #0]
    13fa:	601a      	str	r2, [r3, #0]

	if (u32IAP_PrepareSectors(SECONDARY_IMAGE_END_SEC,
    13fc:	201b      	movs	r0, #27
    13fe:	211b      	movs	r1, #27
    1400:	f7ff fedc 	bl	11bc <u32IAP_PrepareSectors>
    1404:	4603      	mov	r3, r0
    1406:	2b00      	cmp	r3, #0
    1408:	d12b      	bne.n	1462 <WriteImageSignature+0xfe>
			SECONDARY_IMAGE_END_SEC) == IAP_STA_CMD_SUCCESS)
	{
		TraceNL("prepared ");
    140a:	481a      	ldr	r0, [pc, #104]	; (1474 <WriteImageSignature+0x110>)
    140c:	f000 fb8e 	bl	1b2c <TraceNL>
		u32IAP_EraseSectors( SECONDARY_IMAGE_END_SEC, SECONDARY_IMAGE_END_SEC );
    1410:	201b      	movs	r0, #27
    1412:	211b      	movs	r1, #27
    1414:	f7ff ff20 	bl	1258 <u32IAP_EraseSectors>
		TraceNL("Erased ");
    1418:	4817      	ldr	r0, [pc, #92]	; (1478 <WriteImageSignature+0x114>)
    141a:	f000 fb87 	bl	1b2c <TraceNL>

		u32IAP_PrepareSectors(SECONDARY_IMAGE_END_SEC,	SECONDARY_IMAGE_END_SEC);
    141e:	201b      	movs	r0, #27
    1420:	211b      	movs	r1, #27
    1422:	f7ff fecb 	bl	11bc <u32IAP_PrepareSectors>

		rc = u32IAP_CopyRAMToFlash((SECONDARY_IMAGE_END_ADDR - 1024), (uint32_t) buffer, 1024);
    1426:	f107 030c 	add.w	r3, r7, #12
    142a:	4810      	ldr	r0, [pc, #64]	; (146c <WriteImageSignature+0x108>)
    142c:	4619      	mov	r1, r3
    142e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1432:	f7ff fee7 	bl	1204 <u32IAP_CopyRAMToFlash>
    1436:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c

		sprintf(buffer, "Copy Ram result code : %d\r\n", rc);
    143a:	f107 030c 	add.w	r3, r7, #12
    143e:	4618      	mov	r0, r3
    1440:	490e      	ldr	r1, [pc, #56]	; (147c <WriteImageSignature+0x118>)
    1442:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
    1446:	f001 fe35 	bl	30b4 <sprintf>
		TraceNL(buffer);
    144a:	f107 030c 	add.w	r3, r7, #12
    144e:	4618      	mov	r0, r3
    1450:	f000 fb6c 	bl	1b2c <TraceNL>
		/*	Copy data (already) located in RAM to flash */
		if (rc == IAP_STA_CMD_SUCCESS) {
    1454:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
    1458:	2b00      	cmp	r3, #0
    145a:	d102      	bne.n	1462 <WriteImageSignature+0xfe>
			TraceNL("copied ");
    145c:	4808      	ldr	r0, [pc, #32]	; (1480 <WriteImageSignature+0x11c>)
    145e:	f000 fb65 	bl	1b2c <TraceNL>
		}
	}

	return;
    1462:	bf00      	nop
}
    1464:	f507 6784 	add.w	r7, r7, #1056	; 0x420
    1468:	46bd      	mov	sp, r7
    146a:	bd80      	pop	{r7, pc}
    146c:	0006fc00 	.word	0x0006fc00
    1470:	00005e74 	.word	0x00005e74
    1474:	00005e9c 	.word	0x00005e9c
    1478:	00005ea8 	.word	0x00005ea8
    147c:	00005eb0 	.word	0x00005eb0
    1480:	00005ecc 	.word	0x00005ecc

00001484 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1484:	b480      	push	{r7}
    1486:	b083      	sub	sp, #12
    1488:	af00      	add	r7, sp, #0
    148a:	4603      	mov	r3, r0
    148c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    148e:	4908      	ldr	r1, [pc, #32]	; (14b0 <NVIC_EnableIRQ+0x2c>)
    1490:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1494:	095b      	lsrs	r3, r3, #5
    1496:	79fa      	ldrb	r2, [r7, #7]
    1498:	f002 021f 	and.w	r2, r2, #31
    149c:	2001      	movs	r0, #1
    149e:	fa00 f202 	lsl.w	r2, r0, r2
    14a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    14a6:	370c      	adds	r7, #12
    14a8:	46bd      	mov	sp, r7
    14aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ae:	4770      	bx	lr
    14b0:	e000e100 	.word	0xe000e100

000014b4 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    14b4:	b480      	push	{r7}
    14b6:	b083      	sub	sp, #12
    14b8:	af00      	add	r7, sp, #0
    14ba:	4603      	mov	r3, r0
    14bc:	6039      	str	r1, [r7, #0]
    14be:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    14c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    14c4:	2b00      	cmp	r3, #0
    14c6:	da0b      	bge.n	14e0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    14c8:	490d      	ldr	r1, [pc, #52]	; (1500 <NVIC_SetPriority+0x4c>)
    14ca:	79fb      	ldrb	r3, [r7, #7]
    14cc:	f003 030f 	and.w	r3, r3, #15
    14d0:	3b04      	subs	r3, #4
    14d2:	683a      	ldr	r2, [r7, #0]
    14d4:	b2d2      	uxtb	r2, r2
    14d6:	00d2      	lsls	r2, r2, #3
    14d8:	b2d2      	uxtb	r2, r2
    14da:	440b      	add	r3, r1
    14dc:	761a      	strb	r2, [r3, #24]
    14de:	e009      	b.n	14f4 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    14e0:	4908      	ldr	r1, [pc, #32]	; (1504 <NVIC_SetPriority+0x50>)
    14e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    14e6:	683a      	ldr	r2, [r7, #0]
    14e8:	b2d2      	uxtb	r2, r2
    14ea:	00d2      	lsls	r2, r2, #3
    14ec:	b2d2      	uxtb	r2, r2
    14ee:	440b      	add	r3, r1
    14f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    14f4:	370c      	adds	r7, #12
    14f6:	46bd      	mov	sp, r7
    14f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    14fc:	4770      	bx	lr
    14fe:	bf00      	nop
    1500:	e000ed00 	.word	0xe000ed00
    1504:	e000e100 	.word	0xe000e100

00001508 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
    1508:	b580      	push	{r7, lr}
    150a:	b082      	sub	sp, #8
    150c:	af00      	add	r7, sp, #0
    150e:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
    1510:	687b      	ldr	r3, [r7, #4]
    1512:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    1516:	d301      	bcc.n	151c <SysTick_Config+0x14>
    1518:	2301      	movs	r3, #1
    151a:	e011      	b.n	1540 <SysTick_Config+0x38>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
    151c:	4a0a      	ldr	r2, [pc, #40]	; (1548 <SysTick_Config+0x40>)
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1524:	3b01      	subs	r3, #1
    1526:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
    1528:	f04f 30ff 	mov.w	r0, #4294967295
    152c:	211f      	movs	r1, #31
    152e:	f7ff ffc1 	bl	14b4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    1532:	4b05      	ldr	r3, [pc, #20]	; (1548 <SysTick_Config+0x40>)
    1534:	2200      	movs	r2, #0
    1536:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
    1538:	4b03      	ldr	r3, [pc, #12]	; (1548 <SysTick_Config+0x40>)
    153a:	2207      	movs	r2, #7
    153c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
    153e:	2300      	movs	r3, #0
}
    1540:	4618      	mov	r0, r3
    1542:	3708      	adds	r7, #8
    1544:	46bd      	mov	sp, r7
    1546:	bd80      	pop	{r7, pc}
    1548:	e000e010 	.word	0xe000e010

0000154c <main>:
static uint32_t received_data = 0;



int main(void)
{
    154c:	b580      	push	{r7, lr}
    154e:	b0b4      	sub	sp, #208	; 0xd0
    1550:	af00      	add	r7, sp, #0
	char buffer[200];

	SystemInit();
    1552:	f001 fcfb 	bl	2f4c <SystemInit>

	LPC_SC->CLKSRCSEL |= 0x01;//0x01;
    1556:	4a42      	ldr	r2, [pc, #264]	; (1660 <main+0x114>)
    1558:	4b41      	ldr	r3, [pc, #260]	; (1660 <main+0x114>)
    155a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    155e:	f043 0301 	orr.w	r3, r3, #1
    1562:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	LPC_SC->PLL0CFG	  |= 0x01; // Select external osc. as main clock.
    1566:	4a3e      	ldr	r2, [pc, #248]	; (1660 <main+0x114>)
    1568:	4b3d      	ldr	r3, [pc, #244]	; (1660 <main+0x114>)
    156a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    156e:	f043 0301 	orr.w	r3, r3, #1
    1572:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	LPC_SC->CCLKCFG	   = 0x03; // Main PLL is divided by 8
    1576:	4b3a      	ldr	r3, [pc, #232]	; (1660 <main+0x114>)
    1578:	2203      	movs	r2, #3
    157a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	SystemCoreClockUpdate();
    157e:	f001 fc8f 	bl	2ea0 <SystemCoreClockUpdate>
	// Generate f each 1 ms, used to enable DelayMs function
	SysTick_Config(SystemCoreClock / 1000 - 1);
    1582:	4b38      	ldr	r3, [pc, #224]	; (1664 <main+0x118>)
    1584:	681b      	ldr	r3, [r3, #0]
    1586:	4a38      	ldr	r2, [pc, #224]	; (1668 <main+0x11c>)
    1588:	fba2 2303 	umull	r2, r3, r2, r3
    158c:	099b      	lsrs	r3, r3, #6
    158e:	3b01      	subs	r3, #1
    1590:	4618      	mov	r0, r3
    1592:	f7ff ffb9 	bl	1508 <SysTick_Config>

	WDTInit(WDT_FEED_30_SECS);
    1596:	4835      	ldr	r0, [pc, #212]	; (166c <main+0x120>)
    1598:	f001 f932 	bl	2800 <WDTInit>

	ConfigurePins();
    159c:	f000 fa12 	bl	19c4 <ConfigurePins>

	UARTInit( PORT_TRACE, 115200 );
    15a0:	2000      	movs	r0, #0
    15a2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    15a6:	f000 fe0d 	bl	21c4 <UARTInit>
	UARTInit( PORT_GSM,   115200 );
    15aa:	2001      	movs	r0, #1
    15ac:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    15b0:	f000 fe08 	bl	21c4 <UARTInit>

	TraceNL("\r\nBooting up");
    15b4:	482e      	ldr	r0, [pc, #184]	; (1670 <main+0x124>)
    15b6:	f000 fab9 	bl	1b2c <TraceNL>
	sprintf(buffer, "SystemCoreClock = %d Hz\r\n", SystemCoreClock);
    15ba:	4b2a      	ldr	r3, [pc, #168]	; (1664 <main+0x118>)
    15bc:	681b      	ldr	r3, [r3, #0]
    15be:	1d3a      	adds	r2, r7, #4
    15c0:	4610      	mov	r0, r2
    15c2:	492c      	ldr	r1, [pc, #176]	; (1674 <main+0x128>)
    15c4:	461a      	mov	r2, r3
    15c6:	f001 fd75 	bl	30b4 <sprintf>
	Trace(buffer);
    15ca:	1d3b      	adds	r3, r7, #4
    15cc:	4618      	mov	r0, r3
    15ce:	f000 fa9d 	bl	1b0c <Trace>
//		TraceNL("EEPROM Initialization failed.");
//	} else {
//		TraceNL("EEPROM Initialized.");
//	}

	WDTFeed();
    15d2:	f001 f935 	bl	2840 <WDTFeed>
//	LoadParams();

	TraceNL( "Checking upgrade request" );
    15d6:	4828      	ldr	r0, [pc, #160]	; (1678 <main+0x12c>)
    15d8:	f000 faa8 	bl	1b2c <TraceNL>

	if( IsUpgradeRequested() )
    15dc:	f000 f85a 	bl	1694 <IsUpgradeRequested>
    15e0:	4603      	mov	r3, r0
    15e2:	2b00      	cmp	r3, #0
    15e4:	d025      	beq.n	1632 <main+0xe6>
	{
		TraceNL( "System image upgrade requested" );
    15e6:	4825      	ldr	r0, [pc, #148]	; (167c <main+0x130>)
    15e8:	f000 faa0 	bl	1b2c <TraceNL>
		int8_t 	trials = 3;
    15ec:	2303      	movs	r3, #3
    15ee:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		while( trials-- > 0 )
    15f2:	e011      	b.n	1618 <main+0xcc>
		{
			/*
			 * 	Initialize GSM module
			 * 	Setup a server connection to update server
			 */
			if( GSM_ConnectToTrioUpgradeServer() == SUCCESS )
    15f4:	f7fe fed8 	bl	3a8 <GSM_ConnectToTrioUpgradeServer>
    15f8:	4603      	mov	r3, r0
    15fa:	2b00      	cmp	r3, #0
    15fc:	d10c      	bne.n	1618 <main+0xcc>
			{
				TraceNL( "Server Connection Established to Upgrade server" );
    15fe:	4820      	ldr	r0, [pc, #128]	; (1680 <main+0x134>)
    1600:	f000 fa94 	bl	1b2c <TraceNL>
				WDTFeed( );
    1604:	f001 f91c 	bl	2840 <WDTFeed>
				DownloadSecondaryImage();
    1608:	f000 f880 	bl	170c <DownloadSecondaryImage>
				WDTFeed( );
    160c:	f001 f918 	bl	2840 <WDTFeed>
				TraceNL( "Download finished " );
    1610:	481c      	ldr	r0, [pc, #112]	; (1684 <main+0x138>)
    1612:	f000 fa8b 	bl	1b2c <TraceNL>
				break;
    1616:	e009      	b.n	162c <main+0xe0>

	if( IsUpgradeRequested() )
	{
		TraceNL( "System image upgrade requested" );
		int8_t 	trials = 3;
		while( trials-- > 0 )
    1618:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
    161c:	b2d3      	uxtb	r3, r2
    161e:	3b01      	subs	r3, #1
    1620:	b2db      	uxtb	r3, r3
    1622:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    1626:	b253      	sxtb	r3, r2
    1628:	2b00      	cmp	r3, #0
    162a:	dce3      	bgt.n	15f4 <main+0xa8>
				WDTFeed( );
				TraceNL( "Download finished " );
				break;
			}
		}
		TraceNL( "Finished upgrading" );
    162c:	4816      	ldr	r0, [pc, #88]	; (1688 <main+0x13c>)
    162e:	f000 fa7d 	bl	1b2c <TraceNL>
	}

	if( IsSecondaryImageValid() == SUCCESS )
    1632:	f000 f987 	bl	1944 <IsSecondaryImageValid>
    1636:	4603      	mov	r3, r0
    1638:	2b00      	cmp	r3, #0
    163a:	d106      	bne.n	164a <main+0xfe>
	{
		TraceNL( "Booting SECONDARY image" );
    163c:	4813      	ldr	r0, [pc, #76]	; (168c <main+0x140>)
    163e:	f000 fa75 	bl	1b2c <TraceNL>
		ExecuteApplicationImage( SECONDARY_IMAGE_LOAD_ADDR );
    1642:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1646:	f000 f8c5 	bl	17d4 <ExecuteApplicationImage>
	}

	TraceNL( "Booting PRIMARY image" );
    164a:	4811      	ldr	r0, [pc, #68]	; (1690 <main+0x144>)
    164c:	f000 fa6e 	bl	1b2c <TraceNL>
	WDTFeed( );
    1650:	f001 f8f6 	bl	2840 <WDTFeed>
	ExecuteApplicationImage( PRIMARY_IMAGE_LOAD_ADDR );
    1654:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    1658:	f000 f8bc 	bl	17d4 <ExecuteApplicationImage>

	while ( 1L );
    165c:	e7fe      	b.n	165c <main+0x110>
    165e:	bf00      	nop
    1660:	400fc000 	.word	0x400fc000
    1664:	10000024 	.word	0x10000024
    1668:	10624dd3 	.word	0x10624dd3
    166c:	0c6aea15 	.word	0x0c6aea15
    1670:	00005ed4 	.word	0x00005ed4
    1674:	00005ee4 	.word	0x00005ee4
    1678:	00005f00 	.word	0x00005f00
    167c:	00005f1c 	.word	0x00005f1c
    1680:	00005f3c 	.word	0x00005f3c
    1684:	00005f6c 	.word	0x00005f6c
    1688:	00005f80 	.word	0x00005f80
    168c:	00005f94 	.word	0x00005f94
    1690:	00005fac 	.word	0x00005fac

00001694 <IsUpgradeRequested>:
** Returned value:	TRUE	upgrade is requested
** 					FALSE   upgrade is not requested
**
******************************************************************************/
uint32_t	IsUpgradeRequested( void )
{
    1694:	b580      	push	{r7, lr}
    1696:	b09a      	sub	sp, #104	; 0x68
    1698:	af00      	add	r7, sp, #0
	if( (*( (uint32_t *)UPGRADE_PARAMETERS_ADDR) ) != 0xFFFFFFFF )
    169a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
    169e:	681b      	ldr	r3, [r3, #0]
    16a0:	f1b3 3fff 	cmp.w	r3, #4294967295
    16a4:	d026      	beq.n	16f4 <IsUpgradeRequested+0x60>
	{
		char buffer[100];
		char * port ;
		strcpy( update_service_ip, (char*)UPGRADE_PARAMETERS_ADDR );
    16a6:	4816      	ldr	r0, [pc, #88]	; (1700 <IsUpgradeRequested+0x6c>)
    16a8:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
    16ac:	f003 f947 	bl	493e <strcpy>

		port = strchr( (char*)UPGRADE_PARAMETERS_ADDR, '\0' );
    16b0:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
    16b4:	2100      	movs	r1, #0
    16b6:	f003 f935 	bl	4924 <strchr>
    16ba:	6678      	str	r0, [r7, #100]	; 0x64
		port++;
    16bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    16be:	3301      	adds	r3, #1
    16c0:	667b      	str	r3, [r7, #100]	; 0x64
		strcpy( update_service_port, port);
    16c2:	4810      	ldr	r0, [pc, #64]	; (1704 <IsUpgradeRequested+0x70>)
    16c4:	6e79      	ldr	r1, [r7, #100]	; 0x64
    16c6:	f003 f93a 	bl	493e <strcpy>

		sprintf(buffer,"Update parameters %s:%s", update_service_ip, update_service_port);
    16ca:	463b      	mov	r3, r7
    16cc:	4618      	mov	r0, r3
    16ce:	490e      	ldr	r1, [pc, #56]	; (1708 <IsUpgradeRequested+0x74>)
    16d0:	4a0b      	ldr	r2, [pc, #44]	; (1700 <IsUpgradeRequested+0x6c>)
    16d2:	4b0c      	ldr	r3, [pc, #48]	; (1704 <IsUpgradeRequested+0x70>)
    16d4:	f001 fcee 	bl	30b4 <sprintf>
		TraceNL( buffer );
    16d8:	463b      	mov	r3, r7
    16da:	4618      	mov	r0, r3
    16dc:	f000 fa26 	bl	1b2c <TraceNL>

		u32IAP_PrepareSectors( UPGRADE_PARAMETERS_SEC, UPGRADE_PARAMETERS_SEC );
    16e0:	200f      	movs	r0, #15
    16e2:	210f      	movs	r1, #15
    16e4:	f7ff fd6a 	bl	11bc <u32IAP_PrepareSectors>
		u32IAP_EraseSectors( UPGRADE_PARAMETERS_SEC, UPGRADE_PARAMETERS_SEC );
    16e8:	200f      	movs	r0, #15
    16ea:	210f      	movs	r1, #15
    16ec:	f7ff fdb4 	bl	1258 <u32IAP_EraseSectors>
		return TRUE;
    16f0:	2301      	movs	r3, #1
    16f2:	e000      	b.n	16f6 <IsUpgradeRequested+0x62>
	}

	return FALSE;
    16f4:	2300      	movs	r3, #0
}
    16f6:	4618      	mov	r0, r3
    16f8:	3768      	adds	r7, #104	; 0x68
    16fa:	46bd      	mov	sp, r7
    16fc:	bd80      	pop	{r7, pc}
    16fe:	bf00      	nop
    1700:	10000000 	.word	0x10000000
    1704:	10000014 	.word	0x10000014
    1708:	00005fc4 	.word	0x00005fc4

0000170c <DownloadSecondaryImage>:


void DownloadSecondaryImage( void )
{
    170c:	b590      	push	{r4, r7, lr}
    170e:	b0a3      	sub	sp, #140	; 0x8c
    1710:	af02      	add	r7, sp, #8
	uint32_t	reason[5];
	uint32_t	i;

	char buff[100];

	i = SECONDARY_IMAGE_START_SEC;
    1712:	2316      	movs	r3, #22
    1714:	67fb      	str	r3, [r7, #124]	; 0x7c
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    1716:	e00a      	b.n	172e <DownloadSecondaryImage+0x22>
	{
		u32IAP_PrepareSectors( i, i );
    1718:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    171a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    171c:	f7ff fd4e 	bl	11bc <u32IAP_PrepareSectors>
		u32IAP_EraseSectors( i, i );
    1720:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    1722:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    1724:	f7ff fd98 	bl	1258 <u32IAP_EraseSectors>
	uint32_t	i;

	char buff[100];

	i = SECONDARY_IMAGE_START_SEC;
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    1728:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    172a:	3301      	adds	r3, #1
    172c:	67fb      	str	r3, [r7, #124]	; 0x7c
    172e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1730:	2b1b      	cmp	r3, #27
    1732:	d9f1      	bls.n	1718 <DownloadSecondaryImage+0xc>
	{
		u32IAP_PrepareSectors( i, i );
		u32IAP_EraseSectors( i, i );
	}
	TraceNL( "Checking if target memory is blank" );
    1734:	4821      	ldr	r0, [pc, #132]	; (17bc <DownloadSecondaryImage+0xb0>)
    1736:	f000 f9f9 	bl	1b2c <TraceNL>


	i = SECONDARY_IMAGE_START_SEC;
    173a:	2316      	movs	r3, #22
    173c:	67fb      	str	r3, [r7, #124]	; 0x7c
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    173e:	e02d      	b.n	179c <DownloadSecondaryImage+0x90>
	{
		if( u32IAP_BlankCheckSectors( i, i, &reason[0] )== IAP_STA_SECTOR_NOT_BLANK )
    1740:	f107 0368 	add.w	r3, r7, #104	; 0x68
    1744:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    1746:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    1748:	461a      	mov	r2, r3
    174a:	f7ff fdb5 	bl	12b8 <u32IAP_BlankCheckSectors>
    174e:	4603      	mov	r3, r0
    1750:	2b08      	cmp	r3, #8
    1752:	d116      	bne.n	1782 <DownloadSecondaryImage+0x76>
		{
			sprintf(buff, "Target sector (%d) is not blank addr: 0x%X, 0x%X", i, reason[0], reason[1] );
    1754:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    1756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1758:	1d3a      	adds	r2, r7, #4
    175a:	9300      	str	r3, [sp, #0]
    175c:	4610      	mov	r0, r2
    175e:	4918      	ldr	r1, [pc, #96]	; (17c0 <DownloadSecondaryImage+0xb4>)
    1760:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    1762:	4623      	mov	r3, r4
    1764:	f001 fca6 	bl	30b4 <sprintf>
			TraceNL( buff );
    1768:	1d3b      	adds	r3, r7, #4
    176a:	4618      	mov	r0, r3
    176c:	f000 f9de 	bl	1b2c <TraceNL>
			u32IAP_PrepareSectors( i, i );
    1770:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    1772:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    1774:	f7ff fd22 	bl	11bc <u32IAP_PrepareSectors>
			u32IAP_EraseSectors( i, i);
    1778:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    177a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    177c:	f7ff fd6c 	bl	1258 <u32IAP_EraseSectors>
    1780:	e009      	b.n	1796 <DownloadSecondaryImage+0x8a>

		}else
		{
			sprintf(buff, "Target sector (%d) is blank ", i );
    1782:	1d3b      	adds	r3, r7, #4
    1784:	4618      	mov	r0, r3
    1786:	490f      	ldr	r1, [pc, #60]	; (17c4 <DownloadSecondaryImage+0xb8>)
    1788:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    178a:	f001 fc93 	bl	30b4 <sprintf>
			TraceNL( buff );
    178e:	1d3b      	adds	r3, r7, #4
    1790:	4618      	mov	r0, r3
    1792:	f000 f9cb 	bl	1b2c <TraceNL>
	}
	TraceNL( "Checking if target memory is blank" );


	i = SECONDARY_IMAGE_START_SEC;
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    1796:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1798:	3301      	adds	r3, #1
    179a:	67fb      	str	r3, [r7, #124]	; 0x7c
    179c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    179e:	2b1b      	cmp	r3, #27
    17a0:	d9ce      	bls.n	1740 <DownloadSecondaryImage+0x34>
			TraceNL( buff );
		}
	}

	/*	Clear the received data counter using in the load_mage function */
	received_data = 0;
    17a2:	4b09      	ldr	r3, [pc, #36]	; (17c8 <DownloadSecondaryImage+0xbc>)
    17a4:	2200      	movs	r2, #0
    17a6:	601a      	str	r2, [r3, #0]

	TraceNL( "Starting download" );
    17a8:	4808      	ldr	r0, [pc, #32]	; (17cc <DownloadSecondaryImage+0xc0>)
    17aa:	f000 f9bf 	bl	1b2c <TraceNL>
	/*	Store a new image into flash */
	XModem1K_Client( &loadImage );
    17ae:	4808      	ldr	r0, [pc, #32]	; (17d0 <DownloadSecondaryImage+0xc4>)
    17b0:	f001 f8f8 	bl	29a4 <XModem1K_Client>


}
    17b4:	3784      	adds	r7, #132	; 0x84
    17b6:	46bd      	mov	sp, r7
    17b8:	bd90      	pop	{r4, r7, pc}
    17ba:	bf00      	nop
    17bc:	00005fdc 	.word	0x00005fdc
    17c0:	00006000 	.word	0x00006000
    17c4:	00006034 	.word	0x00006034
    17c8:	10000038 	.word	0x10000038
    17cc:	00006054 	.word	0x00006054
    17d0:	00001805 	.word	0x00001805

000017d4 <ExecuteApplicationImage>:

void ExecuteApplicationImage( unsigned int startAddress )
{
    17d4:	b580      	push	{r7, lr}
    17d6:	b084      	sub	sp, #16
    17d8:	af00      	add	r7, sp, #0
    17da:	6078      	str	r0, [r7, #4]
	unsigned *p;	// used for loading address of reset handler from user flash

	/* Change the Vector Table to the
	in case the user application uses interrupts */

	SCB->VTOR = (startAddress & 0x1FFFFF80);
    17dc:	4a08      	ldr	r2, [pc, #32]	; (1800 <ExecuteApplicationImage+0x2c>)
    17de:	687b      	ldr	r3, [r7, #4]
    17e0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    17e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    17e8:	6093      	str	r3, [r2, #8]

	// Load contents of second word of user flash - the reset handler address
	// in the applications vector table
	p = (unsigned *)(startAddress + 4);
    17ea:	687b      	ldr	r3, [r7, #4]
    17ec:	3304      	adds	r3, #4
    17ee:	60fb      	str	r3, [r7, #12]

	// Set user_code_entry to be the address contained in that second word
	// of user flash
	user_code_entry = (void *) *p;
    17f0:	68fb      	ldr	r3, [r7, #12]
    17f2:	681b      	ldr	r3, [r3, #0]
    17f4:	60bb      	str	r3, [r7, #8]

	// Jump to user application
    user_code_entry();
    17f6:	68bb      	ldr	r3, [r7, #8]
    17f8:	4798      	blx	r3
}
    17fa:	3710      	adds	r7, #16
    17fc:	46bd      	mov	sp, r7
    17fe:	bd80      	pop	{r7, pc}
    1800:	e000ed00 	.word	0xe000ed00

00001804 <loadImage>:

static uint32_t loadImage( uint8_t *data, uint16_t length )
{
    1804:	b580      	push	{r7, lr}
    1806:	b0c2      	sub	sp, #264	; 0x108
    1808:	af00      	add	r7, sp, #0
    180a:	1d3b      	adds	r3, r7, #4
    180c:	6018      	str	r0, [r3, #0]
    180e:	460a      	mov	r2, r1
    1810:	1cbb      	adds	r3, r7, #2
    1812:	801a      	strh	r2, [r3, #0]
	char buffer[250];
	uint32_t rc;

	sprintf(buffer, "Totally received : %d   frame length : %d\r\n", received_data, length);
    1814:	4b43      	ldr	r3, [pc, #268]	; (1924 <loadImage+0x120>)
    1816:	681a      	ldr	r2, [r3, #0]
    1818:	1cbb      	adds	r3, r7, #2
    181a:	881b      	ldrh	r3, [r3, #0]
    181c:	f107 0108 	add.w	r1, r7, #8
    1820:	4608      	mov	r0, r1
    1822:	4941      	ldr	r1, [pc, #260]	; (1928 <loadImage+0x124>)
    1824:	f001 fc46 	bl	30b4 <sprintf>
	Trace( buffer );
    1828:	f107 0308 	add.w	r3, r7, #8
    182c:	4618      	mov	r0, r3
    182e:	f000 f96d 	bl	1b0c <Trace>

	if( data != NULL && length )
    1832:	1d3b      	adds	r3, r7, #4
    1834:	681b      	ldr	r3, [r3, #0]
    1836:	2b00      	cmp	r3, #0
    1838:	d06d      	beq.n	1916 <loadImage+0x112>
    183a:	1cbb      	adds	r3, r7, #2
    183c:	881b      	ldrh	r3, [r3, #0]
    183e:	2b00      	cmp	r3, #0
    1840:	d069      	beq.n	1916 <loadImage+0x112>
	{
		/*	Prepare Sectors to be flashed */
		if (u32IAP_PrepareSectors( SECONDARY_IMAGE_START_SEC, SECONDARY_IMAGE_END_SEC ) == IAP_STA_CMD_SUCCESS)
    1842:	2016      	movs	r0, #22
    1844:	211b      	movs	r1, #27
    1846:	f7ff fcb9 	bl	11bc <u32IAP_PrepareSectors>
    184a:	4603      	mov	r3, r0
    184c:	2b00      	cmp	r3, #0
    184e:	d162      	bne.n	1916 <loadImage+0x112>
		{
			TraceNL("prepared ");
    1850:	4836      	ldr	r0, [pc, #216]	; (192c <loadImage+0x128>)
    1852:	f000 f96b 	bl	1b2c <TraceNL>

			rc = u32IAP_CopyRAMToFlash(
    1856:	4b33      	ldr	r3, [pc, #204]	; (1924 <loadImage+0x120>)
    1858:	681b      	ldr	r3, [r3, #0]
    185a:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
    185e:	1d3b      	adds	r3, r7, #4
    1860:	681a      	ldr	r2, [r3, #0]
    1862:	1cbb      	adds	r3, r7, #2
    1864:	881b      	ldrh	r3, [r3, #0]
    1866:	4608      	mov	r0, r1
    1868:	4611      	mov	r1, r2
    186a:	461a      	mov	r2, r3
    186c:	f7ff fcca 	bl	1204 <u32IAP_CopyRAMToFlash>
    1870:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
					SECONDARY_IMAGE_LOAD_ADDR + received_data,
					(uint32_t) data,
					length
					);

			sprintf( buffer, "Copy Ram result code : %d\r\n", rc );
    1874:	f107 0308 	add.w	r3, r7, #8
    1878:	4618      	mov	r0, r3
    187a:	492d      	ldr	r1, [pc, #180]	; (1930 <loadImage+0x12c>)
    187c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    1880:	f001 fc18 	bl	30b4 <sprintf>
			TraceNL( buffer );
    1884:	f107 0308 	add.w	r3, r7, #8
    1888:	4618      	mov	r0, r3
    188a:	f000 f94f 	bl	1b2c <TraceNL>
			/*	Copy data (already) located in RAM to flash */
			if (rc == IAP_STA_CMD_SUCCESS)
    188e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    1892:	2b00      	cmp	r3, #0
    1894:	d13f      	bne.n	1916 <loadImage+0x112>
			{
				TraceNL( "copied " );
    1896:	4827      	ldr	r0, [pc, #156]	; (1934 <loadImage+0x130>)
    1898:	f000 f948 	bl	1b2c <TraceNL>
				rc = u32IAP_Compare( SECONDARY_IMAGE_LOAD_ADDR + received_data,
    189c:	4b21      	ldr	r3, [pc, #132]	; (1924 <loadImage+0x120>)
    189e:	681b      	ldr	r3, [r3, #0]
    18a0:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
    18a4:	1d3b      	adds	r3, r7, #4
    18a6:	681a      	ldr	r2, [r3, #0]
    18a8:	1cbb      	adds	r3, r7, #2
    18aa:	881b      	ldrh	r3, [r3, #0]
    18ac:	4608      	mov	r0, r1
    18ae:	4611      	mov	r1, r2
    18b0:	461a      	mov	r2, r3
    18b2:	2300      	movs	r3, #0
    18b4:	f7ff fd2e 	bl	1314 <u32IAP_Compare>
    18b8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
						             (uint32_t) data,
									 length, 0
									);
				sprintf( buffer, "u32IAP_Compare : %d  wrote %d \r\n", rc , length );
    18bc:	1cbb      	adds	r3, r7, #2
    18be:	881b      	ldrh	r3, [r3, #0]
    18c0:	f107 0208 	add.w	r2, r7, #8
    18c4:	4610      	mov	r0, r2
    18c6:	491c      	ldr	r1, [pc, #112]	; (1938 <loadImage+0x134>)
    18c8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    18cc:	f001 fbf2 	bl	30b4 <sprintf>
				Trace( buffer );
    18d0:	f107 0308 	add.w	r3, r7, #8
    18d4:	4618      	mov	r0, r3
    18d6:	f000 f919 	bl	1b0c <Trace>

				/*	Verify the flash contents with the contents in RAM */
				if (rc == IAP_STA_CMD_SUCCESS)
    18da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    18de:	2b00      	cmp	r3, #0
    18e0:	d10b      	bne.n	18fa <loadImage+0xf6>
				{
					/*	Update and Print Received bytes counter */
					received_data += length;
    18e2:	1cbb      	adds	r3, r7, #2
    18e4:	881a      	ldrh	r2, [r3, #0]
    18e6:	4b0f      	ldr	r3, [pc, #60]	; (1924 <loadImage+0x120>)
    18e8:	681b      	ldr	r3, [r3, #0]
    18ea:	4413      	add	r3, r2
    18ec:	4a0d      	ldr	r2, [pc, #52]	; (1924 <loadImage+0x120>)
    18ee:	6013      	str	r3, [r2, #0]
					TraceNL( "verified " );
    18f0:	4812      	ldr	r0, [pc, #72]	; (193c <loadImage+0x138>)
    18f2:	f000 f91b 	bl	1b2c <TraceNL>
					return (1);
    18f6:	2301      	movs	r3, #1
    18f8:	e00e      	b.n	1918 <loadImage+0x114>
				} else {
					TraceDumpHex( (char*)(SECONDARY_IMAGE_LOAD_ADDR + received_data), length );
    18fa:	4b0a      	ldr	r3, [pc, #40]	; (1924 <loadImage+0x120>)
    18fc:	681b      	ldr	r3, [r3, #0]
    18fe:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    1902:	461a      	mov	r2, r3
    1904:	1cbb      	adds	r3, r7, #2
    1906:	881b      	ldrh	r3, [r3, #0]
    1908:	4610      	mov	r0, r2
    190a:	4619      	mov	r1, r3
    190c:	f000 f942 	bl	1b94 <TraceDumpHex>
					TraceNL( "verification failed " );
    1910:	480b      	ldr	r0, [pc, #44]	; (1940 <loadImage+0x13c>)
    1912:	f000 f90b 	bl	1b2c <TraceNL>
				}
			}
		}
	}

	return (0);
    1916:	2300      	movs	r3, #0
}
    1918:	4618      	mov	r0, r3
    191a:	f507 7784 	add.w	r7, r7, #264	; 0x108
    191e:	46bd      	mov	sp, r7
    1920:	bd80      	pop	{r7, pc}
    1922:	bf00      	nop
    1924:	10000038 	.word	0x10000038
    1928:	00006068 	.word	0x00006068
    192c:	00006094 	.word	0x00006094
    1930:	000060a0 	.word	0x000060a0
    1934:	000060bc 	.word	0x000060bc
    1938:	000060c4 	.word	0x000060c4
    193c:	000060e8 	.word	0x000060e8
    1940:	000060f4 	.word	0x000060f4

00001944 <IsSecondaryImageValid>:


static int32_t IsSecondaryImageValid( void )
{
    1944:	b580      	push	{r7, lr}
    1946:	b09c      	sub	sp, #112	; 0x70
    1948:	af00      	add	r7, sp, #0
	char buffer[100];

	uint32_t size = *(uint32_t *)(SECONDARY_IMAGE_END_ADDR - 8);
    194a:	4b1a      	ldr	r3, [pc, #104]	; (19b4 <IsSecondaryImageValid+0x70>)
    194c:	681b      	ldr	r3, [r3, #0]
    194e:	66fb      	str	r3, [r7, #108]	; 0x6c

	uint16_t crc  = *(uint16_t *)(SECONDARY_IMAGE_END_ADDR - 4);
    1950:	4b19      	ldr	r3, [pc, #100]	; (19b8 <IsSecondaryImageValid+0x74>)
    1952:	881b      	ldrh	r3, [r3, #0]
    1954:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	sprintf(buffer, "Signature: 0x%X   CRC : %X\r\n", size, crc);
    1958:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
    195c:	1d3a      	adds	r2, r7, #4
    195e:	4610      	mov	r0, r2
    1960:	4916      	ldr	r1, [pc, #88]	; (19bc <IsSecondaryImageValid+0x78>)
    1962:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    1964:	f001 fba6 	bl	30b4 <sprintf>
	Trace( buffer );
    1968:	1d3b      	adds	r3, r7, #4
    196a:	4618      	mov	r0, r3
    196c:	f000 f8ce 	bl	1b0c <Trace>

	uint16_t calculatedCRC = u16CRC_Calc16( (uint8_t*)SECONDARY_IMAGE_LOAD_ADDR, size );
    1970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1972:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1976:	4619      	mov	r1, r3
    1978:	f7ff f8d6 	bl	b28 <u16CRC_Calc16>
    197c:	4603      	mov	r3, r0
    197e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

	sprintf( buffer, "Calculated Image CRC: 0x%X\r\n", calculatedCRC );
    1982:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
    1986:	1d3a      	adds	r2, r7, #4
    1988:	4610      	mov	r0, r2
    198a:	490d      	ldr	r1, [pc, #52]	; (19c0 <IsSecondaryImageValid+0x7c>)
    198c:	461a      	mov	r2, r3
    198e:	f001 fb91 	bl	30b4 <sprintf>
	Trace( buffer );
    1992:	1d3b      	adds	r3, r7, #4
    1994:	4618      	mov	r0, r3
    1996:	f000 f8b9 	bl	1b0c <Trace>

	if( crc == calculatedCRC )
    199a:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
    199e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
    19a2:	429a      	cmp	r2, r3
    19a4:	d101      	bne.n	19aa <IsSecondaryImageValid+0x66>
		return ( 0 );  // image is valid
    19a6:	2300      	movs	r3, #0
    19a8:	e000      	b.n	19ac <IsSecondaryImageValid+0x68>

	return ( 1 );  //image is not valid
    19aa:	2301      	movs	r3, #1
}
    19ac:	4618      	mov	r0, r3
    19ae:	3770      	adds	r7, #112	; 0x70
    19b0:	46bd      	mov	sp, r7
    19b2:	bd80      	pop	{r7, pc}
    19b4:	0006fff8 	.word	0x0006fff8
    19b8:	0006fffc 	.word	0x0006fffc
    19bc:	0000610c 	.word	0x0000610c
    19c0:	0000612c 	.word	0x0000612c

000019c4 <ConfigurePins>:


void ConfigurePins( void )
{
    19c4:	b580      	push	{r7, lr}
    19c6:	b082      	sub	sp, #8
    19c8:	af00      	add	r7, sp, #0
	//PWRKEY & EMERG_OFF
	LPC_PINCON->PINSEL4 &= ~(0xFFFF); // Reset P2[0..7] = GPIO
    19ca:	4a34      	ldr	r2, [pc, #208]	; (1a9c <ConfigurePins+0xd8>)
    19cc:	4b33      	ldr	r3, [pc, #204]	; (1a9c <ConfigurePins+0xd8>)
    19ce:	691b      	ldr	r3, [r3, #16]
    19d0:	0c1b      	lsrs	r3, r3, #16
    19d2:	041b      	lsls	r3, r3, #16
    19d4:	6113      	str	r3, [r2, #16]
	LPC_GPIO2->FIODIR |= 0xFF; // P2[0..7] =
    19d6:	4a32      	ldr	r2, [pc, #200]	; (1aa0 <ConfigurePins+0xdc>)
    19d8:	4b31      	ldr	r3, [pc, #196]	; (1aa0 <ConfigurePins+0xdc>)
    19da:	681b      	ldr	r3, [r3, #0]
    19dc:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    19e0:	6013      	str	r3, [r2, #0]
	LPC_PINCON->PINSEL9 &= ~(0xFFFF); // Reset P4[24..31] = GPIO
    19e2:	4a2e      	ldr	r2, [pc, #184]	; (1a9c <ConfigurePins+0xd8>)
    19e4:	4b2d      	ldr	r3, [pc, #180]	; (1a9c <ConfigurePins+0xd8>)
    19e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    19e8:	0c1b      	lsrs	r3, r3, #16
    19ea:	041b      	lsls	r3, r3, #16
    19ec:	6253      	str	r3, [r2, #36]	; 0x24
	LPC_GPIO4->FIODIR = (1 << 28) | (1 << 29);
    19ee:	4b2d      	ldr	r3, [pc, #180]	; (1aa4 <ConfigurePins+0xe0>)
    19f0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    19f4:	601a      	str	r2, [r3, #0]
	LPC_GPIO0->FIODIR &= (1 << 7); //P0[7] DIN 1 as input --> Default mode pull up enabled.
    19f6:	4a2c      	ldr	r2, [pc, #176]	; (1aa8 <ConfigurePins+0xe4>)
    19f8:	4b2b      	ldr	r3, [pc, #172]	; (1aa8 <ConfigurePins+0xe4>)
    19fa:	681b      	ldr	r3, [r3, #0]
    19fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1a00:	6013      	str	r3, [r2, #0]
	LPC_GPIO0->FIODIR &= ~(1 << 29 | 1 << 30); //P0[30] as input
    1a02:	4a29      	ldr	r2, [pc, #164]	; (1aa8 <ConfigurePins+0xe4>)
    1a04:	4b28      	ldr	r3, [pc, #160]	; (1aa8 <ConfigurePins+0xe4>)
    1a06:	681b      	ldr	r3, [r3, #0]
    1a08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
    1a0c:	6013      	str	r3, [r2, #0]
	LPC_GPIO0->FIODIR |= (1 << 5);
    1a0e:	4a26      	ldr	r2, [pc, #152]	; (1aa8 <ConfigurePins+0xe4>)
    1a10:	4b25      	ldr	r3, [pc, #148]	; (1aa8 <ConfigurePins+0xe4>)
    1a12:	681b      	ldr	r3, [r3, #0]
    1a14:	f043 0320 	orr.w	r3, r3, #32
    1a18:	6013      	str	r3, [r2, #0]
	//Init ADC
	uint32_t u32PCLKDIV, u32PCLK;
	LPC_SC->PCONP |= (1 << 12);
    1a1a:	4a24      	ldr	r2, [pc, #144]	; (1aac <ConfigurePins+0xe8>)
    1a1c:	4b23      	ldr	r3, [pc, #140]	; (1aac <ConfigurePins+0xe8>)
    1a1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1a22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1a26:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	u32PCLKDIV = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
    1a2a:	4b20      	ldr	r3, [pc, #128]	; (1aac <ConfigurePins+0xe8>)
    1a2c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    1a30:	099b      	lsrs	r3, r3, #6
    1a32:	f003 0303 	and.w	r3, r3, #3
    1a36:	607b      	str	r3, [r7, #4]
	switch (u32PCLKDIV) {
    1a38:	687b      	ldr	r3, [r7, #4]
    1a3a:	2b02      	cmp	r3, #2
    1a3c:	d009      	beq.n	1a52 <ConfigurePins+0x8e>
    1a3e:	2b03      	cmp	r3, #3
    1a40:	d00a      	beq.n	1a58 <ConfigurePins+0x94>
    1a42:	2b01      	cmp	r3, #1
    1a44:	d002      	beq.n	1a4c <ConfigurePins+0x88>
	case 0x00:
	default:
		u32PCLK = 12000000 / 4;
    1a46:	4b1a      	ldr	r3, [pc, #104]	; (1ab0 <ConfigurePins+0xec>)
    1a48:	603b      	str	r3, [r7, #0]
		break;
    1a4a:	e008      	b.n	1a5e <ConfigurePins+0x9a>
	case 0x01:
		u32PCLK = 12000000;
    1a4c:	4b19      	ldr	r3, [pc, #100]	; (1ab4 <ConfigurePins+0xf0>)
    1a4e:	603b      	str	r3, [r7, #0]
		break;
    1a50:	e005      	b.n	1a5e <ConfigurePins+0x9a>
	case 0x02:
		u32PCLK = 12000000 / 2;
    1a52:	4b19      	ldr	r3, [pc, #100]	; (1ab8 <ConfigurePins+0xf4>)
    1a54:	603b      	str	r3, [r7, #0]
		break;
    1a56:	e002      	b.n	1a5e <ConfigurePins+0x9a>
	case 0x03:
		u32PCLK = 12000000 / 8;
    1a58:	4b18      	ldr	r3, [pc, #96]	; (1abc <ConfigurePins+0xf8>)
    1a5a:	603b      	str	r3, [r7, #0]
		break;
    1a5c:	bf00      	nop
	//LPC_ADC->ADCR = (1 << 3) | ((u32PCLK / 12000000 - 1) << 8) | (0 << 16) | (0
	//		<< 17) | (1 << 21) | (0 << 24) | (0 << 27);
	//LPC_PINCON->PINSEL1 |= (1U << 20);
	///ADC//
	//External Power Pin
	LPC_GPIO0->FIODIR &= ~(1 << 22);
    1a5e:	4a12      	ldr	r2, [pc, #72]	; (1aa8 <ConfigurePins+0xe4>)
    1a60:	4b11      	ldr	r3, [pc, #68]	; (1aa8 <ConfigurePins+0xe4>)
    1a62:	681b      	ldr	r3, [r3, #0]
    1a64:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    1a68:	6013      	str	r3, [r2, #0]
	//Ignition Pin
	LPC_GPIO0->FIODIR &= ~(1 << 21);
    1a6a:	4a0f      	ldr	r2, [pc, #60]	; (1aa8 <ConfigurePins+0xe4>)
    1a6c:	4b0e      	ldr	r3, [pc, #56]	; (1aa8 <ConfigurePins+0xe4>)
    1a6e:	681b      	ldr	r3, [r3, #0]
    1a70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
    1a74:	6013      	str	r3, [r2, #0]
	#ifdef brisa
		DIGITAL_IN1_PIN = 21;
	#endif
	LPC_GPIOINT->IO0IntEnR |= (1 << 22); // Rising edge
    1a76:	4a12      	ldr	r2, [pc, #72]	; (1ac0 <ConfigurePins+0xfc>)
    1a78:	4b11      	ldr	r3, [pc, #68]	; (1ac0 <ConfigurePins+0xfc>)
    1a7a:	691b      	ldr	r3, [r3, #16]
    1a7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1a80:	6113      	str	r3, [r2, #16]
	LPC_GPIOINT->IO0IntEnF |= (1 << 22); // Falling edge
    1a82:	4a0f      	ldr	r2, [pc, #60]	; (1ac0 <ConfigurePins+0xfc>)
    1a84:	4b0e      	ldr	r3, [pc, #56]	; (1ac0 <ConfigurePins+0xfc>)
    1a86:	695b      	ldr	r3, [r3, #20]
    1a88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1a8c:	6153      	str	r3, [r2, #20]
	NVIC_EnableIRQ(EINT3_IRQn);
    1a8e:	2015      	movs	r0, #21
    1a90:	f7ff fcf8 	bl	1484 <NVIC_EnableIRQ>
}
    1a94:	3708      	adds	r7, #8
    1a96:	46bd      	mov	sp, r7
    1a98:	bd80      	pop	{r7, pc}
    1a9a:	bf00      	nop
    1a9c:	4002c000 	.word	0x4002c000
    1aa0:	2009c040 	.word	0x2009c040
    1aa4:	2009c080 	.word	0x2009c080
    1aa8:	2009c000 	.word	0x2009c000
    1aac:	400fc000 	.word	0x400fc000
    1ab0:	002dc6c0 	.word	0x002dc6c0
    1ab4:	00b71b00 	.word	0x00b71b00
    1ab8:	005b8d80 	.word	0x005b8d80
    1abc:	0016e360 	.word	0x0016e360
    1ac0:	40028080 	.word	0x40028080

00001ac4 <SysTick_Handler>:
 *  Created on: 14 Kas 2012
 *      Author: trio
 */
#include <LPC17xx.h>
#include "timer.h"
void SysTick_Handler(void) {
    1ac4:	b480      	push	{r7}
    1ac6:	af00      	add	r7, sp, #0
	STT_Value++;
    1ac8:	4b04      	ldr	r3, [pc, #16]	; (1adc <SysTick_Handler+0x18>)
    1aca:	681b      	ldr	r3, [r3, #0]
    1acc:	3301      	adds	r3, #1
    1ace:	4a03      	ldr	r2, [pc, #12]	; (1adc <SysTick_Handler+0x18>)
    1ad0:	6013      	str	r3, [r2, #0]
}
    1ad2:	46bd      	mov	sp, r7
    1ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ad8:	4770      	bx	lr
    1ada:	bf00      	nop
    1adc:	1000091c 	.word	0x1000091c

00001ae0 <DelayMs>:

void DelayMs(unsigned int t) // 65536 max.
{
    1ae0:	b480      	push	{r7}
    1ae2:	b085      	sub	sp, #20
    1ae4:	af00      	add	r7, sp, #0
    1ae6:	6078      	str	r0, [r7, #4]
	unsigned long temp;
	temp = STT_Value;
    1ae8:	4b07      	ldr	r3, [pc, #28]	; (1b08 <DelayMs+0x28>)
    1aea:	681b      	ldr	r3, [r3, #0]
    1aec:	60fb      	str	r3, [r7, #12]
	while ((STT_Value - temp) < t);
    1aee:	bf00      	nop
    1af0:	4b05      	ldr	r3, [pc, #20]	; (1b08 <DelayMs+0x28>)
    1af2:	681a      	ldr	r2, [r3, #0]
    1af4:	68fb      	ldr	r3, [r7, #12]
    1af6:	1ad2      	subs	r2, r2, r3
    1af8:	687b      	ldr	r3, [r7, #4]
    1afa:	429a      	cmp	r2, r3
    1afc:	d3f8      	bcc.n	1af0 <DelayMs+0x10>
}
    1afe:	3714      	adds	r7, #20
    1b00:	46bd      	mov	sp, r7
    1b02:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b06:	4770      	bx	lr
    1b08:	1000091c 	.word	0x1000091c

00001b0c <Trace>:
#include <stdio.h>
#include <trace.h>


void Trace( char* msg)
{
    1b0c:	b580      	push	{r7, lr}
    1b0e:	b082      	sub	sp, #8
    1b10:	af00      	add	r7, sp, #0
    1b12:	6078      	str	r0, [r7, #4]
	UARTSend( PORT_TRACE, msg, strlen(msg) );
    1b14:	6878      	ldr	r0, [r7, #4]
    1b16:	f002 ff33 	bl	4980 <strlen>
    1b1a:	4603      	mov	r3, r0
    1b1c:	2000      	movs	r0, #0
    1b1e:	6879      	ldr	r1, [r7, #4]
    1b20:	461a      	mov	r2, r3
    1b22:	f000 fce7 	bl	24f4 <UARTSend>
}
    1b26:	3708      	adds	r7, #8
    1b28:	46bd      	mov	sp, r7
    1b2a:	bd80      	pop	{r7, pc}

00001b2c <TraceNL>:

void TraceNL( char* msg)
{
    1b2c:	b580      	push	{r7, lr}
    1b2e:	b082      	sub	sp, #8
    1b30:	af00      	add	r7, sp, #0
    1b32:	6078      	str	r0, [r7, #4]
	UARTSend(PORT_TRACE, msg, strlen(msg));
    1b34:	6878      	ldr	r0, [r7, #4]
    1b36:	f002 ff23 	bl	4980 <strlen>
    1b3a:	4603      	mov	r3, r0
    1b3c:	2000      	movs	r0, #0
    1b3e:	6879      	ldr	r1, [r7, #4]
    1b40:	461a      	mov	r2, r3
    1b42:	f000 fcd7 	bl	24f4 <UARTSend>
	UARTSend(PORT_TRACE, "\r\n", 2);
    1b46:	2000      	movs	r0, #0
    1b48:	4903      	ldr	r1, [pc, #12]	; (1b58 <TraceNL+0x2c>)
    1b4a:	2202      	movs	r2, #2
    1b4c:	f000 fcd2 	bl	24f4 <UARTSend>
}
    1b50:	3708      	adds	r7, #8
    1b52:	46bd      	mov	sp, r7
    1b54:	bd80      	pop	{r7, pc}
    1b56:	bf00      	nop
    1b58:	0000614c 	.word	0x0000614c

00001b5c <TracePutcHex>:
{
	UARTSend(PORT_TRACE, &c, 1L);
}

void TracePutcHex( char c )
{
    1b5c:	b580      	push	{r7, lr}
    1b5e:	b086      	sub	sp, #24
    1b60:	af00      	add	r7, sp, #0
    1b62:	4603      	mov	r3, r0
    1b64:	71fb      	strb	r3, [r7, #7]
	char  buff[10];
    int count;
	count = sprintf( buff, "%02x", c);
    1b66:	79fb      	ldrb	r3, [r7, #7]
    1b68:	f107 0208 	add.w	r2, r7, #8
    1b6c:	4610      	mov	r0, r2
    1b6e:	4908      	ldr	r1, [pc, #32]	; (1b90 <TracePutcHex+0x34>)
    1b70:	461a      	mov	r2, r3
    1b72:	f001 fa9f 	bl	30b4 <sprintf>
    1b76:	6178      	str	r0, [r7, #20]
	UARTSend( PORT_TRACE, buff, count );
    1b78:	697b      	ldr	r3, [r7, #20]
    1b7a:	f107 0208 	add.w	r2, r7, #8
    1b7e:	2000      	movs	r0, #0
    1b80:	4611      	mov	r1, r2
    1b82:	461a      	mov	r2, r3
    1b84:	f000 fcb6 	bl	24f4 <UARTSend>

}
    1b88:	3718      	adds	r7, #24
    1b8a:	46bd      	mov	sp, r7
    1b8c:	bd80      	pop	{r7, pc}
    1b8e:	bf00      	nop
    1b90:	00006150 	.word	0x00006150

00001b94 <TraceDumpHex>:

void TraceDumpHex( char* pMsg, int len )
{
    1b94:	b580      	push	{r7, lr}
    1b96:	b0d6      	sub	sp, #344	; 0x158
    1b98:	af00      	add	r7, sp, #0
    1b9a:	1d3b      	adds	r3, r7, #4
    1b9c:	6018      	str	r0, [r3, #0]
    1b9e:	463b      	mov	r3, r7
    1ba0:	6019      	str	r1, [r3, #0]
#if defined (BOOTROM_DEBUG)

	int i, count;
	char buffer[300];
	char buff[17];
	char *pc = pMsg;
    1ba2:	1d3b      	adds	r3, r7, #4
    1ba4:	681b      	ldr	r3, [r3, #0]
    1ba6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

	UARTSend( PORT_TRACE, "\r\n", 2);
    1baa:	2000      	movs	r0, #0
    1bac:	495a      	ldr	r1, [pc, #360]	; (1d18 <TraceDumpHex+0x184>)
    1bae:	2202      	movs	r2, #2
    1bb0:	f000 fca0 	bl	24f4 <UARTSend>
	// Process every byte in the data.
	for (i = 0; i < len; i++) {
    1bb4:	2300      	movs	r3, #0
    1bb6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    1bba:	e07d      	b.n	1cb8 <TraceDumpHex+0x124>
		// Multiple of 16 means new line (with line offset).

		if ((i % 16) == 0) {
    1bbc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1bc0:	f003 030f 	and.w	r3, r3, #15
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d117      	bne.n	1bf8 <TraceDumpHex+0x64>
			// Just don't print ASCII for the zeroth line.
			if (i != 0) {
    1bc8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d013      	beq.n	1bf8 <TraceDumpHex+0x64>
				count = sprintf(buffer, "  %s\r\n", buff);
    1bd0:	f107 0220 	add.w	r2, r7, #32
    1bd4:	f107 030c 	add.w	r3, r7, #12
    1bd8:	4610      	mov	r0, r2
    1bda:	4950      	ldr	r1, [pc, #320]	; (1d1c <TraceDumpHex+0x188>)
    1bdc:	461a      	mov	r2, r3
    1bde:	f001 fa69 	bl	30b4 <sprintf>
    1be2:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
				UARTSend( PORT_TRACE, buffer, count);
    1be6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    1bea:	f107 0220 	add.w	r2, r7, #32
    1bee:	2000      	movs	r0, #0
    1bf0:	4611      	mov	r1, r2
    1bf2:	461a      	mov	r2, r3
    1bf4:	f000 fc7e 	bl	24f4 <UARTSend>
			}
		}
		count = sprintf(buffer, " %02x", pc[i]);
    1bf8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1bfc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    1c00:	4413      	add	r3, r2
    1c02:	781b      	ldrb	r3, [r3, #0]
    1c04:	461a      	mov	r2, r3
    1c06:	f107 0320 	add.w	r3, r7, #32
    1c0a:	4618      	mov	r0, r3
    1c0c:	4944      	ldr	r1, [pc, #272]	; (1d20 <TraceDumpHex+0x18c>)
    1c0e:	f001 fa51 	bl	30b4 <sprintf>
    1c12:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
		UARTSend( PORT_TRACE, buffer, count );
    1c16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    1c1a:	f107 0220 	add.w	r2, r7, #32
    1c1e:	2000      	movs	r0, #0
    1c20:	4611      	mov	r1, r2
    1c22:	461a      	mov	r2, r3
    1c24:	f000 fc66 	bl	24f4 <UARTSend>

		// And store a printable ASCII character for later.
		if ((pc[i] < 0x20) || (pc[i] > 0x7e))
    1c28:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1c2c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    1c30:	4413      	add	r3, r2
    1c32:	781b      	ldrb	r3, [r3, #0]
    1c34:	2b1f      	cmp	r3, #31
    1c36:	d907      	bls.n	1c48 <TraceDumpHex+0xb4>
    1c38:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1c3c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    1c40:	4413      	add	r3, r2
    1c42:	781b      	ldrb	r3, [r3, #0]
    1c44:	2b7e      	cmp	r3, #126	; 0x7e
    1c46:	d90f      	bls.n	1c68 <TraceDumpHex+0xd4>
			buff[i % 16] = '.';
    1c48:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    1c4c:	4b35      	ldr	r3, [pc, #212]	; (1d24 <TraceDumpHex+0x190>)
    1c4e:	4013      	ands	r3, r2
    1c50:	2b00      	cmp	r3, #0
    1c52:	da03      	bge.n	1c5c <TraceDumpHex+0xc8>
    1c54:	3b01      	subs	r3, #1
    1c56:	f063 030f 	orn	r3, r3, #15
    1c5a:	3301      	adds	r3, #1
    1c5c:	461a      	mov	r2, r3
    1c5e:	f107 030c 	add.w	r3, r7, #12
    1c62:	212e      	movs	r1, #46	; 0x2e
    1c64:	5499      	strb	r1, [r3, r2]
    1c66:	e013      	b.n	1c90 <TraceDumpHex+0xfc>
		else
			buff[i % 16] = pc[i];
    1c68:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    1c6c:	4b2d      	ldr	r3, [pc, #180]	; (1d24 <TraceDumpHex+0x190>)
    1c6e:	4013      	ands	r3, r2
    1c70:	2b00      	cmp	r3, #0
    1c72:	da03      	bge.n	1c7c <TraceDumpHex+0xe8>
    1c74:	3b01      	subs	r3, #1
    1c76:	f063 030f 	orn	r3, r3, #15
    1c7a:	3301      	adds	r3, #1
    1c7c:	4619      	mov	r1, r3
    1c7e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1c82:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    1c86:	4413      	add	r3, r2
    1c88:	781a      	ldrb	r2, [r3, #0]
    1c8a:	f107 030c 	add.w	r3, r7, #12
    1c8e:	545a      	strb	r2, [r3, r1]
		buff[(i % 16) + 1] = '\0';
    1c90:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    1c94:	4b23      	ldr	r3, [pc, #140]	; (1d24 <TraceDumpHex+0x190>)
    1c96:	4013      	ands	r3, r2
    1c98:	2b00      	cmp	r3, #0
    1c9a:	da03      	bge.n	1ca4 <TraceDumpHex+0x110>
    1c9c:	3b01      	subs	r3, #1
    1c9e:	f063 030f 	orn	r3, r3, #15
    1ca2:	3301      	adds	r3, #1
    1ca4:	3301      	adds	r3, #1
    1ca6:	f107 020c 	add.w	r2, r7, #12
    1caa:	2100      	movs	r1, #0
    1cac:	54d1      	strb	r1, [r2, r3]
	char buff[17];
	char *pc = pMsg;

	UARTSend( PORT_TRACE, "\r\n", 2);
	// Process every byte in the data.
	for (i = 0; i < len; i++) {
    1cae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1cb2:	3301      	adds	r3, #1
    1cb4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    1cb8:	463b      	mov	r3, r7
    1cba:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    1cbe:	681b      	ldr	r3, [r3, #0]
    1cc0:	429a      	cmp	r2, r3
    1cc2:	f6ff af7b 	blt.w	1bbc <TraceDumpHex+0x28>
			buff[i % 16] = pc[i];
		buff[(i % 16) + 1] = '\0';
	}

    // Pad out last line if not exactly 16 characters.
    while ((i % 16) != 0) {
    1cc6:	e009      	b.n	1cdc <TraceDumpHex+0x148>
    	UARTSend( PORT_TRACE, "   ", 3);
    1cc8:	2000      	movs	r0, #0
    1cca:	4917      	ldr	r1, [pc, #92]	; (1d28 <TraceDumpHex+0x194>)
    1ccc:	2203      	movs	r2, #3
    1cce:	f000 fc11 	bl	24f4 <UARTSend>
        i++;
    1cd2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1cd6:	3301      	adds	r3, #1
    1cd8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			buff[i % 16] = pc[i];
		buff[(i % 16) + 1] = '\0';
	}

    // Pad out last line if not exactly 16 characters.
    while ((i % 16) != 0) {
    1cdc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    1ce0:	f003 030f 	and.w	r3, r3, #15
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	d1ef      	bne.n	1cc8 <TraceDumpHex+0x134>
    	UARTSend( PORT_TRACE, "   ", 3);
        i++;
    }
	count = sprintf(buffer, "  %s\r\n", buff);
    1ce8:	f107 0220 	add.w	r2, r7, #32
    1cec:	f107 030c 	add.w	r3, r7, #12
    1cf0:	4610      	mov	r0, r2
    1cf2:	490a      	ldr	r1, [pc, #40]	; (1d1c <TraceDumpHex+0x188>)
    1cf4:	461a      	mov	r2, r3
    1cf6:	f001 f9dd 	bl	30b4 <sprintf>
    1cfa:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
	UARTSend( PORT_TRACE, buffer, count);
    1cfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    1d02:	f107 0220 	add.w	r2, r7, #32
    1d06:	2000      	movs	r0, #0
    1d08:	4611      	mov	r1, r2
    1d0a:	461a      	mov	r2, r3
    1d0c:	f000 fbf2 	bl	24f4 <UARTSend>
#endif
}
    1d10:	f507 77ac 	add.w	r7, r7, #344	; 0x158
    1d14:	46bd      	mov	sp, r7
    1d16:	bd80      	pop	{r7, pc}
    1d18:	0000614c 	.word	0x0000614c
    1d1c:	00006158 	.word	0x00006158
    1d20:	00006160 	.word	0x00006160
    1d24:	8000000f 	.word	0x8000000f
    1d28:	00006168 	.word	0x00006168

00001d2c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1d2c:	b480      	push	{r7}
    1d2e:	b083      	sub	sp, #12
    1d30:	af00      	add	r7, sp, #0
    1d32:	4603      	mov	r3, r0
    1d34:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1d36:	4908      	ldr	r1, [pc, #32]	; (1d58 <NVIC_EnableIRQ+0x2c>)
    1d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1d3c:	095b      	lsrs	r3, r3, #5
    1d3e:	79fa      	ldrb	r2, [r7, #7]
    1d40:	f002 021f 	and.w	r2, r2, #31
    1d44:	2001      	movs	r0, #1
    1d46:	fa00 f202 	lsl.w	r2, r0, r2
    1d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1d4e:	370c      	adds	r7, #12
    1d50:	46bd      	mov	sp, r7
    1d52:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d56:	4770      	bx	lr
    1d58:	e000e100 	.word	0xe000e100

00001d5c <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
    1d5c:	b480      	push	{r7}
    1d5e:	b083      	sub	sp, #12
    1d60:	af00      	add	r7, sp, #0
    1d62:	4603      	mov	r3, r0
    1d64:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    1d66:	4909      	ldr	r1, [pc, #36]	; (1d8c <NVIC_DisableIRQ+0x30>)
    1d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1d6c:	095b      	lsrs	r3, r3, #5
    1d6e:	79fa      	ldrb	r2, [r7, #7]
    1d70:	f002 021f 	and.w	r2, r2, #31
    1d74:	2001      	movs	r0, #1
    1d76:	fa00 f202 	lsl.w	r2, r0, r2
    1d7a:	3320      	adds	r3, #32
    1d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1d80:	370c      	adds	r7, #12
    1d82:	46bd      	mov	sp, r7
    1d84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d88:	4770      	bx	lr
    1d8a:	bf00      	nop
    1d8c:	e000e100 	.word	0xe000e100

00001d90 <UART0_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART0_IRQHandler(void) {
    1d90:	b480      	push	{r7}
    1d92:	b083      	sub	sp, #12
    1d94:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART0->IIR;
    1d96:	4b3c      	ldr	r3, [pc, #240]	; (1e88 <UART0_IRQHandler+0xf8>)
    1d98:	689b      	ldr	r3, [r3, #8]
    1d9a:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    1d9c:	79bb      	ldrb	r3, [r7, #6]
    1d9e:	085b      	lsrs	r3, r3, #1
    1da0:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    1da2:	79bb      	ldrb	r3, [r7, #6]
    1da4:	f003 0307 	and.w	r3, r3, #7
    1da8:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    1daa:	79bb      	ldrb	r3, [r7, #6]
    1dac:	2b03      	cmp	r3, #3
    1dae:	d12d      	bne.n	1e0c <UART0_IRQHandler+0x7c>
	{
		LSRValue = LPC_UART0->LSR;
    1db0:	4b35      	ldr	r3, [pc, #212]	; (1e88 <UART0_IRQHandler+0xf8>)
    1db2:	7d1b      	ldrb	r3, [r3, #20]
    1db4:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    1db6:	797b      	ldrb	r3, [r7, #5]
    1db8:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d006      	beq.n	1dce <UART0_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART0Status = LSRValue;
    1dc0:	797b      	ldrb	r3, [r7, #5]
    1dc2:	4a32      	ldr	r2, [pc, #200]	; (1e8c <UART0_IRQHandler+0xfc>)
    1dc4:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART0->RBR; /* Dummy read on RX to clear
    1dc6:	4b30      	ldr	r3, [pc, #192]	; (1e88 <UART0_IRQHandler+0xf8>)
    1dc8:	781b      	ldrb	r3, [r3, #0]
    1dca:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    1dcc:	e057      	b.n	1e7e <UART0_IRQHandler+0xee>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    1dce:	797b      	ldrb	r3, [r7, #5]
    1dd0:	f003 0301 	and.w	r3, r3, #1
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	d052      	beq.n	1e7e <UART0_IRQHandler+0xee>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART0Buffer[UART0Count] = LPC_UART0->RBR;
    1dd8:	4b2d      	ldr	r3, [pc, #180]	; (1e90 <UART0_IRQHandler+0x100>)
    1dda:	881b      	ldrh	r3, [r3, #0]
    1ddc:	b29b      	uxth	r3, r3
    1dde:	461a      	mov	r2, r3
    1de0:	4b29      	ldr	r3, [pc, #164]	; (1e88 <UART0_IRQHandler+0xf8>)
    1de2:	781b      	ldrb	r3, [r3, #0]
    1de4:	b2d9      	uxtb	r1, r3
    1de6:	4b2b      	ldr	r3, [pc, #172]	; (1e94 <UART0_IRQHandler+0x104>)
    1de8:	5499      	strb	r1, [r3, r2]
			UART0Count++;
    1dea:	4b29      	ldr	r3, [pc, #164]	; (1e90 <UART0_IRQHandler+0x100>)
    1dec:	881b      	ldrh	r3, [r3, #0]
    1dee:	b29b      	uxth	r3, r3
    1df0:	3301      	adds	r3, #1
    1df2:	b29a      	uxth	r2, r3
    1df4:	4b26      	ldr	r3, [pc, #152]	; (1e90 <UART0_IRQHandler+0x100>)
    1df6:	801a      	strh	r2, [r3, #0]
			if (UART0Count == BUFSIZE) {
    1df8:	4b25      	ldr	r3, [pc, #148]	; (1e90 <UART0_IRQHandler+0x100>)
    1dfa:	881b      	ldrh	r3, [r3, #0]
    1dfc:	b29b      	uxth	r3, r3
    1dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    1e02:	d13c      	bne.n	1e7e <UART0_IRQHandler+0xee>
				UART0Count = 0; /* buffer overflow */
    1e04:	4b22      	ldr	r3, [pc, #136]	; (1e90 <UART0_IRQHandler+0x100>)
    1e06:	2200      	movs	r2, #0
    1e08:	801a      	strh	r2, [r3, #0]
    1e0a:	e038      	b.n	1e7e <UART0_IRQHandler+0xee>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    1e0c:	79bb      	ldrb	r3, [r7, #6]
    1e0e:	2b02      	cmp	r3, #2
    1e10:	d119      	bne.n	1e46 <UART0_IRQHandler+0xb6>
	{
		/* Receive Data Available */
		UART0Buffer[UART0Count] = LPC_UART0->RBR;
    1e12:	4b1f      	ldr	r3, [pc, #124]	; (1e90 <UART0_IRQHandler+0x100>)
    1e14:	881b      	ldrh	r3, [r3, #0]
    1e16:	b29b      	uxth	r3, r3
    1e18:	461a      	mov	r2, r3
    1e1a:	4b1b      	ldr	r3, [pc, #108]	; (1e88 <UART0_IRQHandler+0xf8>)
    1e1c:	781b      	ldrb	r3, [r3, #0]
    1e1e:	b2d9      	uxtb	r1, r3
    1e20:	4b1c      	ldr	r3, [pc, #112]	; (1e94 <UART0_IRQHandler+0x104>)
    1e22:	5499      	strb	r1, [r3, r2]
		UART0Count++;
    1e24:	4b1a      	ldr	r3, [pc, #104]	; (1e90 <UART0_IRQHandler+0x100>)
    1e26:	881b      	ldrh	r3, [r3, #0]
    1e28:	b29b      	uxth	r3, r3
    1e2a:	3301      	adds	r3, #1
    1e2c:	b29a      	uxth	r2, r3
    1e2e:	4b18      	ldr	r3, [pc, #96]	; (1e90 <UART0_IRQHandler+0x100>)
    1e30:	801a      	strh	r2, [r3, #0]
		if (UART0Count == BUFSIZE) {
    1e32:	4b17      	ldr	r3, [pc, #92]	; (1e90 <UART0_IRQHandler+0x100>)
    1e34:	881b      	ldrh	r3, [r3, #0]
    1e36:	b29b      	uxth	r3, r3
    1e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    1e3c:	d11f      	bne.n	1e7e <UART0_IRQHandler+0xee>
			UART0Count = 0; /* buffer overflow */
    1e3e:	4b14      	ldr	r3, [pc, #80]	; (1e90 <UART0_IRQHandler+0x100>)
    1e40:	2200      	movs	r2, #0
    1e42:	801a      	strh	r2, [r3, #0]
    1e44:	e01b      	b.n	1e7e <UART0_IRQHandler+0xee>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    1e46:	79bb      	ldrb	r3, [r7, #6]
    1e48:	2b06      	cmp	r3, #6
    1e4a:	d106      	bne.n	1e5a <UART0_IRQHandler+0xca>
	{
		/* Character Time-out indicator */
		UART0Status |= 0x100; /* Bit 9 as the CTI error */
    1e4c:	4b0f      	ldr	r3, [pc, #60]	; (1e8c <UART0_IRQHandler+0xfc>)
    1e4e:	681b      	ldr	r3, [r3, #0]
    1e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1e54:	4a0d      	ldr	r2, [pc, #52]	; (1e8c <UART0_IRQHandler+0xfc>)
    1e56:	6013      	str	r3, [r2, #0]
    1e58:	e011      	b.n	1e7e <UART0_IRQHandler+0xee>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    1e5a:	79bb      	ldrb	r3, [r7, #6]
    1e5c:	2b01      	cmp	r3, #1
    1e5e:	d10e      	bne.n	1e7e <UART0_IRQHandler+0xee>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART0->LSR; /* Check status in the LSR to see if
    1e60:	4b09      	ldr	r3, [pc, #36]	; (1e88 <UART0_IRQHandler+0xf8>)
    1e62:	7d1b      	ldrb	r3, [r3, #20]
    1e64:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    1e66:	797b      	ldrb	r3, [r7, #5]
    1e68:	f003 0320 	and.w	r3, r3, #32
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	d003      	beq.n	1e78 <UART0_IRQHandler+0xe8>
			UART0TxEmpty = 1;
    1e70:	4b09      	ldr	r3, [pc, #36]	; (1e98 <UART0_IRQHandler+0x108>)
    1e72:	2201      	movs	r2, #1
    1e74:	701a      	strb	r2, [r3, #0]
    1e76:	e002      	b.n	1e7e <UART0_IRQHandler+0xee>
		} else {
			UART0TxEmpty = 0;
    1e78:	4b07      	ldr	r3, [pc, #28]	; (1e98 <UART0_IRQHandler+0x108>)
    1e7a:	2200      	movs	r2, #0
    1e7c:	701a      	strb	r2, [r3, #0]
		}
	}
}
    1e7e:	370c      	adds	r7, #12
    1e80:	46bd      	mov	sp, r7
    1e82:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e86:	4770      	bx	lr
    1e88:	4000c000 	.word	0x4000c000
    1e8c:	10001c60 	.word	0x10001c60
    1e90:	1000003c 	.word	0x1000003c
    1e94:	10001260 	.word	0x10001260
    1e98:	10000020 	.word	0x10000020

00001e9c <UART1_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART1_IRQHandler(void) {
    1e9c:	b480      	push	{r7}
    1e9e:	b083      	sub	sp, #12
    1ea0:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART1->IIR;
    1ea2:	4b3d      	ldr	r3, [pc, #244]	; (1f98 <UART1_IRQHandler+0xfc>)
    1ea4:	689b      	ldr	r3, [r3, #8]
    1ea6:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    1ea8:	79bb      	ldrb	r3, [r7, #6]
    1eaa:	085b      	lsrs	r3, r3, #1
    1eac:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    1eae:	79bb      	ldrb	r3, [r7, #6]
    1eb0:	f003 0307 	and.w	r3, r3, #7
    1eb4:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    1eb6:	79bb      	ldrb	r3, [r7, #6]
    1eb8:	2b03      	cmp	r3, #3
    1eba:	d12e      	bne.n	1f1a <UART1_IRQHandler+0x7e>
	{
		LSRValue = LPC_UART1->LSR;
    1ebc:	4b36      	ldr	r3, [pc, #216]	; (1f98 <UART1_IRQHandler+0xfc>)
    1ebe:	7d1b      	ldrb	r3, [r3, #20]
    1ec0:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    1ec2:	797b      	ldrb	r3, [r7, #5]
    1ec4:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    1ec8:	2b00      	cmp	r3, #0
    1eca:	d006      	beq.n	1eda <UART1_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART1Status = LSRValue;
    1ecc:	797b      	ldrb	r3, [r7, #5]
    1ece:	4a33      	ldr	r2, [pc, #204]	; (1f9c <UART1_IRQHandler+0x100>)
    1ed0:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART1->RBR; /* Dummy read on RX to clear
    1ed2:	4b31      	ldr	r3, [pc, #196]	; (1f98 <UART1_IRQHandler+0xfc>)
    1ed4:	781b      	ldrb	r3, [r3, #0]
    1ed6:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    1ed8:	e059      	b.n	1f8e <UART1_IRQHandler+0xf2>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    1eda:	797b      	ldrb	r3, [r7, #5]
    1edc:	f003 0301 	and.w	r3, r3, #1
    1ee0:	2b00      	cmp	r3, #0
    1ee2:	d054      	beq.n	1f8e <UART1_IRQHandler+0xf2>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART1Buffer[UART1Count] = LPC_UART1->RBR;
    1ee4:	4b2e      	ldr	r3, [pc, #184]	; (1fa0 <UART1_IRQHandler+0x104>)
    1ee6:	881b      	ldrh	r3, [r3, #0]
    1ee8:	b29b      	uxth	r3, r3
    1eea:	461a      	mov	r2, r3
    1eec:	4b2a      	ldr	r3, [pc, #168]	; (1f98 <UART1_IRQHandler+0xfc>)
    1eee:	781b      	ldrb	r3, [r3, #0]
    1ef0:	b2d9      	uxtb	r1, r3
    1ef2:	4b2c      	ldr	r3, [pc, #176]	; (1fa4 <UART1_IRQHandler+0x108>)
    1ef4:	5499      	strb	r1, [r3, r2]
			UART1Count++;
    1ef6:	4b2a      	ldr	r3, [pc, #168]	; (1fa0 <UART1_IRQHandler+0x104>)
    1ef8:	881b      	ldrh	r3, [r3, #0]
    1efa:	b29b      	uxth	r3, r3
    1efc:	3301      	adds	r3, #1
    1efe:	b29a      	uxth	r2, r3
    1f00:	4b27      	ldr	r3, [pc, #156]	; (1fa0 <UART1_IRQHandler+0x104>)
    1f02:	801a      	strh	r2, [r3, #0]
			if (UART1Count == GSM_UART_BUFFER_SIZE) {
    1f04:	4b26      	ldr	r3, [pc, #152]	; (1fa0 <UART1_IRQHandler+0x104>)
    1f06:	881b      	ldrh	r3, [r3, #0]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	f240 424c 	movw	r2, #1100	; 0x44c
    1f0e:	4293      	cmp	r3, r2
    1f10:	d13d      	bne.n	1f8e <UART1_IRQHandler+0xf2>
				UART1Count = 0; /* buffer overflow */
    1f12:	4b23      	ldr	r3, [pc, #140]	; (1fa0 <UART1_IRQHandler+0x104>)
    1f14:	2200      	movs	r2, #0
    1f16:	801a      	strh	r2, [r3, #0]
    1f18:	e039      	b.n	1f8e <UART1_IRQHandler+0xf2>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    1f1a:	79bb      	ldrb	r3, [r7, #6]
    1f1c:	2b02      	cmp	r3, #2
    1f1e:	d11a      	bne.n	1f56 <UART1_IRQHandler+0xba>
	{
		/* Receive Data Available */
		UART1Buffer[UART1Count] = LPC_UART1->RBR;
    1f20:	4b1f      	ldr	r3, [pc, #124]	; (1fa0 <UART1_IRQHandler+0x104>)
    1f22:	881b      	ldrh	r3, [r3, #0]
    1f24:	b29b      	uxth	r3, r3
    1f26:	461a      	mov	r2, r3
    1f28:	4b1b      	ldr	r3, [pc, #108]	; (1f98 <UART1_IRQHandler+0xfc>)
    1f2a:	781b      	ldrb	r3, [r3, #0]
    1f2c:	b2d9      	uxtb	r1, r3
    1f2e:	4b1d      	ldr	r3, [pc, #116]	; (1fa4 <UART1_IRQHandler+0x108>)
    1f30:	5499      	strb	r1, [r3, r2]
		UART1Count++;
    1f32:	4b1b      	ldr	r3, [pc, #108]	; (1fa0 <UART1_IRQHandler+0x104>)
    1f34:	881b      	ldrh	r3, [r3, #0]
    1f36:	b29b      	uxth	r3, r3
    1f38:	3301      	adds	r3, #1
    1f3a:	b29a      	uxth	r2, r3
    1f3c:	4b18      	ldr	r3, [pc, #96]	; (1fa0 <UART1_IRQHandler+0x104>)
    1f3e:	801a      	strh	r2, [r3, #0]
		if (UART1Count == GSM_UART_BUFFER_SIZE) {
    1f40:	4b17      	ldr	r3, [pc, #92]	; (1fa0 <UART1_IRQHandler+0x104>)
    1f42:	881b      	ldrh	r3, [r3, #0]
    1f44:	b29b      	uxth	r3, r3
    1f46:	f240 424c 	movw	r2, #1100	; 0x44c
    1f4a:	4293      	cmp	r3, r2
    1f4c:	d11f      	bne.n	1f8e <UART1_IRQHandler+0xf2>
			UART1Count = 0; /* buffer overflow */
    1f4e:	4b14      	ldr	r3, [pc, #80]	; (1fa0 <UART1_IRQHandler+0x104>)
    1f50:	2200      	movs	r2, #0
    1f52:	801a      	strh	r2, [r3, #0]
    1f54:	e01b      	b.n	1f8e <UART1_IRQHandler+0xf2>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    1f56:	79bb      	ldrb	r3, [r7, #6]
    1f58:	2b06      	cmp	r3, #6
    1f5a:	d106      	bne.n	1f6a <UART1_IRQHandler+0xce>
	{
		/* Character Time-out indicator */
		UART1Status |= 0x100; /* Bit 9 as the CTI error */
    1f5c:	4b0f      	ldr	r3, [pc, #60]	; (1f9c <UART1_IRQHandler+0x100>)
    1f5e:	681b      	ldr	r3, [r3, #0]
    1f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1f64:	4a0d      	ldr	r2, [pc, #52]	; (1f9c <UART1_IRQHandler+0x100>)
    1f66:	6013      	str	r3, [r2, #0]
    1f68:	e011      	b.n	1f8e <UART1_IRQHandler+0xf2>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    1f6a:	79bb      	ldrb	r3, [r7, #6]
    1f6c:	2b01      	cmp	r3, #1
    1f6e:	d10e      	bne.n	1f8e <UART1_IRQHandler+0xf2>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART1->LSR; /* Check status in the LSR to see if
    1f70:	4b09      	ldr	r3, [pc, #36]	; (1f98 <UART1_IRQHandler+0xfc>)
    1f72:	7d1b      	ldrb	r3, [r3, #20]
    1f74:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    1f76:	797b      	ldrb	r3, [r7, #5]
    1f78:	f003 0320 	and.w	r3, r3, #32
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d003      	beq.n	1f88 <UART1_IRQHandler+0xec>
			UART1TxEmpty = 1;
    1f80:	4b09      	ldr	r3, [pc, #36]	; (1fa8 <UART1_IRQHandler+0x10c>)
    1f82:	2201      	movs	r2, #1
    1f84:	701a      	strb	r2, [r3, #0]
    1f86:	e002      	b.n	1f8e <UART1_IRQHandler+0xf2>
		} else {
			UART1TxEmpty = 0;
    1f88:	4b07      	ldr	r3, [pc, #28]	; (1fa8 <UART1_IRQHandler+0x10c>)
    1f8a:	2200      	movs	r2, #0
    1f8c:	701a      	strb	r2, [r3, #0]
		}
	}

}
    1f8e:	370c      	adds	r7, #12
    1f90:	46bd      	mov	sp, r7
    1f92:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f96:	4770      	bx	lr
    1f98:	40010000 	.word	0x40010000
    1f9c:	10001360 	.word	0x10001360
    1fa0:	1000003e 	.word	0x1000003e
    1fa4:	10000e04 	.word	0x10000e04
    1fa8:	10000021 	.word	0x10000021

00001fac <UART2_IRQHandler>:

void UART2_IRQHandler(void) {
    1fac:	b480      	push	{r7}
    1fae:	b083      	sub	sp, #12
    1fb0:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;
	IIRValue = LPC_UART2->IIR;
    1fb2:	4b3c      	ldr	r3, [pc, #240]	; (20a4 <UART2_IRQHandler+0xf8>)
    1fb4:	689b      	ldr	r3, [r3, #8]
    1fb6:	71bb      	strb	r3, [r7, #6]
	IIRValue >>= 1; /* skip pending bit in IIR */
    1fb8:	79bb      	ldrb	r3, [r7, #6]
    1fba:	085b      	lsrs	r3, r3, #1
    1fbc:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    1fbe:	79bb      	ldrb	r3, [r7, #6]
    1fc0:	f003 0307 	and.w	r3, r3, #7
    1fc4:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    1fc6:	79bb      	ldrb	r3, [r7, #6]
    1fc8:	2b03      	cmp	r3, #3
    1fca:	d12d      	bne.n	2028 <UART2_IRQHandler+0x7c>
	{
		LSRValue = LPC_UART2->LSR;
    1fcc:	4b35      	ldr	r3, [pc, #212]	; (20a4 <UART2_IRQHandler+0xf8>)
    1fce:	7d1b      	ldrb	r3, [r3, #20]
    1fd0:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    1fd2:	797b      	ldrb	r3, [r7, #5]
    1fd4:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    1fd8:	2b00      	cmp	r3, #0
    1fda:	d006      	beq.n	1fea <UART2_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART2Status = LSRValue;
    1fdc:	797b      	ldrb	r3, [r7, #5]
    1fde:	4a32      	ldr	r2, [pc, #200]	; (20a8 <UART2_IRQHandler+0xfc>)
    1fe0:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART2->RBR; /* Dummy read on RX to clear
    1fe2:	4b30      	ldr	r3, [pc, #192]	; (20a4 <UART2_IRQHandler+0xf8>)
    1fe4:	781b      	ldrb	r3, [r3, #0]
    1fe6:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    1fe8:	e057      	b.n	209a <UART2_IRQHandler+0xee>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    1fea:	797b      	ldrb	r3, [r7, #5]
    1fec:	f003 0301 	and.w	r3, r3, #1
    1ff0:	2b00      	cmp	r3, #0
    1ff2:	d052      	beq.n	209a <UART2_IRQHandler+0xee>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART2Buffer[UART2Count] = LPC_UART2->RBR;
    1ff4:	4b2d      	ldr	r3, [pc, #180]	; (20ac <UART2_IRQHandler+0x100>)
    1ff6:	881b      	ldrh	r3, [r3, #0]
    1ff8:	b29b      	uxth	r3, r3
    1ffa:	461a      	mov	r2, r3
    1ffc:	4b29      	ldr	r3, [pc, #164]	; (20a4 <UART2_IRQHandler+0xf8>)
    1ffe:	781b      	ldrb	r3, [r3, #0]
    2000:	b2d9      	uxtb	r1, r3
    2002:	4b2b      	ldr	r3, [pc, #172]	; (20b0 <UART2_IRQHandler+0x104>)
    2004:	5499      	strb	r1, [r3, r2]
			UART2Count++;
    2006:	4b29      	ldr	r3, [pc, #164]	; (20ac <UART2_IRQHandler+0x100>)
    2008:	881b      	ldrh	r3, [r3, #0]
    200a:	b29b      	uxth	r3, r3
    200c:	3301      	adds	r3, #1
    200e:	b29a      	uxth	r2, r3
    2010:	4b26      	ldr	r3, [pc, #152]	; (20ac <UART2_IRQHandler+0x100>)
    2012:	801a      	strh	r2, [r3, #0]
			if (UART2Count >= UART2_BUFFSIZE) {
    2014:	4b25      	ldr	r3, [pc, #148]	; (20ac <UART2_IRQHandler+0x100>)
    2016:	881b      	ldrh	r3, [r3, #0]
    2018:	b29b      	uxth	r3, r3
    201a:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    201e:	d33c      	bcc.n	209a <UART2_IRQHandler+0xee>
				UART2Count = 0; /* buffer overflow */
    2020:	4b22      	ldr	r3, [pc, #136]	; (20ac <UART2_IRQHandler+0x100>)
    2022:	2200      	movs	r2, #0
    2024:	801a      	strh	r2, [r3, #0]
    2026:	e038      	b.n	209a <UART2_IRQHandler+0xee>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2028:	79bb      	ldrb	r3, [r7, #6]
    202a:	2b02      	cmp	r3, #2
    202c:	d119      	bne.n	2062 <UART2_IRQHandler+0xb6>
	{
		/* Receive Data Available */
		UART2Buffer[UART2Count] = LPC_UART2->RBR;
    202e:	4b1f      	ldr	r3, [pc, #124]	; (20ac <UART2_IRQHandler+0x100>)
    2030:	881b      	ldrh	r3, [r3, #0]
    2032:	b29b      	uxth	r3, r3
    2034:	461a      	mov	r2, r3
    2036:	4b1b      	ldr	r3, [pc, #108]	; (20a4 <UART2_IRQHandler+0xf8>)
    2038:	781b      	ldrb	r3, [r3, #0]
    203a:	b2d9      	uxtb	r1, r3
    203c:	4b1c      	ldr	r3, [pc, #112]	; (20b0 <UART2_IRQHandler+0x104>)
    203e:	5499      	strb	r1, [r3, r2]
		UART2Count++;
    2040:	4b1a      	ldr	r3, [pc, #104]	; (20ac <UART2_IRQHandler+0x100>)
    2042:	881b      	ldrh	r3, [r3, #0]
    2044:	b29b      	uxth	r3, r3
    2046:	3301      	adds	r3, #1
    2048:	b29a      	uxth	r2, r3
    204a:	4b18      	ldr	r3, [pc, #96]	; (20ac <UART2_IRQHandler+0x100>)
    204c:	801a      	strh	r2, [r3, #0]
		if (UART2Count >= UART2_BUFFSIZE) {
    204e:	4b17      	ldr	r3, [pc, #92]	; (20ac <UART2_IRQHandler+0x100>)
    2050:	881b      	ldrh	r3, [r3, #0]
    2052:	b29b      	uxth	r3, r3
    2054:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    2058:	d31f      	bcc.n	209a <UART2_IRQHandler+0xee>
			UART2Count = 0; /* buffer overflow */
    205a:	4b14      	ldr	r3, [pc, #80]	; (20ac <UART2_IRQHandler+0x100>)
    205c:	2200      	movs	r2, #0
    205e:	801a      	strh	r2, [r3, #0]
    2060:	e01b      	b.n	209a <UART2_IRQHandler+0xee>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2062:	79bb      	ldrb	r3, [r7, #6]
    2064:	2b06      	cmp	r3, #6
    2066:	d106      	bne.n	2076 <UART2_IRQHandler+0xca>
	{
		/* Character Time-out indicator */
		UART2Status |= 0x100; /* Bit 9 as the CTI error */
    2068:	4b0f      	ldr	r3, [pc, #60]	; (20a8 <UART2_IRQHandler+0xfc>)
    206a:	681b      	ldr	r3, [r3, #0]
    206c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2070:	4a0d      	ldr	r2, [pc, #52]	; (20a8 <UART2_IRQHandler+0xfc>)
    2072:	6013      	str	r3, [r2, #0]
    2074:	e011      	b.n	209a <UART2_IRQHandler+0xee>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2076:	79bb      	ldrb	r3, [r7, #6]
    2078:	2b01      	cmp	r3, #1
    207a:	d10e      	bne.n	209a <UART2_IRQHandler+0xee>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART2->LSR; /* Check status in the LSR to see if
    207c:	4b09      	ldr	r3, [pc, #36]	; (20a4 <UART2_IRQHandler+0xf8>)
    207e:	7d1b      	ldrb	r3, [r3, #20]
    2080:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    2082:	797b      	ldrb	r3, [r7, #5]
    2084:	f003 0320 	and.w	r3, r3, #32
    2088:	2b00      	cmp	r3, #0
    208a:	d003      	beq.n	2094 <UART2_IRQHandler+0xe8>
			UART2TxEmpty = 1;
    208c:	4b09      	ldr	r3, [pc, #36]	; (20b4 <UART2_IRQHandler+0x108>)
    208e:	2201      	movs	r2, #1
    2090:	701a      	strb	r2, [r3, #0]
    2092:	e002      	b.n	209a <UART2_IRQHandler+0xee>
		} else {
			UART2TxEmpty = 0;
    2094:	4b07      	ldr	r3, [pc, #28]	; (20b4 <UART2_IRQHandler+0x108>)
    2096:	2200      	movs	r2, #0
    2098:	701a      	strb	r2, [r3, #0]
		}
	}
}
    209a:	370c      	adds	r7, #12
    209c:	46bd      	mov	sp, r7
    209e:	f85d 7b04 	ldr.w	r7, [sp], #4
    20a2:	4770      	bx	lr
    20a4:	40098000 	.word	0x40098000
    20a8:	10001254 	.word	0x10001254
    20ac:	10000040 	.word	0x10000040
    20b0:	10001468 	.word	0x10001468
    20b4:	10000023 	.word	0x10000023

000020b8 <UART3_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART3_IRQHandler(void) {
    20b8:	b480      	push	{r7}
    20ba:	b083      	sub	sp, #12
    20bc:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART3->IIR;
    20be:	4b3c      	ldr	r3, [pc, #240]	; (21b0 <UART3_IRQHandler+0xf8>)
    20c0:	689b      	ldr	r3, [r3, #8]
    20c2:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    20c4:	79bb      	ldrb	r3, [r7, #6]
    20c6:	085b      	lsrs	r3, r3, #1
    20c8:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    20ca:	79bb      	ldrb	r3, [r7, #6]
    20cc:	f003 0307 	and.w	r3, r3, #7
    20d0:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    20d2:	79bb      	ldrb	r3, [r7, #6]
    20d4:	2b03      	cmp	r3, #3
    20d6:	d12d      	bne.n	2134 <UART3_IRQHandler+0x7c>
	{
		LSRValue = LPC_UART3->LSR;
    20d8:	4b35      	ldr	r3, [pc, #212]	; (21b0 <UART3_IRQHandler+0xf8>)
    20da:	7d1b      	ldrb	r3, [r3, #20]
    20dc:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    20de:	797b      	ldrb	r3, [r7, #5]
    20e0:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    20e4:	2b00      	cmp	r3, #0
    20e6:	d006      	beq.n	20f6 <UART3_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART3Status = LSRValue;
    20e8:	797b      	ldrb	r3, [r7, #5]
    20ea:	4a32      	ldr	r2, [pc, #200]	; (21b4 <UART3_IRQHandler+0xfc>)
    20ec:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART3->RBR; /* Dummy read on RX to clear
    20ee:	4b30      	ldr	r3, [pc, #192]	; (21b0 <UART3_IRQHandler+0xf8>)
    20f0:	781b      	ldrb	r3, [r3, #0]
    20f2:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    20f4:	e057      	b.n	21a6 <UART3_IRQHandler+0xee>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    20f6:	797b      	ldrb	r3, [r7, #5]
    20f8:	f003 0301 	and.w	r3, r3, #1
    20fc:	2b00      	cmp	r3, #0
    20fe:	d052      	beq.n	21a6 <UART3_IRQHandler+0xee>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART3Buffer[UART3Count] = LPC_UART3->RBR;
    2100:	4b2d      	ldr	r3, [pc, #180]	; (21b8 <UART3_IRQHandler+0x100>)
    2102:	881b      	ldrh	r3, [r3, #0]
    2104:	b29b      	uxth	r3, r3
    2106:	461a      	mov	r2, r3
    2108:	4b29      	ldr	r3, [pc, #164]	; (21b0 <UART3_IRQHandler+0xf8>)
    210a:	781b      	ldrb	r3, [r3, #0]
    210c:	b2d9      	uxtb	r1, r3
    210e:	4b2b      	ldr	r3, [pc, #172]	; (21bc <UART3_IRQHandler+0x104>)
    2110:	5499      	strb	r1, [r3, r2]
			UART3Count++;
    2112:	4b29      	ldr	r3, [pc, #164]	; (21b8 <UART3_IRQHandler+0x100>)
    2114:	881b      	ldrh	r3, [r3, #0]
    2116:	b29b      	uxth	r3, r3
    2118:	3301      	adds	r3, #1
    211a:	b29a      	uxth	r2, r3
    211c:	4b26      	ldr	r3, [pc, #152]	; (21b8 <UART3_IRQHandler+0x100>)
    211e:	801a      	strh	r2, [r3, #0]
			if (UART3Count == BUFSIZE) {
    2120:	4b25      	ldr	r3, [pc, #148]	; (21b8 <UART3_IRQHandler+0x100>)
    2122:	881b      	ldrh	r3, [r3, #0]
    2124:	b29b      	uxth	r3, r3
    2126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    212a:	d13c      	bne.n	21a6 <UART3_IRQHandler+0xee>
				UART3Count = 0; /* buffer overflow */
    212c:	4b22      	ldr	r3, [pc, #136]	; (21b8 <UART3_IRQHandler+0x100>)
    212e:	2200      	movs	r2, #0
    2130:	801a      	strh	r2, [r3, #0]
    2132:	e038      	b.n	21a6 <UART3_IRQHandler+0xee>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2134:	79bb      	ldrb	r3, [r7, #6]
    2136:	2b02      	cmp	r3, #2
    2138:	d119      	bne.n	216e <UART3_IRQHandler+0xb6>
	{
		/* Receive Data Available */
		UART3Buffer[UART3Count] = LPC_UART3->RBR;
    213a:	4b1f      	ldr	r3, [pc, #124]	; (21b8 <UART3_IRQHandler+0x100>)
    213c:	881b      	ldrh	r3, [r3, #0]
    213e:	b29b      	uxth	r3, r3
    2140:	461a      	mov	r2, r3
    2142:	4b1b      	ldr	r3, [pc, #108]	; (21b0 <UART3_IRQHandler+0xf8>)
    2144:	781b      	ldrb	r3, [r3, #0]
    2146:	b2d9      	uxtb	r1, r3
    2148:	4b1c      	ldr	r3, [pc, #112]	; (21bc <UART3_IRQHandler+0x104>)
    214a:	5499      	strb	r1, [r3, r2]
		UART3Count++;
    214c:	4b1a      	ldr	r3, [pc, #104]	; (21b8 <UART3_IRQHandler+0x100>)
    214e:	881b      	ldrh	r3, [r3, #0]
    2150:	b29b      	uxth	r3, r3
    2152:	3301      	adds	r3, #1
    2154:	b29a      	uxth	r2, r3
    2156:	4b18      	ldr	r3, [pc, #96]	; (21b8 <UART3_IRQHandler+0x100>)
    2158:	801a      	strh	r2, [r3, #0]
		if (UART3Count == BUFSIZE) {
    215a:	4b17      	ldr	r3, [pc, #92]	; (21b8 <UART3_IRQHandler+0x100>)
    215c:	881b      	ldrh	r3, [r3, #0]
    215e:	b29b      	uxth	r3, r3
    2160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2164:	d11f      	bne.n	21a6 <UART3_IRQHandler+0xee>
			UART3Count = 0; /* buffer overflow */
    2166:	4b14      	ldr	r3, [pc, #80]	; (21b8 <UART3_IRQHandler+0x100>)
    2168:	2200      	movs	r2, #0
    216a:	801a      	strh	r2, [r3, #0]
    216c:	e01b      	b.n	21a6 <UART3_IRQHandler+0xee>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    216e:	79bb      	ldrb	r3, [r7, #6]
    2170:	2b06      	cmp	r3, #6
    2172:	d106      	bne.n	2182 <UART3_IRQHandler+0xca>
	{
		/* Character Time-out indicator */
		UART3Status |= 0x100; /* Bit 9 as the CTI error */
    2174:	4b0f      	ldr	r3, [pc, #60]	; (21b4 <UART3_IRQHandler+0xfc>)
    2176:	681b      	ldr	r3, [r3, #0]
    2178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    217c:	4a0d      	ldr	r2, [pc, #52]	; (21b4 <UART3_IRQHandler+0xfc>)
    217e:	6013      	str	r3, [r2, #0]
    2180:	e011      	b.n	21a6 <UART3_IRQHandler+0xee>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2182:	79bb      	ldrb	r3, [r7, #6]
    2184:	2b01      	cmp	r3, #1
    2186:	d10e      	bne.n	21a6 <UART3_IRQHandler+0xee>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART3->LSR; /* Check status in the LSR to see if
    2188:	4b09      	ldr	r3, [pc, #36]	; (21b0 <UART3_IRQHandler+0xf8>)
    218a:	7d1b      	ldrb	r3, [r3, #20]
    218c:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    218e:	797b      	ldrb	r3, [r7, #5]
    2190:	f003 0320 	and.w	r3, r3, #32
    2194:	2b00      	cmp	r3, #0
    2196:	d003      	beq.n	21a0 <UART3_IRQHandler+0xe8>
			UART3TxEmpty = 1;
    2198:	4b09      	ldr	r3, [pc, #36]	; (21c0 <UART3_IRQHandler+0x108>)
    219a:	2201      	movs	r2, #1
    219c:	701a      	strb	r2, [r3, #0]
    219e:	e002      	b.n	21a6 <UART3_IRQHandler+0xee>
		} else {
			UART3TxEmpty = 0;
    21a0:	4b07      	ldr	r3, [pc, #28]	; (21c0 <UART3_IRQHandler+0x108>)
    21a2:	2200      	movs	r2, #0
    21a4:	701a      	strb	r2, [r3, #0]
		}
	}
}
    21a6:	370c      	adds	r7, #12
    21a8:	46bd      	mov	sp, r7
    21aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    21ae:	4770      	bx	lr
    21b0:	4009c000 	.word	0x4009c000
    21b4:	1000125c 	.word	0x1000125c
    21b8:	10000042 	.word	0x10000042
    21bc:	10001368 	.word	0x10001368
    21c0:	10000022 	.word	0x10000022

000021c4 <UARTInit>:
 ** Returned value:		true or false, return false only if the
 **						interrupt handler can't be installed to the
 **						VIC table
 **
 *****************************************************************************/
uint32_t UARTInit(uint32_t PortNum, uint32_t baudrate) {
    21c4:	b580      	push	{r7, lr}
    21c6:	b086      	sub	sp, #24
    21c8:	af00      	add	r7, sp, #0
    21ca:	6078      	str	r0, [r7, #4]
    21cc:	6039      	str	r1, [r7, #0]
	uint32_t Fdiv;
	uint32_t pclkdiv, pclk;
	if (PortNum == 0) {
    21ce:	687b      	ldr	r3, [r7, #4]
    21d0:	2b00      	cmp	r3, #0
    21d2:	d15b      	bne.n	228c <UARTInit+0xc8>
		LPC_PINCON->PINSEL0 &= ~0x000000F0;
    21d4:	4aa5      	ldr	r2, [pc, #660]	; (246c <UARTInit+0x2a8>)
    21d6:	4ba5      	ldr	r3, [pc, #660]	; (246c <UARTInit+0x2a8>)
    21d8:	681b      	ldr	r3, [r3, #0]
    21da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    21de:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00000050; /* RxD0 is P0.3 and TxD0 is P0.2 */
    21e0:	4aa2      	ldr	r2, [pc, #648]	; (246c <UARTInit+0x2a8>)
    21e2:	4ba2      	ldr	r3, [pc, #648]	; (246c <UARTInit+0x2a8>)
    21e4:	681b      	ldr	r3, [r3, #0]
    21e6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    21ea:	6013      	str	r3, [r2, #0]
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART0 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
    21ec:	4ba0      	ldr	r3, [pc, #640]	; (2470 <UARTInit+0x2ac>)
    21ee:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    21f2:	099b      	lsrs	r3, r3, #6
    21f4:	f003 0303 	and.w	r3, r3, #3
    21f8:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    21fa:	693b      	ldr	r3, [r7, #16]
    21fc:	2b02      	cmp	r3, #2
    21fe:	d00c      	beq.n	221a <UARTInit+0x56>
    2200:	2b03      	cmp	r3, #3
    2202:	d00f      	beq.n	2224 <UARTInit+0x60>
    2204:	2b01      	cmp	r3, #1
    2206:	d004      	beq.n	2212 <UARTInit+0x4e>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2208:	4b9a      	ldr	r3, [pc, #616]	; (2474 <UARTInit+0x2b0>)
    220a:	681b      	ldr	r3, [r3, #0]
    220c:	089b      	lsrs	r3, r3, #2
    220e:	617b      	str	r3, [r7, #20]
			break;
    2210:	e00d      	b.n	222e <UARTInit+0x6a>
		case 0x01:
			pclk = SystemCoreClock;
    2212:	4b98      	ldr	r3, [pc, #608]	; (2474 <UARTInit+0x2b0>)
    2214:	681b      	ldr	r3, [r3, #0]
    2216:	617b      	str	r3, [r7, #20]
			break;
    2218:	e009      	b.n	222e <UARTInit+0x6a>
		case 0x02:
			pclk = SystemCoreClock / 2;
    221a:	4b96      	ldr	r3, [pc, #600]	; (2474 <UARTInit+0x2b0>)
    221c:	681b      	ldr	r3, [r3, #0]
    221e:	085b      	lsrs	r3, r3, #1
    2220:	617b      	str	r3, [r7, #20]
			break;
    2222:	e004      	b.n	222e <UARTInit+0x6a>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2224:	4b93      	ldr	r3, [pc, #588]	; (2474 <UARTInit+0x2b0>)
    2226:	681b      	ldr	r3, [r3, #0]
    2228:	08db      	lsrs	r3, r3, #3
    222a:	617b      	str	r3, [r7, #20]
			break;
    222c:	bf00      	nop
		}
		LPC_UART0->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    222e:	4b92      	ldr	r3, [pc, #584]	; (2478 <UARTInit+0x2b4>)
    2230:	2283      	movs	r2, #131	; 0x83
    2232:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2234:	697b      	ldr	r3, [r7, #20]
    2236:	091a      	lsrs	r2, r3, #4
    2238:	683b      	ldr	r3, [r7, #0]
    223a:	fbb2 f3f3 	udiv	r3, r2, r3
    223e:	60fb      	str	r3, [r7, #12]
		if (baudrate == 115200){
    2240:	683b      	ldr	r3, [r7, #0]
    2242:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2246:	d10a      	bne.n	225e <UARTInit+0x9a>
			LPC_UART0->DLM = 0;
    2248:	4b8b      	ldr	r3, [pc, #556]	; (2478 <UARTInit+0x2b4>)
    224a:	2200      	movs	r2, #0
    224c:	711a      	strb	r2, [r3, #4]
			LPC_UART0->DLL = 9;
    224e:	4b8a      	ldr	r3, [pc, #552]	; (2478 <UARTInit+0x2b4>)
    2250:	2209      	movs	r2, #9
    2252:	701a      	strb	r2, [r3, #0]
			LPC_UART0->FDR=1<<0|1<<5;
    2254:	4b88      	ldr	r3, [pc, #544]	; (2478 <UARTInit+0x2b4>)
    2256:	2221      	movs	r2, #33	; 0x21
    2258:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    225c:	e008      	b.n	2270 <UARTInit+0xac>
		}else{
			LPC_UART0->DLM = Fdiv / 256;
    225e:	4a86      	ldr	r2, [pc, #536]	; (2478 <UARTInit+0x2b4>)
    2260:	68fb      	ldr	r3, [r7, #12]
    2262:	0a1b      	lsrs	r3, r3, #8
    2264:	b2db      	uxtb	r3, r3
    2266:	7113      	strb	r3, [r2, #4]
			LPC_UART0->DLL = Fdiv % 256;
    2268:	4b83      	ldr	r3, [pc, #524]	; (2478 <UARTInit+0x2b4>)
    226a:	68fa      	ldr	r2, [r7, #12]
    226c:	b2d2      	uxtb	r2, r2
    226e:	701a      	strb	r2, [r3, #0]
		}
		LPC_UART0->LCR = 0x03; /* DLAB = 0 */
    2270:	4b81      	ldr	r3, [pc, #516]	; (2478 <UARTInit+0x2b4>)
    2272:	2203      	movs	r2, #3
    2274:	731a      	strb	r2, [r3, #12]
		LPC_UART0->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2276:	4b80      	ldr	r3, [pc, #512]	; (2478 <UARTInit+0x2b4>)
    2278:	2207      	movs	r2, #7
    227a:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART0_IRQn);
    227c:	2005      	movs	r0, #5
    227e:	f7ff fd55 	bl	1d2c <NVIC_EnableIRQ>
		LPC_UART0->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART0 interrupt */
    2282:	4b7d      	ldr	r3, [pc, #500]	; (2478 <UARTInit+0x2b4>)
    2284:	2207      	movs	r2, #7
    2286:	605a      	str	r2, [r3, #4]
		return (TRUE);
    2288:	2301      	movs	r3, #1
    228a:	e12a      	b.n	24e2 <UARTInit+0x31e>
	} else if (PortNum == 1) {
    228c:	687b      	ldr	r3, [r7, #4]
    228e:	2b01      	cmp	r3, #1
    2290:	d165      	bne.n	235e <UARTInit+0x19a>
		NVIC_DisableIRQ(UART1_IRQn);
    2292:	2006      	movs	r0, #6
    2294:	f7ff fd62 	bl	1d5c <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 4;
    2298:	4a75      	ldr	r2, [pc, #468]	; (2470 <UARTInit+0x2ac>)
    229a:	4b75      	ldr	r3, [pc, #468]	; (2470 <UARTInit+0x2ac>)
    229c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    22a0:	f043 0310 	orr.w	r3, r3, #16
    22a4:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL4 &= ~0x0000000F;
    22a8:	4a70      	ldr	r2, [pc, #448]	; (246c <UARTInit+0x2a8>)
    22aa:	4b70      	ldr	r3, [pc, #448]	; (246c <UARTInit+0x2a8>)
    22ac:	691b      	ldr	r3, [r3, #16]
    22ae:	f023 030f 	bic.w	r3, r3, #15
    22b2:	6113      	str	r3, [r2, #16]
		LPC_PINCON->PINSEL4 |= 0x0000000A; /* Enable RxD1 P0.16, TxD1 P0.15 */
    22b4:	4a6d      	ldr	r2, [pc, #436]	; (246c <UARTInit+0x2a8>)
    22b6:	4b6d      	ldr	r3, [pc, #436]	; (246c <UARTInit+0x2a8>)
    22b8:	691b      	ldr	r3, [r3, #16]
    22ba:	f043 030a 	orr.w	r3, r3, #10
    22be:	6113      	str	r3, [r2, #16]

		//| 1<<25; //Enable PCUART1
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 8,9 are for UART1 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
    22c0:	4b6b      	ldr	r3, [pc, #428]	; (2470 <UARTInit+0x2ac>)
    22c2:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    22c6:	0a1b      	lsrs	r3, r3, #8
    22c8:	f003 0303 	and.w	r3, r3, #3
    22cc:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    22ce:	693b      	ldr	r3, [r7, #16]
    22d0:	2b02      	cmp	r3, #2
    22d2:	d00c      	beq.n	22ee <UARTInit+0x12a>
    22d4:	2b03      	cmp	r3, #3
    22d6:	d00f      	beq.n	22f8 <UARTInit+0x134>
    22d8:	2b01      	cmp	r3, #1
    22da:	d004      	beq.n	22e6 <UARTInit+0x122>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    22dc:	4b65      	ldr	r3, [pc, #404]	; (2474 <UARTInit+0x2b0>)
    22de:	681b      	ldr	r3, [r3, #0]
    22e0:	089b      	lsrs	r3, r3, #2
    22e2:	617b      	str	r3, [r7, #20]
			break;
    22e4:	e00d      	b.n	2302 <UARTInit+0x13e>
		case 0x01:
			pclk = SystemCoreClock;
    22e6:	4b63      	ldr	r3, [pc, #396]	; (2474 <UARTInit+0x2b0>)
    22e8:	681b      	ldr	r3, [r3, #0]
    22ea:	617b      	str	r3, [r7, #20]
			break;
    22ec:	e009      	b.n	2302 <UARTInit+0x13e>
		case 0x02:
			pclk = SystemCoreClock / 2;
    22ee:	4b61      	ldr	r3, [pc, #388]	; (2474 <UARTInit+0x2b0>)
    22f0:	681b      	ldr	r3, [r3, #0]
    22f2:	085b      	lsrs	r3, r3, #1
    22f4:	617b      	str	r3, [r7, #20]
			break;
    22f6:	e004      	b.n	2302 <UARTInit+0x13e>
		case 0x03:
			pclk = SystemCoreClock / 8;
    22f8:	4b5e      	ldr	r3, [pc, #376]	; (2474 <UARTInit+0x2b0>)
    22fa:	681b      	ldr	r3, [r3, #0]
    22fc:	08db      	lsrs	r3, r3, #3
    22fe:	617b      	str	r3, [r7, #20]
			break;
    2300:	bf00      	nop
		}
		LPC_UART1->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2302:	4b5e      	ldr	r3, [pc, #376]	; (247c <UARTInit+0x2b8>)
    2304:	2283      	movs	r2, #131	; 0x83
    2306:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2308:	697b      	ldr	r3, [r7, #20]
    230a:	091a      	lsrs	r2, r3, #4
    230c:	683b      	ldr	r3, [r7, #0]
    230e:	fbb2 f3f3 	udiv	r3, r2, r3
    2312:	60fb      	str	r3, [r7, #12]

		if (baudrate == 115200){
    2314:	683b      	ldr	r3, [r7, #0]
    2316:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    231a:	d109      	bne.n	2330 <UARTInit+0x16c>
			LPC_UART1->DLM = 0;
    231c:	4b57      	ldr	r3, [pc, #348]	; (247c <UARTInit+0x2b8>)
    231e:	2200      	movs	r2, #0
    2320:	711a      	strb	r2, [r3, #4]
			LPC_UART1->DLL = 9;
    2322:	4b56      	ldr	r3, [pc, #344]	; (247c <UARTInit+0x2b8>)
    2324:	2209      	movs	r2, #9
    2326:	701a      	strb	r2, [r3, #0]
			LPC_UART1->FDR=1<<0|1<<5;
    2328:	4b54      	ldr	r3, [pc, #336]	; (247c <UARTInit+0x2b8>)
    232a:	2221      	movs	r2, #33	; 0x21
    232c:	629a      	str	r2, [r3, #40]	; 0x28
    232e:	e008      	b.n	2342 <UARTInit+0x17e>
		}else{
			LPC_UART1->DLM = Fdiv / 256;
    2330:	4a52      	ldr	r2, [pc, #328]	; (247c <UARTInit+0x2b8>)
    2332:	68fb      	ldr	r3, [r7, #12]
    2334:	0a1b      	lsrs	r3, r3, #8
    2336:	b2db      	uxtb	r3, r3
    2338:	7113      	strb	r3, [r2, #4]
			LPC_UART1->DLL = Fdiv % 256;
    233a:	4b50      	ldr	r3, [pc, #320]	; (247c <UARTInit+0x2b8>)
    233c:	68fa      	ldr	r2, [r7, #12]
    233e:	b2d2      	uxtb	r2, r2
    2340:	701a      	strb	r2, [r3, #0]
		}
		LPC_UART1->LCR = 0x03; /* DLAB = 0 */
    2342:	4b4e      	ldr	r3, [pc, #312]	; (247c <UARTInit+0x2b8>)
    2344:	2203      	movs	r2, #3
    2346:	731a      	strb	r2, [r3, #12]
		LPC_UART1->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2348:	4b4c      	ldr	r3, [pc, #304]	; (247c <UARTInit+0x2b8>)
    234a:	2207      	movs	r2, #7
    234c:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART1_IRQn);
    234e:	2006      	movs	r0, #6
    2350:	f7ff fcec 	bl	1d2c <NVIC_EnableIRQ>
		LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART1 interrupt */
    2354:	4b49      	ldr	r3, [pc, #292]	; (247c <UARTInit+0x2b8>)
    2356:	2207      	movs	r2, #7
    2358:	605a      	str	r2, [r3, #4]
		return (TRUE);
    235a:	2301      	movs	r3, #1
    235c:	e0c1      	b.n	24e2 <UARTInit+0x31e>
	} else if (PortNum == 2) {
    235e:	687b      	ldr	r3, [r7, #4]
    2360:	2b02      	cmp	r3, #2
    2362:	d157      	bne.n	2414 <UARTInit+0x250>
		NVIC_DisableIRQ(UART2_IRQn);
    2364:	2007      	movs	r0, #7
    2366:	f7ff fcf9 	bl	1d5c <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 24; // UART 2 PCONP bit 24
    236a:	4a41      	ldr	r2, [pc, #260]	; (2470 <UARTInit+0x2ac>)
    236c:	4b40      	ldr	r3, [pc, #256]	; (2470 <UARTInit+0x2ac>)
    236e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2376:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL0 &= ~0x00F00000;
    237a:	4a3c      	ldr	r2, [pc, #240]	; (246c <UARTInit+0x2a8>)
    237c:	4b3b      	ldr	r3, [pc, #236]	; (246c <UARTInit+0x2a8>)
    237e:	681b      	ldr	r3, [r3, #0]
    2380:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    2384:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00500000; /* Enable TxD2 on 0.10, RxD2 on 0.11 */
    2386:	4a39      	ldr	r2, [pc, #228]	; (246c <UARTInit+0x2a8>)
    2388:	4b38      	ldr	r3, [pc, #224]	; (246c <UARTInit+0x2a8>)
    238a:	681b      	ldr	r3, [r3, #0]
    238c:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
    2390:	6013      	str	r3, [r2, #0]
		pclkdiv = (LPC_SC->PCLKSEL0 >> 16) & 0x03;
    2392:	4b37      	ldr	r3, [pc, #220]	; (2470 <UARTInit+0x2ac>)
    2394:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2398:	0c1b      	lsrs	r3, r3, #16
    239a:	f003 0303 	and.w	r3, r3, #3
    239e:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    23a0:	693b      	ldr	r3, [r7, #16]
    23a2:	2b02      	cmp	r3, #2
    23a4:	d00c      	beq.n	23c0 <UARTInit+0x1fc>
    23a6:	2b03      	cmp	r3, #3
    23a8:	d00f      	beq.n	23ca <UARTInit+0x206>
    23aa:	2b01      	cmp	r3, #1
    23ac:	d004      	beq.n	23b8 <UARTInit+0x1f4>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    23ae:	4b31      	ldr	r3, [pc, #196]	; (2474 <UARTInit+0x2b0>)
    23b0:	681b      	ldr	r3, [r3, #0]
    23b2:	089b      	lsrs	r3, r3, #2
    23b4:	617b      	str	r3, [r7, #20]
			break;
    23b6:	e00d      	b.n	23d4 <UARTInit+0x210>
		case 0x01:
			pclk = SystemCoreClock;
    23b8:	4b2e      	ldr	r3, [pc, #184]	; (2474 <UARTInit+0x2b0>)
    23ba:	681b      	ldr	r3, [r3, #0]
    23bc:	617b      	str	r3, [r7, #20]
			break;
    23be:	e009      	b.n	23d4 <UARTInit+0x210>
		case 0x02:
			pclk = SystemCoreClock / 2;
    23c0:	4b2c      	ldr	r3, [pc, #176]	; (2474 <UARTInit+0x2b0>)
    23c2:	681b      	ldr	r3, [r3, #0]
    23c4:	085b      	lsrs	r3, r3, #1
    23c6:	617b      	str	r3, [r7, #20]
			break;
    23c8:	e004      	b.n	23d4 <UARTInit+0x210>
		case 0x03:
			pclk = SystemCoreClock / 8;
    23ca:	4b2a      	ldr	r3, [pc, #168]	; (2474 <UARTInit+0x2b0>)
    23cc:	681b      	ldr	r3, [r3, #0]
    23ce:	08db      	lsrs	r3, r3, #3
    23d0:	617b      	str	r3, [r7, #20]
			break;
    23d2:	bf00      	nop
		}
		LPC_UART2->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    23d4:	4b2a      	ldr	r3, [pc, #168]	; (2480 <UARTInit+0x2bc>)
    23d6:	2283      	movs	r2, #131	; 0x83
    23d8:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    23da:	697b      	ldr	r3, [r7, #20]
    23dc:	091a      	lsrs	r2, r3, #4
    23de:	683b      	ldr	r3, [r7, #0]
    23e0:	fbb2 f3f3 	udiv	r3, r2, r3
    23e4:	60fb      	str	r3, [r7, #12]
		LPC_UART2->DLM = Fdiv / 256;
    23e6:	4a26      	ldr	r2, [pc, #152]	; (2480 <UARTInit+0x2bc>)
    23e8:	68fb      	ldr	r3, [r7, #12]
    23ea:	0a1b      	lsrs	r3, r3, #8
    23ec:	b2db      	uxtb	r3, r3
    23ee:	7113      	strb	r3, [r2, #4]
		LPC_UART2->DLL = Fdiv % 256;
    23f0:	4b23      	ldr	r3, [pc, #140]	; (2480 <UARTInit+0x2bc>)
    23f2:	68fa      	ldr	r2, [r7, #12]
    23f4:	b2d2      	uxtb	r2, r2
    23f6:	701a      	strb	r2, [r3, #0]
		LPC_UART2->LCR = 0x03; /* DLAB = 0 */
    23f8:	4b21      	ldr	r3, [pc, #132]	; (2480 <UARTInit+0x2bc>)
    23fa:	2203      	movs	r2, #3
    23fc:	731a      	strb	r2, [r3, #12]
		LPC_UART2->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    23fe:	4b20      	ldr	r3, [pc, #128]	; (2480 <UARTInit+0x2bc>)
    2400:	2207      	movs	r2, #7
    2402:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART2_IRQn);
    2404:	2007      	movs	r0, #7
    2406:	f7ff fc91 	bl	1d2c <NVIC_EnableIRQ>
		LPC_UART2->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART2 interrupt */
    240a:	4b1d      	ldr	r3, [pc, #116]	; (2480 <UARTInit+0x2bc>)
    240c:	2207      	movs	r2, #7
    240e:	605a      	str	r2, [r3, #4]
		//LPC_UART2->IER = IER_THRE; /* Polling */
		//LPC_UART2->TER = (1 << 7);
		return (TRUE);
    2410:	2301      	movs	r3, #1
    2412:	e066      	b.n	24e2 <UARTInit+0x31e>
	} else if (PortNum == 3) {
    2414:	687b      	ldr	r3, [r7, #4]
    2416:	2b03      	cmp	r3, #3
    2418:	d162      	bne.n	24e0 <UARTInit+0x31c>
		LPC_PINCON->PINSEL0 &= ~0x0000000F;
    241a:	4a14      	ldr	r2, [pc, #80]	; (246c <UARTInit+0x2a8>)
    241c:	4b13      	ldr	r3, [pc, #76]	; (246c <UARTInit+0x2a8>)
    241e:	681b      	ldr	r3, [r3, #0]
    2420:	f023 030f 	bic.w	r3, r3, #15
    2424:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x0000000A; /* RxD3 is P0.1 and TxD3 is P0.0 */
    2426:	4a11      	ldr	r2, [pc, #68]	; (246c <UARTInit+0x2a8>)
    2428:	4b10      	ldr	r3, [pc, #64]	; (246c <UARTInit+0x2a8>)
    242a:	681b      	ldr	r3, [r3, #0]
    242c:	f043 030a 	orr.w	r3, r3, #10
    2430:	6013      	str	r3, [r2, #0]
		LPC_SC->PCONP |= 1 << 4 | 1 << 25; //Enable PCUART1
    2432:	4a0f      	ldr	r2, [pc, #60]	; (2470 <UARTInit+0x2ac>)
    2434:	4b0e      	ldr	r3, [pc, #56]	; (2470 <UARTInit+0x2ac>)
    2436:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    243a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    243e:	f043 0310 	orr.w	r3, r3, #16
    2442:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART3 */
		pclkdiv = (LPC_SC->PCLKSEL1 >> 18) & 0x03;
    2446:	4b0a      	ldr	r3, [pc, #40]	; (2470 <UARTInit+0x2ac>)
    2448:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
    244c:	0c9b      	lsrs	r3, r3, #18
    244e:	f003 0303 	and.w	r3, r3, #3
    2452:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2454:	693b      	ldr	r3, [r7, #16]
    2456:	2b02      	cmp	r3, #2
    2458:	d018      	beq.n	248c <UARTInit+0x2c8>
    245a:	2b03      	cmp	r3, #3
    245c:	d01b      	beq.n	2496 <UARTInit+0x2d2>
    245e:	2b01      	cmp	r3, #1
    2460:	d010      	beq.n	2484 <UARTInit+0x2c0>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2462:	4b04      	ldr	r3, [pc, #16]	; (2474 <UARTInit+0x2b0>)
    2464:	681b      	ldr	r3, [r3, #0]
    2466:	089b      	lsrs	r3, r3, #2
    2468:	617b      	str	r3, [r7, #20]
			break;
    246a:	e019      	b.n	24a0 <UARTInit+0x2dc>
    246c:	4002c000 	.word	0x4002c000
    2470:	400fc000 	.word	0x400fc000
    2474:	10000024 	.word	0x10000024
    2478:	4000c000 	.word	0x4000c000
    247c:	40010000 	.word	0x40010000
    2480:	40098000 	.word	0x40098000
		case 0x01:
			pclk = SystemCoreClock;
    2484:	4b19      	ldr	r3, [pc, #100]	; (24ec <UARTInit+0x328>)
    2486:	681b      	ldr	r3, [r3, #0]
    2488:	617b      	str	r3, [r7, #20]
			break;
    248a:	e009      	b.n	24a0 <UARTInit+0x2dc>
		case 0x02:
			pclk = SystemCoreClock / 2;
    248c:	4b17      	ldr	r3, [pc, #92]	; (24ec <UARTInit+0x328>)
    248e:	681b      	ldr	r3, [r3, #0]
    2490:	085b      	lsrs	r3, r3, #1
    2492:	617b      	str	r3, [r7, #20]
			break;
    2494:	e004      	b.n	24a0 <UARTInit+0x2dc>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2496:	4b15      	ldr	r3, [pc, #84]	; (24ec <UARTInit+0x328>)
    2498:	681b      	ldr	r3, [r3, #0]
    249a:	08db      	lsrs	r3, r3, #3
    249c:	617b      	str	r3, [r7, #20]
			break;
    249e:	bf00      	nop
		}
		LPC_UART3->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    24a0:	4b13      	ldr	r3, [pc, #76]	; (24f0 <UARTInit+0x32c>)
    24a2:	2283      	movs	r2, #131	; 0x83
    24a4:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    24a6:	697b      	ldr	r3, [r7, #20]
    24a8:	091a      	lsrs	r2, r3, #4
    24aa:	683b      	ldr	r3, [r7, #0]
    24ac:	fbb2 f3f3 	udiv	r3, r2, r3
    24b0:	60fb      	str	r3, [r7, #12]
		LPC_UART3->DLM = Fdiv / 256;
    24b2:	4a0f      	ldr	r2, [pc, #60]	; (24f0 <UARTInit+0x32c>)
    24b4:	68fb      	ldr	r3, [r7, #12]
    24b6:	0a1b      	lsrs	r3, r3, #8
    24b8:	b2db      	uxtb	r3, r3
    24ba:	7113      	strb	r3, [r2, #4]
		LPC_UART3->DLL = Fdiv % 256;
    24bc:	4b0c      	ldr	r3, [pc, #48]	; (24f0 <UARTInit+0x32c>)
    24be:	68fa      	ldr	r2, [r7, #12]
    24c0:	b2d2      	uxtb	r2, r2
    24c2:	701a      	strb	r2, [r3, #0]
		LPC_UART3->LCR = 0x03; /* DLAB = 0 */
    24c4:	4b0a      	ldr	r3, [pc, #40]	; (24f0 <UARTInit+0x32c>)
    24c6:	2203      	movs	r2, #3
    24c8:	731a      	strb	r2, [r3, #12]
		LPC_UART3->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    24ca:	4b09      	ldr	r3, [pc, #36]	; (24f0 <UARTInit+0x32c>)
    24cc:	2207      	movs	r2, #7
    24ce:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART3_IRQn);
    24d0:	2008      	movs	r0, #8
    24d2:	f7ff fc2b 	bl	1d2c <NVIC_EnableIRQ>
		LPC_UART3->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART3 interrupt */
    24d6:	4b06      	ldr	r3, [pc, #24]	; (24f0 <UARTInit+0x32c>)
    24d8:	2207      	movs	r2, #7
    24da:	605a      	str	r2, [r3, #4]
		return (TRUE);
    24dc:	2301      	movs	r3, #1
    24de:	e000      	b.n	24e2 <UARTInit+0x31e>
	}
	return (FALSE);
    24e0:	2300      	movs	r3, #0
}
    24e2:	4618      	mov	r0, r3
    24e4:	3718      	adds	r7, #24
    24e6:	46bd      	mov	sp, r7
    24e8:	bd80      	pop	{r7, pc}
    24ea:	bf00      	nop
    24ec:	10000024 	.word	0x10000024
    24f0:	4009c000 	.word	0x4009c000

000024f4 <UARTSend>:
 **
 ** parameters:			portNum, buffer pointer, and data length
 ** Returned value:		None
 **
 *****************************************************************************/
void UARTSend(uint32_t portNum, char *buffer, uint32_t Length) {
    24f4:	b480      	push	{r7}
    24f6:	b087      	sub	sp, #28
    24f8:	af00      	add	r7, sp, #0
    24fa:	60f8      	str	r0, [r7, #12]
    24fc:	60b9      	str	r1, [r7, #8]
    24fe:	607a      	str	r2, [r7, #4]
	char *BufferPtr = buffer;
    2500:	68bb      	ldr	r3, [r7, #8]
    2502:	613b      	str	r3, [r7, #16]
	int index = 0;
    2504:	2300      	movs	r3, #0
    2506:	617b      	str	r3, [r7, #20]
	if (portNum == 0) {
    2508:	68fb      	ldr	r3, [r7, #12]
    250a:	2b00      	cmp	r3, #0
    250c:	d11b      	bne.n	2546 <UARTSend+0x52>
		while (Length != 0) {
    250e:	e016      	b.n	253e <UARTSend+0x4a>
			/* THRE status, contain valid data */
			while (!(UART0TxEmpty & 0x01));
    2510:	bf00      	nop
    2512:	4b3e      	ldr	r3, [pc, #248]	; (260c <UARTSend+0x118>)
    2514:	781b      	ldrb	r3, [r3, #0]
    2516:	b2db      	uxtb	r3, r3
    2518:	f003 0301 	and.w	r3, r3, #1
    251c:	2b00      	cmp	r3, #0
    251e:	d0f8      	beq.n	2512 <UARTSend+0x1e>
			LPC_UART0->THR = BufferPtr[index];
    2520:	493b      	ldr	r1, [pc, #236]	; (2610 <UARTSend+0x11c>)
    2522:	697b      	ldr	r3, [r7, #20]
    2524:	693a      	ldr	r2, [r7, #16]
    2526:	4413      	add	r3, r2
    2528:	781b      	ldrb	r3, [r3, #0]
    252a:	700b      	strb	r3, [r1, #0]
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
    252c:	4b37      	ldr	r3, [pc, #220]	; (260c <UARTSend+0x118>)
    252e:	2200      	movs	r2, #0
    2530:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    2532:	697b      	ldr	r3, [r7, #20]
    2534:	3301      	adds	r3, #1
    2536:	617b      	str	r3, [r7, #20]
			Length--;
    2538:	687b      	ldr	r3, [r7, #4]
    253a:	3b01      	subs	r3, #1
    253c:	607b      	str	r3, [r7, #4]
 *****************************************************************************/
void UARTSend(uint32_t portNum, char *buffer, uint32_t Length) {
	char *BufferPtr = buffer;
	int index = 0;
	if (portNum == 0) {
		while (Length != 0) {
    253e:	687b      	ldr	r3, [r7, #4]
    2540:	2b00      	cmp	r3, #0
    2542:	d1e5      	bne.n	2510 <UARTSend+0x1c>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    2544:	e05c      	b.n	2600 <UARTSend+0x10c>
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
    2546:	68fb      	ldr	r3, [r7, #12]
    2548:	2b01      	cmp	r3, #1
    254a:	d11b      	bne.n	2584 <UARTSend+0x90>
		while (Length != 0) {
    254c:	e016      	b.n	257c <UARTSend+0x88>
			/* THRE status, contain valid data */
			while (!(UART1TxEmpty & 0x01));
    254e:	bf00      	nop
    2550:	4b30      	ldr	r3, [pc, #192]	; (2614 <UARTSend+0x120>)
    2552:	781b      	ldrb	r3, [r3, #0]
    2554:	b2db      	uxtb	r3, r3
    2556:	f003 0301 	and.w	r3, r3, #1
    255a:	2b00      	cmp	r3, #0
    255c:	d0f8      	beq.n	2550 <UARTSend+0x5c>
			LPC_UART1->THR = BufferPtr[index];
    255e:	492e      	ldr	r1, [pc, #184]	; (2618 <UARTSend+0x124>)
    2560:	697b      	ldr	r3, [r7, #20]
    2562:	693a      	ldr	r2, [r7, #16]
    2564:	4413      	add	r3, r2
    2566:	781b      	ldrb	r3, [r3, #0]
    2568:	700b      	strb	r3, [r1, #0]
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
    256a:	4b2a      	ldr	r3, [pc, #168]	; (2614 <UARTSend+0x120>)
    256c:	2200      	movs	r2, #0
    256e:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    2570:	697b      	ldr	r3, [r7, #20]
    2572:	3301      	adds	r3, #1
    2574:	617b      	str	r3, [r7, #20]
			Length--;
    2576:	687b      	ldr	r3, [r7, #4]
    2578:	3b01      	subs	r3, #1
    257a:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
		while (Length != 0) {
    257c:	687b      	ldr	r3, [r7, #4]
    257e:	2b00      	cmp	r3, #0
    2580:	d1e5      	bne.n	254e <UARTSend+0x5a>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    2582:	e03d      	b.n	2600 <UARTSend+0x10c>
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
    2584:	68fb      	ldr	r3, [r7, #12]
    2586:	2b02      	cmp	r3, #2
    2588:	d11b      	bne.n	25c2 <UARTSend+0xce>
		while (Length != 0) {
    258a:	e016      	b.n	25ba <UARTSend+0xc6>
			/* THRE status, contain valid data */
			while (!(UART2TxEmpty & 0x01));
    258c:	bf00      	nop
    258e:	4b23      	ldr	r3, [pc, #140]	; (261c <UARTSend+0x128>)
    2590:	781b      	ldrb	r3, [r3, #0]
    2592:	b2db      	uxtb	r3, r3
    2594:	f003 0301 	and.w	r3, r3, #1
    2598:	2b00      	cmp	r3, #0
    259a:	d0f8      	beq.n	258e <UARTSend+0x9a>
			LPC_UART2->THR = BufferPtr[index];
    259c:	4920      	ldr	r1, [pc, #128]	; (2620 <UARTSend+0x12c>)
    259e:	697b      	ldr	r3, [r7, #20]
    25a0:	693a      	ldr	r2, [r7, #16]
    25a2:	4413      	add	r3, r2
    25a4:	781b      	ldrb	r3, [r3, #0]
    25a6:	700b      	strb	r3, [r1, #0]
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
    25a8:	4b1c      	ldr	r3, [pc, #112]	; (261c <UARTSend+0x128>)
    25aa:	2200      	movs	r2, #0
    25ac:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    25ae:	697b      	ldr	r3, [r7, #20]
    25b0:	3301      	adds	r3, #1
    25b2:	617b      	str	r3, [r7, #20]
			Length--;
    25b4:	687b      	ldr	r3, [r7, #4]
    25b6:	3b01      	subs	r3, #1
    25b8:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
		while (Length != 0) {
    25ba:	687b      	ldr	r3, [r7, #4]
    25bc:	2b00      	cmp	r3, #0
    25be:	d1e5      	bne.n	258c <UARTSend+0x98>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    25c0:	e01e      	b.n	2600 <UARTSend+0x10c>
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
    25c2:	68fb      	ldr	r3, [r7, #12]
    25c4:	2b03      	cmp	r3, #3
    25c6:	d11a      	bne.n	25fe <UARTSend+0x10a>
		while (Length != 0) {
    25c8:	e016      	b.n	25f8 <UARTSend+0x104>
			/* THRE status, contain valid data */
			while (!(UART3TxEmpty & 0x01));
    25ca:	bf00      	nop
    25cc:	4b15      	ldr	r3, [pc, #84]	; (2624 <UARTSend+0x130>)
    25ce:	781b      	ldrb	r3, [r3, #0]
    25d0:	b2db      	uxtb	r3, r3
    25d2:	f003 0301 	and.w	r3, r3, #1
    25d6:	2b00      	cmp	r3, #0
    25d8:	d0f8      	beq.n	25cc <UARTSend+0xd8>
			LPC_UART3->THR = BufferPtr[index];
    25da:	4913      	ldr	r1, [pc, #76]	; (2628 <UARTSend+0x134>)
    25dc:	697b      	ldr	r3, [r7, #20]
    25de:	693a      	ldr	r2, [r7, #16]
    25e0:	4413      	add	r3, r2
    25e2:	781b      	ldrb	r3, [r3, #0]
    25e4:	700b      	strb	r3, [r1, #0]
			UART3TxEmpty = 0; /* not empty in the THR until it shifts out */
    25e6:	4b0f      	ldr	r3, [pc, #60]	; (2624 <UARTSend+0x130>)
    25e8:	2200      	movs	r2, #0
    25ea:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    25ec:	697b      	ldr	r3, [r7, #20]
    25ee:	3301      	adds	r3, #1
    25f0:	617b      	str	r3, [r7, #20]
			Length--;
    25f2:	687b      	ldr	r3, [r7, #4]
    25f4:	3b01      	subs	r3, #1
    25f6:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
		while (Length != 0) {
    25f8:	687b      	ldr	r3, [r7, #4]
    25fa:	2b00      	cmp	r3, #0
    25fc:	d1e5      	bne.n	25ca <UARTSend+0xd6>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    25fe:	bf00      	nop
}
    2600:	371c      	adds	r7, #28
    2602:	46bd      	mov	sp, r7
    2604:	f85d 7b04 	ldr.w	r7, [sp], #4
    2608:	4770      	bx	lr
    260a:	bf00      	nop
    260c:	10000020 	.word	0x10000020
    2610:	4000c000 	.word	0x4000c000
    2614:	10000021 	.word	0x10000021
    2618:	40010000 	.word	0x40010000
    261c:	10000023 	.word	0x10000023
    2620:	40098000 	.word	0x40098000
    2624:	10000022 	.word	0x10000022
    2628:	4009c000 	.word	0x4009c000

0000262c <ReadUart>:

uint16_t ReadUart( char* veri, uint8_t PortNum )
{
    262c:	b480      	push	{r7}
    262e:	b087      	sub	sp, #28
    2630:	af00      	add	r7, sp, #0
    2632:	6078      	str	r0, [r7, #4]
    2634:	460b      	mov	r3, r1
    2636:	70fb      	strb	r3, [r7, #3]
	char* veri_ptr = veri;
    2638:	687b      	ldr	r3, [r7, #4]
    263a:	617b      	str	r3, [r7, #20]
	uint16_t buff_count = 0;
    263c:	2300      	movs	r3, #0
    263e:	827b      	strh	r3, [r7, #18]
	if (PortNum == 0) {
    2640:	78fb      	ldrb	r3, [r7, #3]
    2642:	2b00      	cmp	r3, #0
    2644:	d122      	bne.n	268c <ReadUart+0x60>
		if (UART0Count > 0) {
    2646:	4b4e      	ldr	r3, [pc, #312]	; (2780 <ReadUart+0x154>)
    2648:	881b      	ldrh	r3, [r3, #0]
    264a:	b29b      	uxth	r3, r3
    264c:	2b00      	cmp	r3, #0
    264e:	d01d      	beq.n	268c <ReadUart+0x60>
			while (buff_count < UART0Count) {
    2650:	e00b      	b.n	266a <ReadUart+0x3e>
				*veri_ptr = UART0Buffer[buff_count];
    2652:	8a7b      	ldrh	r3, [r7, #18]
    2654:	4a4b      	ldr	r2, [pc, #300]	; (2784 <ReadUart+0x158>)
    2656:	5cd3      	ldrb	r3, [r2, r3]
    2658:	b2da      	uxtb	r2, r3
    265a:	697b      	ldr	r3, [r7, #20]
    265c:	701a      	strb	r2, [r3, #0]
				buff_count++;
    265e:	8a7b      	ldrh	r3, [r7, #18]
    2660:	3301      	adds	r3, #1
    2662:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    2664:	697b      	ldr	r3, [r7, #20]
    2666:	3301      	adds	r3, #1
    2668:	617b      	str	r3, [r7, #20]
{
	char* veri_ptr = veri;
	uint16_t buff_count = 0;
	if (PortNum == 0) {
		if (UART0Count > 0) {
			while (buff_count < UART0Count) {
    266a:	4b45      	ldr	r3, [pc, #276]	; (2780 <ReadUart+0x154>)
    266c:	881b      	ldrh	r3, [r3, #0]
    266e:	b29b      	uxth	r3, r3
    2670:	8a7a      	ldrh	r2, [r7, #18]
    2672:	429a      	cmp	r2, r3
    2674:	d3ed      	bcc.n	2652 <ReadUart+0x26>
				*veri_ptr = UART0Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    2676:	697b      	ldr	r3, [r7, #20]
    2678:	2200      	movs	r2, #0
    267a:	701a      	strb	r2, [r3, #0]
			uint16_t len = UART0Count;
    267c:	4b40      	ldr	r3, [pc, #256]	; (2780 <ReadUart+0x154>)
    267e:	881b      	ldrh	r3, [r3, #0]
    2680:	823b      	strh	r3, [r7, #16]
			UART0Count = 0;
    2682:	4b3f      	ldr	r3, [pc, #252]	; (2780 <ReadUart+0x154>)
    2684:	2200      	movs	r2, #0
    2686:	801a      	strh	r2, [r3, #0]
			return ( len );
    2688:	8a3b      	ldrh	r3, [r7, #16]
    268a:	e073      	b.n	2774 <ReadUart+0x148>
		}
	}
	if (PortNum == 1) {
    268c:	78fb      	ldrb	r3, [r7, #3]
    268e:	2b01      	cmp	r3, #1
    2690:	d124      	bne.n	26dc <ReadUart+0xb0>



		if (UART1Count > 0) {
    2692:	4b3d      	ldr	r3, [pc, #244]	; (2788 <ReadUart+0x15c>)
    2694:	881b      	ldrh	r3, [r3, #0]
    2696:	b29b      	uxth	r3, r3
    2698:	2b00      	cmp	r3, #0
    269a:	d06a      	beq.n	2772 <ReadUart+0x146>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    269c:	b672      	cpsid	i

			__disable_irq();

			while (buff_count < UART1Count) {
    269e:	e00b      	b.n	26b8 <ReadUart+0x8c>
				*veri_ptr = UART1Buffer[buff_count];
    26a0:	8a7b      	ldrh	r3, [r7, #18]
    26a2:	4a3a      	ldr	r2, [pc, #232]	; (278c <ReadUart+0x160>)
    26a4:	5cd3      	ldrb	r3, [r2, r3]
    26a6:	b2da      	uxtb	r2, r3
    26a8:	697b      	ldr	r3, [r7, #20]
    26aa:	701a      	strb	r2, [r3, #0]
				buff_count++;
    26ac:	8a7b      	ldrh	r3, [r7, #18]
    26ae:	3301      	adds	r3, #1
    26b0:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    26b2:	697b      	ldr	r3, [r7, #20]
    26b4:	3301      	adds	r3, #1
    26b6:	617b      	str	r3, [r7, #20]

		if (UART1Count > 0) {

			__disable_irq();

			while (buff_count < UART1Count) {
    26b8:	4b33      	ldr	r3, [pc, #204]	; (2788 <ReadUart+0x15c>)
    26ba:	881b      	ldrh	r3, [r3, #0]
    26bc:	b29b      	uxth	r3, r3
    26be:	8a7a      	ldrh	r2, [r7, #18]
    26c0:	429a      	cmp	r2, r3
    26c2:	d3ed      	bcc.n	26a0 <ReadUart+0x74>
				*veri_ptr = UART1Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    26c4:	697b      	ldr	r3, [r7, #20]
    26c6:	2200      	movs	r2, #0
    26c8:	701a      	strb	r2, [r3, #0]
			uint16_t len = UART1Count;
    26ca:	4b2f      	ldr	r3, [pc, #188]	; (2788 <ReadUart+0x15c>)
    26cc:	881b      	ldrh	r3, [r3, #0]
    26ce:	81fb      	strh	r3, [r7, #14]
			UART1Count = 0;
    26d0:	4b2d      	ldr	r3, [pc, #180]	; (2788 <ReadUart+0x15c>)
    26d2:	2200      	movs	r2, #0
    26d4:	801a      	strh	r2, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    26d6:	b662      	cpsie	i

			__enable_irq();
			return ( len );
    26d8:	89fb      	ldrh	r3, [r7, #14]
    26da:	e04b      	b.n	2774 <ReadUart+0x148>
		}
	}//GPS Port
	else if (PortNum == 2) {
    26dc:	78fb      	ldrb	r3, [r7, #3]
    26de:	2b02      	cmp	r3, #2
    26e0:	d11f      	bne.n	2722 <ReadUart+0xf6>
		if (UART2Count > 0) {
    26e2:	4b2b      	ldr	r3, [pc, #172]	; (2790 <ReadUart+0x164>)
    26e4:	881b      	ldrh	r3, [r3, #0]
    26e6:	b29b      	uxth	r3, r3
    26e8:	2b00      	cmp	r3, #0
    26ea:	d042      	beq.n	2772 <ReadUart+0x146>
			while (buff_count < UART2Count) {
    26ec:	e00b      	b.n	2706 <ReadUart+0xda>
				*veri_ptr = UART2Buffer[buff_count];
    26ee:	8a7b      	ldrh	r3, [r7, #18]
    26f0:	4a28      	ldr	r2, [pc, #160]	; (2794 <ReadUart+0x168>)
    26f2:	5cd3      	ldrb	r3, [r2, r3]
    26f4:	b2da      	uxtb	r2, r3
    26f6:	697b      	ldr	r3, [r7, #20]
    26f8:	701a      	strb	r2, [r3, #0]
				buff_count++;
    26fa:	8a7b      	ldrh	r3, [r7, #18]
    26fc:	3301      	adds	r3, #1
    26fe:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    2700:	697b      	ldr	r3, [r7, #20]
    2702:	3301      	adds	r3, #1
    2704:	617b      	str	r3, [r7, #20]
			return ( len );
		}
	}//GPS Port
	else if (PortNum == 2) {
		if (UART2Count > 0) {
			while (buff_count < UART2Count) {
    2706:	4b22      	ldr	r3, [pc, #136]	; (2790 <ReadUart+0x164>)
    2708:	881b      	ldrh	r3, [r3, #0]
    270a:	b29b      	uxth	r3, r3
    270c:	8a7a      	ldrh	r2, [r7, #18]
    270e:	429a      	cmp	r2, r3
    2710:	d3ed      	bcc.n	26ee <ReadUart+0xc2>
				*veri_ptr = UART2Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    2712:	697b      	ldr	r3, [r7, #20]
    2714:	2200      	movs	r2, #0
    2716:	701a      	strb	r2, [r3, #0]
			UART2Count = 0;
    2718:	4b1d      	ldr	r3, [pc, #116]	; (2790 <ReadUart+0x164>)
    271a:	2200      	movs	r2, #0
    271c:	801a      	strh	r2, [r3, #0]
			return buff_count;
    271e:	8a7b      	ldrh	r3, [r7, #18]
    2720:	e028      	b.n	2774 <ReadUart+0x148>
		}
	} else if (PortNum == 3) {
    2722:	78fb      	ldrb	r3, [r7, #3]
    2724:	2b03      	cmp	r3, #3
    2726:	d124      	bne.n	2772 <ReadUart+0x146>
		if (UART3Count > 0) {
    2728:	4b1b      	ldr	r3, [pc, #108]	; (2798 <ReadUart+0x16c>)
    272a:	881b      	ldrh	r3, [r3, #0]
    272c:	b29b      	uxth	r3, r3
    272e:	2b00      	cmp	r3, #0
    2730:	d01f      	beq.n	2772 <ReadUart+0x146>
			while (buff_count < UART3Count) {
    2732:	e00b      	b.n	274c <ReadUart+0x120>
				*veri_ptr = UART3Buffer[buff_count];
    2734:	8a7b      	ldrh	r3, [r7, #18]
    2736:	4a19      	ldr	r2, [pc, #100]	; (279c <ReadUart+0x170>)
    2738:	5cd3      	ldrb	r3, [r2, r3]
    273a:	b2da      	uxtb	r2, r3
    273c:	697b      	ldr	r3, [r7, #20]
    273e:	701a      	strb	r2, [r3, #0]
				buff_count++;
    2740:	8a7b      	ldrh	r3, [r7, #18]
    2742:	3301      	adds	r3, #1
    2744:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    2746:	697b      	ldr	r3, [r7, #20]
    2748:	3301      	adds	r3, #1
    274a:	617b      	str	r3, [r7, #20]
			UART2Count = 0;
			return buff_count;
		}
	} else if (PortNum == 3) {
		if (UART3Count > 0) {
			while (buff_count < UART3Count) {
    274c:	4b12      	ldr	r3, [pc, #72]	; (2798 <ReadUart+0x16c>)
    274e:	881b      	ldrh	r3, [r3, #0]
    2750:	b29b      	uxth	r3, r3
    2752:	8a7a      	ldrh	r2, [r7, #18]
    2754:	429a      	cmp	r2, r3
    2756:	d3ed      	bcc.n	2734 <ReadUart+0x108>
				*veri_ptr = UART3Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    2758:	697b      	ldr	r3, [r7, #20]
    275a:	2200      	movs	r2, #0
    275c:	701a      	strb	r2, [r3, #0]
			int len = UART3Count;
    275e:	4b0e      	ldr	r3, [pc, #56]	; (2798 <ReadUart+0x16c>)
    2760:	881b      	ldrh	r3, [r3, #0]
    2762:	b29b      	uxth	r3, r3
    2764:	60bb      	str	r3, [r7, #8]
			UART3Count = 0;
    2766:	4b0c      	ldr	r3, [pc, #48]	; (2798 <ReadUart+0x16c>)
    2768:	2200      	movs	r2, #0
    276a:	801a      	strh	r2, [r3, #0]
			return len;
    276c:	68bb      	ldr	r3, [r7, #8]
    276e:	b29b      	uxth	r3, r3
    2770:	e000      	b.n	2774 <ReadUart+0x148>
		}
	}
	return 0;
    2772:	2300      	movs	r3, #0
}
    2774:	4618      	mov	r0, r3
    2776:	371c      	adds	r7, #28
    2778:	46bd      	mov	sp, r7
    277a:	f85d 7b04 	ldr.w	r7, [sp], #4
    277e:	4770      	bx	lr
    2780:	1000003c 	.word	0x1000003c
    2784:	10001260 	.word	0x10001260
    2788:	1000003e 	.word	0x1000003e
    278c:	10000e04 	.word	0x10000e04
    2790:	10000040 	.word	0x10000040
    2794:	10001468 	.word	0x10001468
    2798:	10000042 	.word	0x10000042
    279c:	10001368 	.word	0x10001368

000027a0 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    27a0:	b480      	push	{r7}
    27a2:	b083      	sub	sp, #12
    27a4:	af00      	add	r7, sp, #0
    27a6:	4603      	mov	r3, r0
    27a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    27aa:	4908      	ldr	r1, [pc, #32]	; (27cc <NVIC_EnableIRQ+0x2c>)
    27ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
    27b0:	095b      	lsrs	r3, r3, #5
    27b2:	79fa      	ldrb	r2, [r7, #7]
    27b4:	f002 021f 	and.w	r2, r2, #31
    27b8:	2001      	movs	r0, #1
    27ba:	fa00 f202 	lsl.w	r2, r0, r2
    27be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    27c2:	370c      	adds	r7, #12
    27c4:	46bd      	mov	sp, r7
    27c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    27ca:	4770      	bx	lr
    27cc:	e000e100 	.word	0xe000e100

000027d0 <WDT_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void WDT_IRQHandler(void) {
    27d0:	b480      	push	{r7}
    27d2:	af00      	add	r7, sp, #0
	LPC_WDT->WDMOD &= ~WDTOF; /* clear the time-out terrupt flag */
    27d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    27d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    27dc:	781b      	ldrb	r3, [r3, #0]
    27de:	b2db      	uxtb	r3, r3
    27e0:	f023 0304 	bic.w	r3, r3, #4
    27e4:	b2db      	uxtb	r3, r3
    27e6:	7013      	strb	r3, [r2, #0]
	wdt_counter++;
    27e8:	4b04      	ldr	r3, [pc, #16]	; (27fc <WDT_IRQHandler+0x2c>)
    27ea:	681b      	ldr	r3, [r3, #0]
    27ec:	3301      	adds	r3, #1
    27ee:	4a03      	ldr	r2, [pc, #12]	; (27fc <WDT_IRQHandler+0x2c>)
    27f0:	6013      	str	r3, [r2, #0]
	return;
    27f2:	bf00      	nop
}
    27f4:	46bd      	mov	sp, r7
    27f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    27fa:	4770      	bx	lr
    27fc:	10001c64 	.word	0x10001c64

00002800 <WDTInit>:
	LPC_WDT->WDMOD = 0x3;
	//WDTFeed();
	return (0);
}

uint32_t WDTInit(uint32_t feed) {
    2800:	b580      	push	{r7, lr}
    2802:	b082      	sub	sp, #8
    2804:	af00      	add	r7, sp, #0
    2806:	6078      	str	r0, [r7, #4]
	wdt_counter = 0;
    2808:	4b0c      	ldr	r3, [pc, #48]	; (283c <WDTInit+0x3c>)
    280a:	2200      	movs	r2, #0
    280c:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(WDT_IRQn);
    280e:	2000      	movs	r0, #0
    2810:	f7ff ffc6 	bl	27a0 <NVIC_EnableIRQ>
	LPC_WDT->WDCLKSEL = 0x1;//0x0 = IRC (Internal RC Oscillator) ,0x1 = APB Peripheral clock
    2814:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2818:	2201      	movs	r2, #1
    281a:	611a      	str	r2, [r3, #16]
	//IRC is active even in Deep Sleep, and WDT Interrupt can wake up MCU in this mode.
	LPC_WDT->WDTC = feed; /* once WDEN is set, the WDT will start after feeding */
    281c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2820:	687b      	ldr	r3, [r7, #4]
    2822:	6053      	str	r3, [r2, #4]
	LPC_WDT->WDMOD = 0x3;
    2824:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2828:	2203      	movs	r2, #3
    282a:	701a      	strb	r2, [r3, #0]
	WDTFeed();
    282c:	f000 f808 	bl	2840 <WDTFeed>
	return (0);
    2830:	2300      	movs	r3, #0
}
    2832:	4618      	mov	r0, r3
    2834:	3708      	adds	r7, #8
    2836:	46bd      	mov	sp, r7
    2838:	bd80      	pop	{r7, pc}
    283a:	bf00      	nop
    283c:	10001c64 	.word	0x10001c64

00002840 <WDTFeed>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void WDTFeed(void) {
    2840:	b480      	push	{r7}
    2842:	af00      	add	r7, sp, #0
	LPC_WDT->WDFEED = 0xAA; /* Feeding sequence */
    2844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2848:	22aa      	movs	r2, #170	; 0xaa
    284a:	721a      	strb	r2, [r3, #8]
	LPC_WDT->WDFEED = 0x55;
    284c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2850:	2255      	movs	r2, #85	; 0x55
    2852:	721a      	strb	r2, [r3, #8]
	return;
    2854:	bf00      	nop
}
    2856:	46bd      	mov	sp, r7
    2858:	f85d 7b04 	ldr.w	r7, [sp], #4
    285c:	4770      	bx	lr
    285e:	bf00      	nop

00002860 <XModemReadByte>:
//	return (1);
//}


uint8_t XModemReadByte( char* pByte )
{
    2860:	b580      	push	{r7, lr}
    2862:	b08a      	sub	sp, #40	; 0x28
    2864:	af00      	add	r7, sp, #0
    2866:	6078      	str	r0, [r7, #4]
	char* pnewline;
	char asciiLen[10];
	unsigned int len, i;
	unsigned dataoffset;

	if (dataIndex >= dataLen) {
    2868:	4b47      	ldr	r3, [pc, #284]	; (2988 <XModemReadByte+0x128>)
    286a:	881a      	ldrh	r2, [r3, #0]
    286c:	4b47      	ldr	r3, [pc, #284]	; (298c <XModemReadByte+0x12c>)
    286e:	881b      	ldrh	r3, [r3, #0]
    2870:	429a      	cmp	r2, r3
    2872:	d378      	bcc.n	2966 <XModemReadByte+0x106>
		// all buffer consumed read more from TCP connection
		dataLen = GSM_TCP_Recv( receiveBuf, RECEIVE_BUFF_LEN );
    2874:	4846      	ldr	r0, [pc, #280]	; (2990 <XModemReadByte+0x130>)
    2876:	f240 414c 	movw	r1, #1100	; 0x44c
    287a:	f7fd fd7f 	bl	37c <GSM_TCP_Recv>
    287e:	4603      	mov	r3, r0
    2880:	b29a      	uxth	r2, r3
    2882:	4b42      	ldr	r3, [pc, #264]	; (298c <XModemReadByte+0x12c>)
    2884:	801a      	strh	r2, [r3, #0]
		receiveBuf[dataLen] = '\0';
    2886:	4b41      	ldr	r3, [pc, #260]	; (298c <XModemReadByte+0x12c>)
    2888:	881b      	ldrh	r3, [r3, #0]
    288a:	461a      	mov	r2, r3
    288c:	4b40      	ldr	r3, [pc, #256]	; (2990 <XModemReadByte+0x130>)
    288e:	2100      	movs	r1, #0
    2890:	5499      	strb	r1, [r3, r2]

		// find the length of the message between
		// ",TCP," and "\r\n"
		pdata = strstr( receiveBuf, "IPD" );
    2892:	483f      	ldr	r0, [pc, #252]	; (2990 <XModemReadByte+0x130>)
    2894:	493f      	ldr	r1, [pc, #252]	; (2994 <XModemReadByte+0x134>)
    2896:	f002 f8c4 	bl	4a22 <strstr>
    289a:	6278      	str	r0, [r7, #36]	; 0x24
		if (pdata == NULL)
    289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    289e:	2b00      	cmp	r3, #0
    28a0:	d115      	bne.n	28ce <XModemReadByte+0x6e>
		{
			pdata = strstr( receiveBuf, ",TCP," );
    28a2:	483b      	ldr	r0, [pc, #236]	; (2990 <XModemReadByte+0x130>)
    28a4:	493c      	ldr	r1, [pc, #240]	; (2998 <XModemReadByte+0x138>)
    28a6:	f002 f8bc 	bl	4a22 <strstr>
    28aa:	6278      	str	r0, [r7, #36]	; 0x24
			if (pdata == NULL) {
    28ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28ae:	2b00      	cmp	r3, #0
    28b0:	d101      	bne.n	28b6 <XModemReadByte+0x56>
				return (0);
    28b2:	2300      	movs	r3, #0
    28b4:	e063      	b.n	297e <XModemReadByte+0x11e>
			}

			pnewline = strstr(pdata, "\r\n");
    28b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    28b8:	4938      	ldr	r1, [pc, #224]	; (299c <XModemReadByte+0x13c>)
    28ba:	f002 f8b2 	bl	4a22 <strstr>
    28be:	6238      	str	r0, [r7, #32]
			dataoffset = 2;
    28c0:	2302      	movs	r3, #2
    28c2:	61bb      	str	r3, [r7, #24]
			if (pnewline == NULL) {
    28c4:	6a3b      	ldr	r3, [r7, #32]
    28c6:	2b00      	cmp	r3, #0
    28c8:	d10d      	bne.n	28e6 <XModemReadByte+0x86>
				return (0);
    28ca:	2300      	movs	r3, #0
    28cc:	e057      	b.n	297e <XModemReadByte+0x11e>
			}

		} else
		{
			pnewline = strstr( pdata, "TCP:" );
    28ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
    28d0:	4933      	ldr	r1, [pc, #204]	; (29a0 <XModemReadByte+0x140>)
    28d2:	f002 f8a6 	bl	4a22 <strstr>
    28d6:	6238      	str	r0, [r7, #32]
			if (pnewline == NULL) {
    28d8:	6a3b      	ldr	r3, [r7, #32]
    28da:	2b00      	cmp	r3, #0
    28dc:	d101      	bne.n	28e2 <XModemReadByte+0x82>
				return (0);
    28de:	2300      	movs	r3, #0
    28e0:	e04d      	b.n	297e <XModemReadByte+0x11e>
			}
			dataoffset = 4;
    28e2:	2304      	movs	r3, #4
    28e4:	61bb      	str	r3, [r7, #24]
		}

		strncpy( asciiLen, pdata + 3, pnewline - pdata );
    28e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28e8:	1cd9      	adds	r1, r3, #3
    28ea:	6a3a      	ldr	r2, [r7, #32]
    28ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28ee:	1ad3      	subs	r3, r2, r3
    28f0:	461a      	mov	r2, r3
    28f2:	f107 0308 	add.w	r3, r7, #8
    28f6:	4618      	mov	r0, r3
    28f8:	f002 f867 	bl	49ca <strncpy>

		asciiLen[pnewline - pdata] = '\0';
    28fc:	6a3a      	ldr	r2, [r7, #32]
    28fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2900:	1ad3      	subs	r3, r2, r3
    2902:	f107 0228 	add.w	r2, r7, #40	; 0x28
    2906:	4413      	add	r3, r2
    2908:	2200      	movs	r2, #0
    290a:	f803 2c20 	strb.w	r2, [r3, #-32]

		len = atoi(asciiLen);
    290e:	f107 0308 	add.w	r3, r7, #8
    2912:	4618      	mov	r0, r3
    2914:	f001 ffda 	bl	48cc <atoi>
    2918:	4603      	mov	r3, r0
    291a:	617b      	str	r3, [r7, #20]

//		int count = sprintf(asciiLen, "%d", len );
//		asciiLen[count] = '\0';
//		TraceDumpHex(asciiLen, strlen(asciiLen));

		for (i = 0; i < len; i++) {
    291c:	2300      	movs	r3, #0
    291e:	61fb      	str	r3, [r7, #28]
    2920:	e00d      	b.n	293e <XModemReadByte+0xde>
			receiveBuf[i] = *(pnewline + dataoffset + i);
    2922:	69ba      	ldr	r2, [r7, #24]
    2924:	69fb      	ldr	r3, [r7, #28]
    2926:	4413      	add	r3, r2
    2928:	6a3a      	ldr	r2, [r7, #32]
    292a:	4413      	add	r3, r2
    292c:	7819      	ldrb	r1, [r3, #0]
    292e:	4a18      	ldr	r2, [pc, #96]	; (2990 <XModemReadByte+0x130>)
    2930:	69fb      	ldr	r3, [r7, #28]
    2932:	4413      	add	r3, r2
    2934:	460a      	mov	r2, r1
    2936:	701a      	strb	r2, [r3, #0]

//		int count = sprintf(asciiLen, "%d", len );
//		asciiLen[count] = '\0';
//		TraceDumpHex(asciiLen, strlen(asciiLen));

		for (i = 0; i < len; i++) {
    2938:	69fb      	ldr	r3, [r7, #28]
    293a:	3301      	adds	r3, #1
    293c:	61fb      	str	r3, [r7, #28]
    293e:	69fa      	ldr	r2, [r7, #28]
    2940:	697b      	ldr	r3, [r7, #20]
    2942:	429a      	cmp	r2, r3
    2944:	d3ed      	bcc.n	2922 <XModemReadByte+0xc2>
			receiveBuf[i] = *(pnewline + dataoffset + i);
		}
		dataLen   = len;
    2946:	697b      	ldr	r3, [r7, #20]
    2948:	b29a      	uxth	r2, r3
    294a:	4b10      	ldr	r3, [pc, #64]	; (298c <XModemReadByte+0x12c>)
    294c:	801a      	strh	r2, [r3, #0]
		dataIndex = 0;
    294e:	4b0e      	ldr	r3, [pc, #56]	; (2988 <XModemReadByte+0x128>)
    2950:	2200      	movs	r2, #0
    2952:	801a      	strh	r2, [r3, #0]
		if( dataLen <= 0 ) {
    2954:	4b0d      	ldr	r3, [pc, #52]	; (298c <XModemReadByte+0x12c>)
    2956:	881b      	ldrh	r3, [r3, #0]
    2958:	2b00      	cmp	r3, #0
    295a:	d104      	bne.n	2966 <XModemReadByte+0x106>
			dataLen = 0;
    295c:	4b0b      	ldr	r3, [pc, #44]	; (298c <XModemReadByte+0x12c>)
    295e:	2200      	movs	r2, #0
    2960:	801a      	strh	r2, [r3, #0]
			return (0);  // no data available
    2962:	2300      	movs	r3, #0
    2964:	e00b      	b.n	297e <XModemReadByte+0x11e>
		}
	}

	(*pByte) = receiveBuf[dataIndex++];
    2966:	4b08      	ldr	r3, [pc, #32]	; (2988 <XModemReadByte+0x128>)
    2968:	881b      	ldrh	r3, [r3, #0]
    296a:	1c5a      	adds	r2, r3, #1
    296c:	b291      	uxth	r1, r2
    296e:	4a06      	ldr	r2, [pc, #24]	; (2988 <XModemReadByte+0x128>)
    2970:	8011      	strh	r1, [r2, #0]
    2972:	461a      	mov	r2, r3
    2974:	4b06      	ldr	r3, [pc, #24]	; (2990 <XModemReadByte+0x130>)
    2976:	5c9a      	ldrb	r2, [r3, r2]
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	701a      	strb	r2, [r3, #0]
	return (1);
    297c:	2301      	movs	r3, #1
}
    297e:	4618      	mov	r0, r3
    2980:	3728      	adds	r7, #40	; 0x28
    2982:	46bd      	mov	sp, r7
    2984:	bd80      	pop	{r7, pc}
    2986:	bf00      	nop
    2988:	10000892 	.word	0x10000892
    298c:	10000890 	.word	0x10000890
    2990:	10000444 	.word	0x10000444
    2994:	0000616c 	.word	0x0000616c
    2998:	00006170 	.word	0x00006170
    299c:	00006178 	.word	0x00006178
    29a0:	0000617c 	.word	0x0000617c

000029a4 <XModem1K_Client>:


int XModem1K_Client(
		uint32_t (*pu32Xmodem1kRxPacketCallback)(uint8_t *pu8Data,
				uint16_t u16Len)) {
    29a4:	b580      	push	{r7, lr}
    29a6:	b0be      	sub	sp, #248	; 0xf8
    29a8:	af00      	add	r7, sp, #0
    29aa:	6078      	str	r0, [r7, #4]
	uint32_t u32InProgress = 1;
    29ac:	2301      	movs	r3, #1
    29ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	uint32_t u32State = STATE_IDLE;
    29b2:	2300      	movs	r3, #0
    29b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint32_t u32ByteCount;
	uint32_t u32PktLen;
	uint16_t u16CRC, calculatedCRC;
	uint16_t frameNum = 0;
    29b8:	2300      	movs	r3, #0
    29ba:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8

	uint32_t trials;

	/* Prepare UART for RX/TX */

	while (u32InProgress) {
    29be:	e21e      	b.n	2dfe <XModem1K_Client+0x45a>
		WDTFeed();
    29c0:	f7ff ff3e 	bl	2840 <WDTFeed>
		switch (u32State) {
    29c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    29c8:	2b01      	cmp	r3, #1
    29ca:	d01e      	beq.n	2a0a <XModem1K_Client+0x66>
    29cc:	2b01      	cmp	r3, #1
    29ce:	d302      	bcc.n	29d6 <XModem1K_Client+0x32>
    29d0:	2b02      	cmp	r3, #2
    29d2:	d061      	beq.n	2a98 <XModem1K_Client+0xf4>
    29d4:	e212      	b.n	2dfc <XModem1K_Client+0x458>
		case STATE_IDLE: {

			/* Send command to server indicating we are ready to receive */
			char u8Cmd = POLL;
    29d6:	2343      	movs	r3, #67	; 0x43
    29d8:	73fb      	strb	r3, [r7, #15]

			TraceNL( "Start downloading" );
    29da:	48d7      	ldr	r0, [pc, #860]	; (2d38 <XModem1K_Client+0x394>)
    29dc:	f7ff f8a6 	bl	1b2c <TraceNL>
			TracePutcHex( u8Cmd );
    29e0:	7bfb      	ldrb	r3, [r7, #15]
    29e2:	4618      	mov	r0, r3
    29e4:	f7ff f8ba 	bl	1b5c <TracePutcHex>
			GSM_TCP_Send(&u8Cmd, 1);
    29e8:	f107 030f 	add.w	r3, r7, #15
    29ec:	4618      	mov	r0, r3
    29ee:	2101      	movs	r1, #1
    29f0:	f7fd fe7e 	bl	6f0 <GSM_TCP_Send>

			/* Start timeout to send another poll if we do not get a response */
			vTimerStart(POLL_PERIOD_ms);
    29f4:	f644 6020 	movw	r0, #20000	; 0x4e20
    29f8:	f000 fa14 	bl	2e24 <vTimerStart>
			trials   = DOWNLOAD_MAX_TRIALS;
    29fc:	2303      	movs	r3, #3
    29fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

			u32State = STATE_CONNECTING;
    2a02:	2301      	movs	r3, #1
    2a04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		}
			break;
    2a08:	e1f9      	b.n	2dfe <XModem1K_Client+0x45a>

		case STATE_CONNECTING: {
			char u8Data;

			/* Check if a character has been received on the UART */
			if( XModemReadByte( &u8Data ) )
    2a0a:	f107 030e 	add.w	r3, r7, #14
    2a0e:	4618      	mov	r0, r3
    2a10:	f7ff ff26 	bl	2860 <XModemReadByte>
    2a14:	4603      	mov	r3, r0
    2a16:	2b00      	cmp	r3, #0
    2a18:	d011      	beq.n	2a3e <XModem1K_Client+0x9a>
			{
				/* Expecting a start of packet character */
				if( u8Data == SOH )
    2a1a:	7bbb      	ldrb	r3, [r7, #14]
    2a1c:	2b01      	cmp	r3, #1
    2a1e:	d13a      	bne.n	2a96 <XModem1K_Client+0xf2>
				{
					/* SOH indicates short pay load packet is being transmitted */
					u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    2a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2a24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
					u32ByteCount = 1;
    2a28:	2301      	movs	r3, #1
    2a2a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

					/* Start packet timeout */
					vTimerStart( PACKET_TIMEOUT_PERIOD_ms);
    2a2e:	f644 6020 	movw	r0, #20000	; 0x4e20
    2a32:	f000 f9f7 	bl	2e24 <vTimerStart>

					/* Wait for a further characters */
					u32State = STATE_RECEIVING;
    2a36:	2302      	movs	r3, #2
    2a38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    2a3c:	e1df      	b.n	2dfe <XModem1K_Client+0x45a>
				}
			} else /* No data received yet, check poll command timeout */
			{
				if ((LPC_TIM0->TCR & 0x01) == 0) {
    2a3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2a42:	685b      	ldr	r3, [r3, #4]
    2a44:	f003 0301 	and.w	r3, r3, #1
    2a48:	2b00      	cmp	r3, #0
    2a4a:	f040 81d8 	bne.w	2dfe <XModem1K_Client+0x45a>
					/* Timeout expired following poll command transmission so try again.. */
					char u8Cmd = POLL;
    2a4e:	2343      	movs	r3, #67	; 0x43
    2a50:	737b      	strb	r3, [r7, #13]

					if (trials-- > 0) {
    2a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    2a56:	1e5a      	subs	r2, r3, #1
    2a58:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	d014      	beq.n	2a8a <XModem1K_Client+0xe6>
						TraceNL("Connecting state timer expired sending  new request  ");
    2a60:	48b6      	ldr	r0, [pc, #728]	; (2d3c <XModem1K_Client+0x398>)
    2a62:	f7ff f863 	bl	1b2c <TraceNL>
						TracePutcHex( u8Cmd );
    2a66:	7b7b      	ldrb	r3, [r7, #13]
    2a68:	4618      	mov	r0, r3
    2a6a:	f7ff f877 	bl	1b5c <TracePutcHex>
						TraceNL("\r\n");
    2a6e:	48b4      	ldr	r0, [pc, #720]	; (2d40 <XModem1K_Client+0x39c>)
    2a70:	f7ff f85c 	bl	1b2c <TraceNL>
						GSM_TCP_Send(&u8Cmd, 1);
    2a74:	f107 030d 	add.w	r3, r7, #13
    2a78:	4618      	mov	r0, r3
    2a7a:	2101      	movs	r1, #1
    2a7c:	f7fd fe38 	bl	6f0 <GSM_TCP_Send>

					/*
					 * Restart timeout to send another poll
					 * if we do not get a response
					 */
					vTimerStart( POLL_PERIOD_ms);
    2a80:	f644 6020 	movw	r0, #20000	; 0x4e20
    2a84:	f000 f9ce 	bl	2e24 <vTimerStart>
    2a88:	e005      	b.n	2a96 <XModem1K_Client+0xf2>
						TraceNL("Connecting state timer expired sending  new request  ");
						TracePutcHex( u8Cmd );
						TraceNL("\r\n");
						GSM_TCP_Send(&u8Cmd, 1);
					} else {
						TraceNL("No reply give up upgrading");
    2a8a:	48ae      	ldr	r0, [pc, #696]	; (2d44 <XModem1K_Client+0x3a0>)
    2a8c:	f7ff f84e 	bl	1b2c <TraceNL>
						return ( DOWNLOAD_ERR_TIMEOUT );
    2a90:	f04f 33ff 	mov.w	r3, #4294967295
    2a94:	e1ba      	b.n	2e0c <XModem1K_Client+0x468>
					 */
					vTimerStart( POLL_PERIOD_ms);
				}
			}
		}
			break;
    2a96:	e1b2      	b.n	2dfe <XModem1K_Client+0x45a>

		case STATE_RECEIVING: {
			char u8Data;

			/* Check if a character has been received on the UART */
			if( XModemReadByte( &u8Data ) )
    2a98:	f107 030c 	add.w	r3, r7, #12
    2a9c:	4618      	mov	r0, r3
    2a9e:	f7ff fedf 	bl	2860 <XModemReadByte>
    2aa2:	4603      	mov	r3, r0
    2aa4:	2b00      	cmp	r3, #0
    2aa6:	f000 8181 	beq.w	2dac <XModem1K_Client+0x408>
			{
				// TracePutcHex( u8Data );
				/* Position of received byte determines action we take */
				if( u32ByteCount == 0 )
    2aaa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    2aae:	2b00      	cmp	r3, #0
    2ab0:	f040 80ab 	bne.w	2c0a <XModem1K_Client+0x266>
				{
					/* Expecting a start of packet character */
					if( u8Data == SOH ) {
    2ab4:	7b3b      	ldrb	r3, [r7, #12]
    2ab6:	2b01      	cmp	r3, #1
    2ab8:	d10b      	bne.n	2ad2 <XModem1K_Client+0x12e>
						/* SOH indicates short pay load packet is being transmitted */
						u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    2aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2abe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
						u32ByteCount = 1;
    2ac2:	2301      	movs	r3, #1
    2ac4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

						/* Start packet timeout */
						vTimerStart(PACKET_TIMEOUT_PERIOD_ms);
    2ac8:	f644 6020 	movw	r0, #20000	; 0x4e20
    2acc:	f000 f9aa 	bl	2e24 <vTimerStart>
    2ad0:	e193      	b.n	2dfa <XModem1K_Client+0x456>
					} else if (u8Data == EOT) {
    2ad2:	7b3b      	ldrb	r3, [r7, #12]
    2ad4:	2b04      	cmp	r3, #4
    2ad6:	f040 8190 	bne.w	2dfa <XModem1K_Client+0x456>
						TraceNL("Received EOT ");
    2ada:	489b      	ldr	r0, [pc, #620]	; (2d48 <XModem1K_Client+0x3a4>)
    2adc:	f7ff f826 	bl	1b2c <TraceNL>
						/* Server indicating transmission is complete */
						TraceNL("Closing TCP connection ");
    2ae0:	489a      	ldr	r0, [pc, #616]	; (2d4c <XModem1K_Client+0x3a8>)
    2ae2:	f7ff f823 	bl	1b2c <TraceNL>
						GSM_TCP_Close( );
    2ae6:	f7fe f80b 	bl	b00 <GSM_TCP_Close>

						u32InProgress = 0;
    2aea:	2300      	movs	r3, #0
    2aec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

						sprintf( buffer, "byte count: %d, packet len %d\r\n", u32ByteCount, u32PktLen);
    2af0:	f107 0310 	add.w	r3, r7, #16
    2af4:	4618      	mov	r0, r3
    2af6:	4996      	ldr	r1, [pc, #600]	; (2d50 <XModem1K_Client+0x3ac>)
    2af8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    2afc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    2b00:	f000 fad8 	bl	30b4 <sprintf>
						Trace( buffer );
    2b04:	f107 0310 	add.w	r3, r7, #16
    2b08:	4618      	mov	r0, r3
    2b0a:	f7fe ffff 	bl	1b0c <Trace>

						/* Call the call back function to indicated a complete transmission */
						/* If length == 0, then EOT */
						pu32Xmodem1kRxPacketCallback( (uint8_t *)SECONDARY_IMAGE_LOAD_ADDR, 0);
    2b0e:	687b      	ldr	r3, [r7, #4]
    2b10:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2b14:	2100      	movs	r1, #0
    2b16:	4798      	blx	r3

						uint32_t imageSize;
						uint16_t imageCRC;

						XModemReadByte( &u8Data );
    2b18:	f107 030c 	add.w	r3, r7, #12
    2b1c:	4618      	mov	r0, r3
    2b1e:	f7ff fe9f 	bl	2860 <XModemReadByte>
						imageSize = u8Data << 24 & 0xFF000000;
    2b22:	7b3b      	ldrb	r3, [r7, #12]
    2b24:	061b      	lsls	r3, r3, #24
    2b26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

						XModemReadByte( &u8Data );
    2b2a:	f107 030c 	add.w	r3, r7, #12
    2b2e:	4618      	mov	r0, r3
    2b30:	f7ff fe96 	bl	2860 <XModemReadByte>
						imageSize |= u8Data << 16 & 0x00FF0000;
    2b34:	7b3b      	ldrb	r3, [r7, #12]
    2b36:	041b      	lsls	r3, r3, #16
    2b38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    2b3c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
    2b40:	4313      	orrs	r3, r2
    2b42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

						XModemReadByte( &u8Data );
    2b46:	f107 030c 	add.w	r3, r7, #12
    2b4a:	4618      	mov	r0, r3
    2b4c:	f7ff fe88 	bl	2860 <XModemReadByte>
						imageSize |= u8Data << 8 & 0x0000FF00;
    2b50:	7b3b      	ldrb	r3, [r7, #12]
    2b52:	021b      	lsls	r3, r3, #8
    2b54:	b29b      	uxth	r3, r3
    2b56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
    2b5a:	4313      	orrs	r3, r2
    2b5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

						XModemReadByte( &u8Data );
    2b60:	f107 030c 	add.w	r3, r7, #12
    2b64:	4618      	mov	r0, r3
    2b66:	f7ff fe7b 	bl	2860 <XModemReadByte>
						imageSize |= u8Data << 0 & 0x000000FF;
    2b6a:	7b3b      	ldrb	r3, [r7, #12]
    2b6c:	461a      	mov	r2, r3
    2b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    2b72:	4313      	orrs	r3, r2
    2b74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc


						XModemReadByte( &u8Data );
    2b78:	f107 030c 	add.w	r3, r7, #12
    2b7c:	4618      	mov	r0, r3
    2b7e:	f7ff fe6f 	bl	2860 <XModemReadByte>
						imageCRC = u8Data << 8 & 0xFF00;
    2b82:	7b3b      	ldrb	r3, [r7, #12]
    2b84:	021b      	lsls	r3, r3, #8
    2b86:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda

						XModemReadByte( &u8Data );
    2b8a:	f107 030c 	add.w	r3, r7, #12
    2b8e:	4618      	mov	r0, r3
    2b90:	f7ff fe66 	bl	2860 <XModemReadByte>
						imageCRC |= u8Data << 0 & 0x00FF;
    2b94:	7b3b      	ldrb	r3, [r7, #12]
    2b96:	b29a      	uxth	r2, r3
    2b98:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
    2b9c:	4313      	orrs	r3, r2
    2b9e:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda

						sprintf( buffer, "file size: 0x%X, CRC: 0x%X\r\n", imageSize, imageCRC );
    2ba2:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
    2ba6:	f107 0210 	add.w	r2, r7, #16
    2baa:	4610      	mov	r0, r2
    2bac:	4969      	ldr	r1, [pc, #420]	; (2d54 <XModem1K_Client+0x3b0>)
    2bae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
    2bb2:	f000 fa7f 	bl	30b4 <sprintf>
						Trace( buffer );
    2bb6:	f107 0310 	add.w	r3, r7, #16
    2bba:	4618      	mov	r0, r3
    2bbc:	f7fe ffa6 	bl	1b0c <Trace>

						calculatedCRC = u16CRC_Calc16( (uint8_t*)SECONDARY_IMAGE_LOAD_ADDR, imageSize );
    2bc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    2bc4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2bc8:	4619      	mov	r1, r3
    2bca:	f7fd ffad 	bl	b28 <u16CRC_Calc16>
    2bce:	4603      	mov	r3, r0
    2bd0:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8

						sprintf( buffer, "Calculated Image CRC: 0x%X\r\n", calculatedCRC );
    2bd4:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
    2bd8:	f107 0210 	add.w	r2, r7, #16
    2bdc:	4610      	mov	r0, r2
    2bde:	495e      	ldr	r1, [pc, #376]	; (2d58 <XModem1K_Client+0x3b4>)
    2be0:	461a      	mov	r2, r3
    2be2:	f000 fa67 	bl	30b4 <sprintf>
						Trace( buffer );
    2be6:	f107 0310 	add.w	r3, r7, #16
    2bea:	4618      	mov	r0, r3
    2bec:	f7fe ff8e 	bl	1b0c <Trace>

						WriteImageSignature( imageSize, (0xFFFF0000 | (0x0000FFFF & (uint32_t)imageCRC)) );
    2bf0:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
    2bf4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2bf8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2bfc:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
    2c00:	4619      	mov	r1, r3
    2c02:	f7fe fbaf 	bl	1364 <WriteImageSignature>

					    // We should have completed the image reception now dump it to see if any problem.
						// TraceDumpHex( SECONDARY_IMAGE_LOAD_ADDR, 20000 );

						return ( 0 );
    2c06:	2300      	movs	r3, #0
    2c08:	e100      	b.n	2e0c <XModem1K_Client+0x468>

					} else {
						// Unexpected char ignore it
					}
				} else if (u32ByteCount == 1) {
    2c0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    2c0e:	2b01      	cmp	r3, #1
    2c10:	d108      	bne.n	2c24 <XModem1K_Client+0x280>
					/* Byte 1 is the packet number - should be different from last one we received */
					frameNum = u8Data;
    2c12:	7b3b      	ldrb	r3, [r7, #12]
    2c14:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
					u32ByteCount++;
    2c18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    2c1c:	3301      	adds	r3, #1
    2c1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    2c22:	e0ea      	b.n	2dfa <XModem1K_Client+0x456>
				} else if (u32ByteCount == 2) {
    2c24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    2c28:	2b02      	cmp	r3, #2
    2c2a:	d11f      	bne.n	2c6c <XModem1K_Client+0x2c8>
					/* Byte 2 is the packet number inverted - check for error with last byte */
					frameNum <<= 8;
    2c2c:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
    2c30:	021b      	lsls	r3, r3, #8
    2c32:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
					frameNum |= u8Data;
    2c36:	7b3b      	ldrb	r3, [r7, #12]
    2c38:	b29a      	uxth	r2, r3
    2c3a:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
    2c3e:	4313      	orrs	r3, r2
    2c40:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
					sprintf( buffer, "frame number :  %d\r\n", frameNum );
    2c44:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
    2c48:	f107 0210 	add.w	r2, r7, #16
    2c4c:	4610      	mov	r0, r2
    2c4e:	4943      	ldr	r1, [pc, #268]	; (2d5c <XModem1K_Client+0x3b8>)
    2c50:	461a      	mov	r2, r3
    2c52:	f000 fa2f 	bl	30b4 <sprintf>
				    TraceNL( buffer );
    2c56:	f107 0310 	add.w	r3, r7, #16
    2c5a:	4618      	mov	r0, r3
    2c5c:	f7fe ff66 	bl	1b2c <TraceNL>

					u32ByteCount++;
    2c60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    2c64:	3301      	adds	r3, #1
    2c66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    2c6a:	e0c6      	b.n	2dfa <XModem1K_Client+0x456>
				} else if( ((u32ByteCount == (SHORT_PACKET_PAYLOAD_LEN+3)) &&
    2c6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    2c70:	f240 4203 	movw	r2, #1027	; 0x403
    2c74:	4293      	cmp	r3, r2
    2c76:	d10d      	bne.n	2c94 <XModem1K_Client+0x2f0>
    2c78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    2c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2c80:	d108      	bne.n	2c94 <XModem1K_Client+0x2f0>
						    (u32PktLen == SHORT_PACKET_PAYLOAD_LEN)) )
				{
					/* If pay load is short byte 131 is the MS byte of the packet CRC, if pay load
					 is long byte 1027 is the MS byte of the packet CRC. */
					u16CRC = u8Data;
    2c82:	7b3b      	ldrb	r3, [r7, #12]
    2c84:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
					u32ByteCount++;
    2c88:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    2c8c:	3301      	adds	r3, #1
    2c8e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    2c92:	e08a      	b.n	2daa <XModem1K_Client+0x406>

				}
				else if( (u32ByteCount == (SHORT_PACKET_PAYLOAD_LEN+4)) &&
    2c94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    2c98:	f240 4204 	movw	r2, #1028	; 0x404
    2c9c:	4293      	cmp	r3, r2
    2c9e:	d178      	bne.n	2d92 <XModem1K_Client+0x3ee>
    2ca0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    2ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2ca8:	d173      	bne.n	2d92 <XModem1K_Client+0x3ee>
						 (u32PktLen == SHORT_PACKET_PAYLOAD_LEN) )
				{
					/* If pay load is short byte 132 is the LS byte of the packet CRC, if pay load
					 is long byte 1028 is the LS byte of the packet CRC. */
					u16CRC <<= 8;
    2caa:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
    2cae:	021b      	lsls	r3, r3, #8
    2cb0:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
					u16CRC |= u8Data;
    2cb4:	7b3b      	ldrb	r3, [r7, #12]
    2cb6:	b29a      	uxth	r2, r3
    2cb8:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
    2cbc:	4313      	orrs	r3, r2
    2cbe:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea

					calculatedCRC = u16CRC_Calc16( &au8RxBuffer[0], u32PktLen );
    2cc2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    2cc6:	4826      	ldr	r0, [pc, #152]	; (2d60 <XModem1K_Client+0x3bc>)
    2cc8:	4619      	mov	r1, r3
    2cca:	f7fd ff2d 	bl	b28 <u16CRC_Calc16>
    2cce:	4603      	mov	r3, r0
    2cd0:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
					sprintf( buffer, "calculated CRC : 0x%X\r\n", calculatedCRC );
    2cd4:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
    2cd8:	f107 0210 	add.w	r2, r7, #16
    2cdc:	4610      	mov	r0, r2
    2cde:	4921      	ldr	r1, [pc, #132]	; (2d64 <XModem1K_Client+0x3c0>)
    2ce0:	461a      	mov	r2, r3
    2ce2:	f000 f9e7 	bl	30b4 <sprintf>
				    TraceNL( buffer );
    2ce6:	f107 0310 	add.w	r3, r7, #16
    2cea:	4618      	mov	r0, r3
    2cec:	f7fe ff1e 	bl	1b2c <TraceNL>

					/* Check the received CRC against the CRC we generate on the packet data */
					if( calculatedCRC == u16CRC )
    2cf0:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
    2cf4:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
    2cf8:	429a      	cmp	r2, r3
    2cfa:	d13b      	bne.n	2d74 <XModem1K_Client+0x3d0>
					{
						char u8Cmd;

						u8Cmd = ACK;
    2cfc:	2306      	movs	r3, #6
    2cfe:	72fb      	strb	r3, [r7, #11]
						GSM_TCP_Send( &u8Cmd, 1 );
    2d00:	f107 030b 	add.w	r3, r7, #11
    2d04:	4618      	mov	r0, r3
    2d06:	2101      	movs	r1, #1
    2d08:	f7fd fcf2 	bl	6f0 <GSM_TCP_Send>

						WDTFeed();
    2d0c:	f7ff fd98 	bl	2840 <WDTFeed>
						// write to flash
						pu32Xmodem1kRxPacketCallback( &au8RxBuffer[0], u32PktLen );
    2d10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    2d14:	b29a      	uxth	r2, r3
    2d16:	687b      	ldr	r3, [r7, #4]
    2d18:	4811      	ldr	r0, [pc, #68]	; (2d60 <XModem1K_Client+0x3bc>)
    2d1a:	4611      	mov	r1, r2
    2d1c:	4798      	blx	r3

						TraceNL("Received a frame ");
    2d1e:	4812      	ldr	r0, [pc, #72]	; (2d68 <XModem1K_Client+0x3c4>)
    2d20:	f7fe ff04 	bl	1b2c <TraceNL>
						TraceNL("Sending  ACK ");
    2d24:	4811      	ldr	r0, [pc, #68]	; (2d6c <XModem1K_Client+0x3c8>)
    2d26:	f7fe ff01 	bl	1b2c <TraceNL>
						TraceNL("CRC matches \r\n");
    2d2a:	4811      	ldr	r0, [pc, #68]	; (2d70 <XModem1K_Client+0x3cc>)
    2d2c:	f7fe fefe 	bl	1b2c <TraceNL>
						DelayMs( 100 );
    2d30:	2064      	movs	r0, #100	; 0x64
    2d32:	f7fe fed5 	bl	1ae0 <DelayMs>
    2d36:	e028      	b.n	2d8a <XModem1K_Client+0x3e6>
    2d38:	00006184 	.word	0x00006184
    2d3c:	00006198 	.word	0x00006198
    2d40:	00006178 	.word	0x00006178
    2d44:	000061d0 	.word	0x000061d0
    2d48:	000061ec 	.word	0x000061ec
    2d4c:	000061fc 	.word	0x000061fc
    2d50:	00006214 	.word	0x00006214
    2d54:	00006234 	.word	0x00006234
    2d58:	00006254 	.word	0x00006254
    2d5c:	00006274 	.word	0x00006274
    2d60:	10000044 	.word	0x10000044
    2d64:	0000628c 	.word	0x0000628c
    2d68:	000062a4 	.word	0x000062a4
    2d6c:	000062b8 	.word	0x000062b8
    2d70:	000062c8 	.word	0x000062c8

					} else /* Error CRC calculated does not match that received */
					{
						/* Indicate problem to server - should result in packet being resent.. */
						char u8Cmd = NAK;
    2d74:	2315      	movs	r3, #21
    2d76:	72bb      	strb	r3, [r7, #10]
						TraceNL("CRC does not match  NAK ing");
    2d78:	4826      	ldr	r0, [pc, #152]	; (2e14 <XModem1K_Client+0x470>)
    2d7a:	f7fe fed7 	bl	1b2c <TraceNL>
						GSM_TCP_Send(&u8Cmd, 1);
    2d7e:	f107 030a 	add.w	r3, r7, #10
    2d82:	4618      	mov	r0, r3
    2d84:	2101      	movs	r1, #1
    2d86:	f7fd fcb3 	bl	6f0 <GSM_TCP_Send>
					}
					u32ByteCount = 0;
    2d8a:	2300      	movs	r3, #0
    2d8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    2d90:	e00b      	b.n	2daa <XModem1K_Client+0x406>

				} else {
					/* Must be pay load data so store */
					au8RxBuffer[u32ByteCount - PACKET_HEADER_LEN] = u8Data;
    2d92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    2d96:	3b03      	subs	r3, #3
    2d98:	7b39      	ldrb	r1, [r7, #12]
    2d9a:	4a1f      	ldr	r2, [pc, #124]	; (2e18 <XModem1K_Client+0x474>)
    2d9c:	54d1      	strb	r1, [r2, r3]
					u32ByteCount++;
    2d9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    2da2:	3301      	adds	r3, #1
    2da4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    2da8:	e027      	b.n	2dfa <XModem1K_Client+0x456>
    2daa:	e026      	b.n	2dfa <XModem1K_Client+0x456>
				}
			}
			else
			{
				if( (LPC_TIM0->TCR & 0x01) == 0 )
    2dac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2db0:	685b      	ldr	r3, [r3, #4]
    2db2:	f003 0301 	and.w	r3, r3, #1
    2db6:	2b00      	cmp	r3, #0
    2db8:	d11f      	bne.n	2dfa <XModem1K_Client+0x456>
				{
					/* Timeout expired no data received stop upgrade  */
					if (trials-- > 0)
    2dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    2dbe:	1e5a      	subs	r2, r3, #1
    2dc0:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
    2dc4:	2b00      	cmp	r3, #0
    2dc6:	d012      	beq.n	2dee <XModem1K_Client+0x44a>
					{
						TraceNL("Time out in RECEIVING   ");
    2dc8:	4814      	ldr	r0, [pc, #80]	; (2e1c <XModem1K_Client+0x478>)
    2dca:	f7fe feaf 	bl	1b2c <TraceNL>
						char u8Cmd = NAK;
    2dce:	2315      	movs	r3, #21
    2dd0:	727b      	strb	r3, [r7, #9]
						GSM_TCP_Send(&u8Cmd, 1);
    2dd2:	f107 0309 	add.w	r3, r7, #9
    2dd6:	4618      	mov	r0, r3
    2dd8:	2101      	movs	r1, #1
    2dda:	f7fd fc89 	bl	6f0 <GSM_TCP_Send>

						u32ByteCount = 0;
    2dde:	2300      	movs	r3, #0
    2de0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
						vTimerStart( POLL_PERIOD_ms);
    2de4:	f644 6020 	movw	r0, #20000	; 0x4e20
    2de8:	f000 f81c 	bl	2e24 <vTimerStart>
    2dec:	e005      	b.n	2dfa <XModem1K_Client+0x456>
					} else {
						// no more trying giving up upgrading
						TraceNL("Download process failed giving up upgrading");
    2dee:	480c      	ldr	r0, [pc, #48]	; (2e20 <XModem1K_Client+0x47c>)
    2df0:	f7fe fe9c 	bl	1b2c <TraceNL>
						return ( DOWNLOAD_ERR_TIMEOUT );
    2df4:	f04f 33ff 	mov.w	r3, #4294967295
    2df8:	e008      	b.n	2e0c <XModem1K_Client+0x468>
					}
				}
			}
		}
			break;
    2dfa:	e000      	b.n	2dfe <XModem1K_Client+0x45a>

		default:
			break;
    2dfc:	bf00      	nop

	uint32_t trials;

	/* Prepare UART for RX/TX */

	while (u32InProgress) {
    2dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    2e02:	2b00      	cmp	r3, #0
    2e04:	f47f addc 	bne.w	29c0 <XModem1K_Client+0x1c>

		default:
			break;
		}
	}
	return ( DOWNLOAD_ERR_TIMEOUT );
    2e08:	f04f 33ff 	mov.w	r3, #4294967295
}
    2e0c:	4618      	mov	r0, r3
    2e0e:	37f8      	adds	r7, #248	; 0xf8
    2e10:	46bd      	mov	sp, r7
    2e12:	bd80      	pop	{r7, pc}
    2e14:	000062d8 	.word	0x000062d8
    2e18:	10000044 	.word	0x10000044
    2e1c:	000062f4 	.word	0x000062f4
    2e20:	00006310 	.word	0x00006310

00002e24 <vTimerStart>:
 ** Parameters:	     None
 **
 ** Returned value:  None
 **
 *****************************************************************************/
static void vTimerStart(uint32_t u32Periodms) {
    2e24:	b480      	push	{r7}
    2e26:	b083      	sub	sp, #12
    2e28:	af00      	add	r7, sp, #0
    2e2a:	6078      	str	r0, [r7, #4]
	/* Enable the timer clock */
	LPC_SC->PCONP |= (1UL << 1);
    2e2c:	4a19      	ldr	r2, [pc, #100]	; (2e94 <vTimerStart+0x70>)
    2e2e:	4b19      	ldr	r3, [pc, #100]	; (2e94 <vTimerStart+0x70>)
    2e30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2e34:	f043 0302 	orr.w	r3, r3, #2
    2e38:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

	/* Configure the timer so that we can poll for a match */
	LPC_TIM0->TCR = 0x02; /* reset timer */
    2e3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2e40:	2202      	movs	r2, #2
    2e42:	605a      	str	r2, [r3, #4]
	LPC_TIM0->PR = 0x00; /* set prescaler to zero */
    2e44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2e48:	2200      	movs	r2, #0
    2e4a:	60da      	str	r2, [r3, #12]
	LPC_TIM0->MR0 = u32Periodms
    2e4c:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
			* ((SystemCoreClock / 4 / (LPC_TIM0->PR + 1)) / 1000UL);
    2e50:	4b11      	ldr	r3, [pc, #68]	; (2e98 <vTimerStart+0x74>)
    2e52:	681b      	ldr	r3, [r3, #0]
    2e54:	4a11      	ldr	r2, [pc, #68]	; (2e9c <vTimerStart+0x78>)
    2e56:	fba2 2303 	umull	r2, r3, r2, r3
    2e5a:	0a1a      	lsrs	r2, r3, #8
    2e5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2e60:	68db      	ldr	r3, [r3, #12]
    2e62:	3301      	adds	r3, #1
    2e64:	fbb2 f3f3 	udiv	r3, r2, r3
    2e68:	687a      	ldr	r2, [r7, #4]
    2e6a:	fb02 f303 	mul.w	r3, r2, r3
	LPC_SC->PCONP |= (1UL << 1);

	/* Configure the timer so that we can poll for a match */
	LPC_TIM0->TCR = 0x02; /* reset timer */
	LPC_TIM0->PR = 0x00; /* set prescaler to zero */
	LPC_TIM0->MR0 = u32Periodms
    2e6e:	618b      	str	r3, [r1, #24]
			* ((SystemCoreClock / 4 / (LPC_TIM0->PR + 1)) / 1000UL);
	LPC_TIM0->IR = 0xFF; /* reset all interrupts */
    2e70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2e74:	22ff      	movs	r2, #255	; 0xff
    2e76:	601a      	str	r2, [r3, #0]
	LPC_TIM0->MCR = 0x04; /* stop timer on match */
    2e78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2e7c:	2204      	movs	r2, #4
    2e7e:	615a      	str	r2, [r3, #20]
	LPC_TIM0->TCR = 0x01; /* start timer */
    2e80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2e84:	2201      	movs	r2, #1
    2e86:	605a      	str	r2, [r3, #4]
}
    2e88:	370c      	adds	r7, #12
    2e8a:	46bd      	mov	sp, r7
    2e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e90:	4770      	bx	lr
    2e92:	bf00      	nop
    2e94:	400fc000 	.word	0x400fc000
    2e98:	10000024 	.word	0x10000024
    2e9c:	10624dd3 	.word	0x10624dd3

00002ea0 <SystemCoreClockUpdate>:

/*----------------------------------------------------------------------------
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
    2ea0:	b538      	push	{r3, r4, r5, lr}

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    2ea2:	4b24      	ldr	r3, [pc, #144]	; (2f34 <SystemCoreClockUpdate+0x94>)
    2ea4:	4c24      	ldr	r4, [pc, #144]	; (2f38 <SystemCoreClockUpdate+0x98>)
    2ea6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2eaa:	f3c2 6201 	ubfx	r2, r2, #24, #2
    2eae:	2a03      	cmp	r2, #3
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    2eb0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    2eb4:	f002 0203 	and.w	r2, r2, #3
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    2eb8:	d128      	bne.n	2f0c <SystemCoreClockUpdate+0x6c>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    2eba:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    2ebe:	2a01      	cmp	r2, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    2ec0:	f3c1 010e 	ubfx	r1, r1, #0, #15
    2ec4:	f101 0101 	add.w	r1, r1, #1
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    2ec8:	d009      	beq.n	2ede <SystemCoreClockUpdate+0x3e>
    2eca:	2a02      	cmp	r2, #2
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    2ecc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    2ed0:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    2ed4:	f3c2 4207 	ubfx	r2, r2, #16, #8
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    2ed8:	d009      	beq.n	2eee <SystemCoreClockUpdate+0x4e>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = (IRC_OSC * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    2eda:	4818      	ldr	r0, [pc, #96]	; (2f3c <SystemCoreClockUpdate+0x9c>)
    2edc:	e009      	b.n	2ef2 <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    2ede:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    2ee2:	4817      	ldr	r0, [pc, #92]	; (2f40 <SystemCoreClockUpdate+0xa0>)
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
    2ee4:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    2ee8:	f3c2 4207 	ubfx	r2, r2, #16, #8
    2eec:	e001      	b.n	2ef2 <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    2eee:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
    2ef2:	3201      	adds	r2, #1
    2ef4:	2300      	movs	r3, #0
    2ef6:	fba1 0100 	umull	r0, r1, r1, r0
    2efa:	f002 f933 	bl	5164 <__aeabi_uldivmod>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    2efe:	b2ea      	uxtb	r2, r5
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    2f00:	3201      	adds	r2, #1
    2f02:	2300      	movs	r3, #0
    2f04:	f002 f92e 	bl	5164 <__aeabi_uldivmod>
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
    2f08:	6020      	str	r0, [r4, #0]
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    2f0a:	bd38      	pop	{r3, r4, r5, pc}
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    2f0c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    2f10:	2a01      	cmp	r2, #1
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    2f12:	b2db      	uxtb	r3, r3
    2f14:	f103 0301 	add.w	r3, r3, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    2f18:	d003      	beq.n	2f22 <SystemCoreClockUpdate+0x82>
    2f1a:	2a02      	cmp	r2, #2
    2f1c:	d003      	beq.n	2f26 <SystemCoreClockUpdate+0x86>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    2f1e:	4a09      	ldr	r2, [pc, #36]	; (2f44 <SystemCoreClockUpdate+0xa4>)
    2f20:	e003      	b.n	2f2a <SystemCoreClockUpdate+0x8a>
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    2f22:	4a09      	ldr	r2, [pc, #36]	; (2f48 <SystemCoreClockUpdate+0xa8>)
    2f24:	e001      	b.n	2f2a <SystemCoreClockUpdate+0x8a>
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    2f26:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
    2f2a:	fbb2 f3f3 	udiv	r3, r2, r3
    2f2e:	6023      	str	r3, [r4, #0]
    2f30:	bd38      	pop	{r3, r4, r5, pc}
    2f32:	bf00      	nop
    2f34:	400fc000 	.word	0x400fc000
    2f38:	10000024 	.word	0x10000024
    2f3c:	007a1200 	.word	0x007a1200
    2f40:	016e3600 	.word	0x016e3600
    2f44:	003d0900 	.word	0x003d0900
    2f48:	00b71b00 	.word	0x00b71b00

00002f4c <SystemInit>:
 *         Initialize the System.
 */
void SystemInit (void)
{
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
    2f4c:	4b34      	ldr	r3, [pc, #208]	; (3020 <SystemInit+0xd4>)
    2f4e:	2220      	movs	r2, #32
    2f50:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    2f54:	461a      	mov	r2, r3
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    2f56:	f8d2 11a0 	ldr.w	r1, [r2, #416]	; 0x1a0
    2f5a:	4b31      	ldr	r3, [pc, #196]	; (3020 <SystemInit+0xd4>)
    2f5c:	0648      	lsls	r0, r1, #25
    2f5e:	d5fa      	bpl.n	2f56 <SystemInit+0xa>
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    2f60:	2203      	movs	r2, #3
    2f62:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    2f66:	2200      	movs	r2, #0
    2f68:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    2f6c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    2f70:	4a2c      	ldr	r2, [pc, #176]	; (3024 <SystemInit+0xd8>)
  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    2f72:	2001      	movs	r0, #1
    2f74:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    2f78:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    2f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
  LPC_SC->PLL0FEED  = 0x55;
    2f7e:	2255      	movs	r2, #85	; 0x55

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    2f80:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    2f84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    2f88:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    2f8c:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    2f90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    2f94:	4b22      	ldr	r3, [pc, #136]	; (3020 <SystemInit+0xd4>)
    2f96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2f9a:	0151      	lsls	r1, r2, #5
    2f9c:	d5fa      	bpl.n	2f94 <SystemInit+0x48>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    2f9e:	2203      	movs	r2, #3
    2fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    2fa4:	22aa      	movs	r2, #170	; 0xaa
    2fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    2faa:	2255      	movs	r2, #85	; 0x55
    2fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    2fb0:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
    2fb4:	4a1a      	ldr	r2, [pc, #104]	; (3020 <SystemInit+0xd4>)
    2fb6:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
    2fba:	d0f9      	beq.n	2fb0 <SystemInit+0x64>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
    2fbc:	2323      	movs	r3, #35	; 0x23
    2fbe:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0xAA;
    2fc2:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PLL1FEED  = 0x55;
    2fc4:	2355      	movs	r3, #85	; 0x55

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    2fc6:	2001      	movs	r0, #1
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
  LPC_SC->PLL1FEED  = 0xAA;
    2fc8:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    2fcc:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    2fd0:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    2fd4:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    2fd8:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    2fdc:	4b10      	ldr	r3, [pc, #64]	; (3020 <SystemInit+0xd4>)
    2fde:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    2fe2:	0552      	lsls	r2, r2, #21
    2fe4:	d5fa      	bpl.n	2fdc <SystemInit+0x90>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    2fe6:	2203      	movs	r2, #3
    2fe8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    2fec:	22aa      	movs	r2, #170	; 0xaa
    2fee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    2ff2:	2255      	movs	r2, #85	; 0x55
    2ff4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    2ff8:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    2ffc:	4a08      	ldr	r2, [pc, #32]	; (3020 <SystemInit+0xd4>)
    2ffe:	f411 7f40 	tst.w	r1, #768	; 0x300
    3002:	d0f9      	beq.n	2ff8 <SystemInit+0xac>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    3004:	4b08      	ldr	r3, [pc, #32]	; (3028 <SystemInit+0xdc>)
    3006:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    300a:	2300      	movs	r3, #0
    300c:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = (LPC_SC->FLASHCFG & ~0x0000F000) | FLASHCFG_Val;
    3010:	6813      	ldr	r3, [r2, #0]
    3012:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
    3016:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    301a:	6013      	str	r3, [r2, #0]
    301c:	4770      	bx	lr
    301e:	bf00      	nop
    3020:	400fc000 	.word	0x400fc000
    3024:	00050063 	.word	0x00050063
    3028:	042887de 	.word	0x042887de

0000302c <__main>:
    302c:	b508      	push	{r3, lr}
    302e:	2000      	movs	r0, #0
    3030:	4601      	mov	r1, r0
    3032:	4602      	mov	r2, r0
    3034:	f000 fcf4 	bl	3a20 <_initio>
    3038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    303c:	f7fe ba86 	b.w	154c <main>

00003040 <memset>:
    3040:	f002 bcf8 	b.w	5a34 <__aeabi_lowlevel_memset>

00003044 <fp_round>:
    3044:	5c42      	ldrb	r2, [r0, r1]
    3046:	1843      	adds	r3, r0, r1
    3048:	2a34      	cmp	r2, #52	; 0x34
    304a:	dc01      	bgt.n	3050 <fp_round+0xc>
    304c:	2000      	movs	r0, #0
    304e:	4770      	bx	lr
    3050:	2a35      	cmp	r2, #53	; 0x35
    3052:	d106      	bne.n	3062 <fp_round+0x1e>
    3054:	4619      	mov	r1, r3
    3056:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    305a:	2a30      	cmp	r2, #48	; 0x30
    305c:	d0fb      	beq.n	3056 <fp_round+0x12>
    305e:	2a00      	cmp	r2, #0
    3060:	d0f4      	beq.n	304c <fp_round+0x8>
    3062:	461a      	mov	r2, r3
    3064:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    3068:	2939      	cmp	r1, #57	; 0x39
    306a:	d102      	bne.n	3072 <fp_round+0x2e>
    306c:	2130      	movs	r1, #48	; 0x30
    306e:	7011      	strb	r1, [r2, #0]
    3070:	e7f8      	b.n	3064 <fp_round+0x20>
    3072:	3101      	adds	r1, #1
    3074:	7011      	strb	r1, [r2, #0]
    3076:	7802      	ldrb	r2, [r0, #0]
    3078:	2a30      	cmp	r2, #48	; 0x30
    307a:	d0e7      	beq.n	304c <fp_round+0x8>
    307c:	1a1a      	subs	r2, r3, r0
    307e:	2a00      	cmp	r2, #0
    3080:	db03      	blt.n	308a <fp_round+0x46>
    3082:	f813 2901 	ldrb.w	r2, [r3], #-1
    3086:	709a      	strb	r2, [r3, #2]
    3088:	e7f8      	b.n	307c <fp_round+0x38>
    308a:	2001      	movs	r0, #1
    308c:	4770      	bx	lr

0000308e <pr_dec.constprop.1>:
    308e:	b510      	push	{r4, lr}
    3090:	1f8c      	subs	r4, r1, #6
    3092:	42a1      	cmp	r1, r4
    3094:	d00d      	beq.n	30b2 <pr_dec.constprop.1+0x24>
    3096:	230a      	movs	r3, #10
    3098:	fb90 f3f3 	sdiv	r3, r0, r3
    309c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    30a0:	3030      	adds	r0, #48	; 0x30
    30a2:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
    30a6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    30aa:	f801 0901 	strb.w	r0, [r1], #-1
    30ae:	4618      	mov	r0, r3
    30b0:	e7ef      	b.n	3092 <pr_dec.constprop.1+0x4>
    30b2:	bd10      	pop	{r4, pc}

000030b4 <sprintf>:
    30b4:	b40e      	push	{r1, r2, r3}
    30b6:	b530      	push	{r4, r5, lr}
    30b8:	4605      	mov	r5, r0
    30ba:	b090      	sub	sp, #64	; 0x40
    30bc:	ab13      	add	r3, sp, #76	; 0x4c
    30be:	f853 4b04 	ldr.w	r4, [r3], #4
    30c2:	2100      	movs	r1, #0
    30c4:	2228      	movs	r2, #40	; 0x28
    30c6:	a806      	add	r0, sp, #24
    30c8:	9305      	str	r3, [sp, #20]
    30ca:	f7ff ffb9 	bl	3040 <memset>
    30ce:	230a      	movs	r3, #10
    30d0:	9309      	str	r3, [sp, #36]	; 0x24
    30d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    30d6:	9308      	str	r3, [sp, #32]
    30d8:	9b05      	ldr	r3, [sp, #20]
    30da:	9400      	str	r4, [sp, #0]
    30dc:	9301      	str	r3, [sp, #4]
    30de:	4b0f      	ldr	r3, [pc, #60]	; (311c <sprintf+0x68>)
    30e0:	a806      	add	r0, sp, #24
    30e2:	9302      	str	r3, [sp, #8]
    30e4:	f04f 32ff 	mov.w	r2, #4294967295
    30e8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    30ec:	9506      	str	r5, [sp, #24]
    30ee:	f000 fce9 	bl	3ac4 <__vfprintf>
    30f2:	9b08      	ldr	r3, [sp, #32]
    30f4:	4604      	mov	r4, r0
    30f6:	3b01      	subs	r3, #1
    30f8:	2b00      	cmp	r3, #0
    30fa:	9308      	str	r3, [sp, #32]
    30fc:	db03      	blt.n	3106 <sprintf+0x52>
    30fe:	9b06      	ldr	r3, [sp, #24]
    3100:	2200      	movs	r2, #0
    3102:	701a      	strb	r2, [r3, #0]
    3104:	e003      	b.n	310e <sprintf+0x5a>
    3106:	2000      	movs	r0, #0
    3108:	a906      	add	r1, sp, #24
    310a:	f001 fcbb 	bl	4a84 <__flsbuf>
    310e:	4620      	mov	r0, r4
    3110:	b010      	add	sp, #64	; 0x40
    3112:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3116:	b003      	add	sp, #12
    3118:	4770      	bx	lr
    311a:	bf00      	nop
    311c:	00003121 	.word	0x00003121

00003120 <fp_display>:
    3120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3124:	4614      	mov	r4, r2
    3126:	f647 72f0 	movw	r2, #32752	; 0x7ff0
    312a:	684e      	ldr	r6, [r1, #4]
    312c:	b09f      	sub	sp, #124	; 0x7c
    312e:	9306      	str	r3, [sp, #24]
    3130:	f3c6 430f 	ubfx	r3, r6, #16, #16
    3134:	f023 030f 	bic.w	r3, r3, #15
    3138:	045b      	lsls	r3, r3, #17
    313a:	680f      	ldr	r7, [r1, #0]
    313c:	0c5b      	lsrs	r3, r3, #17
    313e:	4293      	cmp	r3, r2
    3140:	9005      	str	r0, [sp, #20]
    3142:	f8dd b0a4 	ldr.w	fp, [sp, #164]	; 0xa4
    3146:	9708      	str	r7, [sp, #32]
    3148:	9607      	str	r6, [sp, #28]
    314a:	d127      	bne.n	319c <fp_display+0x7c>
    314c:	2300      	movs	r3, #0
    314e:	70e3      	strb	r3, [r4, #3]
    3150:	f3c6 0313 	ubfx	r3, r6, #0, #20
    3154:	433b      	orrs	r3, r7
    3156:	f04f 036e 	mov.w	r3, #110	; 0x6e
    315a:	d115      	bne.n	3188 <fp_display+0x68>
    315c:	2269      	movs	r2, #105	; 0x69
    315e:	7063      	strb	r3, [r4, #1]
    3160:	2e00      	cmp	r6, #0
    3162:	f04f 0366 	mov.w	r3, #102	; 0x66
    3166:	7022      	strb	r2, [r4, #0]
    3168:	70a3      	strb	r3, [r4, #2]
    316a:	da01      	bge.n	3170 <fp_display+0x50>
    316c:	4b84      	ldr	r3, [pc, #528]	; (3380 <fp_display+0x260>)
    316e:	e010      	b.n	3192 <fp_display+0x72>
    3170:	9b06      	ldr	r3, [sp, #24]
    3172:	079a      	lsls	r2, r3, #30
    3174:	d406      	bmi.n	3184 <fp_display+0x64>
    3176:	4a83      	ldr	r2, [pc, #524]	; (3384 <fp_display+0x264>)
    3178:	f013 0f04 	tst.w	r3, #4
    317c:	4b82      	ldr	r3, [pc, #520]	; (3388 <fp_display+0x268>)
    317e:	bf08      	it	eq
    3180:	4613      	moveq	r3, r2
    3182:	e006      	b.n	3192 <fp_display+0x72>
    3184:	4b81      	ldr	r3, [pc, #516]	; (338c <fp_display+0x26c>)
    3186:	e004      	b.n	3192 <fp_display+0x72>
    3188:	7023      	strb	r3, [r4, #0]
    318a:	2261      	movs	r2, #97	; 0x61
    318c:	70a3      	strb	r3, [r4, #2]
    318e:	4b7d      	ldr	r3, [pc, #500]	; (3384 <fp_display+0x264>)
    3190:	7062      	strb	r2, [r4, #1]
    3192:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    3194:	2003      	movs	r0, #3
    3196:	6013      	str	r3, [r2, #0]
    3198:	f000 bc3f 	b.w	3a1a <fp_display+0x8fa>
    319c:	9b05      	ldr	r3, [sp, #20]
    319e:	f023 0320 	bic.w	r3, r3, #32
    31a2:	2b41      	cmp	r3, #65	; 0x41
    31a4:	f000 8244 	beq.w	3630 <fp_display+0x510>
    31a8:	4638      	mov	r0, r7
    31aa:	4631      	mov	r1, r6
    31ac:	2200      	movs	r2, #0
    31ae:	2300      	movs	r3, #0
    31b0:	f002 fbb6 	bl	5920 <__aeabi_dcmplt>
    31b4:	b138      	cbz	r0, 31c6 <fp_display+0xa6>
    31b6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    31ba:	9a08      	ldr	r2, [sp, #32]
    31bc:	461e      	mov	r6, r3
    31be:	2301      	movs	r3, #1
    31c0:	4617      	mov	r7, r2
    31c2:	9309      	str	r3, [sp, #36]	; 0x24
    31c4:	e000      	b.n	31c8 <fp_display+0xa8>
    31c6:	9009      	str	r0, [sp, #36]	; 0x24
    31c8:	4638      	mov	r0, r7
    31ca:	4631      	mov	r1, r6
    31cc:	2200      	movs	r2, #0
    31ce:	2300      	movs	r3, #0
    31d0:	f002 fb90 	bl	58f4 <__aeabi_dcmpeq>
    31d4:	2800      	cmp	r0, #0
    31d6:	f040 820d 	bne.w	35f4 <fp_display+0x4d4>
    31da:	f240 152d 	movw	r5, #301	; 0x12d
    31de:	aa11      	add	r2, sp, #68	; 0x44
    31e0:	4638      	mov	r0, r7
    31e2:	4631      	mov	r1, r6
    31e4:	f001 fd50 	bl	4c88 <_frexpl>
    31e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    31ea:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    31ee:	4355      	muls	r5, r2
    31f0:	f5a5 53ab 	sub.w	r3, r5, #5472	; 0x1560
    31f4:	3b1c      	subs	r3, #28
    31f6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    31fa:	fb93 f5f5 	sdiv	r5, r3, r5
    31fe:	2000      	movs	r0, #0
    3200:	4963      	ldr	r1, [pc, #396]	; (3390 <fp_display+0x270>)
    3202:	1aaa      	subs	r2, r5, r2
    3204:	f001 fd6e 	bl	4ce4 <_ldexpl>
    3208:	2d00      	cmp	r5, #0
    320a:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    320e:	da06      	bge.n	321e <fp_display+0xfe>
    3210:	a355      	add	r3, pc, #340	; (adr r3, 3368 <fp_display+0x248>)
    3212:	e9d3 2300 	ldrd	r2, r3, [r3]
    3216:	426e      	negs	r6, r5
    3218:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    321c:	e006      	b.n	322c <fp_display+0x10c>
    321e:	4b5d      	ldr	r3, [pc, #372]	; (3394 <fp_display+0x274>)
    3220:	f04f 0200 	mov.w	r2, #0
    3224:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    3228:	d016      	beq.n	3258 <fp_display+0x138>
    322a:	462e      	mov	r6, r5
    322c:	07f3      	lsls	r3, r6, #31
    322e:	d509      	bpl.n	3244 <fp_display+0x124>
    3230:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3234:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3238:	f002 f850 	bl	52dc <__aeabi_dmul>
    323c:	2e01      	cmp	r6, #1
    323e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3242:	d009      	beq.n	3258 <fp_display+0x138>
    3244:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3248:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    324c:	f002 f846 	bl	52dc <__aeabi_dmul>
    3250:	1076      	asrs	r6, r6, #1
    3252:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    3256:	e7e9      	b.n	322c <fp_display+0x10c>
    3258:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    325c:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    3260:	f002 f8cc 	bl	53fc <__aeabi_ddiv>
    3264:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3268:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    326c:	a340      	add	r3, pc, #256	; (adr r3, 3370 <fp_display+0x250>)
    326e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3272:	f002 fb55 	bl	5920 <__aeabi_dcmplt>
    3276:	b188      	cbz	r0, 329c <fp_display+0x17c>
    3278:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    327c:	2200      	movs	r2, #0
    327e:	4b46      	ldr	r3, [pc, #280]	; (3398 <fp_display+0x278>)
    3280:	f002 f82c 	bl	52dc <__aeabi_dmul>
    3284:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3288:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    328c:	2200      	movs	r2, #0
    328e:	4b42      	ldr	r3, [pc, #264]	; (3398 <fp_display+0x278>)
    3290:	f002 f8b4 	bl	53fc <__aeabi_ddiv>
    3294:	3d01      	subs	r5, #1
    3296:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    329a:	e7e5      	b.n	3268 <fp_display+0x148>
    329c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    32a0:	a335      	add	r3, pc, #212	; (adr r3, 3378 <fp_display+0x258>)
    32a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    32a6:	f002 fb97 	bl	59d8 <__aeabi_dcmpge>
    32aa:	b188      	cbz	r0, 32d0 <fp_display+0x1b0>
    32ac:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    32b0:	2200      	movs	r2, #0
    32b2:	4b39      	ldr	r3, [pc, #228]	; (3398 <fp_display+0x278>)
    32b4:	f002 f8a2 	bl	53fc <__aeabi_ddiv>
    32b8:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    32bc:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    32c0:	2200      	movs	r2, #0
    32c2:	4b35      	ldr	r3, [pc, #212]	; (3398 <fp_display+0x278>)
    32c4:	f002 f80a 	bl	52dc <__aeabi_dmul>
    32c8:	3501      	adds	r5, #1
    32ca:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    32ce:	e7e5      	b.n	329c <fp_display+0x17c>
    32d0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    32d4:	f002 fac0 	bl	5858 <__aeabi_d2iz>
    32d8:	426b      	negs	r3, r5
    32da:	ea13 0325 	ands.w	r3, r3, r5, asr #32
    32de:	bf38      	it	cc
    32e0:	462b      	movcc	r3, r5
    32e2:	4682      	mov	sl, r0
    32e4:	930e      	str	r3, [sp, #56]	; 0x38
    32e6:	4650      	mov	r0, sl
    32e8:	f002 fafa 	bl	58e0 <__aeabi_i2d>
    32ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
    32ee:	1aaa      	subs	r2, r5, r2
    32f0:	f001 fcf8 	bl	4ce4 <_ldexpl>
    32f4:	2200      	movs	r2, #0
    32f6:	2300      	movs	r3, #0
    32f8:	2d00      	cmp	r5, #0
    32fa:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    32fe:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    3302:	da4b      	bge.n	339c <fp_display+0x27c>
    3304:	a118      	add	r1, pc, #96	; (adr r1, 3368 <fp_display+0x248>)
    3306:	e9d1 0100 	ldrd	r0, r1, [r1]
    330a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    330e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    3312:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    3316:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    331a:	f04f 0800 	mov.w	r8, #0
    331e:	4642      	mov	r2, r8
    3320:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    3324:	464b      	mov	r3, r9
    3326:	f002 f911 	bl	554c <__aeabi_dsub>
    332a:	4602      	mov	r2, r0
    332c:	460b      	mov	r3, r1
    332e:	4630      	mov	r0, r6
    3330:	4639      	mov	r1, r7
    3332:	f002 f9f7 	bl	5724 <__aeabi_dadd>
    3336:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    333a:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    333e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3342:	2200      	movs	r2, #0
    3344:	4b13      	ldr	r3, [pc, #76]	; (3394 <fp_display+0x274>)
    3346:	f001 ffc9 	bl	52dc <__aeabi_dmul>
    334a:	4602      	mov	r2, r0
    334c:	460b      	mov	r3, r1
    334e:	2000      	movs	r0, #0
    3350:	490f      	ldr	r1, [pc, #60]	; (3390 <fp_display+0x270>)
    3352:	f002 f8fb 	bl	554c <__aeabi_dsub>
    3356:	2200      	movs	r2, #0
    3358:	4b0e      	ldr	r3, [pc, #56]	; (3394 <fp_display+0x274>)
    335a:	f002 f84f 	bl	53fc <__aeabi_ddiv>
    335e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    3362:	e024      	b.n	33ae <fp_display+0x28e>
    3364:	f3af 8000 	nop.w
    3368:	9999999a 	.word	0x9999999a
    336c:	3fc99999 	.word	0x3fc99999
    3370:	00000000 	.word	0x00000000
    3374:	40f86a00 	.word	0x40f86a00
    3378:	00000000 	.word	0x00000000
    337c:	412e8480 	.word	0x412e8480
    3380:	000064ee 	.word	0x000064ee
    3384:	00006547 	.word	0x00006547
    3388:	000064be 	.word	0x000064be
    338c:	000064bc 	.word	0x000064bc
    3390:	3ff00000 	.word	0x3ff00000
    3394:	40140000 	.word	0x40140000
    3398:	40240000 	.word	0x40240000
    339c:	49ae      	ldr	r1, [pc, #696]	; (3658 <fp_display+0x538>)
    339e:	f04f 0000 	mov.w	r0, #0
    33a2:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    33a6:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    33aa:	f000 8089 	beq.w	34c0 <fp_display+0x3a0>
    33ae:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    33b2:	f01c 0f01 	tst.w	ip, #1
    33b6:	d048      	beq.n	344a <fp_display+0x32a>
    33b8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    33bc:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    33c0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    33c4:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    33c8:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    33cc:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    33d0:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    33d4:	f001 ff82 	bl	52dc <__aeabi_dmul>
    33d8:	4632      	mov	r2, r6
    33da:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    33de:	463b      	mov	r3, r7
    33e0:	4640      	mov	r0, r8
    33e2:	4649      	mov	r1, r9
    33e4:	f002 f99e 	bl	5724 <__aeabi_dadd>
    33e8:	4602      	mov	r2, r0
    33ea:	460b      	mov	r3, r1
    33ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    33f0:	f001 ff74 	bl	52dc <__aeabi_dmul>
    33f4:	4602      	mov	r2, r0
    33f6:	460b      	mov	r3, r1
    33f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    33fc:	f002 f992 	bl	5724 <__aeabi_dadd>
    3400:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    3404:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3408:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    340c:	f001 ff66 	bl	52dc <__aeabi_dmul>
    3410:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3414:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    3418:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    341c:	f04f 0800 	mov.w	r8, #0
    3420:	4642      	mov	r2, r8
    3422:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    3426:	464b      	mov	r3, r9
    3428:	f002 f890 	bl	554c <__aeabi_dsub>
    342c:	4602      	mov	r2, r0
    342e:	460b      	mov	r3, r1
    3430:	4630      	mov	r0, r6
    3432:	4639      	mov	r1, r7
    3434:	f002 f976 	bl	5724 <__aeabi_dadd>
    3438:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    343c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    3440:	f1bc 0f01 	cmp.w	ip, #1
    3444:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
    3448:	d03a      	beq.n	34c0 <fp_display+0x3a0>
    344a:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    344e:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    3452:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    3456:	4602      	mov	r2, r0
    3458:	460b      	mov	r3, r1
    345a:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    345e:	f002 f961 	bl	5724 <__aeabi_dadd>
    3462:	4632      	mov	r2, r6
    3464:	463b      	mov	r3, r7
    3466:	f002 f95d 	bl	5724 <__aeabi_dadd>
    346a:	4602      	mov	r2, r0
    346c:	460b      	mov	r3, r1
    346e:	4640      	mov	r0, r8
    3470:	4649      	mov	r1, r9
    3472:	f001 ff33 	bl	52dc <__aeabi_dmul>
    3476:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    347a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    347e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3482:	f001 ff2b 	bl	52dc <__aeabi_dmul>
    3486:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    348a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    348e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3492:	f04f 0800 	mov.w	r8, #0
    3496:	4642      	mov	r2, r8
    3498:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    349c:	464b      	mov	r3, r9
    349e:	f002 f855 	bl	554c <__aeabi_dsub>
    34a2:	4602      	mov	r2, r0
    34a4:	460b      	mov	r3, r1
    34a6:	4630      	mov	r0, r6
    34a8:	4639      	mov	r1, r7
    34aa:	f002 f93b 	bl	5724 <__aeabi_dadd>
    34ae:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    34b2:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    34b6:	ea4f 0c6c 	mov.w	ip, ip, asr #1
    34ba:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    34be:	e778      	b.n	33b2 <fp_display+0x292>
    34c0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    34c4:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    34c8:	f002 fa58 	bl	597c <__aeabi_dcmple>
    34cc:	b910      	cbnz	r0, 34d4 <fp_display+0x3b4>
    34ce:	f10a 3aff 	add.w	sl, sl, #4294967295
    34d2:	e708      	b.n	32e6 <fp_display+0x1c6>
    34d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    34d8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    34dc:	f002 f836 	bl	554c <__aeabi_dsub>
    34e0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    34e4:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    34e8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    34ec:	f002 f82e 	bl	554c <__aeabi_dsub>
    34f0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    34f4:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    34f8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    34fc:	f001 ff7e 	bl	53fc <__aeabi_ddiv>
    3500:	a353      	add	r3, pc, #332	; (adr r3, 3650 <fp_display+0x530>)
    3502:	e9d3 2300 	ldrd	r2, r3, [r3]
    3506:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    350a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    350e:	f001 fee5 	bl	52dc <__aeabi_dmul>
    3512:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3516:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    351a:	f002 f99d 	bl	5858 <__aeabi_d2iz>
    351e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    3522:	4680      	mov	r8, r0
    3524:	f002 f9dc 	bl	58e0 <__aeabi_i2d>
    3528:	4602      	mov	r2, r0
    352a:	460b      	mov	r3, r1
    352c:	4630      	mov	r0, r6
    352e:	4639      	mov	r1, r7
    3530:	f002 f80c 	bl	554c <__aeabi_dsub>
    3534:	a346      	add	r3, pc, #280	; (adr r3, 3650 <fp_display+0x530>)
    3536:	e9d3 2300 	ldrd	r2, r3, [r3]
    353a:	f001 fecf 	bl	52dc <__aeabi_dmul>
    353e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3542:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3546:	f002 f987 	bl	5858 <__aeabi_d2iz>
    354a:	4606      	mov	r6, r0
    354c:	2e00      	cmp	r6, #0
    354e:	da06      	bge.n	355e <fp_display+0x43e>
    3550:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
    3554:	f506 7610 	add.w	r6, r6, #576	; 0x240
    3558:	f108 38ff 	add.w	r8, r8, #4294967295
    355c:	e7f6      	b.n	354c <fp_display+0x42c>
    355e:	4b3f      	ldr	r3, [pc, #252]	; (365c <fp_display+0x53c>)
    3560:	429e      	cmp	r6, r3
    3562:	dd06      	ble.n	3572 <fp_display+0x452>
    3564:	f5a6 2674 	sub.w	r6, r6, #999424	; 0xf4000
    3568:	f5a6 7610 	sub.w	r6, r6, #576	; 0x240
    356c:	f108 0801 	add.w	r8, r8, #1
    3570:	e7f5      	b.n	355e <fp_display+0x43e>
    3572:	f1b8 0f00 	cmp.w	r8, #0
    3576:	da06      	bge.n	3586 <fp_display+0x466>
    3578:	f508 2874 	add.w	r8, r8, #999424	; 0xf4000
    357c:	f508 7810 	add.w	r8, r8, #576	; 0x240
    3580:	f10a 3aff 	add.w	sl, sl, #4294967295
    3584:	e7f5      	b.n	3572 <fp_display+0x452>
    3586:	4598      	cmp	r8, r3
    3588:	dd06      	ble.n	3598 <fp_display+0x478>
    358a:	f5a8 2874 	sub.w	r8, r8, #999424	; 0xf4000
    358e:	f5a8 7810 	sub.w	r8, r8, #576	; 0x240
    3592:	f10a 0a01 	add.w	sl, sl, #1
    3596:	e7f6      	b.n	3586 <fp_display+0x466>
    3598:	4b31      	ldr	r3, [pc, #196]	; (3660 <fp_display+0x540>)
    359a:	4650      	mov	r0, sl
    359c:	459a      	cmp	sl, r3
    359e:	dc11      	bgt.n	35c4 <fp_display+0x4a4>
    35a0:	3301      	adds	r3, #1
    35a2:	fb98 f2f3 	sdiv	r2, r8, r3
    35a6:	fb96 f3f3 	sdiv	r3, r6, r3
    35aa:	482e      	ldr	r0, [pc, #184]	; (3664 <fp_display+0x544>)
    35ac:	210a      	movs	r1, #10
    35ae:	fb00 8802 	mla	r8, r0, r2, r8
    35b2:	fb00 6603 	mla	r6, r0, r3, r6
    35b6:	fb01 2a0a 	mla	sl, r1, sl, r2
    35ba:	fb01 3808 	mla	r8, r1, r8, r3
    35be:	434e      	muls	r6, r1
    35c0:	3d01      	subs	r5, #1
    35c2:	e01c      	b.n	35fe <fp_display+0x4de>
    35c4:	4b25      	ldr	r3, [pc, #148]	; (365c <fp_display+0x53c>)
    35c6:	459a      	cmp	sl, r3
    35c8:	dd19      	ble.n	35fe <fp_display+0x4de>
    35ca:	220a      	movs	r2, #10
    35cc:	fb9a faf2 	sdiv	sl, sl, r2
    35d0:	f06f 0309 	mvn.w	r3, #9
    35d4:	fb03 000a 	mla	r0, r3, sl, r0
    35d8:	4923      	ldr	r1, [pc, #140]	; (3668 <fp_display+0x548>)
    35da:	3501      	adds	r5, #1
    35dc:	fb01 8000 	mla	r0, r1, r0, r8
    35e0:	fb90 f8f2 	sdiv	r8, r0, r2
    35e4:	fb03 0308 	mla	r3, r3, r8, r0
    35e8:	fb01 6603 	mla	r6, r1, r3, r6
    35ec:	3605      	adds	r6, #5
    35ee:	fb96 f6f2 	sdiv	r6, r6, r2
    35f2:	e004      	b.n	35fe <fp_display+0x4de>
    35f4:	2600      	movs	r6, #0
    35f6:	46b0      	mov	r8, r6
    35f8:	46b2      	mov	sl, r6
    35fa:	f06f 0504 	mvn.w	r5, #4
    35fe:	4621      	mov	r1, r4
    3600:	2730      	movs	r7, #48	; 0x30
    3602:	f801 7b06 	strb.w	r7, [r1], #6
    3606:	4650      	mov	r0, sl
    3608:	f7ff fd41 	bl	308e <pr_dec.constprop.1>
    360c:	4640      	mov	r0, r8
    360e:	f104 010c 	add.w	r1, r4, #12
    3612:	f7ff fd3c 	bl	308e <pr_dec.constprop.1>
    3616:	4630      	mov	r0, r6
    3618:	f104 0112 	add.w	r1, r4, #18
    361c:	f7ff fd37 	bl	308e <pr_dec.constprop.1>
    3620:	2300      	movs	r3, #0
    3622:	7523      	strb	r3, [r4, #20]
    3624:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3626:	3505      	adds	r5, #5
    3628:	74e7      	strb	r7, [r4, #19]
    362a:	ea43 0585 	orr.w	r5, r3, r5, lsl #2
    362e:	e000      	b.n	3632 <fp_display+0x512>
    3630:	2500      	movs	r5, #0
    3632:	07ef      	lsls	r7, r5, #31
    3634:	d501      	bpl.n	363a <fp_display+0x51a>
    3636:	4b0d      	ldr	r3, [pc, #52]	; (366c <fp_display+0x54c>)
    3638:	e01f      	b.n	367a <fp_display+0x55a>
    363a:	9b06      	ldr	r3, [sp, #24]
    363c:	079e      	lsls	r6, r3, #30
    363e:	d41b      	bmi.n	3678 <fp_display+0x558>
    3640:	4a0b      	ldr	r2, [pc, #44]	; (3670 <fp_display+0x550>)
    3642:	f013 0f04 	tst.w	r3, #4
    3646:	4b0b      	ldr	r3, [pc, #44]	; (3674 <fp_display+0x554>)
    3648:	bf08      	it	eq
    364a:	4613      	moveq	r3, r2
    364c:	e015      	b.n	367a <fp_display+0x55a>
    364e:	bf00      	nop
    3650:	00000000 	.word	0x00000000
    3654:	412e8480 	.word	0x412e8480
    3658:	40140000 	.word	0x40140000
    365c:	000f423f 	.word	0x000f423f
    3660:	0001869f 	.word	0x0001869f
    3664:	fffe7960 	.word	0xfffe7960
    3668:	000f4240 	.word	0x000f4240
    366c:	000064ee 	.word	0x000064ee
    3670:	00006547 	.word	0x00006547
    3674:	000064be 	.word	0x000064be
    3678:	4bad      	ldr	r3, [pc, #692]	; (3930 <fp_display+0x810>)
    367a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    367c:	f025 0501 	bic.w	r5, r5, #1
    3680:	6013      	str	r3, [r2, #0]
    3682:	2304      	movs	r3, #4
    3684:	fb95 f5f3 	sdiv	r5, r5, r3
    3688:	9b05      	ldr	r3, [sp, #20]
    368a:	f8db 6000 	ldr.w	r6, [fp]
    368e:	2b61      	cmp	r3, #97	; 0x61
    3690:	d010      	beq.n	36b4 <fp_display+0x594>
    3692:	dc06      	bgt.n	36a2 <fp_display+0x582>
    3694:	2b45      	cmp	r3, #69	; 0x45
    3696:	d067      	beq.n	3768 <fp_display+0x648>
    3698:	2b47      	cmp	r3, #71	; 0x47
    369a:	d048      	beq.n	372e <fp_display+0x60e>
    369c:	2b41      	cmp	r3, #65	; 0x41
    369e:	d144      	bne.n	372a <fp_display+0x60a>
    36a0:	e008      	b.n	36b4 <fp_display+0x594>
    36a2:	9b05      	ldr	r3, [sp, #20]
    36a4:	2b66      	cmp	r3, #102	; 0x66
    36a6:	f000 80df 	beq.w	3868 <fp_display+0x748>
    36aa:	2b67      	cmp	r3, #103	; 0x67
    36ac:	d03f      	beq.n	372e <fp_display+0x60e>
    36ae:	2b65      	cmp	r3, #101	; 0x65
    36b0:	d13b      	bne.n	372a <fp_display+0x60a>
    36b2:	e059      	b.n	3768 <fp_display+0x648>
    36b4:	9b07      	ldr	r3, [sp, #28]
    36b6:	2000      	movs	r0, #0
    36b8:	f3c3 0113 	ubfx	r1, r3, #0, #20
    36bc:	9b08      	ldr	r3, [sp, #32]
    36be:	4318      	orrs	r0, r3
    36c0:	9b07      	ldr	r3, [sp, #28]
    36c2:	f3c3 520a 	ubfx	r2, r3, #20, #11
    36c6:	b112      	cbz	r2, 36ce <fp_display+0x5ae>
    36c8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
    36cc:	e004      	b.n	36d8 <fp_display+0x5b8>
    36ce:	ea50 0301 	orrs.w	r3, r0, r1
    36d2:	4b98      	ldr	r3, [pc, #608]	; (3934 <fp_display+0x814>)
    36d4:	bf08      	it	eq
    36d6:	2300      	moveq	r3, #0
    36d8:	2a00      	cmp	r2, #0
    36da:	bf0c      	ite	eq
    36dc:	2230      	moveq	r2, #48	; 0x30
    36de:	2231      	movne	r2, #49	; 0x31
    36e0:	b966      	cbnz	r6, 36fc <fp_display+0x5dc>
    36e2:	9d06      	ldr	r5, [sp, #24]
    36e4:	072d      	lsls	r5, r5, #28
    36e6:	d409      	bmi.n	36fc <fp_display+0x5dc>
    36e8:	9d05      	ldr	r5, [sp, #20]
    36ea:	4620      	mov	r0, r4
    36ec:	4992      	ldr	r1, [pc, #584]	; (3938 <fp_display+0x818>)
    36ee:	4c93      	ldr	r4, [pc, #588]	; (393c <fp_display+0x81c>)
    36f0:	2d61      	cmp	r5, #97	; 0x61
    36f2:	bf08      	it	eq
    36f4:	4621      	moveq	r1, r4
    36f6:	f7ff fcdd 	bl	30b4 <sprintf>
    36fa:	e00c      	b.n	3716 <fp_display+0x5f6>
    36fc:	e9cd 0100 	strd	r0, r1, [sp]
    3700:	9302      	str	r3, [sp, #8]
    3702:	4620      	mov	r0, r4
    3704:	4b8e      	ldr	r3, [pc, #568]	; (3940 <fp_display+0x820>)
    3706:	498f      	ldr	r1, [pc, #572]	; (3944 <fp_display+0x824>)
    3708:	9c05      	ldr	r4, [sp, #20]
    370a:	2c61      	cmp	r4, #97	; 0x61
    370c:	bf18      	it	ne
    370e:	4619      	movne	r1, r3
    3710:	4633      	mov	r3, r6
    3712:	f7ff fccf 	bl	30b4 <sprintf>
    3716:	4a8c      	ldr	r2, [pc, #560]	; (3948 <fp_display+0x828>)
    3718:	4b8c      	ldr	r3, [pc, #560]	; (394c <fp_display+0x82c>)
    371a:	9907      	ldr	r1, [sp, #28]
    371c:	ea33 0321 	bics.w	r3, r3, r1, asr #32
    3720:	bf28      	it	cs
    3722:	4613      	movcs	r3, r2
    3724:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    3726:	6013      	str	r3, [r2, #0]
    3728:	e177      	b.n	3a1a <fp_display+0x8fa>
    372a:	2367      	movs	r3, #103	; 0x67
    372c:	9305      	str	r3, [sp, #20]
    372e:	9b06      	ldr	r3, [sp, #24]
    3730:	2e00      	cmp	r6, #0
    3732:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    3736:	9306      	str	r3, [sp, #24]
    3738:	bfdc      	itt	le
    373a:	2301      	movle	r3, #1
    373c:	f8cb 3000 	strle.w	r3, [fp]
    3740:	f8db 1000 	ldr.w	r1, [fp]
    3744:	4620      	mov	r0, r4
    3746:	2911      	cmp	r1, #17
    3748:	bfd4      	ite	le
    374a:	3101      	addle	r1, #1
    374c:	2112      	movgt	r1, #18
    374e:	f7ff fc79 	bl	3044 <fp_round>
    3752:	f8db 3000 	ldr.w	r3, [fp]
    3756:	4405      	add	r5, r0
    3758:	429d      	cmp	r5, r3
    375a:	db7e      	blt.n	385a <fp_display+0x73a>
    375c:	3b01      	subs	r3, #1
    375e:	f8cb 3000 	str.w	r3, [fp]
    3762:	9b05      	ldr	r3, [sp, #20]
    3764:	3b02      	subs	r3, #2
    3766:	9305      	str	r3, [sp, #20]
    3768:	f8db 3000 	ldr.w	r3, [fp]
    376c:	2b11      	cmp	r3, #17
    376e:	bfc1      	itttt	gt
    3770:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    3772:	3b11      	subgt	r3, #17
    3774:	6013      	strgt	r3, [r2, #0]
    3776:	2311      	movgt	r3, #17
    3778:	bfc8      	it	gt
    377a:	f8cb 3000 	strgt.w	r3, [fp]
    377e:	9b06      	ldr	r3, [sp, #24]
    3780:	f8db 6000 	ldr.w	r6, [fp]
    3784:	f413 6700 	ands.w	r7, r3, #2048	; 0x800
    3788:	f106 0602 	add.w	r6, r6, #2
    378c:	d104      	bne.n	3798 <fp_display+0x678>
    378e:	4620      	mov	r0, r4
    3790:	4631      	mov	r1, r6
    3792:	f7ff fc57 	bl	3044 <fp_round>
    3796:	4405      	add	r5, r0
    3798:	7863      	ldrb	r3, [r4, #1]
    379a:	7023      	strb	r3, [r4, #0]
    379c:	f8db 3000 	ldr.w	r3, [fp]
    37a0:	b923      	cbnz	r3, 37ac <fp_display+0x68c>
    37a2:	f640 0308 	movw	r3, #2056	; 0x808
    37a6:	9a06      	ldr	r2, [sp, #24]
    37a8:	4013      	ands	r3, r2
    37aa:	b113      	cbz	r3, 37b2 <fp_display+0x692>
    37ac:	232e      	movs	r3, #46	; 0x2e
    37ae:	7063      	strb	r3, [r4, #1]
    37b0:	e000      	b.n	37b4 <fp_display+0x694>
    37b2:	2601      	movs	r6, #1
    37b4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    37b6:	681b      	ldr	r3, [r3, #0]
    37b8:	2b00      	cmp	r3, #0
    37ba:	bfc2      	ittt	gt
    37bc:	233e      	movgt	r3, #62	; 0x3e
    37be:	55a3      	strbgt	r3, [r4, r6]
    37c0:	3601      	addgt	r6, #1
    37c2:	b177      	cbz	r7, 37e2 <fp_display+0x6c2>
    37c4:	9b06      	ldr	r3, [sp, #24]
    37c6:	071f      	lsls	r7, r3, #28
    37c8:	d40b      	bmi.n	37e2 <fp_display+0x6c2>
    37ca:	19a2      	adds	r2, r4, r6
    37cc:	1b16      	subs	r6, r2, r4
    37ce:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
    37d2:	2b30      	cmp	r3, #48	; 0x30
    37d4:	d0fa      	beq.n	37cc <fp_display+0x6ac>
    37d6:	2b3e      	cmp	r3, #62	; 0x3e
    37d8:	d0f8      	beq.n	37cc <fp_display+0x6ac>
    37da:	2b2e      	cmp	r3, #46	; 0x2e
    37dc:	bf08      	it	eq
    37de:	f106 36ff 	addeq.w	r6, r6, #4294967295
    37e2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    37e6:	2d00      	cmp	r5, #0
    37e8:	55a3      	strb	r3, [r4, r6]
    37ea:	bfb8      	it	lt
    37ec:	426d      	neglt	r5, r5
    37ee:	f106 0302 	add.w	r3, r6, #2
    37f2:	f106 0201 	add.w	r2, r6, #1
    37f6:	bfb5      	itete	lt
    37f8:	212d      	movlt	r1, #45	; 0x2d
    37fa:	212b      	movge	r1, #43	; 0x2b
    37fc:	461e      	movlt	r6, r3
    37fe:	461e      	movge	r6, r3
    3800:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
    3804:	54a1      	strb	r1, [r4, r2]
    3806:	db0a      	blt.n	381e <fp_display+0x6fe>
    3808:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    380c:	fb95 f2f2 	sdiv	r2, r5, r2
    3810:	f102 0130 	add.w	r1, r2, #48	; 0x30
    3814:	54e1      	strb	r1, [r4, r3]
    3816:	494e      	ldr	r1, [pc, #312]	; (3950 <fp_display+0x830>)
    3818:	1c5e      	adds	r6, r3, #1
    381a:	fb01 5502 	mla	r5, r1, r2, r5
    381e:	2d63      	cmp	r5, #99	; 0x63
    3820:	dd0a      	ble.n	3838 <fp_display+0x718>
    3822:	2364      	movs	r3, #100	; 0x64
    3824:	fb95 f3f3 	sdiv	r3, r5, r3
    3828:	f103 0230 	add.w	r2, r3, #48	; 0x30
    382c:	55a2      	strb	r2, [r4, r6]
    382e:	f06f 0263 	mvn.w	r2, #99	; 0x63
    3832:	fb02 5503 	mla	r5, r2, r3, r5
    3836:	3601      	adds	r6, #1
    3838:	230a      	movs	r3, #10
    383a:	fb95 f3f3 	sdiv	r3, r5, r3
    383e:	f103 0230 	add.w	r2, r3, #48	; 0x30
    3842:	55a2      	strb	r2, [r4, r6]
    3844:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    3848:	3530      	adds	r5, #48	; 0x30
    384a:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
    384e:	4434      	add	r4, r6
    3850:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    3854:	7063      	strb	r3, [r4, #1]
    3856:	1cb0      	adds	r0, r6, #2
    3858:	e0df      	b.n	3a1a <fp_display+0x8fa>
    385a:	1d2a      	adds	r2, r5, #4
    385c:	f6ff af7e 	blt.w	375c <fp_display+0x63c>
    3860:	43ea      	mvns	r2, r5
    3862:	4413      	add	r3, r2
    3864:	f8cb 3000 	str.w	r3, [fp]
    3868:	9a06      	ldr	r2, [sp, #24]
    386a:	2d00      	cmp	r5, #0
    386c:	f8db 3000 	ldr.w	r3, [fp]
    3870:	f402 6700 	and.w	r7, r2, #2048	; 0x800
    3874:	da4c      	bge.n	3910 <fp_display+0x7f0>
    3876:	f1c5 0800 	rsb	r8, r5, #0
    387a:	1c5a      	adds	r2, r3, #1
    387c:	4590      	cmp	r8, r2
    387e:	dd09      	ble.n	3894 <fp_display+0x774>
    3880:	2330      	movs	r3, #48	; 0x30
    3882:	7023      	strb	r3, [r4, #0]
    3884:	232e      	movs	r3, #46	; 0x2e
    3886:	7063      	strb	r3, [r4, #1]
    3888:	f8db 3000 	ldr.w	r3, [fp]
    388c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    388e:	2602      	movs	r6, #2
    3890:	6013      	str	r3, [r2, #0]
    3892:	e038      	b.n	3906 <fp_display+0x7e6>
    3894:	442b      	add	r3, r5
    3896:	1c9e      	adds	r6, r3, #2
    3898:	2e12      	cmp	r6, #18
    389a:	bfc1      	itttt	gt
    389c:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    389e:	3b11      	subgt	r3, #17
    38a0:	6013      	strgt	r3, [r2, #0]
    38a2:	2613      	movgt	r6, #19
    38a4:	b95f      	cbnz	r7, 38be <fp_display+0x79e>
    38a6:	4620      	mov	r0, r4
    38a8:	4631      	mov	r1, r6
    38aa:	f7ff fbcb 	bl	3044 <fp_round>
    38ae:	b130      	cbz	r0, 38be <fp_display+0x79e>
    38b0:	ea7f 0805 	mvns.w	r8, r5
    38b4:	f106 0601 	add.w	r6, r6, #1
    38b8:	d101      	bne.n	38be <fp_display+0x79e>
    38ba:	7863      	ldrb	r3, [r4, #1]
    38bc:	e00d      	b.n	38da <fp_display+0x7ba>
    38be:	f1b8 0f01 	cmp.w	r8, #1
    38c2:	eb04 0306 	add.w	r3, r4, r6
    38c6:	d10c      	bne.n	38e2 <fp_display+0x7c2>
    38c8:	1b1a      	subs	r2, r3, r4
    38ca:	2a00      	cmp	r2, #0
    38cc:	dd03      	ble.n	38d6 <fp_display+0x7b6>
    38ce:	f813 2901 	ldrb.w	r2, [r3], #-1
    38d2:	709a      	strb	r2, [r3, #2]
    38d4:	e7f8      	b.n	38c8 <fp_display+0x7a8>
    38d6:	3601      	adds	r6, #1
    38d8:	2330      	movs	r3, #48	; 0x30
    38da:	7023      	strb	r3, [r4, #0]
    38dc:	232e      	movs	r3, #46	; 0x2e
    38de:	7063      	strb	r3, [r4, #1]
    38e0:	e011      	b.n	3906 <fp_display+0x7e6>
    38e2:	1b1a      	subs	r2, r3, r4
    38e4:	2a00      	cmp	r2, #0
    38e6:	dd03      	ble.n	38f0 <fp_display+0x7d0>
    38e8:	f813 2901 	ldrb.w	r2, [r3], #-1
    38ec:	70da      	strb	r2, [r3, #3]
    38ee:	e7f8      	b.n	38e2 <fp_display+0x7c2>
    38f0:	2330      	movs	r3, #48	; 0x30
    38f2:	7023      	strb	r3, [r4, #0]
    38f4:	232e      	movs	r3, #46	; 0x2e
    38f6:	7063      	strb	r3, [r4, #1]
    38f8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    38fa:	233c      	movs	r3, #60	; 0x3c
    38fc:	70a3      	strb	r3, [r4, #2]
    38fe:	f108 33ff 	add.w	r3, r8, #4294967295
    3902:	3602      	adds	r6, #2
    3904:	6013      	str	r3, [r2, #0]
    3906:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    3908:	681b      	ldr	r3, [r3, #0]
    390a:	2b00      	cmp	r3, #0
    390c:	dc38      	bgt.n	3980 <fp_display+0x860>
    390e:	e06c      	b.n	39ea <fp_display+0x8ca>
    3910:	eb05 0803 	add.w	r8, r5, r3
    3914:	f108 0602 	add.w	r6, r8, #2
    3918:	2e12      	cmp	r6, #18
    391a:	dd50      	ble.n	39be <fp_display+0x89e>
    391c:	b9d7      	cbnz	r7, 3954 <fp_display+0x834>
    391e:	4620      	mov	r0, r4
    3920:	2113      	movs	r1, #19
    3922:	f7ff fb8f 	bl	3044 <fp_round>
    3926:	b1a8      	cbz	r0, 3954 <fp_display+0x834>
    3928:	3501      	adds	r5, #1
    392a:	2614      	movs	r6, #20
    392c:	e013      	b.n	3956 <fp_display+0x836>
    392e:	bf00      	nop
    3930:	000064bc 	.word	0x000064bc
    3934:	fffffc01 	.word	0xfffffc01
    3938:	000064c8 	.word	0x000064c8
    393c:	000064c0 	.word	0x000064c0
    3940:	000064df 	.word	0x000064df
    3944:	000064d0 	.word	0x000064d0
    3948:	000064ee 	.word	0x000064ee
    394c:	00006547 	.word	0x00006547
    3950:	fffffc18 	.word	0xfffffc18
    3954:	2613      	movs	r6, #19
    3956:	1e72      	subs	r2, r6, #1
    3958:	4295      	cmp	r5, r2
    395a:	4623      	mov	r3, r4
    395c:	da14      	bge.n	3988 <fp_display+0x868>
    395e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3962:	f803 2c01 	strb.w	r2, [r3, #-1]
    3966:	1b1a      	subs	r2, r3, r4
    3968:	42aa      	cmp	r2, r5
    396a:	ddf8      	ble.n	395e <fp_display+0x83e>
    396c:	1963      	adds	r3, r4, r5
    396e:	222e      	movs	r2, #46	; 0x2e
    3970:	705a      	strb	r2, [r3, #1]
    3972:	f8db 3000 	ldr.w	r3, [fp]
    3976:	441d      	add	r5, r3
    3978:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    397a:	3d11      	subs	r5, #17
    397c:	601d      	str	r5, [r3, #0]
    397e:	b3a5      	cbz	r5, 39ea <fp_display+0x8ca>
    3980:	233e      	movs	r3, #62	; 0x3e
    3982:	55a3      	strb	r3, [r4, r6]
    3984:	3601      	adds	r6, #1
    3986:	e030      	b.n	39ea <fp_display+0x8ca>
    3988:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    398c:	f803 1c01 	strb.w	r1, [r3, #-1]
    3990:	1b19      	subs	r1, r3, r4
    3992:	4291      	cmp	r1, r2
    3994:	dbf8      	blt.n	3988 <fp_display+0x868>
    3996:	19a3      	adds	r3, r4, r6
    3998:	223c      	movs	r2, #60	; 0x3c
    399a:	f803 2c01 	strb.w	r2, [r3, #-1]
    399e:	1bad      	subs	r5, r5, r6
    39a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    39a2:	222e      	movs	r2, #46	; 0x2e
    39a4:	3502      	adds	r5, #2
    39a6:	601d      	str	r5, [r3, #0]
    39a8:	55a2      	strb	r2, [r4, r6]
    39aa:	f8db 2000 	ldr.w	r2, [fp]
    39ae:	1c73      	adds	r3, r6, #1
    39b0:	b1d2      	cbz	r2, 39e8 <fp_display+0x8c8>
    39b2:	992b      	ldr	r1, [sp, #172]	; 0xac
    39b4:	3602      	adds	r6, #2
    39b6:	600a      	str	r2, [r1, #0]
    39b8:	223e      	movs	r2, #62	; 0x3e
    39ba:	54e2      	strb	r2, [r4, r3]
    39bc:	e015      	b.n	39ea <fp_display+0x8ca>
    39be:	b93f      	cbnz	r7, 39d0 <fp_display+0x8b0>
    39c0:	4620      	mov	r0, r4
    39c2:	4631      	mov	r1, r6
    39c4:	f7ff fb3e 	bl	3044 <fp_round>
    39c8:	b110      	cbz	r0, 39d0 <fp_display+0x8b0>
    39ca:	3501      	adds	r5, #1
    39cc:	f108 0603 	add.w	r6, r8, #3
    39d0:	4623      	mov	r3, r4
    39d2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    39d6:	f803 2c01 	strb.w	r2, [r3, #-1]
    39da:	1b1a      	subs	r2, r3, r4
    39dc:	42aa      	cmp	r2, r5
    39de:	ddf8      	ble.n	39d2 <fp_display+0x8b2>
    39e0:	4425      	add	r5, r4
    39e2:	232e      	movs	r3, #46	; 0x2e
    39e4:	706b      	strb	r3, [r5, #1]
    39e6:	e000      	b.n	39ea <fp_display+0x8ca>
    39e8:	461e      	mov	r6, r3
    39ea:	b16f      	cbz	r7, 3a08 <fp_display+0x8e8>
    39ec:	9b06      	ldr	r3, [sp, #24]
    39ee:	0718      	lsls	r0, r3, #28
    39f0:	d412      	bmi.n	3a18 <fp_display+0x8f8>
    39f2:	19a0      	adds	r0, r4, r6
    39f4:	1b06      	subs	r6, r0, r4
    39f6:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
    39fa:	2b30      	cmp	r3, #48	; 0x30
    39fc:	d0fa      	beq.n	39f4 <fp_display+0x8d4>
    39fe:	2b3e      	cmp	r3, #62	; 0x3e
    3a00:	d0f8      	beq.n	39f4 <fp_display+0x8d4>
    3a02:	2b2e      	cmp	r3, #46	; 0x2e
    3a04:	d108      	bne.n	3a18 <fp_display+0x8f8>
    3a06:	e005      	b.n	3a14 <fp_display+0x8f4>
    3a08:	f8db 3000 	ldr.w	r3, [fp]
    3a0c:	b923      	cbnz	r3, 3a18 <fp_display+0x8f8>
    3a0e:	9b06      	ldr	r3, [sp, #24]
    3a10:	0719      	lsls	r1, r3, #28
    3a12:	d401      	bmi.n	3a18 <fp_display+0x8f8>
    3a14:	1e70      	subs	r0, r6, #1
    3a16:	e000      	b.n	3a1a <fp_display+0x8fa>
    3a18:	4630      	mov	r0, r6
    3a1a:	b01f      	add	sp, #124	; 0x7c
    3a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003a20 <_initio>:
    3a20:	b510      	push	{r4, lr}
    3a22:	2100      	movs	r1, #0
    3a24:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3a28:	4822      	ldr	r0, [pc, #136]	; (3ab4 <_initio+0x94>)
    3a2a:	f7ff fb09 	bl	3040 <memset>
    3a2e:	20c0      	movs	r0, #192	; 0xc0
    3a30:	f001 fa34 	bl	4e9c <_Csys_alloc>
    3a34:	4c20      	ldr	r4, [pc, #128]	; (3ab8 <_initio+0x98>)
    3a36:	2100      	movs	r1, #0
    3a38:	22c0      	movs	r2, #192	; 0xc0
    3a3a:	6020      	str	r0, [r4, #0]
    3a3c:	f7ff fb00 	bl	3040 <memset>
    3a40:	6820      	ldr	r0, [r4, #0]
    3a42:	2300      	movs	r3, #0
    3a44:	4c1b      	ldr	r4, [pc, #108]	; (3ab4 <_initio+0x94>)
    3a46:	2228      	movs	r2, #40	; 0x28
    3a48:	2118      	movs	r1, #24
    3a4a:	fb02 4203 	mla	r2, r2, r3, r4
    3a4e:	fb01 0103 	mla	r1, r1, r3, r0
    3a52:	3301      	adds	r3, #1
    3a54:	2b08      	cmp	r3, #8
    3a56:	6251      	str	r1, [r2, #36]	; 0x24
    3a58:	d1f4      	bne.n	3a44 <_initio+0x24>
    3a5a:	4622      	mov	r2, r4
    3a5c:	4917      	ldr	r1, [pc, #92]	; (3abc <_initio+0x9c>)
    3a5e:	2000      	movs	r0, #0
    3a60:	f001 f8b1 	bl	4bc6 <_fdopen>
    3a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3a68:	4620      	mov	r0, r4
    3a6a:	2100      	movs	r1, #0
    3a6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3a70:	f000 ff38 	bl	48e4 <setvbuf>
    3a74:	f104 0228 	add.w	r2, r4, #40	; 0x28
    3a78:	4911      	ldr	r1, [pc, #68]	; (3ac0 <_initio+0xa0>)
    3a7a:	2001      	movs	r0, #1
    3a7c:	f001 f8a3 	bl	4bc6 <_fdopen>
    3a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3a84:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3a88:	2100      	movs	r1, #0
    3a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3a8e:	f000 ff29 	bl	48e4 <setvbuf>
    3a92:	f104 0250 	add.w	r2, r4, #80	; 0x50
    3a96:	490a      	ldr	r1, [pc, #40]	; (3ac0 <_initio+0xa0>)
    3a98:	2002      	movs	r0, #2
    3a9a:	f001 f894 	bl	4bc6 <_fdopen>
    3a9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
    3aa2:	2100      	movs	r1, #0
    3aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ab0:	f000 bf18 	b.w	48e4 <setvbuf>
    3ab4:	10001c6c 	.word	0x10001c6c
    3ab8:	10001c68 	.word	0x10001c68
    3abc:	000064f0 	.word	0x000064f0
    3ac0:	000064f2 	.word	0x000064f2

00003ac4 <__vfprintf>:
    3ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ac8:	4604      	mov	r4, r0
    3aca:	b0ad      	sub	sp, #180	; 0xb4
    3acc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    3ad0:	f8dd 80dc 	ldr.w	r8, [sp, #220]	; 0xdc
    3ad4:	2200      	movs	r2, #0
    3ad6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    3ad8:	9205      	str	r2, [sp, #20]
    3ada:	7818      	ldrb	r0, [r3, #0]
    3adc:	1c5d      	adds	r5, r3, #1
    3ade:	2800      	cmp	r0, #0
    3ae0:	f000 863d 	beq.w	475e <__vfprintf+0xc9a>
    3ae4:	2825      	cmp	r0, #37	; 0x25
    3ae6:	d102      	bne.n	3aee <__vfprintf+0x2a>
    3ae8:	462a      	mov	r2, r5
    3aea:	2700      	movs	r7, #0
    3aec:	e023      	b.n	3b36 <__vfprintf+0x72>
    3aee:	9b05      	ldr	r3, [sp, #20]
    3af0:	ea4f 7be3 	mov.w	fp, r3, asr #31
    3af4:	461a      	mov	r2, r3
    3af6:	1c5e      	adds	r6, r3, #1
    3af8:	465b      	mov	r3, fp
    3afa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    3afe:	4552      	cmp	r2, sl
    3b00:	eb73 030b 	sbcs.w	r3, r3, fp
    3b04:	f280 8627 	bge.w	4756 <__vfprintf+0xc92>
    3b08:	68a3      	ldr	r3, [r4, #8]
    3b0a:	3b01      	subs	r3, #1
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	60a3      	str	r3, [r4, #8]
    3b10:	db05      	blt.n	3b1e <__vfprintf+0x5a>
    3b12:	6823      	ldr	r3, [r4, #0]
    3b14:	1c5a      	adds	r2, r3, #1
    3b16:	6022      	str	r2, [r4, #0]
    3b18:	7018      	strb	r0, [r3, #0]
    3b1a:	f000 be1c 	b.w	4756 <__vfprintf+0xc92>
    3b1e:	4621      	mov	r1, r4
    3b20:	f000 ffb0 	bl	4a84 <__flsbuf>
    3b24:	f000 be17 	b.w	4756 <__vfprintf+0xc92>
    3b28:	d90b      	bls.n	3b42 <__vfprintf+0x7e>
    3b2a:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
    3b2e:	d111      	bne.n	3b54 <__vfprintf+0x90>
    3b30:	f047 0701 	orr.w	r7, r7, #1
    3b34:	462a      	mov	r2, r5
    3b36:	f815 9b01 	ldrb.w	r9, [r5], #1
    3b3a:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
    3b3e:	d1f3      	bne.n	3b28 <__vfprintf+0x64>
    3b40:	e00e      	b.n	3b60 <__vfprintf+0x9c>
    3b42:	f1b9 0f20 	cmp.w	r9, #32
    3b46:	d00e      	beq.n	3b66 <__vfprintf+0xa2>
    3b48:	f1b9 0f23 	cmp.w	r9, #35	; 0x23
    3b4c:	d10e      	bne.n	3b6c <__vfprintf+0xa8>
    3b4e:	f047 0708 	orr.w	r7, r7, #8
    3b52:	e7ef      	b.n	3b34 <__vfprintf+0x70>
    3b54:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    3b58:	d108      	bne.n	3b6c <__vfprintf+0xa8>
    3b5a:	f447 7700 	orr.w	r7, r7, #512	; 0x200
    3b5e:	e7e9      	b.n	3b34 <__vfprintf+0x70>
    3b60:	f047 0702 	orr.w	r7, r7, #2
    3b64:	e7e6      	b.n	3b34 <__vfprintf+0x70>
    3b66:	f047 0704 	orr.w	r7, r7, #4
    3b6a:	e7e3      	b.n	3b34 <__vfprintf+0x70>
    3b6c:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    3b70:	d001      	beq.n	3b76 <__vfprintf+0xb2>
    3b72:	2300      	movs	r3, #0
    3b74:	e00d      	b.n	3b92 <__vfprintf+0xce>
    3b76:	f8d8 3000 	ldr.w	r3, [r8]
    3b7a:	f108 0104 	add.w	r1, r8, #4
    3b7e:	2b00      	cmp	r3, #0
    3b80:	bfbc      	itt	lt
    3b82:	425b      	neglt	r3, r3
    3b84:	f087 0701 	eorlt.w	r7, r7, #1
    3b88:	1c95      	adds	r5, r2, #2
    3b8a:	f892 9001 	ldrb.w	r9, [r2, #1]
    3b8e:	4688      	mov	r8, r1
    3b90:	e00a      	b.n	3ba8 <__vfprintf+0xe4>
    3b92:	f1a9 0230 	sub.w	r2, r9, #48	; 0x30
    3b96:	b2d1      	uxtb	r1, r2
    3b98:	2909      	cmp	r1, #9
    3b9a:	d805      	bhi.n	3ba8 <__vfprintf+0xe4>
    3b9c:	210a      	movs	r1, #10
    3b9e:	fb01 2303 	mla	r3, r1, r3, r2
    3ba2:	f815 9b01 	ldrb.w	r9, [r5], #1
    3ba6:	e7f4      	b.n	3b92 <__vfprintf+0xce>
    3ba8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3bac:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
    3bb0:	930f      	str	r3, [sp, #60]	; 0x3c
    3bb2:	d124      	bne.n	3bfe <__vfprintf+0x13a>
    3bb4:	f895 9000 	ldrb.w	r9, [r5]
    3bb8:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    3bbc:	d003      	beq.n	3bc6 <__vfprintf+0x102>
    3bbe:	2300      	movs	r3, #0
    3bc0:	3501      	adds	r5, #1
    3bc2:	9306      	str	r3, [sp, #24]
    3bc4:	e008      	b.n	3bd8 <__vfprintf+0x114>
    3bc6:	f8d8 3000 	ldr.w	r3, [r8]
    3bca:	f895 9001 	ldrb.w	r9, [r5, #1]
    3bce:	9306      	str	r3, [sp, #24]
    3bd0:	f108 0804 	add.w	r8, r8, #4
    3bd4:	3502      	adds	r5, #2
    3bd6:	e00c      	b.n	3bf2 <__vfprintf+0x12e>
    3bd8:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    3bdc:	b2da      	uxtb	r2, r3
    3bde:	2a09      	cmp	r2, #9
    3be0:	d807      	bhi.n	3bf2 <__vfprintf+0x12e>
    3be2:	9906      	ldr	r1, [sp, #24]
    3be4:	220a      	movs	r2, #10
    3be6:	fb02 3301 	mla	r3, r2, r1, r3
    3bea:	f815 9b01 	ldrb.w	r9, [r5], #1
    3bee:	9306      	str	r3, [sp, #24]
    3bf0:	e7f2      	b.n	3bd8 <__vfprintf+0x114>
    3bf2:	9b06      	ldr	r3, [sp, #24]
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	db02      	blt.n	3bfe <__vfprintf+0x13a>
    3bf8:	f047 0710 	orr.w	r7, r7, #16
    3bfc:	e001      	b.n	3c02 <__vfprintf+0x13e>
    3bfe:	2300      	movs	r3, #0
    3c00:	9306      	str	r3, [sp, #24]
    3c02:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    3c06:	d10d      	bne.n	3c24 <__vfprintf+0x160>
    3c08:	f895 9000 	ldrb.w	r9, [r5]
    3c0c:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    3c10:	bf03      	ittte	eq
    3c12:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    3c16:	f047 0760 	orreq.w	r7, r7, #96	; 0x60
    3c1a:	3502      	addeq	r5, #2
    3c1c:	3501      	addne	r5, #1
    3c1e:	bf18      	it	ne
    3c20:	f047 0720 	orrne.w	r7, r7, #32
    3c24:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
    3c28:	d002      	beq.n	3c30 <__vfprintf+0x16c>
    3c2a:	f1b9 0f71 	cmp.w	r9, #113	; 0x71
    3c2e:	d104      	bne.n	3c3a <__vfprintf+0x176>
    3c30:	f895 9000 	ldrb.w	r9, [r5]
    3c34:	f047 0760 	orr.w	r7, r7, #96	; 0x60
    3c38:	e01f      	b.n	3c7a <__vfprintf+0x1b6>
    3c3a:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    3c3e:	d10e      	bne.n	3c5e <__vfprintf+0x19a>
    3c40:	f895 9000 	ldrb.w	r9, [r5]
    3c44:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    3c48:	bf03      	ittte	eq
    3c4a:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    3c4e:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
    3c52:	3502      	addeq	r5, #2
    3c54:	3501      	addne	r5, #1
    3c56:	bf18      	it	ne
    3c58:	f047 0780 	orrne.w	r7, r7, #128	; 0x80
    3c5c:	e00e      	b.n	3c7c <__vfprintf+0x1b8>
    3c5e:	f1b9 0f6a 	cmp.w	r9, #106	; 0x6a
    3c62:	d102      	bne.n	3c6a <__vfprintf+0x1a6>
    3c64:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    3c68:	e005      	b.n	3c76 <__vfprintf+0x1b2>
    3c6a:	f1b9 0f7a 	cmp.w	r9, #122	; 0x7a
    3c6e:	d002      	beq.n	3c76 <__vfprintf+0x1b2>
    3c70:	f1b9 0f74 	cmp.w	r9, #116	; 0x74
    3c74:	d102      	bne.n	3c7c <__vfprintf+0x1b8>
    3c76:	f895 9000 	ldrb.w	r9, [r5]
    3c7a:	3501      	adds	r5, #1
    3c7c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    3c80:	dc25      	bgt.n	3cce <__vfprintf+0x20a>
    3c82:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    3c86:	f280 826e 	bge.w	4166 <__vfprintf+0x6a2>
    3c8a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    3c8e:	f000 826a 	beq.w	4166 <__vfprintf+0x6a2>
    3c92:	dc0c      	bgt.n	3cae <__vfprintf+0x1ea>
    3c94:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    3c98:	f000 825f 	beq.w	415a <__vfprintf+0x696>
    3c9c:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    3ca0:	f000 8261 	beq.w	4166 <__vfprintf+0x6a2>
    3ca4:	f1b9 0f00 	cmp.w	r9, #0
    3ca8:	f000 80b4 	beq.w	3e14 <__vfprintf+0x350>
    3cac:	e031      	b.n	3d12 <__vfprintf+0x24e>
    3cae:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    3cb2:	f000 8252 	beq.w	415a <__vfprintf+0x696>
    3cb6:	dc04      	bgt.n	3cc2 <__vfprintf+0x1fe>
    3cb8:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    3cbc:	f000 8171 	beq.w	3fa2 <__vfprintf+0x4de>
    3cc0:	e027      	b.n	3d12 <__vfprintf+0x24e>
    3cc2:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
    3cc6:	d01e      	beq.n	3d06 <__vfprintf+0x242>
    3cc8:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    3ccc:	e00c      	b.n	3ce8 <__vfprintf+0x224>
    3cce:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    3cd2:	f000 81b4 	beq.w	403e <__vfprintf+0x57a>
    3cd6:	dc0a      	bgt.n	3cee <__vfprintf+0x22a>
    3cd8:	f1b9 0f6e 	cmp.w	r9, #110	; 0x6e
    3cdc:	f000 809f 	beq.w	3e1e <__vfprintf+0x35a>
    3ce0:	f300 81b6 	bgt.w	4050 <__vfprintf+0x58c>
    3ce4:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    3ce8:	f000 81f4 	beq.w	40d4 <__vfprintf+0x610>
    3cec:	e011      	b.n	3d12 <__vfprintf+0x24e>
    3cee:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    3cf2:	f000 81cd 	beq.w	4090 <__vfprintf+0x5cc>
    3cf6:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    3cfa:	f000 8179 	beq.w	3ff0 <__vfprintf+0x52c>
    3cfe:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
    3d02:	d106      	bne.n	3d12 <__vfprintf+0x24e>
    3d04:	e0ae      	b.n	3e64 <__vfprintf+0x3a0>
    3d06:	f108 0304 	add.w	r3, r8, #4
    3d0a:	930e      	str	r3, [sp, #56]	; 0x38
    3d0c:	f8d8 9000 	ldr.w	r9, [r8]
    3d10:	e001      	b.n	3d16 <__vfprintf+0x252>
    3d12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    3d16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3d18:	f103 3aff 	add.w	sl, r3, #4294967295
    3d1c:	f017 0301 	ands.w	r3, r7, #1
    3d20:	9306      	str	r3, [sp, #24]
    3d22:	d12e      	bne.n	3d82 <__vfprintf+0x2be>
    3d24:	f417 7f00 	tst.w	r7, #512	; 0x200
    3d28:	bf14      	ite	ne
    3d2a:	f04f 0830 	movne.w	r8, #48	; 0x30
    3d2e:	f04f 0820 	moveq.w	r8, #32
    3d32:	2600      	movs	r6, #0
    3d34:	2700      	movs	r7, #0
    3d36:	9b05      	ldr	r3, [sp, #20]
    3d38:	199a      	adds	r2, r3, r6
    3d3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3d3c:	f1a3 0a02 	sub.w	sl, r3, #2
    3d40:	ebba 0a06 	subs.w	sl, sl, r6
    3d44:	d41c      	bmi.n	3d80 <__vfprintf+0x2bc>
    3d46:	9b05      	ldr	r3, [sp, #20]
    3d48:	18f0      	adds	r0, r6, r3
    3d4a:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    3d4e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    3d52:	4290      	cmp	r0, r2
    3d54:	eb71 0303 	sbcs.w	r3, r1, r3
    3d58:	da0e      	bge.n	3d78 <__vfprintf+0x2b4>
    3d5a:	68a2      	ldr	r2, [r4, #8]
    3d5c:	3a01      	subs	r2, #1
    3d5e:	2a00      	cmp	r2, #0
    3d60:	60a2      	str	r2, [r4, #8]
    3d62:	db05      	blt.n	3d70 <__vfprintf+0x2ac>
    3d64:	6822      	ldr	r2, [r4, #0]
    3d66:	1c51      	adds	r1, r2, #1
    3d68:	6021      	str	r1, [r4, #0]
    3d6a:	f882 8000 	strb.w	r8, [r2]
    3d6e:	e003      	b.n	3d78 <__vfprintf+0x2b4>
    3d70:	4640      	mov	r0, r8
    3d72:	4621      	mov	r1, r4
    3d74:	f000 fe86 	bl	4a84 <__flsbuf>
    3d78:	3601      	adds	r6, #1
    3d7a:	f147 0700 	adc.w	r7, r7, #0
    3d7e:	e7da      	b.n	3d36 <__vfprintf+0x272>
    3d80:	9205      	str	r2, [sp, #20]
    3d82:	9b05      	ldr	r3, [sp, #20]
    3d84:	17d9      	asrs	r1, r3, #31
    3d86:	461a      	mov	r2, r3
    3d88:	f103 0b01 	add.w	fp, r3, #1
    3d8c:	460b      	mov	r3, r1
    3d8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    3d92:	4282      	cmp	r2, r0
    3d94:	418b      	sbcs	r3, r1
    3d96:	da0e      	bge.n	3db6 <__vfprintf+0x2f2>
    3d98:	68a3      	ldr	r3, [r4, #8]
    3d9a:	3b01      	subs	r3, #1
    3d9c:	2b00      	cmp	r3, #0
    3d9e:	60a3      	str	r3, [r4, #8]
    3da0:	db05      	blt.n	3dae <__vfprintf+0x2ea>
    3da2:	6823      	ldr	r3, [r4, #0]
    3da4:	1c5a      	adds	r2, r3, #1
    3da6:	6022      	str	r2, [r4, #0]
    3da8:	f883 9000 	strb.w	r9, [r3]
    3dac:	e003      	b.n	3db6 <__vfprintf+0x2f2>
    3dae:	4648      	mov	r0, r9
    3db0:	4621      	mov	r1, r4
    3db2:	f000 fe67 	bl	4a84 <__flsbuf>
    3db6:	9b06      	ldr	r3, [sp, #24]
    3db8:	b91b      	cbnz	r3, 3dc2 <__vfprintf+0x2fe>
    3dba:	f8cd b014 	str.w	fp, [sp, #20]
    3dbe:	f000 bcc7 	b.w	4750 <__vfprintf+0xc8c>
    3dc2:	2600      	movs	r6, #0
    3dc4:	2700      	movs	r7, #0
    3dc6:	43f3      	mvns	r3, r6
    3dc8:	eb13 0f0a 	cmn.w	r3, sl
    3dcc:	d41b      	bmi.n	3e06 <__vfprintf+0x342>
    3dce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    3dd2:	eb16 020b 	adds.w	r2, r6, fp
    3dd6:	eb47 73eb 	adc.w	r3, r7, fp, asr #31
    3dda:	4282      	cmp	r2, r0
    3ddc:	418b      	sbcs	r3, r1
    3dde:	da0e      	bge.n	3dfe <__vfprintf+0x33a>
    3de0:	68a3      	ldr	r3, [r4, #8]
    3de2:	3b01      	subs	r3, #1
    3de4:	2b00      	cmp	r3, #0
    3de6:	60a3      	str	r3, [r4, #8]
    3de8:	db05      	blt.n	3df6 <__vfprintf+0x332>
    3dea:	6823      	ldr	r3, [r4, #0]
    3dec:	1c5a      	adds	r2, r3, #1
    3dee:	6022      	str	r2, [r4, #0]
    3df0:	2220      	movs	r2, #32
    3df2:	701a      	strb	r2, [r3, #0]
    3df4:	e003      	b.n	3dfe <__vfprintf+0x33a>
    3df6:	2020      	movs	r0, #32
    3df8:	4621      	mov	r1, r4
    3dfa:	f000 fe43 	bl	4a84 <__flsbuf>
    3dfe:	3601      	adds	r6, #1
    3e00:	f147 0700 	adc.w	r7, r7, #0
    3e04:	e7df      	b.n	3dc6 <__vfprintf+0x302>
    3e06:	465b      	mov	r3, fp
    3e08:	f1ba 0f00 	cmp.w	sl, #0
    3e0c:	bfa8      	it	ge
    3e0e:	4453      	addge	r3, sl
    3e10:	f000 bc9d 	b.w	474e <__vfprintf+0xc8a>
    3e14:	3d01      	subs	r5, #1
    3e16:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    3e1a:	f000 bc99 	b.w	4750 <__vfprintf+0xc8c>
    3e1e:	f108 0304 	add.w	r3, r8, #4
    3e22:	f017 0f40 	tst.w	r7, #64	; 0x40
    3e26:	930e      	str	r3, [sp, #56]	; 0x38
    3e28:	f8d8 3000 	ldr.w	r3, [r8]
    3e2c:	d006      	beq.n	3e3c <__vfprintf+0x378>
    3e2e:	9a05      	ldr	r2, [sp, #20]
    3e30:	4610      	mov	r0, r2
    3e32:	17d1      	asrs	r1, r2, #31
    3e34:	e9c3 0100 	strd	r0, r1, [r3]
    3e38:	f000 bc8a 	b.w	4750 <__vfprintf+0xc8c>
    3e3c:	06be      	lsls	r6, r7, #26
    3e3e:	d40d      	bmi.n	3e5c <__vfprintf+0x398>
    3e40:	05f8      	lsls	r0, r7, #23
    3e42:	d504      	bpl.n	3e4e <__vfprintf+0x38a>
    3e44:	f89d 2014 	ldrb.w	r2, [sp, #20]
    3e48:	701a      	strb	r2, [r3, #0]
    3e4a:	f000 bc81 	b.w	4750 <__vfprintf+0xc8c>
    3e4e:	0639      	lsls	r1, r7, #24
    3e50:	d504      	bpl.n	3e5c <__vfprintf+0x398>
    3e52:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    3e56:	801a      	strh	r2, [r3, #0]
    3e58:	f000 bc7a 	b.w	4750 <__vfprintf+0xc8c>
    3e5c:	9a05      	ldr	r2, [sp, #20]
    3e5e:	601a      	str	r2, [r3, #0]
    3e60:	f000 bc76 	b.w	4750 <__vfprintf+0xc8c>
    3e64:	f108 0304 	add.w	r3, r8, #4
    3e68:	930e      	str	r3, [sp, #56]	; 0x38
    3e6a:	f8d8 9000 	ldr.w	r9, [r8]
    3e6e:	4bab      	ldr	r3, [pc, #684]	; (411c <__vfprintf+0x658>)
    3e70:	f1b9 0f00 	cmp.w	r9, #0
    3e74:	bf08      	it	eq
    3e76:	4699      	moveq	r9, r3
    3e78:	4648      	mov	r0, r9
    3e7a:	f000 fd81 	bl	4980 <strlen>
    3e7e:	06fa      	lsls	r2, r7, #27
    3e80:	4682      	mov	sl, r0
    3e82:	d503      	bpl.n	3e8c <__vfprintf+0x3c8>
    3e84:	9b06      	ldr	r3, [sp, #24]
    3e86:	4298      	cmp	r0, r3
    3e88:	bfa8      	it	ge
    3e8a:	469a      	movge	sl, r3
    3e8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3e8e:	ebca 0b03 	rsb	fp, sl, r3
    3e92:	f017 0301 	ands.w	r3, r7, #1
    3e96:	9306      	str	r3, [sp, #24]
    3e98:	d131      	bne.n	3efe <__vfprintf+0x43a>
    3e9a:	f417 7f00 	tst.w	r7, #512	; 0x200
    3e9e:	bf14      	ite	ne
    3ea0:	f04f 0830 	movne.w	r8, #48	; 0x30
    3ea4:	f04f 0820 	moveq.w	r8, #32
    3ea8:	2600      	movs	r6, #0
    3eaa:	2700      	movs	r7, #0
    3eac:	f10b 32ff 	add.w	r2, fp, #4294967295
    3eb0:	1b91      	subs	r1, r2, r6
    3eb2:	2900      	cmp	r1, #0
    3eb4:	db1c      	blt.n	3ef0 <__vfprintf+0x42c>
    3eb6:	9b05      	ldr	r3, [sp, #20]
    3eb8:	18f0      	adds	r0, r6, r3
    3eba:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    3ebe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    3ec2:	4290      	cmp	r0, r2
    3ec4:	eb71 0303 	sbcs.w	r3, r1, r3
    3ec8:	da0e      	bge.n	3ee8 <__vfprintf+0x424>
    3eca:	68a2      	ldr	r2, [r4, #8]
    3ecc:	3a01      	subs	r2, #1
    3ece:	2a00      	cmp	r2, #0
    3ed0:	60a2      	str	r2, [r4, #8]
    3ed2:	db05      	blt.n	3ee0 <__vfprintf+0x41c>
    3ed4:	6822      	ldr	r2, [r4, #0]
    3ed6:	1c51      	adds	r1, r2, #1
    3ed8:	6021      	str	r1, [r4, #0]
    3eda:	f882 8000 	strb.w	r8, [r2]
    3ede:	e003      	b.n	3ee8 <__vfprintf+0x424>
    3ee0:	4640      	mov	r0, r8
    3ee2:	4621      	mov	r1, r4
    3ee4:	f000 fdce 	bl	4a84 <__flsbuf>
    3ee8:	3601      	adds	r6, #1
    3eea:	f147 0700 	adc.w	r7, r7, #0
    3eee:	e7dd      	b.n	3eac <__vfprintf+0x3e8>
    3ef0:	9b05      	ldr	r3, [sp, #20]
    3ef2:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    3ef6:	445b      	add	r3, fp
    3ef8:	9305      	str	r3, [sp, #20]
    3efa:	ebcb 0b02 	rsb	fp, fp, r2
    3efe:	2600      	movs	r6, #0
    3f00:	2700      	movs	r7, #0
    3f02:	45b2      	cmp	sl, r6
    3f04:	9b05      	ldr	r3, [sp, #20]
    3f06:	dd1c      	ble.n	3f42 <__vfprintf+0x47e>
    3f08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    3f0c:	18f2      	adds	r2, r6, r3
    3f0e:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    3f12:	4282      	cmp	r2, r0
    3f14:	418b      	sbcs	r3, r1
    3f16:	da10      	bge.n	3f3a <__vfprintf+0x476>
    3f18:	68a3      	ldr	r3, [r4, #8]
    3f1a:	3b01      	subs	r3, #1
    3f1c:	2b00      	cmp	r3, #0
    3f1e:	60a3      	str	r3, [r4, #8]
    3f20:	eb09 0306 	add.w	r3, r9, r6
    3f24:	db05      	blt.n	3f32 <__vfprintf+0x46e>
    3f26:	6822      	ldr	r2, [r4, #0]
    3f28:	1c51      	adds	r1, r2, #1
    3f2a:	6021      	str	r1, [r4, #0]
    3f2c:	781b      	ldrb	r3, [r3, #0]
    3f2e:	7013      	strb	r3, [r2, #0]
    3f30:	e003      	b.n	3f3a <__vfprintf+0x476>
    3f32:	7818      	ldrb	r0, [r3, #0]
    3f34:	4621      	mov	r1, r4
    3f36:	f000 fda5 	bl	4a84 <__flsbuf>
    3f3a:	3601      	adds	r6, #1
    3f3c:	f147 0700 	adc.w	r7, r7, #0
    3f40:	e7df      	b.n	3f02 <__vfprintf+0x43e>
    3f42:	f1ba 0f00 	cmp.w	sl, #0
    3f46:	bfa8      	it	ge
    3f48:	4453      	addge	r3, sl
    3f4a:	9305      	str	r3, [sp, #20]
    3f4c:	9b06      	ldr	r3, [sp, #24]
    3f4e:	2b00      	cmp	r3, #0
    3f50:	f000 83fe 	beq.w	4750 <__vfprintf+0xc8c>
    3f54:	2600      	movs	r6, #0
    3f56:	2700      	movs	r7, #0
    3f58:	43f3      	mvns	r3, r6
    3f5a:	eb13 0f0b 	cmn.w	r3, fp
    3f5e:	9b05      	ldr	r3, [sp, #20]
    3f60:	d41a      	bmi.n	3f98 <__vfprintf+0x4d4>
    3f62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    3f66:	18f2      	adds	r2, r6, r3
    3f68:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    3f6c:	4282      	cmp	r2, r0
    3f6e:	418b      	sbcs	r3, r1
    3f70:	da0e      	bge.n	3f90 <__vfprintf+0x4cc>
    3f72:	68a3      	ldr	r3, [r4, #8]
    3f74:	3b01      	subs	r3, #1
    3f76:	2b00      	cmp	r3, #0
    3f78:	60a3      	str	r3, [r4, #8]
    3f7a:	db05      	blt.n	3f88 <__vfprintf+0x4c4>
    3f7c:	6823      	ldr	r3, [r4, #0]
    3f7e:	1c5a      	adds	r2, r3, #1
    3f80:	6022      	str	r2, [r4, #0]
    3f82:	2220      	movs	r2, #32
    3f84:	701a      	strb	r2, [r3, #0]
    3f86:	e003      	b.n	3f90 <__vfprintf+0x4cc>
    3f88:	2020      	movs	r0, #32
    3f8a:	4621      	mov	r1, r4
    3f8c:	f000 fd7a 	bl	4a84 <__flsbuf>
    3f90:	3601      	adds	r6, #1
    3f92:	f147 0700 	adc.w	r7, r7, #0
    3f96:	e7df      	b.n	3f58 <__vfprintf+0x494>
    3f98:	f1bb 0f00 	cmp.w	fp, #0
    3f9c:	bfa8      	it	ge
    3f9e:	445b      	addge	r3, fp
    3fa0:	e3d5      	b.n	474e <__vfprintf+0xc8a>
    3fa2:	067b      	lsls	r3, r7, #25
    3fa4:	d509      	bpl.n	3fba <__vfprintf+0x4f6>
    3fa6:	f108 0807 	add.w	r8, r8, #7
    3faa:	f028 0807 	bic.w	r8, r8, #7
    3fae:	f108 0308 	add.w	r3, r8, #8
    3fb2:	930e      	str	r3, [sp, #56]	; 0x38
    3fb4:	e9d8 2300 	ldrd	r2, r3, [r8]
    3fb8:	e005      	b.n	3fc6 <__vfprintf+0x502>
    3fba:	f108 0304 	add.w	r3, r8, #4
    3fbe:	f8d8 2000 	ldr.w	r2, [r8]
    3fc2:	930e      	str	r3, [sp, #56]	; 0x38
    3fc4:	2300      	movs	r3, #0
    3fc6:	063e      	lsls	r6, r7, #24
    3fc8:	d501      	bpl.n	3fce <__vfprintf+0x50a>
    3fca:	b292      	uxth	r2, r2
    3fcc:	e003      	b.n	3fd6 <__vfprintf+0x512>
    3fce:	05f8      	lsls	r0, r7, #23
    3fd0:	d502      	bpl.n	3fd8 <__vfprintf+0x514>
    3fd2:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    3fd6:	2300      	movs	r3, #0
    3fd8:	4951      	ldr	r1, [pc, #324]	; (4120 <__vfprintf+0x65c>)
    3fda:	f017 0f08 	tst.w	r7, #8
    3fde:	4851      	ldr	r0, [pc, #324]	; (4124 <__vfprintf+0x660>)
    3fe0:	bf08      	it	eq
    3fe2:	4608      	moveq	r0, r1
    3fe4:	06f9      	lsls	r1, r7, #27
    3fe6:	f140 80d6 	bpl.w	4196 <__vfprintf+0x6d2>
    3fea:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    3fee:	e0d2      	b.n	4196 <__vfprintf+0x6d2>
    3ff0:	067b      	lsls	r3, r7, #25
    3ff2:	d509      	bpl.n	4008 <__vfprintf+0x544>
    3ff4:	f108 0807 	add.w	r8, r8, #7
    3ff8:	f028 0807 	bic.w	r8, r8, #7
    3ffc:	f108 0308 	add.w	r3, r8, #8
    4000:	930e      	str	r3, [sp, #56]	; 0x38
    4002:	e9d8 2300 	ldrd	r2, r3, [r8]
    4006:	e005      	b.n	4014 <__vfprintf+0x550>
    4008:	f108 0304 	add.w	r3, r8, #4
    400c:	f8d8 2000 	ldr.w	r2, [r8]
    4010:	930e      	str	r3, [sp, #56]	; 0x38
    4012:	2300      	movs	r3, #0
    4014:	063e      	lsls	r6, r7, #24
    4016:	d501      	bpl.n	401c <__vfprintf+0x558>
    4018:	b292      	uxth	r2, r2
    401a:	e003      	b.n	4024 <__vfprintf+0x560>
    401c:	05f8      	lsls	r0, r7, #23
    401e:	d502      	bpl.n	4026 <__vfprintf+0x562>
    4020:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4024:	2300      	movs	r3, #0
    4026:	493e      	ldr	r1, [pc, #248]	; (4120 <__vfprintf+0x65c>)
    4028:	f017 0f08 	tst.w	r7, #8
    402c:	483e      	ldr	r0, [pc, #248]	; (4128 <__vfprintf+0x664>)
    402e:	bf08      	it	eq
    4030:	4608      	moveq	r0, r1
    4032:	06f9      	lsls	r1, r7, #27
    4034:	f140 80b1 	bpl.w	419a <__vfprintf+0x6d6>
    4038:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    403c:	e0ad      	b.n	419a <__vfprintf+0x6d6>
    403e:	f108 0304 	add.w	r3, r8, #4
    4042:	930e      	str	r3, [sp, #56]	; 0x38
    4044:	f8d8 2000 	ldr.w	r2, [r8]
    4048:	2300      	movs	r3, #0
    404a:	4938      	ldr	r1, [pc, #224]	; (412c <__vfprintf+0x668>)
    404c:	4836      	ldr	r0, [pc, #216]	; (4128 <__vfprintf+0x664>)
    404e:	e0a7      	b.n	41a0 <__vfprintf+0x6dc>
    4050:	067e      	lsls	r6, r7, #25
    4052:	d509      	bpl.n	4068 <__vfprintf+0x5a4>
    4054:	f108 0807 	add.w	r8, r8, #7
    4058:	f028 0807 	bic.w	r8, r8, #7
    405c:	f108 0308 	add.w	r3, r8, #8
    4060:	930e      	str	r3, [sp, #56]	; 0x38
    4062:	e9d8 2300 	ldrd	r2, r3, [r8]
    4066:	e005      	b.n	4074 <__vfprintf+0x5b0>
    4068:	f108 0304 	add.w	r3, r8, #4
    406c:	f8d8 2000 	ldr.w	r2, [r8]
    4070:	930e      	str	r3, [sp, #56]	; 0x38
    4072:	2300      	movs	r3, #0
    4074:	0638      	lsls	r0, r7, #24
    4076:	d501      	bpl.n	407c <__vfprintf+0x5b8>
    4078:	b292      	uxth	r2, r2
    407a:	e003      	b.n	4084 <__vfprintf+0x5c0>
    407c:	05f9      	lsls	r1, r7, #23
    407e:	d502      	bpl.n	4086 <__vfprintf+0x5c2>
    4080:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4084:	2300      	movs	r3, #0
    4086:	f017 0f08 	tst.w	r7, #8
    408a:	4925      	ldr	r1, [pc, #148]	; (4120 <__vfprintf+0x65c>)
    408c:	4828      	ldr	r0, [pc, #160]	; (4130 <__vfprintf+0x66c>)
    408e:	e059      	b.n	4144 <__vfprintf+0x680>
    4090:	067e      	lsls	r6, r7, #25
    4092:	d509      	bpl.n	40a8 <__vfprintf+0x5e4>
    4094:	f108 0807 	add.w	r8, r8, #7
    4098:	f028 0807 	bic.w	r8, r8, #7
    409c:	f108 0308 	add.w	r3, r8, #8
    40a0:	930e      	str	r3, [sp, #56]	; 0x38
    40a2:	e9d8 2300 	ldrd	r2, r3, [r8]
    40a6:	e005      	b.n	40b4 <__vfprintf+0x5f0>
    40a8:	f108 0304 	add.w	r3, r8, #4
    40ac:	f8d8 2000 	ldr.w	r2, [r8]
    40b0:	930e      	str	r3, [sp, #56]	; 0x38
    40b2:	2300      	movs	r3, #0
    40b4:	0638      	lsls	r0, r7, #24
    40b6:	d501      	bpl.n	40bc <__vfprintf+0x5f8>
    40b8:	b292      	uxth	r2, r2
    40ba:	e003      	b.n	40c4 <__vfprintf+0x600>
    40bc:	05f9      	lsls	r1, r7, #23
    40be:	d502      	bpl.n	40c6 <__vfprintf+0x602>
    40c0:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    40c4:	2300      	movs	r3, #0
    40c6:	f017 0110 	ands.w	r1, r7, #16
    40ca:	d068      	beq.n	419e <__vfprintf+0x6da>
    40cc:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    40d0:	2100      	movs	r1, #0
    40d2:	e064      	b.n	419e <__vfprintf+0x6da>
    40d4:	067b      	lsls	r3, r7, #25
    40d6:	d509      	bpl.n	40ec <__vfprintf+0x628>
    40d8:	f108 0807 	add.w	r8, r8, #7
    40dc:	f028 0807 	bic.w	r8, r8, #7
    40e0:	f108 0308 	add.w	r3, r8, #8
    40e4:	930e      	str	r3, [sp, #56]	; 0x38
    40e6:	e9d8 2300 	ldrd	r2, r3, [r8]
    40ea:	e005      	b.n	40f8 <__vfprintf+0x634>
    40ec:	f8d8 2000 	ldr.w	r2, [r8]
    40f0:	f108 0304 	add.w	r3, r8, #4
    40f4:	930e      	str	r3, [sp, #56]	; 0x38
    40f6:	17d3      	asrs	r3, r2, #31
    40f8:	063e      	lsls	r6, r7, #24
    40fa:	d501      	bpl.n	4100 <__vfprintf+0x63c>
    40fc:	b212      	sxth	r2, r2
    40fe:	e002      	b.n	4106 <__vfprintf+0x642>
    4100:	05f8      	lsls	r0, r7, #23
    4102:	d501      	bpl.n	4108 <__vfprintf+0x644>
    4104:	b252      	sxtb	r2, r2
    4106:	17d3      	asrs	r3, r2, #31
    4108:	2a00      	cmp	r2, #0
    410a:	f173 0100 	sbcs.w	r1, r3, #0
    410e:	da13      	bge.n	4138 <__vfprintf+0x674>
    4110:	4252      	negs	r2, r2
    4112:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4116:	4807      	ldr	r0, [pc, #28]	; (4134 <__vfprintf+0x670>)
    4118:	e018      	b.n	414c <__vfprintf+0x688>
    411a:	bf00      	nop
    411c:	000064f4 	.word	0x000064f4
    4120:	00006547 	.word	0x00006547
    4124:	000064fb 	.word	0x000064fb
    4128:	000064fe 	.word	0x000064fe
    412c:	00006514 	.word	0x00006514
    4130:	00006501 	.word	0x00006501
    4134:	000064ee 	.word	0x000064ee
    4138:	07b9      	lsls	r1, r7, #30
    413a:	d406      	bmi.n	414a <__vfprintf+0x686>
    413c:	49b6      	ldr	r1, [pc, #728]	; (4418 <__vfprintf+0x954>)
    413e:	48b7      	ldr	r0, [pc, #732]	; (441c <__vfprintf+0x958>)
    4140:	f017 0f04 	tst.w	r7, #4
    4144:	bf08      	it	eq
    4146:	4608      	moveq	r0, r1
    4148:	e000      	b.n	414c <__vfprintf+0x688>
    414a:	48b5      	ldr	r0, [pc, #724]	; (4420 <__vfprintf+0x95c>)
    414c:	f017 0110 	ands.w	r1, r7, #16
    4150:	d026      	beq.n	41a0 <__vfprintf+0x6dc>
    4152:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4156:	2100      	movs	r1, #0
    4158:	e022      	b.n	41a0 <__vfprintf+0x6dc>
    415a:	06fb      	lsls	r3, r7, #27
    415c:	bf5e      	ittt	pl
    415e:	230d      	movpl	r3, #13
    4160:	f047 0710 	orrpl.w	r7, r7, #16
    4164:	9306      	strpl	r3, [sp, #24]
    4166:	9b06      	ldr	r3, [sp, #24]
    4168:	f017 0f10 	tst.w	r7, #16
    416c:	f108 0807 	add.w	r8, r8, #7
    4170:	bf08      	it	eq
    4172:	2306      	moveq	r3, #6
    4174:	f028 0807 	bic.w	r8, r8, #7
    4178:	9306      	str	r3, [sp, #24]
    417a:	2100      	movs	r1, #0
    417c:	f108 0308 	add.w	r3, r8, #8
    4180:	930e      	str	r3, [sp, #56]	; 0x38
    4182:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
    4186:	e9d8 2300 	ldrd	r2, r3, [r8]
    418a:	4608      	mov	r0, r1
    418c:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
    4190:	2200      	movs	r2, #0
    4192:	2300      	movs	r3, #0
    4194:	e004      	b.n	41a0 <__vfprintf+0x6dc>
    4196:	49a3      	ldr	r1, [pc, #652]	; (4424 <__vfprintf+0x960>)
    4198:	e002      	b.n	41a0 <__vfprintf+0x6dc>
    419a:	49a3      	ldr	r1, [pc, #652]	; (4428 <__vfprintf+0x964>)
    419c:	e000      	b.n	41a0 <__vfprintf+0x6dc>
    419e:	489e      	ldr	r0, [pc, #632]	; (4418 <__vfprintf+0x954>)
    41a0:	9e05      	ldr	r6, [sp, #20]
    41a2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    41a6:	ebba 0a06 	subs.w	sl, sl, r6
    41aa:	eb6b 7be6 	sbc.w	fp, fp, r6, asr #31
    41ae:	e9cd ab08 	strd	sl, fp, [sp, #32]
    41b2:	9e06      	ldr	r6, [sp, #24]
    41b4:	901f      	str	r0, [sp, #124]	; 0x7c
    41b6:	f04f 30ff 	mov.w	r0, #4294967295
    41ba:	9020      	str	r0, [sp, #128]	; 0x80
    41bc:	9021      	str	r0, [sp, #132]	; 0x84
    41be:	961e      	str	r6, [sp, #120]	; 0x78
    41c0:	2000      	movs	r0, #0
    41c2:	f04f 0e55 	mov.w	lr, #85	; 0x55
    41c6:	ae24      	add	r6, sp, #144	; 0x90
    41c8:	f800 e006 	strb.w	lr, [r0, r6]
    41cc:	3001      	adds	r0, #1
    41ce:	2820      	cmp	r0, #32
    41d0:	d1f7      	bne.n	41c2 <__vfprintf+0x6fe>
    41d2:	f417 6f82 	tst.w	r7, #1040	; 0x410
    41d6:	bf04      	itt	eq
    41d8:	2001      	moveq	r0, #1
    41da:	901e      	streq	r0, [sp, #120]	; 0x78
    41dc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    41e0:	dc1b      	bgt.n	421a <__vfprintf+0x756>
    41e2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    41e6:	f280 80d4 	bge.w	4392 <__vfprintf+0x8ce>
    41ea:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    41ee:	f000 80d0 	beq.w	4392 <__vfprintf+0x8ce>
    41f2:	dc08      	bgt.n	4206 <__vfprintf+0x742>
    41f4:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    41f8:	f000 80cb 	beq.w	4392 <__vfprintf+0x8ce>
    41fc:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    4200:	f040 80d7 	bne.w	43b2 <__vfprintf+0x8ee>
    4204:	e0c5      	b.n	4392 <__vfprintf+0x8ce>
    4206:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    420a:	f000 80c2 	beq.w	4392 <__vfprintf+0x8ce>
    420e:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    4212:	d017      	beq.n	4244 <__vfprintf+0x780>
    4214:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    4218:	e011      	b.n	423e <__vfprintf+0x77a>
    421a:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    421e:	d014      	beq.n	424a <__vfprintf+0x786>
    4220:	dc08      	bgt.n	4234 <__vfprintf+0x770>
    4222:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    4226:	d00d      	beq.n	4244 <__vfprintf+0x780>
    4228:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
    422c:	f040 80c1 	bne.w	43b2 <__vfprintf+0x8ee>
    4230:	2100      	movs	r1, #0
    4232:	e020      	b.n	4276 <__vfprintf+0x7b2>
    4234:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    4238:	d004      	beq.n	4244 <__vfprintf+0x780>
    423a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    423e:	f040 80b8 	bne.w	43b2 <__vfprintf+0x8ee>
    4242:	e002      	b.n	424a <__vfprintf+0x786>
    4244:	f04f 0e00 	mov.w	lr, #0
    4248:	e027      	b.n	429a <__vfprintf+0x7d6>
    424a:	2000      	movs	r0, #0
    424c:	ea52 0e03 	orrs.w	lr, r2, r3
    4250:	4606      	mov	r6, r0
    4252:	f000 80af 	beq.w	43b4 <__vfprintf+0x8f0>
    4256:	f002 060f 	and.w	r6, r2, #15
    425a:	f811 e006 	ldrb.w	lr, [r1, r6]
    425e:	ae24      	add	r6, sp, #144	; 0x90
    4260:	f800 e006 	strb.w	lr, [r0, r6]
    4264:	0916      	lsrs	r6, r2, #4
    4266:	ea46 7603 	orr.w	r6, r6, r3, lsl #28
    426a:	ea4f 1e13 	mov.w	lr, r3, lsr #4
    426e:	4632      	mov	r2, r6
    4270:	4673      	mov	r3, lr
    4272:	3001      	adds	r0, #1
    4274:	e7ea      	b.n	424c <__vfprintf+0x788>
    4276:	ea52 0003 	orrs.w	r0, r2, r3
    427a:	460e      	mov	r6, r1
    427c:	f000 809a 	beq.w	43b4 <__vfprintf+0x8f0>
    4280:	f002 0007 	and.w	r0, r2, #7
    4284:	3030      	adds	r0, #48	; 0x30
    4286:	ae24      	add	r6, sp, #144	; 0x90
    4288:	5588      	strb	r0, [r1, r6]
    428a:	08d0      	lsrs	r0, r2, #3
    428c:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
    4290:	08de      	lsrs	r6, r3, #3
    4292:	4602      	mov	r2, r0
    4294:	4633      	mov	r3, r6
    4296:	3101      	adds	r1, #1
    4298:	e7ed      	b.n	4276 <__vfprintf+0x7b2>
    429a:	ea52 0103 	orrs.w	r1, r2, r3
    429e:	4676      	mov	r6, lr
    42a0:	f000 8088 	beq.w	43b4 <__vfprintf+0x8f0>
    42a4:	0891      	lsrs	r1, r2, #2
    42a6:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
    42aa:	9118      	str	r1, [sp, #96]	; 0x60
    42ac:	0899      	lsrs	r1, r3, #2
    42ae:	9119      	str	r1, [sp, #100]	; 0x64
    42b0:	0859      	lsrs	r1, r3, #1
    42b2:	ea4f 0032 	mov.w	r0, r2, rrx
    42b6:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    42ba:	eb18 0800 	adds.w	r8, r8, r0
    42be:	4640      	mov	r0, r8
    42c0:	eb49 0901 	adc.w	r9, r9, r1
    42c4:	4649      	mov	r1, r9
    42c6:	0906      	lsrs	r6, r0, #4
    42c8:	ea46 7609 	orr.w	r6, r6, r9, lsl #28
    42cc:	9610      	str	r6, [sp, #64]	; 0x40
    42ce:	090e      	lsrs	r6, r1, #4
    42d0:	9611      	str	r6, [sp, #68]	; 0x44
    42d2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
    42d6:	eb18 0800 	adds.w	r8, r8, r0
    42da:	4640      	mov	r0, r8
    42dc:	eb49 0901 	adc.w	r9, r9, r1
    42e0:	4649      	mov	r1, r9
    42e2:	0a06      	lsrs	r6, r0, #8
    42e4:	ea46 6609 	orr.w	r6, r6, r9, lsl #24
    42e8:	9612      	str	r6, [sp, #72]	; 0x48
    42ea:	0a0e      	lsrs	r6, r1, #8
    42ec:	9613      	str	r6, [sp, #76]	; 0x4c
    42ee:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    42f2:	eb18 0800 	adds.w	r8, r8, r0
    42f6:	4640      	mov	r0, r8
    42f8:	eb49 0901 	adc.w	r9, r9, r1
    42fc:	4649      	mov	r1, r9
    42fe:	0c06      	lsrs	r6, r0, #16
    4300:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
    4304:	9614      	str	r6, [sp, #80]	; 0x50
    4306:	0c0e      	lsrs	r6, r1, #16
    4308:	9615      	str	r6, [sp, #84]	; 0x54
    430a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    430e:	eb18 0800 	adds.w	r8, r8, r0
    4312:	eb49 0901 	adc.w	r9, r9, r1
    4316:	4640      	mov	r0, r8
    4318:	4649      	mov	r1, r9
    431a:	2600      	movs	r6, #0
    431c:	961b      	str	r6, [sp, #108]	; 0x6c
    431e:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    4322:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    4326:	eb18 0800 	adds.w	r8, r8, r0
    432a:	eb49 0901 	adc.w	r9, r9, r1
    432e:	4640      	mov	r0, r8
    4330:	4649      	mov	r1, r9
    4332:	08c6      	lsrs	r6, r0, #3
    4334:	08c9      	lsrs	r1, r1, #3
    4336:	1d90      	adds	r0, r2, #6
    4338:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
    433c:	910d      	str	r1, [sp, #52]	; 0x34
    433e:	f143 0100 	adc.w	r1, r3, #0
    4342:	230a      	movs	r3, #10
    4344:	fba6 8903 	umull	r8, r9, r6, r3
    4348:	960c      	str	r6, [sp, #48]	; 0x30
    434a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    434c:	ebb0 0008 	subs.w	r0, r0, r8
    4350:	fb03 9906 	mla	r9, r3, r6, r9
    4354:	ea4f 1610 	mov.w	r6, r0, lsr #4
    4358:	eb61 0109 	sbc.w	r1, r1, r9
    435c:	ea46 7601 	orr.w	r6, r6, r1, lsl #28
    4360:	0909      	lsrs	r1, r1, #4
    4362:	9616      	str	r6, [sp, #88]	; 0x58
    4364:	9117      	str	r1, [sp, #92]	; 0x5c
    4366:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    436a:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
    436e:	eb10 0008 	adds.w	r0, r0, r8
    4372:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4376:	f102 0230 	add.w	r2, r2, #48	; 0x30
    437a:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    437e:	eb41 0109 	adc.w	r1, r1, r9
    4382:	ab24      	add	r3, sp, #144	; 0x90
    4384:	f80e 2003 	strb.w	r2, [lr, r3]
    4388:	f10e 0e01 	add.w	lr, lr, #1
    438c:	4602      	mov	r2, r0
    438e:	460b      	mov	r3, r1
    4390:	e783      	b.n	429a <__vfprintf+0x7d6>
    4392:	ab1f      	add	r3, sp, #124	; 0x7c
    4394:	9300      	str	r3, [sp, #0]
    4396:	ab1e      	add	r3, sp, #120	; 0x78
    4398:	9301      	str	r3, [sp, #4]
    439a:	ab20      	add	r3, sp, #128	; 0x80
    439c:	9302      	str	r3, [sp, #8]
    439e:	ab21      	add	r3, sp, #132	; 0x84
    43a0:	9303      	str	r3, [sp, #12]
    43a2:	9e38      	ldr	r6, [sp, #224]	; 0xe0
    43a4:	4648      	mov	r0, r9
    43a6:	a922      	add	r1, sp, #136	; 0x88
    43a8:	aa24      	add	r2, sp, #144	; 0x90
    43aa:	463b      	mov	r3, r7
    43ac:	47b0      	blx	r6
    43ae:	4606      	mov	r6, r0
    43b0:	e000      	b.n	43b4 <__vfprintf+0x8f0>
    43b2:	2600      	movs	r6, #0
    43b4:	f417 6380 	ands.w	r3, r7, #1024	; 0x400
    43b8:	931c      	str	r3, [sp, #112]	; 0x70
    43ba:	d00e      	beq.n	43da <__vfprintf+0x916>
    43bc:	2300      	movs	r3, #0
    43be:	931e      	str	r3, [sp, #120]	; 0x78
    43c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    43c2:	2b00      	cmp	r3, #0
    43c4:	bfc4      	itt	gt
    43c6:	f103 33ff 	addgt.w	r3, r3, #4294967295
    43ca:	931e      	strgt	r3, [sp, #120]	; 0x78
    43cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
    43ce:	2b00      	cmp	r3, #0
    43d0:	dd08      	ble.n	43e4 <__vfprintf+0x920>
    43d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    43d4:	3b01      	subs	r3, #1
    43d6:	4413      	add	r3, r2
    43d8:	e003      	b.n	43e2 <__vfprintf+0x91e>
    43da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    43dc:	1b9b      	subs	r3, r3, r6
    43de:	bf48      	it	mi
    43e0:	2300      	movmi	r3, #0
    43e2:	931e      	str	r3, [sp, #120]	; 0x78
    43e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    43e6:	981f      	ldr	r0, [sp, #124]	; 0x7c
    43e8:	eb06 0803 	add.w	r8, r6, r3
    43ec:	f000 fac8 	bl	4980 <strlen>
    43f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    43f2:	ebc8 0b03 	rsb	fp, r8, r3
    43f6:	f007 0301 	and.w	r3, r7, #1
    43fa:	930f      	str	r3, [sp, #60]	; 0x3c
    43fc:	f240 2301 	movw	r3, #513	; 0x201
    4400:	403b      	ands	r3, r7
    4402:	ebc0 0b0b 	rsb	fp, r0, fp
    4406:	b18b      	cbz	r3, 442c <__vfprintf+0x968>
    4408:	f04f 0a00 	mov.w	sl, #0
    440c:	f04f 0800 	mov.w	r8, #0
    4410:	f04f 0900 	mov.w	r9, #0
    4414:	e040      	b.n	4498 <__vfprintf+0x9d4>
    4416:	bf00      	nop
    4418:	00006547 	.word	0x00006547
    441c:	000064be 	.word	0x000064be
    4420:	000064bc 	.word	0x000064bc
    4424:	00006503 	.word	0x00006503
    4428:	00006514 	.word	0x00006514
    442c:	f04f 0800 	mov.w	r8, #0
    4430:	f04f 0900 	mov.w	r9, #0
    4434:	f10b 33ff 	add.w	r3, fp, #4294967295
    4438:	ebc8 0203 	rsb	r2, r8, r3
    443c:	2a00      	cmp	r2, #0
    443e:	db19      	blt.n	4474 <__vfprintf+0x9b0>
    4440:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    4444:	4590      	cmp	r8, r2
    4446:	eb79 0303 	sbcs.w	r3, r9, r3
    444a:	da0e      	bge.n	446a <__vfprintf+0x9a6>
    444c:	68a3      	ldr	r3, [r4, #8]
    444e:	3b01      	subs	r3, #1
    4450:	2b00      	cmp	r3, #0
    4452:	60a3      	str	r3, [r4, #8]
    4454:	db05      	blt.n	4462 <__vfprintf+0x99e>
    4456:	6823      	ldr	r3, [r4, #0]
    4458:	1c5a      	adds	r2, r3, #1
    445a:	6022      	str	r2, [r4, #0]
    445c:	2220      	movs	r2, #32
    445e:	701a      	strb	r2, [r3, #0]
    4460:	e003      	b.n	446a <__vfprintf+0x9a6>
    4462:	2020      	movs	r0, #32
    4464:	4621      	mov	r1, r4
    4466:	f000 fb0d 	bl	4a84 <__flsbuf>
    446a:	f118 0801 	adds.w	r8, r8, #1
    446e:	f149 0900 	adc.w	r9, r9, #0
    4472:	e7df      	b.n	4434 <__vfprintf+0x970>
    4474:	ea2b 7aeb 	bic.w	sl, fp, fp, asr #31
    4478:	ebca 0b03 	rsb	fp, sl, r3
    447c:	e7c6      	b.n	440c <__vfprintf+0x948>
    447e:	eb18 020a 	adds.w	r2, r8, sl
    4482:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    4486:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    448a:	4282      	cmp	r2, r0
    448c:	418b      	sbcs	r3, r1
    448e:	db0e      	blt.n	44ae <__vfprintf+0x9ea>
    4490:	f118 0801 	adds.w	r8, r8, #1
    4494:	f149 0900 	adc.w	r9, r9, #0
    4498:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    449a:	eb0a 0308 	add.w	r3, sl, r8
    449e:	1c51      	adds	r1, r2, #1
    44a0:	911f      	str	r1, [sp, #124]	; 0x7c
    44a2:	f892 e000 	ldrb.w	lr, [r2]
    44a6:	f1be 0f00 	cmp.w	lr, #0
    44aa:	d1e8      	bne.n	447e <__vfprintf+0x9ba>
    44ac:	e00f      	b.n	44ce <__vfprintf+0xa0a>
    44ae:	68a3      	ldr	r3, [r4, #8]
    44b0:	3b01      	subs	r3, #1
    44b2:	2b00      	cmp	r3, #0
    44b4:	60a3      	str	r3, [r4, #8]
    44b6:	db05      	blt.n	44c4 <__vfprintf+0xa00>
    44b8:	6823      	ldr	r3, [r4, #0]
    44ba:	1c5a      	adds	r2, r3, #1
    44bc:	6022      	str	r2, [r4, #0]
    44be:	f883 e000 	strb.w	lr, [r3]
    44c2:	e7e5      	b.n	4490 <__vfprintf+0x9cc>
    44c4:	4670      	mov	r0, lr
    44c6:	4621      	mov	r1, r4
    44c8:	f000 fadc 	bl	4a84 <__flsbuf>
    44cc:	e7e0      	b.n	4490 <__vfprintf+0x9cc>
    44ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    44d0:	469a      	mov	sl, r3
    44d2:	2a00      	cmp	r2, #0
    44d4:	d135      	bne.n	4542 <__vfprintf+0xa7e>
    44d6:	f417 7f00 	tst.w	r7, #512	; 0x200
    44da:	bf14      	ite	ne
    44dc:	2730      	movne	r7, #48	; 0x30
    44de:	2720      	moveq	r7, #32
    44e0:	2000      	movs	r0, #0
    44e2:	2100      	movs	r1, #0
    44e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
    44e8:	9906      	ldr	r1, [sp, #24]
    44ea:	f10b 32ff 	add.w	r2, fp, #4294967295
    44ee:	1a51      	subs	r1, r2, r1
    44f0:	2900      	cmp	r1, #0
    44f2:	db20      	blt.n	4536 <__vfprintf+0xa72>
    44f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    44f8:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    44fc:	18c0      	adds	r0, r0, r3
    44fe:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
    4502:	4540      	cmp	r0, r8
    4504:	eb71 0209 	sbcs.w	r2, r1, r9
    4508:	da0f      	bge.n	452a <__vfprintf+0xa66>
    450a:	68a2      	ldr	r2, [r4, #8]
    450c:	3a01      	subs	r2, #1
    450e:	2a00      	cmp	r2, #0
    4510:	60a2      	str	r2, [r4, #8]
    4512:	db04      	blt.n	451e <__vfprintf+0xa5a>
    4514:	6822      	ldr	r2, [r4, #0]
    4516:	1c51      	adds	r1, r2, #1
    4518:	6021      	str	r1, [r4, #0]
    451a:	7017      	strb	r7, [r2, #0]
    451c:	e005      	b.n	452a <__vfprintf+0xa66>
    451e:	4638      	mov	r0, r7
    4520:	4621      	mov	r1, r4
    4522:	931d      	str	r3, [sp, #116]	; 0x74
    4524:	f000 faae 	bl	4a84 <__flsbuf>
    4528:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    452a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    452e:	3001      	adds	r0, #1
    4530:	f141 0100 	adc.w	r1, r1, #0
    4534:	e7d6      	b.n	44e4 <__vfprintf+0xa20>
    4536:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    453a:	eb03 0a0b 	add.w	sl, r3, fp
    453e:	ebcb 0b02 	rsb	fp, fp, r2
    4542:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4544:	2b00      	cmp	r3, #0
    4546:	d07c      	beq.n	4642 <__vfprintf+0xb7e>
    4548:	2700      	movs	r7, #0
    454a:	42b7      	cmp	r7, r6
    454c:	f280 80d5 	bge.w	46fa <__vfprintf+0xc36>
    4550:	ab24      	add	r3, sp, #144	; 0x90
    4552:	f817 e003 	ldrb.w	lr, [r7, r3]
    4556:	f1be 0f3c 	cmp.w	lr, #60	; 0x3c
    455a:	d007      	beq.n	456c <__vfprintf+0xaa8>
    455c:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
    4560:	d151      	bne.n	4606 <__vfprintf+0xb42>
    4562:	f04f 0800 	mov.w	r8, #0
    4566:	f04f 0900 	mov.w	r9, #0
    456a:	e034      	b.n	45d6 <__vfprintf+0xb12>
    456c:	f04f 0800 	mov.w	r8, #0
    4570:	f04f 0900 	mov.w	r9, #0
    4574:	9a20      	ldr	r2, [sp, #128]	; 0x80
    4576:	eb0a 0308 	add.w	r3, sl, r8
    457a:	3a01      	subs	r2, #1
    457c:	2a00      	cmp	r2, #0
    457e:	9220      	str	r2, [sp, #128]	; 0x80
    4580:	db5c      	blt.n	463c <__vfprintf+0xb78>
    4582:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4586:	eb18 020a 	adds.w	r2, r8, sl
    458a:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    458e:	4282      	cmp	r2, r0
    4590:	418b      	sbcs	r3, r1
    4592:	da0e      	bge.n	45b2 <__vfprintf+0xaee>
    4594:	68a3      	ldr	r3, [r4, #8]
    4596:	3b01      	subs	r3, #1
    4598:	2b00      	cmp	r3, #0
    459a:	60a3      	str	r3, [r4, #8]
    459c:	db05      	blt.n	45aa <__vfprintf+0xae6>
    459e:	6823      	ldr	r3, [r4, #0]
    45a0:	1c5a      	adds	r2, r3, #1
    45a2:	6022      	str	r2, [r4, #0]
    45a4:	2230      	movs	r2, #48	; 0x30
    45a6:	701a      	strb	r2, [r3, #0]
    45a8:	e003      	b.n	45b2 <__vfprintf+0xaee>
    45aa:	2030      	movs	r0, #48	; 0x30
    45ac:	4621      	mov	r1, r4
    45ae:	f000 fa69 	bl	4a84 <__flsbuf>
    45b2:	f118 0801 	adds.w	r8, r8, #1
    45b6:	f149 0900 	adc.w	r9, r9, #0
    45ba:	e7db      	b.n	4574 <__vfprintf+0xab0>
    45bc:	eb18 020a 	adds.w	r2, r8, sl
    45c0:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    45c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    45c8:	4282      	cmp	r2, r0
    45ca:	418b      	sbcs	r3, r1
    45cc:	db0b      	blt.n	45e6 <__vfprintf+0xb22>
    45ce:	f118 0801 	adds.w	r8, r8, #1
    45d2:	f149 0900 	adc.w	r9, r9, #0
    45d6:	9a21      	ldr	r2, [sp, #132]	; 0x84
    45d8:	eb0a 0308 	add.w	r3, sl, r8
    45dc:	3a01      	subs	r2, #1
    45de:	2a00      	cmp	r2, #0
    45e0:	9221      	str	r2, [sp, #132]	; 0x84
    45e2:	daeb      	bge.n	45bc <__vfprintf+0xaf8>
    45e4:	e02a      	b.n	463c <__vfprintf+0xb78>
    45e6:	68a3      	ldr	r3, [r4, #8]
    45e8:	3b01      	subs	r3, #1
    45ea:	2b00      	cmp	r3, #0
    45ec:	60a3      	str	r3, [r4, #8]
    45ee:	db05      	blt.n	45fc <__vfprintf+0xb38>
    45f0:	6823      	ldr	r3, [r4, #0]
    45f2:	1c5a      	adds	r2, r3, #1
    45f4:	6022      	str	r2, [r4, #0]
    45f6:	2230      	movs	r2, #48	; 0x30
    45f8:	701a      	strb	r2, [r3, #0]
    45fa:	e7e8      	b.n	45ce <__vfprintf+0xb0a>
    45fc:	4621      	mov	r1, r4
    45fe:	2030      	movs	r0, #48	; 0x30
    4600:	f000 fa40 	bl	4a84 <__flsbuf>
    4604:	e7e3      	b.n	45ce <__vfprintf+0xb0a>
    4606:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    460a:	ea4f 79ea 	mov.w	r9, sl, asr #31
    460e:	4582      	cmp	sl, r0
    4610:	eb79 0201 	sbcs.w	r2, r9, r1
    4614:	f10a 0301 	add.w	r3, sl, #1
    4618:	da10      	bge.n	463c <__vfprintf+0xb78>
    461a:	68a2      	ldr	r2, [r4, #8]
    461c:	3a01      	subs	r2, #1
    461e:	2a00      	cmp	r2, #0
    4620:	60a2      	str	r2, [r4, #8]
    4622:	db05      	blt.n	4630 <__vfprintf+0xb6c>
    4624:	6822      	ldr	r2, [r4, #0]
    4626:	1c51      	adds	r1, r2, #1
    4628:	6021      	str	r1, [r4, #0]
    462a:	f882 e000 	strb.w	lr, [r2]
    462e:	e005      	b.n	463c <__vfprintf+0xb78>
    4630:	4670      	mov	r0, lr
    4632:	4621      	mov	r1, r4
    4634:	9306      	str	r3, [sp, #24]
    4636:	f000 fa25 	bl	4a84 <__flsbuf>
    463a:	9b06      	ldr	r3, [sp, #24]
    463c:	3701      	adds	r7, #1
    463e:	469a      	mov	sl, r3
    4640:	e783      	b.n	454a <__vfprintf+0xa86>
    4642:	f04f 0800 	mov.w	r8, #0
    4646:	f04f 0900 	mov.w	r9, #0
    464a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    464c:	eb0a 0708 	add.w	r7, sl, r8
    4650:	3b01      	subs	r3, #1
    4652:	2b00      	cmp	r3, #0
    4654:	931e      	str	r3, [sp, #120]	; 0x78
    4656:	db1c      	blt.n	4692 <__vfprintf+0xbce>
    4658:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    465c:	eb18 020a 	adds.w	r2, r8, sl
    4660:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    4664:	4282      	cmp	r2, r0
    4666:	418b      	sbcs	r3, r1
    4668:	da0e      	bge.n	4688 <__vfprintf+0xbc4>
    466a:	68a3      	ldr	r3, [r4, #8]
    466c:	3b01      	subs	r3, #1
    466e:	2b00      	cmp	r3, #0
    4670:	60a3      	str	r3, [r4, #8]
    4672:	db05      	blt.n	4680 <__vfprintf+0xbbc>
    4674:	6823      	ldr	r3, [r4, #0]
    4676:	1c5a      	adds	r2, r3, #1
    4678:	6022      	str	r2, [r4, #0]
    467a:	2230      	movs	r2, #48	; 0x30
    467c:	701a      	strb	r2, [r3, #0]
    467e:	e003      	b.n	4688 <__vfprintf+0xbc4>
    4680:	2030      	movs	r0, #48	; 0x30
    4682:	4621      	mov	r1, r4
    4684:	f000 f9fe 	bl	4a84 <__flsbuf>
    4688:	f118 0801 	adds.w	r8, r8, #1
    468c:	f149 0900 	adc.w	r9, r9, #0
    4690:	e7db      	b.n	464a <__vfprintf+0xb86>
    4692:	ab2c      	add	r3, sp, #176	; 0xb0
    4694:	eb03 0a06 	add.w	sl, r3, r6
    4698:	f1aa 0a21 	sub.w	sl, sl, #33	; 0x21
    469c:	f04f 0800 	mov.w	r8, #0
    46a0:	f04f 0900 	mov.w	r9, #0
    46a4:	ebc8 0306 	rsb	r3, r8, r6
    46a8:	2b00      	cmp	r3, #0
    46aa:	dd20      	ble.n	46ee <__vfprintf+0xc2a>
    46ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    46b0:	eb18 0207 	adds.w	r2, r8, r7
    46b4:	eb49 73e7 	adc.w	r3, r9, r7, asr #31
    46b8:	4282      	cmp	r2, r0
    46ba:	418b      	sbcs	r3, r1
    46bc:	da10      	bge.n	46e0 <__vfprintf+0xc1c>
    46be:	68a3      	ldr	r3, [r4, #8]
    46c0:	3b01      	subs	r3, #1
    46c2:	2b00      	cmp	r3, #0
    46c4:	60a3      	str	r3, [r4, #8]
    46c6:	db06      	blt.n	46d6 <__vfprintf+0xc12>
    46c8:	6823      	ldr	r3, [r4, #0]
    46ca:	1c5a      	adds	r2, r3, #1
    46cc:	6022      	str	r2, [r4, #0]
    46ce:	f89a 2000 	ldrb.w	r2, [sl]
    46d2:	701a      	strb	r2, [r3, #0]
    46d4:	e004      	b.n	46e0 <__vfprintf+0xc1c>
    46d6:	f89a 0000 	ldrb.w	r0, [sl]
    46da:	4621      	mov	r1, r4
    46dc:	f000 f9d2 	bl	4a84 <__flsbuf>
    46e0:	f118 0801 	adds.w	r8, r8, #1
    46e4:	f10a 3aff 	add.w	sl, sl, #4294967295
    46e8:	f149 0900 	adc.w	r9, r9, #0
    46ec:	e7da      	b.n	46a4 <__vfprintf+0xbe0>
    46ee:	2e00      	cmp	r6, #0
    46f0:	bfac      	ite	ge
    46f2:	eb07 0a06 	addge.w	sl, r7, r6
    46f6:	f107 0a00 	addlt.w	sl, r7, #0
    46fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    46fc:	b32b      	cbz	r3, 474a <__vfprintf+0xc86>
    46fe:	2600      	movs	r6, #0
    4700:	2700      	movs	r7, #0
    4702:	43f3      	mvns	r3, r6
    4704:	eb13 0f0b 	cmn.w	r3, fp
    4708:	d41b      	bmi.n	4742 <__vfprintf+0xc7e>
    470a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    470e:	eb16 020a 	adds.w	r2, r6, sl
    4712:	eb47 73ea 	adc.w	r3, r7, sl, asr #31
    4716:	4282      	cmp	r2, r0
    4718:	418b      	sbcs	r3, r1
    471a:	da0e      	bge.n	473a <__vfprintf+0xc76>
    471c:	68a3      	ldr	r3, [r4, #8]
    471e:	3b01      	subs	r3, #1
    4720:	2b00      	cmp	r3, #0
    4722:	60a3      	str	r3, [r4, #8]
    4724:	db05      	blt.n	4732 <__vfprintf+0xc6e>
    4726:	6823      	ldr	r3, [r4, #0]
    4728:	1c5a      	adds	r2, r3, #1
    472a:	6022      	str	r2, [r4, #0]
    472c:	2220      	movs	r2, #32
    472e:	701a      	strb	r2, [r3, #0]
    4730:	e003      	b.n	473a <__vfprintf+0xc76>
    4732:	2020      	movs	r0, #32
    4734:	4621      	mov	r1, r4
    4736:	f000 f9a5 	bl	4a84 <__flsbuf>
    473a:	3601      	adds	r6, #1
    473c:	f147 0700 	adc.w	r7, r7, #0
    4740:	e7df      	b.n	4702 <__vfprintf+0xc3e>
    4742:	f1bb 0f00 	cmp.w	fp, #0
    4746:	bfa8      	it	ge
    4748:	44da      	addge	sl, fp
    474a:	9b05      	ldr	r3, [sp, #20]
    474c:	4453      	add	r3, sl
    474e:	9305      	str	r3, [sp, #20]
    4750:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    4754:	9e05      	ldr	r6, [sp, #20]
    4756:	9605      	str	r6, [sp, #20]
    4758:	462b      	mov	r3, r5
    475a:	f7ff b9be 	b.w	3ada <__vfprintf+0x16>
    475e:	9805      	ldr	r0, [sp, #20]
    4760:	b02d      	add	sp, #180	; 0xb4
    4762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4766:	bf00      	nop

00004768 <ch_val>:
    4768:	4b0a      	ldr	r3, [pc, #40]	; (4794 <ch_val+0x2c>)
    476a:	4403      	add	r3, r0
    476c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
    4770:	069a      	lsls	r2, r3, #26
    4772:	d501      	bpl.n	4778 <ch_val+0x10>
    4774:	3830      	subs	r0, #48	; 0x30
    4776:	e008      	b.n	478a <ch_val+0x22>
    4778:	071a      	lsls	r2, r3, #28
    477a:	d501      	bpl.n	4780 <ch_val+0x18>
    477c:	3857      	subs	r0, #87	; 0x57
    477e:	e004      	b.n	478a <ch_val+0x22>
    4780:	06db      	lsls	r3, r3, #27
    4782:	bf4c      	ite	mi
    4784:	3837      	submi	r0, #55	; 0x37
    4786:	f04f 30ff 	movpl.w	r0, #4294967295
    478a:	4288      	cmp	r0, r1
    478c:	bfa8      	it	ge
    478e:	f04f 30ff 	movge.w	r0, #4294967295
    4792:	4770      	bx	lr
    4794:	0000633c 	.word	0x0000633c

00004798 <_strtoul>:
    4798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    479c:	4680      	mov	r8, r0
    479e:	4689      	mov	r9, r1
    47a0:	4616      	mov	r6, r2
    47a2:	4603      	mov	r3, r0
    47a4:	461d      	mov	r5, r3
    47a6:	f815 0b01 	ldrb.w	r0, [r5], #1
    47aa:	b1d0      	cbz	r0, 47e2 <_strtoul+0x4a>
    47ac:	4a27      	ldr	r2, [pc, #156]	; (484c <_strtoul+0xb4>)
    47ae:	4402      	add	r2, r0
    47b0:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
    47b4:	07d2      	lsls	r2, r2, #31
    47b6:	d501      	bpl.n	47bc <_strtoul+0x24>
    47b8:	462b      	mov	r3, r5
    47ba:	e7f3      	b.n	47a4 <_strtoul+0xc>
    47bc:	2830      	cmp	r0, #48	; 0x30
    47be:	d110      	bne.n	47e2 <_strtoul+0x4a>
    47c0:	7858      	ldrb	r0, [r3, #1]
    47c2:	1c9d      	adds	r5, r3, #2
    47c4:	f000 02df 	and.w	r2, r0, #223	; 0xdf
    47c8:	2a58      	cmp	r2, #88	; 0x58
    47ca:	d106      	bne.n	47da <_strtoul+0x42>
    47cc:	f036 0710 	bics.w	r7, r6, #16
    47d0:	d13a      	bne.n	4848 <_strtoul+0xb0>
    47d2:	1cdd      	adds	r5, r3, #3
    47d4:	7898      	ldrb	r0, [r3, #2]
    47d6:	2610      	movs	r6, #16
    47d8:	e008      	b.n	47ec <_strtoul+0x54>
    47da:	2701      	movs	r7, #1
    47dc:	b936      	cbnz	r6, 47ec <_strtoul+0x54>
    47de:	2608      	movs	r6, #8
    47e0:	e004      	b.n	47ec <_strtoul+0x54>
    47e2:	b10e      	cbz	r6, 47e8 <_strtoul+0x50>
    47e4:	2700      	movs	r7, #0
    47e6:	e001      	b.n	47ec <_strtoul+0x54>
    47e8:	4637      	mov	r7, r6
    47ea:	260a      	movs	r6, #10
    47ec:	2400      	movs	r4, #0
    47ee:	46a2      	mov	sl, r4
    47f0:	46a3      	mov	fp, r4
    47f2:	4631      	mov	r1, r6
    47f4:	f7ff ffb8 	bl	4768 <ch_val>
    47f8:	2800      	cmp	r0, #0
    47fa:	db0e      	blt.n	481a <_strtoul+0x82>
    47fc:	fb06 0004 	mla	r0, r6, r4, r0
    4800:	0c03      	lsrs	r3, r0, #16
    4802:	fb06 3a0a 	mla	sl, r6, sl, r3
    4806:	f5ba 3f80 	cmp.w	sl, #65536	; 0x10000
    480a:	b284      	uxth	r4, r0
    480c:	bf28      	it	cs
    480e:	f04f 0b01 	movcs.w	fp, #1
    4812:	f815 0b01 	ldrb.w	r0, [r5], #1
    4816:	2701      	movs	r7, #1
    4818:	e7eb      	b.n	47f2 <_strtoul+0x5a>
    481a:	f1b9 0f00 	cmp.w	r9, #0
    481e:	d005      	beq.n	482c <_strtoul+0x94>
    4820:	b10f      	cbz	r7, 4826 <_strtoul+0x8e>
    4822:	3d01      	subs	r5, #1
    4824:	e000      	b.n	4828 <_strtoul+0x90>
    4826:	4645      	mov	r5, r8
    4828:	f8c9 5000 	str.w	r5, [r9]
    482c:	f1bb 0f00 	cmp.w	fp, #0
    4830:	d006      	beq.n	4840 <_strtoul+0xa8>
    4832:	4b07      	ldr	r3, [pc, #28]	; (4850 <_strtoul+0xb8>)
    4834:	2222      	movs	r2, #34	; 0x22
    4836:	601a      	str	r2, [r3, #0]
    4838:	f04f 30ff 	mov.w	r0, #4294967295
    483c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4840:	ea44 400a 	orr.w	r0, r4, sl, lsl #16
    4844:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4848:	2701      	movs	r7, #1
    484a:	e7cf      	b.n	47ec <_strtoul+0x54>
    484c:	0000633c 	.word	0x0000633c
    4850:	10000894 	.word	0x10000894

00004854 <strtol>:
    4854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4856:	460e      	mov	r6, r1
    4858:	4607      	mov	r7, r0
    485a:	4601      	mov	r1, r0
    485c:	460d      	mov	r5, r1
    485e:	f815 3b01 	ldrb.w	r3, [r5], #1
    4862:	b17b      	cbz	r3, 4884 <strtol+0x30>
    4864:	4817      	ldr	r0, [pc, #92]	; (48c4 <strtol+0x70>)
    4866:	4418      	add	r0, r3
    4868:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
    486c:	f014 0401 	ands.w	r4, r4, #1
    4870:	d001      	beq.n	4876 <strtol+0x22>
    4872:	4629      	mov	r1, r5
    4874:	e7f2      	b.n	485c <strtol+0x8>
    4876:	2b2b      	cmp	r3, #43	; 0x2b
    4878:	d006      	beq.n	4888 <strtol+0x34>
    487a:	2b2d      	cmp	r3, #45	; 0x2d
    487c:	d102      	bne.n	4884 <strtol+0x30>
    487e:	f44f 7400 	mov.w	r4, #512	; 0x200
    4882:	e001      	b.n	4888 <strtol+0x34>
    4884:	460d      	mov	r5, r1
    4886:	2400      	movs	r4, #0
    4888:	4628      	mov	r0, r5
    488a:	a901      	add	r1, sp, #4
    488c:	f7ff ff84 	bl	4798 <_strtoul>
    4890:	b126      	cbz	r6, 489c <strtol+0x48>
    4892:	9b01      	ldr	r3, [sp, #4]
    4894:	42ab      	cmp	r3, r5
    4896:	bf08      	it	eq
    4898:	463b      	moveq	r3, r7
    489a:	6033      	str	r3, [r6, #0]
    489c:	05a3      	lsls	r3, r4, #22
    489e:	d508      	bpl.n	48b2 <strtol+0x5e>
    48a0:	4240      	negs	r0, r0
    48a2:	2800      	cmp	r0, #0
    48a4:	dd0c      	ble.n	48c0 <strtol+0x6c>
    48a6:	4b08      	ldr	r3, [pc, #32]	; (48c8 <strtol+0x74>)
    48a8:	2222      	movs	r2, #34	; 0x22
    48aa:	601a      	str	r2, [r3, #0]
    48ac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    48b0:	e006      	b.n	48c0 <strtol+0x6c>
    48b2:	2800      	cmp	r0, #0
    48b4:	bfbf      	itttt	lt
    48b6:	4b04      	ldrlt	r3, [pc, #16]	; (48c8 <strtol+0x74>)
    48b8:	2222      	movlt	r2, #34	; 0x22
    48ba:	601a      	strlt	r2, [r3, #0]
    48bc:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
    48c0:	b003      	add	sp, #12
    48c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48c4:	0000633c 	.word	0x0000633c
    48c8:	10000894 	.word	0x10000894

000048cc <atoi>:
    48cc:	b538      	push	{r3, r4, r5, lr}
    48ce:	4c04      	ldr	r4, [pc, #16]	; (48e0 <atoi+0x14>)
    48d0:	2100      	movs	r1, #0
    48d2:	6825      	ldr	r5, [r4, #0]
    48d4:	220a      	movs	r2, #10
    48d6:	f7ff ffbd 	bl	4854 <strtol>
    48da:	6025      	str	r5, [r4, #0]
    48dc:	bd38      	pop	{r3, r4, r5, pc}
    48de:	bf00      	nop
    48e0:	10000894 	.word	0x10000894

000048e4 <setvbuf>:
    48e4:	b570      	push	{r4, r5, r6, lr}
    48e6:	68c4      	ldr	r4, [r0, #12]
    48e8:	07a5      	lsls	r5, r4, #30
    48ea:	d017      	beq.n	491c <setvbuf+0x38>
    48ec:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    48f0:	d009      	beq.n	4906 <setvbuf+0x22>
    48f2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    48f6:	d003      	beq.n	4900 <setvbuf+0x1c>
    48f8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    48fc:	d10e      	bne.n	491c <setvbuf+0x38>
    48fe:	e002      	b.n	4906 <setvbuf+0x22>
    4900:	6a41      	ldr	r1, [r0, #36]	; 0x24
    4902:	2301      	movs	r3, #1
    4904:	e003      	b.n	490e <setvbuf+0x2a>
    4906:	4d06      	ldr	r5, [pc, #24]	; (4920 <setvbuf+0x3c>)
    4908:	1e5e      	subs	r6, r3, #1
    490a:	42ae      	cmp	r6, r5
    490c:	d806      	bhi.n	491c <setvbuf+0x38>
    490e:	4314      	orrs	r4, r2
    4910:	6101      	str	r1, [r0, #16]
    4912:	6001      	str	r1, [r0, #0]
    4914:	61c3      	str	r3, [r0, #28]
    4916:	60c4      	str	r4, [r0, #12]
    4918:	2000      	movs	r0, #0
    491a:	bd70      	pop	{r4, r5, r6, pc}
    491c:	2001      	movs	r0, #1
    491e:	bd70      	pop	{r4, r5, r6, pc}
    4920:	00fffffe 	.word	0x00fffffe

00004924 <strchr>:
    4924:	b510      	push	{r4, lr}
    4926:	4603      	mov	r3, r0
    4928:	f810 2b01 	ldrb.w	r2, [r0], #1
    492c:	b2cc      	uxtb	r4, r1
    492e:	42a2      	cmp	r2, r4
    4930:	d003      	beq.n	493a <strchr+0x16>
    4932:	2a00      	cmp	r2, #0
    4934:	d1f7      	bne.n	4926 <strchr+0x2>
    4936:	4610      	mov	r0, r2
    4938:	bd10      	pop	{r4, pc}
    493a:	4618      	mov	r0, r3
    493c:	bd10      	pop	{r4, pc}

0000493e <strcpy>:
    493e:	ea40 0301 	orr.w	r3, r0, r1
    4942:	079b      	lsls	r3, r3, #30
    4944:	b510      	push	{r4, lr}
    4946:	d113      	bne.n	4970 <strcpy+0x32>
    4948:	4602      	mov	r2, r0
    494a:	3904      	subs	r1, #4
    494c:	f851 3f04 	ldr.w	r3, [r1, #4]!
    4950:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
    4954:	ea24 0403 	bic.w	r4, r4, r3
    4958:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    495c:	d102      	bne.n	4964 <strcpy+0x26>
    495e:	f842 3b04 	str.w	r3, [r2], #4
    4962:	e7f3      	b.n	494c <strcpy+0xe>
    4964:	b2d9      	uxtb	r1, r3
    4966:	f802 1b01 	strb.w	r1, [r2], #1
    496a:	b141      	cbz	r1, 497e <strcpy+0x40>
    496c:	121b      	asrs	r3, r3, #8
    496e:	e7f9      	b.n	4964 <strcpy+0x26>
    4970:	1e42      	subs	r2, r0, #1
    4972:	f811 3b01 	ldrb.w	r3, [r1], #1
    4976:	f802 3f01 	strb.w	r3, [r2, #1]!
    497a:	2b00      	cmp	r3, #0
    497c:	d1f9      	bne.n	4972 <strcpy+0x34>
    497e:	bd10      	pop	{r4, pc}

00004980 <strlen>:
    4980:	b510      	push	{r4, lr}
    4982:	1c42      	adds	r2, r0, #1
    4984:	0783      	lsls	r3, r0, #30
    4986:	d005      	beq.n	4994 <strlen+0x14>
    4988:	f810 3b01 	ldrb.w	r3, [r0], #1
    498c:	2b00      	cmp	r3, #0
    498e:	d1f9      	bne.n	4984 <strlen+0x4>
    4990:	1a80      	subs	r0, r0, r2
    4992:	bd10      	pop	{r4, pc}
    4994:	4603      	mov	r3, r0
    4996:	f850 1b04 	ldr.w	r1, [r0], #4
    499a:	f1a1 3401 	sub.w	r4, r1, #16843009	; 0x1010101
    499e:	ea24 0401 	bic.w	r4, r4, r1
    49a2:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    49a6:	d0f5      	beq.n	4994 <strlen+0x14>
    49a8:	f011 0fff 	tst.w	r1, #255	; 0xff
    49ac:	d00a      	beq.n	49c4 <strlen+0x44>
    49ae:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
    49b2:	d005      	beq.n	49c0 <strlen+0x40>
    49b4:	f411 0f7f 	tst.w	r1, #16711680	; 0xff0000
    49b8:	bf14      	ite	ne
    49ba:	4603      	movne	r3, r0
    49bc:	3303      	addeq	r3, #3
    49be:	e002      	b.n	49c6 <strlen+0x46>
    49c0:	3302      	adds	r3, #2
    49c2:	e000      	b.n	49c6 <strlen+0x46>
    49c4:	3301      	adds	r3, #1
    49c6:	1a98      	subs	r0, r3, r2
    49c8:	bd10      	pop	{r4, pc}

000049ca <strncpy>:
    49ca:	ea40 0301 	orr.w	r3, r0, r1
    49ce:	b570      	push	{r4, r5, r6, lr}
    49d0:	079d      	lsls	r5, r3, #30
    49d2:	d111      	bne.n	49f8 <strncpy+0x2e>
    49d4:	460e      	mov	r6, r1
    49d6:	4603      	mov	r3, r0
    49d8:	2a03      	cmp	r2, #3
    49da:	4631      	mov	r1, r6
    49dc:	d90d      	bls.n	49fa <strncpy+0x30>
    49de:	f856 5b04 	ldr.w	r5, [r6], #4
    49e2:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    49e6:	ea24 0405 	bic.w	r4, r4, r5
    49ea:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    49ee:	d104      	bne.n	49fa <strncpy+0x30>
    49f0:	f843 5b04 	str.w	r5, [r3], #4
    49f4:	3a04      	subs	r2, #4
    49f6:	e7ef      	b.n	49d8 <strncpy+0xe>
    49f8:	4603      	mov	r3, r0
    49fa:	3a01      	subs	r2, #1
    49fc:	1c54      	adds	r4, r2, #1
    49fe:	d00f      	beq.n	4a20 <strncpy+0x56>
    4a00:	f811 4b01 	ldrb.w	r4, [r1], #1
    4a04:	1e55      	subs	r5, r2, #1
    4a06:	f803 4b01 	strb.w	r4, [r3], #1
    4a0a:	b93c      	cbnz	r4, 4a1c <strncpy+0x52>
    4a0c:	441a      	add	r2, r3
    4a0e:	4293      	cmp	r3, r2
    4a10:	d003      	beq.n	4a1a <strncpy+0x50>
    4a12:	2100      	movs	r1, #0
    4a14:	f803 1b01 	strb.w	r1, [r3], #1
    4a18:	e7f9      	b.n	4a0e <strncpy+0x44>
    4a1a:	bd70      	pop	{r4, r5, r6, pc}
    4a1c:	462a      	mov	r2, r5
    4a1e:	e7ed      	b.n	49fc <strncpy+0x32>
    4a20:	bd70      	pop	{r4, r5, r6, pc}

00004a22 <strstr>:
    4a22:	b510      	push	{r4, lr}
    4a24:	2300      	movs	r3, #0
    4a26:	5cca      	ldrb	r2, [r1, r3]
    4a28:	b14a      	cbz	r2, 4a3e <strstr+0x1c>
    4a2a:	5cc4      	ldrb	r4, [r0, r3]
    4a2c:	4294      	cmp	r4, r2
    4a2e:	d101      	bne.n	4a34 <strstr+0x12>
    4a30:	3301      	adds	r3, #1
    4a32:	e7f8      	b.n	4a26 <strstr+0x4>
    4a34:	f810 3b01 	ldrb.w	r3, [r0], #1
    4a38:	2b00      	cmp	r3, #0
    4a3a:	d1f3      	bne.n	4a24 <strstr+0x2>
    4a3c:	4618      	mov	r0, r3
    4a3e:	bd10      	pop	{r4, pc}

00004a40 <_deferredlazyseek>:
    4a40:	68c3      	ldr	r3, [r0, #12]
    4a42:	b510      	push	{r4, lr}
    4a44:	f023 0320 	bic.w	r3, r3, #32
    4a48:	60c3      	str	r3, [r0, #12]
    4a4a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4a4c:	6982      	ldr	r2, [r0, #24]
    4a4e:	685b      	ldr	r3, [r3, #4]
    4a50:	4604      	mov	r4, r0
    4a52:	429a      	cmp	r2, r3
    4a54:	d00f      	beq.n	4a76 <_deferredlazyseek+0x36>
    4a56:	f000 f8eb 	bl	4c30 <_fflush>
    4a5a:	68e3      	ldr	r3, [r4, #12]
    4a5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    4a5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    4a62:	f023 0310 	bic.w	r3, r3, #16
    4a66:	f043 0310 	orr.w	r3, r3, #16
    4a6a:	60e3      	str	r3, [r4, #12]
    4a6c:	6853      	ldr	r3, [r2, #4]
    4a6e:	61a3      	str	r3, [r4, #24]
    4a70:	6923      	ldr	r3, [r4, #16]
    4a72:	6093      	str	r3, [r2, #8]
    4a74:	6023      	str	r3, [r4, #0]
    4a76:	68e3      	ldr	r3, [r4, #12]
    4a78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    4a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    4a80:	60e3      	str	r3, [r4, #12]
    4a82:	bd10      	pop	{r4, pc}

00004a84 <__flsbuf>:
    4a84:	68cb      	ldr	r3, [r1, #12]
    4a86:	b570      	push	{r4, r5, r6, lr}
    4a88:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
    4a8c:	069b      	lsls	r3, r3, #26
    4a8e:	4605      	mov	r5, r0
    4a90:	460c      	mov	r4, r1
    4a92:	60ca      	str	r2, [r1, #12]
    4a94:	d502      	bpl.n	4a9c <__flsbuf+0x18>
    4a96:	4608      	mov	r0, r1
    4a98:	f7ff ffd2 	bl	4a40 <_deferredlazyseek>
    4a9c:	68a1      	ldr	r1, [r4, #8]
    4a9e:	68e3      	ldr	r3, [r4, #12]
    4aa0:	1c4e      	adds	r6, r1, #1
    4aa2:	da0d      	bge.n	4ac0 <__flsbuf+0x3c>
    4aa4:	0598      	lsls	r0, r3, #22
    4aa6:	d40b      	bmi.n	4ac0 <__flsbuf+0x3c>
    4aa8:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
    4aac:	60e3      	str	r3, [r4, #12]
    4aae:	f06f 0201 	mvn.w	r2, #1
    4ab2:	6823      	ldr	r3, [r4, #0]
    4ab4:	1a52      	subs	r2, r2, r1
    4ab6:	60a2      	str	r2, [r4, #8]
    4ab8:	1c5a      	adds	r2, r3, #1
    4aba:	6022      	str	r2, [r4, #0]
    4abc:	701d      	strb	r5, [r3, #0]
    4abe:	e056      	b.n	4b6e <__flsbuf+0xea>
    4ac0:	f241 028a 	movw	r2, #4234	; 0x108a
    4ac4:	401a      	ands	r2, r3
    4ac6:	2a02      	cmp	r2, #2
    4ac8:	461e      	mov	r6, r3
    4aca:	d005      	beq.n	4ad8 <__flsbuf+0x54>
    4acc:	2200      	movs	r2, #0
    4ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4ad2:	60a2      	str	r2, [r4, #8]
    4ad4:	60e3      	str	r3, [r4, #12]
    4ad6:	e052      	b.n	4b7e <__flsbuf+0xfa>
    4ad8:	f24a 0110 	movw	r1, #40976	; 0xa010
    4adc:	4019      	ands	r1, r3
    4ade:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    4ae2:	d10a      	bne.n	4afa <__flsbuf+0x76>
    4ae4:	2100      	movs	r1, #0
    4ae6:	4620      	mov	r0, r4
    4ae8:	f000 fa36 	bl	4f58 <fseek>
    4aec:	68e3      	ldr	r3, [r4, #12]
    4aee:	0699      	lsls	r1, r3, #26
    4af0:	d502      	bpl.n	4af8 <__flsbuf+0x74>
    4af2:	4620      	mov	r0, r4
    4af4:	f7ff ffa4 	bl	4a40 <_deferredlazyseek>
    4af8:	68e6      	ldr	r6, [r4, #12]
    4afa:	f446 3390 	orr.w	r3, r6, #73728	; 0x12000
    4afe:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    4b02:	60e3      	str	r3, [r4, #12]
    4b04:	d11c      	bne.n	4b40 <__flsbuf+0xbc>
    4b06:	6960      	ldr	r0, [r4, #20]
    4b08:	f000 ffb4 	bl	5a74 <__sys_istty>
    4b0c:	b150      	cbz	r0, 4b24 <__flsbuf+0xa0>
    4b0e:	0572      	lsls	r2, r6, #21
    4b10:	d508      	bpl.n	4b24 <__flsbuf+0xa0>
    4b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4b14:	6123      	str	r3, [r4, #16]
    4b16:	6023      	str	r3, [r4, #0]
    4b18:	2301      	movs	r3, #1
    4b1a:	61e3      	str	r3, [r4, #28]
    4b1c:	f446 3392 	orr.w	r3, r6, #74752	; 0x12400
    4b20:	60e3      	str	r3, [r4, #12]
    4b22:	e00d      	b.n	4b40 <__flsbuf+0xbc>
    4b24:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4b28:	f000 f9b8 	bl	4e9c <_Csys_alloc>
    4b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4b30:	68e2      	ldr	r2, [r4, #12]
    4b32:	61e3      	str	r3, [r4, #28]
    4b34:	f446 3394 	orr.w	r3, r6, #75776	; 0x12800
    4b38:	431a      	orrs	r2, r3
    4b3a:	6120      	str	r0, [r4, #16]
    4b3c:	6020      	str	r0, [r4, #0]
    4b3e:	60e2      	str	r2, [r4, #12]
    4b40:	f413 6f10 	tst.w	r3, #2304	; 0x900
    4b44:	6821      	ldr	r1, [r4, #0]
    4b46:	6926      	ldr	r6, [r4, #16]
    4b48:	d01c      	beq.n	4b84 <__flsbuf+0x100>
    4b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4b4c:	689b      	ldr	r3, [r3, #8]
    4b4e:	428b      	cmp	r3, r1
    4b50:	bf2c      	ite	cs
    4b52:	ebc6 0103 	rsbcs	r1, r6, r3
    4b56:	ebc6 0101 	rsbcc	r1, r6, r1
    4b5a:	b951      	cbnz	r1, 4b72 <__flsbuf+0xee>
    4b5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4b5e:	1c72      	adds	r2, r6, #1
    4b60:	609a      	str	r2, [r3, #8]
    4b62:	6022      	str	r2, [r4, #0]
    4b64:	69e2      	ldr	r2, [r4, #28]
    4b66:	1e51      	subs	r1, r2, #1
    4b68:	60a1      	str	r1, [r4, #8]
    4b6a:	60da      	str	r2, [r3, #12]
    4b6c:	7035      	strb	r5, [r6, #0]
    4b6e:	b2e8      	uxtb	r0, r5
    4b70:	bd70      	pop	{r4, r5, r6, pc}
    4b72:	4630      	mov	r0, r6
    4b74:	4622      	mov	r2, r4
    4b76:	f000 f8db 	bl	4d30 <_Cwritebuf>
    4b7a:	2800      	cmp	r0, #0
    4b7c:	d0ee      	beq.n	4b5c <__flsbuf+0xd8>
    4b7e:	f04f 30ff 	mov.w	r0, #4294967295
    4b82:	bd70      	pop	{r4, r5, r6, pc}
    4b84:	1c4a      	adds	r2, r1, #1
    4b86:	b2ed      	uxtb	r5, r5
    4b88:	6022      	str	r2, [r4, #0]
    4b8a:	700d      	strb	r5, [r1, #0]
    4b8c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4b8e:	6821      	ldr	r1, [r4, #0]
    4b90:	6882      	ldr	r2, [r0, #8]
    4b92:	428a      	cmp	r2, r1
    4b94:	bf2c      	ite	cs
    4b96:	ebc6 0102 	rsbcs	r1, r6, r2
    4b9a:	ebc6 0101 	rsbcc	r1, r6, r1
    4b9e:	69e2      	ldr	r2, [r4, #28]
    4ba0:	055b      	lsls	r3, r3, #21
    4ba2:	60c2      	str	r2, [r0, #12]
    4ba4:	d403      	bmi.n	4bae <__flsbuf+0x12a>
    4ba6:	2d0a      	cmp	r5, #10
    4ba8:	d001      	beq.n	4bae <__flsbuf+0x12a>
    4baa:	4291      	cmp	r1, r2
    4bac:	db09      	blt.n	4bc2 <__flsbuf+0x13e>
    4bae:	2300      	movs	r3, #0
    4bb0:	6086      	str	r6, [r0, #8]
    4bb2:	4622      	mov	r2, r4
    4bb4:	6026      	str	r6, [r4, #0]
    4bb6:	60a3      	str	r3, [r4, #8]
    4bb8:	4630      	mov	r0, r6
    4bba:	f000 f8b9 	bl	4d30 <_Cwritebuf>
    4bbe:	2800      	cmp	r0, #0
    4bc0:	d1dd      	bne.n	4b7e <__flsbuf+0xfa>
    4bc2:	4628      	mov	r0, r5
    4bc4:	bd70      	pop	{r4, r5, r6, pc}

00004bc6 <_fdopen>:
    4bc6:	b570      	push	{r4, r5, r6, lr}
    4bc8:	460d      	mov	r5, r1
    4bca:	4606      	mov	r6, r0
    4bcc:	4610      	mov	r0, r2
    4bce:	4614      	mov	r4, r2
    4bd0:	f000 f974 	bl	4ebc <fclose>
    4bd4:	782b      	ldrb	r3, [r5, #0]
    4bd6:	2b72      	cmp	r3, #114	; 0x72
    4bd8:	d00a      	beq.n	4bf0 <_fdopen+0x2a>
    4bda:	2b77      	cmp	r3, #119	; 0x77
    4bdc:	d005      	beq.n	4bea <_fdopen+0x24>
    4bde:	2b61      	cmp	r3, #97	; 0x61
    4be0:	d123      	bne.n	4c2a <_fdopen+0x64>
    4be2:	2308      	movs	r3, #8
    4be4:	f248 0202 	movw	r2, #32770	; 0x8002
    4be8:	e004      	b.n	4bf4 <_fdopen+0x2e>
    4bea:	2304      	movs	r3, #4
    4bec:	2202      	movs	r2, #2
    4bee:	e001      	b.n	4bf4 <_fdopen+0x2e>
    4bf0:	2300      	movs	r3, #0
    4bf2:	2201      	movs	r2, #1
    4bf4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    4bf8:	292b      	cmp	r1, #43	; 0x2b
    4bfa:	d006      	beq.n	4c0a <_fdopen+0x44>
    4bfc:	2962      	cmp	r1, #98	; 0x62
    4bfe:	d109      	bne.n	4c14 <_fdopen+0x4e>
    4c00:	f042 0204 	orr.w	r2, r2, #4
    4c04:	f043 0301 	orr.w	r3, r3, #1
    4c08:	e7f4      	b.n	4bf4 <_fdopen+0x2e>
    4c0a:	f042 0203 	orr.w	r2, r2, #3
    4c0e:	f043 0302 	orr.w	r3, r3, #2
    4c12:	e7ef      	b.n	4bf4 <_fdopen+0x2e>
    4c14:	071b      	lsls	r3, r3, #28
    4c16:	60e2      	str	r2, [r4, #12]
    4c18:	6166      	str	r6, [r4, #20]
    4c1a:	4620      	mov	r0, r4
    4c1c:	d507      	bpl.n	4c2e <_fdopen+0x68>
    4c1e:	2100      	movs	r1, #0
    4c20:	2202      	movs	r2, #2
    4c22:	f000 f999 	bl	4f58 <fseek>
    4c26:	4620      	mov	r0, r4
    4c28:	bd70      	pop	{r4, r5, r6, pc}
    4c2a:	2000      	movs	r0, #0
    4c2c:	bd70      	pop	{r4, r5, r6, pc}
    4c2e:	bd70      	pop	{r4, r5, r6, pc}

00004c30 <_fflush>:
    4c30:	b538      	push	{r3, r4, r5, lr}
    4c32:	4604      	mov	r4, r0
    4c34:	6a42      	ldr	r2, [r0, #36]	; 0x24
    4c36:	6905      	ldr	r5, [r0, #16]
    4c38:	6803      	ldr	r3, [r0, #0]
    4c3a:	68c0      	ldr	r0, [r0, #12]
    4c3c:	6891      	ldr	r1, [r2, #8]
    4c3e:	f420 2200 	bic.w	r2, r0, #524288	; 0x80000
    4c42:	60e2      	str	r2, [r4, #12]
    4c44:	f000 0282 	and.w	r2, r0, #130	; 0x82
    4c48:	2a02      	cmp	r2, #2
    4c4a:	d002      	beq.n	4c52 <_fflush+0x22>
    4c4c:	f04f 30ff 	mov.w	r0, #4294967295
    4c50:	bd38      	pop	{r3, r4, r5, pc}
    4c52:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
    4c56:	d016      	beq.n	4c86 <_fflush+0x56>
    4c58:	4299      	cmp	r1, r3
    4c5a:	bf38      	it	cc
    4c5c:	4619      	movcc	r1, r3
    4c5e:	42a9      	cmp	r1, r5
    4c60:	d109      	bne.n	4c76 <_fflush+0x46>
    4c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4c64:	2000      	movs	r0, #0
    4c66:	609d      	str	r5, [r3, #8]
    4c68:	68e3      	ldr	r3, [r4, #12]
    4c6a:	6025      	str	r5, [r4, #0]
    4c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4c70:	60a0      	str	r0, [r4, #8]
    4c72:	60e3      	str	r3, [r4, #12]
    4c74:	bd38      	pop	{r3, r4, r5, pc}
    4c76:	4628      	mov	r0, r5
    4c78:	1b49      	subs	r1, r1, r5
    4c7a:	4622      	mov	r2, r4
    4c7c:	f000 f858 	bl	4d30 <_Cwritebuf>
    4c80:	2800      	cmp	r0, #0
    4c82:	d0ee      	beq.n	4c62 <_fflush+0x32>
    4c84:	e7e2      	b.n	4c4c <_fflush+0x1c>
    4c86:	bd38      	pop	{r3, r4, r5, pc}

00004c88 <_frexpl>:
    4c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c8a:	4615      	mov	r5, r2
    4c8c:	2300      	movs	r3, #0
    4c8e:	2200      	movs	r2, #0
    4c90:	4606      	mov	r6, r0
    4c92:	460f      	mov	r7, r1
    4c94:	f000 fe2e 	bl	58f4 <__aeabi_dcmpeq>
    4c98:	b120      	cbz	r0, 4ca4 <_frexpl+0x1c>
    4c9a:	2300      	movs	r3, #0
    4c9c:	602b      	str	r3, [r5, #0]
    4c9e:	2000      	movs	r0, #0
    4ca0:	2100      	movs	r1, #0
    4ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ca4:	f3c7 530a 	ubfx	r3, r7, #20, #11
    4ca8:	4630      	mov	r0, r6
    4caa:	4639      	mov	r1, r7
    4cac:	f2a3 34fe 	subw	r4, r3, #1022	; 0x3fe
    4cb0:	b98b      	cbnz	r3, 4cd6 <_frexpl+0x4e>
    4cb2:	4632      	mov	r2, r6
    4cb4:	f3c7 0313 	ubfx	r3, r7, #0, #20
    4cb8:	0fd7      	lsrs	r7, r2, #31
    4cba:	f403 2600 	and.w	r6, r3, #524288	; 0x80000
    4cbe:	ea47 0343 	orr.w	r3, r7, r3, lsl #1
    4cc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4cc6:	0052      	lsls	r2, r2, #1
    4cc8:	b11e      	cbz	r6, 4cd2 <_frexpl+0x4a>
    4cca:	f363 0113 	bfi	r1, r3, #0, #20
    4cce:	4610      	mov	r0, r2
    4cd0:	e001      	b.n	4cd6 <_frexpl+0x4e>
    4cd2:	3c01      	subs	r4, #1
    4cd4:	e7f0      	b.n	4cb8 <_frexpl+0x30>
    4cd6:	f240 33fe 	movw	r3, #1022	; 0x3fe
    4cda:	602c      	str	r4, [r5, #0]
    4cdc:	f363 511e 	bfi	r1, r3, #20, #11
    4ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004ce4 <_ldexpl>:
    4ce4:	b570      	push	{r4, r5, r6, lr}
    4ce6:	2300      	movs	r3, #0
    4ce8:	4616      	mov	r6, r2
    4cea:	2200      	movs	r2, #0
    4cec:	4604      	mov	r4, r0
    4cee:	460d      	mov	r5, r1
    4cf0:	f000 fe00 	bl	58f4 <__aeabi_dcmpeq>
    4cf4:	b110      	cbz	r0, 4cfc <_ldexpl+0x18>
    4cf6:	2000      	movs	r0, #0
    4cf8:	2100      	movs	r1, #0
    4cfa:	bd70      	pop	{r4, r5, r6, pc}
    4cfc:	f240 73fe 	movw	r3, #2046	; 0x7fe
    4d00:	f3c5 520a 	ubfx	r2, r5, #20, #11
    4d04:	4432      	add	r2, r6
    4d06:	429a      	cmp	r2, r3
    4d08:	4620      	mov	r0, r4
    4d0a:	4629      	mov	r1, r5
    4d0c:	dd06      	ble.n	4d1c <_ldexpl+0x38>
    4d0e:	4b06      	ldr	r3, [pc, #24]	; (4d28 <_ldexpl+0x44>)
    4d10:	2222      	movs	r2, #34	; 0x22
    4d12:	601a      	str	r2, [r3, #0]
    4d14:	4b05      	ldr	r3, [pc, #20]	; (4d2c <_ldexpl+0x48>)
    4d16:	e9d3 0100 	ldrd	r0, r1, [r3]
    4d1a:	bd70      	pop	{r4, r5, r6, pc}
    4d1c:	2a00      	cmp	r2, #0
    4d1e:	ddea      	ble.n	4cf6 <_ldexpl+0x12>
    4d20:	f362 511e 	bfi	r1, r2, #20, #11
    4d24:	bd70      	pop	{r4, r5, r6, pc}
    4d26:	bf00      	nop
    4d28:	10000894 	.word	0x10000894
    4d2c:	00006528 	.word	0x00006528

00004d30 <_Cwritebuf>:
    4d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d34:	68d5      	ldr	r5, [r2, #12]
    4d36:	4680      	mov	r8, r0
    4d38:	02eb      	lsls	r3, r5, #11
    4d3a:	460e      	mov	r6, r1
    4d3c:	4614      	mov	r4, r2
    4d3e:	6957      	ldr	r7, [r2, #20]
    4d40:	d505      	bpl.n	4d4e <_Cwritebuf+0x1e>
    4d42:	4638      	mov	r0, r7
    4d44:	f000 fe93 	bl	5a6e <__sys_flen>
    4d48:	f045 0510 	orr.w	r5, r5, #16
    4d4c:	61a0      	str	r0, [r4, #24]
    4d4e:	4b13      	ldr	r3, [pc, #76]	; (4d9c <_Cwritebuf+0x6c>)
    4d50:	402b      	ands	r3, r5
    4d52:	b153      	cbz	r3, 4d6a <_Cwritebuf+0x3a>
    4d54:	4638      	mov	r0, r7
    4d56:	69a1      	ldr	r1, [r4, #24]
    4d58:	f000 fe92 	bl	5a80 <__sys_seek>
    4d5c:	2800      	cmp	r0, #0
    4d5e:	db14      	blt.n	4d8a <_Cwritebuf+0x5a>
    4d60:	f425 3500 	bic.w	r5, r5, #131072	; 0x20000
    4d64:	f025 0510 	bic.w	r5, r5, #16
    4d68:	60e5      	str	r5, [r4, #12]
    4d6a:	4632      	mov	r2, r6
    4d6c:	4638      	mov	r0, r7
    4d6e:	4641      	mov	r1, r8
    4d70:	f000 fe8c 	bl	5a8c <__sys_write>
    4d74:	1b80      	subs	r0, r0, r6
    4d76:	bf18      	it	ne
    4d78:	f04f 30ff 	movne.w	r0, #4294967295
    4d7c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
    4d80:	1af6      	subs	r6, r6, r3
    4d82:	69a3      	ldr	r3, [r4, #24]
    4d84:	441e      	add	r6, r3
    4d86:	61a6      	str	r6, [r4, #24]
    4d88:	b128      	cbz	r0, 4d96 <_Cwritebuf+0x66>
    4d8a:	68e3      	ldr	r3, [r4, #12]
    4d8c:	f04f 30ff 	mov.w	r0, #4294967295
    4d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4d94:	60e3      	str	r3, [r4, #12]
    4d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d9a:	bf00      	nop
    4d9c:	00020010 	.word	0x00020010

00004da0 <malloc>:
    4da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4da2:	4b31      	ldr	r3, [pc, #196]	; (4e68 <malloc+0xc8>)
    4da4:	1cc5      	adds	r5, r0, #3
    4da6:	681c      	ldr	r4, [r3, #0]
    4da8:	08ad      	lsrs	r5, r5, #2
    4daa:	b198      	cbz	r0, 4dd4 <malloc+0x34>
    4dac:	461f      	mov	r7, r3
    4dae:	2600      	movs	r6, #0
    4db0:	f105 0e0a 	add.w	lr, r5, #10
    4db4:	f105 0c03 	add.w	ip, r5, #3
    4db8:	e005      	b.n	4dc6 <malloc+0x26>
    4dba:	6823      	ldr	r3, [r4, #0]
    4dbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    4dc0:	d014      	beq.n	4dec <malloc+0x4c>
    4dc2:	4626      	mov	r6, r4
    4dc4:	68a4      	ldr	r4, [r4, #8]
    4dc6:	2c00      	cmp	r4, #0
    4dc8:	d1f7      	bne.n	4dba <malloc+0x1a>
    4dca:	300c      	adds	r0, #12
    4dcc:	f000 f97c 	bl	50c8 <_sbrk>
    4dd0:	1c43      	adds	r3, r0, #1
    4dd2:	d110      	bne.n	4df6 <malloc+0x56>
    4dd4:	2000      	movs	r0, #0
    4dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4dd8:	6811      	ldr	r1, [r2, #0]
    4dda:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    4dde:	d115      	bne.n	4e0c <malloc+0x6c>
    4de0:	6851      	ldr	r1, [r2, #4]
    4de2:	440b      	add	r3, r1
    4de4:	3303      	adds	r3, #3
    4de6:	6063      	str	r3, [r4, #4]
    4de8:	6893      	ldr	r3, [r2, #8]
    4dea:	60a3      	str	r3, [r4, #8]
    4dec:	68a2      	ldr	r2, [r4, #8]
    4dee:	6863      	ldr	r3, [r4, #4]
    4df0:	2a00      	cmp	r2, #0
    4df2:	d1f1      	bne.n	4dd8 <malloc+0x38>
    4df4:	e00a      	b.n	4e0c <malloc+0x6c>
    4df6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    4dfa:	e880 0028 	stmia.w	r0, {r3, r5}
    4dfe:	6084      	str	r4, [r0, #8]
    4e00:	b90e      	cbnz	r6, 4e06 <malloc+0x66>
    4e02:	6038      	str	r0, [r7, #0]
    4e04:	e000      	b.n	4e08 <malloc+0x68>
    4e06:	60b0      	str	r0, [r6, #8]
    4e08:	300c      	adds	r0, #12
    4e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e0c:	42ab      	cmp	r3, r5
    4e0e:	db07      	blt.n	4e20 <malloc+0x80>
    4e10:	459c      	cmp	ip, r3
    4e12:	db05      	blt.n	4e20 <malloc+0x80>
    4e14:	4620      	mov	r0, r4
    4e16:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    4e1a:	f840 3b0c 	str.w	r3, [r0], #12
    4e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e20:	4573      	cmp	r3, lr
    4e22:	d911      	bls.n	4e48 <malloc+0xa8>
    4e24:	4620      	mov	r0, r4
    4e26:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    4e2a:	6065      	str	r5, [r4, #4]
    4e2c:	f840 1b0c 	str.w	r1, [r0], #12
    4e30:	eb00 0185 	add.w	r1, r0, r5, lsl #2
    4e34:	60a1      	str	r1, [r4, #8]
    4e36:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    4e3a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    4e3e:	1b5d      	subs	r5, r3, r5
    4e40:	3d03      	subs	r5, #3
    4e42:	604d      	str	r5, [r1, #4]
    4e44:	608a      	str	r2, [r1, #8]
    4e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e48:	2a00      	cmp	r2, #0
    4e4a:	d1ba      	bne.n	4dc2 <malloc+0x22>
    4e4c:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    4e50:	f000 f93a 	bl	50c8 <_sbrk>
    4e54:	3001      	adds	r0, #1
    4e56:	d0bd      	beq.n	4dd4 <malloc+0x34>
    4e58:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    4e5c:	e884 0028 	stmia.w	r4, {r3, r5}
    4e60:	f104 000c 	add.w	r0, r4, #12
    4e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e66:	bf00      	nop
    4e68:	10001dac 	.word	0x10001dac

00004e6c <free>:
    4e6c:	b1a8      	cbz	r0, 4e9a <free+0x2e>
    4e6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4e72:	f840 3c0c 	str.w	r3, [r0, #-12]
    4e76:	f850 2c04 	ldr.w	r2, [r0, #-4]
    4e7a:	b172      	cbz	r2, 4e9a <free+0x2e>
    4e7c:	6813      	ldr	r3, [r2, #0]
    4e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    4e82:	d10a      	bne.n	4e9a <free+0x2e>
    4e84:	6853      	ldr	r3, [r2, #4]
    4e86:	f850 1c08 	ldr.w	r1, [r0, #-8]
    4e8a:	440b      	add	r3, r1
    4e8c:	3303      	adds	r3, #3
    4e8e:	f840 3c08 	str.w	r3, [r0, #-8]
    4e92:	6893      	ldr	r3, [r2, #8]
    4e94:	f840 3c04 	str.w	r3, [r0, #-4]
    4e98:	e7ed      	b.n	4e76 <free+0xa>
    4e9a:	4770      	bx	lr

00004e9c <_Csys_alloc>:
    4e9c:	b510      	push	{r4, lr}
    4e9e:	f7ff ff7f 	bl	4da0 <malloc>
    4ea2:	4604      	mov	r4, r0
    4ea4:	b928      	cbnz	r0, 4eb2 <_Csys_alloc+0x16>
    4ea6:	4904      	ldr	r1, [pc, #16]	; (4eb8 <_Csys_alloc+0x1c>)
    4ea8:	2217      	movs	r2, #23
    4eaa:	f000 fdef 	bl	5a8c <__sys_write>
    4eae:	f000 fdda 	bl	5a66 <__sys_appexit>
    4eb2:	4620      	mov	r0, r4
    4eb4:	bd10      	pop	{r4, pc}
    4eb6:	bf00      	nop
    4eb8:	00006530 	.word	0x00006530

00004ebc <fclose>:
    4ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ec0:	f100 050c 	add.w	r5, r0, #12
    4ec4:	e895 01a0 	ldmia.w	r5, {r5, r7, r8}
    4ec8:	07a9      	lsls	r1, r5, #30
    4eca:	b088      	sub	sp, #32
    4ecc:	4604      	mov	r4, r0
    4ece:	6a46      	ldr	r6, [r0, #36]	; 0x24
    4ed0:	d025      	beq.n	4f1e <fclose+0x62>
    4ed2:	072a      	lsls	r2, r5, #28
    4ed4:	d416      	bmi.n	4f04 <fclose+0x48>
    4ed6:	f000 f827 	bl	4f28 <fflush>
    4eda:	4640      	mov	r0, r8
    4edc:	f000 fdc4 	bl	5a68 <__sys_close>
    4ee0:	052b      	lsls	r3, r5, #20
    4ee2:	d502      	bpl.n	4eea <fclose+0x2e>
    4ee4:	4638      	mov	r0, r7
    4ee6:	f7ff ffc1 	bl	4e6c <free>
    4eea:	0dad      	lsrs	r5, r5, #22
    4eec:	05ad      	lsls	r5, r5, #22
    4eee:	f115 4fa5 	cmn.w	r5, #1384120320	; 0x52800000
    4ef2:	d107      	bne.n	4f04 <fclose+0x48>
    4ef4:	4668      	mov	r0, sp
    4ef6:	6a21      	ldr	r1, [r4, #32]
    4ef8:	2220      	movs	r2, #32
    4efa:	f000 fdc4 	bl	5a86 <__sys_tmpnam>
    4efe:	4668      	mov	r0, sp
    4f00:	f000 f8d8 	bl	50b4 <remove>
    4f04:	2100      	movs	r1, #0
    4f06:	2218      	movs	r2, #24
    4f08:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4f0a:	f7fe f899 	bl	3040 <memset>
    4f0e:	4620      	mov	r0, r4
    4f10:	2100      	movs	r1, #0
    4f12:	2228      	movs	r2, #40	; 0x28
    4f14:	f7fe f894 	bl	3040 <memset>
    4f18:	6266      	str	r6, [r4, #36]	; 0x24
    4f1a:	2000      	movs	r0, #0
    4f1c:	e001      	b.n	4f22 <fclose+0x66>
    4f1e:	f04f 30ff 	mov.w	r0, #4294967295
    4f22:	b008      	add	sp, #32
    4f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004f28 <fflush>:
    4f28:	b538      	push	{r3, r4, r5, lr}
    4f2a:	4604      	mov	r4, r0
    4f2c:	b118      	cbz	r0, 4f36 <fflush+0xe>
    4f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4f32:	f000 b8e9 	b.w	5108 <_do_fflush>
    4f36:	4605      	mov	r5, r0
    4f38:	4806      	ldr	r0, [pc, #24]	; (4f54 <fflush+0x2c>)
    4f3a:	4420      	add	r0, r4
    4f3c:	f000 f8e4 	bl	5108 <_do_fflush>
    4f40:	3428      	adds	r4, #40	; 0x28
    4f42:	2800      	cmp	r0, #0
    4f44:	bf18      	it	ne
    4f46:	f04f 35ff 	movne.w	r5, #4294967295
    4f4a:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
    4f4e:	d1f3      	bne.n	4f38 <fflush+0x10>
    4f50:	4628      	mov	r0, r5
    4f52:	bd38      	pop	{r3, r4, r5, pc}
    4f54:	10001c6c 	.word	0x10001c6c

00004f58 <fseek>:
    4f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4f5c:	68c6      	ldr	r6, [r0, #12]
    4f5e:	4b41      	ldr	r3, [pc, #260]	; (5064 <fseek+0x10c>)
    4f60:	4604      	mov	r4, r0
    4f62:	4033      	ands	r3, r6
    4f64:	460d      	mov	r5, r1
    4f66:	4690      	mov	r8, r2
    4f68:	f8d0 9014 	ldr.w	r9, [r0, #20]
    4f6c:	2b00      	cmp	r3, #0
    4f6e:	d075      	beq.n	505c <fseek+0x104>
    4f70:	4648      	mov	r0, r9
    4f72:	f000 fd7f 	bl	5a74 <__sys_istty>
    4f76:	4607      	mov	r7, r0
    4f78:	2800      	cmp	r0, #0
    4f7a:	d16f      	bne.n	505c <fseek+0x104>
    4f7c:	f1b8 0f01 	cmp.w	r8, #1
    4f80:	d006      	beq.n	4f90 <fseek+0x38>
    4f82:	f1b8 0f02 	cmp.w	r8, #2
    4f86:	d008      	beq.n	4f9a <fseek+0x42>
    4f88:	f1b8 0f00 	cmp.w	r8, #0
    4f8c:	d166      	bne.n	505c <fseek+0x104>
    4f8e:	e029      	b.n	4fe4 <fseek+0x8c>
    4f90:	4620      	mov	r0, r4
    4f92:	f000 f869 	bl	5068 <ftell>
    4f96:	4405      	add	r5, r0
    4f98:	e024      	b.n	4fe4 <fseek+0x8c>
    4f9a:	4648      	mov	r0, r9
    4f9c:	f000 fd67 	bl	5a6e <__sys_flen>
    4fa0:	f1b0 0e00 	subs.w	lr, r0, #0
    4fa4:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    4fa8:	da04      	bge.n	4fb4 <fseek+0x5c>
    4faa:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    4fae:	60e1      	str	r1, [r4, #12]
    4fb0:	2701      	movs	r7, #1
    4fb2:	e054      	b.n	505e <fseek+0x106>
    4fb4:	6823      	ldr	r3, [r4, #0]
    4fb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4fb8:	461a      	mov	r2, r3
    4fba:	69a3      	ldr	r3, [r4, #24]
    4fbc:	4619      	mov	r1, r3
    4fbe:	6883      	ldr	r3, [r0, #8]
    4fc0:	4293      	cmp	r3, r2
    4fc2:	bf2c      	ite	cs
    4fc4:	18c9      	addcs	r1, r1, r3
    4fc6:	1889      	addcc	r1, r1, r2
    4fc8:	6923      	ldr	r3, [r4, #16]
    4fca:	f01c 0f20 	tst.w	ip, #32
    4fce:	eba1 0303 	sub.w	r3, r1, r3
    4fd2:	d003      	beq.n	4fdc <fseek+0x84>
    4fd4:	6842      	ldr	r2, [r0, #4]
    4fd6:	4293      	cmp	r3, r2
    4fd8:	bfb8      	it	lt
    4fda:	4613      	movlt	r3, r2
    4fdc:	4573      	cmp	r3, lr
    4fde:	bfac      	ite	ge
    4fe0:	18ed      	addge	r5, r5, r3
    4fe2:	4475      	addlt	r5, lr
    4fe4:	2d00      	cmp	r5, #0
    4fe6:	db39      	blt.n	505c <fseek+0x104>
    4fe8:	f416 5f00 	tst.w	r6, #8192	; 0x2000
    4fec:	6a62      	ldr	r2, [r4, #36]	; 0x24
    4fee:	d004      	beq.n	4ffa <fseek+0xa2>
    4ff0:	6823      	ldr	r3, [r4, #0]
    4ff2:	6891      	ldr	r1, [r2, #8]
    4ff4:	4299      	cmp	r1, r3
    4ff6:	bf38      	it	cc
    4ff8:	6093      	strcc	r3, [r2, #8]
    4ffa:	69a1      	ldr	r1, [r4, #24]
    4ffc:	428d      	cmp	r5, r1
    4ffe:	db10      	blt.n	5022 <fseek+0xca>
    5000:	6890      	ldr	r0, [r2, #8]
    5002:	6823      	ldr	r3, [r4, #0]
    5004:	f8d4 e010 	ldr.w	lr, [r4, #16]
    5008:	4283      	cmp	r3, r0
    500a:	bf38      	it	cc
    500c:	4603      	movcc	r3, r0
    500e:	1858      	adds	r0, r3, r1
    5010:	ebce 0000 	rsb	r0, lr, r0
    5014:	4285      	cmp	r5, r0
    5016:	dc04      	bgt.n	5022 <fseek+0xca>
    5018:	68d0      	ldr	r0, [r2, #12]
    501a:	eb01 0c00 	add.w	ip, r1, r0
    501e:	4565      	cmp	r5, ip
    5020:	db06      	blt.n	5030 <fseek+0xd8>
    5022:	2300      	movs	r3, #0
    5024:	60a3      	str	r3, [r4, #8]
    5026:	6063      	str	r3, [r4, #4]
    5028:	f046 0620 	orr.w	r6, r6, #32
    502c:	6055      	str	r5, [r2, #4]
    502e:	e00f      	b.n	5050 <fseek+0xf8>
    5030:	1a6d      	subs	r5, r5, r1
    5032:	07b1      	lsls	r1, r6, #30
    5034:	bf44      	itt	mi
    5036:	1a28      	submi	r0, r5, r0
    5038:	60a0      	strmi	r0, [r4, #8]
    503a:	07f2      	lsls	r2, r6, #31
    503c:	bf44      	itt	mi
    503e:	ebc3 030e 	rsbmi	r3, r3, lr
    5042:	195b      	addmi	r3, r3, r5
    5044:	4475      	add	r5, lr
    5046:	bf48      	it	mi
    5048:	6063      	strmi	r3, [r4, #4]
    504a:	6025      	str	r5, [r4, #0]
    504c:	f026 0620 	bic.w	r6, r6, #32
    5050:	f426 2603 	bic.w	r6, r6, #536576	; 0x83000
    5054:	f026 0640 	bic.w	r6, r6, #64	; 0x40
    5058:	60e6      	str	r6, [r4, #12]
    505a:	e000      	b.n	505e <fseek+0x106>
    505c:	2702      	movs	r7, #2
    505e:	4638      	mov	r0, r7
    5060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5064:	00100003 	.word	0x00100003

00005068 <ftell>:
    5068:	68c3      	ldr	r3, [r0, #12]
    506a:	079a      	lsls	r2, r3, #30
    506c:	d105      	bne.n	507a <ftell+0x12>
    506e:	4b10      	ldr	r3, [pc, #64]	; (50b0 <ftell+0x48>)
    5070:	2221      	movs	r2, #33	; 0x21
    5072:	601a      	str	r2, [r3, #0]
    5074:	f04f 30ff 	mov.w	r0, #4294967295
    5078:	4770      	bx	lr
    507a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    507e:	f003 0320 	and.w	r3, r3, #32
    5082:	d00a      	beq.n	509a <ftell+0x32>
    5084:	b113      	cbz	r3, 508c <ftell+0x24>
    5086:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5088:	6858      	ldr	r0, [r3, #4]
    508a:	e004      	b.n	5096 <ftell+0x2e>
    508c:	6802      	ldr	r2, [r0, #0]
    508e:	6983      	ldr	r3, [r0, #24]
    5090:	6900      	ldr	r0, [r0, #16]
    5092:	4413      	add	r3, r2
    5094:	1a18      	subs	r0, r3, r0
    5096:	3801      	subs	r0, #1
    5098:	4770      	bx	lr
    509a:	b113      	cbz	r3, 50a2 <ftell+0x3a>
    509c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    509e:	6858      	ldr	r0, [r3, #4]
    50a0:	4770      	bx	lr
    50a2:	6802      	ldr	r2, [r0, #0]
    50a4:	6983      	ldr	r3, [r0, #24]
    50a6:	6900      	ldr	r0, [r0, #16]
    50a8:	4413      	add	r3, r2
    50aa:	1a18      	subs	r0, r3, r0
    50ac:	4770      	bx	lr
    50ae:	bf00      	nop
    50b0:	10000894 	.word	0x10000894

000050b4 <remove>:
    50b4:	b510      	push	{r4, lr}
    50b6:	4604      	mov	r4, r0
    50b8:	f7ff fc62 	bl	4980 <strlen>
    50bc:	4601      	mov	r1, r0
    50be:	4620      	mov	r0, r4
    50c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    50c4:	f000 bcd9 	b.w	5a7a <__sys_remove>

000050c8 <_sbrk>:
    50c8:	b538      	push	{r3, r4, r5, lr}
    50ca:	4b0c      	ldr	r3, [pc, #48]	; (50fc <_sbrk+0x34>)
    50cc:	681a      	ldr	r2, [r3, #0]
    50ce:	b90a      	cbnz	r2, 50d4 <_sbrk+0xc>
    50d0:	4a0b      	ldr	r2, [pc, #44]	; (5100 <_sbrk+0x38>)
    50d2:	601a      	str	r2, [r3, #0]
    50d4:	1cc4      	adds	r4, r0, #3
    50d6:	681d      	ldr	r5, [r3, #0]
    50d8:	f024 0403 	bic.w	r4, r4, #3
    50dc:	442c      	add	r4, r5
    50de:	4620      	mov	r0, r4
    50e0:	f000 f834 	bl	514c <__check_heap_overflow>
    50e4:	b918      	cbnz	r0, 50ee <_sbrk+0x26>
    50e6:	4b05      	ldr	r3, [pc, #20]	; (50fc <_sbrk+0x34>)
    50e8:	4628      	mov	r0, r5
    50ea:	601c      	str	r4, [r3, #0]
    50ec:	bd38      	pop	{r3, r4, r5, pc}
    50ee:	4b05      	ldr	r3, [pc, #20]	; (5104 <_sbrk+0x3c>)
    50f0:	220c      	movs	r2, #12
    50f2:	601a      	str	r2, [r3, #0]
    50f4:	f04f 30ff 	mov.w	r0, #4294967295
    50f8:	bd38      	pop	{r3, r4, r5, pc}
    50fa:	bf00      	nop
    50fc:	10001db0 	.word	0x10001db0
    5100:	10001db4 	.word	0x10001db4
    5104:	10000894 	.word	0x10000894

00005108 <_do_fflush>:
    5108:	68c2      	ldr	r2, [r0, #12]
    510a:	b570      	push	{r4, r5, r6, lr}
    510c:	f012 0303 	ands.w	r3, r2, #3
    5110:	4604      	mov	r4, r0
    5112:	d019      	beq.n	5148 <_do_fflush+0x40>
    5114:	0693      	lsls	r3, r2, #26
    5116:	d504      	bpl.n	5122 <_do_fflush+0x1a>
    5118:	6a43      	ldr	r3, [r0, #36]	; 0x24
    511a:	685d      	ldr	r5, [r3, #4]
    511c:	f7ff fc90 	bl	4a40 <_deferredlazyseek>
    5120:	e004      	b.n	512c <_do_fflush+0x24>
    5122:	6805      	ldr	r5, [r0, #0]
    5124:	6983      	ldr	r3, [r0, #24]
    5126:	442b      	add	r3, r5
    5128:	6905      	ldr	r5, [r0, #16]
    512a:	1b5d      	subs	r5, r3, r5
    512c:	68e3      	ldr	r3, [r4, #12]
    512e:	4620      	mov	r0, r4
    5130:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    5134:	60e3      	str	r3, [r4, #12]
    5136:	f7ff fd7b 	bl	4c30 <_fflush>
    513a:	4606      	mov	r6, r0
    513c:	4629      	mov	r1, r5
    513e:	4620      	mov	r0, r4
    5140:	2200      	movs	r2, #0
    5142:	f7ff ff09 	bl	4f58 <fseek>
    5146:	4633      	mov	r3, r6
    5148:	4618      	mov	r0, r3
    514a:	bd70      	pop	{r4, r5, r6, pc}

0000514c <__check_heap_overflow>:
    514c:	4b04      	ldr	r3, [pc, #16]	; (5160 <__check_heap_overflow+0x14>)
    514e:	b123      	cbz	r3, 515a <__check_heap_overflow+0xe>
    5150:	4298      	cmp	r0, r3
    5152:	bf34      	ite	cc
    5154:	2000      	movcc	r0, #0
    5156:	2001      	movcs	r0, #1
    5158:	4770      	bx	lr
    515a:	4618      	mov	r0, r3
    515c:	4770      	bx	lr
    515e:	bf00      	nop
    5160:	00000000 	.word	0x00000000

00005164 <__aeabi_uldivmod>:
    5164:	f05f 0c00 	movs.w	ip, #0

00005168 <__bhs_ldivmod1>:
    5168:	b530      	push	{r4, r5, lr}
    516a:	001c      	movs	r4, r3
    516c:	d122      	bne.n	51b4 <ldiv64>
    516e:	0012      	movs	r2, r2
    5170:	d06f      	beq.n	5252 <ldiv_divzero>
    5172:	4291      	cmp	r1, r2
    5174:	d306      	bcc.n	5184 <ldiv32>
    5176:	4605      	mov	r5, r0
    5178:	4608      	mov	r0, r1
    517a:	2100      	movs	r1, #0
    517c:	f000 f86f 	bl	525e <udiv6432>
    5180:	4604      	mov	r4, r0
    5182:	4628      	mov	r0, r5

00005184 <ldiv32>:
    5184:	f000 f86b 	bl	525e <udiv6432>
    5188:	460a      	mov	r2, r1
    518a:	4621      	mov	r1, r4

0000518c <ldiv_return>:
    518c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5190:	f01c 4f40 	tst.w	ip, #3221225472	; 0xc0000000
    5194:	bf08      	it	eq
    5196:	4770      	bxeq	lr
    5198:	d503      	bpl.n	51a2 <ldiv_sign>
    519a:	4249      	negs	r1, r1
    519c:	4240      	negs	r0, r0
    519e:	f161 0100 	sbc.w	r1, r1, #0

000051a2 <ldiv_sign>:
    51a2:	ea5f 0c8c 	movs.w	ip, ip, lsl #2
    51a6:	bf38      	it	cc
    51a8:	4770      	bxcc	lr
    51aa:	425b      	negs	r3, r3
    51ac:	4252      	negs	r2, r2
    51ae:	f163 0300 	sbc.w	r3, r3, #0
    51b2:	4770      	bx	lr

000051b4 <ldiv64>:
    51b4:	d442      	bmi.n	523c <ldiv_res01>
    51b6:	0c1c      	lsrs	r4, r3, #16
    51b8:	bf04      	itt	eq
    51ba:	041b      	lsleq	r3, r3, #16
    51bc:	f10c 0c10 	addeq.w	ip, ip, #16
    51c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    51c4:	bf04      	itt	eq
    51c6:	021b      	lsleq	r3, r3, #8
    51c8:	f10c 0c08 	addeq.w	ip, ip, #8
    51cc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    51d0:	bf04      	itt	eq
    51d2:	011b      	lsleq	r3, r3, #4
    51d4:	f10c 0c04 	addeq.w	ip, ip, #4
    51d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    51dc:	bf04      	itt	eq
    51de:	f10c 0c02 	addeq.w	ip, ip, #2
    51e2:	ea5f 0383 	movseq.w	r3, r3, lsl #2
    51e6:	bf5c      	itt	pl
    51e8:	f10c 0c01 	addpl.w	ip, ip, #1
    51ec:	005b      	lslpl	r3, r3, #1
    51ee:	f1cc 0e20 	rsb	lr, ip, #32
    51f2:	fa22 f40e 	lsr.w	r4, r2, lr
    51f6:	4323      	orrs	r3, r4
    51f8:	fa02 f20c 	lsl.w	r2, r2, ip
    51fc:	fa00 f50c 	lsl.w	r5, r0, ip
    5200:	fa20 f00e 	lsr.w	r0, r0, lr
    5204:	fa01 f40c 	lsl.w	r4, r1, ip
    5208:	4320      	orrs	r0, r4
    520a:	fa21 f10e 	lsr.w	r1, r1, lr
    520e:	4614      	mov	r4, r2
    5210:	461a      	mov	r2, r3
    5212:	f000 f824 	bl	525e <udiv6432>
    5216:	fba4 2300 	umull	r2, r3, r4, r0
    521a:	1aaa      	subs	r2, r5, r2
    521c:	eb71 0303 	sbcs.w	r3, r1, r3
    5220:	bf3c      	itt	cc
    5222:	191b      	addcc	r3, r3, r4
    5224:	3801      	subcc	r0, #1
    5226:	f1cc 0e20 	rsb	lr, ip, #32
    522a:	fa22 f20c 	lsr.w	r2, r2, ip
    522e:	fa03 f40e 	lsl.w	r4, r3, lr
    5232:	4322      	orrs	r2, r4
    5234:	fa23 f30c 	lsr.w	r3, r3, ip
    5238:	2100      	movs	r1, #0
    523a:	e7a7      	b.n	518c <ldiv_return>

0000523c <ldiv_res01>:
    523c:	1a82      	subs	r2, r0, r2
    523e:	eb71 0303 	sbcs.w	r3, r1, r3
    5242:	bf3c      	itt	cc
    5244:	4602      	movcc	r2, r0
    5246:	460b      	movcc	r3, r1
    5248:	f04f 0100 	mov.w	r1, #0
    524c:	f141 0000 	adc.w	r0, r1, #0
    5250:	e79c      	b.n	518c <ldiv_return>

00005252 <ldiv_divzero>:
    5252:	2000      	movs	r0, #0
    5254:	2100      	movs	r1, #0
    5256:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    525a:	f000 b83d 	b.w	52d8 <__aeabi_idiv0>

0000525e <udiv6432>:
    525e:	2304      	movs	r3, #4
    5260:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    5264:	d209      	bcs.n	527a <udiv6432_entry>

00005266 <udiv6432_loop1>:
    5266:	0209      	lsls	r1, r1, #8
    5268:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
    526c:	0200      	lsls	r0, r0, #8
    526e:	3b01      	subs	r3, #1
    5270:	bf08      	it	eq
    5272:	4770      	bxeq	lr
    5274:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    5278:	d3f5      	bcc.n	5266 <udiv6432_loop1>

0000527a <udiv6432_entry>:
    527a:	1800      	adds	r0, r0, r0

0000527c <udiv6432_loop>:
    527c:	4149      	adcs	r1, r1
    527e:	bf34      	ite	cc
    5280:	4291      	cmpcc	r1, r2
    5282:	1a89      	subcs	r1, r1, r2
    5284:	4140      	adcs	r0, r0
    5286:	4149      	adcs	r1, r1
    5288:	bf34      	ite	cc
    528a:	4291      	cmpcc	r1, r2
    528c:	1a89      	subcs	r1, r1, r2
    528e:	4140      	adcs	r0, r0
    5290:	4149      	adcs	r1, r1
    5292:	bf34      	ite	cc
    5294:	4291      	cmpcc	r1, r2
    5296:	1a89      	subcs	r1, r1, r2
    5298:	4140      	adcs	r0, r0
    529a:	4149      	adcs	r1, r1
    529c:	bf34      	ite	cc
    529e:	4291      	cmpcc	r1, r2
    52a0:	1a89      	subcs	r1, r1, r2
    52a2:	4140      	adcs	r0, r0
    52a4:	4149      	adcs	r1, r1
    52a6:	bf34      	ite	cc
    52a8:	4291      	cmpcc	r1, r2
    52aa:	1a89      	subcs	r1, r1, r2
    52ac:	4140      	adcs	r0, r0
    52ae:	4149      	adcs	r1, r1
    52b0:	bf34      	ite	cc
    52b2:	4291      	cmpcc	r1, r2
    52b4:	1a89      	subcs	r1, r1, r2
    52b6:	4140      	adcs	r0, r0
    52b8:	4149      	adcs	r1, r1
    52ba:	bf34      	ite	cc
    52bc:	4291      	cmpcc	r1, r2
    52be:	1a89      	subcs	r1, r1, r2
    52c0:	4140      	adcs	r0, r0
    52c2:	4149      	adcs	r1, r1
    52c4:	bf34      	ite	cc
    52c6:	4291      	cmpcc	r1, r2
    52c8:	1a89      	subcs	r1, r1, r2
    52ca:	4140      	adcs	r0, r0
    52cc:	f1a3 0301 	sub.w	r3, r3, #1
    52d0:	f013 0f0f 	tst.w	r3, #15
    52d4:	d1d2      	bne.n	527c <udiv6432_loop>
    52d6:	4770      	bx	lr

000052d8 <__aeabi_idiv0>:
    52d8:	4770      	bx	lr
	...

000052dc <__aeabi_dmul>:
    52dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52e0:	f3c1 540a 	ubfx	r4, r1, #20, #11
    52e4:	2c00      	cmp	r4, #0
    52e6:	d054      	beq.n	5392 <__aeabi_dmul+0xb6>
    52e8:	f240 76ff 	movw	r6, #2047	; 0x7ff
    52ec:	42b4      	cmp	r4, r6
    52ee:	d050      	beq.n	5392 <__aeabi_dmul+0xb6>
    52f0:	f3c3 550a 	ubfx	r5, r3, #20, #11
    52f4:	2d00      	cmp	r5, #0
    52f6:	d04c      	beq.n	5392 <__aeabi_dmul+0xb6>
    52f8:	42b5      	cmp	r5, r6
    52fa:	d04a      	beq.n	5392 <__aeabi_dmul+0xb6>
    52fc:	f3c1 0e13 	ubfx	lr, r1, #0, #20
    5300:	ea4f 2ac2 	mov.w	sl, r2, lsl #11
    5304:	f44e 1e80 	orr.w	lr, lr, #1048576	; 0x100000
    5308:	fbae 670a 	umull	r6, r7, lr, sl
    530c:	fbaa ab00 	umull	sl, fp, sl, r0
    5310:	eb16 080b 	adds.w	r8, r6, fp
    5314:	463e      	mov	r6, r7
    5316:	ea4f 5252 	mov.w	r2, r2, lsr #21
    531a:	ea42 22c3 	orr.w	r2, r2, r3, lsl #11
    531e:	f04f 0900 	mov.w	r9, #0
    5322:	f149 0900 	adc.w	r9, r9, #0
    5326:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    532a:	fbe0 8902 	umlal	r8, r9, r0, r2
    532e:	2700      	movs	r7, #0
    5330:	eb16 0609 	adds.w	r6, r6, r9
    5334:	f147 0700 	adc.w	r7, r7, #0
    5338:	fbee 6702 	umlal	r6, r7, lr, r2
    533c:	404b      	eors	r3, r1
    533e:	f5b7 1f80 	cmp.w	r7, #1048576	; 0x100000
    5342:	442c      	add	r4, r5
    5344:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    5348:	ea48 089a 	orr.w	r8, r8, sl, lsr #2
    534c:	d24b      	bcs.n	53e6 <__aeabi_dmul+0x10a>
    534e:	19b6      	adds	r6, r6, r6
    5350:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    5354:	417f      	adcs	r7, r7
    5356:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
    535a:	4316      	orrs	r6, r2
    535c:	ea4f 0848 	mov.w	r8, r8, lsl #1
    5360:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    5364:	18b6      	adds	r6, r6, r2
    5366:	f240 72fd 	movw	r2, #2045	; 0x7fd
    536a:	f147 0700 	adc.w	r7, r7, #0
    536e:	f1b8 4f00 	cmp.w	r8, #2147483648	; 0x80000000
    5372:	4635      	mov	r5, r6
    5374:	bf08      	it	eq
    5376:	f026 0501 	biceq.w	r5, r6, #1
    537a:	4294      	cmp	r4, r2
    537c:	d936      	bls.n	53ec <__aeabi_dmul+0x110>
    537e:	2c00      	cmp	r4, #0
    5380:	bfa4      	itt	ge
    5382:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    5386:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    538a:	2000      	movs	r0, #0
    538c:	4619      	mov	r1, r3
    538e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5392:	ea83 0201 	eor.w	r2, r3, r1
    5396:	0049      	lsls	r1, r1, #1
    5398:	f511 1f00 	cmn.w	r1, #2097152	; 0x200000
    539c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
    53a0:	d213      	bcs.n	53ca <__aeabi_dmul+0xee>
    53a2:	005b      	lsls	r3, r3, #1
    53a4:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    53a8:	d317      	bcc.n	53da <__aeabi_dmul+0xfe>
    53aa:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    53ae:	d80d      	bhi.n	53cc <__aeabi_dmul+0xf0>
    53b0:	0d49      	lsrs	r1, r1, #21
    53b2:	0549      	lsls	r1, r1, #21
    53b4:	2000      	movs	r0, #0
    53b6:	b169      	cbz	r1, 53d4 <__aeabi_dmul+0xf8>
    53b8:	0d5b      	lsrs	r3, r3, #21
    53ba:	055b      	lsls	r3, r3, #21
    53bc:	b153      	cbz	r3, 53d4 <__aeabi_dmul+0xf8>
    53be:	f042 42ff 	orr.w	r2, r2, #2139095040	; 0x7f800000
    53c2:	f442 01e0 	orr.w	r1, r2, #7340032	; 0x700000
    53c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53ca:	d00a      	beq.n	53e2 <__aeabi_dmul+0x106>
    53cc:	2000      	movs	r0, #0
    53ce:	490a      	ldr	r1, [pc, #40]	; (53f8 <__aeabi_dmul+0x11c>)
    53d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53d4:	4908      	ldr	r1, [pc, #32]	; (53f8 <__aeabi_dmul+0x11c>)
    53d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53da:	2000      	movs	r0, #0
    53dc:	4611      	mov	r1, r2
    53de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53e2:	005b      	lsls	r3, r3, #1
    53e4:	e7e1      	b.n	53aa <__aeabi_dmul+0xce>
    53e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    53ea:	e7b9      	b.n	5360 <__aeabi_dmul+0x84>
    53ec:	433b      	orrs	r3, r7
    53ee:	eb03 5104 	add.w	r1, r3, r4, lsl #20
    53f2:	4628      	mov	r0, r5
    53f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53f8:	7ff80000 	.word	0x7ff80000

000053fc <__aeabi_ddiv>:
    53fc:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
    5400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5404:	f1bc 0f00 	cmp.w	ip, #0
    5408:	d053      	beq.n	54b2 <__aeabi_ddiv+0xb6>
    540a:	f240 74ff 	movw	r4, #2047	; 0x7ff
    540e:	45a4      	cmp	ip, r4
    5410:	d04f      	beq.n	54b2 <__aeabi_ddiv+0xb6>
    5412:	f3c3 580a 	ubfx	r8, r3, #20, #11
    5416:	f1b8 0f00 	cmp.w	r8, #0
    541a:	d04a      	beq.n	54b2 <__aeabi_ddiv+0xb6>
    541c:	45a0      	cmp	r8, r4
    541e:	d048      	beq.n	54b2 <__aeabi_ddiv+0xb6>
    5420:	ea4f 5a50 	mov.w	sl, r0, lsr #21
    5424:	ea4f 5952 	mov.w	r9, r2, lsr #21
    5428:	02c4      	lsls	r4, r0, #11
    542a:	02d6      	lsls	r6, r2, #11
    542c:	ea4a 20c1 	orr.w	r0, sl, r1, lsl #11
    5430:	ea49 22c3 	orr.w	r2, r9, r3, lsl #11
    5434:	f040 4500 	orr.w	r5, r0, #2147483648	; 0x80000000
    5438:	f042 4700 	orr.w	r7, r2, #2147483648	; 0x80000000
    543c:	42bd      	cmp	r5, r7
    543e:	bf08      	it	eq
    5440:	42b4      	cmpeq	r4, r6
    5442:	ebc8 0c0c 	rsb	ip, r8, ip
    5446:	ea83 0801 	eor.w	r8, r3, r1
    544a:	d25d      	bcs.n	5508 <__aeabi_ddiv+0x10c>
    544c:	f20c 3cfd 	addw	ip, ip, #1021	; 0x3fd
    5450:	0879      	lsrs	r1, r7, #1
    5452:	ea4f 0036 	mov.w	r0, r6, rrx
    5456:	2334      	movs	r3, #52	; 0x34
    5458:	2200      	movs	r2, #0
    545a:	e000      	b.n	545e <__aeabi_ddiv+0x62>
    545c:	3b01      	subs	r3, #1
    545e:	428d      	cmp	r5, r1
    5460:	bf08      	it	eq
    5462:	4284      	cmpeq	r4, r0
    5464:	ea4f 0242 	mov.w	r2, r2, lsl #1
    5468:	d304      	bcc.n	5474 <__aeabi_ddiv+0x78>
    546a:	1a24      	subs	r4, r4, r0
    546c:	eb65 0501 	sbc.w	r5, r5, r1
    5470:	f042 0201 	orr.w	r2, r2, #1
    5474:	1924      	adds	r4, r4, r4
    5476:	416d      	adcs	r5, r5
    5478:	2b20      	cmp	r3, #32
    547a:	d062      	beq.n	5542 <__aeabi_ddiv+0x146>
    547c:	2b00      	cmp	r3, #0
    547e:	d1ed      	bne.n	545c <__aeabi_ddiv+0x60>
    5480:	428d      	cmp	r5, r1
    5482:	bf08      	it	eq
    5484:	4284      	cmpeq	r4, r0
    5486:	d303      	bcc.n	5490 <__aeabi_ddiv+0x94>
    5488:	3201      	adds	r2, #1
    548a:	bf08      	it	eq
    548c:	f10e 0e01 	addeq.w	lr, lr, #1
    5490:	f240 71fd 	movw	r1, #2045	; 0x7fd
    5494:	458c      	cmp	ip, r1
    5496:	f008 4300 	and.w	r3, r8, #2147483648	; 0x80000000
    549a:	d93b      	bls.n	5514 <__aeabi_ddiv+0x118>
    549c:	f1bc 0f00 	cmp.w	ip, #0
    54a0:	bfa4      	itt	ge
    54a2:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    54a6:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    54aa:	2000      	movs	r0, #0
    54ac:	4619      	mov	r1, r3
    54ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    54b2:	004a      	lsls	r2, r1, #1
    54b4:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    54b8:	d81c      	bhi.n	54f4 <__aeabi_ddiv+0xf8>
    54ba:	005c      	lsls	r4, r3, #1
    54bc:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    54c0:	d818      	bhi.n	54f4 <__aeabi_ddiv+0xf8>
    54c2:	ea43 0001 	orr.w	r0, r3, r1
    54c6:	f3c0 500a 	ubfx	r0, r0, #20, #11
    54ca:	0545      	lsls	r5, r0, #21
    54cc:	b1b0      	cbz	r0, 54fc <__aeabi_ddiv+0x100>
    54ce:	0d50      	lsrs	r0, r2, #21
    54d0:	4059      	eors	r1, r3
    54d2:	0540      	lsls	r0, r0, #21
    54d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    54d8:	b1a0      	cbz	r0, 5504 <__aeabi_ddiv+0x108>
    54da:	0d60      	lsrs	r0, r4, #21
    54dc:	0540      	lsls	r0, r0, #21
    54de:	b348      	cbz	r0, 5534 <__aeabi_ddiv+0x138>
    54e0:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    54e4:	d11d      	bne.n	5522 <__aeabi_ddiv+0x126>
    54e6:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    54ea:	d003      	beq.n	54f4 <__aeabi_ddiv+0xf8>
    54ec:	2200      	movs	r2, #0
    54ee:	4610      	mov	r0, r2
    54f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    54f4:	2000      	movs	r0, #0
    54f6:	4914      	ldr	r1, [pc, #80]	; (5548 <__aeabi_ddiv+0x14c>)
    54f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    54fc:	4912      	ldr	r1, [pc, #72]	; (5548 <__aeabi_ddiv+0x14c>)
    54fe:	4628      	mov	r0, r5
    5500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5508:	086d      	lsrs	r5, r5, #1
    550a:	ea4f 0434 	mov.w	r4, r4, rrx
    550e:	f20c 3cfe 	addw	ip, ip, #1022	; 0x3fe
    5512:	e79d      	b.n	5450 <__aeabi_ddiv+0x54>
    5514:	eb03 530c 	add.w	r3, r3, ip, lsl #20
    5518:	eb03 010e 	add.w	r1, r3, lr
    551c:	4610      	mov	r0, r2
    551e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5522:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    5526:	2200      	movs	r2, #0
    5528:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    552c:	4610      	mov	r0, r2
    552e:	4619      	mov	r1, r3
    5530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5534:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    5538:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    553c:	4619      	mov	r1, r3
    553e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5542:	4696      	mov	lr, r2
    5544:	e78a      	b.n	545c <__aeabi_ddiv+0x60>
    5546:	bf00      	nop
    5548:	7ff80000 	.word	0x7ff80000

0000554c <__aeabi_dsub>:
    554c:	b5f0      	push	{r4, r5, r6, r7, lr}
    554e:	ea93 0401 	eors.w	r4, r3, r1
    5552:	460d      	mov	r5, r1
    5554:	f100 80cc 	bmi.w	56f0 <__aeabi_dsub+0x1a4>
    5558:	4299      	cmp	r1, r3
    555a:	4606      	mov	r6, r0
    555c:	d270      	bcs.n	5640 <__aeabi_dsub+0xf4>
    555e:	4056      	eors	r6, r2
    5560:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    5564:	4072      	eors	r2, r6
    5566:	4056      	eors	r6, r2
    5568:	404d      	eors	r5, r1
    556a:	404b      	eors	r3, r1
    556c:	f240 70ff 	movw	r0, #2047	; 0x7ff
    5570:	0d2c      	lsrs	r4, r5, #20
    5572:	f424 6100 	bic.w	r1, r4, #2048	; 0x800
    5576:	4281      	cmp	r1, r0
    5578:	eba4 5713 	sub.w	r7, r4, r3, lsr #20
    557c:	f000 8096 	beq.w	56ac <__aeabi_dsub+0x160>
    5580:	428f      	cmp	r7, r1
    5582:	f000 8099 	beq.w	56b8 <__aeabi_dsub+0x16c>
    5586:	f3c5 0513 	ubfx	r5, r5, #0, #20
    558a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    558e:	2f1f      	cmp	r7, #31
    5590:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
    5594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    5598:	d857      	bhi.n	564a <__aeabi_dsub+0xfe>
    559a:	f1c7 0020 	rsb	r0, r7, #32
    559e:	fa03 fe00 	lsl.w	lr, r3, r0
    55a2:	fa22 f107 	lsr.w	r1, r2, r7
    55a6:	ea4e 0101 	orr.w	r1, lr, r1
    55aa:	40fb      	lsrs	r3, r7
    55ac:	1a71      	subs	r1, r6, r1
    55ae:	1aed      	subs	r5, r5, r3
    55b0:	428e      	cmp	r6, r1
    55b2:	bf38      	it	cc
    55b4:	f105 35ff 	addcc.w	r5, r5, #4294967295
    55b8:	fa12 f300 	lsls.w	r3, r2, r0
    55bc:	d006      	beq.n	55cc <__aeabi_dsub+0x80>
    55be:	3901      	subs	r1, #1
    55c0:	1c4f      	adds	r7, r1, #1
    55c2:	f1c3 0300 	rsb	r3, r3, #0
    55c6:	bf08      	it	eq
    55c8:	f105 35ff 	addeq.w	r5, r5, #4294967295
    55cc:	f415 1fc0 	tst.w	r5, #1572864	; 0x180000
    55d0:	d158      	bne.n	5684 <__aeabi_dsub+0x138>
    55d2:	0fdb      	lsrs	r3, r3, #31
    55d4:	0fca      	lsrs	r2, r1, #31
    55d6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    55da:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    55de:	ea53 0502 	orrs.w	r5, r3, r2
    55e2:	f000 809a 	beq.w	571a <__aeabi_dsub+0x1ce>
    55e6:	0b51      	lsrs	r1, r2, #13
    55e8:	f1a4 0502 	sub.w	r5, r4, #2
    55ec:	d108      	bne.n	5600 <__aeabi_dsub+0xb4>
    55ee:	0e19      	lsrs	r1, r3, #24
    55f0:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
    55f4:	0b51      	lsrs	r1, r2, #13
    55f6:	f1a5 0508 	sub.w	r5, r5, #8
    55fa:	ea4f 2303 	mov.w	r3, r3, lsl #8
    55fe:	d0f6      	beq.n	55ee <__aeabi_dsub+0xa2>
    5600:	0c51      	lsrs	r1, r2, #17
    5602:	d104      	bne.n	560e <__aeabi_dsub+0xc2>
    5604:	0f19      	lsrs	r1, r3, #28
    5606:	3d04      	subs	r5, #4
    5608:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    560c:	011b      	lsls	r3, r3, #4
    560e:	0cd1      	lsrs	r1, r2, #19
    5610:	d104      	bne.n	561c <__aeabi_dsub+0xd0>
    5612:	0f99      	lsrs	r1, r3, #30
    5614:	3d02      	subs	r5, #2
    5616:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
    561a:	009b      	lsls	r3, r3, #2
    561c:	0d11      	lsrs	r1, r2, #20
    561e:	d104      	bne.n	562a <__aeabi_dsub+0xde>
    5620:	0fd9      	lsrs	r1, r3, #31
    5622:	3d01      	subs	r5, #1
    5624:	ea41 0242 	orr.w	r2, r1, r2, lsl #1
    5628:	005b      	lsls	r3, r3, #1
    562a:	0ae4      	lsrs	r4, r4, #11
    562c:	ebb4 2fd5 	cmp.w	r4, r5, lsr #11
    5630:	f04f 0000 	mov.w	r0, #0
    5634:	bf06      	itte	eq
    5636:	eb02 5105 	addeq.w	r1, r2, r5, lsl #20
    563a:	4618      	moveq	r0, r3
    563c:	07e1      	lslne	r1, r4, #31
    563e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5640:	4290      	cmp	r0, r2
    5642:	d893      	bhi.n	556c <__aeabi_dsub+0x20>
    5644:	4299      	cmp	r1, r3
    5646:	d191      	bne.n	556c <__aeabi_dsub+0x20>
    5648:	e789      	b.n	555e <__aeabi_dsub+0x12>
    564a:	2f35      	cmp	r7, #53	; 0x35
    564c:	d826      	bhi.n	569c <__aeabi_dsub+0x150>
    564e:	f1a7 0020 	sub.w	r0, r7, #32
    5652:	fa23 f100 	lsr.w	r1, r3, r0
    5656:	1a71      	subs	r1, r6, r1
    5658:	428e      	cmp	r6, r1
    565a:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    565e:	fa22 f000 	lsr.w	r0, r2, r0
    5662:	bf38      	it	cc
    5664:	f105 35ff 	addcc.w	r5, r5, #4294967295
    5668:	40bb      	lsls	r3, r7
    566a:	0612      	lsls	r2, r2, #24
    566c:	ea43 0300 	orr.w	r3, r3, r0
    5670:	d048      	beq.n	5704 <__aeabi_dsub+0x1b8>
    5672:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    5676:	3901      	subs	r1, #1
    5678:	1c4e      	adds	r6, r1, #1
    567a:	f1c3 0300 	rsb	r3, r3, #0
    567e:	bf08      	it	eq
    5680:	f105 35ff 	addeq.w	r5, r5, #4294967295
    5684:	02e8      	lsls	r0, r5, #11
    5686:	d42e      	bmi.n	56e6 <__aeabi_dsub+0x19a>
    5688:	3c01      	subs	r4, #1
    568a:	0562      	lsls	r2, r4, #21
    568c:	d037      	beq.n	56fe <__aeabi_dsub+0x1b2>
    568e:	0fde      	lsrs	r6, r3, #31
    5690:	0fca      	lsrs	r2, r1, #31
    5692:	ea42 0545 	orr.w	r5, r2, r5, lsl #1
    5696:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
    569a:	005b      	lsls	r3, r3, #1
    569c:	2b00      	cmp	r3, #0
    569e:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    56a2:	db11      	blt.n	56c8 <__aeabi_dsub+0x17c>
    56a4:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    56a8:	4630      	mov	r0, r6
    56aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56ac:	032b      	lsls	r3, r5, #12
    56ae:	d117      	bne.n	56e0 <__aeabi_dsub+0x194>
    56b0:	b387      	cbz	r7, 5714 <__aeabi_dsub+0x1c8>
    56b2:	4630      	mov	r0, r6
    56b4:	4629      	mov	r1, r5
    56b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56b8:	f240 73fe 	movw	r3, #2046	; 0x7fe
    56bc:	429f      	cmp	r7, r3
    56be:	d8f5      	bhi.n	56ac <__aeabi_dsub+0x160>
    56c0:	b99f      	cbnz	r7, 56ea <__aeabi_dsub+0x19e>
    56c2:	4639      	mov	r1, r7
    56c4:	4638      	mov	r0, r7
    56c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56c8:	3601      	adds	r6, #1
    56ca:	bf08      	it	eq
    56cc:	3501      	addeq	r5, #1
    56ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    56d2:	bf08      	it	eq
    56d4:	f026 0601 	biceq.w	r6, r6, #1
    56d8:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    56dc:	4630      	mov	r0, r6
    56de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56e0:	2000      	movs	r0, #0
    56e2:	490f      	ldr	r1, [pc, #60]	; (5720 <__aeabi_dsub+0x1d4>)
    56e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56e6:	460e      	mov	r6, r1
    56e8:	e7d8      	b.n	569c <__aeabi_dsub+0x150>
    56ea:	4629      	mov	r1, r5
    56ec:	4630      	mov	r0, r6
    56ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56f0:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    56f4:	462b      	mov	r3, r5
    56f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    56fa:	f000 b813 	b.w	5724 <__aeabi_dadd>
    56fe:	0521      	lsls	r1, r4, #20
    5700:	4610      	mov	r0, r2
    5702:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5704:	2b00      	cmp	r3, #0
    5706:	d1b6      	bne.n	5676 <__aeabi_dsub+0x12a>
    5708:	02ea      	lsls	r2, r5, #11
    570a:	d5bd      	bpl.n	5688 <__aeabi_dsub+0x13c>
    570c:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    5710:	460e      	mov	r6, r1
    5712:	e7c7      	b.n	56a4 <__aeabi_dsub+0x158>
    5714:	4902      	ldr	r1, [pc, #8]	; (5720 <__aeabi_dsub+0x1d4>)
    5716:	4638      	mov	r0, r7
    5718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    571a:	4629      	mov	r1, r5
    571c:	4628      	mov	r0, r5
    571e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5720:	7ff80000 	.word	0x7ff80000

00005724 <__aeabi_dadd>:
    5724:	b5f0      	push	{r4, r5, r6, r7, lr}
    5726:	ea93 0601 	eors.w	r6, r3, r1
    572a:	460c      	mov	r4, r1
    572c:	f100 8087 	bmi.w	583e <__aeabi_dadd+0x11a>
    5730:	4299      	cmp	r1, r3
    5732:	4605      	mov	r5, r0
    5734:	d339      	bcc.n	57aa <__aeabi_dadd+0x86>
    5736:	f240 70ff 	movw	r0, #2047	; 0x7ff
    573a:	0d26      	lsrs	r6, r4, #20
    573c:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    5740:	4281      	cmp	r1, r0
    5742:	d03f      	beq.n	57c4 <__aeabi_dadd+0xa0>
    5744:	eba6 5713 	sub.w	r7, r6, r3, lsr #20
    5748:	428f      	cmp	r7, r1
    574a:	d04c      	beq.n	57e6 <__aeabi_dadd+0xc2>
    574c:	f3c4 0413 	ubfx	r4, r4, #0, #20
    5750:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5754:	2f1f      	cmp	r7, #31
    5756:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    575a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    575e:	d838      	bhi.n	57d2 <__aeabi_dadd+0xae>
    5760:	f1c7 0020 	rsb	r0, r7, #32
    5764:	fa03 fe00 	lsl.w	lr, r3, r0
    5768:	fa22 f107 	lsr.w	r1, r2, r7
    576c:	40fb      	lsrs	r3, r7
    576e:	ea4e 0101 	orr.w	r1, lr, r1
    5772:	441c      	add	r4, r3
    5774:	186d      	adds	r5, r5, r1
    5776:	bf28      	it	cs
    5778:	3401      	addcs	r4, #1
    577a:	fa02 f300 	lsl.w	r3, r2, r0
    577e:	02a2      	lsls	r2, r4, #10
    5780:	d529      	bpl.n	57d6 <__aeabi_dadd+0xb2>
    5782:	3501      	adds	r5, #1
    5784:	bf08      	it	eq
    5786:	3401      	addeq	r4, #1
    5788:	b90b      	cbnz	r3, 578e <__aeabi_dadd+0x6a>
    578a:	f025 0502 	bic.w	r5, r5, #2
    578e:	0533      	lsls	r3, r6, #20
    5790:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    5794:	005a      	lsls	r2, r3, #1
    5796:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    579a:	f04f 0000 	mov.w	r0, #0
    579e:	d240      	bcs.n	5822 <__aeabi_dadd+0xfe>
    57a0:	07e4      	lsls	r4, r4, #31
    57a2:	4619      	mov	r1, r3
    57a4:	ea44 0055 	orr.w	r0, r4, r5, lsr #1
    57a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57aa:	f240 70ff 	movw	r0, #2047	; 0x7ff
    57ae:	4074      	eors	r4, r6
    57b0:	4073      	eors	r3, r6
    57b2:	0d26      	lsrs	r6, r4, #20
    57b4:	4055      	eors	r5, r2
    57b6:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    57ba:	406a      	eors	r2, r5
    57bc:	4281      	cmp	r1, r0
    57be:	ea85 0502 	eor.w	r5, r5, r2
    57c2:	d1bf      	bne.n	5744 <__aeabi_dadd+0x20>
    57c4:	0323      	lsls	r3, r4, #12
    57c6:	f04f 0000 	mov.w	r0, #0
    57ca:	d136      	bne.n	583a <__aeabi_dadd+0x116>
    57cc:	4621      	mov	r1, r4
    57ce:	4628      	mov	r0, r5
    57d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57d2:	2f35      	cmp	r7, #53	; 0x35
    57d4:	d911      	bls.n	57fa <__aeabi_dadd+0xd6>
    57d6:	2b00      	cmp	r3, #0
    57d8:	f106 36ff 	add.w	r6, r6, #4294967295
    57dc:	db24      	blt.n	5828 <__aeabi_dadd+0x104>
    57de:	eb04 5106 	add.w	r1, r4, r6, lsl #20
    57e2:	4628      	mov	r0, r5
    57e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57e6:	f240 73fe 	movw	r3, #2046	; 0x7fe
    57ea:	429f      	cmp	r7, r3
    57ec:	d8ea      	bhi.n	57c4 <__aeabi_dadd+0xa0>
    57ee:	2f00      	cmp	r7, #0
    57f0:	d1ec      	bne.n	57cc <__aeabi_dadd+0xa8>
    57f2:	f004 4100 	and.w	r1, r4, #2147483648	; 0x80000000
    57f6:	4638      	mov	r0, r7
    57f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57fa:	f1a7 0120 	sub.w	r1, r7, #32
    57fe:	fa23 f001 	lsr.w	r0, r3, r1
    5802:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    5806:	40bb      	lsls	r3, r7
    5808:	fa22 f101 	lsr.w	r1, r2, r1
    580c:	182d      	adds	r5, r5, r0
    580e:	ea43 0301 	orr.w	r3, r3, r1
    5812:	d31b      	bcc.n	584c <__aeabi_dadd+0x128>
    5814:	0612      	lsls	r2, r2, #24
    5816:	f104 0401 	add.w	r4, r4, #1
    581a:	d0b0      	beq.n	577e <__aeabi_dadd+0x5a>
    581c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    5820:	e7ad      	b.n	577e <__aeabi_dadd+0x5a>
    5822:	3601      	adds	r6, #1
    5824:	0531      	lsls	r1, r6, #20
    5826:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5828:	3501      	adds	r5, #1
    582a:	bf08      	it	eq
    582c:	3401      	addeq	r4, #1
    582e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5832:	bf08      	it	eq
    5834:	f025 0501 	biceq.w	r5, r5, #1
    5838:	e7d1      	b.n	57de <__aeabi_dadd+0xba>
    583a:	4906      	ldr	r1, [pc, #24]	; (5854 <__aeabi_dadd+0x130>)
    583c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    583e:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    5842:	462b      	mov	r3, r5
    5844:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5848:	f7ff be80 	b.w	554c <__aeabi_dsub>
    584c:	0612      	lsls	r2, r2, #24
    584e:	d1e5      	bne.n	581c <__aeabi_dadd+0xf8>
    5850:	e7c1      	b.n	57d6 <__aeabi_dadd+0xb2>
    5852:	bf00      	nop
    5854:	7ff80000 	.word	0x7ff80000

00005858 <__aeabi_d2iz>:
    5858:	02cb      	lsls	r3, r1, #11
    585a:	0d0a      	lsrs	r2, r1, #20
    585c:	ea43 5050 	orr.w	r0, r3, r0, lsr #21
    5860:	f5c2 6383 	rsb	r3, r2, #1048	; 0x418
    5864:	3306      	adds	r3, #6
    5866:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    586a:	2bff      	cmp	r3, #255	; 0xff
    586c:	fa20 f003 	lsr.w	r0, r0, r3
    5870:	d90f      	bls.n	5892 <__aeabi_d2iz+0x3a>
    5872:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    5876:	d00d      	beq.n	5894 <__aeabi_d2iz+0x3c>
    5878:	f011 4080 	ands.w	r0, r1, #1073741824	; 0x40000000
    587c:	d009      	beq.n	5892 <__aeabi_d2iz+0x3a>
    587e:	004b      	lsls	r3, r1, #1
    5880:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    5884:	d804      	bhi.n	5890 <__aeabi_d2iz+0x38>
    5886:	0fc8      	lsrs	r0, r1, #31
    5888:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    588c:	3801      	subs	r0, #1
    588e:	4770      	bx	lr
    5890:	2000      	movs	r0, #0
    5892:	4770      	bx	lr
    5894:	4240      	negs	r0, r0
    5896:	4770      	bx	lr

00005898 <__bhs_ui2d>:
    5898:	b1f0      	cbz	r0, 58d8 <__bhs_ui2d+0x40>
    589a:	0c03      	lsrs	r3, r0, #16
    589c:	bf0c      	ite	eq
    589e:	0400      	lsleq	r0, r0, #16
    58a0:	f101 7180 	addne.w	r1, r1, #16777216	; 0x1000000
    58a4:	0e03      	lsrs	r3, r0, #24
    58a6:	bf0c      	ite	eq
    58a8:	0200      	lsleq	r0, r0, #8
    58aa:	f501 0100 	addne.w	r1, r1, #8388608	; 0x800000
    58ae:	0f03      	lsrs	r3, r0, #28
    58b0:	bf0c      	ite	eq
    58b2:	0100      	lsleq	r0, r0, #4
    58b4:	f501 0180 	addne.w	r1, r1, #4194304	; 0x400000
    58b8:	0f83      	lsrs	r3, r0, #30
    58ba:	bf0c      	ite	eq
    58bc:	0080      	lsleq	r0, r0, #2
    58be:	f501 1100 	addne.w	r1, r1, #2097152	; 0x200000
    58c2:	2800      	cmp	r0, #0
    58c4:	bfac      	ite	ge
    58c6:	0040      	lslge	r0, r0, #1
    58c8:	f501 1180 	addlt.w	r1, r1, #1048576	; 0x100000
    58cc:	eb01 23e0 	add.w	r3, r1, r0, asr #11
    58d0:	0542      	lsls	r2, r0, #21
    58d2:	4610      	mov	r0, r2
    58d4:	4619      	mov	r1, r3
    58d6:	4770      	bx	lr
    58d8:	4603      	mov	r3, r0
    58da:	4619      	mov	r1, r3
    58dc:	4770      	bx	lr
    58de:	bf00      	nop

000058e0 <__aeabi_i2d>:
    58e0:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
    58e4:	0fc3      	lsrs	r3, r0, #31
    58e6:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
    58ea:	18d0      	adds	r0, r2, r3
    58ec:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    58f0:	f7ff bfd2 	b.w	5898 <__bhs_ui2d>

000058f4 <__aeabi_dcmpeq>:
    58f4:	b510      	push	{r4, lr}
    58f6:	004c      	lsls	r4, r1, #1
    58f8:	ea54 0e00 	orrs.w	lr, r4, r0
    58fc:	d102      	bne.n	5904 <__aeabi_dcmpeq+0x10>
    58fe:	ea52 0e43 	orrs.w	lr, r2, r3, lsl #1
    5902:	d00b      	beq.n	591c <__aeabi_dcmpeq+0x28>
    5904:	4299      	cmp	r1, r3
    5906:	d001      	beq.n	590c <__aeabi_dcmpeq+0x18>
    5908:	2000      	movs	r0, #0
    590a:	bd10      	pop	{r4, pc}
    590c:	4290      	cmp	r0, r2
    590e:	d1fb      	bne.n	5908 <__aeabi_dcmpeq+0x14>
    5910:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5914:	bf8c      	ite	hi
    5916:	2000      	movhi	r0, #0
    5918:	2001      	movls	r0, #1
    591a:	bd10      	pop	{r4, pc}
    591c:	2001      	movs	r0, #1
    591e:	bd10      	pop	{r4, pc}

00005920 <__aeabi_dcmplt>:
    5920:	b430      	push	{r4, r5}
    5922:	ea53 0401 	orrs.w	r4, r3, r1
    5926:	d409      	bmi.n	593c <__aeabi_dcmplt+0x1c>
    5928:	005c      	lsls	r4, r3, #1
    592a:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    592e:	d802      	bhi.n	5936 <__aeabi_dcmplt+0x16>
    5930:	4299      	cmp	r1, r3
    5932:	d317      	bcc.n	5964 <__aeabi_dcmplt+0x44>
    5934:	d019      	beq.n	596a <__aeabi_dcmplt+0x4a>
    5936:	2000      	movs	r0, #0
    5938:	bc30      	pop	{r4, r5}
    593a:	4770      	bx	lr
    593c:	004d      	lsls	r5, r1, #1
    593e:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    5942:	d8f8      	bhi.n	5936 <__aeabi_dcmplt+0x16>
    5944:	005c      	lsls	r4, r3, #1
    5946:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    594a:	d8f4      	bhi.n	5936 <__aeabi_dcmplt+0x16>
    594c:	4305      	orrs	r5, r0
    594e:	d101      	bne.n	5954 <__aeabi_dcmplt+0x34>
    5950:	4314      	orrs	r4, r2
    5952:	d010      	beq.n	5976 <__aeabi_dcmplt+0x56>
    5954:	4299      	cmp	r1, r3
    5956:	d805      	bhi.n	5964 <__aeabi_dcmplt+0x44>
    5958:	d1ed      	bne.n	5936 <__aeabi_dcmplt+0x16>
    595a:	4290      	cmp	r0, r2
    595c:	bf94      	ite	ls
    595e:	2000      	movls	r0, #0
    5960:	2001      	movhi	r0, #1
    5962:	e7e9      	b.n	5938 <__aeabi_dcmplt+0x18>
    5964:	2001      	movs	r0, #1
    5966:	bc30      	pop	{r4, r5}
    5968:	4770      	bx	lr
    596a:	4290      	cmp	r0, r2
    596c:	bf2c      	ite	cs
    596e:	2000      	movcs	r0, #0
    5970:	2001      	movcc	r0, #1
    5972:	bc30      	pop	{r4, r5}
    5974:	4770      	bx	lr
    5976:	4620      	mov	r0, r4
    5978:	e7de      	b.n	5938 <__aeabi_dcmplt+0x18>
    597a:	bf00      	nop

0000597c <__aeabi_dcmple>:
    597c:	b430      	push	{r4, r5}
    597e:	ea53 0401 	orrs.w	r4, r3, r1
    5982:	d409      	bmi.n	5998 <__aeabi_dcmple+0x1c>
    5984:	005c      	lsls	r4, r3, #1
    5986:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    598a:	d802      	bhi.n	5992 <__aeabi_dcmple+0x16>
    598c:	4299      	cmp	r1, r3
    598e:	d319      	bcc.n	59c4 <__aeabi_dcmple+0x48>
    5990:	d01b      	beq.n	59ca <__aeabi_dcmple+0x4e>
    5992:	2000      	movs	r0, #0
    5994:	bc30      	pop	{r4, r5}
    5996:	4770      	bx	lr
    5998:	004c      	lsls	r4, r1, #1
    599a:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    599e:	d8f8      	bhi.n	5992 <__aeabi_dcmple+0x16>
    59a0:	005d      	lsls	r5, r3, #1
    59a2:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    59a6:	d8f4      	bhi.n	5992 <__aeabi_dcmple+0x16>
    59a8:	4299      	cmp	r1, r3
    59aa:	d80b      	bhi.n	59c4 <__aeabi_dcmple+0x48>
    59ac:	d008      	beq.n	59c0 <__aeabi_dcmple+0x44>
    59ae:	ea54 0300 	orrs.w	r3, r4, r0
    59b2:	d1ee      	bne.n	5992 <__aeabi_dcmple+0x16>
    59b4:	ea55 0302 	orrs.w	r3, r5, r2
    59b8:	bf0c      	ite	eq
    59ba:	2001      	moveq	r0, #1
    59bc:	2000      	movne	r0, #0
    59be:	e7e9      	b.n	5994 <__aeabi_dcmple+0x18>
    59c0:	4290      	cmp	r0, r2
    59c2:	d3f4      	bcc.n	59ae <__aeabi_dcmple+0x32>
    59c4:	bc30      	pop	{r4, r5}
    59c6:	2001      	movs	r0, #1
    59c8:	4770      	bx	lr
    59ca:	4290      	cmp	r0, r2
    59cc:	bf8c      	ite	hi
    59ce:	2000      	movhi	r0, #0
    59d0:	2001      	movls	r0, #1
    59d2:	bc30      	pop	{r4, r5}
    59d4:	4770      	bx	lr
    59d6:	bf00      	nop

000059d8 <__aeabi_dcmpge>:
    59d8:	b430      	push	{r4, r5}
    59da:	ea53 0401 	orrs.w	r4, r3, r1
    59de:	ea4f 0441 	mov.w	r4, r1, lsl #1
    59e2:	d408      	bmi.n	59f6 <__aeabi_dcmpge+0x1e>
    59e4:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    59e8:	d802      	bhi.n	59f0 <__aeabi_dcmpge+0x18>
    59ea:	4299      	cmp	r1, r3
    59ec:	d818      	bhi.n	5a20 <__aeabi_dcmpge+0x48>
    59ee:	d01a      	beq.n	5a26 <__aeabi_dcmpge+0x4e>
    59f0:	2000      	movs	r0, #0
    59f2:	bc30      	pop	{r4, r5}
    59f4:	4770      	bx	lr
    59f6:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    59fa:	d8f9      	bhi.n	59f0 <__aeabi_dcmpge+0x18>
    59fc:	005d      	lsls	r5, r3, #1
    59fe:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    5a02:	d8f5      	bhi.n	59f0 <__aeabi_dcmpge+0x18>
    5a04:	4299      	cmp	r1, r3
    5a06:	d30b      	bcc.n	5a20 <__aeabi_dcmpge+0x48>
    5a08:	d008      	beq.n	5a1c <__aeabi_dcmpge+0x44>
    5a0a:	ea54 0300 	orrs.w	r3, r4, r0
    5a0e:	d1ef      	bne.n	59f0 <__aeabi_dcmpge+0x18>
    5a10:	ea55 0302 	orrs.w	r3, r5, r2
    5a14:	bf0c      	ite	eq
    5a16:	2001      	moveq	r0, #1
    5a18:	2000      	movne	r0, #0
    5a1a:	e7ea      	b.n	59f2 <__aeabi_dcmpge+0x1a>
    5a1c:	4290      	cmp	r0, r2
    5a1e:	d8f4      	bhi.n	5a0a <__aeabi_dcmpge+0x32>
    5a20:	bc30      	pop	{r4, r5}
    5a22:	2001      	movs	r0, #1
    5a24:	4770      	bx	lr
    5a26:	4290      	cmp	r0, r2
    5a28:	bf34      	ite	cc
    5a2a:	2000      	movcc	r0, #0
    5a2c:	2001      	movcs	r0, #1
    5a2e:	bc30      	pop	{r4, r5}
    5a30:	4770      	bx	lr
    5a32:	bf00      	nop

00005a34 <__aeabi_lowlevel_memset>:
    5a34:	4603      	mov	r3, r0
    5a36:	f013 0f03 	tst.w	r3, #3
    5a3a:	d10e      	bne.n	5a5a <memset1a>
    5a3c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5a40:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    5a44:	ea41 4101 	orr.w	r1, r1, r1, lsl #16

00005a48 <__bhs_memset4>:
    5a48:	3a04      	subs	r2, #4

00005a4a <memset4>:
    5a4a:	bf24      	itt	cs
    5a4c:	f843 1b04 	strcs.w	r1, [r3], #4
    5a50:	f1b2 0204 	subscs.w	r2, r2, #4
    5a54:	d2f9      	bcs.n	5a4a <memset4>

00005a56 <memset1>:
    5a56:	f102 0204 	add.w	r2, r2, #4

00005a5a <memset1a>:
    5a5a:	3a01      	subs	r2, #1
    5a5c:	bf24      	itt	cs
    5a5e:	f803 1b01 	strbcs.w	r1, [r3], #1
    5a62:	e7fa      	bcs.n	5a5a <memset1a>
    5a64:	4770      	bx	lr

00005a66 <__sys_appexit>:
    5a66:	e7fe      	b.n	5a66 <__sys_appexit>

00005a68 <__sys_close>:
    5a68:	f04f 30ff 	mov.w	r0, #4294967295
    5a6c:	4770      	bx	lr

00005a6e <__sys_flen>:
    5a6e:	f04f 30ff 	mov.w	r0, #4294967295
    5a72:	4770      	bx	lr

00005a74 <__sys_istty>:
    5a74:	f04f 30ff 	mov.w	r0, #4294967295
    5a78:	4770      	bx	lr

00005a7a <__sys_remove>:
    5a7a:	f04f 30ff 	mov.w	r0, #4294967295
    5a7e:	4770      	bx	lr

00005a80 <__sys_seek>:
    5a80:	f04f 30ff 	mov.w	r0, #4294967295
    5a84:	4770      	bx	lr

00005a86 <__sys_tmpnam>:
    5a86:	f04f 30ff 	mov.w	r0, #4294967295
    5a8a:	4770      	bx	lr

00005a8c <__sys_write>:
    5a8c:	4610      	mov	r0, r2
    5a8e:	4770      	bx	lr
    5a90:	3e2d2d2d 	.word	0x3e2d2d2d
    5a94:	0d732520 	.word	0x0d732520
    5a98:	0000000a 	.word	0x0000000a
    5a9c:	0a0d7325 	.word	0x0a0d7325
    5aa0:	00000000 	.word	0x00000000
    5aa4:	512b5441 	.word	0x512b5441
    5aa8:	3d445249 	.word	0x3d445249
    5aac:	2c312c31 	.word	0x2c312c31
    5ab0:	31312c30 	.word	0x31312c30
    5ab4:	00003030 	.word	0x00003030
    5ab8:	65746e45 	.word	0x65746e45
    5abc:	20646572 	.word	0x20646572
    5ac0:	5f4d5347 	.word	0x5f4d5347
    5ac4:	6e6e6f43 	.word	0x6e6e6f43
    5ac8:	54746365 	.word	0x54746365
    5acc:	6972546f 	.word	0x6972546f
    5ad0:	6770556f 	.word	0x6770556f
    5ad4:	65646172 	.word	0x65646172
    5ad8:	76726553 	.word	0x76726553
    5adc:	00007265 	.word	0x00007265
    5ae0:	00495441 	.word	0x00495441
    5ae4:	512b5441 	.word	0x512b5441
    5ae8:	43474649 	.word	0x43474649
    5aec:	313d544e 	.word	0x313d544e
    5af0:	00000000 	.word	0x00000000
    5af4:	512b5441 	.word	0x512b5441
    5af8:	47534349 	.word	0x47534349
    5afc:	2c313d50 	.word	0x2c313d50
    5b00:	22732522 	.word	0x22732522
    5b04:	7325222c 	.word	0x7325222c
    5b08:	25222c22 	.word	0x25222c22
    5b0c:	00002273 	.word	0x00002273
    5b10:	512b5441 	.word	0x512b5441
    5b14:	58554d49 	.word	0x58554d49
    5b18:	0000303d 	.word	0x0000303d
    5b1c:	512b5441 	.word	0x512b5441
    5b20:	54414256 	.word	0x54414256
    5b24:	2c303d54 	.word	0x2c303d54
    5b28:	30303533 	.word	0x30303533
    5b2c:	0000302c 	.word	0x0000302c
    5b30:	512b5441 	.word	0x512b5441
    5b34:	54414256 	.word	0x54414256
    5b38:	2c313d54 	.word	0x2c313d54
    5b3c:	30303333 	.word	0x30303333
    5b40:	0000302c 	.word	0x0000302c
    5b44:	512b5441 	.word	0x512b5441
    5b48:	4f485349 	.word	0x4f485349
    5b4c:	3d415257 	.word	0x3d415257
    5b50:	00000031 	.word	0x00000031
    5b54:	512b5441 	.word	0x512b5441
    5b58:	4f485349 	.word	0x4f485349
    5b5c:	3d545057 	.word	0x3d545057
    5b60:	00000031 	.word	0x00000031
    5b64:	512b5441 	.word	0x512b5441
    5b68:	49444e49 	.word	0x49444e49
    5b6c:	0000303d 	.word	0x0000303d
    5b70:	512b5441 	.word	0x512b5441
    5b74:	41454849 	.word	0x41454849
    5b78:	00313d44 	.word	0x00313d44
    5b7c:	512b5441 	.word	0x512b5441
    5b80:	444f4d49 	.word	0x444f4d49
    5b84:	00303d45 	.word	0x00303d45
    5b88:	512b5441 	.word	0x512b5441
    5b8c:	534e4449 	.word	0x534e4449
    5b90:	313d5049 	.word	0x313d5049
    5b94:	00000000 	.word	0x00000000
    5b98:	512b5441 	.word	0x512b5441
    5b9c:	534e4449 	.word	0x534e4449
    5ba0:	303d5049 	.word	0x303d5049
    5ba4:	00000000 	.word	0x00000000
    5ba8:	512b5441 	.word	0x512b5441
    5bac:	4c435047 	.word	0x4c435047
    5bb0:	3d535341 	.word	0x3d535341
    5bb4:	00003231 	.word	0x00003231
    5bb8:	00005441 	.word	0x00005441
    5bbc:	512b5441 	.word	0x512b5441
    5bc0:	45504f49 	.word	0x45504f49
    5bc4:	54223d4e 	.word	0x54223d4e
    5bc8:	2c225043 	.word	0x2c225043
    5bcc:	22732522 	.word	0x22732522
    5bd0:	0d73252c 	.word	0x0d73252c
    5bd4:	0000000a 	.word	0x0000000a
    5bd8:	4c494146 	.word	0x4c494146
    5bdc:	00000000 	.word	0x00000000
    5be0:	4e4e4f43 	.word	0x4e4e4f43
    5be4:	20544345 	.word	0x20544345
    5be8:	00004b4f 	.word	0x00004b4f
    5bec:	45524c41 	.word	0x45524c41
    5bf0:	20594441 	.word	0x20594441
    5bf4:	4e4e4f43 	.word	0x4e4e4f43
    5bf8:	00544345 	.word	0x00544345
    5bfc:	6e6e6f43 	.word	0x6e6e6f43
    5c00:	65746365 	.word	0x65746365
    5c04:	6f742064 	.word	0x6f742064
    5c08:	65687420 	.word	0x65687420
    5c0c:	72657320 	.word	0x72657320
    5c10:	2e726576 	.word	0x2e726576
    5c14:	00000000 	.word	0x00000000
    5c18:	504f4951 	.word	0x504f4951
    5c1c:	66204e45 	.word	0x66204e45
    5c20:	656c6961 	.word	0x656c6961
    5c24:	00002e64 	.word	0x00002e64
    5c28:	64726148 	.word	0x64726148
    5c2c:	73657220 	.word	0x73657220
    5c30:	69747465 	.word	0x69747465
    5c34:	6d20676e 	.word	0x6d20676e
    5c38:	6c75646f 	.word	0x6c75646f
    5c3c:	00002e65 	.word	0x00002e65
    5c40:	6e6e6f63 	.word	0x6e6e6f63
    5c44:	69746365 	.word	0x69746365
    5c48:	61466e6f 	.word	0x61466e6f
    5c4c:	6f436c69 	.word	0x6f436c69
    5c50:	20746e75 	.word	0x20746e75
    5c54:	3034203e 	.word	0x3034203e
    5c58:	73657220 	.word	0x73657220
    5c5c:	74726174 	.word	0x74726174
    5c60:	20676e69 	.word	0x20676e69
    5c64:	75646f6d 	.word	0x75646f6d
    5c68:	002e656c 	.word	0x002e656c
    5c6c:	65746e45 	.word	0x65746e45
    5c70:	20646572 	.word	0x20646572
    5c74:	6e6e6f43 	.word	0x6e6e6f43
    5c78:	6f746365 	.word	0x6f746365
    5c7c:	6f697254 	.word	0x6f697254
    5c80:	00000000 	.word	0x00000000
    5c84:	512b5441 	.word	0x512b5441
    5c88:	49444e49 	.word	0x49444e49
    5c8c:	0000313d 	.word	0x0000313d
    5c90:	512b5441 	.word	0x512b5441
    5c94:	4c435047 	.word	0x4c435047
    5c98:	3d535341 	.word	0x3d535341
    5c9c:	00000038 	.word	0x00000038
    5ca0:	512b5441 	.word	0x512b5441
    5ca4:	45504f49 	.word	0x45504f49
    5ca8:	54223d4e 	.word	0x54223d4e
    5cac:	2c225043 	.word	0x2c225043
    5cb0:	22732522 	.word	0x22732522
    5cb4:	0d64252c 	.word	0x0d64252c
    5cb8:	00000000 	.word	0x00000000
    5cbc:	65746e45 	.word	0x65746e45
    5cc0:	20646572 	.word	0x20646572
    5cc4:	5f4d5347 	.word	0x5f4d5347
    5cc8:	646e6553 	.word	0x646e6553
    5ccc:	65536f54 	.word	0x65536f54
    5cd0:	72657672 	.word	0x72657672
    5cd4:	00504354 	.word	0x00504354
    5cd8:	512b5441 	.word	0x512b5441
    5cdc:	4e455349 	.word	0x4e455349
    5ce0:	64253d44 	.word	0x64253d44
    5ce4:	00000000 	.word	0x00000000
    5ce8:	646e6553 	.word	0x646e6553
    5cec:	204b4f20 	.word	0x204b4f20
    5cf0:	6c696877 	.word	0x6c696877
    5cf4:	2e676e69 	.word	0x2e676e69
    5cf8:	0000002e 	.word	0x0000002e
    5cfc:	444e4553 	.word	0x444e4553
    5d00:	004b4f20 	.word	0x004b4f20
    5d04:	61746144 	.word	0x61746144
    5d08:	6e657320 	.word	0x6e657320
    5d0c:	00002e74 	.word	0x00002e74
    5d10:	4f525245 	.word	0x4f525245
    5d14:	00000052 	.word	0x00000052
    5d18:	61746144 	.word	0x61746144
    5d1c:	69616620 	.word	0x69616620
    5d20:	00002e6c 	.word	0x00002e6c
    5d24:	65746e45 	.word	0x65746e45
    5d28:	20646572 	.word	0x20646572
    5d2c:	5f4d5347 	.word	0x5f4d5347
    5d30:	5f504354 	.word	0x5f504354
    5d34:	646e6553 	.word	0x646e6553
    5d38:	00000000 	.word	0x00000000
    5d3c:	512b5441 	.word	0x512b5441
    5d40:	44574f50 	.word	0x44574f50
    5d44:	0000303d 	.word	0x0000303d
    5d48:	00004b4f 	.word	0x00004b4f
    5d4c:	432b5441 	.word	0x432b5441
    5d50:	3d45454d 	.word	0x3d45454d
    5d54:	00000032 	.word	0x00000032
    5d58:	432b5441 	.word	0x432b5441
    5d5c:	3d46474d 	.word	0x3d46474d
    5d60:	00000031 	.word	0x00000031
    5d64:	432b5441 	.word	0x432b5441
    5d68:	3d494d4e 	.word	0x3d494d4e
    5d6c:	2c312c32 	.word	0x2c312c32
    5d70:	2c302c30 	.word	0x2c302c30
    5d74:	00000030 	.word	0x00000030
    5d78:	206d6953 	.word	0x206d6953
    5d7c:	64726163 	.word	0x64726163
    5d80:	61657220 	.word	0x61657220
    5d84:	2e2e7964 	.word	0x2e2e7964
    5d88:	0000000d 	.word	0x0000000d
    5d8c:	206d6953 	.word	0x206d6953
    5d90:	20746f6e 	.word	0x20746f6e
    5d94:	64616572 	.word	0x64616572
    5d98:	000d2179 	.word	0x000d2179
    5d9c:	432b5441 	.word	0x432b5441
    5da0:	3f474552 	.word	0x3f474552
    5da4:	00000000 	.word	0x00000000
    5da8:	4552432b 	.word	0x4552432b
    5dac:	00000047 	.word	0x00000047
    5db0:	0000352c 	.word	0x0000352c
    5db4:	0000312c 	.word	0x0000312c
    5db8:	65746e45 	.word	0x65746e45
    5dbc:	20646572 	.word	0x20646572
    5dc0:	63656863 	.word	0x63656863
    5dc4:	6973206b 	.word	0x6973206b
    5dc8:	6163206d 	.word	0x6163206d
    5dcc:	002e6472 	.word	0x002e6472
    5dd0:	432b5441 	.word	0x432b5441
    5dd4:	3f4e4950 	.word	0x3f4e4950
    5dd8:	00000000 	.word	0x00000000
    5ddc:	44414552 	.word	0x44414552
    5de0:	00000059 	.word	0x00000059
    5de4:	472b5441 	.word	0x472b5441
    5de8:	00004e53 	.word	0x00004e53
    5dec:	49454d49 	.word	0x49454d49
    5df0:	00203a20 	.word	0x00203a20
    5df4:	432b5441 	.word	0x432b5441
    5df8:	00494d49 	.word	0x00494d49
    5dfc:	49534d49 	.word	0x49534d49
    5e00:	00203a20 	.word	0x00203a20
    5e04:	31455441 	.word	0x31455441
    5e08:	00000000 	.word	0x00000000
    5e0c:	4f484345 	.word	0x4f484345
    5e10:	004e4f20 	.word	0x004e4f20
    5e14:	492b5441 	.word	0x492b5441
    5e18:	313d5250 	.word	0x313d5250
    5e1c:	30323531 	.word	0x30323531
    5e20:	00000030 	.word	0x00000030
    5e24:	74746553 	.word	0x74746553
    5e28:	20676e69 	.word	0x20676e69
    5e2c:	20535047 	.word	0x20535047
    5e30:	64756162 	.word	0x64756162
    5e34:	74617220 	.word	0x74617220
    5e38:	00002065 	.word	0x00002065
    5e3c:	30455441 	.word	0x30455441
    5e40:	00000000 	.word	0x00000000
    5e44:	4f484345 	.word	0x4f484345
    5e48:	46464f20 	.word	0x46464f20
    5e4c:	00000000 	.word	0x00000000
    5e50:	512b5441 	.word	0x512b5441
    5e54:	4f4c4349 	.word	0x4f4c4349
    5e58:	00004553 	.word	0x00004553
    5e5c:	534f4c43 	.word	0x534f4c43
    5e60:	43542045 	.word	0x43542045
    5e64:	6f632050 	.word	0x6f632050
    5e68:	63656e6e 	.word	0x63656e6e
    5e6c:	6e6f6974 	.word	0x6e6f6974
    5e70:	00000020 	.word	0x00000020
    5e74:	74697257 	.word	0x74697257
    5e78:	20676e69 	.word	0x20676e69
    5e7c:	6e676973 	.word	0x6e676973
    5e80:	72757461 	.word	0x72757461
    5e84:	30203a65 	.word	0x30203a65
    5e88:	20582578 	.word	0x20582578
    5e8c:	52432020 	.word	0x52432020
    5e90:	203a2043 	.word	0x203a2043
    5e94:	0a0d5825 	.word	0x0a0d5825
    5e98:	00000000 	.word	0x00000000
    5e9c:	70657270 	.word	0x70657270
    5ea0:	64657261 	.word	0x64657261
    5ea4:	00000020 	.word	0x00000020
    5ea8:	73617245 	.word	0x73617245
    5eac:	00206465 	.word	0x00206465
    5eb0:	79706f43 	.word	0x79706f43
    5eb4:	6d615220 	.word	0x6d615220
    5eb8:	73657220 	.word	0x73657220
    5ebc:	20746c75 	.word	0x20746c75
    5ec0:	65646f63 	.word	0x65646f63
    5ec4:	25203a20 	.word	0x25203a20
    5ec8:	000a0d64 	.word	0x000a0d64
    5ecc:	69706f63 	.word	0x69706f63
    5ed0:	00206465 	.word	0x00206465
    5ed4:	6f420a0d 	.word	0x6f420a0d
    5ed8:	6e69746f 	.word	0x6e69746f
    5edc:	70752067 	.word	0x70752067
    5ee0:	00000000 	.word	0x00000000
    5ee4:	74737953 	.word	0x74737953
    5ee8:	6f436d65 	.word	0x6f436d65
    5eec:	6c436572 	.word	0x6c436572
    5ef0:	206b636f 	.word	0x206b636f
    5ef4:	6425203d 	.word	0x6425203d
    5ef8:	0d7a4820 	.word	0x0d7a4820
    5efc:	0000000a 	.word	0x0000000a
    5f00:	63656843 	.word	0x63656843
    5f04:	676e696b 	.word	0x676e696b
    5f08:	67707520 	.word	0x67707520
    5f0c:	65646172 	.word	0x65646172
    5f10:	71657220 	.word	0x71657220
    5f14:	74736575 	.word	0x74736575
    5f18:	00000000 	.word	0x00000000
    5f1c:	74737953 	.word	0x74737953
    5f20:	69206d65 	.word	0x69206d65
    5f24:	6567616d 	.word	0x6567616d
    5f28:	67707520 	.word	0x67707520
    5f2c:	65646172 	.word	0x65646172
    5f30:	71657220 	.word	0x71657220
    5f34:	74736575 	.word	0x74736575
    5f38:	00006465 	.word	0x00006465
    5f3c:	76726553 	.word	0x76726553
    5f40:	43207265 	.word	0x43207265
    5f44:	656e6e6f 	.word	0x656e6e6f
    5f48:	6f697463 	.word	0x6f697463
    5f4c:	7345206e 	.word	0x7345206e
    5f50:	6c626174 	.word	0x6c626174
    5f54:	65687369 	.word	0x65687369
    5f58:	6f742064 	.word	0x6f742064
    5f5c:	67705520 	.word	0x67705520
    5f60:	65646172 	.word	0x65646172
    5f64:	72657320 	.word	0x72657320
    5f68:	00726576 	.word	0x00726576
    5f6c:	6e776f44 	.word	0x6e776f44
    5f70:	64616f6c 	.word	0x64616f6c
    5f74:	6e696620 	.word	0x6e696620
    5f78:	65687369 	.word	0x65687369
    5f7c:	00002064 	.word	0x00002064
    5f80:	696e6946 	.word	0x696e6946
    5f84:	64656873 	.word	0x64656873
    5f88:	67707520 	.word	0x67707520
    5f8c:	69646172 	.word	0x69646172
    5f90:	0000676e 	.word	0x0000676e
    5f94:	746f6f42 	.word	0x746f6f42
    5f98:	20676e69 	.word	0x20676e69
    5f9c:	4f434553 	.word	0x4f434553
    5fa0:	5241444e 	.word	0x5241444e
    5fa4:	6d692059 	.word	0x6d692059
    5fa8:	00656761 	.word	0x00656761
    5fac:	746f6f42 	.word	0x746f6f42
    5fb0:	20676e69 	.word	0x20676e69
    5fb4:	4d495250 	.word	0x4d495250
    5fb8:	20595241 	.word	0x20595241
    5fbc:	67616d69 	.word	0x67616d69
    5fc0:	00000065 	.word	0x00000065
    5fc4:	61647055 	.word	0x61647055
    5fc8:	70206574 	.word	0x70206574
    5fcc:	6d617261 	.word	0x6d617261
    5fd0:	72657465 	.word	0x72657465
    5fd4:	73252073 	.word	0x73252073
    5fd8:	0073253a 	.word	0x0073253a
    5fdc:	63656843 	.word	0x63656843
    5fe0:	676e696b 	.word	0x676e696b
    5fe4:	20666920 	.word	0x20666920
    5fe8:	67726174 	.word	0x67726174
    5fec:	6d207465 	.word	0x6d207465
    5ff0:	726f6d65 	.word	0x726f6d65
    5ff4:	73692079 	.word	0x73692079
    5ff8:	616c6220 	.word	0x616c6220
    5ffc:	00006b6e 	.word	0x00006b6e
    6000:	67726154 	.word	0x67726154
    6004:	73207465 	.word	0x73207465
    6008:	6f746365 	.word	0x6f746365
    600c:	25282072 	.word	0x25282072
    6010:	69202964 	.word	0x69202964
    6014:	6f6e2073 	.word	0x6f6e2073
    6018:	6c622074 	.word	0x6c622074
    601c:	206b6e61 	.word	0x206b6e61
    6020:	72646461 	.word	0x72646461
    6024:	7830203a 	.word	0x7830203a
    6028:	202c5825 	.word	0x202c5825
    602c:	58257830 	.word	0x58257830
    6030:	00000000 	.word	0x00000000
    6034:	67726154 	.word	0x67726154
    6038:	73207465 	.word	0x73207465
    603c:	6f746365 	.word	0x6f746365
    6040:	25282072 	.word	0x25282072
    6044:	69202964 	.word	0x69202964
    6048:	6c622073 	.word	0x6c622073
    604c:	206b6e61 	.word	0x206b6e61
    6050:	00000000 	.word	0x00000000
    6054:	72617453 	.word	0x72617453
    6058:	676e6974 	.word	0x676e6974
    605c:	776f6420 	.word	0x776f6420
    6060:	616f6c6e 	.word	0x616f6c6e
    6064:	00000064 	.word	0x00000064
    6068:	61746f54 	.word	0x61746f54
    606c:	20796c6c 	.word	0x20796c6c
    6070:	65636572 	.word	0x65636572
    6074:	64657669 	.word	0x64657669
    6078:	25203a20 	.word	0x25203a20
    607c:	20202064 	.word	0x20202064
    6080:	6d617266 	.word	0x6d617266
    6084:	656c2065 	.word	0x656c2065
    6088:	6874676e 	.word	0x6874676e
    608c:	25203a20 	.word	0x25203a20
    6090:	000a0d64 	.word	0x000a0d64
    6094:	70657270 	.word	0x70657270
    6098:	64657261 	.word	0x64657261
    609c:	00000020 	.word	0x00000020
    60a0:	79706f43 	.word	0x79706f43
    60a4:	6d615220 	.word	0x6d615220
    60a8:	73657220 	.word	0x73657220
    60ac:	20746c75 	.word	0x20746c75
    60b0:	65646f63 	.word	0x65646f63
    60b4:	25203a20 	.word	0x25203a20
    60b8:	000a0d64 	.word	0x000a0d64
    60bc:	69706f63 	.word	0x69706f63
    60c0:	00206465 	.word	0x00206465
    60c4:	49323375 	.word	0x49323375
    60c8:	435f5041 	.word	0x435f5041
    60cc:	61706d6f 	.word	0x61706d6f
    60d0:	3a206572 	.word	0x3a206572
    60d4:	20642520 	.word	0x20642520
    60d8:	6f727720 	.word	0x6f727720
    60dc:	25206574 	.word	0x25206574
    60e0:	0a0d2064 	.word	0x0a0d2064
    60e4:	00000000 	.word	0x00000000
    60e8:	69726576 	.word	0x69726576
    60ec:	64656966 	.word	0x64656966
    60f0:	00000020 	.word	0x00000020
    60f4:	69726576 	.word	0x69726576
    60f8:	61636966 	.word	0x61636966
    60fc:	6e6f6974 	.word	0x6e6f6974
    6100:	69616620 	.word	0x69616620
    6104:	2064656c 	.word	0x2064656c
    6108:	00000000 	.word	0x00000000
    610c:	6e676953 	.word	0x6e676953
    6110:	72757461 	.word	0x72757461
    6114:	30203a65 	.word	0x30203a65
    6118:	20582578 	.word	0x20582578
    611c:	52432020 	.word	0x52432020
    6120:	203a2043 	.word	0x203a2043
    6124:	0a0d5825 	.word	0x0a0d5825
    6128:	00000000 	.word	0x00000000
    612c:	636c6143 	.word	0x636c6143
    6130:	74616c75 	.word	0x74616c75
    6134:	49206465 	.word	0x49206465
    6138:	6567616d 	.word	0x6567616d
    613c:	43524320 	.word	0x43524320
    6140:	7830203a 	.word	0x7830203a
    6144:	0a0d5825 	.word	0x0a0d5825
    6148:	00000000 	.word	0x00000000
    614c:	00000a0d 	.word	0x00000a0d
    6150:	78323025 	.word	0x78323025
    6154:	00000000 	.word	0x00000000
    6158:	73252020 	.word	0x73252020
    615c:	00000a0d 	.word	0x00000a0d
    6160:	32302520 	.word	0x32302520
    6164:	00000078 	.word	0x00000078
    6168:	00202020 	.word	0x00202020
    616c:	00445049 	.word	0x00445049
    6170:	5043542c 	.word	0x5043542c
    6174:	0000002c 	.word	0x0000002c
    6178:	00000a0d 	.word	0x00000a0d
    617c:	3a504354 	.word	0x3a504354
    6180:	00000000 	.word	0x00000000
    6184:	72617453 	.word	0x72617453
    6188:	6f642074 	.word	0x6f642074
    618c:	6f6c6e77 	.word	0x6f6c6e77
    6190:	6e696461 	.word	0x6e696461
    6194:	00000067 	.word	0x00000067
    6198:	6e6e6f43 	.word	0x6e6e6f43
    619c:	69746365 	.word	0x69746365
    61a0:	7320676e 	.word	0x7320676e
    61a4:	65746174 	.word	0x65746174
    61a8:	6d697420 	.word	0x6d697420
    61ac:	65207265 	.word	0x65207265
    61b0:	72697078 	.word	0x72697078
    61b4:	73206465 	.word	0x73206465
    61b8:	69646e65 	.word	0x69646e65
    61bc:	2020676e 	.word	0x2020676e
    61c0:	2077656e 	.word	0x2077656e
    61c4:	75716572 	.word	0x75716572
    61c8:	20747365 	.word	0x20747365
    61cc:	00000020 	.word	0x00000020
    61d0:	72206f4e 	.word	0x72206f4e
    61d4:	796c7065 	.word	0x796c7065
    61d8:	76696720 	.word	0x76696720
    61dc:	70752065 	.word	0x70752065
    61e0:	67707520 	.word	0x67707520
    61e4:	69646172 	.word	0x69646172
    61e8:	0000676e 	.word	0x0000676e
    61ec:	65636552 	.word	0x65636552
    61f0:	64657669 	.word	0x64657669
    61f4:	544f4520 	.word	0x544f4520
    61f8:	00000020 	.word	0x00000020
    61fc:	736f6c43 	.word	0x736f6c43
    6200:	20676e69 	.word	0x20676e69
    6204:	20504354 	.word	0x20504354
    6208:	6e6e6f63 	.word	0x6e6e6f63
    620c:	69746365 	.word	0x69746365
    6210:	00206e6f 	.word	0x00206e6f
    6214:	65747962 	.word	0x65747962
    6218:	756f6320 	.word	0x756f6320
    621c:	203a746e 	.word	0x203a746e
    6220:	202c6425 	.word	0x202c6425
    6224:	6b636170 	.word	0x6b636170
    6228:	6c207465 	.word	0x6c207465
    622c:	25206e65 	.word	0x25206e65
    6230:	000a0d64 	.word	0x000a0d64
    6234:	656c6966 	.word	0x656c6966
    6238:	7a697320 	.word	0x7a697320
    623c:	30203a65 	.word	0x30203a65
    6240:	2c582578 	.word	0x2c582578
    6244:	43524320 	.word	0x43524320
    6248:	7830203a 	.word	0x7830203a
    624c:	0a0d5825 	.word	0x0a0d5825
    6250:	00000000 	.word	0x00000000
    6254:	636c6143 	.word	0x636c6143
    6258:	74616c75 	.word	0x74616c75
    625c:	49206465 	.word	0x49206465
    6260:	6567616d 	.word	0x6567616d
    6264:	43524320 	.word	0x43524320
    6268:	7830203a 	.word	0x7830203a
    626c:	0a0d5825 	.word	0x0a0d5825
    6270:	00000000 	.word	0x00000000
    6274:	6d617266 	.word	0x6d617266
    6278:	756e2065 	.word	0x756e2065
    627c:	7265626d 	.word	0x7265626d
    6280:	20203a20 	.word	0x20203a20
    6284:	0a0d6425 	.word	0x0a0d6425
    6288:	00000000 	.word	0x00000000
    628c:	636c6163 	.word	0x636c6163
    6290:	74616c75 	.word	0x74616c75
    6294:	43206465 	.word	0x43206465
    6298:	3a204352 	.word	0x3a204352
    629c:	25783020 	.word	0x25783020
    62a0:	000a0d58 	.word	0x000a0d58
    62a4:	65636552 	.word	0x65636552
    62a8:	64657669 	.word	0x64657669
    62ac:	66206120 	.word	0x66206120
    62b0:	656d6172 	.word	0x656d6172
    62b4:	00000020 	.word	0x00000020
    62b8:	646e6553 	.word	0x646e6553
    62bc:	20676e69 	.word	0x20676e69
    62c0:	4b434120 	.word	0x4b434120
    62c4:	00000020 	.word	0x00000020
    62c8:	20435243 	.word	0x20435243
    62cc:	6374616d 	.word	0x6374616d
    62d0:	20736568 	.word	0x20736568
    62d4:	00000a0d 	.word	0x00000a0d
    62d8:	20435243 	.word	0x20435243
    62dc:	73656f64 	.word	0x73656f64
    62e0:	746f6e20 	.word	0x746f6e20
    62e4:	74616d20 	.word	0x74616d20
    62e8:	20206863 	.word	0x20206863
    62ec:	204b414e 	.word	0x204b414e
    62f0:	00676e69 	.word	0x00676e69
    62f4:	656d6954 	.word	0x656d6954
    62f8:	74756f20 	.word	0x74756f20
    62fc:	206e6920 	.word	0x206e6920
    6300:	45434552 	.word	0x45434552
    6304:	4e495649 	.word	0x4e495649
    6308:	20202047 	.word	0x20202047
    630c:	00000000 	.word	0x00000000
    6310:	6e776f44 	.word	0x6e776f44
    6314:	64616f6c 	.word	0x64616f6c
    6318:	6f727020 	.word	0x6f727020
    631c:	73736563 	.word	0x73736563
    6320:	69616620 	.word	0x69616620
    6324:	2064656c 	.word	0x2064656c
    6328:	69766967 	.word	0x69766967
    632c:	7520676e 	.word	0x7520676e
    6330:	70752070 	.word	0x70752070
    6334:	64617267 	.word	0x64617267
    6338:	00676e69 	.word	0x00676e69

0000633c <__ctype>:
	...
    63bc:	40404040 40404040 41414140 40404141     @@@@@@@@@AAAAA@@
    63cc:	40404040 40404040 40404040 40404040     @@@@@@@@@@@@@@@@
    63dc:	02020205 02020202 02020202 02020202     ................
    63ec:	20202020 20202020 02022020 02020202               ......
    63fc:	90909002 10909090 10101010 10101010     ................
    640c:	10101010 10101010 02101010 02020202     ................
    641c:	88888802 08888888 08080808 08080808     ................
    642c:	08080808 08080808 02080808 40020202     ...............@
	...
    64bc:	0020002b 63257830 00642570 63255830     +. .0x%cp%d.0X%c
    64cc:	00642550 63257830 2a2e252e 70786c6c     P%d.0x%c.%.*llxp
    64dc:	30006425 2e632558 6c2a2e25 2550586c     %d.0X%c.%.*llXP%
    64ec:	002d0064 00770072 6c756e28 3000296c     d.-.r.w.(null).0
    64fc:	78300058 30003000 34333231 38373635     X.0x.0.012345678
    650c:	43424139 00464544 33323130 37363534     9ABCDEF.01234567
    651c:	62613938 66656463 00000000              89abcdef....

00006528 <__huge_vall>:
    6528:	ffffffff 7fefffff 202a2a2a 7973435f     ........*** _Csy
    6538:	6c615f73 20636f6c 6c696166 000a6465     s_alloc failed..
