
secBootLoader.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
	is_gps_valid = 0;
	return FAIL;
}


double GPS_CalculateDistance() {
       0:	00 80 00 10 71 01 00 00 e9 01 00 00 f1 01 00 00     ....q...........
	char buffer[200];
	double local_prev_lat = 0;
      10:	f9 01 00 00 01 02 00 00 09 02 00 00 00 00 00 00     ................
	...
	double local_last_lat = 0;
	int count = sprintf(buffer,"Last Lat : %.10f, Last Lon= %.10f,Prev Lat : %.10f, Prev Lon= %.10f\r\r", last_lat,last_lon,prev_lat,prev_lon);
      2c:	11 02 00 00 19 02 00 00 00 00 00 00 21 02 00 00     ............!...
      3c:	d9 22 00 00 e5 2d 00 00 31 02 00 00 31 02 00 00     ."...-..1...1...
      4c:	31 02 00 00 31 02 00 00 d5 23 00 00 dd 24 00 00     1...1....#...$..
      5c:	e5 25 00 00 f1 26 00 00 31 02 00 00 dd 12 00 00     .%...&..1.......
	UARTSend(PORT_TRACE, buffer, count);
      6c:	21 16 00 00 31 02 00 00 31 02 00 00 31 02 00 00     !...1...1...1...
	if (is_gps_valid == 0 || last_lat == 0 || last_lon == 0 || prev_lat == 0 || prev_lon == 0){
      7c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      8c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      9c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      ac:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      bc:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...

000000cc <__data_section_table>:
      cc:	00006b50 	.word	0x00006b50
      d0:	10000000 	.word	0x10000000
      d4:	00000010 	.word	0x00000010
      d8:	00006b50 	.word	0x00006b50
      dc:	2007c000 	.word	0x2007c000
      e0:	00000000 	.word	0x00000000

000000e4 <__bss_section_table>:
      e4:	10000010 	.word	0x10000010
		TraceNL("GPS_CalculateDistance returns..");
      e8:	00001a38 	.word	0x00001a38
		return 0;
      ec:	2007c000 	.word	0x2007c000
      f0:	00000000 	.word	0x00000000

000000f4 <data_init>:
      f4:	b480      	push	{r7}
	}
	/////// Convert ddMM to degrees
	double R = 6371000; // m
      f6:	b089      	sub	sp, #36	; 0x24
      f8:	af00      	add	r7, sp, #0
      fa:	60f8      	str	r0, [r7, #12]
      fc:	60b9      	str	r1, [r7, #8]
      fe:	607a      	str	r2, [r7, #4]
	double dLat = (last_lat-prev_lat) * 0.0174532925; // To Radian
     100:	68bb      	ldr	r3, [r7, #8]
     102:	61fb      	str	r3, [r7, #28]
     104:	68fb      	ldr	r3, [r7, #12]
     106:	61bb      	str	r3, [r7, #24]
     108:	2300      	movs	r3, #0
     10a:	617b      	str	r3, [r7, #20]
     10c:	e00a      	b.n	124 <data_init+0x30>
     10e:	69fb      	ldr	r3, [r7, #28]
     110:	1d1a      	adds	r2, r3, #4
     112:	61fa      	str	r2, [r7, #28]
     114:	69ba      	ldr	r2, [r7, #24]
     116:	1d11      	adds	r1, r2, #4
     118:	61b9      	str	r1, [r7, #24]
     11a:	6812      	ldr	r2, [r2, #0]
     11c:	601a      	str	r2, [r3, #0]
     11e:	697b      	ldr	r3, [r7, #20]
     120:	3304      	adds	r3, #4
     122:	617b      	str	r3, [r7, #20]
     124:	697a      	ldr	r2, [r7, #20]
     126:	687b      	ldr	r3, [r7, #4]
     128:	429a      	cmp	r2, r3
	double dLon = (last_lon-prev_lon) * 0.0174532925; //To Radian
     12a:	d3f0      	bcc.n	10e <data_init+0x1a>
     12c:	3724      	adds	r7, #36	; 0x24
     12e:	46bd      	mov	sp, r7
     130:	f85d 7b04 	ldr.w	r7, [sp], #4
     134:	4770      	bx	lr
     136:	bf00      	nop

00000138 <bss_init>:
     138:	b480      	push	{r7}
     13a:	b085      	sub	sp, #20
     13c:	af00      	add	r7, sp, #0
     13e:	6078      	str	r0, [r7, #4]
     140:	6039      	str	r1, [r7, #0]
     142:	687b      	ldr	r3, [r7, #4]
     144:	60fb      	str	r3, [r7, #12]
     146:	2300      	movs	r3, #0
     148:	60bb      	str	r3, [r7, #8]
     14a:	e007      	b.n	15c <bss_init+0x24>
     14c:	68fb      	ldr	r3, [r7, #12]
     14e:	1d1a      	adds	r2, r3, #4
     150:	60fa      	str	r2, [r7, #12]
     152:	2200      	movs	r2, #0
	local_prev_lat = prev_lat * 0.0174532925;
     154:	601a      	str	r2, [r3, #0]
     156:	68bb      	ldr	r3, [r7, #8]
     158:	3304      	adds	r3, #4
     15a:	60bb      	str	r3, [r7, #8]
     15c:	68ba      	ldr	r2, [r7, #8]
     15e:	683b      	ldr	r3, [r7, #0]
     160:	429a      	cmp	r2, r3
     162:	d3f3      	bcc.n	14c <bss_init+0x14>
     164:	3714      	adds	r7, #20
     166:	46bd      	mov	sp, r7
     168:	f85d 7b04 	ldr.w	r7, [sp], #4
     16c:	4770      	bx	lr
     16e:	bf00      	nop

00000170 <ResetISR>:
     170:	b580      	push	{r7, lr}
     172:	b084      	sub	sp, #16
	local_last_lat = last_lat * 0.0174532925;
     174:	af00      	add	r7, sp, #0
     176:	4b19      	ldr	r3, [pc, #100]	; (1dc <ResetISR+0x6c>)
     178:	60fb      	str	r3, [r7, #12]
     17a:	e013      	b.n	1a4 <ResetISR+0x34>
     17c:	68fb      	ldr	r3, [r7, #12]
     17e:	1d1a      	adds	r2, r3, #4
     180:	60fa      	str	r2, [r7, #12]
     182:	681b      	ldr	r3, [r3, #0]
     184:	60bb      	str	r3, [r7, #8]
     186:	68fb      	ldr	r3, [r7, #12]
     188:	1d1a      	adds	r2, r3, #4
     18a:	60fa      	str	r2, [r7, #12]
     18c:	681b      	ldr	r3, [r3, #0]
     18e:	607b      	str	r3, [r7, #4]
     190:	68fb      	ldr	r3, [r7, #12]
     192:	1d1a      	adds	r2, r3, #4
	double a = sin(dLat/2) * sin(dLat/2) + sin(dLon/2) * sin(dLon/2) * cos(local_last_lat) * cos(local_last_lat);
     194:	60fa      	str	r2, [r7, #12]
     196:	681b      	ldr	r3, [r3, #0]
     198:	603b      	str	r3, [r7, #0]
     19a:	68b8      	ldr	r0, [r7, #8]
     19c:	6879      	ldr	r1, [r7, #4]
     19e:	683a      	ldr	r2, [r7, #0]
     1a0:	f7ff ffa8 	bl	f4 <data_init>
     1a4:	68fb      	ldr	r3, [r7, #12]
     1a6:	4a0e      	ldr	r2, [pc, #56]	; (1e0 <ResetISR+0x70>)
     1a8:	4293      	cmp	r3, r2
     1aa:	d3e7      	bcc.n	17c <ResetISR+0xc>
     1ac:	e00d      	b.n	1ca <ResetISR+0x5a>
     1ae:	68fb      	ldr	r3, [r7, #12]
     1b0:	1d1a      	adds	r2, r3, #4
     1b2:	60fa      	str	r2, [r7, #12]
     1b4:	681b      	ldr	r3, [r3, #0]
     1b6:	607b      	str	r3, [r7, #4]
     1b8:	68fb      	ldr	r3, [r7, #12]
     1ba:	1d1a      	adds	r2, r3, #4
     1bc:	60fa      	str	r2, [r7, #12]
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	603b      	str	r3, [r7, #0]
     1c2:	6878      	ldr	r0, [r7, #4]
     1c4:	6839      	ldr	r1, [r7, #0]
     1c6:	f7ff ffb7 	bl	138 <bss_init>
     1ca:	68fb      	ldr	r3, [r7, #12]
     1cc:	4a05      	ldr	r2, [pc, #20]	; (1e4 <ResetISR+0x74>)
     1ce:	4293      	cmp	r3, r2
     1d0:	d3ed      	bcc.n	1ae <ResetISR+0x3e>
     1d2:	f003 f821 	bl	3218 <SystemInit>
     1d6:	f003 f88f 	bl	32f8 <__main>
     1da:	e7fe      	b.n	1da <ResetISR+0x6a>
     1dc:	000000cc 	.word	0x000000cc
     1e0:	000000e4 	.word	0x000000e4
     1e4:	000000f4 	.word	0x000000f4

000001e8 <NMI_Handler>:
     1e8:	b480      	push	{r7}
     1ea:	af00      	add	r7, sp, #0
     1ec:	e7fe      	b.n	1ec <NMI_Handler+0x4>
     1ee:	bf00      	nop

000001f0 <HardFault_Handler>:
     1f0:	b480      	push	{r7}
     1f2:	af00      	add	r7, sp, #0
     1f4:	e7fe      	b.n	1f4 <HardFault_Handler+0x4>
     1f6:	bf00      	nop

000001f8 <MemManage_Handler>:
     1f8:	b480      	push	{r7}
     1fa:	af00      	add	r7, sp, #0
     1fc:	e7fe      	b.n	1fc <MemManage_Handler+0x4>
     1fe:	bf00      	nop

00000200 <BusFault_Handler>:
     200:	b480      	push	{r7}
     202:	af00      	add	r7, sp, #0
     204:	e7fe      	b.n	204 <BusFault_Handler+0x4>
     206:	bf00      	nop

00000208 <UsageFault_Handler>:
     208:	b480      	push	{r7}
     20a:	af00      	add	r7, sp, #0
     20c:	e7fe      	b.n	20c <UsageFault_Handler+0x4>
     20e:	bf00      	nop

00000210 <SVC_Handler>:
     210:	b480      	push	{r7}
     212:	af00      	add	r7, sp, #0
     214:	e7fe      	b.n	214 <SVC_Handler+0x4>
     216:	bf00      	nop

00000218 <DebugMon_Handler>:
     218:	b480      	push	{r7}
     21a:	af00      	add	r7, sp, #0
     21c:	e7fe      	b.n	21c <DebugMon_Handler+0x4>
     21e:	bf00      	nop

00000220 <PendSV_Handler>:
     220:	b480      	push	{r7}
     222:	af00      	add	r7, sp, #0
     224:	e7fe      	b.n	224 <PendSV_Handler+0x4>
     226:	bf00      	nop
     228:	b480      	push	{r7}
     22a:	af00      	add	r7, sp, #0
     22c:	e7fe      	b.n	22c <PendSV_Handler+0xc>
     22e:	bf00      	nop

00000230 <ADC_IRQHandler>:
     230:	b480      	push	{r7}
     232:	af00      	add	r7, sp, #0
     234:	e7fe      	b.n	234 <ADC_IRQHandler+0x4>
     236:	bf00      	nop
     238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     23c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     24c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     25c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     26c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     27c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	double c = 2 * atan2(sqrt(a), sqrt(1-a));
     280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     28c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     29c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	double d = R * c;
     2c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
	if (d > 50000) {
     2dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
		TraceNL("GPS_CalculateDistance greater than 50000, returning 0.");
     2f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
		return 0;
     2f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000002fc <CRP_WORD>:
     2fc:	ffff ffff                                   ....

00000300 <LoadParams>:
     300:	b580      	push	{r7, lr}
     302:	b0b2      	sub	sp, #200	; 0xc8
     304:	af00      	add	r7, sp, #0
     306:	4b54      	ldr	r3, [pc, #336]	; (458 <LoadParams+0x158>)
     308:	681b      	ldr	r3, [r3, #0]
     30a:	2200      	movs	r2, #0
     30c:	461a      	mov	r2, r3
     30e:	4610      	mov	r0, r2
     310:	4952      	ldr	r1, [pc, #328]	; (45c <LoadParams+0x15c>)
     312:	f000 fb2b 	bl	96c <EEPROM_LoadString>
     316:	4b51      	ldr	r3, [pc, #324]	; (45c <LoadParams+0x15c>)
     318:	781b      	ldrb	r3, [r3, #0]
     31a:	3380      	adds	r3, #128	; 0x80
     31c:	4a50      	ldr	r2, [pc, #320]	; (460 <LoadParams+0x160>)
     31e:	5cd3      	ldrb	r3, [r2, r3]
     320:	f003 0338 	and.w	r3, r3, #56	; 0x38
     324:	2b00      	cmp	r3, #0
     326:	d00c      	beq.n	342 <LoadParams+0x42>
     328:	484c      	ldr	r0, [pc, #304]	; (45c <LoadParams+0x15c>)
     32a:	f004 fd1d 	bl	4d68 <strlen>
     32e:	4603      	mov	r3, r0
     330:	2b04      	cmp	r3, #4
     332:	d906      	bls.n	342 <LoadParams+0x42>
     334:	4849      	ldr	r0, [pc, #292]	; (45c <LoadParams+0x15c>)
     336:	212e      	movs	r1, #46	; 0x2e
     338:	f004 fce8 	bl	4d0c <strchr>
	}
	TraceNL("*****************");
     33c:	4603      	mov	r3, r0
     33e:	2b00      	cmp	r3, #0
     340:	d103      	bne.n	34a <LoadParams+0x4a>
	TraceNL("*******");
     342:	4846      	ldr	r0, [pc, #280]	; (45c <LoadParams+0x15c>)
     344:	4947      	ldr	r1, [pc, #284]	; (464 <LoadParams+0x164>)
     346:	f004 fcee 	bl	4d26 <strcpy>
	TraceNL("**");
     34a:	4b47      	ldr	r3, [pc, #284]	; (468 <LoadParams+0x168>)
     34c:	681b      	ldr	r3, [r3, #0]
	TraceNL("*");
     34e:	2200      	movs	r2, #0
     350:	461a      	mov	r2, r3
     352:	4610      	mov	r0, r2
	count = sprintf(buffer,"GPS Distance= %.10f\r", d);
     354:	f000 fa98 	bl	888 <EEPROM_LoadInt64>
     358:	4602      	mov	r2, r0
     35a:	460b      	mov	r3, r1
     35c:	4b43      	ldr	r3, [pc, #268]	; (46c <LoadParams+0x16c>)
     35e:	601a      	str	r2, [r3, #0]
     360:	4b42      	ldr	r3, [pc, #264]	; (46c <LoadParams+0x16c>)
     362:	681b      	ldr	r3, [r3, #0]
     364:	2b00      	cmp	r3, #0
	UARTSend(PORT_TRACE, buffer, count);
     366:	d005      	beq.n	374 <LoadParams+0x74>
     368:	4b40      	ldr	r3, [pc, #256]	; (46c <LoadParams+0x16c>)
     36a:	681b      	ldr	r3, [r3, #0]
     36c:	f64f 72ff 	movw	r2, #65535	; 0xffff
     370:	4293      	cmp	r3, r2
     372:	d103      	bne.n	37c <LoadParams+0x7c>
     374:	4b3d      	ldr	r3, [pc, #244]	; (46c <LoadParams+0x16c>)
	TraceNL("*****************");
     376:	f241 72c1 	movw	r2, #6081	; 0x17c1
     37a:	601a      	str	r2, [r3, #0]
	TraceNL("*******");
     37c:	4b3c      	ldr	r3, [pc, #240]	; (470 <LoadParams+0x170>)
     37e:	681b      	ldr	r3, [r3, #0]
     380:	2200      	movs	r2, #0
	TraceNL("**");
     382:	461a      	mov	r2, r3
     384:	4610      	mov	r0, r2
     386:	493b      	ldr	r1, [pc, #236]	; (474 <LoadParams+0x174>)
	TraceNL("*");
     388:	f000 faf0 	bl	96c <EEPROM_LoadString>
     38c:	4b39      	ldr	r3, [pc, #228]	; (474 <LoadParams+0x174>)
	/*if (d < 1)
		d=0;*///Active in production
	return d;
     38e:	781b      	ldrb	r3, [r3, #0]
     390:	3380      	adds	r3, #128	; 0x80
}
     392:	4a33      	ldr	r2, [pc, #204]	; (460 <LoadParams+0x160>)
     394:	5cd3      	ldrb	r3, [r2, r3]
     396:	f003 0338 	and.w	r3, r3, #56	; 0x38
     39a:	2b00      	cmp	r3, #0
     39c:	d005      	beq.n	3aa <LoadParams+0xaa>
     39e:	4835      	ldr	r0, [pc, #212]	; (474 <LoadParams+0x174>)
     3a0:	f004 fce2 	bl	4d68 <strlen>
     3a4:	4603      	mov	r3, r0
     3a6:	2b02      	cmp	r3, #2
     3a8:	d803      	bhi.n	3b2 <LoadParams+0xb2>
     3aa:	4832      	ldr	r0, [pc, #200]	; (474 <LoadParams+0x174>)
     3ac:	4932      	ldr	r1, [pc, #200]	; (478 <LoadParams+0x178>)
     3ae:	f004 fcba 	bl	4d26 <strcpy>
     3b2:	4b32      	ldr	r3, [pc, #200]	; (47c <LoadParams+0x17c>)
	//LOAD APN
	EEPROM_LoadString(cal_apn, per_apn_val);
	if (isalnum(per_apn_val[0]) == 0 || strlen(per_apn_val) < 3)
		strcpy(per_apn_val, "internet");//Default value
	//LOAD APN User
	EEPROM_LoadString(cal_apn_user, per_apnuser_val);
     3b4:	681b      	ldr	r3, [r3, #0]
     3b6:	2200      	movs	r2, #0
     3b8:	461a      	mov	r2, r3
     3ba:	4610      	mov	r0, r2
     3bc:	4930      	ldr	r1, [pc, #192]	; (480 <LoadParams+0x180>)
     3be:	f000 fad5 	bl	96c <EEPROM_LoadString>
	if (isalnum(per_apnuser_val[0]) == 0 || strlen(per_apnuser_val) < 3)
     3c2:	4b2f      	ldr	r3, [pc, #188]	; (480 <LoadParams+0x180>)
     3c4:	781b      	ldrb	r3, [r3, #0]
     3c6:	3380      	adds	r3, #128	; 0x80
     3c8:	4a25      	ldr	r2, [pc, #148]	; (460 <LoadParams+0x160>)
     3ca:	5cd3      	ldrb	r3, [r2, r3]
     3cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
     3d0:	2b00      	cmp	r3, #0
     3d2:	d005      	beq.n	3e0 <LoadParams+0xe0>
     3d4:	482a      	ldr	r0, [pc, #168]	; (480 <LoadParams+0x180>)
     3d6:	f004 fcc7 	bl	4d68 <strlen>
     3da:	4603      	mov	r3, r0
     3dc:	2b02      	cmp	r3, #2
     3de:	d803      	bhi.n	3e8 <LoadParams+0xe8>
		strcpy(per_apnuser_val, "vodafone");//Default value
     3e0:	4827      	ldr	r0, [pc, #156]	; (480 <LoadParams+0x180>)
     3e2:	4928      	ldr	r1, [pc, #160]	; (484 <LoadParams+0x184>)
     3e4:	f004 fc9f 	bl	4d26 <strcpy>
	//LOAD APN Pass
	EEPROM_LoadString(cal_apn_pass, per_apnpass_val);
     3e8:	4b27      	ldr	r3, [pc, #156]	; (488 <LoadParams+0x188>)
     3ea:	681b      	ldr	r3, [r3, #0]
     3ec:	2200      	movs	r2, #0
     3ee:	461a      	mov	r2, r3
     3f0:	4610      	mov	r0, r2
     3f2:	4926      	ldr	r1, [pc, #152]	; (48c <LoadParams+0x18c>)
     3f4:	f000 faba 	bl	96c <EEPROM_LoadString>
	if (isalnum(per_apnpass_val[0]) == 0 || strlen(per_apnpass_val) < 3)
     3f8:	4b24      	ldr	r3, [pc, #144]	; (48c <LoadParams+0x18c>)
     3fa:	781b      	ldrb	r3, [r3, #0]
     3fc:	3380      	adds	r3, #128	; 0x80
     3fe:	4a18      	ldr	r2, [pc, #96]	; (460 <LoadParams+0x160>)
     400:	5cd3      	ldrb	r3, [r2, r3]
     402:	f003 0338 	and.w	r3, r3, #56	; 0x38
     406:	2b00      	cmp	r3, #0
     408:	d005      	beq.n	416 <LoadParams+0x116>
     40a:	4820      	ldr	r0, [pc, #128]	; (48c <LoadParams+0x18c>)
     40c:	f004 fcac 	bl	4d68 <strlen>
     410:	4603      	mov	r3, r0
     412:	2b02      	cmp	r3, #2
     414:	d803      	bhi.n	41e <LoadParams+0x11e>
		strcpy(per_apnpass_val, "vodafone");//Default value
     416:	481d      	ldr	r0, [pc, #116]	; (48c <LoadParams+0x18c>)
     418:	491a      	ldr	r1, [pc, #104]	; (484 <LoadParams+0x184>)
     41a:	f004 fc84 	bl	4d26 <strcpy>

	//LOAD Mileage
	per_mileage_val = EEPROM_LoadInt64(cal_mileage);
     41e:	4b1c      	ldr	r3, [pc, #112]	; (490 <LoadParams+0x190>)
     420:	681b      	ldr	r3, [r3, #0]
     422:	2200      	movs	r2, #0
     424:	461a      	mov	r2, r3
     426:	4610      	mov	r0, r2
     428:	f000 fa2e 	bl	888 <EEPROM_LoadInt64>
     42c:	4602      	mov	r2, r0
     42e:	460b      	mov	r3, r1
     430:	4918      	ldr	r1, [pc, #96]	; (494 <LoadParams+0x194>)
     432:	e9c1 2300 	strd	r2, r3, [r1]
	sprintf(buffer, "Mileage: %d\n", (int)per_mileage_val);
     436:	4b17      	ldr	r3, [pc, #92]	; (494 <LoadParams+0x194>)
     438:	e9d3 2300 	ldrd	r2, r3, [r3]
     43c:	463b      	mov	r3, r7
     43e:	4618      	mov	r0, r3
     440:	4915      	ldr	r1, [pc, #84]	; (498 <LoadParams+0x198>)
     442:	f003 f82b 	bl	349c <sprintf>
	TraceNL(buffer);
     446:	463b      	mov	r3, r7
     448:	4618      	mov	r0, r3
     44a:	f001 ff79 	bl	2340 <TraceNL>
	LoadTimings();
     44e:	f000 f825 	bl	49c <LoadTimings>

	//MODE 0 = Deep Power Down
	//MODE 1 = Power Down
}
     452:	37c8      	adds	r7, #200	; 0xc8
     454:	46bd      	mov	sp, r7
     456:	bd80      	pop	{r7, pc}
     458:	10000aa8 	.word	0x10000aa8
     45c:	10000a28 	.word	0x10000a28
     460:	0000695c 	.word	0x0000695c
     464:	00005d5c 	.word	0x00005d5c
     468:	10000aa4 	.word	0x10000aa4
     46c:	10000a98 	.word	0x10000a98
     470:	10000ae0 	.word	0x10000ae0
     474:	10000ae4 	.word	0x10000ae4
     478:	00005d6c 	.word	0x00005d6c
     47c:	10000a94 	.word	0x10000a94
     480:	10000a78 	.word	0x10000a78
     484:	00005d78 	.word	0x00005d78
     488:	10000a1c 	.word	0x10000a1c
     48c:	10000ac8 	.word	0x10000ac8
     490:	10000a68 	.word	0x10000a68
     494:	10000ab8 	.word	0x10000ab8
     498:	00005d84 	.word	0x00005d84

0000049c <LoadTimings>:

void LoadTimings() {
     49c:	b580      	push	{r7, lr}
     49e:	b0b4      	sub	sp, #208	; 0xd0
     4a0:	af00      	add	r7, sp, #0
	char buffer[200];
	//LOAD Ignition On Period
	per_ignonperiod_val = EEPROM_LoadInt64(cal_ign_on_period);
     4a2:	4b98      	ldr	r3, [pc, #608]	; (704 <LoadTimings+0x268>)
     4a4:	681b      	ldr	r3, [r3, #0]
     4a6:	2200      	movs	r2, #0
     4a8:	461a      	mov	r2, r3
     4aa:	4610      	mov	r0, r2
     4ac:	f000 f9ec 	bl	888 <EEPROM_LoadInt64>
     4b0:	4602      	mov	r2, r0
     4b2:	460b      	mov	r3, r1
     4b4:	4b94      	ldr	r3, [pc, #592]	; (708 <LoadTimings+0x26c>)
     4b6:	601a      	str	r2, [r3, #0]
	if (per_ignonperiod_val == 0 || per_ignonperiod_val > 14400)
     4b8:	4b93      	ldr	r3, [pc, #588]	; (708 <LoadTimings+0x26c>)
     4ba:	681b      	ldr	r3, [r3, #0]
     4bc:	2b00      	cmp	r3, #0
     4be:	d004      	beq.n	4ca <LoadTimings+0x2e>
     4c0:	4b91      	ldr	r3, [pc, #580]	; (708 <LoadTimings+0x26c>)
     4c2:	681b      	ldr	r3, [r3, #0]
     4c4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     4c8:	dd02      	ble.n	4d0 <LoadTimings+0x34>
		per_ignonperiod_val = 60;
     4ca:	4b8f      	ldr	r3, [pc, #572]	; (708 <LoadTimings+0x26c>)
     4cc:	223c      	movs	r2, #60	; 0x3c
     4ce:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignonperiod_val: %d\n", (int)per_ignonperiod_val);
     4d0:	4b8d      	ldr	r3, [pc, #564]	; (708 <LoadTimings+0x26c>)
     4d2:	681b      	ldr	r3, [r3, #0]
     4d4:	1d3a      	adds	r2, r7, #4
     4d6:	4610      	mov	r0, r2
     4d8:	498c      	ldr	r1, [pc, #560]	; (70c <LoadTimings+0x270>)
     4da:	461a      	mov	r2, r3
     4dc:	f002 ffde 	bl	349c <sprintf>
	TraceNL(buffer);
     4e0:	1d3b      	adds	r3, r7, #4
     4e2:	4618      	mov	r0, r3
     4e4:	f001 ff2c 	bl	2340 <TraceNL>
	//LOAD Ignition Off Period
	per_ignoffperiod_val = (int)EEPROM_LoadInt64(cal_ign_off_period);
     4e8:	4b89      	ldr	r3, [pc, #548]	; (710 <LoadTimings+0x274>)
     4ea:	681b      	ldr	r3, [r3, #0]
     4ec:	2200      	movs	r2, #0
     4ee:	461a      	mov	r2, r3
     4f0:	4610      	mov	r0, r2
     4f2:	f000 f9c9 	bl	888 <EEPROM_LoadInt64>
     4f6:	4602      	mov	r2, r0
     4f8:	460b      	mov	r3, r1
     4fa:	4b86      	ldr	r3, [pc, #536]	; (714 <LoadTimings+0x278>)
     4fc:	601a      	str	r2, [r3, #0]
	int original_per_ignoffperiod_val = per_ignoffperiod_val;
     4fe:	4b85      	ldr	r3, [pc, #532]	; (714 <LoadTimings+0x278>)
     500:	681b      	ldr	r3, [r3, #0]
     502:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (per_ignoffperiod_val == 0 || per_ignoffperiod_val > 14400) //4 hours max.
     506:	4b83      	ldr	r3, [pc, #524]	; (714 <LoadTimings+0x278>)
     508:	681b      	ldr	r3, [r3, #0]
     50a:	2b00      	cmp	r3, #0
     50c:	d004      	beq.n	518 <LoadTimings+0x7c>
     50e:	4b81      	ldr	r3, [pc, #516]	; (714 <LoadTimings+0x278>)
     510:	681b      	ldr	r3, [r3, #0]
     512:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     516:	dd02      	ble.n	51e <LoadTimings+0x82>
		per_ignoffperiod_val = 120;
     518:	4b7e      	ldr	r3, [pc, #504]	; (714 <LoadTimings+0x278>)
     51a:	2278      	movs	r2, #120	; 0x78
     51c:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignoffperiod_val: %d, per_ignoffperiod_val(original): %d\n", (int)per_ignoffperiod_val,(int)original_per_ignoffperiod_val);
     51e:	4b7d      	ldr	r3, [pc, #500]	; (714 <LoadTimings+0x278>)
     520:	681b      	ldr	r3, [r3, #0]
     522:	1d3a      	adds	r2, r7, #4
     524:	4610      	mov	r0, r2
     526:	497c      	ldr	r1, [pc, #496]	; (718 <LoadTimings+0x27c>)
     528:	461a      	mov	r2, r3
     52a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
     52e:	f002 ffb5 	bl	349c <sprintf>
	TraceNL(buffer);
     532:	1d3b      	adds	r3, r7, #4
     534:	4618      	mov	r0, r3
     536:	f001 ff03 	bl	2340 <TraceNL>
	//LOAD Ignition On Roaming Period
	per_ignonroamingperiod_val = (int)EEPROM_LoadInt64(cal_ign_on_roaming_period);
     53a:	4b78      	ldr	r3, [pc, #480]	; (71c <LoadTimings+0x280>)
     53c:	681b      	ldr	r3, [r3, #0]
     53e:	2200      	movs	r2, #0
     540:	461a      	mov	r2, r3
     542:	4610      	mov	r0, r2
     544:	f000 f9a0 	bl	888 <EEPROM_LoadInt64>
     548:	4602      	mov	r2, r0
     54a:	460b      	mov	r3, r1
     54c:	4b74      	ldr	r3, [pc, #464]	; (720 <LoadTimings+0x284>)
     54e:	601a      	str	r2, [r3, #0]
	if (per_ignonroamingperiod_val == 0 || per_ignonroamingperiod_val > 14400)
     550:	4b73      	ldr	r3, [pc, #460]	; (720 <LoadTimings+0x284>)
     552:	681b      	ldr	r3, [r3, #0]
     554:	2b00      	cmp	r3, #0
     556:	d004      	beq.n	562 <LoadTimings+0xc6>
     558:	4b71      	ldr	r3, [pc, #452]	; (720 <LoadTimings+0x284>)
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     560:	dd03      	ble.n	56a <LoadTimings+0xce>
		per_ignonroamingperiod_val = 1800;
     562:	4b6f      	ldr	r3, [pc, #444]	; (720 <LoadTimings+0x284>)
     564:	f44f 62e1 	mov.w	r2, #1800	; 0x708
     568:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignonroamingperiod_val: %d\n", (int)per_ignonroamingperiod_val);
     56a:	4b6d      	ldr	r3, [pc, #436]	; (720 <LoadTimings+0x284>)
     56c:	681b      	ldr	r3, [r3, #0]
     56e:	1d3a      	adds	r2, r7, #4
     570:	4610      	mov	r0, r2
     572:	496c      	ldr	r1, [pc, #432]	; (724 <LoadTimings+0x288>)
     574:	461a      	mov	r2, r3
     576:	f002 ff91 	bl	349c <sprintf>
	TraceNL(buffer);
     57a:	1d3b      	adds	r3, r7, #4
     57c:	4618      	mov	r0, r3
     57e:	f001 fedf 	bl	2340 <TraceNL>
	//LOAD Ignition Off Roaming Period
	per_ignoffroamingperiod_val = (int)EEPROM_LoadInt64(cal_ign_off_roaming_period);
     582:	4b69      	ldr	r3, [pc, #420]	; (728 <LoadTimings+0x28c>)
     584:	681b      	ldr	r3, [r3, #0]
     586:	2200      	movs	r2, #0
     588:	461a      	mov	r2, r3
     58a:	4610      	mov	r0, r2
     58c:	f000 f97c 	bl	888 <EEPROM_LoadInt64>
     590:	4602      	mov	r2, r0
     592:	460b      	mov	r3, r1
     594:	4b65      	ldr	r3, [pc, #404]	; (72c <LoadTimings+0x290>)
     596:	601a      	str	r2, [r3, #0]
	if (per_ignoffroamingperiod_val == 0 || per_ignoffroamingperiod_val > 14400)
     598:	4b64      	ldr	r3, [pc, #400]	; (72c <LoadTimings+0x290>)
     59a:	681b      	ldr	r3, [r3, #0]
     59c:	2b00      	cmp	r3, #0
     59e:	d004      	beq.n	5aa <LoadTimings+0x10e>
     5a0:	4b62      	ldr	r3, [pc, #392]	; (72c <LoadTimings+0x290>)
     5a2:	681b      	ldr	r3, [r3, #0]
     5a4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     5a8:	dd03      	ble.n	5b2 <LoadTimings+0x116>
		per_ignoffroamingperiod_val = 7200;
     5aa:	4b60      	ldr	r3, [pc, #384]	; (72c <LoadTimings+0x290>)
     5ac:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
     5b0:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignoffroamingperiod_val: %d\n", (int)per_ignoffroamingperiod_val);
     5b2:	4b5e      	ldr	r3, [pc, #376]	; (72c <LoadTimings+0x290>)
     5b4:	681b      	ldr	r3, [r3, #0]
     5b6:	1d3a      	adds	r2, r7, #4
     5b8:	4610      	mov	r0, r2
     5ba:	495d      	ldr	r1, [pc, #372]	; (730 <LoadTimings+0x294>)
     5bc:	461a      	mov	r2, r3
     5be:	f002 ff6d 	bl	349c <sprintf>
	TraceNL(buffer);
     5c2:	1d3b      	adds	r3, r7, #4
     5c4:	4618      	mov	r0, r3
     5c6:	f001 febb 	bl	2340 <TraceNL>
	per_lowpow_just_wake = (int)EEPROM_LoadInt64(cal_lowpow_just_wake);
     5ca:	4b5a      	ldr	r3, [pc, #360]	; (734 <LoadTimings+0x298>)
     5cc:	681b      	ldr	r3, [r3, #0]
     5ce:	2200      	movs	r2, #0
     5d0:	461a      	mov	r2, r3
     5d2:	4610      	mov	r0, r2
     5d4:	f000 f958 	bl	888 <EEPROM_LoadInt64>
     5d8:	4602      	mov	r2, r0
     5da:	460b      	mov	r3, r1
     5dc:	4b56      	ldr	r3, [pc, #344]	; (738 <LoadTimings+0x29c>)
     5de:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_just_wake: %d\n", (int)per_lowpow_just_wake);
     5e0:	4b55      	ldr	r3, [pc, #340]	; (738 <LoadTimings+0x29c>)
     5e2:	681b      	ldr	r3, [r3, #0]
     5e4:	1d3a      	adds	r2, r7, #4
     5e6:	4610      	mov	r0, r2
     5e8:	4954      	ldr	r1, [pc, #336]	; (73c <LoadTimings+0x2a0>)
     5ea:	461a      	mov	r2, r3
     5ec:	f002 ff56 	bl	349c <sprintf>
	TraceNL(buffer);
     5f0:	1d3b      	adds	r3, r7, #4
     5f2:	4618      	mov	r0, r3
     5f4:	f001 fea4 	bl	2340 <TraceNL>
	per_lowpow_cancel = (int)EEPROM_LoadInt64(cal_lowpow_cancel);
     5f8:	4b51      	ldr	r3, [pc, #324]	; (740 <LoadTimings+0x2a4>)
     5fa:	681b      	ldr	r3, [r3, #0]
     5fc:	2200      	movs	r2, #0
     5fe:	461a      	mov	r2, r3
     600:	4610      	mov	r0, r2
     602:	f000 f941 	bl	888 <EEPROM_LoadInt64>
     606:	4602      	mov	r2, r0
     608:	460b      	mov	r3, r1
     60a:	4b4e      	ldr	r3, [pc, #312]	; (744 <LoadTimings+0x2a8>)
     60c:	601a      	str	r2, [r3, #0]
	if (per_lowpow_cancel > 2)
     60e:	4b4d      	ldr	r3, [pc, #308]	; (744 <LoadTimings+0x2a8>)
     610:	681b      	ldr	r3, [r3, #0]
     612:	2b02      	cmp	r3, #2
     614:	dd02      	ble.n	61c <LoadTimings+0x180>
		per_lowpow_cancel = 0;
     616:	4b4b      	ldr	r3, [pc, #300]	; (744 <LoadTimings+0x2a8>)
     618:	2200      	movs	r2, #0
     61a:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_cancel: %d\n", (int)per_lowpow_cancel);
     61c:	4b49      	ldr	r3, [pc, #292]	; (744 <LoadTimings+0x2a8>)
     61e:	681b      	ldr	r3, [r3, #0]
     620:	1d3a      	adds	r2, r7, #4
     622:	4610      	mov	r0, r2
     624:	4948      	ldr	r1, [pc, #288]	; (748 <LoadTimings+0x2ac>)
     626:	461a      	mov	r2, r3
     628:	f002 ff38 	bl	349c <sprintf>
	TraceNL(buffer);
     62c:	1d3b      	adds	r3, r7, #4
     62e:	4618      	mov	r0, r3
     630:	f001 fe86 	bl	2340 <TraceNL>
	//LOAD Low Power Wake Up Period
	per_lowpow_period = (int)EEPROM_LoadInt64(cal_lowpow_period);
     634:	4b45      	ldr	r3, [pc, #276]	; (74c <LoadTimings+0x2b0>)
     636:	681b      	ldr	r3, [r3, #0]
     638:	2200      	movs	r2, #0
     63a:	461a      	mov	r2, r3
     63c:	4610      	mov	r0, r2
     63e:	f000 f923 	bl	888 <EEPROM_LoadInt64>
     642:	4602      	mov	r2, r0
     644:	460b      	mov	r3, r1
     646:	4b42      	ldr	r3, [pc, #264]	; (750 <LoadTimings+0x2b4>)
     648:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_period(original): %d\n", (int)per_lowpow_period);
     64a:	4b41      	ldr	r3, [pc, #260]	; (750 <LoadTimings+0x2b4>)
     64c:	681b      	ldr	r3, [r3, #0]
     64e:	1d3a      	adds	r2, r7, #4
     650:	4610      	mov	r0, r2
     652:	4940      	ldr	r1, [pc, #256]	; (754 <LoadTimings+0x2b8>)
     654:	461a      	mov	r2, r3
     656:	f002 ff21 	bl	349c <sprintf>
	TraceNL(buffer);
     65a:	1d3b      	adds	r3, r7, #4
     65c:	4618      	mov	r0, r3
     65e:	f001 fe6f 	bl	2340 <TraceNL>
	if (per_lowpow_period < 1 || per_lowpow_period > 2880){ //No period more than 2 days.
     662:	4b3b      	ldr	r3, [pc, #236]	; (750 <LoadTimings+0x2b4>)
     664:	681b      	ldr	r3, [r3, #0]
     666:	2b00      	cmp	r3, #0
     668:	dd04      	ble.n	674 <LoadTimings+0x1d8>
     66a:	4b39      	ldr	r3, [pc, #228]	; (750 <LoadTimings+0x2b4>)
     66c:	681b      	ldr	r3, [r3, #0]
     66e:	f5b3 6f34 	cmp.w	r3, #2880	; 0xb40
     672:	dd02      	ble.n	67a <LoadTimings+0x1de>
		per_lowpow_period = 59;
     674:	4b36      	ldr	r3, [pc, #216]	; (750 <LoadTimings+0x2b4>)
     676:	223b      	movs	r2, #59	; 0x3b
     678:	601a      	str	r2, [r3, #0]
		#endif
		#ifdef CABINET_DEMO
			per_lowpow_period = 15; //59;//1Hour
		#endif
	}
	sprintf(buffer, "per_lowpow_period: %d\n", (int)per_lowpow_period);
     67a:	4b35      	ldr	r3, [pc, #212]	; (750 <LoadTimings+0x2b4>)
     67c:	681b      	ldr	r3, [r3, #0]
     67e:	1d3a      	adds	r2, r7, #4
     680:	4610      	mov	r0, r2
     682:	4935      	ldr	r1, [pc, #212]	; (758 <LoadTimings+0x2bc>)
     684:	461a      	mov	r2, r3
     686:	f002 ff09 	bl	349c <sprintf>
	TraceNL(buffer);
     68a:	1d3b      	adds	r3, r7, #4
     68c:	4618      	mov	r0, r3
     68e:	f001 fe57 	bl	2340 <TraceNL>
	per_lowpow_mode = (int)EEPROM_LoadInt64(cal_lowpow_mode);
     692:	4b32      	ldr	r3, [pc, #200]	; (75c <LoadTimings+0x2c0>)
     694:	681b      	ldr	r3, [r3, #0]
     696:	2200      	movs	r2, #0
     698:	461a      	mov	r2, r3
     69a:	4610      	mov	r0, r2
     69c:	f000 f8f4 	bl	888 <EEPROM_LoadInt64>
     6a0:	4602      	mov	r2, r0
     6a2:	460b      	mov	r3, r1
     6a4:	4b2e      	ldr	r3, [pc, #184]	; (760 <LoadTimings+0x2c4>)
     6a6:	601a      	str	r2, [r3, #0]
	if (per_lowpow_mode > 2){
     6a8:	4b2d      	ldr	r3, [pc, #180]	; (760 <LoadTimings+0x2c4>)
     6aa:	681b      	ldr	r3, [r3, #0]
     6ac:	2b02      	cmp	r3, #2
     6ae:	dd02      	ble.n	6b6 <LoadTimings+0x21a>
		per_lowpow_mode = 0;
     6b0:	4b2b      	ldr	r3, [pc, #172]	; (760 <LoadTimings+0x2c4>)
     6b2:	2200      	movs	r2, #0
     6b4:	601a      	str	r2, [r3, #0]
		#ifdef CABINET_DEMO
			per_lowpow_mode = 1; //Light sleep
		#endif
	}
	sprintf(buffer, "per_lowpow_mode: %d\n", (int)per_lowpow_mode);
     6b6:	4b2a      	ldr	r3, [pc, #168]	; (760 <LoadTimings+0x2c4>)
     6b8:	681b      	ldr	r3, [r3, #0]
     6ba:	1d3a      	adds	r2, r7, #4
     6bc:	4610      	mov	r0, r2
     6be:	4929      	ldr	r1, [pc, #164]	; (764 <LoadTimings+0x2c8>)
     6c0:	461a      	mov	r2, r3
     6c2:	f002 feeb 	bl	349c <sprintf>
	TraceNL(buffer);
     6c6:	1d3b      	adds	r3, r7, #4
     6c8:	4618      	mov	r0, r3
     6ca:	f001 fe39 	bl	2340 <TraceNL>
	per_coffe_counter = (int)EEPROM_LoadInt64(cal_coffee_counter);
     6ce:	4b26      	ldr	r3, [pc, #152]	; (768 <LoadTimings+0x2cc>)
     6d0:	681b      	ldr	r3, [r3, #0]
     6d2:	2200      	movs	r2, #0
     6d4:	461a      	mov	r2, r3
     6d6:	4610      	mov	r0, r2
     6d8:	f000 f8d6 	bl	888 <EEPROM_LoadInt64>
     6dc:	4602      	mov	r2, r0
     6de:	460b      	mov	r3, r1
     6e0:	4b22      	ldr	r3, [pc, #136]	; (76c <LoadTimings+0x2d0>)
     6e2:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_coffee_counter: %d\n", (int)per_coffe_counter);
     6e4:	4b21      	ldr	r3, [pc, #132]	; (76c <LoadTimings+0x2d0>)
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	1d3a      	adds	r2, r7, #4
     6ea:	4610      	mov	r0, r2
     6ec:	4920      	ldr	r1, [pc, #128]	; (770 <LoadTimings+0x2d4>)
     6ee:	461a      	mov	r2, r3
     6f0:	f002 fed4 	bl	349c <sprintf>
	TraceNL(buffer);
     6f4:	1d3b      	adds	r3, r7, #4
     6f6:	4618      	mov	r0, r3
     6f8:	f001 fe22 	bl	2340 <TraceNL>
}
     6fc:	37d0      	adds	r7, #208	; 0xd0
     6fe:	46bd      	mov	sp, r7
     700:	bd80      	pop	{r7, pc}
     702:	bf00      	nop
     704:	10000a50 	.word	0x10000a50
     708:	10000a58 	.word	0x10000a58
     70c:	00005d94 	.word	0x00005d94
     710:	10000ac0 	.word	0x10000ac0
     714:	10000a20 	.word	0x10000a20
     718:	00005db0 	.word	0x00005db0
     71c:	10000a70 	.word	0x10000a70
     720:	10000a54 	.word	0x10000a54
     724:	00005df0 	.word	0x00005df0
     728:	10000aa0 	.word	0x10000aa0
     72c:	10000ac4 	.word	0x10000ac4
     730:	00005e10 	.word	0x00005e10
     734:	10000aac 	.word	0x10000aac
     738:	10000a6c 	.word	0x10000a6c
     73c:	00005e34 	.word	0x00005e34
     740:	10000a74 	.word	0x10000a74
     744:	10000ab0 	.word	0x10000ab0
     748:	00005e50 	.word	0x00005e50
     74c:	10000adc 	.word	0x10000adc
     750:	10000a18 	.word	0x10000a18
     754:	00005e68 	.word	0x00005e68
     758:	00005e8c 	.word	0x00005e8c
     75c:	10000a5c 	.word	0x10000a5c
     760:	10000a60 	.word	0x10000a60
     764:	00005ea4 	.word	0x00005ea4
     768:	10000a64 	.word	0x10000a64
     76c:	10000ab4 	.word	0x10000ab4
     770:	00005ebc 	.word	0x00005ebc

00000774 <EEPROM_Init>:

void PersistParams() {
	EEPROM_SaveInt64(cal_mileage,per_mileage_val);
}

uint8_t EEPROM_Init() {
     774:	b580      	push	{r7, lr}
     776:	af00      	add	r7, sp, #0
	//Initialize EEPROM Memory Map -- 256x8
	test.StartPos = 0;
     778:	4b33      	ldr	r3, [pc, #204]	; (848 <EEPROM_Init+0xd4>)
     77a:	2200      	movs	r2, #0
     77c:	805a      	strh	r2, [r3, #2]
	test.Length = 2;
     77e:	4b32      	ldr	r3, [pc, #200]	; (848 <EEPROM_Init+0xd4>)
     780:	2202      	movs	r2, #2
     782:	801a      	strh	r2, [r3, #0]
	//Calibration test, ip, port, apn, apn_user, apn_pass, ign_on_period, ign_off_period, ign_on_roaming_period, ign_off_roaming_period, mileage;
	cal_port.StartPos = 6;
     784:	4b31      	ldr	r3, [pc, #196]	; (84c <EEPROM_Init+0xd8>)
     786:	2206      	movs	r2, #6
     788:	805a      	strh	r2, [r3, #2]
	cal_port.Length = 2;
     78a:	4b30      	ldr	r3, [pc, #192]	; (84c <EEPROM_Init+0xd8>)
     78c:	2202      	movs	r2, #2
     78e:	801a      	strh	r2, [r3, #0]
	cal_apn.StartPos = 8;
     790:	4b2f      	ldr	r3, [pc, #188]	; (850 <EEPROM_Init+0xdc>)
     792:	2208      	movs	r2, #8
     794:	805a      	strh	r2, [r3, #2]
	cal_apn.Length = 25;
     796:	4b2e      	ldr	r3, [pc, #184]	; (850 <EEPROM_Init+0xdc>)
     798:	2219      	movs	r2, #25
     79a:	801a      	strh	r2, [r3, #0]
	cal_apn_user.StartPos = 33;
     79c:	4b2d      	ldr	r3, [pc, #180]	; (854 <EEPROM_Init+0xe0>)
     79e:	2221      	movs	r2, #33	; 0x21
     7a0:	805a      	strh	r2, [r3, #2]
	cal_apn_user.Length = 12;
     7a2:	4b2c      	ldr	r3, [pc, #176]	; (854 <EEPROM_Init+0xe0>)
     7a4:	220c      	movs	r2, #12
     7a6:	801a      	strh	r2, [r3, #0]
	cal_apn_pass.StartPos = 45;
     7a8:	4b2b      	ldr	r3, [pc, #172]	; (858 <EEPROM_Init+0xe4>)
     7aa:	222d      	movs	r2, #45	; 0x2d
     7ac:	805a      	strh	r2, [r3, #2]
	cal_apn_pass.Length = 12;
     7ae:	4b2a      	ldr	r3, [pc, #168]	; (858 <EEPROM_Init+0xe4>)
     7b0:	220c      	movs	r2, #12
     7b2:	801a      	strh	r2, [r3, #0]
	cal_ign_on_period.StartPos = 57;
     7b4:	4b29      	ldr	r3, [pc, #164]	; (85c <EEPROM_Init+0xe8>)
     7b6:	2239      	movs	r2, #57	; 0x39
     7b8:	805a      	strh	r2, [r3, #2]
	cal_ign_on_period.Length = 2;
     7ba:	4b28      	ldr	r3, [pc, #160]	; (85c <EEPROM_Init+0xe8>)
     7bc:	2202      	movs	r2, #2
     7be:	801a      	strh	r2, [r3, #0]
	cal_lowpow_period.StartPos = 59;
     7c0:	4b27      	ldr	r3, [pc, #156]	; (860 <EEPROM_Init+0xec>)
     7c2:	223b      	movs	r2, #59	; 0x3b
     7c4:	805a      	strh	r2, [r3, #2]
	cal_lowpow_period.Length = 2;
     7c6:	4b26      	ldr	r3, [pc, #152]	; (860 <EEPROM_Init+0xec>)
     7c8:	2202      	movs	r2, #2
     7ca:	801a      	strh	r2, [r3, #0]
	cal_ign_on_roaming_period.StartPos = 61;
     7cc:	4b25      	ldr	r3, [pc, #148]	; (864 <EEPROM_Init+0xf0>)
     7ce:	223d      	movs	r2, #61	; 0x3d
     7d0:	805a      	strh	r2, [r3, #2]
	cal_ign_on_roaming_period.Length = 2;
     7d2:	4b24      	ldr	r3, [pc, #144]	; (864 <EEPROM_Init+0xf0>)
     7d4:	2202      	movs	r2, #2
     7d6:	801a      	strh	r2, [r3, #0]
	cal_ign_off_roaming_period.StartPos = 63;
     7d8:	4b23      	ldr	r3, [pc, #140]	; (868 <EEPROM_Init+0xf4>)
     7da:	223f      	movs	r2, #63	; 0x3f
     7dc:	805a      	strh	r2, [r3, #2]
	cal_ign_off_roaming_period.Length = 2;
     7de:	4b22      	ldr	r3, [pc, #136]	; (868 <EEPROM_Init+0xf4>)
     7e0:	2202      	movs	r2, #2
     7e2:	801a      	strh	r2, [r3, #0]
	cal_mileage.StartPos = 65;
     7e4:	4b21      	ldr	r3, [pc, #132]	; (86c <EEPROM_Init+0xf8>)
     7e6:	2241      	movs	r2, #65	; 0x41
     7e8:	805a      	strh	r2, [r3, #2]
	cal_mileage.Length = 8;
     7ea:	4b20      	ldr	r3, [pc, #128]	; (86c <EEPROM_Init+0xf8>)
     7ec:	2208      	movs	r2, #8
     7ee:	801a      	strh	r2, [r3, #0]
	cal_ip.StartPos = 73;
     7f0:	4b1f      	ldr	r3, [pc, #124]	; (870 <EEPROM_Init+0xfc>)
     7f2:	2249      	movs	r2, #73	; 0x49
     7f4:	805a      	strh	r2, [r3, #2]
	cal_ip.Length = 25;
     7f6:	4b1e      	ldr	r3, [pc, #120]	; (870 <EEPROM_Init+0xfc>)
     7f8:	2219      	movs	r2, #25
     7fa:	801a      	strh	r2, [r3, #0]
	cal_ign_off_period.StartPos = 98;
     7fc:	4b1d      	ldr	r3, [pc, #116]	; (874 <EEPROM_Init+0x100>)
     7fe:	2262      	movs	r2, #98	; 0x62
     800:	805a      	strh	r2, [r3, #2]
	cal_ign_off_period.Length = 2;
     802:	4b1c      	ldr	r3, [pc, #112]	; (874 <EEPROM_Init+0x100>)
     804:	2202      	movs	r2, #2
     806:	801a      	strh	r2, [r3, #0]
	cal_lowpow_just_wake.StartPos = 100;
     808:	4b1b      	ldr	r3, [pc, #108]	; (878 <EEPROM_Init+0x104>)
     80a:	2264      	movs	r2, #100	; 0x64
     80c:	805a      	strh	r2, [r3, #2]
	cal_lowpow_just_wake.Length = 2;
     80e:	4b1a      	ldr	r3, [pc, #104]	; (878 <EEPROM_Init+0x104>)
     810:	2202      	movs	r2, #2
     812:	801a      	strh	r2, [r3, #0]
	cal_lowpow_cancel.StartPos = 102;
     814:	4b19      	ldr	r3, [pc, #100]	; (87c <EEPROM_Init+0x108>)
     816:	2266      	movs	r2, #102	; 0x66
     818:	805a      	strh	r2, [r3, #2]
	cal_lowpow_cancel.Length = 2;
     81a:	4b18      	ldr	r3, [pc, #96]	; (87c <EEPROM_Init+0x108>)
     81c:	2202      	movs	r2, #2
     81e:	801a      	strh	r2, [r3, #0]
	cal_lowpow_mode.StartPos = 104;
     820:	4b17      	ldr	r3, [pc, #92]	; (880 <EEPROM_Init+0x10c>)
     822:	2268      	movs	r2, #104	; 0x68
     824:	805a      	strh	r2, [r3, #2]
	cal_lowpow_mode.Length = 2;
     826:	4b16      	ldr	r3, [pc, #88]	; (880 <EEPROM_Init+0x10c>)
     828:	2202      	movs	r2, #2
     82a:	801a      	strh	r2, [r3, #0]
	cal_coffee_counter.StartPos = 106;
     82c:	4b15      	ldr	r3, [pc, #84]	; (884 <EEPROM_Init+0x110>)
     82e:	226a      	movs	r2, #106	; 0x6a
     830:	805a      	strh	r2, [r3, #2]
	cal_coffee_counter.Length = 2;
     832:	4b14      	ldr	r3, [pc, #80]	; (884 <EEPROM_Init+0x110>)
     834:	2202      	movs	r2, #2
     836:	801a      	strh	r2, [r3, #0]
 	return I2CInit(1,((uint32_t)I2CMASTER) == 0);
     838:	2001      	movs	r0, #1
     83a:	2100      	movs	r1, #0
     83c:	f001 f8e2 	bl	1a04 <I2CInit>
     840:	4603      	mov	r3, r0
     842:	b2db      	uxtb	r3, r3
}
     844:	4618      	mov	r0, r3
     846:	bd80      	pop	{r7, pc}
     848:	10000a90 	.word	0x10000a90
     84c:	10000aa4 	.word	0x10000aa4
     850:	10000ae0 	.word	0x10000ae0
     854:	10000a94 	.word	0x10000a94
     858:	10000a1c 	.word	0x10000a1c
     85c:	10000a50 	.word	0x10000a50
     860:	10000adc 	.word	0x10000adc
     864:	10000a70 	.word	0x10000a70
     868:	10000aa0 	.word	0x10000aa0
     86c:	10000a68 	.word	0x10000a68
     870:	10000aa8 	.word	0x10000aa8
     874:	10000ac0 	.word	0x10000ac0
     878:	10000aac 	.word	0x10000aac
     87c:	10000a74 	.word	0x10000a74
     880:	10000a5c 	.word	0x10000a5c
     884:	10000a64 	.word	0x10000a64

00000888 <EEPROM_LoadInt64>:

uint64_t EEPROM_LoadInt64(Calibration cal) {
     888:	b580      	push	{r7, lr}
     88a:	b086      	sub	sp, #24
     88c:	af00      	add	r7, sp, #0
     88e:	6078      	str	r0, [r7, #4]
	int index = 0;
     890:	2300      	movs	r3, #0
     892:	617b      	str	r3, [r7, #20]
	uint64_t result = 0;
     894:	f04f 0200 	mov.w	r2, #0
     898:	f04f 0300 	mov.w	r3, #0
     89c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for (index=0; index < cal.Length; index++) {
     8a0:	2300      	movs	r3, #0
     8a2:	617b      	str	r3, [r7, #20]
     8a4:	e055      	b.n	952 <EEPROM_LoadInt64+0xca>
		if (cal.Length > 2)
     8a6:	88bb      	ldrh	r3, [r7, #4]
     8a8:	2b02      	cmp	r3, #2
     8aa:	d926      	bls.n	8fa <EEPROM_LoadInt64+0x72>
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFFFFFF);
     8ac:	88fb      	ldrh	r3, [r7, #6]
     8ae:	b2da      	uxtb	r2, r3
     8b0:	697b      	ldr	r3, [r7, #20]
     8b2:	b2db      	uxtb	r3, r3
     8b4:	4413      	add	r3, r2
     8b6:	b2db      	uxtb	r3, r3
     8b8:	2001      	movs	r0, #1
     8ba:	4619      	mov	r1, r3
     8bc:	f001 f988 	bl	1bd0 <i2c_read>
     8c0:	4603      	mov	r3, r0
     8c2:	461a      	mov	r2, r3
     8c4:	88bb      	ldrh	r3, [r7, #4]
     8c6:	4619      	mov	r1, r3
     8c8:	697b      	ldr	r3, [r7, #20]
     8ca:	1acb      	subs	r3, r1, r3
     8cc:	3b01      	subs	r3, #1
     8ce:	00db      	lsls	r3, r3, #3
     8d0:	fa02 f303 	lsl.w	r3, r2, r3
     8d4:	461a      	mov	r2, r3
     8d6:	f04f 0300 	mov.w	r3, #0
     8da:	f04f 30ff 	mov.w	r0, #4294967295
     8de:	f04f 0100 	mov.w	r1, #0
     8e2:	ea02 0200 	and.w	r2, r2, r0
     8e6:	ea03 0301 	and.w	r3, r3, r1
     8ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     8ee:	1812      	adds	r2, r2, r0
     8f0:	eb43 0301 	adc.w	r3, r3, r1
     8f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
     8f8:	e025      	b.n	946 <EEPROM_LoadInt64+0xbe>
		else
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFF);
     8fa:	88fb      	ldrh	r3, [r7, #6]
     8fc:	b2da      	uxtb	r2, r3
     8fe:	697b      	ldr	r3, [r7, #20]
     900:	b2db      	uxtb	r3, r3
     902:	4413      	add	r3, r2
     904:	b2db      	uxtb	r3, r3
     906:	2001      	movs	r0, #1
     908:	4619      	mov	r1, r3
     90a:	f001 f961 	bl	1bd0 <i2c_read>
     90e:	4603      	mov	r3, r0
     910:	461a      	mov	r2, r3
     912:	88bb      	ldrh	r3, [r7, #4]
     914:	4619      	mov	r1, r3
     916:	697b      	ldr	r3, [r7, #20]
     918:	1acb      	subs	r3, r1, r3
     91a:	3b01      	subs	r3, #1
     91c:	00db      	lsls	r3, r3, #3
     91e:	fa02 f303 	lsl.w	r3, r2, r3
     922:	461a      	mov	r2, r3
     924:	f04f 0300 	mov.w	r3, #0
     928:	f64f 70ff 	movw	r0, #65535	; 0xffff
     92c:	f04f 0100 	mov.w	r1, #0
     930:	ea02 0200 	and.w	r2, r2, r0
     934:	ea03 0301 	and.w	r3, r3, r1
     938:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     93c:	1812      	adds	r2, r2, r0
     93e:	eb43 0301 	adc.w	r3, r3, r1
     942:	e9c7 2302 	strd	r2, r3, [r7, #8]
		DelayMs(10);
     946:	200a      	movs	r0, #10
     948:	f001 fcd4 	bl	22f4 <DelayMs>
}

uint64_t EEPROM_LoadInt64(Calibration cal) {
	int index = 0;
	uint64_t result = 0;
	for (index=0; index < cal.Length; index++) {
     94c:	697b      	ldr	r3, [r7, #20]
     94e:	3301      	adds	r3, #1
     950:	617b      	str	r3, [r7, #20]
     952:	88bb      	ldrh	r3, [r7, #4]
     954:	461a      	mov	r2, r3
     956:	697b      	ldr	r3, [r7, #20]
     958:	429a      	cmp	r2, r3
     95a:	dca4      	bgt.n	8a6 <EEPROM_LoadInt64+0x1e>
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFFFFFF);
		else
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFF);
		DelayMs(10);
	}
	return result;
     95c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
     960:	4610      	mov	r0, r2
     962:	4619      	mov	r1, r3
     964:	3718      	adds	r7, #24
     966:	46bd      	mov	sp, r7
     968:	bd80      	pop	{r7, pc}
     96a:	bf00      	nop

0000096c <EEPROM_LoadString>:
	i2c_write(1,cal.StartPos + index, '\0');
	DelayMs(10);
	return 1;
}

void EEPROM_LoadString(Calibration cal,  char* str){
     96c:	b590      	push	{r4, r7, lr}
     96e:	b085      	sub	sp, #20
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
     974:	6039      	str	r1, [r7, #0]
	int index = 0;
     976:	2300      	movs	r3, #0
     978:	60fb      	str	r3, [r7, #12]
	for (index=0; index < cal.Length; index++) {
     97a:	2300      	movs	r3, #0
     97c:	60fb      	str	r3, [r7, #12]
     97e:	e01b      	b.n	9b8 <EEPROM_LoadString+0x4c>
		str[index] = i2c_read(1,cal.StartPos + index);
     980:	68fb      	ldr	r3, [r7, #12]
     982:	683a      	ldr	r2, [r7, #0]
     984:	18d4      	adds	r4, r2, r3
     986:	88fb      	ldrh	r3, [r7, #6]
     988:	b2da      	uxtb	r2, r3
     98a:	68fb      	ldr	r3, [r7, #12]
     98c:	b2db      	uxtb	r3, r3
     98e:	4413      	add	r3, r2
     990:	b2db      	uxtb	r3, r3
     992:	2001      	movs	r0, #1
     994:	4619      	mov	r1, r3
     996:	f001 f91b 	bl	1bd0 <i2c_read>
     99a:	4603      	mov	r3, r0
     99c:	7023      	strb	r3, [r4, #0]
		DelayMs(10);
     99e:	200a      	movs	r0, #10
     9a0:	f001 fca8 	bl	22f4 <DelayMs>
		if (str[index] == '\0')
     9a4:	68fb      	ldr	r3, [r7, #12]
     9a6:	683a      	ldr	r2, [r7, #0]
     9a8:	4413      	add	r3, r2
     9aa:	781b      	ldrb	r3, [r3, #0]
     9ac:	2b00      	cmp	r3, #0
     9ae:	d100      	bne.n	9b2 <EEPROM_LoadString+0x46>
			break;
     9b0:	e007      	b.n	9c2 <EEPROM_LoadString+0x56>
	return 1;
}

void EEPROM_LoadString(Calibration cal,  char* str){
	int index = 0;
	for (index=0; index < cal.Length; index++) {
     9b2:	68fb      	ldr	r3, [r7, #12]
     9b4:	3301      	adds	r3, #1
     9b6:	60fb      	str	r3, [r7, #12]
     9b8:	88bb      	ldrh	r3, [r7, #4]
     9ba:	461a      	mov	r2, r3
     9bc:	68fb      	ldr	r3, [r7, #12]
     9be:	429a      	cmp	r2, r3
     9c0:	dcde      	bgt.n	980 <EEPROM_LoadString+0x14>
		str[index] = i2c_read(1,cal.StartPos + index);
		DelayMs(10);
		if (str[index] == '\0')
			break;
	}
}
     9c2:	3714      	adds	r7, #20
     9c4:	46bd      	mov	sp, r7
     9c6:	bd90      	pop	{r4, r7, pc}

000009c8 <GSM_SendAt>:
unsigned long int last_hard_reset = -1;
int connectionFailCount = 0;
#define LBS 1

uint16_t GSM_SendAt( char* cmd, char *response, int delay )
{
     9c8:	b580      	push	{r7, lr}
     9ca:	b0b8      	sub	sp, #224	; 0xe0
     9cc:	af00      	add	r7, sp, #0
     9ce:	60f8      	str	r0, [r7, #12]
     9d0:	60b9      	str	r1, [r7, #8]
     9d2:	607a      	str	r2, [r7, #4]
	char buffer[200];
	uint16_t	len;

	int count = sprintf(buffer, "%s\r", cmd);
     9d4:	f107 0310 	add.w	r3, r7, #16
     9d8:	4618      	mov	r0, r3
     9da:	4916      	ldr	r1, [pc, #88]	; (a34 <GSM_SendAt+0x6c>)
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	f002 fd5d 	bl	349c <sprintf>
     9e2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	UARTSend(PORT_GSM, buffer, count);
     9e6:	f107 0310 	add.w	r3, r7, #16
     9ea:	2001      	movs	r0, #1
     9ec:	4619      	mov	r1, r3
     9ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
     9f2:	f002 f88b 	bl	2b0c <UARTSend>

	DelayMs(delay);
     9f6:	687b      	ldr	r3, [r7, #4]
     9f8:	4618      	mov	r0, r3
     9fa:	f001 fc7b 	bl	22f4 <DelayMs>

	len = ReadUart(response, PORT_GSM);
     9fe:	68b8      	ldr	r0, [r7, #8]
     a00:	2101      	movs	r1, #1
     a02:	f002 f91f 	bl	2c44 <ReadUart>
     a06:	4603      	mov	r3, r0
     a08:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda

	sprintf(buffer, "%s Response : %s \r", cmd, response);
     a0c:	f107 0310 	add.w	r3, r7, #16
     a10:	4618      	mov	r0, r3
     a12:	4909      	ldr	r1, [pc, #36]	; (a38 <GSM_SendAt+0x70>)
     a14:	68fa      	ldr	r2, [r7, #12]
     a16:	68bb      	ldr	r3, [r7, #8]
     a18:	f002 fd40 	bl	349c <sprintf>
	TraceNL(buffer);
     a1c:	f107 0310 	add.w	r3, r7, #16
     a20:	4618      	mov	r0, r3
     a22:	f001 fc8d 	bl	2340 <TraceNL>

    return ( len );
     a26:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
}
     a2a:	4618      	mov	r0, r3
     a2c:	37e0      	adds	r7, #224	; 0xe0
     a2e:	46bd      	mov	sp, r7
     a30:	bd80      	pop	{r7, pc}
     a32:	bf00      	nop
     a34:	00005ed4 	.word	0x00005ed4
     a38:	00005ed8 	.word	0x00005ed8

00000a3c <GSM_TCP_Recv>:



int16_t GSM_TCP_Recv( char* pDataBuf, int16_t maxBytes )
{
     a3c:	b580      	push	{r7, lr}
     a3e:	b082      	sub	sp, #8
     a40:	af00      	add	r7, sp, #0
     a42:	6078      	str	r0, [r7, #4]
     a44:	460b      	mov	r3, r1
     a46:	807b      	strh	r3, [r7, #2]
	Trace("Entered GSM_TCP_Recv");
     a48:	4807      	ldr	r0, [pc, #28]	; (a68 <GSM_TCP_Recv+0x2c>)
     a4a:	f001 fc69 	bl	2320 <Trace>

	return ( GSM_SendAt( "AT+QIRD=1,1,0,1050", pDataBuf, 500 ) );
     a4e:	4807      	ldr	r0, [pc, #28]	; (a6c <GSM_TCP_Recv+0x30>)
     a50:	6879      	ldr	r1, [r7, #4]
     a52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     a56:	f7ff ffb7 	bl	9c8 <GSM_SendAt>
     a5a:	4603      	mov	r3, r0
     a5c:	b29b      	uxth	r3, r3
     a5e:	b21b      	sxth	r3, r3
}
     a60:	4618      	mov	r0, r3
     a62:	3708      	adds	r7, #8
     a64:	46bd      	mov	sp, r7
     a66:	bd80      	pop	{r7, pc}
     a68:	00005eec 	.word	0x00005eec
     a6c:	00005f04 	.word	0x00005f04

00000a70 <GSM_ConnectToTrio>:
** Parameters:		none
**
** Returned value:	SUCCESS  connection established
** 					FAIL	 connection failed (error code)
******************************************************************************/
int GSM_ConnectToTrio() {
     a70:	b580      	push	{r7, lr}
     a72:	b0de      	sub	sp, #376	; 0x178
     a74:	af02      	add	r7, sp, #8
	TraceNL("Entered ConnectoTrio");
     a76:	488a      	ldr	r0, [pc, #552]	; (ca0 <GSM_ConnectToTrio+0x230>)
     a78:	f001 fc62 	bl	2340 <TraceNL>
	char buffer[200];
	char response[150];
	//GSM_SendAt("AT+QIFGCNT=0", response, 500);
	GSM_SendAt("AT+QIFGCNT=1", response, 500);
     a7c:	1d3b      	adds	r3, r7, #4
     a7e:	4889      	ldr	r0, [pc, #548]	; (ca4 <GSM_ConnectToTrio+0x234>)
     a80:	4619      	mov	r1, r3
     a82:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     a86:	f7ff ff9f 	bl	9c8 <GSM_SendAt>
	memset(buffer, 0, sizeof(buffer));
     a8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
     a8e:	4618      	mov	r0, r3
     a90:	2100      	movs	r1, #0
     a92:	22c8      	movs	r2, #200	; 0xc8
     a94:	f002 fc3a 	bl	330c <memset>
	sprintf(buffer, "AT+QICSGP=1,\"%s\",\"%s\",\"%s\"", per_apn_val,
     a98:	f107 029c 	add.w	r2, r7, #156	; 0x9c
     a9c:	4b82      	ldr	r3, [pc, #520]	; (ca8 <GSM_ConnectToTrio+0x238>)
     a9e:	9300      	str	r3, [sp, #0]
     aa0:	4610      	mov	r0, r2
     aa2:	4982      	ldr	r1, [pc, #520]	; (cac <GSM_ConnectToTrio+0x23c>)
     aa4:	4a82      	ldr	r2, [pc, #520]	; (cb0 <GSM_ConnectToTrio+0x240>)
     aa6:	4b83      	ldr	r3, [pc, #524]	; (cb4 <GSM_ConnectToTrio+0x244>)
     aa8:	f002 fcf8 	bl	349c <sprintf>
			per_apnuser_val, per_apnpass_val);
	//GSM_SendAt("AT+QICSGP=1,\"internet\"", response, 500);
	GSM_SendAt(buffer, response, 100);
     aac:	f107 029c 	add.w	r2, r7, #156	; 0x9c
     ab0:	1d3b      	adds	r3, r7, #4
     ab2:	4610      	mov	r0, r2
     ab4:	4619      	mov	r1, r3
     ab6:	2264      	movs	r2, #100	; 0x64
     ab8:	f7ff ff86 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QIMUX=0", response, 100);
     abc:	1d3b      	adds	r3, r7, #4
     abe:	487e      	ldr	r0, [pc, #504]	; (cb8 <GSM_ConnectToTrio+0x248>)
     ac0:	4619      	mov	r1, r3
     ac2:	2264      	movs	r2, #100	; 0x64
     ac4:	f7ff ff80 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QVBATT=0,3500,0", response, 100); //Disable low power shut down and warning.
     ac8:	1d3b      	adds	r3, r7, #4
     aca:	487c      	ldr	r0, [pc, #496]	; (cbc <GSM_ConnectToTrio+0x24c>)
     acc:	4619      	mov	r1, r3
     ace:	2264      	movs	r2, #100	; 0x64
     ad0:	f7ff ff7a 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QVBATT=1,3300,0",response,100); // Disable 3.3 volt cutoff.
     ad4:	1d3b      	adds	r3, r7, #4
     ad6:	487a      	ldr	r0, [pc, #488]	; (cc0 <GSM_ConnectToTrio+0x250>)
     ad8:	4619      	mov	r1, r3
     ada:	2264      	movs	r2, #100	; 0x64
     adc:	f7ff ff74 	bl	9c8 <GSM_SendAt>
	//SendAt("AT+QIMODE=1",response); //Transparent Mode
	GSM_SendAt("AT+QIMODE=0", response, 100); //Non Transparent Mode
     ae0:	1d3b      	adds	r3, r7, #4
     ae2:	4878      	ldr	r0, [pc, #480]	; (cc4 <GSM_ConnectToTrio+0x254>)
     ae4:	4619      	mov	r1, r3
     ae6:	2264      	movs	r2, #100	; 0x64
     ae8:	f7ff ff6e 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QINDI=1", response, 100); //Alert when data received.
     aec:	1d3b      	adds	r3, r7, #4
     aee:	4876      	ldr	r0, [pc, #472]	; (cc8 <GSM_ConnectToTrio+0x258>)
     af0:	4619      	mov	r1, r3
     af2:	2264      	movs	r2, #100	; 0x64
     af4:	f7ff ff68 	bl	9c8 <GSM_SendAt>
	//GSM_SendAt("AT+QITCFG=3,1,512,1", response, 500); //Transparent mode configuration
	memset(buffer, 0, sizeof(buffer));
     af8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
     afc:	4618      	mov	r0, r3
     afe:	2100      	movs	r1, #0
     b00:	22c8      	movs	r2, #200	; 0xc8
     b02:	f002 fc03 	bl	330c <memset>
	if (isalpha(per_ip_val[0])){ //DNS
     b06:	4b71      	ldr	r3, [pc, #452]	; (ccc <GSM_ConnectToTrio+0x25c>)
     b08:	781b      	ldrb	r3, [r3, #0]
     b0a:	3380      	adds	r3, #128	; 0x80
     b0c:	4a70      	ldr	r2, [pc, #448]	; (cd0 <GSM_ConnectToTrio+0x260>)
     b0e:	5cd3      	ldrb	r3, [r2, r3]
     b10:	f003 0318 	and.w	r3, r3, #24
     b14:	2b00      	cmp	r3, #0
     b16:	d006      	beq.n	b26 <GSM_ConnectToTrio+0xb6>
		GSM_SendAt("AT+QIDNSIP=1", response, 100);
     b18:	1d3b      	adds	r3, r7, #4
     b1a:	486e      	ldr	r0, [pc, #440]	; (cd4 <GSM_ConnectToTrio+0x264>)
     b1c:	4619      	mov	r1, r3
     b1e:	2264      	movs	r2, #100	; 0x64
     b20:	f7ff ff52 	bl	9c8 <GSM_SendAt>
     b24:	e005      	b.n	b32 <GSM_ConnectToTrio+0xc2>
	}else
		GSM_SendAt("AT+QIDNSIP=0", response, 100);
     b26:	1d3b      	adds	r3, r7, #4
     b28:	486b      	ldr	r0, [pc, #428]	; (cd8 <GSM_ConnectToTrio+0x268>)
     b2a:	4619      	mov	r1, r3
     b2c:	2264      	movs	r2, #100	; 0x64
     b2e:	f7ff ff4b 	bl	9c8 <GSM_SendAt>
	////Low Power/////
	GSM_SendAt("AT+QGPCLASS=8", response, 100); // 1 Tx timeslots
     b32:	1d3b      	adds	r3, r7, #4
     b34:	4869      	ldr	r0, [pc, #420]	; (cdc <GSM_ConnectToTrio+0x26c>)
     b36:	4619      	mov	r1, r3
     b38:	2264      	movs	r2, #100	; 0x64
     b3a:	f7ff ff45 	bl	9c8 <GSM_SendAt>
	//GSM_SendAt("AT+CDETXPW=900,1,255,2", response, 100);
	//////////////////
	GSM_SendAt("AT",response,100);
     b3e:	1d3b      	adds	r3, r7, #4
     b40:	4867      	ldr	r0, [pc, #412]	; (ce0 <GSM_ConnectToTrio+0x270>)
     b42:	4619      	mov	r1, r3
     b44:	2264      	movs	r2, #100	; 0x64
     b46:	f7ff ff3f 	bl	9c8 <GSM_SendAt>
	int cmd_count = sprintf(buffer, "AT+QIOPEN=\"TCP\",\"%s\",%d\r", per_ip_val, per_port_val);
     b4a:	4b66      	ldr	r3, [pc, #408]	; (ce4 <GSM_ConnectToTrio+0x274>)
     b4c:	681b      	ldr	r3, [r3, #0]
     b4e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
     b52:	4610      	mov	r0, r2
     b54:	4964      	ldr	r1, [pc, #400]	; (ce8 <GSM_ConnectToTrio+0x278>)
     b56:	4a5d      	ldr	r2, [pc, #372]	; (ccc <GSM_ConnectToTrio+0x25c>)
     b58:	f002 fca0 	bl	349c <sprintf>
     b5c:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164
	//GSM_SendAt("AT+QIOPEN=\"TCP\",\"178.63.30.80\",6081", response, 2000);
	UARTSend(PORT_GSM, buffer, cmd_count);
     b60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
     b64:	2001      	movs	r0, #1
     b66:	4619      	mov	r1, r3
     b68:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
     b6c:	f001 ffce 	bl	2b0c <UARTSend>
	UARTSend(PORT_TRACE, buffer, cmd_count);
     b70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
     b74:	2000      	movs	r0, #0
     b76:	4619      	mov	r1, r3
     b78:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
     b7c:	f001 ffc6 	bl	2b0c <UARTSend>
	int server_conn_count = 0;
     b80:	2300      	movs	r3, #0
     b82:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	int server_conn_result = FAIL;
     b86:	f04f 33ff 	mov.w	r3, #4294967295
     b8a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1){
		ReadUart(response, PORT_GSM);
     b8e:	1d3b      	adds	r3, r7, #4
     b90:	4618      	mov	r0, r3
     b92:	2101      	movs	r1, #1
     b94:	f002 f856 	bl	2c44 <ReadUart>
		if (strstr(response,"FAIL") != NULL/* || strstr(response,"ERROR") != NULL*/){ //ERROR is about format ignore
     b98:	1d3b      	adds	r3, r7, #4
     b9a:	4618      	mov	r0, r3
     b9c:	4953      	ldr	r1, [pc, #332]	; (cec <GSM_ConnectToTrio+0x27c>)
     b9e:	f004 f934 	bl	4e0a <strstr>
     ba2:	4603      	mov	r3, r0
     ba4:	2b00      	cmp	r3, #0
     ba6:	d000      	beq.n	baa <GSM_ConnectToTrio+0x13a>
			//UARTSend(PORT_GSM, buffer, cmd_count); //Testing AT to server problem
			break;
     ba8:	e02b      	b.n	c02 <GSM_ConnectToTrio+0x192>
		}
		else if (strstr(response,"CONNECT OK") != NULL || strstr(response,"ALREADY CONNECT") != NULL){
     baa:	1d3b      	adds	r3, r7, #4
     bac:	4618      	mov	r0, r3
     bae:	4950      	ldr	r1, [pc, #320]	; (cf0 <GSM_ConnectToTrio+0x280>)
     bb0:	f004 f92b 	bl	4e0a <strstr>
     bb4:	4603      	mov	r3, r0
     bb6:	2b00      	cmp	r3, #0
     bb8:	d107      	bne.n	bca <GSM_ConnectToTrio+0x15a>
     bba:	1d3b      	adds	r3, r7, #4
     bbc:	4618      	mov	r0, r3
     bbe:	494d      	ldr	r1, [pc, #308]	; (cf4 <GSM_ConnectToTrio+0x284>)
     bc0:	f004 f923 	bl	4e0a <strstr>
     bc4:	4603      	mov	r3, r0
     bc6:	2b00      	cmp	r3, #0
     bc8:	d00a      	beq.n	be0 <GSM_ConnectToTrio+0x170>
			UARTSend(PORT_TRACE, response, cmd_count);
     bca:	1d3b      	adds	r3, r7, #4
     bcc:	2000      	movs	r0, #0
     bce:	4619      	mov	r1, r3
     bd0:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
     bd4:	f001 ff9a 	bl	2b0c <UARTSend>
			server_conn_result = SUCCESS;
     bd8:	2300      	movs	r3, #0
     bda:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
			break;
     bde:	e010      	b.n	c02 <GSM_ConnectToTrio+0x192>
		}
		WDTFeed();
     be0:	f002 f936 	bl	2e50 <WDTFeed>
		DelayMs(300);
     be4:	f44f 7096 	mov.w	r0, #300	; 0x12c
     be8:	f001 fb84 	bl	22f4 <DelayMs>
		server_conn_count++;
     bec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
     bf0:	3301      	adds	r3, #1
     bf2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		if (server_conn_count > 30)
     bf6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
     bfa:	2b1e      	cmp	r3, #30
     bfc:	dd00      	ble.n	c00 <GSM_ConnectToTrio+0x190>
			break;
     bfe:	e000      	b.n	c02 <GSM_ConnectToTrio+0x192>
	}
     c00:	e7c5      	b.n	b8e <GSM_ConnectToTrio+0x11e>
	//GSM_SendAt(buffer, response, 2000);
	if (server_conn_result == SUCCESS) {
     c02:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
     c06:	2b00      	cmp	r3, #0
     c08:	d107      	bne.n	c1a <GSM_ConnectToTrio+0x1aa>
		TraceNL("Connected to the server.");
     c0a:	483b      	ldr	r0, [pc, #236]	; (cf8 <GSM_ConnectToTrio+0x288>)
     c0c:	f001 fb98 	bl	2340 <TraceNL>
		connectionFailCount = 0;
     c10:	4b3a      	ldr	r3, [pc, #232]	; (cfc <GSM_ConnectToTrio+0x28c>)
     c12:	2200      	movs	r2, #0
     c14:	601a      	str	r2, [r3, #0]
		return SUCCESS;
     c16:	2300      	movs	r3, #0
     c18:	e03d      	b.n	c96 <GSM_ConnectToTrio+0x226>
	}
	TraceNL("QIOPEN failed.");
     c1a:	4839      	ldr	r0, [pc, #228]	; (d00 <GSM_ConnectToTrio+0x290>)
     c1c:	f001 fb90 	bl	2340 <TraceNL>
	connectionFailCount++;
     c20:	4b36      	ldr	r3, [pc, #216]	; (cfc <GSM_ConnectToTrio+0x28c>)
     c22:	681b      	ldr	r3, [r3, #0]
     c24:	3301      	adds	r3, #1
     c26:	4a35      	ldr	r2, [pc, #212]	; (cfc <GSM_ConnectToTrio+0x28c>)
     c28:	6013      	str	r3, [r2, #0]
	if (connectionFailCount > 40 && connectionFailCount % 200 == 0) //10 minutes.
     c2a:	4b34      	ldr	r3, [pc, #208]	; (cfc <GSM_ConnectToTrio+0x28c>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	2b28      	cmp	r3, #40	; 0x28
     c30:	dd17      	ble.n	c62 <GSM_ConnectToTrio+0x1f2>
     c32:	4b32      	ldr	r3, [pc, #200]	; (cfc <GSM_ConnectToTrio+0x28c>)
     c34:	681a      	ldr	r2, [r3, #0]
     c36:	4b33      	ldr	r3, [pc, #204]	; (d04 <GSM_ConnectToTrio+0x294>)
     c38:	fb83 1302 	smull	r1, r3, r3, r2
     c3c:	1199      	asrs	r1, r3, #6
     c3e:	17d3      	asrs	r3, r2, #31
     c40:	1acb      	subs	r3, r1, r3
     c42:	21c8      	movs	r1, #200	; 0xc8
     c44:	fb01 f303 	mul.w	r3, r1, r3
     c48:	1ad3      	subs	r3, r2, r3
     c4a:	2b00      	cmp	r3, #0
     c4c:	d109      	bne.n	c62 <GSM_ConnectToTrio+0x1f2>
	{
		TraceNL("Hard resetting module.");
     c4e:	482e      	ldr	r0, [pc, #184]	; (d08 <GSM_ConnectToTrio+0x298>)
     c50:	f001 fb76 	bl	2340 <TraceNL>
		GSM_InitModule(); //Restarts and initializes module.
     c54:	f000 f93a 	bl	ecc <GSM_InitModule>
		last_hard_reset = STT_Value;
     c58:	4b2c      	ldr	r3, [pc, #176]	; (d0c <GSM_ConnectToTrio+0x29c>)
     c5a:	681b      	ldr	r3, [r3, #0]
     c5c:	4a2c      	ldr	r2, [pc, #176]	; (d10 <GSM_ConnectToTrio+0x2a0>)
     c5e:	6013      	str	r3, [r2, #0]
     c60:	e017      	b.n	c92 <GSM_ConnectToTrio+0x222>
	}
	else if (connectionFailCount > 30 && connectionFailCount % 20 == 0){ //100 in production
     c62:	4b26      	ldr	r3, [pc, #152]	; (cfc <GSM_ConnectToTrio+0x28c>)
     c64:	681b      	ldr	r3, [r3, #0]
     c66:	2b1e      	cmp	r3, #30
     c68:	dd13      	ble.n	c92 <GSM_ConnectToTrio+0x222>
     c6a:	4b24      	ldr	r3, [pc, #144]	; (cfc <GSM_ConnectToTrio+0x28c>)
     c6c:	6819      	ldr	r1, [r3, #0]
     c6e:	4b29      	ldr	r3, [pc, #164]	; (d14 <GSM_ConnectToTrio+0x2a4>)
     c70:	fb83 2301 	smull	r2, r3, r3, r1
     c74:	10da      	asrs	r2, r3, #3
     c76:	17cb      	asrs	r3, r1, #31
     c78:	1ad2      	subs	r2, r2, r3
     c7a:	4613      	mov	r3, r2
     c7c:	009b      	lsls	r3, r3, #2
     c7e:	4413      	add	r3, r2
     c80:	009b      	lsls	r3, r3, #2
     c82:	1aca      	subs	r2, r1, r3
     c84:	2a00      	cmp	r2, #0
     c86:	d104      	bne.n	c92 <GSM_ConnectToTrio+0x222>
		TraceNL("connectionFailCount > 40 restarting module.");
     c88:	4823      	ldr	r0, [pc, #140]	; (d18 <GSM_ConnectToTrio+0x2a8>)
     c8a:	f001 fb59 	bl	2340 <TraceNL>
		GSM_InitModule(); //Restarts and initializes module.
     c8e:	f000 f91d 	bl	ecc <GSM_InitModule>
	}
	return FAIL;
     c92:	f04f 33ff 	mov.w	r3, #4294967295
}
     c96:	4618      	mov	r0, r3
     c98:	f507 77b8 	add.w	r7, r7, #368	; 0x170
     c9c:	46bd      	mov	sp, r7
     c9e:	bd80      	pop	{r7, pc}
     ca0:	00006128 	.word	0x00006128
     ca4:	00005fd0 	.word	0x00005fd0
     ca8:	10000ac8 	.word	0x10000ac8
     cac:	00005fe0 	.word	0x00005fe0
     cb0:	10000ae4 	.word	0x10000ae4
     cb4:	10000a78 	.word	0x10000a78
     cb8:	00005ffc 	.word	0x00005ffc
     cbc:	00006008 	.word	0x00006008
     cc0:	0000601c 	.word	0x0000601c
     cc4:	00006030 	.word	0x00006030
     cc8:	0000603c 	.word	0x0000603c
     ccc:	10000a28 	.word	0x10000a28
     cd0:	0000695c 	.word	0x0000695c
     cd4:	00006048 	.word	0x00006048
     cd8:	00006058 	.word	0x00006058
     cdc:	00006068 	.word	0x00006068
     ce0:	00005f78 	.word	0x00005f78
     ce4:	10000a98 	.word	0x10000a98
     ce8:	00006078 	.word	0x00006078
     cec:	00006094 	.word	0x00006094
     cf0:	0000609c 	.word	0x0000609c
     cf4:	000060a8 	.word	0x000060a8
     cf8:	000060b8 	.word	0x000060b8
     cfc:	10000010 	.word	0x10000010
     d00:	000060d4 	.word	0x000060d4
     d04:	51eb851f 	.word	0x51eb851f
     d08:	000060e4 	.word	0x000060e4
     d0c:	10000a9c 	.word	0x10000a9c
     d10:	10000000 	.word	0x10000000
     d14:	66666667 	.word	0x66666667
     d18:	000060fc 	.word	0x000060fc

00000d1c <GSM_SendToServerTCP>:
**
** Returned value:	greater than 0 to indicate number of characters transferred
**
**                  a value less than 0 is error code, tobe defined later.
******************************************************************************/
int GSM_SendToServerTCP(char* msg) {
     d1c:	b580      	push	{r7, lr}
     d1e:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
     d22:	af00      	add	r7, sp, #0
     d24:	1d3b      	adds	r3, r7, #4
     d26:	6018      	str	r0, [r3, #0]
	TraceNL("Entered GSM_SendToServerTCP");
     d28:	483f      	ldr	r0, [pc, #252]	; (e28 <GSM_SendToServerTCP+0x10c>)
     d2a:	f001 fb09 	bl	2340 <TraceNL>
	char response[500];
	char buffer[500];
	GSM_SendAt("AT", response, 100); //Empty buffer
     d2e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
     d32:	483e      	ldr	r0, [pc, #248]	; (e2c <GSM_SendToServerTCP+0x110>)
     d34:	4619      	mov	r1, r3
     d36:	2264      	movs	r2, #100	; 0x64
     d38:	f7ff fe46 	bl	9c8 <GSM_SendAt>
	int count = sprintf(buffer, "AT+QISEND=%d", strlen(msg));
     d3c:	1d3b      	adds	r3, r7, #4
     d3e:	6818      	ldr	r0, [r3, #0]
     d40:	f004 f812 	bl	4d68 <strlen>
     d44:	4602      	mov	r2, r0
     d46:	f107 0308 	add.w	r3, r7, #8
     d4a:	4618      	mov	r0, r3
     d4c:	4938      	ldr	r1, [pc, #224]	; (e30 <GSM_SendToServerTCP+0x114>)
     d4e:	f002 fba5 	bl	349c <sprintf>
     d52:	f8c7 03f0 	str.w	r0, [r7, #1008]	; 0x3f0
	GSM_SendAt(buffer, response, 100);
     d56:	f107 0208 	add.w	r2, r7, #8
     d5a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
     d5e:	4610      	mov	r0, r2
     d60:	4619      	mov	r1, r3
     d62:	2264      	movs	r2, #100	; 0x64
     d64:	f7ff fe30 	bl	9c8 <GSM_SendAt>
	//GSM_SendAt("AT+QISEND", response, 100);
	if (strchr(response, '>') != NULL) {
     d68:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
     d6c:	4618      	mov	r0, r3
     d6e:	213e      	movs	r1, #62	; 0x3e
     d70:	f003 ffcc 	bl	4d0c <strchr>
     d74:	4603      	mov	r3, r0
     d76:	2b00      	cmp	r3, #0
     d78:	d03d      	beq.n	df6 <GSM_SendToServerTCP+0xda>
		UARTSend(PORT_GSM, msg, strlen(msg));
     d7a:	1d3b      	adds	r3, r7, #4
     d7c:	6818      	ldr	r0, [r3, #0]
     d7e:	f003 fff3 	bl	4d68 <strlen>
     d82:	4602      	mov	r2, r0
     d84:	1d3b      	adds	r3, r7, #4
     d86:	2001      	movs	r0, #1
     d88:	6819      	ldr	r1, [r3, #0]
     d8a:	f001 febf 	bl	2b0c <UARTSend>
		DelayMs(300);
     d8e:	f44f 7096 	mov.w	r0, #300	; 0x12c
     d92:	f001 faaf 	bl	22f4 <DelayMs>
		ReadUart(response, PORT_GSM);
     d96:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
     d9a:	4618      	mov	r0, r3
     d9c:	2101      	movs	r1, #1
     d9e:	f001 ff51 	bl	2c44 <ReadUart>
		int sendOkCheck = 0;
     da2:	2300      	movs	r3, #0
     da4:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
		while (strstr(response,"SEND OK") == NULL){
     da8:	e017      	b.n	dda <GSM_SendToServerTCP+0xbe>
			TraceNL("Send OK whiling..");
     daa:	4822      	ldr	r0, [pc, #136]	; (e34 <GSM_SendToServerTCP+0x118>)
     dac:	f001 fac8 	bl	2340 <TraceNL>
			if (sendOkCheck > 20)
     db0:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
     db4:	2b14      	cmp	r3, #20
     db6:	dd02      	ble.n	dbe <GSM_SendToServerTCP+0xa2>
				return FAIL;
     db8:	f04f 33ff 	mov.w	r3, #4294967295
     dbc:	e02f      	b.n	e1e <GSM_SendToServerTCP+0x102>
			DelayMs(100);
     dbe:	2064      	movs	r0, #100	; 0x64
     dc0:	f001 fa98 	bl	22f4 <DelayMs>
			ReadUart(response, PORT_GSM);
     dc4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
     dc8:	4618      	mov	r0, r3
     dca:	2101      	movs	r1, #1
     dcc:	f001 ff3a 	bl	2c44 <ReadUart>
			sendOkCheck++;
     dd0:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
     dd4:	3301      	adds	r3, #1
     dd6:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
	if (strchr(response, '>') != NULL) {
		UARTSend(PORT_GSM, msg, strlen(msg));
		DelayMs(300);
		ReadUart(response, PORT_GSM);
		int sendOkCheck = 0;
		while (strstr(response,"SEND OK") == NULL){
     dda:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
     dde:	4618      	mov	r0, r3
     de0:	4915      	ldr	r1, [pc, #84]	; (e38 <GSM_SendToServerTCP+0x11c>)
     de2:	f004 f812 	bl	4e0a <strstr>
     de6:	4603      	mov	r3, r0
     de8:	2b00      	cmp	r3, #0
     dea:	d0de      	beq.n	daa <GSM_SendToServerTCP+0x8e>
				return FAIL;
			DelayMs(100);
			ReadUart(response, PORT_GSM);
			sendOkCheck++;
		}
		TraceNL("Data sent.");
     dec:	4813      	ldr	r0, [pc, #76]	; (e3c <GSM_SendToServerTCP+0x120>)
     dee:	f001 faa7 	bl	2340 <TraceNL>
		return SUCCESS;
     df2:	2300      	movs	r3, #0
     df4:	e013      	b.n	e1e <GSM_SendToServerTCP+0x102>
	}
	else if (strstr(response, "ERROR") != NULL) {
     df6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
     dfa:	4618      	mov	r0, r3
     dfc:	4910      	ldr	r1, [pc, #64]	; (e40 <GSM_SendToServerTCP+0x124>)
     dfe:	f004 f804 	bl	4e0a <strstr>
     e02:	4603      	mov	r3, r0
     e04:	2b00      	cmp	r3, #0
     e06:	d005      	beq.n	e14 <GSM_SendToServerTCP+0xf8>
		TraceNL("Data fail.");
     e08:	480e      	ldr	r0, [pc, #56]	; (e44 <GSM_SendToServerTCP+0x128>)
     e0a:	f001 fa99 	bl	2340 <TraceNL>
		return FAIL;
     e0e:	f04f 33ff 	mov.w	r3, #4294967295
     e12:	e004      	b.n	e1e <GSM_SendToServerTCP+0x102>
	}
	TraceNL("Data fail.");
     e14:	480b      	ldr	r0, [pc, #44]	; (e44 <GSM_SendToServerTCP+0x128>)
     e16:	f001 fa93 	bl	2340 <TraceNL>
	return FAIL;
     e1a:	f04f 33ff 	mov.w	r3, #4294967295
}
     e1e:	4618      	mov	r0, r3
     e20:	f507 777e 	add.w	r7, r7, #1016	; 0x3f8
     e24:	46bd      	mov	sp, r7
     e26:	bd80      	pop	{r7, pc}
     e28:	00006140 	.word	0x00006140
     e2c:	00005f78 	.word	0x00005f78
     e30:	0000615c 	.word	0x0000615c
     e34:	0000616c 	.word	0x0000616c
     e38:	00006180 	.word	0x00006180
     e3c:	00006188 	.word	0x00006188
     e40:	00006194 	.word	0x00006194
     e44:	0000619c 	.word	0x0000619c

00000e48 <GSM_TogglePwrKey>:
	}
	TraceNL( "Data fail." );
	return ( FAIL );
}

void GSM_TogglePwrKey() {
     e48:	b580      	push	{r7, lr}
     e4a:	af00      	add	r7, sp, #0
	//Toggle PWR_KEY
	LPC_GPIO2->FIOSET = (1 << 3);
     e4c:	4b05      	ldr	r3, [pc, #20]	; (e64 <GSM_TogglePwrKey+0x1c>)
     e4e:	2208      	movs	r2, #8
     e50:	619a      	str	r2, [r3, #24]
	DelayMs(2000);
     e52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     e56:	f001 fa4d 	bl	22f4 <DelayMs>
	LPC_GPIO2->FIOCLR = (1 << 3);
     e5a:	4b02      	ldr	r3, [pc, #8]	; (e64 <GSM_TogglePwrKey+0x1c>)
     e5c:	2208      	movs	r2, #8
     e5e:	61da      	str	r2, [r3, #28]
}
     e60:	bd80      	pop	{r7, pc}
     e62:	bf00      	nop
     e64:	2009c040 	.word	0x2009c040

00000e68 <GSM_ShutdownModule>:

int GSM_ShutdownModule() {
     e68:	b580      	push	{r7, lr}
     e6a:	b09a      	sub	sp, #104	; 0x68
     e6c:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+QPOWD=0", response, 500);
     e6e:	1d3b      	adds	r3, r7, #4
     e70:	4813      	ldr	r0, [pc, #76]	; (ec0 <GSM_ShutdownModule+0x58>)
     e72:	4619      	mov	r1, r3
     e74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     e78:	f7ff fda6 	bl	9c8 <GSM_SendAt>
	DelayMs(1000);
     e7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     e80:	f001 fa38 	bl	22f4 <DelayMs>
	memset(response, 0, sizeof(response));
     e84:	1d3b      	adds	r3, r7, #4
     e86:	4618      	mov	r0, r3
     e88:	2100      	movs	r1, #0
     e8a:	2264      	movs	r2, #100	; 0x64
     e8c:	f002 fa3e 	bl	330c <memset>
	GSM_SendAt("AT", response, 500);
     e90:	1d3b      	adds	r3, r7, #4
     e92:	480c      	ldr	r0, [pc, #48]	; (ec4 <GSM_ShutdownModule+0x5c>)
     e94:	4619      	mov	r1, r3
     e96:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     e9a:	f7ff fd95 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "OK") == NULL) {
     e9e:	1d3b      	adds	r3, r7, #4
     ea0:	4618      	mov	r0, r3
     ea2:	4909      	ldr	r1, [pc, #36]	; (ec8 <GSM_ShutdownModule+0x60>)
     ea4:	f003 ffb1 	bl	4e0a <strstr>
     ea8:	4603      	mov	r3, r0
     eaa:	2b00      	cmp	r3, #0
     eac:	d101      	bne.n	eb2 <GSM_ShutdownModule+0x4a>
		return ( SUCCESS );
     eae:	2300      	movs	r3, #0
     eb0:	e001      	b.n	eb6 <GSM_ShutdownModule+0x4e>
	}
	return ( FAIL );
     eb2:	f04f 33ff 	mov.w	r3, #4294967295
}
     eb6:	4618      	mov	r0, r3
     eb8:	3768      	adds	r7, #104	; 0x68
     eba:	46bd      	mov	sp, r7
     ebc:	bd80      	pop	{r7, pc}
     ebe:	bf00      	nop
     ec0:	000061c0 	.word	0x000061c0
     ec4:	00005f78 	.word	0x00005f78
     ec8:	000061cc 	.word	0x000061cc

00000ecc <GSM_InitModule>:
	LPC_GPIO2->FIOCLR = (1 << 2);

	return ( SUCCESS );
}

int GSM_InitModule() {
     ecc:	b580      	push	{r7, lr}
     ece:	b09c      	sub	sp, #112	; 0x70
     ed0:	af00      	add	r7, sp, #0
	//Unset EMERG
	char response[100];
	LPC_GPIO2->FIOCLR = (1 << 2);
     ed2:	4b30      	ldr	r3, [pc, #192]	; (f94 <GSM_InitModule+0xc8>)
     ed4:	2204      	movs	r2, #4
     ed6:	61da      	str	r2, [r3, #28]
	DelayMs(1000);
     ed8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     edc:	f001 fa0a 	bl	22f4 <DelayMs>
	GSM_TogglePwrKey();
     ee0:	f7ff ffb2 	bl	e48 <GSM_TogglePwrKey>
	int i = 0;
     ee4:	2300      	movs	r3, #0
     ee6:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (i = 0; i < 10; i++) {
     ee8:	2300      	movs	r3, #0
     eea:	66fb      	str	r3, [r7, #108]	; 0x6c
     eec:	e048      	b.n	f80 <GSM_InitModule+0xb4>
		GSM_SendAt("AT", response, 500);
     eee:	1d3b      	adds	r3, r7, #4
     ef0:	4829      	ldr	r0, [pc, #164]	; (f98 <GSM_InitModule+0xcc>)
     ef2:	4619      	mov	r1, r3
     ef4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     ef8:	f7ff fd66 	bl	9c8 <GSM_SendAt>
		if (strstr(response, "OK") != NULL) {
     efc:	1d3b      	adds	r3, r7, #4
     efe:	4618      	mov	r0, r3
     f00:	4926      	ldr	r1, [pc, #152]	; (f9c <GSM_InitModule+0xd0>)
     f02:	f003 ff82 	bl	4e0a <strstr>
     f06:	4603      	mov	r3, r0
     f08:	2b00      	cmp	r3, #0
     f0a:	d036      	beq.n	f7a <GSM_InitModule+0xae>
			GSM_SendAt("AT+CMEE=2", response, 500);
     f0c:	1d3b      	adds	r3, r7, #4
     f0e:	4824      	ldr	r0, [pc, #144]	; (fa0 <GSM_InitModule+0xd4>)
     f10:	4619      	mov	r1, r3
     f12:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     f16:	f7ff fd57 	bl	9c8 <GSM_SendAt>
			DelayMs(500);
     f1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     f1e:	f001 f9e9 	bl	22f4 <DelayMs>
			//Init SMS
			//SMS Text Mode
			GSM_SendAt("AT+CMGF=1", response, 500);
     f22:	1d3b      	adds	r3, r7, #4
     f24:	481f      	ldr	r0, [pc, #124]	; (fa4 <GSM_InitModule+0xd8>)
     f26:	4619      	mov	r1, r3
     f28:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     f2c:	f7ff fd4c 	bl	9c8 <GSM_SendAt>
			//Initialize SMS, if not new messages does not cause +CMTI
			GSM_SendAt("AT+CNMI=2,1,0,0,0", response, 500);
     f30:	1d3b      	adds	r3, r7, #4
     f32:	481d      	ldr	r0, [pc, #116]	; (fa8 <GSM_InitModule+0xdc>)
     f34:	4619      	mov	r1, r3
     f36:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     f3a:	f7ff fd45 	bl	9c8 <GSM_SendAt>
			int sim_check = FAIL;
     f3e:	f04f 33ff 	mov.w	r3, #4294967295
     f42:	66bb      	str	r3, [r7, #104]	; 0x68
			for(;i<40;i++){
     f44:	e014      	b.n	f70 <GSM_InitModule+0xa4>
				sim_check = GSM_CheckSimCard();
     f46:	f000 f891 	bl	106c <GSM_CheckSimCard>
     f4a:	66b8      	str	r0, [r7, #104]	; 0x68
				if (sim_check == SUCCESS){
     f4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     f4e:	2b00      	cmp	r3, #0
     f50:	d103      	bne.n	f5a <GSM_InitModule+0x8e>
					TraceNL("Sim card ready..\r");
     f52:	4816      	ldr	r0, [pc, #88]	; (fac <GSM_InitModule+0xe0>)
     f54:	f001 f9f4 	bl	2340 <TraceNL>
					break;
     f58:	e00d      	b.n	f76 <GSM_InitModule+0xaa>
				}
				else
					TraceNL("Sim not ready!\r");
     f5a:	4815      	ldr	r0, [pc, #84]	; (fb0 <GSM_InitModule+0xe4>)
     f5c:	f001 f9f0 	bl	2340 <TraceNL>
				DelayMs(200);
     f60:	20c8      	movs	r0, #200	; 0xc8
     f62:	f001 f9c7 	bl	22f4 <DelayMs>
				WDTFeed();
     f66:	f001 ff73 	bl	2e50 <WDTFeed>
			//SMS Text Mode
			GSM_SendAt("AT+CMGF=1", response, 500);
			//Initialize SMS, if not new messages does not cause +CMTI
			GSM_SendAt("AT+CNMI=2,1,0,0,0", response, 500);
			int sim_check = FAIL;
			for(;i<40;i++){
     f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     f6c:	3301      	adds	r3, #1
     f6e:	66fb      	str	r3, [r7, #108]	; 0x6c
     f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     f72:	2b27      	cmp	r3, #39	; 0x27
     f74:	dde7      	ble.n	f46 <GSM_InitModule+0x7a>
				else
					TraceNL("Sim not ready!\r");
				DelayMs(200);
				WDTFeed();
			}
			return sim_check;
     f76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     f78:	e007      	b.n	f8a <GSM_InitModule+0xbe>
	char response[100];
	LPC_GPIO2->FIOCLR = (1 << 2);
	DelayMs(1000);
	GSM_TogglePwrKey();
	int i = 0;
	for (i = 0; i < 10; i++) {
     f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     f7c:	3301      	adds	r3, #1
     f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
     f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     f82:	2b09      	cmp	r3, #9
     f84:	ddb3      	ble.n	eee <GSM_InitModule+0x22>
				WDTFeed();
			}
			return sim_check;
		}
	}
	return FAIL;
     f86:	f04f 33ff 	mov.w	r3, #4294967295
}
     f8a:	4618      	mov	r0, r3
     f8c:	3770      	adds	r7, #112	; 0x70
     f8e:	46bd      	mov	sp, r7
     f90:	bd80      	pop	{r7, pc}
     f92:	bf00      	nop
     f94:	2009c040 	.word	0x2009c040
     f98:	00005f78 	.word	0x00005f78
     f9c:	000061cc 	.word	0x000061cc
     fa0:	000061d0 	.word	0x000061d0
     fa4:	000061dc 	.word	0x000061dc
     fa8:	000061e8 	.word	0x000061e8
     fac:	000061fc 	.word	0x000061fc
     fb0:	00006210 	.word	0x00006210

00000fb4 <GSM_GetSignalStrength>:

int GSM_GetSignalStrength() {
     fb4:	b580      	push	{r7, lr}
     fb6:	b0a0      	sub	sp, #128	; 0x80
     fb8:	af02      	add	r7, sp, #8
	char csq_str[20];
	char response[100];
	GSM_SendAt("AT", response, 100);
     fba:	463b      	mov	r3, r7
     fbc:	4810      	ldr	r0, [pc, #64]	; (1000 <GSM_GetSignalStrength+0x4c>)
     fbe:	4619      	mov	r1, r3
     fc0:	2264      	movs	r2, #100	; 0x64
     fc2:	f7ff fd01 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+CSQ", response, 100);
     fc6:	463b      	mov	r3, r7
     fc8:	480e      	ldr	r0, [pc, #56]	; (1004 <GSM_GetSignalStrength+0x50>)
     fca:	4619      	mov	r1, r3
     fcc:	2264      	movs	r2, #100	; 0x64
     fce:	f7ff fcfb 	bl	9c8 <GSM_SendAt>
	UTIL_GetPartOfString(response, csq_str, ':', ',', 0, 0);
     fd2:	4639      	mov	r1, r7
     fd4:	f107 0264 	add.w	r2, r7, #100	; 0x64
     fd8:	2300      	movs	r3, #0
     fda:	9300      	str	r3, [sp, #0]
     fdc:	2300      	movs	r3, #0
     fde:	9301      	str	r3, [sp, #4]
     fe0:	4608      	mov	r0, r1
     fe2:	4611      	mov	r1, r2
     fe4:	223a      	movs	r2, #58	; 0x3a
     fe6:	232c      	movs	r3, #44	; 0x2c
     fe8:	f000 f8de 	bl	11a8 <UTIL_GetPartOfString>
	return atoi(csq_str);
     fec:	f107 0364 	add.w	r3, r7, #100	; 0x64
     ff0:	4618      	mov	r0, r3
     ff2:	f003 fe5f 	bl	4cb4 <atoi>
     ff6:	4603      	mov	r3, r0
}
     ff8:	4618      	mov	r0, r3
     ffa:	3778      	adds	r7, #120	; 0x78
     ffc:	46bd      	mov	sp, r7
     ffe:	bd80      	pop	{r7, pc}
    1000:	00005f78 	.word	0x00005f78
    1004:	00006220 	.word	0x00006220

00001008 <GSM_GetRegStat>:


int GSM_GetRegStat(){
    1008:	b580      	push	{r7, lr}
    100a:	b09e      	sub	sp, #120	; 0x78
    100c:	af00      	add	r7, sp, #0
	char csq_str[20];
	char response[100];
	GSM_SendAt("AT+CREG?", response, 100);
    100e:	463b      	mov	r3, r7
    1010:	4812      	ldr	r0, [pc, #72]	; (105c <GSM_GetRegStat+0x54>)
    1012:	4619      	mov	r1, r3
    1014:	2264      	movs	r2, #100	; 0x64
    1016:	f7ff fcd7 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "+CREG") != NULL && ((strstr(response, ",5") != NULL) || (strstr(response, ",1") != NULL))) {
    101a:	463b      	mov	r3, r7
    101c:	4618      	mov	r0, r3
    101e:	4910      	ldr	r1, [pc, #64]	; (1060 <GSM_GetRegStat+0x58>)
    1020:	f003 fef3 	bl	4e0a <strstr>
    1024:	4603      	mov	r3, r0
    1026:	2b00      	cmp	r3, #0
    1028:	d011      	beq.n	104e <GSM_GetRegStat+0x46>
    102a:	463b      	mov	r3, r7
    102c:	4618      	mov	r0, r3
    102e:	490d      	ldr	r1, [pc, #52]	; (1064 <GSM_GetRegStat+0x5c>)
    1030:	f003 feeb 	bl	4e0a <strstr>
    1034:	4603      	mov	r3, r0
    1036:	2b00      	cmp	r3, #0
    1038:	d107      	bne.n	104a <GSM_GetRegStat+0x42>
    103a:	463b      	mov	r3, r7
    103c:	4618      	mov	r0, r3
    103e:	490a      	ldr	r1, [pc, #40]	; (1068 <GSM_GetRegStat+0x60>)
    1040:	f003 fee3 	bl	4e0a <strstr>
    1044:	4603      	mov	r3, r0
    1046:	2b00      	cmp	r3, #0
    1048:	d001      	beq.n	104e <GSM_GetRegStat+0x46>
		return SUCCESS;
    104a:	2300      	movs	r3, #0
    104c:	e001      	b.n	1052 <GSM_GetRegStat+0x4a>
	}
	return FAIL;
    104e:	f04f 33ff 	mov.w	r3, #4294967295
}
    1052:	4618      	mov	r0, r3
    1054:	3778      	adds	r7, #120	; 0x78
    1056:	46bd      	mov	sp, r7
    1058:	bd80      	pop	{r7, pc}
    105a:	bf00      	nop
    105c:	00006228 	.word	0x00006228
    1060:	00006234 	.word	0x00006234
    1064:	0000623c 	.word	0x0000623c
    1068:	00006240 	.word	0x00006240

0000106c <GSM_CheckSimCard>:
	return FAIL;
}



int GSM_CheckSimCard() {
    106c:	b580      	push	{r7, lr}
    106e:	b09a      	sub	sp, #104	; 0x68
    1070:	af00      	add	r7, sp, #0
	TraceNL("Entered check sim card.");
    1072:	480c      	ldr	r0, [pc, #48]	; (10a4 <GSM_CheckSimCard+0x38>)
    1074:	f001 f964 	bl	2340 <TraceNL>
	char response[100];
	GSM_SendAt("AT+CPIN?", response, 250);
    1078:	1d3b      	adds	r3, r7, #4
    107a:	480b      	ldr	r0, [pc, #44]	; (10a8 <GSM_CheckSimCard+0x3c>)
    107c:	4619      	mov	r1, r3
    107e:	22fa      	movs	r2, #250	; 0xfa
    1080:	f7ff fca2 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "READY") != NULL)
    1084:	1d3b      	adds	r3, r7, #4
    1086:	4618      	mov	r0, r3
    1088:	4908      	ldr	r1, [pc, #32]	; (10ac <GSM_CheckSimCard+0x40>)
    108a:	f003 febe 	bl	4e0a <strstr>
    108e:	4603      	mov	r3, r0
    1090:	2b00      	cmp	r3, #0
    1092:	d001      	beq.n	1098 <GSM_CheckSimCard+0x2c>
		return ( SUCCESS );
    1094:	2300      	movs	r3, #0
    1096:	e001      	b.n	109c <GSM_CheckSimCard+0x30>
	return ( FAIL );
    1098:	f04f 33ff 	mov.w	r3, #4294967295
}
    109c:	4618      	mov	r0, r3
    109e:	3768      	adds	r7, #104	; 0x68
    10a0:	46bd      	mov	sp, r7
    10a2:	bd80      	pop	{r7, pc}
    10a4:	00006248 	.word	0x00006248
    10a8:	00006260 	.word	0x00006260
    10ac:	0000626c 	.word	0x0000626c

000010b0 <GSM_GetImei>:

void GSM_GetImei() {
    10b0:	b580      	push	{r7, lr}
    10b2:	b09a      	sub	sp, #104	; 0x68
    10b4:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+GSN", response, 500);
    10b6:	1d3b      	adds	r3, r7, #4
    10b8:	480a      	ldr	r0, [pc, #40]	; (10e4 <GSM_GetImei+0x34>)
    10ba:	4619      	mov	r1, r3
    10bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    10c0:	f7ff fc82 	bl	9c8 <GSM_SendAt>
	TraceNL("IMEI : ");
    10c4:	4808      	ldr	r0, [pc, #32]	; (10e8 <GSM_GetImei+0x38>)
    10c6:	f001 f93b 	bl	2340 <TraceNL>
	strncpy(imei, response + 9, 15);
    10ca:	1d3b      	adds	r3, r7, #4
    10cc:	3309      	adds	r3, #9
    10ce:	4807      	ldr	r0, [pc, #28]	; (10ec <GSM_GetImei+0x3c>)
    10d0:	4619      	mov	r1, r3
    10d2:	220f      	movs	r2, #15
    10d4:	f003 fe6d 	bl	4db2 <strncpy>
	TraceNL(imei);
    10d8:	4804      	ldr	r0, [pc, #16]	; (10ec <GSM_GetImei+0x3c>)
    10da:	f001 f931 	bl	2340 <TraceNL>
}
    10de:	3768      	adds	r7, #104	; 0x68
    10e0:	46bd      	mov	sp, r7
    10e2:	bd80      	pop	{r7, pc}
    10e4:	00006274 	.word	0x00006274
    10e8:	0000627c 	.word	0x0000627c
    10ec:	10000cfc 	.word	0x10000cfc

000010f0 <GSM_GetImsi>:

void GSM_GetImsi() {
    10f0:	b590      	push	{r4, r7, lr}
    10f2:	b09d      	sub	sp, #116	; 0x74
    10f4:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+CIMI", response, 500);
    10f6:	463b      	mov	r3, r7
    10f8:	4827      	ldr	r0, [pc, #156]	; (1198 <GSM_GetImsi+0xa8>)
    10fa:	4619      	mov	r1, r3
    10fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1100:	f7ff fc62 	bl	9c8 <GSM_SendAt>
	Trace("IMSI : ");
    1104:	4825      	ldr	r0, [pc, #148]	; (119c <GSM_GetImsi+0xac>)
    1106:	f001 f90b 	bl	2320 <Trace>
	int i;
	int index = 0;
    110a:	2300      	movs	r3, #0
    110c:	66bb      	str	r3, [r7, #104]	; 0x68
	int is_start = 0;
    110e:	2300      	movs	r3, #0
    1110:	667b      	str	r3, [r7, #100]	; 0x64
	for (i = 0; i < strlen(response); i++) {
    1112:	2300      	movs	r3, #0
    1114:	66fb      	str	r3, [r7, #108]	; 0x6c
    1116:	e02c      	b.n	1172 <GSM_GetImsi+0x82>
		if (index > 19)
    1118:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    111a:	2b13      	cmp	r3, #19
    111c:	dd00      	ble.n	1120 <GSM_GetImsi+0x30>
			break;
    111e:	e030      	b.n	1182 <GSM_GetImsi+0x92>
		if ( isdigit(response[i]))
    1120:	463a      	mov	r2, r7
    1122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1124:	4413      	add	r3, r2
    1126:	781b      	ldrb	r3, [r3, #0]
    1128:	3380      	adds	r3, #128	; 0x80
    112a:	4a1d      	ldr	r2, [pc, #116]	; (11a0 <GSM_GetImsi+0xb0>)
    112c:	5cd3      	ldrb	r3, [r2, r3]
    112e:	f003 0320 	and.w	r3, r3, #32
    1132:	2b00      	cmp	r3, #0
    1134:	d001      	beq.n	113a <GSM_GetImsi+0x4a>
			is_start = 1;
    1136:	2301      	movs	r3, #1
    1138:	667b      	str	r3, [r7, #100]	; 0x64
		if (is_start == 1 && response[i] == '\n')
    113a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    113c:	2b01      	cmp	r3, #1
    113e:	d106      	bne.n	114e <GSM_GetImsi+0x5e>
    1140:	463a      	mov	r2, r7
    1142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1144:	4413      	add	r3, r2
    1146:	781b      	ldrb	r3, [r3, #0]
    1148:	2b0a      	cmp	r3, #10
    114a:	d100      	bne.n	114e <GSM_GetImsi+0x5e>
			break;
    114c:	e019      	b.n	1182 <GSM_GetImsi+0x92>
		if (is_start == 1) {
    114e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1150:	2b01      	cmp	r3, #1
    1152:	d10b      	bne.n	116c <GSM_GetImsi+0x7c>
			imsi[index] = response[i];
    1154:	463a      	mov	r2, r7
    1156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1158:	4413      	add	r3, r2
    115a:	7819      	ldrb	r1, [r3, #0]
    115c:	4a11      	ldr	r2, [pc, #68]	; (11a4 <GSM_GetImsi+0xb4>)
    115e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1160:	4413      	add	r3, r2
    1162:	460a      	mov	r2, r1
    1164:	701a      	strb	r2, [r3, #0]
			index++;
    1166:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1168:	3301      	adds	r3, #1
    116a:	66bb      	str	r3, [r7, #104]	; 0x68
	GSM_SendAt("AT+CIMI", response, 500);
	Trace("IMSI : ");
	int i;
	int index = 0;
	int is_start = 0;
	for (i = 0; i < strlen(response); i++) {
    116c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    116e:	3301      	adds	r3, #1
    1170:	66fb      	str	r3, [r7, #108]	; 0x6c
    1172:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    1174:	463b      	mov	r3, r7
    1176:	4618      	mov	r0, r3
    1178:	f003 fdf6 	bl	4d68 <strlen>
    117c:	4603      	mov	r3, r0
    117e:	429c      	cmp	r4, r3
    1180:	d3ca      	bcc.n	1118 <GSM_GetImsi+0x28>
		if (is_start == 1) {
			imsi[index] = response[i];
			index++;
		}
	}
	imsi[index - 1] = '\0';
    1182:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1184:	3b01      	subs	r3, #1
    1186:	4a07      	ldr	r2, [pc, #28]	; (11a4 <GSM_GetImsi+0xb4>)
    1188:	2100      	movs	r1, #0
    118a:	54d1      	strb	r1, [r2, r3]
	TraceNL(imsi);
    118c:	4805      	ldr	r0, [pc, #20]	; (11a4 <GSM_GetImsi+0xb4>)
    118e:	f001 f8d7 	bl	2340 <TraceNL>
}
    1192:	3774      	adds	r7, #116	; 0x74
    1194:	46bd      	mov	sp, r7
    1196:	bd90      	pop	{r4, r7, pc}
    1198:	00006284 	.word	0x00006284
    119c:	0000628c 	.word	0x0000628c
    11a0:	0000695c 	.word	0x0000695c
    11a4:	10000ce8 	.word	0x10000ce8

000011a8 <UTIL_GetPartOfString>:
	return *p == '\0';
}


void UTIL_GetPartOfString(char*source, char*dest, char start_chr, char end_chr,
		int first_included, int last_included) {
    11a8:	b580      	push	{r7, lr}
    11aa:	b096      	sub	sp, #88	; 0x58
    11ac:	af00      	add	r7, sp, #0
    11ae:	60f8      	str	r0, [r7, #12]
    11b0:	60b9      	str	r1, [r7, #8]
    11b2:	4611      	mov	r1, r2
    11b4:	461a      	mov	r2, r3
    11b6:	460b      	mov	r3, r1
    11b8:	71fb      	strb	r3, [r7, #7]
    11ba:	4613      	mov	r3, r2
    11bc:	71bb      	strb	r3, [r7, #6]
	char buffer[50];
	int count;
	//Trace("1");
	char* start = strchr(source, start_chr);
    11be:	79fb      	ldrb	r3, [r7, #7]
    11c0:	68f8      	ldr	r0, [r7, #12]
    11c2:	4619      	mov	r1, r3
    11c4:	f003 fda2 	bl	4d0c <strchr>
    11c8:	4603      	mov	r3, r0
    11ca:	657b      	str	r3, [r7, #84]	; 0x54
	//Trace("2");
	char* end = strchr(source, end_chr);
    11cc:	79bb      	ldrb	r3, [r7, #6]
    11ce:	68f8      	ldr	r0, [r7, #12]
    11d0:	4619      	mov	r1, r3
    11d2:	f003 fd9b 	bl	4d0c <strchr>
    11d6:	4603      	mov	r3, r0
    11d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	//Trace("3");
	int length;
	//Trace("4");
	if (first_included == 0)
    11da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    11dc:	2b00      	cmp	r3, #0
    11de:	d102      	bne.n	11e6 <UTIL_GetPartOfString+0x3e>
		start++;
    11e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    11e2:	3301      	adds	r3, #1
    11e4:	657b      	str	r3, [r7, #84]	; 0x54
	//Trace("5");
	if (start == NULL || end == NULL) {
    11e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    11e8:	2b00      	cmp	r3, #0
    11ea:	d01e      	beq.n	122a <UTIL_GetPartOfString+0x82>
    11ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    11ee:	2b00      	cmp	r3, #0
    11f0:	d01b      	beq.n	122a <UTIL_GetPartOfString+0x82>
	 if (end == NULL){
	 end = source[strlen(source)-1];
	 Trace("C");
	 }*/
	//Trace("7");
	length = end - start;
    11f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    11f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    11f6:	1ad3      	subs	r3, r2, r3
    11f8:	653b      	str	r3, [r7, #80]	; 0x50
	//Trace("8");
	if (last_included > 0) {
    11fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    11fc:	2b00      	cmp	r3, #0
    11fe:	dd02      	ble.n	1206 <UTIL_GetPartOfString+0x5e>
		length = length + 1;
    1200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1202:	3301      	adds	r3, #1
    1204:	653b      	str	r3, [r7, #80]	; 0x50
		//Trace("9");
	}

	count = sprintf(buffer, "-%d-", length);
    1206:	f107 0314 	add.w	r3, r7, #20
    120a:	4618      	mov	r0, r3
    120c:	4908      	ldr	r1, [pc, #32]	; (1230 <UTIL_GetPartOfString+0x88>)
    120e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    1210:	f002 f944 	bl	349c <sprintf>
    1214:	64b8      	str	r0, [r7, #72]	; 0x48
	//UARTSend(PORT_TRACE,buffer,count);
	strncpy(dest, start, length);
    1216:	68b8      	ldr	r0, [r7, #8]
    1218:	6d79      	ldr	r1, [r7, #84]	; 0x54
    121a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    121c:	f003 fdc9 	bl	4db2 <strncpy>
	//Trace("A");
	//Terminate with null.
	dest[length] = '\0';
    1220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1222:	68ba      	ldr	r2, [r7, #8]
    1224:	4413      	add	r3, r2
    1226:	2200      	movs	r2, #0
    1228:	701a      	strb	r2, [r3, #0]
	//Trace("B");
}
    122a:	3758      	adds	r7, #88	; 0x58
    122c:	46bd      	mov	sp, r7
    122e:	bd80      	pop	{r7, pc}
    1230:	00006294 	.word	0x00006294

00001234 <u16CRC_Calc16>:
**
** Returned value:  16-bit CRC
**
******************************************************************************/
uint16_t u16CRC_Calc16(const uint8_t *pu8Data, int16_t i16Len)
{
    1234:	b480      	push	{r7}
    1236:	b085      	sub	sp, #20
    1238:	af00      	add	r7, sp, #0
    123a:	6078      	str	r0, [r7, #4]
    123c:	460b      	mov	r3, r1
    123e:	807b      	strh	r3, [r7, #2]
	uint8_t i;
	uint16_t u16CRC = 0;
    1240:	2300      	movs	r3, #0
    1242:	81bb      	strh	r3, [r7, #12]

    while(--i16Len >= 0)
    1244:	e022      	b.n	128c <u16CRC_Calc16+0x58>
    {
    	i = 8;
    1246:	2308      	movs	r3, #8
    1248:	73fb      	strb	r3, [r7, #15]
    	u16CRC = u16CRC ^ (((uint16_t)*pu8Data++) << 8);
    124a:	687b      	ldr	r3, [r7, #4]
    124c:	1c5a      	adds	r2, r3, #1
    124e:	607a      	str	r2, [r7, #4]
    1250:	781b      	ldrb	r3, [r3, #0]
    1252:	021b      	lsls	r3, r3, #8
    1254:	b29a      	uxth	r2, r3
    1256:	89bb      	ldrh	r3, [r7, #12]
    1258:	4053      	eors	r3, r2
    125a:	b29b      	uxth	r3, r3
    125c:	81bb      	strh	r3, [r7, #12]

    	do
        {
    		if (u16CRC & 0x8000)
    125e:	89bb      	ldrh	r3, [r7, #12]
    1260:	b21b      	sxth	r3, r3
    1262:	2b00      	cmp	r3, #0
    1264:	da09      	bge.n	127a <u16CRC_Calc16+0x46>
    		{
    			u16CRC = u16CRC << 1 ^ 0x1021;
    1266:	89bb      	ldrh	r3, [r7, #12]
    1268:	005b      	lsls	r3, r3, #1
    126a:	b29b      	uxth	r3, r3
    126c:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
    1270:	f083 0301 	eor.w	r3, r3, #1
    1274:	b29b      	uxth	r3, r3
    1276:	81bb      	strh	r3, [r7, #12]
    1278:	e002      	b.n	1280 <u16CRC_Calc16+0x4c>
    		}
    		else
    		{
    			u16CRC = u16CRC << 1;
    127a:	89bb      	ldrh	r3, [r7, #12]
    127c:	005b      	lsls	r3, r3, #1
    127e:	81bb      	strh	r3, [r7, #12]
    		}
        }
    	while(--i);
    1280:	7bfb      	ldrb	r3, [r7, #15]
    1282:	3b01      	subs	r3, #1
    1284:	73fb      	strb	r3, [r7, #15]
    1286:	7bfb      	ldrb	r3, [r7, #15]
    1288:	2b00      	cmp	r3, #0
    128a:	d1e8      	bne.n	125e <u16CRC_Calc16+0x2a>
uint16_t u16CRC_Calc16(const uint8_t *pu8Data, int16_t i16Len)
{
	uint8_t i;
	uint16_t u16CRC = 0;

    while(--i16Len >= 0)
    128c:	887b      	ldrh	r3, [r7, #2]
    128e:	3b01      	subs	r3, #1
    1290:	b29b      	uxth	r3, r3
    1292:	807b      	strh	r3, [r7, #2]
    1294:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    1298:	2b00      	cmp	r3, #0
    129a:	dad4      	bge.n	1246 <u16CRC_Calc16+0x12>
    			u16CRC = u16CRC << 1;
    		}
        }
    	while(--i);
    }
    return u16CRC;
    129c:	89bb      	ldrh	r3, [r7, #12]
}
    129e:	4618      	mov	r0, r3
    12a0:	3714      	adds	r7, #20
    12a2:	46bd      	mov	sp, r7
    12a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    12a8:	4770      	bx	lr
    12aa:	bf00      	nop

000012ac <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    12ac:	b480      	push	{r7}
    12ae:	b083      	sub	sp, #12
    12b0:	af00      	add	r7, sp, #0
    12b2:	4603      	mov	r3, r0
    12b4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    12b6:	4908      	ldr	r1, [pc, #32]	; (12d8 <NVIC_EnableIRQ+0x2c>)
    12b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
    12bc:	095b      	lsrs	r3, r3, #5
    12be:	79fa      	ldrb	r2, [r7, #7]
    12c0:	f002 021f 	and.w	r2, r2, #31
    12c4:	2001      	movs	r0, #1
    12c6:	fa00 f202 	lsl.w	r2, r0, r2
    12ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    12ce:	370c      	adds	r7, #12
    12d0:	46bd      	mov	sp, r7
    12d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    12d6:	4770      	bx	lr
    12d8:	e000e100 	.word	0xe000e100

000012dc <I2C0_IRQHandler>:

volatile uint32_t RdIndex_1,RdIndex_0 = 0;
volatile uint32_t WrIndex_1,WrIndex_0 = 0;


void I2C0_IRQHandler(void) {
    12dc:	b480      	push	{r7}
    12de:	b083      	sub	sp, #12
    12e0:	af00      	add	r7, sp, #0
	uint8_t StatValue;
	/* this handler deals with master read and master write only */
	StatValue = LPC_I2C0->I2STAT;
    12e2:	4ba9      	ldr	r3, [pc, #676]	; (1588 <I2C0_IRQHandler+0x2ac>)
    12e4:	685b      	ldr	r3, [r3, #4]
    12e6:	71fb      	strb	r3, [r7, #7]
	switch (StatValue) {
    12e8:	79fb      	ldrb	r3, [r7, #7]
    12ea:	3b08      	subs	r3, #8
    12ec:	2b50      	cmp	r3, #80	; 0x50
    12ee:	f200 8184 	bhi.w	15fa <I2C0_IRQHandler+0x31e>
    12f2:	a201      	add	r2, pc, #4	; (adr r2, 12f8 <I2C0_IRQHandler+0x1c>)
    12f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    12f8:	0000143d 	.word	0x0000143d
    12fc:	000015fb 	.word	0x000015fb
    1300:	000015fb 	.word	0x000015fb
    1304:	000015fb 	.word	0x000015fb
    1308:	000015fb 	.word	0x000015fb
    130c:	000015fb 	.word	0x000015fb
    1310:	000015fb 	.word	0x000015fb
    1314:	000015fb 	.word	0x000015fb
    1318:	0000145f 	.word	0x0000145f
    131c:	000015fb 	.word	0x000015fb
    1320:	000015fb 	.word	0x000015fb
    1324:	000015fb 	.word	0x000015fb
    1328:	000015fb 	.word	0x000015fb
    132c:	000015fb 	.word	0x000015fb
    1330:	000015fb 	.word	0x000015fb
    1334:	000015fb 	.word	0x000015fb
    1338:	00001489 	.word	0x00001489
    133c:	000015fb 	.word	0x000015fb
    1340:	000015fb 	.word	0x000015fb
    1344:	000015fb 	.word	0x000015fb
    1348:	000015fb 	.word	0x000015fb
    134c:	000015fb 	.word	0x000015fb
    1350:	000015fb 	.word	0x000015fb
    1354:	000015fb 	.word	0x000015fb
    1358:	000015ed 	.word	0x000015ed
    135c:	000015fb 	.word	0x000015fb
    1360:	000015fb 	.word	0x000015fb
    1364:	000015fb 	.word	0x000015fb
    1368:	000015fb 	.word	0x000015fb
    136c:	000015fb 	.word	0x000015fb
    1370:	000015fb 	.word	0x000015fb
    1374:	000015fb 	.word	0x000015fb
    1378:	000014b3 	.word	0x000014b3
    137c:	000015fb 	.word	0x000015fb
    1380:	000015fb 	.word	0x000015fb
    1384:	000015fb 	.word	0x000015fb
    1388:	000015fb 	.word	0x000015fb
    138c:	000015fb 	.word	0x000015fb
    1390:	000015fb 	.word	0x000015fb
    1394:	000015fb 	.word	0x000015fb
    1398:	000014f9 	.word	0x000014f9
    139c:	000015fb 	.word	0x000015fb
    13a0:	000015fb 	.word	0x000015fb
    13a4:	000015fb 	.word	0x000015fb
    13a8:	000015fb 	.word	0x000015fb
    13ac:	000015fb 	.word	0x000015fb
    13b0:	000015fb 	.word	0x000015fb
    13b4:	000015fb 	.word	0x000015fb
    13b8:	000015fb 	.word	0x000015fb
    13bc:	000015fb 	.word	0x000015fb
    13c0:	000015fb 	.word	0x000015fb
    13c4:	000015fb 	.word	0x000015fb
    13c8:	000015fb 	.word	0x000015fb
    13cc:	000015fb 	.word	0x000015fb
    13d0:	000015fb 	.word	0x000015fb
    13d4:	000015fb 	.word	0x000015fb
    13d8:	00001579 	.word	0x00001579
    13dc:	000015fb 	.word	0x000015fb
    13e0:	000015fb 	.word	0x000015fb
    13e4:	000015fb 	.word	0x000015fb
    13e8:	000015fb 	.word	0x000015fb
    13ec:	000015fb 	.word	0x000015fb
    13f0:	000015fb 	.word	0x000015fb
    13f4:	000015fb 	.word	0x000015fb
    13f8:	000015ed 	.word	0x000015ed
    13fc:	000015fb 	.word	0x000015fb
    1400:	000015fb 	.word	0x000015fb
    1404:	000015fb 	.word	0x000015fb
    1408:	000015fb 	.word	0x000015fb
    140c:	000015fb 	.word	0x000015fb
    1410:	000015fb 	.word	0x000015fb
    1414:	000015fb 	.word	0x000015fb
    1418:	000015a5 	.word	0x000015a5
    141c:	000015fb 	.word	0x000015fb
    1420:	000015fb 	.word	0x000015fb
    1424:	000015fb 	.word	0x000015fb
    1428:	000015fb 	.word	0x000015fb
    142c:	000015fb 	.word	0x000015fb
    1430:	000015fb 	.word	0x000015fb
    1434:	000015fb 	.word	0x000015fb
    1438:	000015a5 	.word	0x000015a5
		case 0x08: /* A Start condition is issued. */
			LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    143c:	4952      	ldr	r1, [pc, #328]	; (1588 <I2C0_IRQHandler+0x2ac>)
    143e:	4b53      	ldr	r3, [pc, #332]	; (158c <I2C0_IRQHandler+0x2b0>)
    1440:	681b      	ldr	r3, [r3, #0]
    1442:	1c5a      	adds	r2, r3, #1
    1444:	4851      	ldr	r0, [pc, #324]	; (158c <I2C0_IRQHandler+0x2b0>)
    1446:	6002      	str	r2, [r0, #0]
    1448:	4a51      	ldr	r2, [pc, #324]	; (1590 <I2C0_IRQHandler+0x2b4>)
    144a:	5cd3      	ldrb	r3, [r2, r3]
    144c:	b2db      	uxtb	r3, r3
    144e:	608b      	str	r3, [r1, #8]
			LPC_I2C0->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    1450:	4b4d      	ldr	r3, [pc, #308]	; (1588 <I2C0_IRQHandler+0x2ac>)
    1452:	2228      	movs	r2, #40	; 0x28
    1454:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = I2C_STARTED;
    1456:	4b4f      	ldr	r3, [pc, #316]	; (1594 <I2C0_IRQHandler+0x2b8>)
    1458:	2201      	movs	r2, #1
    145a:	601a      	str	r2, [r3, #0]
			break;
    145c:	e0d1      	b.n	1602 <I2C0_IRQHandler+0x326>
		case 0x10: /* A repeated started is issued */
			if (!I2C0_Cmd) {
    145e:	4b4e      	ldr	r3, [pc, #312]	; (1598 <I2C0_IRQHandler+0x2bc>)
    1460:	681b      	ldr	r3, [r3, #0]
    1462:	2b00      	cmp	r3, #0
    1464:	d109      	bne.n	147a <I2C0_IRQHandler+0x19e>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    1466:	4948      	ldr	r1, [pc, #288]	; (1588 <I2C0_IRQHandler+0x2ac>)
    1468:	4b48      	ldr	r3, [pc, #288]	; (158c <I2C0_IRQHandler+0x2b0>)
    146a:	681b      	ldr	r3, [r3, #0]
    146c:	1c5a      	adds	r2, r3, #1
    146e:	4847      	ldr	r0, [pc, #284]	; (158c <I2C0_IRQHandler+0x2b0>)
    1470:	6002      	str	r2, [r0, #0]
    1472:	4a47      	ldr	r2, [pc, #284]	; (1590 <I2C0_IRQHandler+0x2b4>)
    1474:	5cd3      	ldrb	r3, [r2, r3]
    1476:	b2db      	uxtb	r3, r3
    1478:	608b      	str	r3, [r1, #8]
			}
			LPC_I2C0->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    147a:	4b43      	ldr	r3, [pc, #268]	; (1588 <I2C0_IRQHandler+0x2ac>)
    147c:	2228      	movs	r2, #40	; 0x28
    147e:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = I2C_RESTARTED;
    1480:	4b44      	ldr	r3, [pc, #272]	; (1594 <I2C0_IRQHandler+0x2b8>)
    1482:	2202      	movs	r2, #2
    1484:	601a      	str	r2, [r3, #0]
			break;
    1486:	e0bc      	b.n	1602 <I2C0_IRQHandler+0x326>
		case 0x18: /* Regardless, it's a ACK */
			if (I2C0_MasterState == I2C_STARTED) {
    1488:	4b42      	ldr	r3, [pc, #264]	; (1594 <I2C0_IRQHandler+0x2b8>)
    148a:	681b      	ldr	r3, [r3, #0]
    148c:	2b01      	cmp	r3, #1
    148e:	d10c      	bne.n	14aa <I2C0_IRQHandler+0x1ce>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    1490:	493d      	ldr	r1, [pc, #244]	; (1588 <I2C0_IRQHandler+0x2ac>)
    1492:	4b3e      	ldr	r3, [pc, #248]	; (158c <I2C0_IRQHandler+0x2b0>)
    1494:	681b      	ldr	r3, [r3, #0]
    1496:	1c5a      	adds	r2, r3, #1
    1498:	483c      	ldr	r0, [pc, #240]	; (158c <I2C0_IRQHandler+0x2b0>)
    149a:	6002      	str	r2, [r0, #0]
    149c:	4a3c      	ldr	r2, [pc, #240]	; (1590 <I2C0_IRQHandler+0x2b4>)
    149e:	5cd3      	ldrb	r3, [r2, r3]
    14a0:	b2db      	uxtb	r3, r3
    14a2:	608b      	str	r3, [r1, #8]
				I2C0_MasterState = DATA_ACK;
    14a4:	4b3b      	ldr	r3, [pc, #236]	; (1594 <I2C0_IRQHandler+0x2b8>)
    14a6:	2204      	movs	r2, #4
    14a8:	601a      	str	r2, [r3, #0]
			}
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    14aa:	4b37      	ldr	r3, [pc, #220]	; (1588 <I2C0_IRQHandler+0x2ac>)
    14ac:	2208      	movs	r2, #8
    14ae:	619a      	str	r2, [r3, #24]
			break;
    14b0:	e0a7      	b.n	1602 <I2C0_IRQHandler+0x326>
		case 0x28: /* Data byte has been transmitted, regardless ACK or NACK */
			 if ( WrIndex_0 < I2C0_WriteLength )
    14b2:	4b36      	ldr	r3, [pc, #216]	; (158c <I2C0_IRQHandler+0x2b0>)
    14b4:	681a      	ldr	r2, [r3, #0]
    14b6:	4b39      	ldr	r3, [pc, #228]	; (159c <I2C0_IRQHandler+0x2c0>)
    14b8:	681b      	ldr	r3, [r3, #0]
    14ba:	429a      	cmp	r2, r3
    14bc:	d20a      	bcs.n	14d4 <I2C0_IRQHandler+0x1f8>
				{
				  LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++]; /* this should be the last one */
    14be:	4932      	ldr	r1, [pc, #200]	; (1588 <I2C0_IRQHandler+0x2ac>)
    14c0:	4b32      	ldr	r3, [pc, #200]	; (158c <I2C0_IRQHandler+0x2b0>)
    14c2:	681b      	ldr	r3, [r3, #0]
    14c4:	1c5a      	adds	r2, r3, #1
    14c6:	4831      	ldr	r0, [pc, #196]	; (158c <I2C0_IRQHandler+0x2b0>)
    14c8:	6002      	str	r2, [r0, #0]
    14ca:	4a31      	ldr	r2, [pc, #196]	; (1590 <I2C0_IRQHandler+0x2b4>)
    14cc:	5cd3      	ldrb	r3, [r2, r3]
    14ce:	b2db      	uxtb	r3, r3
    14d0:	608b      	str	r3, [r1, #8]
    14d2:	e00d      	b.n	14f0 <I2C0_IRQHandler+0x214>
				}
				else
				{
				  if ( I2C0_ReadLength != 0 )
    14d4:	4b32      	ldr	r3, [pc, #200]	; (15a0 <I2C0_IRQHandler+0x2c4>)
    14d6:	681b      	ldr	r3, [r3, #0]
    14d8:	2b00      	cmp	r3, #0
    14da:	d003      	beq.n	14e4 <I2C0_IRQHandler+0x208>
				  {
						LPC_I2C0->I2CONSET = I2CONSET_STA;   /* Set Repeated-start flag */
    14dc:	4b2a      	ldr	r3, [pc, #168]	; (1588 <I2C0_IRQHandler+0x2ac>)
    14de:	2220      	movs	r2, #32
    14e0:	601a      	str	r2, [r3, #0]
    14e2:	e005      	b.n	14f0 <I2C0_IRQHandler+0x214>
				  }
				  else
				  {
						LPC_I2C0->I2CONSET = I2CONSET_STO;      /* Set Stop flag */
    14e4:	4b28      	ldr	r3, [pc, #160]	; (1588 <I2C0_IRQHandler+0x2ac>)
    14e6:	2210      	movs	r2, #16
    14e8:	601a      	str	r2, [r3, #0]
						I2C0_MasterState = I2C_IDLE;
    14ea:	4b2a      	ldr	r3, [pc, #168]	; (1594 <I2C0_IRQHandler+0x2b8>)
    14ec:	2200      	movs	r2, #0
    14ee:	601a      	str	r2, [r3, #0]
				  }
				}
				LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    14f0:	4b25      	ldr	r3, [pc, #148]	; (1588 <I2C0_IRQHandler+0x2ac>)
    14f2:	2208      	movs	r2, #8
    14f4:	619a      	str	r2, [r3, #24]
				break;
    14f6:	e084      	b.n	1602 <I2C0_IRQHandler+0x326>
		case 0x30:
			if (WrIndex_0 != I2C0_WriteLength) {
    14f8:	4b24      	ldr	r3, [pc, #144]	; (158c <I2C0_IRQHandler+0x2b0>)
    14fa:	681a      	ldr	r2, [r3, #0]
    14fc:	4b27      	ldr	r3, [pc, #156]	; (159c <I2C0_IRQHandler+0x2c0>)
    14fe:	681b      	ldr	r3, [r3, #0]
    1500:	429a      	cmp	r2, r3
    1502:	d024      	beq.n	154e <I2C0_IRQHandler+0x272>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[1 + WrIndex_0]; /* this should be the last one */
    1504:	4a20      	ldr	r2, [pc, #128]	; (1588 <I2C0_IRQHandler+0x2ac>)
    1506:	4b21      	ldr	r3, [pc, #132]	; (158c <I2C0_IRQHandler+0x2b0>)
    1508:	681b      	ldr	r3, [r3, #0]
    150a:	3301      	adds	r3, #1
    150c:	4920      	ldr	r1, [pc, #128]	; (1590 <I2C0_IRQHandler+0x2b4>)
    150e:	5ccb      	ldrb	r3, [r1, r3]
    1510:	b2db      	uxtb	r3, r3
    1512:	6093      	str	r3, [r2, #8]
				WrIndex_0++;
    1514:	4b1d      	ldr	r3, [pc, #116]	; (158c <I2C0_IRQHandler+0x2b0>)
    1516:	681b      	ldr	r3, [r3, #0]
    1518:	3301      	adds	r3, #1
    151a:	4a1c      	ldr	r2, [pc, #112]	; (158c <I2C0_IRQHandler+0x2b0>)
    151c:	6013      	str	r3, [r2, #0]
				if (WrIndex_0 != I2C0_WriteLength) {
    151e:	4b1b      	ldr	r3, [pc, #108]	; (158c <I2C0_IRQHandler+0x2b0>)
    1520:	681a      	ldr	r2, [r3, #0]
    1522:	4b1e      	ldr	r3, [pc, #120]	; (159c <I2C0_IRQHandler+0x2c0>)
    1524:	681b      	ldr	r3, [r3, #0]
    1526:	429a      	cmp	r2, r3
    1528:	d003      	beq.n	1532 <I2C0_IRQHandler+0x256>
					I2C0_MasterState = DATA_ACK;
    152a:	4b1a      	ldr	r3, [pc, #104]	; (1594 <I2C0_IRQHandler+0x2b8>)
    152c:	2204      	movs	r2, #4
    152e:	601a      	str	r2, [r3, #0]
    1530:	e01e      	b.n	1570 <I2C0_IRQHandler+0x294>
				} else {
					I2C0_MasterState = DATA_NACK;
    1532:	4b18      	ldr	r3, [pc, #96]	; (1594 <I2C0_IRQHandler+0x2b8>)
    1534:	2205      	movs	r2, #5
    1536:	601a      	str	r2, [r3, #0]
					if (I2C0_ReadLength != 0) {
    1538:	4b19      	ldr	r3, [pc, #100]	; (15a0 <I2C0_IRQHandler+0x2c4>)
    153a:	681b      	ldr	r3, [r3, #0]
    153c:	2b00      	cmp	r3, #0
    153e:	d017      	beq.n	1570 <I2C0_IRQHandler+0x294>
						LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    1540:	4b11      	ldr	r3, [pc, #68]	; (1588 <I2C0_IRQHandler+0x2ac>)
    1542:	2220      	movs	r2, #32
    1544:	601a      	str	r2, [r3, #0]
						I2C0_MasterState = I2C_REPEATED_START;
    1546:	4b13      	ldr	r3, [pc, #76]	; (1594 <I2C0_IRQHandler+0x2b8>)
    1548:	2203      	movs	r2, #3
    154a:	601a      	str	r2, [r3, #0]
    154c:	e010      	b.n	1570 <I2C0_IRQHandler+0x294>
					}
				}
			} else {
				if (I2C0_ReadLength != 0) {
    154e:	4b14      	ldr	r3, [pc, #80]	; (15a0 <I2C0_IRQHandler+0x2c4>)
    1550:	681b      	ldr	r3, [r3, #0]
    1552:	2b00      	cmp	r3, #0
    1554:	d006      	beq.n	1564 <I2C0_IRQHandler+0x288>
					LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    1556:	4b0c      	ldr	r3, [pc, #48]	; (1588 <I2C0_IRQHandler+0x2ac>)
    1558:	2220      	movs	r2, #32
    155a:	601a      	str	r2, [r3, #0]
					I2C0_MasterState = I2C_REPEATED_START;
    155c:	4b0d      	ldr	r3, [pc, #52]	; (1594 <I2C0_IRQHandler+0x2b8>)
    155e:	2203      	movs	r2, #3
    1560:	601a      	str	r2, [r3, #0]
    1562:	e005      	b.n	1570 <I2C0_IRQHandler+0x294>
				} else {
					I2C0_MasterState = DATA_NACK;
    1564:	4b0b      	ldr	r3, [pc, #44]	; (1594 <I2C0_IRQHandler+0x2b8>)
    1566:	2205      	movs	r2, #5
    1568:	601a      	str	r2, [r3, #0]
					LPC_I2C0->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    156a:	4b07      	ldr	r3, [pc, #28]	; (1588 <I2C0_IRQHandler+0x2ac>)
    156c:	2210      	movs	r2, #16
    156e:	601a      	str	r2, [r3, #0]
				}
			}
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    1570:	4b05      	ldr	r3, [pc, #20]	; (1588 <I2C0_IRQHandler+0x2ac>)
    1572:	2208      	movs	r2, #8
    1574:	619a      	str	r2, [r3, #24]
			break;
    1576:	e044      	b.n	1602 <I2C0_IRQHandler+0x326>
		case 0x40: /* Master Receive, SLA_R has been sent */
			LPC_I2C0->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    1578:	4b03      	ldr	r3, [pc, #12]	; (1588 <I2C0_IRQHandler+0x2ac>)
    157a:	2204      	movs	r2, #4
    157c:	601a      	str	r2, [r3, #0]
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    157e:	4b02      	ldr	r3, [pc, #8]	; (1588 <I2C0_IRQHandler+0x2ac>)
    1580:	2208      	movs	r2, #8
    1582:	619a      	str	r2, [r3, #24]
			break;
    1584:	e03d      	b.n	1602 <I2C0_IRQHandler+0x326>
    1586:	bf00      	nop
    1588:	4001c000 	.word	0x4001c000
    158c:	1000001c 	.word	0x1000001c
    1590:	10000dbc 	.word	0x10000dbc
    1594:	10000014 	.word	0x10000014
    1598:	10000ddc 	.word	0x10000ddc
    159c:	10000d98 	.word	0x10000d98
    15a0:	10000d40 	.word	0x10000d40
		case 0x50: /* Data byte has been received, regardless following ACK or NACK */
		case 0x58:
			I2C0_MasterBuffer[3 + RdIndex_0] = LPC_I2C0->I2DAT;
    15a4:	4b19      	ldr	r3, [pc, #100]	; (160c <I2C0_IRQHandler+0x330>)
    15a6:	681b      	ldr	r3, [r3, #0]
    15a8:	3303      	adds	r3, #3
    15aa:	4a19      	ldr	r2, [pc, #100]	; (1610 <I2C0_IRQHandler+0x334>)
    15ac:	6892      	ldr	r2, [r2, #8]
    15ae:	b2d1      	uxtb	r1, r2
    15b0:	4a18      	ldr	r2, [pc, #96]	; (1614 <I2C0_IRQHandler+0x338>)
    15b2:	54d1      	strb	r1, [r2, r3]
			RdIndex_0++;
    15b4:	4b15      	ldr	r3, [pc, #84]	; (160c <I2C0_IRQHandler+0x330>)
    15b6:	681b      	ldr	r3, [r3, #0]
    15b8:	3301      	adds	r3, #1
    15ba:	4a14      	ldr	r2, [pc, #80]	; (160c <I2C0_IRQHandler+0x330>)
    15bc:	6013      	str	r3, [r2, #0]
			if (RdIndex_0 != I2C0_ReadLength) {
    15be:	4b13      	ldr	r3, [pc, #76]	; (160c <I2C0_IRQHandler+0x330>)
    15c0:	681a      	ldr	r2, [r3, #0]
    15c2:	4b15      	ldr	r3, [pc, #84]	; (1618 <I2C0_IRQHandler+0x33c>)
    15c4:	681b      	ldr	r3, [r3, #0]
    15c6:	429a      	cmp	r2, r3
    15c8:	d003      	beq.n	15d2 <I2C0_IRQHandler+0x2f6>
				I2C0_MasterState = DATA_ACK;
    15ca:	4b14      	ldr	r3, [pc, #80]	; (161c <I2C0_IRQHandler+0x340>)
    15cc:	2204      	movs	r2, #4
    15ce:	601a      	str	r2, [r3, #0]
    15d0:	e005      	b.n	15de <I2C0_IRQHandler+0x302>
			} else {
				RdIndex_0 = 0;
    15d2:	4b0e      	ldr	r3, [pc, #56]	; (160c <I2C0_IRQHandler+0x330>)
    15d4:	2200      	movs	r2, #0
    15d6:	601a      	str	r2, [r3, #0]
				I2C0_MasterState = DATA_NACK;
    15d8:	4b10      	ldr	r3, [pc, #64]	; (161c <I2C0_IRQHandler+0x340>)
    15da:	2205      	movs	r2, #5
    15dc:	601a      	str	r2, [r3, #0]
			}
			LPC_I2C0->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    15de:	4b0c      	ldr	r3, [pc, #48]	; (1610 <I2C0_IRQHandler+0x334>)
    15e0:	2204      	movs	r2, #4
    15e2:	601a      	str	r2, [r3, #0]
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    15e4:	4b0a      	ldr	r3, [pc, #40]	; (1610 <I2C0_IRQHandler+0x334>)
    15e6:	2208      	movs	r2, #8
    15e8:	619a      	str	r2, [r3, #24]
			break;
    15ea:	e00a      	b.n	1602 <I2C0_IRQHandler+0x326>
		case 0x20: /* regardless, it's a NACK */
		case 0x48:
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    15ec:	4b08      	ldr	r3, [pc, #32]	; (1610 <I2C0_IRQHandler+0x334>)
    15ee:	2208      	movs	r2, #8
    15f0:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = DATA_NACK;
    15f2:	4b0a      	ldr	r3, [pc, #40]	; (161c <I2C0_IRQHandler+0x340>)
    15f4:	2205      	movs	r2, #5
    15f6:	601a      	str	r2, [r3, #0]
			break;
    15f8:	e003      	b.n	1602 <I2C0_IRQHandler+0x326>
		case 0x38: /* Arbitration lost, in this example, we don't
		 deal with multiple master situation */
		default:
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    15fa:	4b05      	ldr	r3, [pc, #20]	; (1610 <I2C0_IRQHandler+0x334>)
    15fc:	2208      	movs	r2, #8
    15fe:	619a      	str	r2, [r3, #24]
			break;
    1600:	bf00      	nop
	}
}
    1602:	370c      	adds	r7, #12
    1604:	46bd      	mov	sp, r7
    1606:	f85d 7b04 	ldr.w	r7, [sp], #4
    160a:	4770      	bx	lr
    160c:	10000018 	.word	0x10000018
    1610:	4001c000 	.word	0x4001c000
    1614:	10000dbc 	.word	0x10000dbc
    1618:	10000d40 	.word	0x10000d40
    161c:	10000014 	.word	0x10000014

00001620 <I2C1_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void I2C1_IRQHandler(void) {
    1620:	b480      	push	{r7}
    1622:	b083      	sub	sp, #12
    1624:	af00      	add	r7, sp, #0
	uint8_t StatValue;
	/* this handler deals with master read and master write only */
	StatValue = LPC_I2C1->I2STAT;
    1626:	4bae      	ldr	r3, [pc, #696]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    1628:	685b      	ldr	r3, [r3, #4]
    162a:	71fb      	strb	r3, [r7, #7]
	switch (StatValue) {
    162c:	79fb      	ldrb	r3, [r7, #7]
    162e:	3b08      	subs	r3, #8
    1630:	2b50      	cmp	r3, #80	; 0x50
    1632:	f200 814b 	bhi.w	18cc <I2C1_IRQHandler+0x2ac>
    1636:	a201      	add	r2, pc, #4	; (adr r2, 163c <I2C1_IRQHandler+0x1c>)
    1638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    163c:	00001781 	.word	0x00001781
    1640:	000018cd 	.word	0x000018cd
    1644:	000018cd 	.word	0x000018cd
    1648:	000018cd 	.word	0x000018cd
    164c:	000018cd 	.word	0x000018cd
    1650:	000018cd 	.word	0x000018cd
    1654:	000018cd 	.word	0x000018cd
    1658:	000018cd 	.word	0x000018cd
    165c:	00001799 	.word	0x00001799
    1660:	000018cd 	.word	0x000018cd
    1664:	000018cd 	.word	0x000018cd
    1668:	000018cd 	.word	0x000018cd
    166c:	000018cd 	.word	0x000018cd
    1670:	000018cd 	.word	0x000018cd
    1674:	000018cd 	.word	0x000018cd
    1678:	000018cd 	.word	0x000018cd
    167c:	000017b9 	.word	0x000017b9
    1680:	000018cd 	.word	0x000018cd
    1684:	000018cd 	.word	0x000018cd
    1688:	000018cd 	.word	0x000018cd
    168c:	000018cd 	.word	0x000018cd
    1690:	000018cd 	.word	0x000018cd
    1694:	000018cd 	.word	0x000018cd
    1698:	000018cd 	.word	0x000018cd
    169c:	000018bf 	.word	0x000018bf
    16a0:	000018cd 	.word	0x000018cd
    16a4:	000018cd 	.word	0x000018cd
    16a8:	000018cd 	.word	0x000018cd
    16ac:	000018cd 	.word	0x000018cd
    16b0:	000018cd 	.word	0x000018cd
    16b4:	000018cd 	.word	0x000018cd
    16b8:	000018cd 	.word	0x000018cd
    16bc:	000017e9 	.word	0x000017e9
    16c0:	000018cd 	.word	0x000018cd
    16c4:	000018cd 	.word	0x000018cd
    16c8:	000018cd 	.word	0x000018cd
    16cc:	000018cd 	.word	0x000018cd
    16d0:	000018cd 	.word	0x000018cd
    16d4:	000018cd 	.word	0x000018cd
    16d8:	000018cd 	.word	0x000018cd
    16dc:	000017e9 	.word	0x000017e9
    16e0:	000018cd 	.word	0x000018cd
    16e4:	000018cd 	.word	0x000018cd
    16e8:	000018cd 	.word	0x000018cd
    16ec:	000018cd 	.word	0x000018cd
    16f0:	000018cd 	.word	0x000018cd
    16f4:	000018cd 	.word	0x000018cd
    16f8:	000018cd 	.word	0x000018cd
    16fc:	000018cd 	.word	0x000018cd
    1700:	000018cd 	.word	0x000018cd
    1704:	000018cd 	.word	0x000018cd
    1708:	000018cd 	.word	0x000018cd
    170c:	000018cd 	.word	0x000018cd
    1710:	000018cd 	.word	0x000018cd
    1714:	000018cd 	.word	0x000018cd
    1718:	000018cd 	.word	0x000018cd
    171c:	00001869 	.word	0x00001869
    1720:	000018cd 	.word	0x000018cd
    1724:	000018cd 	.word	0x000018cd
    1728:	000018cd 	.word	0x000018cd
    172c:	000018cd 	.word	0x000018cd
    1730:	000018cd 	.word	0x000018cd
    1734:	000018cd 	.word	0x000018cd
    1738:	000018cd 	.word	0x000018cd
    173c:	000018bf 	.word	0x000018bf
    1740:	000018cd 	.word	0x000018cd
    1744:	000018cd 	.word	0x000018cd
    1748:	000018cd 	.word	0x000018cd
    174c:	000018cd 	.word	0x000018cd
    1750:	000018cd 	.word	0x000018cd
    1754:	000018cd 	.word	0x000018cd
    1758:	000018cd 	.word	0x000018cd
    175c:	00001877 	.word	0x00001877
    1760:	000018cd 	.word	0x000018cd
    1764:	000018cd 	.word	0x000018cd
    1768:	000018cd 	.word	0x000018cd
    176c:	000018cd 	.word	0x000018cd
    1770:	000018cd 	.word	0x000018cd
    1774:	000018cd 	.word	0x000018cd
    1778:	000018cd 	.word	0x000018cd
    177c:	00001877 	.word	0x00001877
	case 0x08: /* A Start condition is issued. */
		LPC_I2C1->I2DAT = I2C1_MasterBuffer[0];
    1780:	4b57      	ldr	r3, [pc, #348]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    1782:	4a58      	ldr	r2, [pc, #352]	; (18e4 <I2C1_IRQHandler+0x2c4>)
    1784:	7812      	ldrb	r2, [r2, #0]
    1786:	b2d2      	uxtb	r2, r2
    1788:	609a      	str	r2, [r3, #8]
		LPC_I2C1->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    178a:	4b55      	ldr	r3, [pc, #340]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    178c:	2228      	movs	r2, #40	; 0x28
    178e:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = I2C_STARTED;
    1790:	4b55      	ldr	r3, [pc, #340]	; (18e8 <I2C1_IRQHandler+0x2c8>)
    1792:	2201      	movs	r2, #1
    1794:	601a      	str	r2, [r3, #0]
		break;
    1796:	e09d      	b.n	18d4 <I2C1_IRQHandler+0x2b4>
	case 0x10: /* A repeated started is issued */
		if (!I2C1_Cmd) {
    1798:	4b54      	ldr	r3, [pc, #336]	; (18ec <I2C1_IRQHandler+0x2cc>)
    179a:	681b      	ldr	r3, [r3, #0]
    179c:	2b00      	cmp	r3, #0
    179e:	d104      	bne.n	17aa <I2C1_IRQHandler+0x18a>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[2];
    17a0:	4b4f      	ldr	r3, [pc, #316]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    17a2:	4a50      	ldr	r2, [pc, #320]	; (18e4 <I2C1_IRQHandler+0x2c4>)
    17a4:	7892      	ldrb	r2, [r2, #2]
    17a6:	b2d2      	uxtb	r2, r2
    17a8:	609a      	str	r2, [r3, #8]
		}
		LPC_I2C1->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    17aa:	4b4d      	ldr	r3, [pc, #308]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    17ac:	2228      	movs	r2, #40	; 0x28
    17ae:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = I2C_RESTARTED;
    17b0:	4b4d      	ldr	r3, [pc, #308]	; (18e8 <I2C1_IRQHandler+0x2c8>)
    17b2:	2202      	movs	r2, #2
    17b4:	601a      	str	r2, [r3, #0]
		break;
    17b6:	e08d      	b.n	18d4 <I2C1_IRQHandler+0x2b4>
	case 0x18: /* Regardless, it's a ACK */
		if (I2C1_MasterState == I2C_STARTED) {
    17b8:	4b4b      	ldr	r3, [pc, #300]	; (18e8 <I2C1_IRQHandler+0x2c8>)
    17ba:	681b      	ldr	r3, [r3, #0]
    17bc:	2b01      	cmp	r3, #1
    17be:	d10f      	bne.n	17e0 <I2C1_IRQHandler+0x1c0>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[1 + WrIndex_1];
    17c0:	4a47      	ldr	r2, [pc, #284]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    17c2:	4b4b      	ldr	r3, [pc, #300]	; (18f0 <I2C1_IRQHandler+0x2d0>)
    17c4:	681b      	ldr	r3, [r3, #0]
    17c6:	3301      	adds	r3, #1
    17c8:	4946      	ldr	r1, [pc, #280]	; (18e4 <I2C1_IRQHandler+0x2c4>)
    17ca:	5ccb      	ldrb	r3, [r1, r3]
    17cc:	b2db      	uxtb	r3, r3
    17ce:	6093      	str	r3, [r2, #8]
			WrIndex_1++;
    17d0:	4b47      	ldr	r3, [pc, #284]	; (18f0 <I2C1_IRQHandler+0x2d0>)
    17d2:	681b      	ldr	r3, [r3, #0]
    17d4:	3301      	adds	r3, #1
    17d6:	4a46      	ldr	r2, [pc, #280]	; (18f0 <I2C1_IRQHandler+0x2d0>)
    17d8:	6013      	str	r3, [r2, #0]
			I2C1_MasterState = DATA_ACK;
    17da:	4b43      	ldr	r3, [pc, #268]	; (18e8 <I2C1_IRQHandler+0x2c8>)
    17dc:	2204      	movs	r2, #4
    17de:	601a      	str	r2, [r3, #0]
		}
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    17e0:	4b3f      	ldr	r3, [pc, #252]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    17e2:	2208      	movs	r2, #8
    17e4:	619a      	str	r2, [r3, #24]
		break;
    17e6:	e075      	b.n	18d4 <I2C1_IRQHandler+0x2b4>
	case 0x28: /* Data byte has been transmitted, regardless ACK or NACK */
	case 0x30:
		if (WrIndex_1 != I2C1_WriteLength) {
    17e8:	4b41      	ldr	r3, [pc, #260]	; (18f0 <I2C1_IRQHandler+0x2d0>)
    17ea:	681a      	ldr	r2, [r3, #0]
    17ec:	4b41      	ldr	r3, [pc, #260]	; (18f4 <I2C1_IRQHandler+0x2d4>)
    17ee:	681b      	ldr	r3, [r3, #0]
    17f0:	429a      	cmp	r2, r3
    17f2:	d024      	beq.n	183e <I2C1_IRQHandler+0x21e>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[1 + WrIndex_1]; /* this should be the last one */
    17f4:	4a3a      	ldr	r2, [pc, #232]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    17f6:	4b3e      	ldr	r3, [pc, #248]	; (18f0 <I2C1_IRQHandler+0x2d0>)
    17f8:	681b      	ldr	r3, [r3, #0]
    17fa:	3301      	adds	r3, #1
    17fc:	4939      	ldr	r1, [pc, #228]	; (18e4 <I2C1_IRQHandler+0x2c4>)
    17fe:	5ccb      	ldrb	r3, [r1, r3]
    1800:	b2db      	uxtb	r3, r3
    1802:	6093      	str	r3, [r2, #8]
			WrIndex_1++;
    1804:	4b3a      	ldr	r3, [pc, #232]	; (18f0 <I2C1_IRQHandler+0x2d0>)
    1806:	681b      	ldr	r3, [r3, #0]
    1808:	3301      	adds	r3, #1
    180a:	4a39      	ldr	r2, [pc, #228]	; (18f0 <I2C1_IRQHandler+0x2d0>)
    180c:	6013      	str	r3, [r2, #0]
			if (WrIndex_1 != I2C1_WriteLength) {
    180e:	4b38      	ldr	r3, [pc, #224]	; (18f0 <I2C1_IRQHandler+0x2d0>)
    1810:	681a      	ldr	r2, [r3, #0]
    1812:	4b38      	ldr	r3, [pc, #224]	; (18f4 <I2C1_IRQHandler+0x2d4>)
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	429a      	cmp	r2, r3
    1818:	d003      	beq.n	1822 <I2C1_IRQHandler+0x202>
				I2C1_MasterState = DATA_ACK;
    181a:	4b33      	ldr	r3, [pc, #204]	; (18e8 <I2C1_IRQHandler+0x2c8>)
    181c:	2204      	movs	r2, #4
    181e:	601a      	str	r2, [r3, #0]
    1820:	e01e      	b.n	1860 <I2C1_IRQHandler+0x240>
			} else {
				I2C1_MasterState = DATA_NACK;
    1822:	4b31      	ldr	r3, [pc, #196]	; (18e8 <I2C1_IRQHandler+0x2c8>)
    1824:	2205      	movs	r2, #5
    1826:	601a      	str	r2, [r3, #0]
				if (I2C1_ReadLength != 0) {
    1828:	4b33      	ldr	r3, [pc, #204]	; (18f8 <I2C1_IRQHandler+0x2d8>)
    182a:	681b      	ldr	r3, [r3, #0]
    182c:	2b00      	cmp	r3, #0
    182e:	d017      	beq.n	1860 <I2C1_IRQHandler+0x240>
					LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    1830:	4b2b      	ldr	r3, [pc, #172]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    1832:	2220      	movs	r2, #32
    1834:	601a      	str	r2, [r3, #0]
					I2C1_MasterState = I2C_REPEATED_START;
    1836:	4b2c      	ldr	r3, [pc, #176]	; (18e8 <I2C1_IRQHandler+0x2c8>)
    1838:	2203      	movs	r2, #3
    183a:	601a      	str	r2, [r3, #0]
    183c:	e010      	b.n	1860 <I2C1_IRQHandler+0x240>
				}
			}
		} else {
			if (I2C1_ReadLength != 0) {
    183e:	4b2e      	ldr	r3, [pc, #184]	; (18f8 <I2C1_IRQHandler+0x2d8>)
    1840:	681b      	ldr	r3, [r3, #0]
    1842:	2b00      	cmp	r3, #0
    1844:	d006      	beq.n	1854 <I2C1_IRQHandler+0x234>
				LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    1846:	4b26      	ldr	r3, [pc, #152]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    1848:	2220      	movs	r2, #32
    184a:	601a      	str	r2, [r3, #0]
				I2C1_MasterState = I2C_REPEATED_START;
    184c:	4b26      	ldr	r3, [pc, #152]	; (18e8 <I2C1_IRQHandler+0x2c8>)
    184e:	2203      	movs	r2, #3
    1850:	601a      	str	r2, [r3, #0]
    1852:	e005      	b.n	1860 <I2C1_IRQHandler+0x240>
			} else {
				I2C1_MasterState = DATA_NACK;
    1854:	4b24      	ldr	r3, [pc, #144]	; (18e8 <I2C1_IRQHandler+0x2c8>)
    1856:	2205      	movs	r2, #5
    1858:	601a      	str	r2, [r3, #0]
				LPC_I2C1->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    185a:	4b21      	ldr	r3, [pc, #132]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    185c:	2210      	movs	r2, #16
    185e:	601a      	str	r2, [r3, #0]
			}
		}
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    1860:	4b1f      	ldr	r3, [pc, #124]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    1862:	2208      	movs	r2, #8
    1864:	619a      	str	r2, [r3, #24]
		break;
    1866:	e035      	b.n	18d4 <I2C1_IRQHandler+0x2b4>
	case 0x40: /* Master Receive, SLA_R has been sent */
		LPC_I2C1->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    1868:	4b1d      	ldr	r3, [pc, #116]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    186a:	2204      	movs	r2, #4
    186c:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    186e:	4b1c      	ldr	r3, [pc, #112]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    1870:	2208      	movs	r2, #8
    1872:	619a      	str	r2, [r3, #24]
		break;
    1874:	e02e      	b.n	18d4 <I2C1_IRQHandler+0x2b4>
	case 0x50: /* Data byte has been received, regardless following ACK or NACK */
	case 0x58:
		I2C1_MasterBuffer[3 + RdIndex_1] = LPC_I2C1->I2DAT;
    1876:	4b21      	ldr	r3, [pc, #132]	; (18fc <I2C1_IRQHandler+0x2dc>)
    1878:	681b      	ldr	r3, [r3, #0]
    187a:	3303      	adds	r3, #3
    187c:	4a18      	ldr	r2, [pc, #96]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    187e:	6892      	ldr	r2, [r2, #8]
    1880:	b2d1      	uxtb	r1, r2
    1882:	4a18      	ldr	r2, [pc, #96]	; (18e4 <I2C1_IRQHandler+0x2c4>)
    1884:	54d1      	strb	r1, [r2, r3]
		RdIndex_1++;
    1886:	4b1d      	ldr	r3, [pc, #116]	; (18fc <I2C1_IRQHandler+0x2dc>)
    1888:	681b      	ldr	r3, [r3, #0]
    188a:	3301      	adds	r3, #1
    188c:	4a1b      	ldr	r2, [pc, #108]	; (18fc <I2C1_IRQHandler+0x2dc>)
    188e:	6013      	str	r3, [r2, #0]
		if (RdIndex_1 != I2C1_ReadLength) {
    1890:	4b1a      	ldr	r3, [pc, #104]	; (18fc <I2C1_IRQHandler+0x2dc>)
    1892:	681a      	ldr	r2, [r3, #0]
    1894:	4b18      	ldr	r3, [pc, #96]	; (18f8 <I2C1_IRQHandler+0x2d8>)
    1896:	681b      	ldr	r3, [r3, #0]
    1898:	429a      	cmp	r2, r3
    189a:	d003      	beq.n	18a4 <I2C1_IRQHandler+0x284>
			I2C1_MasterState = DATA_ACK;
    189c:	4b12      	ldr	r3, [pc, #72]	; (18e8 <I2C1_IRQHandler+0x2c8>)
    189e:	2204      	movs	r2, #4
    18a0:	601a      	str	r2, [r3, #0]
    18a2:	e005      	b.n	18b0 <I2C1_IRQHandler+0x290>
		} else {
			RdIndex_1 = 0;
    18a4:	4b15      	ldr	r3, [pc, #84]	; (18fc <I2C1_IRQHandler+0x2dc>)
    18a6:	2200      	movs	r2, #0
    18a8:	601a      	str	r2, [r3, #0]
			I2C1_MasterState = DATA_NACK;
    18aa:	4b0f      	ldr	r3, [pc, #60]	; (18e8 <I2C1_IRQHandler+0x2c8>)
    18ac:	2205      	movs	r2, #5
    18ae:	601a      	str	r2, [r3, #0]
		}
		LPC_I2C1->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    18b0:	4b0b      	ldr	r3, [pc, #44]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    18b2:	2204      	movs	r2, #4
    18b4:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    18b6:	4b0a      	ldr	r3, [pc, #40]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    18b8:	2208      	movs	r2, #8
    18ba:	619a      	str	r2, [r3, #24]
		break;
    18bc:	e00a      	b.n	18d4 <I2C1_IRQHandler+0x2b4>
	case 0x20: /* regardless, it's a NACK */
	case 0x48:
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    18be:	4b08      	ldr	r3, [pc, #32]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    18c0:	2208      	movs	r2, #8
    18c2:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = DATA_NACK;
    18c4:	4b08      	ldr	r3, [pc, #32]	; (18e8 <I2C1_IRQHandler+0x2c8>)
    18c6:	2205      	movs	r2, #5
    18c8:	601a      	str	r2, [r3, #0]
		break;
    18ca:	e003      	b.n	18d4 <I2C1_IRQHandler+0x2b4>
	case 0x38: /* Arbitration lost, in this example, we don't
	 deal with multiple master situation */
	default:
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    18cc:	4b04      	ldr	r3, [pc, #16]	; (18e0 <I2C1_IRQHandler+0x2c0>)
    18ce:	2208      	movs	r2, #8
    18d0:	619a      	str	r2, [r3, #24]
		break;
    18d2:	bf00      	nop
	}
}
    18d4:	370c      	adds	r7, #12
    18d6:	46bd      	mov	sp, r7
    18d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    18dc:	4770      	bx	lr
    18de:	bf00      	nop
    18e0:	4005c000 	.word	0x4005c000
    18e4:	10000d9c 	.word	0x10000d9c
    18e8:	10000d74 	.word	0x10000d74
    18ec:	10000d70 	.word	0x10000d70
    18f0:	10000de0 	.word	0x10000de0
    18f4:	10000d30 	.word	0x10000d30
    18f8:	10000d44 	.word	0x10000d44
    18fc:	10000d34 	.word	0x10000d34

00001900 <I2CStart>:
 **
 ** parameters:			None
 ** Returned value:		true or false, return false if timed out
 **
 *****************************************************************************/
uint32_t I2CStart(uint8_t port) {
    1900:	b480      	push	{r7}
    1902:	b085      	sub	sp, #20
    1904:	af00      	add	r7, sp, #0
    1906:	4603      	mov	r3, r0
    1908:	71fb      	strb	r3, [r7, #7]
	uint32_t timeout = 0;
    190a:	2300      	movs	r3, #0
    190c:	60fb      	str	r3, [r7, #12]
	uint32_t retVal = 0;
    190e:	2300      	movs	r3, #0
    1910:	60bb      	str	r3, [r7, #8]
	if (port == 0){
    1912:	79fb      	ldrb	r3, [r7, #7]
    1914:	2b00      	cmp	r3, #0
    1916:	d116      	bne.n	1946 <I2CStart+0x46>
			/*--- Issue a start condition ---*/
			LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Start flag */
    1918:	4b1b      	ldr	r3, [pc, #108]	; (1988 <I2CStart+0x88>)
    191a:	2220      	movs	r2, #32
    191c:	601a      	str	r2, [r3, #0]
			/*--- Wait until START transmitted ---*/
			while (1) {
				if (I2C0_MasterState == I2C_STARTED) {
    191e:	4b1b      	ldr	r3, [pc, #108]	; (198c <I2CStart+0x8c>)
    1920:	681b      	ldr	r3, [r3, #0]
    1922:	2b01      	cmp	r3, #1
    1924:	d102      	bne.n	192c <I2CStart+0x2c>
					retVal = 1;
    1926:	2301      	movs	r3, #1
    1928:	60bb      	str	r3, [r7, #8]
					break;
    192a:	e00a      	b.n	1942 <I2CStart+0x42>
				}
				if (timeout >= MAX_TIMEOUT) {
    192c:	68fb      	ldr	r3, [r7, #12]
    192e:	4a18      	ldr	r2, [pc, #96]	; (1990 <I2CStart+0x90>)
    1930:	4293      	cmp	r3, r2
    1932:	d902      	bls.n	193a <I2CStart+0x3a>
					retVal = 0;
    1934:	2300      	movs	r3, #0
    1936:	60bb      	str	r3, [r7, #8]
					break;
    1938:	e003      	b.n	1942 <I2CStart+0x42>
				}
				timeout++;
    193a:	68fb      	ldr	r3, [r7, #12]
    193c:	3301      	adds	r3, #1
    193e:	60fb      	str	r3, [r7, #12]
			}
    1940:	e7ed      	b.n	191e <I2CStart+0x1e>
			return (retVal);
    1942:	68bb      	ldr	r3, [r7, #8]
    1944:	e01a      	b.n	197c <I2CStart+0x7c>
		}
	else if (port == 1){
    1946:	79fb      	ldrb	r3, [r7, #7]
    1948:	2b01      	cmp	r3, #1
    194a:	d116      	bne.n	197a <I2CStart+0x7a>
		/*--- Issue a start condition ---*/
		LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Start flag */
    194c:	4b11      	ldr	r3, [pc, #68]	; (1994 <I2CStart+0x94>)
    194e:	2220      	movs	r2, #32
    1950:	601a      	str	r2, [r3, #0]
		/*--- Wait until START transmitted ---*/
		while (1) {
			if (I2C1_MasterState == I2C_STARTED) {
    1952:	4b11      	ldr	r3, [pc, #68]	; (1998 <I2CStart+0x98>)
    1954:	681b      	ldr	r3, [r3, #0]
    1956:	2b01      	cmp	r3, #1
    1958:	d102      	bne.n	1960 <I2CStart+0x60>
				retVal = 1;
    195a:	2301      	movs	r3, #1
    195c:	60bb      	str	r3, [r7, #8]
				break;
    195e:	e00a      	b.n	1976 <I2CStart+0x76>
			}
			if (timeout >= MAX_TIMEOUT) {
    1960:	68fb      	ldr	r3, [r7, #12]
    1962:	4a0b      	ldr	r2, [pc, #44]	; (1990 <I2CStart+0x90>)
    1964:	4293      	cmp	r3, r2
    1966:	d902      	bls.n	196e <I2CStart+0x6e>
				retVal = 0;
    1968:	2300      	movs	r3, #0
    196a:	60bb      	str	r3, [r7, #8]
				break;
    196c:	e003      	b.n	1976 <I2CStart+0x76>
			}
			timeout++;
    196e:	68fb      	ldr	r3, [r7, #12]
    1970:	3301      	adds	r3, #1
    1972:	60fb      	str	r3, [r7, #12]
		}
    1974:	e7ed      	b.n	1952 <I2CStart+0x52>
		return (retVal);
    1976:	68bb      	ldr	r3, [r7, #8]
    1978:	e000      	b.n	197c <I2CStart+0x7c>
	}
	return 0;
    197a:	2300      	movs	r3, #0
}
    197c:	4618      	mov	r0, r3
    197e:	3714      	adds	r7, #20
    1980:	46bd      	mov	sp, r7
    1982:	f85d 7b04 	ldr.w	r7, [sp], #4
    1986:	4770      	bx	lr
    1988:	4001c000 	.word	0x4001c000
    198c:	10000014 	.word	0x10000014
    1990:	00fffffe 	.word	0x00fffffe
    1994:	4005c000 	.word	0x4005c000
    1998:	10000d74 	.word	0x10000d74

0000199c <I2CStop>:
 **
 ** parameters:			None
 ** Returned value:		true or never return
 **
 *****************************************************************************/
uint32_t I2CStop(uint8_t port) {
    199c:	b480      	push	{r7}
    199e:	b083      	sub	sp, #12
    19a0:	af00      	add	r7, sp, #0
    19a2:	4603      	mov	r3, r0
    19a4:	71fb      	strb	r3, [r7, #7]
	if (port == 0){
    19a6:	79fb      	ldrb	r3, [r7, #7]
    19a8:	2b00      	cmp	r3, #0
    19aa:	d10e      	bne.n	19ca <I2CStop+0x2e>
		LPC_I2C0->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    19ac:	4b13      	ldr	r3, [pc, #76]	; (19fc <I2CStop+0x60>)
    19ae:	2210      	movs	r2, #16
    19b0:	601a      	str	r2, [r3, #0]
		LPC_I2C0->I2CONCLR = I2CONCLR_SIC; /* Clear SI flag */
    19b2:	4b12      	ldr	r3, [pc, #72]	; (19fc <I2CStop+0x60>)
    19b4:	2208      	movs	r2, #8
    19b6:	619a      	str	r2, [r3, #24]
		/*--- Wait for STOP detected ---*/
		while (LPC_I2C0->I2CONSET & I2CONSET_STO);
    19b8:	bf00      	nop
    19ba:	4b10      	ldr	r3, [pc, #64]	; (19fc <I2CStop+0x60>)
    19bc:	681b      	ldr	r3, [r3, #0]
    19be:	f003 0310 	and.w	r3, r3, #16
    19c2:	2b00      	cmp	r3, #0
    19c4:	d1f9      	bne.n	19ba <I2CStop+0x1e>
		return 1;
    19c6:	2301      	movs	r3, #1
    19c8:	e012      	b.n	19f0 <I2CStop+0x54>
	}else if(port == 1){
    19ca:	79fb      	ldrb	r3, [r7, #7]
    19cc:	2b01      	cmp	r3, #1
    19ce:	d10e      	bne.n	19ee <I2CStop+0x52>
		LPC_I2C1->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    19d0:	4b0b      	ldr	r3, [pc, #44]	; (1a00 <I2CStop+0x64>)
    19d2:	2210      	movs	r2, #16
    19d4:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC; /* Clear SI flag */
    19d6:	4b0a      	ldr	r3, [pc, #40]	; (1a00 <I2CStop+0x64>)
    19d8:	2208      	movs	r2, #8
    19da:	619a      	str	r2, [r3, #24]
		/*--- Wait for STOP detected ---*/
		while (LPC_I2C1->I2CONSET & I2CONSET_STO);
    19dc:	bf00      	nop
    19de:	4b08      	ldr	r3, [pc, #32]	; (1a00 <I2CStop+0x64>)
    19e0:	681b      	ldr	r3, [r3, #0]
    19e2:	f003 0310 	and.w	r3, r3, #16
    19e6:	2b00      	cmp	r3, #0
    19e8:	d1f9      	bne.n	19de <I2CStop+0x42>
		return 1;
    19ea:	2301      	movs	r3, #1
    19ec:	e000      	b.n	19f0 <I2CStop+0x54>
	}
	return 0;
    19ee:	2300      	movs	r3, #0
}
    19f0:	4618      	mov	r0, r3
    19f2:	370c      	adds	r7, #12
    19f4:	46bd      	mov	sp, r7
    19f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    19fa:	4770      	bx	lr
    19fc:	4001c000 	.word	0x4001c000
    1a00:	4005c000 	.word	0x4005c000

00001a04 <I2CInit>:
 ** parameters:			I2c mode is either MASTER or SLAVE
 ** Returned value:		true or false, return false if the I2C
 **				interrupt handler was not installed correctly
 **
 *****************************************************************************/
uint32_t I2CInit(uint8_t port,uint32_t I2cMode) {
    1a04:	b580      	push	{r7, lr}
    1a06:	b082      	sub	sp, #8
    1a08:	af00      	add	r7, sp, #0
    1a0a:	4603      	mov	r3, r0
    1a0c:	6039      	str	r1, [r7, #0]
    1a0e:	71fb      	strb	r3, [r7, #7]
	if (port == 0){
    1a10:	79fb      	ldrb	r3, [r7, #7]
    1a12:	2b00      	cmp	r3, #0
    1a14:	d12a      	bne.n	1a6c <I2CInit+0x68>
		LPC_SC->PCONP |= (1 << 7);
    1a16:	4a34      	ldr	r2, [pc, #208]	; (1ae8 <I2CInit+0xe4>)
    1a18:	4b33      	ldr	r3, [pc, #204]	; (1ae8 <I2CInit+0xe4>)
    1a1a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1a22:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	    //LPC_PINCON->PINSEL1 &= ~0x03C00000;
	    //LPC_PINCON->PINSEL1 |=  0x01400000;
		/* set PIO0.27 and PIO0.28 to I2C0 SDA and SCL */
		/* function to 01 on both SDA and SCL. */
		LPC_PINCON->PINSEL1 &= ~((0x03<<22)|(0x03<<24));
    1a26:	4a31      	ldr	r2, [pc, #196]	; (1aec <I2CInit+0xe8>)
    1a28:	4b30      	ldr	r3, [pc, #192]	; (1aec <I2CInit+0xe8>)
    1a2a:	685b      	ldr	r3, [r3, #4]
    1a2c:	f023 7370 	bic.w	r3, r3, #62914560	; 0x3c00000
    1a30:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINSEL1 |= ((0x01<<22)|(0x01<<24));
    1a32:	4a2e      	ldr	r2, [pc, #184]	; (1aec <I2CInit+0xe8>)
    1a34:	4b2d      	ldr	r3, [pc, #180]	; (1aec <I2CInit+0xe8>)
    1a36:	685b      	ldr	r3, [r3, #4]
    1a38:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
    1a3c:	6053      	str	r3, [r2, #4]
	    //LPC_SC->PCLKSEL0 &= ~(3 << 14); // clear bits
	    //LPC_SC->PCLKSEL0 |=  (3 << 14); // set to "01" (full speed)
		//PINMODE is not required for P0.27, P0.28 these are dedicated open drain I2C pins.
		/*--- Clear flags ---*/
		LPC_I2C0->I2CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC
    1a3e:	4b2c      	ldr	r3, [pc, #176]	; (1af0 <I2CInit+0xec>)
    1a40:	226c      	movs	r2, #108	; 0x6c
    1a42:	619a      	str	r2, [r3, #24]
				| I2CONCLR_I2ENC;
		/*--- Reset registers ---*/
		LPC_PINCON->I2CPADCFG &= ~((0x1<<0)|(0x1<<2));
    1a44:	4a29      	ldr	r2, [pc, #164]	; (1aec <I2CInit+0xe8>)
    1a46:	4b29      	ldr	r3, [pc, #164]	; (1aec <I2CInit+0xe8>)
    1a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    1a4a:	f023 0305 	bic.w	r3, r3, #5
    1a4e:	67d3      	str	r3, [r2, #124]	; 0x7c
		LPC_I2C0->I2SCLL   = I2SCLL_SCLL;
    1a50:	4b27      	ldr	r3, [pc, #156]	; (1af0 <I2CInit+0xec>)
    1a52:	2280      	movs	r2, #128	; 0x80
    1a54:	615a      	str	r2, [r3, #20]
		LPC_I2C0->I2SCLH   = I2SCLH_SCLH;
    1a56:	4b26      	ldr	r3, [pc, #152]	; (1af0 <I2CInit+0xec>)
    1a58:	2280      	movs	r2, #128	; 0x80
    1a5a:	611a      	str	r2, [r3, #16]
		/* Install interrupt handler */
		NVIC_EnableIRQ(I2C0_IRQn);
    1a5c:	200a      	movs	r0, #10
    1a5e:	f7ff fc25 	bl	12ac <NVIC_EnableIRQ>
		LPC_I2C0->I2CONSET = I2CONSET_I2EN;
    1a62:	4b23      	ldr	r3, [pc, #140]	; (1af0 <I2CInit+0xec>)
    1a64:	2240      	movs	r2, #64	; 0x40
    1a66:	601a      	str	r2, [r3, #0]
		return (1);
    1a68:	2301      	movs	r3, #1
    1a6a:	e039      	b.n	1ae0 <I2CInit+0xdc>
	}
	else if (port == 1){
    1a6c:	79fb      	ldrb	r3, [r7, #7]
    1a6e:	2b01      	cmp	r3, #1
    1a70:	d136      	bne.n	1ae0 <I2CInit+0xdc>
		LPC_SC->PCONP |= (1 << 19);
    1a72:	4a1d      	ldr	r2, [pc, #116]	; (1ae8 <I2CInit+0xe4>)
    1a74:	4b1c      	ldr	r3, [pc, #112]	; (1ae8 <I2CInit+0xe4>)
    1a76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1a7e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		/* set PIO0.19 and PIO0.20 to I2C1 SDA and SCL */
		/* function to 11 on both SDA and SCL. */
		LPC_PINCON->PINSEL1 &= ~((0x3 << 6) | (0x3 << 8));
    1a82:	4a1a      	ldr	r2, [pc, #104]	; (1aec <I2CInit+0xe8>)
    1a84:	4b19      	ldr	r3, [pc, #100]	; (1aec <I2CInit+0xe8>)
    1a86:	685b      	ldr	r3, [r3, #4]
    1a88:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
    1a8c:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINSEL1 |= ((0x3 << 6) | (0x3 << 8));
    1a8e:	4a17      	ldr	r2, [pc, #92]	; (1aec <I2CInit+0xe8>)
    1a90:	4b16      	ldr	r3, [pc, #88]	; (1aec <I2CInit+0xe8>)
    1a92:	685b      	ldr	r3, [r3, #4]
    1a94:	f443 7370 	orr.w	r3, r3, #960	; 0x3c0
    1a98:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINMODE1 &= ~((0x3 << 6) | (0x3 << 8));
    1a9a:	4a14      	ldr	r2, [pc, #80]	; (1aec <I2CInit+0xe8>)
    1a9c:	4b13      	ldr	r3, [pc, #76]	; (1aec <I2CInit+0xe8>)
    1a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1aa0:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
    1aa4:	6453      	str	r3, [r2, #68]	; 0x44
		LPC_PINCON->PINMODE1 |= ((0x2 << 6) | (0x2 << 8)); /* No pull-up no pull-down */
    1aa6:	4a11      	ldr	r2, [pc, #68]	; (1aec <I2CInit+0xe8>)
    1aa8:	4b10      	ldr	r3, [pc, #64]	; (1aec <I2CInit+0xe8>)
    1aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1aac:	f443 7320 	orr.w	r3, r3, #640	; 0x280
    1ab0:	6453      	str	r3, [r2, #68]	; 0x44
		LPC_PINCON->PINMODE_OD0 |= ((0x1 << 19) | (0x1 << 20));
    1ab2:	4a0e      	ldr	r2, [pc, #56]	; (1aec <I2CInit+0xe8>)
    1ab4:	4b0d      	ldr	r3, [pc, #52]	; (1aec <I2CInit+0xe8>)
    1ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    1ab8:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
    1abc:	6693      	str	r3, [r2, #104]	; 0x68

		/*--- Clear flags ---*/
		LPC_I2C1->I2CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC
    1abe:	4b0d      	ldr	r3, [pc, #52]	; (1af4 <I2CInit+0xf0>)
    1ac0:	226c      	movs	r2, #108	; 0x6c
    1ac2:	619a      	str	r2, [r3, #24]
				| I2CONCLR_I2ENC;

		/*--- Reset registers ---*/
		LPC_I2C1->I2SCLL = I2SCLL_SCLL;
    1ac4:	4b0b      	ldr	r3, [pc, #44]	; (1af4 <I2CInit+0xf0>)
    1ac6:	2280      	movs	r2, #128	; 0x80
    1ac8:	615a      	str	r2, [r3, #20]
		LPC_I2C1->I2SCLH = I2SCLH_SCLH;
    1aca:	4b0a      	ldr	r3, [pc, #40]	; (1af4 <I2CInit+0xf0>)
    1acc:	2280      	movs	r2, #128	; 0x80
    1ace:	611a      	str	r2, [r3, #16]

		/* Install interrupt handler */
		NVIC_EnableIRQ(I2C1_IRQn);
    1ad0:	200b      	movs	r0, #11
    1ad2:	f7ff fbeb 	bl	12ac <NVIC_EnableIRQ>

		LPC_I2C1->I2CONSET = I2CONSET_I2EN;
    1ad6:	4b07      	ldr	r3, [pc, #28]	; (1af4 <I2CInit+0xf0>)
    1ad8:	2240      	movs	r2, #64	; 0x40
    1ada:	601a      	str	r2, [r3, #0]
		return (1);
    1adc:	2301      	movs	r3, #1
    1ade:	e7ff      	b.n	1ae0 <I2CInit+0xdc>
	}
}
    1ae0:	4618      	mov	r0, r3
    1ae2:	3708      	adds	r7, #8
    1ae4:	46bd      	mov	sp, r7
    1ae6:	bd80      	pop	{r7, pc}
    1ae8:	400fc000 	.word	0x400fc000
    1aec:	4002c000 	.word	0x4002c000
    1af0:	4001c000 	.word	0x4001c000
    1af4:	4005c000 	.word	0x4005c000

00001af8 <I2CEngine>:
 ** Returned value:		true or false, return false only if the
 **				start condition can never be generated and
 **				timed out.
 **
 *****************************************************************************/
uint32_t I2CEngine(uint8_t port) {
    1af8:	b580      	push	{r7, lr}
    1afa:	b084      	sub	sp, #16
    1afc:	af00      	add	r7, sp, #0
    1afe:	4603      	mov	r3, r0
    1b00:	71fb      	strb	r3, [r7, #7]
	int timeout = 0;
    1b02:	2300      	movs	r3, #0
    1b04:	60fb      	str	r3, [r7, #12]
	if (port == 0){
    1b06:	79fb      	ldrb	r3, [r7, #7]
    1b08:	2b00      	cmp	r3, #0
    1b0a:	d12a      	bne.n	1b62 <I2CEngine+0x6a>
			I2C0_MasterState = I2C_IDLE;
    1b0c:	4b2a      	ldr	r3, [pc, #168]	; (1bb8 <I2CEngine+0xc0>)
    1b0e:	2200      	movs	r2, #0
    1b10:	601a      	str	r2, [r3, #0]
			RdIndex_0 = 0;
    1b12:	4b2a      	ldr	r3, [pc, #168]	; (1bbc <I2CEngine+0xc4>)
    1b14:	2200      	movs	r2, #0
    1b16:	601a      	str	r2, [r3, #0]
			WrIndex_0 = 0;
    1b18:	4b29      	ldr	r3, [pc, #164]	; (1bc0 <I2CEngine+0xc8>)
    1b1a:	2200      	movs	r2, #0
    1b1c:	601a      	str	r2, [r3, #0]
			if (I2CStart(port) != 1) {
    1b1e:	79fb      	ldrb	r3, [r7, #7]
    1b20:	4618      	mov	r0, r3
    1b22:	f7ff feed 	bl	1900 <I2CStart>
    1b26:	4603      	mov	r3, r0
    1b28:	2b01      	cmp	r3, #1
    1b2a:	d005      	beq.n	1b38 <I2CEngine+0x40>
				I2CStop(port);
    1b2c:	79fb      	ldrb	r3, [r7, #7]
    1b2e:	4618      	mov	r0, r3
    1b30:	f7ff ff34 	bl	199c <I2CStop>
				return (0);
    1b34:	2300      	movs	r3, #0
    1b36:	e03a      	b.n	1bae <I2CEngine+0xb6>
			}

			while (1) {
				if (I2C0_MasterState == DATA_NACK) {
    1b38:	4b1f      	ldr	r3, [pc, #124]	; (1bb8 <I2CEngine+0xc0>)
    1b3a:	681b      	ldr	r3, [r3, #0]
    1b3c:	2b05      	cmp	r3, #5
    1b3e:	d104      	bne.n	1b4a <I2CEngine+0x52>
					I2CStop(port);
    1b40:	79fb      	ldrb	r3, [r7, #7]
    1b42:	4618      	mov	r0, r3
    1b44:	f7ff ff2a 	bl	199c <I2CStop>
					break;
    1b48:	e009      	b.n	1b5e <I2CEngine+0x66>
				}
				if (timeout >= 0xFFFF) {
    1b4a:	68fb      	ldr	r3, [r7, #12]
    1b4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    1b50:	4293      	cmp	r3, r2
    1b52:	dd00      	ble.n	1b56 <I2CEngine+0x5e>
					break;
    1b54:	e003      	b.n	1b5e <I2CEngine+0x66>
				}
				timeout++;
    1b56:	68fb      	ldr	r3, [r7, #12]
    1b58:	3301      	adds	r3, #1
    1b5a:	60fb      	str	r3, [r7, #12]
			}
    1b5c:	e7ec      	b.n	1b38 <I2CEngine+0x40>
			return (1);
    1b5e:	2301      	movs	r3, #1
    1b60:	e025      	b.n	1bae <I2CEngine+0xb6>
		}
	else if (port == 1){
    1b62:	79fb      	ldrb	r3, [r7, #7]
    1b64:	2b01      	cmp	r3, #1
    1b66:	d121      	bne.n	1bac <I2CEngine+0xb4>
		I2C1_MasterState = I2C_IDLE;
    1b68:	4b16      	ldr	r3, [pc, #88]	; (1bc4 <I2CEngine+0xcc>)
    1b6a:	2200      	movs	r2, #0
    1b6c:	601a      	str	r2, [r3, #0]
		RdIndex_1 = 0;
    1b6e:	4b16      	ldr	r3, [pc, #88]	; (1bc8 <I2CEngine+0xd0>)
    1b70:	2200      	movs	r2, #0
    1b72:	601a      	str	r2, [r3, #0]
		WrIndex_1 = 0;
    1b74:	4b15      	ldr	r3, [pc, #84]	; (1bcc <I2CEngine+0xd4>)
    1b76:	2200      	movs	r2, #0
    1b78:	601a      	str	r2, [r3, #0]
		if (I2CStart(port) != 1) {
    1b7a:	79fb      	ldrb	r3, [r7, #7]
    1b7c:	4618      	mov	r0, r3
    1b7e:	f7ff febf 	bl	1900 <I2CStart>
    1b82:	4603      	mov	r3, r0
    1b84:	2b01      	cmp	r3, #1
    1b86:	d005      	beq.n	1b94 <I2CEngine+0x9c>
			I2CStop(port);
    1b88:	79fb      	ldrb	r3, [r7, #7]
    1b8a:	4618      	mov	r0, r3
    1b8c:	f7ff ff06 	bl	199c <I2CStop>
			return (0);
    1b90:	2300      	movs	r3, #0
    1b92:	e00c      	b.n	1bae <I2CEngine+0xb6>
		}

		while (1) {
			if (I2C1_MasterState == DATA_NACK) {
    1b94:	4b0b      	ldr	r3, [pc, #44]	; (1bc4 <I2CEngine+0xcc>)
    1b96:	681b      	ldr	r3, [r3, #0]
    1b98:	2b05      	cmp	r3, #5
    1b9a:	d106      	bne.n	1baa <I2CEngine+0xb2>
				I2CStop(port);
    1b9c:	79fb      	ldrb	r3, [r7, #7]
    1b9e:	4618      	mov	r0, r3
    1ba0:	f7ff fefc 	bl	199c <I2CStop>
				break;
    1ba4:	bf00      	nop
			}
		}
		return (1);
    1ba6:	2301      	movs	r3, #1
    1ba8:	e001      	b.n	1bae <I2CEngine+0xb6>
		while (1) {
			if (I2C1_MasterState == DATA_NACK) {
				I2CStop(port);
				break;
			}
		}
    1baa:	e7f3      	b.n	1b94 <I2CEngine+0x9c>
		return (1);
	}
	return 0;
    1bac:	2300      	movs	r3, #0
}
    1bae:	4618      	mov	r0, r3
    1bb0:	3710      	adds	r7, #16
    1bb2:	46bd      	mov	sp, r7
    1bb4:	bd80      	pop	{r7, pc}
    1bb6:	bf00      	nop
    1bb8:	10000014 	.word	0x10000014
    1bbc:	10000018 	.word	0x10000018
    1bc0:	1000001c 	.word	0x1000001c
    1bc4:	10000d74 	.word	0x10000d74
    1bc8:	10000d34 	.word	0x10000d34
    1bcc:	10000de0 	.word	0x10000de0

00001bd0 <i2c_read>:
			return 0;
	}
	return 0;
}

uint8_t i2c_read(uint8_t port, uint8_t register_addr) {
    1bd0:	b580      	push	{r7, lr}
    1bd2:	b084      	sub	sp, #16
    1bd4:	af00      	add	r7, sp, #0
    1bd6:	4603      	mov	r3, r0
    1bd8:	460a      	mov	r2, r1
    1bda:	71fb      	strb	r3, [r7, #7]
    1bdc:	4613      	mov	r3, r2
    1bde:	71bb      	strb	r3, [r7, #6]
	int i;
	/* clear buffer */
	if (port == 0){
    1be0:	79fb      	ldrb	r3, [r7, #7]
    1be2:	2b00      	cmp	r3, #0
    1be4:	d128      	bne.n	1c38 <i2c_read+0x68>
		for (i = 0; i < BUFSIZE; i++) {
    1be6:	2300      	movs	r3, #0
    1be8:	60fb      	str	r3, [r7, #12]
    1bea:	e007      	b.n	1bfc <i2c_read+0x2c>
			I2C0_MasterBuffer[i] = 0;
    1bec:	4a2a      	ldr	r2, [pc, #168]	; (1c98 <i2c_read+0xc8>)
    1bee:	68fb      	ldr	r3, [r7, #12]
    1bf0:	4413      	add	r3, r2
    1bf2:	2200      	movs	r2, #0
    1bf4:	701a      	strb	r2, [r3, #0]

uint8_t i2c_read(uint8_t port, uint8_t register_addr) {
	int i;
	/* clear buffer */
	if (port == 0){
		for (i = 0; i < BUFSIZE; i++) {
    1bf6:	68fb      	ldr	r3, [r7, #12]
    1bf8:	3301      	adds	r3, #1
    1bfa:	60fb      	str	r3, [r7, #12]
    1bfc:	68fb      	ldr	r3, [r7, #12]
    1bfe:	2b1f      	cmp	r3, #31
    1c00:	ddf4      	ble.n	1bec <i2c_read+0x1c>
			I2C0_MasterBuffer[i] = 0;
		}
		I2C0_WriteLength = 2;
    1c02:	4b26      	ldr	r3, [pc, #152]	; (1c9c <i2c_read+0xcc>)
    1c04:	2202      	movs	r2, #2
    1c06:	601a      	str	r2, [r3, #0]
		I2C0_ReadLength = 1;
    1c08:	4b25      	ldr	r3, [pc, #148]	; (1ca0 <i2c_read+0xd0>)
    1c0a:	2201      	movs	r2, #1
    1c0c:	601a      	str	r2, [r3, #0]
		I2C0_MasterBuffer[0] = 0x3A;//ADR_BYTE_MMA7455;
    1c0e:	4b22      	ldr	r3, [pc, #136]	; (1c98 <i2c_read+0xc8>)
    1c10:	223a      	movs	r2, #58	; 0x3a
    1c12:	701a      	strb	r2, [r3, #0]
		I2C0_MasterBuffer[1] = register_addr;
    1c14:	4a20      	ldr	r2, [pc, #128]	; (1c98 <i2c_read+0xc8>)
    1c16:	79bb      	ldrb	r3, [r7, #6]
    1c18:	7053      	strb	r3, [r2, #1]
		I2C0_MasterBuffer[2] = 0x3B;//ADR_BYTE_MMA7455 | RD_BIT;
    1c1a:	4b1f      	ldr	r3, [pc, #124]	; (1c98 <i2c_read+0xc8>)
    1c1c:	223b      	movs	r2, #59	; 0x3b
    1c1e:	709a      	strb	r2, [r3, #2]
		I2CEngine(port);
    1c20:	79fb      	ldrb	r3, [r7, #7]
    1c22:	4618      	mov	r0, r3
    1c24:	f7ff ff68 	bl	1af8 <I2CEngine>
		I2CStop(port);
    1c28:	79fb      	ldrb	r3, [r7, #7]
    1c2a:	4618      	mov	r0, r3
    1c2c:	f7ff feb6 	bl	199c <I2CStop>
		return (I2C0_MasterBuffer[3]);
    1c30:	4b19      	ldr	r3, [pc, #100]	; (1c98 <i2c_read+0xc8>)
    1c32:	78db      	ldrb	r3, [r3, #3]
    1c34:	b2db      	uxtb	r3, r3
    1c36:	e02b      	b.n	1c90 <i2c_read+0xc0>
	}
	else if (port == 1){
    1c38:	79fb      	ldrb	r3, [r7, #7]
    1c3a:	2b01      	cmp	r3, #1
    1c3c:	d128      	bne.n	1c90 <i2c_read+0xc0>
		for (i = 0; i < BUFSIZE; i++) {
    1c3e:	2300      	movs	r3, #0
    1c40:	60fb      	str	r3, [r7, #12]
    1c42:	e007      	b.n	1c54 <i2c_read+0x84>
			I2C1_MasterBuffer[i] = 0;
    1c44:	4a17      	ldr	r2, [pc, #92]	; (1ca4 <i2c_read+0xd4>)
    1c46:	68fb      	ldr	r3, [r7, #12]
    1c48:	4413      	add	r3, r2
    1c4a:	2200      	movs	r2, #0
    1c4c:	701a      	strb	r2, [r3, #0]
		I2CEngine(port);
		I2CStop(port);
		return (I2C0_MasterBuffer[3]);
	}
	else if (port == 1){
		for (i = 0; i < BUFSIZE; i++) {
    1c4e:	68fb      	ldr	r3, [r7, #12]
    1c50:	3301      	adds	r3, #1
    1c52:	60fb      	str	r3, [r7, #12]
    1c54:	68fb      	ldr	r3, [r7, #12]
    1c56:	2b1f      	cmp	r3, #31
    1c58:	ddf4      	ble.n	1c44 <i2c_read+0x74>
			I2C1_MasterBuffer[i] = 0;
		}
		I2C1_WriteLength = 2;
    1c5a:	4b13      	ldr	r3, [pc, #76]	; (1ca8 <i2c_read+0xd8>)
    1c5c:	2202      	movs	r2, #2
    1c5e:	601a      	str	r2, [r3, #0]
		I2C1_ReadLength = 1;
    1c60:	4b12      	ldr	r3, [pc, #72]	; (1cac <i2c_read+0xdc>)
    1c62:	2201      	movs	r2, #1
    1c64:	601a      	str	r2, [r3, #0]
		I2C1_MasterBuffer[0] = ADR_BYTE_24AA02;
    1c66:	4b0f      	ldr	r3, [pc, #60]	; (1ca4 <i2c_read+0xd4>)
    1c68:	22a0      	movs	r2, #160	; 0xa0
    1c6a:	701a      	strb	r2, [r3, #0]
		I2C1_MasterBuffer[1] = register_addr;
    1c6c:	4a0d      	ldr	r2, [pc, #52]	; (1ca4 <i2c_read+0xd4>)
    1c6e:	79bb      	ldrb	r3, [r7, #6]
    1c70:	7053      	strb	r3, [r2, #1]
		I2C1_MasterBuffer[2] = ADR_BYTE_24AA02 | RD_BIT;
    1c72:	4b0c      	ldr	r3, [pc, #48]	; (1ca4 <i2c_read+0xd4>)
    1c74:	22a1      	movs	r2, #161	; 0xa1
    1c76:	709a      	strb	r2, [r3, #2]
		I2CEngine(port);
    1c78:	79fb      	ldrb	r3, [r7, #7]
    1c7a:	4618      	mov	r0, r3
    1c7c:	f7ff ff3c 	bl	1af8 <I2CEngine>
		I2CStop(port);
    1c80:	79fb      	ldrb	r3, [r7, #7]
    1c82:	4618      	mov	r0, r3
    1c84:	f7ff fe8a 	bl	199c <I2CStop>
		return (I2C1_MasterBuffer[3]);
    1c88:	4b06      	ldr	r3, [pc, #24]	; (1ca4 <i2c_read+0xd4>)
    1c8a:	78db      	ldrb	r3, [r3, #3]
    1c8c:	b2db      	uxtb	r3, r3
    1c8e:	e7ff      	b.n	1c90 <i2c_read+0xc0>
	}
}
    1c90:	4618      	mov	r0, r3
    1c92:	3710      	adds	r7, #16
    1c94:	46bd      	mov	sp, r7
    1c96:	bd80      	pop	{r7, pc}
    1c98:	10000dbc 	.word	0x10000dbc
    1c9c:	10000d98 	.word	0x10000d98
    1ca0:	10000d40 	.word	0x10000d40
    1ca4:	10000d9c 	.word	0x10000d9c
    1ca8:	10000d30 	.word	0x10000d30
    1cac:	10000d44 	.word	0x10000d44

00001cb0 <u32IAP_PrepareSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_PrepareSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
    1cb0:	b580      	push	{r7, lr}
    1cb2:	b08e      	sub	sp, #56	; 0x38
    1cb4:	af00      	add	r7, sp, #0
    1cb6:	6078      	str	r0, [r7, #4]
    1cb8:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1cba:	683a      	ldr	r2, [r7, #0]
    1cbc:	687b      	ldr	r3, [r7, #4]
    1cbe:	429a      	cmp	r2, r3
    1cc0:	d202      	bcs.n	1cc8 <u32IAP_PrepareSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1cc2:	230c      	movs	r3, #12
    1cc4:	637b      	str	r3, [r7, #52]	; 0x34
    1cc6:	e00f      	b.n	1ce8 <u32IAP_PrepareSectors+0x38>
	}
	else
	{
		au32Command[0] = IAP_CMD_PREPARE_SECTORS;
    1cc8:	2332      	movs	r3, #50	; 0x32
    1cca:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
    1ccc:	687b      	ldr	r3, [r7, #4]
    1cce:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
    1cd0:	683b      	ldr	r3, [r7, #0]
    1cd2:	617b      	str	r3, [r7, #20]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1cd4:	f107 010c 	add.w	r1, r7, #12
    1cd8:	f107 0220 	add.w	r2, r7, #32
    1cdc:	4b05      	ldr	r3, [pc, #20]	; (1cf4 <u32IAP_PrepareSectors+0x44>)
    1cde:	4608      	mov	r0, r1
    1ce0:	4611      	mov	r1, r2
    1ce2:	4798      	blx	r3

		u32Status = au32Result[0];
    1ce4:	6a3b      	ldr	r3, [r7, #32]
    1ce6:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
    1ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    1cea:	4618      	mov	r0, r3
    1cec:	3738      	adds	r7, #56	; 0x38
    1cee:	46bd      	mov	sp, r7
    1cf0:	bd80      	pop	{r7, pc}
    1cf2:	bf00      	nop
    1cf4:	1fff1ff1 	.word	0x1fff1ff1

00001cf8 <u32IAP_EraseSectors>:
*
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_EraseSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
    1cf8:	b580      	push	{r7, lr}
    1cfa:	b08e      	sub	sp, #56	; 0x38
    1cfc:	af00      	add	r7, sp, #0
    1cfe:	6078      	str	r0, [r7, #4]
    1d00:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1d02:	683a      	ldr	r2, [r7, #0]
    1d04:	687b      	ldr	r3, [r7, #4]
    1d06:	429a      	cmp	r2, r3
    1d08:	d202      	bcs.n	1d10 <u32IAP_EraseSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1d0a:	230c      	movs	r3, #12
    1d0c:	637b      	str	r3, [r7, #52]	; 0x34
    1d0e:	e018      	b.n	1d42 <u32IAP_EraseSectors+0x4a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1d10:	b672      	cpsid	i
	}
	else
	{
		__disable_irq();
		au32Command[0] = IAP_CMD_ERASE_SECTORS;
    1d12:	2334      	movs	r3, #52	; 0x34
    1d14:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
    1d16:	687b      	ldr	r3, [r7, #4]
    1d18:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
    1d1a:	683b      	ldr	r3, [r7, #0]
    1d1c:	617b      	str	r3, [r7, #20]
		au32Command[3] = SystemCoreClock / 1000UL;	/* Core clock frequency in kHz */
    1d1e:	4b0b      	ldr	r3, [pc, #44]	; (1d4c <u32IAP_EraseSectors+0x54>)
    1d20:	681b      	ldr	r3, [r3, #0]
    1d22:	4a0b      	ldr	r2, [pc, #44]	; (1d50 <u32IAP_EraseSectors+0x58>)
    1d24:	fba2 2303 	umull	r2, r3, r2, r3
    1d28:	099b      	lsrs	r3, r3, #6
    1d2a:	61bb      	str	r3, [r7, #24]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1d2c:	f107 010c 	add.w	r1, r7, #12
    1d30:	f107 0220 	add.w	r2, r7, #32
    1d34:	4b07      	ldr	r3, [pc, #28]	; (1d54 <u32IAP_EraseSectors+0x5c>)
    1d36:	4608      	mov	r0, r1
    1d38:	4611      	mov	r1, r2
    1d3a:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1d3c:	b662      	cpsie	i

		__enable_irq();
		u32Status = au32Result[0];
    1d3e:	6a3b      	ldr	r3, [r7, #32]
    1d40:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
    1d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    1d44:	4618      	mov	r0, r3
    1d46:	3738      	adds	r7, #56	; 0x38
    1d48:	46bd      	mov	sp, r7
    1d4a:	bd80      	pop	{r7, pc}
    1d4c:	1000000c 	.word	0x1000000c
    1d50:	10624dd3 	.word	0x10624dd3
    1d54:	1fff1ff1 	.word	0x1fff1ff1

00001d58 <u32IAP_BlankCheckSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_BlankCheckSectors(uint32_t u32StartSector, uint32_t u32EndSector, uint32_t *pu32Result)
{
    1d58:	b580      	push	{r7, lr}
    1d5a:	b090      	sub	sp, #64	; 0x40
    1d5c:	af00      	add	r7, sp, #0
    1d5e:	60f8      	str	r0, [r7, #12]
    1d60:	60b9      	str	r1, [r7, #8]
    1d62:	607a      	str	r2, [r7, #4]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1d64:	68ba      	ldr	r2, [r7, #8]
    1d66:	68fb      	ldr	r3, [r7, #12]
    1d68:	429a      	cmp	r2, r3
    1d6a:	d202      	bcs.n	1d72 <u32IAP_BlankCheckSectors+0x1a>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1d6c:	230c      	movs	r3, #12
    1d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    1d70:	e019      	b.n	1da6 <u32IAP_BlankCheckSectors+0x4e>
	}
	else
	{
		au32Command[0] = IAP_CMD_BLANK_CHECK_SECTORS;
    1d72:	2335      	movs	r3, #53	; 0x35
    1d74:	617b      	str	r3, [r7, #20]
		au32Command[1] = u32StartSector;
    1d76:	68fb      	ldr	r3, [r7, #12]
    1d78:	61bb      	str	r3, [r7, #24]
		au32Command[2] = u32EndSector;
    1d7a:	68bb      	ldr	r3, [r7, #8]
    1d7c:	61fb      	str	r3, [r7, #28]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1d7e:	f107 0114 	add.w	r1, r7, #20
    1d82:	f107 0228 	add.w	r2, r7, #40	; 0x28
    1d86:	4b0a      	ldr	r3, [pc, #40]	; (1db0 <u32IAP_BlankCheckSectors+0x58>)
    1d88:	4608      	mov	r0, r1
    1d8a:	4611      	mov	r1, r2
    1d8c:	4798      	blx	r3

		if (au32Result[0] == IAP_STA_SECTOR_NOT_BLANK)
    1d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1d90:	2b08      	cmp	r3, #8
    1d92:	d106      	bne.n	1da2 <u32IAP_BlankCheckSectors+0x4a>
		{
			*pu32Result       = au32Result[0];
    1d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1d96:	687b      	ldr	r3, [r7, #4]
    1d98:	601a      	str	r2, [r3, #0]
			*(pu32Result + 1) = au32Result[1];
    1d9a:	687b      	ldr	r3, [r7, #4]
    1d9c:	3304      	adds	r3, #4
    1d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1da0:	601a      	str	r2, [r3, #0]
		}
		u32Status = au32Result[0];
    1da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1da4:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	return ( u32Status );
    1da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1da8:	4618      	mov	r0, r3
    1daa:	3740      	adds	r7, #64	; 0x40
    1dac:	46bd      	mov	sp, r7
    1dae:	bd80      	pop	{r7, pc}
    1db0:	1fff1ff1 	.word	0x1fff1ff1

00001db4 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1db4:	b480      	push	{r7}
    1db6:	b083      	sub	sp, #12
    1db8:	af00      	add	r7, sp, #0
    1dba:	4603      	mov	r3, r0
    1dbc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1dbe:	4908      	ldr	r1, [pc, #32]	; (1de0 <NVIC_EnableIRQ+0x2c>)
    1dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1dc4:	095b      	lsrs	r3, r3, #5
    1dc6:	79fa      	ldrb	r2, [r7, #7]
    1dc8:	f002 021f 	and.w	r2, r2, #31
    1dcc:	2001      	movs	r0, #1
    1dce:	fa00 f202 	lsl.w	r2, r0, r2
    1dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1dd6:	370c      	adds	r7, #12
    1dd8:	46bd      	mov	sp, r7
    1dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dde:	4770      	bx	lr
    1de0:	e000e100 	.word	0xe000e100

00001de4 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1de4:	b480      	push	{r7}
    1de6:	b083      	sub	sp, #12
    1de8:	af00      	add	r7, sp, #0
    1dea:	4603      	mov	r3, r0
    1dec:	6039      	str	r1, [r7, #0]
    1dee:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    1df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1df4:	2b00      	cmp	r3, #0
    1df6:	da0b      	bge.n	1e10 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    1df8:	490d      	ldr	r1, [pc, #52]	; (1e30 <NVIC_SetPriority+0x4c>)
    1dfa:	79fb      	ldrb	r3, [r7, #7]
    1dfc:	f003 030f 	and.w	r3, r3, #15
    1e00:	3b04      	subs	r3, #4
    1e02:	683a      	ldr	r2, [r7, #0]
    1e04:	b2d2      	uxtb	r2, r2
    1e06:	00d2      	lsls	r2, r2, #3
    1e08:	b2d2      	uxtb	r2, r2
    1e0a:	440b      	add	r3, r1
    1e0c:	761a      	strb	r2, [r3, #24]
    1e0e:	e009      	b.n	1e24 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    1e10:	4908      	ldr	r1, [pc, #32]	; (1e34 <NVIC_SetPriority+0x50>)
    1e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1e16:	683a      	ldr	r2, [r7, #0]
    1e18:	b2d2      	uxtb	r2, r2
    1e1a:	00d2      	lsls	r2, r2, #3
    1e1c:	b2d2      	uxtb	r2, r2
    1e1e:	440b      	add	r3, r1
    1e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    1e24:	370c      	adds	r7, #12
    1e26:	46bd      	mov	sp, r7
    1e28:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e2c:	4770      	bx	lr
    1e2e:	bf00      	nop
    1e30:	e000ed00 	.word	0xe000ed00
    1e34:	e000e100 	.word	0xe000e100

00001e38 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
    1e38:	b580      	push	{r7, lr}
    1e3a:	b082      	sub	sp, #8
    1e3c:	af00      	add	r7, sp, #0
    1e3e:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
    1e40:	687b      	ldr	r3, [r7, #4]
    1e42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    1e46:	d301      	bcc.n	1e4c <SysTick_Config+0x14>
    1e48:	2301      	movs	r3, #1
    1e4a:	e011      	b.n	1e70 <SysTick_Config+0x38>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
    1e4c:	4a0a      	ldr	r2, [pc, #40]	; (1e78 <SysTick_Config+0x40>)
    1e4e:	687b      	ldr	r3, [r7, #4]
    1e50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1e54:	3b01      	subs	r3, #1
    1e56:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
    1e58:	f04f 30ff 	mov.w	r0, #4294967295
    1e5c:	211f      	movs	r1, #31
    1e5e:	f7ff ffc1 	bl	1de4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    1e62:	4b05      	ldr	r3, [pc, #20]	; (1e78 <SysTick_Config+0x40>)
    1e64:	2200      	movs	r2, #0
    1e66:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
    1e68:	4b03      	ldr	r3, [pc, #12]	; (1e78 <SysTick_Config+0x40>)
    1e6a:	2207      	movs	r2, #7
    1e6c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
    1e6e:	2300      	movs	r3, #0
}
    1e70:	4618      	mov	r0, r3
    1e72:	3708      	adds	r7, #8
    1e74:	46bd      	mov	sp, r7
    1e76:	bd80      	pop	{r7, pc}
    1e78:	e000e010 	.word	0xe000e010

00001e7c <ConfigurePins>:
int extPowerPinVal = 0;
char cell_buf[15];
short is_cell_only = 1;


void ConfigurePins() {
    1e7c:	b580      	push	{r7, lr}
    1e7e:	b082      	sub	sp, #8
    1e80:	af00      	add	r7, sp, #0
	//PWRKEY & EMERG_OFF
	LPC_PINCON->PINSEL4 &= ~(0xFFFF); // Reset P2[0..7] = GPIO
    1e82:	4a34      	ldr	r2, [pc, #208]	; (1f54 <ConfigurePins+0xd8>)
    1e84:	4b33      	ldr	r3, [pc, #204]	; (1f54 <ConfigurePins+0xd8>)
    1e86:	691b      	ldr	r3, [r3, #16]
    1e88:	0c1b      	lsrs	r3, r3, #16
    1e8a:	041b      	lsls	r3, r3, #16
    1e8c:	6113      	str	r3, [r2, #16]
	LPC_GPIO2->FIODIR |= 0xFF; // P2[0..7] =
    1e8e:	4a32      	ldr	r2, [pc, #200]	; (1f58 <ConfigurePins+0xdc>)
    1e90:	4b31      	ldr	r3, [pc, #196]	; (1f58 <ConfigurePins+0xdc>)
    1e92:	681b      	ldr	r3, [r3, #0]
    1e94:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1e98:	6013      	str	r3, [r2, #0]
	LPC_PINCON->PINSEL9 &= ~(0xFFFF); // Reset P4[24..31] = GPIO
    1e9a:	4a2e      	ldr	r2, [pc, #184]	; (1f54 <ConfigurePins+0xd8>)
    1e9c:	4b2d      	ldr	r3, [pc, #180]	; (1f54 <ConfigurePins+0xd8>)
    1e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1ea0:	0c1b      	lsrs	r3, r3, #16
    1ea2:	041b      	lsls	r3, r3, #16
    1ea4:	6253      	str	r3, [r2, #36]	; 0x24
	LPC_GPIO4->FIODIR = (1 << 28) | (1 << 29);
    1ea6:	4b2d      	ldr	r3, [pc, #180]	; (1f5c <ConfigurePins+0xe0>)
    1ea8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    1eac:	601a      	str	r2, [r3, #0]
	LPC_GPIO0->FIODIR &= (1 << 7); //P0[7] DIN 1 as input --> Default mode pull up enabled.
    1eae:	4a2c      	ldr	r2, [pc, #176]	; (1f60 <ConfigurePins+0xe4>)
    1eb0:	4b2b      	ldr	r3, [pc, #172]	; (1f60 <ConfigurePins+0xe4>)
    1eb2:	681b      	ldr	r3, [r3, #0]
    1eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1eb8:	6013      	str	r3, [r2, #0]
	LPC_GPIO0->FIODIR &= ~(1 << 29 | 1 << 30); //P0[30] as input
    1eba:	4a29      	ldr	r2, [pc, #164]	; (1f60 <ConfigurePins+0xe4>)
    1ebc:	4b28      	ldr	r3, [pc, #160]	; (1f60 <ConfigurePins+0xe4>)
    1ebe:	681b      	ldr	r3, [r3, #0]
    1ec0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
    1ec4:	6013      	str	r3, [r2, #0]
	LPC_GPIO0->FIODIR |= (1 << 5);
    1ec6:	4a26      	ldr	r2, [pc, #152]	; (1f60 <ConfigurePins+0xe4>)
    1ec8:	4b25      	ldr	r3, [pc, #148]	; (1f60 <ConfigurePins+0xe4>)
    1eca:	681b      	ldr	r3, [r3, #0]
    1ecc:	f043 0320 	orr.w	r3, r3, #32
    1ed0:	6013      	str	r3, [r2, #0]
	//Init ADC
	uint32_t u32PCLKDIV, u32PCLK;
	LPC_SC->PCONP |= (1 << 12);
    1ed2:	4a24      	ldr	r2, [pc, #144]	; (1f64 <ConfigurePins+0xe8>)
    1ed4:	4b23      	ldr	r3, [pc, #140]	; (1f64 <ConfigurePins+0xe8>)
    1ed6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1eda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1ede:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	u32PCLKDIV = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
    1ee2:	4b20      	ldr	r3, [pc, #128]	; (1f64 <ConfigurePins+0xe8>)
    1ee4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    1ee8:	099b      	lsrs	r3, r3, #6
    1eea:	f003 0303 	and.w	r3, r3, #3
    1eee:	607b      	str	r3, [r7, #4]
	switch (u32PCLKDIV) {
    1ef0:	687b      	ldr	r3, [r7, #4]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d009      	beq.n	1f0a <ConfigurePins+0x8e>
    1ef6:	2b03      	cmp	r3, #3
    1ef8:	d00a      	beq.n	1f10 <ConfigurePins+0x94>
    1efa:	2b01      	cmp	r3, #1
    1efc:	d002      	beq.n	1f04 <ConfigurePins+0x88>
	case 0x00:
	default:
		u32PCLK = 12000000 / 4;
    1efe:	4b1a      	ldr	r3, [pc, #104]	; (1f68 <ConfigurePins+0xec>)
    1f00:	603b      	str	r3, [r7, #0]
		break;
    1f02:	e008      	b.n	1f16 <ConfigurePins+0x9a>
	case 0x01:
		u32PCLK = 12000000;
    1f04:	4b19      	ldr	r3, [pc, #100]	; (1f6c <ConfigurePins+0xf0>)
    1f06:	603b      	str	r3, [r7, #0]
		break;
    1f08:	e005      	b.n	1f16 <ConfigurePins+0x9a>
	case 0x02:
		u32PCLK = 12000000 / 2;
    1f0a:	4b19      	ldr	r3, [pc, #100]	; (1f70 <ConfigurePins+0xf4>)
    1f0c:	603b      	str	r3, [r7, #0]
		break;
    1f0e:	e002      	b.n	1f16 <ConfigurePins+0x9a>
	case 0x03:
		u32PCLK = 12000000 / 8;
    1f10:	4b18      	ldr	r3, [pc, #96]	; (1f74 <ConfigurePins+0xf8>)
    1f12:	603b      	str	r3, [r7, #0]
		break;
    1f14:	bf00      	nop
	//LPC_ADC->ADCR = (1 << 3) | ((u32PCLK / 12000000 - 1) << 8) | (0 << 16) | (0
	//		<< 17) | (1 << 21) | (0 << 24) | (0 << 27);
	//LPC_PINCON->PINSEL1 |= (1U << 20);
	///ADC//
	//External Power Pin
	LPC_GPIO0->FIODIR &= ~(1 << 22);
    1f16:	4a12      	ldr	r2, [pc, #72]	; (1f60 <ConfigurePins+0xe4>)
    1f18:	4b11      	ldr	r3, [pc, #68]	; (1f60 <ConfigurePins+0xe4>)
    1f1a:	681b      	ldr	r3, [r3, #0]
    1f1c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    1f20:	6013      	str	r3, [r2, #0]
	//Ignition Pin
	LPC_GPIO0->FIODIR &= ~(1 << 21);
    1f22:	4a0f      	ldr	r2, [pc, #60]	; (1f60 <ConfigurePins+0xe4>)
    1f24:	4b0e      	ldr	r3, [pc, #56]	; (1f60 <ConfigurePins+0xe4>)
    1f26:	681b      	ldr	r3, [r3, #0]
    1f28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
    1f2c:	6013      	str	r3, [r2, #0]
	#ifdef brisa
		DIGITAL_IN1_PIN = 21;
	#endif
	LPC_GPIOINT->IO0IntEnR |= (1 << 22); // Rising edge
    1f2e:	4a12      	ldr	r2, [pc, #72]	; (1f78 <ConfigurePins+0xfc>)
    1f30:	4b11      	ldr	r3, [pc, #68]	; (1f78 <ConfigurePins+0xfc>)
    1f32:	691b      	ldr	r3, [r3, #16]
    1f34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1f38:	6113      	str	r3, [r2, #16]
	LPC_GPIOINT->IO0IntEnF |= (1 << 22); // Falling edge
    1f3a:	4a0f      	ldr	r2, [pc, #60]	; (1f78 <ConfigurePins+0xfc>)
    1f3c:	4b0e      	ldr	r3, [pc, #56]	; (1f78 <ConfigurePins+0xfc>)
    1f3e:	695b      	ldr	r3, [r3, #20]
    1f40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1f44:	6153      	str	r3, [r2, #20]
	NVIC_EnableIRQ(EINT3_IRQn);
    1f46:	2015      	movs	r0, #21
    1f48:	f7ff ff34 	bl	1db4 <NVIC_EnableIRQ>
}
    1f4c:	3708      	adds	r7, #8
    1f4e:	46bd      	mov	sp, r7
    1f50:	bd80      	pop	{r7, pc}
    1f52:	bf00      	nop
    1f54:	4002c000 	.word	0x4002c000
    1f58:	2009c040 	.word	0x2009c040
    1f5c:	2009c080 	.word	0x2009c080
    1f60:	2009c000 	.word	0x2009c000
    1f64:	400fc000 	.word	0x400fc000
    1f68:	002dc6c0 	.word	0x002dc6c0
    1f6c:	00b71b00 	.word	0x00b71b00
    1f70:	005b8d80 	.word	0x005b8d80
    1f74:	0016e360 	.word	0x0016e360
    1f78:	40028080 	.word	0x40028080

00001f7c <InitializeServerConn>:
	case 1:
		GSM_SendToServerTCP(p_response);
	}
}

int InitializeServerConn() {
    1f7c:	b580      	push	{r7, lr}
    1f7e:	b0b8      	sub	sp, #224	; 0xe0
    1f80:	af00      	add	r7, sp, #0
	int init_result = GSM_InitModule();
    1f82:	f7fe ffa3 	bl	ecc <GSM_InitModule>
    1f86:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	if (init_result == FAIL){
    1f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    1f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
    1f92:	d109      	bne.n	1fa8 <InitializeServerConn+0x2c>
		GSM_ShutdownModule();
    1f94:	f7fe ff68 	bl	e68 <GSM_ShutdownModule>
		DelayMs(2000);
    1f98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    1f9c:	f000 f9aa 	bl	22f4 <DelayMs>
		init_result = GSM_InitModule();
    1fa0:	f7fe ff94 	bl	ecc <GSM_InitModule>
    1fa4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	}
	if(init_result == FAIL)
    1fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    1fac:	f1b3 3fff 	cmp.w	r3, #4294967295
    1fb0:	d102      	bne.n	1fb8 <InitializeServerConn+0x3c>
		return init_result;
    1fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    1fb6:	e077      	b.n	20a8 <InitializeServerConn+0x12c>
	//DelayMs(7000); // Wait for simcard.
	WDTFeed();
    1fb8:	f000 ff4a 	bl	2e50 <WDTFeed>
	is_sim_inserted = 1;
    1fbc:	4b3c      	ldr	r3, [pc, #240]	; (20b0 <InitializeServerConn+0x134>)
    1fbe:	2201      	movs	r2, #1
    1fc0:	601a      	str	r2, [r3, #0]
	char buffer[200];
	GSM_GetImei();
    1fc2:	f7ff f875 	bl	10b0 <GSM_GetImei>
	GSM_GetImsi(); //
    1fc6:	f7ff f893 	bl	10f0 <GSM_GetImsi>
	int conn_stat = GSM_GetRegStat();
    1fca:	f7ff f81d 	bl	1008 <GSM_GetRegStat>
    1fce:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
	uint8_t loop_count = 0;
    1fd2:	2300      	movs	r3, #0
    1fd4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	while (conn_stat == FAIL && loop_count < 13){
    1fd8:	e011      	b.n	1ffe <InitializeServerConn+0x82>
		//signal_strength = GSM_GetSignalStrength();
		//count = sprintf(buffer, "\Signal Strength : %d\n", signal_strength);
		//UARTSend(PORT_TRACE, buffer, count);
		TraceNL("Network registration error");
    1fda:	4836      	ldr	r0, [pc, #216]	; (20b4 <InitializeServerConn+0x138>)
    1fdc:	f000 f9b0 	bl	2340 <TraceNL>
		DelayMs(2000);
    1fe0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    1fe4:	f000 f986 	bl	22f4 <DelayMs>
		WDTFeed();
    1fe8:	f000 ff32 	bl	2e50 <WDTFeed>
		conn_stat = GSM_GetRegStat();
    1fec:	f7ff f80c 	bl	1008 <GSM_GetRegStat>
    1ff0:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
		loop_count++;
    1ff4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
    1ff8:	3301      	adds	r3, #1
    1ffa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	char buffer[200];
	GSM_GetImei();
	GSM_GetImsi(); //
	int conn_stat = GSM_GetRegStat();
	uint8_t loop_count = 0;
	while (conn_stat == FAIL && loop_count < 13){
    1ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
    2002:	f1b3 3fff 	cmp.w	r3, #4294967295
    2006:	d103      	bne.n	2010 <InitializeServerConn+0x94>
    2008:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
    200c:	2b0c      	cmp	r3, #12
    200e:	d9e4      	bls.n	1fda <InitializeServerConn+0x5e>
		DelayMs(2000);
		WDTFeed();
		conn_stat = GSM_GetRegStat();
		loop_count++;
	}
	int is_conn = FAIL;
    2010:	f04f 33ff 	mov.w	r3, #4294967295
    2014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	if (conn_stat == SUCCESS){
    2018:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
    201c:	2b00      	cmp	r3, #0
    201e:	d141      	bne.n	20a4 <InitializeServerConn+0x128>
		TraceNL("Registered to gsm network.");
    2020:	4825      	ldr	r0, [pc, #148]	; (20b8 <InitializeServerConn+0x13c>)
    2022:	f000 f98d 	bl	2340 <TraceNL>
		last_signal_strength = GSM_GetSignalStrength();
    2026:	f7fe ffc5 	bl	fb4 <GSM_GetSignalStrength>
    202a:	4602      	mov	r2, r0
    202c:	4b23      	ldr	r3, [pc, #140]	; (20bc <InitializeServerConn+0x140>)
    202e:	601a      	str	r2, [r3, #0]
		int count = sprintf(buffer, "\Signal Strength : %d\n", last_signal_strength);
    2030:	4b22      	ldr	r3, [pc, #136]	; (20bc <InitializeServerConn+0x140>)
    2032:	681b      	ldr	r3, [r3, #0]
    2034:	1d3a      	adds	r2, r7, #4
    2036:	4610      	mov	r0, r2
    2038:	4921      	ldr	r1, [pc, #132]	; (20c0 <InitializeServerConn+0x144>)
    203a:	461a      	mov	r2, r3
    203c:	f001 fa2e 	bl	349c <sprintf>
    2040:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
		UARTSend(PORT_TRACE, buffer, count);
    2044:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    2048:	1d3a      	adds	r2, r7, #4
    204a:	2000      	movs	r0, #0
    204c:	4611      	mov	r1, r2
    204e:	461a      	mov	r2, r3
    2050:	f000 fd5c 	bl	2b0c <UARTSend>
		//if (signal_strength == 99 || signal_strength <5)
		//	return FAIL;
		is_conn = GSM_ConnectToTrio();
    2054:	f7fe fd0c 	bl	a70 <GSM_ConnectToTrio>
    2058:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
		if (is_conn == FAIL)
    205c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
    2060:	f1b3 3fff 	cmp.w	r3, #4294967295
    2064:	d103      	bne.n	206e <InitializeServerConn+0xf2>
			is_conn = GSM_ConnectToTrio();
    2066:	f7fe fd03 	bl	a70 <GSM_ConnectToTrio>
    206a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
		if (is_conn == FAIL)
    206e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
    2072:	f1b3 3fff 	cmp.w	r3, #4294967295
    2076:	d103      	bne.n	2080 <InitializeServerConn+0x104>
			is_conn = GSM_ConnectToTrio();
    2078:	f7fe fcfa 	bl	a70 <GSM_ConnectToTrio>
    207c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
		if (is_conn == FAIL)
    2080:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
    2084:	f1b3 3fff 	cmp.w	r3, #4294967295
    2088:	d103      	bne.n	2092 <InitializeServerConn+0x116>
			is_conn = GSM_ConnectToTrio();
    208a:	f7fe fcf1 	bl	a70 <GSM_ConnectToTrio>
    208e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
		if (is_conn == FAIL)
    2092:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
    2096:	f1b3 3fff 	cmp.w	r3, #4294967295
    209a:	d103      	bne.n	20a4 <InitializeServerConn+0x128>
			is_conn = GSM_ConnectToTrio();
    209c:	f7fe fce8 	bl	a70 <GSM_ConnectToTrio>
    20a0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
	}
	return is_conn;
    20a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
}
    20a8:	4618      	mov	r0, r3
    20aa:	37e0      	adds	r7, #224	; 0xe0
    20ac:	46bd      	mov	sp, r7
    20ae:	bd80      	pop	{r7, pc}
    20b0:	10000024 	.word	0x10000024
    20b4:	000065f4 	.word	0x000065f4
    20b8:	00006610 	.word	0x00006610
    20bc:	10000004 	.word	0x10000004
    20c0:	0000662c 	.word	0x0000662c

000020c4 <main>:

int main(void) {
    20c4:	b580      	push	{r7, lr}
    20c6:	b0b6      	sub	sp, #216	; 0xd8
    20c8:	af00      	add	r7, sp, #0
	char buffer[200];
	device_power_state = high_power_state;
    20ca:	4b4b      	ldr	r3, [pc, #300]	; (21f8 <main+0x134>)
    20cc:	2201      	movs	r2, #1
    20ce:	701a      	strb	r2, [r3, #0]
	SystemInit();
    20d0:	f001 f8a2 	bl	3218 <SystemInit>
	LPC_SC->CLKSRCSEL |= 0x01;//0x01;
    20d4:	4a49      	ldr	r2, [pc, #292]	; (21fc <main+0x138>)
    20d6:	4b49      	ldr	r3, [pc, #292]	; (21fc <main+0x138>)
    20d8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    20dc:	f043 0301 	orr.w	r3, r3, #1
    20e0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	LPC_SC->PLL0CFG |= 0x01; // Select external osc. as main clock.
    20e4:	4a45      	ldr	r2, [pc, #276]	; (21fc <main+0x138>)
    20e6:	4b45      	ldr	r3, [pc, #276]	; (21fc <main+0x138>)
    20e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    20ec:	f043 0301 	orr.w	r3, r3, #1
    20f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	LPC_SC->CCLKCFG = 0x03; // Main PLL is divided by 8
    20f4:	4b41      	ldr	r3, [pc, #260]	; (21fc <main+0x138>)
    20f6:	2203      	movs	r2, #3
    20f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	SystemCoreClockUpdate();
    20fc:	f001 f836 	bl	316c <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000 - 1); // Generate f each 1 ms, used to enable DelayMs function?
    2100:	4b3f      	ldr	r3, [pc, #252]	; (2200 <main+0x13c>)
    2102:	681b      	ldr	r3, [r3, #0]
    2104:	4a3f      	ldr	r2, [pc, #252]	; (2204 <main+0x140>)
    2106:	fba2 2303 	umull	r2, r3, r2, r3
    210a:	099b      	lsrs	r3, r3, #6
    210c:	3b01      	subs	r3, #1
    210e:	4618      	mov	r0, r3
    2110:	f7ff fe92 	bl	1e38 <SysTick_Config>
	WDTInit(WDT_FEED_30_SECS);
    2114:	483c      	ldr	r0, [pc, #240]	; (2208 <main+0x144>)
    2116:	f000 fe7d 	bl	2e14 <WDTInit>

	ConfigurePins();
    211a:	f7ff feaf 	bl	1e7c <ConfigurePins>
	UARTInit(PORT_TRACE, 115200);
    211e:	2000      	movs	r0, #0
    2120:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    2124:	f000 fb68 	bl	27f8 <UARTInit>
	UARTInit(PORT_GSM, Baudrate);
    2128:	2001      	movs	r0, #1
    212a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    212e:	f000 fb63 	bl	27f8 <UARTInit>
	UARTInit(PORT_GPS, Baudrate);
    2132:	2002      	movs	r0, #2
    2134:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    2138:	f000 fb5e 	bl	27f8 <UARTInit>
	TraceNL("Hello P65 20150520.");
    213c:	4833      	ldr	r0, [pc, #204]	; (220c <main+0x148>)
    213e:	f000 f8ff 	bl	2340 <TraceNL>
	sprintf(buffer, "SystemCoreClock = %d Hz\n", SystemCoreClock);
    2142:	4b2f      	ldr	r3, [pc, #188]	; (2200 <main+0x13c>)
    2144:	681b      	ldr	r3, [r3, #0]
    2146:	463a      	mov	r2, r7
    2148:	4610      	mov	r0, r2
    214a:	4931      	ldr	r1, [pc, #196]	; (2210 <main+0x14c>)
    214c:	461a      	mov	r2, r3
    214e:	f001 f9a5 	bl	349c <sprintf>
	//UARTSend(PORT_TRACE, buffer, count);
	Trace(buffer);
    2152:	463b      	mov	r3, r7
    2154:	4618      	mov	r0, r3
    2156:	f000 f8e3 	bl	2320 <Trace>
	if (EEPROM_Init() == 0) /* initialize I2c */{
    215a:	f7fe fb0b 	bl	774 <EEPROM_Init>
    215e:	4603      	mov	r3, r0
    2160:	2b00      	cmp	r3, #0
    2162:	d103      	bne.n	216c <main+0xa8>
		TraceNL("EEPROM Init Error."); /* Fatal error */
    2164:	482b      	ldr	r0, [pc, #172]	; (2214 <main+0x150>)
    2166:	f000 f8eb 	bl	2340 <TraceNL>
    216a:	e002      	b.n	2172 <main+0xae>
	} else {
		TraceNL("EEPROM Init Ok.");
    216c:	482a      	ldr	r0, [pc, #168]	; (2218 <main+0x154>)
    216e:	f000 f8e7 	bl	2340 <TraceNL>
	}

	LoadParams();
    2172:	f7fe f8c5 	bl	300 <LoadParams>
	unsigned long int lastGPSLedToggle = 0;
    2176:	2300      	movs	r3, #0
    2178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	memset(buffer, 0xAA, sizeof(buffer));
    217c:	463b      	mov	r3, r7
    217e:	4618      	mov	r0, r3
    2180:	21aa      	movs	r1, #170	; 0xaa
    2182:	22c8      	movs	r2, #200	; 0xc8
    2184:	f001 f8c2 	bl	330c <memset>
	//u32BootLoader_ProgramFlash(buffer,0x30000,16);
	WDTFeed();
    2188:	f000 fe62 	bl	2e50 <WDTFeed>
	int is_sent = SUCCESS;
    218c:	2300      	movs	r3, #0
    218e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	int is_last_speed_zero = 1;
    2192:	2301      	movs	r3, #1
    2194:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	device_power_state = high_power_state;
    2198:	4b17      	ldr	r3, [pc, #92]	; (21f8 <main+0x134>)
    219a:	2201      	movs	r2, #1
    219c:	701a      	strb	r2, [r3, #0]

	/// TODO set a timer in order of update failure to return to older

	TraceNL( "Initializing Server Connection" );
    219e:	481f      	ldr	r0, [pc, #124]	; (221c <main+0x158>)
    21a0:	f000 f8ce 	bl	2340 <TraceNL>

	if( IsUpgradeRequested() )
    21a4:	f000 f842 	bl	222c <IsUpgradeRequested>
    21a8:	4603      	mov	r3, r0
    21aa:	2b00      	cmp	r3, #0
    21ac:	d01f      	beq.n	21ee <main+0x12a>
	{
		TraceNL( "System image upgrade requested" );
    21ae:	481c      	ldr	r0, [pc, #112]	; (2220 <main+0x15c>)
    21b0:	f000 f8c6 	bl	2340 <TraceNL>
		int8_t 	trials = 5;
    21b4:	2305      	movs	r3, #5
    21b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
		while( trials-- > 0 )
    21ba:	e00e      	b.n	21da <main+0x116>
			/*
			 * 	Initialize GSM module
			 * 	Setup a server connection
			 *
			 */
			if( InitializeServerConn() )
    21bc:	f7ff fede 	bl	1f7c <InitializeServerConn>
    21c0:	4603      	mov	r3, r0
    21c2:	2b00      	cmp	r3, #0
    21c4:	d009      	beq.n	21da <main+0x116>
			{
				TraceNL( "Server Connection Established to Upgrade server" );
    21c6:	4817      	ldr	r0, [pc, #92]	; (2224 <main+0x160>)
    21c8:	f000 f8ba 	bl	2340 <TraceNL>

				GSM_SendToServerTCP( "[ST;70;r2246;P65-20150204-1;;HELLO]" );
    21cc:	4816      	ldr	r0, [pc, #88]	; (2228 <main+0x164>)
    21ce:	f7fe fda5 	bl	d1c <GSM_SendToServerTCP>

				WDTFeed( );
    21d2:	f000 fe3d 	bl	2e50 <WDTFeed>

				DownloadSecondaryImage();
    21d6:	f000 f839 	bl	224c <DownloadSecondaryImage>

	if( IsUpgradeRequested() )
	{
		TraceNL( "System image upgrade requested" );
		int8_t 	trials = 5;
		while( trials-- > 0 )
    21da:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
    21de:	b2d3      	uxtb	r3, r2
    21e0:	3b01      	subs	r3, #1
    21e2:	b2db      	uxtb	r3, r3
    21e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    21e8:	b253      	sxtb	r3, r2
    21ea:	2b00      	cmp	r3, #0
    21ec:	dce6      	bgt.n	21bc <main+0xf8>
//	// Valid application does not exists. Get one from UART 0
//	enter_serial_isp();
//
//	while ( 1 );	// assert should not get here
//	return (0);
}
    21ee:	4618      	mov	r0, r3
    21f0:	37d8      	adds	r7, #216	; 0xd8
    21f2:	46bd      	mov	sp, r7
    21f4:	bd80      	pop	{r7, pc}
    21f6:	bf00      	nop
    21f8:	10000cd8 	.word	0x10000cd8
    21fc:	400fc000 	.word	0x400fc000
    2200:	1000000c 	.word	0x1000000c
    2204:	10624dd3 	.word	0x10624dd3
    2208:	0c6aea15 	.word	0x0c6aea15
    220c:	00006644 	.word	0x00006644
    2210:	00006658 	.word	0x00006658
    2214:	00006674 	.word	0x00006674
    2218:	00006688 	.word	0x00006688
    221c:	00006698 	.word	0x00006698
    2220:	000066b8 	.word	0x000066b8
    2224:	000066d8 	.word	0x000066d8
    2228:	00006708 	.word	0x00006708

0000222c <IsUpgradeRequested>:
** Returned value:	TRUE	upgrade is requested
** 					FALSE   upgrade is not requested
**
******************************************************************************/
uint32_t	IsUpgradeRequested( void )
{
    222c:	b480      	push	{r7}
    222e:	af00      	add	r7, sp, #0
	// TODO for test purposes allways upgrade requested later change
	if( (*( (uint32_t *) UPGRADE_PARAMETERS_ADDR) ) == 0xFFFFFFFF )
    2230:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
    2234:	681b      	ldr	r3, [r3, #0]
    2236:	f1b3 3fff 	cmp.w	r3, #4294967295
    223a:	d101      	bne.n	2240 <IsUpgradeRequested+0x14>
	{
		return TRUE;
    223c:	2301      	movs	r3, #1
    223e:	e000      	b.n	2242 <IsUpgradeRequested+0x16>
	}

	return FALSE;
    2240:	2300      	movs	r3, #0
}
    2242:	4618      	mov	r0, r3
    2244:	46bd      	mov	sp, r7
    2246:	f85d 7b04 	ldr.w	r7, [sp], #4
    224a:	4770      	bx	lr

0000224c <DownloadSecondaryImage>:


void DownloadSecondaryImage( void )
{
    224c:	b580      	push	{r7, lr}
    224e:	b082      	sub	sp, #8
    2250:	af00      	add	r7, sp, #0
	uint32_t	reason;

	TraceNL( "Checking if target memory is blank" );
    2252:	4811      	ldr	r0, [pc, #68]	; (2298 <DownloadSecondaryImage+0x4c>)
    2254:	f000 f874 	bl	2340 <TraceNL>
	if( u32IAP_BlankCheckSectors( SECONDARY_IMAGE_START_SEC,
    2258:	1d3b      	adds	r3, r7, #4
    225a:	2016      	movs	r0, #22
    225c:	211a      	movs	r1, #26
    225e:	461a      	mov	r2, r3
    2260:	f7ff fd7a 	bl	1d58 <u32IAP_BlankCheckSectors>
    2264:	4603      	mov	r3, r0
    2266:	2b08      	cmp	r3, #8
    2268:	d007      	beq.n	227a <DownloadSecondaryImage+0x2e>
			                      SECONDARY_IMAGE_END_SEC - 1, &reason )
			!= IAP_STA_SECTOR_NOT_BLANK )
	{
		TraceNL( "Erasing flash range for the image" );
    226a:	480c      	ldr	r0, [pc, #48]	; (229c <DownloadSecondaryImage+0x50>)
    226c:	f000 f868 	bl	2340 <TraceNL>
		u32IAP_EraseSectors( SECONDARY_IMAGE_START_SEC, SECONDARY_IMAGE_END_SEC);
    2270:	2016      	movs	r0, #22
    2272:	211b      	movs	r1, #27
    2274:	f7ff fd40 	bl	1cf8 <u32IAP_EraseSectors>
    2278:	e002      	b.n	2280 <DownloadSecondaryImage+0x34>
	}else
	{
		TraceNL( "Target flash range is blank" );
    227a:	4809      	ldr	r0, [pc, #36]	; (22a0 <DownloadSecondaryImage+0x54>)
    227c:	f000 f860 	bl	2340 <TraceNL>
	}

	/*	Clear the received data counter using in the load_mage function */
	received_data = 0;
    2280:	4b08      	ldr	r3, [pc, #32]	; (22a4 <DownloadSecondaryImage+0x58>)
    2282:	2200      	movs	r2, #0
    2284:	601a      	str	r2, [r3, #0]

	TraceNL( "Starting download" );
    2286:	4808      	ldr	r0, [pc, #32]	; (22a8 <DownloadSecondaryImage+0x5c>)
    2288:	f000 f85a 	bl	2340 <TraceNL>
	/*	Store a new image into flash */
	XModem1K_Client(&load_image);
    228c:	4807      	ldr	r0, [pc, #28]	; (22ac <DownloadSecondaryImage+0x60>)
    228e:	f000 fe25 	bl	2edc <XModem1K_Client>
}
    2292:	3708      	adds	r7, #8
    2294:	46bd      	mov	sp, r7
    2296:	bd80      	pop	{r7, pc}
    2298:	0000683c 	.word	0x0000683c
    229c:	00006860 	.word	0x00006860
    22a0:	00006884 	.word	0x00006884
    22a4:	10000020 	.word	0x10000020
    22a8:	000068a0 	.word	0x000068a0
    22ac:	000022b1 	.word	0x000022b1

000022b0 <load_image>:

	// Jump to user application
    user_code_entry();
}

static uint32_t load_image(uint8_t *data, uint16_t length){
    22b0:	b580      	push	{r7, lr}
    22b2:	b082      	sub	sp, #8
    22b4:	af00      	add	r7, sp, #0
    22b6:	6078      	str	r0, [r7, #4]
    22b8:	460b      	mov	r3, r1
    22ba:	807b      	strh	r3, [r7, #2]

	if(length > 0)
    22bc:	887b      	ldrh	r3, [r7, #2]
    22be:	2b00      	cmp	r3, #0
    22c0:	d005      	beq.n	22ce <load_image+0x1e>
	{
		/*	Prepare Sectors to be flashed */
		// TODO arrange sectors for primary image
		if(u32IAP_PrepareSectors(16, 20) == IAP_STA_CMD_SUCCESS){
    22c2:	2010      	movs	r0, #16
    22c4:	2114      	movs	r1, #20
    22c6:	f7ff fcf3 	bl	1cb0 <u32IAP_PrepareSectors>
//				}
//			}
		}
		/*	Error in the IAP functions */
		//  GLCD_DisplayString(5, 26, 0, "FAIL (RESET & ERASE IMAGE)");
		return ( 0 );
    22ca:	2300      	movs	r3, #0
    22cc:	e000      	b.n	22d0 <load_image+0x20>

	}else{
		return ( 0 );
    22ce:	2300      	movs	r3, #0
	}
}
    22d0:	4618      	mov	r0, r3
    22d2:	3708      	adds	r7, #8
    22d4:	46bd      	mov	sp, r7
    22d6:	bd80      	pop	{r7, pc}

000022d8 <SysTick_Handler>:
 *  Created on: 14 Kas 2012
 *      Author: trio
 */
#include <LPC17xx.h>
#include "timer.h"
void SysTick_Handler(void) {
    22d8:	b480      	push	{r7}
    22da:	af00      	add	r7, sp, #0
	STT_Value++;
    22dc:	4b04      	ldr	r3, [pc, #16]	; (22f0 <SysTick_Handler+0x18>)
    22de:	681b      	ldr	r3, [r3, #0]
    22e0:	3301      	adds	r3, #1
    22e2:	4a03      	ldr	r2, [pc, #12]	; (22f0 <SysTick_Handler+0x18>)
    22e4:	6013      	str	r3, [r2, #0]
}
    22e6:	46bd      	mov	sp, r7
    22e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    22ec:	4770      	bx	lr
    22ee:	bf00      	nop
    22f0:	10000a9c 	.word	0x10000a9c

000022f4 <DelayMs>:

void DelayMs(unsigned int t) // 65536 max.
{
    22f4:	b480      	push	{r7}
    22f6:	b085      	sub	sp, #20
    22f8:	af00      	add	r7, sp, #0
    22fa:	6078      	str	r0, [r7, #4]
	unsigned long temp;
	temp = STT_Value;
    22fc:	4b07      	ldr	r3, [pc, #28]	; (231c <DelayMs+0x28>)
    22fe:	681b      	ldr	r3, [r3, #0]
    2300:	60fb      	str	r3, [r7, #12]
	while ((STT_Value - temp) < t);
    2302:	bf00      	nop
    2304:	4b05      	ldr	r3, [pc, #20]	; (231c <DelayMs+0x28>)
    2306:	681a      	ldr	r2, [r3, #0]
    2308:	68fb      	ldr	r3, [r7, #12]
    230a:	1ad2      	subs	r2, r2, r3
    230c:	687b      	ldr	r3, [r7, #4]
    230e:	429a      	cmp	r2, r3
    2310:	d3f8      	bcc.n	2304 <DelayMs+0x10>
}
    2312:	3714      	adds	r7, #20
    2314:	46bd      	mov	sp, r7
    2316:	f85d 7b04 	ldr.w	r7, [sp], #4
    231a:	4770      	bx	lr
    231c:	10000a9c 	.word	0x10000a9c

00002320 <Trace>:
#include <string.h>
#include <trace.h>


void Trace( char* msg)
{
    2320:	b580      	push	{r7, lr}
    2322:	b082      	sub	sp, #8
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
	UARTSend(PORT_TRACE, (unsigned char*)msg, strlen(msg));
    2328:	6878      	ldr	r0, [r7, #4]
    232a:	f002 fd1d 	bl	4d68 <strlen>
    232e:	4603      	mov	r3, r0
    2330:	2000      	movs	r0, #0
    2332:	6879      	ldr	r1, [r7, #4]
    2334:	461a      	mov	r2, r3
    2336:	f000 fbe9 	bl	2b0c <UARTSend>
}
    233a:	3708      	adds	r7, #8
    233c:	46bd      	mov	sp, r7
    233e:	bd80      	pop	{r7, pc}

00002340 <TraceNL>:

void TraceNL( char* msg)
{
    2340:	b580      	push	{r7, lr}
    2342:	b082      	sub	sp, #8
    2344:	af00      	add	r7, sp, #0
    2346:	6078      	str	r0, [r7, #4]
	UARTSend(PORT_TRACE, (unsigned char*)msg, strlen(msg));
    2348:	6878      	ldr	r0, [r7, #4]
    234a:	f002 fd0d 	bl	4d68 <strlen>
    234e:	4603      	mov	r3, r0
    2350:	2000      	movs	r0, #0
    2352:	6879      	ldr	r1, [r7, #4]
    2354:	461a      	mov	r2, r3
    2356:	f000 fbd9 	bl	2b0c <UARTSend>
	UARTSend(PORT_TRACE, (unsigned char*)"\r", 1);
    235a:	2000      	movs	r0, #0
    235c:	4903      	ldr	r1, [pc, #12]	; (236c <TraceNL+0x2c>)
    235e:	2201      	movs	r2, #1
    2360:	f000 fbd4 	bl	2b0c <UARTSend>
}
    2364:	3708      	adds	r7, #8
    2366:	46bd      	mov	sp, r7
    2368:	bd80      	pop	{r7, pc}
    236a:	bf00      	nop
    236c:	00006940 	.word	0x00006940

00002370 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    2370:	b480      	push	{r7}
    2372:	b083      	sub	sp, #12
    2374:	af00      	add	r7, sp, #0
    2376:	4603      	mov	r3, r0
    2378:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    237a:	4908      	ldr	r1, [pc, #32]	; (239c <NVIC_EnableIRQ+0x2c>)
    237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    2380:	095b      	lsrs	r3, r3, #5
    2382:	79fa      	ldrb	r2, [r7, #7]
    2384:	f002 021f 	and.w	r2, r2, #31
    2388:	2001      	movs	r0, #1
    238a:	fa00 f202 	lsl.w	r2, r0, r2
    238e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2392:	370c      	adds	r7, #12
    2394:	46bd      	mov	sp, r7
    2396:	f85d 7b04 	ldr.w	r7, [sp], #4
    239a:	4770      	bx	lr
    239c:	e000e100 	.word	0xe000e100

000023a0 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	4603      	mov	r3, r0
    23a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    23aa:	4909      	ldr	r1, [pc, #36]	; (23d0 <NVIC_DisableIRQ+0x30>)
    23ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
    23b0:	095b      	lsrs	r3, r3, #5
    23b2:	79fa      	ldrb	r2, [r7, #7]
    23b4:	f002 021f 	and.w	r2, r2, #31
    23b8:	2001      	movs	r0, #1
    23ba:	fa00 f202 	lsl.w	r2, r0, r2
    23be:	3320      	adds	r3, #32
    23c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    23c4:	370c      	adds	r7, #12
    23c6:	46bd      	mov	sp, r7
    23c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    23cc:	4770      	bx	lr
    23ce:	bf00      	nop
    23d0:	e000e100 	.word	0xe000e100

000023d4 <UART0_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART0_IRQHandler(void) {
    23d4:	b480      	push	{r7}
    23d6:	b083      	sub	sp, #12
    23d8:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART0->IIR;
    23da:	4b3b      	ldr	r3, [pc, #236]	; (24c8 <UART0_IRQHandler+0xf4>)
    23dc:	689b      	ldr	r3, [r3, #8]
    23de:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    23e0:	79bb      	ldrb	r3, [r7, #6]
    23e2:	085b      	lsrs	r3, r3, #1
    23e4:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    23e6:	79bb      	ldrb	r3, [r7, #6]
    23e8:	f003 0307 	and.w	r3, r3, #7
    23ec:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    23ee:	79bb      	ldrb	r3, [r7, #6]
    23f0:	2b03      	cmp	r3, #3
    23f2:	d12c      	bne.n	244e <UART0_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART0->LSR;
    23f4:	4b34      	ldr	r3, [pc, #208]	; (24c8 <UART0_IRQHandler+0xf4>)
    23f6:	7d1b      	ldrb	r3, [r3, #20]
    23f8:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    23fa:	797b      	ldrb	r3, [r7, #5]
    23fc:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2400:	2b00      	cmp	r3, #0
    2402:	d006      	beq.n	2412 <UART0_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART0Status = LSRValue;
    2404:	797b      	ldrb	r3, [r7, #5]
    2406:	4a31      	ldr	r2, [pc, #196]	; (24cc <UART0_IRQHandler+0xf8>)
    2408:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART0->RBR; /* Dummy read on RX to clear
    240a:	4b2f      	ldr	r3, [pc, #188]	; (24c8 <UART0_IRQHandler+0xf4>)
    240c:	781b      	ldrb	r3, [r3, #0]
    240e:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2410:	e055      	b.n	24be <UART0_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    2412:	797b      	ldrb	r3, [r7, #5]
    2414:	f003 0301 	and.w	r3, r3, #1
    2418:	2b00      	cmp	r3, #0
    241a:	d050      	beq.n	24be <UART0_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART0Buffer[UART0Count] = LPC_UART0->RBR;
    241c:	4b2c      	ldr	r3, [pc, #176]	; (24d0 <UART0_IRQHandler+0xfc>)
    241e:	881b      	ldrh	r3, [r3, #0]
    2420:	b29b      	uxth	r3, r3
    2422:	461a      	mov	r2, r3
    2424:	4b28      	ldr	r3, [pc, #160]	; (24c8 <UART0_IRQHandler+0xf4>)
    2426:	781b      	ldrb	r3, [r3, #0]
    2428:	b2d9      	uxtb	r1, r3
    242a:	4b2a      	ldr	r3, [pc, #168]	; (24d4 <UART0_IRQHandler+0x100>)
    242c:	5499      	strb	r1, [r3, r2]
			UART0Count++;
    242e:	4b28      	ldr	r3, [pc, #160]	; (24d0 <UART0_IRQHandler+0xfc>)
    2430:	881b      	ldrh	r3, [r3, #0]
    2432:	b29b      	uxth	r3, r3
    2434:	3301      	adds	r3, #1
    2436:	b29a      	uxth	r2, r3
    2438:	4b25      	ldr	r3, [pc, #148]	; (24d0 <UART0_IRQHandler+0xfc>)
    243a:	801a      	strh	r2, [r3, #0]
			if (UART0Count == BUFSIZE) {
    243c:	4b24      	ldr	r3, [pc, #144]	; (24d0 <UART0_IRQHandler+0xfc>)
    243e:	881b      	ldrh	r3, [r3, #0]
    2440:	b29b      	uxth	r3, r3
    2442:	2bff      	cmp	r3, #255	; 0xff
    2444:	d13b      	bne.n	24be <UART0_IRQHandler+0xea>
				UART0Count = 0; /* buffer overflow */
    2446:	4b22      	ldr	r3, [pc, #136]	; (24d0 <UART0_IRQHandler+0xfc>)
    2448:	2200      	movs	r2, #0
    244a:	801a      	strh	r2, [r3, #0]
    244c:	e037      	b.n	24be <UART0_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    244e:	79bb      	ldrb	r3, [r7, #6]
    2450:	2b02      	cmp	r3, #2
    2452:	d118      	bne.n	2486 <UART0_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART0Buffer[UART0Count] = LPC_UART0->RBR;
    2454:	4b1e      	ldr	r3, [pc, #120]	; (24d0 <UART0_IRQHandler+0xfc>)
    2456:	881b      	ldrh	r3, [r3, #0]
    2458:	b29b      	uxth	r3, r3
    245a:	461a      	mov	r2, r3
    245c:	4b1a      	ldr	r3, [pc, #104]	; (24c8 <UART0_IRQHandler+0xf4>)
    245e:	781b      	ldrb	r3, [r3, #0]
    2460:	b2d9      	uxtb	r1, r3
    2462:	4b1c      	ldr	r3, [pc, #112]	; (24d4 <UART0_IRQHandler+0x100>)
    2464:	5499      	strb	r1, [r3, r2]
		UART0Count++;
    2466:	4b1a      	ldr	r3, [pc, #104]	; (24d0 <UART0_IRQHandler+0xfc>)
    2468:	881b      	ldrh	r3, [r3, #0]
    246a:	b29b      	uxth	r3, r3
    246c:	3301      	adds	r3, #1
    246e:	b29a      	uxth	r2, r3
    2470:	4b17      	ldr	r3, [pc, #92]	; (24d0 <UART0_IRQHandler+0xfc>)
    2472:	801a      	strh	r2, [r3, #0]
		if (UART0Count == BUFSIZE) {
    2474:	4b16      	ldr	r3, [pc, #88]	; (24d0 <UART0_IRQHandler+0xfc>)
    2476:	881b      	ldrh	r3, [r3, #0]
    2478:	b29b      	uxth	r3, r3
    247a:	2bff      	cmp	r3, #255	; 0xff
    247c:	d11f      	bne.n	24be <UART0_IRQHandler+0xea>
			UART0Count = 0; /* buffer overflow */
    247e:	4b14      	ldr	r3, [pc, #80]	; (24d0 <UART0_IRQHandler+0xfc>)
    2480:	2200      	movs	r2, #0
    2482:	801a      	strh	r2, [r3, #0]
    2484:	e01b      	b.n	24be <UART0_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2486:	79bb      	ldrb	r3, [r7, #6]
    2488:	2b06      	cmp	r3, #6
    248a:	d106      	bne.n	249a <UART0_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART0Status |= 0x100; /* Bit 9 as the CTI error */
    248c:	4b0f      	ldr	r3, [pc, #60]	; (24cc <UART0_IRQHandler+0xf8>)
    248e:	681b      	ldr	r3, [r3, #0]
    2490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2494:	4a0d      	ldr	r2, [pc, #52]	; (24cc <UART0_IRQHandler+0xf8>)
    2496:	6013      	str	r3, [r2, #0]
    2498:	e011      	b.n	24be <UART0_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    249a:	79bb      	ldrb	r3, [r7, #6]
    249c:	2b01      	cmp	r3, #1
    249e:	d10e      	bne.n	24be <UART0_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART0->LSR; /* Check status in the LSR to see if
    24a0:	4b09      	ldr	r3, [pc, #36]	; (24c8 <UART0_IRQHandler+0xf4>)
    24a2:	7d1b      	ldrb	r3, [r3, #20]
    24a4:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    24a6:	797b      	ldrb	r3, [r7, #5]
    24a8:	f003 0320 	and.w	r3, r3, #32
    24ac:	2b00      	cmp	r3, #0
    24ae:	d003      	beq.n	24b8 <UART0_IRQHandler+0xe4>
			UART0TxEmpty = 1;
    24b0:	4b09      	ldr	r3, [pc, #36]	; (24d8 <UART0_IRQHandler+0x104>)
    24b2:	2201      	movs	r2, #1
    24b4:	701a      	strb	r2, [r3, #0]
    24b6:	e002      	b.n	24be <UART0_IRQHandler+0xea>
		} else {
			UART0TxEmpty = 0;
    24b8:	4b07      	ldr	r3, [pc, #28]	; (24d8 <UART0_IRQHandler+0x104>)
    24ba:	2200      	movs	r2, #0
    24bc:	701a      	strb	r2, [r3, #0]
		}
	}
}
    24be:	370c      	adds	r7, #12
    24c0:	46bd      	mov	sp, r7
    24c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    24c6:	4770      	bx	lr
    24c8:	4000c000 	.word	0x4000c000
    24cc:	100018f4 	.word	0x100018f4
    24d0:	10000028 	.word	0x10000028
    24d4:	10000ef4 	.word	0x10000ef4
    24d8:	10000008 	.word	0x10000008

000024dc <UART1_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART1_IRQHandler(void) {
    24dc:	b480      	push	{r7}
    24de:	b083      	sub	sp, #12
    24e0:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART1->IIR;
    24e2:	4b3b      	ldr	r3, [pc, #236]	; (25d0 <UART1_IRQHandler+0xf4>)
    24e4:	689b      	ldr	r3, [r3, #8]
    24e6:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    24e8:	79bb      	ldrb	r3, [r7, #6]
    24ea:	085b      	lsrs	r3, r3, #1
    24ec:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    24ee:	79bb      	ldrb	r3, [r7, #6]
    24f0:	f003 0307 	and.w	r3, r3, #7
    24f4:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    24f6:	79bb      	ldrb	r3, [r7, #6]
    24f8:	2b03      	cmp	r3, #3
    24fa:	d12c      	bne.n	2556 <UART1_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART1->LSR;
    24fc:	4b34      	ldr	r3, [pc, #208]	; (25d0 <UART1_IRQHandler+0xf4>)
    24fe:	7d1b      	ldrb	r3, [r3, #20]
    2500:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2502:	797b      	ldrb	r3, [r7, #5]
    2504:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2508:	2b00      	cmp	r3, #0
    250a:	d006      	beq.n	251a <UART1_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART1Status = LSRValue;
    250c:	797b      	ldrb	r3, [r7, #5]
    250e:	4a31      	ldr	r2, [pc, #196]	; (25d4 <UART1_IRQHandler+0xf8>)
    2510:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART1->RBR; /* Dummy read on RX to clear
    2512:	4b2f      	ldr	r3, [pc, #188]	; (25d0 <UART1_IRQHandler+0xf4>)
    2514:	781b      	ldrb	r3, [r3, #0]
    2516:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2518:	e055      	b.n	25c6 <UART1_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    251a:	797b      	ldrb	r3, [r7, #5]
    251c:	f003 0301 	and.w	r3, r3, #1
    2520:	2b00      	cmp	r3, #0
    2522:	d050      	beq.n	25c6 <UART1_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART1Buffer[UART1Count] = LPC_UART1->RBR;
    2524:	4b2c      	ldr	r3, [pc, #176]	; (25d8 <UART1_IRQHandler+0xfc>)
    2526:	881b      	ldrh	r3, [r3, #0]
    2528:	b29b      	uxth	r3, r3
    252a:	461a      	mov	r2, r3
    252c:	4b28      	ldr	r3, [pc, #160]	; (25d0 <UART1_IRQHandler+0xf4>)
    252e:	781b      	ldrb	r3, [r3, #0]
    2530:	b2d9      	uxtb	r1, r3
    2532:	4b2a      	ldr	r3, [pc, #168]	; (25dc <UART1_IRQHandler+0x100>)
    2534:	5499      	strb	r1, [r3, r2]
			UART1Count++;
    2536:	4b28      	ldr	r3, [pc, #160]	; (25d8 <UART1_IRQHandler+0xfc>)
    2538:	881b      	ldrh	r3, [r3, #0]
    253a:	b29b      	uxth	r3, r3
    253c:	3301      	adds	r3, #1
    253e:	b29a      	uxth	r2, r3
    2540:	4b25      	ldr	r3, [pc, #148]	; (25d8 <UART1_IRQHandler+0xfc>)
    2542:	801a      	strh	r2, [r3, #0]
			if (UART1Count == BUFSIZE) {
    2544:	4b24      	ldr	r3, [pc, #144]	; (25d8 <UART1_IRQHandler+0xfc>)
    2546:	881b      	ldrh	r3, [r3, #0]
    2548:	b29b      	uxth	r3, r3
    254a:	2bff      	cmp	r3, #255	; 0xff
    254c:	d13b      	bne.n	25c6 <UART1_IRQHandler+0xea>
				UART1Count = 0; /* buffer overflow */
    254e:	4b22      	ldr	r3, [pc, #136]	; (25d8 <UART1_IRQHandler+0xfc>)
    2550:	2200      	movs	r2, #0
    2552:	801a      	strh	r2, [r3, #0]
    2554:	e037      	b.n	25c6 <UART1_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2556:	79bb      	ldrb	r3, [r7, #6]
    2558:	2b02      	cmp	r3, #2
    255a:	d118      	bne.n	258e <UART1_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART1Buffer[UART1Count] = LPC_UART1->RBR;
    255c:	4b1e      	ldr	r3, [pc, #120]	; (25d8 <UART1_IRQHandler+0xfc>)
    255e:	881b      	ldrh	r3, [r3, #0]
    2560:	b29b      	uxth	r3, r3
    2562:	461a      	mov	r2, r3
    2564:	4b1a      	ldr	r3, [pc, #104]	; (25d0 <UART1_IRQHandler+0xf4>)
    2566:	781b      	ldrb	r3, [r3, #0]
    2568:	b2d9      	uxtb	r1, r3
    256a:	4b1c      	ldr	r3, [pc, #112]	; (25dc <UART1_IRQHandler+0x100>)
    256c:	5499      	strb	r1, [r3, r2]
		UART1Count++;
    256e:	4b1a      	ldr	r3, [pc, #104]	; (25d8 <UART1_IRQHandler+0xfc>)
    2570:	881b      	ldrh	r3, [r3, #0]
    2572:	b29b      	uxth	r3, r3
    2574:	3301      	adds	r3, #1
    2576:	b29a      	uxth	r2, r3
    2578:	4b17      	ldr	r3, [pc, #92]	; (25d8 <UART1_IRQHandler+0xfc>)
    257a:	801a      	strh	r2, [r3, #0]
		if (UART1Count == BUFSIZE) {
    257c:	4b16      	ldr	r3, [pc, #88]	; (25d8 <UART1_IRQHandler+0xfc>)
    257e:	881b      	ldrh	r3, [r3, #0]
    2580:	b29b      	uxth	r3, r3
    2582:	2bff      	cmp	r3, #255	; 0xff
    2584:	d11f      	bne.n	25c6 <UART1_IRQHandler+0xea>
			UART1Count = 0; /* buffer overflow */
    2586:	4b14      	ldr	r3, [pc, #80]	; (25d8 <UART1_IRQHandler+0xfc>)
    2588:	2200      	movs	r2, #0
    258a:	801a      	strh	r2, [r3, #0]
    258c:	e01b      	b.n	25c6 <UART1_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    258e:	79bb      	ldrb	r3, [r7, #6]
    2590:	2b06      	cmp	r3, #6
    2592:	d106      	bne.n	25a2 <UART1_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART1Status |= 0x100; /* Bit 9 as the CTI error */
    2594:	4b0f      	ldr	r3, [pc, #60]	; (25d4 <UART1_IRQHandler+0xf8>)
    2596:	681b      	ldr	r3, [r3, #0]
    2598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    259c:	4a0d      	ldr	r2, [pc, #52]	; (25d4 <UART1_IRQHandler+0xf8>)
    259e:	6013      	str	r3, [r2, #0]
    25a0:	e011      	b.n	25c6 <UART1_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    25a2:	79bb      	ldrb	r3, [r7, #6]
    25a4:	2b01      	cmp	r3, #1
    25a6:	d10e      	bne.n	25c6 <UART1_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART1->LSR; /* Check status in the LSR to see if
    25a8:	4b09      	ldr	r3, [pc, #36]	; (25d0 <UART1_IRQHandler+0xf4>)
    25aa:	7d1b      	ldrb	r3, [r3, #20]
    25ac:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    25ae:	797b      	ldrb	r3, [r7, #5]
    25b0:	f003 0320 	and.w	r3, r3, #32
    25b4:	2b00      	cmp	r3, #0
    25b6:	d003      	beq.n	25c0 <UART1_IRQHandler+0xe4>
			UART1TxEmpty = 1;
    25b8:	4b09      	ldr	r3, [pc, #36]	; (25e0 <UART1_IRQHandler+0x104>)
    25ba:	2201      	movs	r2, #1
    25bc:	701a      	strb	r2, [r3, #0]
    25be:	e002      	b.n	25c6 <UART1_IRQHandler+0xea>
		} else {
			UART1TxEmpty = 0;
    25c0:	4b07      	ldr	r3, [pc, #28]	; (25e0 <UART1_IRQHandler+0x104>)
    25c2:	2200      	movs	r2, #0
    25c4:	701a      	strb	r2, [r3, #0]
		}
	}

}
    25c6:	370c      	adds	r7, #12
    25c8:	46bd      	mov	sp, r7
    25ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    25ce:	4770      	bx	lr
    25d0:	40010000 	.word	0x40010000
    25d4:	10000ff4 	.word	0x10000ff4
    25d8:	1000002a 	.word	0x1000002a
    25dc:	10000de8 	.word	0x10000de8
    25e0:	10000009 	.word	0x10000009

000025e4 <UART2_IRQHandler>:

void UART2_IRQHandler(void) {
    25e4:	b480      	push	{r7}
    25e6:	b083      	sub	sp, #12
    25e8:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;
	IIRValue = LPC_UART2->IIR;
    25ea:	4b3c      	ldr	r3, [pc, #240]	; (26dc <UART2_IRQHandler+0xf8>)
    25ec:	689b      	ldr	r3, [r3, #8]
    25ee:	71bb      	strb	r3, [r7, #6]
	IIRValue >>= 1; /* skip pending bit in IIR */
    25f0:	79bb      	ldrb	r3, [r7, #6]
    25f2:	085b      	lsrs	r3, r3, #1
    25f4:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    25f6:	79bb      	ldrb	r3, [r7, #6]
    25f8:	f003 0307 	and.w	r3, r3, #7
    25fc:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    25fe:	79bb      	ldrb	r3, [r7, #6]
    2600:	2b03      	cmp	r3, #3
    2602:	d12d      	bne.n	2660 <UART2_IRQHandler+0x7c>
	{
		LSRValue = LPC_UART2->LSR;
    2604:	4b35      	ldr	r3, [pc, #212]	; (26dc <UART2_IRQHandler+0xf8>)
    2606:	7d1b      	ldrb	r3, [r3, #20]
    2608:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    260a:	797b      	ldrb	r3, [r7, #5]
    260c:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2610:	2b00      	cmp	r3, #0
    2612:	d006      	beq.n	2622 <UART2_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART2Status = LSRValue;
    2614:	797b      	ldrb	r3, [r7, #5]
    2616:	4a32      	ldr	r2, [pc, #200]	; (26e0 <UART2_IRQHandler+0xfc>)
    2618:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART2->RBR; /* Dummy read on RX to clear
    261a:	4b30      	ldr	r3, [pc, #192]	; (26dc <UART2_IRQHandler+0xf8>)
    261c:	781b      	ldrb	r3, [r3, #0]
    261e:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2620:	e057      	b.n	26d2 <UART2_IRQHandler+0xee>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    2622:	797b      	ldrb	r3, [r7, #5]
    2624:	f003 0301 	and.w	r3, r3, #1
    2628:	2b00      	cmp	r3, #0
    262a:	d052      	beq.n	26d2 <UART2_IRQHandler+0xee>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART2Buffer[UART2Count] = LPC_UART2->RBR;
    262c:	4b2d      	ldr	r3, [pc, #180]	; (26e4 <UART2_IRQHandler+0x100>)
    262e:	881b      	ldrh	r3, [r3, #0]
    2630:	b29b      	uxth	r3, r3
    2632:	461a      	mov	r2, r3
    2634:	4b29      	ldr	r3, [pc, #164]	; (26dc <UART2_IRQHandler+0xf8>)
    2636:	781b      	ldrb	r3, [r3, #0]
    2638:	b2d9      	uxtb	r1, r3
    263a:	4b2b      	ldr	r3, [pc, #172]	; (26e8 <UART2_IRQHandler+0x104>)
    263c:	5499      	strb	r1, [r3, r2]
			UART2Count++;
    263e:	4b29      	ldr	r3, [pc, #164]	; (26e4 <UART2_IRQHandler+0x100>)
    2640:	881b      	ldrh	r3, [r3, #0]
    2642:	b29b      	uxth	r3, r3
    2644:	3301      	adds	r3, #1
    2646:	b29a      	uxth	r2, r3
    2648:	4b26      	ldr	r3, [pc, #152]	; (26e4 <UART2_IRQHandler+0x100>)
    264a:	801a      	strh	r2, [r3, #0]
			if (UART2Count >= UART2_BUFFSIZE) {
    264c:	4b25      	ldr	r3, [pc, #148]	; (26e4 <UART2_IRQHandler+0x100>)
    264e:	881b      	ldrh	r3, [r3, #0]
    2650:	b29b      	uxth	r3, r3
    2652:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    2656:	d33c      	bcc.n	26d2 <UART2_IRQHandler+0xee>
				UART2Count = 0; /* buffer overflow */
    2658:	4b22      	ldr	r3, [pc, #136]	; (26e4 <UART2_IRQHandler+0x100>)
    265a:	2200      	movs	r2, #0
    265c:	801a      	strh	r2, [r3, #0]
    265e:	e038      	b.n	26d2 <UART2_IRQHandler+0xee>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2660:	79bb      	ldrb	r3, [r7, #6]
    2662:	2b02      	cmp	r3, #2
    2664:	d119      	bne.n	269a <UART2_IRQHandler+0xb6>
	{
		/* Receive Data Available */
		UART2Buffer[UART2Count] = LPC_UART2->RBR;
    2666:	4b1f      	ldr	r3, [pc, #124]	; (26e4 <UART2_IRQHandler+0x100>)
    2668:	881b      	ldrh	r3, [r3, #0]
    266a:	b29b      	uxth	r3, r3
    266c:	461a      	mov	r2, r3
    266e:	4b1b      	ldr	r3, [pc, #108]	; (26dc <UART2_IRQHandler+0xf8>)
    2670:	781b      	ldrb	r3, [r3, #0]
    2672:	b2d9      	uxtb	r1, r3
    2674:	4b1c      	ldr	r3, [pc, #112]	; (26e8 <UART2_IRQHandler+0x104>)
    2676:	5499      	strb	r1, [r3, r2]
		UART2Count++;
    2678:	4b1a      	ldr	r3, [pc, #104]	; (26e4 <UART2_IRQHandler+0x100>)
    267a:	881b      	ldrh	r3, [r3, #0]
    267c:	b29b      	uxth	r3, r3
    267e:	3301      	adds	r3, #1
    2680:	b29a      	uxth	r2, r3
    2682:	4b18      	ldr	r3, [pc, #96]	; (26e4 <UART2_IRQHandler+0x100>)
    2684:	801a      	strh	r2, [r3, #0]
		if (UART2Count >= UART2_BUFFSIZE) {
    2686:	4b17      	ldr	r3, [pc, #92]	; (26e4 <UART2_IRQHandler+0x100>)
    2688:	881b      	ldrh	r3, [r3, #0]
    268a:	b29b      	uxth	r3, r3
    268c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    2690:	d31f      	bcc.n	26d2 <UART2_IRQHandler+0xee>
			UART2Count = 0; /* buffer overflow */
    2692:	4b14      	ldr	r3, [pc, #80]	; (26e4 <UART2_IRQHandler+0x100>)
    2694:	2200      	movs	r2, #0
    2696:	801a      	strh	r2, [r3, #0]
    2698:	e01b      	b.n	26d2 <UART2_IRQHandler+0xee>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    269a:	79bb      	ldrb	r3, [r7, #6]
    269c:	2b06      	cmp	r3, #6
    269e:	d106      	bne.n	26ae <UART2_IRQHandler+0xca>
	{
		/* Character Time-out indicator */
		UART2Status |= 0x100; /* Bit 9 as the CTI error */
    26a0:	4b0f      	ldr	r3, [pc, #60]	; (26e0 <UART2_IRQHandler+0xfc>)
    26a2:	681b      	ldr	r3, [r3, #0]
    26a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    26a8:	4a0d      	ldr	r2, [pc, #52]	; (26e0 <UART2_IRQHandler+0xfc>)
    26aa:	6013      	str	r3, [r2, #0]
    26ac:	e011      	b.n	26d2 <UART2_IRQHandler+0xee>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    26ae:	79bb      	ldrb	r3, [r7, #6]
    26b0:	2b01      	cmp	r3, #1
    26b2:	d10e      	bne.n	26d2 <UART2_IRQHandler+0xee>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART2->LSR; /* Check status in the LSR to see if
    26b4:	4b09      	ldr	r3, [pc, #36]	; (26dc <UART2_IRQHandler+0xf8>)
    26b6:	7d1b      	ldrb	r3, [r3, #20]
    26b8:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    26ba:	797b      	ldrb	r3, [r7, #5]
    26bc:	f003 0320 	and.w	r3, r3, #32
    26c0:	2b00      	cmp	r3, #0
    26c2:	d003      	beq.n	26cc <UART2_IRQHandler+0xe8>
			UART2TxEmpty = 1;
    26c4:	4b09      	ldr	r3, [pc, #36]	; (26ec <UART2_IRQHandler+0x108>)
    26c6:	2201      	movs	r2, #1
    26c8:	701a      	strb	r2, [r3, #0]
    26ca:	e002      	b.n	26d2 <UART2_IRQHandler+0xee>
		} else {
			UART2TxEmpty = 0;
    26cc:	4b07      	ldr	r3, [pc, #28]	; (26ec <UART2_IRQHandler+0x108>)
    26ce:	2200      	movs	r2, #0
    26d0:	701a      	strb	r2, [r3, #0]
		}
	}
}
    26d2:	370c      	adds	r7, #12
    26d4:	46bd      	mov	sp, r7
    26d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    26da:	4770      	bx	lr
    26dc:	40098000 	.word	0x40098000
    26e0:	10000ee8 	.word	0x10000ee8
    26e4:	1000002c 	.word	0x1000002c
    26e8:	100010fc 	.word	0x100010fc
    26ec:	1000000b 	.word	0x1000000b

000026f0 <UART3_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART3_IRQHandler(void) {
    26f0:	b480      	push	{r7}
    26f2:	b083      	sub	sp, #12
    26f4:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART3->IIR;
    26f6:	4b3b      	ldr	r3, [pc, #236]	; (27e4 <UART3_IRQHandler+0xf4>)
    26f8:	689b      	ldr	r3, [r3, #8]
    26fa:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    26fc:	79bb      	ldrb	r3, [r7, #6]
    26fe:	085b      	lsrs	r3, r3, #1
    2700:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    2702:	79bb      	ldrb	r3, [r7, #6]
    2704:	f003 0307 	and.w	r3, r3, #7
    2708:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    270a:	79bb      	ldrb	r3, [r7, #6]
    270c:	2b03      	cmp	r3, #3
    270e:	d12c      	bne.n	276a <UART3_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART3->LSR;
    2710:	4b34      	ldr	r3, [pc, #208]	; (27e4 <UART3_IRQHandler+0xf4>)
    2712:	7d1b      	ldrb	r3, [r3, #20]
    2714:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2716:	797b      	ldrb	r3, [r7, #5]
    2718:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    271c:	2b00      	cmp	r3, #0
    271e:	d006      	beq.n	272e <UART3_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART3Status = LSRValue;
    2720:	797b      	ldrb	r3, [r7, #5]
    2722:	4a31      	ldr	r2, [pc, #196]	; (27e8 <UART3_IRQHandler+0xf8>)
    2724:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART3->RBR; /* Dummy read on RX to clear
    2726:	4b2f      	ldr	r3, [pc, #188]	; (27e4 <UART3_IRQHandler+0xf4>)
    2728:	781b      	ldrb	r3, [r3, #0]
    272a:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    272c:	e055      	b.n	27da <UART3_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    272e:	797b      	ldrb	r3, [r7, #5]
    2730:	f003 0301 	and.w	r3, r3, #1
    2734:	2b00      	cmp	r3, #0
    2736:	d050      	beq.n	27da <UART3_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART3Buffer[UART3Count] = LPC_UART3->RBR;
    2738:	4b2c      	ldr	r3, [pc, #176]	; (27ec <UART3_IRQHandler+0xfc>)
    273a:	881b      	ldrh	r3, [r3, #0]
    273c:	b29b      	uxth	r3, r3
    273e:	461a      	mov	r2, r3
    2740:	4b28      	ldr	r3, [pc, #160]	; (27e4 <UART3_IRQHandler+0xf4>)
    2742:	781b      	ldrb	r3, [r3, #0]
    2744:	b2d9      	uxtb	r1, r3
    2746:	4b2a      	ldr	r3, [pc, #168]	; (27f0 <UART3_IRQHandler+0x100>)
    2748:	5499      	strb	r1, [r3, r2]
			UART3Count++;
    274a:	4b28      	ldr	r3, [pc, #160]	; (27ec <UART3_IRQHandler+0xfc>)
    274c:	881b      	ldrh	r3, [r3, #0]
    274e:	b29b      	uxth	r3, r3
    2750:	3301      	adds	r3, #1
    2752:	b29a      	uxth	r2, r3
    2754:	4b25      	ldr	r3, [pc, #148]	; (27ec <UART3_IRQHandler+0xfc>)
    2756:	801a      	strh	r2, [r3, #0]
			if (UART3Count == BUFSIZE) {
    2758:	4b24      	ldr	r3, [pc, #144]	; (27ec <UART3_IRQHandler+0xfc>)
    275a:	881b      	ldrh	r3, [r3, #0]
    275c:	b29b      	uxth	r3, r3
    275e:	2bff      	cmp	r3, #255	; 0xff
    2760:	d13b      	bne.n	27da <UART3_IRQHandler+0xea>
				UART3Count = 0; /* buffer overflow */
    2762:	4b22      	ldr	r3, [pc, #136]	; (27ec <UART3_IRQHandler+0xfc>)
    2764:	2200      	movs	r2, #0
    2766:	801a      	strh	r2, [r3, #0]
    2768:	e037      	b.n	27da <UART3_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    276a:	79bb      	ldrb	r3, [r7, #6]
    276c:	2b02      	cmp	r3, #2
    276e:	d118      	bne.n	27a2 <UART3_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART3Buffer[UART3Count] = LPC_UART3->RBR;
    2770:	4b1e      	ldr	r3, [pc, #120]	; (27ec <UART3_IRQHandler+0xfc>)
    2772:	881b      	ldrh	r3, [r3, #0]
    2774:	b29b      	uxth	r3, r3
    2776:	461a      	mov	r2, r3
    2778:	4b1a      	ldr	r3, [pc, #104]	; (27e4 <UART3_IRQHandler+0xf4>)
    277a:	781b      	ldrb	r3, [r3, #0]
    277c:	b2d9      	uxtb	r1, r3
    277e:	4b1c      	ldr	r3, [pc, #112]	; (27f0 <UART3_IRQHandler+0x100>)
    2780:	5499      	strb	r1, [r3, r2]
		UART3Count++;
    2782:	4b1a      	ldr	r3, [pc, #104]	; (27ec <UART3_IRQHandler+0xfc>)
    2784:	881b      	ldrh	r3, [r3, #0]
    2786:	b29b      	uxth	r3, r3
    2788:	3301      	adds	r3, #1
    278a:	b29a      	uxth	r2, r3
    278c:	4b17      	ldr	r3, [pc, #92]	; (27ec <UART3_IRQHandler+0xfc>)
    278e:	801a      	strh	r2, [r3, #0]
		if (UART3Count == BUFSIZE) {
    2790:	4b16      	ldr	r3, [pc, #88]	; (27ec <UART3_IRQHandler+0xfc>)
    2792:	881b      	ldrh	r3, [r3, #0]
    2794:	b29b      	uxth	r3, r3
    2796:	2bff      	cmp	r3, #255	; 0xff
    2798:	d11f      	bne.n	27da <UART3_IRQHandler+0xea>
			UART3Count = 0; /* buffer overflow */
    279a:	4b14      	ldr	r3, [pc, #80]	; (27ec <UART3_IRQHandler+0xfc>)
    279c:	2200      	movs	r2, #0
    279e:	801a      	strh	r2, [r3, #0]
    27a0:	e01b      	b.n	27da <UART3_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    27a2:	79bb      	ldrb	r3, [r7, #6]
    27a4:	2b06      	cmp	r3, #6
    27a6:	d106      	bne.n	27b6 <UART3_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART3Status |= 0x100; /* Bit 9 as the CTI error */
    27a8:	4b0f      	ldr	r3, [pc, #60]	; (27e8 <UART3_IRQHandler+0xf8>)
    27aa:	681b      	ldr	r3, [r3, #0]
    27ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    27b0:	4a0d      	ldr	r2, [pc, #52]	; (27e8 <UART3_IRQHandler+0xf8>)
    27b2:	6013      	str	r3, [r2, #0]
    27b4:	e011      	b.n	27da <UART3_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    27b6:	79bb      	ldrb	r3, [r7, #6]
    27b8:	2b01      	cmp	r3, #1
    27ba:	d10e      	bne.n	27da <UART3_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART3->LSR; /* Check status in the LSR to see if
    27bc:	4b09      	ldr	r3, [pc, #36]	; (27e4 <UART3_IRQHandler+0xf4>)
    27be:	7d1b      	ldrb	r3, [r3, #20]
    27c0:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    27c2:	797b      	ldrb	r3, [r7, #5]
    27c4:	f003 0320 	and.w	r3, r3, #32
    27c8:	2b00      	cmp	r3, #0
    27ca:	d003      	beq.n	27d4 <UART3_IRQHandler+0xe4>
			UART3TxEmpty = 1;
    27cc:	4b09      	ldr	r3, [pc, #36]	; (27f4 <UART3_IRQHandler+0x104>)
    27ce:	2201      	movs	r2, #1
    27d0:	701a      	strb	r2, [r3, #0]
    27d2:	e002      	b.n	27da <UART3_IRQHandler+0xea>
		} else {
			UART3TxEmpty = 0;
    27d4:	4b07      	ldr	r3, [pc, #28]	; (27f4 <UART3_IRQHandler+0x104>)
    27d6:	2200      	movs	r2, #0
    27d8:	701a      	strb	r2, [r3, #0]
		}
	}
}
    27da:	370c      	adds	r7, #12
    27dc:	46bd      	mov	sp, r7
    27de:	f85d 7b04 	ldr.w	r7, [sp], #4
    27e2:	4770      	bx	lr
    27e4:	4009c000 	.word	0x4009c000
    27e8:	10000ef0 	.word	0x10000ef0
    27ec:	1000002e 	.word	0x1000002e
    27f0:	10000ffc 	.word	0x10000ffc
    27f4:	1000000a 	.word	0x1000000a

000027f8 <UARTInit>:
 ** Returned value:		true or false, return false only if the
 **						interrupt handler can't be installed to the
 **						VIC table
 **
 *****************************************************************************/
uint32_t UARTInit(uint32_t PortNum, uint32_t baudrate) {
    27f8:	b580      	push	{r7, lr}
    27fa:	b086      	sub	sp, #24
    27fc:	af00      	add	r7, sp, #0
    27fe:	6078      	str	r0, [r7, #4]
    2800:	6039      	str	r1, [r7, #0]
	uint32_t Fdiv;
	uint32_t pclkdiv, pclk;
	if (PortNum == 0) {
    2802:	687b      	ldr	r3, [r7, #4]
    2804:	2b00      	cmp	r3, #0
    2806:	d15b      	bne.n	28c0 <UARTInit+0xc8>
		LPC_PINCON->PINSEL0 &= ~0x000000F0;
    2808:	4aa3      	ldr	r2, [pc, #652]	; (2a98 <UARTInit+0x2a0>)
    280a:	4ba3      	ldr	r3, [pc, #652]	; (2a98 <UARTInit+0x2a0>)
    280c:	681b      	ldr	r3, [r3, #0]
    280e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2812:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00000050; /* RxD0 is P0.3 and TxD0 is P0.2 */
    2814:	4aa0      	ldr	r2, [pc, #640]	; (2a98 <UARTInit+0x2a0>)
    2816:	4ba0      	ldr	r3, [pc, #640]	; (2a98 <UARTInit+0x2a0>)
    2818:	681b      	ldr	r3, [r3, #0]
    281a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    281e:	6013      	str	r3, [r2, #0]
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART0 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
    2820:	4b9e      	ldr	r3, [pc, #632]	; (2a9c <UARTInit+0x2a4>)
    2822:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2826:	099b      	lsrs	r3, r3, #6
    2828:	f003 0303 	and.w	r3, r3, #3
    282c:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    282e:	693b      	ldr	r3, [r7, #16]
    2830:	2b02      	cmp	r3, #2
    2832:	d00c      	beq.n	284e <UARTInit+0x56>
    2834:	2b03      	cmp	r3, #3
    2836:	d00f      	beq.n	2858 <UARTInit+0x60>
    2838:	2b01      	cmp	r3, #1
    283a:	d004      	beq.n	2846 <UARTInit+0x4e>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    283c:	4b98      	ldr	r3, [pc, #608]	; (2aa0 <UARTInit+0x2a8>)
    283e:	681b      	ldr	r3, [r3, #0]
    2840:	089b      	lsrs	r3, r3, #2
    2842:	617b      	str	r3, [r7, #20]
			break;
    2844:	e00d      	b.n	2862 <UARTInit+0x6a>
		case 0x01:
			pclk = SystemCoreClock;
    2846:	4b96      	ldr	r3, [pc, #600]	; (2aa0 <UARTInit+0x2a8>)
    2848:	681b      	ldr	r3, [r3, #0]
    284a:	617b      	str	r3, [r7, #20]
			break;
    284c:	e009      	b.n	2862 <UARTInit+0x6a>
		case 0x02:
			pclk = SystemCoreClock / 2;
    284e:	4b94      	ldr	r3, [pc, #592]	; (2aa0 <UARTInit+0x2a8>)
    2850:	681b      	ldr	r3, [r3, #0]
    2852:	085b      	lsrs	r3, r3, #1
    2854:	617b      	str	r3, [r7, #20]
			break;
    2856:	e004      	b.n	2862 <UARTInit+0x6a>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2858:	4b91      	ldr	r3, [pc, #580]	; (2aa0 <UARTInit+0x2a8>)
    285a:	681b      	ldr	r3, [r3, #0]
    285c:	08db      	lsrs	r3, r3, #3
    285e:	617b      	str	r3, [r7, #20]
			break;
    2860:	bf00      	nop
		}
		LPC_UART0->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2862:	4b90      	ldr	r3, [pc, #576]	; (2aa4 <UARTInit+0x2ac>)
    2864:	2283      	movs	r2, #131	; 0x83
    2866:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2868:	697b      	ldr	r3, [r7, #20]
    286a:	091a      	lsrs	r2, r3, #4
    286c:	683b      	ldr	r3, [r7, #0]
    286e:	fbb2 f3f3 	udiv	r3, r2, r3
    2872:	60fb      	str	r3, [r7, #12]
		if (baudrate == 115200){
    2874:	683b      	ldr	r3, [r7, #0]
    2876:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    287a:	d10a      	bne.n	2892 <UARTInit+0x9a>
			LPC_UART0->DLM = 0;
    287c:	4b89      	ldr	r3, [pc, #548]	; (2aa4 <UARTInit+0x2ac>)
    287e:	2200      	movs	r2, #0
    2880:	711a      	strb	r2, [r3, #4]
			LPC_UART0->DLL = 9;
    2882:	4b88      	ldr	r3, [pc, #544]	; (2aa4 <UARTInit+0x2ac>)
    2884:	2209      	movs	r2, #9
    2886:	701a      	strb	r2, [r3, #0]
			LPC_UART0->FDR=1<<0|1<<5;
    2888:	4b86      	ldr	r3, [pc, #536]	; (2aa4 <UARTInit+0x2ac>)
    288a:	2221      	movs	r2, #33	; 0x21
    288c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    2890:	e008      	b.n	28a4 <UARTInit+0xac>
		}else{
			LPC_UART0->DLM = Fdiv / 256;
    2892:	4a84      	ldr	r2, [pc, #528]	; (2aa4 <UARTInit+0x2ac>)
    2894:	68fb      	ldr	r3, [r7, #12]
    2896:	0a1b      	lsrs	r3, r3, #8
    2898:	b2db      	uxtb	r3, r3
    289a:	7113      	strb	r3, [r2, #4]
			LPC_UART0->DLL = Fdiv % 256;
    289c:	4b81      	ldr	r3, [pc, #516]	; (2aa4 <UARTInit+0x2ac>)
    289e:	68fa      	ldr	r2, [r7, #12]
    28a0:	b2d2      	uxtb	r2, r2
    28a2:	701a      	strb	r2, [r3, #0]
		}
		LPC_UART0->LCR = 0x03; /* DLAB = 0 */
    28a4:	4b7f      	ldr	r3, [pc, #508]	; (2aa4 <UARTInit+0x2ac>)
    28a6:	2203      	movs	r2, #3
    28a8:	731a      	strb	r2, [r3, #12]
		LPC_UART0->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    28aa:	4b7e      	ldr	r3, [pc, #504]	; (2aa4 <UARTInit+0x2ac>)
    28ac:	2207      	movs	r2, #7
    28ae:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART0_IRQn);
    28b0:	2005      	movs	r0, #5
    28b2:	f7ff fd5d 	bl	2370 <NVIC_EnableIRQ>
		LPC_UART0->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART0 interrupt */
    28b6:	4b7b      	ldr	r3, [pc, #492]	; (2aa4 <UARTInit+0x2ac>)
    28b8:	2207      	movs	r2, #7
    28ba:	605a      	str	r2, [r3, #4]
		return (TRUE);
    28bc:	2301      	movs	r3, #1
    28be:	e11d      	b.n	2afc <UARTInit+0x304>
	} else if (PortNum == 1) {
    28c0:	687b      	ldr	r3, [r7, #4]
    28c2:	2b01      	cmp	r3, #1
    28c4:	d157      	bne.n	2976 <UARTInit+0x17e>
		NVIC_DisableIRQ(UART1_IRQn);
    28c6:	2006      	movs	r0, #6
    28c8:	f7ff fd6a 	bl	23a0 <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 4;
    28cc:	4a73      	ldr	r2, [pc, #460]	; (2a9c <UARTInit+0x2a4>)
    28ce:	4b73      	ldr	r3, [pc, #460]	; (2a9c <UARTInit+0x2a4>)
    28d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    28d4:	f043 0310 	orr.w	r3, r3, #16
    28d8:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL4 &= ~0x0000000F;
    28dc:	4a6e      	ldr	r2, [pc, #440]	; (2a98 <UARTInit+0x2a0>)
    28de:	4b6e      	ldr	r3, [pc, #440]	; (2a98 <UARTInit+0x2a0>)
    28e0:	691b      	ldr	r3, [r3, #16]
    28e2:	f023 030f 	bic.w	r3, r3, #15
    28e6:	6113      	str	r3, [r2, #16]
		LPC_PINCON->PINSEL4 |= 0x0000000A; /* Enable RxD1 P0.16, TxD1 P0.15 */
    28e8:	4a6b      	ldr	r2, [pc, #428]	; (2a98 <UARTInit+0x2a0>)
    28ea:	4b6b      	ldr	r3, [pc, #428]	; (2a98 <UARTInit+0x2a0>)
    28ec:	691b      	ldr	r3, [r3, #16]
    28ee:	f043 030a 	orr.w	r3, r3, #10
    28f2:	6113      	str	r3, [r2, #16]

		//| 1<<25; //Enable PCUART1
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 8,9 are for UART1 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
    28f4:	4b69      	ldr	r3, [pc, #420]	; (2a9c <UARTInit+0x2a4>)
    28f6:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    28fa:	0a1b      	lsrs	r3, r3, #8
    28fc:	f003 0303 	and.w	r3, r3, #3
    2900:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2902:	693b      	ldr	r3, [r7, #16]
    2904:	2b02      	cmp	r3, #2
    2906:	d00c      	beq.n	2922 <UARTInit+0x12a>
    2908:	2b03      	cmp	r3, #3
    290a:	d00f      	beq.n	292c <UARTInit+0x134>
    290c:	2b01      	cmp	r3, #1
    290e:	d004      	beq.n	291a <UARTInit+0x122>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2910:	4b63      	ldr	r3, [pc, #396]	; (2aa0 <UARTInit+0x2a8>)
    2912:	681b      	ldr	r3, [r3, #0]
    2914:	089b      	lsrs	r3, r3, #2
    2916:	617b      	str	r3, [r7, #20]
			break;
    2918:	e00d      	b.n	2936 <UARTInit+0x13e>
		case 0x01:
			pclk = SystemCoreClock;
    291a:	4b61      	ldr	r3, [pc, #388]	; (2aa0 <UARTInit+0x2a8>)
    291c:	681b      	ldr	r3, [r3, #0]
    291e:	617b      	str	r3, [r7, #20]
			break;
    2920:	e009      	b.n	2936 <UARTInit+0x13e>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2922:	4b5f      	ldr	r3, [pc, #380]	; (2aa0 <UARTInit+0x2a8>)
    2924:	681b      	ldr	r3, [r3, #0]
    2926:	085b      	lsrs	r3, r3, #1
    2928:	617b      	str	r3, [r7, #20]
			break;
    292a:	e004      	b.n	2936 <UARTInit+0x13e>
		case 0x03:
			pclk = SystemCoreClock / 8;
    292c:	4b5c      	ldr	r3, [pc, #368]	; (2aa0 <UARTInit+0x2a8>)
    292e:	681b      	ldr	r3, [r3, #0]
    2930:	08db      	lsrs	r3, r3, #3
    2932:	617b      	str	r3, [r7, #20]
			break;
    2934:	bf00      	nop
		}
		LPC_UART1->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2936:	4b5c      	ldr	r3, [pc, #368]	; (2aa8 <UARTInit+0x2b0>)
    2938:	2283      	movs	r2, #131	; 0x83
    293a:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    293c:	697b      	ldr	r3, [r7, #20]
    293e:	091a      	lsrs	r2, r3, #4
    2940:	683b      	ldr	r3, [r7, #0]
    2942:	fbb2 f3f3 	udiv	r3, r2, r3
    2946:	60fb      	str	r3, [r7, #12]
		LPC_UART1->DLM = Fdiv / 256;
    2948:	4a57      	ldr	r2, [pc, #348]	; (2aa8 <UARTInit+0x2b0>)
    294a:	68fb      	ldr	r3, [r7, #12]
    294c:	0a1b      	lsrs	r3, r3, #8
    294e:	b2db      	uxtb	r3, r3
    2950:	7113      	strb	r3, [r2, #4]
		LPC_UART1->DLL = Fdiv % 256;
    2952:	4b55      	ldr	r3, [pc, #340]	; (2aa8 <UARTInit+0x2b0>)
    2954:	68fa      	ldr	r2, [r7, #12]
    2956:	b2d2      	uxtb	r2, r2
    2958:	701a      	strb	r2, [r3, #0]
		LPC_UART1->LCR = 0x03; /* DLAB = 0 */
    295a:	4b53      	ldr	r3, [pc, #332]	; (2aa8 <UARTInit+0x2b0>)
    295c:	2203      	movs	r2, #3
    295e:	731a      	strb	r2, [r3, #12]
		LPC_UART1->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2960:	4b51      	ldr	r3, [pc, #324]	; (2aa8 <UARTInit+0x2b0>)
    2962:	2207      	movs	r2, #7
    2964:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART1_IRQn);
    2966:	2006      	movs	r0, #6
    2968:	f7ff fd02 	bl	2370 <NVIC_EnableIRQ>
		LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART1 interrupt */
    296c:	4b4e      	ldr	r3, [pc, #312]	; (2aa8 <UARTInit+0x2b0>)
    296e:	2207      	movs	r2, #7
    2970:	605a      	str	r2, [r3, #4]
		return (TRUE);
    2972:	2301      	movs	r3, #1
    2974:	e0c2      	b.n	2afc <UARTInit+0x304>
	} else if (PortNum == 2) {
    2976:	687b      	ldr	r3, [r7, #4]
    2978:	2b02      	cmp	r3, #2
    297a:	d157      	bne.n	2a2c <UARTInit+0x234>
		NVIC_DisableIRQ(UART2_IRQn);
    297c:	2007      	movs	r0, #7
    297e:	f7ff fd0f 	bl	23a0 <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 24; // UART 2 PCONP bit 24
    2982:	4a46      	ldr	r2, [pc, #280]	; (2a9c <UARTInit+0x2a4>)
    2984:	4b45      	ldr	r3, [pc, #276]	; (2a9c <UARTInit+0x2a4>)
    2986:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    298a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    298e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL0 &= ~0x00F00000;
    2992:	4a41      	ldr	r2, [pc, #260]	; (2a98 <UARTInit+0x2a0>)
    2994:	4b40      	ldr	r3, [pc, #256]	; (2a98 <UARTInit+0x2a0>)
    2996:	681b      	ldr	r3, [r3, #0]
    2998:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    299c:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00500000; /* Enable TxD2 on 0.10, RxD2 on 0.11 */
    299e:	4a3e      	ldr	r2, [pc, #248]	; (2a98 <UARTInit+0x2a0>)
    29a0:	4b3d      	ldr	r3, [pc, #244]	; (2a98 <UARTInit+0x2a0>)
    29a2:	681b      	ldr	r3, [r3, #0]
    29a4:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
    29a8:	6013      	str	r3, [r2, #0]
		pclkdiv = (LPC_SC->PCLKSEL0 >> 16) & 0x03;
    29aa:	4b3c      	ldr	r3, [pc, #240]	; (2a9c <UARTInit+0x2a4>)
    29ac:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    29b0:	0c1b      	lsrs	r3, r3, #16
    29b2:	f003 0303 	and.w	r3, r3, #3
    29b6:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    29b8:	693b      	ldr	r3, [r7, #16]
    29ba:	2b02      	cmp	r3, #2
    29bc:	d00c      	beq.n	29d8 <UARTInit+0x1e0>
    29be:	2b03      	cmp	r3, #3
    29c0:	d00f      	beq.n	29e2 <UARTInit+0x1ea>
    29c2:	2b01      	cmp	r3, #1
    29c4:	d004      	beq.n	29d0 <UARTInit+0x1d8>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    29c6:	4b36      	ldr	r3, [pc, #216]	; (2aa0 <UARTInit+0x2a8>)
    29c8:	681b      	ldr	r3, [r3, #0]
    29ca:	089b      	lsrs	r3, r3, #2
    29cc:	617b      	str	r3, [r7, #20]
			break;
    29ce:	e00d      	b.n	29ec <UARTInit+0x1f4>
		case 0x01:
			pclk = SystemCoreClock;
    29d0:	4b33      	ldr	r3, [pc, #204]	; (2aa0 <UARTInit+0x2a8>)
    29d2:	681b      	ldr	r3, [r3, #0]
    29d4:	617b      	str	r3, [r7, #20]
			break;
    29d6:	e009      	b.n	29ec <UARTInit+0x1f4>
		case 0x02:
			pclk = SystemCoreClock / 2;
    29d8:	4b31      	ldr	r3, [pc, #196]	; (2aa0 <UARTInit+0x2a8>)
    29da:	681b      	ldr	r3, [r3, #0]
    29dc:	085b      	lsrs	r3, r3, #1
    29de:	617b      	str	r3, [r7, #20]
			break;
    29e0:	e004      	b.n	29ec <UARTInit+0x1f4>
		case 0x03:
			pclk = SystemCoreClock / 8;
    29e2:	4b2f      	ldr	r3, [pc, #188]	; (2aa0 <UARTInit+0x2a8>)
    29e4:	681b      	ldr	r3, [r3, #0]
    29e6:	08db      	lsrs	r3, r3, #3
    29e8:	617b      	str	r3, [r7, #20]
			break;
    29ea:	bf00      	nop
		}
		LPC_UART2->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    29ec:	4b2f      	ldr	r3, [pc, #188]	; (2aac <UARTInit+0x2b4>)
    29ee:	2283      	movs	r2, #131	; 0x83
    29f0:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    29f2:	697b      	ldr	r3, [r7, #20]
    29f4:	091a      	lsrs	r2, r3, #4
    29f6:	683b      	ldr	r3, [r7, #0]
    29f8:	fbb2 f3f3 	udiv	r3, r2, r3
    29fc:	60fb      	str	r3, [r7, #12]
		LPC_UART2->DLM = Fdiv / 256;
    29fe:	4a2b      	ldr	r2, [pc, #172]	; (2aac <UARTInit+0x2b4>)
    2a00:	68fb      	ldr	r3, [r7, #12]
    2a02:	0a1b      	lsrs	r3, r3, #8
    2a04:	b2db      	uxtb	r3, r3
    2a06:	7113      	strb	r3, [r2, #4]
		LPC_UART2->DLL = Fdiv % 256;
    2a08:	4b28      	ldr	r3, [pc, #160]	; (2aac <UARTInit+0x2b4>)
    2a0a:	68fa      	ldr	r2, [r7, #12]
    2a0c:	b2d2      	uxtb	r2, r2
    2a0e:	701a      	strb	r2, [r3, #0]
		LPC_UART2->LCR = 0x03; /* DLAB = 0 */
    2a10:	4b26      	ldr	r3, [pc, #152]	; (2aac <UARTInit+0x2b4>)
    2a12:	2203      	movs	r2, #3
    2a14:	731a      	strb	r2, [r3, #12]
		LPC_UART2->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2a16:	4b25      	ldr	r3, [pc, #148]	; (2aac <UARTInit+0x2b4>)
    2a18:	2207      	movs	r2, #7
    2a1a:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART2_IRQn);
    2a1c:	2007      	movs	r0, #7
    2a1e:	f7ff fca7 	bl	2370 <NVIC_EnableIRQ>
		LPC_UART2->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART2 interrupt */
    2a22:	4b22      	ldr	r3, [pc, #136]	; (2aac <UARTInit+0x2b4>)
    2a24:	2207      	movs	r2, #7
    2a26:	605a      	str	r2, [r3, #4]
		//LPC_UART2->IER = IER_THRE; /* Polling */
		//LPC_UART2->TER = (1 << 7);
		return (TRUE);
    2a28:	2301      	movs	r3, #1
    2a2a:	e067      	b.n	2afc <UARTInit+0x304>
	} else if (PortNum == 3) {
    2a2c:	687b      	ldr	r3, [r7, #4]
    2a2e:	2b03      	cmp	r3, #3
    2a30:	d163      	bne.n	2afa <UARTInit+0x302>
		LPC_PINCON->PINSEL0 &= ~0x0000000F;
    2a32:	4a19      	ldr	r2, [pc, #100]	; (2a98 <UARTInit+0x2a0>)
    2a34:	4b18      	ldr	r3, [pc, #96]	; (2a98 <UARTInit+0x2a0>)
    2a36:	681b      	ldr	r3, [r3, #0]
    2a38:	f023 030f 	bic.w	r3, r3, #15
    2a3c:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x0000000A; /* RxD3 is P0.1 and TxD3 is P0.0 */
    2a3e:	4a16      	ldr	r2, [pc, #88]	; (2a98 <UARTInit+0x2a0>)
    2a40:	4b15      	ldr	r3, [pc, #84]	; (2a98 <UARTInit+0x2a0>)
    2a42:	681b      	ldr	r3, [r3, #0]
    2a44:	f043 030a 	orr.w	r3, r3, #10
    2a48:	6013      	str	r3, [r2, #0]
		LPC_SC->PCONP |= 1 << 4 | 1 << 25; //Enable PCUART1
    2a4a:	4a14      	ldr	r2, [pc, #80]	; (2a9c <UARTInit+0x2a4>)
    2a4c:	4b13      	ldr	r3, [pc, #76]	; (2a9c <UARTInit+0x2a4>)
    2a4e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2a52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    2a56:	f043 0310 	orr.w	r3, r3, #16
    2a5a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART3 */
		pclkdiv = (LPC_SC->PCLKSEL1 >> 18) & 0x03;
    2a5e:	4b0f      	ldr	r3, [pc, #60]	; (2a9c <UARTInit+0x2a4>)
    2a60:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
    2a64:	0c9b      	lsrs	r3, r3, #18
    2a66:	f003 0303 	and.w	r3, r3, #3
    2a6a:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2a6c:	693b      	ldr	r3, [r7, #16]
    2a6e:	2b02      	cmp	r3, #2
    2a70:	d00c      	beq.n	2a8c <UARTInit+0x294>
    2a72:	2b03      	cmp	r3, #3
    2a74:	d01c      	beq.n	2ab0 <UARTInit+0x2b8>
    2a76:	2b01      	cmp	r3, #1
    2a78:	d004      	beq.n	2a84 <UARTInit+0x28c>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2a7a:	4b09      	ldr	r3, [pc, #36]	; (2aa0 <UARTInit+0x2a8>)
    2a7c:	681b      	ldr	r3, [r3, #0]
    2a7e:	089b      	lsrs	r3, r3, #2
    2a80:	617b      	str	r3, [r7, #20]
			break;
    2a82:	e01a      	b.n	2aba <UARTInit+0x2c2>
		case 0x01:
			pclk = SystemCoreClock;
    2a84:	4b06      	ldr	r3, [pc, #24]	; (2aa0 <UARTInit+0x2a8>)
    2a86:	681b      	ldr	r3, [r3, #0]
    2a88:	617b      	str	r3, [r7, #20]
			break;
    2a8a:	e016      	b.n	2aba <UARTInit+0x2c2>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2a8c:	4b04      	ldr	r3, [pc, #16]	; (2aa0 <UARTInit+0x2a8>)
    2a8e:	681b      	ldr	r3, [r3, #0]
    2a90:	085b      	lsrs	r3, r3, #1
    2a92:	617b      	str	r3, [r7, #20]
			break;
    2a94:	e011      	b.n	2aba <UARTInit+0x2c2>
    2a96:	bf00      	nop
    2a98:	4002c000 	.word	0x4002c000
    2a9c:	400fc000 	.word	0x400fc000
    2aa0:	1000000c 	.word	0x1000000c
    2aa4:	4000c000 	.word	0x4000c000
    2aa8:	40010000 	.word	0x40010000
    2aac:	40098000 	.word	0x40098000
		case 0x03:
			pclk = SystemCoreClock / 8;
    2ab0:	4b14      	ldr	r3, [pc, #80]	; (2b04 <UARTInit+0x30c>)
    2ab2:	681b      	ldr	r3, [r3, #0]
    2ab4:	08db      	lsrs	r3, r3, #3
    2ab6:	617b      	str	r3, [r7, #20]
			break;
    2ab8:	bf00      	nop
		}
		LPC_UART3->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2aba:	4b13      	ldr	r3, [pc, #76]	; (2b08 <UARTInit+0x310>)
    2abc:	2283      	movs	r2, #131	; 0x83
    2abe:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2ac0:	697b      	ldr	r3, [r7, #20]
    2ac2:	091a      	lsrs	r2, r3, #4
    2ac4:	683b      	ldr	r3, [r7, #0]
    2ac6:	fbb2 f3f3 	udiv	r3, r2, r3
    2aca:	60fb      	str	r3, [r7, #12]
		LPC_UART3->DLM = Fdiv / 256;
    2acc:	4a0e      	ldr	r2, [pc, #56]	; (2b08 <UARTInit+0x310>)
    2ace:	68fb      	ldr	r3, [r7, #12]
    2ad0:	0a1b      	lsrs	r3, r3, #8
    2ad2:	b2db      	uxtb	r3, r3
    2ad4:	7113      	strb	r3, [r2, #4]
		LPC_UART3->DLL = Fdiv % 256;
    2ad6:	4b0c      	ldr	r3, [pc, #48]	; (2b08 <UARTInit+0x310>)
    2ad8:	68fa      	ldr	r2, [r7, #12]
    2ada:	b2d2      	uxtb	r2, r2
    2adc:	701a      	strb	r2, [r3, #0]
		LPC_UART3->LCR = 0x03; /* DLAB = 0 */
    2ade:	4b0a      	ldr	r3, [pc, #40]	; (2b08 <UARTInit+0x310>)
    2ae0:	2203      	movs	r2, #3
    2ae2:	731a      	strb	r2, [r3, #12]
		LPC_UART3->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2ae4:	4b08      	ldr	r3, [pc, #32]	; (2b08 <UARTInit+0x310>)
    2ae6:	2207      	movs	r2, #7
    2ae8:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART3_IRQn);
    2aea:	2008      	movs	r0, #8
    2aec:	f7ff fc40 	bl	2370 <NVIC_EnableIRQ>
		LPC_UART3->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART3 interrupt */
    2af0:	4b05      	ldr	r3, [pc, #20]	; (2b08 <UARTInit+0x310>)
    2af2:	2207      	movs	r2, #7
    2af4:	605a      	str	r2, [r3, #4]
		return (TRUE);
    2af6:	2301      	movs	r3, #1
    2af8:	e000      	b.n	2afc <UARTInit+0x304>
	}
	return (FALSE);
    2afa:	2300      	movs	r3, #0
}
    2afc:	4618      	mov	r0, r3
    2afe:	3718      	adds	r7, #24
    2b00:	46bd      	mov	sp, r7
    2b02:	bd80      	pop	{r7, pc}
    2b04:	1000000c 	.word	0x1000000c
    2b08:	4009c000 	.word	0x4009c000

00002b0c <UARTSend>:
 **
 ** parameters:			portNum, buffer pointer, and data length
 ** Returned value:		None
 **
 *****************************************************************************/
void UARTSend(uint32_t portNum, uint8_t *buffer, uint32_t Length) {
    2b0c:	b480      	push	{r7}
    2b0e:	b087      	sub	sp, #28
    2b10:	af00      	add	r7, sp, #0
    2b12:	60f8      	str	r0, [r7, #12]
    2b14:	60b9      	str	r1, [r7, #8]
    2b16:	607a      	str	r2, [r7, #4]
	uint8_t *BufferPtr = buffer;
    2b18:	68bb      	ldr	r3, [r7, #8]
    2b1a:	613b      	str	r3, [r7, #16]
	int index = 0;
    2b1c:	2300      	movs	r3, #0
    2b1e:	617b      	str	r3, [r7, #20]
	if (portNum == 0) {
    2b20:	68fb      	ldr	r3, [r7, #12]
    2b22:	2b00      	cmp	r3, #0
    2b24:	d11b      	bne.n	2b5e <UARTSend+0x52>
		while (Length != 0) {
    2b26:	e016      	b.n	2b56 <UARTSend+0x4a>
			/* THRE status, contain valid data */
			while (!(UART0TxEmpty & 0x01));
    2b28:	bf00      	nop
    2b2a:	4b3e      	ldr	r3, [pc, #248]	; (2c24 <UARTSend+0x118>)
    2b2c:	781b      	ldrb	r3, [r3, #0]
    2b2e:	b2db      	uxtb	r3, r3
    2b30:	f003 0301 	and.w	r3, r3, #1
    2b34:	2b00      	cmp	r3, #0
    2b36:	d0f8      	beq.n	2b2a <UARTSend+0x1e>
			LPC_UART0->THR = BufferPtr[index];
    2b38:	493b      	ldr	r1, [pc, #236]	; (2c28 <UARTSend+0x11c>)
    2b3a:	697b      	ldr	r3, [r7, #20]
    2b3c:	693a      	ldr	r2, [r7, #16]
    2b3e:	4413      	add	r3, r2
    2b40:	781b      	ldrb	r3, [r3, #0]
    2b42:	700b      	strb	r3, [r1, #0]
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
    2b44:	4b37      	ldr	r3, [pc, #220]	; (2c24 <UARTSend+0x118>)
    2b46:	2200      	movs	r2, #0
    2b48:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    2b4a:	697b      	ldr	r3, [r7, #20]
    2b4c:	3301      	adds	r3, #1
    2b4e:	617b      	str	r3, [r7, #20]
			Length--;
    2b50:	687b      	ldr	r3, [r7, #4]
    2b52:	3b01      	subs	r3, #1
    2b54:	607b      	str	r3, [r7, #4]
 *****************************************************************************/
void UARTSend(uint32_t portNum, uint8_t *buffer, uint32_t Length) {
	uint8_t *BufferPtr = buffer;
	int index = 0;
	if (portNum == 0) {
		while (Length != 0) {
    2b56:	687b      	ldr	r3, [r7, #4]
    2b58:	2b00      	cmp	r3, #0
    2b5a:	d1e5      	bne.n	2b28 <UARTSend+0x1c>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    2b5c:	e05c      	b.n	2c18 <UARTSend+0x10c>
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
    2b5e:	68fb      	ldr	r3, [r7, #12]
    2b60:	2b01      	cmp	r3, #1
    2b62:	d11b      	bne.n	2b9c <UARTSend+0x90>
		while (Length != 0) {
    2b64:	e016      	b.n	2b94 <UARTSend+0x88>
			/* THRE status, contain valid data */
			while (!(UART1TxEmpty & 0x01));
    2b66:	bf00      	nop
    2b68:	4b30      	ldr	r3, [pc, #192]	; (2c2c <UARTSend+0x120>)
    2b6a:	781b      	ldrb	r3, [r3, #0]
    2b6c:	b2db      	uxtb	r3, r3
    2b6e:	f003 0301 	and.w	r3, r3, #1
    2b72:	2b00      	cmp	r3, #0
    2b74:	d0f8      	beq.n	2b68 <UARTSend+0x5c>
			LPC_UART1->THR = BufferPtr[index];
    2b76:	492e      	ldr	r1, [pc, #184]	; (2c30 <UARTSend+0x124>)
    2b78:	697b      	ldr	r3, [r7, #20]
    2b7a:	693a      	ldr	r2, [r7, #16]
    2b7c:	4413      	add	r3, r2
    2b7e:	781b      	ldrb	r3, [r3, #0]
    2b80:	700b      	strb	r3, [r1, #0]
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
    2b82:	4b2a      	ldr	r3, [pc, #168]	; (2c2c <UARTSend+0x120>)
    2b84:	2200      	movs	r2, #0
    2b86:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    2b88:	697b      	ldr	r3, [r7, #20]
    2b8a:	3301      	adds	r3, #1
    2b8c:	617b      	str	r3, [r7, #20]
			Length--;
    2b8e:	687b      	ldr	r3, [r7, #4]
    2b90:	3b01      	subs	r3, #1
    2b92:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
		while (Length != 0) {
    2b94:	687b      	ldr	r3, [r7, #4]
    2b96:	2b00      	cmp	r3, #0
    2b98:	d1e5      	bne.n	2b66 <UARTSend+0x5a>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    2b9a:	e03d      	b.n	2c18 <UARTSend+0x10c>
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
    2b9c:	68fb      	ldr	r3, [r7, #12]
    2b9e:	2b02      	cmp	r3, #2
    2ba0:	d11b      	bne.n	2bda <UARTSend+0xce>
		while (Length != 0) {
    2ba2:	e016      	b.n	2bd2 <UARTSend+0xc6>
			/* THRE status, contain valid data */
			while (!(UART2TxEmpty & 0x01));
    2ba4:	bf00      	nop
    2ba6:	4b23      	ldr	r3, [pc, #140]	; (2c34 <UARTSend+0x128>)
    2ba8:	781b      	ldrb	r3, [r3, #0]
    2baa:	b2db      	uxtb	r3, r3
    2bac:	f003 0301 	and.w	r3, r3, #1
    2bb0:	2b00      	cmp	r3, #0
    2bb2:	d0f8      	beq.n	2ba6 <UARTSend+0x9a>
			LPC_UART2->THR = BufferPtr[index];
    2bb4:	4920      	ldr	r1, [pc, #128]	; (2c38 <UARTSend+0x12c>)
    2bb6:	697b      	ldr	r3, [r7, #20]
    2bb8:	693a      	ldr	r2, [r7, #16]
    2bba:	4413      	add	r3, r2
    2bbc:	781b      	ldrb	r3, [r3, #0]
    2bbe:	700b      	strb	r3, [r1, #0]
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
    2bc0:	4b1c      	ldr	r3, [pc, #112]	; (2c34 <UARTSend+0x128>)
    2bc2:	2200      	movs	r2, #0
    2bc4:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    2bc6:	697b      	ldr	r3, [r7, #20]
    2bc8:	3301      	adds	r3, #1
    2bca:	617b      	str	r3, [r7, #20]
			Length--;
    2bcc:	687b      	ldr	r3, [r7, #4]
    2bce:	3b01      	subs	r3, #1
    2bd0:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
		while (Length != 0) {
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	2b00      	cmp	r3, #0
    2bd6:	d1e5      	bne.n	2ba4 <UARTSend+0x98>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    2bd8:	e01e      	b.n	2c18 <UARTSend+0x10c>
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
    2bda:	68fb      	ldr	r3, [r7, #12]
    2bdc:	2b03      	cmp	r3, #3
    2bde:	d11a      	bne.n	2c16 <UARTSend+0x10a>
		while (Length != 0) {
    2be0:	e016      	b.n	2c10 <UARTSend+0x104>
			/* THRE status, contain valid data */
			while (!(UART3TxEmpty & 0x01));
    2be2:	bf00      	nop
    2be4:	4b15      	ldr	r3, [pc, #84]	; (2c3c <UARTSend+0x130>)
    2be6:	781b      	ldrb	r3, [r3, #0]
    2be8:	b2db      	uxtb	r3, r3
    2bea:	f003 0301 	and.w	r3, r3, #1
    2bee:	2b00      	cmp	r3, #0
    2bf0:	d0f8      	beq.n	2be4 <UARTSend+0xd8>
			LPC_UART3->THR = BufferPtr[index];
    2bf2:	4913      	ldr	r1, [pc, #76]	; (2c40 <UARTSend+0x134>)
    2bf4:	697b      	ldr	r3, [r7, #20]
    2bf6:	693a      	ldr	r2, [r7, #16]
    2bf8:	4413      	add	r3, r2
    2bfa:	781b      	ldrb	r3, [r3, #0]
    2bfc:	700b      	strb	r3, [r1, #0]
			UART3TxEmpty = 0; /* not empty in the THR until it shifts out */
    2bfe:	4b0f      	ldr	r3, [pc, #60]	; (2c3c <UARTSend+0x130>)
    2c00:	2200      	movs	r2, #0
    2c02:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    2c04:	697b      	ldr	r3, [r7, #20]
    2c06:	3301      	adds	r3, #1
    2c08:	617b      	str	r3, [r7, #20]
			Length--;
    2c0a:	687b      	ldr	r3, [r7, #4]
    2c0c:	3b01      	subs	r3, #1
    2c0e:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
		while (Length != 0) {
    2c10:	687b      	ldr	r3, [r7, #4]
    2c12:	2b00      	cmp	r3, #0
    2c14:	d1e5      	bne.n	2be2 <UARTSend+0xd6>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    2c16:	bf00      	nop
}
    2c18:	371c      	adds	r7, #28
    2c1a:	46bd      	mov	sp, r7
    2c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c20:	4770      	bx	lr
    2c22:	bf00      	nop
    2c24:	10000008 	.word	0x10000008
    2c28:	4000c000 	.word	0x4000c000
    2c2c:	10000009 	.word	0x10000009
    2c30:	40010000 	.word	0x40010000
    2c34:	1000000b 	.word	0x1000000b
    2c38:	40098000 	.word	0x40098000
    2c3c:	1000000a 	.word	0x1000000a
    2c40:	4009c000 	.word	0x4009c000

00002c44 <ReadUart>:

uint16_t ReadUart( uint8_t *veri, uint8_t PortNum )
{
    2c44:	b480      	push	{r7}
    2c46:	b087      	sub	sp, #28
    2c48:	af00      	add	r7, sp, #0
    2c4a:	6078      	str	r0, [r7, #4]
    2c4c:	460b      	mov	r3, r1
    2c4e:	70fb      	strb	r3, [r7, #3]
	uint8_t *veri_ptr = veri;
    2c50:	687b      	ldr	r3, [r7, #4]
    2c52:	617b      	str	r3, [r7, #20]
	uint16_t buff_count = 0;
    2c54:	2300      	movs	r3, #0
    2c56:	827b      	strh	r3, [r7, #18]
	if (PortNum == 0) {
    2c58:	78fb      	ldrb	r3, [r7, #3]
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	d122      	bne.n	2ca4 <ReadUart+0x60>
		if (UART0Count > 0) {
    2c5e:	4b4d      	ldr	r3, [pc, #308]	; (2d94 <ReadUart+0x150>)
    2c60:	881b      	ldrh	r3, [r3, #0]
    2c62:	b29b      	uxth	r3, r3
    2c64:	2b00      	cmp	r3, #0
    2c66:	d01d      	beq.n	2ca4 <ReadUart+0x60>
			while (buff_count < UART0Count) {
    2c68:	e00b      	b.n	2c82 <ReadUart+0x3e>
				*veri_ptr = UART0Buffer[buff_count];
    2c6a:	8a7b      	ldrh	r3, [r7, #18]
    2c6c:	4a4a      	ldr	r2, [pc, #296]	; (2d98 <ReadUart+0x154>)
    2c6e:	5cd3      	ldrb	r3, [r2, r3]
    2c70:	b2da      	uxtb	r2, r3
    2c72:	697b      	ldr	r3, [r7, #20]
    2c74:	701a      	strb	r2, [r3, #0]
				buff_count++;
    2c76:	8a7b      	ldrh	r3, [r7, #18]
    2c78:	3301      	adds	r3, #1
    2c7a:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    2c7c:	697b      	ldr	r3, [r7, #20]
    2c7e:	3301      	adds	r3, #1
    2c80:	617b      	str	r3, [r7, #20]
{
	uint8_t *veri_ptr = veri;
	uint16_t buff_count = 0;
	if (PortNum == 0) {
		if (UART0Count > 0) {
			while (buff_count < UART0Count) {
    2c82:	4b44      	ldr	r3, [pc, #272]	; (2d94 <ReadUart+0x150>)
    2c84:	881b      	ldrh	r3, [r3, #0]
    2c86:	b29b      	uxth	r3, r3
    2c88:	8a7a      	ldrh	r2, [r7, #18]
    2c8a:	429a      	cmp	r2, r3
    2c8c:	d3ed      	bcc.n	2c6a <ReadUart+0x26>
				*veri_ptr = UART0Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    2c8e:	697b      	ldr	r3, [r7, #20]
    2c90:	2200      	movs	r2, #0
    2c92:	701a      	strb	r2, [r3, #0]
			uint16_t len = UART0Count;
    2c94:	4b3f      	ldr	r3, [pc, #252]	; (2d94 <ReadUart+0x150>)
    2c96:	881b      	ldrh	r3, [r3, #0]
    2c98:	823b      	strh	r3, [r7, #16]
			UART0Count = 0;
    2c9a:	4b3e      	ldr	r3, [pc, #248]	; (2d94 <ReadUart+0x150>)
    2c9c:	2200      	movs	r2, #0
    2c9e:	801a      	strh	r2, [r3, #0]
			return ( len );
    2ca0:	8a3b      	ldrh	r3, [r7, #16]
    2ca2:	e071      	b.n	2d88 <ReadUart+0x144>
		}
	}
	if (PortNum == 1) {
    2ca4:	78fb      	ldrb	r3, [r7, #3]
    2ca6:	2b01      	cmp	r3, #1
    2ca8:	d122      	bne.n	2cf0 <ReadUart+0xac>
		if (UART1Count > 0) {
    2caa:	4b3c      	ldr	r3, [pc, #240]	; (2d9c <ReadUart+0x158>)
    2cac:	881b      	ldrh	r3, [r3, #0]
    2cae:	b29b      	uxth	r3, r3
    2cb0:	2b00      	cmp	r3, #0
    2cb2:	d068      	beq.n	2d86 <ReadUart+0x142>
			while (buff_count < UART1Count) {
    2cb4:	e00b      	b.n	2cce <ReadUart+0x8a>
				*veri_ptr = UART1Buffer[buff_count];
    2cb6:	8a7b      	ldrh	r3, [r7, #18]
    2cb8:	4a39      	ldr	r2, [pc, #228]	; (2da0 <ReadUart+0x15c>)
    2cba:	5cd3      	ldrb	r3, [r2, r3]
    2cbc:	b2da      	uxtb	r2, r3
    2cbe:	697b      	ldr	r3, [r7, #20]
    2cc0:	701a      	strb	r2, [r3, #0]
				buff_count++;
    2cc2:	8a7b      	ldrh	r3, [r7, #18]
    2cc4:	3301      	adds	r3, #1
    2cc6:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    2cc8:	697b      	ldr	r3, [r7, #20]
    2cca:	3301      	adds	r3, #1
    2ccc:	617b      	str	r3, [r7, #20]
			return ( len );
		}
	}
	if (PortNum == 1) {
		if (UART1Count > 0) {
			while (buff_count < UART1Count) {
    2cce:	4b33      	ldr	r3, [pc, #204]	; (2d9c <ReadUart+0x158>)
    2cd0:	881b      	ldrh	r3, [r3, #0]
    2cd2:	b29b      	uxth	r3, r3
    2cd4:	8a7a      	ldrh	r2, [r7, #18]
    2cd6:	429a      	cmp	r2, r3
    2cd8:	d3ed      	bcc.n	2cb6 <ReadUart+0x72>
				*veri_ptr = UART1Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    2cda:	697b      	ldr	r3, [r7, #20]
    2cdc:	2200      	movs	r2, #0
    2cde:	701a      	strb	r2, [r3, #0]
			uint16_t len = UART1Count;
    2ce0:	4b2e      	ldr	r3, [pc, #184]	; (2d9c <ReadUart+0x158>)
    2ce2:	881b      	ldrh	r3, [r3, #0]
    2ce4:	81fb      	strh	r3, [r7, #14]
			UART1Count = 0;
    2ce6:	4b2d      	ldr	r3, [pc, #180]	; (2d9c <ReadUart+0x158>)
    2ce8:	2200      	movs	r2, #0
    2cea:	801a      	strh	r2, [r3, #0]
			return ( len );
    2cec:	89fb      	ldrh	r3, [r7, #14]
    2cee:	e04b      	b.n	2d88 <ReadUart+0x144>
		}
	}//GPS Port
	else if (PortNum == 2) {
    2cf0:	78fb      	ldrb	r3, [r7, #3]
    2cf2:	2b02      	cmp	r3, #2
    2cf4:	d11f      	bne.n	2d36 <ReadUart+0xf2>
		if (UART2Count > 0) {
    2cf6:	4b2b      	ldr	r3, [pc, #172]	; (2da4 <ReadUart+0x160>)
    2cf8:	881b      	ldrh	r3, [r3, #0]
    2cfa:	b29b      	uxth	r3, r3
    2cfc:	2b00      	cmp	r3, #0
    2cfe:	d042      	beq.n	2d86 <ReadUart+0x142>
			while (buff_count < UART2Count) {
    2d00:	e00b      	b.n	2d1a <ReadUart+0xd6>
				*veri_ptr = UART2Buffer[buff_count];
    2d02:	8a7b      	ldrh	r3, [r7, #18]
    2d04:	4a28      	ldr	r2, [pc, #160]	; (2da8 <ReadUart+0x164>)
    2d06:	5cd3      	ldrb	r3, [r2, r3]
    2d08:	b2da      	uxtb	r2, r3
    2d0a:	697b      	ldr	r3, [r7, #20]
    2d0c:	701a      	strb	r2, [r3, #0]
				buff_count++;
    2d0e:	8a7b      	ldrh	r3, [r7, #18]
    2d10:	3301      	adds	r3, #1
    2d12:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    2d14:	697b      	ldr	r3, [r7, #20]
    2d16:	3301      	adds	r3, #1
    2d18:	617b      	str	r3, [r7, #20]
			return ( len );
		}
	}//GPS Port
	else if (PortNum == 2) {
		if (UART2Count > 0) {
			while (buff_count < UART2Count) {
    2d1a:	4b22      	ldr	r3, [pc, #136]	; (2da4 <ReadUart+0x160>)
    2d1c:	881b      	ldrh	r3, [r3, #0]
    2d1e:	b29b      	uxth	r3, r3
    2d20:	8a7a      	ldrh	r2, [r7, #18]
    2d22:	429a      	cmp	r2, r3
    2d24:	d3ed      	bcc.n	2d02 <ReadUart+0xbe>
				*veri_ptr = UART2Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    2d26:	697b      	ldr	r3, [r7, #20]
    2d28:	2200      	movs	r2, #0
    2d2a:	701a      	strb	r2, [r3, #0]
			UART2Count = 0;
    2d2c:	4b1d      	ldr	r3, [pc, #116]	; (2da4 <ReadUart+0x160>)
    2d2e:	2200      	movs	r2, #0
    2d30:	801a      	strh	r2, [r3, #0]
			return buff_count;
    2d32:	8a7b      	ldrh	r3, [r7, #18]
    2d34:	e028      	b.n	2d88 <ReadUart+0x144>
		}
	} else if (PortNum == 3) {
    2d36:	78fb      	ldrb	r3, [r7, #3]
    2d38:	2b03      	cmp	r3, #3
    2d3a:	d124      	bne.n	2d86 <ReadUart+0x142>
		if (UART3Count > 0) {
    2d3c:	4b1b      	ldr	r3, [pc, #108]	; (2dac <ReadUart+0x168>)
    2d3e:	881b      	ldrh	r3, [r3, #0]
    2d40:	b29b      	uxth	r3, r3
    2d42:	2b00      	cmp	r3, #0
    2d44:	d01f      	beq.n	2d86 <ReadUart+0x142>
			while (buff_count < UART3Count) {
    2d46:	e00b      	b.n	2d60 <ReadUart+0x11c>
				*veri_ptr = UART3Buffer[buff_count];
    2d48:	8a7b      	ldrh	r3, [r7, #18]
    2d4a:	4a19      	ldr	r2, [pc, #100]	; (2db0 <ReadUart+0x16c>)
    2d4c:	5cd3      	ldrb	r3, [r2, r3]
    2d4e:	b2da      	uxtb	r2, r3
    2d50:	697b      	ldr	r3, [r7, #20]
    2d52:	701a      	strb	r2, [r3, #0]
				buff_count++;
    2d54:	8a7b      	ldrh	r3, [r7, #18]
    2d56:	3301      	adds	r3, #1
    2d58:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    2d5a:	697b      	ldr	r3, [r7, #20]
    2d5c:	3301      	adds	r3, #1
    2d5e:	617b      	str	r3, [r7, #20]
			UART2Count = 0;
			return buff_count;
		}
	} else if (PortNum == 3) {
		if (UART3Count > 0) {
			while (buff_count < UART3Count) {
    2d60:	4b12      	ldr	r3, [pc, #72]	; (2dac <ReadUart+0x168>)
    2d62:	881b      	ldrh	r3, [r3, #0]
    2d64:	b29b      	uxth	r3, r3
    2d66:	8a7a      	ldrh	r2, [r7, #18]
    2d68:	429a      	cmp	r2, r3
    2d6a:	d3ed      	bcc.n	2d48 <ReadUart+0x104>
				*veri_ptr = UART3Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    2d6c:	697b      	ldr	r3, [r7, #20]
    2d6e:	2200      	movs	r2, #0
    2d70:	701a      	strb	r2, [r3, #0]
			int len = UART3Count;
    2d72:	4b0e      	ldr	r3, [pc, #56]	; (2dac <ReadUart+0x168>)
    2d74:	881b      	ldrh	r3, [r3, #0]
    2d76:	b29b      	uxth	r3, r3
    2d78:	60bb      	str	r3, [r7, #8]
			UART3Count = 0;
    2d7a:	4b0c      	ldr	r3, [pc, #48]	; (2dac <ReadUart+0x168>)
    2d7c:	2200      	movs	r2, #0
    2d7e:	801a      	strh	r2, [r3, #0]
			return len;
    2d80:	68bb      	ldr	r3, [r7, #8]
    2d82:	b29b      	uxth	r3, r3
    2d84:	e000      	b.n	2d88 <ReadUart+0x144>
		}
	}
	return 0;
    2d86:	2300      	movs	r3, #0
}
    2d88:	4618      	mov	r0, r3
    2d8a:	371c      	adds	r7, #28
    2d8c:	46bd      	mov	sp, r7
    2d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d92:	4770      	bx	lr
    2d94:	10000028 	.word	0x10000028
    2d98:	10000ef4 	.word	0x10000ef4
    2d9c:	1000002a 	.word	0x1000002a
    2da0:	10000de8 	.word	0x10000de8
    2da4:	1000002c 	.word	0x1000002c
    2da8:	100010fc 	.word	0x100010fc
    2dac:	1000002e 	.word	0x1000002e
    2db0:	10000ffc 	.word	0x10000ffc

00002db4 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    2db4:	b480      	push	{r7}
    2db6:	b083      	sub	sp, #12
    2db8:	af00      	add	r7, sp, #0
    2dba:	4603      	mov	r3, r0
    2dbc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    2dbe:	4908      	ldr	r1, [pc, #32]	; (2de0 <NVIC_EnableIRQ+0x2c>)
    2dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    2dc4:	095b      	lsrs	r3, r3, #5
    2dc6:	79fa      	ldrb	r2, [r7, #7]
    2dc8:	f002 021f 	and.w	r2, r2, #31
    2dcc:	2001      	movs	r0, #1
    2dce:	fa00 f202 	lsl.w	r2, r0, r2
    2dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2dd6:	370c      	adds	r7, #12
    2dd8:	46bd      	mov	sp, r7
    2dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dde:	4770      	bx	lr
    2de0:	e000e100 	.word	0xe000e100

00002de4 <WDT_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void WDT_IRQHandler(void) {
    2de4:	b480      	push	{r7}
    2de6:	af00      	add	r7, sp, #0
	LPC_WDT->WDMOD &= ~WDTOF; /* clear the time-out terrupt flag */
    2de8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2dec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2df0:	781b      	ldrb	r3, [r3, #0]
    2df2:	b2db      	uxtb	r3, r3
    2df4:	f023 0304 	bic.w	r3, r3, #4
    2df8:	b2db      	uxtb	r3, r3
    2dfa:	7013      	strb	r3, [r2, #0]
	wdt_counter++;
    2dfc:	4b04      	ldr	r3, [pc, #16]	; (2e10 <WDT_IRQHandler+0x2c>)
    2dfe:	681b      	ldr	r3, [r3, #0]
    2e00:	3301      	adds	r3, #1
    2e02:	4a03      	ldr	r2, [pc, #12]	; (2e10 <WDT_IRQHandler+0x2c>)
    2e04:	6013      	str	r3, [r2, #0]
	return;
    2e06:	bf00      	nop
}
    2e08:	46bd      	mov	sp, r7
    2e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e0e:	4770      	bx	lr
    2e10:	100018f8 	.word	0x100018f8

00002e14 <WDTInit>:
	//WDT_SetTimeOutRTC(300 * 1000 * 1000);
	LPC_WDT->WDMOD = 0x3;
	//WDTFeed();
}

uint32_t WDTInit(uint32_t feed) {
    2e14:	b580      	push	{r7, lr}
    2e16:	b082      	sub	sp, #8
    2e18:	af00      	add	r7, sp, #0
    2e1a:	6078      	str	r0, [r7, #4]
	wdt_counter = 0;
    2e1c:	4b0b      	ldr	r3, [pc, #44]	; (2e4c <WDTInit+0x38>)
    2e1e:	2200      	movs	r2, #0
    2e20:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(WDT_IRQn);
    2e22:	2000      	movs	r0, #0
    2e24:	f7ff ffc6 	bl	2db4 <NVIC_EnableIRQ>
	LPC_WDT->WDCLKSEL = 0x1;//0x0 = IRC (Internal RC Oscillator) ,0x1 = APB Peripheral clock
    2e28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e2c:	2201      	movs	r2, #1
    2e2e:	611a      	str	r2, [r3, #16]
	//IRC is active even in Deep Sleep, and WDT Interrupt can wake up MCU in this mode.
	LPC_WDT->WDTC = feed; /* once WDEN is set, the WDT will start after feeding */
    2e30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	6053      	str	r3, [r2, #4]
	LPC_WDT->WDMOD = 0x3;
    2e38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e3c:	2203      	movs	r2, #3
    2e3e:	701a      	strb	r2, [r3, #0]
	WDTFeed();
    2e40:	f000 f806 	bl	2e50 <WDTFeed>
}
    2e44:	4618      	mov	r0, r3
    2e46:	3708      	adds	r7, #8
    2e48:	46bd      	mov	sp, r7
    2e4a:	bd80      	pop	{r7, pc}
    2e4c:	100018f8 	.word	0x100018f8

00002e50 <WDTFeed>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void WDTFeed(void) {
    2e50:	b480      	push	{r7}
    2e52:	af00      	add	r7, sp, #0
	LPC_WDT->WDFEED = 0xAA; /* Feeding sequence */
    2e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e58:	22aa      	movs	r2, #170	; 0xaa
    2e5a:	721a      	strb	r2, [r3, #8]
	LPC_WDT->WDFEED = 0x55;
    2e5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e60:	2255      	movs	r2, #85	; 0x55
    2e62:	721a      	strb	r2, [r3, #8]
	return;
    2e64:	bf00      	nop
}
    2e66:	46bd      	mov	sp, r7
    2e68:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e6c:	4770      	bx	lr
    2e6e:	bf00      	nop

00002e70 <XModemReadByte>:
/*
 * Helper function reads a block of data from GSM TCP connection
 * and services it byte by byte
 */
uint8_t	XModemReadByte( char* pByte )
{
    2e70:	b580      	push	{r7, lr}
    2e72:	b082      	sub	sp, #8
    2e74:	af00      	add	r7, sp, #0
    2e76:	6078      	str	r0, [r7, #4]
	if( dataIndex >= dataLen )
    2e78:	4b15      	ldr	r3, [pc, #84]	; (2ed0 <XModemReadByte+0x60>)
    2e7a:	881a      	ldrh	r2, [r3, #0]
    2e7c:	4b15      	ldr	r3, [pc, #84]	; (2ed4 <XModemReadByte+0x64>)
    2e7e:	881b      	ldrh	r3, [r3, #0]
    2e80:	429a      	cmp	r2, r3
    2e82:	d314      	bcc.n	2eae <XModemReadByte+0x3e>
	{
		// all buffer consumed read more from TCP connection
		dataLen = GSM_TCP_Recv( receiveBuf, 1500 );
    2e84:	4814      	ldr	r0, [pc, #80]	; (2ed8 <XModemReadByte+0x68>)
    2e86:	f240 51dc 	movw	r1, #1500	; 0x5dc
    2e8a:	f7fd fdd7 	bl	a3c <GSM_TCP_Recv>
    2e8e:	4603      	mov	r3, r0
    2e90:	b29a      	uxth	r2, r3
    2e92:	4b10      	ldr	r3, [pc, #64]	; (2ed4 <XModemReadByte+0x64>)
    2e94:	801a      	strh	r2, [r3, #0]
		dataIndex = 0;
    2e96:	4b0e      	ldr	r3, [pc, #56]	; (2ed0 <XModemReadByte+0x60>)
    2e98:	2200      	movs	r2, #0
    2e9a:	801a      	strh	r2, [r3, #0]

		if( dataLen <= 0 )
    2e9c:	4b0d      	ldr	r3, [pc, #52]	; (2ed4 <XModemReadByte+0x64>)
    2e9e:	881b      	ldrh	r3, [r3, #0]
    2ea0:	2b00      	cmp	r3, #0
    2ea2:	d104      	bne.n	2eae <XModemReadByte+0x3e>
		{
			dataLen = 0;
    2ea4:	4b0b      	ldr	r3, [pc, #44]	; (2ed4 <XModemReadByte+0x64>)
    2ea6:	2200      	movs	r2, #0
    2ea8:	801a      	strh	r2, [r3, #0]
			return ( 0 );  // no data available
    2eaa:	2300      	movs	r3, #0
    2eac:	e00b      	b.n	2ec6 <XModemReadByte+0x56>
		}
	}

	(*pByte) = receiveBuf[dataIndex++];
    2eae:	4b08      	ldr	r3, [pc, #32]	; (2ed0 <XModemReadByte+0x60>)
    2eb0:	881b      	ldrh	r3, [r3, #0]
    2eb2:	1c5a      	adds	r2, r3, #1
    2eb4:	b291      	uxth	r1, r2
    2eb6:	4a06      	ldr	r2, [pc, #24]	; (2ed0 <XModemReadByte+0x60>)
    2eb8:	8011      	strh	r1, [r2, #0]
    2eba:	461a      	mov	r2, r3
    2ebc:	4b06      	ldr	r3, [pc, #24]	; (2ed8 <XModemReadByte+0x68>)
    2ebe:	5c9a      	ldrb	r2, [r3, r2]
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	701a      	strb	r2, [r3, #0]
	return ( 1 );
    2ec4:	2301      	movs	r3, #1
}
    2ec6:	4618      	mov	r0, r3
    2ec8:	3708      	adds	r7, #8
    2eca:	46bd      	mov	sp, r7
    2ecc:	bd80      	pop	{r7, pc}
    2ece:	bf00      	nop
    2ed0:	10000a0e 	.word	0x10000a0e
    2ed4:	10000a0c 	.word	0x10000a0c
    2ed8:	10000430 	.word	0x10000430

00002edc <XModem1K_Client>:
 **
 ** Returned value:  None
 **
 *****************************************************************************/
void XModem1K_Client(uint32_t (*pu32Xmodem1kRxPacketCallback)(uint8_t *pu8Data, uint16_t u16Len))
{
    2edc:	b580      	push	{r7, lr}
    2ede:	b08a      	sub	sp, #40	; 0x28
    2ee0:	af00      	add	r7, sp, #0
    2ee2:	6078      	str	r0, [r7, #4]
	uint32_t u32InProgress = 1;
    2ee4:	2301      	movs	r3, #1
    2ee6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t u32State = STATE_IDLE;
    2ee8:	2300      	movs	r3, #0
    2eea:	623b      	str	r3, [r7, #32]
	uint16_t u16CRC;


	/* Prepare UART for RX/TX */

	while(u32InProgress)
    2eec:	e0f6      	b.n	30dc <XModem1K_Client+0x200>
	{
		switch (u32State)
    2eee:	6a3b      	ldr	r3, [r7, #32]
    2ef0:	2b01      	cmp	r3, #1
    2ef2:	d013      	beq.n	2f1c <XModem1K_Client+0x40>
    2ef4:	2b01      	cmp	r3, #1
    2ef6:	d302      	bcc.n	2efe <XModem1K_Client+0x22>
    2ef8:	2b02      	cmp	r3, #2
    2efa:	d043      	beq.n	2f84 <XModem1K_Client+0xa8>
    2efc:	e0ed      	b.n	30da <XModem1K_Client+0x1fe>
		{
			case STATE_IDLE:
			{
				/* Send command to server indicating we are ready to receive */
				uint8_t u8Cmd = POLL;
    2efe:	2343      	movs	r3, #67	; 0x43
    2f00:	757b      	strb	r3, [r7, #21]
				GSM_SendToServerTCP( &u8Cmd, 1 );
    2f02:	f107 0315 	add.w	r3, r7, #21
    2f06:	4618      	mov	r0, r3
    2f08:	2101      	movs	r1, #1
    2f0a:	f7fd ff07 	bl	d1c <GSM_SendToServerTCP>
				// UARTSend(UART_NUM, &u8Cmd, 1);

				/* Start timeout to send another poll if we do not get a response */
				vTimerStart(POLL_PERIOD_ms);
    2f0e:	f640 30b8 	movw	r0, #3000	; 0xbb8
    2f12:	f000 f8ed 	bl	30f0 <vTimerStart>

				/* Wait for a response */
				u32State = STATE_CONNECTING;
    2f16:	2301      	movs	r3, #1
    2f18:	623b      	str	r3, [r7, #32]
			}
			break;
    2f1a:	e0df      	b.n	30dc <XModem1K_Client+0x200>
			case STATE_CONNECTING:
			{
				uint8_t u8Data;

				/* Check if a character has been received on the UART */
				if( XModemReadByte( &u8Data ) )
    2f1c:	f107 0314 	add.w	r3, r7, #20
    2f20:	4618      	mov	r0, r3
    2f22:	f7ff ffa5 	bl	2e70 <XModemReadByte>
    2f26:	4603      	mov	r3, r0
    2f28:	2b00      	cmp	r3, #0
    2f2a:	d017      	beq.n	2f5c <XModem1K_Client+0x80>
				{
					/* Expecting a start of packet character */
					if( (u8Data == STX) || (u8Data == SOH) )
    2f2c:	7d3b      	ldrb	r3, [r7, #20]
    2f2e:	2b02      	cmp	r3, #2
    2f30:	d002      	beq.n	2f38 <XModem1K_Client+0x5c>
    2f32:	7d3b      	ldrb	r3, [r7, #20]
    2f34:	2b01      	cmp	r3, #1
    2f36:	d124      	bne.n	2f82 <XModem1K_Client+0xa6>
					{
						if( u8Data == STX )
    2f38:	7d3b      	ldrb	r3, [r7, #20]
    2f3a:	2b02      	cmp	r3, #2
    2f3c:	d103      	bne.n	2f46 <XModem1K_Client+0x6a>
						{
							/* STX indicates long payload packet is being transmitted */
							u32PktLen = LONG_PACKET_PAYLOAD_LEN;
    2f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2f42:	61bb      	str	r3, [r7, #24]
    2f44:	e001      	b.n	2f4a <XModem1K_Client+0x6e>
						}
						else
						{
							/* SOH indicates short payload packet is being transmitted */
							u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    2f46:	2380      	movs	r3, #128	; 0x80
    2f48:	61bb      	str	r3, [r7, #24]
						}
						u32ByteCount = 1;
    2f4a:	2301      	movs	r3, #1
    2f4c:	61fb      	str	r3, [r7, #28]

						/* Start packet timeout */
						vTimerStart(PACKET_TIMEOUT_PERIOD_ms);
    2f4e:	f641 3058 	movw	r0, #7000	; 0x1b58
    2f52:	f000 f8cd 	bl	30f0 <vTimerStart>

						/* Wait for a further characters */
						u32State = STATE_RECEIVING;
    2f56:	2302      	movs	r3, #2
    2f58:	623b      	str	r3, [r7, #32]
    2f5a:	e0bf      	b.n	30dc <XModem1K_Client+0x200>
					}
				}
				else /* No data received yet, check poll command timeout */
				{
					if ((LPC_TIM0->TCR & 0x01) == 0)
    2f5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2f60:	685b      	ldr	r3, [r3, #4]
    2f62:	f003 0301 	and.w	r3, r3, #1
    2f66:	2b00      	cmp	r3, #0
    2f68:	d10b      	bne.n	2f82 <XModem1K_Client+0xa6>
					{
						/* Timeout expired following poll command transmission so try again.. */
						uint8_t u8Cmd = POLL;
    2f6a:	2343      	movs	r3, #67	; 0x43
    2f6c:	74fb      	strb	r3, [r7, #19]

						GSM_SendToServerTCP( &u8Cmd, 1 );
    2f6e:	f107 0313 	add.w	r3, r7, #19
    2f72:	4618      	mov	r0, r3
    2f74:	2101      	movs	r1, #1
    2f76:	f7fd fed1 	bl	d1c <GSM_SendToServerTCP>
						// UARTSend(UART_NUM, &u8Cmd, 1);

						/* Restart timeout to send another poll if we do not get a response */
						vTimerStart(POLL_PERIOD_ms);
    2f7a:	f640 30b8 	movw	r0, #3000	; 0xbb8
    2f7e:	f000 f8b7 	bl	30f0 <vTimerStart>
					}
				}
			}
			break;
    2f82:	e0ab      	b.n	30dc <XModem1K_Client+0x200>
			case STATE_RECEIVING:
			{
				uint8_t u8Data;

				/* Check if a character has been received on the UART */
				if( XModemReadByte( &u8Data ) )
    2f84:	f107 0312 	add.w	r3, r7, #18
    2f88:	4618      	mov	r0, r3
    2f8a:	f7ff ff71 	bl	2e70 <XModemReadByte>
    2f8e:	4603      	mov	r3, r0
    2f90:	2b00      	cmp	r3, #0
    2f92:	f000 80a1 	beq.w	30d8 <XModem1K_Client+0x1fc>
				{
					/* Position of received byte determines action we take */
					if (u32ByteCount == 0)
    2f96:	69fb      	ldr	r3, [r7, #28]
    2f98:	2b00      	cmp	r3, #0
    2f9a:	d128      	bne.n	2fee <XModem1K_Client+0x112>
					{
						/* Expecting a start of packet character */
						if ((u8Data == STX) || (u8Data == SOH))
    2f9c:	7cbb      	ldrb	r3, [r7, #18]
    2f9e:	2b02      	cmp	r3, #2
    2fa0:	d002      	beq.n	2fa8 <XModem1K_Client+0xcc>
    2fa2:	7cbb      	ldrb	r3, [r7, #18]
    2fa4:	2b01      	cmp	r3, #1
    2fa6:	d10f      	bne.n	2fc8 <XModem1K_Client+0xec>
						{
							if (u8Data == STX)
    2fa8:	7cbb      	ldrb	r3, [r7, #18]
    2faa:	2b02      	cmp	r3, #2
    2fac:	d103      	bne.n	2fb6 <XModem1K_Client+0xda>
							{
								/* STX indicates long payload packet is being transmitted */
								u32PktLen = LONG_PACKET_PAYLOAD_LEN;
    2fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2fb2:	61bb      	str	r3, [r7, #24]
    2fb4:	e001      	b.n	2fba <XModem1K_Client+0xde>
							}
							else
							{
								/* SOH indicates short payload packet is being transmitted */
								u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    2fb6:	2380      	movs	r3, #128	; 0x80
    2fb8:	61bb      	str	r3, [r7, #24]
							}
							u32ByteCount = 1;
    2fba:	2301      	movs	r3, #1
    2fbc:	61fb      	str	r3, [r7, #28]

							/* Start packet timeout */
							vTimerStart(PACKET_TIMEOUT_PERIOD_ms);
    2fbe:	f641 3058 	movw	r0, #7000	; 0x1b58
    2fc2:	f000 f895 	bl	30f0 <vTimerStart>
    2fc6:	e087      	b.n	30d8 <XModem1K_Client+0x1fc>
						}
						else if (u8Data == EOT)
    2fc8:	7cbb      	ldrb	r3, [r7, #18]
    2fca:	2b04      	cmp	r3, #4
    2fcc:	f040 8084 	bne.w	30d8 <XModem1K_Client+0x1fc>
						{
							/* Server indicating transmission is complete */
							uint8_t u8Cmd = ACK;
    2fd0:	2306      	movs	r3, #6
    2fd2:	747b      	strb	r3, [r7, #17]

							GSM_SendToServerTCP( &u8Cmd, 1 );
    2fd4:	f107 0311 	add.w	r3, r7, #17
    2fd8:	4618      	mov	r0, r3
    2fda:	2101      	movs	r1, #1
    2fdc:	f7fd fe9e 	bl	d1c <GSM_SendToServerTCP>
							// UARTSend(UART_NUM, &u8Cmd, 1);

							/* Close xmodem client */
							u32InProgress = 0;
    2fe0:	2300      	movs	r3, #0
    2fe2:	627b      	str	r3, [r7, #36]	; 0x24

							/* Call the call back function to indicated a complete transmission */
							/* If length == 0, then EOT */
							pu32Xmodem1kRxPacketCallback(&au8RxBuffer[0], 0);
    2fe4:	687b      	ldr	r3, [r7, #4]
    2fe6:	4841      	ldr	r0, [pc, #260]	; (30ec <XModem1K_Client+0x210>)
    2fe8:	2100      	movs	r1, #0
    2fea:	4798      	blx	r3
    2fec:	e074      	b.n	30d8 <XModem1K_Client+0x1fc>
						else
						{
							/* TODO - Unexpected character, do what...? */
						}
					}
					else if (u32ByteCount == 1)
    2fee:	69fb      	ldr	r3, [r7, #28]
    2ff0:	2b01      	cmp	r3, #1
    2ff2:	d103      	bne.n	2ffc <XModem1K_Client+0x120>
					{
						/* Byte 1 is the packet number - should be different from last one we received */
						u32ByteCount++;
    2ff4:	69fb      	ldr	r3, [r7, #28]
    2ff6:	3301      	adds	r3, #1
    2ff8:	61fb      	str	r3, [r7, #28]
    2ffa:	e06d      	b.n	30d8 <XModem1K_Client+0x1fc>
					}
					else if (u32ByteCount == 2)
    2ffc:	69fb      	ldr	r3, [r7, #28]
    2ffe:	2b02      	cmp	r3, #2
    3000:	d103      	bne.n	300a <XModem1K_Client+0x12e>
					{
						/* Byte 2 is the packet number inverted - check for error with last byte */
						u32ByteCount++;
    3002:	69fb      	ldr	r3, [r7, #28]
    3004:	3301      	adds	r3, #1
    3006:	61fb      	str	r3, [r7, #28]
    3008:	e066      	b.n	30d8 <XModem1K_Client+0x1fc>
					}
					else if (((u32ByteCount == 131 ) && (u32PktLen == SHORT_PACKET_PAYLOAD_LEN)) ||
    300a:	69fb      	ldr	r3, [r7, #28]
    300c:	2b83      	cmp	r3, #131	; 0x83
    300e:	d102      	bne.n	3016 <XModem1K_Client+0x13a>
    3010:	69bb      	ldr	r3, [r7, #24]
    3012:	2b80      	cmp	r3, #128	; 0x80
    3014:	d008      	beq.n	3028 <XModem1K_Client+0x14c>
    3016:	69fb      	ldr	r3, [r7, #28]
    3018:	f240 4203 	movw	r2, #1027	; 0x403
    301c:	4293      	cmp	r3, r2
    301e:	d109      	bne.n	3034 <XModem1K_Client+0x158>
							 ((u32ByteCount == 1027) && (u32PktLen == LONG_PACKET_PAYLOAD_LEN)))
    3020:	69bb      	ldr	r3, [r7, #24]
    3022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3026:	d105      	bne.n	3034 <XModem1K_Client+0x158>
					{
						/* If payload is short byte 131 is the MS byte of the packet CRC, if payload
						   is long byte 1027 is the MS byte of the packet CRC. */
						u16CRC = u8Data;
    3028:	7cbb      	ldrb	r3, [r7, #18]
    302a:	82fb      	strh	r3, [r7, #22]
						u32ByteCount++;
    302c:	69fb      	ldr	r3, [r7, #28]
    302e:	3301      	adds	r3, #1
    3030:	61fb      	str	r3, [r7, #28]
    3032:	e051      	b.n	30d8 <XModem1K_Client+0x1fc>
					}
					else if (((u32ByteCount == 132)  && (u32PktLen == SHORT_PACKET_PAYLOAD_LEN)) ||
    3034:	69fb      	ldr	r3, [r7, #28]
    3036:	2b84      	cmp	r3, #132	; 0x84
    3038:	d102      	bne.n	3040 <XModem1K_Client+0x164>
    303a:	69bb      	ldr	r3, [r7, #24]
    303c:	2b80      	cmp	r3, #128	; 0x80
    303e:	d008      	beq.n	3052 <XModem1K_Client+0x176>
    3040:	69fb      	ldr	r3, [r7, #28]
    3042:	f240 4204 	movw	r2, #1028	; 0x404
    3046:	4293      	cmp	r3, r2
    3048:	d13d      	bne.n	30c6 <XModem1K_Client+0x1ea>
					         ((u32ByteCount == 1028) && (u32PktLen == LONG_PACKET_PAYLOAD_LEN)))
    304a:	69bb      	ldr	r3, [r7, #24]
    304c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3050:	d139      	bne.n	30c6 <XModem1K_Client+0x1ea>
					{
						/* If payload is short byte 132 is the LS byte of the packet CRC, if payload
						   is long byte 1028 is the LS byte of the packet CRC. */
						u16CRC <<= 8;
    3052:	8afb      	ldrh	r3, [r7, #22]
    3054:	021b      	lsls	r3, r3, #8
    3056:	82fb      	strh	r3, [r7, #22]
						u16CRC  |= u8Data;
    3058:	7cbb      	ldrb	r3, [r7, #18]
    305a:	b29a      	uxth	r2, r3
    305c:	8afb      	ldrh	r3, [r7, #22]
    305e:	4313      	orrs	r3, r2
    3060:	82fb      	strh	r3, [r7, #22]

						/* Check the received CRC against the CRC we generate on the packet data */
						if (u16CRC_Calc16(&au8RxBuffer[0], u32PktLen) == u16CRC)
    3062:	69bb      	ldr	r3, [r7, #24]
    3064:	b29b      	uxth	r3, r3
    3066:	b21b      	sxth	r3, r3
    3068:	4820      	ldr	r0, [pc, #128]	; (30ec <XModem1K_Client+0x210>)
    306a:	4619      	mov	r1, r3
    306c:	f7fe f8e2 	bl	1234 <u16CRC_Calc16>
    3070:	4603      	mov	r3, r0
    3072:	461a      	mov	r2, r3
    3074:	8afb      	ldrh	r3, [r7, #22]
    3076:	4293      	cmp	r3, r2
    3078:	d11a      	bne.n	30b0 <XModem1K_Client+0x1d4>
						{
							uint8_t u8Cmd;

							/* Have now received full packet, call handler BEFORE sending ACK to application
							   can process data before more is sent. */
							if (pu32Xmodem1kRxPacketCallback(&au8RxBuffer[0], u32PktLen) != 0)
    307a:	69bb      	ldr	r3, [r7, #24]
    307c:	b29a      	uxth	r2, r3
    307e:	687b      	ldr	r3, [r7, #4]
    3080:	481a      	ldr	r0, [pc, #104]	; (30ec <XModem1K_Client+0x210>)
    3082:	4611      	mov	r1, r2
    3084:	4798      	blx	r3
    3086:	4603      	mov	r3, r0
    3088:	2b00      	cmp	r3, #0
    308a:	d008      	beq.n	309e <XModem1K_Client+0x1c2>
							{
								/* Packet handled successfully, send ACK to server indicating we are ready for next packet */
								u8Cmd = ACK;
    308c:	2306      	movs	r3, #6
    308e:	743b      	strb	r3, [r7, #16]

								GSM_SendToServerTCP( &u8Cmd, 1 );
    3090:	f107 0310 	add.w	r3, r7, #16
    3094:	4618      	mov	r0, r3
    3096:	2101      	movs	r1, #1
    3098:	f7fd fe40 	bl	d1c <GSM_SendToServerTCP>
    309c:	e010      	b.n	30c0 <XModem1K_Client+0x1e4>
							}
							else
							{
								/* Something went wrong with packet handler, all we can do is send NAK causing the
								   packet to be retransmitted by the server.. */
								u8Cmd = NAK;
    309e:	2315      	movs	r3, #21
    30a0:	743b      	strb	r3, [r7, #16]
								GSM_SendToServerTCP( &u8Cmd, 1 );
    30a2:	f107 0310 	add.w	r3, r7, #16
    30a6:	4618      	mov	r0, r3
    30a8:	2101      	movs	r1, #1
    30aa:	f7fd fe37 	bl	d1c <GSM_SendToServerTCP>
    30ae:	e007      	b.n	30c0 <XModem1K_Client+0x1e4>
							}
						}
						else /* Error CRC calculated does not match that received */
						{
							/* Indicate problem to server - should result in packet being resent.. */
							uint8_t u8Cmd = NAK;
    30b0:	2315      	movs	r3, #21
    30b2:	73fb      	strb	r3, [r7, #15]

							GSM_SendToServerTCP( &u8Cmd, 1 );
    30b4:	f107 030f 	add.w	r3, r7, #15
    30b8:	4618      	mov	r0, r3
    30ba:	2101      	movs	r1, #1
    30bc:	f7fd fe2e 	bl	d1c <GSM_SendToServerTCP>
							// UARTSend(UART_NUM, &u8Cmd, 1);
						}
						u32ByteCount = 0;
    30c0:	2300      	movs	r3, #0
    30c2:	61fb      	str	r3, [r7, #28]
    30c4:	e008      	b.n	30d8 <XModem1K_Client+0x1fc>
					}
					else
					{
						/* Must be payload data so store */
						au8RxBuffer[u32ByteCount - PACKET_HEADER_LEN] = u8Data;
    30c6:	69fb      	ldr	r3, [r7, #28]
    30c8:	3b03      	subs	r3, #3
    30ca:	7cb9      	ldrb	r1, [r7, #18]
    30cc:	4a07      	ldr	r2, [pc, #28]	; (30ec <XModem1K_Client+0x210>)
    30ce:	54d1      	strb	r1, [r2, r3]
						u32ByteCount++;
    30d0:	69fb      	ldr	r3, [r7, #28]
    30d2:	3301      	adds	r3, #1
    30d4:	61fb      	str	r3, [r7, #28]
    30d6:	e7ff      	b.n	30d8 <XModem1K_Client+0x1fc>
				else
				{
					/* TODO - Check packet timeout */
				}
			}
			break;
    30d8:	e000      	b.n	30dc <XModem1K_Client+0x200>

			default:
				break;
    30da:	bf00      	nop
	uint16_t u16CRC;


	/* Prepare UART for RX/TX */

	while(u32InProgress)
    30dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30de:	2b00      	cmp	r3, #0
    30e0:	f47f af05 	bne.w	2eee <XModem1K_Client+0x12>

			default:
				break;
		}
	}
}
    30e4:	3728      	adds	r7, #40	; 0x28
    30e6:	46bd      	mov	sp, r7
    30e8:	bd80      	pop	{r7, pc}
    30ea:	bf00      	nop
    30ec:	10000030 	.word	0x10000030

000030f0 <vTimerStart>:
 **
 ** Returned value:  None
 **
 *****************************************************************************/
static void vTimerStart(uint32_t u32Periodms)
{
    30f0:	b480      	push	{r7}
    30f2:	b083      	sub	sp, #12
    30f4:	af00      	add	r7, sp, #0
    30f6:	6078      	str	r0, [r7, #4]
	/* Enable the timer clock */
	LPC_SC->PCONP |= (1UL << 1);
    30f8:	4a19      	ldr	r2, [pc, #100]	; (3160 <vTimerStart+0x70>)
    30fa:	4b19      	ldr	r3, [pc, #100]	; (3160 <vTimerStart+0x70>)
    30fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    3100:	f043 0302 	orr.w	r3, r3, #2
    3104:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

	/* Configure the timer so that we can poll for a match */
	LPC_TIM0->TCR = 0x02;		/* reset timer */
    3108:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    310c:	2202      	movs	r2, #2
    310e:	605a      	str	r2, [r3, #4]
	LPC_TIM0->PR  = 0x00;		/* set prescaler to zero */
    3110:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3114:	2200      	movs	r2, #0
    3116:	60da      	str	r2, [r3, #12]
	LPC_TIM0->MR0 = u32Periodms * ((SystemCoreClock / 4 / (LPC_TIM0->PR + 1)) / 1000UL);
    3118:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    311c:	4b11      	ldr	r3, [pc, #68]	; (3164 <vTimerStart+0x74>)
    311e:	681b      	ldr	r3, [r3, #0]
    3120:	4a11      	ldr	r2, [pc, #68]	; (3168 <vTimerStart+0x78>)
    3122:	fba2 2303 	umull	r2, r3, r2, r3
    3126:	0a1a      	lsrs	r2, r3, #8
    3128:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    312c:	68db      	ldr	r3, [r3, #12]
    312e:	3301      	adds	r3, #1
    3130:	fbb2 f3f3 	udiv	r3, r2, r3
    3134:	687a      	ldr	r2, [r7, #4]
    3136:	fb02 f303 	mul.w	r3, r2, r3
    313a:	618b      	str	r3, [r1, #24]
	LPC_TIM0->IR  = 0xFF;		/* reset all interrupts */
    313c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3140:	22ff      	movs	r2, #255	; 0xff
    3142:	601a      	str	r2, [r3, #0]
	LPC_TIM0->MCR = 0x04;		/* stop timer on match */
    3144:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3148:	2204      	movs	r2, #4
    314a:	615a      	str	r2, [r3, #20]
	LPC_TIM0->TCR = 0x01;		/* start timer */
    314c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    3150:	2201      	movs	r2, #1
    3152:	605a      	str	r2, [r3, #4]
}
    3154:	370c      	adds	r7, #12
    3156:	46bd      	mov	sp, r7
    3158:	f85d 7b04 	ldr.w	r7, [sp], #4
    315c:	4770      	bx	lr
    315e:	bf00      	nop
    3160:	400fc000 	.word	0x400fc000
    3164:	1000000c 	.word	0x1000000c
    3168:	10624dd3 	.word	0x10624dd3

0000316c <SystemCoreClockUpdate>:

/*----------------------------------------------------------------------------
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
    316c:	b538      	push	{r3, r4, r5, lr}

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    316e:	4b24      	ldr	r3, [pc, #144]	; (3200 <SystemCoreClockUpdate+0x94>)
    3170:	4c24      	ldr	r4, [pc, #144]	; (3204 <SystemCoreClockUpdate+0x98>)
    3172:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3176:	f3c2 6201 	ubfx	r2, r2, #24, #2
    317a:	2a03      	cmp	r2, #3
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    317c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    3180:	f002 0203 	and.w	r2, r2, #3
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    3184:	d128      	bne.n	31d8 <SystemCoreClockUpdate+0x6c>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    3186:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    318a:	2a01      	cmp	r2, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    318c:	f3c1 010e 	ubfx	r1, r1, #0, #15
    3190:	f101 0101 	add.w	r1, r1, #1
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3194:	d009      	beq.n	31aa <SystemCoreClockUpdate+0x3e>
    3196:	2a02      	cmp	r2, #2
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    3198:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    319c:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    31a0:	f3c2 4207 	ubfx	r2, r2, #16, #8
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    31a4:	d009      	beq.n	31ba <SystemCoreClockUpdate+0x4e>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = (IRC_OSC * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    31a6:	4818      	ldr	r0, [pc, #96]	; (3208 <SystemCoreClockUpdate+0x9c>)
    31a8:	e009      	b.n	31be <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    31aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    31ae:	4817      	ldr	r0, [pc, #92]	; (320c <SystemCoreClockUpdate+0xa0>)
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
    31b0:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    31b4:	f3c2 4207 	ubfx	r2, r2, #16, #8
    31b8:	e001      	b.n	31be <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    31ba:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
    31be:	3201      	adds	r2, #1
    31c0:	2300      	movs	r3, #0
    31c2:	fba1 0100 	umull	r0, r1, r1, r0
    31c6:	f002 f933 	bl	5430 <__aeabi_uldivmod>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    31ca:	b2ea      	uxtb	r2, r5
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    31cc:	3201      	adds	r2, #1
    31ce:	2300      	movs	r3, #0
    31d0:	f002 f92e 	bl	5430 <__aeabi_uldivmod>
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
    31d4:	6020      	str	r0, [r4, #0]
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    31d6:	bd38      	pop	{r3, r4, r5, pc}
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    31d8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    31dc:	2a01      	cmp	r2, #1
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    31de:	b2db      	uxtb	r3, r3
    31e0:	f103 0301 	add.w	r3, r3, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    31e4:	d003      	beq.n	31ee <SystemCoreClockUpdate+0x82>
    31e6:	2a02      	cmp	r2, #2
    31e8:	d003      	beq.n	31f2 <SystemCoreClockUpdate+0x86>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    31ea:	4a09      	ldr	r2, [pc, #36]	; (3210 <SystemCoreClockUpdate+0xa4>)
    31ec:	e003      	b.n	31f6 <SystemCoreClockUpdate+0x8a>
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    31ee:	4a09      	ldr	r2, [pc, #36]	; (3214 <SystemCoreClockUpdate+0xa8>)
    31f0:	e001      	b.n	31f6 <SystemCoreClockUpdate+0x8a>
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    31f2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
    31f6:	fbb2 f3f3 	udiv	r3, r2, r3
    31fa:	6023      	str	r3, [r4, #0]
    31fc:	bd38      	pop	{r3, r4, r5, pc}
    31fe:	bf00      	nop
    3200:	400fc000 	.word	0x400fc000
    3204:	1000000c 	.word	0x1000000c
    3208:	007a1200 	.word	0x007a1200
    320c:	016e3600 	.word	0x016e3600
    3210:	003d0900 	.word	0x003d0900
    3214:	00b71b00 	.word	0x00b71b00

00003218 <SystemInit>:
 *         Initialize the System.
 */
void SystemInit (void)
{
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
    3218:	4b34      	ldr	r3, [pc, #208]	; (32ec <SystemInit+0xd4>)
    321a:	2220      	movs	r2, #32
    321c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    3220:	461a      	mov	r2, r3
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    3222:	f8d2 11a0 	ldr.w	r1, [r2, #416]	; 0x1a0
    3226:	4b31      	ldr	r3, [pc, #196]	; (32ec <SystemInit+0xd4>)
    3228:	0648      	lsls	r0, r1, #25
    322a:	d5fa      	bpl.n	3222 <SystemInit+0xa>
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    322c:	2203      	movs	r2, #3
    322e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    3232:	2200      	movs	r2, #0
    3234:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    3238:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    323c:	4a2c      	ldr	r2, [pc, #176]	; (32f0 <SystemInit+0xd8>)
  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    323e:	2001      	movs	r0, #1
    3240:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    3244:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    3246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
  LPC_SC->PLL0FEED  = 0x55;
    324a:	2255      	movs	r2, #85	; 0x55

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    324c:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    3254:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    3258:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    325c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    3260:	4b22      	ldr	r3, [pc, #136]	; (32ec <SystemInit+0xd4>)
    3262:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3266:	0151      	lsls	r1, r2, #5
    3268:	d5fa      	bpl.n	3260 <SystemInit+0x48>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    326a:	2203      	movs	r2, #3
    326c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    3270:	22aa      	movs	r2, #170	; 0xaa
    3272:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3276:	2255      	movs	r2, #85	; 0x55
    3278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    327c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
    3280:	4a1a      	ldr	r2, [pc, #104]	; (32ec <SystemInit+0xd4>)
    3282:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
    3286:	d0f9      	beq.n	327c <SystemInit+0x64>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
    3288:	2323      	movs	r3, #35	; 0x23
    328a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0xAA;
    328e:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PLL1FEED  = 0x55;
    3290:	2355      	movs	r3, #85	; 0x55

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    3292:	2001      	movs	r0, #1
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
  LPC_SC->PLL1FEED  = 0xAA;
    3294:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3298:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    329c:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    32a0:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    32a4:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    32a8:	4b10      	ldr	r3, [pc, #64]	; (32ec <SystemInit+0xd4>)
    32aa:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    32ae:	0552      	lsls	r2, r2, #21
    32b0:	d5fa      	bpl.n	32a8 <SystemInit+0x90>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    32b2:	2203      	movs	r2, #3
    32b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    32b8:	22aa      	movs	r2, #170	; 0xaa
    32ba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    32be:	2255      	movs	r2, #85	; 0x55
    32c0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    32c4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    32c8:	4a08      	ldr	r2, [pc, #32]	; (32ec <SystemInit+0xd4>)
    32ca:	f411 7f40 	tst.w	r1, #768	; 0x300
    32ce:	d0f9      	beq.n	32c4 <SystemInit+0xac>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    32d0:	4b08      	ldr	r3, [pc, #32]	; (32f4 <SystemInit+0xdc>)
    32d2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    32d6:	2300      	movs	r3, #0
    32d8:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = (LPC_SC->FLASHCFG & ~0x0000F000) | FLASHCFG_Val;
    32dc:	6813      	ldr	r3, [r2, #0]
    32de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
    32e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    32e6:	6013      	str	r3, [r2, #0]
    32e8:	4770      	bx	lr
    32ea:	bf00      	nop
    32ec:	400fc000 	.word	0x400fc000
    32f0:	00050063 	.word	0x00050063
    32f4:	042887de 	.word	0x042887de

000032f8 <__main>:
    32f8:	b508      	push	{r3, lr}
    32fa:	2000      	movs	r0, #0
    32fc:	4601      	mov	r1, r0
    32fe:	4602      	mov	r2, r0
    3300:	f000 fd82 	bl	3e08 <_initio>
    3304:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3308:	f7fe bedc 	b.w	20c4 <main>

0000330c <memset>:
    330c:	f002 bcf8 	b.w	5d00 <__aeabi_lowlevel_memset>

00003310 <malloc>:
    3310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3312:	4b31      	ldr	r3, [pc, #196]	; (33d8 <malloc+0xc8>)
    3314:	1cc5      	adds	r5, r0, #3
    3316:	681c      	ldr	r4, [r3, #0]
    3318:	08ad      	lsrs	r5, r5, #2
    331a:	b198      	cbz	r0, 3344 <malloc+0x34>
    331c:	461f      	mov	r7, r3
    331e:	2600      	movs	r6, #0
    3320:	f105 0e0a 	add.w	lr, r5, #10
    3324:	f105 0c03 	add.w	ip, r5, #3
    3328:	e005      	b.n	3336 <malloc+0x26>
    332a:	6823      	ldr	r3, [r4, #0]
    332c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    3330:	d014      	beq.n	335c <malloc+0x4c>
    3332:	4626      	mov	r6, r4
    3334:	68a4      	ldr	r4, [r4, #8]
    3336:	2c00      	cmp	r4, #0
    3338:	d1f7      	bne.n	332a <malloc+0x1a>
    333a:	300c      	adds	r0, #12
    333c:	f001 fd74 	bl	4e28 <_sbrk>
    3340:	1c43      	adds	r3, r0, #1
    3342:	d110      	bne.n	3366 <malloc+0x56>
    3344:	2000      	movs	r0, #0
    3346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3348:	6811      	ldr	r1, [r2, #0]
    334a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    334e:	d115      	bne.n	337c <malloc+0x6c>
    3350:	6851      	ldr	r1, [r2, #4]
    3352:	440b      	add	r3, r1
    3354:	3303      	adds	r3, #3
    3356:	6063      	str	r3, [r4, #4]
    3358:	6893      	ldr	r3, [r2, #8]
    335a:	60a3      	str	r3, [r4, #8]
    335c:	68a2      	ldr	r2, [r4, #8]
    335e:	6863      	ldr	r3, [r4, #4]
    3360:	2a00      	cmp	r2, #0
    3362:	d1f1      	bne.n	3348 <malloc+0x38>
    3364:	e00a      	b.n	337c <malloc+0x6c>
    3366:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    336a:	e880 0028 	stmia.w	r0, {r3, r5}
    336e:	6084      	str	r4, [r0, #8]
    3370:	b90e      	cbnz	r6, 3376 <malloc+0x66>
    3372:	6038      	str	r0, [r7, #0]
    3374:	e000      	b.n	3378 <malloc+0x68>
    3376:	60b0      	str	r0, [r6, #8]
    3378:	300c      	adds	r0, #12
    337a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    337c:	42ab      	cmp	r3, r5
    337e:	db07      	blt.n	3390 <malloc+0x80>
    3380:	459c      	cmp	ip, r3
    3382:	db05      	blt.n	3390 <malloc+0x80>
    3384:	4620      	mov	r0, r4
    3386:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    338a:	f840 3b0c 	str.w	r3, [r0], #12
    338e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3390:	4573      	cmp	r3, lr
    3392:	d911      	bls.n	33b8 <malloc+0xa8>
    3394:	4620      	mov	r0, r4
    3396:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    339a:	6065      	str	r5, [r4, #4]
    339c:	f840 1b0c 	str.w	r1, [r0], #12
    33a0:	eb00 0185 	add.w	r1, r0, r5, lsl #2
    33a4:	60a1      	str	r1, [r4, #8]
    33a6:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    33aa:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    33ae:	1b5d      	subs	r5, r3, r5
    33b0:	3d03      	subs	r5, #3
    33b2:	604d      	str	r5, [r1, #4]
    33b4:	608a      	str	r2, [r1, #8]
    33b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33b8:	2a00      	cmp	r2, #0
    33ba:	d1ba      	bne.n	3332 <malloc+0x22>
    33bc:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    33c0:	f001 fd32 	bl	4e28 <_sbrk>
    33c4:	3001      	adds	r0, #1
    33c6:	d0bd      	beq.n	3344 <malloc+0x34>
    33c8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    33cc:	e884 0028 	stmia.w	r4, {r3, r5}
    33d0:	f104 000c 	add.w	r0, r4, #12
    33d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33d6:	bf00      	nop
    33d8:	10001a40 	.word	0x10001a40

000033dc <free>:
    33dc:	b1a8      	cbz	r0, 340a <free+0x2e>
    33de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    33e2:	f840 3c0c 	str.w	r3, [r0, #-12]
    33e6:	f850 2c04 	ldr.w	r2, [r0, #-4]
    33ea:	b172      	cbz	r2, 340a <free+0x2e>
    33ec:	6813      	ldr	r3, [r2, #0]
    33ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    33f2:	d10a      	bne.n	340a <free+0x2e>
    33f4:	6853      	ldr	r3, [r2, #4]
    33f6:	f850 1c08 	ldr.w	r1, [r0, #-8]
    33fa:	440b      	add	r3, r1
    33fc:	3303      	adds	r3, #3
    33fe:	f840 3c08 	str.w	r3, [r0, #-8]
    3402:	6893      	ldr	r3, [r2, #8]
    3404:	f840 3c04 	str.w	r3, [r0, #-4]
    3408:	e7ed      	b.n	33e6 <free+0xa>
    340a:	4770      	bx	lr

0000340c <_Csys_alloc>:
    340c:	b510      	push	{r4, lr}
    340e:	f7ff ff7f 	bl	3310 <malloc>
    3412:	4604      	mov	r4, r0
    3414:	b928      	cbnz	r0, 3422 <_Csys_alloc+0x16>
    3416:	4904      	ldr	r1, [pc, #16]	; (3428 <_Csys_alloc+0x1c>)
    3418:	2217      	movs	r2, #23
    341a:	f002 fc9d 	bl	5d58 <__sys_write>
    341e:	f002 fc88 	bl	5d32 <__sys_appexit>
    3422:	4620      	mov	r0, r4
    3424:	bd10      	pop	{r4, pc}
    3426:	bf00      	nop
    3428:	00006944 	.word	0x00006944

0000342c <fp_round>:
    342c:	5c42      	ldrb	r2, [r0, r1]
    342e:	1843      	adds	r3, r0, r1
    3430:	2a34      	cmp	r2, #52	; 0x34
    3432:	dc01      	bgt.n	3438 <fp_round+0xc>
    3434:	2000      	movs	r0, #0
    3436:	4770      	bx	lr
    3438:	2a35      	cmp	r2, #53	; 0x35
    343a:	d106      	bne.n	344a <fp_round+0x1e>
    343c:	4619      	mov	r1, r3
    343e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    3442:	2a30      	cmp	r2, #48	; 0x30
    3444:	d0fb      	beq.n	343e <fp_round+0x12>
    3446:	2a00      	cmp	r2, #0
    3448:	d0f4      	beq.n	3434 <fp_round+0x8>
    344a:	461a      	mov	r2, r3
    344c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    3450:	2939      	cmp	r1, #57	; 0x39
    3452:	d102      	bne.n	345a <fp_round+0x2e>
    3454:	2130      	movs	r1, #48	; 0x30
    3456:	7011      	strb	r1, [r2, #0]
    3458:	e7f8      	b.n	344c <fp_round+0x20>
    345a:	3101      	adds	r1, #1
    345c:	7011      	strb	r1, [r2, #0]
    345e:	7802      	ldrb	r2, [r0, #0]
    3460:	2a30      	cmp	r2, #48	; 0x30
    3462:	d0e7      	beq.n	3434 <fp_round+0x8>
    3464:	1a1a      	subs	r2, r3, r0
    3466:	2a00      	cmp	r2, #0
    3468:	db03      	blt.n	3472 <fp_round+0x46>
    346a:	f813 2901 	ldrb.w	r2, [r3], #-1
    346e:	709a      	strb	r2, [r3, #2]
    3470:	e7f8      	b.n	3464 <fp_round+0x38>
    3472:	2001      	movs	r0, #1
    3474:	4770      	bx	lr

00003476 <pr_dec.constprop.1>:
    3476:	b510      	push	{r4, lr}
    3478:	1f8c      	subs	r4, r1, #6
    347a:	42a1      	cmp	r1, r4
    347c:	d00d      	beq.n	349a <pr_dec.constprop.1+0x24>
    347e:	230a      	movs	r3, #10
    3480:	fb90 f3f3 	sdiv	r3, r0, r3
    3484:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    3488:	3030      	adds	r0, #48	; 0x30
    348a:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
    348e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    3492:	f801 0901 	strb.w	r0, [r1], #-1
    3496:	4618      	mov	r0, r3
    3498:	e7ef      	b.n	347a <pr_dec.constprop.1+0x4>
    349a:	bd10      	pop	{r4, pc}

0000349c <sprintf>:
    349c:	b40e      	push	{r1, r2, r3}
    349e:	b530      	push	{r4, r5, lr}
    34a0:	4605      	mov	r5, r0
    34a2:	b090      	sub	sp, #64	; 0x40
    34a4:	ab13      	add	r3, sp, #76	; 0x4c
    34a6:	f853 4b04 	ldr.w	r4, [r3], #4
    34aa:	2100      	movs	r1, #0
    34ac:	2228      	movs	r2, #40	; 0x28
    34ae:	a806      	add	r0, sp, #24
    34b0:	9305      	str	r3, [sp, #20]
    34b2:	f7ff ff2b 	bl	330c <memset>
    34b6:	230a      	movs	r3, #10
    34b8:	9309      	str	r3, [sp, #36]	; 0x24
    34ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    34be:	9308      	str	r3, [sp, #32]
    34c0:	9b05      	ldr	r3, [sp, #20]
    34c2:	9400      	str	r4, [sp, #0]
    34c4:	9301      	str	r3, [sp, #4]
    34c6:	4b0f      	ldr	r3, [pc, #60]	; (3504 <sprintf+0x68>)
    34c8:	a806      	add	r0, sp, #24
    34ca:	9302      	str	r3, [sp, #8]
    34cc:	f04f 32ff 	mov.w	r2, #4294967295
    34d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    34d4:	9506      	str	r5, [sp, #24]
    34d6:	f000 fce9 	bl	3eac <__vfprintf>
    34da:	9b08      	ldr	r3, [sp, #32]
    34dc:	4604      	mov	r4, r0
    34de:	3b01      	subs	r3, #1
    34e0:	2b00      	cmp	r3, #0
    34e2:	9308      	str	r3, [sp, #32]
    34e4:	db03      	blt.n	34ee <sprintf+0x52>
    34e6:	9b06      	ldr	r3, [sp, #24]
    34e8:	2200      	movs	r2, #0
    34ea:	701a      	strb	r2, [r3, #0]
    34ec:	e003      	b.n	34f6 <sprintf+0x5a>
    34ee:	2000      	movs	r0, #0
    34f0:	a906      	add	r1, sp, #24
    34f2:	f001 fcdb 	bl	4eac <__flsbuf>
    34f6:	4620      	mov	r0, r4
    34f8:	b010      	add	sp, #64	; 0x40
    34fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    34fe:	b003      	add	sp, #12
    3500:	4770      	bx	lr
    3502:	bf00      	nop
    3504:	00003509 	.word	0x00003509

00003508 <fp_display>:
    3508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    350c:	4614      	mov	r4, r2
    350e:	f647 72f0 	movw	r2, #32752	; 0x7ff0
    3512:	684e      	ldr	r6, [r1, #4]
    3514:	b09f      	sub	sp, #124	; 0x7c
    3516:	9306      	str	r3, [sp, #24]
    3518:	f3c6 430f 	ubfx	r3, r6, #16, #16
    351c:	f023 030f 	bic.w	r3, r3, #15
    3520:	045b      	lsls	r3, r3, #17
    3522:	680f      	ldr	r7, [r1, #0]
    3524:	0c5b      	lsrs	r3, r3, #17
    3526:	4293      	cmp	r3, r2
    3528:	9005      	str	r0, [sp, #20]
    352a:	f8dd b0a4 	ldr.w	fp, [sp, #164]	; 0xa4
    352e:	9708      	str	r7, [sp, #32]
    3530:	9607      	str	r6, [sp, #28]
    3532:	d127      	bne.n	3584 <fp_display+0x7c>
    3534:	2300      	movs	r3, #0
    3536:	70e3      	strb	r3, [r4, #3]
    3538:	f3c6 0313 	ubfx	r3, r6, #0, #20
    353c:	433b      	orrs	r3, r7
    353e:	f04f 036e 	mov.w	r3, #110	; 0x6e
    3542:	d115      	bne.n	3570 <fp_display+0x68>
    3544:	2269      	movs	r2, #105	; 0x69
    3546:	7063      	strb	r3, [r4, #1]
    3548:	2e00      	cmp	r6, #0
    354a:	f04f 0366 	mov.w	r3, #102	; 0x66
    354e:	7022      	strb	r2, [r4, #0]
    3550:	70a3      	strb	r3, [r4, #2]
    3552:	da01      	bge.n	3558 <fp_display+0x50>
    3554:	4b84      	ldr	r3, [pc, #528]	; (3768 <fp_display+0x260>)
    3556:	e010      	b.n	357a <fp_display+0x72>
    3558:	9b06      	ldr	r3, [sp, #24]
    355a:	079a      	lsls	r2, r3, #30
    355c:	d406      	bmi.n	356c <fp_display+0x64>
    355e:	4a83      	ldr	r2, [pc, #524]	; (376c <fp_display+0x264>)
    3560:	f013 0f04 	tst.w	r3, #4
    3564:	4b82      	ldr	r3, [pc, #520]	; (3770 <fp_display+0x268>)
    3566:	bf08      	it	eq
    3568:	4613      	moveq	r3, r2
    356a:	e006      	b.n	357a <fp_display+0x72>
    356c:	4b81      	ldr	r3, [pc, #516]	; (3774 <fp_display+0x26c>)
    356e:	e004      	b.n	357a <fp_display+0x72>
    3570:	7023      	strb	r3, [r4, #0]
    3572:	2261      	movs	r2, #97	; 0x61
    3574:	70a3      	strb	r3, [r4, #2]
    3576:	4b7d      	ldr	r3, [pc, #500]	; (376c <fp_display+0x264>)
    3578:	7062      	strb	r2, [r4, #1]
    357a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    357c:	2003      	movs	r0, #3
    357e:	6013      	str	r3, [r2, #0]
    3580:	f000 bc3f 	b.w	3e02 <fp_display+0x8fa>
    3584:	9b05      	ldr	r3, [sp, #20]
    3586:	f023 0320 	bic.w	r3, r3, #32
    358a:	2b41      	cmp	r3, #65	; 0x41
    358c:	f000 8244 	beq.w	3a18 <fp_display+0x510>
    3590:	4638      	mov	r0, r7
    3592:	4631      	mov	r1, r6
    3594:	2200      	movs	r2, #0
    3596:	2300      	movs	r3, #0
    3598:	f002 fb28 	bl	5bec <__aeabi_dcmplt>
    359c:	b138      	cbz	r0, 35ae <fp_display+0xa6>
    359e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    35a2:	9a08      	ldr	r2, [sp, #32]
    35a4:	461e      	mov	r6, r3
    35a6:	2301      	movs	r3, #1
    35a8:	4617      	mov	r7, r2
    35aa:	9309      	str	r3, [sp, #36]	; 0x24
    35ac:	e000      	b.n	35b0 <fp_display+0xa8>
    35ae:	9009      	str	r0, [sp, #36]	; 0x24
    35b0:	4638      	mov	r0, r7
    35b2:	4631      	mov	r1, r6
    35b4:	2200      	movs	r2, #0
    35b6:	2300      	movs	r3, #0
    35b8:	f002 fb02 	bl	5bc0 <__aeabi_dcmpeq>
    35bc:	2800      	cmp	r0, #0
    35be:	f040 820d 	bne.w	39dc <fp_display+0x4d4>
    35c2:	f240 152d 	movw	r5, #301	; 0x12d
    35c6:	aa11      	add	r2, sp, #68	; 0x44
    35c8:	4638      	mov	r0, r7
    35ca:	4631      	mov	r1, r6
    35cc:	f001 fd70 	bl	50b0 <_frexpl>
    35d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    35d2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    35d6:	4355      	muls	r5, r2
    35d8:	f5a5 53ab 	sub.w	r3, r5, #5472	; 0x1560
    35dc:	3b1c      	subs	r3, #28
    35de:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    35e2:	fb93 f5f5 	sdiv	r5, r3, r5
    35e6:	2000      	movs	r0, #0
    35e8:	4963      	ldr	r1, [pc, #396]	; (3778 <fp_display+0x270>)
    35ea:	1aaa      	subs	r2, r5, r2
    35ec:	f001 fd8e 	bl	510c <_ldexpl>
    35f0:	2d00      	cmp	r5, #0
    35f2:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    35f6:	da06      	bge.n	3606 <fp_display+0xfe>
    35f8:	a355      	add	r3, pc, #340	; (adr r3, 3750 <fp_display+0x248>)
    35fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    35fe:	426e      	negs	r6, r5
    3600:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    3604:	e006      	b.n	3614 <fp_display+0x10c>
    3606:	4b5d      	ldr	r3, [pc, #372]	; (377c <fp_display+0x274>)
    3608:	f04f 0200 	mov.w	r2, #0
    360c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    3610:	d016      	beq.n	3640 <fp_display+0x138>
    3612:	462e      	mov	r6, r5
    3614:	07f3      	lsls	r3, r6, #31
    3616:	d509      	bpl.n	362c <fp_display+0x124>
    3618:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    361c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3620:	f001 ffc2 	bl	55a8 <__aeabi_dmul>
    3624:	2e01      	cmp	r6, #1
    3626:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    362a:	d009      	beq.n	3640 <fp_display+0x138>
    362c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3630:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3634:	f001 ffb8 	bl	55a8 <__aeabi_dmul>
    3638:	1076      	asrs	r6, r6, #1
    363a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    363e:	e7e9      	b.n	3614 <fp_display+0x10c>
    3640:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3644:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    3648:	f002 f83e 	bl	56c8 <__aeabi_ddiv>
    364c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3650:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3654:	a340      	add	r3, pc, #256	; (adr r3, 3758 <fp_display+0x250>)
    3656:	e9d3 2300 	ldrd	r2, r3, [r3]
    365a:	f002 fac7 	bl	5bec <__aeabi_dcmplt>
    365e:	b188      	cbz	r0, 3684 <fp_display+0x17c>
    3660:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3664:	2200      	movs	r2, #0
    3666:	4b46      	ldr	r3, [pc, #280]	; (3780 <fp_display+0x278>)
    3668:	f001 ff9e 	bl	55a8 <__aeabi_dmul>
    366c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3670:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3674:	2200      	movs	r2, #0
    3676:	4b42      	ldr	r3, [pc, #264]	; (3780 <fp_display+0x278>)
    3678:	f002 f826 	bl	56c8 <__aeabi_ddiv>
    367c:	3d01      	subs	r5, #1
    367e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3682:	e7e5      	b.n	3650 <fp_display+0x148>
    3684:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3688:	a335      	add	r3, pc, #212	; (adr r3, 3760 <fp_display+0x258>)
    368a:	e9d3 2300 	ldrd	r2, r3, [r3]
    368e:	f002 fb09 	bl	5ca4 <__aeabi_dcmpge>
    3692:	b188      	cbz	r0, 36b8 <fp_display+0x1b0>
    3694:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3698:	2200      	movs	r2, #0
    369a:	4b39      	ldr	r3, [pc, #228]	; (3780 <fp_display+0x278>)
    369c:	f002 f814 	bl	56c8 <__aeabi_ddiv>
    36a0:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    36a4:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    36a8:	2200      	movs	r2, #0
    36aa:	4b35      	ldr	r3, [pc, #212]	; (3780 <fp_display+0x278>)
    36ac:	f001 ff7c 	bl	55a8 <__aeabi_dmul>
    36b0:	3501      	adds	r5, #1
    36b2:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    36b6:	e7e5      	b.n	3684 <fp_display+0x17c>
    36b8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    36bc:	f002 fa32 	bl	5b24 <__aeabi_d2iz>
    36c0:	426b      	negs	r3, r5
    36c2:	ea13 0325 	ands.w	r3, r3, r5, asr #32
    36c6:	bf38      	it	cc
    36c8:	462b      	movcc	r3, r5
    36ca:	4682      	mov	sl, r0
    36cc:	930e      	str	r3, [sp, #56]	; 0x38
    36ce:	4650      	mov	r0, sl
    36d0:	f002 fa6c 	bl	5bac <__aeabi_i2d>
    36d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    36d6:	1aaa      	subs	r2, r5, r2
    36d8:	f001 fd18 	bl	510c <_ldexpl>
    36dc:	2200      	movs	r2, #0
    36de:	2300      	movs	r3, #0
    36e0:	2d00      	cmp	r5, #0
    36e2:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    36e6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    36ea:	da4b      	bge.n	3784 <fp_display+0x27c>
    36ec:	a118      	add	r1, pc, #96	; (adr r1, 3750 <fp_display+0x248>)
    36ee:	e9d1 0100 	ldrd	r0, r1, [r1]
    36f2:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    36f6:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    36fa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    36fe:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3702:	f04f 0800 	mov.w	r8, #0
    3706:	4642      	mov	r2, r8
    3708:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    370c:	464b      	mov	r3, r9
    370e:	f002 f883 	bl	5818 <__aeabi_dsub>
    3712:	4602      	mov	r2, r0
    3714:	460b      	mov	r3, r1
    3716:	4630      	mov	r0, r6
    3718:	4639      	mov	r1, r7
    371a:	f002 f969 	bl	59f0 <__aeabi_dadd>
    371e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    3722:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    3726:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    372a:	2200      	movs	r2, #0
    372c:	4b13      	ldr	r3, [pc, #76]	; (377c <fp_display+0x274>)
    372e:	f001 ff3b 	bl	55a8 <__aeabi_dmul>
    3732:	4602      	mov	r2, r0
    3734:	460b      	mov	r3, r1
    3736:	2000      	movs	r0, #0
    3738:	490f      	ldr	r1, [pc, #60]	; (3778 <fp_display+0x270>)
    373a:	f002 f86d 	bl	5818 <__aeabi_dsub>
    373e:	2200      	movs	r2, #0
    3740:	4b0e      	ldr	r3, [pc, #56]	; (377c <fp_display+0x274>)
    3742:	f001 ffc1 	bl	56c8 <__aeabi_ddiv>
    3746:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    374a:	e024      	b.n	3796 <fp_display+0x28e>
    374c:	f3af 8000 	nop.w
    3750:	9999999a 	.word	0x9999999a
    3754:	3fc99999 	.word	0x3fc99999
    3758:	00000000 	.word	0x00000000
    375c:	40f86a00 	.word	0x40f86a00
    3760:	00000000 	.word	0x00000000
    3764:	412e8480 	.word	0x412e8480
    3768:	00006b0e 	.word	0x00006b0e
    376c:	0000695b 	.word	0x0000695b
    3770:	00006ade 	.word	0x00006ade
    3774:	00006adc 	.word	0x00006adc
    3778:	3ff00000 	.word	0x3ff00000
    377c:	40140000 	.word	0x40140000
    3780:	40240000 	.word	0x40240000
    3784:	49ae      	ldr	r1, [pc, #696]	; (3a40 <fp_display+0x538>)
    3786:	f04f 0000 	mov.w	r0, #0
    378a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    378e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    3792:	f000 8089 	beq.w	38a8 <fp_display+0x3a0>
    3796:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    379a:	f01c 0f01 	tst.w	ip, #1
    379e:	d048      	beq.n	3832 <fp_display+0x32a>
    37a0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    37a4:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    37a8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    37ac:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    37b0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    37b4:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    37b8:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    37bc:	f001 fef4 	bl	55a8 <__aeabi_dmul>
    37c0:	4632      	mov	r2, r6
    37c2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    37c6:	463b      	mov	r3, r7
    37c8:	4640      	mov	r0, r8
    37ca:	4649      	mov	r1, r9
    37cc:	f002 f910 	bl	59f0 <__aeabi_dadd>
    37d0:	4602      	mov	r2, r0
    37d2:	460b      	mov	r3, r1
    37d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    37d8:	f001 fee6 	bl	55a8 <__aeabi_dmul>
    37dc:	4602      	mov	r2, r0
    37de:	460b      	mov	r3, r1
    37e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    37e4:	f002 f904 	bl	59f0 <__aeabi_dadd>
    37e8:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    37ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    37f0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    37f4:	f001 fed8 	bl	55a8 <__aeabi_dmul>
    37f8:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    37fc:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    3800:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3804:	f04f 0800 	mov.w	r8, #0
    3808:	4642      	mov	r2, r8
    380a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    380e:	464b      	mov	r3, r9
    3810:	f002 f802 	bl	5818 <__aeabi_dsub>
    3814:	4602      	mov	r2, r0
    3816:	460b      	mov	r3, r1
    3818:	4630      	mov	r0, r6
    381a:	4639      	mov	r1, r7
    381c:	f002 f8e8 	bl	59f0 <__aeabi_dadd>
    3820:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    3824:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    3828:	f1bc 0f01 	cmp.w	ip, #1
    382c:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
    3830:	d03a      	beq.n	38a8 <fp_display+0x3a0>
    3832:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3836:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    383a:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    383e:	4602      	mov	r2, r0
    3840:	460b      	mov	r3, r1
    3842:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    3846:	f002 f8d3 	bl	59f0 <__aeabi_dadd>
    384a:	4632      	mov	r2, r6
    384c:	463b      	mov	r3, r7
    384e:	f002 f8cf 	bl	59f0 <__aeabi_dadd>
    3852:	4602      	mov	r2, r0
    3854:	460b      	mov	r3, r1
    3856:	4640      	mov	r0, r8
    3858:	4649      	mov	r1, r9
    385a:	f001 fea5 	bl	55a8 <__aeabi_dmul>
    385e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    3862:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3866:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    386a:	f001 fe9d 	bl	55a8 <__aeabi_dmul>
    386e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    3872:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    3876:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    387a:	f04f 0800 	mov.w	r8, #0
    387e:	4642      	mov	r2, r8
    3880:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    3884:	464b      	mov	r3, r9
    3886:	f001 ffc7 	bl	5818 <__aeabi_dsub>
    388a:	4602      	mov	r2, r0
    388c:	460b      	mov	r3, r1
    388e:	4630      	mov	r0, r6
    3890:	4639      	mov	r1, r7
    3892:	f002 f8ad 	bl	59f0 <__aeabi_dadd>
    3896:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    389a:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    389e:	ea4f 0c6c 	mov.w	ip, ip, asr #1
    38a2:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    38a6:	e778      	b.n	379a <fp_display+0x292>
    38a8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    38ac:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    38b0:	f002 f9ca 	bl	5c48 <__aeabi_dcmple>
    38b4:	b910      	cbnz	r0, 38bc <fp_display+0x3b4>
    38b6:	f10a 3aff 	add.w	sl, sl, #4294967295
    38ba:	e708      	b.n	36ce <fp_display+0x1c6>
    38bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    38c0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    38c4:	f001 ffa8 	bl	5818 <__aeabi_dsub>
    38c8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    38cc:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    38d0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    38d4:	f001 ffa0 	bl	5818 <__aeabi_dsub>
    38d8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    38dc:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    38e0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    38e4:	f001 fef0 	bl	56c8 <__aeabi_ddiv>
    38e8:	a353      	add	r3, pc, #332	; (adr r3, 3a38 <fp_display+0x530>)
    38ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    38ee:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    38f2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    38f6:	f001 fe57 	bl	55a8 <__aeabi_dmul>
    38fa:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    38fe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3902:	f002 f90f 	bl	5b24 <__aeabi_d2iz>
    3906:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    390a:	4680      	mov	r8, r0
    390c:	f002 f94e 	bl	5bac <__aeabi_i2d>
    3910:	4602      	mov	r2, r0
    3912:	460b      	mov	r3, r1
    3914:	4630      	mov	r0, r6
    3916:	4639      	mov	r1, r7
    3918:	f001 ff7e 	bl	5818 <__aeabi_dsub>
    391c:	a346      	add	r3, pc, #280	; (adr r3, 3a38 <fp_display+0x530>)
    391e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3922:	f001 fe41 	bl	55a8 <__aeabi_dmul>
    3926:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    392a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    392e:	f002 f8f9 	bl	5b24 <__aeabi_d2iz>
    3932:	4606      	mov	r6, r0
    3934:	2e00      	cmp	r6, #0
    3936:	da06      	bge.n	3946 <fp_display+0x43e>
    3938:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
    393c:	f506 7610 	add.w	r6, r6, #576	; 0x240
    3940:	f108 38ff 	add.w	r8, r8, #4294967295
    3944:	e7f6      	b.n	3934 <fp_display+0x42c>
    3946:	4b3f      	ldr	r3, [pc, #252]	; (3a44 <fp_display+0x53c>)
    3948:	429e      	cmp	r6, r3
    394a:	dd06      	ble.n	395a <fp_display+0x452>
    394c:	f5a6 2674 	sub.w	r6, r6, #999424	; 0xf4000
    3950:	f5a6 7610 	sub.w	r6, r6, #576	; 0x240
    3954:	f108 0801 	add.w	r8, r8, #1
    3958:	e7f5      	b.n	3946 <fp_display+0x43e>
    395a:	f1b8 0f00 	cmp.w	r8, #0
    395e:	da06      	bge.n	396e <fp_display+0x466>
    3960:	f508 2874 	add.w	r8, r8, #999424	; 0xf4000
    3964:	f508 7810 	add.w	r8, r8, #576	; 0x240
    3968:	f10a 3aff 	add.w	sl, sl, #4294967295
    396c:	e7f5      	b.n	395a <fp_display+0x452>
    396e:	4598      	cmp	r8, r3
    3970:	dd06      	ble.n	3980 <fp_display+0x478>
    3972:	f5a8 2874 	sub.w	r8, r8, #999424	; 0xf4000
    3976:	f5a8 7810 	sub.w	r8, r8, #576	; 0x240
    397a:	f10a 0a01 	add.w	sl, sl, #1
    397e:	e7f6      	b.n	396e <fp_display+0x466>
    3980:	4b31      	ldr	r3, [pc, #196]	; (3a48 <fp_display+0x540>)
    3982:	4650      	mov	r0, sl
    3984:	459a      	cmp	sl, r3
    3986:	dc11      	bgt.n	39ac <fp_display+0x4a4>
    3988:	3301      	adds	r3, #1
    398a:	fb98 f2f3 	sdiv	r2, r8, r3
    398e:	fb96 f3f3 	sdiv	r3, r6, r3
    3992:	482e      	ldr	r0, [pc, #184]	; (3a4c <fp_display+0x544>)
    3994:	210a      	movs	r1, #10
    3996:	fb00 8802 	mla	r8, r0, r2, r8
    399a:	fb00 6603 	mla	r6, r0, r3, r6
    399e:	fb01 2a0a 	mla	sl, r1, sl, r2
    39a2:	fb01 3808 	mla	r8, r1, r8, r3
    39a6:	434e      	muls	r6, r1
    39a8:	3d01      	subs	r5, #1
    39aa:	e01c      	b.n	39e6 <fp_display+0x4de>
    39ac:	4b25      	ldr	r3, [pc, #148]	; (3a44 <fp_display+0x53c>)
    39ae:	459a      	cmp	sl, r3
    39b0:	dd19      	ble.n	39e6 <fp_display+0x4de>
    39b2:	220a      	movs	r2, #10
    39b4:	fb9a faf2 	sdiv	sl, sl, r2
    39b8:	f06f 0309 	mvn.w	r3, #9
    39bc:	fb03 000a 	mla	r0, r3, sl, r0
    39c0:	4923      	ldr	r1, [pc, #140]	; (3a50 <fp_display+0x548>)
    39c2:	3501      	adds	r5, #1
    39c4:	fb01 8000 	mla	r0, r1, r0, r8
    39c8:	fb90 f8f2 	sdiv	r8, r0, r2
    39cc:	fb03 0308 	mla	r3, r3, r8, r0
    39d0:	fb01 6603 	mla	r6, r1, r3, r6
    39d4:	3605      	adds	r6, #5
    39d6:	fb96 f6f2 	sdiv	r6, r6, r2
    39da:	e004      	b.n	39e6 <fp_display+0x4de>
    39dc:	2600      	movs	r6, #0
    39de:	46b0      	mov	r8, r6
    39e0:	46b2      	mov	sl, r6
    39e2:	f06f 0504 	mvn.w	r5, #4
    39e6:	4621      	mov	r1, r4
    39e8:	2730      	movs	r7, #48	; 0x30
    39ea:	f801 7b06 	strb.w	r7, [r1], #6
    39ee:	4650      	mov	r0, sl
    39f0:	f7ff fd41 	bl	3476 <pr_dec.constprop.1>
    39f4:	4640      	mov	r0, r8
    39f6:	f104 010c 	add.w	r1, r4, #12
    39fa:	f7ff fd3c 	bl	3476 <pr_dec.constprop.1>
    39fe:	4630      	mov	r0, r6
    3a00:	f104 0112 	add.w	r1, r4, #18
    3a04:	f7ff fd37 	bl	3476 <pr_dec.constprop.1>
    3a08:	2300      	movs	r3, #0
    3a0a:	7523      	strb	r3, [r4, #20]
    3a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a0e:	3505      	adds	r5, #5
    3a10:	74e7      	strb	r7, [r4, #19]
    3a12:	ea43 0585 	orr.w	r5, r3, r5, lsl #2
    3a16:	e000      	b.n	3a1a <fp_display+0x512>
    3a18:	2500      	movs	r5, #0
    3a1a:	07ef      	lsls	r7, r5, #31
    3a1c:	d501      	bpl.n	3a22 <fp_display+0x51a>
    3a1e:	4b0d      	ldr	r3, [pc, #52]	; (3a54 <fp_display+0x54c>)
    3a20:	e01f      	b.n	3a62 <fp_display+0x55a>
    3a22:	9b06      	ldr	r3, [sp, #24]
    3a24:	079e      	lsls	r6, r3, #30
    3a26:	d41b      	bmi.n	3a60 <fp_display+0x558>
    3a28:	4a0b      	ldr	r2, [pc, #44]	; (3a58 <fp_display+0x550>)
    3a2a:	f013 0f04 	tst.w	r3, #4
    3a2e:	4b0b      	ldr	r3, [pc, #44]	; (3a5c <fp_display+0x554>)
    3a30:	bf08      	it	eq
    3a32:	4613      	moveq	r3, r2
    3a34:	e015      	b.n	3a62 <fp_display+0x55a>
    3a36:	bf00      	nop
    3a38:	00000000 	.word	0x00000000
    3a3c:	412e8480 	.word	0x412e8480
    3a40:	40140000 	.word	0x40140000
    3a44:	000f423f 	.word	0x000f423f
    3a48:	0001869f 	.word	0x0001869f
    3a4c:	fffe7960 	.word	0xfffe7960
    3a50:	000f4240 	.word	0x000f4240
    3a54:	00006b0e 	.word	0x00006b0e
    3a58:	0000695b 	.word	0x0000695b
    3a5c:	00006ade 	.word	0x00006ade
    3a60:	4bad      	ldr	r3, [pc, #692]	; (3d18 <fp_display+0x810>)
    3a62:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    3a64:	f025 0501 	bic.w	r5, r5, #1
    3a68:	6013      	str	r3, [r2, #0]
    3a6a:	2304      	movs	r3, #4
    3a6c:	fb95 f5f3 	sdiv	r5, r5, r3
    3a70:	9b05      	ldr	r3, [sp, #20]
    3a72:	f8db 6000 	ldr.w	r6, [fp]
    3a76:	2b61      	cmp	r3, #97	; 0x61
    3a78:	d010      	beq.n	3a9c <fp_display+0x594>
    3a7a:	dc06      	bgt.n	3a8a <fp_display+0x582>
    3a7c:	2b45      	cmp	r3, #69	; 0x45
    3a7e:	d067      	beq.n	3b50 <fp_display+0x648>
    3a80:	2b47      	cmp	r3, #71	; 0x47
    3a82:	d048      	beq.n	3b16 <fp_display+0x60e>
    3a84:	2b41      	cmp	r3, #65	; 0x41
    3a86:	d144      	bne.n	3b12 <fp_display+0x60a>
    3a88:	e008      	b.n	3a9c <fp_display+0x594>
    3a8a:	9b05      	ldr	r3, [sp, #20]
    3a8c:	2b66      	cmp	r3, #102	; 0x66
    3a8e:	f000 80df 	beq.w	3c50 <fp_display+0x748>
    3a92:	2b67      	cmp	r3, #103	; 0x67
    3a94:	d03f      	beq.n	3b16 <fp_display+0x60e>
    3a96:	2b65      	cmp	r3, #101	; 0x65
    3a98:	d13b      	bne.n	3b12 <fp_display+0x60a>
    3a9a:	e059      	b.n	3b50 <fp_display+0x648>
    3a9c:	9b07      	ldr	r3, [sp, #28]
    3a9e:	2000      	movs	r0, #0
    3aa0:	f3c3 0113 	ubfx	r1, r3, #0, #20
    3aa4:	9b08      	ldr	r3, [sp, #32]
    3aa6:	4318      	orrs	r0, r3
    3aa8:	9b07      	ldr	r3, [sp, #28]
    3aaa:	f3c3 520a 	ubfx	r2, r3, #20, #11
    3aae:	b112      	cbz	r2, 3ab6 <fp_display+0x5ae>
    3ab0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
    3ab4:	e004      	b.n	3ac0 <fp_display+0x5b8>
    3ab6:	ea50 0301 	orrs.w	r3, r0, r1
    3aba:	4b98      	ldr	r3, [pc, #608]	; (3d1c <fp_display+0x814>)
    3abc:	bf08      	it	eq
    3abe:	2300      	moveq	r3, #0
    3ac0:	2a00      	cmp	r2, #0
    3ac2:	bf0c      	ite	eq
    3ac4:	2230      	moveq	r2, #48	; 0x30
    3ac6:	2231      	movne	r2, #49	; 0x31
    3ac8:	b966      	cbnz	r6, 3ae4 <fp_display+0x5dc>
    3aca:	9d06      	ldr	r5, [sp, #24]
    3acc:	072d      	lsls	r5, r5, #28
    3ace:	d409      	bmi.n	3ae4 <fp_display+0x5dc>
    3ad0:	9d05      	ldr	r5, [sp, #20]
    3ad2:	4620      	mov	r0, r4
    3ad4:	4992      	ldr	r1, [pc, #584]	; (3d20 <fp_display+0x818>)
    3ad6:	4c93      	ldr	r4, [pc, #588]	; (3d24 <fp_display+0x81c>)
    3ad8:	2d61      	cmp	r5, #97	; 0x61
    3ada:	bf08      	it	eq
    3adc:	4621      	moveq	r1, r4
    3ade:	f7ff fcdd 	bl	349c <sprintf>
    3ae2:	e00c      	b.n	3afe <fp_display+0x5f6>
    3ae4:	e9cd 0100 	strd	r0, r1, [sp]
    3ae8:	9302      	str	r3, [sp, #8]
    3aea:	4620      	mov	r0, r4
    3aec:	4b8e      	ldr	r3, [pc, #568]	; (3d28 <fp_display+0x820>)
    3aee:	498f      	ldr	r1, [pc, #572]	; (3d2c <fp_display+0x824>)
    3af0:	9c05      	ldr	r4, [sp, #20]
    3af2:	2c61      	cmp	r4, #97	; 0x61
    3af4:	bf18      	it	ne
    3af6:	4619      	movne	r1, r3
    3af8:	4633      	mov	r3, r6
    3afa:	f7ff fccf 	bl	349c <sprintf>
    3afe:	4a8c      	ldr	r2, [pc, #560]	; (3d30 <fp_display+0x828>)
    3b00:	4b8c      	ldr	r3, [pc, #560]	; (3d34 <fp_display+0x82c>)
    3b02:	9907      	ldr	r1, [sp, #28]
    3b04:	ea33 0321 	bics.w	r3, r3, r1, asr #32
    3b08:	bf28      	it	cs
    3b0a:	4613      	movcs	r3, r2
    3b0c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    3b0e:	6013      	str	r3, [r2, #0]
    3b10:	e177      	b.n	3e02 <fp_display+0x8fa>
    3b12:	2367      	movs	r3, #103	; 0x67
    3b14:	9305      	str	r3, [sp, #20]
    3b16:	9b06      	ldr	r3, [sp, #24]
    3b18:	2e00      	cmp	r6, #0
    3b1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    3b1e:	9306      	str	r3, [sp, #24]
    3b20:	bfdc      	itt	le
    3b22:	2301      	movle	r3, #1
    3b24:	f8cb 3000 	strle.w	r3, [fp]
    3b28:	f8db 1000 	ldr.w	r1, [fp]
    3b2c:	4620      	mov	r0, r4
    3b2e:	2911      	cmp	r1, #17
    3b30:	bfd4      	ite	le
    3b32:	3101      	addle	r1, #1
    3b34:	2112      	movgt	r1, #18
    3b36:	f7ff fc79 	bl	342c <fp_round>
    3b3a:	f8db 3000 	ldr.w	r3, [fp]
    3b3e:	4405      	add	r5, r0
    3b40:	429d      	cmp	r5, r3
    3b42:	db7e      	blt.n	3c42 <fp_display+0x73a>
    3b44:	3b01      	subs	r3, #1
    3b46:	f8cb 3000 	str.w	r3, [fp]
    3b4a:	9b05      	ldr	r3, [sp, #20]
    3b4c:	3b02      	subs	r3, #2
    3b4e:	9305      	str	r3, [sp, #20]
    3b50:	f8db 3000 	ldr.w	r3, [fp]
    3b54:	2b11      	cmp	r3, #17
    3b56:	bfc1      	itttt	gt
    3b58:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    3b5a:	3b11      	subgt	r3, #17
    3b5c:	6013      	strgt	r3, [r2, #0]
    3b5e:	2311      	movgt	r3, #17
    3b60:	bfc8      	it	gt
    3b62:	f8cb 3000 	strgt.w	r3, [fp]
    3b66:	9b06      	ldr	r3, [sp, #24]
    3b68:	f8db 6000 	ldr.w	r6, [fp]
    3b6c:	f413 6700 	ands.w	r7, r3, #2048	; 0x800
    3b70:	f106 0602 	add.w	r6, r6, #2
    3b74:	d104      	bne.n	3b80 <fp_display+0x678>
    3b76:	4620      	mov	r0, r4
    3b78:	4631      	mov	r1, r6
    3b7a:	f7ff fc57 	bl	342c <fp_round>
    3b7e:	4405      	add	r5, r0
    3b80:	7863      	ldrb	r3, [r4, #1]
    3b82:	7023      	strb	r3, [r4, #0]
    3b84:	f8db 3000 	ldr.w	r3, [fp]
    3b88:	b923      	cbnz	r3, 3b94 <fp_display+0x68c>
    3b8a:	f640 0308 	movw	r3, #2056	; 0x808
    3b8e:	9a06      	ldr	r2, [sp, #24]
    3b90:	4013      	ands	r3, r2
    3b92:	b113      	cbz	r3, 3b9a <fp_display+0x692>
    3b94:	232e      	movs	r3, #46	; 0x2e
    3b96:	7063      	strb	r3, [r4, #1]
    3b98:	e000      	b.n	3b9c <fp_display+0x694>
    3b9a:	2601      	movs	r6, #1
    3b9c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    3b9e:	681b      	ldr	r3, [r3, #0]
    3ba0:	2b00      	cmp	r3, #0
    3ba2:	bfc2      	ittt	gt
    3ba4:	233e      	movgt	r3, #62	; 0x3e
    3ba6:	55a3      	strbgt	r3, [r4, r6]
    3ba8:	3601      	addgt	r6, #1
    3baa:	b177      	cbz	r7, 3bca <fp_display+0x6c2>
    3bac:	9b06      	ldr	r3, [sp, #24]
    3bae:	071f      	lsls	r7, r3, #28
    3bb0:	d40b      	bmi.n	3bca <fp_display+0x6c2>
    3bb2:	19a2      	adds	r2, r4, r6
    3bb4:	1b16      	subs	r6, r2, r4
    3bb6:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
    3bba:	2b30      	cmp	r3, #48	; 0x30
    3bbc:	d0fa      	beq.n	3bb4 <fp_display+0x6ac>
    3bbe:	2b3e      	cmp	r3, #62	; 0x3e
    3bc0:	d0f8      	beq.n	3bb4 <fp_display+0x6ac>
    3bc2:	2b2e      	cmp	r3, #46	; 0x2e
    3bc4:	bf08      	it	eq
    3bc6:	f106 36ff 	addeq.w	r6, r6, #4294967295
    3bca:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3bce:	2d00      	cmp	r5, #0
    3bd0:	55a3      	strb	r3, [r4, r6]
    3bd2:	bfb8      	it	lt
    3bd4:	426d      	neglt	r5, r5
    3bd6:	f106 0302 	add.w	r3, r6, #2
    3bda:	f106 0201 	add.w	r2, r6, #1
    3bde:	bfb5      	itete	lt
    3be0:	212d      	movlt	r1, #45	; 0x2d
    3be2:	212b      	movge	r1, #43	; 0x2b
    3be4:	461e      	movlt	r6, r3
    3be6:	461e      	movge	r6, r3
    3be8:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
    3bec:	54a1      	strb	r1, [r4, r2]
    3bee:	db0a      	blt.n	3c06 <fp_display+0x6fe>
    3bf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3bf4:	fb95 f2f2 	sdiv	r2, r5, r2
    3bf8:	f102 0130 	add.w	r1, r2, #48	; 0x30
    3bfc:	54e1      	strb	r1, [r4, r3]
    3bfe:	494e      	ldr	r1, [pc, #312]	; (3d38 <fp_display+0x830>)
    3c00:	1c5e      	adds	r6, r3, #1
    3c02:	fb01 5502 	mla	r5, r1, r2, r5
    3c06:	2d63      	cmp	r5, #99	; 0x63
    3c08:	dd0a      	ble.n	3c20 <fp_display+0x718>
    3c0a:	2364      	movs	r3, #100	; 0x64
    3c0c:	fb95 f3f3 	sdiv	r3, r5, r3
    3c10:	f103 0230 	add.w	r2, r3, #48	; 0x30
    3c14:	55a2      	strb	r2, [r4, r6]
    3c16:	f06f 0263 	mvn.w	r2, #99	; 0x63
    3c1a:	fb02 5503 	mla	r5, r2, r3, r5
    3c1e:	3601      	adds	r6, #1
    3c20:	230a      	movs	r3, #10
    3c22:	fb95 f3f3 	sdiv	r3, r5, r3
    3c26:	f103 0230 	add.w	r2, r3, #48	; 0x30
    3c2a:	55a2      	strb	r2, [r4, r6]
    3c2c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    3c30:	3530      	adds	r5, #48	; 0x30
    3c32:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
    3c36:	4434      	add	r4, r6
    3c38:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    3c3c:	7063      	strb	r3, [r4, #1]
    3c3e:	1cb0      	adds	r0, r6, #2
    3c40:	e0df      	b.n	3e02 <fp_display+0x8fa>
    3c42:	1d2a      	adds	r2, r5, #4
    3c44:	f6ff af7e 	blt.w	3b44 <fp_display+0x63c>
    3c48:	43ea      	mvns	r2, r5
    3c4a:	4413      	add	r3, r2
    3c4c:	f8cb 3000 	str.w	r3, [fp]
    3c50:	9a06      	ldr	r2, [sp, #24]
    3c52:	2d00      	cmp	r5, #0
    3c54:	f8db 3000 	ldr.w	r3, [fp]
    3c58:	f402 6700 	and.w	r7, r2, #2048	; 0x800
    3c5c:	da4c      	bge.n	3cf8 <fp_display+0x7f0>
    3c5e:	f1c5 0800 	rsb	r8, r5, #0
    3c62:	1c5a      	adds	r2, r3, #1
    3c64:	4590      	cmp	r8, r2
    3c66:	dd09      	ble.n	3c7c <fp_display+0x774>
    3c68:	2330      	movs	r3, #48	; 0x30
    3c6a:	7023      	strb	r3, [r4, #0]
    3c6c:	232e      	movs	r3, #46	; 0x2e
    3c6e:	7063      	strb	r3, [r4, #1]
    3c70:	f8db 3000 	ldr.w	r3, [fp]
    3c74:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    3c76:	2602      	movs	r6, #2
    3c78:	6013      	str	r3, [r2, #0]
    3c7a:	e038      	b.n	3cee <fp_display+0x7e6>
    3c7c:	442b      	add	r3, r5
    3c7e:	1c9e      	adds	r6, r3, #2
    3c80:	2e12      	cmp	r6, #18
    3c82:	bfc1      	itttt	gt
    3c84:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    3c86:	3b11      	subgt	r3, #17
    3c88:	6013      	strgt	r3, [r2, #0]
    3c8a:	2613      	movgt	r6, #19
    3c8c:	b95f      	cbnz	r7, 3ca6 <fp_display+0x79e>
    3c8e:	4620      	mov	r0, r4
    3c90:	4631      	mov	r1, r6
    3c92:	f7ff fbcb 	bl	342c <fp_round>
    3c96:	b130      	cbz	r0, 3ca6 <fp_display+0x79e>
    3c98:	ea7f 0805 	mvns.w	r8, r5
    3c9c:	f106 0601 	add.w	r6, r6, #1
    3ca0:	d101      	bne.n	3ca6 <fp_display+0x79e>
    3ca2:	7863      	ldrb	r3, [r4, #1]
    3ca4:	e00d      	b.n	3cc2 <fp_display+0x7ba>
    3ca6:	f1b8 0f01 	cmp.w	r8, #1
    3caa:	eb04 0306 	add.w	r3, r4, r6
    3cae:	d10c      	bne.n	3cca <fp_display+0x7c2>
    3cb0:	1b1a      	subs	r2, r3, r4
    3cb2:	2a00      	cmp	r2, #0
    3cb4:	dd03      	ble.n	3cbe <fp_display+0x7b6>
    3cb6:	f813 2901 	ldrb.w	r2, [r3], #-1
    3cba:	709a      	strb	r2, [r3, #2]
    3cbc:	e7f8      	b.n	3cb0 <fp_display+0x7a8>
    3cbe:	3601      	adds	r6, #1
    3cc0:	2330      	movs	r3, #48	; 0x30
    3cc2:	7023      	strb	r3, [r4, #0]
    3cc4:	232e      	movs	r3, #46	; 0x2e
    3cc6:	7063      	strb	r3, [r4, #1]
    3cc8:	e011      	b.n	3cee <fp_display+0x7e6>
    3cca:	1b1a      	subs	r2, r3, r4
    3ccc:	2a00      	cmp	r2, #0
    3cce:	dd03      	ble.n	3cd8 <fp_display+0x7d0>
    3cd0:	f813 2901 	ldrb.w	r2, [r3], #-1
    3cd4:	70da      	strb	r2, [r3, #3]
    3cd6:	e7f8      	b.n	3cca <fp_display+0x7c2>
    3cd8:	2330      	movs	r3, #48	; 0x30
    3cda:	7023      	strb	r3, [r4, #0]
    3cdc:	232e      	movs	r3, #46	; 0x2e
    3cde:	7063      	strb	r3, [r4, #1]
    3ce0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    3ce2:	233c      	movs	r3, #60	; 0x3c
    3ce4:	70a3      	strb	r3, [r4, #2]
    3ce6:	f108 33ff 	add.w	r3, r8, #4294967295
    3cea:	3602      	adds	r6, #2
    3cec:	6013      	str	r3, [r2, #0]
    3cee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    3cf0:	681b      	ldr	r3, [r3, #0]
    3cf2:	2b00      	cmp	r3, #0
    3cf4:	dc38      	bgt.n	3d68 <fp_display+0x860>
    3cf6:	e06c      	b.n	3dd2 <fp_display+0x8ca>
    3cf8:	eb05 0803 	add.w	r8, r5, r3
    3cfc:	f108 0602 	add.w	r6, r8, #2
    3d00:	2e12      	cmp	r6, #18
    3d02:	dd50      	ble.n	3da6 <fp_display+0x89e>
    3d04:	b9d7      	cbnz	r7, 3d3c <fp_display+0x834>
    3d06:	4620      	mov	r0, r4
    3d08:	2113      	movs	r1, #19
    3d0a:	f7ff fb8f 	bl	342c <fp_round>
    3d0e:	b1a8      	cbz	r0, 3d3c <fp_display+0x834>
    3d10:	3501      	adds	r5, #1
    3d12:	2614      	movs	r6, #20
    3d14:	e013      	b.n	3d3e <fp_display+0x836>
    3d16:	bf00      	nop
    3d18:	00006adc 	.word	0x00006adc
    3d1c:	fffffc01 	.word	0xfffffc01
    3d20:	00006ae8 	.word	0x00006ae8
    3d24:	00006ae0 	.word	0x00006ae0
    3d28:	00006aff 	.word	0x00006aff
    3d2c:	00006af0 	.word	0x00006af0
    3d30:	00006b0e 	.word	0x00006b0e
    3d34:	0000695b 	.word	0x0000695b
    3d38:	fffffc18 	.word	0xfffffc18
    3d3c:	2613      	movs	r6, #19
    3d3e:	1e72      	subs	r2, r6, #1
    3d40:	4295      	cmp	r5, r2
    3d42:	4623      	mov	r3, r4
    3d44:	da14      	bge.n	3d70 <fp_display+0x868>
    3d46:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3d4a:	f803 2c01 	strb.w	r2, [r3, #-1]
    3d4e:	1b1a      	subs	r2, r3, r4
    3d50:	42aa      	cmp	r2, r5
    3d52:	ddf8      	ble.n	3d46 <fp_display+0x83e>
    3d54:	1963      	adds	r3, r4, r5
    3d56:	222e      	movs	r2, #46	; 0x2e
    3d58:	705a      	strb	r2, [r3, #1]
    3d5a:	f8db 3000 	ldr.w	r3, [fp]
    3d5e:	441d      	add	r5, r3
    3d60:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    3d62:	3d11      	subs	r5, #17
    3d64:	601d      	str	r5, [r3, #0]
    3d66:	b3a5      	cbz	r5, 3dd2 <fp_display+0x8ca>
    3d68:	233e      	movs	r3, #62	; 0x3e
    3d6a:	55a3      	strb	r3, [r4, r6]
    3d6c:	3601      	adds	r6, #1
    3d6e:	e030      	b.n	3dd2 <fp_display+0x8ca>
    3d70:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    3d74:	f803 1c01 	strb.w	r1, [r3, #-1]
    3d78:	1b19      	subs	r1, r3, r4
    3d7a:	4291      	cmp	r1, r2
    3d7c:	dbf8      	blt.n	3d70 <fp_display+0x868>
    3d7e:	19a3      	adds	r3, r4, r6
    3d80:	223c      	movs	r2, #60	; 0x3c
    3d82:	f803 2c01 	strb.w	r2, [r3, #-1]
    3d86:	1bad      	subs	r5, r5, r6
    3d88:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    3d8a:	222e      	movs	r2, #46	; 0x2e
    3d8c:	3502      	adds	r5, #2
    3d8e:	601d      	str	r5, [r3, #0]
    3d90:	55a2      	strb	r2, [r4, r6]
    3d92:	f8db 2000 	ldr.w	r2, [fp]
    3d96:	1c73      	adds	r3, r6, #1
    3d98:	b1d2      	cbz	r2, 3dd0 <fp_display+0x8c8>
    3d9a:	992b      	ldr	r1, [sp, #172]	; 0xac
    3d9c:	3602      	adds	r6, #2
    3d9e:	600a      	str	r2, [r1, #0]
    3da0:	223e      	movs	r2, #62	; 0x3e
    3da2:	54e2      	strb	r2, [r4, r3]
    3da4:	e015      	b.n	3dd2 <fp_display+0x8ca>
    3da6:	b93f      	cbnz	r7, 3db8 <fp_display+0x8b0>
    3da8:	4620      	mov	r0, r4
    3daa:	4631      	mov	r1, r6
    3dac:	f7ff fb3e 	bl	342c <fp_round>
    3db0:	b110      	cbz	r0, 3db8 <fp_display+0x8b0>
    3db2:	3501      	adds	r5, #1
    3db4:	f108 0603 	add.w	r6, r8, #3
    3db8:	4623      	mov	r3, r4
    3dba:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3dbe:	f803 2c01 	strb.w	r2, [r3, #-1]
    3dc2:	1b1a      	subs	r2, r3, r4
    3dc4:	42aa      	cmp	r2, r5
    3dc6:	ddf8      	ble.n	3dba <fp_display+0x8b2>
    3dc8:	4425      	add	r5, r4
    3dca:	232e      	movs	r3, #46	; 0x2e
    3dcc:	706b      	strb	r3, [r5, #1]
    3dce:	e000      	b.n	3dd2 <fp_display+0x8ca>
    3dd0:	461e      	mov	r6, r3
    3dd2:	b16f      	cbz	r7, 3df0 <fp_display+0x8e8>
    3dd4:	9b06      	ldr	r3, [sp, #24]
    3dd6:	0718      	lsls	r0, r3, #28
    3dd8:	d412      	bmi.n	3e00 <fp_display+0x8f8>
    3dda:	19a0      	adds	r0, r4, r6
    3ddc:	1b06      	subs	r6, r0, r4
    3dde:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
    3de2:	2b30      	cmp	r3, #48	; 0x30
    3de4:	d0fa      	beq.n	3ddc <fp_display+0x8d4>
    3de6:	2b3e      	cmp	r3, #62	; 0x3e
    3de8:	d0f8      	beq.n	3ddc <fp_display+0x8d4>
    3dea:	2b2e      	cmp	r3, #46	; 0x2e
    3dec:	d108      	bne.n	3e00 <fp_display+0x8f8>
    3dee:	e005      	b.n	3dfc <fp_display+0x8f4>
    3df0:	f8db 3000 	ldr.w	r3, [fp]
    3df4:	b923      	cbnz	r3, 3e00 <fp_display+0x8f8>
    3df6:	9b06      	ldr	r3, [sp, #24]
    3df8:	0719      	lsls	r1, r3, #28
    3dfa:	d401      	bmi.n	3e00 <fp_display+0x8f8>
    3dfc:	1e70      	subs	r0, r6, #1
    3dfe:	e000      	b.n	3e02 <fp_display+0x8fa>
    3e00:	4630      	mov	r0, r6
    3e02:	b01f      	add	sp, #124	; 0x7c
    3e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003e08 <_initio>:
    3e08:	b510      	push	{r4, lr}
    3e0a:	2100      	movs	r1, #0
    3e0c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3e10:	4822      	ldr	r0, [pc, #136]	; (3e9c <_initio+0x94>)
    3e12:	f7ff fa7b 	bl	330c <memset>
    3e16:	20c0      	movs	r0, #192	; 0xc0
    3e18:	f7ff faf8 	bl	340c <_Csys_alloc>
    3e1c:	4c20      	ldr	r4, [pc, #128]	; (3ea0 <_initio+0x98>)
    3e1e:	2100      	movs	r1, #0
    3e20:	22c0      	movs	r2, #192	; 0xc0
    3e22:	6020      	str	r0, [r4, #0]
    3e24:	f7ff fa72 	bl	330c <memset>
    3e28:	6820      	ldr	r0, [r4, #0]
    3e2a:	2300      	movs	r3, #0
    3e2c:	4c1b      	ldr	r4, [pc, #108]	; (3e9c <_initio+0x94>)
    3e2e:	2228      	movs	r2, #40	; 0x28
    3e30:	2118      	movs	r1, #24
    3e32:	fb02 4203 	mla	r2, r2, r3, r4
    3e36:	fb01 0103 	mla	r1, r1, r3, r0
    3e3a:	3301      	adds	r3, #1
    3e3c:	2b08      	cmp	r3, #8
    3e3e:	6251      	str	r1, [r2, #36]	; 0x24
    3e40:	d1f4      	bne.n	3e2c <_initio+0x24>
    3e42:	4622      	mov	r2, r4
    3e44:	4917      	ldr	r1, [pc, #92]	; (3ea4 <_initio+0x9c>)
    3e46:	2000      	movs	r0, #0
    3e48:	f001 f8d1 	bl	4fee <_fdopen>
    3e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3e50:	4620      	mov	r0, r4
    3e52:	2100      	movs	r1, #0
    3e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3e58:	f000 ff38 	bl	4ccc <setvbuf>
    3e5c:	f104 0228 	add.w	r2, r4, #40	; 0x28
    3e60:	4911      	ldr	r1, [pc, #68]	; (3ea8 <_initio+0xa0>)
    3e62:	2001      	movs	r0, #1
    3e64:	f001 f8c3 	bl	4fee <_fdopen>
    3e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3e6c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3e70:	2100      	movs	r1, #0
    3e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3e76:	f000 ff29 	bl	4ccc <setvbuf>
    3e7a:	f104 0250 	add.w	r2, r4, #80	; 0x50
    3e7e:	490a      	ldr	r1, [pc, #40]	; (3ea8 <_initio+0xa0>)
    3e80:	2002      	movs	r0, #2
    3e82:	f001 f8b4 	bl	4fee <_fdopen>
    3e86:	f104 0050 	add.w	r0, r4, #80	; 0x50
    3e8a:	2100      	movs	r1, #0
    3e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e98:	f000 bf18 	b.w	4ccc <setvbuf>
    3e9c:	10001900 	.word	0x10001900
    3ea0:	100018fc 	.word	0x100018fc
    3ea4:	00006b10 	.word	0x00006b10
    3ea8:	00006b12 	.word	0x00006b12

00003eac <__vfprintf>:
    3eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3eb0:	4604      	mov	r4, r0
    3eb2:	b0ad      	sub	sp, #180	; 0xb4
    3eb4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    3eb8:	f8dd 80dc 	ldr.w	r8, [sp, #220]	; 0xdc
    3ebc:	2200      	movs	r2, #0
    3ebe:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    3ec0:	9205      	str	r2, [sp, #20]
    3ec2:	7818      	ldrb	r0, [r3, #0]
    3ec4:	1c5d      	adds	r5, r3, #1
    3ec6:	2800      	cmp	r0, #0
    3ec8:	f000 863d 	beq.w	4b46 <__vfprintf+0xc9a>
    3ecc:	2825      	cmp	r0, #37	; 0x25
    3ece:	d102      	bne.n	3ed6 <__vfprintf+0x2a>
    3ed0:	462a      	mov	r2, r5
    3ed2:	2700      	movs	r7, #0
    3ed4:	e023      	b.n	3f1e <__vfprintf+0x72>
    3ed6:	9b05      	ldr	r3, [sp, #20]
    3ed8:	ea4f 7be3 	mov.w	fp, r3, asr #31
    3edc:	461a      	mov	r2, r3
    3ede:	1c5e      	adds	r6, r3, #1
    3ee0:	465b      	mov	r3, fp
    3ee2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    3ee6:	4552      	cmp	r2, sl
    3ee8:	eb73 030b 	sbcs.w	r3, r3, fp
    3eec:	f280 8627 	bge.w	4b3e <__vfprintf+0xc92>
    3ef0:	68a3      	ldr	r3, [r4, #8]
    3ef2:	3b01      	subs	r3, #1
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	60a3      	str	r3, [r4, #8]
    3ef8:	db05      	blt.n	3f06 <__vfprintf+0x5a>
    3efa:	6823      	ldr	r3, [r4, #0]
    3efc:	1c5a      	adds	r2, r3, #1
    3efe:	6022      	str	r2, [r4, #0]
    3f00:	7018      	strb	r0, [r3, #0]
    3f02:	f000 be1c 	b.w	4b3e <__vfprintf+0xc92>
    3f06:	4621      	mov	r1, r4
    3f08:	f000 ffd0 	bl	4eac <__flsbuf>
    3f0c:	f000 be17 	b.w	4b3e <__vfprintf+0xc92>
    3f10:	d90b      	bls.n	3f2a <__vfprintf+0x7e>
    3f12:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
    3f16:	d111      	bne.n	3f3c <__vfprintf+0x90>
    3f18:	f047 0701 	orr.w	r7, r7, #1
    3f1c:	462a      	mov	r2, r5
    3f1e:	f815 9b01 	ldrb.w	r9, [r5], #1
    3f22:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
    3f26:	d1f3      	bne.n	3f10 <__vfprintf+0x64>
    3f28:	e00e      	b.n	3f48 <__vfprintf+0x9c>
    3f2a:	f1b9 0f20 	cmp.w	r9, #32
    3f2e:	d00e      	beq.n	3f4e <__vfprintf+0xa2>
    3f30:	f1b9 0f23 	cmp.w	r9, #35	; 0x23
    3f34:	d10e      	bne.n	3f54 <__vfprintf+0xa8>
    3f36:	f047 0708 	orr.w	r7, r7, #8
    3f3a:	e7ef      	b.n	3f1c <__vfprintf+0x70>
    3f3c:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    3f40:	d108      	bne.n	3f54 <__vfprintf+0xa8>
    3f42:	f447 7700 	orr.w	r7, r7, #512	; 0x200
    3f46:	e7e9      	b.n	3f1c <__vfprintf+0x70>
    3f48:	f047 0702 	orr.w	r7, r7, #2
    3f4c:	e7e6      	b.n	3f1c <__vfprintf+0x70>
    3f4e:	f047 0704 	orr.w	r7, r7, #4
    3f52:	e7e3      	b.n	3f1c <__vfprintf+0x70>
    3f54:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    3f58:	d001      	beq.n	3f5e <__vfprintf+0xb2>
    3f5a:	2300      	movs	r3, #0
    3f5c:	e00d      	b.n	3f7a <__vfprintf+0xce>
    3f5e:	f8d8 3000 	ldr.w	r3, [r8]
    3f62:	f108 0104 	add.w	r1, r8, #4
    3f66:	2b00      	cmp	r3, #0
    3f68:	bfbc      	itt	lt
    3f6a:	425b      	neglt	r3, r3
    3f6c:	f087 0701 	eorlt.w	r7, r7, #1
    3f70:	1c95      	adds	r5, r2, #2
    3f72:	f892 9001 	ldrb.w	r9, [r2, #1]
    3f76:	4688      	mov	r8, r1
    3f78:	e00a      	b.n	3f90 <__vfprintf+0xe4>
    3f7a:	f1a9 0230 	sub.w	r2, r9, #48	; 0x30
    3f7e:	b2d1      	uxtb	r1, r2
    3f80:	2909      	cmp	r1, #9
    3f82:	d805      	bhi.n	3f90 <__vfprintf+0xe4>
    3f84:	210a      	movs	r1, #10
    3f86:	fb01 2303 	mla	r3, r1, r3, r2
    3f8a:	f815 9b01 	ldrb.w	r9, [r5], #1
    3f8e:	e7f4      	b.n	3f7a <__vfprintf+0xce>
    3f90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3f94:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
    3f98:	930f      	str	r3, [sp, #60]	; 0x3c
    3f9a:	d124      	bne.n	3fe6 <__vfprintf+0x13a>
    3f9c:	f895 9000 	ldrb.w	r9, [r5]
    3fa0:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    3fa4:	d003      	beq.n	3fae <__vfprintf+0x102>
    3fa6:	2300      	movs	r3, #0
    3fa8:	3501      	adds	r5, #1
    3faa:	9306      	str	r3, [sp, #24]
    3fac:	e008      	b.n	3fc0 <__vfprintf+0x114>
    3fae:	f8d8 3000 	ldr.w	r3, [r8]
    3fb2:	f895 9001 	ldrb.w	r9, [r5, #1]
    3fb6:	9306      	str	r3, [sp, #24]
    3fb8:	f108 0804 	add.w	r8, r8, #4
    3fbc:	3502      	adds	r5, #2
    3fbe:	e00c      	b.n	3fda <__vfprintf+0x12e>
    3fc0:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    3fc4:	b2da      	uxtb	r2, r3
    3fc6:	2a09      	cmp	r2, #9
    3fc8:	d807      	bhi.n	3fda <__vfprintf+0x12e>
    3fca:	9906      	ldr	r1, [sp, #24]
    3fcc:	220a      	movs	r2, #10
    3fce:	fb02 3301 	mla	r3, r2, r1, r3
    3fd2:	f815 9b01 	ldrb.w	r9, [r5], #1
    3fd6:	9306      	str	r3, [sp, #24]
    3fd8:	e7f2      	b.n	3fc0 <__vfprintf+0x114>
    3fda:	9b06      	ldr	r3, [sp, #24]
    3fdc:	2b00      	cmp	r3, #0
    3fde:	db02      	blt.n	3fe6 <__vfprintf+0x13a>
    3fe0:	f047 0710 	orr.w	r7, r7, #16
    3fe4:	e001      	b.n	3fea <__vfprintf+0x13e>
    3fe6:	2300      	movs	r3, #0
    3fe8:	9306      	str	r3, [sp, #24]
    3fea:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    3fee:	d10d      	bne.n	400c <__vfprintf+0x160>
    3ff0:	f895 9000 	ldrb.w	r9, [r5]
    3ff4:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    3ff8:	bf03      	ittte	eq
    3ffa:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    3ffe:	f047 0760 	orreq.w	r7, r7, #96	; 0x60
    4002:	3502      	addeq	r5, #2
    4004:	3501      	addne	r5, #1
    4006:	bf18      	it	ne
    4008:	f047 0720 	orrne.w	r7, r7, #32
    400c:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
    4010:	d002      	beq.n	4018 <__vfprintf+0x16c>
    4012:	f1b9 0f71 	cmp.w	r9, #113	; 0x71
    4016:	d104      	bne.n	4022 <__vfprintf+0x176>
    4018:	f895 9000 	ldrb.w	r9, [r5]
    401c:	f047 0760 	orr.w	r7, r7, #96	; 0x60
    4020:	e01f      	b.n	4062 <__vfprintf+0x1b6>
    4022:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    4026:	d10e      	bne.n	4046 <__vfprintf+0x19a>
    4028:	f895 9000 	ldrb.w	r9, [r5]
    402c:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    4030:	bf03      	ittte	eq
    4032:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    4036:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
    403a:	3502      	addeq	r5, #2
    403c:	3501      	addne	r5, #1
    403e:	bf18      	it	ne
    4040:	f047 0780 	orrne.w	r7, r7, #128	; 0x80
    4044:	e00e      	b.n	4064 <__vfprintf+0x1b8>
    4046:	f1b9 0f6a 	cmp.w	r9, #106	; 0x6a
    404a:	d102      	bne.n	4052 <__vfprintf+0x1a6>
    404c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    4050:	e005      	b.n	405e <__vfprintf+0x1b2>
    4052:	f1b9 0f7a 	cmp.w	r9, #122	; 0x7a
    4056:	d002      	beq.n	405e <__vfprintf+0x1b2>
    4058:	f1b9 0f74 	cmp.w	r9, #116	; 0x74
    405c:	d102      	bne.n	4064 <__vfprintf+0x1b8>
    405e:	f895 9000 	ldrb.w	r9, [r5]
    4062:	3501      	adds	r5, #1
    4064:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    4068:	dc25      	bgt.n	40b6 <__vfprintf+0x20a>
    406a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    406e:	f280 826e 	bge.w	454e <__vfprintf+0x6a2>
    4072:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    4076:	f000 826a 	beq.w	454e <__vfprintf+0x6a2>
    407a:	dc0c      	bgt.n	4096 <__vfprintf+0x1ea>
    407c:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    4080:	f000 825f 	beq.w	4542 <__vfprintf+0x696>
    4084:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    4088:	f000 8261 	beq.w	454e <__vfprintf+0x6a2>
    408c:	f1b9 0f00 	cmp.w	r9, #0
    4090:	f000 80b4 	beq.w	41fc <__vfprintf+0x350>
    4094:	e031      	b.n	40fa <__vfprintf+0x24e>
    4096:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    409a:	f000 8252 	beq.w	4542 <__vfprintf+0x696>
    409e:	dc04      	bgt.n	40aa <__vfprintf+0x1fe>
    40a0:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    40a4:	f000 8171 	beq.w	438a <__vfprintf+0x4de>
    40a8:	e027      	b.n	40fa <__vfprintf+0x24e>
    40aa:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
    40ae:	d01e      	beq.n	40ee <__vfprintf+0x242>
    40b0:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    40b4:	e00c      	b.n	40d0 <__vfprintf+0x224>
    40b6:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    40ba:	f000 81b4 	beq.w	4426 <__vfprintf+0x57a>
    40be:	dc0a      	bgt.n	40d6 <__vfprintf+0x22a>
    40c0:	f1b9 0f6e 	cmp.w	r9, #110	; 0x6e
    40c4:	f000 809f 	beq.w	4206 <__vfprintf+0x35a>
    40c8:	f300 81b6 	bgt.w	4438 <__vfprintf+0x58c>
    40cc:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    40d0:	f000 81f4 	beq.w	44bc <__vfprintf+0x610>
    40d4:	e011      	b.n	40fa <__vfprintf+0x24e>
    40d6:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    40da:	f000 81cd 	beq.w	4478 <__vfprintf+0x5cc>
    40de:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    40e2:	f000 8179 	beq.w	43d8 <__vfprintf+0x52c>
    40e6:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
    40ea:	d106      	bne.n	40fa <__vfprintf+0x24e>
    40ec:	e0ae      	b.n	424c <__vfprintf+0x3a0>
    40ee:	f108 0304 	add.w	r3, r8, #4
    40f2:	930e      	str	r3, [sp, #56]	; 0x38
    40f4:	f8d8 9000 	ldr.w	r9, [r8]
    40f8:	e001      	b.n	40fe <__vfprintf+0x252>
    40fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    40fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4100:	f103 3aff 	add.w	sl, r3, #4294967295
    4104:	f017 0301 	ands.w	r3, r7, #1
    4108:	9306      	str	r3, [sp, #24]
    410a:	d12e      	bne.n	416a <__vfprintf+0x2be>
    410c:	f417 7f00 	tst.w	r7, #512	; 0x200
    4110:	bf14      	ite	ne
    4112:	f04f 0830 	movne.w	r8, #48	; 0x30
    4116:	f04f 0820 	moveq.w	r8, #32
    411a:	2600      	movs	r6, #0
    411c:	2700      	movs	r7, #0
    411e:	9b05      	ldr	r3, [sp, #20]
    4120:	199a      	adds	r2, r3, r6
    4122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4124:	f1a3 0a02 	sub.w	sl, r3, #2
    4128:	ebba 0a06 	subs.w	sl, sl, r6
    412c:	d41c      	bmi.n	4168 <__vfprintf+0x2bc>
    412e:	9b05      	ldr	r3, [sp, #20]
    4130:	18f0      	adds	r0, r6, r3
    4132:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    4136:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    413a:	4290      	cmp	r0, r2
    413c:	eb71 0303 	sbcs.w	r3, r1, r3
    4140:	da0e      	bge.n	4160 <__vfprintf+0x2b4>
    4142:	68a2      	ldr	r2, [r4, #8]
    4144:	3a01      	subs	r2, #1
    4146:	2a00      	cmp	r2, #0
    4148:	60a2      	str	r2, [r4, #8]
    414a:	db05      	blt.n	4158 <__vfprintf+0x2ac>
    414c:	6822      	ldr	r2, [r4, #0]
    414e:	1c51      	adds	r1, r2, #1
    4150:	6021      	str	r1, [r4, #0]
    4152:	f882 8000 	strb.w	r8, [r2]
    4156:	e003      	b.n	4160 <__vfprintf+0x2b4>
    4158:	4640      	mov	r0, r8
    415a:	4621      	mov	r1, r4
    415c:	f000 fea6 	bl	4eac <__flsbuf>
    4160:	3601      	adds	r6, #1
    4162:	f147 0700 	adc.w	r7, r7, #0
    4166:	e7da      	b.n	411e <__vfprintf+0x272>
    4168:	9205      	str	r2, [sp, #20]
    416a:	9b05      	ldr	r3, [sp, #20]
    416c:	17d9      	asrs	r1, r3, #31
    416e:	461a      	mov	r2, r3
    4170:	f103 0b01 	add.w	fp, r3, #1
    4174:	460b      	mov	r3, r1
    4176:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    417a:	4282      	cmp	r2, r0
    417c:	418b      	sbcs	r3, r1
    417e:	da0e      	bge.n	419e <__vfprintf+0x2f2>
    4180:	68a3      	ldr	r3, [r4, #8]
    4182:	3b01      	subs	r3, #1
    4184:	2b00      	cmp	r3, #0
    4186:	60a3      	str	r3, [r4, #8]
    4188:	db05      	blt.n	4196 <__vfprintf+0x2ea>
    418a:	6823      	ldr	r3, [r4, #0]
    418c:	1c5a      	adds	r2, r3, #1
    418e:	6022      	str	r2, [r4, #0]
    4190:	f883 9000 	strb.w	r9, [r3]
    4194:	e003      	b.n	419e <__vfprintf+0x2f2>
    4196:	4648      	mov	r0, r9
    4198:	4621      	mov	r1, r4
    419a:	f000 fe87 	bl	4eac <__flsbuf>
    419e:	9b06      	ldr	r3, [sp, #24]
    41a0:	b91b      	cbnz	r3, 41aa <__vfprintf+0x2fe>
    41a2:	f8cd b014 	str.w	fp, [sp, #20]
    41a6:	f000 bcc7 	b.w	4b38 <__vfprintf+0xc8c>
    41aa:	2600      	movs	r6, #0
    41ac:	2700      	movs	r7, #0
    41ae:	43f3      	mvns	r3, r6
    41b0:	eb13 0f0a 	cmn.w	r3, sl
    41b4:	d41b      	bmi.n	41ee <__vfprintf+0x342>
    41b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    41ba:	eb16 020b 	adds.w	r2, r6, fp
    41be:	eb47 73eb 	adc.w	r3, r7, fp, asr #31
    41c2:	4282      	cmp	r2, r0
    41c4:	418b      	sbcs	r3, r1
    41c6:	da0e      	bge.n	41e6 <__vfprintf+0x33a>
    41c8:	68a3      	ldr	r3, [r4, #8]
    41ca:	3b01      	subs	r3, #1
    41cc:	2b00      	cmp	r3, #0
    41ce:	60a3      	str	r3, [r4, #8]
    41d0:	db05      	blt.n	41de <__vfprintf+0x332>
    41d2:	6823      	ldr	r3, [r4, #0]
    41d4:	1c5a      	adds	r2, r3, #1
    41d6:	6022      	str	r2, [r4, #0]
    41d8:	2220      	movs	r2, #32
    41da:	701a      	strb	r2, [r3, #0]
    41dc:	e003      	b.n	41e6 <__vfprintf+0x33a>
    41de:	2020      	movs	r0, #32
    41e0:	4621      	mov	r1, r4
    41e2:	f000 fe63 	bl	4eac <__flsbuf>
    41e6:	3601      	adds	r6, #1
    41e8:	f147 0700 	adc.w	r7, r7, #0
    41ec:	e7df      	b.n	41ae <__vfprintf+0x302>
    41ee:	465b      	mov	r3, fp
    41f0:	f1ba 0f00 	cmp.w	sl, #0
    41f4:	bfa8      	it	ge
    41f6:	4453      	addge	r3, sl
    41f8:	f000 bc9d 	b.w	4b36 <__vfprintf+0xc8a>
    41fc:	3d01      	subs	r5, #1
    41fe:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    4202:	f000 bc99 	b.w	4b38 <__vfprintf+0xc8c>
    4206:	f108 0304 	add.w	r3, r8, #4
    420a:	f017 0f40 	tst.w	r7, #64	; 0x40
    420e:	930e      	str	r3, [sp, #56]	; 0x38
    4210:	f8d8 3000 	ldr.w	r3, [r8]
    4214:	d006      	beq.n	4224 <__vfprintf+0x378>
    4216:	9a05      	ldr	r2, [sp, #20]
    4218:	4610      	mov	r0, r2
    421a:	17d1      	asrs	r1, r2, #31
    421c:	e9c3 0100 	strd	r0, r1, [r3]
    4220:	f000 bc8a 	b.w	4b38 <__vfprintf+0xc8c>
    4224:	06be      	lsls	r6, r7, #26
    4226:	d40d      	bmi.n	4244 <__vfprintf+0x398>
    4228:	05f8      	lsls	r0, r7, #23
    422a:	d504      	bpl.n	4236 <__vfprintf+0x38a>
    422c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    4230:	701a      	strb	r2, [r3, #0]
    4232:	f000 bc81 	b.w	4b38 <__vfprintf+0xc8c>
    4236:	0639      	lsls	r1, r7, #24
    4238:	d504      	bpl.n	4244 <__vfprintf+0x398>
    423a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    423e:	801a      	strh	r2, [r3, #0]
    4240:	f000 bc7a 	b.w	4b38 <__vfprintf+0xc8c>
    4244:	9a05      	ldr	r2, [sp, #20]
    4246:	601a      	str	r2, [r3, #0]
    4248:	f000 bc76 	b.w	4b38 <__vfprintf+0xc8c>
    424c:	f108 0304 	add.w	r3, r8, #4
    4250:	930e      	str	r3, [sp, #56]	; 0x38
    4252:	f8d8 9000 	ldr.w	r9, [r8]
    4256:	4bab      	ldr	r3, [pc, #684]	; (4504 <__vfprintf+0x658>)
    4258:	f1b9 0f00 	cmp.w	r9, #0
    425c:	bf08      	it	eq
    425e:	4699      	moveq	r9, r3
    4260:	4648      	mov	r0, r9
    4262:	f000 fd81 	bl	4d68 <strlen>
    4266:	06fa      	lsls	r2, r7, #27
    4268:	4682      	mov	sl, r0
    426a:	d503      	bpl.n	4274 <__vfprintf+0x3c8>
    426c:	9b06      	ldr	r3, [sp, #24]
    426e:	4298      	cmp	r0, r3
    4270:	bfa8      	it	ge
    4272:	469a      	movge	sl, r3
    4274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4276:	ebca 0b03 	rsb	fp, sl, r3
    427a:	f017 0301 	ands.w	r3, r7, #1
    427e:	9306      	str	r3, [sp, #24]
    4280:	d131      	bne.n	42e6 <__vfprintf+0x43a>
    4282:	f417 7f00 	tst.w	r7, #512	; 0x200
    4286:	bf14      	ite	ne
    4288:	f04f 0830 	movne.w	r8, #48	; 0x30
    428c:	f04f 0820 	moveq.w	r8, #32
    4290:	2600      	movs	r6, #0
    4292:	2700      	movs	r7, #0
    4294:	f10b 32ff 	add.w	r2, fp, #4294967295
    4298:	1b91      	subs	r1, r2, r6
    429a:	2900      	cmp	r1, #0
    429c:	db1c      	blt.n	42d8 <__vfprintf+0x42c>
    429e:	9b05      	ldr	r3, [sp, #20]
    42a0:	18f0      	adds	r0, r6, r3
    42a2:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    42a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    42aa:	4290      	cmp	r0, r2
    42ac:	eb71 0303 	sbcs.w	r3, r1, r3
    42b0:	da0e      	bge.n	42d0 <__vfprintf+0x424>
    42b2:	68a2      	ldr	r2, [r4, #8]
    42b4:	3a01      	subs	r2, #1
    42b6:	2a00      	cmp	r2, #0
    42b8:	60a2      	str	r2, [r4, #8]
    42ba:	db05      	blt.n	42c8 <__vfprintf+0x41c>
    42bc:	6822      	ldr	r2, [r4, #0]
    42be:	1c51      	adds	r1, r2, #1
    42c0:	6021      	str	r1, [r4, #0]
    42c2:	f882 8000 	strb.w	r8, [r2]
    42c6:	e003      	b.n	42d0 <__vfprintf+0x424>
    42c8:	4640      	mov	r0, r8
    42ca:	4621      	mov	r1, r4
    42cc:	f000 fdee 	bl	4eac <__flsbuf>
    42d0:	3601      	adds	r6, #1
    42d2:	f147 0700 	adc.w	r7, r7, #0
    42d6:	e7dd      	b.n	4294 <__vfprintf+0x3e8>
    42d8:	9b05      	ldr	r3, [sp, #20]
    42da:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    42de:	445b      	add	r3, fp
    42e0:	9305      	str	r3, [sp, #20]
    42e2:	ebcb 0b02 	rsb	fp, fp, r2
    42e6:	2600      	movs	r6, #0
    42e8:	2700      	movs	r7, #0
    42ea:	45b2      	cmp	sl, r6
    42ec:	9b05      	ldr	r3, [sp, #20]
    42ee:	dd1c      	ble.n	432a <__vfprintf+0x47e>
    42f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    42f4:	18f2      	adds	r2, r6, r3
    42f6:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    42fa:	4282      	cmp	r2, r0
    42fc:	418b      	sbcs	r3, r1
    42fe:	da10      	bge.n	4322 <__vfprintf+0x476>
    4300:	68a3      	ldr	r3, [r4, #8]
    4302:	3b01      	subs	r3, #1
    4304:	2b00      	cmp	r3, #0
    4306:	60a3      	str	r3, [r4, #8]
    4308:	eb09 0306 	add.w	r3, r9, r6
    430c:	db05      	blt.n	431a <__vfprintf+0x46e>
    430e:	6822      	ldr	r2, [r4, #0]
    4310:	1c51      	adds	r1, r2, #1
    4312:	6021      	str	r1, [r4, #0]
    4314:	781b      	ldrb	r3, [r3, #0]
    4316:	7013      	strb	r3, [r2, #0]
    4318:	e003      	b.n	4322 <__vfprintf+0x476>
    431a:	7818      	ldrb	r0, [r3, #0]
    431c:	4621      	mov	r1, r4
    431e:	f000 fdc5 	bl	4eac <__flsbuf>
    4322:	3601      	adds	r6, #1
    4324:	f147 0700 	adc.w	r7, r7, #0
    4328:	e7df      	b.n	42ea <__vfprintf+0x43e>
    432a:	f1ba 0f00 	cmp.w	sl, #0
    432e:	bfa8      	it	ge
    4330:	4453      	addge	r3, sl
    4332:	9305      	str	r3, [sp, #20]
    4334:	9b06      	ldr	r3, [sp, #24]
    4336:	2b00      	cmp	r3, #0
    4338:	f000 83fe 	beq.w	4b38 <__vfprintf+0xc8c>
    433c:	2600      	movs	r6, #0
    433e:	2700      	movs	r7, #0
    4340:	43f3      	mvns	r3, r6
    4342:	eb13 0f0b 	cmn.w	r3, fp
    4346:	9b05      	ldr	r3, [sp, #20]
    4348:	d41a      	bmi.n	4380 <__vfprintf+0x4d4>
    434a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    434e:	18f2      	adds	r2, r6, r3
    4350:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    4354:	4282      	cmp	r2, r0
    4356:	418b      	sbcs	r3, r1
    4358:	da0e      	bge.n	4378 <__vfprintf+0x4cc>
    435a:	68a3      	ldr	r3, [r4, #8]
    435c:	3b01      	subs	r3, #1
    435e:	2b00      	cmp	r3, #0
    4360:	60a3      	str	r3, [r4, #8]
    4362:	db05      	blt.n	4370 <__vfprintf+0x4c4>
    4364:	6823      	ldr	r3, [r4, #0]
    4366:	1c5a      	adds	r2, r3, #1
    4368:	6022      	str	r2, [r4, #0]
    436a:	2220      	movs	r2, #32
    436c:	701a      	strb	r2, [r3, #0]
    436e:	e003      	b.n	4378 <__vfprintf+0x4cc>
    4370:	2020      	movs	r0, #32
    4372:	4621      	mov	r1, r4
    4374:	f000 fd9a 	bl	4eac <__flsbuf>
    4378:	3601      	adds	r6, #1
    437a:	f147 0700 	adc.w	r7, r7, #0
    437e:	e7df      	b.n	4340 <__vfprintf+0x494>
    4380:	f1bb 0f00 	cmp.w	fp, #0
    4384:	bfa8      	it	ge
    4386:	445b      	addge	r3, fp
    4388:	e3d5      	b.n	4b36 <__vfprintf+0xc8a>
    438a:	067b      	lsls	r3, r7, #25
    438c:	d509      	bpl.n	43a2 <__vfprintf+0x4f6>
    438e:	f108 0807 	add.w	r8, r8, #7
    4392:	f028 0807 	bic.w	r8, r8, #7
    4396:	f108 0308 	add.w	r3, r8, #8
    439a:	930e      	str	r3, [sp, #56]	; 0x38
    439c:	e9d8 2300 	ldrd	r2, r3, [r8]
    43a0:	e005      	b.n	43ae <__vfprintf+0x502>
    43a2:	f108 0304 	add.w	r3, r8, #4
    43a6:	f8d8 2000 	ldr.w	r2, [r8]
    43aa:	930e      	str	r3, [sp, #56]	; 0x38
    43ac:	2300      	movs	r3, #0
    43ae:	063e      	lsls	r6, r7, #24
    43b0:	d501      	bpl.n	43b6 <__vfprintf+0x50a>
    43b2:	b292      	uxth	r2, r2
    43b4:	e003      	b.n	43be <__vfprintf+0x512>
    43b6:	05f8      	lsls	r0, r7, #23
    43b8:	d502      	bpl.n	43c0 <__vfprintf+0x514>
    43ba:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    43be:	2300      	movs	r3, #0
    43c0:	4951      	ldr	r1, [pc, #324]	; (4508 <__vfprintf+0x65c>)
    43c2:	f017 0f08 	tst.w	r7, #8
    43c6:	4851      	ldr	r0, [pc, #324]	; (450c <__vfprintf+0x660>)
    43c8:	bf08      	it	eq
    43ca:	4608      	moveq	r0, r1
    43cc:	06f9      	lsls	r1, r7, #27
    43ce:	f140 80d6 	bpl.w	457e <__vfprintf+0x6d2>
    43d2:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    43d6:	e0d2      	b.n	457e <__vfprintf+0x6d2>
    43d8:	067b      	lsls	r3, r7, #25
    43da:	d509      	bpl.n	43f0 <__vfprintf+0x544>
    43dc:	f108 0807 	add.w	r8, r8, #7
    43e0:	f028 0807 	bic.w	r8, r8, #7
    43e4:	f108 0308 	add.w	r3, r8, #8
    43e8:	930e      	str	r3, [sp, #56]	; 0x38
    43ea:	e9d8 2300 	ldrd	r2, r3, [r8]
    43ee:	e005      	b.n	43fc <__vfprintf+0x550>
    43f0:	f108 0304 	add.w	r3, r8, #4
    43f4:	f8d8 2000 	ldr.w	r2, [r8]
    43f8:	930e      	str	r3, [sp, #56]	; 0x38
    43fa:	2300      	movs	r3, #0
    43fc:	063e      	lsls	r6, r7, #24
    43fe:	d501      	bpl.n	4404 <__vfprintf+0x558>
    4400:	b292      	uxth	r2, r2
    4402:	e003      	b.n	440c <__vfprintf+0x560>
    4404:	05f8      	lsls	r0, r7, #23
    4406:	d502      	bpl.n	440e <__vfprintf+0x562>
    4408:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    440c:	2300      	movs	r3, #0
    440e:	493e      	ldr	r1, [pc, #248]	; (4508 <__vfprintf+0x65c>)
    4410:	f017 0f08 	tst.w	r7, #8
    4414:	483e      	ldr	r0, [pc, #248]	; (4510 <__vfprintf+0x664>)
    4416:	bf08      	it	eq
    4418:	4608      	moveq	r0, r1
    441a:	06f9      	lsls	r1, r7, #27
    441c:	f140 80b1 	bpl.w	4582 <__vfprintf+0x6d6>
    4420:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4424:	e0ad      	b.n	4582 <__vfprintf+0x6d6>
    4426:	f108 0304 	add.w	r3, r8, #4
    442a:	930e      	str	r3, [sp, #56]	; 0x38
    442c:	f8d8 2000 	ldr.w	r2, [r8]
    4430:	2300      	movs	r3, #0
    4432:	4938      	ldr	r1, [pc, #224]	; (4514 <__vfprintf+0x668>)
    4434:	4836      	ldr	r0, [pc, #216]	; (4510 <__vfprintf+0x664>)
    4436:	e0a7      	b.n	4588 <__vfprintf+0x6dc>
    4438:	067e      	lsls	r6, r7, #25
    443a:	d509      	bpl.n	4450 <__vfprintf+0x5a4>
    443c:	f108 0807 	add.w	r8, r8, #7
    4440:	f028 0807 	bic.w	r8, r8, #7
    4444:	f108 0308 	add.w	r3, r8, #8
    4448:	930e      	str	r3, [sp, #56]	; 0x38
    444a:	e9d8 2300 	ldrd	r2, r3, [r8]
    444e:	e005      	b.n	445c <__vfprintf+0x5b0>
    4450:	f108 0304 	add.w	r3, r8, #4
    4454:	f8d8 2000 	ldr.w	r2, [r8]
    4458:	930e      	str	r3, [sp, #56]	; 0x38
    445a:	2300      	movs	r3, #0
    445c:	0638      	lsls	r0, r7, #24
    445e:	d501      	bpl.n	4464 <__vfprintf+0x5b8>
    4460:	b292      	uxth	r2, r2
    4462:	e003      	b.n	446c <__vfprintf+0x5c0>
    4464:	05f9      	lsls	r1, r7, #23
    4466:	d502      	bpl.n	446e <__vfprintf+0x5c2>
    4468:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    446c:	2300      	movs	r3, #0
    446e:	f017 0f08 	tst.w	r7, #8
    4472:	4925      	ldr	r1, [pc, #148]	; (4508 <__vfprintf+0x65c>)
    4474:	4828      	ldr	r0, [pc, #160]	; (4518 <__vfprintf+0x66c>)
    4476:	e059      	b.n	452c <__vfprintf+0x680>
    4478:	067e      	lsls	r6, r7, #25
    447a:	d509      	bpl.n	4490 <__vfprintf+0x5e4>
    447c:	f108 0807 	add.w	r8, r8, #7
    4480:	f028 0807 	bic.w	r8, r8, #7
    4484:	f108 0308 	add.w	r3, r8, #8
    4488:	930e      	str	r3, [sp, #56]	; 0x38
    448a:	e9d8 2300 	ldrd	r2, r3, [r8]
    448e:	e005      	b.n	449c <__vfprintf+0x5f0>
    4490:	f108 0304 	add.w	r3, r8, #4
    4494:	f8d8 2000 	ldr.w	r2, [r8]
    4498:	930e      	str	r3, [sp, #56]	; 0x38
    449a:	2300      	movs	r3, #0
    449c:	0638      	lsls	r0, r7, #24
    449e:	d501      	bpl.n	44a4 <__vfprintf+0x5f8>
    44a0:	b292      	uxth	r2, r2
    44a2:	e003      	b.n	44ac <__vfprintf+0x600>
    44a4:	05f9      	lsls	r1, r7, #23
    44a6:	d502      	bpl.n	44ae <__vfprintf+0x602>
    44a8:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    44ac:	2300      	movs	r3, #0
    44ae:	f017 0110 	ands.w	r1, r7, #16
    44b2:	d068      	beq.n	4586 <__vfprintf+0x6da>
    44b4:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    44b8:	2100      	movs	r1, #0
    44ba:	e064      	b.n	4586 <__vfprintf+0x6da>
    44bc:	067b      	lsls	r3, r7, #25
    44be:	d509      	bpl.n	44d4 <__vfprintf+0x628>
    44c0:	f108 0807 	add.w	r8, r8, #7
    44c4:	f028 0807 	bic.w	r8, r8, #7
    44c8:	f108 0308 	add.w	r3, r8, #8
    44cc:	930e      	str	r3, [sp, #56]	; 0x38
    44ce:	e9d8 2300 	ldrd	r2, r3, [r8]
    44d2:	e005      	b.n	44e0 <__vfprintf+0x634>
    44d4:	f8d8 2000 	ldr.w	r2, [r8]
    44d8:	f108 0304 	add.w	r3, r8, #4
    44dc:	930e      	str	r3, [sp, #56]	; 0x38
    44de:	17d3      	asrs	r3, r2, #31
    44e0:	063e      	lsls	r6, r7, #24
    44e2:	d501      	bpl.n	44e8 <__vfprintf+0x63c>
    44e4:	b212      	sxth	r2, r2
    44e6:	e002      	b.n	44ee <__vfprintf+0x642>
    44e8:	05f8      	lsls	r0, r7, #23
    44ea:	d501      	bpl.n	44f0 <__vfprintf+0x644>
    44ec:	b252      	sxtb	r2, r2
    44ee:	17d3      	asrs	r3, r2, #31
    44f0:	2a00      	cmp	r2, #0
    44f2:	f173 0100 	sbcs.w	r1, r3, #0
    44f6:	da13      	bge.n	4520 <__vfprintf+0x674>
    44f8:	4252      	negs	r2, r2
    44fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    44fe:	4807      	ldr	r0, [pc, #28]	; (451c <__vfprintf+0x670>)
    4500:	e018      	b.n	4534 <__vfprintf+0x688>
    4502:	bf00      	nop
    4504:	00006b14 	.word	0x00006b14
    4508:	0000695b 	.word	0x0000695b
    450c:	00006b1b 	.word	0x00006b1b
    4510:	00006b1e 	.word	0x00006b1e
    4514:	00006b34 	.word	0x00006b34
    4518:	00006b21 	.word	0x00006b21
    451c:	00006b0e 	.word	0x00006b0e
    4520:	07b9      	lsls	r1, r7, #30
    4522:	d406      	bmi.n	4532 <__vfprintf+0x686>
    4524:	49b6      	ldr	r1, [pc, #728]	; (4800 <__vfprintf+0x954>)
    4526:	48b7      	ldr	r0, [pc, #732]	; (4804 <__vfprintf+0x958>)
    4528:	f017 0f04 	tst.w	r7, #4
    452c:	bf08      	it	eq
    452e:	4608      	moveq	r0, r1
    4530:	e000      	b.n	4534 <__vfprintf+0x688>
    4532:	48b5      	ldr	r0, [pc, #724]	; (4808 <__vfprintf+0x95c>)
    4534:	f017 0110 	ands.w	r1, r7, #16
    4538:	d026      	beq.n	4588 <__vfprintf+0x6dc>
    453a:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    453e:	2100      	movs	r1, #0
    4540:	e022      	b.n	4588 <__vfprintf+0x6dc>
    4542:	06fb      	lsls	r3, r7, #27
    4544:	bf5e      	ittt	pl
    4546:	230d      	movpl	r3, #13
    4548:	f047 0710 	orrpl.w	r7, r7, #16
    454c:	9306      	strpl	r3, [sp, #24]
    454e:	9b06      	ldr	r3, [sp, #24]
    4550:	f017 0f10 	tst.w	r7, #16
    4554:	f108 0807 	add.w	r8, r8, #7
    4558:	bf08      	it	eq
    455a:	2306      	moveq	r3, #6
    455c:	f028 0807 	bic.w	r8, r8, #7
    4560:	9306      	str	r3, [sp, #24]
    4562:	2100      	movs	r1, #0
    4564:	f108 0308 	add.w	r3, r8, #8
    4568:	930e      	str	r3, [sp, #56]	; 0x38
    456a:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
    456e:	e9d8 2300 	ldrd	r2, r3, [r8]
    4572:	4608      	mov	r0, r1
    4574:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
    4578:	2200      	movs	r2, #0
    457a:	2300      	movs	r3, #0
    457c:	e004      	b.n	4588 <__vfprintf+0x6dc>
    457e:	49a3      	ldr	r1, [pc, #652]	; (480c <__vfprintf+0x960>)
    4580:	e002      	b.n	4588 <__vfprintf+0x6dc>
    4582:	49a3      	ldr	r1, [pc, #652]	; (4810 <__vfprintf+0x964>)
    4584:	e000      	b.n	4588 <__vfprintf+0x6dc>
    4586:	489e      	ldr	r0, [pc, #632]	; (4800 <__vfprintf+0x954>)
    4588:	9e05      	ldr	r6, [sp, #20]
    458a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    458e:	ebba 0a06 	subs.w	sl, sl, r6
    4592:	eb6b 7be6 	sbc.w	fp, fp, r6, asr #31
    4596:	e9cd ab08 	strd	sl, fp, [sp, #32]
    459a:	9e06      	ldr	r6, [sp, #24]
    459c:	901f      	str	r0, [sp, #124]	; 0x7c
    459e:	f04f 30ff 	mov.w	r0, #4294967295
    45a2:	9020      	str	r0, [sp, #128]	; 0x80
    45a4:	9021      	str	r0, [sp, #132]	; 0x84
    45a6:	961e      	str	r6, [sp, #120]	; 0x78
    45a8:	2000      	movs	r0, #0
    45aa:	f04f 0e55 	mov.w	lr, #85	; 0x55
    45ae:	ae24      	add	r6, sp, #144	; 0x90
    45b0:	f800 e006 	strb.w	lr, [r0, r6]
    45b4:	3001      	adds	r0, #1
    45b6:	2820      	cmp	r0, #32
    45b8:	d1f7      	bne.n	45aa <__vfprintf+0x6fe>
    45ba:	f417 6f82 	tst.w	r7, #1040	; 0x410
    45be:	bf04      	itt	eq
    45c0:	2001      	moveq	r0, #1
    45c2:	901e      	streq	r0, [sp, #120]	; 0x78
    45c4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    45c8:	dc1b      	bgt.n	4602 <__vfprintf+0x756>
    45ca:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    45ce:	f280 80d4 	bge.w	477a <__vfprintf+0x8ce>
    45d2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    45d6:	f000 80d0 	beq.w	477a <__vfprintf+0x8ce>
    45da:	dc08      	bgt.n	45ee <__vfprintf+0x742>
    45dc:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    45e0:	f000 80cb 	beq.w	477a <__vfprintf+0x8ce>
    45e4:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    45e8:	f040 80d7 	bne.w	479a <__vfprintf+0x8ee>
    45ec:	e0c5      	b.n	477a <__vfprintf+0x8ce>
    45ee:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    45f2:	f000 80c2 	beq.w	477a <__vfprintf+0x8ce>
    45f6:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    45fa:	d017      	beq.n	462c <__vfprintf+0x780>
    45fc:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    4600:	e011      	b.n	4626 <__vfprintf+0x77a>
    4602:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    4606:	d014      	beq.n	4632 <__vfprintf+0x786>
    4608:	dc08      	bgt.n	461c <__vfprintf+0x770>
    460a:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    460e:	d00d      	beq.n	462c <__vfprintf+0x780>
    4610:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
    4614:	f040 80c1 	bne.w	479a <__vfprintf+0x8ee>
    4618:	2100      	movs	r1, #0
    461a:	e020      	b.n	465e <__vfprintf+0x7b2>
    461c:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    4620:	d004      	beq.n	462c <__vfprintf+0x780>
    4622:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    4626:	f040 80b8 	bne.w	479a <__vfprintf+0x8ee>
    462a:	e002      	b.n	4632 <__vfprintf+0x786>
    462c:	f04f 0e00 	mov.w	lr, #0
    4630:	e027      	b.n	4682 <__vfprintf+0x7d6>
    4632:	2000      	movs	r0, #0
    4634:	ea52 0e03 	orrs.w	lr, r2, r3
    4638:	4606      	mov	r6, r0
    463a:	f000 80af 	beq.w	479c <__vfprintf+0x8f0>
    463e:	f002 060f 	and.w	r6, r2, #15
    4642:	f811 e006 	ldrb.w	lr, [r1, r6]
    4646:	ae24      	add	r6, sp, #144	; 0x90
    4648:	f800 e006 	strb.w	lr, [r0, r6]
    464c:	0916      	lsrs	r6, r2, #4
    464e:	ea46 7603 	orr.w	r6, r6, r3, lsl #28
    4652:	ea4f 1e13 	mov.w	lr, r3, lsr #4
    4656:	4632      	mov	r2, r6
    4658:	4673      	mov	r3, lr
    465a:	3001      	adds	r0, #1
    465c:	e7ea      	b.n	4634 <__vfprintf+0x788>
    465e:	ea52 0003 	orrs.w	r0, r2, r3
    4662:	460e      	mov	r6, r1
    4664:	f000 809a 	beq.w	479c <__vfprintf+0x8f0>
    4668:	f002 0007 	and.w	r0, r2, #7
    466c:	3030      	adds	r0, #48	; 0x30
    466e:	ae24      	add	r6, sp, #144	; 0x90
    4670:	5588      	strb	r0, [r1, r6]
    4672:	08d0      	lsrs	r0, r2, #3
    4674:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
    4678:	08de      	lsrs	r6, r3, #3
    467a:	4602      	mov	r2, r0
    467c:	4633      	mov	r3, r6
    467e:	3101      	adds	r1, #1
    4680:	e7ed      	b.n	465e <__vfprintf+0x7b2>
    4682:	ea52 0103 	orrs.w	r1, r2, r3
    4686:	4676      	mov	r6, lr
    4688:	f000 8088 	beq.w	479c <__vfprintf+0x8f0>
    468c:	0891      	lsrs	r1, r2, #2
    468e:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
    4692:	9118      	str	r1, [sp, #96]	; 0x60
    4694:	0899      	lsrs	r1, r3, #2
    4696:	9119      	str	r1, [sp, #100]	; 0x64
    4698:	0859      	lsrs	r1, r3, #1
    469a:	ea4f 0032 	mov.w	r0, r2, rrx
    469e:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    46a2:	eb18 0800 	adds.w	r8, r8, r0
    46a6:	4640      	mov	r0, r8
    46a8:	eb49 0901 	adc.w	r9, r9, r1
    46ac:	4649      	mov	r1, r9
    46ae:	0906      	lsrs	r6, r0, #4
    46b0:	ea46 7609 	orr.w	r6, r6, r9, lsl #28
    46b4:	9610      	str	r6, [sp, #64]	; 0x40
    46b6:	090e      	lsrs	r6, r1, #4
    46b8:	9611      	str	r6, [sp, #68]	; 0x44
    46ba:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
    46be:	eb18 0800 	adds.w	r8, r8, r0
    46c2:	4640      	mov	r0, r8
    46c4:	eb49 0901 	adc.w	r9, r9, r1
    46c8:	4649      	mov	r1, r9
    46ca:	0a06      	lsrs	r6, r0, #8
    46cc:	ea46 6609 	orr.w	r6, r6, r9, lsl #24
    46d0:	9612      	str	r6, [sp, #72]	; 0x48
    46d2:	0a0e      	lsrs	r6, r1, #8
    46d4:	9613      	str	r6, [sp, #76]	; 0x4c
    46d6:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    46da:	eb18 0800 	adds.w	r8, r8, r0
    46de:	4640      	mov	r0, r8
    46e0:	eb49 0901 	adc.w	r9, r9, r1
    46e4:	4649      	mov	r1, r9
    46e6:	0c06      	lsrs	r6, r0, #16
    46e8:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
    46ec:	9614      	str	r6, [sp, #80]	; 0x50
    46ee:	0c0e      	lsrs	r6, r1, #16
    46f0:	9615      	str	r6, [sp, #84]	; 0x54
    46f2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    46f6:	eb18 0800 	adds.w	r8, r8, r0
    46fa:	eb49 0901 	adc.w	r9, r9, r1
    46fe:	4640      	mov	r0, r8
    4700:	4649      	mov	r1, r9
    4702:	2600      	movs	r6, #0
    4704:	961b      	str	r6, [sp, #108]	; 0x6c
    4706:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    470a:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    470e:	eb18 0800 	adds.w	r8, r8, r0
    4712:	eb49 0901 	adc.w	r9, r9, r1
    4716:	4640      	mov	r0, r8
    4718:	4649      	mov	r1, r9
    471a:	08c6      	lsrs	r6, r0, #3
    471c:	08c9      	lsrs	r1, r1, #3
    471e:	1d90      	adds	r0, r2, #6
    4720:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
    4724:	910d      	str	r1, [sp, #52]	; 0x34
    4726:	f143 0100 	adc.w	r1, r3, #0
    472a:	230a      	movs	r3, #10
    472c:	fba6 8903 	umull	r8, r9, r6, r3
    4730:	960c      	str	r6, [sp, #48]	; 0x30
    4732:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4734:	ebb0 0008 	subs.w	r0, r0, r8
    4738:	fb03 9906 	mla	r9, r3, r6, r9
    473c:	ea4f 1610 	mov.w	r6, r0, lsr #4
    4740:	eb61 0109 	sbc.w	r1, r1, r9
    4744:	ea46 7601 	orr.w	r6, r6, r1, lsl #28
    4748:	0909      	lsrs	r1, r1, #4
    474a:	9616      	str	r6, [sp, #88]	; 0x58
    474c:	9117      	str	r1, [sp, #92]	; 0x5c
    474e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    4752:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
    4756:	eb10 0008 	adds.w	r0, r0, r8
    475a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    475e:	f102 0230 	add.w	r2, r2, #48	; 0x30
    4762:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    4766:	eb41 0109 	adc.w	r1, r1, r9
    476a:	ab24      	add	r3, sp, #144	; 0x90
    476c:	f80e 2003 	strb.w	r2, [lr, r3]
    4770:	f10e 0e01 	add.w	lr, lr, #1
    4774:	4602      	mov	r2, r0
    4776:	460b      	mov	r3, r1
    4778:	e783      	b.n	4682 <__vfprintf+0x7d6>
    477a:	ab1f      	add	r3, sp, #124	; 0x7c
    477c:	9300      	str	r3, [sp, #0]
    477e:	ab1e      	add	r3, sp, #120	; 0x78
    4780:	9301      	str	r3, [sp, #4]
    4782:	ab20      	add	r3, sp, #128	; 0x80
    4784:	9302      	str	r3, [sp, #8]
    4786:	ab21      	add	r3, sp, #132	; 0x84
    4788:	9303      	str	r3, [sp, #12]
    478a:	9e38      	ldr	r6, [sp, #224]	; 0xe0
    478c:	4648      	mov	r0, r9
    478e:	a922      	add	r1, sp, #136	; 0x88
    4790:	aa24      	add	r2, sp, #144	; 0x90
    4792:	463b      	mov	r3, r7
    4794:	47b0      	blx	r6
    4796:	4606      	mov	r6, r0
    4798:	e000      	b.n	479c <__vfprintf+0x8f0>
    479a:	2600      	movs	r6, #0
    479c:	f417 6380 	ands.w	r3, r7, #1024	; 0x400
    47a0:	931c      	str	r3, [sp, #112]	; 0x70
    47a2:	d00e      	beq.n	47c2 <__vfprintf+0x916>
    47a4:	2300      	movs	r3, #0
    47a6:	931e      	str	r3, [sp, #120]	; 0x78
    47a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    47aa:	2b00      	cmp	r3, #0
    47ac:	bfc4      	itt	gt
    47ae:	f103 33ff 	addgt.w	r3, r3, #4294967295
    47b2:	931e      	strgt	r3, [sp, #120]	; 0x78
    47b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
    47b6:	2b00      	cmp	r3, #0
    47b8:	dd08      	ble.n	47cc <__vfprintf+0x920>
    47ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    47bc:	3b01      	subs	r3, #1
    47be:	4413      	add	r3, r2
    47c0:	e003      	b.n	47ca <__vfprintf+0x91e>
    47c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    47c4:	1b9b      	subs	r3, r3, r6
    47c6:	bf48      	it	mi
    47c8:	2300      	movmi	r3, #0
    47ca:	931e      	str	r3, [sp, #120]	; 0x78
    47cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    47ce:	981f      	ldr	r0, [sp, #124]	; 0x7c
    47d0:	eb06 0803 	add.w	r8, r6, r3
    47d4:	f000 fac8 	bl	4d68 <strlen>
    47d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    47da:	ebc8 0b03 	rsb	fp, r8, r3
    47de:	f007 0301 	and.w	r3, r7, #1
    47e2:	930f      	str	r3, [sp, #60]	; 0x3c
    47e4:	f240 2301 	movw	r3, #513	; 0x201
    47e8:	403b      	ands	r3, r7
    47ea:	ebc0 0b0b 	rsb	fp, r0, fp
    47ee:	b18b      	cbz	r3, 4814 <__vfprintf+0x968>
    47f0:	f04f 0a00 	mov.w	sl, #0
    47f4:	f04f 0800 	mov.w	r8, #0
    47f8:	f04f 0900 	mov.w	r9, #0
    47fc:	e040      	b.n	4880 <__vfprintf+0x9d4>
    47fe:	bf00      	nop
    4800:	0000695b 	.word	0x0000695b
    4804:	00006ade 	.word	0x00006ade
    4808:	00006adc 	.word	0x00006adc
    480c:	00006b23 	.word	0x00006b23
    4810:	00006b34 	.word	0x00006b34
    4814:	f04f 0800 	mov.w	r8, #0
    4818:	f04f 0900 	mov.w	r9, #0
    481c:	f10b 33ff 	add.w	r3, fp, #4294967295
    4820:	ebc8 0203 	rsb	r2, r8, r3
    4824:	2a00      	cmp	r2, #0
    4826:	db19      	blt.n	485c <__vfprintf+0x9b0>
    4828:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    482c:	4590      	cmp	r8, r2
    482e:	eb79 0303 	sbcs.w	r3, r9, r3
    4832:	da0e      	bge.n	4852 <__vfprintf+0x9a6>
    4834:	68a3      	ldr	r3, [r4, #8]
    4836:	3b01      	subs	r3, #1
    4838:	2b00      	cmp	r3, #0
    483a:	60a3      	str	r3, [r4, #8]
    483c:	db05      	blt.n	484a <__vfprintf+0x99e>
    483e:	6823      	ldr	r3, [r4, #0]
    4840:	1c5a      	adds	r2, r3, #1
    4842:	6022      	str	r2, [r4, #0]
    4844:	2220      	movs	r2, #32
    4846:	701a      	strb	r2, [r3, #0]
    4848:	e003      	b.n	4852 <__vfprintf+0x9a6>
    484a:	2020      	movs	r0, #32
    484c:	4621      	mov	r1, r4
    484e:	f000 fb2d 	bl	4eac <__flsbuf>
    4852:	f118 0801 	adds.w	r8, r8, #1
    4856:	f149 0900 	adc.w	r9, r9, #0
    485a:	e7df      	b.n	481c <__vfprintf+0x970>
    485c:	ea2b 7aeb 	bic.w	sl, fp, fp, asr #31
    4860:	ebca 0b03 	rsb	fp, sl, r3
    4864:	e7c6      	b.n	47f4 <__vfprintf+0x948>
    4866:	eb18 020a 	adds.w	r2, r8, sl
    486a:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    486e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4872:	4282      	cmp	r2, r0
    4874:	418b      	sbcs	r3, r1
    4876:	db0e      	blt.n	4896 <__vfprintf+0x9ea>
    4878:	f118 0801 	adds.w	r8, r8, #1
    487c:	f149 0900 	adc.w	r9, r9, #0
    4880:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    4882:	eb0a 0308 	add.w	r3, sl, r8
    4886:	1c51      	adds	r1, r2, #1
    4888:	911f      	str	r1, [sp, #124]	; 0x7c
    488a:	f892 e000 	ldrb.w	lr, [r2]
    488e:	f1be 0f00 	cmp.w	lr, #0
    4892:	d1e8      	bne.n	4866 <__vfprintf+0x9ba>
    4894:	e00f      	b.n	48b6 <__vfprintf+0xa0a>
    4896:	68a3      	ldr	r3, [r4, #8]
    4898:	3b01      	subs	r3, #1
    489a:	2b00      	cmp	r3, #0
    489c:	60a3      	str	r3, [r4, #8]
    489e:	db05      	blt.n	48ac <__vfprintf+0xa00>
    48a0:	6823      	ldr	r3, [r4, #0]
    48a2:	1c5a      	adds	r2, r3, #1
    48a4:	6022      	str	r2, [r4, #0]
    48a6:	f883 e000 	strb.w	lr, [r3]
    48aa:	e7e5      	b.n	4878 <__vfprintf+0x9cc>
    48ac:	4670      	mov	r0, lr
    48ae:	4621      	mov	r1, r4
    48b0:	f000 fafc 	bl	4eac <__flsbuf>
    48b4:	e7e0      	b.n	4878 <__vfprintf+0x9cc>
    48b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    48b8:	469a      	mov	sl, r3
    48ba:	2a00      	cmp	r2, #0
    48bc:	d135      	bne.n	492a <__vfprintf+0xa7e>
    48be:	f417 7f00 	tst.w	r7, #512	; 0x200
    48c2:	bf14      	ite	ne
    48c4:	2730      	movne	r7, #48	; 0x30
    48c6:	2720      	moveq	r7, #32
    48c8:	2000      	movs	r0, #0
    48ca:	2100      	movs	r1, #0
    48cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    48d0:	9906      	ldr	r1, [sp, #24]
    48d2:	f10b 32ff 	add.w	r2, fp, #4294967295
    48d6:	1a51      	subs	r1, r2, r1
    48d8:	2900      	cmp	r1, #0
    48da:	db20      	blt.n	491e <__vfprintf+0xa72>
    48dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    48e0:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    48e4:	18c0      	adds	r0, r0, r3
    48e6:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
    48ea:	4540      	cmp	r0, r8
    48ec:	eb71 0209 	sbcs.w	r2, r1, r9
    48f0:	da0f      	bge.n	4912 <__vfprintf+0xa66>
    48f2:	68a2      	ldr	r2, [r4, #8]
    48f4:	3a01      	subs	r2, #1
    48f6:	2a00      	cmp	r2, #0
    48f8:	60a2      	str	r2, [r4, #8]
    48fa:	db04      	blt.n	4906 <__vfprintf+0xa5a>
    48fc:	6822      	ldr	r2, [r4, #0]
    48fe:	1c51      	adds	r1, r2, #1
    4900:	6021      	str	r1, [r4, #0]
    4902:	7017      	strb	r7, [r2, #0]
    4904:	e005      	b.n	4912 <__vfprintf+0xa66>
    4906:	4638      	mov	r0, r7
    4908:	4621      	mov	r1, r4
    490a:	931d      	str	r3, [sp, #116]	; 0x74
    490c:	f000 face 	bl	4eac <__flsbuf>
    4910:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4912:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    4916:	3001      	adds	r0, #1
    4918:	f141 0100 	adc.w	r1, r1, #0
    491c:	e7d6      	b.n	48cc <__vfprintf+0xa20>
    491e:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    4922:	eb03 0a0b 	add.w	sl, r3, fp
    4926:	ebcb 0b02 	rsb	fp, fp, r2
    492a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    492c:	2b00      	cmp	r3, #0
    492e:	d07c      	beq.n	4a2a <__vfprintf+0xb7e>
    4930:	2700      	movs	r7, #0
    4932:	42b7      	cmp	r7, r6
    4934:	f280 80d5 	bge.w	4ae2 <__vfprintf+0xc36>
    4938:	ab24      	add	r3, sp, #144	; 0x90
    493a:	f817 e003 	ldrb.w	lr, [r7, r3]
    493e:	f1be 0f3c 	cmp.w	lr, #60	; 0x3c
    4942:	d007      	beq.n	4954 <__vfprintf+0xaa8>
    4944:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
    4948:	d151      	bne.n	49ee <__vfprintf+0xb42>
    494a:	f04f 0800 	mov.w	r8, #0
    494e:	f04f 0900 	mov.w	r9, #0
    4952:	e034      	b.n	49be <__vfprintf+0xb12>
    4954:	f04f 0800 	mov.w	r8, #0
    4958:	f04f 0900 	mov.w	r9, #0
    495c:	9a20      	ldr	r2, [sp, #128]	; 0x80
    495e:	eb0a 0308 	add.w	r3, sl, r8
    4962:	3a01      	subs	r2, #1
    4964:	2a00      	cmp	r2, #0
    4966:	9220      	str	r2, [sp, #128]	; 0x80
    4968:	db5c      	blt.n	4a24 <__vfprintf+0xb78>
    496a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    496e:	eb18 020a 	adds.w	r2, r8, sl
    4972:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    4976:	4282      	cmp	r2, r0
    4978:	418b      	sbcs	r3, r1
    497a:	da0e      	bge.n	499a <__vfprintf+0xaee>
    497c:	68a3      	ldr	r3, [r4, #8]
    497e:	3b01      	subs	r3, #1
    4980:	2b00      	cmp	r3, #0
    4982:	60a3      	str	r3, [r4, #8]
    4984:	db05      	blt.n	4992 <__vfprintf+0xae6>
    4986:	6823      	ldr	r3, [r4, #0]
    4988:	1c5a      	adds	r2, r3, #1
    498a:	6022      	str	r2, [r4, #0]
    498c:	2230      	movs	r2, #48	; 0x30
    498e:	701a      	strb	r2, [r3, #0]
    4990:	e003      	b.n	499a <__vfprintf+0xaee>
    4992:	2030      	movs	r0, #48	; 0x30
    4994:	4621      	mov	r1, r4
    4996:	f000 fa89 	bl	4eac <__flsbuf>
    499a:	f118 0801 	adds.w	r8, r8, #1
    499e:	f149 0900 	adc.w	r9, r9, #0
    49a2:	e7db      	b.n	495c <__vfprintf+0xab0>
    49a4:	eb18 020a 	adds.w	r2, r8, sl
    49a8:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    49ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    49b0:	4282      	cmp	r2, r0
    49b2:	418b      	sbcs	r3, r1
    49b4:	db0b      	blt.n	49ce <__vfprintf+0xb22>
    49b6:	f118 0801 	adds.w	r8, r8, #1
    49ba:	f149 0900 	adc.w	r9, r9, #0
    49be:	9a21      	ldr	r2, [sp, #132]	; 0x84
    49c0:	eb0a 0308 	add.w	r3, sl, r8
    49c4:	3a01      	subs	r2, #1
    49c6:	2a00      	cmp	r2, #0
    49c8:	9221      	str	r2, [sp, #132]	; 0x84
    49ca:	daeb      	bge.n	49a4 <__vfprintf+0xaf8>
    49cc:	e02a      	b.n	4a24 <__vfprintf+0xb78>
    49ce:	68a3      	ldr	r3, [r4, #8]
    49d0:	3b01      	subs	r3, #1
    49d2:	2b00      	cmp	r3, #0
    49d4:	60a3      	str	r3, [r4, #8]
    49d6:	db05      	blt.n	49e4 <__vfprintf+0xb38>
    49d8:	6823      	ldr	r3, [r4, #0]
    49da:	1c5a      	adds	r2, r3, #1
    49dc:	6022      	str	r2, [r4, #0]
    49de:	2230      	movs	r2, #48	; 0x30
    49e0:	701a      	strb	r2, [r3, #0]
    49e2:	e7e8      	b.n	49b6 <__vfprintf+0xb0a>
    49e4:	4621      	mov	r1, r4
    49e6:	2030      	movs	r0, #48	; 0x30
    49e8:	f000 fa60 	bl	4eac <__flsbuf>
    49ec:	e7e3      	b.n	49b6 <__vfprintf+0xb0a>
    49ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    49f2:	ea4f 79ea 	mov.w	r9, sl, asr #31
    49f6:	4582      	cmp	sl, r0
    49f8:	eb79 0201 	sbcs.w	r2, r9, r1
    49fc:	f10a 0301 	add.w	r3, sl, #1
    4a00:	da10      	bge.n	4a24 <__vfprintf+0xb78>
    4a02:	68a2      	ldr	r2, [r4, #8]
    4a04:	3a01      	subs	r2, #1
    4a06:	2a00      	cmp	r2, #0
    4a08:	60a2      	str	r2, [r4, #8]
    4a0a:	db05      	blt.n	4a18 <__vfprintf+0xb6c>
    4a0c:	6822      	ldr	r2, [r4, #0]
    4a0e:	1c51      	adds	r1, r2, #1
    4a10:	6021      	str	r1, [r4, #0]
    4a12:	f882 e000 	strb.w	lr, [r2]
    4a16:	e005      	b.n	4a24 <__vfprintf+0xb78>
    4a18:	4670      	mov	r0, lr
    4a1a:	4621      	mov	r1, r4
    4a1c:	9306      	str	r3, [sp, #24]
    4a1e:	f000 fa45 	bl	4eac <__flsbuf>
    4a22:	9b06      	ldr	r3, [sp, #24]
    4a24:	3701      	adds	r7, #1
    4a26:	469a      	mov	sl, r3
    4a28:	e783      	b.n	4932 <__vfprintf+0xa86>
    4a2a:	f04f 0800 	mov.w	r8, #0
    4a2e:	f04f 0900 	mov.w	r9, #0
    4a32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    4a34:	eb0a 0708 	add.w	r7, sl, r8
    4a38:	3b01      	subs	r3, #1
    4a3a:	2b00      	cmp	r3, #0
    4a3c:	931e      	str	r3, [sp, #120]	; 0x78
    4a3e:	db1c      	blt.n	4a7a <__vfprintf+0xbce>
    4a40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4a44:	eb18 020a 	adds.w	r2, r8, sl
    4a48:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    4a4c:	4282      	cmp	r2, r0
    4a4e:	418b      	sbcs	r3, r1
    4a50:	da0e      	bge.n	4a70 <__vfprintf+0xbc4>
    4a52:	68a3      	ldr	r3, [r4, #8]
    4a54:	3b01      	subs	r3, #1
    4a56:	2b00      	cmp	r3, #0
    4a58:	60a3      	str	r3, [r4, #8]
    4a5a:	db05      	blt.n	4a68 <__vfprintf+0xbbc>
    4a5c:	6823      	ldr	r3, [r4, #0]
    4a5e:	1c5a      	adds	r2, r3, #1
    4a60:	6022      	str	r2, [r4, #0]
    4a62:	2230      	movs	r2, #48	; 0x30
    4a64:	701a      	strb	r2, [r3, #0]
    4a66:	e003      	b.n	4a70 <__vfprintf+0xbc4>
    4a68:	2030      	movs	r0, #48	; 0x30
    4a6a:	4621      	mov	r1, r4
    4a6c:	f000 fa1e 	bl	4eac <__flsbuf>
    4a70:	f118 0801 	adds.w	r8, r8, #1
    4a74:	f149 0900 	adc.w	r9, r9, #0
    4a78:	e7db      	b.n	4a32 <__vfprintf+0xb86>
    4a7a:	ab2c      	add	r3, sp, #176	; 0xb0
    4a7c:	eb03 0a06 	add.w	sl, r3, r6
    4a80:	f1aa 0a21 	sub.w	sl, sl, #33	; 0x21
    4a84:	f04f 0800 	mov.w	r8, #0
    4a88:	f04f 0900 	mov.w	r9, #0
    4a8c:	ebc8 0306 	rsb	r3, r8, r6
    4a90:	2b00      	cmp	r3, #0
    4a92:	dd20      	ble.n	4ad6 <__vfprintf+0xc2a>
    4a94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4a98:	eb18 0207 	adds.w	r2, r8, r7
    4a9c:	eb49 73e7 	adc.w	r3, r9, r7, asr #31
    4aa0:	4282      	cmp	r2, r0
    4aa2:	418b      	sbcs	r3, r1
    4aa4:	da10      	bge.n	4ac8 <__vfprintf+0xc1c>
    4aa6:	68a3      	ldr	r3, [r4, #8]
    4aa8:	3b01      	subs	r3, #1
    4aaa:	2b00      	cmp	r3, #0
    4aac:	60a3      	str	r3, [r4, #8]
    4aae:	db06      	blt.n	4abe <__vfprintf+0xc12>
    4ab0:	6823      	ldr	r3, [r4, #0]
    4ab2:	1c5a      	adds	r2, r3, #1
    4ab4:	6022      	str	r2, [r4, #0]
    4ab6:	f89a 2000 	ldrb.w	r2, [sl]
    4aba:	701a      	strb	r2, [r3, #0]
    4abc:	e004      	b.n	4ac8 <__vfprintf+0xc1c>
    4abe:	f89a 0000 	ldrb.w	r0, [sl]
    4ac2:	4621      	mov	r1, r4
    4ac4:	f000 f9f2 	bl	4eac <__flsbuf>
    4ac8:	f118 0801 	adds.w	r8, r8, #1
    4acc:	f10a 3aff 	add.w	sl, sl, #4294967295
    4ad0:	f149 0900 	adc.w	r9, r9, #0
    4ad4:	e7da      	b.n	4a8c <__vfprintf+0xbe0>
    4ad6:	2e00      	cmp	r6, #0
    4ad8:	bfac      	ite	ge
    4ada:	eb07 0a06 	addge.w	sl, r7, r6
    4ade:	f107 0a00 	addlt.w	sl, r7, #0
    4ae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4ae4:	b32b      	cbz	r3, 4b32 <__vfprintf+0xc86>
    4ae6:	2600      	movs	r6, #0
    4ae8:	2700      	movs	r7, #0
    4aea:	43f3      	mvns	r3, r6
    4aec:	eb13 0f0b 	cmn.w	r3, fp
    4af0:	d41b      	bmi.n	4b2a <__vfprintf+0xc7e>
    4af2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4af6:	eb16 020a 	adds.w	r2, r6, sl
    4afa:	eb47 73ea 	adc.w	r3, r7, sl, asr #31
    4afe:	4282      	cmp	r2, r0
    4b00:	418b      	sbcs	r3, r1
    4b02:	da0e      	bge.n	4b22 <__vfprintf+0xc76>
    4b04:	68a3      	ldr	r3, [r4, #8]
    4b06:	3b01      	subs	r3, #1
    4b08:	2b00      	cmp	r3, #0
    4b0a:	60a3      	str	r3, [r4, #8]
    4b0c:	db05      	blt.n	4b1a <__vfprintf+0xc6e>
    4b0e:	6823      	ldr	r3, [r4, #0]
    4b10:	1c5a      	adds	r2, r3, #1
    4b12:	6022      	str	r2, [r4, #0]
    4b14:	2220      	movs	r2, #32
    4b16:	701a      	strb	r2, [r3, #0]
    4b18:	e003      	b.n	4b22 <__vfprintf+0xc76>
    4b1a:	2020      	movs	r0, #32
    4b1c:	4621      	mov	r1, r4
    4b1e:	f000 f9c5 	bl	4eac <__flsbuf>
    4b22:	3601      	adds	r6, #1
    4b24:	f147 0700 	adc.w	r7, r7, #0
    4b28:	e7df      	b.n	4aea <__vfprintf+0xc3e>
    4b2a:	f1bb 0f00 	cmp.w	fp, #0
    4b2e:	bfa8      	it	ge
    4b30:	44da      	addge	sl, fp
    4b32:	9b05      	ldr	r3, [sp, #20]
    4b34:	4453      	add	r3, sl
    4b36:	9305      	str	r3, [sp, #20]
    4b38:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    4b3c:	9e05      	ldr	r6, [sp, #20]
    4b3e:	9605      	str	r6, [sp, #20]
    4b40:	462b      	mov	r3, r5
    4b42:	f7ff b9be 	b.w	3ec2 <__vfprintf+0x16>
    4b46:	9805      	ldr	r0, [sp, #20]
    4b48:	b02d      	add	sp, #180	; 0xb4
    4b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b4e:	bf00      	nop

00004b50 <ch_val>:
    4b50:	4b0a      	ldr	r3, [pc, #40]	; (4b7c <ch_val+0x2c>)
    4b52:	4403      	add	r3, r0
    4b54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
    4b58:	069a      	lsls	r2, r3, #26
    4b5a:	d501      	bpl.n	4b60 <ch_val+0x10>
    4b5c:	3830      	subs	r0, #48	; 0x30
    4b5e:	e008      	b.n	4b72 <ch_val+0x22>
    4b60:	071a      	lsls	r2, r3, #28
    4b62:	d501      	bpl.n	4b68 <ch_val+0x18>
    4b64:	3857      	subs	r0, #87	; 0x57
    4b66:	e004      	b.n	4b72 <ch_val+0x22>
    4b68:	06db      	lsls	r3, r3, #27
    4b6a:	bf4c      	ite	mi
    4b6c:	3837      	submi	r0, #55	; 0x37
    4b6e:	f04f 30ff 	movpl.w	r0, #4294967295
    4b72:	4288      	cmp	r0, r1
    4b74:	bfa8      	it	ge
    4b76:	f04f 30ff 	movge.w	r0, #4294967295
    4b7a:	4770      	bx	lr
    4b7c:	0000695c 	.word	0x0000695c

00004b80 <_strtoul>:
    4b80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b84:	4680      	mov	r8, r0
    4b86:	4689      	mov	r9, r1
    4b88:	4616      	mov	r6, r2
    4b8a:	4603      	mov	r3, r0
    4b8c:	461d      	mov	r5, r3
    4b8e:	f815 0b01 	ldrb.w	r0, [r5], #1
    4b92:	b1d0      	cbz	r0, 4bca <_strtoul+0x4a>
    4b94:	4a27      	ldr	r2, [pc, #156]	; (4c34 <_strtoul+0xb4>)
    4b96:	4402      	add	r2, r0
    4b98:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
    4b9c:	07d2      	lsls	r2, r2, #31
    4b9e:	d501      	bpl.n	4ba4 <_strtoul+0x24>
    4ba0:	462b      	mov	r3, r5
    4ba2:	e7f3      	b.n	4b8c <_strtoul+0xc>
    4ba4:	2830      	cmp	r0, #48	; 0x30
    4ba6:	d110      	bne.n	4bca <_strtoul+0x4a>
    4ba8:	7858      	ldrb	r0, [r3, #1]
    4baa:	1c9d      	adds	r5, r3, #2
    4bac:	f000 02df 	and.w	r2, r0, #223	; 0xdf
    4bb0:	2a58      	cmp	r2, #88	; 0x58
    4bb2:	d106      	bne.n	4bc2 <_strtoul+0x42>
    4bb4:	f036 0710 	bics.w	r7, r6, #16
    4bb8:	d13a      	bne.n	4c30 <_strtoul+0xb0>
    4bba:	1cdd      	adds	r5, r3, #3
    4bbc:	7898      	ldrb	r0, [r3, #2]
    4bbe:	2610      	movs	r6, #16
    4bc0:	e008      	b.n	4bd4 <_strtoul+0x54>
    4bc2:	2701      	movs	r7, #1
    4bc4:	b936      	cbnz	r6, 4bd4 <_strtoul+0x54>
    4bc6:	2608      	movs	r6, #8
    4bc8:	e004      	b.n	4bd4 <_strtoul+0x54>
    4bca:	b10e      	cbz	r6, 4bd0 <_strtoul+0x50>
    4bcc:	2700      	movs	r7, #0
    4bce:	e001      	b.n	4bd4 <_strtoul+0x54>
    4bd0:	4637      	mov	r7, r6
    4bd2:	260a      	movs	r6, #10
    4bd4:	2400      	movs	r4, #0
    4bd6:	46a2      	mov	sl, r4
    4bd8:	46a3      	mov	fp, r4
    4bda:	4631      	mov	r1, r6
    4bdc:	f7ff ffb8 	bl	4b50 <ch_val>
    4be0:	2800      	cmp	r0, #0
    4be2:	db0e      	blt.n	4c02 <_strtoul+0x82>
    4be4:	fb06 0004 	mla	r0, r6, r4, r0
    4be8:	0c03      	lsrs	r3, r0, #16
    4bea:	fb06 3a0a 	mla	sl, r6, sl, r3
    4bee:	f5ba 3f80 	cmp.w	sl, #65536	; 0x10000
    4bf2:	b284      	uxth	r4, r0
    4bf4:	bf28      	it	cs
    4bf6:	f04f 0b01 	movcs.w	fp, #1
    4bfa:	f815 0b01 	ldrb.w	r0, [r5], #1
    4bfe:	2701      	movs	r7, #1
    4c00:	e7eb      	b.n	4bda <_strtoul+0x5a>
    4c02:	f1b9 0f00 	cmp.w	r9, #0
    4c06:	d005      	beq.n	4c14 <_strtoul+0x94>
    4c08:	b10f      	cbz	r7, 4c0e <_strtoul+0x8e>
    4c0a:	3d01      	subs	r5, #1
    4c0c:	e000      	b.n	4c10 <_strtoul+0x90>
    4c0e:	4645      	mov	r5, r8
    4c10:	f8c9 5000 	str.w	r5, [r9]
    4c14:	f1bb 0f00 	cmp.w	fp, #0
    4c18:	d006      	beq.n	4c28 <_strtoul+0xa8>
    4c1a:	4b07      	ldr	r3, [pc, #28]	; (4c38 <_strtoul+0xb8>)
    4c1c:	2222      	movs	r2, #34	; 0x22
    4c1e:	601a      	str	r2, [r3, #0]
    4c20:	f04f 30ff 	mov.w	r0, #4294967295
    4c24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c28:	ea44 400a 	orr.w	r0, r4, sl, lsl #16
    4c2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c30:	2701      	movs	r7, #1
    4c32:	e7cf      	b.n	4bd4 <_strtoul+0x54>
    4c34:	0000695c 	.word	0x0000695c
    4c38:	10000a10 	.word	0x10000a10

00004c3c <strtol>:
    4c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4c3e:	460e      	mov	r6, r1
    4c40:	4607      	mov	r7, r0
    4c42:	4601      	mov	r1, r0
    4c44:	460d      	mov	r5, r1
    4c46:	f815 3b01 	ldrb.w	r3, [r5], #1
    4c4a:	b17b      	cbz	r3, 4c6c <strtol+0x30>
    4c4c:	4817      	ldr	r0, [pc, #92]	; (4cac <strtol+0x70>)
    4c4e:	4418      	add	r0, r3
    4c50:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
    4c54:	f014 0401 	ands.w	r4, r4, #1
    4c58:	d001      	beq.n	4c5e <strtol+0x22>
    4c5a:	4629      	mov	r1, r5
    4c5c:	e7f2      	b.n	4c44 <strtol+0x8>
    4c5e:	2b2b      	cmp	r3, #43	; 0x2b
    4c60:	d006      	beq.n	4c70 <strtol+0x34>
    4c62:	2b2d      	cmp	r3, #45	; 0x2d
    4c64:	d102      	bne.n	4c6c <strtol+0x30>
    4c66:	f44f 7400 	mov.w	r4, #512	; 0x200
    4c6a:	e001      	b.n	4c70 <strtol+0x34>
    4c6c:	460d      	mov	r5, r1
    4c6e:	2400      	movs	r4, #0
    4c70:	4628      	mov	r0, r5
    4c72:	a901      	add	r1, sp, #4
    4c74:	f7ff ff84 	bl	4b80 <_strtoul>
    4c78:	b126      	cbz	r6, 4c84 <strtol+0x48>
    4c7a:	9b01      	ldr	r3, [sp, #4]
    4c7c:	42ab      	cmp	r3, r5
    4c7e:	bf08      	it	eq
    4c80:	463b      	moveq	r3, r7
    4c82:	6033      	str	r3, [r6, #0]
    4c84:	05a3      	lsls	r3, r4, #22
    4c86:	d508      	bpl.n	4c9a <strtol+0x5e>
    4c88:	4240      	negs	r0, r0
    4c8a:	2800      	cmp	r0, #0
    4c8c:	dd0c      	ble.n	4ca8 <strtol+0x6c>
    4c8e:	4b08      	ldr	r3, [pc, #32]	; (4cb0 <strtol+0x74>)
    4c90:	2222      	movs	r2, #34	; 0x22
    4c92:	601a      	str	r2, [r3, #0]
    4c94:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    4c98:	e006      	b.n	4ca8 <strtol+0x6c>
    4c9a:	2800      	cmp	r0, #0
    4c9c:	bfbf      	itttt	lt
    4c9e:	4b04      	ldrlt	r3, [pc, #16]	; (4cb0 <strtol+0x74>)
    4ca0:	2222      	movlt	r2, #34	; 0x22
    4ca2:	601a      	strlt	r2, [r3, #0]
    4ca4:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
    4ca8:	b003      	add	sp, #12
    4caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cac:	0000695c 	.word	0x0000695c
    4cb0:	10000a10 	.word	0x10000a10

00004cb4 <atoi>:
    4cb4:	b538      	push	{r3, r4, r5, lr}
    4cb6:	4c04      	ldr	r4, [pc, #16]	; (4cc8 <atoi+0x14>)
    4cb8:	2100      	movs	r1, #0
    4cba:	6825      	ldr	r5, [r4, #0]
    4cbc:	220a      	movs	r2, #10
    4cbe:	f7ff ffbd 	bl	4c3c <strtol>
    4cc2:	6025      	str	r5, [r4, #0]
    4cc4:	bd38      	pop	{r3, r4, r5, pc}
    4cc6:	bf00      	nop
    4cc8:	10000a10 	.word	0x10000a10

00004ccc <setvbuf>:
    4ccc:	b570      	push	{r4, r5, r6, lr}
    4cce:	68c4      	ldr	r4, [r0, #12]
    4cd0:	07a5      	lsls	r5, r4, #30
    4cd2:	d017      	beq.n	4d04 <setvbuf+0x38>
    4cd4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    4cd8:	d009      	beq.n	4cee <setvbuf+0x22>
    4cda:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    4cde:	d003      	beq.n	4ce8 <setvbuf+0x1c>
    4ce0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    4ce4:	d10e      	bne.n	4d04 <setvbuf+0x38>
    4ce6:	e002      	b.n	4cee <setvbuf+0x22>
    4ce8:	6a41      	ldr	r1, [r0, #36]	; 0x24
    4cea:	2301      	movs	r3, #1
    4cec:	e003      	b.n	4cf6 <setvbuf+0x2a>
    4cee:	4d06      	ldr	r5, [pc, #24]	; (4d08 <setvbuf+0x3c>)
    4cf0:	1e5e      	subs	r6, r3, #1
    4cf2:	42ae      	cmp	r6, r5
    4cf4:	d806      	bhi.n	4d04 <setvbuf+0x38>
    4cf6:	4314      	orrs	r4, r2
    4cf8:	6101      	str	r1, [r0, #16]
    4cfa:	6001      	str	r1, [r0, #0]
    4cfc:	61c3      	str	r3, [r0, #28]
    4cfe:	60c4      	str	r4, [r0, #12]
    4d00:	2000      	movs	r0, #0
    4d02:	bd70      	pop	{r4, r5, r6, pc}
    4d04:	2001      	movs	r0, #1
    4d06:	bd70      	pop	{r4, r5, r6, pc}
    4d08:	00fffffe 	.word	0x00fffffe

00004d0c <strchr>:
    4d0c:	b510      	push	{r4, lr}
    4d0e:	4603      	mov	r3, r0
    4d10:	f810 2b01 	ldrb.w	r2, [r0], #1
    4d14:	b2cc      	uxtb	r4, r1
    4d16:	42a2      	cmp	r2, r4
    4d18:	d003      	beq.n	4d22 <strchr+0x16>
    4d1a:	2a00      	cmp	r2, #0
    4d1c:	d1f7      	bne.n	4d0e <strchr+0x2>
    4d1e:	4610      	mov	r0, r2
    4d20:	bd10      	pop	{r4, pc}
    4d22:	4618      	mov	r0, r3
    4d24:	bd10      	pop	{r4, pc}

00004d26 <strcpy>:
    4d26:	ea40 0301 	orr.w	r3, r0, r1
    4d2a:	079b      	lsls	r3, r3, #30
    4d2c:	b510      	push	{r4, lr}
    4d2e:	d113      	bne.n	4d58 <strcpy+0x32>
    4d30:	4602      	mov	r2, r0
    4d32:	3904      	subs	r1, #4
    4d34:	f851 3f04 	ldr.w	r3, [r1, #4]!
    4d38:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
    4d3c:	ea24 0403 	bic.w	r4, r4, r3
    4d40:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    4d44:	d102      	bne.n	4d4c <strcpy+0x26>
    4d46:	f842 3b04 	str.w	r3, [r2], #4
    4d4a:	e7f3      	b.n	4d34 <strcpy+0xe>
    4d4c:	b2d9      	uxtb	r1, r3
    4d4e:	f802 1b01 	strb.w	r1, [r2], #1
    4d52:	b141      	cbz	r1, 4d66 <strcpy+0x40>
    4d54:	121b      	asrs	r3, r3, #8
    4d56:	e7f9      	b.n	4d4c <strcpy+0x26>
    4d58:	1e42      	subs	r2, r0, #1
    4d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
    4d5e:	f802 3f01 	strb.w	r3, [r2, #1]!
    4d62:	2b00      	cmp	r3, #0
    4d64:	d1f9      	bne.n	4d5a <strcpy+0x34>
    4d66:	bd10      	pop	{r4, pc}

00004d68 <strlen>:
    4d68:	b510      	push	{r4, lr}
    4d6a:	1c42      	adds	r2, r0, #1
    4d6c:	0783      	lsls	r3, r0, #30
    4d6e:	d005      	beq.n	4d7c <strlen+0x14>
    4d70:	f810 3b01 	ldrb.w	r3, [r0], #1
    4d74:	2b00      	cmp	r3, #0
    4d76:	d1f9      	bne.n	4d6c <strlen+0x4>
    4d78:	1a80      	subs	r0, r0, r2
    4d7a:	bd10      	pop	{r4, pc}
    4d7c:	4603      	mov	r3, r0
    4d7e:	f850 1b04 	ldr.w	r1, [r0], #4
    4d82:	f1a1 3401 	sub.w	r4, r1, #16843009	; 0x1010101
    4d86:	ea24 0401 	bic.w	r4, r4, r1
    4d8a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    4d8e:	d0f5      	beq.n	4d7c <strlen+0x14>
    4d90:	f011 0fff 	tst.w	r1, #255	; 0xff
    4d94:	d00a      	beq.n	4dac <strlen+0x44>
    4d96:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
    4d9a:	d005      	beq.n	4da8 <strlen+0x40>
    4d9c:	f411 0f7f 	tst.w	r1, #16711680	; 0xff0000
    4da0:	bf14      	ite	ne
    4da2:	4603      	movne	r3, r0
    4da4:	3303      	addeq	r3, #3
    4da6:	e002      	b.n	4dae <strlen+0x46>
    4da8:	3302      	adds	r3, #2
    4daa:	e000      	b.n	4dae <strlen+0x46>
    4dac:	3301      	adds	r3, #1
    4dae:	1a98      	subs	r0, r3, r2
    4db0:	bd10      	pop	{r4, pc}

00004db2 <strncpy>:
    4db2:	ea40 0301 	orr.w	r3, r0, r1
    4db6:	b570      	push	{r4, r5, r6, lr}
    4db8:	079d      	lsls	r5, r3, #30
    4dba:	d111      	bne.n	4de0 <strncpy+0x2e>
    4dbc:	460e      	mov	r6, r1
    4dbe:	4603      	mov	r3, r0
    4dc0:	2a03      	cmp	r2, #3
    4dc2:	4631      	mov	r1, r6
    4dc4:	d90d      	bls.n	4de2 <strncpy+0x30>
    4dc6:	f856 5b04 	ldr.w	r5, [r6], #4
    4dca:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    4dce:	ea24 0405 	bic.w	r4, r4, r5
    4dd2:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    4dd6:	d104      	bne.n	4de2 <strncpy+0x30>
    4dd8:	f843 5b04 	str.w	r5, [r3], #4
    4ddc:	3a04      	subs	r2, #4
    4dde:	e7ef      	b.n	4dc0 <strncpy+0xe>
    4de0:	4603      	mov	r3, r0
    4de2:	3a01      	subs	r2, #1
    4de4:	1c54      	adds	r4, r2, #1
    4de6:	d00f      	beq.n	4e08 <strncpy+0x56>
    4de8:	f811 4b01 	ldrb.w	r4, [r1], #1
    4dec:	1e55      	subs	r5, r2, #1
    4dee:	f803 4b01 	strb.w	r4, [r3], #1
    4df2:	b93c      	cbnz	r4, 4e04 <strncpy+0x52>
    4df4:	441a      	add	r2, r3
    4df6:	4293      	cmp	r3, r2
    4df8:	d003      	beq.n	4e02 <strncpy+0x50>
    4dfa:	2100      	movs	r1, #0
    4dfc:	f803 1b01 	strb.w	r1, [r3], #1
    4e00:	e7f9      	b.n	4df6 <strncpy+0x44>
    4e02:	bd70      	pop	{r4, r5, r6, pc}
    4e04:	462a      	mov	r2, r5
    4e06:	e7ed      	b.n	4de4 <strncpy+0x32>
    4e08:	bd70      	pop	{r4, r5, r6, pc}

00004e0a <strstr>:
    4e0a:	b510      	push	{r4, lr}
    4e0c:	2300      	movs	r3, #0
    4e0e:	5cca      	ldrb	r2, [r1, r3]
    4e10:	b14a      	cbz	r2, 4e26 <strstr+0x1c>
    4e12:	5cc4      	ldrb	r4, [r0, r3]
    4e14:	4294      	cmp	r4, r2
    4e16:	d101      	bne.n	4e1c <strstr+0x12>
    4e18:	3301      	adds	r3, #1
    4e1a:	e7f8      	b.n	4e0e <strstr+0x4>
    4e1c:	f810 3b01 	ldrb.w	r3, [r0], #1
    4e20:	2b00      	cmp	r3, #0
    4e22:	d1f3      	bne.n	4e0c <strstr+0x2>
    4e24:	4618      	mov	r0, r3
    4e26:	bd10      	pop	{r4, pc}

00004e28 <_sbrk>:
    4e28:	b538      	push	{r3, r4, r5, lr}
    4e2a:	4b0c      	ldr	r3, [pc, #48]	; (4e5c <_sbrk+0x34>)
    4e2c:	681a      	ldr	r2, [r3, #0]
    4e2e:	b90a      	cbnz	r2, 4e34 <_sbrk+0xc>
    4e30:	4a0b      	ldr	r2, [pc, #44]	; (4e60 <_sbrk+0x38>)
    4e32:	601a      	str	r2, [r3, #0]
    4e34:	1cc4      	adds	r4, r0, #3
    4e36:	681d      	ldr	r5, [r3, #0]
    4e38:	f024 0403 	bic.w	r4, r4, #3
    4e3c:	442c      	add	r4, r5
    4e3e:	4620      	mov	r0, r4
    4e40:	f000 fac8 	bl	53d4 <__check_heap_overflow>
    4e44:	b918      	cbnz	r0, 4e4e <_sbrk+0x26>
    4e46:	4b05      	ldr	r3, [pc, #20]	; (4e5c <_sbrk+0x34>)
    4e48:	4628      	mov	r0, r5
    4e4a:	601c      	str	r4, [r3, #0]
    4e4c:	bd38      	pop	{r3, r4, r5, pc}
    4e4e:	4b05      	ldr	r3, [pc, #20]	; (4e64 <_sbrk+0x3c>)
    4e50:	220c      	movs	r2, #12
    4e52:	601a      	str	r2, [r3, #0]
    4e54:	f04f 30ff 	mov.w	r0, #4294967295
    4e58:	bd38      	pop	{r3, r4, r5, pc}
    4e5a:	bf00      	nop
    4e5c:	10001a44 	.word	0x10001a44
    4e60:	10001a48 	.word	0x10001a48
    4e64:	10000a10 	.word	0x10000a10

00004e68 <_deferredlazyseek>:
    4e68:	68c3      	ldr	r3, [r0, #12]
    4e6a:	b510      	push	{r4, lr}
    4e6c:	f023 0320 	bic.w	r3, r3, #32
    4e70:	60c3      	str	r3, [r0, #12]
    4e72:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4e74:	6982      	ldr	r2, [r0, #24]
    4e76:	685b      	ldr	r3, [r3, #4]
    4e78:	4604      	mov	r4, r0
    4e7a:	429a      	cmp	r2, r3
    4e7c:	d00f      	beq.n	4e9e <_deferredlazyseek+0x36>
    4e7e:	f000 f8eb 	bl	5058 <_fflush>
    4e82:	68e3      	ldr	r3, [r4, #12]
    4e84:	6a62      	ldr	r2, [r4, #36]	; 0x24
    4e86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    4e8a:	f023 0310 	bic.w	r3, r3, #16
    4e8e:	f043 0310 	orr.w	r3, r3, #16
    4e92:	60e3      	str	r3, [r4, #12]
    4e94:	6853      	ldr	r3, [r2, #4]
    4e96:	61a3      	str	r3, [r4, #24]
    4e98:	6923      	ldr	r3, [r4, #16]
    4e9a:	6093      	str	r3, [r2, #8]
    4e9c:	6023      	str	r3, [r4, #0]
    4e9e:	68e3      	ldr	r3, [r4, #12]
    4ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    4ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    4ea8:	60e3      	str	r3, [r4, #12]
    4eaa:	bd10      	pop	{r4, pc}

00004eac <__flsbuf>:
    4eac:	68cb      	ldr	r3, [r1, #12]
    4eae:	b570      	push	{r4, r5, r6, lr}
    4eb0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
    4eb4:	069b      	lsls	r3, r3, #26
    4eb6:	4605      	mov	r5, r0
    4eb8:	460c      	mov	r4, r1
    4eba:	60ca      	str	r2, [r1, #12]
    4ebc:	d502      	bpl.n	4ec4 <__flsbuf+0x18>
    4ebe:	4608      	mov	r0, r1
    4ec0:	f7ff ffd2 	bl	4e68 <_deferredlazyseek>
    4ec4:	68a1      	ldr	r1, [r4, #8]
    4ec6:	68e3      	ldr	r3, [r4, #12]
    4ec8:	1c4e      	adds	r6, r1, #1
    4eca:	da0d      	bge.n	4ee8 <__flsbuf+0x3c>
    4ecc:	0598      	lsls	r0, r3, #22
    4ece:	d40b      	bmi.n	4ee8 <__flsbuf+0x3c>
    4ed0:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
    4ed4:	60e3      	str	r3, [r4, #12]
    4ed6:	f06f 0201 	mvn.w	r2, #1
    4eda:	6823      	ldr	r3, [r4, #0]
    4edc:	1a52      	subs	r2, r2, r1
    4ede:	60a2      	str	r2, [r4, #8]
    4ee0:	1c5a      	adds	r2, r3, #1
    4ee2:	6022      	str	r2, [r4, #0]
    4ee4:	701d      	strb	r5, [r3, #0]
    4ee6:	e056      	b.n	4f96 <__flsbuf+0xea>
    4ee8:	f241 028a 	movw	r2, #4234	; 0x108a
    4eec:	401a      	ands	r2, r3
    4eee:	2a02      	cmp	r2, #2
    4ef0:	461e      	mov	r6, r3
    4ef2:	d005      	beq.n	4f00 <__flsbuf+0x54>
    4ef4:	2200      	movs	r2, #0
    4ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4efa:	60a2      	str	r2, [r4, #8]
    4efc:	60e3      	str	r3, [r4, #12]
    4efe:	e052      	b.n	4fa6 <__flsbuf+0xfa>
    4f00:	f24a 0110 	movw	r1, #40976	; 0xa010
    4f04:	4019      	ands	r1, r3
    4f06:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    4f0a:	d10a      	bne.n	4f22 <__flsbuf+0x76>
    4f0c:	2100      	movs	r1, #0
    4f0e:	4620      	mov	r0, r4
    4f10:	f000 f9a8 	bl	5264 <fseek>
    4f14:	68e3      	ldr	r3, [r4, #12]
    4f16:	0699      	lsls	r1, r3, #26
    4f18:	d502      	bpl.n	4f20 <__flsbuf+0x74>
    4f1a:	4620      	mov	r0, r4
    4f1c:	f7ff ffa4 	bl	4e68 <_deferredlazyseek>
    4f20:	68e6      	ldr	r6, [r4, #12]
    4f22:	f446 3390 	orr.w	r3, r6, #73728	; 0x12000
    4f26:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    4f2a:	60e3      	str	r3, [r4, #12]
    4f2c:	d11c      	bne.n	4f68 <__flsbuf+0xbc>
    4f2e:	6960      	ldr	r0, [r4, #20]
    4f30:	f000 ff06 	bl	5d40 <__sys_istty>
    4f34:	b150      	cbz	r0, 4f4c <__flsbuf+0xa0>
    4f36:	0572      	lsls	r2, r6, #21
    4f38:	d508      	bpl.n	4f4c <__flsbuf+0xa0>
    4f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4f3c:	6123      	str	r3, [r4, #16]
    4f3e:	6023      	str	r3, [r4, #0]
    4f40:	2301      	movs	r3, #1
    4f42:	61e3      	str	r3, [r4, #28]
    4f44:	f446 3392 	orr.w	r3, r6, #74752	; 0x12400
    4f48:	60e3      	str	r3, [r4, #12]
    4f4a:	e00d      	b.n	4f68 <__flsbuf+0xbc>
    4f4c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4f50:	f7fe fa5c 	bl	340c <_Csys_alloc>
    4f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4f58:	68e2      	ldr	r2, [r4, #12]
    4f5a:	61e3      	str	r3, [r4, #28]
    4f5c:	f446 3394 	orr.w	r3, r6, #75776	; 0x12800
    4f60:	431a      	orrs	r2, r3
    4f62:	6120      	str	r0, [r4, #16]
    4f64:	6020      	str	r0, [r4, #0]
    4f66:	60e2      	str	r2, [r4, #12]
    4f68:	f413 6f10 	tst.w	r3, #2304	; 0x900
    4f6c:	6821      	ldr	r1, [r4, #0]
    4f6e:	6926      	ldr	r6, [r4, #16]
    4f70:	d01c      	beq.n	4fac <__flsbuf+0x100>
    4f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4f74:	689b      	ldr	r3, [r3, #8]
    4f76:	428b      	cmp	r3, r1
    4f78:	bf2c      	ite	cs
    4f7a:	ebc6 0103 	rsbcs	r1, r6, r3
    4f7e:	ebc6 0101 	rsbcc	r1, r6, r1
    4f82:	b951      	cbnz	r1, 4f9a <__flsbuf+0xee>
    4f84:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4f86:	1c72      	adds	r2, r6, #1
    4f88:	609a      	str	r2, [r3, #8]
    4f8a:	6022      	str	r2, [r4, #0]
    4f8c:	69e2      	ldr	r2, [r4, #28]
    4f8e:	1e51      	subs	r1, r2, #1
    4f90:	60a1      	str	r1, [r4, #8]
    4f92:	60da      	str	r2, [r3, #12]
    4f94:	7035      	strb	r5, [r6, #0]
    4f96:	b2e8      	uxtb	r0, r5
    4f98:	bd70      	pop	{r4, r5, r6, pc}
    4f9a:	4630      	mov	r0, r6
    4f9c:	4622      	mov	r2, r4
    4f9e:	f000 f8db 	bl	5158 <_Cwritebuf>
    4fa2:	2800      	cmp	r0, #0
    4fa4:	d0ee      	beq.n	4f84 <__flsbuf+0xd8>
    4fa6:	f04f 30ff 	mov.w	r0, #4294967295
    4faa:	bd70      	pop	{r4, r5, r6, pc}
    4fac:	1c4a      	adds	r2, r1, #1
    4fae:	b2ed      	uxtb	r5, r5
    4fb0:	6022      	str	r2, [r4, #0]
    4fb2:	700d      	strb	r5, [r1, #0]
    4fb4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4fb6:	6821      	ldr	r1, [r4, #0]
    4fb8:	6882      	ldr	r2, [r0, #8]
    4fba:	428a      	cmp	r2, r1
    4fbc:	bf2c      	ite	cs
    4fbe:	ebc6 0102 	rsbcs	r1, r6, r2
    4fc2:	ebc6 0101 	rsbcc	r1, r6, r1
    4fc6:	69e2      	ldr	r2, [r4, #28]
    4fc8:	055b      	lsls	r3, r3, #21
    4fca:	60c2      	str	r2, [r0, #12]
    4fcc:	d403      	bmi.n	4fd6 <__flsbuf+0x12a>
    4fce:	2d0a      	cmp	r5, #10
    4fd0:	d001      	beq.n	4fd6 <__flsbuf+0x12a>
    4fd2:	4291      	cmp	r1, r2
    4fd4:	db09      	blt.n	4fea <__flsbuf+0x13e>
    4fd6:	2300      	movs	r3, #0
    4fd8:	6086      	str	r6, [r0, #8]
    4fda:	4622      	mov	r2, r4
    4fdc:	6026      	str	r6, [r4, #0]
    4fde:	60a3      	str	r3, [r4, #8]
    4fe0:	4630      	mov	r0, r6
    4fe2:	f000 f8b9 	bl	5158 <_Cwritebuf>
    4fe6:	2800      	cmp	r0, #0
    4fe8:	d1dd      	bne.n	4fa6 <__flsbuf+0xfa>
    4fea:	4628      	mov	r0, r5
    4fec:	bd70      	pop	{r4, r5, r6, pc}

00004fee <_fdopen>:
    4fee:	b570      	push	{r4, r5, r6, lr}
    4ff0:	460d      	mov	r5, r1
    4ff2:	4606      	mov	r6, r0
    4ff4:	4610      	mov	r0, r2
    4ff6:	4614      	mov	r4, r2
    4ff8:	f000 f8e6 	bl	51c8 <fclose>
    4ffc:	782b      	ldrb	r3, [r5, #0]
    4ffe:	2b72      	cmp	r3, #114	; 0x72
    5000:	d00a      	beq.n	5018 <_fdopen+0x2a>
    5002:	2b77      	cmp	r3, #119	; 0x77
    5004:	d005      	beq.n	5012 <_fdopen+0x24>
    5006:	2b61      	cmp	r3, #97	; 0x61
    5008:	d123      	bne.n	5052 <_fdopen+0x64>
    500a:	2308      	movs	r3, #8
    500c:	f248 0202 	movw	r2, #32770	; 0x8002
    5010:	e004      	b.n	501c <_fdopen+0x2e>
    5012:	2304      	movs	r3, #4
    5014:	2202      	movs	r2, #2
    5016:	e001      	b.n	501c <_fdopen+0x2e>
    5018:	2300      	movs	r3, #0
    501a:	2201      	movs	r2, #1
    501c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    5020:	292b      	cmp	r1, #43	; 0x2b
    5022:	d006      	beq.n	5032 <_fdopen+0x44>
    5024:	2962      	cmp	r1, #98	; 0x62
    5026:	d109      	bne.n	503c <_fdopen+0x4e>
    5028:	f042 0204 	orr.w	r2, r2, #4
    502c:	f043 0301 	orr.w	r3, r3, #1
    5030:	e7f4      	b.n	501c <_fdopen+0x2e>
    5032:	f042 0203 	orr.w	r2, r2, #3
    5036:	f043 0302 	orr.w	r3, r3, #2
    503a:	e7ef      	b.n	501c <_fdopen+0x2e>
    503c:	071b      	lsls	r3, r3, #28
    503e:	60e2      	str	r2, [r4, #12]
    5040:	6166      	str	r6, [r4, #20]
    5042:	4620      	mov	r0, r4
    5044:	d507      	bpl.n	5056 <_fdopen+0x68>
    5046:	2100      	movs	r1, #0
    5048:	2202      	movs	r2, #2
    504a:	f000 f90b 	bl	5264 <fseek>
    504e:	4620      	mov	r0, r4
    5050:	bd70      	pop	{r4, r5, r6, pc}
    5052:	2000      	movs	r0, #0
    5054:	bd70      	pop	{r4, r5, r6, pc}
    5056:	bd70      	pop	{r4, r5, r6, pc}

00005058 <_fflush>:
    5058:	b538      	push	{r3, r4, r5, lr}
    505a:	4604      	mov	r4, r0
    505c:	6a42      	ldr	r2, [r0, #36]	; 0x24
    505e:	6905      	ldr	r5, [r0, #16]
    5060:	6803      	ldr	r3, [r0, #0]
    5062:	68c0      	ldr	r0, [r0, #12]
    5064:	6891      	ldr	r1, [r2, #8]
    5066:	f420 2200 	bic.w	r2, r0, #524288	; 0x80000
    506a:	60e2      	str	r2, [r4, #12]
    506c:	f000 0282 	and.w	r2, r0, #130	; 0x82
    5070:	2a02      	cmp	r2, #2
    5072:	d002      	beq.n	507a <_fflush+0x22>
    5074:	f04f 30ff 	mov.w	r0, #4294967295
    5078:	bd38      	pop	{r3, r4, r5, pc}
    507a:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
    507e:	d016      	beq.n	50ae <_fflush+0x56>
    5080:	4299      	cmp	r1, r3
    5082:	bf38      	it	cc
    5084:	4619      	movcc	r1, r3
    5086:	42a9      	cmp	r1, r5
    5088:	d109      	bne.n	509e <_fflush+0x46>
    508a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    508c:	2000      	movs	r0, #0
    508e:	609d      	str	r5, [r3, #8]
    5090:	68e3      	ldr	r3, [r4, #12]
    5092:	6025      	str	r5, [r4, #0]
    5094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5098:	60a0      	str	r0, [r4, #8]
    509a:	60e3      	str	r3, [r4, #12]
    509c:	bd38      	pop	{r3, r4, r5, pc}
    509e:	4628      	mov	r0, r5
    50a0:	1b49      	subs	r1, r1, r5
    50a2:	4622      	mov	r2, r4
    50a4:	f000 f858 	bl	5158 <_Cwritebuf>
    50a8:	2800      	cmp	r0, #0
    50aa:	d0ee      	beq.n	508a <_fflush+0x32>
    50ac:	e7e2      	b.n	5074 <_fflush+0x1c>
    50ae:	bd38      	pop	{r3, r4, r5, pc}

000050b0 <_frexpl>:
    50b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50b2:	4615      	mov	r5, r2
    50b4:	2300      	movs	r3, #0
    50b6:	2200      	movs	r2, #0
    50b8:	4606      	mov	r6, r0
    50ba:	460f      	mov	r7, r1
    50bc:	f000 fd80 	bl	5bc0 <__aeabi_dcmpeq>
    50c0:	b120      	cbz	r0, 50cc <_frexpl+0x1c>
    50c2:	2300      	movs	r3, #0
    50c4:	602b      	str	r3, [r5, #0]
    50c6:	2000      	movs	r0, #0
    50c8:	2100      	movs	r1, #0
    50ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50cc:	f3c7 530a 	ubfx	r3, r7, #20, #11
    50d0:	4630      	mov	r0, r6
    50d2:	4639      	mov	r1, r7
    50d4:	f2a3 34fe 	subw	r4, r3, #1022	; 0x3fe
    50d8:	b98b      	cbnz	r3, 50fe <_frexpl+0x4e>
    50da:	4632      	mov	r2, r6
    50dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
    50e0:	0fd7      	lsrs	r7, r2, #31
    50e2:	f403 2600 	and.w	r6, r3, #524288	; 0x80000
    50e6:	ea47 0343 	orr.w	r3, r7, r3, lsl #1
    50ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
    50ee:	0052      	lsls	r2, r2, #1
    50f0:	b11e      	cbz	r6, 50fa <_frexpl+0x4a>
    50f2:	f363 0113 	bfi	r1, r3, #0, #20
    50f6:	4610      	mov	r0, r2
    50f8:	e001      	b.n	50fe <_frexpl+0x4e>
    50fa:	3c01      	subs	r4, #1
    50fc:	e7f0      	b.n	50e0 <_frexpl+0x30>
    50fe:	f240 33fe 	movw	r3, #1022	; 0x3fe
    5102:	602c      	str	r4, [r5, #0]
    5104:	f363 511e 	bfi	r1, r3, #20, #11
    5108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000510c <_ldexpl>:
    510c:	b570      	push	{r4, r5, r6, lr}
    510e:	2300      	movs	r3, #0
    5110:	4616      	mov	r6, r2
    5112:	2200      	movs	r2, #0
    5114:	4604      	mov	r4, r0
    5116:	460d      	mov	r5, r1
    5118:	f000 fd52 	bl	5bc0 <__aeabi_dcmpeq>
    511c:	b110      	cbz	r0, 5124 <_ldexpl+0x18>
    511e:	2000      	movs	r0, #0
    5120:	2100      	movs	r1, #0
    5122:	bd70      	pop	{r4, r5, r6, pc}
    5124:	f240 73fe 	movw	r3, #2046	; 0x7fe
    5128:	f3c5 520a 	ubfx	r2, r5, #20, #11
    512c:	4432      	add	r2, r6
    512e:	429a      	cmp	r2, r3
    5130:	4620      	mov	r0, r4
    5132:	4629      	mov	r1, r5
    5134:	dd06      	ble.n	5144 <_ldexpl+0x38>
    5136:	4b06      	ldr	r3, [pc, #24]	; (5150 <_ldexpl+0x44>)
    5138:	2222      	movs	r2, #34	; 0x22
    513a:	601a      	str	r2, [r3, #0]
    513c:	4b05      	ldr	r3, [pc, #20]	; (5154 <_ldexpl+0x48>)
    513e:	e9d3 0100 	ldrd	r0, r1, [r3]
    5142:	bd70      	pop	{r4, r5, r6, pc}
    5144:	2a00      	cmp	r2, #0
    5146:	ddea      	ble.n	511e <_ldexpl+0x12>
    5148:	f362 511e 	bfi	r1, r2, #20, #11
    514c:	bd70      	pop	{r4, r5, r6, pc}
    514e:	bf00      	nop
    5150:	10000a10 	.word	0x10000a10
    5154:	00006b48 	.word	0x00006b48

00005158 <_Cwritebuf>:
    5158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    515c:	68d5      	ldr	r5, [r2, #12]
    515e:	4680      	mov	r8, r0
    5160:	02eb      	lsls	r3, r5, #11
    5162:	460e      	mov	r6, r1
    5164:	4614      	mov	r4, r2
    5166:	6957      	ldr	r7, [r2, #20]
    5168:	d505      	bpl.n	5176 <_Cwritebuf+0x1e>
    516a:	4638      	mov	r0, r7
    516c:	f000 fde5 	bl	5d3a <__sys_flen>
    5170:	f045 0510 	orr.w	r5, r5, #16
    5174:	61a0      	str	r0, [r4, #24]
    5176:	4b13      	ldr	r3, [pc, #76]	; (51c4 <_Cwritebuf+0x6c>)
    5178:	402b      	ands	r3, r5
    517a:	b153      	cbz	r3, 5192 <_Cwritebuf+0x3a>
    517c:	4638      	mov	r0, r7
    517e:	69a1      	ldr	r1, [r4, #24]
    5180:	f000 fde4 	bl	5d4c <__sys_seek>
    5184:	2800      	cmp	r0, #0
    5186:	db14      	blt.n	51b2 <_Cwritebuf+0x5a>
    5188:	f425 3500 	bic.w	r5, r5, #131072	; 0x20000
    518c:	f025 0510 	bic.w	r5, r5, #16
    5190:	60e5      	str	r5, [r4, #12]
    5192:	4632      	mov	r2, r6
    5194:	4638      	mov	r0, r7
    5196:	4641      	mov	r1, r8
    5198:	f000 fdde 	bl	5d58 <__sys_write>
    519c:	1b80      	subs	r0, r0, r6
    519e:	bf18      	it	ne
    51a0:	f04f 30ff 	movne.w	r0, #4294967295
    51a4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
    51a8:	1af6      	subs	r6, r6, r3
    51aa:	69a3      	ldr	r3, [r4, #24]
    51ac:	441e      	add	r6, r3
    51ae:	61a6      	str	r6, [r4, #24]
    51b0:	b128      	cbz	r0, 51be <_Cwritebuf+0x66>
    51b2:	68e3      	ldr	r3, [r4, #12]
    51b4:	f04f 30ff 	mov.w	r0, #4294967295
    51b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    51bc:	60e3      	str	r3, [r4, #12]
    51be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    51c2:	bf00      	nop
    51c4:	00020010 	.word	0x00020010

000051c8 <fclose>:
    51c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51cc:	f100 050c 	add.w	r5, r0, #12
    51d0:	e895 01a0 	ldmia.w	r5, {r5, r7, r8}
    51d4:	07a9      	lsls	r1, r5, #30
    51d6:	b088      	sub	sp, #32
    51d8:	4604      	mov	r4, r0
    51da:	6a46      	ldr	r6, [r0, #36]	; 0x24
    51dc:	d025      	beq.n	522a <fclose+0x62>
    51de:	072a      	lsls	r2, r5, #28
    51e0:	d416      	bmi.n	5210 <fclose+0x48>
    51e2:	f000 f827 	bl	5234 <fflush>
    51e6:	4640      	mov	r0, r8
    51e8:	f000 fda4 	bl	5d34 <__sys_close>
    51ec:	052b      	lsls	r3, r5, #20
    51ee:	d502      	bpl.n	51f6 <fclose+0x2e>
    51f0:	4638      	mov	r0, r7
    51f2:	f7fe f8f3 	bl	33dc <free>
    51f6:	0dad      	lsrs	r5, r5, #22
    51f8:	05ad      	lsls	r5, r5, #22
    51fa:	f115 4fa5 	cmn.w	r5, #1384120320	; 0x52800000
    51fe:	d107      	bne.n	5210 <fclose+0x48>
    5200:	4668      	mov	r0, sp
    5202:	6a21      	ldr	r1, [r4, #32]
    5204:	2220      	movs	r2, #32
    5206:	f000 fda4 	bl	5d52 <__sys_tmpnam>
    520a:	4668      	mov	r0, sp
    520c:	f000 f8d8 	bl	53c0 <remove>
    5210:	2100      	movs	r1, #0
    5212:	2218      	movs	r2, #24
    5214:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5216:	f7fe f879 	bl	330c <memset>
    521a:	4620      	mov	r0, r4
    521c:	2100      	movs	r1, #0
    521e:	2228      	movs	r2, #40	; 0x28
    5220:	f7fe f874 	bl	330c <memset>
    5224:	6266      	str	r6, [r4, #36]	; 0x24
    5226:	2000      	movs	r0, #0
    5228:	e001      	b.n	522e <fclose+0x66>
    522a:	f04f 30ff 	mov.w	r0, #4294967295
    522e:	b008      	add	sp, #32
    5230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005234 <fflush>:
    5234:	b538      	push	{r3, r4, r5, lr}
    5236:	4604      	mov	r4, r0
    5238:	b118      	cbz	r0, 5242 <fflush+0xe>
    523a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    523e:	f000 b8d5 	b.w	53ec <_do_fflush>
    5242:	4605      	mov	r5, r0
    5244:	4806      	ldr	r0, [pc, #24]	; (5260 <fflush+0x2c>)
    5246:	4420      	add	r0, r4
    5248:	f000 f8d0 	bl	53ec <_do_fflush>
    524c:	3428      	adds	r4, #40	; 0x28
    524e:	2800      	cmp	r0, #0
    5250:	bf18      	it	ne
    5252:	f04f 35ff 	movne.w	r5, #4294967295
    5256:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
    525a:	d1f3      	bne.n	5244 <fflush+0x10>
    525c:	4628      	mov	r0, r5
    525e:	bd38      	pop	{r3, r4, r5, pc}
    5260:	10001900 	.word	0x10001900

00005264 <fseek>:
    5264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5268:	68c6      	ldr	r6, [r0, #12]
    526a:	4b41      	ldr	r3, [pc, #260]	; (5370 <fseek+0x10c>)
    526c:	4604      	mov	r4, r0
    526e:	4033      	ands	r3, r6
    5270:	460d      	mov	r5, r1
    5272:	4690      	mov	r8, r2
    5274:	f8d0 9014 	ldr.w	r9, [r0, #20]
    5278:	2b00      	cmp	r3, #0
    527a:	d075      	beq.n	5368 <fseek+0x104>
    527c:	4648      	mov	r0, r9
    527e:	f000 fd5f 	bl	5d40 <__sys_istty>
    5282:	4607      	mov	r7, r0
    5284:	2800      	cmp	r0, #0
    5286:	d16f      	bne.n	5368 <fseek+0x104>
    5288:	f1b8 0f01 	cmp.w	r8, #1
    528c:	d006      	beq.n	529c <fseek+0x38>
    528e:	f1b8 0f02 	cmp.w	r8, #2
    5292:	d008      	beq.n	52a6 <fseek+0x42>
    5294:	f1b8 0f00 	cmp.w	r8, #0
    5298:	d166      	bne.n	5368 <fseek+0x104>
    529a:	e029      	b.n	52f0 <fseek+0x8c>
    529c:	4620      	mov	r0, r4
    529e:	f000 f869 	bl	5374 <ftell>
    52a2:	4405      	add	r5, r0
    52a4:	e024      	b.n	52f0 <fseek+0x8c>
    52a6:	4648      	mov	r0, r9
    52a8:	f000 fd47 	bl	5d3a <__sys_flen>
    52ac:	f1b0 0e00 	subs.w	lr, r0, #0
    52b0:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    52b4:	da04      	bge.n	52c0 <fseek+0x5c>
    52b6:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    52ba:	60e1      	str	r1, [r4, #12]
    52bc:	2701      	movs	r7, #1
    52be:	e054      	b.n	536a <fseek+0x106>
    52c0:	6823      	ldr	r3, [r4, #0]
    52c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    52c4:	461a      	mov	r2, r3
    52c6:	69a3      	ldr	r3, [r4, #24]
    52c8:	4619      	mov	r1, r3
    52ca:	6883      	ldr	r3, [r0, #8]
    52cc:	4293      	cmp	r3, r2
    52ce:	bf2c      	ite	cs
    52d0:	18c9      	addcs	r1, r1, r3
    52d2:	1889      	addcc	r1, r1, r2
    52d4:	6923      	ldr	r3, [r4, #16]
    52d6:	f01c 0f20 	tst.w	ip, #32
    52da:	eba1 0303 	sub.w	r3, r1, r3
    52de:	d003      	beq.n	52e8 <fseek+0x84>
    52e0:	6842      	ldr	r2, [r0, #4]
    52e2:	4293      	cmp	r3, r2
    52e4:	bfb8      	it	lt
    52e6:	4613      	movlt	r3, r2
    52e8:	4573      	cmp	r3, lr
    52ea:	bfac      	ite	ge
    52ec:	18ed      	addge	r5, r5, r3
    52ee:	4475      	addlt	r5, lr
    52f0:	2d00      	cmp	r5, #0
    52f2:	db39      	blt.n	5368 <fseek+0x104>
    52f4:	f416 5f00 	tst.w	r6, #8192	; 0x2000
    52f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    52fa:	d004      	beq.n	5306 <fseek+0xa2>
    52fc:	6823      	ldr	r3, [r4, #0]
    52fe:	6891      	ldr	r1, [r2, #8]
    5300:	4299      	cmp	r1, r3
    5302:	bf38      	it	cc
    5304:	6093      	strcc	r3, [r2, #8]
    5306:	69a1      	ldr	r1, [r4, #24]
    5308:	428d      	cmp	r5, r1
    530a:	db10      	blt.n	532e <fseek+0xca>
    530c:	6890      	ldr	r0, [r2, #8]
    530e:	6823      	ldr	r3, [r4, #0]
    5310:	f8d4 e010 	ldr.w	lr, [r4, #16]
    5314:	4283      	cmp	r3, r0
    5316:	bf38      	it	cc
    5318:	4603      	movcc	r3, r0
    531a:	1858      	adds	r0, r3, r1
    531c:	ebce 0000 	rsb	r0, lr, r0
    5320:	4285      	cmp	r5, r0
    5322:	dc04      	bgt.n	532e <fseek+0xca>
    5324:	68d0      	ldr	r0, [r2, #12]
    5326:	eb01 0c00 	add.w	ip, r1, r0
    532a:	4565      	cmp	r5, ip
    532c:	db06      	blt.n	533c <fseek+0xd8>
    532e:	2300      	movs	r3, #0
    5330:	60a3      	str	r3, [r4, #8]
    5332:	6063      	str	r3, [r4, #4]
    5334:	f046 0620 	orr.w	r6, r6, #32
    5338:	6055      	str	r5, [r2, #4]
    533a:	e00f      	b.n	535c <fseek+0xf8>
    533c:	1a6d      	subs	r5, r5, r1
    533e:	07b1      	lsls	r1, r6, #30
    5340:	bf44      	itt	mi
    5342:	1a28      	submi	r0, r5, r0
    5344:	60a0      	strmi	r0, [r4, #8]
    5346:	07f2      	lsls	r2, r6, #31
    5348:	bf44      	itt	mi
    534a:	ebc3 030e 	rsbmi	r3, r3, lr
    534e:	195b      	addmi	r3, r3, r5
    5350:	4475      	add	r5, lr
    5352:	bf48      	it	mi
    5354:	6063      	strmi	r3, [r4, #4]
    5356:	6025      	str	r5, [r4, #0]
    5358:	f026 0620 	bic.w	r6, r6, #32
    535c:	f426 2603 	bic.w	r6, r6, #536576	; 0x83000
    5360:	f026 0640 	bic.w	r6, r6, #64	; 0x40
    5364:	60e6      	str	r6, [r4, #12]
    5366:	e000      	b.n	536a <fseek+0x106>
    5368:	2702      	movs	r7, #2
    536a:	4638      	mov	r0, r7
    536c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5370:	00100003 	.word	0x00100003

00005374 <ftell>:
    5374:	68c3      	ldr	r3, [r0, #12]
    5376:	079a      	lsls	r2, r3, #30
    5378:	d105      	bne.n	5386 <ftell+0x12>
    537a:	4b10      	ldr	r3, [pc, #64]	; (53bc <ftell+0x48>)
    537c:	2221      	movs	r2, #33	; 0x21
    537e:	601a      	str	r2, [r3, #0]
    5380:	f04f 30ff 	mov.w	r0, #4294967295
    5384:	4770      	bx	lr
    5386:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    538a:	f003 0320 	and.w	r3, r3, #32
    538e:	d00a      	beq.n	53a6 <ftell+0x32>
    5390:	b113      	cbz	r3, 5398 <ftell+0x24>
    5392:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5394:	6858      	ldr	r0, [r3, #4]
    5396:	e004      	b.n	53a2 <ftell+0x2e>
    5398:	6802      	ldr	r2, [r0, #0]
    539a:	6983      	ldr	r3, [r0, #24]
    539c:	6900      	ldr	r0, [r0, #16]
    539e:	4413      	add	r3, r2
    53a0:	1a18      	subs	r0, r3, r0
    53a2:	3801      	subs	r0, #1
    53a4:	4770      	bx	lr
    53a6:	b113      	cbz	r3, 53ae <ftell+0x3a>
    53a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    53aa:	6858      	ldr	r0, [r3, #4]
    53ac:	4770      	bx	lr
    53ae:	6802      	ldr	r2, [r0, #0]
    53b0:	6983      	ldr	r3, [r0, #24]
    53b2:	6900      	ldr	r0, [r0, #16]
    53b4:	4413      	add	r3, r2
    53b6:	1a18      	subs	r0, r3, r0
    53b8:	4770      	bx	lr
    53ba:	bf00      	nop
    53bc:	10000a10 	.word	0x10000a10

000053c0 <remove>:
    53c0:	b510      	push	{r4, lr}
    53c2:	4604      	mov	r4, r0
    53c4:	f7ff fcd0 	bl	4d68 <strlen>
    53c8:	4601      	mov	r1, r0
    53ca:	4620      	mov	r0, r4
    53cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    53d0:	f000 bcb9 	b.w	5d46 <__sys_remove>

000053d4 <__check_heap_overflow>:
    53d4:	4b04      	ldr	r3, [pc, #16]	; (53e8 <__check_heap_overflow+0x14>)
    53d6:	b123      	cbz	r3, 53e2 <__check_heap_overflow+0xe>
    53d8:	4298      	cmp	r0, r3
    53da:	bf34      	ite	cc
    53dc:	2000      	movcc	r0, #0
    53de:	2001      	movcs	r0, #1
    53e0:	4770      	bx	lr
    53e2:	4618      	mov	r0, r3
    53e4:	4770      	bx	lr
    53e6:	bf00      	nop
    53e8:	00000000 	.word	0x00000000

000053ec <_do_fflush>:
    53ec:	68c2      	ldr	r2, [r0, #12]
    53ee:	b570      	push	{r4, r5, r6, lr}
    53f0:	f012 0303 	ands.w	r3, r2, #3
    53f4:	4604      	mov	r4, r0
    53f6:	d019      	beq.n	542c <_do_fflush+0x40>
    53f8:	0693      	lsls	r3, r2, #26
    53fa:	d504      	bpl.n	5406 <_do_fflush+0x1a>
    53fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
    53fe:	685d      	ldr	r5, [r3, #4]
    5400:	f7ff fd32 	bl	4e68 <_deferredlazyseek>
    5404:	e004      	b.n	5410 <_do_fflush+0x24>
    5406:	6805      	ldr	r5, [r0, #0]
    5408:	6983      	ldr	r3, [r0, #24]
    540a:	442b      	add	r3, r5
    540c:	6905      	ldr	r5, [r0, #16]
    540e:	1b5d      	subs	r5, r3, r5
    5410:	68e3      	ldr	r3, [r4, #12]
    5412:	4620      	mov	r0, r4
    5414:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    5418:	60e3      	str	r3, [r4, #12]
    541a:	f7ff fe1d 	bl	5058 <_fflush>
    541e:	4606      	mov	r6, r0
    5420:	4629      	mov	r1, r5
    5422:	4620      	mov	r0, r4
    5424:	2200      	movs	r2, #0
    5426:	f7ff ff1d 	bl	5264 <fseek>
    542a:	4633      	mov	r3, r6
    542c:	4618      	mov	r0, r3
    542e:	bd70      	pop	{r4, r5, r6, pc}

00005430 <__aeabi_uldivmod>:
    5430:	f05f 0c00 	movs.w	ip, #0

00005434 <__bhs_ldivmod1>:
    5434:	b530      	push	{r4, r5, lr}
    5436:	001c      	movs	r4, r3
    5438:	d122      	bne.n	5480 <ldiv64>
    543a:	0012      	movs	r2, r2
    543c:	d06f      	beq.n	551e <ldiv_divzero>
    543e:	4291      	cmp	r1, r2
    5440:	d306      	bcc.n	5450 <ldiv32>
    5442:	4605      	mov	r5, r0
    5444:	4608      	mov	r0, r1
    5446:	2100      	movs	r1, #0
    5448:	f000 f86f 	bl	552a <udiv6432>
    544c:	4604      	mov	r4, r0
    544e:	4628      	mov	r0, r5

00005450 <ldiv32>:
    5450:	f000 f86b 	bl	552a <udiv6432>
    5454:	460a      	mov	r2, r1
    5456:	4621      	mov	r1, r4

00005458 <ldiv_return>:
    5458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    545c:	f01c 4f40 	tst.w	ip, #3221225472	; 0xc0000000
    5460:	bf08      	it	eq
    5462:	4770      	bxeq	lr
    5464:	d503      	bpl.n	546e <ldiv_sign>
    5466:	4249      	negs	r1, r1
    5468:	4240      	negs	r0, r0
    546a:	f161 0100 	sbc.w	r1, r1, #0

0000546e <ldiv_sign>:
    546e:	ea5f 0c8c 	movs.w	ip, ip, lsl #2
    5472:	bf38      	it	cc
    5474:	4770      	bxcc	lr
    5476:	425b      	negs	r3, r3
    5478:	4252      	negs	r2, r2
    547a:	f163 0300 	sbc.w	r3, r3, #0
    547e:	4770      	bx	lr

00005480 <ldiv64>:
    5480:	d442      	bmi.n	5508 <ldiv_res01>
    5482:	0c1c      	lsrs	r4, r3, #16
    5484:	bf04      	itt	eq
    5486:	041b      	lsleq	r3, r3, #16
    5488:	f10c 0c10 	addeq.w	ip, ip, #16
    548c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    5490:	bf04      	itt	eq
    5492:	021b      	lsleq	r3, r3, #8
    5494:	f10c 0c08 	addeq.w	ip, ip, #8
    5498:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    549c:	bf04      	itt	eq
    549e:	011b      	lsleq	r3, r3, #4
    54a0:	f10c 0c04 	addeq.w	ip, ip, #4
    54a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    54a8:	bf04      	itt	eq
    54aa:	f10c 0c02 	addeq.w	ip, ip, #2
    54ae:	ea5f 0383 	movseq.w	r3, r3, lsl #2
    54b2:	bf5c      	itt	pl
    54b4:	f10c 0c01 	addpl.w	ip, ip, #1
    54b8:	005b      	lslpl	r3, r3, #1
    54ba:	f1cc 0e20 	rsb	lr, ip, #32
    54be:	fa22 f40e 	lsr.w	r4, r2, lr
    54c2:	4323      	orrs	r3, r4
    54c4:	fa02 f20c 	lsl.w	r2, r2, ip
    54c8:	fa00 f50c 	lsl.w	r5, r0, ip
    54cc:	fa20 f00e 	lsr.w	r0, r0, lr
    54d0:	fa01 f40c 	lsl.w	r4, r1, ip
    54d4:	4320      	orrs	r0, r4
    54d6:	fa21 f10e 	lsr.w	r1, r1, lr
    54da:	4614      	mov	r4, r2
    54dc:	461a      	mov	r2, r3
    54de:	f000 f824 	bl	552a <udiv6432>
    54e2:	fba4 2300 	umull	r2, r3, r4, r0
    54e6:	1aaa      	subs	r2, r5, r2
    54e8:	eb71 0303 	sbcs.w	r3, r1, r3
    54ec:	bf3c      	itt	cc
    54ee:	191b      	addcc	r3, r3, r4
    54f0:	3801      	subcc	r0, #1
    54f2:	f1cc 0e20 	rsb	lr, ip, #32
    54f6:	fa22 f20c 	lsr.w	r2, r2, ip
    54fa:	fa03 f40e 	lsl.w	r4, r3, lr
    54fe:	4322      	orrs	r2, r4
    5500:	fa23 f30c 	lsr.w	r3, r3, ip
    5504:	2100      	movs	r1, #0
    5506:	e7a7      	b.n	5458 <ldiv_return>

00005508 <ldiv_res01>:
    5508:	1a82      	subs	r2, r0, r2
    550a:	eb71 0303 	sbcs.w	r3, r1, r3
    550e:	bf3c      	itt	cc
    5510:	4602      	movcc	r2, r0
    5512:	460b      	movcc	r3, r1
    5514:	f04f 0100 	mov.w	r1, #0
    5518:	f141 0000 	adc.w	r0, r1, #0
    551c:	e79c      	b.n	5458 <ldiv_return>

0000551e <ldiv_divzero>:
    551e:	2000      	movs	r0, #0
    5520:	2100      	movs	r1, #0
    5522:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5526:	f000 b83d 	b.w	55a4 <__aeabi_idiv0>

0000552a <udiv6432>:
    552a:	2304      	movs	r3, #4
    552c:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    5530:	d209      	bcs.n	5546 <udiv6432_entry>

00005532 <udiv6432_loop1>:
    5532:	0209      	lsls	r1, r1, #8
    5534:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
    5538:	0200      	lsls	r0, r0, #8
    553a:	3b01      	subs	r3, #1
    553c:	bf08      	it	eq
    553e:	4770      	bxeq	lr
    5540:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    5544:	d3f5      	bcc.n	5532 <udiv6432_loop1>

00005546 <udiv6432_entry>:
    5546:	1800      	adds	r0, r0, r0

00005548 <udiv6432_loop>:
    5548:	4149      	adcs	r1, r1
    554a:	bf34      	ite	cc
    554c:	4291      	cmpcc	r1, r2
    554e:	1a89      	subcs	r1, r1, r2
    5550:	4140      	adcs	r0, r0
    5552:	4149      	adcs	r1, r1
    5554:	bf34      	ite	cc
    5556:	4291      	cmpcc	r1, r2
    5558:	1a89      	subcs	r1, r1, r2
    555a:	4140      	adcs	r0, r0
    555c:	4149      	adcs	r1, r1
    555e:	bf34      	ite	cc
    5560:	4291      	cmpcc	r1, r2
    5562:	1a89      	subcs	r1, r1, r2
    5564:	4140      	adcs	r0, r0
    5566:	4149      	adcs	r1, r1
    5568:	bf34      	ite	cc
    556a:	4291      	cmpcc	r1, r2
    556c:	1a89      	subcs	r1, r1, r2
    556e:	4140      	adcs	r0, r0
    5570:	4149      	adcs	r1, r1
    5572:	bf34      	ite	cc
    5574:	4291      	cmpcc	r1, r2
    5576:	1a89      	subcs	r1, r1, r2
    5578:	4140      	adcs	r0, r0
    557a:	4149      	adcs	r1, r1
    557c:	bf34      	ite	cc
    557e:	4291      	cmpcc	r1, r2
    5580:	1a89      	subcs	r1, r1, r2
    5582:	4140      	adcs	r0, r0
    5584:	4149      	adcs	r1, r1
    5586:	bf34      	ite	cc
    5588:	4291      	cmpcc	r1, r2
    558a:	1a89      	subcs	r1, r1, r2
    558c:	4140      	adcs	r0, r0
    558e:	4149      	adcs	r1, r1
    5590:	bf34      	ite	cc
    5592:	4291      	cmpcc	r1, r2
    5594:	1a89      	subcs	r1, r1, r2
    5596:	4140      	adcs	r0, r0
    5598:	f1a3 0301 	sub.w	r3, r3, #1
    559c:	f013 0f0f 	tst.w	r3, #15
    55a0:	d1d2      	bne.n	5548 <udiv6432_loop>
    55a2:	4770      	bx	lr

000055a4 <__aeabi_idiv0>:
    55a4:	4770      	bx	lr
	...

000055a8 <__aeabi_dmul>:
    55a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55ac:	f3c1 540a 	ubfx	r4, r1, #20, #11
    55b0:	2c00      	cmp	r4, #0
    55b2:	d054      	beq.n	565e <__aeabi_dmul+0xb6>
    55b4:	f240 76ff 	movw	r6, #2047	; 0x7ff
    55b8:	42b4      	cmp	r4, r6
    55ba:	d050      	beq.n	565e <__aeabi_dmul+0xb6>
    55bc:	f3c3 550a 	ubfx	r5, r3, #20, #11
    55c0:	2d00      	cmp	r5, #0
    55c2:	d04c      	beq.n	565e <__aeabi_dmul+0xb6>
    55c4:	42b5      	cmp	r5, r6
    55c6:	d04a      	beq.n	565e <__aeabi_dmul+0xb6>
    55c8:	f3c1 0e13 	ubfx	lr, r1, #0, #20
    55cc:	ea4f 2ac2 	mov.w	sl, r2, lsl #11
    55d0:	f44e 1e80 	orr.w	lr, lr, #1048576	; 0x100000
    55d4:	fbae 670a 	umull	r6, r7, lr, sl
    55d8:	fbaa ab00 	umull	sl, fp, sl, r0
    55dc:	eb16 080b 	adds.w	r8, r6, fp
    55e0:	463e      	mov	r6, r7
    55e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
    55e6:	ea42 22c3 	orr.w	r2, r2, r3, lsl #11
    55ea:	f04f 0900 	mov.w	r9, #0
    55ee:	f149 0900 	adc.w	r9, r9, #0
    55f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    55f6:	fbe0 8902 	umlal	r8, r9, r0, r2
    55fa:	2700      	movs	r7, #0
    55fc:	eb16 0609 	adds.w	r6, r6, r9
    5600:	f147 0700 	adc.w	r7, r7, #0
    5604:	fbee 6702 	umlal	r6, r7, lr, r2
    5608:	404b      	eors	r3, r1
    560a:	f5b7 1f80 	cmp.w	r7, #1048576	; 0x100000
    560e:	442c      	add	r4, r5
    5610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    5614:	ea48 089a 	orr.w	r8, r8, sl, lsr #2
    5618:	d24b      	bcs.n	56b2 <__aeabi_dmul+0x10a>
    561a:	19b6      	adds	r6, r6, r6
    561c:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    5620:	417f      	adcs	r7, r7
    5622:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
    5626:	4316      	orrs	r6, r2
    5628:	ea4f 0848 	mov.w	r8, r8, lsl #1
    562c:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    5630:	18b6      	adds	r6, r6, r2
    5632:	f240 72fd 	movw	r2, #2045	; 0x7fd
    5636:	f147 0700 	adc.w	r7, r7, #0
    563a:	f1b8 4f00 	cmp.w	r8, #2147483648	; 0x80000000
    563e:	4635      	mov	r5, r6
    5640:	bf08      	it	eq
    5642:	f026 0501 	biceq.w	r5, r6, #1
    5646:	4294      	cmp	r4, r2
    5648:	d936      	bls.n	56b8 <__aeabi_dmul+0x110>
    564a:	2c00      	cmp	r4, #0
    564c:	bfa4      	itt	ge
    564e:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    5652:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    5656:	2000      	movs	r0, #0
    5658:	4619      	mov	r1, r3
    565a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    565e:	ea83 0201 	eor.w	r2, r3, r1
    5662:	0049      	lsls	r1, r1, #1
    5664:	f511 1f00 	cmn.w	r1, #2097152	; 0x200000
    5668:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
    566c:	d213      	bcs.n	5696 <__aeabi_dmul+0xee>
    566e:	005b      	lsls	r3, r3, #1
    5670:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    5674:	d317      	bcc.n	56a6 <__aeabi_dmul+0xfe>
    5676:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    567a:	d80d      	bhi.n	5698 <__aeabi_dmul+0xf0>
    567c:	0d49      	lsrs	r1, r1, #21
    567e:	0549      	lsls	r1, r1, #21
    5680:	2000      	movs	r0, #0
    5682:	b169      	cbz	r1, 56a0 <__aeabi_dmul+0xf8>
    5684:	0d5b      	lsrs	r3, r3, #21
    5686:	055b      	lsls	r3, r3, #21
    5688:	b153      	cbz	r3, 56a0 <__aeabi_dmul+0xf8>
    568a:	f042 42ff 	orr.w	r2, r2, #2139095040	; 0x7f800000
    568e:	f442 01e0 	orr.w	r1, r2, #7340032	; 0x700000
    5692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5696:	d00a      	beq.n	56ae <__aeabi_dmul+0x106>
    5698:	2000      	movs	r0, #0
    569a:	490a      	ldr	r1, [pc, #40]	; (56c4 <__aeabi_dmul+0x11c>)
    569c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56a0:	4908      	ldr	r1, [pc, #32]	; (56c4 <__aeabi_dmul+0x11c>)
    56a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56a6:	2000      	movs	r0, #0
    56a8:	4611      	mov	r1, r2
    56aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56ae:	005b      	lsls	r3, r3, #1
    56b0:	e7e1      	b.n	5676 <__aeabi_dmul+0xce>
    56b2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    56b6:	e7b9      	b.n	562c <__aeabi_dmul+0x84>
    56b8:	433b      	orrs	r3, r7
    56ba:	eb03 5104 	add.w	r1, r3, r4, lsl #20
    56be:	4628      	mov	r0, r5
    56c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56c4:	7ff80000 	.word	0x7ff80000

000056c8 <__aeabi_ddiv>:
    56c8:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
    56cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    56d0:	f1bc 0f00 	cmp.w	ip, #0
    56d4:	d053      	beq.n	577e <__aeabi_ddiv+0xb6>
    56d6:	f240 74ff 	movw	r4, #2047	; 0x7ff
    56da:	45a4      	cmp	ip, r4
    56dc:	d04f      	beq.n	577e <__aeabi_ddiv+0xb6>
    56de:	f3c3 580a 	ubfx	r8, r3, #20, #11
    56e2:	f1b8 0f00 	cmp.w	r8, #0
    56e6:	d04a      	beq.n	577e <__aeabi_ddiv+0xb6>
    56e8:	45a0      	cmp	r8, r4
    56ea:	d048      	beq.n	577e <__aeabi_ddiv+0xb6>
    56ec:	ea4f 5a50 	mov.w	sl, r0, lsr #21
    56f0:	ea4f 5952 	mov.w	r9, r2, lsr #21
    56f4:	02c4      	lsls	r4, r0, #11
    56f6:	02d6      	lsls	r6, r2, #11
    56f8:	ea4a 20c1 	orr.w	r0, sl, r1, lsl #11
    56fc:	ea49 22c3 	orr.w	r2, r9, r3, lsl #11
    5700:	f040 4500 	orr.w	r5, r0, #2147483648	; 0x80000000
    5704:	f042 4700 	orr.w	r7, r2, #2147483648	; 0x80000000
    5708:	42bd      	cmp	r5, r7
    570a:	bf08      	it	eq
    570c:	42b4      	cmpeq	r4, r6
    570e:	ebc8 0c0c 	rsb	ip, r8, ip
    5712:	ea83 0801 	eor.w	r8, r3, r1
    5716:	d25d      	bcs.n	57d4 <__aeabi_ddiv+0x10c>
    5718:	f20c 3cfd 	addw	ip, ip, #1021	; 0x3fd
    571c:	0879      	lsrs	r1, r7, #1
    571e:	ea4f 0036 	mov.w	r0, r6, rrx
    5722:	2334      	movs	r3, #52	; 0x34
    5724:	2200      	movs	r2, #0
    5726:	e000      	b.n	572a <__aeabi_ddiv+0x62>
    5728:	3b01      	subs	r3, #1
    572a:	428d      	cmp	r5, r1
    572c:	bf08      	it	eq
    572e:	4284      	cmpeq	r4, r0
    5730:	ea4f 0242 	mov.w	r2, r2, lsl #1
    5734:	d304      	bcc.n	5740 <__aeabi_ddiv+0x78>
    5736:	1a24      	subs	r4, r4, r0
    5738:	eb65 0501 	sbc.w	r5, r5, r1
    573c:	f042 0201 	orr.w	r2, r2, #1
    5740:	1924      	adds	r4, r4, r4
    5742:	416d      	adcs	r5, r5
    5744:	2b20      	cmp	r3, #32
    5746:	d062      	beq.n	580e <__aeabi_ddiv+0x146>
    5748:	2b00      	cmp	r3, #0
    574a:	d1ed      	bne.n	5728 <__aeabi_ddiv+0x60>
    574c:	428d      	cmp	r5, r1
    574e:	bf08      	it	eq
    5750:	4284      	cmpeq	r4, r0
    5752:	d303      	bcc.n	575c <__aeabi_ddiv+0x94>
    5754:	3201      	adds	r2, #1
    5756:	bf08      	it	eq
    5758:	f10e 0e01 	addeq.w	lr, lr, #1
    575c:	f240 71fd 	movw	r1, #2045	; 0x7fd
    5760:	458c      	cmp	ip, r1
    5762:	f008 4300 	and.w	r3, r8, #2147483648	; 0x80000000
    5766:	d93b      	bls.n	57e0 <__aeabi_ddiv+0x118>
    5768:	f1bc 0f00 	cmp.w	ip, #0
    576c:	bfa4      	itt	ge
    576e:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    5772:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    5776:	2000      	movs	r0, #0
    5778:	4619      	mov	r1, r3
    577a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    577e:	004a      	lsls	r2, r1, #1
    5780:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    5784:	d81c      	bhi.n	57c0 <__aeabi_ddiv+0xf8>
    5786:	005c      	lsls	r4, r3, #1
    5788:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    578c:	d818      	bhi.n	57c0 <__aeabi_ddiv+0xf8>
    578e:	ea43 0001 	orr.w	r0, r3, r1
    5792:	f3c0 500a 	ubfx	r0, r0, #20, #11
    5796:	0545      	lsls	r5, r0, #21
    5798:	b1b0      	cbz	r0, 57c8 <__aeabi_ddiv+0x100>
    579a:	0d50      	lsrs	r0, r2, #21
    579c:	4059      	eors	r1, r3
    579e:	0540      	lsls	r0, r0, #21
    57a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    57a4:	b1a0      	cbz	r0, 57d0 <__aeabi_ddiv+0x108>
    57a6:	0d60      	lsrs	r0, r4, #21
    57a8:	0540      	lsls	r0, r0, #21
    57aa:	b348      	cbz	r0, 5800 <__aeabi_ddiv+0x138>
    57ac:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    57b0:	d11d      	bne.n	57ee <__aeabi_ddiv+0x126>
    57b2:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    57b6:	d003      	beq.n	57c0 <__aeabi_ddiv+0xf8>
    57b8:	2200      	movs	r2, #0
    57ba:	4610      	mov	r0, r2
    57bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    57c0:	2000      	movs	r0, #0
    57c2:	4914      	ldr	r1, [pc, #80]	; (5814 <__aeabi_ddiv+0x14c>)
    57c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    57c8:	4912      	ldr	r1, [pc, #72]	; (5814 <__aeabi_ddiv+0x14c>)
    57ca:	4628      	mov	r0, r5
    57cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    57d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    57d4:	086d      	lsrs	r5, r5, #1
    57d6:	ea4f 0434 	mov.w	r4, r4, rrx
    57da:	f20c 3cfe 	addw	ip, ip, #1022	; 0x3fe
    57de:	e79d      	b.n	571c <__aeabi_ddiv+0x54>
    57e0:	eb03 530c 	add.w	r3, r3, ip, lsl #20
    57e4:	eb03 010e 	add.w	r1, r3, lr
    57e8:	4610      	mov	r0, r2
    57ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    57ee:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    57f2:	2200      	movs	r2, #0
    57f4:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    57f8:	4610      	mov	r0, r2
    57fa:	4619      	mov	r1, r3
    57fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5800:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    5804:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    5808:	4619      	mov	r1, r3
    580a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    580e:	4696      	mov	lr, r2
    5810:	e78a      	b.n	5728 <__aeabi_ddiv+0x60>
    5812:	bf00      	nop
    5814:	7ff80000 	.word	0x7ff80000

00005818 <__aeabi_dsub>:
    5818:	b5f0      	push	{r4, r5, r6, r7, lr}
    581a:	ea93 0401 	eors.w	r4, r3, r1
    581e:	460d      	mov	r5, r1
    5820:	f100 80cc 	bmi.w	59bc <__aeabi_dsub+0x1a4>
    5824:	4299      	cmp	r1, r3
    5826:	4606      	mov	r6, r0
    5828:	d270      	bcs.n	590c <__aeabi_dsub+0xf4>
    582a:	4056      	eors	r6, r2
    582c:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    5830:	4072      	eors	r2, r6
    5832:	4056      	eors	r6, r2
    5834:	404d      	eors	r5, r1
    5836:	404b      	eors	r3, r1
    5838:	f240 70ff 	movw	r0, #2047	; 0x7ff
    583c:	0d2c      	lsrs	r4, r5, #20
    583e:	f424 6100 	bic.w	r1, r4, #2048	; 0x800
    5842:	4281      	cmp	r1, r0
    5844:	eba4 5713 	sub.w	r7, r4, r3, lsr #20
    5848:	f000 8096 	beq.w	5978 <__aeabi_dsub+0x160>
    584c:	428f      	cmp	r7, r1
    584e:	f000 8099 	beq.w	5984 <__aeabi_dsub+0x16c>
    5852:	f3c5 0513 	ubfx	r5, r5, #0, #20
    5856:	f3c3 0313 	ubfx	r3, r3, #0, #20
    585a:	2f1f      	cmp	r7, #31
    585c:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
    5860:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    5864:	d857      	bhi.n	5916 <__aeabi_dsub+0xfe>
    5866:	f1c7 0020 	rsb	r0, r7, #32
    586a:	fa03 fe00 	lsl.w	lr, r3, r0
    586e:	fa22 f107 	lsr.w	r1, r2, r7
    5872:	ea4e 0101 	orr.w	r1, lr, r1
    5876:	40fb      	lsrs	r3, r7
    5878:	1a71      	subs	r1, r6, r1
    587a:	1aed      	subs	r5, r5, r3
    587c:	428e      	cmp	r6, r1
    587e:	bf38      	it	cc
    5880:	f105 35ff 	addcc.w	r5, r5, #4294967295
    5884:	fa12 f300 	lsls.w	r3, r2, r0
    5888:	d006      	beq.n	5898 <__aeabi_dsub+0x80>
    588a:	3901      	subs	r1, #1
    588c:	1c4f      	adds	r7, r1, #1
    588e:	f1c3 0300 	rsb	r3, r3, #0
    5892:	bf08      	it	eq
    5894:	f105 35ff 	addeq.w	r5, r5, #4294967295
    5898:	f415 1fc0 	tst.w	r5, #1572864	; 0x180000
    589c:	d158      	bne.n	5950 <__aeabi_dsub+0x138>
    589e:	0fdb      	lsrs	r3, r3, #31
    58a0:	0fca      	lsrs	r2, r1, #31
    58a2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    58a6:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    58aa:	ea53 0502 	orrs.w	r5, r3, r2
    58ae:	f000 809a 	beq.w	59e6 <__aeabi_dsub+0x1ce>
    58b2:	0b51      	lsrs	r1, r2, #13
    58b4:	f1a4 0502 	sub.w	r5, r4, #2
    58b8:	d108      	bne.n	58cc <__aeabi_dsub+0xb4>
    58ba:	0e19      	lsrs	r1, r3, #24
    58bc:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
    58c0:	0b51      	lsrs	r1, r2, #13
    58c2:	f1a5 0508 	sub.w	r5, r5, #8
    58c6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    58ca:	d0f6      	beq.n	58ba <__aeabi_dsub+0xa2>
    58cc:	0c51      	lsrs	r1, r2, #17
    58ce:	d104      	bne.n	58da <__aeabi_dsub+0xc2>
    58d0:	0f19      	lsrs	r1, r3, #28
    58d2:	3d04      	subs	r5, #4
    58d4:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    58d8:	011b      	lsls	r3, r3, #4
    58da:	0cd1      	lsrs	r1, r2, #19
    58dc:	d104      	bne.n	58e8 <__aeabi_dsub+0xd0>
    58de:	0f99      	lsrs	r1, r3, #30
    58e0:	3d02      	subs	r5, #2
    58e2:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
    58e6:	009b      	lsls	r3, r3, #2
    58e8:	0d11      	lsrs	r1, r2, #20
    58ea:	d104      	bne.n	58f6 <__aeabi_dsub+0xde>
    58ec:	0fd9      	lsrs	r1, r3, #31
    58ee:	3d01      	subs	r5, #1
    58f0:	ea41 0242 	orr.w	r2, r1, r2, lsl #1
    58f4:	005b      	lsls	r3, r3, #1
    58f6:	0ae4      	lsrs	r4, r4, #11
    58f8:	ebb4 2fd5 	cmp.w	r4, r5, lsr #11
    58fc:	f04f 0000 	mov.w	r0, #0
    5900:	bf06      	itte	eq
    5902:	eb02 5105 	addeq.w	r1, r2, r5, lsl #20
    5906:	4618      	moveq	r0, r3
    5908:	07e1      	lslne	r1, r4, #31
    590a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    590c:	4290      	cmp	r0, r2
    590e:	d893      	bhi.n	5838 <__aeabi_dsub+0x20>
    5910:	4299      	cmp	r1, r3
    5912:	d191      	bne.n	5838 <__aeabi_dsub+0x20>
    5914:	e789      	b.n	582a <__aeabi_dsub+0x12>
    5916:	2f35      	cmp	r7, #53	; 0x35
    5918:	d826      	bhi.n	5968 <__aeabi_dsub+0x150>
    591a:	f1a7 0020 	sub.w	r0, r7, #32
    591e:	fa23 f100 	lsr.w	r1, r3, r0
    5922:	1a71      	subs	r1, r6, r1
    5924:	428e      	cmp	r6, r1
    5926:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    592a:	fa22 f000 	lsr.w	r0, r2, r0
    592e:	bf38      	it	cc
    5930:	f105 35ff 	addcc.w	r5, r5, #4294967295
    5934:	40bb      	lsls	r3, r7
    5936:	0612      	lsls	r2, r2, #24
    5938:	ea43 0300 	orr.w	r3, r3, r0
    593c:	d048      	beq.n	59d0 <__aeabi_dsub+0x1b8>
    593e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    5942:	3901      	subs	r1, #1
    5944:	1c4e      	adds	r6, r1, #1
    5946:	f1c3 0300 	rsb	r3, r3, #0
    594a:	bf08      	it	eq
    594c:	f105 35ff 	addeq.w	r5, r5, #4294967295
    5950:	02e8      	lsls	r0, r5, #11
    5952:	d42e      	bmi.n	59b2 <__aeabi_dsub+0x19a>
    5954:	3c01      	subs	r4, #1
    5956:	0562      	lsls	r2, r4, #21
    5958:	d037      	beq.n	59ca <__aeabi_dsub+0x1b2>
    595a:	0fde      	lsrs	r6, r3, #31
    595c:	0fca      	lsrs	r2, r1, #31
    595e:	ea42 0545 	orr.w	r5, r2, r5, lsl #1
    5962:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
    5966:	005b      	lsls	r3, r3, #1
    5968:	2b00      	cmp	r3, #0
    596a:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    596e:	db11      	blt.n	5994 <__aeabi_dsub+0x17c>
    5970:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    5974:	4630      	mov	r0, r6
    5976:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5978:	032b      	lsls	r3, r5, #12
    597a:	d117      	bne.n	59ac <__aeabi_dsub+0x194>
    597c:	b387      	cbz	r7, 59e0 <__aeabi_dsub+0x1c8>
    597e:	4630      	mov	r0, r6
    5980:	4629      	mov	r1, r5
    5982:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5984:	f240 73fe 	movw	r3, #2046	; 0x7fe
    5988:	429f      	cmp	r7, r3
    598a:	d8f5      	bhi.n	5978 <__aeabi_dsub+0x160>
    598c:	b99f      	cbnz	r7, 59b6 <__aeabi_dsub+0x19e>
    598e:	4639      	mov	r1, r7
    5990:	4638      	mov	r0, r7
    5992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5994:	3601      	adds	r6, #1
    5996:	bf08      	it	eq
    5998:	3501      	addeq	r5, #1
    599a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    599e:	bf08      	it	eq
    59a0:	f026 0601 	biceq.w	r6, r6, #1
    59a4:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    59a8:	4630      	mov	r0, r6
    59aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59ac:	2000      	movs	r0, #0
    59ae:	490f      	ldr	r1, [pc, #60]	; (59ec <__aeabi_dsub+0x1d4>)
    59b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59b2:	460e      	mov	r6, r1
    59b4:	e7d8      	b.n	5968 <__aeabi_dsub+0x150>
    59b6:	4629      	mov	r1, r5
    59b8:	4630      	mov	r0, r6
    59ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59bc:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    59c0:	462b      	mov	r3, r5
    59c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    59c6:	f000 b813 	b.w	59f0 <__aeabi_dadd>
    59ca:	0521      	lsls	r1, r4, #20
    59cc:	4610      	mov	r0, r2
    59ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59d0:	2b00      	cmp	r3, #0
    59d2:	d1b6      	bne.n	5942 <__aeabi_dsub+0x12a>
    59d4:	02ea      	lsls	r2, r5, #11
    59d6:	d5bd      	bpl.n	5954 <__aeabi_dsub+0x13c>
    59d8:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    59dc:	460e      	mov	r6, r1
    59de:	e7c7      	b.n	5970 <__aeabi_dsub+0x158>
    59e0:	4902      	ldr	r1, [pc, #8]	; (59ec <__aeabi_dsub+0x1d4>)
    59e2:	4638      	mov	r0, r7
    59e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59e6:	4629      	mov	r1, r5
    59e8:	4628      	mov	r0, r5
    59ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59ec:	7ff80000 	.word	0x7ff80000

000059f0 <__aeabi_dadd>:
    59f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    59f2:	ea93 0601 	eors.w	r6, r3, r1
    59f6:	460c      	mov	r4, r1
    59f8:	f100 8087 	bmi.w	5b0a <__aeabi_dadd+0x11a>
    59fc:	4299      	cmp	r1, r3
    59fe:	4605      	mov	r5, r0
    5a00:	d339      	bcc.n	5a76 <__aeabi_dadd+0x86>
    5a02:	f240 70ff 	movw	r0, #2047	; 0x7ff
    5a06:	0d26      	lsrs	r6, r4, #20
    5a08:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    5a0c:	4281      	cmp	r1, r0
    5a0e:	d03f      	beq.n	5a90 <__aeabi_dadd+0xa0>
    5a10:	eba6 5713 	sub.w	r7, r6, r3, lsr #20
    5a14:	428f      	cmp	r7, r1
    5a16:	d04c      	beq.n	5ab2 <__aeabi_dadd+0xc2>
    5a18:	f3c4 0413 	ubfx	r4, r4, #0, #20
    5a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5a20:	2f1f      	cmp	r7, #31
    5a22:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    5a26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    5a2a:	d838      	bhi.n	5a9e <__aeabi_dadd+0xae>
    5a2c:	f1c7 0020 	rsb	r0, r7, #32
    5a30:	fa03 fe00 	lsl.w	lr, r3, r0
    5a34:	fa22 f107 	lsr.w	r1, r2, r7
    5a38:	40fb      	lsrs	r3, r7
    5a3a:	ea4e 0101 	orr.w	r1, lr, r1
    5a3e:	441c      	add	r4, r3
    5a40:	186d      	adds	r5, r5, r1
    5a42:	bf28      	it	cs
    5a44:	3401      	addcs	r4, #1
    5a46:	fa02 f300 	lsl.w	r3, r2, r0
    5a4a:	02a2      	lsls	r2, r4, #10
    5a4c:	d529      	bpl.n	5aa2 <__aeabi_dadd+0xb2>
    5a4e:	3501      	adds	r5, #1
    5a50:	bf08      	it	eq
    5a52:	3401      	addeq	r4, #1
    5a54:	b90b      	cbnz	r3, 5a5a <__aeabi_dadd+0x6a>
    5a56:	f025 0502 	bic.w	r5, r5, #2
    5a5a:	0533      	lsls	r3, r6, #20
    5a5c:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    5a60:	005a      	lsls	r2, r3, #1
    5a62:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    5a66:	f04f 0000 	mov.w	r0, #0
    5a6a:	d240      	bcs.n	5aee <__aeabi_dadd+0xfe>
    5a6c:	07e4      	lsls	r4, r4, #31
    5a6e:	4619      	mov	r1, r3
    5a70:	ea44 0055 	orr.w	r0, r4, r5, lsr #1
    5a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a76:	f240 70ff 	movw	r0, #2047	; 0x7ff
    5a7a:	4074      	eors	r4, r6
    5a7c:	4073      	eors	r3, r6
    5a7e:	0d26      	lsrs	r6, r4, #20
    5a80:	4055      	eors	r5, r2
    5a82:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    5a86:	406a      	eors	r2, r5
    5a88:	4281      	cmp	r1, r0
    5a8a:	ea85 0502 	eor.w	r5, r5, r2
    5a8e:	d1bf      	bne.n	5a10 <__aeabi_dadd+0x20>
    5a90:	0323      	lsls	r3, r4, #12
    5a92:	f04f 0000 	mov.w	r0, #0
    5a96:	d136      	bne.n	5b06 <__aeabi_dadd+0x116>
    5a98:	4621      	mov	r1, r4
    5a9a:	4628      	mov	r0, r5
    5a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a9e:	2f35      	cmp	r7, #53	; 0x35
    5aa0:	d911      	bls.n	5ac6 <__aeabi_dadd+0xd6>
    5aa2:	2b00      	cmp	r3, #0
    5aa4:	f106 36ff 	add.w	r6, r6, #4294967295
    5aa8:	db24      	blt.n	5af4 <__aeabi_dadd+0x104>
    5aaa:	eb04 5106 	add.w	r1, r4, r6, lsl #20
    5aae:	4628      	mov	r0, r5
    5ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ab2:	f240 73fe 	movw	r3, #2046	; 0x7fe
    5ab6:	429f      	cmp	r7, r3
    5ab8:	d8ea      	bhi.n	5a90 <__aeabi_dadd+0xa0>
    5aba:	2f00      	cmp	r7, #0
    5abc:	d1ec      	bne.n	5a98 <__aeabi_dadd+0xa8>
    5abe:	f004 4100 	and.w	r1, r4, #2147483648	; 0x80000000
    5ac2:	4638      	mov	r0, r7
    5ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ac6:	f1a7 0120 	sub.w	r1, r7, #32
    5aca:	fa23 f001 	lsr.w	r0, r3, r1
    5ace:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    5ad2:	40bb      	lsls	r3, r7
    5ad4:	fa22 f101 	lsr.w	r1, r2, r1
    5ad8:	182d      	adds	r5, r5, r0
    5ada:	ea43 0301 	orr.w	r3, r3, r1
    5ade:	d31b      	bcc.n	5b18 <__aeabi_dadd+0x128>
    5ae0:	0612      	lsls	r2, r2, #24
    5ae2:	f104 0401 	add.w	r4, r4, #1
    5ae6:	d0b0      	beq.n	5a4a <__aeabi_dadd+0x5a>
    5ae8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    5aec:	e7ad      	b.n	5a4a <__aeabi_dadd+0x5a>
    5aee:	3601      	adds	r6, #1
    5af0:	0531      	lsls	r1, r6, #20
    5af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5af4:	3501      	adds	r5, #1
    5af6:	bf08      	it	eq
    5af8:	3401      	addeq	r4, #1
    5afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5afe:	bf08      	it	eq
    5b00:	f025 0501 	biceq.w	r5, r5, #1
    5b04:	e7d1      	b.n	5aaa <__aeabi_dadd+0xba>
    5b06:	4906      	ldr	r1, [pc, #24]	; (5b20 <__aeabi_dadd+0x130>)
    5b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b0a:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    5b0e:	462b      	mov	r3, r5
    5b10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5b14:	f7ff be80 	b.w	5818 <__aeabi_dsub>
    5b18:	0612      	lsls	r2, r2, #24
    5b1a:	d1e5      	bne.n	5ae8 <__aeabi_dadd+0xf8>
    5b1c:	e7c1      	b.n	5aa2 <__aeabi_dadd+0xb2>
    5b1e:	bf00      	nop
    5b20:	7ff80000 	.word	0x7ff80000

00005b24 <__aeabi_d2iz>:
    5b24:	02cb      	lsls	r3, r1, #11
    5b26:	0d0a      	lsrs	r2, r1, #20
    5b28:	ea43 5050 	orr.w	r0, r3, r0, lsr #21
    5b2c:	f5c2 6383 	rsb	r3, r2, #1048	; 0x418
    5b30:	3306      	adds	r3, #6
    5b32:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    5b36:	2bff      	cmp	r3, #255	; 0xff
    5b38:	fa20 f003 	lsr.w	r0, r0, r3
    5b3c:	d90f      	bls.n	5b5e <__aeabi_d2iz+0x3a>
    5b3e:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    5b42:	d00d      	beq.n	5b60 <__aeabi_d2iz+0x3c>
    5b44:	f011 4080 	ands.w	r0, r1, #1073741824	; 0x40000000
    5b48:	d009      	beq.n	5b5e <__aeabi_d2iz+0x3a>
    5b4a:	004b      	lsls	r3, r1, #1
    5b4c:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    5b50:	d804      	bhi.n	5b5c <__aeabi_d2iz+0x38>
    5b52:	0fc8      	lsrs	r0, r1, #31
    5b54:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    5b58:	3801      	subs	r0, #1
    5b5a:	4770      	bx	lr
    5b5c:	2000      	movs	r0, #0
    5b5e:	4770      	bx	lr
    5b60:	4240      	negs	r0, r0
    5b62:	4770      	bx	lr

00005b64 <__bhs_ui2d>:
    5b64:	b1f0      	cbz	r0, 5ba4 <__bhs_ui2d+0x40>
    5b66:	0c03      	lsrs	r3, r0, #16
    5b68:	bf0c      	ite	eq
    5b6a:	0400      	lsleq	r0, r0, #16
    5b6c:	f101 7180 	addne.w	r1, r1, #16777216	; 0x1000000
    5b70:	0e03      	lsrs	r3, r0, #24
    5b72:	bf0c      	ite	eq
    5b74:	0200      	lsleq	r0, r0, #8
    5b76:	f501 0100 	addne.w	r1, r1, #8388608	; 0x800000
    5b7a:	0f03      	lsrs	r3, r0, #28
    5b7c:	bf0c      	ite	eq
    5b7e:	0100      	lsleq	r0, r0, #4
    5b80:	f501 0180 	addne.w	r1, r1, #4194304	; 0x400000
    5b84:	0f83      	lsrs	r3, r0, #30
    5b86:	bf0c      	ite	eq
    5b88:	0080      	lsleq	r0, r0, #2
    5b8a:	f501 1100 	addne.w	r1, r1, #2097152	; 0x200000
    5b8e:	2800      	cmp	r0, #0
    5b90:	bfac      	ite	ge
    5b92:	0040      	lslge	r0, r0, #1
    5b94:	f501 1180 	addlt.w	r1, r1, #1048576	; 0x100000
    5b98:	eb01 23e0 	add.w	r3, r1, r0, asr #11
    5b9c:	0542      	lsls	r2, r0, #21
    5b9e:	4610      	mov	r0, r2
    5ba0:	4619      	mov	r1, r3
    5ba2:	4770      	bx	lr
    5ba4:	4603      	mov	r3, r0
    5ba6:	4619      	mov	r1, r3
    5ba8:	4770      	bx	lr
    5baa:	bf00      	nop

00005bac <__aeabi_i2d>:
    5bac:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
    5bb0:	0fc3      	lsrs	r3, r0, #31
    5bb2:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
    5bb6:	18d0      	adds	r0, r2, r3
    5bb8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5bbc:	f7ff bfd2 	b.w	5b64 <__bhs_ui2d>

00005bc0 <__aeabi_dcmpeq>:
    5bc0:	b510      	push	{r4, lr}
    5bc2:	004c      	lsls	r4, r1, #1
    5bc4:	ea54 0e00 	orrs.w	lr, r4, r0
    5bc8:	d102      	bne.n	5bd0 <__aeabi_dcmpeq+0x10>
    5bca:	ea52 0e43 	orrs.w	lr, r2, r3, lsl #1
    5bce:	d00b      	beq.n	5be8 <__aeabi_dcmpeq+0x28>
    5bd0:	4299      	cmp	r1, r3
    5bd2:	d001      	beq.n	5bd8 <__aeabi_dcmpeq+0x18>
    5bd4:	2000      	movs	r0, #0
    5bd6:	bd10      	pop	{r4, pc}
    5bd8:	4290      	cmp	r0, r2
    5bda:	d1fb      	bne.n	5bd4 <__aeabi_dcmpeq+0x14>
    5bdc:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5be0:	bf8c      	ite	hi
    5be2:	2000      	movhi	r0, #0
    5be4:	2001      	movls	r0, #1
    5be6:	bd10      	pop	{r4, pc}
    5be8:	2001      	movs	r0, #1
    5bea:	bd10      	pop	{r4, pc}

00005bec <__aeabi_dcmplt>:
    5bec:	b430      	push	{r4, r5}
    5bee:	ea53 0401 	orrs.w	r4, r3, r1
    5bf2:	d409      	bmi.n	5c08 <__aeabi_dcmplt+0x1c>
    5bf4:	005c      	lsls	r4, r3, #1
    5bf6:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5bfa:	d802      	bhi.n	5c02 <__aeabi_dcmplt+0x16>
    5bfc:	4299      	cmp	r1, r3
    5bfe:	d317      	bcc.n	5c30 <__aeabi_dcmplt+0x44>
    5c00:	d019      	beq.n	5c36 <__aeabi_dcmplt+0x4a>
    5c02:	2000      	movs	r0, #0
    5c04:	bc30      	pop	{r4, r5}
    5c06:	4770      	bx	lr
    5c08:	004d      	lsls	r5, r1, #1
    5c0a:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    5c0e:	d8f8      	bhi.n	5c02 <__aeabi_dcmplt+0x16>
    5c10:	005c      	lsls	r4, r3, #1
    5c12:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5c16:	d8f4      	bhi.n	5c02 <__aeabi_dcmplt+0x16>
    5c18:	4305      	orrs	r5, r0
    5c1a:	d101      	bne.n	5c20 <__aeabi_dcmplt+0x34>
    5c1c:	4314      	orrs	r4, r2
    5c1e:	d010      	beq.n	5c42 <__aeabi_dcmplt+0x56>
    5c20:	4299      	cmp	r1, r3
    5c22:	d805      	bhi.n	5c30 <__aeabi_dcmplt+0x44>
    5c24:	d1ed      	bne.n	5c02 <__aeabi_dcmplt+0x16>
    5c26:	4290      	cmp	r0, r2
    5c28:	bf94      	ite	ls
    5c2a:	2000      	movls	r0, #0
    5c2c:	2001      	movhi	r0, #1
    5c2e:	e7e9      	b.n	5c04 <__aeabi_dcmplt+0x18>
    5c30:	2001      	movs	r0, #1
    5c32:	bc30      	pop	{r4, r5}
    5c34:	4770      	bx	lr
    5c36:	4290      	cmp	r0, r2
    5c38:	bf2c      	ite	cs
    5c3a:	2000      	movcs	r0, #0
    5c3c:	2001      	movcc	r0, #1
    5c3e:	bc30      	pop	{r4, r5}
    5c40:	4770      	bx	lr
    5c42:	4620      	mov	r0, r4
    5c44:	e7de      	b.n	5c04 <__aeabi_dcmplt+0x18>
    5c46:	bf00      	nop

00005c48 <__aeabi_dcmple>:
    5c48:	b430      	push	{r4, r5}
    5c4a:	ea53 0401 	orrs.w	r4, r3, r1
    5c4e:	d409      	bmi.n	5c64 <__aeabi_dcmple+0x1c>
    5c50:	005c      	lsls	r4, r3, #1
    5c52:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5c56:	d802      	bhi.n	5c5e <__aeabi_dcmple+0x16>
    5c58:	4299      	cmp	r1, r3
    5c5a:	d319      	bcc.n	5c90 <__aeabi_dcmple+0x48>
    5c5c:	d01b      	beq.n	5c96 <__aeabi_dcmple+0x4e>
    5c5e:	2000      	movs	r0, #0
    5c60:	bc30      	pop	{r4, r5}
    5c62:	4770      	bx	lr
    5c64:	004c      	lsls	r4, r1, #1
    5c66:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5c6a:	d8f8      	bhi.n	5c5e <__aeabi_dcmple+0x16>
    5c6c:	005d      	lsls	r5, r3, #1
    5c6e:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    5c72:	d8f4      	bhi.n	5c5e <__aeabi_dcmple+0x16>
    5c74:	4299      	cmp	r1, r3
    5c76:	d80b      	bhi.n	5c90 <__aeabi_dcmple+0x48>
    5c78:	d008      	beq.n	5c8c <__aeabi_dcmple+0x44>
    5c7a:	ea54 0300 	orrs.w	r3, r4, r0
    5c7e:	d1ee      	bne.n	5c5e <__aeabi_dcmple+0x16>
    5c80:	ea55 0302 	orrs.w	r3, r5, r2
    5c84:	bf0c      	ite	eq
    5c86:	2001      	moveq	r0, #1
    5c88:	2000      	movne	r0, #0
    5c8a:	e7e9      	b.n	5c60 <__aeabi_dcmple+0x18>
    5c8c:	4290      	cmp	r0, r2
    5c8e:	d3f4      	bcc.n	5c7a <__aeabi_dcmple+0x32>
    5c90:	bc30      	pop	{r4, r5}
    5c92:	2001      	movs	r0, #1
    5c94:	4770      	bx	lr
    5c96:	4290      	cmp	r0, r2
    5c98:	bf8c      	ite	hi
    5c9a:	2000      	movhi	r0, #0
    5c9c:	2001      	movls	r0, #1
    5c9e:	bc30      	pop	{r4, r5}
    5ca0:	4770      	bx	lr
    5ca2:	bf00      	nop

00005ca4 <__aeabi_dcmpge>:
    5ca4:	b430      	push	{r4, r5}
    5ca6:	ea53 0401 	orrs.w	r4, r3, r1
    5caa:	ea4f 0441 	mov.w	r4, r1, lsl #1
    5cae:	d408      	bmi.n	5cc2 <__aeabi_dcmpge+0x1e>
    5cb0:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5cb4:	d802      	bhi.n	5cbc <__aeabi_dcmpge+0x18>
    5cb6:	4299      	cmp	r1, r3
    5cb8:	d818      	bhi.n	5cec <__aeabi_dcmpge+0x48>
    5cba:	d01a      	beq.n	5cf2 <__aeabi_dcmpge+0x4e>
    5cbc:	2000      	movs	r0, #0
    5cbe:	bc30      	pop	{r4, r5}
    5cc0:	4770      	bx	lr
    5cc2:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    5cc6:	d8f9      	bhi.n	5cbc <__aeabi_dcmpge+0x18>
    5cc8:	005d      	lsls	r5, r3, #1
    5cca:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    5cce:	d8f5      	bhi.n	5cbc <__aeabi_dcmpge+0x18>
    5cd0:	4299      	cmp	r1, r3
    5cd2:	d30b      	bcc.n	5cec <__aeabi_dcmpge+0x48>
    5cd4:	d008      	beq.n	5ce8 <__aeabi_dcmpge+0x44>
    5cd6:	ea54 0300 	orrs.w	r3, r4, r0
    5cda:	d1ef      	bne.n	5cbc <__aeabi_dcmpge+0x18>
    5cdc:	ea55 0302 	orrs.w	r3, r5, r2
    5ce0:	bf0c      	ite	eq
    5ce2:	2001      	moveq	r0, #1
    5ce4:	2000      	movne	r0, #0
    5ce6:	e7ea      	b.n	5cbe <__aeabi_dcmpge+0x1a>
    5ce8:	4290      	cmp	r0, r2
    5cea:	d8f4      	bhi.n	5cd6 <__aeabi_dcmpge+0x32>
    5cec:	bc30      	pop	{r4, r5}
    5cee:	2001      	movs	r0, #1
    5cf0:	4770      	bx	lr
    5cf2:	4290      	cmp	r0, r2
    5cf4:	bf34      	ite	cc
    5cf6:	2000      	movcc	r0, #0
    5cf8:	2001      	movcs	r0, #1
    5cfa:	bc30      	pop	{r4, r5}
    5cfc:	4770      	bx	lr
    5cfe:	bf00      	nop

00005d00 <__aeabi_lowlevel_memset>:
    5d00:	4603      	mov	r3, r0
    5d02:	f013 0f03 	tst.w	r3, #3
    5d06:	d10e      	bne.n	5d26 <memset1a>
    5d08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5d0c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    5d10:	ea41 4101 	orr.w	r1, r1, r1, lsl #16

00005d14 <__bhs_memset4>:
    5d14:	3a04      	subs	r2, #4

00005d16 <memset4>:
    5d16:	bf24      	itt	cs
    5d18:	f843 1b04 	strcs.w	r1, [r3], #4
    5d1c:	f1b2 0204 	subscs.w	r2, r2, #4
    5d20:	d2f9      	bcs.n	5d16 <memset4>

00005d22 <memset1>:
    5d22:	f102 0204 	add.w	r2, r2, #4

00005d26 <memset1a>:
    5d26:	3a01      	subs	r2, #1
    5d28:	bf24      	itt	cs
    5d2a:	f803 1b01 	strbcs.w	r1, [r3], #1
    5d2e:	e7fa      	bcs.n	5d26 <memset1a>
    5d30:	4770      	bx	lr

00005d32 <__sys_appexit>:
    5d32:	e7fe      	b.n	5d32 <__sys_appexit>

00005d34 <__sys_close>:
    5d34:	f04f 30ff 	mov.w	r0, #4294967295
    5d38:	4770      	bx	lr

00005d3a <__sys_flen>:
    5d3a:	f04f 30ff 	mov.w	r0, #4294967295
    5d3e:	4770      	bx	lr

00005d40 <__sys_istty>:
    5d40:	f04f 30ff 	mov.w	r0, #4294967295
    5d44:	4770      	bx	lr

00005d46 <__sys_remove>:
    5d46:	f04f 30ff 	mov.w	r0, #4294967295
    5d4a:	4770      	bx	lr

00005d4c <__sys_seek>:
    5d4c:	f04f 30ff 	mov.w	r0, #4294967295
    5d50:	4770      	bx	lr

00005d52 <__sys_tmpnam>:
    5d52:	f04f 30ff 	mov.w	r0, #4294967295
    5d56:	4770      	bx	lr

00005d58 <__sys_write>:
    5d58:	4610      	mov	r0, r2
    5d5a:	4770      	bx	lr
    5d5c:	2e383731 	.word	0x2e383731
    5d60:	332e3336 	.word	0x332e3336
    5d64:	31382e30 	.word	0x31382e30
    5d68:	00000000 	.word	0x00000000
    5d6c:	65746e69 	.word	0x65746e69
    5d70:	74656e72 	.word	0x74656e72
    5d74:	00000000 	.word	0x00000000
    5d78:	61646f76 	.word	0x61646f76
    5d7c:	656e6f66 	.word	0x656e6f66
    5d80:	00000000 	.word	0x00000000
    5d84:	656c694d 	.word	0x656c694d
    5d88:	3a656761 	.word	0x3a656761
    5d8c:	0a642520 	.word	0x0a642520
    5d90:	00000000 	.word	0x00000000
    5d94:	5f726570 	.word	0x5f726570
    5d98:	6f6e6769 	.word	0x6f6e6769
    5d9c:	7265706e 	.word	0x7265706e
    5da0:	5f646f69 	.word	0x5f646f69
    5da4:	3a6c6176 	.word	0x3a6c6176
    5da8:	0a642520 	.word	0x0a642520
    5dac:	00000000 	.word	0x00000000
    5db0:	5f726570 	.word	0x5f726570
    5db4:	6f6e6769 	.word	0x6f6e6769
    5db8:	65706666 	.word	0x65706666
    5dbc:	646f6972 	.word	0x646f6972
    5dc0:	6c61765f 	.word	0x6c61765f
    5dc4:	6425203a 	.word	0x6425203a
    5dc8:	6570202c 	.word	0x6570202c
    5dcc:	67695f72 	.word	0x67695f72
    5dd0:	66666f6e 	.word	0x66666f6e
    5dd4:	69726570 	.word	0x69726570
    5dd8:	765f646f 	.word	0x765f646f
    5ddc:	6f286c61 	.word	0x6f286c61
    5de0:	69676972 	.word	0x69676972
    5de4:	296c616e 	.word	0x296c616e
    5de8:	6425203a 	.word	0x6425203a
    5dec:	0000000a 	.word	0x0000000a
    5df0:	5f726570 	.word	0x5f726570
    5df4:	6f6e6769 	.word	0x6f6e6769
    5df8:	616f726e 	.word	0x616f726e
    5dfc:	676e696d 	.word	0x676e696d
    5e00:	69726570 	.word	0x69726570
    5e04:	765f646f 	.word	0x765f646f
    5e08:	203a6c61 	.word	0x203a6c61
    5e0c:	000a6425 	.word	0x000a6425
    5e10:	5f726570 	.word	0x5f726570
    5e14:	6f6e6769 	.word	0x6f6e6769
    5e18:	6f726666 	.word	0x6f726666
    5e1c:	6e696d61 	.word	0x6e696d61
    5e20:	72657067 	.word	0x72657067
    5e24:	5f646f69 	.word	0x5f646f69
    5e28:	3a6c6176 	.word	0x3a6c6176
    5e2c:	0a642520 	.word	0x0a642520
    5e30:	00000000 	.word	0x00000000
    5e34:	5f726570 	.word	0x5f726570
    5e38:	70776f6c 	.word	0x70776f6c
    5e3c:	6a5f776f 	.word	0x6a5f776f
    5e40:	5f747375 	.word	0x5f747375
    5e44:	656b6177 	.word	0x656b6177
    5e48:	6425203a 	.word	0x6425203a
    5e4c:	0000000a 	.word	0x0000000a
    5e50:	5f726570 	.word	0x5f726570
    5e54:	70776f6c 	.word	0x70776f6c
    5e58:	635f776f 	.word	0x635f776f
    5e5c:	65636e61 	.word	0x65636e61
    5e60:	25203a6c 	.word	0x25203a6c
    5e64:	00000a64 	.word	0x00000a64
    5e68:	5f726570 	.word	0x5f726570
    5e6c:	70776f6c 	.word	0x70776f6c
    5e70:	705f776f 	.word	0x705f776f
    5e74:	6f697265 	.word	0x6f697265
    5e78:	726f2864 	.word	0x726f2864
    5e7c:	6e696769 	.word	0x6e696769
    5e80:	3a296c61 	.word	0x3a296c61
    5e84:	0a642520 	.word	0x0a642520
    5e88:	00000000 	.word	0x00000000
    5e8c:	5f726570 	.word	0x5f726570
    5e90:	70776f6c 	.word	0x70776f6c
    5e94:	705f776f 	.word	0x705f776f
    5e98:	6f697265 	.word	0x6f697265
    5e9c:	25203a64 	.word	0x25203a64
    5ea0:	00000a64 	.word	0x00000a64
    5ea4:	5f726570 	.word	0x5f726570
    5ea8:	70776f6c 	.word	0x70776f6c
    5eac:	6d5f776f 	.word	0x6d5f776f
    5eb0:	3a65646f 	.word	0x3a65646f
    5eb4:	0a642520 	.word	0x0a642520
    5eb8:	00000000 	.word	0x00000000
    5ebc:	5f726570 	.word	0x5f726570
    5ec0:	66666f63 	.word	0x66666f63
    5ec4:	635f6565 	.word	0x635f6565
    5ec8:	746e756f 	.word	0x746e756f
    5ecc:	203a7265 	.word	0x203a7265
    5ed0:	000a6425 	.word	0x000a6425
    5ed4:	000d7325 	.word	0x000d7325
    5ed8:	52207325 	.word	0x52207325
    5edc:	6f707365 	.word	0x6f707365
    5ee0:	2065736e 	.word	0x2065736e
    5ee4:	7325203a 	.word	0x7325203a
    5ee8:	00000d20 	.word	0x00000d20
    5eec:	65746e45 	.word	0x65746e45
    5ef0:	20646572 	.word	0x20646572
    5ef4:	5f4d5347 	.word	0x5f4d5347
    5ef8:	5f504354 	.word	0x5f504354
    5efc:	76636552 	.word	0x76636552
    5f00:	00000000 	.word	0x00000000
    5f04:	512b5441 	.word	0x512b5441
    5f08:	3d445249 	.word	0x3d445249
    5f0c:	2c312c31 	.word	0x2c312c31
    5f10:	30312c30 	.word	0x30312c30
    5f14:	00003035 	.word	0x00003035
    5f18:	65746e45 	.word	0x65746e45
    5f1c:	20646572 	.word	0x20646572
    5f20:	63656843 	.word	0x63656843
    5f24:	4d53476b 	.word	0x4d53476b
    5f28:	66667542 	.word	0x66667542
    5f2c:	00007265 	.word	0x00007265
    5f30:	512b5441 	.word	0x512b5441
    5f34:	3d445249 	.word	0x3d445249
    5f38:	2c312c31 	.word	0x2c312c31
    5f3c:	30332c30 	.word	0x30332c30
    5f40:	00000030 	.word	0x00000030
    5f44:	54455323 	.word	0x54455323
    5f48:	0000003b 	.word	0x0000003b
    5f4c:	7373654d 	.word	0x7373654d
    5f50:	20656761 	.word	0x20656761
    5f54:	6d6f7246 	.word	0x6d6f7246
    5f58:	72655320 	.word	0x72655320
    5f5c:	20726576 	.word	0x20726576
    5f60:	0000203a 	.word	0x0000203a
    5f64:	65746e45 	.word	0x65746e45
    5f68:	20646572 	.word	0x20646572
    5f6c:	64616572 	.word	0x64616572
    5f70:	736d7320 	.word	0x736d7320
    5f74:	0000002e 	.word	0x0000002e
    5f78:	00005441 	.word	0x00005441
    5f7c:	432b5441 	.word	0x432b5441
    5f80:	3d52474d 	.word	0x3d52474d
    5f84:	00000031 	.word	0x00000031
    5f88:	432b5441 	.word	0x432b5441
    5f8c:	3d44474d 	.word	0x3d44474d
    5f90:	00342c31 	.word	0x00342c31
    5f94:	7373654d 	.word	0x7373654d
    5f98:	20656761 	.word	0x20656761
    5f9c:	6d6f7246 	.word	0x6d6f7246
    5fa0:	534d5320 	.word	0x534d5320
    5fa4:	00203a20 	.word	0x00203a20
    5fa8:	65746e45 	.word	0x65746e45
    5fac:	20646572 	.word	0x20646572
    5fb0:	5f4d5347 	.word	0x5f4d5347
    5fb4:	6e6e6f43 	.word	0x6e6e6f43
    5fb8:	54746365 	.word	0x54746365
    5fbc:	6972546f 	.word	0x6972546f
    5fc0:	6770556f 	.word	0x6770556f
    5fc4:	65646172 	.word	0x65646172
    5fc8:	76726553 	.word	0x76726553
    5fcc:	00007265 	.word	0x00007265
    5fd0:	512b5441 	.word	0x512b5441
    5fd4:	43474649 	.word	0x43474649
    5fd8:	313d544e 	.word	0x313d544e
    5fdc:	00000000 	.word	0x00000000
    5fe0:	512b5441 	.word	0x512b5441
    5fe4:	47534349 	.word	0x47534349
    5fe8:	2c313d50 	.word	0x2c313d50
    5fec:	22732522 	.word	0x22732522
    5ff0:	7325222c 	.word	0x7325222c
    5ff4:	25222c22 	.word	0x25222c22
    5ff8:	00002273 	.word	0x00002273
    5ffc:	512b5441 	.word	0x512b5441
    6000:	58554d49 	.word	0x58554d49
    6004:	0000303d 	.word	0x0000303d
    6008:	512b5441 	.word	0x512b5441
    600c:	54414256 	.word	0x54414256
    6010:	2c303d54 	.word	0x2c303d54
    6014:	30303533 	.word	0x30303533
    6018:	0000302c 	.word	0x0000302c
    601c:	512b5441 	.word	0x512b5441
    6020:	54414256 	.word	0x54414256
    6024:	2c313d54 	.word	0x2c313d54
    6028:	30303333 	.word	0x30303333
    602c:	0000302c 	.word	0x0000302c
    6030:	512b5441 	.word	0x512b5441
    6034:	444f4d49 	.word	0x444f4d49
    6038:	00303d45 	.word	0x00303d45
    603c:	512b5441 	.word	0x512b5441
    6040:	49444e49 	.word	0x49444e49
    6044:	0000313d 	.word	0x0000313d
    6048:	512b5441 	.word	0x512b5441
    604c:	534e4449 	.word	0x534e4449
    6050:	313d5049 	.word	0x313d5049
    6054:	00000000 	.word	0x00000000
    6058:	512b5441 	.word	0x512b5441
    605c:	534e4449 	.word	0x534e4449
    6060:	303d5049 	.word	0x303d5049
    6064:	00000000 	.word	0x00000000
    6068:	512b5441 	.word	0x512b5441
    606c:	4c435047 	.word	0x4c435047
    6070:	3d535341 	.word	0x3d535341
    6074:	00000038 	.word	0x00000038
    6078:	512b5441 	.word	0x512b5441
    607c:	45504f49 	.word	0x45504f49
    6080:	54223d4e 	.word	0x54223d4e
    6084:	2c225043 	.word	0x2c225043
    6088:	22732522 	.word	0x22732522
    608c:	0d64252c 	.word	0x0d64252c
    6090:	00000000 	.word	0x00000000
    6094:	4c494146 	.word	0x4c494146
    6098:	00000000 	.word	0x00000000
    609c:	4e4e4f43 	.word	0x4e4e4f43
    60a0:	20544345 	.word	0x20544345
    60a4:	00004b4f 	.word	0x00004b4f
    60a8:	45524c41 	.word	0x45524c41
    60ac:	20594441 	.word	0x20594441
    60b0:	4e4e4f43 	.word	0x4e4e4f43
    60b4:	00544345 	.word	0x00544345
    60b8:	6e6e6f43 	.word	0x6e6e6f43
    60bc:	65746365 	.word	0x65746365
    60c0:	6f742064 	.word	0x6f742064
    60c4:	65687420 	.word	0x65687420
    60c8:	72657320 	.word	0x72657320
    60cc:	2e726576 	.word	0x2e726576
    60d0:	00000000 	.word	0x00000000
    60d4:	504f4951 	.word	0x504f4951
    60d8:	66204e45 	.word	0x66204e45
    60dc:	656c6961 	.word	0x656c6961
    60e0:	00002e64 	.word	0x00002e64
    60e4:	64726148 	.word	0x64726148
    60e8:	73657220 	.word	0x73657220
    60ec:	69747465 	.word	0x69747465
    60f0:	6d20676e 	.word	0x6d20676e
    60f4:	6c75646f 	.word	0x6c75646f
    60f8:	00002e65 	.word	0x00002e65
    60fc:	6e6e6f63 	.word	0x6e6e6f63
    6100:	69746365 	.word	0x69746365
    6104:	61466e6f 	.word	0x61466e6f
    6108:	6f436c69 	.word	0x6f436c69
    610c:	20746e75 	.word	0x20746e75
    6110:	3034203e 	.word	0x3034203e
    6114:	73657220 	.word	0x73657220
    6118:	74726174 	.word	0x74726174
    611c:	20676e69 	.word	0x20676e69
    6120:	75646f6d 	.word	0x75646f6d
    6124:	002e656c 	.word	0x002e656c
    6128:	65746e45 	.word	0x65746e45
    612c:	20646572 	.word	0x20646572
    6130:	6e6e6f43 	.word	0x6e6e6f43
    6134:	6f746365 	.word	0x6f746365
    6138:	6f697254 	.word	0x6f697254
    613c:	00000000 	.word	0x00000000
    6140:	65746e45 	.word	0x65746e45
    6144:	20646572 	.word	0x20646572
    6148:	5f4d5347 	.word	0x5f4d5347
    614c:	646e6553 	.word	0x646e6553
    6150:	65536f54 	.word	0x65536f54
    6154:	72657672 	.word	0x72657672
    6158:	00504354 	.word	0x00504354
    615c:	512b5441 	.word	0x512b5441
    6160:	4e455349 	.word	0x4e455349
    6164:	64253d44 	.word	0x64253d44
    6168:	00000000 	.word	0x00000000
    616c:	646e6553 	.word	0x646e6553
    6170:	204b4f20 	.word	0x204b4f20
    6174:	6c696877 	.word	0x6c696877
    6178:	2e676e69 	.word	0x2e676e69
    617c:	0000002e 	.word	0x0000002e
    6180:	444e4553 	.word	0x444e4553
    6184:	004b4f20 	.word	0x004b4f20
    6188:	61746144 	.word	0x61746144
    618c:	6e657320 	.word	0x6e657320
    6190:	00002e74 	.word	0x00002e74
    6194:	4f525245 	.word	0x4f525245
    6198:	00000052 	.word	0x00000052
    619c:	61746144 	.word	0x61746144
    61a0:	69616620 	.word	0x69616620
    61a4:	00002e6c 	.word	0x00002e6c
    61a8:	65746e45 	.word	0x65746e45
    61ac:	20646572 	.word	0x20646572
    61b0:	5f4d5347 	.word	0x5f4d5347
    61b4:	5f504354 	.word	0x5f504354
    61b8:	646e6553 	.word	0x646e6553
    61bc:	00000000 	.word	0x00000000
    61c0:	512b5441 	.word	0x512b5441
    61c4:	44574f50 	.word	0x44574f50
    61c8:	0000303d 	.word	0x0000303d
    61cc:	00004b4f 	.word	0x00004b4f
    61d0:	432b5441 	.word	0x432b5441
    61d4:	3d45454d 	.word	0x3d45454d
    61d8:	00000032 	.word	0x00000032
    61dc:	432b5441 	.word	0x432b5441
    61e0:	3d46474d 	.word	0x3d46474d
    61e4:	00000031 	.word	0x00000031
    61e8:	432b5441 	.word	0x432b5441
    61ec:	3d494d4e 	.word	0x3d494d4e
    61f0:	2c312c32 	.word	0x2c312c32
    61f4:	2c302c30 	.word	0x2c302c30
    61f8:	00000030 	.word	0x00000030
    61fc:	206d6953 	.word	0x206d6953
    6200:	64726163 	.word	0x64726163
    6204:	61657220 	.word	0x61657220
    6208:	2e2e7964 	.word	0x2e2e7964
    620c:	0000000d 	.word	0x0000000d
    6210:	206d6953 	.word	0x206d6953
    6214:	20746f6e 	.word	0x20746f6e
    6218:	64616572 	.word	0x64616572
    621c:	000d2179 	.word	0x000d2179
    6220:	432b5441 	.word	0x432b5441
    6224:	00005153 	.word	0x00005153
    6228:	432b5441 	.word	0x432b5441
    622c:	3f474552 	.word	0x3f474552
    6230:	00000000 	.word	0x00000000
    6234:	4552432b 	.word	0x4552432b
    6238:	00000047 	.word	0x00000047
    623c:	0000352c 	.word	0x0000352c
    6240:	0000312c 	.word	0x0000312c
    6244:	002c352c 	.word	0x002c352c
    6248:	65746e45 	.word	0x65746e45
    624c:	20646572 	.word	0x20646572
    6250:	63656863 	.word	0x63656863
    6254:	6973206b 	.word	0x6973206b
    6258:	6163206d 	.word	0x6163206d
    625c:	002e6472 	.word	0x002e6472
    6260:	432b5441 	.word	0x432b5441
    6264:	3f4e4950 	.word	0x3f4e4950
    6268:	00000000 	.word	0x00000000
    626c:	44414552 	.word	0x44414552
    6270:	00000059 	.word	0x00000059
    6274:	472b5441 	.word	0x472b5441
    6278:	00004e53 	.word	0x00004e53
    627c:	49454d49 	.word	0x49454d49
    6280:	00203a20 	.word	0x00203a20
    6284:	432b5441 	.word	0x432b5441
    6288:	00494d49 	.word	0x00494d49
    628c:	49534d49 	.word	0x49534d49
    6290:	00203a20 	.word	0x00203a20
    6294:	2d64252d 	.word	0x2d64252d
    6298:	00000000 	.word	0x00000000
    629c:	65746e45 	.word	0x65746e45
    62a0:	20646572 	.word	0x20646572
    62a4:	656e6547 	.word	0x656e6547
    62a8:	65746172 	.word	0x65746172
    62ac:	73654d54 	.word	0x73654d54
    62b0:	65676173 	.word	0x65676173
    62b4:	00002928 	.word	0x00002928
    62b8:	6c727473 	.word	0x6c727473
    62bc:	6c286e65 	.word	0x6c286e65
    62c0:	5f747361 	.word	0x5f747361
    62c4:	696c6176 	.word	0x696c6176
    62c8:	70675f64 	.word	0x70675f64
    62cc:	29636d72 	.word	0x29636d72
    62d0:	25203a20 	.word	0x25203a20
    62d4:	00000d64 	.word	0x00000d64
    62d8:	7325545b 	.word	0x7325545b
    62dc:	474f4e2d 	.word	0x474f4e2d
    62e0:	00005350 	.word	0x00005350
    62e4:	20535047 	.word	0x20535047
    62e8:	696c6156 	.word	0x696c6156
    62ec:	203a2064 	.word	0x203a2064
    62f0:	6c727473 	.word	0x6c727473
    62f4:	6c286e65 	.word	0x6c286e65
    62f8:	5f747361 	.word	0x5f747361
    62fc:	696c6176 	.word	0x696c6176
    6300:	70675f64 	.word	0x70675f64
    6304:	29636d72 	.word	0x29636d72
    6308:	25203a20 	.word	0x25203a20
    630c:	6c202c64 	.word	0x6c202c64
    6310:	5f747361 	.word	0x5f747361
    6314:	696c6176 	.word	0x696c6176
    6318:	70675f64 	.word	0x70675f64
    631c:	3a636d72 	.word	0x3a636d72
    6320:	25203a20 	.word	0x25203a20
    6324:	00000d73 	.word	0x00000d73
    6328:	0000002c 	.word	0x0000002c
    632c:	00005825 	.word	0x00005825
    6330:	65657053 	.word	0x65657053
    6334:	54532064 	.word	0x54532064
    6338:	203a2052 	.word	0x203a2052
    633c:	00000000 	.word	0x00000000
    6340:	20726944 	.word	0x20726944
    6344:	20525453 	.word	0x20525453
    6348:	0000203a 	.word	0x0000203a
    634c:	00006425 	.word	0x00006425
    6350:	0000004e 	.word	0x0000004e
    6354:	00000057 	.word	0x00000057
    6358:	00000053 	.word	0x00000053
    635c:	00000045 	.word	0x00000045
    6360:	454d5f54 	.word	0x454d5f54
    6364:	47415353 	.word	0x47415353
    6368:	00003a45 	.word	0x00003a45
    636c:	7325545b 	.word	0x7325545b
    6370:	73257325 	.word	0x73257325
    6374:	73257325 	.word	0x73257325
    6378:	73257325 	.word	0x73257325
    637c:	64256425 	.word	0x64256425
    6380:	73257325 	.word	0x73257325
    6384:	00000000 	.word	0x00000000
    6388:	302d7325 	.word	0x302d7325
    638c:	253a3032 	.word	0x253a3032
    6390:	00000064 	.word	0x00000064
    6394:	313b7325 	.word	0x313b7325
    6398:	253a3430 	.word	0x253a3430
    639c:	00000058 	.word	0x00000058
    63a0:	253b7325 	.word	0x253b7325
    63a4:	00000073 	.word	0x00000073
    63a8:	303b7325 	.word	0x303b7325
    63ac:	253a3232 	.word	0x253a3232
    63b0:	00000073 	.word	0x00000073
    63b4:	313b7325 	.word	0x313b7325
    63b8:	253a3230 	.word	0x253a3230
    63bc:	00000073 	.word	0x00000073
    63c0:	313b7325 	.word	0x313b7325
    63c4:	253a3530 	.word	0x253a3530
    63c8:	00000064 	.word	0x00000064
    63cc:	303b7325 	.word	0x303b7325
    63d0:	253a3332 	.word	0x253a3332
    63d4:	00005d64 	.word	0x00005d64
    63d8:	65746e45 	.word	0x65746e45
    63dc:	20646572 	.word	0x20646572
    63e0:	6e616843 	.word	0x6e616843
    63e4:	43206567 	.word	0x43206567
    63e8:	69666e6f 	.word	0x69666e6f
    63ec:	61727567 	.word	0x61727567
    63f0:	6e6f6974 	.word	0x6e6f6974
    63f4:	00000000 	.word	0x00000000
    63f8:	54455323 	.word	0x54455323
    63fc:	0000003b 	.word	0x0000003b
    6400:	61726150 	.word	0x61726150
    6404:	3a20316d 	.word	0x3a20316d
    6408:	2c732520 	.word	0x2c732520
    640c:	72615020 	.word	0x72615020
    6410:	20326d61 	.word	0x20326d61
    6414:	7325203a 	.word	0x7325203a
    6418:	6150202c 	.word	0x6150202c
    641c:	336d6172 	.word	0x336d6172
    6420:	25203a20 	.word	0x25203a20
    6424:	50202c73 	.word	0x50202c73
    6428:	6d617261 	.word	0x6d617261
    642c:	203a2034 	.word	0x203a2034
    6430:	202c7325 	.word	0x202c7325
    6434:	61726150 	.word	0x61726150
    6438:	3a20356d 	.word	0x3a20356d
    643c:	0d732520 	.word	0x0d732520
    6440:	00000000 	.word	0x00000000
    6444:	00000031 	.word	0x00000031
    6448:	00003130 	.word	0x00003130
    644c:	502d5049 	.word	0x502d5049
    6450:	2074726f 	.word	0x2074726f
    6454:	75716552 	.word	0x75716552
    6458:	2c747365 	.word	0x2c747365
    645c:	20504920 	.word	0x20504920
    6460:	7325203a 	.word	0x7325203a
    6464:	6f50202c 	.word	0x6f50202c
    6468:	3a207472 	.word	0x3a207472
    646c:	0d732520 	.word	0x0d732520
    6470:	00000000 	.word	0x00000000
    6474:	00003231 	.word	0x00003231
    6478:	65736552 	.word	0x65736552
    647c:	65722074 	.word	0x65722074
    6480:	73657571 	.word	0x73657571
    6484:	65722074 	.word	0x65722074
    6488:	76696563 	.word	0x76696563
    648c:	202c6465 	.word	0x202c6465
    6490:	65736572 	.word	0x65736572
    6494:	00002e74 	.word	0x00002e74
    6498:	00003532 	.word	0x00003532
    649c:	204e5041 	.word	0x204e5041
    64a0:	75716552 	.word	0x75716552
    64a4:	2c747365 	.word	0x2c747365
    64a8:	4e504120 	.word	0x4e504120
    64ac:	25203a20 	.word	0x25203a20
    64b0:	55202c73 	.word	0x55202c73
    64b4:	20524553 	.word	0x20524553
    64b8:	7325203a 	.word	0x7325203a
    64bc:	4150202c 	.word	0x4150202c
    64c0:	3a205353 	.word	0x3a205353
    64c4:	0d732520 	.word	0x0d732520
    64c8:	00000000 	.word	0x00000000
    64cc:	00000034 	.word	0x00000034
    64d0:	00003430 	.word	0x00003430
    64d4:	00000030 	.word	0x00000030
    64d8:	61647055 	.word	0x61647055
    64dc:	50206574 	.word	0x50206574
    64e0:	6f697265 	.word	0x6f697265
    64e4:	68432064 	.word	0x68432064
    64e8:	65676e61 	.word	0x65676e61
    64ec:	71655220 	.word	0x71655220
    64f0:	74736575 	.word	0x74736575
    64f4:	4e4f202c 	.word	0x4e4f202c
    64f8:	25203a20 	.word	0x25203a20
    64fc:	4f202c73 	.word	0x4f202c73
    6500:	3a204646 	.word	0x3a204646
    6504:	0d732520 	.word	0x0d732520
    6508:	00000000 	.word	0x00000000
    650c:	61647055 	.word	0x61647055
    6510:	50206574 	.word	0x50206574
    6514:	6f697265 	.word	0x6f697265
    6518:	6f522864 	.word	0x6f522864
    651c:	6e696d61 	.word	0x6e696d61
    6520:	43202967 	.word	0x43202967
    6524:	676e6168 	.word	0x676e6168
    6528:	65522065 	.word	0x65522065
    652c:	73657571 	.word	0x73657571
    6530:	4f202c74 	.word	0x4f202c74
    6534:	203a204e 	.word	0x203a204e
    6538:	202c7325 	.word	0x202c7325
    653c:	2046464f 	.word	0x2046464f
    6540:	7325203a 	.word	0x7325203a
    6544:	0000000d 	.word	0x0000000d
    6548:	00003131 	.word	0x00003131
    654c:	6e616843 	.word	0x6e616843
    6550:	4d206567 	.word	0x4d206567
    6554:	61656c69 	.word	0x61656c69
    6558:	002e6567 	.word	0x002e6567
    655c:	00003233 	.word	0x00003233
    6560:	20776f4c 	.word	0x20776f4c
    6564:	65776f70 	.word	0x65776f70
    6568:	6f6d2072 	.word	0x6f6d2072
    656c:	002e6564 	.word	0x002e6564
    6570:	00003333 	.word	0x00003333
    6574:	20776f4c 	.word	0x20776f4c
    6578:	65776f70 	.word	0x65776f70
    657c:	61772072 	.word	0x61772072
    6580:	7520656b 	.word	0x7520656b
    6584:	65702070 	.word	0x65702070
    6588:	646f6972 	.word	0x646f6972
    658c:	0000002e 	.word	0x0000002e
    6590:	00003433 	.word	0x00003433
    6594:	20776f4c 	.word	0x20776f4c
    6598:	65776f70 	.word	0x65776f70
    659c:	6f6d2072 	.word	0x6f6d2072
    65a0:	73206564 	.word	0x73206564
    65a4:	63656c65 	.word	0x63656c65
    65a8:	6e6f6974 	.word	0x6e6f6974
    65ac:	45454420 	.word	0x45454420
    65b0:	4f502050 	.word	0x4f502050
    65b4:	20524557 	.word	0x20524557
    65b8:	4e574f44 	.word	0x4e574f44
    65bc:	20737620 	.word	0x20737620
    65c0:	45574f50 	.word	0x45574f50
    65c4:	4f442052 	.word	0x4f442052
    65c8:	00004e57 	.word	0x00004e57
    65cc:	00003332 	.word	0x00003332
    65d0:	646e6553 	.word	0x646e6553
    65d4:	6f702020 	.word	0x6f702020
    65d8:	69746973 	.word	0x69746973
    65dc:	00006e6f 	.word	0x00006e6f
    65e0:	00000000 	.word	0x00000000
    65e4:	54455340 	.word	0x54455340
    65e8:	3773253b 	.word	0x3773253b
    65ec:	73253b30 	.word	0x73253b30
    65f0:	00000000 	.word	0x00000000
    65f4:	7774654e 	.word	0x7774654e
    65f8:	206b726f 	.word	0x206b726f
    65fc:	69676572 	.word	0x69676572
    6600:	61727473 	.word	0x61727473
    6604:	6e6f6974 	.word	0x6e6f6974
    6608:	72726520 	.word	0x72726520
    660c:	0000726f 	.word	0x0000726f
    6610:	69676552 	.word	0x69676552
    6614:	72657473 	.word	0x72657473
    6618:	74206465 	.word	0x74206465
    661c:	7367206f 	.word	0x7367206f
    6620:	656e206d 	.word	0x656e206d
    6624:	726f7774 	.word	0x726f7774
    6628:	00002e6b 	.word	0x00002e6b
    662c:	6e676953 	.word	0x6e676953
    6630:	53206c61 	.word	0x53206c61
    6634:	6e657274 	.word	0x6e657274
    6638:	20687467 	.word	0x20687467
    663c:	6425203a 	.word	0x6425203a
    6640:	0000000a 	.word	0x0000000a
    6644:	6c6c6548 	.word	0x6c6c6548
    6648:	3650206f 	.word	0x3650206f
    664c:	30322035 	.word	0x30322035
    6650:	35303531 	.word	0x35303531
    6654:	002e3032 	.word	0x002e3032
    6658:	74737953 	.word	0x74737953
    665c:	6f436d65 	.word	0x6f436d65
    6660:	6c436572 	.word	0x6c436572
    6664:	206b636f 	.word	0x206b636f
    6668:	6425203d 	.word	0x6425203d
    666c:	0a7a4820 	.word	0x0a7a4820
    6670:	00000000 	.word	0x00000000
    6674:	52504545 	.word	0x52504545
    6678:	49204d4f 	.word	0x49204d4f
    667c:	2074696e 	.word	0x2074696e
    6680:	6f727245 	.word	0x6f727245
    6684:	00002e72 	.word	0x00002e72
    6688:	52504545 	.word	0x52504545
    668c:	49204d4f 	.word	0x49204d4f
    6690:	2074696e 	.word	0x2074696e
    6694:	002e6b4f 	.word	0x002e6b4f
    6698:	74696e49 	.word	0x74696e49
    669c:	696c6169 	.word	0x696c6169
    66a0:	676e697a 	.word	0x676e697a
    66a4:	72655320 	.word	0x72655320
    66a8:	20726576 	.word	0x20726576
    66ac:	6e6e6f43 	.word	0x6e6e6f43
    66b0:	69746365 	.word	0x69746365
    66b4:	00006e6f 	.word	0x00006e6f
    66b8:	74737953 	.word	0x74737953
    66bc:	69206d65 	.word	0x69206d65
    66c0:	6567616d 	.word	0x6567616d
    66c4:	67707520 	.word	0x67707520
    66c8:	65646172 	.word	0x65646172
    66cc:	71657220 	.word	0x71657220
    66d0:	74736575 	.word	0x74736575
    66d4:	00006465 	.word	0x00006465
    66d8:	76726553 	.word	0x76726553
    66dc:	43207265 	.word	0x43207265
    66e0:	656e6e6f 	.word	0x656e6e6f
    66e4:	6f697463 	.word	0x6f697463
    66e8:	7345206e 	.word	0x7345206e
    66ec:	6c626174 	.word	0x6c626174
    66f0:	65687369 	.word	0x65687369
    66f4:	6f742064 	.word	0x6f742064
    66f8:	67705520 	.word	0x67705520
    66fc:	65646172 	.word	0x65646172
    6700:	72657320 	.word	0x72657320
    6704:	00726576 	.word	0x00726576
    6708:	3b54535b 	.word	0x3b54535b
    670c:	723b3037 	.word	0x723b3037
    6710:	36343232 	.word	0x36343232
    6714:	3536503b 	.word	0x3536503b
    6718:	3130322d 	.word	0x3130322d
    671c:	30323035 	.word	0x30323035
    6720:	3b312d34 	.word	0x3b312d34
    6724:	4c45483b 	.word	0x4c45483b
    6728:	005d4f4c 	.word	0x005d4f4c
    672c:	6d697250 	.word	0x6d697250
    6730:	20797261 	.word	0x20797261
    6734:	67616d49 	.word	0x67616d49
    6738:	69732065 	.word	0x69732065
    673c:	2073657a 	.word	0x2073657a
    6740:	25783028 	.word	0x25783028
    6744:	3d3d2058 	.word	0x3d3d2058
    6748:	25783020 	.word	0x25783020
    674c:	000d2958 	.word	0x000d2958
    6750:	6f636553 	.word	0x6f636553
    6754:	7261646e 	.word	0x7261646e
    6758:	6d492079 	.word	0x6d492079
    675c:	20656761 	.word	0x20656761
    6760:	657a6973 	.word	0x657a6973
    6764:	30282073 	.word	0x30282073
    6768:	20582578 	.word	0x20582578
    676c:	30203d3d 	.word	0x30203d3d
    6770:	29582578 	.word	0x29582578
    6774:	0000000d 	.word	0x0000000d
    6778:	68746f42 	.word	0x68746f42
    677c:	616d6920 	.word	0x616d6920
    6780:	20736567 	.word	0x20736567
    6784:	20657261 	.word	0x20657261
    6788:	61766e69 	.word	0x61766e69
    678c:	0064696c 	.word	0x0064696c
    6790:	6d697250 	.word	0x6d697250
    6794:	20797261 	.word	0x20797261
    6798:	67616d49 	.word	0x67616d49
    679c:	65762065 	.word	0x65762065
    67a0:	6f697372 	.word	0x6f697372
    67a4:	203d206e 	.word	0x203d206e
    67a8:	58257830 	.word	0x58257830
    67ac:	0000000d 	.word	0x0000000d
    67b0:	6f636553 	.word	0x6f636553
    67b4:	7261646e 	.word	0x7261646e
    67b8:	6d492079 	.word	0x6d492079
    67bc:	20656761 	.word	0x20656761
    67c0:	73726576 	.word	0x73726576
    67c4:	206e6f69 	.word	0x206e6f69
    67c8:	7830203d 	.word	0x7830203d
    67cc:	000d5825 	.word	0x000d5825
    67d0:	63656843 	.word	0x63656843
    67d4:	676e696b 	.word	0x676e696b
    67d8:	43524320 	.word	0x43524320
    67dc:	00000000 	.word	0x00000000
    67e0:	6d697250 	.word	0x6d697250
    67e4:	20797261 	.word	0x20797261
    67e8:	67616d49 	.word	0x67616d49
    67ec:	79742065 	.word	0x79742065
    67f0:	3d206570 	.word	0x3d206570
    67f4:	2c642520 	.word	0x2c642520
    67f8:	72657620 	.word	0x72657620
    67fc:	6e6f6973 	.word	0x6e6f6973
    6800:	30203d20 	.word	0x30203d20
    6804:	32302578 	.word	0x32302578
    6808:	00000d58 	.word	0x00000d58
    680c:	6f636553 	.word	0x6f636553
    6810:	7261646e 	.word	0x7261646e
    6814:	6d492079 	.word	0x6d492079
    6818:	20656761 	.word	0x20656761
    681c:	65707974 	.word	0x65707974
    6820:	25203d20 	.word	0x25203d20
    6824:	76202c64 	.word	0x76202c64
    6828:	69737265 	.word	0x69737265
    682c:	3d206e6f 	.word	0x3d206e6f
    6830:	25783020 	.word	0x25783020
    6834:	0d583230 	.word	0x0d583230
    6838:	00000000 	.word	0x00000000
    683c:	63656843 	.word	0x63656843
    6840:	676e696b 	.word	0x676e696b
    6844:	20666920 	.word	0x20666920
    6848:	67726174 	.word	0x67726174
    684c:	6d207465 	.word	0x6d207465
    6850:	726f6d65 	.word	0x726f6d65
    6854:	73692079 	.word	0x73692079
    6858:	616c6220 	.word	0x616c6220
    685c:	00006b6e 	.word	0x00006b6e
    6860:	73617245 	.word	0x73617245
    6864:	20676e69 	.word	0x20676e69
    6868:	73616c66 	.word	0x73616c66
    686c:	61722068 	.word	0x61722068
    6870:	2065676e 	.word	0x2065676e
    6874:	20726f66 	.word	0x20726f66
    6878:	20656874 	.word	0x20656874
    687c:	67616d69 	.word	0x67616d69
    6880:	00000065 	.word	0x00000065
    6884:	67726154 	.word	0x67726154
    6888:	66207465 	.word	0x66207465
    688c:	6873616c 	.word	0x6873616c
    6890:	6e617220 	.word	0x6e617220
    6894:	69206567 	.word	0x69206567
    6898:	6c622073 	.word	0x6c622073
    689c:	006b6e61 	.word	0x006b6e61
    68a0:	72617453 	.word	0x72617453
    68a4:	676e6974 	.word	0x676e6974
    68a8:	776f6420 	.word	0x776f6420
    68ac:	616f6c6e 	.word	0x616f6c6e
    68b0:	00000064 	.word	0x00000064
    68b4:	746f6f42 	.word	0x746f6f42
    68b8:	646f4320 	.word	0x646f4320
    68bc:	65762065 	.word	0x65762065
    68c0:	6f697372 	.word	0x6f697372
    68c4:	6425206e 	.word	0x6425206e
    68c8:	0064252e 	.word	0x0064252e
    68cc:	74726150 	.word	0x74726150
    68d0:	3a444920 	.word	0x3a444920
    68d4:	20642520 	.word	0x20642520
    68d8:	78232528 	.word	0x78232528
    68dc:	00000029 	.word	0x00000029
    68e0:	69726553 	.word	0x69726553
    68e4:	23206c61 	.word	0x23206c61
    68e8:	3025203a 	.word	0x3025203a
    68ec:	253a5838 	.word	0x253a5838
    68f0:	3a583830 	.word	0x3a583830
    68f4:	58383025 	.word	0x58383025
    68f8:	3830253a 	.word	0x3830253a
    68fc:	00000058 	.word	0x00000058
    6900:	69726553 	.word	0x69726553
    6904:	23206c61 	.word	0x23206c61
    6908:	3025203a 	.word	0x3025203a
    690c:	253a5838 	.word	0x253a5838
    6910:	3a583830 	.word	0x3a583830
    6914:	58383025 	.word	0x58383025
    6918:	3830253a 	.word	0x3830253a
    691c:	00000a58 	.word	0x00000a58
    6920:	53415245 	.word	0x53415245
    6924:	4c465f45 	.word	0x4c465f45
    6928:	00485341 	.word	0x00485341
    692c:	53414c46 	.word	0x53414c46
    6930:	4d495f48 	.word	0x4d495f48
    6934:	00000047 	.word	0x00000047
    6938:	574f4853 	.word	0x574f4853
    693c:	00000000 	.word	0x00000000
    6940:	0000000d 	.word	0x0000000d
    6944:	202a2a2a 	.word	0x202a2a2a
    6948:	7973435f 	.word	0x7973435f
    694c:	6c615f73 	.word	0x6c615f73
    6950:	20636f6c 	.word	0x20636f6c
    6954:	6c696166 	.word	0x6c696166
    6958:	000a6465 	.word	0x000a6465

0000695c <__ctype>:
	...
    69dc:	40404040 40404040 41414140 40404141     @@@@@@@@@AAAAA@@
    69ec:	40404040 40404040 40404040 40404040     @@@@@@@@@@@@@@@@
    69fc:	02020205 02020202 02020202 02020202     ................
    6a0c:	20202020 20202020 02022020 02020202               ......
    6a1c:	90909002 10909090 10101010 10101010     ................
    6a2c:	10101010 10101010 02101010 02020202     ................
    6a3c:	88888802 08888888 08080808 08080808     ................
    6a4c:	08080808 08080808 02080808 40020202     ...............@
	...
    6adc:	0020002b 63257830 00642570 63255830     +. .0x%cp%d.0X%c
    6aec:	00642550 63257830 2a2e252e 70786c6c     P%d.0x%c.%.*llxp
    6afc:	30006425 2e632558 6c2a2e25 2550586c     %d.0X%c.%.*llXP%
    6b0c:	002d0064 00770072 6c756e28 3000296c     d.-.r.w.(null).0
    6b1c:	78300058 30003000 34333231 38373635     X.0x.0.012345678
    6b2c:	43424139 00464544 33323130 37363534     9ABCDEF.01234567
    6b3c:	62613938 66656463 00000000              89abcdef....

00006b48 <__huge_vall>:
    6b48:	ffffffff 7fefffff                       ........
