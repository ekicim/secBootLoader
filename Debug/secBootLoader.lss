
secBootLoader.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 80 00 10 71 01 00 00 e9 01 00 00 f1 01 00 00     ....q...........
      10:	f9 01 00 00 01 02 00 00 09 02 00 00 00 00 00 00     ................
	...
      2c:	11 02 00 00 19 02 00 00 00 00 00 00 21 02 00 00     ............!...
      3c:	25 26 00 00 29 33 00 00 31 02 00 00 31 02 00 00     %&..)3..1...1...
      4c:	31 02 00 00 31 02 00 00 f1 28 00 00 f9 29 00 00     1...1....(...)..
      5c:	09 2b 00 00 15 2c 00 00 31 02 00 00 9d 12 00 00     .+...,..1.......
      6c:	e1 15 00 00 31 02 00 00 31 02 00 00 31 02 00 00     ....1...1...1...
      7c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      8c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      9c:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      ac:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...
      bc:	31 02 00 00 31 02 00 00 31 02 00 00 31 02 00 00     1...1...1...1...

000000cc <__data_section_table>:
      cc:	00007698 	.word	0x00007698
      d0:	10000000 	.word	0x10000000
      d4:	00000028 	.word	0x00000028
      d8:	00007698 	.word	0x00007698
      dc:	2007c000 	.word	0x2007c000
      e0:	00000000 	.word	0x00000000

000000e4 <__bss_section_table>:
      e4:	10000028 	.word	0x10000028
      e8:	00001e14 	.word	0x00001e14
      ec:	2007c000 	.word	0x2007c000
      f0:	00000000 	.word	0x00000000

000000f4 <data_init>:
// are written as separate functions rather than being inlined within the
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
      f4:	b480      	push	{r7}
      f6:	b089      	sub	sp, #36	; 0x24
      f8:	af00      	add	r7, sp, #0
      fa:	60f8      	str	r0, [r7, #12]
      fc:	60b9      	str	r1, [r7, #8]
      fe:	607a      	str	r2, [r7, #4]
    unsigned int *pulDest = (unsigned int*) start;
     100:	68bb      	ldr	r3, [r7, #8]
     102:	61fb      	str	r3, [r7, #28]
    unsigned int *pulSrc = (unsigned int*) romstart;
     104:	68fb      	ldr	r3, [r7, #12]
     106:	61bb      	str	r3, [r7, #24]
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
     108:	2300      	movs	r3, #0
     10a:	617b      	str	r3, [r7, #20]
     10c:	e00a      	b.n	124 <data_init+0x30>
        *pulDest++ = *pulSrc++;
     10e:	69fb      	ldr	r3, [r7, #28]
     110:	1d1a      	adds	r2, r3, #4
     112:	61fa      	str	r2, [r7, #28]
     114:	69ba      	ldr	r2, [r7, #24]
     116:	1d11      	adds	r1, r2, #4
     118:	61b9      	str	r1, [r7, #24]
     11a:	6812      	ldr	r2, [r2, #0]
     11c:	601a      	str	r2, [r3, #0]
__attribute__ ((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
     11e:	697b      	ldr	r3, [r7, #20]
     120:	3304      	adds	r3, #4
     122:	617b      	str	r3, [r7, #20]
     124:	697a      	ldr	r2, [r7, #20]
     126:	687b      	ldr	r3, [r7, #4]
     128:	429a      	cmp	r2, r3
     12a:	d3f0      	bcc.n	10e <data_init+0x1a>
        *pulDest++ = *pulSrc++;
}
     12c:	3724      	adds	r7, #36	; 0x24
     12e:	46bd      	mov	sp, r7
     130:	f85d 7b04 	ldr.w	r7, [sp], #4
     134:	4770      	bx	lr
     136:	bf00      	nop

00000138 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
     138:	b480      	push	{r7}
     13a:	b085      	sub	sp, #20
     13c:	af00      	add	r7, sp, #0
     13e:	6078      	str	r0, [r7, #4]
     140:	6039      	str	r1, [r7, #0]
    unsigned int *pulDest = (unsigned int*) start;
     142:	687b      	ldr	r3, [r7, #4]
     144:	60fb      	str	r3, [r7, #12]
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
     146:	2300      	movs	r3, #0
     148:	60bb      	str	r3, [r7, #8]
     14a:	e007      	b.n	15c <bss_init+0x24>
        *pulDest++ = 0;
     14c:	68fb      	ldr	r3, [r7, #12]
     14e:	1d1a      	adds	r2, r3, #4
     150:	60fa      	str	r2, [r7, #12]
     152:	2200      	movs	r2, #0
     154:	601a      	str	r2, [r3, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
     156:	68bb      	ldr	r3, [r7, #8]
     158:	3304      	adds	r3, #4
     15a:	60bb      	str	r3, [r7, #8]
     15c:	68ba      	ldr	r2, [r7, #8]
     15e:	683b      	ldr	r3, [r7, #0]
     160:	429a      	cmp	r2, r3
     162:	d3f3      	bcc.n	14c <bss_init+0x14>
        *pulDest++ = 0;
}
     164:	3714      	adds	r7, #20
     166:	46bd      	mov	sp, r7
     168:	f85d 7b04 	ldr.w	r7, [sp], #4
     16c:	4770      	bx	lr
     16e:	bf00      	nop

00000170 <ResetISR>:
// Sets up a simple runtime environment and initializes the C/C++
// library.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void
ResetISR(void) {
     170:	b580      	push	{r7, lr}
     172:	b084      	sub	sp, #16
     174:	af00      	add	r7, sp, #0
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
     176:	4b19      	ldr	r3, [pc, #100]	; (1dc <ResetISR+0x6c>)
     178:	60fb      	str	r3, [r7, #12]

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
     17a:	e013      	b.n	1a4 <ResetISR+0x34>
        LoadAddr = *SectionTableAddr++;
     17c:	68fb      	ldr	r3, [r7, #12]
     17e:	1d1a      	adds	r2, r3, #4
     180:	60fa      	str	r2, [r7, #12]
     182:	681b      	ldr	r3, [r3, #0]
     184:	60bb      	str	r3, [r7, #8]
        ExeAddr = *SectionTableAddr++;
     186:	68fb      	ldr	r3, [r7, #12]
     188:	1d1a      	adds	r2, r3, #4
     18a:	60fa      	str	r2, [r7, #12]
     18c:	681b      	ldr	r3, [r3, #0]
     18e:	607b      	str	r3, [r7, #4]
        SectionLen = *SectionTableAddr++;
     190:	68fb      	ldr	r3, [r7, #12]
     192:	1d1a      	adds	r2, r3, #4
     194:	60fa      	str	r2, [r7, #12]
     196:	681b      	ldr	r3, [r3, #0]
     198:	603b      	str	r3, [r7, #0]
        data_init(LoadAddr, ExeAddr, SectionLen);
     19a:	68b8      	ldr	r0, [r7, #8]
     19c:	6879      	ldr	r1, [r7, #4]
     19e:	683a      	ldr	r2, [r7, #0]
     1a0:	f7ff ffa8 	bl	f4 <data_init>

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
     1a4:	68fb      	ldr	r3, [r7, #12]
     1a6:	4a0e      	ldr	r2, [pc, #56]	; (1e0 <ResetISR+0x70>)
     1a8:	4293      	cmp	r3, r2
     1aa:	d3e7      	bcc.n	17c <ResetISR+0xc>
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
     1ac:	e00d      	b.n	1ca <ResetISR+0x5a>
        ExeAddr = *SectionTableAddr++;
     1ae:	68fb      	ldr	r3, [r7, #12]
     1b0:	1d1a      	adds	r2, r3, #4
     1b2:	60fa      	str	r2, [r7, #12]
     1b4:	681b      	ldr	r3, [r3, #0]
     1b6:	607b      	str	r3, [r7, #4]
        SectionLen = *SectionTableAddr++;
     1b8:	68fb      	ldr	r3, [r7, #12]
     1ba:	1d1a      	adds	r2, r3, #4
     1bc:	60fa      	str	r2, [r7, #12]
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	603b      	str	r3, [r7, #0]
        bss_init(ExeAddr, SectionLen);
     1c2:	6878      	ldr	r0, [r7, #4]
     1c4:	6839      	ldr	r1, [r7, #0]
     1c6:	f7ff ffb7 	bl	138 <bss_init>
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
     1ca:	68fb      	ldr	r3, [r7, #12]
     1cc:	4a05      	ldr	r2, [pc, #20]	; (1e4 <ResetISR+0x74>)
     1ce:	4293      	cmp	r3, r2
     1d0:	d3ed      	bcc.n	1ae <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
    }

#if defined (__USE_CMSIS) || defined (__USE_LPCOPEN)
    SystemInit();
     1d2:	f003 fc6f 	bl	3ab4 <SystemInit>
    __libc_init_array();
#endif

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main() ;
     1d6:	f003 fcdd 	bl	3b94 <__main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
     1da:	e7fe      	b.n	1da <ResetISR+0x6a>
     1dc:	000000cc 	.word	0x000000cc
     1e0:	000000e4 	.word	0x000000e4
     1e4:	000000f4 	.word	0x000000f4

000001e8 <NMI_Handler>:
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void)
{ while(1) {}
     1e8:	b480      	push	{r7}
     1ea:	af00      	add	r7, sp, #0
     1ec:	e7fe      	b.n	1ec <NMI_Handler+0x4>
     1ee:	bf00      	nop

000001f0 <HardFault_Handler>:
}

__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void)
{ while(1) {}
     1f0:	b480      	push	{r7}
     1f2:	af00      	add	r7, sp, #0
     1f4:	e7fe      	b.n	1f4 <HardFault_Handler+0x4>
     1f6:	bf00      	nop

000001f8 <MemManage_Handler>:
}

__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void)
{ while(1) {}
     1f8:	b480      	push	{r7}
     1fa:	af00      	add	r7, sp, #0
     1fc:	e7fe      	b.n	1fc <MemManage_Handler+0x4>
     1fe:	bf00      	nop

00000200 <BusFault_Handler>:
}

__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void)
{ while(1) {}
     200:	b480      	push	{r7}
     202:	af00      	add	r7, sp, #0
     204:	e7fe      	b.n	204 <BusFault_Handler+0x4>
     206:	bf00      	nop

00000208 <UsageFault_Handler>:
}

__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void)
{ while(1) {}
     208:	b480      	push	{r7}
     20a:	af00      	add	r7, sp, #0
     20c:	e7fe      	b.n	20c <UsageFault_Handler+0x4>
     20e:	bf00      	nop

00000210 <SVC_Handler>:
}

__attribute__ ((section(".after_vectors")))
void SVC_Handler(void)
{ while(1) {}
     210:	b480      	push	{r7}
     212:	af00      	add	r7, sp, #0
     214:	e7fe      	b.n	214 <SVC_Handler+0x4>
     216:	bf00      	nop

00000218 <DebugMon_Handler>:
}

__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void)
{ while(1) {}
     218:	b480      	push	{r7}
     21a:	af00      	add	r7, sp, #0
     21c:	e7fe      	b.n	21c <DebugMon_Handler+0x4>
     21e:	bf00      	nop

00000220 <PendSV_Handler>:
}

__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void)
{ while(1) {}
     220:	b480      	push	{r7}
     222:	af00      	add	r7, sp, #0
     224:	e7fe      	b.n	224 <PendSV_Handler+0x4>
     226:	bf00      	nop
}

__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void)
{ while(1) {}
     228:	b480      	push	{r7}
     22a:	af00      	add	r7, sp, #0
     22c:	e7fe      	b.n	22c <PendSV_Handler+0xc>
     22e:	bf00      	nop

00000230 <ADC_IRQHandler>:
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void)
{ while(1) {}
     230:	b480      	push	{r7}
     232:	af00      	add	r7, sp, #0
     234:	e7fe      	b.n	234 <ADC_IRQHandler+0x4>
     236:	bf00      	nop
     238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     23c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     24c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     25c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     26c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     27c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     28c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     29c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000002fc <CRP_WORD>:
     2fc:	ffff ffff                                   ....

00000300 <LoadParams>:
uint8_t  j,i;
#define P55 1
//#define OKKA_DEMO 1
//#define CABINET_DEMO 1

void LoadParams() {
     300:	b580      	push	{r7, lr}
     302:	b0b2      	sub	sp, #200	; 0xc8
     304:	af00      	add	r7, sp, #0
	char buffer[200];
	//LOAD IP
	EEPROM_LoadString(cal_ip, per_ip_val);
     306:	4b54      	ldr	r3, [pc, #336]	; (458 <LoadParams+0x158>)
     308:	681b      	ldr	r3, [r3, #0]
     30a:	2200      	movs	r2, #0
     30c:	461a      	mov	r2, r3
     30e:	4610      	mov	r0, r2
     310:	4952      	ldr	r1, [pc, #328]	; (45c <LoadParams+0x15c>)
     312:	f000 fb2b 	bl	96c <EEPROM_LoadString>
	if (isalnum(per_ip_val[0]) == 0 || strlen(per_ip_val) < 5 || strchr(per_ip_val, '.') == NULL)
     316:	4b51      	ldr	r3, [pc, #324]	; (45c <LoadParams+0x15c>)
     318:	781b      	ldrb	r3, [r3, #0]
     31a:	3380      	adds	r3, #128	; 0x80
     31c:	4a50      	ldr	r2, [pc, #320]	; (460 <LoadParams+0x160>)
     31e:	5cd3      	ldrb	r3, [r2, r3]
     320:	f003 0338 	and.w	r3, r3, #56	; 0x38
     324:	2b00      	cmp	r3, #0
     326:	d00c      	beq.n	342 <LoadParams+0x42>
     328:	484c      	ldr	r0, [pc, #304]	; (45c <LoadParams+0x15c>)
     32a:	f005 f96d 	bl	5608 <strlen>
     32e:	4603      	mov	r3, r0
     330:	2b04      	cmp	r3, #4
     332:	d906      	bls.n	342 <LoadParams+0x42>
     334:	4849      	ldr	r0, [pc, #292]	; (45c <LoadParams+0x15c>)
     336:	212e      	movs	r1, #46	; 0x2e
     338:	f005 f938 	bl	55ac <strchr>
     33c:	4603      	mov	r3, r0
     33e:	2b00      	cmp	r3, #0
     340:	d103      	bne.n	34a <LoadParams+0x4a>
		strcpy(per_ip_val, "178.63.30.81");//Default value
     342:	4846      	ldr	r0, [pc, #280]	; (45c <LoadParams+0x15c>)
     344:	4947      	ldr	r1, [pc, #284]	; (464 <LoadParams+0x164>)
     346:	f005 f93e 	bl	55c6 <strcpy>
	//LOAD Port
	per_port_val = EEPROM_LoadInt64(cal_port);
     34a:	4b47      	ldr	r3, [pc, #284]	; (468 <LoadParams+0x168>)
     34c:	681b      	ldr	r3, [r3, #0]
     34e:	2200      	movs	r2, #0
     350:	461a      	mov	r2, r3
     352:	4610      	mov	r0, r2
     354:	f000 fa98 	bl	888 <EEPROM_LoadInt64>
     358:	4602      	mov	r2, r0
     35a:	460b      	mov	r3, r1
     35c:	4b43      	ldr	r3, [pc, #268]	; (46c <LoadParams+0x16c>)
     35e:	601a      	str	r2, [r3, #0]
	if (per_port_val == 0 || per_port_val == 65535)
     360:	4b42      	ldr	r3, [pc, #264]	; (46c <LoadParams+0x16c>)
     362:	681b      	ldr	r3, [r3, #0]
     364:	2b00      	cmp	r3, #0
     366:	d005      	beq.n	374 <LoadParams+0x74>
     368:	4b40      	ldr	r3, [pc, #256]	; (46c <LoadParams+0x16c>)
     36a:	681b      	ldr	r3, [r3, #0]
     36c:	f64f 72ff 	movw	r2, #65535	; 0xffff
     370:	4293      	cmp	r3, r2
     372:	d103      	bne.n	37c <LoadParams+0x7c>
		per_port_val = 6081;
     374:	4b3d      	ldr	r3, [pc, #244]	; (46c <LoadParams+0x16c>)
     376:	f241 72c1 	movw	r2, #6081	; 0x17c1
     37a:	601a      	str	r2, [r3, #0]
	//LOAD APN
	EEPROM_LoadString(cal_apn, per_apn_val);
     37c:	4b3c      	ldr	r3, [pc, #240]	; (470 <LoadParams+0x170>)
     37e:	681b      	ldr	r3, [r3, #0]
     380:	2200      	movs	r2, #0
     382:	461a      	mov	r2, r3
     384:	4610      	mov	r0, r2
     386:	493b      	ldr	r1, [pc, #236]	; (474 <LoadParams+0x174>)
     388:	f000 faf0 	bl	96c <EEPROM_LoadString>
	if (isalnum(per_apn_val[0]) == 0 || strlen(per_apn_val) < 3)
     38c:	4b39      	ldr	r3, [pc, #228]	; (474 <LoadParams+0x174>)
     38e:	781b      	ldrb	r3, [r3, #0]
     390:	3380      	adds	r3, #128	; 0x80
     392:	4a33      	ldr	r2, [pc, #204]	; (460 <LoadParams+0x160>)
     394:	5cd3      	ldrb	r3, [r2, r3]
     396:	f003 0338 	and.w	r3, r3, #56	; 0x38
     39a:	2b00      	cmp	r3, #0
     39c:	d005      	beq.n	3aa <LoadParams+0xaa>
     39e:	4835      	ldr	r0, [pc, #212]	; (474 <LoadParams+0x174>)
     3a0:	f005 f932 	bl	5608 <strlen>
     3a4:	4603      	mov	r3, r0
     3a6:	2b02      	cmp	r3, #2
     3a8:	d803      	bhi.n	3b2 <LoadParams+0xb2>
		strcpy(per_apn_val, "internet");//Default value
     3aa:	4832      	ldr	r0, [pc, #200]	; (474 <LoadParams+0x174>)
     3ac:	4932      	ldr	r1, [pc, #200]	; (478 <LoadParams+0x178>)
     3ae:	f005 f90a 	bl	55c6 <strcpy>
	//LOAD APN User
	EEPROM_LoadString(cal_apn_user, per_apnuser_val);
     3b2:	4b32      	ldr	r3, [pc, #200]	; (47c <LoadParams+0x17c>)
     3b4:	681b      	ldr	r3, [r3, #0]
     3b6:	2200      	movs	r2, #0
     3b8:	461a      	mov	r2, r3
     3ba:	4610      	mov	r0, r2
     3bc:	4930      	ldr	r1, [pc, #192]	; (480 <LoadParams+0x180>)
     3be:	f000 fad5 	bl	96c <EEPROM_LoadString>
	if (isalnum(per_apnuser_val[0]) == 0 || strlen(per_apnuser_val) < 3)
     3c2:	4b2f      	ldr	r3, [pc, #188]	; (480 <LoadParams+0x180>)
     3c4:	781b      	ldrb	r3, [r3, #0]
     3c6:	3380      	adds	r3, #128	; 0x80
     3c8:	4a25      	ldr	r2, [pc, #148]	; (460 <LoadParams+0x160>)
     3ca:	5cd3      	ldrb	r3, [r2, r3]
     3cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
     3d0:	2b00      	cmp	r3, #0
     3d2:	d005      	beq.n	3e0 <LoadParams+0xe0>
     3d4:	482a      	ldr	r0, [pc, #168]	; (480 <LoadParams+0x180>)
     3d6:	f005 f917 	bl	5608 <strlen>
     3da:	4603      	mov	r3, r0
     3dc:	2b02      	cmp	r3, #2
     3de:	d803      	bhi.n	3e8 <LoadParams+0xe8>
		strcpy(per_apnuser_val, "vodafone");//Default value
     3e0:	4827      	ldr	r0, [pc, #156]	; (480 <LoadParams+0x180>)
     3e2:	4928      	ldr	r1, [pc, #160]	; (484 <LoadParams+0x184>)
     3e4:	f005 f8ef 	bl	55c6 <strcpy>
	//LOAD APN Pass
	EEPROM_LoadString(cal_apn_pass, per_apnpass_val);
     3e8:	4b27      	ldr	r3, [pc, #156]	; (488 <LoadParams+0x188>)
     3ea:	681b      	ldr	r3, [r3, #0]
     3ec:	2200      	movs	r2, #0
     3ee:	461a      	mov	r2, r3
     3f0:	4610      	mov	r0, r2
     3f2:	4926      	ldr	r1, [pc, #152]	; (48c <LoadParams+0x18c>)
     3f4:	f000 faba 	bl	96c <EEPROM_LoadString>
	if (isalnum(per_apnpass_val[0]) == 0 || strlen(per_apnpass_val) < 3)
     3f8:	4b24      	ldr	r3, [pc, #144]	; (48c <LoadParams+0x18c>)
     3fa:	781b      	ldrb	r3, [r3, #0]
     3fc:	3380      	adds	r3, #128	; 0x80
     3fe:	4a18      	ldr	r2, [pc, #96]	; (460 <LoadParams+0x160>)
     400:	5cd3      	ldrb	r3, [r2, r3]
     402:	f003 0338 	and.w	r3, r3, #56	; 0x38
     406:	2b00      	cmp	r3, #0
     408:	d005      	beq.n	416 <LoadParams+0x116>
     40a:	4820      	ldr	r0, [pc, #128]	; (48c <LoadParams+0x18c>)
     40c:	f005 f8fc 	bl	5608 <strlen>
     410:	4603      	mov	r3, r0
     412:	2b02      	cmp	r3, #2
     414:	d803      	bhi.n	41e <LoadParams+0x11e>
		strcpy(per_apnpass_val, "vodafone");//Default value
     416:	481d      	ldr	r0, [pc, #116]	; (48c <LoadParams+0x18c>)
     418:	491a      	ldr	r1, [pc, #104]	; (484 <LoadParams+0x184>)
     41a:	f005 f8d4 	bl	55c6 <strcpy>

	//LOAD Mileage
	per_mileage_val = EEPROM_LoadInt64(cal_mileage);
     41e:	4b1c      	ldr	r3, [pc, #112]	; (490 <LoadParams+0x190>)
     420:	681b      	ldr	r3, [r3, #0]
     422:	2200      	movs	r2, #0
     424:	461a      	mov	r2, r3
     426:	4610      	mov	r0, r2
     428:	f000 fa2e 	bl	888 <EEPROM_LoadInt64>
     42c:	4602      	mov	r2, r0
     42e:	460b      	mov	r3, r1
     430:	4918      	ldr	r1, [pc, #96]	; (494 <LoadParams+0x194>)
     432:	e9c1 2300 	strd	r2, r3, [r1]
	sprintf(buffer, "Mileage: %d\n", (int)per_mileage_val);
     436:	4b17      	ldr	r3, [pc, #92]	; (494 <LoadParams+0x194>)
     438:	e9d3 2300 	ldrd	r2, r3, [r3]
     43c:	463b      	mov	r3, r7
     43e:	4618      	mov	r0, r3
     440:	4915      	ldr	r1, [pc, #84]	; (498 <LoadParams+0x198>)
     442:	f003 fc79 	bl	3d38 <sprintf>
	TraceNL(buffer);
     446:	463b      	mov	r3, r7
     448:	4618      	mov	r0, r3
     44a:	f002 f91f 	bl	268c <TraceNL>
	LoadTimings();
     44e:	f000 f825 	bl	49c <LoadTimings>

	//MODE 0 = Deep Power Down
	//MODE 1 = Power Down
}
     452:	37c8      	adds	r7, #200	; 0xc8
     454:	46bd      	mov	sp, r7
     456:	bd80      	pop	{r7, pc}
     458:	10000d30 	.word	0x10000d30
     45c:	10000cb0 	.word	0x10000cb0
     460:	000074a4 	.word	0x000074a4
     464:	000065fc 	.word	0x000065fc
     468:	10000d2c 	.word	0x10000d2c
     46c:	10000d20 	.word	0x10000d20
     470:	10000d68 	.word	0x10000d68
     474:	10000d6c 	.word	0x10000d6c
     478:	0000660c 	.word	0x0000660c
     47c:	10000d1c 	.word	0x10000d1c
     480:	10000d00 	.word	0x10000d00
     484:	00006618 	.word	0x00006618
     488:	10000ca4 	.word	0x10000ca4
     48c:	10000d50 	.word	0x10000d50
     490:	10000cf0 	.word	0x10000cf0
     494:	10000d40 	.word	0x10000d40
     498:	00006624 	.word	0x00006624

0000049c <LoadTimings>:

void LoadTimings() {
     49c:	b580      	push	{r7, lr}
     49e:	b0b4      	sub	sp, #208	; 0xd0
     4a0:	af00      	add	r7, sp, #0
	char buffer[200];
	//LOAD Ignition On Period
	per_ignonperiod_val = EEPROM_LoadInt64(cal_ign_on_period);
     4a2:	4b98      	ldr	r3, [pc, #608]	; (704 <LoadTimings+0x268>)
     4a4:	681b      	ldr	r3, [r3, #0]
     4a6:	2200      	movs	r2, #0
     4a8:	461a      	mov	r2, r3
     4aa:	4610      	mov	r0, r2
     4ac:	f000 f9ec 	bl	888 <EEPROM_LoadInt64>
     4b0:	4602      	mov	r2, r0
     4b2:	460b      	mov	r3, r1
     4b4:	4b94      	ldr	r3, [pc, #592]	; (708 <LoadTimings+0x26c>)
     4b6:	601a      	str	r2, [r3, #0]
	if (per_ignonperiod_val == 0 || per_ignonperiod_val > 14400)
     4b8:	4b93      	ldr	r3, [pc, #588]	; (708 <LoadTimings+0x26c>)
     4ba:	681b      	ldr	r3, [r3, #0]
     4bc:	2b00      	cmp	r3, #0
     4be:	d004      	beq.n	4ca <LoadTimings+0x2e>
     4c0:	4b91      	ldr	r3, [pc, #580]	; (708 <LoadTimings+0x26c>)
     4c2:	681b      	ldr	r3, [r3, #0]
     4c4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     4c8:	dd02      	ble.n	4d0 <LoadTimings+0x34>
		per_ignonperiod_val = 60;
     4ca:	4b8f      	ldr	r3, [pc, #572]	; (708 <LoadTimings+0x26c>)
     4cc:	223c      	movs	r2, #60	; 0x3c
     4ce:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignonperiod_val: %d\n", (int)per_ignonperiod_val);
     4d0:	4b8d      	ldr	r3, [pc, #564]	; (708 <LoadTimings+0x26c>)
     4d2:	681b      	ldr	r3, [r3, #0]
     4d4:	1d3a      	adds	r2, r7, #4
     4d6:	4610      	mov	r0, r2
     4d8:	498c      	ldr	r1, [pc, #560]	; (70c <LoadTimings+0x270>)
     4da:	461a      	mov	r2, r3
     4dc:	f003 fc2c 	bl	3d38 <sprintf>
	TraceNL(buffer);
     4e0:	1d3b      	adds	r3, r7, #4
     4e2:	4618      	mov	r0, r3
     4e4:	f002 f8d2 	bl	268c <TraceNL>
	//LOAD Ignition Off Period
	per_ignoffperiod_val = (int)EEPROM_LoadInt64(cal_ign_off_period);
     4e8:	4b89      	ldr	r3, [pc, #548]	; (710 <LoadTimings+0x274>)
     4ea:	681b      	ldr	r3, [r3, #0]
     4ec:	2200      	movs	r2, #0
     4ee:	461a      	mov	r2, r3
     4f0:	4610      	mov	r0, r2
     4f2:	f000 f9c9 	bl	888 <EEPROM_LoadInt64>
     4f6:	4602      	mov	r2, r0
     4f8:	460b      	mov	r3, r1
     4fa:	4b86      	ldr	r3, [pc, #536]	; (714 <LoadTimings+0x278>)
     4fc:	601a      	str	r2, [r3, #0]
	int original_per_ignoffperiod_val = per_ignoffperiod_val;
     4fe:	4b85      	ldr	r3, [pc, #532]	; (714 <LoadTimings+0x278>)
     500:	681b      	ldr	r3, [r3, #0]
     502:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (per_ignoffperiod_val == 0 || per_ignoffperiod_val > 14400) //4 hours max.
     506:	4b83      	ldr	r3, [pc, #524]	; (714 <LoadTimings+0x278>)
     508:	681b      	ldr	r3, [r3, #0]
     50a:	2b00      	cmp	r3, #0
     50c:	d004      	beq.n	518 <LoadTimings+0x7c>
     50e:	4b81      	ldr	r3, [pc, #516]	; (714 <LoadTimings+0x278>)
     510:	681b      	ldr	r3, [r3, #0]
     512:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     516:	dd02      	ble.n	51e <LoadTimings+0x82>
		per_ignoffperiod_val = 120;
     518:	4b7e      	ldr	r3, [pc, #504]	; (714 <LoadTimings+0x278>)
     51a:	2278      	movs	r2, #120	; 0x78
     51c:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignoffperiod_val: %d, per_ignoffperiod_val(original): %d\n", (int)per_ignoffperiod_val,(int)original_per_ignoffperiod_val);
     51e:	4b7d      	ldr	r3, [pc, #500]	; (714 <LoadTimings+0x278>)
     520:	681b      	ldr	r3, [r3, #0]
     522:	1d3a      	adds	r2, r7, #4
     524:	4610      	mov	r0, r2
     526:	497c      	ldr	r1, [pc, #496]	; (718 <LoadTimings+0x27c>)
     528:	461a      	mov	r2, r3
     52a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
     52e:	f003 fc03 	bl	3d38 <sprintf>
	TraceNL(buffer);
     532:	1d3b      	adds	r3, r7, #4
     534:	4618      	mov	r0, r3
     536:	f002 f8a9 	bl	268c <TraceNL>
	//LOAD Ignition On Roaming Period
	per_ignonroamingperiod_val = (int)EEPROM_LoadInt64(cal_ign_on_roaming_period);
     53a:	4b78      	ldr	r3, [pc, #480]	; (71c <LoadTimings+0x280>)
     53c:	681b      	ldr	r3, [r3, #0]
     53e:	2200      	movs	r2, #0
     540:	461a      	mov	r2, r3
     542:	4610      	mov	r0, r2
     544:	f000 f9a0 	bl	888 <EEPROM_LoadInt64>
     548:	4602      	mov	r2, r0
     54a:	460b      	mov	r3, r1
     54c:	4b74      	ldr	r3, [pc, #464]	; (720 <LoadTimings+0x284>)
     54e:	601a      	str	r2, [r3, #0]
	if (per_ignonroamingperiod_val == 0 || per_ignonroamingperiod_val > 14400)
     550:	4b73      	ldr	r3, [pc, #460]	; (720 <LoadTimings+0x284>)
     552:	681b      	ldr	r3, [r3, #0]
     554:	2b00      	cmp	r3, #0
     556:	d004      	beq.n	562 <LoadTimings+0xc6>
     558:	4b71      	ldr	r3, [pc, #452]	; (720 <LoadTimings+0x284>)
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     560:	dd03      	ble.n	56a <LoadTimings+0xce>
		per_ignonroamingperiod_val = 1800;
     562:	4b6f      	ldr	r3, [pc, #444]	; (720 <LoadTimings+0x284>)
     564:	f44f 62e1 	mov.w	r2, #1800	; 0x708
     568:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignonroamingperiod_val: %d\n", (int)per_ignonroamingperiod_val);
     56a:	4b6d      	ldr	r3, [pc, #436]	; (720 <LoadTimings+0x284>)
     56c:	681b      	ldr	r3, [r3, #0]
     56e:	1d3a      	adds	r2, r7, #4
     570:	4610      	mov	r0, r2
     572:	496c      	ldr	r1, [pc, #432]	; (724 <LoadTimings+0x288>)
     574:	461a      	mov	r2, r3
     576:	f003 fbdf 	bl	3d38 <sprintf>
	TraceNL(buffer);
     57a:	1d3b      	adds	r3, r7, #4
     57c:	4618      	mov	r0, r3
     57e:	f002 f885 	bl	268c <TraceNL>
	//LOAD Ignition Off Roaming Period
	per_ignoffroamingperiod_val = (int)EEPROM_LoadInt64(cal_ign_off_roaming_period);
     582:	4b69      	ldr	r3, [pc, #420]	; (728 <LoadTimings+0x28c>)
     584:	681b      	ldr	r3, [r3, #0]
     586:	2200      	movs	r2, #0
     588:	461a      	mov	r2, r3
     58a:	4610      	mov	r0, r2
     58c:	f000 f97c 	bl	888 <EEPROM_LoadInt64>
     590:	4602      	mov	r2, r0
     592:	460b      	mov	r3, r1
     594:	4b65      	ldr	r3, [pc, #404]	; (72c <LoadTimings+0x290>)
     596:	601a      	str	r2, [r3, #0]
	if (per_ignoffroamingperiod_val == 0 || per_ignoffroamingperiod_val > 14400)
     598:	4b64      	ldr	r3, [pc, #400]	; (72c <LoadTimings+0x290>)
     59a:	681b      	ldr	r3, [r3, #0]
     59c:	2b00      	cmp	r3, #0
     59e:	d004      	beq.n	5aa <LoadTimings+0x10e>
     5a0:	4b62      	ldr	r3, [pc, #392]	; (72c <LoadTimings+0x290>)
     5a2:	681b      	ldr	r3, [r3, #0]
     5a4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
     5a8:	dd03      	ble.n	5b2 <LoadTimings+0x116>
		per_ignoffroamingperiod_val = 7200;
     5aa:	4b60      	ldr	r3, [pc, #384]	; (72c <LoadTimings+0x290>)
     5ac:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
     5b0:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_ignoffroamingperiod_val: %d\n", (int)per_ignoffroamingperiod_val);
     5b2:	4b5e      	ldr	r3, [pc, #376]	; (72c <LoadTimings+0x290>)
     5b4:	681b      	ldr	r3, [r3, #0]
     5b6:	1d3a      	adds	r2, r7, #4
     5b8:	4610      	mov	r0, r2
     5ba:	495d      	ldr	r1, [pc, #372]	; (730 <LoadTimings+0x294>)
     5bc:	461a      	mov	r2, r3
     5be:	f003 fbbb 	bl	3d38 <sprintf>
	TraceNL(buffer);
     5c2:	1d3b      	adds	r3, r7, #4
     5c4:	4618      	mov	r0, r3
     5c6:	f002 f861 	bl	268c <TraceNL>
	per_lowpow_just_wake = (int)EEPROM_LoadInt64(cal_lowpow_just_wake);
     5ca:	4b5a      	ldr	r3, [pc, #360]	; (734 <LoadTimings+0x298>)
     5cc:	681b      	ldr	r3, [r3, #0]
     5ce:	2200      	movs	r2, #0
     5d0:	461a      	mov	r2, r3
     5d2:	4610      	mov	r0, r2
     5d4:	f000 f958 	bl	888 <EEPROM_LoadInt64>
     5d8:	4602      	mov	r2, r0
     5da:	460b      	mov	r3, r1
     5dc:	4b56      	ldr	r3, [pc, #344]	; (738 <LoadTimings+0x29c>)
     5de:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_just_wake: %d\n", (int)per_lowpow_just_wake);
     5e0:	4b55      	ldr	r3, [pc, #340]	; (738 <LoadTimings+0x29c>)
     5e2:	681b      	ldr	r3, [r3, #0]
     5e4:	1d3a      	adds	r2, r7, #4
     5e6:	4610      	mov	r0, r2
     5e8:	4954      	ldr	r1, [pc, #336]	; (73c <LoadTimings+0x2a0>)
     5ea:	461a      	mov	r2, r3
     5ec:	f003 fba4 	bl	3d38 <sprintf>
	TraceNL(buffer);
     5f0:	1d3b      	adds	r3, r7, #4
     5f2:	4618      	mov	r0, r3
     5f4:	f002 f84a 	bl	268c <TraceNL>
	per_lowpow_cancel = (int)EEPROM_LoadInt64(cal_lowpow_cancel);
     5f8:	4b51      	ldr	r3, [pc, #324]	; (740 <LoadTimings+0x2a4>)
     5fa:	681b      	ldr	r3, [r3, #0]
     5fc:	2200      	movs	r2, #0
     5fe:	461a      	mov	r2, r3
     600:	4610      	mov	r0, r2
     602:	f000 f941 	bl	888 <EEPROM_LoadInt64>
     606:	4602      	mov	r2, r0
     608:	460b      	mov	r3, r1
     60a:	4b4e      	ldr	r3, [pc, #312]	; (744 <LoadTimings+0x2a8>)
     60c:	601a      	str	r2, [r3, #0]
	if (per_lowpow_cancel > 2)
     60e:	4b4d      	ldr	r3, [pc, #308]	; (744 <LoadTimings+0x2a8>)
     610:	681b      	ldr	r3, [r3, #0]
     612:	2b02      	cmp	r3, #2
     614:	dd02      	ble.n	61c <LoadTimings+0x180>
		per_lowpow_cancel = 0;
     616:	4b4b      	ldr	r3, [pc, #300]	; (744 <LoadTimings+0x2a8>)
     618:	2200      	movs	r2, #0
     61a:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_cancel: %d\n", (int)per_lowpow_cancel);
     61c:	4b49      	ldr	r3, [pc, #292]	; (744 <LoadTimings+0x2a8>)
     61e:	681b      	ldr	r3, [r3, #0]
     620:	1d3a      	adds	r2, r7, #4
     622:	4610      	mov	r0, r2
     624:	4948      	ldr	r1, [pc, #288]	; (748 <LoadTimings+0x2ac>)
     626:	461a      	mov	r2, r3
     628:	f003 fb86 	bl	3d38 <sprintf>
	TraceNL(buffer);
     62c:	1d3b      	adds	r3, r7, #4
     62e:	4618      	mov	r0, r3
     630:	f002 f82c 	bl	268c <TraceNL>
	//LOAD Low Power Wake Up Period
	per_lowpow_period = (int)EEPROM_LoadInt64(cal_lowpow_period);
     634:	4b45      	ldr	r3, [pc, #276]	; (74c <LoadTimings+0x2b0>)
     636:	681b      	ldr	r3, [r3, #0]
     638:	2200      	movs	r2, #0
     63a:	461a      	mov	r2, r3
     63c:	4610      	mov	r0, r2
     63e:	f000 f923 	bl	888 <EEPROM_LoadInt64>
     642:	4602      	mov	r2, r0
     644:	460b      	mov	r3, r1
     646:	4b42      	ldr	r3, [pc, #264]	; (750 <LoadTimings+0x2b4>)
     648:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_lowpow_period(original): %d\n", (int)per_lowpow_period);
     64a:	4b41      	ldr	r3, [pc, #260]	; (750 <LoadTimings+0x2b4>)
     64c:	681b      	ldr	r3, [r3, #0]
     64e:	1d3a      	adds	r2, r7, #4
     650:	4610      	mov	r0, r2
     652:	4940      	ldr	r1, [pc, #256]	; (754 <LoadTimings+0x2b8>)
     654:	461a      	mov	r2, r3
     656:	f003 fb6f 	bl	3d38 <sprintf>
	TraceNL(buffer);
     65a:	1d3b      	adds	r3, r7, #4
     65c:	4618      	mov	r0, r3
     65e:	f002 f815 	bl	268c <TraceNL>
	if (per_lowpow_period < 1 || per_lowpow_period > 2880){ //No period more than 2 days.
     662:	4b3b      	ldr	r3, [pc, #236]	; (750 <LoadTimings+0x2b4>)
     664:	681b      	ldr	r3, [r3, #0]
     666:	2b00      	cmp	r3, #0
     668:	dd04      	ble.n	674 <LoadTimings+0x1d8>
     66a:	4b39      	ldr	r3, [pc, #228]	; (750 <LoadTimings+0x2b4>)
     66c:	681b      	ldr	r3, [r3, #0]
     66e:	f5b3 6f34 	cmp.w	r3, #2880	; 0xb40
     672:	dd02      	ble.n	67a <LoadTimings+0x1de>
		per_lowpow_period = 59;
     674:	4b36      	ldr	r3, [pc, #216]	; (750 <LoadTimings+0x2b4>)
     676:	223b      	movs	r2, #59	; 0x3b
     678:	601a      	str	r2, [r3, #0]
		#endif
		#ifdef CABINET_DEMO
			per_lowpow_period = 15; //59;//1Hour
		#endif
	}
	sprintf(buffer, "per_lowpow_period: %d\n", (int)per_lowpow_period);
     67a:	4b35      	ldr	r3, [pc, #212]	; (750 <LoadTimings+0x2b4>)
     67c:	681b      	ldr	r3, [r3, #0]
     67e:	1d3a      	adds	r2, r7, #4
     680:	4610      	mov	r0, r2
     682:	4935      	ldr	r1, [pc, #212]	; (758 <LoadTimings+0x2bc>)
     684:	461a      	mov	r2, r3
     686:	f003 fb57 	bl	3d38 <sprintf>
	TraceNL(buffer);
     68a:	1d3b      	adds	r3, r7, #4
     68c:	4618      	mov	r0, r3
     68e:	f001 fffd 	bl	268c <TraceNL>
	per_lowpow_mode = (int)EEPROM_LoadInt64(cal_lowpow_mode);
     692:	4b32      	ldr	r3, [pc, #200]	; (75c <LoadTimings+0x2c0>)
     694:	681b      	ldr	r3, [r3, #0]
     696:	2200      	movs	r2, #0
     698:	461a      	mov	r2, r3
     69a:	4610      	mov	r0, r2
     69c:	f000 f8f4 	bl	888 <EEPROM_LoadInt64>
     6a0:	4602      	mov	r2, r0
     6a2:	460b      	mov	r3, r1
     6a4:	4b2e      	ldr	r3, [pc, #184]	; (760 <LoadTimings+0x2c4>)
     6a6:	601a      	str	r2, [r3, #0]
	if (per_lowpow_mode > 2){
     6a8:	4b2d      	ldr	r3, [pc, #180]	; (760 <LoadTimings+0x2c4>)
     6aa:	681b      	ldr	r3, [r3, #0]
     6ac:	2b02      	cmp	r3, #2
     6ae:	dd02      	ble.n	6b6 <LoadTimings+0x21a>
		per_lowpow_mode = 0;
     6b0:	4b2b      	ldr	r3, [pc, #172]	; (760 <LoadTimings+0x2c4>)
     6b2:	2200      	movs	r2, #0
     6b4:	601a      	str	r2, [r3, #0]
		#ifdef CABINET_DEMO
			per_lowpow_mode = 1; //Light sleep
		#endif
	}
	sprintf(buffer, "per_lowpow_mode: %d\n", (int)per_lowpow_mode);
     6b6:	4b2a      	ldr	r3, [pc, #168]	; (760 <LoadTimings+0x2c4>)
     6b8:	681b      	ldr	r3, [r3, #0]
     6ba:	1d3a      	adds	r2, r7, #4
     6bc:	4610      	mov	r0, r2
     6be:	4929      	ldr	r1, [pc, #164]	; (764 <LoadTimings+0x2c8>)
     6c0:	461a      	mov	r2, r3
     6c2:	f003 fb39 	bl	3d38 <sprintf>
	TraceNL(buffer);
     6c6:	1d3b      	adds	r3, r7, #4
     6c8:	4618      	mov	r0, r3
     6ca:	f001 ffdf 	bl	268c <TraceNL>
	per_coffe_counter = (int)EEPROM_LoadInt64(cal_coffee_counter);
     6ce:	4b26      	ldr	r3, [pc, #152]	; (768 <LoadTimings+0x2cc>)
     6d0:	681b      	ldr	r3, [r3, #0]
     6d2:	2200      	movs	r2, #0
     6d4:	461a      	mov	r2, r3
     6d6:	4610      	mov	r0, r2
     6d8:	f000 f8d6 	bl	888 <EEPROM_LoadInt64>
     6dc:	4602      	mov	r2, r0
     6de:	460b      	mov	r3, r1
     6e0:	4b22      	ldr	r3, [pc, #136]	; (76c <LoadTimings+0x2d0>)
     6e2:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "per_coffee_counter: %d\n", (int)per_coffe_counter);
     6e4:	4b21      	ldr	r3, [pc, #132]	; (76c <LoadTimings+0x2d0>)
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	1d3a      	adds	r2, r7, #4
     6ea:	4610      	mov	r0, r2
     6ec:	4920      	ldr	r1, [pc, #128]	; (770 <LoadTimings+0x2d4>)
     6ee:	461a      	mov	r2, r3
     6f0:	f003 fb22 	bl	3d38 <sprintf>
	TraceNL(buffer);
     6f4:	1d3b      	adds	r3, r7, #4
     6f6:	4618      	mov	r0, r3
     6f8:	f001 ffc8 	bl	268c <TraceNL>
}
     6fc:	37d0      	adds	r7, #208	; 0xd0
     6fe:	46bd      	mov	sp, r7
     700:	bd80      	pop	{r7, pc}
     702:	bf00      	nop
     704:	10000cd8 	.word	0x10000cd8
     708:	10000ce0 	.word	0x10000ce0
     70c:	00006634 	.word	0x00006634
     710:	10000d48 	.word	0x10000d48
     714:	10000ca8 	.word	0x10000ca8
     718:	00006650 	.word	0x00006650
     71c:	10000cf8 	.word	0x10000cf8
     720:	10000cdc 	.word	0x10000cdc
     724:	00006690 	.word	0x00006690
     728:	10000d28 	.word	0x10000d28
     72c:	10000d4c 	.word	0x10000d4c
     730:	000066b0 	.word	0x000066b0
     734:	10000d34 	.word	0x10000d34
     738:	10000cf4 	.word	0x10000cf4
     73c:	000066d4 	.word	0x000066d4
     740:	10000cfc 	.word	0x10000cfc
     744:	10000d38 	.word	0x10000d38
     748:	000066f0 	.word	0x000066f0
     74c:	10000d64 	.word	0x10000d64
     750:	10000ca0 	.word	0x10000ca0
     754:	00006708 	.word	0x00006708
     758:	0000672c 	.word	0x0000672c
     75c:	10000ce4 	.word	0x10000ce4
     760:	10000ce8 	.word	0x10000ce8
     764:	00006744 	.word	0x00006744
     768:	10000cec 	.word	0x10000cec
     76c:	10000d3c 	.word	0x10000d3c
     770:	0000675c 	.word	0x0000675c

00000774 <EEPROM_Init>:

void PersistParams() {
	EEPROM_SaveInt64(cal_mileage,per_mileage_val);
}

uint8_t EEPROM_Init() {
     774:	b580      	push	{r7, lr}
     776:	af00      	add	r7, sp, #0
	//Initialize EEPROM Memory Map -- 256x8
	test.StartPos = 0;
     778:	4b33      	ldr	r3, [pc, #204]	; (848 <EEPROM_Init+0xd4>)
     77a:	2200      	movs	r2, #0
     77c:	805a      	strh	r2, [r3, #2]
	test.Length = 2;
     77e:	4b32      	ldr	r3, [pc, #200]	; (848 <EEPROM_Init+0xd4>)
     780:	2202      	movs	r2, #2
     782:	801a      	strh	r2, [r3, #0]
	//Calibration test, ip, port, apn, apn_user, apn_pass, ign_on_period, ign_off_period, ign_on_roaming_period, ign_off_roaming_period, mileage;
	cal_port.StartPos = 6;
     784:	4b31      	ldr	r3, [pc, #196]	; (84c <EEPROM_Init+0xd8>)
     786:	2206      	movs	r2, #6
     788:	805a      	strh	r2, [r3, #2]
	cal_port.Length = 2;
     78a:	4b30      	ldr	r3, [pc, #192]	; (84c <EEPROM_Init+0xd8>)
     78c:	2202      	movs	r2, #2
     78e:	801a      	strh	r2, [r3, #0]
	cal_apn.StartPos = 8;
     790:	4b2f      	ldr	r3, [pc, #188]	; (850 <EEPROM_Init+0xdc>)
     792:	2208      	movs	r2, #8
     794:	805a      	strh	r2, [r3, #2]
	cal_apn.Length = 25;
     796:	4b2e      	ldr	r3, [pc, #184]	; (850 <EEPROM_Init+0xdc>)
     798:	2219      	movs	r2, #25
     79a:	801a      	strh	r2, [r3, #0]
	cal_apn_user.StartPos = 33;
     79c:	4b2d      	ldr	r3, [pc, #180]	; (854 <EEPROM_Init+0xe0>)
     79e:	2221      	movs	r2, #33	; 0x21
     7a0:	805a      	strh	r2, [r3, #2]
	cal_apn_user.Length = 12;
     7a2:	4b2c      	ldr	r3, [pc, #176]	; (854 <EEPROM_Init+0xe0>)
     7a4:	220c      	movs	r2, #12
     7a6:	801a      	strh	r2, [r3, #0]
	cal_apn_pass.StartPos = 45;
     7a8:	4b2b      	ldr	r3, [pc, #172]	; (858 <EEPROM_Init+0xe4>)
     7aa:	222d      	movs	r2, #45	; 0x2d
     7ac:	805a      	strh	r2, [r3, #2]
	cal_apn_pass.Length = 12;
     7ae:	4b2a      	ldr	r3, [pc, #168]	; (858 <EEPROM_Init+0xe4>)
     7b0:	220c      	movs	r2, #12
     7b2:	801a      	strh	r2, [r3, #0]
	cal_ign_on_period.StartPos = 57;
     7b4:	4b29      	ldr	r3, [pc, #164]	; (85c <EEPROM_Init+0xe8>)
     7b6:	2239      	movs	r2, #57	; 0x39
     7b8:	805a      	strh	r2, [r3, #2]
	cal_ign_on_period.Length = 2;
     7ba:	4b28      	ldr	r3, [pc, #160]	; (85c <EEPROM_Init+0xe8>)
     7bc:	2202      	movs	r2, #2
     7be:	801a      	strh	r2, [r3, #0]
	cal_lowpow_period.StartPos = 59;
     7c0:	4b27      	ldr	r3, [pc, #156]	; (860 <EEPROM_Init+0xec>)
     7c2:	223b      	movs	r2, #59	; 0x3b
     7c4:	805a      	strh	r2, [r3, #2]
	cal_lowpow_period.Length = 2;
     7c6:	4b26      	ldr	r3, [pc, #152]	; (860 <EEPROM_Init+0xec>)
     7c8:	2202      	movs	r2, #2
     7ca:	801a      	strh	r2, [r3, #0]
	cal_ign_on_roaming_period.StartPos = 61;
     7cc:	4b25      	ldr	r3, [pc, #148]	; (864 <EEPROM_Init+0xf0>)
     7ce:	223d      	movs	r2, #61	; 0x3d
     7d0:	805a      	strh	r2, [r3, #2]
	cal_ign_on_roaming_period.Length = 2;
     7d2:	4b24      	ldr	r3, [pc, #144]	; (864 <EEPROM_Init+0xf0>)
     7d4:	2202      	movs	r2, #2
     7d6:	801a      	strh	r2, [r3, #0]
	cal_ign_off_roaming_period.StartPos = 63;
     7d8:	4b23      	ldr	r3, [pc, #140]	; (868 <EEPROM_Init+0xf4>)
     7da:	223f      	movs	r2, #63	; 0x3f
     7dc:	805a      	strh	r2, [r3, #2]
	cal_ign_off_roaming_period.Length = 2;
     7de:	4b22      	ldr	r3, [pc, #136]	; (868 <EEPROM_Init+0xf4>)
     7e0:	2202      	movs	r2, #2
     7e2:	801a      	strh	r2, [r3, #0]
	cal_mileage.StartPos = 65;
     7e4:	4b21      	ldr	r3, [pc, #132]	; (86c <EEPROM_Init+0xf8>)
     7e6:	2241      	movs	r2, #65	; 0x41
     7e8:	805a      	strh	r2, [r3, #2]
	cal_mileage.Length = 8;
     7ea:	4b20      	ldr	r3, [pc, #128]	; (86c <EEPROM_Init+0xf8>)
     7ec:	2208      	movs	r2, #8
     7ee:	801a      	strh	r2, [r3, #0]
	cal_ip.StartPos = 73;
     7f0:	4b1f      	ldr	r3, [pc, #124]	; (870 <EEPROM_Init+0xfc>)
     7f2:	2249      	movs	r2, #73	; 0x49
     7f4:	805a      	strh	r2, [r3, #2]
	cal_ip.Length = 25;
     7f6:	4b1e      	ldr	r3, [pc, #120]	; (870 <EEPROM_Init+0xfc>)
     7f8:	2219      	movs	r2, #25
     7fa:	801a      	strh	r2, [r3, #0]
	cal_ign_off_period.StartPos = 98;
     7fc:	4b1d      	ldr	r3, [pc, #116]	; (874 <EEPROM_Init+0x100>)
     7fe:	2262      	movs	r2, #98	; 0x62
     800:	805a      	strh	r2, [r3, #2]
	cal_ign_off_period.Length = 2;
     802:	4b1c      	ldr	r3, [pc, #112]	; (874 <EEPROM_Init+0x100>)
     804:	2202      	movs	r2, #2
     806:	801a      	strh	r2, [r3, #0]
	cal_lowpow_just_wake.StartPos = 100;
     808:	4b1b      	ldr	r3, [pc, #108]	; (878 <EEPROM_Init+0x104>)
     80a:	2264      	movs	r2, #100	; 0x64
     80c:	805a      	strh	r2, [r3, #2]
	cal_lowpow_just_wake.Length = 2;
     80e:	4b1a      	ldr	r3, [pc, #104]	; (878 <EEPROM_Init+0x104>)
     810:	2202      	movs	r2, #2
     812:	801a      	strh	r2, [r3, #0]
	cal_lowpow_cancel.StartPos = 102;
     814:	4b19      	ldr	r3, [pc, #100]	; (87c <EEPROM_Init+0x108>)
     816:	2266      	movs	r2, #102	; 0x66
     818:	805a      	strh	r2, [r3, #2]
	cal_lowpow_cancel.Length = 2;
     81a:	4b18      	ldr	r3, [pc, #96]	; (87c <EEPROM_Init+0x108>)
     81c:	2202      	movs	r2, #2
     81e:	801a      	strh	r2, [r3, #0]
	cal_lowpow_mode.StartPos = 104;
     820:	4b17      	ldr	r3, [pc, #92]	; (880 <EEPROM_Init+0x10c>)
     822:	2268      	movs	r2, #104	; 0x68
     824:	805a      	strh	r2, [r3, #2]
	cal_lowpow_mode.Length = 2;
     826:	4b16      	ldr	r3, [pc, #88]	; (880 <EEPROM_Init+0x10c>)
     828:	2202      	movs	r2, #2
     82a:	801a      	strh	r2, [r3, #0]
	cal_coffee_counter.StartPos = 106;
     82c:	4b15      	ldr	r3, [pc, #84]	; (884 <EEPROM_Init+0x110>)
     82e:	226a      	movs	r2, #106	; 0x6a
     830:	805a      	strh	r2, [r3, #2]
	cal_coffee_counter.Length = 2;
     832:	4b14      	ldr	r3, [pc, #80]	; (884 <EEPROM_Init+0x110>)
     834:	2202      	movs	r2, #2
     836:	801a      	strh	r2, [r3, #0]
 	return I2CInit(1,((uint32_t)I2CMASTER) == 0);
     838:	2001      	movs	r0, #1
     83a:	2100      	movs	r1, #0
     83c:	f001 f8c2 	bl	19c4 <I2CInit>
     840:	4603      	mov	r3, r0
     842:	b2db      	uxtb	r3, r3
}
     844:	4618      	mov	r0, r3
     846:	bd80      	pop	{r7, pc}
     848:	10000d18 	.word	0x10000d18
     84c:	10000d2c 	.word	0x10000d2c
     850:	10000d68 	.word	0x10000d68
     854:	10000d1c 	.word	0x10000d1c
     858:	10000ca4 	.word	0x10000ca4
     85c:	10000cd8 	.word	0x10000cd8
     860:	10000d64 	.word	0x10000d64
     864:	10000cf8 	.word	0x10000cf8
     868:	10000d28 	.word	0x10000d28
     86c:	10000cf0 	.word	0x10000cf0
     870:	10000d30 	.word	0x10000d30
     874:	10000d48 	.word	0x10000d48
     878:	10000d34 	.word	0x10000d34
     87c:	10000cfc 	.word	0x10000cfc
     880:	10000ce4 	.word	0x10000ce4
     884:	10000cec 	.word	0x10000cec

00000888 <EEPROM_LoadInt64>:

uint64_t EEPROM_LoadInt64(Calibration cal) {
     888:	b580      	push	{r7, lr}
     88a:	b086      	sub	sp, #24
     88c:	af00      	add	r7, sp, #0
     88e:	6078      	str	r0, [r7, #4]
	int index = 0;
     890:	2300      	movs	r3, #0
     892:	617b      	str	r3, [r7, #20]
	uint64_t result = 0;
     894:	f04f 0200 	mov.w	r2, #0
     898:	f04f 0300 	mov.w	r3, #0
     89c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for (index=0; index < cal.Length; index++) {
     8a0:	2300      	movs	r3, #0
     8a2:	617b      	str	r3, [r7, #20]
     8a4:	e055      	b.n	952 <EEPROM_LoadInt64+0xca>
		if (cal.Length > 2)
     8a6:	88bb      	ldrh	r3, [r7, #4]
     8a8:	2b02      	cmp	r3, #2
     8aa:	d926      	bls.n	8fa <EEPROM_LoadInt64+0x72>
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFFFFFF);
     8ac:	88fb      	ldrh	r3, [r7, #6]
     8ae:	b2da      	uxtb	r2, r3
     8b0:	697b      	ldr	r3, [r7, #20]
     8b2:	b2db      	uxtb	r3, r3
     8b4:	4413      	add	r3, r2
     8b6:	b2db      	uxtb	r3, r3
     8b8:	2001      	movs	r0, #1
     8ba:	4619      	mov	r1, r3
     8bc:	f001 f968 	bl	1b90 <i2c_read>
     8c0:	4603      	mov	r3, r0
     8c2:	461a      	mov	r2, r3
     8c4:	88bb      	ldrh	r3, [r7, #4]
     8c6:	4619      	mov	r1, r3
     8c8:	697b      	ldr	r3, [r7, #20]
     8ca:	1acb      	subs	r3, r1, r3
     8cc:	3b01      	subs	r3, #1
     8ce:	00db      	lsls	r3, r3, #3
     8d0:	fa02 f303 	lsl.w	r3, r2, r3
     8d4:	461a      	mov	r2, r3
     8d6:	f04f 0300 	mov.w	r3, #0
     8da:	f04f 30ff 	mov.w	r0, #4294967295
     8de:	f04f 0100 	mov.w	r1, #0
     8e2:	ea02 0200 	and.w	r2, r2, r0
     8e6:	ea03 0301 	and.w	r3, r3, r1
     8ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     8ee:	1812      	adds	r2, r2, r0
     8f0:	eb43 0301 	adc.w	r3, r3, r1
     8f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
     8f8:	e025      	b.n	946 <EEPROM_LoadInt64+0xbe>
		else
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFF);
     8fa:	88fb      	ldrh	r3, [r7, #6]
     8fc:	b2da      	uxtb	r2, r3
     8fe:	697b      	ldr	r3, [r7, #20]
     900:	b2db      	uxtb	r3, r3
     902:	4413      	add	r3, r2
     904:	b2db      	uxtb	r3, r3
     906:	2001      	movs	r0, #1
     908:	4619      	mov	r1, r3
     90a:	f001 f941 	bl	1b90 <i2c_read>
     90e:	4603      	mov	r3, r0
     910:	461a      	mov	r2, r3
     912:	88bb      	ldrh	r3, [r7, #4]
     914:	4619      	mov	r1, r3
     916:	697b      	ldr	r3, [r7, #20]
     918:	1acb      	subs	r3, r1, r3
     91a:	3b01      	subs	r3, #1
     91c:	00db      	lsls	r3, r3, #3
     91e:	fa02 f303 	lsl.w	r3, r2, r3
     922:	461a      	mov	r2, r3
     924:	f04f 0300 	mov.w	r3, #0
     928:	f64f 70ff 	movw	r0, #65535	; 0xffff
     92c:	f04f 0100 	mov.w	r1, #0
     930:	ea02 0200 	and.w	r2, r2, r0
     934:	ea03 0301 	and.w	r3, r3, r1
     938:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
     93c:	1812      	adds	r2, r2, r0
     93e:	eb43 0301 	adc.w	r3, r3, r1
     942:	e9c7 2302 	strd	r2, r3, [r7, #8]
		DelayMs(10);
     946:	200a      	movs	r0, #10
     948:	f001 fe7a 	bl	2640 <DelayMs>
}

uint64_t EEPROM_LoadInt64(Calibration cal) {
	int index = 0;
	uint64_t result = 0;
	for (index=0; index < cal.Length; index++) {
     94c:	697b      	ldr	r3, [r7, #20]
     94e:	3301      	adds	r3, #1
     950:	617b      	str	r3, [r7, #20]
     952:	88bb      	ldrh	r3, [r7, #4]
     954:	461a      	mov	r2, r3
     956:	697b      	ldr	r3, [r7, #20]
     958:	429a      	cmp	r2, r3
     95a:	dca4      	bgt.n	8a6 <EEPROM_LoadInt64+0x1e>
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFFFFFF);
		else
			result =  result + ((i2c_read(1,cal.StartPos + index) <<  ((cal.Length - index - 1) * 8)) & 0xFFFF);
		DelayMs(10);
	}
	return result;
     95c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
     960:	4610      	mov	r0, r2
     962:	4619      	mov	r1, r3
     964:	3718      	adds	r7, #24
     966:	46bd      	mov	sp, r7
     968:	bd80      	pop	{r7, pc}
     96a:	bf00      	nop

0000096c <EEPROM_LoadString>:
	i2c_write(1,cal.StartPos + index, '\0');
	DelayMs(10);
	return 1;
}

void EEPROM_LoadString(Calibration cal,  char* str){
     96c:	b590      	push	{r4, r7, lr}
     96e:	b085      	sub	sp, #20
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
     974:	6039      	str	r1, [r7, #0]
	int index = 0;
     976:	2300      	movs	r3, #0
     978:	60fb      	str	r3, [r7, #12]
	for (index=0; index < cal.Length; index++) {
     97a:	2300      	movs	r3, #0
     97c:	60fb      	str	r3, [r7, #12]
     97e:	e01b      	b.n	9b8 <EEPROM_LoadString+0x4c>
		str[index] = i2c_read(1,cal.StartPos + index);
     980:	68fb      	ldr	r3, [r7, #12]
     982:	683a      	ldr	r2, [r7, #0]
     984:	18d4      	adds	r4, r2, r3
     986:	88fb      	ldrh	r3, [r7, #6]
     988:	b2da      	uxtb	r2, r3
     98a:	68fb      	ldr	r3, [r7, #12]
     98c:	b2db      	uxtb	r3, r3
     98e:	4413      	add	r3, r2
     990:	b2db      	uxtb	r3, r3
     992:	2001      	movs	r0, #1
     994:	4619      	mov	r1, r3
     996:	f001 f8fb 	bl	1b90 <i2c_read>
     99a:	4603      	mov	r3, r0
     99c:	7023      	strb	r3, [r4, #0]
		DelayMs(10);
     99e:	200a      	movs	r0, #10
     9a0:	f001 fe4e 	bl	2640 <DelayMs>
		if (str[index] == '\0')
     9a4:	68fb      	ldr	r3, [r7, #12]
     9a6:	683a      	ldr	r2, [r7, #0]
     9a8:	4413      	add	r3, r2
     9aa:	781b      	ldrb	r3, [r3, #0]
     9ac:	2b00      	cmp	r3, #0
     9ae:	d100      	bne.n	9b2 <EEPROM_LoadString+0x46>
			break;
     9b0:	e007      	b.n	9c2 <EEPROM_LoadString+0x56>
	return 1;
}

void EEPROM_LoadString(Calibration cal,  char* str){
	int index = 0;
	for (index=0; index < cal.Length; index++) {
     9b2:	68fb      	ldr	r3, [r7, #12]
     9b4:	3301      	adds	r3, #1
     9b6:	60fb      	str	r3, [r7, #12]
     9b8:	88bb      	ldrh	r3, [r7, #4]
     9ba:	461a      	mov	r2, r3
     9bc:	68fb      	ldr	r3, [r7, #12]
     9be:	429a      	cmp	r2, r3
     9c0:	dcde      	bgt.n	980 <EEPROM_LoadString+0x14>
		str[index] = i2c_read(1,cal.StartPos + index);
		DelayMs(10);
		if (str[index] == '\0')
			break;
	}
}
     9c2:	3714      	adds	r7, #20
     9c4:	46bd      	mov	sp, r7
     9c6:	bd90      	pop	{r4, r7, pc}

000009c8 <GSM_SendAt>:
unsigned long int last_hard_reset = -1;
int connectionFailCount = 0;
#define LBS 1

uint16_t GSM_SendAt( char* cmd, char *response, int delay )
{
     9c8:	b580      	push	{r7, lr}
     9ca:	b0a0      	sub	sp, #128	; 0x80
     9cc:	af00      	add	r7, sp, #0
     9ce:	60f8      	str	r0, [r7, #12]
     9d0:	60b9      	str	r1, [r7, #8]
     9d2:	607a      	str	r2, [r7, #4]
//	}*/

	char buffer[100];
	uint16_t	len;

	sprintf( buffer, "---> %s\r\n", cmd );
     9d4:	f107 0314 	add.w	r3, r7, #20
     9d8:	4618      	mov	r0, r3
     9da:	4918      	ldr	r1, [pc, #96]	; (a3c <GSM_SendAt+0x74>)
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	f003 f9ab 	bl	3d38 <sprintf>
	Trace( buffer );
     9e2:	f107 0314 	add.w	r3, r7, #20
     9e6:	4618      	mov	r0, r3
     9e8:	f001 fe40 	bl	266c <Trace>

	int count = sprintf( buffer, "%s\r\n", cmd );
     9ec:	f107 0314 	add.w	r3, r7, #20
     9f0:	4618      	mov	r0, r3
     9f2:	4913      	ldr	r1, [pc, #76]	; (a40 <GSM_SendAt+0x78>)
     9f4:	68fa      	ldr	r2, [r7, #12]
     9f6:	f003 f99f 	bl	3d38 <sprintf>
     9fa:	67f8      	str	r0, [r7, #124]	; 0x7c
	UARTSend( PORT_GSM, buffer, count );
     9fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     9fe:	f107 0214 	add.w	r2, r7, #20
     a02:	2001      	movs	r0, #1
     a04:	4611      	mov	r1, r2
     a06:	461a      	mov	r2, r3
     a08:	f002 fb20 	bl	304c <UARTSend>

	DelayMs( delay );
     a0c:	687b      	ldr	r3, [r7, #4]
     a0e:	4618      	mov	r0, r3
     a10:	f001 fe16 	bl	2640 <DelayMs>

	len = ReadUart( response, PORT_GSM );
     a14:	68b8      	ldr	r0, [r7, #8]
     a16:	2101      	movs	r1, #1
     a18:	f002 fbb4 	bl	3184 <ReadUart>
     a1c:	4603      	mov	r3, r0
     a1e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	response[len] = '\0';
     a22:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
     a26:	68ba      	ldr	r2, [r7, #8]
     a28:	4413      	add	r3, r2
     a2a:	2200      	movs	r2, #0
     a2c:	701a      	strb	r2, [r3, #0]

	// TraceDumpHex( response, len );

    return ( len );
     a2e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
}
     a32:	4618      	mov	r0, r3
     a34:	3780      	adds	r7, #128	; 0x80
     a36:	46bd      	mov	sp, r7
     a38:	bd80      	pop	{r7, pc}
     a3a:	bf00      	nop
     a3c:	00006774 	.word	0x00006774
     a40:	00006780 	.word	0x00006780

00000a44 <GSM_TCP_Recv>:



int16_t GSM_TCP_Recv( char* pDataBuf, int16_t maxBytes )
{
     a44:	b580      	push	{r7, lr}
     a46:	b082      	sub	sp, #8
     a48:	af00      	add	r7, sp, #0
     a4a:	6078      	str	r0, [r7, #4]
     a4c:	460b      	mov	r3, r1
     a4e:	807b      	strh	r3, [r7, #2]
	return ( GSM_SendAt( "AT+QIRD=1,1,0,1100", pDataBuf, 1000 ) );
     a50:	4806      	ldr	r0, [pc, #24]	; (a6c <GSM_TCP_Recv+0x28>)
     a52:	6879      	ldr	r1, [r7, #4]
     a54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     a58:	f7ff ffb6 	bl	9c8 <GSM_SendAt>
     a5c:	4603      	mov	r3, r0
     a5e:	b29b      	uxth	r3, r3
     a60:	b21b      	sxth	r3, r3
}
     a62:	4618      	mov	r0, r3
     a64:	3708      	adds	r7, #8
     a66:	46bd      	mov	sp, r7
     a68:	bd80      	pop	{r7, pc}
     a6a:	bf00      	nop
     a6c:	00006788 	.word	0x00006788

00000a70 <GSM_ConnectToTrioUpgradeServer>:
	OK*/
}


int GSM_ConnectToTrioUpgradeServer( void )
{
     a70:	b580      	push	{r7, lr}
     a72:	b0e0      	sub	sp, #384	; 0x180
     a74:	af02      	add	r7, sp, #8
	char buffer[200];
	char response[150];

	TraceNL("Entered GSM_ConnectToTrioUpgradeServer");
     a76:	48ae      	ldr	r0, [pc, #696]	; (d30 <GSM_ConnectToTrioUpgradeServer+0x2c0>)
     a78:	f001 fe08 	bl	268c <TraceNL>

	int init_result = GSM_InitModule();
     a7c:	f000 fa66 	bl	f4c <GSM_InitModule>
     a80:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
	if (init_result == FAIL){
     a84:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
     a88:	f1b3 3fff 	cmp.w	r3, #4294967295
     a8c:	d109      	bne.n	aa2 <GSM_ConnectToTrioUpgradeServer+0x32>
		GSM_ShutdownModule();
     a8e:	f000 fa2b 	bl	ee8 <GSM_ShutdownModule>
		DelayMs(2000);
     a92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     a96:	f001 fdd3 	bl	2640 <DelayMs>
		init_result = GSM_InitModule();
     a9a:	f000 fa57 	bl	f4c <GSM_InitModule>
     a9e:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
	}

	WDTFeed();
     aa2:	f002 fc77 	bl	3394 <WDTFeed>

	if(init_result == FAIL)
     aa6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
     aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
     aae:	d102      	bne.n	ab6 <GSM_ConnectToTrioUpgradeServer+0x46>
		return ( init_result );
     ab0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
     ab4:	e137      	b.n	d26 <GSM_ConnectToTrioUpgradeServer+0x2b6>

	//GSM_EchoOFF();
	GSM_GetImei();
     ab6:	f000 fb11 	bl	10dc <GSM_GetImei>
	GSM_GetImsi(); //
     aba:	f000 fb2f 	bl	111c <GSM_GetImsi>
	int conn_stat = GSM_GetRegStat();
     abe:	f000 fab9 	bl	1034 <GSM_GetRegStat>
     ac2:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168

	GSM_SendAt("ATI", response, 500);
     ac6:	463b      	mov	r3, r7
     ac8:	489a      	ldr	r0, [pc, #616]	; (d34 <GSM_ConnectToTrioUpgradeServer+0x2c4>)
     aca:	4619      	mov	r1, r3
     acc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     ad0:	f7ff ff7a 	bl	9c8 <GSM_SendAt>
	WDTFeed();
     ad4:	f002 fc5e 	bl	3394 <WDTFeed>
	GSM_SendAt("AT+QIFGCNT=1", response, 500);
     ad8:	463b      	mov	r3, r7
     ada:	4897      	ldr	r0, [pc, #604]	; (d38 <GSM_ConnectToTrioUpgradeServer+0x2c8>)
     adc:	4619      	mov	r1, r3
     ade:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     ae2:	f7ff ff71 	bl	9c8 <GSM_SendAt>

	memset(buffer, 0, sizeof(buffer));
     ae6:	f107 0398 	add.w	r3, r7, #152	; 0x98
     aea:	4618      	mov	r0, r3
     aec:	2100      	movs	r1, #0
     aee:	22c8      	movs	r2, #200	; 0xc8
     af0:	f003 f85a 	bl	3ba8 <memset>
	sprintf(buffer, "AT+QICSGP=1,\"%s\",\"%s\",\"%s\"", per_apn_val, per_apnuser_val, per_apnpass_val);
     af4:	f107 0298 	add.w	r2, r7, #152	; 0x98
     af8:	4b90      	ldr	r3, [pc, #576]	; (d3c <GSM_ConnectToTrioUpgradeServer+0x2cc>)
     afa:	9300      	str	r3, [sp, #0]
     afc:	4610      	mov	r0, r2
     afe:	4990      	ldr	r1, [pc, #576]	; (d40 <GSM_ConnectToTrioUpgradeServer+0x2d0>)
     b00:	4a90      	ldr	r2, [pc, #576]	; (d44 <GSM_ConnectToTrioUpgradeServer+0x2d4>)
     b02:	4b91      	ldr	r3, [pc, #580]	; (d48 <GSM_ConnectToTrioUpgradeServer+0x2d8>)
     b04:	f003 f918 	bl	3d38 <sprintf>

	GSM_SendAt(buffer, response, 100);
     b08:	f107 0298 	add.w	r2, r7, #152	; 0x98
     b0c:	463b      	mov	r3, r7
     b0e:	4610      	mov	r0, r2
     b10:	4619      	mov	r1, r3
     b12:	2264      	movs	r2, #100	; 0x64
     b14:	f7ff ff58 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QIMUX=0", response, 100);
     b18:	463b      	mov	r3, r7
     b1a:	488c      	ldr	r0, [pc, #560]	; (d4c <GSM_ConnectToTrioUpgradeServer+0x2dc>)
     b1c:	4619      	mov	r1, r3
     b1e:	2264      	movs	r2, #100	; 0x64
     b20:	f7ff ff52 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QVBATT=0,3500,0", response, 100); //Disable low power shut down and warning.
     b24:	463b      	mov	r3, r7
     b26:	488a      	ldr	r0, [pc, #552]	; (d50 <GSM_ConnectToTrioUpgradeServer+0x2e0>)
     b28:	4619      	mov	r1, r3
     b2a:	2264      	movs	r2, #100	; 0x64
     b2c:	f7ff ff4c 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QVBATT=1,3300,0",response,100); // Disable 3.3 volt cutoff.
     b30:	463b      	mov	r3, r7
     b32:	4888      	ldr	r0, [pc, #544]	; (d54 <GSM_ConnectToTrioUpgradeServer+0x2e4>)
     b34:	4619      	mov	r1, r3
     b36:	2264      	movs	r2, #100	; 0x64
     b38:	f7ff ff46 	bl	9c8 <GSM_SendAt>

	GSM_SendAt("AT+QISHOWRA=1", response, 100); // show remote address
     b3c:	463b      	mov	r3, r7
     b3e:	4886      	ldr	r0, [pc, #536]	; (d58 <GSM_ConnectToTrioUpgradeServer+0x2e8>)
     b40:	4619      	mov	r1, r3
     b42:	2264      	movs	r2, #100	; 0x64
     b44:	f7ff ff40 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QISHOWPT=1", response, 100); // show protocol type ,TCP, or UDP
     b48:	463b      	mov	r3, r7
     b4a:	4884      	ldr	r0, [pc, #528]	; (d5c <GSM_ConnectToTrioUpgradeServer+0x2ec>)
     b4c:	4619      	mov	r1, r3
     b4e:	2264      	movs	r2, #100	; 0x64
     b50:	f7ff ff3a 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QINDI=0", response, 100);    //  disable indicator
     b54:	463b      	mov	r3, r7
     b56:	4882      	ldr	r0, [pc, #520]	; (d60 <GSM_ConnectToTrioUpgradeServer+0x2f0>)
     b58:	4619      	mov	r1, r3
     b5a:	2264      	movs	r2, #100	; 0x64
     b5c:	f7ff ff34 	bl	9c8 <GSM_SendAt>
	GSM_SendAt("AT+QIHEAD=1", response, 100);    //
     b60:	463b      	mov	r3, r7
     b62:	4880      	ldr	r0, [pc, #512]	; (d64 <GSM_ConnectToTrioUpgradeServer+0x2f4>)
     b64:	4619      	mov	r1, r3
     b66:	2264      	movs	r2, #100	; 0x64
     b68:	f7ff ff2e 	bl	9c8 <GSM_SendAt>

	//GSM_SendAt("AT+QIMODE=1", response, 100); //Transparent Mode
	GSM_SendAt("AT+QIMODE=0", response, 100);   //Non Transparent Mode
     b6c:	463b      	mov	r3, r7
     b6e:	487e      	ldr	r0, [pc, #504]	; (d68 <GSM_ConnectToTrioUpgradeServer+0x2f8>)
     b70:	4619      	mov	r1, r3
     b72:	2264      	movs	r2, #100	; 0x64
     b74:	f7ff ff28 	bl	9c8 <GSM_SendAt>
	//GSM_SendAt("AT+QINDI=1", response, 100);  //Alert when data received.


	//GSM_SendAt("AT+QITCFG=3,1,512,1", response, 500); //Transparent mode configuration

	memset(buffer, 0, sizeof(buffer));
     b78:	f107 0398 	add.w	r3, r7, #152	; 0x98
     b7c:	4618      	mov	r0, r3
     b7e:	2100      	movs	r1, #0
     b80:	22c8      	movs	r2, #200	; 0xc8
     b82:	f003 f811 	bl	3ba8 <memset>
	if (isalpha(per_ip_val[0])){ //DNS
     b86:	4b79      	ldr	r3, [pc, #484]	; (d6c <GSM_ConnectToTrioUpgradeServer+0x2fc>)
     b88:	781b      	ldrb	r3, [r3, #0]
     b8a:	3380      	adds	r3, #128	; 0x80
     b8c:	4a78      	ldr	r2, [pc, #480]	; (d70 <GSM_ConnectToTrioUpgradeServer+0x300>)
     b8e:	5cd3      	ldrb	r3, [r2, r3]
     b90:	f003 0318 	and.w	r3, r3, #24
     b94:	2b00      	cmp	r3, #0
     b96:	d011      	beq.n	bbc <GSM_ConnectToTrioUpgradeServer+0x14c>
		GSM_SendAt("AT+QIDNSIP=1", response, 100);
     b98:	463b      	mov	r3, r7
     b9a:	4876      	ldr	r0, [pc, #472]	; (d74 <GSM_ConnectToTrioUpgradeServer+0x304>)
     b9c:	4619      	mov	r1, r3
     b9e:	2264      	movs	r2, #100	; 0x64
     ba0:	f7ff ff12 	bl	9c8 <GSM_SendAt>
		TraceDumpHex( response, strlen(response) );
     ba4:	463b      	mov	r3, r7
     ba6:	4618      	mov	r0, r3
     ba8:	f004 fd2e 	bl	5608 <strlen>
     bac:	4603      	mov	r3, r0
     bae:	461a      	mov	r2, r3
     bb0:	463b      	mov	r3, r7
     bb2:	4618      	mov	r0, r3
     bb4:	4611      	mov	r1, r2
     bb6:	f001 fd9d 	bl	26f4 <TraceDumpHex>
     bba:	e005      	b.n	bc8 <GSM_ConnectToTrioUpgradeServer+0x158>
	}else
		GSM_SendAt("AT+QIDNSIP=0", response, 100);
     bbc:	463b      	mov	r3, r7
     bbe:	486e      	ldr	r0, [pc, #440]	; (d78 <GSM_ConnectToTrioUpgradeServer+0x308>)
     bc0:	4619      	mov	r1, r3
     bc2:	2264      	movs	r2, #100	; 0x64
     bc4:	f7ff ff00 	bl	9c8 <GSM_SendAt>


	////Low Power/////
	//GSM_SendAt("AT+QGPCLASS=8", response, 100); // 1 Tx timeslots
	GSM_SendAt("AT+QGPCLASS=12", response, 100); // 1 Tx timeslots
     bc8:	463b      	mov	r3, r7
     bca:	486c      	ldr	r0, [pc, #432]	; (d7c <GSM_ConnectToTrioUpgradeServer+0x30c>)
     bcc:	4619      	mov	r1, r3
     bce:	2264      	movs	r2, #100	; 0x64
     bd0:	f7ff fefa 	bl	9c8 <GSM_SendAt>
//	TraceDumpHex( response, strlen(response) );
	//GSM_SendAt("AT+CDETXPW=900,1,255,2", response, 100);
	//////////////////
	GSM_SendAt("AT",response,100);
     bd4:	463b      	mov	r3, r7
     bd6:	486a      	ldr	r0, [pc, #424]	; (d80 <GSM_ConnectToTrioUpgradeServer+0x310>)
     bd8:	4619      	mov	r1, r3
     bda:	2264      	movs	r2, #100	; 0x64
     bdc:	f7ff fef4 	bl	9c8 <GSM_SendAt>

//	strcpy( update_service_ip, "46.4.100.168" );
//	strcpy( update_service_port, "5007" );

	int cmd_count = sprintf( buffer, "AT+QIOPEN=\"TCP\",\"%s\",%s\r\n", update_service_ip, update_service_port );
     be0:	f107 0398 	add.w	r3, r7, #152	; 0x98
     be4:	4618      	mov	r0, r3
     be6:	4967      	ldr	r1, [pc, #412]	; (d84 <GSM_ConnectToTrioUpgradeServer+0x314>)
     be8:	4a67      	ldr	r2, [pc, #412]	; (d88 <GSM_ConnectToTrioUpgradeServer+0x318>)
     bea:	4b68      	ldr	r3, [pc, #416]	; (d8c <GSM_ConnectToTrioUpgradeServer+0x31c>)
     bec:	f003 f8a4 	bl	3d38 <sprintf>
     bf0:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164
	//GSM_SendAt("AT+QIOPEN=\"TCP\",\"178.63.30.80\",6081", response, 2000);

	GSM_SendAt( buffer, response, 100);
     bf4:	f107 0298 	add.w	r2, r7, #152	; 0x98
     bf8:	463b      	mov	r3, r7
     bfa:	4610      	mov	r0, r2
     bfc:	4619      	mov	r1, r3
     bfe:	2264      	movs	r2, #100	; 0x64
     c00:	f7ff fee2 	bl	9c8 <GSM_SendAt>
	//UARTSend(PORT_GSM, buffer, cmd_count);

	//UARTSend(PORT_TRACE, buffer, cmd_count);
	int server_conn_count = 0;
     c04:	2300      	movs	r3, #0
     c06:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	int server_conn_result = FAIL;
     c0a:	f04f 33ff 	mov.w	r3, #4294967295
     c0e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

	while(1){
		int recLen = ReadUart(response, PORT_GSM);
     c12:	463b      	mov	r3, r7
     c14:	4618      	mov	r0, r3
     c16:	2101      	movs	r1, #1
     c18:	f002 fab4 	bl	3184 <ReadUart>
     c1c:	4603      	mov	r3, r0
     c1e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
		if( recLen )
     c22:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
     c26:	2b00      	cmp	r3, #0
     c28:	d022      	beq.n	c70 <GSM_ConnectToTrioUpgradeServer+0x200>
		{
//			TraceDumpHex( response, strlen(response) );
			if (strstr(response,"FAIL") != NULL/* || strstr(response,"ERROR") != NULL*/){ //ERROR is about format ignore
     c2a:	463b      	mov	r3, r7
     c2c:	4618      	mov	r0, r3
     c2e:	4958      	ldr	r1, [pc, #352]	; (d90 <GSM_ConnectToTrioUpgradeServer+0x320>)
     c30:	f004 fd3b 	bl	56aa <strstr>
     c34:	4603      	mov	r3, r0
     c36:	2b00      	cmp	r3, #0
     c38:	d000      	beq.n	c3c <GSM_ConnectToTrioUpgradeServer+0x1cc>
				//UARTSend(PORT_GSM, buffer, cmd_count); //Testing AT to server problem
				break;
     c3a:	e02a      	b.n	c92 <GSM_ConnectToTrioUpgradeServer+0x222>
			}
			else if (strstr(response,"CONNECT OK") != NULL || strstr(response,"ALREADY CONNECT") != NULL){
     c3c:	463b      	mov	r3, r7
     c3e:	4618      	mov	r0, r3
     c40:	4954      	ldr	r1, [pc, #336]	; (d94 <GSM_ConnectToTrioUpgradeServer+0x324>)
     c42:	f004 fd32 	bl	56aa <strstr>
     c46:	4603      	mov	r3, r0
     c48:	2b00      	cmp	r3, #0
     c4a:	d107      	bne.n	c5c <GSM_ConnectToTrioUpgradeServer+0x1ec>
     c4c:	463b      	mov	r3, r7
     c4e:	4618      	mov	r0, r3
     c50:	4951      	ldr	r1, [pc, #324]	; (d98 <GSM_ConnectToTrioUpgradeServer+0x328>)
     c52:	f004 fd2a 	bl	56aa <strstr>
     c56:	4603      	mov	r3, r0
     c58:	2b00      	cmp	r3, #0
     c5a:	d009      	beq.n	c70 <GSM_ConnectToTrioUpgradeServer+0x200>
				//UARTSend( PORT_TRACE, response, cmd_count );
				TraceDumpHex( response, recLen );
     c5c:	463b      	mov	r3, r7
     c5e:	4618      	mov	r0, r3
     c60:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
     c64:	f001 fd46 	bl	26f4 <TraceDumpHex>
				server_conn_result = SUCCESS;
     c68:	2300      	movs	r3, #0
     c6a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
				break;
     c6e:	e010      	b.n	c92 <GSM_ConnectToTrioUpgradeServer+0x222>
			}
		}

		WDTFeed();
     c70:	f002 fb90 	bl	3394 <WDTFeed>
		DelayMs(300);
     c74:	f44f 7096 	mov.w	r0, #300	; 0x12c
     c78:	f001 fce2 	bl	2640 <DelayMs>
		server_conn_count++;
     c7c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
     c80:	3301      	adds	r3, #1
     c82:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		if (server_conn_count > 30)
     c86:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
     c8a:	2b1e      	cmp	r3, #30
     c8c:	dd00      	ble.n	c90 <GSM_ConnectToTrioUpgradeServer+0x220>
			break;
     c8e:	e000      	b.n	c92 <GSM_ConnectToTrioUpgradeServer+0x222>
	}
     c90:	e7bf      	b.n	c12 <GSM_ConnectToTrioUpgradeServer+0x1a2>

	if (server_conn_result == SUCCESS) {
     c92:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
     c96:	2b00      	cmp	r3, #0
     c98:	d107      	bne.n	caa <GSM_ConnectToTrioUpgradeServer+0x23a>
		TraceNL("Connected to the server.");
     c9a:	4840      	ldr	r0, [pc, #256]	; (d9c <GSM_ConnectToTrioUpgradeServer+0x32c>)
     c9c:	f001 fcf6 	bl	268c <TraceNL>
		connectionFailCount = 0;
     ca0:	4b3f      	ldr	r3, [pc, #252]	; (da0 <GSM_ConnectToTrioUpgradeServer+0x330>)
     ca2:	2200      	movs	r2, #0
     ca4:	601a      	str	r2, [r3, #0]
		return SUCCESS;
     ca6:	2300      	movs	r3, #0
     ca8:	e03d      	b.n	d26 <GSM_ConnectToTrioUpgradeServer+0x2b6>
	}

	TraceNL("QIOPEN failed.");
     caa:	483e      	ldr	r0, [pc, #248]	; (da4 <GSM_ConnectToTrioUpgradeServer+0x334>)
     cac:	f001 fcee 	bl	268c <TraceNL>
	connectionFailCount++;
     cb0:	4b3b      	ldr	r3, [pc, #236]	; (da0 <GSM_ConnectToTrioUpgradeServer+0x330>)
     cb2:	681b      	ldr	r3, [r3, #0]
     cb4:	3301      	adds	r3, #1
     cb6:	4a3a      	ldr	r2, [pc, #232]	; (da0 <GSM_ConnectToTrioUpgradeServer+0x330>)
     cb8:	6013      	str	r3, [r2, #0]
	if (connectionFailCount > 40 && connectionFailCount % 200 == 0) //10 minutes.
     cba:	4b39      	ldr	r3, [pc, #228]	; (da0 <GSM_ConnectToTrioUpgradeServer+0x330>)
     cbc:	681b      	ldr	r3, [r3, #0]
     cbe:	2b28      	cmp	r3, #40	; 0x28
     cc0:	dd17      	ble.n	cf2 <GSM_ConnectToTrioUpgradeServer+0x282>
     cc2:	4b37      	ldr	r3, [pc, #220]	; (da0 <GSM_ConnectToTrioUpgradeServer+0x330>)
     cc4:	681a      	ldr	r2, [r3, #0]
     cc6:	4b38      	ldr	r3, [pc, #224]	; (da8 <GSM_ConnectToTrioUpgradeServer+0x338>)
     cc8:	fb83 1302 	smull	r1, r3, r3, r2
     ccc:	1199      	asrs	r1, r3, #6
     cce:	17d3      	asrs	r3, r2, #31
     cd0:	1acb      	subs	r3, r1, r3
     cd2:	21c8      	movs	r1, #200	; 0xc8
     cd4:	fb01 f303 	mul.w	r3, r1, r3
     cd8:	1ad3      	subs	r3, r2, r3
     cda:	2b00      	cmp	r3, #0
     cdc:	d109      	bne.n	cf2 <GSM_ConnectToTrioUpgradeServer+0x282>
	{
		TraceNL("Hard resetting module.");
     cde:	4833      	ldr	r0, [pc, #204]	; (dac <GSM_ConnectToTrioUpgradeServer+0x33c>)
     ce0:	f001 fcd4 	bl	268c <TraceNL>
		GSM_InitModule(); //Restarts and initializes module.
     ce4:	f000 f932 	bl	f4c <GSM_InitModule>
		last_hard_reset = STT_Value;
     ce8:	4b31      	ldr	r3, [pc, #196]	; (db0 <GSM_ConnectToTrioUpgradeServer+0x340>)
     cea:	681b      	ldr	r3, [r3, #0]
     cec:	4a31      	ldr	r2, [pc, #196]	; (db4 <GSM_ConnectToTrioUpgradeServer+0x344>)
     cee:	6013      	str	r3, [r2, #0]
     cf0:	e017      	b.n	d22 <GSM_ConnectToTrioUpgradeServer+0x2b2>
	}
	else if (connectionFailCount > 30 && connectionFailCount % 20 == 0){ //100 in production
     cf2:	4b2b      	ldr	r3, [pc, #172]	; (da0 <GSM_ConnectToTrioUpgradeServer+0x330>)
     cf4:	681b      	ldr	r3, [r3, #0]
     cf6:	2b1e      	cmp	r3, #30
     cf8:	dd13      	ble.n	d22 <GSM_ConnectToTrioUpgradeServer+0x2b2>
     cfa:	4b29      	ldr	r3, [pc, #164]	; (da0 <GSM_ConnectToTrioUpgradeServer+0x330>)
     cfc:	6819      	ldr	r1, [r3, #0]
     cfe:	4b2e      	ldr	r3, [pc, #184]	; (db8 <GSM_ConnectToTrioUpgradeServer+0x348>)
     d00:	fb83 2301 	smull	r2, r3, r3, r1
     d04:	10da      	asrs	r2, r3, #3
     d06:	17cb      	asrs	r3, r1, #31
     d08:	1ad2      	subs	r2, r2, r3
     d0a:	4613      	mov	r3, r2
     d0c:	009b      	lsls	r3, r3, #2
     d0e:	4413      	add	r3, r2
     d10:	009b      	lsls	r3, r3, #2
     d12:	1aca      	subs	r2, r1, r3
     d14:	2a00      	cmp	r2, #0
     d16:	d104      	bne.n	d22 <GSM_ConnectToTrioUpgradeServer+0x2b2>
		TraceNL("connectionFailCount > 40 restarting module.");
     d18:	4828      	ldr	r0, [pc, #160]	; (dbc <GSM_ConnectToTrioUpgradeServer+0x34c>)
     d1a:	f001 fcb7 	bl	268c <TraceNL>
		GSM_InitModule(); //Restarts and initializes module.
     d1e:	f000 f915 	bl	f4c <GSM_InitModule>
	}
	return FAIL;
     d22:	f04f 33ff 	mov.w	r3, #4294967295
}
     d26:	4618      	mov	r0, r3
     d28:	f507 77bc 	add.w	r7, r7, #376	; 0x178
     d2c:	46bd      	mov	sp, r7
     d2e:	bd80      	pop	{r7, pc}
     d30:	0000682c 	.word	0x0000682c
     d34:	00006854 	.word	0x00006854
     d38:	00006858 	.word	0x00006858
     d3c:	10000d50 	.word	0x10000d50
     d40:	00006868 	.word	0x00006868
     d44:	10000d6c 	.word	0x10000d6c
     d48:	10000d00 	.word	0x10000d00
     d4c:	00006884 	.word	0x00006884
     d50:	00006890 	.word	0x00006890
     d54:	000068a4 	.word	0x000068a4
     d58:	000068b8 	.word	0x000068b8
     d5c:	000068c8 	.word	0x000068c8
     d60:	000068d8 	.word	0x000068d8
     d64:	000068e4 	.word	0x000068e4
     d68:	000068f0 	.word	0x000068f0
     d6c:	10000cb0 	.word	0x10000cb0
     d70:	000074a4 	.word	0x000074a4
     d74:	000068fc 	.word	0x000068fc
     d78:	0000690c 	.word	0x0000690c
     d7c:	0000691c 	.word	0x0000691c
     d80:	000067fc 	.word	0x000067fc
     d84:	0000692c 	.word	0x0000692c
     d88:	10000000 	.word	0x10000000
     d8c:	10000014 	.word	0x10000014
     d90:	00006948 	.word	0x00006948
     d94:	00006950 	.word	0x00006950
     d98:	0000695c 	.word	0x0000695c
     d9c:	0000696c 	.word	0x0000696c
     da0:	10000028 	.word	0x10000028
     da4:	00006988 	.word	0x00006988
     da8:	51eb851f 	.word	0x51eb851f
     dac:	00006998 	.word	0x00006998
     db0:	10000d24 	.word	0x10000d24
     db4:	1000001c 	.word	0x1000001c
     db8:	66666667 	.word	0x66666667
     dbc:	000069b0 	.word	0x000069b0

00000dc0 <GSM_TCP_Send>:
** Returned value:	greater than 0 to indicate number of characters transferred
**
**                  a value less than 0 is error code, tobe defined later.
******************************************************************************/
int GSM_TCP_Send( unsigned char* msg, uint16_t len )
{
     dc0:	b580      	push	{r7, lr}
     dc2:	b0d0      	sub	sp, #320	; 0x140
     dc4:	af00      	add	r7, sp, #0
     dc6:	1d3b      	adds	r3, r7, #4
     dc8:	6018      	str	r0, [r3, #0]
     dca:	460a      	mov	r2, r1
     dcc:	1cbb      	adds	r3, r7, #2
     dce:	801a      	strh	r2, [r3, #0]
	char response[200];
	char buffer[100];

	TraceNL("Entered GSM_TCP_Send");
     dd0:	4836      	ldr	r0, [pc, #216]	; (eac <GSM_TCP_Send+0xec>)
     dd2:	f001 fc5b 	bl	268c <TraceNL>

	GSM_SendAt( "AT", response, 100 ); //Empty buffer
     dd6:	f107 0370 	add.w	r3, r7, #112	; 0x70
     dda:	4835      	ldr	r0, [pc, #212]	; (eb0 <GSM_TCP_Send+0xf0>)
     ddc:	4619      	mov	r1, r3
     dde:	2264      	movs	r2, #100	; 0x64
     de0:	f7ff fdf2 	bl	9c8 <GSM_SendAt>

	int count = sprintf( buffer, "AT+QISEND=%d", len );
     de4:	1cbb      	adds	r3, r7, #2
     de6:	881b      	ldrh	r3, [r3, #0]
     de8:	f107 020c 	add.w	r2, r7, #12
     dec:	4610      	mov	r0, r2
     dee:	4931      	ldr	r1, [pc, #196]	; (eb4 <GSM_TCP_Send+0xf4>)
     df0:	461a      	mov	r2, r3
     df2:	f002 ffa1 	bl	3d38 <sprintf>
     df6:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	GSM_SendAt( buffer, response, 100 );
     dfa:	f107 020c 	add.w	r2, r7, #12
     dfe:	f107 0370 	add.w	r3, r7, #112	; 0x70
     e02:	4610      	mov	r0, r2
     e04:	4619      	mov	r1, r3
     e06:	2264      	movs	r2, #100	; 0x64
     e08:	f7ff fdde 	bl	9c8 <GSM_SendAt>

	if( strchr(response, '>') != NULL )
     e0c:	f107 0370 	add.w	r3, r7, #112	; 0x70
     e10:	4618      	mov	r0, r3
     e12:	213e      	movs	r1, #62	; 0x3e
     e14:	f004 fbca 	bl	55ac <strchr>
     e18:	4603      	mov	r3, r0
     e1a:	2b00      	cmp	r3, #0
     e1c:	d03b      	beq.n	e96 <GSM_TCP_Send+0xd6>
	{
		UARTSend( PORT_GSM, msg, len );
     e1e:	1cbb      	adds	r3, r7, #2
     e20:	881a      	ldrh	r2, [r3, #0]
     e22:	1d3b      	adds	r3, r7, #4
     e24:	2001      	movs	r0, #1
     e26:	6819      	ldr	r1, [r3, #0]
     e28:	f002 f910 	bl	304c <UARTSend>

		DelayMs( 300 );
     e2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
     e30:	f001 fc06 	bl	2640 <DelayMs>

		ReadUart( response, PORT_GSM );
     e34:	f107 0370 	add.w	r3, r7, #112	; 0x70
     e38:	4618      	mov	r0, r3
     e3a:	2101      	movs	r1, #1
     e3c:	f002 f9a2 	bl	3184 <ReadUart>
		int sendOkCheck = 0;
     e40:	2300      	movs	r3, #0
     e42:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

		while( strstr( response, "SEND OK" ) == NULL )
     e46:	e017      	b.n	e78 <GSM_TCP_Send+0xb8>
		{
			TraceNL( "Send OK whiling.." );
     e48:	481b      	ldr	r0, [pc, #108]	; (eb8 <GSM_TCP_Send+0xf8>)
     e4a:	f001 fc1f 	bl	268c <TraceNL>
			if ( sendOkCheck > 20 )
     e4e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
     e52:	2b14      	cmp	r3, #20
     e54:	dd02      	ble.n	e5c <GSM_TCP_Send+0x9c>
				return ( FAIL );
     e56:	f04f 33ff 	mov.w	r3, #4294967295
     e5a:	e021      	b.n	ea0 <GSM_TCP_Send+0xe0>

			DelayMs( 100 );
     e5c:	2064      	movs	r0, #100	; 0x64
     e5e:	f001 fbef 	bl	2640 <DelayMs>
			ReadUart( response, PORT_GSM );
     e62:	f107 0370 	add.w	r3, r7, #112	; 0x70
     e66:	4618      	mov	r0, r3
     e68:	2101      	movs	r1, #1
     e6a:	f002 f98b 	bl	3184 <ReadUart>

			sendOkCheck++;
     e6e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
     e72:	3301      	adds	r3, #1
     e74:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		DelayMs( 300 );

		ReadUart( response, PORT_GSM );
		int sendOkCheck = 0;

		while( strstr( response, "SEND OK" ) == NULL )
     e78:	f107 0370 	add.w	r3, r7, #112	; 0x70
     e7c:	4618      	mov	r0, r3
     e7e:	490f      	ldr	r1, [pc, #60]	; (ebc <GSM_TCP_Send+0xfc>)
     e80:	f004 fc13 	bl	56aa <strstr>
     e84:	4603      	mov	r3, r0
     e86:	2b00      	cmp	r3, #0
     e88:	d0de      	beq.n	e48 <GSM_TCP_Send+0x88>
			DelayMs( 100 );
			ReadUart( response, PORT_GSM );

			sendOkCheck++;
		}
		TraceNL( "Data sent." );
     e8a:	480d      	ldr	r0, [pc, #52]	; (ec0 <GSM_TCP_Send+0x100>)
     e8c:	f001 fbfe 	bl	268c <TraceNL>
		return ( len );
     e90:	1cbb      	adds	r3, r7, #2
     e92:	881b      	ldrh	r3, [r3, #0]
     e94:	e004      	b.n	ea0 <GSM_TCP_Send+0xe0>
	}
	TraceNL( "Data fail." );
     e96:	480b      	ldr	r0, [pc, #44]	; (ec4 <GSM_TCP_Send+0x104>)
     e98:	f001 fbf8 	bl	268c <TraceNL>
	return ( FAIL );
     e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
     ea0:	4618      	mov	r0, r3
     ea2:	f507 77a0 	add.w	r7, r7, #320	; 0x140
     ea6:	46bd      	mov	sp, r7
     ea8:	bd80      	pop	{r7, pc}
     eaa:	bf00      	nop
     eac:	00006a94 	.word	0x00006a94
     eb0:	000067fc 	.word	0x000067fc
     eb4:	00006a48 	.word	0x00006a48
     eb8:	00006a58 	.word	0x00006a58
     ebc:	00006a6c 	.word	0x00006a6c
     ec0:	00006a74 	.word	0x00006a74
     ec4:	00006a88 	.word	0x00006a88

00000ec8 <GSM_TogglePwrKey>:

void GSM_TogglePwrKey() {
     ec8:	b580      	push	{r7, lr}
     eca:	af00      	add	r7, sp, #0
	//Toggle PWR_KEY
	LPC_GPIO2->FIOSET = (1 << 3);
     ecc:	4b05      	ldr	r3, [pc, #20]	; (ee4 <GSM_TogglePwrKey+0x1c>)
     ece:	2208      	movs	r2, #8
     ed0:	619a      	str	r2, [r3, #24]
	DelayMs(2000);
     ed2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     ed6:	f001 fbb3 	bl	2640 <DelayMs>
	LPC_GPIO2->FIOCLR = (1 << 3);
     eda:	4b02      	ldr	r3, [pc, #8]	; (ee4 <GSM_TogglePwrKey+0x1c>)
     edc:	2208      	movs	r2, #8
     ede:	61da      	str	r2, [r3, #28]
}
     ee0:	bd80      	pop	{r7, pc}
     ee2:	bf00      	nop
     ee4:	2009c040 	.word	0x2009c040

00000ee8 <GSM_ShutdownModule>:

int GSM_ShutdownModule() {
     ee8:	b580      	push	{r7, lr}
     eea:	b09a      	sub	sp, #104	; 0x68
     eec:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+QPOWD=0", response, 500);
     eee:	1d3b      	adds	r3, r7, #4
     ef0:	4813      	ldr	r0, [pc, #76]	; (f40 <GSM_ShutdownModule+0x58>)
     ef2:	4619      	mov	r1, r3
     ef4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     ef8:	f7ff fd66 	bl	9c8 <GSM_SendAt>
	DelayMs(1000);
     efc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     f00:	f001 fb9e 	bl	2640 <DelayMs>
	memset(response, 0, sizeof(response));
     f04:	1d3b      	adds	r3, r7, #4
     f06:	4618      	mov	r0, r3
     f08:	2100      	movs	r1, #0
     f0a:	2264      	movs	r2, #100	; 0x64
     f0c:	f002 fe4c 	bl	3ba8 <memset>
	GSM_SendAt("AT", response, 500);
     f10:	1d3b      	adds	r3, r7, #4
     f12:	480c      	ldr	r0, [pc, #48]	; (f44 <GSM_ShutdownModule+0x5c>)
     f14:	4619      	mov	r1, r3
     f16:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     f1a:	f7ff fd55 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "OK") == NULL) {
     f1e:	1d3b      	adds	r3, r7, #4
     f20:	4618      	mov	r0, r3
     f22:	4909      	ldr	r1, [pc, #36]	; (f48 <GSM_ShutdownModule+0x60>)
     f24:	f004 fbc1 	bl	56aa <strstr>
     f28:	4603      	mov	r3, r0
     f2a:	2b00      	cmp	r3, #0
     f2c:	d101      	bne.n	f32 <GSM_ShutdownModule+0x4a>
		return ( SUCCESS );
     f2e:	2300      	movs	r3, #0
     f30:	e001      	b.n	f36 <GSM_ShutdownModule+0x4e>
	}
	return ( FAIL );
     f32:	f04f 33ff 	mov.w	r3, #4294967295
}
     f36:	4618      	mov	r0, r3
     f38:	3768      	adds	r7, #104	; 0x68
     f3a:	46bd      	mov	sp, r7
     f3c:	bd80      	pop	{r7, pc}
     f3e:	bf00      	nop
     f40:	00006aac 	.word	0x00006aac
     f44:	000067fc 	.word	0x000067fc
     f48:	00006ab8 	.word	0x00006ab8

00000f4c <GSM_InitModule>:
	LPC_GPIO2->FIOCLR = (1 << 2);

	return ( SUCCESS );
}

int GSM_InitModule() {
     f4c:	b580      	push	{r7, lr}
     f4e:	b09c      	sub	sp, #112	; 0x70
     f50:	af00      	add	r7, sp, #0
	//Unset EMERG
	char response[100];
	LPC_GPIO2->FIOCLR = (1 << 2);
     f52:	4b30      	ldr	r3, [pc, #192]	; (1014 <GSM_InitModule+0xc8>)
     f54:	2204      	movs	r2, #4
     f56:	61da      	str	r2, [r3, #28]
	DelayMs(1000);
     f58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     f5c:	f001 fb70 	bl	2640 <DelayMs>
	GSM_TogglePwrKey();
     f60:	f7ff ffb2 	bl	ec8 <GSM_TogglePwrKey>
	int i = 0;
     f64:	2300      	movs	r3, #0
     f66:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (i = 0; i < 20; i++) {
     f68:	2300      	movs	r3, #0
     f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
     f6c:	e048      	b.n	1000 <GSM_InitModule+0xb4>
		GSM_SendAt("AT", response, 500);
     f6e:	1d3b      	adds	r3, r7, #4
     f70:	4829      	ldr	r0, [pc, #164]	; (1018 <GSM_InitModule+0xcc>)
     f72:	4619      	mov	r1, r3
     f74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     f78:	f7ff fd26 	bl	9c8 <GSM_SendAt>

//		TraceDumpHex( response, strlen(response) );
		if (strstr(response, "OK") != NULL) {
     f7c:	1d3b      	adds	r3, r7, #4
     f7e:	4618      	mov	r0, r3
     f80:	4926      	ldr	r1, [pc, #152]	; (101c <GSM_InitModule+0xd0>)
     f82:	f004 fb92 	bl	56aa <strstr>
     f86:	4603      	mov	r3, r0
     f88:	2b00      	cmp	r3, #0
     f8a:	d036      	beq.n	ffa <GSM_InitModule+0xae>

//			GSM_Set1152008N1( );
//
//			UARTInit(PORT_GSM, 115200);
			GSM_SendAt("AT+CMEE=2", response, 500);
     f8c:	1d3b      	adds	r3, r7, #4
     f8e:	4824      	ldr	r0, [pc, #144]	; (1020 <GSM_InitModule+0xd4>)
     f90:	4619      	mov	r1, r3
     f92:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     f96:	f7ff fd17 	bl	9c8 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			DelayMs(500);
     f9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     f9e:	f001 fb4f 	bl	2640 <DelayMs>
			//Init SMS
			//SMS Text Mode
			GSM_SendAt("AT+CMGF=1", response, 500);
     fa2:	1d3b      	adds	r3, r7, #4
     fa4:	481f      	ldr	r0, [pc, #124]	; (1024 <GSM_InitModule+0xd8>)
     fa6:	4619      	mov	r1, r3
     fa8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     fac:	f7ff fd0c 	bl	9c8 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			//Initialize SMS, if not new messages does not cause +CMTI
			GSM_SendAt("AT+CNMI=2,1,0,0,0", response, 500);
     fb0:	1d3b      	adds	r3, r7, #4
     fb2:	481d      	ldr	r0, [pc, #116]	; (1028 <GSM_InitModule+0xdc>)
     fb4:	4619      	mov	r1, r3
     fb6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     fba:	f7ff fd05 	bl	9c8 <GSM_SendAt>
//			TraceDumpHex( response, strlen(response) );
			int sim_check = FAIL;
     fbe:	f04f 33ff 	mov.w	r3, #4294967295
     fc2:	66bb      	str	r3, [r7, #104]	; 0x68
			for(;i<40;i++){
     fc4:	e014      	b.n	ff0 <GSM_InitModule+0xa4>
				sim_check = GSM_CheckSimCard();
     fc6:	f000 f867 	bl	1098 <GSM_CheckSimCard>
     fca:	66b8      	str	r0, [r7, #104]	; 0x68
				if (sim_check == SUCCESS){
     fcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     fce:	2b00      	cmp	r3, #0
     fd0:	d103      	bne.n	fda <GSM_InitModule+0x8e>
					TraceNL("Sim card ready..\r");
     fd2:	4816      	ldr	r0, [pc, #88]	; (102c <GSM_InitModule+0xe0>)
     fd4:	f001 fb5a 	bl	268c <TraceNL>
					break;
     fd8:	e00d      	b.n	ff6 <GSM_InitModule+0xaa>
				}
				else
					TraceNL("Sim not ready!\r");
     fda:	4815      	ldr	r0, [pc, #84]	; (1030 <GSM_InitModule+0xe4>)
     fdc:	f001 fb56 	bl	268c <TraceNL>
				DelayMs(200);
     fe0:	20c8      	movs	r0, #200	; 0xc8
     fe2:	f001 fb2d 	bl	2640 <DelayMs>
				WDTFeed();
     fe6:	f002 f9d5 	bl	3394 <WDTFeed>
//			TraceDumpHex( response, strlen(response) );
			//Initialize SMS, if not new messages does not cause +CMTI
			GSM_SendAt("AT+CNMI=2,1,0,0,0", response, 500);
//			TraceDumpHex( response, strlen(response) );
			int sim_check = FAIL;
			for(;i<40;i++){
     fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     fec:	3301      	adds	r3, #1
     fee:	66fb      	str	r3, [r7, #108]	; 0x6c
     ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     ff2:	2b27      	cmp	r3, #39	; 0x27
     ff4:	dde7      	ble.n	fc6 <GSM_InitModule+0x7a>
				else
					TraceNL("Sim not ready!\r");
				DelayMs(200);
				WDTFeed();
			}
			return sim_check;
     ff6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     ff8:	e007      	b.n	100a <GSM_InitModule+0xbe>
	char response[100];
	LPC_GPIO2->FIOCLR = (1 << 2);
	DelayMs(1000);
	GSM_TogglePwrKey();
	int i = 0;
	for (i = 0; i < 20; i++) {
     ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     ffc:	3301      	adds	r3, #1
     ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
    1000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1002:	2b13      	cmp	r3, #19
    1004:	ddb3      	ble.n	f6e <GSM_InitModule+0x22>
				WDTFeed();
			}
			return sim_check;
		}
	}
	return FAIL;
    1006:	f04f 33ff 	mov.w	r3, #4294967295
}
    100a:	4618      	mov	r0, r3
    100c:	3770      	adds	r7, #112	; 0x70
    100e:	46bd      	mov	sp, r7
    1010:	bd80      	pop	{r7, pc}
    1012:	bf00      	nop
    1014:	2009c040 	.word	0x2009c040
    1018:	000067fc 	.word	0x000067fc
    101c:	00006ab8 	.word	0x00006ab8
    1020:	00006abc 	.word	0x00006abc
    1024:	00006ac8 	.word	0x00006ac8
    1028:	00006ad4 	.word	0x00006ad4
    102c:	00006ae8 	.word	0x00006ae8
    1030:	00006afc 	.word	0x00006afc

00001034 <GSM_GetRegStat>:
	UTIL_GetPartOfString(response, csq_str, ':', ',', 0, 0);
	return atoi(csq_str);
}


int GSM_GetRegStat(){
    1034:	b580      	push	{r7, lr}
    1036:	b09e      	sub	sp, #120	; 0x78
    1038:	af00      	add	r7, sp, #0
	char csq_str[20];
	char response[100];
	GSM_SendAt("AT+CREG?", response, 100);
    103a:	463b      	mov	r3, r7
    103c:	4812      	ldr	r0, [pc, #72]	; (1088 <GSM_GetRegStat+0x54>)
    103e:	4619      	mov	r1, r3
    1040:	2264      	movs	r2, #100	; 0x64
    1042:	f7ff fcc1 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "+CREG") != NULL && ((strstr(response, ",5") != NULL) || (strstr(response, ",1") != NULL))) {
    1046:	463b      	mov	r3, r7
    1048:	4618      	mov	r0, r3
    104a:	4910      	ldr	r1, [pc, #64]	; (108c <GSM_GetRegStat+0x58>)
    104c:	f004 fb2d 	bl	56aa <strstr>
    1050:	4603      	mov	r3, r0
    1052:	2b00      	cmp	r3, #0
    1054:	d011      	beq.n	107a <GSM_GetRegStat+0x46>
    1056:	463b      	mov	r3, r7
    1058:	4618      	mov	r0, r3
    105a:	490d      	ldr	r1, [pc, #52]	; (1090 <GSM_GetRegStat+0x5c>)
    105c:	f004 fb25 	bl	56aa <strstr>
    1060:	4603      	mov	r3, r0
    1062:	2b00      	cmp	r3, #0
    1064:	d107      	bne.n	1076 <GSM_GetRegStat+0x42>
    1066:	463b      	mov	r3, r7
    1068:	4618      	mov	r0, r3
    106a:	490a      	ldr	r1, [pc, #40]	; (1094 <GSM_GetRegStat+0x60>)
    106c:	f004 fb1d 	bl	56aa <strstr>
    1070:	4603      	mov	r3, r0
    1072:	2b00      	cmp	r3, #0
    1074:	d001      	beq.n	107a <GSM_GetRegStat+0x46>
		return SUCCESS;
    1076:	2300      	movs	r3, #0
    1078:	e001      	b.n	107e <GSM_GetRegStat+0x4a>
	}
	return FAIL;
    107a:	f04f 33ff 	mov.w	r3, #4294967295
}
    107e:	4618      	mov	r0, r3
    1080:	3778      	adds	r7, #120	; 0x78
    1082:	46bd      	mov	sp, r7
    1084:	bd80      	pop	{r7, pc}
    1086:	bf00      	nop
    1088:	00006b14 	.word	0x00006b14
    108c:	00006b20 	.word	0x00006b20
    1090:	00006b28 	.word	0x00006b28
    1094:	00006b2c 	.word	0x00006b2c

00001098 <GSM_CheckSimCard>:
	return FAIL;
}



int GSM_CheckSimCard() {
    1098:	b580      	push	{r7, lr}
    109a:	b09a      	sub	sp, #104	; 0x68
    109c:	af00      	add	r7, sp, #0
	TraceNL("Entered check sim card.");
    109e:	480c      	ldr	r0, [pc, #48]	; (10d0 <GSM_CheckSimCard+0x38>)
    10a0:	f001 faf4 	bl	268c <TraceNL>
	char response[100];
	GSM_SendAt("AT+CPIN?", response, 250);
    10a4:	1d3b      	adds	r3, r7, #4
    10a6:	480b      	ldr	r0, [pc, #44]	; (10d4 <GSM_CheckSimCard+0x3c>)
    10a8:	4619      	mov	r1, r3
    10aa:	22fa      	movs	r2, #250	; 0xfa
    10ac:	f7ff fc8c 	bl	9c8 <GSM_SendAt>
	if (strstr(response, "READY") != NULL)
    10b0:	1d3b      	adds	r3, r7, #4
    10b2:	4618      	mov	r0, r3
    10b4:	4908      	ldr	r1, [pc, #32]	; (10d8 <GSM_CheckSimCard+0x40>)
    10b6:	f004 faf8 	bl	56aa <strstr>
    10ba:	4603      	mov	r3, r0
    10bc:	2b00      	cmp	r3, #0
    10be:	d001      	beq.n	10c4 <GSM_CheckSimCard+0x2c>
		return ( SUCCESS );
    10c0:	2300      	movs	r3, #0
    10c2:	e001      	b.n	10c8 <GSM_CheckSimCard+0x30>
	return ( FAIL );
    10c4:	f04f 33ff 	mov.w	r3, #4294967295
}
    10c8:	4618      	mov	r0, r3
    10ca:	3768      	adds	r7, #104	; 0x68
    10cc:	46bd      	mov	sp, r7
    10ce:	bd80      	pop	{r7, pc}
    10d0:	00006b34 	.word	0x00006b34
    10d4:	00006b4c 	.word	0x00006b4c
    10d8:	00006b58 	.word	0x00006b58

000010dc <GSM_GetImei>:

void GSM_GetImei() {
    10dc:	b580      	push	{r7, lr}
    10de:	b09a      	sub	sp, #104	; 0x68
    10e0:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+GSN", response, 500);
    10e2:	1d3b      	adds	r3, r7, #4
    10e4:	480a      	ldr	r0, [pc, #40]	; (1110 <GSM_GetImei+0x34>)
    10e6:	4619      	mov	r1, r3
    10e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    10ec:	f7ff fc6c 	bl	9c8 <GSM_SendAt>
	TraceNL("IMEI : ");
    10f0:	4808      	ldr	r0, [pc, #32]	; (1114 <GSM_GetImei+0x38>)
    10f2:	f001 facb 	bl	268c <TraceNL>
	strncpy(imei, response + 9, 15);
    10f6:	1d3b      	adds	r3, r7, #4
    10f8:	3309      	adds	r3, #9
    10fa:	4807      	ldr	r0, [pc, #28]	; (1118 <GSM_GetImei+0x3c>)
    10fc:	4619      	mov	r1, r3
    10fe:	220f      	movs	r2, #15
    1100:	f004 faa7 	bl	5652 <strncpy>
	TraceNL(imei);
    1104:	4804      	ldr	r0, [pc, #16]	; (1118 <GSM_GetImei+0x3c>)
    1106:	f001 fac1 	bl	268c <TraceNL>
}
    110a:	3768      	adds	r7, #104	; 0x68
    110c:	46bd      	mov	sp, r7
    110e:	bd80      	pop	{r7, pc}
    1110:	00006b60 	.word	0x00006b60
    1114:	00006b68 	.word	0x00006b68
    1118:	10000da0 	.word	0x10000da0

0000111c <GSM_GetImsi>:

void GSM_GetImsi() {
    111c:	b590      	push	{r4, r7, lr}
    111e:	b09d      	sub	sp, #116	; 0x74
    1120:	af00      	add	r7, sp, #0
	char response[100];
	GSM_SendAt("AT+CIMI", response, 500);
    1122:	463b      	mov	r3, r7
    1124:	4827      	ldr	r0, [pc, #156]	; (11c4 <GSM_GetImsi+0xa8>)
    1126:	4619      	mov	r1, r3
    1128:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    112c:	f7ff fc4c 	bl	9c8 <GSM_SendAt>
	Trace("IMSI : ");
    1130:	4825      	ldr	r0, [pc, #148]	; (11c8 <GSM_GetImsi+0xac>)
    1132:	f001 fa9b 	bl	266c <Trace>
	int i;
	int index = 0;
    1136:	2300      	movs	r3, #0
    1138:	66bb      	str	r3, [r7, #104]	; 0x68
	int is_start = 0;
    113a:	2300      	movs	r3, #0
    113c:	667b      	str	r3, [r7, #100]	; 0x64
	for (i = 0; i < strlen(response); i++) {
    113e:	2300      	movs	r3, #0
    1140:	66fb      	str	r3, [r7, #108]	; 0x6c
    1142:	e02c      	b.n	119e <GSM_GetImsi+0x82>
		if (index > 19)
    1144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1146:	2b13      	cmp	r3, #19
    1148:	dd00      	ble.n	114c <GSM_GetImsi+0x30>
			break;
    114a:	e030      	b.n	11ae <GSM_GetImsi+0x92>
		if ( isdigit(response[i]))
    114c:	463a      	mov	r2, r7
    114e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1150:	4413      	add	r3, r2
    1152:	781b      	ldrb	r3, [r3, #0]
    1154:	3380      	adds	r3, #128	; 0x80
    1156:	4a1d      	ldr	r2, [pc, #116]	; (11cc <GSM_GetImsi+0xb0>)
    1158:	5cd3      	ldrb	r3, [r2, r3]
    115a:	f003 0320 	and.w	r3, r3, #32
    115e:	2b00      	cmp	r3, #0
    1160:	d001      	beq.n	1166 <GSM_GetImsi+0x4a>
			is_start = 1;
    1162:	2301      	movs	r3, #1
    1164:	667b      	str	r3, [r7, #100]	; 0x64
		if (is_start == 1 && response[i] == '\n')
    1166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1168:	2b01      	cmp	r3, #1
    116a:	d106      	bne.n	117a <GSM_GetImsi+0x5e>
    116c:	463a      	mov	r2, r7
    116e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1170:	4413      	add	r3, r2
    1172:	781b      	ldrb	r3, [r3, #0]
    1174:	2b0a      	cmp	r3, #10
    1176:	d100      	bne.n	117a <GSM_GetImsi+0x5e>
			break;
    1178:	e019      	b.n	11ae <GSM_GetImsi+0x92>
		if (is_start == 1) {
    117a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    117c:	2b01      	cmp	r3, #1
    117e:	d10b      	bne.n	1198 <GSM_GetImsi+0x7c>
			imsi[index] = response[i];
    1180:	463a      	mov	r2, r7
    1182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1184:	4413      	add	r3, r2
    1186:	7819      	ldrb	r1, [r3, #0]
    1188:	4a11      	ldr	r2, [pc, #68]	; (11d0 <GSM_GetImsi+0xb4>)
    118a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    118c:	4413      	add	r3, r2
    118e:	460a      	mov	r2, r1
    1190:	701a      	strb	r2, [r3, #0]
			index++;
    1192:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1194:	3301      	adds	r3, #1
    1196:	66bb      	str	r3, [r7, #104]	; 0x68
	GSM_SendAt("AT+CIMI", response, 500);
	Trace("IMSI : ");
	int i;
	int index = 0;
	int is_start = 0;
	for (i = 0; i < strlen(response); i++) {
    1198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    119a:	3301      	adds	r3, #1
    119c:	66fb      	str	r3, [r7, #108]	; 0x6c
    119e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    11a0:	463b      	mov	r3, r7
    11a2:	4618      	mov	r0, r3
    11a4:	f004 fa30 	bl	5608 <strlen>
    11a8:	4603      	mov	r3, r0
    11aa:	429c      	cmp	r4, r3
    11ac:	d3ca      	bcc.n	1144 <GSM_GetImsi+0x28>
		if (is_start == 1) {
			imsi[index] = response[i];
			index++;
		}
	}
	imsi[index - 1] = '\0';
    11ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    11b0:	3b01      	subs	r3, #1
    11b2:	4a07      	ldr	r2, [pc, #28]	; (11d0 <GSM_GetImsi+0xb4>)
    11b4:	2100      	movs	r1, #0
    11b6:	54d1      	strb	r1, [r2, r3]
	TraceNL(imsi);
    11b8:	4805      	ldr	r0, [pc, #20]	; (11d0 <GSM_GetImsi+0xb4>)
    11ba:	f001 fa67 	bl	268c <TraceNL>
}
    11be:	3774      	adds	r7, #116	; 0x74
    11c0:	46bd      	mov	sp, r7
    11c2:	bd90      	pop	{r4, r7, pc}
    11c4:	00006b70 	.word	0x00006b70
    11c8:	00006b78 	.word	0x00006b78
    11cc:	000074a4 	.word	0x000074a4
    11d0:	10000d8c 	.word	0x10000d8c

000011d4 <GSM_TCP_Close>:
	GSM_SendAt("ATE0", response, 500);
	TraceNL("ECHO OFF");
}

void GSM_TCP_Close( void )
{
    11d4:	b580      	push	{r7, lr}
    11d6:	b0b2      	sub	sp, #200	; 0xc8
    11d8:	af00      	add	r7, sp, #0
	char response[200];
	GSM_SendAt("AT+QICLOSE", response, 500);
    11da:	463b      	mov	r3, r7
    11dc:	4805      	ldr	r0, [pc, #20]	; (11f4 <GSM_TCP_Close+0x20>)
    11de:	4619      	mov	r1, r3
    11e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    11e4:	f7ff fbf0 	bl	9c8 <GSM_SendAt>
	TraceNL("CLOSE TCP connection ");
    11e8:	4803      	ldr	r0, [pc, #12]	; (11f8 <GSM_TCP_Close+0x24>)
    11ea:	f001 fa4f 	bl	268c <TraceNL>

}
    11ee:	37c8      	adds	r7, #200	; 0xc8
    11f0:	46bd      	mov	sp, r7
    11f2:	bd80      	pop	{r7, pc}
    11f4:	00006bcc 	.word	0x00006bcc
    11f8:	00006bd8 	.word	0x00006bd8

000011fc <u16CRC_Calc16>:
**
** Returned value:  16-bit CRC
**
******************************************************************************/
uint16_t u16CRC_Calc16(const uint8_t *pu8Data, int32_t i16Len)
{
    11fc:	b480      	push	{r7}
    11fe:	b085      	sub	sp, #20
    1200:	af00      	add	r7, sp, #0
    1202:	6078      	str	r0, [r7, #4]
    1204:	6039      	str	r1, [r7, #0]
	uint8_t i;
	uint16_t u16CRC = 0;
    1206:	2300      	movs	r3, #0
    1208:	81bb      	strh	r3, [r7, #12]

    while(--i16Len >= 0)
    120a:	e022      	b.n	1252 <u16CRC_Calc16+0x56>
    {
    	i = 8;
    120c:	2308      	movs	r3, #8
    120e:	73fb      	strb	r3, [r7, #15]
    	u16CRC = u16CRC ^ (((uint16_t)*pu8Data++) << 8);
    1210:	687b      	ldr	r3, [r7, #4]
    1212:	1c5a      	adds	r2, r3, #1
    1214:	607a      	str	r2, [r7, #4]
    1216:	781b      	ldrb	r3, [r3, #0]
    1218:	021b      	lsls	r3, r3, #8
    121a:	b29a      	uxth	r2, r3
    121c:	89bb      	ldrh	r3, [r7, #12]
    121e:	4053      	eors	r3, r2
    1220:	b29b      	uxth	r3, r3
    1222:	81bb      	strh	r3, [r7, #12]

    	do
        {
    		if (u16CRC & 0x8000)
    1224:	89bb      	ldrh	r3, [r7, #12]
    1226:	b21b      	sxth	r3, r3
    1228:	2b00      	cmp	r3, #0
    122a:	da09      	bge.n	1240 <u16CRC_Calc16+0x44>
    		{
    			u16CRC = u16CRC << 1 ^ 0x1021;
    122c:	89bb      	ldrh	r3, [r7, #12]
    122e:	005b      	lsls	r3, r3, #1
    1230:	b29b      	uxth	r3, r3
    1232:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
    1236:	f083 0301 	eor.w	r3, r3, #1
    123a:	b29b      	uxth	r3, r3
    123c:	81bb      	strh	r3, [r7, #12]
    123e:	e002      	b.n	1246 <u16CRC_Calc16+0x4a>
    		}
    		else
    		{
    			u16CRC = u16CRC << 1;
    1240:	89bb      	ldrh	r3, [r7, #12]
    1242:	005b      	lsls	r3, r3, #1
    1244:	81bb      	strh	r3, [r7, #12]
    		}
        }
    	while(--i);
    1246:	7bfb      	ldrb	r3, [r7, #15]
    1248:	3b01      	subs	r3, #1
    124a:	73fb      	strb	r3, [r7, #15]
    124c:	7bfb      	ldrb	r3, [r7, #15]
    124e:	2b00      	cmp	r3, #0
    1250:	d1e8      	bne.n	1224 <u16CRC_Calc16+0x28>
uint16_t u16CRC_Calc16(const uint8_t *pu8Data, int32_t i16Len)
{
	uint8_t i;
	uint16_t u16CRC = 0;

    while(--i16Len >= 0)
    1252:	683b      	ldr	r3, [r7, #0]
    1254:	3b01      	subs	r3, #1
    1256:	603b      	str	r3, [r7, #0]
    1258:	683b      	ldr	r3, [r7, #0]
    125a:	2b00      	cmp	r3, #0
    125c:	dad6      	bge.n	120c <u16CRC_Calc16+0x10>
    			u16CRC = u16CRC << 1;
    		}
        }
    	while(--i);
    }
    return u16CRC;
    125e:	89bb      	ldrh	r3, [r7, #12]
}
    1260:	4618      	mov	r0, r3
    1262:	3714      	adds	r7, #20
    1264:	46bd      	mov	sp, r7
    1266:	f85d 7b04 	ldr.w	r7, [sp], #4
    126a:	4770      	bx	lr

0000126c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    126c:	b480      	push	{r7}
    126e:	b083      	sub	sp, #12
    1270:	af00      	add	r7, sp, #0
    1272:	4603      	mov	r3, r0
    1274:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1276:	4908      	ldr	r1, [pc, #32]	; (1298 <NVIC_EnableIRQ+0x2c>)
    1278:	f997 3007 	ldrsb.w	r3, [r7, #7]
    127c:	095b      	lsrs	r3, r3, #5
    127e:	79fa      	ldrb	r2, [r7, #7]
    1280:	f002 021f 	and.w	r2, r2, #31
    1284:	2001      	movs	r0, #1
    1286:	fa00 f202 	lsl.w	r2, r0, r2
    128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    128e:	370c      	adds	r7, #12
    1290:	46bd      	mov	sp, r7
    1292:	f85d 7b04 	ldr.w	r7, [sp], #4
    1296:	4770      	bx	lr
    1298:	e000e100 	.word	0xe000e100

0000129c <I2C0_IRQHandler>:

volatile uint32_t RdIndex_1,RdIndex_0 = 0;
volatile uint32_t WrIndex_1,WrIndex_0 = 0;


void I2C0_IRQHandler(void) {
    129c:	b480      	push	{r7}
    129e:	b083      	sub	sp, #12
    12a0:	af00      	add	r7, sp, #0
	uint8_t StatValue;
	/* this handler deals with master read and master write only */
	StatValue = LPC_I2C0->I2STAT;
    12a2:	4ba9      	ldr	r3, [pc, #676]	; (1548 <I2C0_IRQHandler+0x2ac>)
    12a4:	685b      	ldr	r3, [r3, #4]
    12a6:	71fb      	strb	r3, [r7, #7]
	switch (StatValue) {
    12a8:	79fb      	ldrb	r3, [r7, #7]
    12aa:	3b08      	subs	r3, #8
    12ac:	2b50      	cmp	r3, #80	; 0x50
    12ae:	f200 8184 	bhi.w	15ba <I2C0_IRQHandler+0x31e>
    12b2:	a201      	add	r2, pc, #4	; (adr r2, 12b8 <I2C0_IRQHandler+0x1c>)
    12b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    12b8:	000013fd 	.word	0x000013fd
    12bc:	000015bb 	.word	0x000015bb
    12c0:	000015bb 	.word	0x000015bb
    12c4:	000015bb 	.word	0x000015bb
    12c8:	000015bb 	.word	0x000015bb
    12cc:	000015bb 	.word	0x000015bb
    12d0:	000015bb 	.word	0x000015bb
    12d4:	000015bb 	.word	0x000015bb
    12d8:	0000141f 	.word	0x0000141f
    12dc:	000015bb 	.word	0x000015bb
    12e0:	000015bb 	.word	0x000015bb
    12e4:	000015bb 	.word	0x000015bb
    12e8:	000015bb 	.word	0x000015bb
    12ec:	000015bb 	.word	0x000015bb
    12f0:	000015bb 	.word	0x000015bb
    12f4:	000015bb 	.word	0x000015bb
    12f8:	00001449 	.word	0x00001449
    12fc:	000015bb 	.word	0x000015bb
    1300:	000015bb 	.word	0x000015bb
    1304:	000015bb 	.word	0x000015bb
    1308:	000015bb 	.word	0x000015bb
    130c:	000015bb 	.word	0x000015bb
    1310:	000015bb 	.word	0x000015bb
    1314:	000015bb 	.word	0x000015bb
    1318:	000015ad 	.word	0x000015ad
    131c:	000015bb 	.word	0x000015bb
    1320:	000015bb 	.word	0x000015bb
    1324:	000015bb 	.word	0x000015bb
    1328:	000015bb 	.word	0x000015bb
    132c:	000015bb 	.word	0x000015bb
    1330:	000015bb 	.word	0x000015bb
    1334:	000015bb 	.word	0x000015bb
    1338:	00001473 	.word	0x00001473
    133c:	000015bb 	.word	0x000015bb
    1340:	000015bb 	.word	0x000015bb
    1344:	000015bb 	.word	0x000015bb
    1348:	000015bb 	.word	0x000015bb
    134c:	000015bb 	.word	0x000015bb
    1350:	000015bb 	.word	0x000015bb
    1354:	000015bb 	.word	0x000015bb
    1358:	000014b9 	.word	0x000014b9
    135c:	000015bb 	.word	0x000015bb
    1360:	000015bb 	.word	0x000015bb
    1364:	000015bb 	.word	0x000015bb
    1368:	000015bb 	.word	0x000015bb
    136c:	000015bb 	.word	0x000015bb
    1370:	000015bb 	.word	0x000015bb
    1374:	000015bb 	.word	0x000015bb
    1378:	000015bb 	.word	0x000015bb
    137c:	000015bb 	.word	0x000015bb
    1380:	000015bb 	.word	0x000015bb
    1384:	000015bb 	.word	0x000015bb
    1388:	000015bb 	.word	0x000015bb
    138c:	000015bb 	.word	0x000015bb
    1390:	000015bb 	.word	0x000015bb
    1394:	000015bb 	.word	0x000015bb
    1398:	00001539 	.word	0x00001539
    139c:	000015bb 	.word	0x000015bb
    13a0:	000015bb 	.word	0x000015bb
    13a4:	000015bb 	.word	0x000015bb
    13a8:	000015bb 	.word	0x000015bb
    13ac:	000015bb 	.word	0x000015bb
    13b0:	000015bb 	.word	0x000015bb
    13b4:	000015bb 	.word	0x000015bb
    13b8:	000015ad 	.word	0x000015ad
    13bc:	000015bb 	.word	0x000015bb
    13c0:	000015bb 	.word	0x000015bb
    13c4:	000015bb 	.word	0x000015bb
    13c8:	000015bb 	.word	0x000015bb
    13cc:	000015bb 	.word	0x000015bb
    13d0:	000015bb 	.word	0x000015bb
    13d4:	000015bb 	.word	0x000015bb
    13d8:	00001565 	.word	0x00001565
    13dc:	000015bb 	.word	0x000015bb
    13e0:	000015bb 	.word	0x000015bb
    13e4:	000015bb 	.word	0x000015bb
    13e8:	000015bb 	.word	0x000015bb
    13ec:	000015bb 	.word	0x000015bb
    13f0:	000015bb 	.word	0x000015bb
    13f4:	000015bb 	.word	0x000015bb
    13f8:	00001565 	.word	0x00001565
		case 0x08: /* A Start condition is issued. */
			LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    13fc:	4952      	ldr	r1, [pc, #328]	; (1548 <I2C0_IRQHandler+0x2ac>)
    13fe:	4b53      	ldr	r3, [pc, #332]	; (154c <I2C0_IRQHandler+0x2b0>)
    1400:	681b      	ldr	r3, [r3, #0]
    1402:	1c5a      	adds	r2, r3, #1
    1404:	4851      	ldr	r0, [pc, #324]	; (154c <I2C0_IRQHandler+0x2b0>)
    1406:	6002      	str	r2, [r0, #0]
    1408:	4a51      	ldr	r2, [pc, #324]	; (1550 <I2C0_IRQHandler+0x2b4>)
    140a:	5cd3      	ldrb	r3, [r2, r3]
    140c:	b2db      	uxtb	r3, r3
    140e:	608b      	str	r3, [r1, #8]
			LPC_I2C0->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    1410:	4b4d      	ldr	r3, [pc, #308]	; (1548 <I2C0_IRQHandler+0x2ac>)
    1412:	2228      	movs	r2, #40	; 0x28
    1414:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = I2C_STARTED;
    1416:	4b4f      	ldr	r3, [pc, #316]	; (1554 <I2C0_IRQHandler+0x2b8>)
    1418:	2201      	movs	r2, #1
    141a:	601a      	str	r2, [r3, #0]
			break;
    141c:	e0d1      	b.n	15c2 <I2C0_IRQHandler+0x326>
		case 0x10: /* A repeated started is issued */
			if (!I2C0_Cmd) {
    141e:	4b4e      	ldr	r3, [pc, #312]	; (1558 <I2C0_IRQHandler+0x2bc>)
    1420:	681b      	ldr	r3, [r3, #0]
    1422:	2b00      	cmp	r3, #0
    1424:	d109      	bne.n	143a <I2C0_IRQHandler+0x19e>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    1426:	4948      	ldr	r1, [pc, #288]	; (1548 <I2C0_IRQHandler+0x2ac>)
    1428:	4b48      	ldr	r3, [pc, #288]	; (154c <I2C0_IRQHandler+0x2b0>)
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	1c5a      	adds	r2, r3, #1
    142e:	4847      	ldr	r0, [pc, #284]	; (154c <I2C0_IRQHandler+0x2b0>)
    1430:	6002      	str	r2, [r0, #0]
    1432:	4a47      	ldr	r2, [pc, #284]	; (1550 <I2C0_IRQHandler+0x2b4>)
    1434:	5cd3      	ldrb	r3, [r2, r3]
    1436:	b2db      	uxtb	r3, r3
    1438:	608b      	str	r3, [r1, #8]
			}
			LPC_I2C0->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    143a:	4b43      	ldr	r3, [pc, #268]	; (1548 <I2C0_IRQHandler+0x2ac>)
    143c:	2228      	movs	r2, #40	; 0x28
    143e:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = I2C_RESTARTED;
    1440:	4b44      	ldr	r3, [pc, #272]	; (1554 <I2C0_IRQHandler+0x2b8>)
    1442:	2202      	movs	r2, #2
    1444:	601a      	str	r2, [r3, #0]
			break;
    1446:	e0bc      	b.n	15c2 <I2C0_IRQHandler+0x326>
		case 0x18: /* Regardless, it's a ACK */
			if (I2C0_MasterState == I2C_STARTED) {
    1448:	4b42      	ldr	r3, [pc, #264]	; (1554 <I2C0_IRQHandler+0x2b8>)
    144a:	681b      	ldr	r3, [r3, #0]
    144c:	2b01      	cmp	r3, #1
    144e:	d10c      	bne.n	146a <I2C0_IRQHandler+0x1ce>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++];
    1450:	493d      	ldr	r1, [pc, #244]	; (1548 <I2C0_IRQHandler+0x2ac>)
    1452:	4b3e      	ldr	r3, [pc, #248]	; (154c <I2C0_IRQHandler+0x2b0>)
    1454:	681b      	ldr	r3, [r3, #0]
    1456:	1c5a      	adds	r2, r3, #1
    1458:	483c      	ldr	r0, [pc, #240]	; (154c <I2C0_IRQHandler+0x2b0>)
    145a:	6002      	str	r2, [r0, #0]
    145c:	4a3c      	ldr	r2, [pc, #240]	; (1550 <I2C0_IRQHandler+0x2b4>)
    145e:	5cd3      	ldrb	r3, [r2, r3]
    1460:	b2db      	uxtb	r3, r3
    1462:	608b      	str	r3, [r1, #8]
				I2C0_MasterState = DATA_ACK;
    1464:	4b3b      	ldr	r3, [pc, #236]	; (1554 <I2C0_IRQHandler+0x2b8>)
    1466:	2204      	movs	r2, #4
    1468:	601a      	str	r2, [r3, #0]
			}
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    146a:	4b37      	ldr	r3, [pc, #220]	; (1548 <I2C0_IRQHandler+0x2ac>)
    146c:	2208      	movs	r2, #8
    146e:	619a      	str	r2, [r3, #24]
			break;
    1470:	e0a7      	b.n	15c2 <I2C0_IRQHandler+0x326>
		case 0x28: /* Data byte has been transmitted, regardless ACK or NACK */
			 if ( WrIndex_0 < I2C0_WriteLength )
    1472:	4b36      	ldr	r3, [pc, #216]	; (154c <I2C0_IRQHandler+0x2b0>)
    1474:	681a      	ldr	r2, [r3, #0]
    1476:	4b39      	ldr	r3, [pc, #228]	; (155c <I2C0_IRQHandler+0x2c0>)
    1478:	681b      	ldr	r3, [r3, #0]
    147a:	429a      	cmp	r2, r3
    147c:	d20a      	bcs.n	1494 <I2C0_IRQHandler+0x1f8>
				{
				  LPC_I2C0->I2DAT = I2C0_MasterBuffer[WrIndex_0++]; /* this should be the last one */
    147e:	4932      	ldr	r1, [pc, #200]	; (1548 <I2C0_IRQHandler+0x2ac>)
    1480:	4b32      	ldr	r3, [pc, #200]	; (154c <I2C0_IRQHandler+0x2b0>)
    1482:	681b      	ldr	r3, [r3, #0]
    1484:	1c5a      	adds	r2, r3, #1
    1486:	4831      	ldr	r0, [pc, #196]	; (154c <I2C0_IRQHandler+0x2b0>)
    1488:	6002      	str	r2, [r0, #0]
    148a:	4a31      	ldr	r2, [pc, #196]	; (1550 <I2C0_IRQHandler+0x2b4>)
    148c:	5cd3      	ldrb	r3, [r2, r3]
    148e:	b2db      	uxtb	r3, r3
    1490:	608b      	str	r3, [r1, #8]
    1492:	e00d      	b.n	14b0 <I2C0_IRQHandler+0x214>
				}
				else
				{
				  if ( I2C0_ReadLength != 0 )
    1494:	4b32      	ldr	r3, [pc, #200]	; (1560 <I2C0_IRQHandler+0x2c4>)
    1496:	681b      	ldr	r3, [r3, #0]
    1498:	2b00      	cmp	r3, #0
    149a:	d003      	beq.n	14a4 <I2C0_IRQHandler+0x208>
				  {
						LPC_I2C0->I2CONSET = I2CONSET_STA;   /* Set Repeated-start flag */
    149c:	4b2a      	ldr	r3, [pc, #168]	; (1548 <I2C0_IRQHandler+0x2ac>)
    149e:	2220      	movs	r2, #32
    14a0:	601a      	str	r2, [r3, #0]
    14a2:	e005      	b.n	14b0 <I2C0_IRQHandler+0x214>
				  }
				  else
				  {
						LPC_I2C0->I2CONSET = I2CONSET_STO;      /* Set Stop flag */
    14a4:	4b28      	ldr	r3, [pc, #160]	; (1548 <I2C0_IRQHandler+0x2ac>)
    14a6:	2210      	movs	r2, #16
    14a8:	601a      	str	r2, [r3, #0]
						I2C0_MasterState = I2C_IDLE;
    14aa:	4b2a      	ldr	r3, [pc, #168]	; (1554 <I2C0_IRQHandler+0x2b8>)
    14ac:	2200      	movs	r2, #0
    14ae:	601a      	str	r2, [r3, #0]
				  }
				}
				LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    14b0:	4b25      	ldr	r3, [pc, #148]	; (1548 <I2C0_IRQHandler+0x2ac>)
    14b2:	2208      	movs	r2, #8
    14b4:	619a      	str	r2, [r3, #24]
				break;
    14b6:	e084      	b.n	15c2 <I2C0_IRQHandler+0x326>
		case 0x30:
			if (WrIndex_0 != I2C0_WriteLength) {
    14b8:	4b24      	ldr	r3, [pc, #144]	; (154c <I2C0_IRQHandler+0x2b0>)
    14ba:	681a      	ldr	r2, [r3, #0]
    14bc:	4b27      	ldr	r3, [pc, #156]	; (155c <I2C0_IRQHandler+0x2c0>)
    14be:	681b      	ldr	r3, [r3, #0]
    14c0:	429a      	cmp	r2, r3
    14c2:	d024      	beq.n	150e <I2C0_IRQHandler+0x272>
				LPC_I2C0->I2DAT = I2C0_MasterBuffer[1 + WrIndex_0]; /* this should be the last one */
    14c4:	4a20      	ldr	r2, [pc, #128]	; (1548 <I2C0_IRQHandler+0x2ac>)
    14c6:	4b21      	ldr	r3, [pc, #132]	; (154c <I2C0_IRQHandler+0x2b0>)
    14c8:	681b      	ldr	r3, [r3, #0]
    14ca:	3301      	adds	r3, #1
    14cc:	4920      	ldr	r1, [pc, #128]	; (1550 <I2C0_IRQHandler+0x2b4>)
    14ce:	5ccb      	ldrb	r3, [r1, r3]
    14d0:	b2db      	uxtb	r3, r3
    14d2:	6093      	str	r3, [r2, #8]
				WrIndex_0++;
    14d4:	4b1d      	ldr	r3, [pc, #116]	; (154c <I2C0_IRQHandler+0x2b0>)
    14d6:	681b      	ldr	r3, [r3, #0]
    14d8:	3301      	adds	r3, #1
    14da:	4a1c      	ldr	r2, [pc, #112]	; (154c <I2C0_IRQHandler+0x2b0>)
    14dc:	6013      	str	r3, [r2, #0]
				if (WrIndex_0 != I2C0_WriteLength) {
    14de:	4b1b      	ldr	r3, [pc, #108]	; (154c <I2C0_IRQHandler+0x2b0>)
    14e0:	681a      	ldr	r2, [r3, #0]
    14e2:	4b1e      	ldr	r3, [pc, #120]	; (155c <I2C0_IRQHandler+0x2c0>)
    14e4:	681b      	ldr	r3, [r3, #0]
    14e6:	429a      	cmp	r2, r3
    14e8:	d003      	beq.n	14f2 <I2C0_IRQHandler+0x256>
					I2C0_MasterState = DATA_ACK;
    14ea:	4b1a      	ldr	r3, [pc, #104]	; (1554 <I2C0_IRQHandler+0x2b8>)
    14ec:	2204      	movs	r2, #4
    14ee:	601a      	str	r2, [r3, #0]
    14f0:	e01e      	b.n	1530 <I2C0_IRQHandler+0x294>
				} else {
					I2C0_MasterState = DATA_NACK;
    14f2:	4b18      	ldr	r3, [pc, #96]	; (1554 <I2C0_IRQHandler+0x2b8>)
    14f4:	2205      	movs	r2, #5
    14f6:	601a      	str	r2, [r3, #0]
					if (I2C0_ReadLength != 0) {
    14f8:	4b19      	ldr	r3, [pc, #100]	; (1560 <I2C0_IRQHandler+0x2c4>)
    14fa:	681b      	ldr	r3, [r3, #0]
    14fc:	2b00      	cmp	r3, #0
    14fe:	d017      	beq.n	1530 <I2C0_IRQHandler+0x294>
						LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    1500:	4b11      	ldr	r3, [pc, #68]	; (1548 <I2C0_IRQHandler+0x2ac>)
    1502:	2220      	movs	r2, #32
    1504:	601a      	str	r2, [r3, #0]
						I2C0_MasterState = I2C_REPEATED_START;
    1506:	4b13      	ldr	r3, [pc, #76]	; (1554 <I2C0_IRQHandler+0x2b8>)
    1508:	2203      	movs	r2, #3
    150a:	601a      	str	r2, [r3, #0]
    150c:	e010      	b.n	1530 <I2C0_IRQHandler+0x294>
					}
				}
			} else {
				if (I2C0_ReadLength != 0) {
    150e:	4b14      	ldr	r3, [pc, #80]	; (1560 <I2C0_IRQHandler+0x2c4>)
    1510:	681b      	ldr	r3, [r3, #0]
    1512:	2b00      	cmp	r3, #0
    1514:	d006      	beq.n	1524 <I2C0_IRQHandler+0x288>
					LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    1516:	4b0c      	ldr	r3, [pc, #48]	; (1548 <I2C0_IRQHandler+0x2ac>)
    1518:	2220      	movs	r2, #32
    151a:	601a      	str	r2, [r3, #0]
					I2C0_MasterState = I2C_REPEATED_START;
    151c:	4b0d      	ldr	r3, [pc, #52]	; (1554 <I2C0_IRQHandler+0x2b8>)
    151e:	2203      	movs	r2, #3
    1520:	601a      	str	r2, [r3, #0]
    1522:	e005      	b.n	1530 <I2C0_IRQHandler+0x294>
				} else {
					I2C0_MasterState = DATA_NACK;
    1524:	4b0b      	ldr	r3, [pc, #44]	; (1554 <I2C0_IRQHandler+0x2b8>)
    1526:	2205      	movs	r2, #5
    1528:	601a      	str	r2, [r3, #0]
					LPC_I2C0->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    152a:	4b07      	ldr	r3, [pc, #28]	; (1548 <I2C0_IRQHandler+0x2ac>)
    152c:	2210      	movs	r2, #16
    152e:	601a      	str	r2, [r3, #0]
				}
			}
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    1530:	4b05      	ldr	r3, [pc, #20]	; (1548 <I2C0_IRQHandler+0x2ac>)
    1532:	2208      	movs	r2, #8
    1534:	619a      	str	r2, [r3, #24]
			break;
    1536:	e044      	b.n	15c2 <I2C0_IRQHandler+0x326>
		case 0x40: /* Master Receive, SLA_R has been sent */
			LPC_I2C0->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    1538:	4b03      	ldr	r3, [pc, #12]	; (1548 <I2C0_IRQHandler+0x2ac>)
    153a:	2204      	movs	r2, #4
    153c:	601a      	str	r2, [r3, #0]
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    153e:	4b02      	ldr	r3, [pc, #8]	; (1548 <I2C0_IRQHandler+0x2ac>)
    1540:	2208      	movs	r2, #8
    1542:	619a      	str	r2, [r3, #24]
			break;
    1544:	e03d      	b.n	15c2 <I2C0_IRQHandler+0x326>
    1546:	bf00      	nop
    1548:	4001c000 	.word	0x4001c000
    154c:	10000034 	.word	0x10000034
    1550:	10000e60 	.word	0x10000e60
    1554:	1000002c 	.word	0x1000002c
    1558:	10000e80 	.word	0x10000e80
    155c:	10000e3c 	.word	0x10000e3c
    1560:	10000de4 	.word	0x10000de4
		case 0x50: /* Data byte has been received, regardless following ACK or NACK */
		case 0x58:
			I2C0_MasterBuffer[3 + RdIndex_0] = LPC_I2C0->I2DAT;
    1564:	4b19      	ldr	r3, [pc, #100]	; (15cc <I2C0_IRQHandler+0x330>)
    1566:	681b      	ldr	r3, [r3, #0]
    1568:	3303      	adds	r3, #3
    156a:	4a19      	ldr	r2, [pc, #100]	; (15d0 <I2C0_IRQHandler+0x334>)
    156c:	6892      	ldr	r2, [r2, #8]
    156e:	b2d1      	uxtb	r1, r2
    1570:	4a18      	ldr	r2, [pc, #96]	; (15d4 <I2C0_IRQHandler+0x338>)
    1572:	54d1      	strb	r1, [r2, r3]
			RdIndex_0++;
    1574:	4b15      	ldr	r3, [pc, #84]	; (15cc <I2C0_IRQHandler+0x330>)
    1576:	681b      	ldr	r3, [r3, #0]
    1578:	3301      	adds	r3, #1
    157a:	4a14      	ldr	r2, [pc, #80]	; (15cc <I2C0_IRQHandler+0x330>)
    157c:	6013      	str	r3, [r2, #0]
			if (RdIndex_0 != I2C0_ReadLength) {
    157e:	4b13      	ldr	r3, [pc, #76]	; (15cc <I2C0_IRQHandler+0x330>)
    1580:	681a      	ldr	r2, [r3, #0]
    1582:	4b15      	ldr	r3, [pc, #84]	; (15d8 <I2C0_IRQHandler+0x33c>)
    1584:	681b      	ldr	r3, [r3, #0]
    1586:	429a      	cmp	r2, r3
    1588:	d003      	beq.n	1592 <I2C0_IRQHandler+0x2f6>
				I2C0_MasterState = DATA_ACK;
    158a:	4b14      	ldr	r3, [pc, #80]	; (15dc <I2C0_IRQHandler+0x340>)
    158c:	2204      	movs	r2, #4
    158e:	601a      	str	r2, [r3, #0]
    1590:	e005      	b.n	159e <I2C0_IRQHandler+0x302>
			} else {
				RdIndex_0 = 0;
    1592:	4b0e      	ldr	r3, [pc, #56]	; (15cc <I2C0_IRQHandler+0x330>)
    1594:	2200      	movs	r2, #0
    1596:	601a      	str	r2, [r3, #0]
				I2C0_MasterState = DATA_NACK;
    1598:	4b10      	ldr	r3, [pc, #64]	; (15dc <I2C0_IRQHandler+0x340>)
    159a:	2205      	movs	r2, #5
    159c:	601a      	str	r2, [r3, #0]
			}
			LPC_I2C0->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    159e:	4b0c      	ldr	r3, [pc, #48]	; (15d0 <I2C0_IRQHandler+0x334>)
    15a0:	2204      	movs	r2, #4
    15a2:	601a      	str	r2, [r3, #0]
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    15a4:	4b0a      	ldr	r3, [pc, #40]	; (15d0 <I2C0_IRQHandler+0x334>)
    15a6:	2208      	movs	r2, #8
    15a8:	619a      	str	r2, [r3, #24]
			break;
    15aa:	e00a      	b.n	15c2 <I2C0_IRQHandler+0x326>
		case 0x20: /* regardless, it's a NACK */
		case 0x48:
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    15ac:	4b08      	ldr	r3, [pc, #32]	; (15d0 <I2C0_IRQHandler+0x334>)
    15ae:	2208      	movs	r2, #8
    15b0:	619a      	str	r2, [r3, #24]
			I2C0_MasterState = DATA_NACK;
    15b2:	4b0a      	ldr	r3, [pc, #40]	; (15dc <I2C0_IRQHandler+0x340>)
    15b4:	2205      	movs	r2, #5
    15b6:	601a      	str	r2, [r3, #0]
			break;
    15b8:	e003      	b.n	15c2 <I2C0_IRQHandler+0x326>
		case 0x38: /* Arbitration lost, in this example, we don't
		 deal with multiple master situation */
		default:
			LPC_I2C0->I2CONCLR = I2CONCLR_SIC;
    15ba:	4b05      	ldr	r3, [pc, #20]	; (15d0 <I2C0_IRQHandler+0x334>)
    15bc:	2208      	movs	r2, #8
    15be:	619a      	str	r2, [r3, #24]
			break;
    15c0:	bf00      	nop
	}
}
    15c2:	370c      	adds	r7, #12
    15c4:	46bd      	mov	sp, r7
    15c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ca:	4770      	bx	lr
    15cc:	10000030 	.word	0x10000030
    15d0:	4001c000 	.word	0x4001c000
    15d4:	10000e60 	.word	0x10000e60
    15d8:	10000de4 	.word	0x10000de4
    15dc:	1000002c 	.word	0x1000002c

000015e0 <I2C1_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void I2C1_IRQHandler(void) {
    15e0:	b480      	push	{r7}
    15e2:	b083      	sub	sp, #12
    15e4:	af00      	add	r7, sp, #0
	uint8_t StatValue;
	/* this handler deals with master read and master write only */
	StatValue = LPC_I2C1->I2STAT;
    15e6:	4bae      	ldr	r3, [pc, #696]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    15e8:	685b      	ldr	r3, [r3, #4]
    15ea:	71fb      	strb	r3, [r7, #7]
	switch (StatValue) {
    15ec:	79fb      	ldrb	r3, [r7, #7]
    15ee:	3b08      	subs	r3, #8
    15f0:	2b50      	cmp	r3, #80	; 0x50
    15f2:	f200 814b 	bhi.w	188c <I2C1_IRQHandler+0x2ac>
    15f6:	a201      	add	r2, pc, #4	; (adr r2, 15fc <I2C1_IRQHandler+0x1c>)
    15f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    15fc:	00001741 	.word	0x00001741
    1600:	0000188d 	.word	0x0000188d
    1604:	0000188d 	.word	0x0000188d
    1608:	0000188d 	.word	0x0000188d
    160c:	0000188d 	.word	0x0000188d
    1610:	0000188d 	.word	0x0000188d
    1614:	0000188d 	.word	0x0000188d
    1618:	0000188d 	.word	0x0000188d
    161c:	00001759 	.word	0x00001759
    1620:	0000188d 	.word	0x0000188d
    1624:	0000188d 	.word	0x0000188d
    1628:	0000188d 	.word	0x0000188d
    162c:	0000188d 	.word	0x0000188d
    1630:	0000188d 	.word	0x0000188d
    1634:	0000188d 	.word	0x0000188d
    1638:	0000188d 	.word	0x0000188d
    163c:	00001779 	.word	0x00001779
    1640:	0000188d 	.word	0x0000188d
    1644:	0000188d 	.word	0x0000188d
    1648:	0000188d 	.word	0x0000188d
    164c:	0000188d 	.word	0x0000188d
    1650:	0000188d 	.word	0x0000188d
    1654:	0000188d 	.word	0x0000188d
    1658:	0000188d 	.word	0x0000188d
    165c:	0000187f 	.word	0x0000187f
    1660:	0000188d 	.word	0x0000188d
    1664:	0000188d 	.word	0x0000188d
    1668:	0000188d 	.word	0x0000188d
    166c:	0000188d 	.word	0x0000188d
    1670:	0000188d 	.word	0x0000188d
    1674:	0000188d 	.word	0x0000188d
    1678:	0000188d 	.word	0x0000188d
    167c:	000017a9 	.word	0x000017a9
    1680:	0000188d 	.word	0x0000188d
    1684:	0000188d 	.word	0x0000188d
    1688:	0000188d 	.word	0x0000188d
    168c:	0000188d 	.word	0x0000188d
    1690:	0000188d 	.word	0x0000188d
    1694:	0000188d 	.word	0x0000188d
    1698:	0000188d 	.word	0x0000188d
    169c:	000017a9 	.word	0x000017a9
    16a0:	0000188d 	.word	0x0000188d
    16a4:	0000188d 	.word	0x0000188d
    16a8:	0000188d 	.word	0x0000188d
    16ac:	0000188d 	.word	0x0000188d
    16b0:	0000188d 	.word	0x0000188d
    16b4:	0000188d 	.word	0x0000188d
    16b8:	0000188d 	.word	0x0000188d
    16bc:	0000188d 	.word	0x0000188d
    16c0:	0000188d 	.word	0x0000188d
    16c4:	0000188d 	.word	0x0000188d
    16c8:	0000188d 	.word	0x0000188d
    16cc:	0000188d 	.word	0x0000188d
    16d0:	0000188d 	.word	0x0000188d
    16d4:	0000188d 	.word	0x0000188d
    16d8:	0000188d 	.word	0x0000188d
    16dc:	00001829 	.word	0x00001829
    16e0:	0000188d 	.word	0x0000188d
    16e4:	0000188d 	.word	0x0000188d
    16e8:	0000188d 	.word	0x0000188d
    16ec:	0000188d 	.word	0x0000188d
    16f0:	0000188d 	.word	0x0000188d
    16f4:	0000188d 	.word	0x0000188d
    16f8:	0000188d 	.word	0x0000188d
    16fc:	0000187f 	.word	0x0000187f
    1700:	0000188d 	.word	0x0000188d
    1704:	0000188d 	.word	0x0000188d
    1708:	0000188d 	.word	0x0000188d
    170c:	0000188d 	.word	0x0000188d
    1710:	0000188d 	.word	0x0000188d
    1714:	0000188d 	.word	0x0000188d
    1718:	0000188d 	.word	0x0000188d
    171c:	00001837 	.word	0x00001837
    1720:	0000188d 	.word	0x0000188d
    1724:	0000188d 	.word	0x0000188d
    1728:	0000188d 	.word	0x0000188d
    172c:	0000188d 	.word	0x0000188d
    1730:	0000188d 	.word	0x0000188d
    1734:	0000188d 	.word	0x0000188d
    1738:	0000188d 	.word	0x0000188d
    173c:	00001837 	.word	0x00001837
	case 0x08: /* A Start condition is issued. */
		LPC_I2C1->I2DAT = I2C1_MasterBuffer[0];
    1740:	4b57      	ldr	r3, [pc, #348]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    1742:	4a58      	ldr	r2, [pc, #352]	; (18a4 <I2C1_IRQHandler+0x2c4>)
    1744:	7812      	ldrb	r2, [r2, #0]
    1746:	b2d2      	uxtb	r2, r2
    1748:	609a      	str	r2, [r3, #8]
		LPC_I2C1->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    174a:	4b55      	ldr	r3, [pc, #340]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    174c:	2228      	movs	r2, #40	; 0x28
    174e:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = I2C_STARTED;
    1750:	4b55      	ldr	r3, [pc, #340]	; (18a8 <I2C1_IRQHandler+0x2c8>)
    1752:	2201      	movs	r2, #1
    1754:	601a      	str	r2, [r3, #0]
		break;
    1756:	e09d      	b.n	1894 <I2C1_IRQHandler+0x2b4>
	case 0x10: /* A repeated started is issued */
		if (!I2C1_Cmd) {
    1758:	4b54      	ldr	r3, [pc, #336]	; (18ac <I2C1_IRQHandler+0x2cc>)
    175a:	681b      	ldr	r3, [r3, #0]
    175c:	2b00      	cmp	r3, #0
    175e:	d104      	bne.n	176a <I2C1_IRQHandler+0x18a>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[2];
    1760:	4b4f      	ldr	r3, [pc, #316]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    1762:	4a50      	ldr	r2, [pc, #320]	; (18a4 <I2C1_IRQHandler+0x2c4>)
    1764:	7892      	ldrb	r2, [r2, #2]
    1766:	b2d2      	uxtb	r2, r2
    1768:	609a      	str	r2, [r3, #8]
		}
		LPC_I2C1->I2CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    176a:	4b4d      	ldr	r3, [pc, #308]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    176c:	2228      	movs	r2, #40	; 0x28
    176e:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = I2C_RESTARTED;
    1770:	4b4d      	ldr	r3, [pc, #308]	; (18a8 <I2C1_IRQHandler+0x2c8>)
    1772:	2202      	movs	r2, #2
    1774:	601a      	str	r2, [r3, #0]
		break;
    1776:	e08d      	b.n	1894 <I2C1_IRQHandler+0x2b4>
	case 0x18: /* Regardless, it's a ACK */
		if (I2C1_MasterState == I2C_STARTED) {
    1778:	4b4b      	ldr	r3, [pc, #300]	; (18a8 <I2C1_IRQHandler+0x2c8>)
    177a:	681b      	ldr	r3, [r3, #0]
    177c:	2b01      	cmp	r3, #1
    177e:	d10f      	bne.n	17a0 <I2C1_IRQHandler+0x1c0>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[1 + WrIndex_1];
    1780:	4a47      	ldr	r2, [pc, #284]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    1782:	4b4b      	ldr	r3, [pc, #300]	; (18b0 <I2C1_IRQHandler+0x2d0>)
    1784:	681b      	ldr	r3, [r3, #0]
    1786:	3301      	adds	r3, #1
    1788:	4946      	ldr	r1, [pc, #280]	; (18a4 <I2C1_IRQHandler+0x2c4>)
    178a:	5ccb      	ldrb	r3, [r1, r3]
    178c:	b2db      	uxtb	r3, r3
    178e:	6093      	str	r3, [r2, #8]
			WrIndex_1++;
    1790:	4b47      	ldr	r3, [pc, #284]	; (18b0 <I2C1_IRQHandler+0x2d0>)
    1792:	681b      	ldr	r3, [r3, #0]
    1794:	3301      	adds	r3, #1
    1796:	4a46      	ldr	r2, [pc, #280]	; (18b0 <I2C1_IRQHandler+0x2d0>)
    1798:	6013      	str	r3, [r2, #0]
			I2C1_MasterState = DATA_ACK;
    179a:	4b43      	ldr	r3, [pc, #268]	; (18a8 <I2C1_IRQHandler+0x2c8>)
    179c:	2204      	movs	r2, #4
    179e:	601a      	str	r2, [r3, #0]
		}
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    17a0:	4b3f      	ldr	r3, [pc, #252]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    17a2:	2208      	movs	r2, #8
    17a4:	619a      	str	r2, [r3, #24]
		break;
    17a6:	e075      	b.n	1894 <I2C1_IRQHandler+0x2b4>
	case 0x28: /* Data byte has been transmitted, regardless ACK or NACK */
	case 0x30:
		if (WrIndex_1 != I2C1_WriteLength) {
    17a8:	4b41      	ldr	r3, [pc, #260]	; (18b0 <I2C1_IRQHandler+0x2d0>)
    17aa:	681a      	ldr	r2, [r3, #0]
    17ac:	4b41      	ldr	r3, [pc, #260]	; (18b4 <I2C1_IRQHandler+0x2d4>)
    17ae:	681b      	ldr	r3, [r3, #0]
    17b0:	429a      	cmp	r2, r3
    17b2:	d024      	beq.n	17fe <I2C1_IRQHandler+0x21e>
			LPC_I2C1->I2DAT = I2C1_MasterBuffer[1 + WrIndex_1]; /* this should be the last one */
    17b4:	4a3a      	ldr	r2, [pc, #232]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    17b6:	4b3e      	ldr	r3, [pc, #248]	; (18b0 <I2C1_IRQHandler+0x2d0>)
    17b8:	681b      	ldr	r3, [r3, #0]
    17ba:	3301      	adds	r3, #1
    17bc:	4939      	ldr	r1, [pc, #228]	; (18a4 <I2C1_IRQHandler+0x2c4>)
    17be:	5ccb      	ldrb	r3, [r1, r3]
    17c0:	b2db      	uxtb	r3, r3
    17c2:	6093      	str	r3, [r2, #8]
			WrIndex_1++;
    17c4:	4b3a      	ldr	r3, [pc, #232]	; (18b0 <I2C1_IRQHandler+0x2d0>)
    17c6:	681b      	ldr	r3, [r3, #0]
    17c8:	3301      	adds	r3, #1
    17ca:	4a39      	ldr	r2, [pc, #228]	; (18b0 <I2C1_IRQHandler+0x2d0>)
    17cc:	6013      	str	r3, [r2, #0]
			if (WrIndex_1 != I2C1_WriteLength) {
    17ce:	4b38      	ldr	r3, [pc, #224]	; (18b0 <I2C1_IRQHandler+0x2d0>)
    17d0:	681a      	ldr	r2, [r3, #0]
    17d2:	4b38      	ldr	r3, [pc, #224]	; (18b4 <I2C1_IRQHandler+0x2d4>)
    17d4:	681b      	ldr	r3, [r3, #0]
    17d6:	429a      	cmp	r2, r3
    17d8:	d003      	beq.n	17e2 <I2C1_IRQHandler+0x202>
				I2C1_MasterState = DATA_ACK;
    17da:	4b33      	ldr	r3, [pc, #204]	; (18a8 <I2C1_IRQHandler+0x2c8>)
    17dc:	2204      	movs	r2, #4
    17de:	601a      	str	r2, [r3, #0]
    17e0:	e01e      	b.n	1820 <I2C1_IRQHandler+0x240>
			} else {
				I2C1_MasterState = DATA_NACK;
    17e2:	4b31      	ldr	r3, [pc, #196]	; (18a8 <I2C1_IRQHandler+0x2c8>)
    17e4:	2205      	movs	r2, #5
    17e6:	601a      	str	r2, [r3, #0]
				if (I2C1_ReadLength != 0) {
    17e8:	4b33      	ldr	r3, [pc, #204]	; (18b8 <I2C1_IRQHandler+0x2d8>)
    17ea:	681b      	ldr	r3, [r3, #0]
    17ec:	2b00      	cmp	r3, #0
    17ee:	d017      	beq.n	1820 <I2C1_IRQHandler+0x240>
					LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    17f0:	4b2b      	ldr	r3, [pc, #172]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    17f2:	2220      	movs	r2, #32
    17f4:	601a      	str	r2, [r3, #0]
					I2C1_MasterState = I2C_REPEATED_START;
    17f6:	4b2c      	ldr	r3, [pc, #176]	; (18a8 <I2C1_IRQHandler+0x2c8>)
    17f8:	2203      	movs	r2, #3
    17fa:	601a      	str	r2, [r3, #0]
    17fc:	e010      	b.n	1820 <I2C1_IRQHandler+0x240>
				}
			}
		} else {
			if (I2C1_ReadLength != 0) {
    17fe:	4b2e      	ldr	r3, [pc, #184]	; (18b8 <I2C1_IRQHandler+0x2d8>)
    1800:	681b      	ldr	r3, [r3, #0]
    1802:	2b00      	cmp	r3, #0
    1804:	d006      	beq.n	1814 <I2C1_IRQHandler+0x234>
				LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Repeated-start flag */
    1806:	4b26      	ldr	r3, [pc, #152]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    1808:	2220      	movs	r2, #32
    180a:	601a      	str	r2, [r3, #0]
				I2C1_MasterState = I2C_REPEATED_START;
    180c:	4b26      	ldr	r3, [pc, #152]	; (18a8 <I2C1_IRQHandler+0x2c8>)
    180e:	2203      	movs	r2, #3
    1810:	601a      	str	r2, [r3, #0]
    1812:	e005      	b.n	1820 <I2C1_IRQHandler+0x240>
			} else {
				I2C1_MasterState = DATA_NACK;
    1814:	4b24      	ldr	r3, [pc, #144]	; (18a8 <I2C1_IRQHandler+0x2c8>)
    1816:	2205      	movs	r2, #5
    1818:	601a      	str	r2, [r3, #0]
				LPC_I2C1->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    181a:	4b21      	ldr	r3, [pc, #132]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    181c:	2210      	movs	r2, #16
    181e:	601a      	str	r2, [r3, #0]
			}
		}
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    1820:	4b1f      	ldr	r3, [pc, #124]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    1822:	2208      	movs	r2, #8
    1824:	619a      	str	r2, [r3, #24]
		break;
    1826:	e035      	b.n	1894 <I2C1_IRQHandler+0x2b4>
	case 0x40: /* Master Receive, SLA_R has been sent */
		LPC_I2C1->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    1828:	4b1d      	ldr	r3, [pc, #116]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    182a:	2204      	movs	r2, #4
    182c:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    182e:	4b1c      	ldr	r3, [pc, #112]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    1830:	2208      	movs	r2, #8
    1832:	619a      	str	r2, [r3, #24]
		break;
    1834:	e02e      	b.n	1894 <I2C1_IRQHandler+0x2b4>
	case 0x50: /* Data byte has been received, regardless following ACK or NACK */
	case 0x58:
		I2C1_MasterBuffer[3 + RdIndex_1] = LPC_I2C1->I2DAT;
    1836:	4b21      	ldr	r3, [pc, #132]	; (18bc <I2C1_IRQHandler+0x2dc>)
    1838:	681b      	ldr	r3, [r3, #0]
    183a:	3303      	adds	r3, #3
    183c:	4a18      	ldr	r2, [pc, #96]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    183e:	6892      	ldr	r2, [r2, #8]
    1840:	b2d1      	uxtb	r1, r2
    1842:	4a18      	ldr	r2, [pc, #96]	; (18a4 <I2C1_IRQHandler+0x2c4>)
    1844:	54d1      	strb	r1, [r2, r3]
		RdIndex_1++;
    1846:	4b1d      	ldr	r3, [pc, #116]	; (18bc <I2C1_IRQHandler+0x2dc>)
    1848:	681b      	ldr	r3, [r3, #0]
    184a:	3301      	adds	r3, #1
    184c:	4a1b      	ldr	r2, [pc, #108]	; (18bc <I2C1_IRQHandler+0x2dc>)
    184e:	6013      	str	r3, [r2, #0]
		if (RdIndex_1 != I2C1_ReadLength) {
    1850:	4b1a      	ldr	r3, [pc, #104]	; (18bc <I2C1_IRQHandler+0x2dc>)
    1852:	681a      	ldr	r2, [r3, #0]
    1854:	4b18      	ldr	r3, [pc, #96]	; (18b8 <I2C1_IRQHandler+0x2d8>)
    1856:	681b      	ldr	r3, [r3, #0]
    1858:	429a      	cmp	r2, r3
    185a:	d003      	beq.n	1864 <I2C1_IRQHandler+0x284>
			I2C1_MasterState = DATA_ACK;
    185c:	4b12      	ldr	r3, [pc, #72]	; (18a8 <I2C1_IRQHandler+0x2c8>)
    185e:	2204      	movs	r2, #4
    1860:	601a      	str	r2, [r3, #0]
    1862:	e005      	b.n	1870 <I2C1_IRQHandler+0x290>
		} else {
			RdIndex_1 = 0;
    1864:	4b15      	ldr	r3, [pc, #84]	; (18bc <I2C1_IRQHandler+0x2dc>)
    1866:	2200      	movs	r2, #0
    1868:	601a      	str	r2, [r3, #0]
			I2C1_MasterState = DATA_NACK;
    186a:	4b0f      	ldr	r3, [pc, #60]	; (18a8 <I2C1_IRQHandler+0x2c8>)
    186c:	2205      	movs	r2, #5
    186e:	601a      	str	r2, [r3, #0]
		}
		LPC_I2C1->I2CONSET = I2CONSET_AA; /* assert ACK after data is received */
    1870:	4b0b      	ldr	r3, [pc, #44]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    1872:	2204      	movs	r2, #4
    1874:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    1876:	4b0a      	ldr	r3, [pc, #40]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    1878:	2208      	movs	r2, #8
    187a:	619a      	str	r2, [r3, #24]
		break;
    187c:	e00a      	b.n	1894 <I2C1_IRQHandler+0x2b4>
	case 0x20: /* regardless, it's a NACK */
	case 0x48:
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    187e:	4b08      	ldr	r3, [pc, #32]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    1880:	2208      	movs	r2, #8
    1882:	619a      	str	r2, [r3, #24]
		I2C1_MasterState = DATA_NACK;
    1884:	4b08      	ldr	r3, [pc, #32]	; (18a8 <I2C1_IRQHandler+0x2c8>)
    1886:	2205      	movs	r2, #5
    1888:	601a      	str	r2, [r3, #0]
		break;
    188a:	e003      	b.n	1894 <I2C1_IRQHandler+0x2b4>
	case 0x38: /* Arbitration lost, in this example, we don't
	 deal with multiple master situation */
	default:
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC;
    188c:	4b04      	ldr	r3, [pc, #16]	; (18a0 <I2C1_IRQHandler+0x2c0>)
    188e:	2208      	movs	r2, #8
    1890:	619a      	str	r2, [r3, #24]
		break;
    1892:	bf00      	nop
	}
}
    1894:	370c      	adds	r7, #12
    1896:	46bd      	mov	sp, r7
    1898:	f85d 7b04 	ldr.w	r7, [sp], #4
    189c:	4770      	bx	lr
    189e:	bf00      	nop
    18a0:	4005c000 	.word	0x4005c000
    18a4:	10000e40 	.word	0x10000e40
    18a8:	10000e18 	.word	0x10000e18
    18ac:	10000e14 	.word	0x10000e14
    18b0:	10000e84 	.word	0x10000e84
    18b4:	10000dd4 	.word	0x10000dd4
    18b8:	10000de8 	.word	0x10000de8
    18bc:	10000dd8 	.word	0x10000dd8

000018c0 <I2CStart>:
 **
 ** parameters:			None
 ** Returned value:		true or false, return false if timed out
 **
 *****************************************************************************/
uint32_t I2CStart(uint8_t port) {
    18c0:	b480      	push	{r7}
    18c2:	b085      	sub	sp, #20
    18c4:	af00      	add	r7, sp, #0
    18c6:	4603      	mov	r3, r0
    18c8:	71fb      	strb	r3, [r7, #7]
	uint32_t timeout = 0;
    18ca:	2300      	movs	r3, #0
    18cc:	60fb      	str	r3, [r7, #12]
	uint32_t retVal = 0;
    18ce:	2300      	movs	r3, #0
    18d0:	60bb      	str	r3, [r7, #8]
	if (port == 0){
    18d2:	79fb      	ldrb	r3, [r7, #7]
    18d4:	2b00      	cmp	r3, #0
    18d6:	d116      	bne.n	1906 <I2CStart+0x46>
			/*--- Issue a start condition ---*/
			LPC_I2C0->I2CONSET = I2CONSET_STA; /* Set Start flag */
    18d8:	4b1b      	ldr	r3, [pc, #108]	; (1948 <I2CStart+0x88>)
    18da:	2220      	movs	r2, #32
    18dc:	601a      	str	r2, [r3, #0]
			/*--- Wait until START transmitted ---*/
			while (1) {
				if (I2C0_MasterState == I2C_STARTED) {
    18de:	4b1b      	ldr	r3, [pc, #108]	; (194c <I2CStart+0x8c>)
    18e0:	681b      	ldr	r3, [r3, #0]
    18e2:	2b01      	cmp	r3, #1
    18e4:	d102      	bne.n	18ec <I2CStart+0x2c>
					retVal = 1;
    18e6:	2301      	movs	r3, #1
    18e8:	60bb      	str	r3, [r7, #8]
					break;
    18ea:	e00a      	b.n	1902 <I2CStart+0x42>
				}
				if (timeout >= MAX_TIMEOUT) {
    18ec:	68fb      	ldr	r3, [r7, #12]
    18ee:	4a18      	ldr	r2, [pc, #96]	; (1950 <I2CStart+0x90>)
    18f0:	4293      	cmp	r3, r2
    18f2:	d902      	bls.n	18fa <I2CStart+0x3a>
					retVal = 0;
    18f4:	2300      	movs	r3, #0
    18f6:	60bb      	str	r3, [r7, #8]
					break;
    18f8:	e003      	b.n	1902 <I2CStart+0x42>
				}
				timeout++;
    18fa:	68fb      	ldr	r3, [r7, #12]
    18fc:	3301      	adds	r3, #1
    18fe:	60fb      	str	r3, [r7, #12]
			}
    1900:	e7ed      	b.n	18de <I2CStart+0x1e>
			return (retVal);
    1902:	68bb      	ldr	r3, [r7, #8]
    1904:	e01a      	b.n	193c <I2CStart+0x7c>
		}
	else if (port == 1){
    1906:	79fb      	ldrb	r3, [r7, #7]
    1908:	2b01      	cmp	r3, #1
    190a:	d116      	bne.n	193a <I2CStart+0x7a>
		/*--- Issue a start condition ---*/
		LPC_I2C1->I2CONSET = I2CONSET_STA; /* Set Start flag */
    190c:	4b11      	ldr	r3, [pc, #68]	; (1954 <I2CStart+0x94>)
    190e:	2220      	movs	r2, #32
    1910:	601a      	str	r2, [r3, #0]
		/*--- Wait until START transmitted ---*/
		while (1) {
			if (I2C1_MasterState == I2C_STARTED) {
    1912:	4b11      	ldr	r3, [pc, #68]	; (1958 <I2CStart+0x98>)
    1914:	681b      	ldr	r3, [r3, #0]
    1916:	2b01      	cmp	r3, #1
    1918:	d102      	bne.n	1920 <I2CStart+0x60>
				retVal = 1;
    191a:	2301      	movs	r3, #1
    191c:	60bb      	str	r3, [r7, #8]
				break;
    191e:	e00a      	b.n	1936 <I2CStart+0x76>
			}
			if (timeout >= MAX_TIMEOUT) {
    1920:	68fb      	ldr	r3, [r7, #12]
    1922:	4a0b      	ldr	r2, [pc, #44]	; (1950 <I2CStart+0x90>)
    1924:	4293      	cmp	r3, r2
    1926:	d902      	bls.n	192e <I2CStart+0x6e>
				retVal = 0;
    1928:	2300      	movs	r3, #0
    192a:	60bb      	str	r3, [r7, #8]
				break;
    192c:	e003      	b.n	1936 <I2CStart+0x76>
			}
			timeout++;
    192e:	68fb      	ldr	r3, [r7, #12]
    1930:	3301      	adds	r3, #1
    1932:	60fb      	str	r3, [r7, #12]
		}
    1934:	e7ed      	b.n	1912 <I2CStart+0x52>
		return (retVal);
    1936:	68bb      	ldr	r3, [r7, #8]
    1938:	e000      	b.n	193c <I2CStart+0x7c>
	}
	return 0;
    193a:	2300      	movs	r3, #0
}
    193c:	4618      	mov	r0, r3
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr
    1948:	4001c000 	.word	0x4001c000
    194c:	1000002c 	.word	0x1000002c
    1950:	00fffffe 	.word	0x00fffffe
    1954:	4005c000 	.word	0x4005c000
    1958:	10000e18 	.word	0x10000e18

0000195c <I2CStop>:
 **
 ** parameters:			None
 ** Returned value:		true or never return
 **
 *****************************************************************************/
uint32_t I2CStop(uint8_t port) {
    195c:	b480      	push	{r7}
    195e:	b083      	sub	sp, #12
    1960:	af00      	add	r7, sp, #0
    1962:	4603      	mov	r3, r0
    1964:	71fb      	strb	r3, [r7, #7]
	if (port == 0){
    1966:	79fb      	ldrb	r3, [r7, #7]
    1968:	2b00      	cmp	r3, #0
    196a:	d10e      	bne.n	198a <I2CStop+0x2e>
		LPC_I2C0->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    196c:	4b13      	ldr	r3, [pc, #76]	; (19bc <I2CStop+0x60>)
    196e:	2210      	movs	r2, #16
    1970:	601a      	str	r2, [r3, #0]
		LPC_I2C0->I2CONCLR = I2CONCLR_SIC; /* Clear SI flag */
    1972:	4b12      	ldr	r3, [pc, #72]	; (19bc <I2CStop+0x60>)
    1974:	2208      	movs	r2, #8
    1976:	619a      	str	r2, [r3, #24]
		/*--- Wait for STOP detected ---*/
		while (LPC_I2C0->I2CONSET & I2CONSET_STO);
    1978:	bf00      	nop
    197a:	4b10      	ldr	r3, [pc, #64]	; (19bc <I2CStop+0x60>)
    197c:	681b      	ldr	r3, [r3, #0]
    197e:	f003 0310 	and.w	r3, r3, #16
    1982:	2b00      	cmp	r3, #0
    1984:	d1f9      	bne.n	197a <I2CStop+0x1e>
		return 1;
    1986:	2301      	movs	r3, #1
    1988:	e012      	b.n	19b0 <I2CStop+0x54>
	}else if(port == 1){
    198a:	79fb      	ldrb	r3, [r7, #7]
    198c:	2b01      	cmp	r3, #1
    198e:	d10e      	bne.n	19ae <I2CStop+0x52>
		LPC_I2C1->I2CONSET = I2CONSET_STO; /* Set Stop flag */
    1990:	4b0b      	ldr	r3, [pc, #44]	; (19c0 <I2CStop+0x64>)
    1992:	2210      	movs	r2, #16
    1994:	601a      	str	r2, [r3, #0]
		LPC_I2C1->I2CONCLR = I2CONCLR_SIC; /* Clear SI flag */
    1996:	4b0a      	ldr	r3, [pc, #40]	; (19c0 <I2CStop+0x64>)
    1998:	2208      	movs	r2, #8
    199a:	619a      	str	r2, [r3, #24]
		/*--- Wait for STOP detected ---*/
		while (LPC_I2C1->I2CONSET & I2CONSET_STO);
    199c:	bf00      	nop
    199e:	4b08      	ldr	r3, [pc, #32]	; (19c0 <I2CStop+0x64>)
    19a0:	681b      	ldr	r3, [r3, #0]
    19a2:	f003 0310 	and.w	r3, r3, #16
    19a6:	2b00      	cmp	r3, #0
    19a8:	d1f9      	bne.n	199e <I2CStop+0x42>
		return 1;
    19aa:	2301      	movs	r3, #1
    19ac:	e000      	b.n	19b0 <I2CStop+0x54>
	}
	return 0;
    19ae:	2300      	movs	r3, #0
}
    19b0:	4618      	mov	r0, r3
    19b2:	370c      	adds	r7, #12
    19b4:	46bd      	mov	sp, r7
    19b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    19ba:	4770      	bx	lr
    19bc:	4001c000 	.word	0x4001c000
    19c0:	4005c000 	.word	0x4005c000

000019c4 <I2CInit>:
 ** parameters:			I2c mode is either MASTER or SLAVE
 ** Returned value:		true or false, return false if the I2C
 **				interrupt handler was not installed correctly
 **
 *****************************************************************************/
uint32_t I2CInit(uint8_t port,uint32_t I2cMode) {
    19c4:	b580      	push	{r7, lr}
    19c6:	b082      	sub	sp, #8
    19c8:	af00      	add	r7, sp, #0
    19ca:	4603      	mov	r3, r0
    19cc:	6039      	str	r1, [r7, #0]
    19ce:	71fb      	strb	r3, [r7, #7]
	if (port == 0){
    19d0:	79fb      	ldrb	r3, [r7, #7]
    19d2:	2b00      	cmp	r3, #0
    19d4:	d12a      	bne.n	1a2c <I2CInit+0x68>
		LPC_SC->PCONP |= (1 << 7);
    19d6:	4a34      	ldr	r2, [pc, #208]	; (1aa8 <I2CInit+0xe4>)
    19d8:	4b33      	ldr	r3, [pc, #204]	; (1aa8 <I2CInit+0xe4>)
    19da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    19de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    19e2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	    //LPC_PINCON->PINSEL1 &= ~0x03C00000;
	    //LPC_PINCON->PINSEL1 |=  0x01400000;
		/* set PIO0.27 and PIO0.28 to I2C0 SDA and SCL */
		/* function to 01 on both SDA and SCL. */
		LPC_PINCON->PINSEL1 &= ~((0x03<<22)|(0x03<<24));
    19e6:	4a31      	ldr	r2, [pc, #196]	; (1aac <I2CInit+0xe8>)
    19e8:	4b30      	ldr	r3, [pc, #192]	; (1aac <I2CInit+0xe8>)
    19ea:	685b      	ldr	r3, [r3, #4]
    19ec:	f023 7370 	bic.w	r3, r3, #62914560	; 0x3c00000
    19f0:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINSEL1 |= ((0x01<<22)|(0x01<<24));
    19f2:	4a2e      	ldr	r2, [pc, #184]	; (1aac <I2CInit+0xe8>)
    19f4:	4b2d      	ldr	r3, [pc, #180]	; (1aac <I2CInit+0xe8>)
    19f6:	685b      	ldr	r3, [r3, #4]
    19f8:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
    19fc:	6053      	str	r3, [r2, #4]
	    //LPC_SC->PCLKSEL0 &= ~(3 << 14); // clear bits
	    //LPC_SC->PCLKSEL0 |=  (3 << 14); // set to "01" (full speed)
		//PINMODE is not required for P0.27, P0.28 these are dedicated open drain I2C pins.
		/*--- Clear flags ---*/
		LPC_I2C0->I2CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC
    19fe:	4b2c      	ldr	r3, [pc, #176]	; (1ab0 <I2CInit+0xec>)
    1a00:	226c      	movs	r2, #108	; 0x6c
    1a02:	619a      	str	r2, [r3, #24]
				| I2CONCLR_I2ENC;
		/*--- Reset registers ---*/
		LPC_PINCON->I2CPADCFG &= ~((0x1<<0)|(0x1<<2));
    1a04:	4a29      	ldr	r2, [pc, #164]	; (1aac <I2CInit+0xe8>)
    1a06:	4b29      	ldr	r3, [pc, #164]	; (1aac <I2CInit+0xe8>)
    1a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    1a0a:	f023 0305 	bic.w	r3, r3, #5
    1a0e:	67d3      	str	r3, [r2, #124]	; 0x7c
		LPC_I2C0->I2SCLL   = I2SCLL_SCLL;
    1a10:	4b27      	ldr	r3, [pc, #156]	; (1ab0 <I2CInit+0xec>)
    1a12:	2280      	movs	r2, #128	; 0x80
    1a14:	615a      	str	r2, [r3, #20]
		LPC_I2C0->I2SCLH   = I2SCLH_SCLH;
    1a16:	4b26      	ldr	r3, [pc, #152]	; (1ab0 <I2CInit+0xec>)
    1a18:	2280      	movs	r2, #128	; 0x80
    1a1a:	611a      	str	r2, [r3, #16]
		/* Install interrupt handler */
		NVIC_EnableIRQ(I2C0_IRQn);
    1a1c:	200a      	movs	r0, #10
    1a1e:	f7ff fc25 	bl	126c <NVIC_EnableIRQ>
		LPC_I2C0->I2CONSET = I2CONSET_I2EN;
    1a22:	4b23      	ldr	r3, [pc, #140]	; (1ab0 <I2CInit+0xec>)
    1a24:	2240      	movs	r2, #64	; 0x40
    1a26:	601a      	str	r2, [r3, #0]
		return (1);
    1a28:	2301      	movs	r3, #1
    1a2a:	e039      	b.n	1aa0 <I2CInit+0xdc>
	}
	else if (port == 1){
    1a2c:	79fb      	ldrb	r3, [r7, #7]
    1a2e:	2b01      	cmp	r3, #1
    1a30:	d136      	bne.n	1aa0 <I2CInit+0xdc>
		LPC_SC->PCONP |= (1 << 19);
    1a32:	4a1d      	ldr	r2, [pc, #116]	; (1aa8 <I2CInit+0xe4>)
    1a34:	4b1c      	ldr	r3, [pc, #112]	; (1aa8 <I2CInit+0xe4>)
    1a36:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1a3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1a3e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		/* set PIO0.19 and PIO0.20 to I2C1 SDA and SCL */
		/* function to 11 on both SDA and SCL. */
		LPC_PINCON->PINSEL1 &= ~((0x3 << 6) | (0x3 << 8));
    1a42:	4a1a      	ldr	r2, [pc, #104]	; (1aac <I2CInit+0xe8>)
    1a44:	4b19      	ldr	r3, [pc, #100]	; (1aac <I2CInit+0xe8>)
    1a46:	685b      	ldr	r3, [r3, #4]
    1a48:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
    1a4c:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINSEL1 |= ((0x3 << 6) | (0x3 << 8));
    1a4e:	4a17      	ldr	r2, [pc, #92]	; (1aac <I2CInit+0xe8>)
    1a50:	4b16      	ldr	r3, [pc, #88]	; (1aac <I2CInit+0xe8>)
    1a52:	685b      	ldr	r3, [r3, #4]
    1a54:	f443 7370 	orr.w	r3, r3, #960	; 0x3c0
    1a58:	6053      	str	r3, [r2, #4]
		LPC_PINCON->PINMODE1 &= ~((0x3 << 6) | (0x3 << 8));
    1a5a:	4a14      	ldr	r2, [pc, #80]	; (1aac <I2CInit+0xe8>)
    1a5c:	4b13      	ldr	r3, [pc, #76]	; (1aac <I2CInit+0xe8>)
    1a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1a60:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
    1a64:	6453      	str	r3, [r2, #68]	; 0x44
		LPC_PINCON->PINMODE1 |= ((0x2 << 6) | (0x2 << 8)); /* No pull-up no pull-down */
    1a66:	4a11      	ldr	r2, [pc, #68]	; (1aac <I2CInit+0xe8>)
    1a68:	4b10      	ldr	r3, [pc, #64]	; (1aac <I2CInit+0xe8>)
    1a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1a6c:	f443 7320 	orr.w	r3, r3, #640	; 0x280
    1a70:	6453      	str	r3, [r2, #68]	; 0x44
		LPC_PINCON->PINMODE_OD0 |= ((0x1 << 19) | (0x1 << 20));
    1a72:	4a0e      	ldr	r2, [pc, #56]	; (1aac <I2CInit+0xe8>)
    1a74:	4b0d      	ldr	r3, [pc, #52]	; (1aac <I2CInit+0xe8>)
    1a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    1a78:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
    1a7c:	6693      	str	r3, [r2, #104]	; 0x68

		/*--- Clear flags ---*/
		LPC_I2C1->I2CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC
    1a7e:	4b0d      	ldr	r3, [pc, #52]	; (1ab4 <I2CInit+0xf0>)
    1a80:	226c      	movs	r2, #108	; 0x6c
    1a82:	619a      	str	r2, [r3, #24]
				| I2CONCLR_I2ENC;

		/*--- Reset registers ---*/
		LPC_I2C1->I2SCLL = I2SCLL_SCLL;
    1a84:	4b0b      	ldr	r3, [pc, #44]	; (1ab4 <I2CInit+0xf0>)
    1a86:	2280      	movs	r2, #128	; 0x80
    1a88:	615a      	str	r2, [r3, #20]
		LPC_I2C1->I2SCLH = I2SCLH_SCLH;
    1a8a:	4b0a      	ldr	r3, [pc, #40]	; (1ab4 <I2CInit+0xf0>)
    1a8c:	2280      	movs	r2, #128	; 0x80
    1a8e:	611a      	str	r2, [r3, #16]

		/* Install interrupt handler */
		NVIC_EnableIRQ(I2C1_IRQn);
    1a90:	200b      	movs	r0, #11
    1a92:	f7ff fbeb 	bl	126c <NVIC_EnableIRQ>

		LPC_I2C1->I2CONSET = I2CONSET_I2EN;
    1a96:	4b07      	ldr	r3, [pc, #28]	; (1ab4 <I2CInit+0xf0>)
    1a98:	2240      	movs	r2, #64	; 0x40
    1a9a:	601a      	str	r2, [r3, #0]
		return (1);
    1a9c:	2301      	movs	r3, #1
    1a9e:	e7ff      	b.n	1aa0 <I2CInit+0xdc>
	}
}
    1aa0:	4618      	mov	r0, r3
    1aa2:	3708      	adds	r7, #8
    1aa4:	46bd      	mov	sp, r7
    1aa6:	bd80      	pop	{r7, pc}
    1aa8:	400fc000 	.word	0x400fc000
    1aac:	4002c000 	.word	0x4002c000
    1ab0:	4001c000 	.word	0x4001c000
    1ab4:	4005c000 	.word	0x4005c000

00001ab8 <I2CEngine>:
 ** Returned value:		true or false, return false only if the
 **				start condition can never be generated and
 **				timed out.
 **
 *****************************************************************************/
uint32_t I2CEngine(uint8_t port) {
    1ab8:	b580      	push	{r7, lr}
    1aba:	b084      	sub	sp, #16
    1abc:	af00      	add	r7, sp, #0
    1abe:	4603      	mov	r3, r0
    1ac0:	71fb      	strb	r3, [r7, #7]
	int timeout = 0;
    1ac2:	2300      	movs	r3, #0
    1ac4:	60fb      	str	r3, [r7, #12]
	if (port == 0){
    1ac6:	79fb      	ldrb	r3, [r7, #7]
    1ac8:	2b00      	cmp	r3, #0
    1aca:	d12a      	bne.n	1b22 <I2CEngine+0x6a>
			I2C0_MasterState = I2C_IDLE;
    1acc:	4b2a      	ldr	r3, [pc, #168]	; (1b78 <I2CEngine+0xc0>)
    1ace:	2200      	movs	r2, #0
    1ad0:	601a      	str	r2, [r3, #0]
			RdIndex_0 = 0;
    1ad2:	4b2a      	ldr	r3, [pc, #168]	; (1b7c <I2CEngine+0xc4>)
    1ad4:	2200      	movs	r2, #0
    1ad6:	601a      	str	r2, [r3, #0]
			WrIndex_0 = 0;
    1ad8:	4b29      	ldr	r3, [pc, #164]	; (1b80 <I2CEngine+0xc8>)
    1ada:	2200      	movs	r2, #0
    1adc:	601a      	str	r2, [r3, #0]
			if (I2CStart(port) != 1) {
    1ade:	79fb      	ldrb	r3, [r7, #7]
    1ae0:	4618      	mov	r0, r3
    1ae2:	f7ff feed 	bl	18c0 <I2CStart>
    1ae6:	4603      	mov	r3, r0
    1ae8:	2b01      	cmp	r3, #1
    1aea:	d005      	beq.n	1af8 <I2CEngine+0x40>
				I2CStop(port);
    1aec:	79fb      	ldrb	r3, [r7, #7]
    1aee:	4618      	mov	r0, r3
    1af0:	f7ff ff34 	bl	195c <I2CStop>
				return (0);
    1af4:	2300      	movs	r3, #0
    1af6:	e03a      	b.n	1b6e <I2CEngine+0xb6>
			}

			while (1) {
				if (I2C0_MasterState == DATA_NACK) {
    1af8:	4b1f      	ldr	r3, [pc, #124]	; (1b78 <I2CEngine+0xc0>)
    1afa:	681b      	ldr	r3, [r3, #0]
    1afc:	2b05      	cmp	r3, #5
    1afe:	d104      	bne.n	1b0a <I2CEngine+0x52>
					I2CStop(port);
    1b00:	79fb      	ldrb	r3, [r7, #7]
    1b02:	4618      	mov	r0, r3
    1b04:	f7ff ff2a 	bl	195c <I2CStop>
					break;
    1b08:	e009      	b.n	1b1e <I2CEngine+0x66>
				}
				if (timeout >= 0xFFFF) {
    1b0a:	68fb      	ldr	r3, [r7, #12]
    1b0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    1b10:	4293      	cmp	r3, r2
    1b12:	dd00      	ble.n	1b16 <I2CEngine+0x5e>
					break;
    1b14:	e003      	b.n	1b1e <I2CEngine+0x66>
				}
				timeout++;
    1b16:	68fb      	ldr	r3, [r7, #12]
    1b18:	3301      	adds	r3, #1
    1b1a:	60fb      	str	r3, [r7, #12]
			}
    1b1c:	e7ec      	b.n	1af8 <I2CEngine+0x40>
			return (1);
    1b1e:	2301      	movs	r3, #1
    1b20:	e025      	b.n	1b6e <I2CEngine+0xb6>
		}
	else if (port == 1){
    1b22:	79fb      	ldrb	r3, [r7, #7]
    1b24:	2b01      	cmp	r3, #1
    1b26:	d121      	bne.n	1b6c <I2CEngine+0xb4>
		I2C1_MasterState = I2C_IDLE;
    1b28:	4b16      	ldr	r3, [pc, #88]	; (1b84 <I2CEngine+0xcc>)
    1b2a:	2200      	movs	r2, #0
    1b2c:	601a      	str	r2, [r3, #0]
		RdIndex_1 = 0;
    1b2e:	4b16      	ldr	r3, [pc, #88]	; (1b88 <I2CEngine+0xd0>)
    1b30:	2200      	movs	r2, #0
    1b32:	601a      	str	r2, [r3, #0]
		WrIndex_1 = 0;
    1b34:	4b15      	ldr	r3, [pc, #84]	; (1b8c <I2CEngine+0xd4>)
    1b36:	2200      	movs	r2, #0
    1b38:	601a      	str	r2, [r3, #0]
		if (I2CStart(port) != 1) {
    1b3a:	79fb      	ldrb	r3, [r7, #7]
    1b3c:	4618      	mov	r0, r3
    1b3e:	f7ff febf 	bl	18c0 <I2CStart>
    1b42:	4603      	mov	r3, r0
    1b44:	2b01      	cmp	r3, #1
    1b46:	d005      	beq.n	1b54 <I2CEngine+0x9c>
			I2CStop(port);
    1b48:	79fb      	ldrb	r3, [r7, #7]
    1b4a:	4618      	mov	r0, r3
    1b4c:	f7ff ff06 	bl	195c <I2CStop>
			return (0);
    1b50:	2300      	movs	r3, #0
    1b52:	e00c      	b.n	1b6e <I2CEngine+0xb6>
		}

		while (1) {
			if (I2C1_MasterState == DATA_NACK) {
    1b54:	4b0b      	ldr	r3, [pc, #44]	; (1b84 <I2CEngine+0xcc>)
    1b56:	681b      	ldr	r3, [r3, #0]
    1b58:	2b05      	cmp	r3, #5
    1b5a:	d106      	bne.n	1b6a <I2CEngine+0xb2>
				I2CStop(port);
    1b5c:	79fb      	ldrb	r3, [r7, #7]
    1b5e:	4618      	mov	r0, r3
    1b60:	f7ff fefc 	bl	195c <I2CStop>
				break;
    1b64:	bf00      	nop
			}
		}
		return (1);
    1b66:	2301      	movs	r3, #1
    1b68:	e001      	b.n	1b6e <I2CEngine+0xb6>
		while (1) {
			if (I2C1_MasterState == DATA_NACK) {
				I2CStop(port);
				break;
			}
		}
    1b6a:	e7f3      	b.n	1b54 <I2CEngine+0x9c>
		return (1);
	}
	return 0;
    1b6c:	2300      	movs	r3, #0
}
    1b6e:	4618      	mov	r0, r3
    1b70:	3710      	adds	r7, #16
    1b72:	46bd      	mov	sp, r7
    1b74:	bd80      	pop	{r7, pc}
    1b76:	bf00      	nop
    1b78:	1000002c 	.word	0x1000002c
    1b7c:	10000030 	.word	0x10000030
    1b80:	10000034 	.word	0x10000034
    1b84:	10000e18 	.word	0x10000e18
    1b88:	10000dd8 	.word	0x10000dd8
    1b8c:	10000e84 	.word	0x10000e84

00001b90 <i2c_read>:
			return 0;
	}
	return 0;
}

uint8_t i2c_read(uint8_t port, uint8_t register_addr) {
    1b90:	b580      	push	{r7, lr}
    1b92:	b084      	sub	sp, #16
    1b94:	af00      	add	r7, sp, #0
    1b96:	4603      	mov	r3, r0
    1b98:	460a      	mov	r2, r1
    1b9a:	71fb      	strb	r3, [r7, #7]
    1b9c:	4613      	mov	r3, r2
    1b9e:	71bb      	strb	r3, [r7, #6]
	int i;
	/* clear buffer */
	if (port == 0){
    1ba0:	79fb      	ldrb	r3, [r7, #7]
    1ba2:	2b00      	cmp	r3, #0
    1ba4:	d128      	bne.n	1bf8 <i2c_read+0x68>
		for (i = 0; i < BUFSIZE; i++) {
    1ba6:	2300      	movs	r3, #0
    1ba8:	60fb      	str	r3, [r7, #12]
    1baa:	e007      	b.n	1bbc <i2c_read+0x2c>
			I2C0_MasterBuffer[i] = 0;
    1bac:	4a2a      	ldr	r2, [pc, #168]	; (1c58 <i2c_read+0xc8>)
    1bae:	68fb      	ldr	r3, [r7, #12]
    1bb0:	4413      	add	r3, r2
    1bb2:	2200      	movs	r2, #0
    1bb4:	701a      	strb	r2, [r3, #0]

uint8_t i2c_read(uint8_t port, uint8_t register_addr) {
	int i;
	/* clear buffer */
	if (port == 0){
		for (i = 0; i < BUFSIZE; i++) {
    1bb6:	68fb      	ldr	r3, [r7, #12]
    1bb8:	3301      	adds	r3, #1
    1bba:	60fb      	str	r3, [r7, #12]
    1bbc:	68fb      	ldr	r3, [r7, #12]
    1bbe:	2b1f      	cmp	r3, #31
    1bc0:	ddf4      	ble.n	1bac <i2c_read+0x1c>
			I2C0_MasterBuffer[i] = 0;
		}
		I2C0_WriteLength = 2;
    1bc2:	4b26      	ldr	r3, [pc, #152]	; (1c5c <i2c_read+0xcc>)
    1bc4:	2202      	movs	r2, #2
    1bc6:	601a      	str	r2, [r3, #0]
		I2C0_ReadLength = 1;
    1bc8:	4b25      	ldr	r3, [pc, #148]	; (1c60 <i2c_read+0xd0>)
    1bca:	2201      	movs	r2, #1
    1bcc:	601a      	str	r2, [r3, #0]
		I2C0_MasterBuffer[0] = 0x3A;//ADR_BYTE_MMA7455;
    1bce:	4b22      	ldr	r3, [pc, #136]	; (1c58 <i2c_read+0xc8>)
    1bd0:	223a      	movs	r2, #58	; 0x3a
    1bd2:	701a      	strb	r2, [r3, #0]
		I2C0_MasterBuffer[1] = register_addr;
    1bd4:	4a20      	ldr	r2, [pc, #128]	; (1c58 <i2c_read+0xc8>)
    1bd6:	79bb      	ldrb	r3, [r7, #6]
    1bd8:	7053      	strb	r3, [r2, #1]
		I2C0_MasterBuffer[2] = 0x3B;//ADR_BYTE_MMA7455 | RD_BIT;
    1bda:	4b1f      	ldr	r3, [pc, #124]	; (1c58 <i2c_read+0xc8>)
    1bdc:	223b      	movs	r2, #59	; 0x3b
    1bde:	709a      	strb	r2, [r3, #2]
		I2CEngine(port);
    1be0:	79fb      	ldrb	r3, [r7, #7]
    1be2:	4618      	mov	r0, r3
    1be4:	f7ff ff68 	bl	1ab8 <I2CEngine>
		I2CStop(port);
    1be8:	79fb      	ldrb	r3, [r7, #7]
    1bea:	4618      	mov	r0, r3
    1bec:	f7ff feb6 	bl	195c <I2CStop>
		return (I2C0_MasterBuffer[3]);
    1bf0:	4b19      	ldr	r3, [pc, #100]	; (1c58 <i2c_read+0xc8>)
    1bf2:	78db      	ldrb	r3, [r3, #3]
    1bf4:	b2db      	uxtb	r3, r3
    1bf6:	e02b      	b.n	1c50 <i2c_read+0xc0>
	}
	else if (port == 1){
    1bf8:	79fb      	ldrb	r3, [r7, #7]
    1bfa:	2b01      	cmp	r3, #1
    1bfc:	d128      	bne.n	1c50 <i2c_read+0xc0>
		for (i = 0; i < BUFSIZE; i++) {
    1bfe:	2300      	movs	r3, #0
    1c00:	60fb      	str	r3, [r7, #12]
    1c02:	e007      	b.n	1c14 <i2c_read+0x84>
			I2C1_MasterBuffer[i] = 0;
    1c04:	4a17      	ldr	r2, [pc, #92]	; (1c64 <i2c_read+0xd4>)
    1c06:	68fb      	ldr	r3, [r7, #12]
    1c08:	4413      	add	r3, r2
    1c0a:	2200      	movs	r2, #0
    1c0c:	701a      	strb	r2, [r3, #0]
		I2CEngine(port);
		I2CStop(port);
		return (I2C0_MasterBuffer[3]);
	}
	else if (port == 1){
		for (i = 0; i < BUFSIZE; i++) {
    1c0e:	68fb      	ldr	r3, [r7, #12]
    1c10:	3301      	adds	r3, #1
    1c12:	60fb      	str	r3, [r7, #12]
    1c14:	68fb      	ldr	r3, [r7, #12]
    1c16:	2b1f      	cmp	r3, #31
    1c18:	ddf4      	ble.n	1c04 <i2c_read+0x74>
			I2C1_MasterBuffer[i] = 0;
		}
		I2C1_WriteLength = 2;
    1c1a:	4b13      	ldr	r3, [pc, #76]	; (1c68 <i2c_read+0xd8>)
    1c1c:	2202      	movs	r2, #2
    1c1e:	601a      	str	r2, [r3, #0]
		I2C1_ReadLength = 1;
    1c20:	4b12      	ldr	r3, [pc, #72]	; (1c6c <i2c_read+0xdc>)
    1c22:	2201      	movs	r2, #1
    1c24:	601a      	str	r2, [r3, #0]
		I2C1_MasterBuffer[0] = ADR_BYTE_24AA02;
    1c26:	4b0f      	ldr	r3, [pc, #60]	; (1c64 <i2c_read+0xd4>)
    1c28:	22a0      	movs	r2, #160	; 0xa0
    1c2a:	701a      	strb	r2, [r3, #0]
		I2C1_MasterBuffer[1] = register_addr;
    1c2c:	4a0d      	ldr	r2, [pc, #52]	; (1c64 <i2c_read+0xd4>)
    1c2e:	79bb      	ldrb	r3, [r7, #6]
    1c30:	7053      	strb	r3, [r2, #1]
		I2C1_MasterBuffer[2] = ADR_BYTE_24AA02 | RD_BIT;
    1c32:	4b0c      	ldr	r3, [pc, #48]	; (1c64 <i2c_read+0xd4>)
    1c34:	22a1      	movs	r2, #161	; 0xa1
    1c36:	709a      	strb	r2, [r3, #2]
		I2CEngine(port);
    1c38:	79fb      	ldrb	r3, [r7, #7]
    1c3a:	4618      	mov	r0, r3
    1c3c:	f7ff ff3c 	bl	1ab8 <I2CEngine>
		I2CStop(port);
    1c40:	79fb      	ldrb	r3, [r7, #7]
    1c42:	4618      	mov	r0, r3
    1c44:	f7ff fe8a 	bl	195c <I2CStop>
		return (I2C1_MasterBuffer[3]);
    1c48:	4b06      	ldr	r3, [pc, #24]	; (1c64 <i2c_read+0xd4>)
    1c4a:	78db      	ldrb	r3, [r3, #3]
    1c4c:	b2db      	uxtb	r3, r3
    1c4e:	e7ff      	b.n	1c50 <i2c_read+0xc0>
	}
}
    1c50:	4618      	mov	r0, r3
    1c52:	3710      	adds	r7, #16
    1c54:	46bd      	mov	sp, r7
    1c56:	bd80      	pop	{r7, pc}
    1c58:	10000e60 	.word	0x10000e60
    1c5c:	10000e3c 	.word	0x10000e3c
    1c60:	10000de4 	.word	0x10000de4
    1c64:	10000e40 	.word	0x10000e40
    1c68:	10000dd4 	.word	0x10000dd4
    1c6c:	10000de8 	.word	0x10000de8

00001c70 <u32IAP_PrepareSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_PrepareSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
    1c70:	b580      	push	{r7, lr}
    1c72:	b08e      	sub	sp, #56	; 0x38
    1c74:	af00      	add	r7, sp, #0
    1c76:	6078      	str	r0, [r7, #4]
    1c78:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1c7a:	683a      	ldr	r2, [r7, #0]
    1c7c:	687b      	ldr	r3, [r7, #4]
    1c7e:	429a      	cmp	r2, r3
    1c80:	d202      	bcs.n	1c88 <u32IAP_PrepareSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1c82:	230c      	movs	r3, #12
    1c84:	637b      	str	r3, [r7, #52]	; 0x34
    1c86:	e00f      	b.n	1ca8 <u32IAP_PrepareSectors+0x38>
	}
	else
	{
		au32Command[0] = IAP_CMD_PREPARE_SECTORS;
    1c88:	2332      	movs	r3, #50	; 0x32
    1c8a:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
    1c8c:	687b      	ldr	r3, [r7, #4]
    1c8e:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
    1c90:	683b      	ldr	r3, [r7, #0]
    1c92:	617b      	str	r3, [r7, #20]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1c94:	f107 010c 	add.w	r1, r7, #12
    1c98:	f107 0220 	add.w	r2, r7, #32
    1c9c:	4b05      	ldr	r3, [pc, #20]	; (1cb4 <u32IAP_PrepareSectors+0x44>)
    1c9e:	4608      	mov	r0, r1
    1ca0:	4611      	mov	r1, r2
    1ca2:	4798      	blx	r3

		u32Status = au32Result[0];
    1ca4:	6a3b      	ldr	r3, [r7, #32]
    1ca6:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
    1ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    1caa:	4618      	mov	r0, r3
    1cac:	3738      	adds	r7, #56	; 0x38
    1cae:	46bd      	mov	sp, r7
    1cb0:	bd80      	pop	{r7, pc}
    1cb2:	bf00      	nop
    1cb4:	1fff1ff1 	.word	0x1fff1ff1

00001cb8 <u32IAP_CopyRAMToFlash>:
*
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_CopyRAMToFlash(uint32_t u32DstAddr, uint32_t u32SrcAddr, uint32_t u32Len)
{
    1cb8:	b580      	push	{r7, lr}
    1cba:	b08e      	sub	sp, #56	; 0x38
    1cbc:	af00      	add	r7, sp, #0
    1cbe:	60f8      	str	r0, [r7, #12]
    1cc0:	60b9      	str	r1, [r7, #8]
    1cc2:	607a      	str	r2, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1cc4:	b672      	cpsid	i
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	__disable_irq();
	au32Command[0] = IAP_CMD_COPY_RAM_TO_FLASH;
    1cc6:	2333      	movs	r3, #51	; 0x33
    1cc8:	613b      	str	r3, [r7, #16]
	au32Command[1] = u32DstAddr;
    1cca:	68fb      	ldr	r3, [r7, #12]
    1ccc:	617b      	str	r3, [r7, #20]
	au32Command[2] = u32SrcAddr;
    1cce:	68bb      	ldr	r3, [r7, #8]
    1cd0:	61bb      	str	r3, [r7, #24]
	au32Command[3] = u32Len;
    1cd2:	687b      	ldr	r3, [r7, #4]
    1cd4:	61fb      	str	r3, [r7, #28]
	au32Command[4] = SystemCoreClock / 1000UL;	/* Core clock frequency in kHz */
    1cd6:	4b0a      	ldr	r3, [pc, #40]	; (1d00 <u32IAP_CopyRAMToFlash+0x48>)
    1cd8:	681b      	ldr	r3, [r3, #0]
    1cda:	4a0a      	ldr	r2, [pc, #40]	; (1d04 <u32IAP_CopyRAMToFlash+0x4c>)
    1cdc:	fba2 2303 	umull	r2, r3, r2, r3
    1ce0:	099b      	lsrs	r3, r3, #6
    1ce2:	623b      	str	r3, [r7, #32]

	IAP_EXECUTE_CMD(au32Command, au32Result);
    1ce4:	f107 0110 	add.w	r1, r7, #16
    1ce8:	f107 0224 	add.w	r2, r7, #36	; 0x24
    1cec:	4b06      	ldr	r3, [pc, #24]	; (1d08 <u32IAP_CopyRAMToFlash+0x50>)
    1cee:	4608      	mov	r0, r1
    1cf0:	4611      	mov	r1, r2
    1cf2:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1cf4:	b662      	cpsie	i

	__enable_irq();
	return ( au32Result[0] );
    1cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1cf8:	4618      	mov	r0, r3
    1cfa:	3738      	adds	r7, #56	; 0x38
    1cfc:	46bd      	mov	sp, r7
    1cfe:	bd80      	pop	{r7, pc}
    1d00:	10000024 	.word	0x10000024
    1d04:	10624dd3 	.word	0x10624dd3
    1d08:	1fff1ff1 	.word	0x1fff1ff1

00001d0c <u32IAP_EraseSectors>:
*
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_EraseSectors(uint32_t u32StartSector, uint32_t u32EndSector)
{
    1d0c:	b580      	push	{r7, lr}
    1d0e:	b08e      	sub	sp, #56	; 0x38
    1d10:	af00      	add	r7, sp, #0
    1d12:	6078      	str	r0, [r7, #4]
    1d14:	6039      	str	r1, [r7, #0]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1d16:	683a      	ldr	r2, [r7, #0]
    1d18:	687b      	ldr	r3, [r7, #4]
    1d1a:	429a      	cmp	r2, r3
    1d1c:	d202      	bcs.n	1d24 <u32IAP_EraseSectors+0x18>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1d1e:	230c      	movs	r3, #12
    1d20:	637b      	str	r3, [r7, #52]	; 0x34
    1d22:	e018      	b.n	1d56 <u32IAP_EraseSectors+0x4a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1d24:	b672      	cpsid	i
	}
	else
	{
		__disable_irq();
		au32Command[0] = IAP_CMD_ERASE_SECTORS;
    1d26:	2334      	movs	r3, #52	; 0x34
    1d28:	60fb      	str	r3, [r7, #12]
		au32Command[1] = u32StartSector;
    1d2a:	687b      	ldr	r3, [r7, #4]
    1d2c:	613b      	str	r3, [r7, #16]
		au32Command[2] = u32EndSector;
    1d2e:	683b      	ldr	r3, [r7, #0]
    1d30:	617b      	str	r3, [r7, #20]
		au32Command[3] = SystemCoreClock / 1000UL;	/* Core clock frequency in kHz */
    1d32:	4b0b      	ldr	r3, [pc, #44]	; (1d60 <u32IAP_EraseSectors+0x54>)
    1d34:	681b      	ldr	r3, [r3, #0]
    1d36:	4a0b      	ldr	r2, [pc, #44]	; (1d64 <u32IAP_EraseSectors+0x58>)
    1d38:	fba2 2303 	umull	r2, r3, r2, r3
    1d3c:	099b      	lsrs	r3, r3, #6
    1d3e:	61bb      	str	r3, [r7, #24]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1d40:	f107 010c 	add.w	r1, r7, #12
    1d44:	f107 0220 	add.w	r2, r7, #32
    1d48:	4b07      	ldr	r3, [pc, #28]	; (1d68 <u32IAP_EraseSectors+0x5c>)
    1d4a:	4608      	mov	r0, r1
    1d4c:	4611      	mov	r1, r2
    1d4e:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1d50:	b662      	cpsie	i

		__enable_irq();
		u32Status = au32Result[0];
    1d52:	6a3b      	ldr	r3, [r7, #32]
    1d54:	637b      	str	r3, [r7, #52]	; 0x34
	}
	return ( u32Status );
    1d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    1d58:	4618      	mov	r0, r3
    1d5a:	3738      	adds	r7, #56	; 0x38
    1d5c:	46bd      	mov	sp, r7
    1d5e:	bd80      	pop	{r7, pc}
    1d60:	10000024 	.word	0x10000024
    1d64:	10624dd3 	.word	0x10624dd3
    1d68:	1fff1ff1 	.word	0x1fff1ff1

00001d6c <u32IAP_BlankCheckSectors>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_BlankCheckSectors(uint32_t u32StartSector, uint32_t u32EndSector, uint32_t *pu32Result)
{
    1d6c:	b580      	push	{r7, lr}
    1d6e:	b090      	sub	sp, #64	; 0x40
    1d70:	af00      	add	r7, sp, #0
    1d72:	60f8      	str	r0, [r7, #12]
    1d74:	60b9      	str	r1, [r7, #8]
    1d76:	607a      	str	r2, [r7, #4]
	uint32_t u32Status;
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	if (u32EndSector < u32StartSector)
    1d78:	68ba      	ldr	r2, [r7, #8]
    1d7a:	68fb      	ldr	r3, [r7, #12]
    1d7c:	429a      	cmp	r2, r3
    1d7e:	d202      	bcs.n	1d86 <u32IAP_BlankCheckSectors+0x1a>
	{
		u32Status = IAP_STA_INVALD_PARAM;
    1d80:	230c      	movs	r3, #12
    1d82:	63fb      	str	r3, [r7, #60]	; 0x3c
    1d84:	e019      	b.n	1dba <u32IAP_BlankCheckSectors+0x4e>
	}
	else
	{
		au32Command[0] = IAP_CMD_BLANK_CHECK_SECTORS;
    1d86:	2335      	movs	r3, #53	; 0x35
    1d88:	617b      	str	r3, [r7, #20]
		au32Command[1] = u32StartSector;
    1d8a:	68fb      	ldr	r3, [r7, #12]
    1d8c:	61bb      	str	r3, [r7, #24]
		au32Command[2] = u32EndSector;
    1d8e:	68bb      	ldr	r3, [r7, #8]
    1d90:	61fb      	str	r3, [r7, #28]

		IAP_EXECUTE_CMD(au32Command, au32Result);
    1d92:	f107 0114 	add.w	r1, r7, #20
    1d96:	f107 0228 	add.w	r2, r7, #40	; 0x28
    1d9a:	4b0a      	ldr	r3, [pc, #40]	; (1dc4 <u32IAP_BlankCheckSectors+0x58>)
    1d9c:	4608      	mov	r0, r1
    1d9e:	4611      	mov	r1, r2
    1da0:	4798      	blx	r3

		if (au32Result[0] == IAP_STA_SECTOR_NOT_BLANK)
    1da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1da4:	2b08      	cmp	r3, #8
    1da6:	d106      	bne.n	1db6 <u32IAP_BlankCheckSectors+0x4a>
		{
			*pu32Result       = au32Result[0];
    1da8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1daa:	687b      	ldr	r3, [r7, #4]
    1dac:	601a      	str	r2, [r3, #0]
			*(pu32Result + 1) = au32Result[1];
    1dae:	687b      	ldr	r3, [r7, #4]
    1db0:	3304      	adds	r3, #4
    1db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1db4:	601a      	str	r2, [r3, #0]
		}
		u32Status = au32Result[0];
    1db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1db8:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	return ( u32Status );
    1dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1dbc:	4618      	mov	r0, r3
    1dbe:	3740      	adds	r7, #64	; 0x40
    1dc0:	46bd      	mov	sp, r7
    1dc2:	bd80      	pop	{r7, pc}
    1dc4:	1fff1ff1 	.word	0x1fff1ff1

00001dc8 <u32IAP_Compare>:
**
** Returned value:	Status code returned by IAP ROM function.
**
******************************************************************************/
uint32_t u32IAP_Compare(uint32_t u32DstAddr, uint32_t u32SrcAddr, uint32_t u32Len, uint32_t *pu32Offset)
{
    1dc8:	b580      	push	{r7, lr}
    1dca:	b08e      	sub	sp, #56	; 0x38
    1dcc:	af00      	add	r7, sp, #0
    1dce:	60f8      	str	r0, [r7, #12]
    1dd0:	60b9      	str	r1, [r7, #8]
    1dd2:	607a      	str	r2, [r7, #4]
    1dd4:	603b      	str	r3, [r7, #0]
	uint32_t au32Result[5];
	uint32_t au32Command[5];

	au32Command[0] = IAP_CMD_COMPARE;
    1dd6:	2338      	movs	r3, #56	; 0x38
    1dd8:	613b      	str	r3, [r7, #16]
	au32Command[1] = u32DstAddr;
    1dda:	68fb      	ldr	r3, [r7, #12]
    1ddc:	617b      	str	r3, [r7, #20]
	au32Command[2] = u32SrcAddr;
    1dde:	68bb      	ldr	r3, [r7, #8]
    1de0:	61bb      	str	r3, [r7, #24]
	au32Command[3] = u32Len;
    1de2:	687b      	ldr	r3, [r7, #4]
    1de4:	61fb      	str	r3, [r7, #28]

	IAP_EXECUTE_CMD(au32Command, au32Result);
    1de6:	f107 0110 	add.w	r1, r7, #16
    1dea:	f107 0224 	add.w	r2, r7, #36	; 0x24
    1dee:	4b09      	ldr	r3, [pc, #36]	; (1e14 <u32IAP_Compare+0x4c>)
    1df0:	4608      	mov	r0, r1
    1df2:	4611      	mov	r1, r2
    1df4:	4798      	blx	r3

	if (au32Result[0] == IAP_STA_COMPARE_ERROR)
    1df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1df8:	2b0a      	cmp	r3, #10
    1dfa:	d105      	bne.n	1e08 <u32IAP_Compare+0x40>
	{
		if (pu32Offset != 0)
    1dfc:	683b      	ldr	r3, [r7, #0]
    1dfe:	2b00      	cmp	r3, #0
    1e00:	d002      	beq.n	1e08 <u32IAP_Compare+0x40>
		{
			*pu32Offset = au32Result[1];
    1e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1e04:	683b      	ldr	r3, [r7, #0]
    1e06:	601a      	str	r2, [r3, #0]
		}
	}
	return ( au32Result[0] );
    1e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1e0a:	4618      	mov	r0, r3
    1e0c:	3738      	adds	r7, #56	; 0x38
    1e0e:	46bd      	mov	sp, r7
    1e10:	bd80      	pop	{r7, pc}
    1e12:	bf00      	nop
    1e14:	1fff1ff1 	.word	0x1fff1ff1

00001e18 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1e18:	b480      	push	{r7}
    1e1a:	b083      	sub	sp, #12
    1e1c:	af00      	add	r7, sp, #0
    1e1e:	4603      	mov	r3, r0
    1e20:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1e22:	4908      	ldr	r1, [pc, #32]	; (1e44 <NVIC_EnableIRQ+0x2c>)
    1e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1e28:	095b      	lsrs	r3, r3, #5
    1e2a:	79fa      	ldrb	r2, [r7, #7]
    1e2c:	f002 021f 	and.w	r2, r2, #31
    1e30:	2001      	movs	r0, #1
    1e32:	fa00 f202 	lsl.w	r2, r0, r2
    1e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1e3a:	370c      	adds	r7, #12
    1e3c:	46bd      	mov	sp, r7
    1e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e42:	4770      	bx	lr
    1e44:	e000e100 	.word	0xe000e100

00001e48 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1e48:	b480      	push	{r7}
    1e4a:	b083      	sub	sp, #12
    1e4c:	af00      	add	r7, sp, #0
    1e4e:	4603      	mov	r3, r0
    1e50:	6039      	str	r1, [r7, #0]
    1e52:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    1e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1e58:	2b00      	cmp	r3, #0
    1e5a:	da0b      	bge.n	1e74 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    1e5c:	490d      	ldr	r1, [pc, #52]	; (1e94 <NVIC_SetPriority+0x4c>)
    1e5e:	79fb      	ldrb	r3, [r7, #7]
    1e60:	f003 030f 	and.w	r3, r3, #15
    1e64:	3b04      	subs	r3, #4
    1e66:	683a      	ldr	r2, [r7, #0]
    1e68:	b2d2      	uxtb	r2, r2
    1e6a:	00d2      	lsls	r2, r2, #3
    1e6c:	b2d2      	uxtb	r2, r2
    1e6e:	440b      	add	r3, r1
    1e70:	761a      	strb	r2, [r3, #24]
    1e72:	e009      	b.n	1e88 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    1e74:	4908      	ldr	r1, [pc, #32]	; (1e98 <NVIC_SetPriority+0x50>)
    1e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1e7a:	683a      	ldr	r2, [r7, #0]
    1e7c:	b2d2      	uxtb	r2, r2
    1e7e:	00d2      	lsls	r2, r2, #3
    1e80:	b2d2      	uxtb	r2, r2
    1e82:	440b      	add	r3, r1
    1e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    1e88:	370c      	adds	r7, #12
    1e8a:	46bd      	mov	sp, r7
    1e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e90:	4770      	bx	lr
    1e92:	bf00      	nop
    1e94:	e000ed00 	.word	0xe000ed00
    1e98:	e000e100 	.word	0xe000e100

00001e9c <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
    1e9c:	b580      	push	{r7, lr}
    1e9e:	b082      	sub	sp, #8
    1ea0:	af00      	add	r7, sp, #0
    1ea2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
    1ea4:	687b      	ldr	r3, [r7, #4]
    1ea6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    1eaa:	d301      	bcc.n	1eb0 <SysTick_Config+0x14>
    1eac:	2301      	movs	r3, #1
    1eae:	e011      	b.n	1ed4 <SysTick_Config+0x38>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
    1eb0:	4a0a      	ldr	r2, [pc, #40]	; (1edc <SysTick_Config+0x40>)
    1eb2:	687b      	ldr	r3, [r7, #4]
    1eb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1eb8:	3b01      	subs	r3, #1
    1eba:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
    1ebc:	f04f 30ff 	mov.w	r0, #4294967295
    1ec0:	211f      	movs	r1, #31
    1ec2:	f7ff ffc1 	bl	1e48 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    1ec6:	4b05      	ldr	r3, [pc, #20]	; (1edc <SysTick_Config+0x40>)
    1ec8:	2200      	movs	r2, #0
    1eca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
    1ecc:	4b03      	ldr	r3, [pc, #12]	; (1edc <SysTick_Config+0x40>)
    1ece:	2207      	movs	r2, #7
    1ed0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
    1ed2:	2300      	movs	r3, #0
}
    1ed4:	4618      	mov	r0, r3
    1ed6:	3708      	adds	r7, #8
    1ed8:	46bd      	mov	sp, r7
    1eda:	bd80      	pop	{r7, pc}
    1edc:	e000e010 	.word	0xe000e010

00001ee0 <ConfigurePins>:
int extPowerPinVal = 0;
char cell_buf[15];
short is_cell_only = 1;


void ConfigurePins() {
    1ee0:	b580      	push	{r7, lr}
    1ee2:	b082      	sub	sp, #8
    1ee4:	af00      	add	r7, sp, #0
	//PWRKEY & EMERG_OFF
	LPC_PINCON->PINSEL4 &= ~(0xFFFF); // Reset P2[0..7] = GPIO
    1ee6:	4a34      	ldr	r2, [pc, #208]	; (1fb8 <ConfigurePins+0xd8>)
    1ee8:	4b33      	ldr	r3, [pc, #204]	; (1fb8 <ConfigurePins+0xd8>)
    1eea:	691b      	ldr	r3, [r3, #16]
    1eec:	0c1b      	lsrs	r3, r3, #16
    1eee:	041b      	lsls	r3, r3, #16
    1ef0:	6113      	str	r3, [r2, #16]
	LPC_GPIO2->FIODIR |= 0xFF; // P2[0..7] =
    1ef2:	4a32      	ldr	r2, [pc, #200]	; (1fbc <ConfigurePins+0xdc>)
    1ef4:	4b31      	ldr	r3, [pc, #196]	; (1fbc <ConfigurePins+0xdc>)
    1ef6:	681b      	ldr	r3, [r3, #0]
    1ef8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1efc:	6013      	str	r3, [r2, #0]
	LPC_PINCON->PINSEL9 &= ~(0xFFFF); // Reset P4[24..31] = GPIO
    1efe:	4a2e      	ldr	r2, [pc, #184]	; (1fb8 <ConfigurePins+0xd8>)
    1f00:	4b2d      	ldr	r3, [pc, #180]	; (1fb8 <ConfigurePins+0xd8>)
    1f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1f04:	0c1b      	lsrs	r3, r3, #16
    1f06:	041b      	lsls	r3, r3, #16
    1f08:	6253      	str	r3, [r2, #36]	; 0x24
	LPC_GPIO4->FIODIR = (1 << 28) | (1 << 29);
    1f0a:	4b2d      	ldr	r3, [pc, #180]	; (1fc0 <ConfigurePins+0xe0>)
    1f0c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    1f10:	601a      	str	r2, [r3, #0]
	LPC_GPIO0->FIODIR &= (1 << 7); //P0[7] DIN 1 as input --> Default mode pull up enabled.
    1f12:	4a2c      	ldr	r2, [pc, #176]	; (1fc4 <ConfigurePins+0xe4>)
    1f14:	4b2b      	ldr	r3, [pc, #172]	; (1fc4 <ConfigurePins+0xe4>)
    1f16:	681b      	ldr	r3, [r3, #0]
    1f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1f1c:	6013      	str	r3, [r2, #0]
	LPC_GPIO0->FIODIR &= ~(1 << 29 | 1 << 30); //P0[30] as input
    1f1e:	4a29      	ldr	r2, [pc, #164]	; (1fc4 <ConfigurePins+0xe4>)
    1f20:	4b28      	ldr	r3, [pc, #160]	; (1fc4 <ConfigurePins+0xe4>)
    1f22:	681b      	ldr	r3, [r3, #0]
    1f24:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
    1f28:	6013      	str	r3, [r2, #0]
	LPC_GPIO0->FIODIR |= (1 << 5);
    1f2a:	4a26      	ldr	r2, [pc, #152]	; (1fc4 <ConfigurePins+0xe4>)
    1f2c:	4b25      	ldr	r3, [pc, #148]	; (1fc4 <ConfigurePins+0xe4>)
    1f2e:	681b      	ldr	r3, [r3, #0]
    1f30:	f043 0320 	orr.w	r3, r3, #32
    1f34:	6013      	str	r3, [r2, #0]
	//Init ADC
	uint32_t u32PCLKDIV, u32PCLK;
	LPC_SC->PCONP |= (1 << 12);
    1f36:	4a24      	ldr	r2, [pc, #144]	; (1fc8 <ConfigurePins+0xe8>)
    1f38:	4b23      	ldr	r3, [pc, #140]	; (1fc8 <ConfigurePins+0xe8>)
    1f3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1f3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1f42:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	u32PCLKDIV = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
    1f46:	4b20      	ldr	r3, [pc, #128]	; (1fc8 <ConfigurePins+0xe8>)
    1f48:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    1f4c:	099b      	lsrs	r3, r3, #6
    1f4e:	f003 0303 	and.w	r3, r3, #3
    1f52:	607b      	str	r3, [r7, #4]
	switch (u32PCLKDIV) {
    1f54:	687b      	ldr	r3, [r7, #4]
    1f56:	2b02      	cmp	r3, #2
    1f58:	d009      	beq.n	1f6e <ConfigurePins+0x8e>
    1f5a:	2b03      	cmp	r3, #3
    1f5c:	d00a      	beq.n	1f74 <ConfigurePins+0x94>
    1f5e:	2b01      	cmp	r3, #1
    1f60:	d002      	beq.n	1f68 <ConfigurePins+0x88>
	case 0x00:
	default:
		u32PCLK = 12000000 / 4;
    1f62:	4b1a      	ldr	r3, [pc, #104]	; (1fcc <ConfigurePins+0xec>)
    1f64:	603b      	str	r3, [r7, #0]
		break;
    1f66:	e008      	b.n	1f7a <ConfigurePins+0x9a>
	case 0x01:
		u32PCLK = 12000000;
    1f68:	4b19      	ldr	r3, [pc, #100]	; (1fd0 <ConfigurePins+0xf0>)
    1f6a:	603b      	str	r3, [r7, #0]
		break;
    1f6c:	e005      	b.n	1f7a <ConfigurePins+0x9a>
	case 0x02:
		u32PCLK = 12000000 / 2;
    1f6e:	4b19      	ldr	r3, [pc, #100]	; (1fd4 <ConfigurePins+0xf4>)
    1f70:	603b      	str	r3, [r7, #0]
		break;
    1f72:	e002      	b.n	1f7a <ConfigurePins+0x9a>
	case 0x03:
		u32PCLK = 12000000 / 8;
    1f74:	4b18      	ldr	r3, [pc, #96]	; (1fd8 <ConfigurePins+0xf8>)
    1f76:	603b      	str	r3, [r7, #0]
		break;
    1f78:	bf00      	nop
	//LPC_ADC->ADCR = (1 << 3) | ((u32PCLK / 12000000 - 1) << 8) | (0 << 16) | (0
	//		<< 17) | (1 << 21) | (0 << 24) | (0 << 27);
	//LPC_PINCON->PINSEL1 |= (1U << 20);
	///ADC//
	//External Power Pin
	LPC_GPIO0->FIODIR &= ~(1 << 22);
    1f7a:	4a12      	ldr	r2, [pc, #72]	; (1fc4 <ConfigurePins+0xe4>)
    1f7c:	4b11      	ldr	r3, [pc, #68]	; (1fc4 <ConfigurePins+0xe4>)
    1f7e:	681b      	ldr	r3, [r3, #0]
    1f80:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    1f84:	6013      	str	r3, [r2, #0]
	//Ignition Pin
	LPC_GPIO0->FIODIR &= ~(1 << 21);
    1f86:	4a0f      	ldr	r2, [pc, #60]	; (1fc4 <ConfigurePins+0xe4>)
    1f88:	4b0e      	ldr	r3, [pc, #56]	; (1fc4 <ConfigurePins+0xe4>)
    1f8a:	681b      	ldr	r3, [r3, #0]
    1f8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
    1f90:	6013      	str	r3, [r2, #0]
	#ifdef brisa
		DIGITAL_IN1_PIN = 21;
	#endif
	LPC_GPIOINT->IO0IntEnR |= (1 << 22); // Rising edge
    1f92:	4a12      	ldr	r2, [pc, #72]	; (1fdc <ConfigurePins+0xfc>)
    1f94:	4b11      	ldr	r3, [pc, #68]	; (1fdc <ConfigurePins+0xfc>)
    1f96:	691b      	ldr	r3, [r3, #16]
    1f98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1f9c:	6113      	str	r3, [r2, #16]
	LPC_GPIOINT->IO0IntEnF |= (1 << 22); // Falling edge
    1f9e:	4a0f      	ldr	r2, [pc, #60]	; (1fdc <ConfigurePins+0xfc>)
    1fa0:	4b0e      	ldr	r3, [pc, #56]	; (1fdc <ConfigurePins+0xfc>)
    1fa2:	695b      	ldr	r3, [r3, #20]
    1fa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1fa8:	6153      	str	r3, [r2, #20]
	NVIC_EnableIRQ(EINT3_IRQn);
    1faa:	2015      	movs	r0, #21
    1fac:	f7ff ff34 	bl	1e18 <NVIC_EnableIRQ>
}
    1fb0:	3708      	adds	r7, #8
    1fb2:	46bd      	mov	sp, r7
    1fb4:	bd80      	pop	{r7, pc}
    1fb6:	bf00      	nop
    1fb8:	4002c000 	.word	0x4002c000
    1fbc:	2009c040 	.word	0x2009c040
    1fc0:	2009c080 	.word	0x2009c080
    1fc4:	2009c000 	.word	0x2009c000
    1fc8:	400fc000 	.word	0x400fc000
    1fcc:	002dc6c0 	.word	0x002dc6c0
    1fd0:	00b71b00 	.word	0x00b71b00
    1fd4:	005b8d80 	.word	0x005b8d80
    1fd8:	0016e360 	.word	0x0016e360
    1fdc:	40028080 	.word	0x40028080

00001fe0 <main>:
	}
	return is_conn;
}

int main(void)
{
    1fe0:	b580      	push	{r7, lr}
    1fe2:	b0b4      	sub	sp, #208	; 0xd0
    1fe4:	af00      	add	r7, sp, #0
	char buffer[200];

	SystemInit();
    1fe6:	f001 fd65 	bl	3ab4 <SystemInit>

	LPC_SC->CLKSRCSEL |= 0x01;//0x01;
    1fea:	4a4b      	ldr	r2, [pc, #300]	; (2118 <main+0x138>)
    1fec:	4b4a      	ldr	r3, [pc, #296]	; (2118 <main+0x138>)
    1fee:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    1ff2:	f043 0301 	orr.w	r3, r3, #1
    1ff6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	LPC_SC->PLL0CFG	  |= 0x01; // Select external osc. as main clock.
    1ffa:	4a47      	ldr	r2, [pc, #284]	; (2118 <main+0x138>)
    1ffc:	4b46      	ldr	r3, [pc, #280]	; (2118 <main+0x138>)
    1ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    2002:	f043 0301 	orr.w	r3, r3, #1
    2006:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	LPC_SC->CCLKCFG	   = 0x03; // Main PLL is divided by 8
    200a:	4b43      	ldr	r3, [pc, #268]	; (2118 <main+0x138>)
    200c:	2203      	movs	r2, #3
    200e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	SystemCoreClockUpdate();
    2012:	f001 fcf9 	bl	3a08 <SystemCoreClockUpdate>
	// Generate f each 1 ms, used to enable DelayMs function?
	SysTick_Config(SystemCoreClock / 1000 - 1);
    2016:	4b41      	ldr	r3, [pc, #260]	; (211c <main+0x13c>)
    2018:	681b      	ldr	r3, [r3, #0]
    201a:	4a41      	ldr	r2, [pc, #260]	; (2120 <main+0x140>)
    201c:	fba2 2303 	umull	r2, r3, r2, r3
    2020:	099b      	lsrs	r3, r3, #6
    2022:	3b01      	subs	r3, #1
    2024:	4618      	mov	r0, r3
    2026:	f7ff ff39 	bl	1e9c <SysTick_Config>

	WDTInit(WDT_FEED_30_SECS);
    202a:	483e      	ldr	r0, [pc, #248]	; (2124 <main+0x144>)
    202c:	f001 f994 	bl	3358 <WDTInit>

	ConfigurePins();
    2030:	f7ff ff56 	bl	1ee0 <ConfigurePins>

	UARTInit( PORT_TRACE, 115200 );
    2034:	2000      	movs	r0, #0
    2036:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    203a:	f000 fe6f 	bl	2d1c <UARTInit>
	UARTInit( PORT_GSM,   115200 );
    203e:	2001      	movs	r0, #1
    2040:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    2044:	f000 fe6a 	bl	2d1c <UARTInit>
	UARTInit( PORT_GPS,   Baudrate );
    2048:	2002      	movs	r0, #2
    204a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    204e:	f000 fe65 	bl	2d1c <UARTInit>

	TraceNL("\r\nBooting up");
    2052:	4835      	ldr	r0, [pc, #212]	; (2128 <main+0x148>)
    2054:	f000 fb1a 	bl	268c <TraceNL>
	sprintf(buffer, "SystemCoreClock = %d Hz\r\n", SystemCoreClock);
    2058:	4b30      	ldr	r3, [pc, #192]	; (211c <main+0x13c>)
    205a:	681b      	ldr	r3, [r3, #0]
    205c:	1d3a      	adds	r2, r7, #4
    205e:	4610      	mov	r0, r2
    2060:	4932      	ldr	r1, [pc, #200]	; (212c <main+0x14c>)
    2062:	461a      	mov	r2, r3
    2064:	f001 fe68 	bl	3d38 <sprintf>
	Trace(buffer);
    2068:	1d3b      	adds	r3, r7, #4
    206a:	4618      	mov	r0, r3
    206c:	f000 fafe 	bl	266c <Trace>

	if( EEPROM_Init() == 0 )
    2070:	f7fe fb80 	bl	774 <EEPROM_Init>
    2074:	4603      	mov	r3, r0
    2076:	2b00      	cmp	r3, #0
    2078:	d103      	bne.n	2082 <main+0xa2>
	{
		TraceNL("EEPROM Initialization failed.");
    207a:	482d      	ldr	r0, [pc, #180]	; (2130 <main+0x150>)
    207c:	f000 fb06 	bl	268c <TraceNL>
    2080:	e002      	b.n	2088 <main+0xa8>
	} else {
		TraceNL("EEPROM Initialized.");
    2082:	482c      	ldr	r0, [pc, #176]	; (2134 <main+0x154>)
    2084:	f000 fb02 	bl	268c <TraceNL>
	}

	WDTFeed();
    2088:	f001 f984 	bl	3394 <WDTFeed>
	LoadParams();
    208c:	f7fe f938 	bl	300 <LoadParams>

	TraceNL( "Checking upgrade request" );
    2090:	4829      	ldr	r0, [pc, #164]	; (2138 <main+0x158>)
    2092:	f000 fafb 	bl	268c <TraceNL>

	if( IsUpgradeRequested() )
    2096:	f000 f85d 	bl	2154 <IsUpgradeRequested>
    209a:	4603      	mov	r3, r0
    209c:	2b00      	cmp	r3, #0
    209e:	d025      	beq.n	20ec <main+0x10c>
	{
		TraceNL( "System image upgrade requested" );
    20a0:	4826      	ldr	r0, [pc, #152]	; (213c <main+0x15c>)
    20a2:	f000 faf3 	bl	268c <TraceNL>
		int8_t 	trials = 3;
    20a6:	2303      	movs	r3, #3
    20a8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		while( trials-- > 0 )
    20ac:	e011      	b.n	20d2 <main+0xf2>
		{
			/*
			 * 	Initialize GSM module
			 * 	Setup a server connection to update server
			 */
			if( GSM_ConnectToTrioUpgradeServer() == SUCCESS )
    20ae:	f7fe fcdf 	bl	a70 <GSM_ConnectToTrioUpgradeServer>
    20b2:	4603      	mov	r3, r0
    20b4:	2b00      	cmp	r3, #0
    20b6:	d10c      	bne.n	20d2 <main+0xf2>
			{
				TraceNL( "Server Connection Established to Upgrade server" );
    20b8:	4821      	ldr	r0, [pc, #132]	; (2140 <main+0x160>)
    20ba:	f000 fae7 	bl	268c <TraceNL>
				WDTFeed( );
    20be:	f001 f969 	bl	3394 <WDTFeed>
				DownloadSecondaryImage();
    20c2:	f000 f883 	bl	21cc <DownloadSecondaryImage>
				WDTFeed( );
    20c6:	f001 f965 	bl	3394 <WDTFeed>
				TraceNL( "Download finished " );
    20ca:	481e      	ldr	r0, [pc, #120]	; (2144 <main+0x164>)
    20cc:	f000 fade 	bl	268c <TraceNL>
				break;
    20d0:	e009      	b.n	20e6 <main+0x106>

	if( IsUpgradeRequested() )
	{
		TraceNL( "System image upgrade requested" );
		int8_t 	trials = 3;
		while( trials-- > 0 )
    20d2:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
    20d6:	b2d3      	uxtb	r3, r2
    20d8:	3b01      	subs	r3, #1
    20da:	b2db      	uxtb	r3, r3
    20dc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    20e0:	b253      	sxtb	r3, r2
    20e2:	2b00      	cmp	r3, #0
    20e4:	dce3      	bgt.n	20ae <main+0xce>
				WDTFeed( );
				TraceNL( "Download finished " );
				break;
			}
		}
		TraceNL( "Finished upgrading" );
    20e6:	4818      	ldr	r0, [pc, #96]	; (2148 <main+0x168>)
    20e8:	f000 fad0 	bl	268c <TraceNL>
	}

	if( IsSecondaryImageValid() == SUCCESS )
    20ec:	f000 fa5a 	bl	25a4 <IsSecondaryImageValid>
    20f0:	4603      	mov	r3, r0
    20f2:	2b00      	cmp	r3, #0
    20f4:	d106      	bne.n	2104 <main+0x124>
	{
		TraceNL( "Booting SECONDARY image" );
    20f6:	4815      	ldr	r0, [pc, #84]	; (214c <main+0x16c>)
    20f8:	f000 fac8 	bl	268c <TraceNL>
		ExecuteApplicationImage( SECONDARY_IMAGE_LOAD_ADDR );
    20fc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2100:	f000 f8c8 	bl	2294 <ExecuteApplicationImage>
	}

	TraceNL( "Booting PRIMARY image" );
    2104:	4812      	ldr	r0, [pc, #72]	; (2150 <main+0x170>)
    2106:	f000 fac1 	bl	268c <TraceNL>
	WDTFeed( );
    210a:	f001 f943 	bl	3394 <WDTFeed>
	ExecuteApplicationImage( PRIMARY_IMAGE_LOAD_ADDR );
    210e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2112:	f000 f8bf 	bl	2294 <ExecuteApplicationImage>

	while ( 1L );
    2116:	e7fe      	b.n	2116 <main+0x136>
    2118:	400fc000 	.word	0x400fc000
    211c:	10000024 	.word	0x10000024
    2120:	10624dd3 	.word	0x10624dd3
    2124:	0c6aea15 	.word	0x0c6aea15
    2128:	00006f98 	.word	0x00006f98
    212c:	00006fa8 	.word	0x00006fa8
    2130:	00006fc4 	.word	0x00006fc4
    2134:	00006fe4 	.word	0x00006fe4
    2138:	00006ff8 	.word	0x00006ff8
    213c:	00007014 	.word	0x00007014
    2140:	00007034 	.word	0x00007034
    2144:	00007064 	.word	0x00007064
    2148:	00007078 	.word	0x00007078
    214c:	0000708c 	.word	0x0000708c
    2150:	000070a4 	.word	0x000070a4

00002154 <IsUpgradeRequested>:
** Returned value:	TRUE	upgrade is requested
** 					FALSE   upgrade is not requested
**
******************************************************************************/
uint32_t	IsUpgradeRequested( void )
{
    2154:	b580      	push	{r7, lr}
    2156:	b09a      	sub	sp, #104	; 0x68
    2158:	af00      	add	r7, sp, #0
	if( (*( (uint32_t *)UPGRADE_PARAMETERS_ADDR) ) != 0xFFFFFFFF )
    215a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
    215e:	681b      	ldr	r3, [r3, #0]
    2160:	f1b3 3fff 	cmp.w	r3, #4294967295
    2164:	d026      	beq.n	21b4 <IsUpgradeRequested+0x60>
	{
		char buffer[100];
		char * port ;
		strcpy( update_service_ip, UPGRADE_PARAMETERS_ADDR );
    2166:	4816      	ldr	r0, [pc, #88]	; (21c0 <IsUpgradeRequested+0x6c>)
    2168:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
    216c:	f003 fa2b 	bl	55c6 <strcpy>

		port = strchr( UPGRADE_PARAMETERS_ADDR, '\0' );
    2170:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
    2174:	2100      	movs	r1, #0
    2176:	f003 fa19 	bl	55ac <strchr>
    217a:	6678      	str	r0, [r7, #100]	; 0x64
		port++;
    217c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    217e:	3301      	adds	r3, #1
    2180:	667b      	str	r3, [r7, #100]	; 0x64
		strcpy( update_service_port, port);
    2182:	4810      	ldr	r0, [pc, #64]	; (21c4 <IsUpgradeRequested+0x70>)
    2184:	6e79      	ldr	r1, [r7, #100]	; 0x64
    2186:	f003 fa1e 	bl	55c6 <strcpy>

		sprintf(buffer,"Update parameters %s:%s", update_service_ip, update_service_port);
    218a:	463b      	mov	r3, r7
    218c:	4618      	mov	r0, r3
    218e:	490e      	ldr	r1, [pc, #56]	; (21c8 <IsUpgradeRequested+0x74>)
    2190:	4a0b      	ldr	r2, [pc, #44]	; (21c0 <IsUpgradeRequested+0x6c>)
    2192:	4b0c      	ldr	r3, [pc, #48]	; (21c4 <IsUpgradeRequested+0x70>)
    2194:	f001 fdd0 	bl	3d38 <sprintf>
		TraceNL( buffer );
    2198:	463b      	mov	r3, r7
    219a:	4618      	mov	r0, r3
    219c:	f000 fa76 	bl	268c <TraceNL>

		u32IAP_PrepareSectors( UPGRADE_PARAMETERS_SEC, UPGRADE_PARAMETERS_SEC );
    21a0:	200f      	movs	r0, #15
    21a2:	210f      	movs	r1, #15
    21a4:	f7ff fd64 	bl	1c70 <u32IAP_PrepareSectors>
		u32IAP_EraseSectors( UPGRADE_PARAMETERS_SEC, UPGRADE_PARAMETERS_SEC );
    21a8:	200f      	movs	r0, #15
    21aa:	210f      	movs	r1, #15
    21ac:	f7ff fdae 	bl	1d0c <u32IAP_EraseSectors>
		return TRUE;
    21b0:	2301      	movs	r3, #1
    21b2:	e000      	b.n	21b6 <IsUpgradeRequested+0x62>
	}

	return FALSE;
    21b4:	2300      	movs	r3, #0
}
    21b6:	4618      	mov	r0, r3
    21b8:	3768      	adds	r7, #104	; 0x68
    21ba:	46bd      	mov	sp, r7
    21bc:	bd80      	pop	{r7, pc}
    21be:	bf00      	nop
    21c0:	10000000 	.word	0x10000000
    21c4:	10000014 	.word	0x10000014
    21c8:	000070bc 	.word	0x000070bc

000021cc <DownloadSecondaryImage>:


void DownloadSecondaryImage( void )
{
    21cc:	b590      	push	{r4, r7, lr}
    21ce:	b0a3      	sub	sp, #140	; 0x8c
    21d0:	af02      	add	r7, sp, #8
	uint32_t	reason[5];
	uint32_t	i;

	char buff[100];

	i = SECONDARY_IMAGE_START_SEC;
    21d2:	2316      	movs	r3, #22
    21d4:	67fb      	str	r3, [r7, #124]	; 0x7c
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    21d6:	e00a      	b.n	21ee <DownloadSecondaryImage+0x22>
	{
		u32IAP_PrepareSectors( i, i );
    21d8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    21da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    21dc:	f7ff fd48 	bl	1c70 <u32IAP_PrepareSectors>
		u32IAP_EraseSectors( i, i );
    21e0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    21e2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    21e4:	f7ff fd92 	bl	1d0c <u32IAP_EraseSectors>
	uint32_t	i;

	char buff[100];

	i = SECONDARY_IMAGE_START_SEC;
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    21e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    21ea:	3301      	adds	r3, #1
    21ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    21ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    21f0:	2b1b      	cmp	r3, #27
    21f2:	d9f1      	bls.n	21d8 <DownloadSecondaryImage+0xc>
	{
		u32IAP_PrepareSectors( i, i );
		u32IAP_EraseSectors( i, i );
	}
	TraceNL( "Checking if target memory is blank" );
    21f4:	4821      	ldr	r0, [pc, #132]	; (227c <DownloadSecondaryImage+0xb0>)
    21f6:	f000 fa49 	bl	268c <TraceNL>


	i = SECONDARY_IMAGE_START_SEC;
    21fa:	2316      	movs	r3, #22
    21fc:	67fb      	str	r3, [r7, #124]	; 0x7c
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    21fe:	e02d      	b.n	225c <DownloadSecondaryImage+0x90>
	{
		if( u32IAP_BlankCheckSectors( i, i, &reason[0] )== IAP_STA_SECTOR_NOT_BLANK )
    2200:	f107 0368 	add.w	r3, r7, #104	; 0x68
    2204:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    2206:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    2208:	461a      	mov	r2, r3
    220a:	f7ff fdaf 	bl	1d6c <u32IAP_BlankCheckSectors>
    220e:	4603      	mov	r3, r0
    2210:	2b08      	cmp	r3, #8
    2212:	d116      	bne.n	2242 <DownloadSecondaryImage+0x76>
		{
			sprintf(buff, "Target sector (%d) is not blank addr: 0x%X, 0x%X", i, reason[0], reason[1] );
    2214:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    2216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    2218:	1d3a      	adds	r2, r7, #4
    221a:	9300      	str	r3, [sp, #0]
    221c:	4610      	mov	r0, r2
    221e:	4918      	ldr	r1, [pc, #96]	; (2280 <DownloadSecondaryImage+0xb4>)
    2220:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    2222:	4623      	mov	r3, r4
    2224:	f001 fd88 	bl	3d38 <sprintf>
			TraceNL( buff );
    2228:	1d3b      	adds	r3, r7, #4
    222a:	4618      	mov	r0, r3
    222c:	f000 fa2e 	bl	268c <TraceNL>
			u32IAP_PrepareSectors( i, i );
    2230:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    2232:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    2234:	f7ff fd1c 	bl	1c70 <u32IAP_PrepareSectors>
			u32IAP_EraseSectors( i, i);
    2238:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    223a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    223c:	f7ff fd66 	bl	1d0c <u32IAP_EraseSectors>
    2240:	e009      	b.n	2256 <DownloadSecondaryImage+0x8a>

		}else
		{
			sprintf(buff, "Target sector (%d) is blank ", i );
    2242:	1d3b      	adds	r3, r7, #4
    2244:	4618      	mov	r0, r3
    2246:	490f      	ldr	r1, [pc, #60]	; (2284 <DownloadSecondaryImage+0xb8>)
    2248:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    224a:	f001 fd75 	bl	3d38 <sprintf>
			TraceNL( buff );
    224e:	1d3b      	adds	r3, r7, #4
    2250:	4618      	mov	r0, r3
    2252:	f000 fa1b 	bl	268c <TraceNL>
	}
	TraceNL( "Checking if target memory is blank" );


	i = SECONDARY_IMAGE_START_SEC;
	for( ; i <= SECONDARY_IMAGE_END_SEC; i++ )
    2256:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    2258:	3301      	adds	r3, #1
    225a:	67fb      	str	r3, [r7, #124]	; 0x7c
    225c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    225e:	2b1b      	cmp	r3, #27
    2260:	d9ce      	bls.n	2200 <DownloadSecondaryImage+0x34>
			TraceNL( buff );
		}
	}

	/*	Clear the received data counter using in the load_mage function */
	received_data = 0;
    2262:	4b09      	ldr	r3, [pc, #36]	; (2288 <DownloadSecondaryImage+0xbc>)
    2264:	2200      	movs	r2, #0
    2266:	601a      	str	r2, [r3, #0]

	TraceNL( "Starting download" );
    2268:	4808      	ldr	r0, [pc, #32]	; (228c <DownloadSecondaryImage+0xc0>)
    226a:	f000 fa0f 	bl	268c <TraceNL>
	/*	Store a new image into flash */
	XModem1K_Client( &loadImage );
    226e:	4808      	ldr	r0, [pc, #32]	; (2290 <DownloadSecondaryImage+0xc4>)
    2270:	f001 f946 	bl	3500 <XModem1K_Client>


}
    2274:	3784      	adds	r7, #132	; 0x84
    2276:	46bd      	mov	sp, r7
    2278:	bd90      	pop	{r4, r7, pc}
    227a:	bf00      	nop
    227c:	000070d4 	.word	0x000070d4
    2280:	000070f8 	.word	0x000070f8
    2284:	0000712c 	.word	0x0000712c
    2288:	1000043c 	.word	0x1000043c
    228c:	0000714c 	.word	0x0000714c
    2290:	000022c5 	.word	0x000022c5

00002294 <ExecuteApplicationImage>:

void ExecuteApplicationImage( unsigned int startAddress )
{
    2294:	b580      	push	{r7, lr}
    2296:	b084      	sub	sp, #16
    2298:	af00      	add	r7, sp, #0
    229a:	6078      	str	r0, [r7, #4]
	unsigned *p;	// used for loading address of reset handler from user flash

	/* Change the Vector Table to the
	in case the user application uses interrupts */

	SCB->VTOR = (startAddress & 0x1FFFFF80);
    229c:	4a08      	ldr	r2, [pc, #32]	; (22c0 <ExecuteApplicationImage+0x2c>)
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    22a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    22a8:	6093      	str	r3, [r2, #8]

	// Load contents of second word of user flash - the reset handler address
	// in the applications vector table
	p = (unsigned *)(startAddress + 4);
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	3304      	adds	r3, #4
    22ae:	60fb      	str	r3, [r7, #12]

	// Set user_code_entry to be the address contained in that second word
	// of user flash
	user_code_entry = (void *) *p;
    22b0:	68fb      	ldr	r3, [r7, #12]
    22b2:	681b      	ldr	r3, [r3, #0]
    22b4:	60bb      	str	r3, [r7, #8]

	// Jump to user application
    user_code_entry();
    22b6:	68bb      	ldr	r3, [r7, #8]
    22b8:	4798      	blx	r3
}
    22ba:	3710      	adds	r7, #16
    22bc:	46bd      	mov	sp, r7
    22be:	bd80      	pop	{r7, pc}
    22c0:	e000ed00 	.word	0xe000ed00

000022c4 <loadImage>:

static uint32_t loadImage( uint8_t *data, uint16_t length )
{
    22c4:	b580      	push	{r7, lr}
    22c6:	b0c4      	sub	sp, #272	; 0x110
    22c8:	af00      	add	r7, sp, #0
    22ca:	1d3b      	adds	r3, r7, #4
    22cc:	6018      	str	r0, [r3, #0]
    22ce:	460a      	mov	r2, r1
    22d0:	1cbb      	adds	r3, r7, #2
    22d2:	801a      	strh	r2, [r3, #0]
	char buffer[250];
	uint32_t rc;
	int i;

	sprintf(buffer, "Totally received : %d   frame length : %d\r\n", received_data, length);
    22d4:	4b61      	ldr	r3, [pc, #388]	; (245c <loadImage+0x198>)
    22d6:	681a      	ldr	r2, [r3, #0]
    22d8:	1cbb      	adds	r3, r7, #2
    22da:	881b      	ldrh	r3, [r3, #0]
    22dc:	f107 010c 	add.w	r1, r7, #12
    22e0:	4608      	mov	r0, r1
    22e2:	495f      	ldr	r1, [pc, #380]	; (2460 <loadImage+0x19c>)
    22e4:	f001 fd28 	bl	3d38 <sprintf>
	Trace( buffer );
    22e8:	f107 030c 	add.w	r3, r7, #12
    22ec:	4618      	mov	r0, r3
    22ee:	f000 f9bd 	bl	266c <Trace>

	if( length == 0 && flashWriteIndex == 0 )
    22f2:	1cbb      	adds	r3, r7, #2
    22f4:	881b      	ldrh	r3, [r3, #0]
    22f6:	2b00      	cmp	r3, #0
    22f8:	d105      	bne.n	2306 <loadImage+0x42>
    22fa:	4b5a      	ldr	r3, [pc, #360]	; (2464 <loadImage+0x1a0>)
    22fc:	681b      	ldr	r3, [r3, #0]
    22fe:	2b00      	cmp	r3, #0
    2300:	d101      	bne.n	2306 <loadImage+0x42>
	{
		// Finished and all previous data has been written
		return ( 2 ); // return non zero to indicate success
    2302:	2302      	movs	r3, #2
    2304:	e0a4      	b.n	2450 <loadImage+0x18c>
	}

	for( i = 0; i < length; i++ )
    2306:	2300      	movs	r3, #0
    2308:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    230c:	e011      	b.n	2332 <loadImage+0x6e>
	{
		flashWriteBuffer[flashWriteIndex++] = data[i];
    230e:	4b55      	ldr	r3, [pc, #340]	; (2464 <loadImage+0x1a0>)
    2310:	681b      	ldr	r3, [r3, #0]
    2312:	1c5a      	adds	r2, r3, #1
    2314:	4953      	ldr	r1, [pc, #332]	; (2464 <loadImage+0x1a0>)
    2316:	600a      	str	r2, [r1, #0]
    2318:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
    231c:	1d39      	adds	r1, r7, #4
    231e:	6809      	ldr	r1, [r1, #0]
    2320:	440a      	add	r2, r1
    2322:	7811      	ldrb	r1, [r2, #0]
    2324:	4a50      	ldr	r2, [pc, #320]	; (2468 <loadImage+0x1a4>)
    2326:	54d1      	strb	r1, [r2, r3]
	{
		// Finished and all previous data has been written
		return ( 2 ); // return non zero to indicate success
	}

	for( i = 0; i < length; i++ )
    2328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    232c:	3301      	adds	r3, #1
    232e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    2332:	1cbb      	adds	r3, r7, #2
    2334:	881a      	ldrh	r2, [r3, #0]
    2336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    233a:	429a      	cmp	r2, r3
    233c:	dce7      	bgt.n	230e <loadImage+0x4a>
	{
		flashWriteBuffer[flashWriteIndex++] = data[i];
	}

	if( flashWriteIndex && ((flashWriteIndex % FLASH_SECTOR_SIZE) == 0) )
    233e:	4b49      	ldr	r3, [pc, #292]	; (2464 <loadImage+0x1a0>)
    2340:	681b      	ldr	r3, [r3, #0]
    2342:	2b00      	cmp	r3, #0
    2344:	f000 8083 	beq.w	244e <loadImage+0x18a>
    2348:	4b46      	ldr	r3, [pc, #280]	; (2464 <loadImage+0x1a0>)
    234a:	681b      	ldr	r3, [r3, #0]
    234c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2350:	2b00      	cmp	r3, #0
    2352:	d17c      	bne.n	244e <loadImage+0x18a>
	{
		sprintf(buffer, "Totally : %d  flashWriteIndex : %d\r\n",
    2354:	4b41      	ldr	r3, [pc, #260]	; (245c <loadImage+0x198>)
    2356:	681a      	ldr	r2, [r3, #0]
    2358:	4b42      	ldr	r3, [pc, #264]	; (2464 <loadImage+0x1a0>)
    235a:	681b      	ldr	r3, [r3, #0]
    235c:	f107 010c 	add.w	r1, r7, #12
    2360:	4608      	mov	r0, r1
    2362:	4942      	ldr	r1, [pc, #264]	; (246c <loadImage+0x1a8>)
    2364:	f001 fce8 	bl	3d38 <sprintf>
//		TraceDumpHex(buffer, strlen(buffer));
//		TraceDumpHex(flashWriteBuffer, flashWriteIndex);

		/*	Prepare Sectors to be flashed */
		// TODO arrange sectors for primary image
		if (u32IAP_PrepareSectors(22, 27) == IAP_STA_CMD_SUCCESS) {
    2368:	2016      	movs	r0, #22
    236a:	211b      	movs	r1, #27
    236c:	f7ff fc80 	bl	1c70 <u32IAP_PrepareSectors>
    2370:	4603      	mov	r3, r0
    2372:	2b00      	cmp	r3, #0
    2374:	d16b      	bne.n	244e <loadImage+0x18a>
			TraceNL("prepared ");
    2376:	483e      	ldr	r0, [pc, #248]	; (2470 <loadImage+0x1ac>)
    2378:	f000 f988 	bl	268c <TraceNL>

			rc = u32IAP_CopyRAMToFlash(
    237c:	4b37      	ldr	r3, [pc, #220]	; (245c <loadImage+0x198>)
    237e:	681b      	ldr	r3, [r3, #0]
    2380:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
    2384:	4938      	ldr	r1, [pc, #224]	; (2468 <loadImage+0x1a4>)
    2386:	4b37      	ldr	r3, [pc, #220]	; (2464 <loadImage+0x1a0>)
    2388:	681b      	ldr	r3, [r3, #0]
    238a:	4610      	mov	r0, r2
    238c:	461a      	mov	r2, r3
    238e:	f7ff fc93 	bl	1cb8 <u32IAP_CopyRAMToFlash>
    2392:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
					SECONDARY_IMAGE_LOAD_ADDR + received_data,
					(uint32_t) flashWriteBuffer,
					flashWriteIndex
					);

			sprintf( buffer, "Copy Ram result code : %d\r\n", rc );
    2396:	f107 030c 	add.w	r3, r7, #12
    239a:	4618      	mov	r0, r3
    239c:	4935      	ldr	r1, [pc, #212]	; (2474 <loadImage+0x1b0>)
    239e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
    23a2:	f001 fcc9 	bl	3d38 <sprintf>
			TraceNL( buffer );
    23a6:	f107 030c 	add.w	r3, r7, #12
    23aa:	4618      	mov	r0, r3
    23ac:	f000 f96e 	bl	268c <TraceNL>
			/*	Copy data (already) located in RAM to flash */
			if (rc == IAP_STA_CMD_SUCCESS) {
    23b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    23b4:	2b00      	cmp	r3, #0
    23b6:	d14a      	bne.n	244e <loadImage+0x18a>
				TraceNL( "copied " );
    23b8:	482f      	ldr	r0, [pc, #188]	; (2478 <loadImage+0x1b4>)
    23ba:	f000 f967 	bl	268c <TraceNL>

				rc = u32IAP_Compare( SECONDARY_IMAGE_LOAD_ADDR + received_data,
    23be:	4b27      	ldr	r3, [pc, #156]	; (245c <loadImage+0x198>)
    23c0:	681b      	ldr	r3, [r3, #0]
    23c2:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
    23c6:	4928      	ldr	r1, [pc, #160]	; (2468 <loadImage+0x1a4>)
    23c8:	4b26      	ldr	r3, [pc, #152]	; (2464 <loadImage+0x1a0>)
    23ca:	681b      	ldr	r3, [r3, #0]
    23cc:	4610      	mov	r0, r2
    23ce:	461a      	mov	r2, r3
    23d0:	2300      	movs	r3, #0
    23d2:	f7ff fcf9 	bl	1dc8 <u32IAP_Compare>
    23d6:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
						             (uint32_t) flashWriteBuffer,
									 flashWriteIndex, 0
									);
				sprintf( buffer, "u32IAP_Compare : %d  wrote %d \r\n", rc , flashWriteIndex );
    23da:	4b22      	ldr	r3, [pc, #136]	; (2464 <loadImage+0x1a0>)
    23dc:	681b      	ldr	r3, [r3, #0]
    23de:	f107 020c 	add.w	r2, r7, #12
    23e2:	4610      	mov	r0, r2
    23e4:	4925      	ldr	r1, [pc, #148]	; (247c <loadImage+0x1b8>)
    23e6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
    23ea:	f001 fca5 	bl	3d38 <sprintf>
				Trace( buffer );
    23ee:	f107 030c 	add.w	r3, r7, #12
    23f2:	4618      	mov	r0, r3
    23f4:	f000 f93a 	bl	266c <Trace>

				/*	Verify the flash contents with the contents in RAM */
				if (rc == IAP_STA_CMD_SUCCESS)
    23f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    23fc:	2b00      	cmp	r3, #0
    23fe:	d10e      	bne.n	241e <loadImage+0x15a>
				{
					/*	Update and Print Received bytes counter */
					received_data += flashWriteIndex;
    2400:	4b16      	ldr	r3, [pc, #88]	; (245c <loadImage+0x198>)
    2402:	681a      	ldr	r2, [r3, #0]
    2404:	4b17      	ldr	r3, [pc, #92]	; (2464 <loadImage+0x1a0>)
    2406:	681b      	ldr	r3, [r3, #0]
    2408:	4413      	add	r3, r2
    240a:	4a14      	ldr	r2, [pc, #80]	; (245c <loadImage+0x198>)
    240c:	6013      	str	r3, [r2, #0]
					flashWriteIndex = 0;
    240e:	4b15      	ldr	r3, [pc, #84]	; (2464 <loadImage+0x1a0>)
    2410:	2200      	movs	r2, #0
    2412:	601a      	str	r2, [r3, #0]

					TraceNL( "verified " );
    2414:	481a      	ldr	r0, [pc, #104]	; (2480 <loadImage+0x1bc>)
    2416:	f000 f939 	bl	268c <TraceNL>
					return (1);
    241a:	2301      	movs	r3, #1
    241c:	e018      	b.n	2450 <loadImage+0x18c>
				} else {
					int count;
					TraceDumpHex( SECONDARY_IMAGE_LOAD_ADDR + received_data, flashWriteIndex );
    241e:	4b0f      	ldr	r3, [pc, #60]	; (245c <loadImage+0x198>)
    2420:	681b      	ldr	r3, [r3, #0]
    2422:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    2426:	461a      	mov	r2, r3
    2428:	4b0e      	ldr	r3, [pc, #56]	; (2464 <loadImage+0x1a0>)
    242a:	681b      	ldr	r3, [r3, #0]
    242c:	4610      	mov	r0, r2
    242e:	4619      	mov	r1, r3
    2430:	f000 f960 	bl	26f4 <TraceDumpHex>

					received_data += flashWriteIndex;
    2434:	4b09      	ldr	r3, [pc, #36]	; (245c <loadImage+0x198>)
    2436:	681a      	ldr	r2, [r3, #0]
    2438:	4b0a      	ldr	r3, [pc, #40]	; (2464 <loadImage+0x1a0>)
    243a:	681b      	ldr	r3, [r3, #0]
    243c:	4413      	add	r3, r2
    243e:	4a07      	ldr	r2, [pc, #28]	; (245c <loadImage+0x198>)
    2440:	6013      	str	r3, [r2, #0]
					flashWriteIndex = 0;
    2442:	4b08      	ldr	r3, [pc, #32]	; (2464 <loadImage+0x1a0>)
    2444:	2200      	movs	r2, #0
    2446:	601a      	str	r2, [r3, #0]
					TraceNL( "verification failed " );
    2448:	480e      	ldr	r0, [pc, #56]	; (2484 <loadImage+0x1c0>)
    244a:	f000 f91f 	bl	268c <TraceNL>
				}
			}
		}
	}

	return (0);
    244e:	2300      	movs	r3, #0
}
    2450:	4618      	mov	r0, r3
    2452:	f507 7788 	add.w	r7, r7, #272	; 0x110
    2456:	46bd      	mov	sp, r7
    2458:	bd80      	pop	{r7, pc}
    245a:	bf00      	nop
    245c:	1000043c 	.word	0x1000043c
    2460:	00007160 	.word	0x00007160
    2464:	10000438 	.word	0x10000438
    2468:	10000038 	.word	0x10000038
    246c:	0000718c 	.word	0x0000718c
    2470:	000071b4 	.word	0x000071b4
    2474:	000071c0 	.word	0x000071c0
    2478:	000071dc 	.word	0x000071dc
    247c:	000071e4 	.word	0x000071e4
    2480:	00007208 	.word	0x00007208
    2484:	00007214 	.word	0x00007214

00002488 <WriteImageSignature>:
** Returned value:	none
**
******************************************************************************/

void WriteImageSignature( uint32_t  size, uint32_t crc )
{
    2488:	b580      	push	{r7, lr}
    248a:	b0c6      	sub	sp, #280	; 0x118
    248c:	af00      	add	r7, sp, #0
    248e:	1d3b      	adds	r3, r7, #4
    2490:	6018      	str	r0, [r3, #0]
    2492:	463b      	mov	r3, r7
    2494:	6019      	str	r1, [r3, #0]

	char buffer[250];
	uint32_t rc;
	int i;

	char* startAddr = (char *)(SECONDARY_IMAGE_END_ADDR - 1024);
    2496:	4b3a      	ldr	r3, [pc, #232]	; (2580 <WriteImageSignature+0xf8>)
    2498:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	sprintf(buffer, "Writing signature: 0x%X   CRC : %X\r\n", size, crc);
    249c:	f107 0108 	add.w	r1, r7, #8
    24a0:	1d3a      	adds	r2, r7, #4
    24a2:	463b      	mov	r3, r7
    24a4:	4608      	mov	r0, r1
    24a6:	4937      	ldr	r1, [pc, #220]	; (2584 <WriteImageSignature+0xfc>)
    24a8:	6812      	ldr	r2, [r2, #0]
    24aa:	681b      	ldr	r3, [r3, #0]
    24ac:	f001 fc44 	bl	3d38 <sprintf>
	Trace( buffer );
    24b0:	f107 0308 	add.w	r3, r7, #8
    24b4:	4618      	mov	r0, r3
    24b6:	f000 f8d9 	bl	266c <Trace>

	for( i = 0; i < 1024; i++ )
    24ba:	2300      	movs	r3, #0
    24bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    24c0:	e011      	b.n	24e6 <WriteImageSignature+0x5e>
	{
		flashWriteBuffer[i++] = *startAddr++;
    24c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    24c6:	1c5a      	adds	r2, r3, #1
    24c8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
    24cc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
    24d0:	1c51      	adds	r1, r2, #1
    24d2:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
    24d6:	7811      	ldrb	r1, [r2, #0]
    24d8:	4a2b      	ldr	r2, [pc, #172]	; (2588 <WriteImageSignature+0x100>)
    24da:	54d1      	strb	r1, [r2, r3]


	sprintf(buffer, "Writing signature: 0x%X   CRC : %X\r\n", size, crc);
	Trace( buffer );

	for( i = 0; i < 1024; i++ )
    24dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    24e0:	3301      	adds	r3, #1
    24e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    24e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    24ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    24ee:	dbe8      	blt.n	24c2 <WriteImageSignature+0x3a>
	{
		flashWriteBuffer[i++] = *startAddr++;
	}

	uint32_t* ptrCRC = &flashWriteBuffer[ 1024 - 4 ];
    24f0:	4b26      	ldr	r3, [pc, #152]	; (258c <WriteImageSignature+0x104>)
    24f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	*ptrCRC		= crc;
    24f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    24fa:	463a      	mov	r2, r7
    24fc:	6812      	ldr	r2, [r2, #0]
    24fe:	601a      	str	r2, [r3, #0]

	uint32_t* ptrSize = &flashWriteBuffer[ 1024 - 8 ];
    2500:	4b23      	ldr	r3, [pc, #140]	; (2590 <WriteImageSignature+0x108>)
    2502:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	*ptrSize	= size;
    2506:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    250a:	1d3a      	adds	r2, r7, #4
    250c:	6812      	ldr	r2, [r2, #0]
    250e:	601a      	str	r2, [r3, #0]

	if (u32IAP_PrepareSectors(SECONDARY_IMAGE_END_SEC,
    2510:	201b      	movs	r0, #27
    2512:	211b      	movs	r1, #27
    2514:	f7ff fbac 	bl	1c70 <u32IAP_PrepareSectors>
    2518:	4603      	mov	r3, r0
    251a:	2b00      	cmp	r3, #0
    251c:	d12a      	bne.n	2574 <WriteImageSignature+0xec>
			SECONDARY_IMAGE_END_SEC) == IAP_STA_CMD_SUCCESS)
	{
		TraceNL("prepared ");
    251e:	481d      	ldr	r0, [pc, #116]	; (2594 <WriteImageSignature+0x10c>)
    2520:	f000 f8b4 	bl	268c <TraceNL>
		u32IAP_EraseSectors( SECONDARY_IMAGE_END_SEC, SECONDARY_IMAGE_END_SEC );
    2524:	201b      	movs	r0, #27
    2526:	211b      	movs	r1, #27
    2528:	f7ff fbf0 	bl	1d0c <u32IAP_EraseSectors>
		TraceNL("Erased ");
    252c:	481a      	ldr	r0, [pc, #104]	; (2598 <WriteImageSignature+0x110>)
    252e:	f000 f8ad 	bl	268c <TraceNL>

		u32IAP_PrepareSectors(SECONDARY_IMAGE_END_SEC,
    2532:	201b      	movs	r0, #27
    2534:	211b      	movs	r1, #27
    2536:	f7ff fb9b 	bl	1c70 <u32IAP_PrepareSectors>
					SECONDARY_IMAGE_END_SEC);
		rc = u32IAP_CopyRAMToFlash((SECONDARY_IMAGE_END_ADDR - 1024),
    253a:	4b13      	ldr	r3, [pc, #76]	; (2588 <WriteImageSignature+0x100>)
    253c:	4810      	ldr	r0, [pc, #64]	; (2580 <WriteImageSignature+0xf8>)
    253e:	4619      	mov	r1, r3
    2540:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2544:	f7ff fbb8 	bl	1cb8 <u32IAP_CopyRAMToFlash>
    2548:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
				(uint32_t) flashWriteBuffer, 1024);

		sprintf(buffer, "Copy Ram result code : %d\r\n", rc);
    254c:	f107 0308 	add.w	r3, r7, #8
    2550:	4618      	mov	r0, r3
    2552:	4912      	ldr	r1, [pc, #72]	; (259c <WriteImageSignature+0x114>)
    2554:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    2558:	f001 fbee 	bl	3d38 <sprintf>
		TraceNL(buffer);
    255c:	f107 0308 	add.w	r3, r7, #8
    2560:	4618      	mov	r0, r3
    2562:	f000 f893 	bl	268c <TraceNL>
		/*	Copy data (already) located in RAM to flash */
		if (rc == IAP_STA_CMD_SUCCESS) {
    2566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    256a:	2b00      	cmp	r3, #0
    256c:	d102      	bne.n	2574 <WriteImageSignature+0xec>
			TraceNL("copied ");
    256e:	480c      	ldr	r0, [pc, #48]	; (25a0 <WriteImageSignature+0x118>)
    2570:	f000 f88c 	bl	268c <TraceNL>
		}
	}

	return;
    2574:	bf00      	nop
}
    2576:	f507 778c 	add.w	r7, r7, #280	; 0x118
    257a:	46bd      	mov	sp, r7
    257c:	bd80      	pop	{r7, pc}
    257e:	bf00      	nop
    2580:	0006fc00 	.word	0x0006fc00
    2584:	0000722c 	.word	0x0000722c
    2588:	10000038 	.word	0x10000038
    258c:	10000434 	.word	0x10000434
    2590:	10000430 	.word	0x10000430
    2594:	000071b4 	.word	0x000071b4
    2598:	00007254 	.word	0x00007254
    259c:	000071c0 	.word	0x000071c0
    25a0:	000071dc 	.word	0x000071dc

000025a4 <IsSecondaryImageValid>:


static int32_t IsSecondaryImageValid( void )
{
    25a4:	b580      	push	{r7, lr}
    25a6:	b09c      	sub	sp, #112	; 0x70
    25a8:	af00      	add	r7, sp, #0
	char buffer[100];

	uint32_t size = *(uint32_t *)(SECONDARY_IMAGE_END_ADDR - 8);
    25aa:	4b1a      	ldr	r3, [pc, #104]	; (2614 <IsSecondaryImageValid+0x70>)
    25ac:	681b      	ldr	r3, [r3, #0]
    25ae:	66fb      	str	r3, [r7, #108]	; 0x6c

	uint16_t crc  = *(uint16_t *)(SECONDARY_IMAGE_END_ADDR - 4);
    25b0:	4b19      	ldr	r3, [pc, #100]	; (2618 <IsSecondaryImageValid+0x74>)
    25b2:	881b      	ldrh	r3, [r3, #0]
    25b4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	sprintf(buffer, "Signature: 0x%X   CRC : %X\r\n", size, crc);
    25b8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
    25bc:	1d3a      	adds	r2, r7, #4
    25be:	4610      	mov	r0, r2
    25c0:	4916      	ldr	r1, [pc, #88]	; (261c <IsSecondaryImageValid+0x78>)
    25c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    25c4:	f001 fbb8 	bl	3d38 <sprintf>
	Trace( buffer );
    25c8:	1d3b      	adds	r3, r7, #4
    25ca:	4618      	mov	r0, r3
    25cc:	f000 f84e 	bl	266c <Trace>

	uint16_t calculatedCRC = u16CRC_Calc16( SECONDARY_IMAGE_LOAD_ADDR, size );
    25d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    25d2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    25d6:	4619      	mov	r1, r3
    25d8:	f7fe fe10 	bl	11fc <u16CRC_Calc16>
    25dc:	4603      	mov	r3, r0
    25de:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

	sprintf( buffer, "Calculated Image CRC: 0x%X\r\n", calculatedCRC );
    25e2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
    25e6:	1d3a      	adds	r2, r7, #4
    25e8:	4610      	mov	r0, r2
    25ea:	490d      	ldr	r1, [pc, #52]	; (2620 <IsSecondaryImageValid+0x7c>)
    25ec:	461a      	mov	r2, r3
    25ee:	f001 fba3 	bl	3d38 <sprintf>
	Trace( buffer );
    25f2:	1d3b      	adds	r3, r7, #4
    25f4:	4618      	mov	r0, r3
    25f6:	f000 f839 	bl	266c <Trace>

	if( crc == calculatedCRC )
    25fa:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
    25fe:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
    2602:	429a      	cmp	r2, r3
    2604:	d101      	bne.n	260a <IsSecondaryImageValid+0x66>
		return ( 0 );  // image is valid
    2606:	2300      	movs	r3, #0
    2608:	e000      	b.n	260c <IsSecondaryImageValid+0x68>

	return ( 1 );  //image is not valid
    260a:	2301      	movs	r3, #1
}
    260c:	4618      	mov	r0, r3
    260e:	3770      	adds	r7, #112	; 0x70
    2610:	46bd      	mov	sp, r7
    2612:	bd80      	pop	{r7, pc}
    2614:	0006fff8 	.word	0x0006fff8
    2618:	0006fffc 	.word	0x0006fffc
    261c:	0000725c 	.word	0x0000725c
    2620:	0000727c 	.word	0x0000727c

00002624 <SysTick_Handler>:
 *  Created on: 14 Kas 2012
 *      Author: trio
 */
#include <LPC17xx.h>
#include "timer.h"
void SysTick_Handler(void) {
    2624:	b480      	push	{r7}
    2626:	af00      	add	r7, sp, #0
	STT_Value++;
    2628:	4b04      	ldr	r3, [pc, #16]	; (263c <SysTick_Handler+0x18>)
    262a:	681b      	ldr	r3, [r3, #0]
    262c:	3301      	adds	r3, #1
    262e:	4a03      	ldr	r2, [pc, #12]	; (263c <SysTick_Handler+0x18>)
    2630:	6013      	str	r3, [r2, #0]
}
    2632:	46bd      	mov	sp, r7
    2634:	f85d 7b04 	ldr.w	r7, [sp], #4
    2638:	4770      	bx	lr
    263a:	bf00      	nop
    263c:	10000d24 	.word	0x10000d24

00002640 <DelayMs>:

void DelayMs(unsigned int t) // 65536 max.
{
    2640:	b480      	push	{r7}
    2642:	b085      	sub	sp, #20
    2644:	af00      	add	r7, sp, #0
    2646:	6078      	str	r0, [r7, #4]
	unsigned long temp;
	temp = STT_Value;
    2648:	4b07      	ldr	r3, [pc, #28]	; (2668 <DelayMs+0x28>)
    264a:	681b      	ldr	r3, [r3, #0]
    264c:	60fb      	str	r3, [r7, #12]
	while ((STT_Value - temp) < t);
    264e:	bf00      	nop
    2650:	4b05      	ldr	r3, [pc, #20]	; (2668 <DelayMs+0x28>)
    2652:	681a      	ldr	r2, [r3, #0]
    2654:	68fb      	ldr	r3, [r7, #12]
    2656:	1ad2      	subs	r2, r2, r3
    2658:	687b      	ldr	r3, [r7, #4]
    265a:	429a      	cmp	r2, r3
    265c:	d3f8      	bcc.n	2650 <DelayMs+0x10>
}
    265e:	3714      	adds	r7, #20
    2660:	46bd      	mov	sp, r7
    2662:	f85d 7b04 	ldr.w	r7, [sp], #4
    2666:	4770      	bx	lr
    2668:	10000d24 	.word	0x10000d24

0000266c <Trace>:
#include <string.h>
#include <trace.h>


void Trace( char* msg)
{
    266c:	b580      	push	{r7, lr}
    266e:	b082      	sub	sp, #8
    2670:	af00      	add	r7, sp, #0
    2672:	6078      	str	r0, [r7, #4]

	UARTSend(PORT_TRACE, (unsigned char*)msg, strlen(msg));
    2674:	6878      	ldr	r0, [r7, #4]
    2676:	f002 ffc7 	bl	5608 <strlen>
    267a:	4603      	mov	r3, r0
    267c:	2000      	movs	r0, #0
    267e:	6879      	ldr	r1, [r7, #4]
    2680:	461a      	mov	r2, r3
    2682:	f000 fce3 	bl	304c <UARTSend>

}
    2686:	3708      	adds	r7, #8
    2688:	46bd      	mov	sp, r7
    268a:	bd80      	pop	{r7, pc}

0000268c <TraceNL>:

void TraceNL( char* msg)
{
    268c:	b580      	push	{r7, lr}
    268e:	b082      	sub	sp, #8
    2690:	af00      	add	r7, sp, #0
    2692:	6078      	str	r0, [r7, #4]
	UARTSend(PORT_TRACE, (unsigned char*)msg, strlen(msg));
    2694:	6878      	ldr	r0, [r7, #4]
    2696:	f002 ffb7 	bl	5608 <strlen>
    269a:	4603      	mov	r3, r0
    269c:	2000      	movs	r0, #0
    269e:	6879      	ldr	r1, [r7, #4]
    26a0:	461a      	mov	r2, r3
    26a2:	f000 fcd3 	bl	304c <UARTSend>
	UARTSend(PORT_TRACE, (unsigned char*)"\r\n", 2);
    26a6:	2000      	movs	r0, #0
    26a8:	4903      	ldr	r1, [pc, #12]	; (26b8 <TraceNL+0x2c>)
    26aa:	2202      	movs	r2, #2
    26ac:	f000 fcce 	bl	304c <UARTSend>
}
    26b0:	3708      	adds	r7, #8
    26b2:	46bd      	mov	sp, r7
    26b4:	bd80      	pop	{r7, pc}
    26b6:	bf00      	nop
    26b8:	0000729c 	.word	0x0000729c

000026bc <TracePutcHex>:
{
	UARTSend(PORT_TRACE, (unsigned char*)&c, 1L);
}

void TracePutcHex( char c )
{
    26bc:	b580      	push	{r7, lr}
    26be:	b086      	sub	sp, #24
    26c0:	af00      	add	r7, sp, #0
    26c2:	4603      	mov	r3, r0
    26c4:	71fb      	strb	r3, [r7, #7]
	unsigned char  buff[10];
    int count;
	count = sprintf( buff, "%02x", c);
    26c6:	79fb      	ldrb	r3, [r7, #7]
    26c8:	f107 0208 	add.w	r2, r7, #8
    26cc:	4610      	mov	r0, r2
    26ce:	4908      	ldr	r1, [pc, #32]	; (26f0 <TracePutcHex+0x34>)
    26d0:	461a      	mov	r2, r3
    26d2:	f001 fb31 	bl	3d38 <sprintf>
    26d6:	6178      	str	r0, [r7, #20]
	UARTSend( PORT_TRACE, buff, count );
    26d8:	697b      	ldr	r3, [r7, #20]
    26da:	f107 0208 	add.w	r2, r7, #8
    26de:	2000      	movs	r0, #0
    26e0:	4611      	mov	r1, r2
    26e2:	461a      	mov	r2, r3
    26e4:	f000 fcb2 	bl	304c <UARTSend>

}
    26e8:	3718      	adds	r7, #24
    26ea:	46bd      	mov	sp, r7
    26ec:	bd80      	pop	{r7, pc}
    26ee:	bf00      	nop
    26f0:	000072a0 	.word	0x000072a0

000026f4 <TraceDumpHex>:

void TraceDumpHex( char* pMsg, int len )
{
    26f4:	b580      	push	{r7, lr}
    26f6:	b0d6      	sub	sp, #344	; 0x158
    26f8:	af00      	add	r7, sp, #0
    26fa:	1d3b      	adds	r3, r7, #4
    26fc:	6018      	str	r0, [r3, #0]
    26fe:	463b      	mov	r3, r7
    2700:	6019      	str	r1, [r3, #0]
#if defined (BOOTROM_DEBUG)

	int i, count;
	unsigned char buffer[300];
	unsigned char buff[17];
	unsigned char *pc = (unsigned char*) pMsg;
    2702:	1d3b      	adds	r3, r7, #4
    2704:	681b      	ldr	r3, [r3, #0]
    2706:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

	UARTSend( PORT_TRACE, "\r\n", 2);
    270a:	2000      	movs	r0, #0
    270c:	495a      	ldr	r1, [pc, #360]	; (2878 <TraceDumpHex+0x184>)
    270e:	2202      	movs	r2, #2
    2710:	f000 fc9c 	bl	304c <UARTSend>
	// Process every byte in the data.
	for (i = 0; i < len; i++) {
    2714:	2300      	movs	r3, #0
    2716:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    271a:	e07d      	b.n	2818 <TraceDumpHex+0x124>
		// Multiple of 16 means new line (with line offset).

		if ((i % 16) == 0) {
    271c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    2720:	f003 030f 	and.w	r3, r3, #15
    2724:	2b00      	cmp	r3, #0
    2726:	d117      	bne.n	2758 <TraceDumpHex+0x64>
			// Just don't print ASCII for the zeroth line.
			if (i != 0) {
    2728:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    272c:	2b00      	cmp	r3, #0
    272e:	d013      	beq.n	2758 <TraceDumpHex+0x64>
				count = sprintf(buffer, "  %s\r\n", buff);
    2730:	f107 0220 	add.w	r2, r7, #32
    2734:	f107 030c 	add.w	r3, r7, #12
    2738:	4610      	mov	r0, r2
    273a:	4950      	ldr	r1, [pc, #320]	; (287c <TraceDumpHex+0x188>)
    273c:	461a      	mov	r2, r3
    273e:	f001 fafb 	bl	3d38 <sprintf>
    2742:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
				UARTSend( PORT_TRACE, buffer, count);
    2746:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    274a:	f107 0220 	add.w	r2, r7, #32
    274e:	2000      	movs	r0, #0
    2750:	4611      	mov	r1, r2
    2752:	461a      	mov	r2, r3
    2754:	f000 fc7a 	bl	304c <UARTSend>
			}
		}
		count = sprintf(buffer, " %02x", pc[i]);
    2758:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    275c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    2760:	4413      	add	r3, r2
    2762:	781b      	ldrb	r3, [r3, #0]
    2764:	461a      	mov	r2, r3
    2766:	f107 0320 	add.w	r3, r7, #32
    276a:	4618      	mov	r0, r3
    276c:	4944      	ldr	r1, [pc, #272]	; (2880 <TraceDumpHex+0x18c>)
    276e:	f001 fae3 	bl	3d38 <sprintf>
    2772:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
		UARTSend( PORT_TRACE, buffer, count );
    2776:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    277a:	f107 0220 	add.w	r2, r7, #32
    277e:	2000      	movs	r0, #0
    2780:	4611      	mov	r1, r2
    2782:	461a      	mov	r2, r3
    2784:	f000 fc62 	bl	304c <UARTSend>

		// And store a printable ASCII character for later.
		if ((pc[i] < 0x20) || (pc[i] > 0x7e))
    2788:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    278c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    2790:	4413      	add	r3, r2
    2792:	781b      	ldrb	r3, [r3, #0]
    2794:	2b1f      	cmp	r3, #31
    2796:	d907      	bls.n	27a8 <TraceDumpHex+0xb4>
    2798:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    279c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    27a0:	4413      	add	r3, r2
    27a2:	781b      	ldrb	r3, [r3, #0]
    27a4:	2b7e      	cmp	r3, #126	; 0x7e
    27a6:	d90f      	bls.n	27c8 <TraceDumpHex+0xd4>
			buff[i % 16] = '.';
    27a8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    27ac:	4b35      	ldr	r3, [pc, #212]	; (2884 <TraceDumpHex+0x190>)
    27ae:	4013      	ands	r3, r2
    27b0:	2b00      	cmp	r3, #0
    27b2:	da03      	bge.n	27bc <TraceDumpHex+0xc8>
    27b4:	3b01      	subs	r3, #1
    27b6:	f063 030f 	orn	r3, r3, #15
    27ba:	3301      	adds	r3, #1
    27bc:	461a      	mov	r2, r3
    27be:	f107 030c 	add.w	r3, r7, #12
    27c2:	212e      	movs	r1, #46	; 0x2e
    27c4:	5499      	strb	r1, [r3, r2]
    27c6:	e013      	b.n	27f0 <TraceDumpHex+0xfc>
		else
			buff[i % 16] = pc[i];
    27c8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    27cc:	4b2d      	ldr	r3, [pc, #180]	; (2884 <TraceDumpHex+0x190>)
    27ce:	4013      	ands	r3, r2
    27d0:	2b00      	cmp	r3, #0
    27d2:	da03      	bge.n	27dc <TraceDumpHex+0xe8>
    27d4:	3b01      	subs	r3, #1
    27d6:	f063 030f 	orn	r3, r3, #15
    27da:	3301      	adds	r3, #1
    27dc:	4619      	mov	r1, r3
    27de:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    27e2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
    27e6:	4413      	add	r3, r2
    27e8:	781a      	ldrb	r2, [r3, #0]
    27ea:	f107 030c 	add.w	r3, r7, #12
    27ee:	545a      	strb	r2, [r3, r1]
		buff[(i % 16) + 1] = '\0';
    27f0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    27f4:	4b23      	ldr	r3, [pc, #140]	; (2884 <TraceDumpHex+0x190>)
    27f6:	4013      	ands	r3, r2
    27f8:	2b00      	cmp	r3, #0
    27fa:	da03      	bge.n	2804 <TraceDumpHex+0x110>
    27fc:	3b01      	subs	r3, #1
    27fe:	f063 030f 	orn	r3, r3, #15
    2802:	3301      	adds	r3, #1
    2804:	3301      	adds	r3, #1
    2806:	f107 020c 	add.w	r2, r7, #12
    280a:	2100      	movs	r1, #0
    280c:	54d1      	strb	r1, [r2, r3]
	unsigned char buff[17];
	unsigned char *pc = (unsigned char*) pMsg;

	UARTSend( PORT_TRACE, "\r\n", 2);
	// Process every byte in the data.
	for (i = 0; i < len; i++) {
    280e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    2812:	3301      	adds	r3, #1
    2814:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    2818:	463b      	mov	r3, r7
    281a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    281e:	681b      	ldr	r3, [r3, #0]
    2820:	429a      	cmp	r2, r3
    2822:	f6ff af7b 	blt.w	271c <TraceDumpHex+0x28>
			buff[i % 16] = pc[i];
		buff[(i % 16) + 1] = '\0';
	}

    // Pad out last line if not exactly 16 characters.
    while ((i % 16) != 0) {
    2826:	e009      	b.n	283c <TraceDumpHex+0x148>
    	UARTSend( PORT_TRACE, "   ", 3);
    2828:	2000      	movs	r0, #0
    282a:	4917      	ldr	r1, [pc, #92]	; (2888 <TraceDumpHex+0x194>)
    282c:	2203      	movs	r2, #3
    282e:	f000 fc0d 	bl	304c <UARTSend>
        i++;
    2832:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    2836:	3301      	adds	r3, #1
    2838:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			buff[i % 16] = pc[i];
		buff[(i % 16) + 1] = '\0';
	}

    // Pad out last line if not exactly 16 characters.
    while ((i % 16) != 0) {
    283c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    2840:	f003 030f 	and.w	r3, r3, #15
    2844:	2b00      	cmp	r3, #0
    2846:	d1ef      	bne.n	2828 <TraceDumpHex+0x134>
    	UARTSend( PORT_TRACE, "   ", 3);
        i++;
    }
	count = sprintf(buffer, "  %s\r\n", buff);
    2848:	f107 0220 	add.w	r2, r7, #32
    284c:	f107 030c 	add.w	r3, r7, #12
    2850:	4610      	mov	r0, r2
    2852:	490a      	ldr	r1, [pc, #40]	; (287c <TraceDumpHex+0x188>)
    2854:	461a      	mov	r2, r3
    2856:	f001 fa6f 	bl	3d38 <sprintf>
    285a:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
	UARTSend( PORT_TRACE, buffer, count);
    285e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    2862:	f107 0220 	add.w	r2, r7, #32
    2866:	2000      	movs	r0, #0
    2868:	4611      	mov	r1, r2
    286a:	461a      	mov	r2, r3
    286c:	f000 fbee 	bl	304c <UARTSend>
#endif
}
    2870:	f507 77ac 	add.w	r7, r7, #344	; 0x158
    2874:	46bd      	mov	sp, r7
    2876:	bd80      	pop	{r7, pc}
    2878:	0000729c 	.word	0x0000729c
    287c:	000072a8 	.word	0x000072a8
    2880:	000072b0 	.word	0x000072b0
    2884:	8000000f 	.word	0x8000000f
    2888:	000072b8 	.word	0x000072b8

0000288c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    288c:	b480      	push	{r7}
    288e:	b083      	sub	sp, #12
    2890:	af00      	add	r7, sp, #0
    2892:	4603      	mov	r3, r0
    2894:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    2896:	4908      	ldr	r1, [pc, #32]	; (28b8 <NVIC_EnableIRQ+0x2c>)
    2898:	f997 3007 	ldrsb.w	r3, [r7, #7]
    289c:	095b      	lsrs	r3, r3, #5
    289e:	79fa      	ldrb	r2, [r7, #7]
    28a0:	f002 021f 	and.w	r2, r2, #31
    28a4:	2001      	movs	r0, #1
    28a6:	fa00 f202 	lsl.w	r2, r0, r2
    28aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    28ae:	370c      	adds	r7, #12
    28b0:	46bd      	mov	sp, r7
    28b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    28b6:	4770      	bx	lr
    28b8:	e000e100 	.word	0xe000e100

000028bc <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
    28bc:	b480      	push	{r7}
    28be:	b083      	sub	sp, #12
    28c0:	af00      	add	r7, sp, #0
    28c2:	4603      	mov	r3, r0
    28c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    28c6:	4909      	ldr	r1, [pc, #36]	; (28ec <NVIC_DisableIRQ+0x30>)
    28c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
    28cc:	095b      	lsrs	r3, r3, #5
    28ce:	79fa      	ldrb	r2, [r7, #7]
    28d0:	f002 021f 	and.w	r2, r2, #31
    28d4:	2001      	movs	r0, #1
    28d6:	fa00 f202 	lsl.w	r2, r0, r2
    28da:	3320      	adds	r3, #32
    28dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    28e0:	370c      	adds	r7, #12
    28e2:	46bd      	mov	sp, r7
    28e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    28e8:	4770      	bx	lr
    28ea:	bf00      	nop
    28ec:	e000e100 	.word	0xe000e100

000028f0 <UART0_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART0_IRQHandler(void) {
    28f0:	b480      	push	{r7}
    28f2:	b083      	sub	sp, #12
    28f4:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART0->IIR;
    28f6:	4b3b      	ldr	r3, [pc, #236]	; (29e4 <UART0_IRQHandler+0xf4>)
    28f8:	689b      	ldr	r3, [r3, #8]
    28fa:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    28fc:	79bb      	ldrb	r3, [r7, #6]
    28fe:	085b      	lsrs	r3, r3, #1
    2900:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    2902:	79bb      	ldrb	r3, [r7, #6]
    2904:	f003 0307 	and.w	r3, r3, #7
    2908:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    290a:	79bb      	ldrb	r3, [r7, #6]
    290c:	2b03      	cmp	r3, #3
    290e:	d12c      	bne.n	296a <UART0_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART0->LSR;
    2910:	4b34      	ldr	r3, [pc, #208]	; (29e4 <UART0_IRQHandler+0xf4>)
    2912:	7d1b      	ldrb	r3, [r3, #20]
    2914:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2916:	797b      	ldrb	r3, [r7, #5]
    2918:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    291c:	2b00      	cmp	r3, #0
    291e:	d006      	beq.n	292e <UART0_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART0Status = LSRValue;
    2920:	797b      	ldrb	r3, [r7, #5]
    2922:	4a31      	ldr	r2, [pc, #196]	; (29e8 <UART0_IRQHandler+0xf8>)
    2924:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART0->RBR; /* Dummy read on RX to clear
    2926:	4b2f      	ldr	r3, [pc, #188]	; (29e4 <UART0_IRQHandler+0xf4>)
    2928:	781b      	ldrb	r3, [r3, #0]
    292a:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    292c:	e055      	b.n	29da <UART0_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    292e:	797b      	ldrb	r3, [r7, #5]
    2930:	f003 0301 	and.w	r3, r3, #1
    2934:	2b00      	cmp	r3, #0
    2936:	d050      	beq.n	29da <UART0_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART0Buffer[UART0Count] = LPC_UART0->RBR;
    2938:	4b2c      	ldr	r3, [pc, #176]	; (29ec <UART0_IRQHandler+0xfc>)
    293a:	881b      	ldrh	r3, [r3, #0]
    293c:	b29b      	uxth	r3, r3
    293e:	461a      	mov	r2, r3
    2940:	4b28      	ldr	r3, [pc, #160]	; (29e4 <UART0_IRQHandler+0xf4>)
    2942:	781b      	ldrb	r3, [r3, #0]
    2944:	b2d9      	uxtb	r1, r3
    2946:	4b2a      	ldr	r3, [pc, #168]	; (29f0 <UART0_IRQHandler+0x100>)
    2948:	5499      	strb	r1, [r3, r2]
			UART0Count++;
    294a:	4b28      	ldr	r3, [pc, #160]	; (29ec <UART0_IRQHandler+0xfc>)
    294c:	881b      	ldrh	r3, [r3, #0]
    294e:	b29b      	uxth	r3, r3
    2950:	3301      	adds	r3, #1
    2952:	b29a      	uxth	r2, r3
    2954:	4b25      	ldr	r3, [pc, #148]	; (29ec <UART0_IRQHandler+0xfc>)
    2956:	801a      	strh	r2, [r3, #0]
			if (UART0Count == BUFSIZE) {
    2958:	4b24      	ldr	r3, [pc, #144]	; (29ec <UART0_IRQHandler+0xfc>)
    295a:	881b      	ldrh	r3, [r3, #0]
    295c:	b29b      	uxth	r3, r3
    295e:	2bff      	cmp	r3, #255	; 0xff
    2960:	d13b      	bne.n	29da <UART0_IRQHandler+0xea>
				UART0Count = 0; /* buffer overflow */
    2962:	4b22      	ldr	r3, [pc, #136]	; (29ec <UART0_IRQHandler+0xfc>)
    2964:	2200      	movs	r2, #0
    2966:	801a      	strh	r2, [r3, #0]
    2968:	e037      	b.n	29da <UART0_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    296a:	79bb      	ldrb	r3, [r7, #6]
    296c:	2b02      	cmp	r3, #2
    296e:	d118      	bne.n	29a2 <UART0_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART0Buffer[UART0Count] = LPC_UART0->RBR;
    2970:	4b1e      	ldr	r3, [pc, #120]	; (29ec <UART0_IRQHandler+0xfc>)
    2972:	881b      	ldrh	r3, [r3, #0]
    2974:	b29b      	uxth	r3, r3
    2976:	461a      	mov	r2, r3
    2978:	4b1a      	ldr	r3, [pc, #104]	; (29e4 <UART0_IRQHandler+0xf4>)
    297a:	781b      	ldrb	r3, [r3, #0]
    297c:	b2d9      	uxtb	r1, r3
    297e:	4b1c      	ldr	r3, [pc, #112]	; (29f0 <UART0_IRQHandler+0x100>)
    2980:	5499      	strb	r1, [r3, r2]
		UART0Count++;
    2982:	4b1a      	ldr	r3, [pc, #104]	; (29ec <UART0_IRQHandler+0xfc>)
    2984:	881b      	ldrh	r3, [r3, #0]
    2986:	b29b      	uxth	r3, r3
    2988:	3301      	adds	r3, #1
    298a:	b29a      	uxth	r2, r3
    298c:	4b17      	ldr	r3, [pc, #92]	; (29ec <UART0_IRQHandler+0xfc>)
    298e:	801a      	strh	r2, [r3, #0]
		if (UART0Count == BUFSIZE) {
    2990:	4b16      	ldr	r3, [pc, #88]	; (29ec <UART0_IRQHandler+0xfc>)
    2992:	881b      	ldrh	r3, [r3, #0]
    2994:	b29b      	uxth	r3, r3
    2996:	2bff      	cmp	r3, #255	; 0xff
    2998:	d11f      	bne.n	29da <UART0_IRQHandler+0xea>
			UART0Count = 0; /* buffer overflow */
    299a:	4b14      	ldr	r3, [pc, #80]	; (29ec <UART0_IRQHandler+0xfc>)
    299c:	2200      	movs	r2, #0
    299e:	801a      	strh	r2, [r3, #0]
    29a0:	e01b      	b.n	29da <UART0_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    29a2:	79bb      	ldrb	r3, [r7, #6]
    29a4:	2b06      	cmp	r3, #6
    29a6:	d106      	bne.n	29b6 <UART0_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART0Status |= 0x100; /* Bit 9 as the CTI error */
    29a8:	4b0f      	ldr	r3, [pc, #60]	; (29e8 <UART0_IRQHandler+0xf8>)
    29aa:	681b      	ldr	r3, [r3, #0]
    29ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    29b0:	4a0d      	ldr	r2, [pc, #52]	; (29e8 <UART0_IRQHandler+0xf8>)
    29b2:	6013      	str	r3, [r2, #0]
    29b4:	e011      	b.n	29da <UART0_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    29b6:	79bb      	ldrb	r3, [r7, #6]
    29b8:	2b01      	cmp	r3, #1
    29ba:	d10e      	bne.n	29da <UART0_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART0->LSR; /* Check status in the LSR to see if
    29bc:	4b09      	ldr	r3, [pc, #36]	; (29e4 <UART0_IRQHandler+0xf4>)
    29be:	7d1b      	ldrb	r3, [r3, #20]
    29c0:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    29c2:	797b      	ldrb	r3, [r7, #5]
    29c4:	f003 0320 	and.w	r3, r3, #32
    29c8:	2b00      	cmp	r3, #0
    29ca:	d003      	beq.n	29d4 <UART0_IRQHandler+0xe4>
			UART0TxEmpty = 1;
    29cc:	4b09      	ldr	r3, [pc, #36]	; (29f4 <UART0_IRQHandler+0x104>)
    29ce:	2201      	movs	r2, #1
    29d0:	701a      	strb	r2, [r3, #0]
    29d2:	e002      	b.n	29da <UART0_IRQHandler+0xea>
		} else {
			UART0TxEmpty = 0;
    29d4:	4b07      	ldr	r3, [pc, #28]	; (29f4 <UART0_IRQHandler+0x104>)
    29d6:	2200      	movs	r2, #0
    29d8:	701a      	strb	r2, [r3, #0]
		}
	}
}
    29da:	370c      	adds	r7, #12
    29dc:	46bd      	mov	sp, r7
    29de:	f85d 7b04 	ldr.w	r7, [sp], #4
    29e2:	4770      	bx	lr
    29e4:	4000c000 	.word	0x4000c000
    29e8:	10001ce8 	.word	0x10001ce8
    29ec:	10000440 	.word	0x10000440
    29f0:	100012e8 	.word	0x100012e8
    29f4:	10000020 	.word	0x10000020

000029f8 <UART1_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART1_IRQHandler(void) {
    29f8:	b480      	push	{r7}
    29fa:	b083      	sub	sp, #12
    29fc:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART1->IIR;
    29fe:	4b3d      	ldr	r3, [pc, #244]	; (2af4 <UART1_IRQHandler+0xfc>)
    2a00:	689b      	ldr	r3, [r3, #8]
    2a02:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    2a04:	79bb      	ldrb	r3, [r7, #6]
    2a06:	085b      	lsrs	r3, r3, #1
    2a08:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    2a0a:	79bb      	ldrb	r3, [r7, #6]
    2a0c:	f003 0307 	and.w	r3, r3, #7
    2a10:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    2a12:	79bb      	ldrb	r3, [r7, #6]
    2a14:	2b03      	cmp	r3, #3
    2a16:	d12e      	bne.n	2a76 <UART1_IRQHandler+0x7e>
	{
		LSRValue = LPC_UART1->LSR;
    2a18:	4b36      	ldr	r3, [pc, #216]	; (2af4 <UART1_IRQHandler+0xfc>)
    2a1a:	7d1b      	ldrb	r3, [r3, #20]
    2a1c:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2a1e:	797b      	ldrb	r3, [r7, #5]
    2a20:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2a24:	2b00      	cmp	r3, #0
    2a26:	d006      	beq.n	2a36 <UART1_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART1Status = LSRValue;
    2a28:	797b      	ldrb	r3, [r7, #5]
    2a2a:	4a33      	ldr	r2, [pc, #204]	; (2af8 <UART1_IRQHandler+0x100>)
    2a2c:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART1->RBR; /* Dummy read on RX to clear
    2a2e:	4b31      	ldr	r3, [pc, #196]	; (2af4 <UART1_IRQHandler+0xfc>)
    2a30:	781b      	ldrb	r3, [r3, #0]
    2a32:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2a34:	e059      	b.n	2aea <UART1_IRQHandler+0xf2>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    2a36:	797b      	ldrb	r3, [r7, #5]
    2a38:	f003 0301 	and.w	r3, r3, #1
    2a3c:	2b00      	cmp	r3, #0
    2a3e:	d054      	beq.n	2aea <UART1_IRQHandler+0xf2>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART1Buffer[UART1Count] = LPC_UART1->RBR;
    2a40:	4b2e      	ldr	r3, [pc, #184]	; (2afc <UART1_IRQHandler+0x104>)
    2a42:	881b      	ldrh	r3, [r3, #0]
    2a44:	b29b      	uxth	r3, r3
    2a46:	461a      	mov	r2, r3
    2a48:	4b2a      	ldr	r3, [pc, #168]	; (2af4 <UART1_IRQHandler+0xfc>)
    2a4a:	781b      	ldrb	r3, [r3, #0]
    2a4c:	b2d9      	uxtb	r1, r3
    2a4e:	4b2c      	ldr	r3, [pc, #176]	; (2b00 <UART1_IRQHandler+0x108>)
    2a50:	5499      	strb	r1, [r3, r2]
			UART1Count++;
    2a52:	4b2a      	ldr	r3, [pc, #168]	; (2afc <UART1_IRQHandler+0x104>)
    2a54:	881b      	ldrh	r3, [r3, #0]
    2a56:	b29b      	uxth	r3, r3
    2a58:	3301      	adds	r3, #1
    2a5a:	b29a      	uxth	r2, r3
    2a5c:	4b27      	ldr	r3, [pc, #156]	; (2afc <UART1_IRQHandler+0x104>)
    2a5e:	801a      	strh	r2, [r3, #0]
			if (UART1Count == GSM_UART_BUFFER_SIZE) {
    2a60:	4b26      	ldr	r3, [pc, #152]	; (2afc <UART1_IRQHandler+0x104>)
    2a62:	881b      	ldrh	r3, [r3, #0]
    2a64:	b29b      	uxth	r3, r3
    2a66:	f240 424c 	movw	r2, #1100	; 0x44c
    2a6a:	4293      	cmp	r3, r2
    2a6c:	d13d      	bne.n	2aea <UART1_IRQHandler+0xf2>
				UART1Count = 0; /* buffer overflow */
    2a6e:	4b23      	ldr	r3, [pc, #140]	; (2afc <UART1_IRQHandler+0x104>)
    2a70:	2200      	movs	r2, #0
    2a72:	801a      	strh	r2, [r3, #0]
    2a74:	e039      	b.n	2aea <UART1_IRQHandler+0xf2>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2a76:	79bb      	ldrb	r3, [r7, #6]
    2a78:	2b02      	cmp	r3, #2
    2a7a:	d11a      	bne.n	2ab2 <UART1_IRQHandler+0xba>
	{
		/* Receive Data Available */
		UART1Buffer[UART1Count] = LPC_UART1->RBR;
    2a7c:	4b1f      	ldr	r3, [pc, #124]	; (2afc <UART1_IRQHandler+0x104>)
    2a7e:	881b      	ldrh	r3, [r3, #0]
    2a80:	b29b      	uxth	r3, r3
    2a82:	461a      	mov	r2, r3
    2a84:	4b1b      	ldr	r3, [pc, #108]	; (2af4 <UART1_IRQHandler+0xfc>)
    2a86:	781b      	ldrb	r3, [r3, #0]
    2a88:	b2d9      	uxtb	r1, r3
    2a8a:	4b1d      	ldr	r3, [pc, #116]	; (2b00 <UART1_IRQHandler+0x108>)
    2a8c:	5499      	strb	r1, [r3, r2]
		UART1Count++;
    2a8e:	4b1b      	ldr	r3, [pc, #108]	; (2afc <UART1_IRQHandler+0x104>)
    2a90:	881b      	ldrh	r3, [r3, #0]
    2a92:	b29b      	uxth	r3, r3
    2a94:	3301      	adds	r3, #1
    2a96:	b29a      	uxth	r2, r3
    2a98:	4b18      	ldr	r3, [pc, #96]	; (2afc <UART1_IRQHandler+0x104>)
    2a9a:	801a      	strh	r2, [r3, #0]
		if (UART1Count == GSM_UART_BUFFER_SIZE) {
    2a9c:	4b17      	ldr	r3, [pc, #92]	; (2afc <UART1_IRQHandler+0x104>)
    2a9e:	881b      	ldrh	r3, [r3, #0]
    2aa0:	b29b      	uxth	r3, r3
    2aa2:	f240 424c 	movw	r2, #1100	; 0x44c
    2aa6:	4293      	cmp	r3, r2
    2aa8:	d11f      	bne.n	2aea <UART1_IRQHandler+0xf2>
			UART1Count = 0; /* buffer overflow */
    2aaa:	4b14      	ldr	r3, [pc, #80]	; (2afc <UART1_IRQHandler+0x104>)
    2aac:	2200      	movs	r2, #0
    2aae:	801a      	strh	r2, [r3, #0]
    2ab0:	e01b      	b.n	2aea <UART1_IRQHandler+0xf2>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2ab2:	79bb      	ldrb	r3, [r7, #6]
    2ab4:	2b06      	cmp	r3, #6
    2ab6:	d106      	bne.n	2ac6 <UART1_IRQHandler+0xce>
	{
		/* Character Time-out indicator */
		UART1Status |= 0x100; /* Bit 9 as the CTI error */
    2ab8:	4b0f      	ldr	r3, [pc, #60]	; (2af8 <UART1_IRQHandler+0x100>)
    2aba:	681b      	ldr	r3, [r3, #0]
    2abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2ac0:	4a0d      	ldr	r2, [pc, #52]	; (2af8 <UART1_IRQHandler+0x100>)
    2ac2:	6013      	str	r3, [r2, #0]
    2ac4:	e011      	b.n	2aea <UART1_IRQHandler+0xf2>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2ac6:	79bb      	ldrb	r3, [r7, #6]
    2ac8:	2b01      	cmp	r3, #1
    2aca:	d10e      	bne.n	2aea <UART1_IRQHandler+0xf2>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART1->LSR; /* Check status in the LSR to see if
    2acc:	4b09      	ldr	r3, [pc, #36]	; (2af4 <UART1_IRQHandler+0xfc>)
    2ace:	7d1b      	ldrb	r3, [r3, #20]
    2ad0:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    2ad2:	797b      	ldrb	r3, [r7, #5]
    2ad4:	f003 0320 	and.w	r3, r3, #32
    2ad8:	2b00      	cmp	r3, #0
    2ada:	d003      	beq.n	2ae4 <UART1_IRQHandler+0xec>
			UART1TxEmpty = 1;
    2adc:	4b09      	ldr	r3, [pc, #36]	; (2b04 <UART1_IRQHandler+0x10c>)
    2ade:	2201      	movs	r2, #1
    2ae0:	701a      	strb	r2, [r3, #0]
    2ae2:	e002      	b.n	2aea <UART1_IRQHandler+0xf2>
		} else {
			UART1TxEmpty = 0;
    2ae4:	4b07      	ldr	r3, [pc, #28]	; (2b04 <UART1_IRQHandler+0x10c>)
    2ae6:	2200      	movs	r2, #0
    2ae8:	701a      	strb	r2, [r3, #0]
		}
	}

}
    2aea:	370c      	adds	r7, #12
    2aec:	46bd      	mov	sp, r7
    2aee:	f85d 7b04 	ldr.w	r7, [sp], #4
    2af2:	4770      	bx	lr
    2af4:	40010000 	.word	0x40010000
    2af8:	100013e8 	.word	0x100013e8
    2afc:	10000442 	.word	0x10000442
    2b00:	10000e8c 	.word	0x10000e8c
    2b04:	10000021 	.word	0x10000021

00002b08 <UART2_IRQHandler>:

void UART2_IRQHandler(void) {
    2b08:	b480      	push	{r7}
    2b0a:	b083      	sub	sp, #12
    2b0c:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;
	IIRValue = LPC_UART2->IIR;
    2b0e:	4b3c      	ldr	r3, [pc, #240]	; (2c00 <UART2_IRQHandler+0xf8>)
    2b10:	689b      	ldr	r3, [r3, #8]
    2b12:	71bb      	strb	r3, [r7, #6]
	IIRValue >>= 1; /* skip pending bit in IIR */
    2b14:	79bb      	ldrb	r3, [r7, #6]
    2b16:	085b      	lsrs	r3, r3, #1
    2b18:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    2b1a:	79bb      	ldrb	r3, [r7, #6]
    2b1c:	f003 0307 	and.w	r3, r3, #7
    2b20:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    2b22:	79bb      	ldrb	r3, [r7, #6]
    2b24:	2b03      	cmp	r3, #3
    2b26:	d12d      	bne.n	2b84 <UART2_IRQHandler+0x7c>
	{
		LSRValue = LPC_UART2->LSR;
    2b28:	4b35      	ldr	r3, [pc, #212]	; (2c00 <UART2_IRQHandler+0xf8>)
    2b2a:	7d1b      	ldrb	r3, [r3, #20]
    2b2c:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2b2e:	797b      	ldrb	r3, [r7, #5]
    2b30:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2b34:	2b00      	cmp	r3, #0
    2b36:	d006      	beq.n	2b46 <UART2_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART2Status = LSRValue;
    2b38:	797b      	ldrb	r3, [r7, #5]
    2b3a:	4a32      	ldr	r2, [pc, #200]	; (2c04 <UART2_IRQHandler+0xfc>)
    2b3c:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART2->RBR; /* Dummy read on RX to clear
    2b3e:	4b30      	ldr	r3, [pc, #192]	; (2c00 <UART2_IRQHandler+0xf8>)
    2b40:	781b      	ldrb	r3, [r3, #0]
    2b42:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2b44:	e057      	b.n	2bf6 <UART2_IRQHandler+0xee>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    2b46:	797b      	ldrb	r3, [r7, #5]
    2b48:	f003 0301 	and.w	r3, r3, #1
    2b4c:	2b00      	cmp	r3, #0
    2b4e:	d052      	beq.n	2bf6 <UART2_IRQHandler+0xee>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART2Buffer[UART2Count] = LPC_UART2->RBR;
    2b50:	4b2d      	ldr	r3, [pc, #180]	; (2c08 <UART2_IRQHandler+0x100>)
    2b52:	881b      	ldrh	r3, [r3, #0]
    2b54:	b29b      	uxth	r3, r3
    2b56:	461a      	mov	r2, r3
    2b58:	4b29      	ldr	r3, [pc, #164]	; (2c00 <UART2_IRQHandler+0xf8>)
    2b5a:	781b      	ldrb	r3, [r3, #0]
    2b5c:	b2d9      	uxtb	r1, r3
    2b5e:	4b2b      	ldr	r3, [pc, #172]	; (2c0c <UART2_IRQHandler+0x104>)
    2b60:	5499      	strb	r1, [r3, r2]
			UART2Count++;
    2b62:	4b29      	ldr	r3, [pc, #164]	; (2c08 <UART2_IRQHandler+0x100>)
    2b64:	881b      	ldrh	r3, [r3, #0]
    2b66:	b29b      	uxth	r3, r3
    2b68:	3301      	adds	r3, #1
    2b6a:	b29a      	uxth	r2, r3
    2b6c:	4b26      	ldr	r3, [pc, #152]	; (2c08 <UART2_IRQHandler+0x100>)
    2b6e:	801a      	strh	r2, [r3, #0]
			if (UART2Count >= UART2_BUFFSIZE) {
    2b70:	4b25      	ldr	r3, [pc, #148]	; (2c08 <UART2_IRQHandler+0x100>)
    2b72:	881b      	ldrh	r3, [r3, #0]
    2b74:	b29b      	uxth	r3, r3
    2b76:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    2b7a:	d33c      	bcc.n	2bf6 <UART2_IRQHandler+0xee>
				UART2Count = 0; /* buffer overflow */
    2b7c:	4b22      	ldr	r3, [pc, #136]	; (2c08 <UART2_IRQHandler+0x100>)
    2b7e:	2200      	movs	r2, #0
    2b80:	801a      	strh	r2, [r3, #0]
    2b82:	e038      	b.n	2bf6 <UART2_IRQHandler+0xee>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2b84:	79bb      	ldrb	r3, [r7, #6]
    2b86:	2b02      	cmp	r3, #2
    2b88:	d119      	bne.n	2bbe <UART2_IRQHandler+0xb6>
	{
		/* Receive Data Available */
		UART2Buffer[UART2Count] = LPC_UART2->RBR;
    2b8a:	4b1f      	ldr	r3, [pc, #124]	; (2c08 <UART2_IRQHandler+0x100>)
    2b8c:	881b      	ldrh	r3, [r3, #0]
    2b8e:	b29b      	uxth	r3, r3
    2b90:	461a      	mov	r2, r3
    2b92:	4b1b      	ldr	r3, [pc, #108]	; (2c00 <UART2_IRQHandler+0xf8>)
    2b94:	781b      	ldrb	r3, [r3, #0]
    2b96:	b2d9      	uxtb	r1, r3
    2b98:	4b1c      	ldr	r3, [pc, #112]	; (2c0c <UART2_IRQHandler+0x104>)
    2b9a:	5499      	strb	r1, [r3, r2]
		UART2Count++;
    2b9c:	4b1a      	ldr	r3, [pc, #104]	; (2c08 <UART2_IRQHandler+0x100>)
    2b9e:	881b      	ldrh	r3, [r3, #0]
    2ba0:	b29b      	uxth	r3, r3
    2ba2:	3301      	adds	r3, #1
    2ba4:	b29a      	uxth	r2, r3
    2ba6:	4b18      	ldr	r3, [pc, #96]	; (2c08 <UART2_IRQHandler+0x100>)
    2ba8:	801a      	strh	r2, [r3, #0]
		if (UART2Count >= UART2_BUFFSIZE) {
    2baa:	4b17      	ldr	r3, [pc, #92]	; (2c08 <UART2_IRQHandler+0x100>)
    2bac:	881b      	ldrh	r3, [r3, #0]
    2bae:	b29b      	uxth	r3, r3
    2bb0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    2bb4:	d31f      	bcc.n	2bf6 <UART2_IRQHandler+0xee>
			UART2Count = 0; /* buffer overflow */
    2bb6:	4b14      	ldr	r3, [pc, #80]	; (2c08 <UART2_IRQHandler+0x100>)
    2bb8:	2200      	movs	r2, #0
    2bba:	801a      	strh	r2, [r3, #0]
    2bbc:	e01b      	b.n	2bf6 <UART2_IRQHandler+0xee>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2bbe:	79bb      	ldrb	r3, [r7, #6]
    2bc0:	2b06      	cmp	r3, #6
    2bc2:	d106      	bne.n	2bd2 <UART2_IRQHandler+0xca>
	{
		/* Character Time-out indicator */
		UART2Status |= 0x100; /* Bit 9 as the CTI error */
    2bc4:	4b0f      	ldr	r3, [pc, #60]	; (2c04 <UART2_IRQHandler+0xfc>)
    2bc6:	681b      	ldr	r3, [r3, #0]
    2bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2bcc:	4a0d      	ldr	r2, [pc, #52]	; (2c04 <UART2_IRQHandler+0xfc>)
    2bce:	6013      	str	r3, [r2, #0]
    2bd0:	e011      	b.n	2bf6 <UART2_IRQHandler+0xee>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2bd2:	79bb      	ldrb	r3, [r7, #6]
    2bd4:	2b01      	cmp	r3, #1
    2bd6:	d10e      	bne.n	2bf6 <UART2_IRQHandler+0xee>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART2->LSR; /* Check status in the LSR to see if
    2bd8:	4b09      	ldr	r3, [pc, #36]	; (2c00 <UART2_IRQHandler+0xf8>)
    2bda:	7d1b      	ldrb	r3, [r3, #20]
    2bdc:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    2bde:	797b      	ldrb	r3, [r7, #5]
    2be0:	f003 0320 	and.w	r3, r3, #32
    2be4:	2b00      	cmp	r3, #0
    2be6:	d003      	beq.n	2bf0 <UART2_IRQHandler+0xe8>
			UART2TxEmpty = 1;
    2be8:	4b09      	ldr	r3, [pc, #36]	; (2c10 <UART2_IRQHandler+0x108>)
    2bea:	2201      	movs	r2, #1
    2bec:	701a      	strb	r2, [r3, #0]
    2bee:	e002      	b.n	2bf6 <UART2_IRQHandler+0xee>
		} else {
			UART2TxEmpty = 0;
    2bf0:	4b07      	ldr	r3, [pc, #28]	; (2c10 <UART2_IRQHandler+0x108>)
    2bf2:	2200      	movs	r2, #0
    2bf4:	701a      	strb	r2, [r3, #0]
		}
	}
}
    2bf6:	370c      	adds	r7, #12
    2bf8:	46bd      	mov	sp, r7
    2bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bfe:	4770      	bx	lr
    2c00:	40098000 	.word	0x40098000
    2c04:	100012dc 	.word	0x100012dc
    2c08:	10000444 	.word	0x10000444
    2c0c:	100014f0 	.word	0x100014f0
    2c10:	10000023 	.word	0x10000023

00002c14 <UART3_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART3_IRQHandler(void) {
    2c14:	b480      	push	{r7}
    2c16:	b083      	sub	sp, #12
    2c18:	af00      	add	r7, sp, #0
	uint8_t IIRValue, LSRValue;
	uint8_t Dummy = Dummy;

	IIRValue = LPC_UART3->IIR;
    2c1a:	4b3b      	ldr	r3, [pc, #236]	; (2d08 <UART3_IRQHandler+0xf4>)
    2c1c:	689b      	ldr	r3, [r3, #8]
    2c1e:	71bb      	strb	r3, [r7, #6]

	IIRValue >>= 1; /* skip pending bit in IIR */
    2c20:	79bb      	ldrb	r3, [r7, #6]
    2c22:	085b      	lsrs	r3, r3, #1
    2c24:	71bb      	strb	r3, [r7, #6]
	IIRValue &= 0x07; /* check bit 1~3, interrupt identification */
    2c26:	79bb      	ldrb	r3, [r7, #6]
    2c28:	f003 0307 	and.w	r3, r3, #7
    2c2c:	71bb      	strb	r3, [r7, #6]
	if (IIRValue == IIR_RLS) /* Receive Line Status */
    2c2e:	79bb      	ldrb	r3, [r7, #6]
    2c30:	2b03      	cmp	r3, #3
    2c32:	d12c      	bne.n	2c8e <UART3_IRQHandler+0x7a>
	{
		LSRValue = LPC_UART3->LSR;
    2c34:	4b34      	ldr	r3, [pc, #208]	; (2d08 <UART3_IRQHandler+0xf4>)
    2c36:	7d1b      	ldrb	r3, [r3, #20]
    2c38:	717b      	strb	r3, [r7, #5]
		/* Receive Line Status */
		if (LSRValue & (LSR_OE | LSR_PE | LSR_FE | LSR_RXFE | LSR_BI)) {
    2c3a:	797b      	ldrb	r3, [r7, #5]
    2c3c:	f003 039e 	and.w	r3, r3, #158	; 0x9e
    2c40:	2b00      	cmp	r3, #0
    2c42:	d006      	beq.n	2c52 <UART3_IRQHandler+0x3e>
			/* There are errors or break interrupt */
			/* Read LSR will clear the interrupt */
			UART3Status = LSRValue;
    2c44:	797b      	ldrb	r3, [r7, #5]
    2c46:	4a31      	ldr	r2, [pc, #196]	; (2d0c <UART3_IRQHandler+0xf8>)
    2c48:	6013      	str	r3, [r2, #0]
			Dummy = LPC_UART3->RBR; /* Dummy read on RX to clear
    2c4a:	4b2f      	ldr	r3, [pc, #188]	; (2d08 <UART3_IRQHandler+0xf4>)
    2c4c:	781b      	ldrb	r3, [r3, #0]
    2c4e:	71fb      	strb	r3, [r7, #7]
			 interrupt, then bail out */
			return;
    2c50:	e055      	b.n	2cfe <UART3_IRQHandler+0xea>
		}
		if (LSRValue & LSR_RDR) /* Receive Data Ready */
    2c52:	797b      	ldrb	r3, [r7, #5]
    2c54:	f003 0301 	and.w	r3, r3, #1
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d050      	beq.n	2cfe <UART3_IRQHandler+0xea>
		{
			/* If no error on RLS, normal ready, save into the data buffer. */
			/* Note: read RBR will clear the interrupt */
			UART3Buffer[UART3Count] = LPC_UART3->RBR;
    2c5c:	4b2c      	ldr	r3, [pc, #176]	; (2d10 <UART3_IRQHandler+0xfc>)
    2c5e:	881b      	ldrh	r3, [r3, #0]
    2c60:	b29b      	uxth	r3, r3
    2c62:	461a      	mov	r2, r3
    2c64:	4b28      	ldr	r3, [pc, #160]	; (2d08 <UART3_IRQHandler+0xf4>)
    2c66:	781b      	ldrb	r3, [r3, #0]
    2c68:	b2d9      	uxtb	r1, r3
    2c6a:	4b2a      	ldr	r3, [pc, #168]	; (2d14 <UART3_IRQHandler+0x100>)
    2c6c:	5499      	strb	r1, [r3, r2]
			UART3Count++;
    2c6e:	4b28      	ldr	r3, [pc, #160]	; (2d10 <UART3_IRQHandler+0xfc>)
    2c70:	881b      	ldrh	r3, [r3, #0]
    2c72:	b29b      	uxth	r3, r3
    2c74:	3301      	adds	r3, #1
    2c76:	b29a      	uxth	r2, r3
    2c78:	4b25      	ldr	r3, [pc, #148]	; (2d10 <UART3_IRQHandler+0xfc>)
    2c7a:	801a      	strh	r2, [r3, #0]
			if (UART3Count == BUFSIZE) {
    2c7c:	4b24      	ldr	r3, [pc, #144]	; (2d10 <UART3_IRQHandler+0xfc>)
    2c7e:	881b      	ldrh	r3, [r3, #0]
    2c80:	b29b      	uxth	r3, r3
    2c82:	2bff      	cmp	r3, #255	; 0xff
    2c84:	d13b      	bne.n	2cfe <UART3_IRQHandler+0xea>
				UART3Count = 0; /* buffer overflow */
    2c86:	4b22      	ldr	r3, [pc, #136]	; (2d10 <UART3_IRQHandler+0xfc>)
    2c88:	2200      	movs	r2, #0
    2c8a:	801a      	strh	r2, [r3, #0]
    2c8c:	e037      	b.n	2cfe <UART3_IRQHandler+0xea>
			}
		}
	} else if (IIRValue == IIR_RDA) /* Receive Data Available */
    2c8e:	79bb      	ldrb	r3, [r7, #6]
    2c90:	2b02      	cmp	r3, #2
    2c92:	d118      	bne.n	2cc6 <UART3_IRQHandler+0xb2>
	{
		/* Receive Data Available */
		UART3Buffer[UART3Count] = LPC_UART3->RBR;
    2c94:	4b1e      	ldr	r3, [pc, #120]	; (2d10 <UART3_IRQHandler+0xfc>)
    2c96:	881b      	ldrh	r3, [r3, #0]
    2c98:	b29b      	uxth	r3, r3
    2c9a:	461a      	mov	r2, r3
    2c9c:	4b1a      	ldr	r3, [pc, #104]	; (2d08 <UART3_IRQHandler+0xf4>)
    2c9e:	781b      	ldrb	r3, [r3, #0]
    2ca0:	b2d9      	uxtb	r1, r3
    2ca2:	4b1c      	ldr	r3, [pc, #112]	; (2d14 <UART3_IRQHandler+0x100>)
    2ca4:	5499      	strb	r1, [r3, r2]
		UART3Count++;
    2ca6:	4b1a      	ldr	r3, [pc, #104]	; (2d10 <UART3_IRQHandler+0xfc>)
    2ca8:	881b      	ldrh	r3, [r3, #0]
    2caa:	b29b      	uxth	r3, r3
    2cac:	3301      	adds	r3, #1
    2cae:	b29a      	uxth	r2, r3
    2cb0:	4b17      	ldr	r3, [pc, #92]	; (2d10 <UART3_IRQHandler+0xfc>)
    2cb2:	801a      	strh	r2, [r3, #0]
		if (UART3Count == BUFSIZE) {
    2cb4:	4b16      	ldr	r3, [pc, #88]	; (2d10 <UART3_IRQHandler+0xfc>)
    2cb6:	881b      	ldrh	r3, [r3, #0]
    2cb8:	b29b      	uxth	r3, r3
    2cba:	2bff      	cmp	r3, #255	; 0xff
    2cbc:	d11f      	bne.n	2cfe <UART3_IRQHandler+0xea>
			UART3Count = 0; /* buffer overflow */
    2cbe:	4b14      	ldr	r3, [pc, #80]	; (2d10 <UART3_IRQHandler+0xfc>)
    2cc0:	2200      	movs	r2, #0
    2cc2:	801a      	strh	r2, [r3, #0]
    2cc4:	e01b      	b.n	2cfe <UART3_IRQHandler+0xea>
		}
	} else if (IIRValue == IIR_CTI) /* Character timeout indicator */
    2cc6:	79bb      	ldrb	r3, [r7, #6]
    2cc8:	2b06      	cmp	r3, #6
    2cca:	d106      	bne.n	2cda <UART3_IRQHandler+0xc6>
	{
		/* Character Time-out indicator */
		UART3Status |= 0x100; /* Bit 9 as the CTI error */
    2ccc:	4b0f      	ldr	r3, [pc, #60]	; (2d0c <UART3_IRQHandler+0xf8>)
    2cce:	681b      	ldr	r3, [r3, #0]
    2cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2cd4:	4a0d      	ldr	r2, [pc, #52]	; (2d0c <UART3_IRQHandler+0xf8>)
    2cd6:	6013      	str	r3, [r2, #0]
    2cd8:	e011      	b.n	2cfe <UART3_IRQHandler+0xea>
	} else if (IIRValue == IIR_THRE) /* THRE, transmit holding register empty */
    2cda:	79bb      	ldrb	r3, [r7, #6]
    2cdc:	2b01      	cmp	r3, #1
    2cde:	d10e      	bne.n	2cfe <UART3_IRQHandler+0xea>
	{
		/* THRE interrupt */
		LSRValue = LPC_UART3->LSR; /* Check status in the LSR to see if
    2ce0:	4b09      	ldr	r3, [pc, #36]	; (2d08 <UART3_IRQHandler+0xf4>)
    2ce2:	7d1b      	ldrb	r3, [r3, #20]
    2ce4:	717b      	strb	r3, [r7, #5]
		 valid data in U0THR or not */
		if (LSRValue & LSR_THRE) {
    2ce6:	797b      	ldrb	r3, [r7, #5]
    2ce8:	f003 0320 	and.w	r3, r3, #32
    2cec:	2b00      	cmp	r3, #0
    2cee:	d003      	beq.n	2cf8 <UART3_IRQHandler+0xe4>
			UART3TxEmpty = 1;
    2cf0:	4b09      	ldr	r3, [pc, #36]	; (2d18 <UART3_IRQHandler+0x104>)
    2cf2:	2201      	movs	r2, #1
    2cf4:	701a      	strb	r2, [r3, #0]
    2cf6:	e002      	b.n	2cfe <UART3_IRQHandler+0xea>
		} else {
			UART3TxEmpty = 0;
    2cf8:	4b07      	ldr	r3, [pc, #28]	; (2d18 <UART3_IRQHandler+0x104>)
    2cfa:	2200      	movs	r2, #0
    2cfc:	701a      	strb	r2, [r3, #0]
		}
	}
}
    2cfe:	370c      	adds	r7, #12
    2d00:	46bd      	mov	sp, r7
    2d02:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d06:	4770      	bx	lr
    2d08:	4009c000 	.word	0x4009c000
    2d0c:	100012e4 	.word	0x100012e4
    2d10:	10000446 	.word	0x10000446
    2d14:	100013f0 	.word	0x100013f0
    2d18:	10000022 	.word	0x10000022

00002d1c <UARTInit>:
 ** Returned value:		true or false, return false only if the
 **						interrupt handler can't be installed to the
 **						VIC table
 **
 *****************************************************************************/
uint32_t UARTInit(uint32_t PortNum, uint32_t baudrate) {
    2d1c:	b580      	push	{r7, lr}
    2d1e:	b086      	sub	sp, #24
    2d20:	af00      	add	r7, sp, #0
    2d22:	6078      	str	r0, [r7, #4]
    2d24:	6039      	str	r1, [r7, #0]
	uint32_t Fdiv;
	uint32_t pclkdiv, pclk;
	if (PortNum == 0) {
    2d26:	687b      	ldr	r3, [r7, #4]
    2d28:	2b00      	cmp	r3, #0
    2d2a:	d15b      	bne.n	2de4 <UARTInit+0xc8>
		LPC_PINCON->PINSEL0 &= ~0x000000F0;
    2d2c:	4aa5      	ldr	r2, [pc, #660]	; (2fc4 <UARTInit+0x2a8>)
    2d2e:	4ba5      	ldr	r3, [pc, #660]	; (2fc4 <UARTInit+0x2a8>)
    2d30:	681b      	ldr	r3, [r3, #0]
    2d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2d36:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00000050; /* RxD0 is P0.3 and TxD0 is P0.2 */
    2d38:	4aa2      	ldr	r2, [pc, #648]	; (2fc4 <UARTInit+0x2a8>)
    2d3a:	4ba2      	ldr	r3, [pc, #648]	; (2fc4 <UARTInit+0x2a8>)
    2d3c:	681b      	ldr	r3, [r3, #0]
    2d3e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    2d42:	6013      	str	r3, [r2, #0]
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART0 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
    2d44:	4ba0      	ldr	r3, [pc, #640]	; (2fc8 <UARTInit+0x2ac>)
    2d46:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2d4a:	099b      	lsrs	r3, r3, #6
    2d4c:	f003 0303 	and.w	r3, r3, #3
    2d50:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2d52:	693b      	ldr	r3, [r7, #16]
    2d54:	2b02      	cmp	r3, #2
    2d56:	d00c      	beq.n	2d72 <UARTInit+0x56>
    2d58:	2b03      	cmp	r3, #3
    2d5a:	d00f      	beq.n	2d7c <UARTInit+0x60>
    2d5c:	2b01      	cmp	r3, #1
    2d5e:	d004      	beq.n	2d6a <UARTInit+0x4e>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2d60:	4b9a      	ldr	r3, [pc, #616]	; (2fcc <UARTInit+0x2b0>)
    2d62:	681b      	ldr	r3, [r3, #0]
    2d64:	089b      	lsrs	r3, r3, #2
    2d66:	617b      	str	r3, [r7, #20]
			break;
    2d68:	e00d      	b.n	2d86 <UARTInit+0x6a>
		case 0x01:
			pclk = SystemCoreClock;
    2d6a:	4b98      	ldr	r3, [pc, #608]	; (2fcc <UARTInit+0x2b0>)
    2d6c:	681b      	ldr	r3, [r3, #0]
    2d6e:	617b      	str	r3, [r7, #20]
			break;
    2d70:	e009      	b.n	2d86 <UARTInit+0x6a>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2d72:	4b96      	ldr	r3, [pc, #600]	; (2fcc <UARTInit+0x2b0>)
    2d74:	681b      	ldr	r3, [r3, #0]
    2d76:	085b      	lsrs	r3, r3, #1
    2d78:	617b      	str	r3, [r7, #20]
			break;
    2d7a:	e004      	b.n	2d86 <UARTInit+0x6a>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2d7c:	4b93      	ldr	r3, [pc, #588]	; (2fcc <UARTInit+0x2b0>)
    2d7e:	681b      	ldr	r3, [r3, #0]
    2d80:	08db      	lsrs	r3, r3, #3
    2d82:	617b      	str	r3, [r7, #20]
			break;
    2d84:	bf00      	nop
		}
		LPC_UART0->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2d86:	4b92      	ldr	r3, [pc, #584]	; (2fd0 <UARTInit+0x2b4>)
    2d88:	2283      	movs	r2, #131	; 0x83
    2d8a:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2d8c:	697b      	ldr	r3, [r7, #20]
    2d8e:	091a      	lsrs	r2, r3, #4
    2d90:	683b      	ldr	r3, [r7, #0]
    2d92:	fbb2 f3f3 	udiv	r3, r2, r3
    2d96:	60fb      	str	r3, [r7, #12]
		if (baudrate == 115200){
    2d98:	683b      	ldr	r3, [r7, #0]
    2d9a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2d9e:	d10a      	bne.n	2db6 <UARTInit+0x9a>
			LPC_UART0->DLM = 0;
    2da0:	4b8b      	ldr	r3, [pc, #556]	; (2fd0 <UARTInit+0x2b4>)
    2da2:	2200      	movs	r2, #0
    2da4:	711a      	strb	r2, [r3, #4]
			LPC_UART0->DLL = 9;
    2da6:	4b8a      	ldr	r3, [pc, #552]	; (2fd0 <UARTInit+0x2b4>)
    2da8:	2209      	movs	r2, #9
    2daa:	701a      	strb	r2, [r3, #0]
			LPC_UART0->FDR=1<<0|1<<5;
    2dac:	4b88      	ldr	r3, [pc, #544]	; (2fd0 <UARTInit+0x2b4>)
    2dae:	2221      	movs	r2, #33	; 0x21
    2db0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    2db4:	e008      	b.n	2dc8 <UARTInit+0xac>
		}else{
			LPC_UART0->DLM = Fdiv / 256;
    2db6:	4a86      	ldr	r2, [pc, #536]	; (2fd0 <UARTInit+0x2b4>)
    2db8:	68fb      	ldr	r3, [r7, #12]
    2dba:	0a1b      	lsrs	r3, r3, #8
    2dbc:	b2db      	uxtb	r3, r3
    2dbe:	7113      	strb	r3, [r2, #4]
			LPC_UART0->DLL = Fdiv % 256;
    2dc0:	4b83      	ldr	r3, [pc, #524]	; (2fd0 <UARTInit+0x2b4>)
    2dc2:	68fa      	ldr	r2, [r7, #12]
    2dc4:	b2d2      	uxtb	r2, r2
    2dc6:	701a      	strb	r2, [r3, #0]
		}
		LPC_UART0->LCR = 0x03; /* DLAB = 0 */
    2dc8:	4b81      	ldr	r3, [pc, #516]	; (2fd0 <UARTInit+0x2b4>)
    2dca:	2203      	movs	r2, #3
    2dcc:	731a      	strb	r2, [r3, #12]
		LPC_UART0->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2dce:	4b80      	ldr	r3, [pc, #512]	; (2fd0 <UARTInit+0x2b4>)
    2dd0:	2207      	movs	r2, #7
    2dd2:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART0_IRQn);
    2dd4:	2005      	movs	r0, #5
    2dd6:	f7ff fd59 	bl	288c <NVIC_EnableIRQ>
		LPC_UART0->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART0 interrupt */
    2dda:	4b7d      	ldr	r3, [pc, #500]	; (2fd0 <UARTInit+0x2b4>)
    2ddc:	2207      	movs	r2, #7
    2dde:	605a      	str	r2, [r3, #4]
		return (TRUE);
    2de0:	2301      	movs	r3, #1
    2de2:	e12a      	b.n	303a <UARTInit+0x31e>
	} else if (PortNum == 1) {
    2de4:	687b      	ldr	r3, [r7, #4]
    2de6:	2b01      	cmp	r3, #1
    2de8:	d165      	bne.n	2eb6 <UARTInit+0x19a>
		NVIC_DisableIRQ(UART1_IRQn);
    2dea:	2006      	movs	r0, #6
    2dec:	f7ff fd66 	bl	28bc <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 4;
    2df0:	4a75      	ldr	r2, [pc, #468]	; (2fc8 <UARTInit+0x2ac>)
    2df2:	4b75      	ldr	r3, [pc, #468]	; (2fc8 <UARTInit+0x2ac>)
    2df4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2df8:	f043 0310 	orr.w	r3, r3, #16
    2dfc:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL4 &= ~0x0000000F;
    2e00:	4a70      	ldr	r2, [pc, #448]	; (2fc4 <UARTInit+0x2a8>)
    2e02:	4b70      	ldr	r3, [pc, #448]	; (2fc4 <UARTInit+0x2a8>)
    2e04:	691b      	ldr	r3, [r3, #16]
    2e06:	f023 030f 	bic.w	r3, r3, #15
    2e0a:	6113      	str	r3, [r2, #16]
		LPC_PINCON->PINSEL4 |= 0x0000000A; /* Enable RxD1 P0.16, TxD1 P0.15 */
    2e0c:	4a6d      	ldr	r2, [pc, #436]	; (2fc4 <UARTInit+0x2a8>)
    2e0e:	4b6d      	ldr	r3, [pc, #436]	; (2fc4 <UARTInit+0x2a8>)
    2e10:	691b      	ldr	r3, [r3, #16]
    2e12:	f043 030a 	orr.w	r3, r3, #10
    2e16:	6113      	str	r3, [r2, #16]

		//| 1<<25; //Enable PCUART1
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 8,9 are for UART1 */
		pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
    2e18:	4b6b      	ldr	r3, [pc, #428]	; (2fc8 <UARTInit+0x2ac>)
    2e1a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2e1e:	0a1b      	lsrs	r3, r3, #8
    2e20:	f003 0303 	and.w	r3, r3, #3
    2e24:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2e26:	693b      	ldr	r3, [r7, #16]
    2e28:	2b02      	cmp	r3, #2
    2e2a:	d00c      	beq.n	2e46 <UARTInit+0x12a>
    2e2c:	2b03      	cmp	r3, #3
    2e2e:	d00f      	beq.n	2e50 <UARTInit+0x134>
    2e30:	2b01      	cmp	r3, #1
    2e32:	d004      	beq.n	2e3e <UARTInit+0x122>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2e34:	4b65      	ldr	r3, [pc, #404]	; (2fcc <UARTInit+0x2b0>)
    2e36:	681b      	ldr	r3, [r3, #0]
    2e38:	089b      	lsrs	r3, r3, #2
    2e3a:	617b      	str	r3, [r7, #20]
			break;
    2e3c:	e00d      	b.n	2e5a <UARTInit+0x13e>
		case 0x01:
			pclk = SystemCoreClock;
    2e3e:	4b63      	ldr	r3, [pc, #396]	; (2fcc <UARTInit+0x2b0>)
    2e40:	681b      	ldr	r3, [r3, #0]
    2e42:	617b      	str	r3, [r7, #20]
			break;
    2e44:	e009      	b.n	2e5a <UARTInit+0x13e>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2e46:	4b61      	ldr	r3, [pc, #388]	; (2fcc <UARTInit+0x2b0>)
    2e48:	681b      	ldr	r3, [r3, #0]
    2e4a:	085b      	lsrs	r3, r3, #1
    2e4c:	617b      	str	r3, [r7, #20]
			break;
    2e4e:	e004      	b.n	2e5a <UARTInit+0x13e>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2e50:	4b5e      	ldr	r3, [pc, #376]	; (2fcc <UARTInit+0x2b0>)
    2e52:	681b      	ldr	r3, [r3, #0]
    2e54:	08db      	lsrs	r3, r3, #3
    2e56:	617b      	str	r3, [r7, #20]
			break;
    2e58:	bf00      	nop
		}
		LPC_UART1->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2e5a:	4b5e      	ldr	r3, [pc, #376]	; (2fd4 <UARTInit+0x2b8>)
    2e5c:	2283      	movs	r2, #131	; 0x83
    2e5e:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2e60:	697b      	ldr	r3, [r7, #20]
    2e62:	091a      	lsrs	r2, r3, #4
    2e64:	683b      	ldr	r3, [r7, #0]
    2e66:	fbb2 f3f3 	udiv	r3, r2, r3
    2e6a:	60fb      	str	r3, [r7, #12]

		if (baudrate == 115200){
    2e6c:	683b      	ldr	r3, [r7, #0]
    2e6e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2e72:	d109      	bne.n	2e88 <UARTInit+0x16c>
			LPC_UART1->DLM = 0;
    2e74:	4b57      	ldr	r3, [pc, #348]	; (2fd4 <UARTInit+0x2b8>)
    2e76:	2200      	movs	r2, #0
    2e78:	711a      	strb	r2, [r3, #4]
			LPC_UART1->DLL = 9;
    2e7a:	4b56      	ldr	r3, [pc, #344]	; (2fd4 <UARTInit+0x2b8>)
    2e7c:	2209      	movs	r2, #9
    2e7e:	701a      	strb	r2, [r3, #0]
			LPC_UART1->FDR=1<<0|1<<5;
    2e80:	4b54      	ldr	r3, [pc, #336]	; (2fd4 <UARTInit+0x2b8>)
    2e82:	2221      	movs	r2, #33	; 0x21
    2e84:	629a      	str	r2, [r3, #40]	; 0x28
    2e86:	e008      	b.n	2e9a <UARTInit+0x17e>
		}else{
			LPC_UART1->DLM = Fdiv / 256;
    2e88:	4a52      	ldr	r2, [pc, #328]	; (2fd4 <UARTInit+0x2b8>)
    2e8a:	68fb      	ldr	r3, [r7, #12]
    2e8c:	0a1b      	lsrs	r3, r3, #8
    2e8e:	b2db      	uxtb	r3, r3
    2e90:	7113      	strb	r3, [r2, #4]
			LPC_UART1->DLL = Fdiv % 256;
    2e92:	4b50      	ldr	r3, [pc, #320]	; (2fd4 <UARTInit+0x2b8>)
    2e94:	68fa      	ldr	r2, [r7, #12]
    2e96:	b2d2      	uxtb	r2, r2
    2e98:	701a      	strb	r2, [r3, #0]
		}
		LPC_UART1->LCR = 0x03; /* DLAB = 0 */
    2e9a:	4b4e      	ldr	r3, [pc, #312]	; (2fd4 <UARTInit+0x2b8>)
    2e9c:	2203      	movs	r2, #3
    2e9e:	731a      	strb	r2, [r3, #12]
		LPC_UART1->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2ea0:	4b4c      	ldr	r3, [pc, #304]	; (2fd4 <UARTInit+0x2b8>)
    2ea2:	2207      	movs	r2, #7
    2ea4:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART1_IRQn);
    2ea6:	2006      	movs	r0, #6
    2ea8:	f7ff fcf0 	bl	288c <NVIC_EnableIRQ>
		LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART1 interrupt */
    2eac:	4b49      	ldr	r3, [pc, #292]	; (2fd4 <UARTInit+0x2b8>)
    2eae:	2207      	movs	r2, #7
    2eb0:	605a      	str	r2, [r3, #4]
		return (TRUE);
    2eb2:	2301      	movs	r3, #1
    2eb4:	e0c1      	b.n	303a <UARTInit+0x31e>
	} else if (PortNum == 2) {
    2eb6:	687b      	ldr	r3, [r7, #4]
    2eb8:	2b02      	cmp	r3, #2
    2eba:	d157      	bne.n	2f6c <UARTInit+0x250>
		NVIC_DisableIRQ(UART2_IRQn);
    2ebc:	2007      	movs	r0, #7
    2ebe:	f7ff fcfd 	bl	28bc <NVIC_DisableIRQ>
		LPC_SC->PCONP |= 1 << 24; // UART 2 PCONP bit 24
    2ec2:	4a41      	ldr	r2, [pc, #260]	; (2fc8 <UARTInit+0x2ac>)
    2ec4:	4b40      	ldr	r3, [pc, #256]	; (2fc8 <UARTInit+0x2ac>)
    2ec6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2ece:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		LPC_PINCON->PINSEL0 &= ~0x00F00000;
    2ed2:	4a3c      	ldr	r2, [pc, #240]	; (2fc4 <UARTInit+0x2a8>)
    2ed4:	4b3b      	ldr	r3, [pc, #236]	; (2fc4 <UARTInit+0x2a8>)
    2ed6:	681b      	ldr	r3, [r3, #0]
    2ed8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    2edc:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x00500000; /* Enable TxD2 on 0.10, RxD2 on 0.11 */
    2ede:	4a39      	ldr	r2, [pc, #228]	; (2fc4 <UARTInit+0x2a8>)
    2ee0:	4b38      	ldr	r3, [pc, #224]	; (2fc4 <UARTInit+0x2a8>)
    2ee2:	681b      	ldr	r3, [r3, #0]
    2ee4:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
    2ee8:	6013      	str	r3, [r2, #0]
		pclkdiv = (LPC_SC->PCLKSEL0 >> 16) & 0x03;
    2eea:	4b37      	ldr	r3, [pc, #220]	; (2fc8 <UARTInit+0x2ac>)
    2eec:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    2ef0:	0c1b      	lsrs	r3, r3, #16
    2ef2:	f003 0303 	and.w	r3, r3, #3
    2ef6:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2ef8:	693b      	ldr	r3, [r7, #16]
    2efa:	2b02      	cmp	r3, #2
    2efc:	d00c      	beq.n	2f18 <UARTInit+0x1fc>
    2efe:	2b03      	cmp	r3, #3
    2f00:	d00f      	beq.n	2f22 <UARTInit+0x206>
    2f02:	2b01      	cmp	r3, #1
    2f04:	d004      	beq.n	2f10 <UARTInit+0x1f4>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2f06:	4b31      	ldr	r3, [pc, #196]	; (2fcc <UARTInit+0x2b0>)
    2f08:	681b      	ldr	r3, [r3, #0]
    2f0a:	089b      	lsrs	r3, r3, #2
    2f0c:	617b      	str	r3, [r7, #20]
			break;
    2f0e:	e00d      	b.n	2f2c <UARTInit+0x210>
		case 0x01:
			pclk = SystemCoreClock;
    2f10:	4b2e      	ldr	r3, [pc, #184]	; (2fcc <UARTInit+0x2b0>)
    2f12:	681b      	ldr	r3, [r3, #0]
    2f14:	617b      	str	r3, [r7, #20]
			break;
    2f16:	e009      	b.n	2f2c <UARTInit+0x210>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2f18:	4b2c      	ldr	r3, [pc, #176]	; (2fcc <UARTInit+0x2b0>)
    2f1a:	681b      	ldr	r3, [r3, #0]
    2f1c:	085b      	lsrs	r3, r3, #1
    2f1e:	617b      	str	r3, [r7, #20]
			break;
    2f20:	e004      	b.n	2f2c <UARTInit+0x210>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2f22:	4b2a      	ldr	r3, [pc, #168]	; (2fcc <UARTInit+0x2b0>)
    2f24:	681b      	ldr	r3, [r3, #0]
    2f26:	08db      	lsrs	r3, r3, #3
    2f28:	617b      	str	r3, [r7, #20]
			break;
    2f2a:	bf00      	nop
		}
		LPC_UART2->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2f2c:	4b2a      	ldr	r3, [pc, #168]	; (2fd8 <UARTInit+0x2bc>)
    2f2e:	2283      	movs	r2, #131	; 0x83
    2f30:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2f32:	697b      	ldr	r3, [r7, #20]
    2f34:	091a      	lsrs	r2, r3, #4
    2f36:	683b      	ldr	r3, [r7, #0]
    2f38:	fbb2 f3f3 	udiv	r3, r2, r3
    2f3c:	60fb      	str	r3, [r7, #12]
		LPC_UART2->DLM = Fdiv / 256;
    2f3e:	4a26      	ldr	r2, [pc, #152]	; (2fd8 <UARTInit+0x2bc>)
    2f40:	68fb      	ldr	r3, [r7, #12]
    2f42:	0a1b      	lsrs	r3, r3, #8
    2f44:	b2db      	uxtb	r3, r3
    2f46:	7113      	strb	r3, [r2, #4]
		LPC_UART2->DLL = Fdiv % 256;
    2f48:	4b23      	ldr	r3, [pc, #140]	; (2fd8 <UARTInit+0x2bc>)
    2f4a:	68fa      	ldr	r2, [r7, #12]
    2f4c:	b2d2      	uxtb	r2, r2
    2f4e:	701a      	strb	r2, [r3, #0]
		LPC_UART2->LCR = 0x03; /* DLAB = 0 */
    2f50:	4b21      	ldr	r3, [pc, #132]	; (2fd8 <UARTInit+0x2bc>)
    2f52:	2203      	movs	r2, #3
    2f54:	731a      	strb	r2, [r3, #12]
		LPC_UART2->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    2f56:	4b20      	ldr	r3, [pc, #128]	; (2fd8 <UARTInit+0x2bc>)
    2f58:	2207      	movs	r2, #7
    2f5a:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART2_IRQn);
    2f5c:	2007      	movs	r0, #7
    2f5e:	f7ff fc95 	bl	288c <NVIC_EnableIRQ>
		LPC_UART2->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART2 interrupt */
    2f62:	4b1d      	ldr	r3, [pc, #116]	; (2fd8 <UARTInit+0x2bc>)
    2f64:	2207      	movs	r2, #7
    2f66:	605a      	str	r2, [r3, #4]
		//LPC_UART2->IER = IER_THRE; /* Polling */
		//LPC_UART2->TER = (1 << 7);
		return (TRUE);
    2f68:	2301      	movs	r3, #1
    2f6a:	e066      	b.n	303a <UARTInit+0x31e>
	} else if (PortNum == 3) {
    2f6c:	687b      	ldr	r3, [r7, #4]
    2f6e:	2b03      	cmp	r3, #3
    2f70:	d162      	bne.n	3038 <UARTInit+0x31c>
		LPC_PINCON->PINSEL0 &= ~0x0000000F;
    2f72:	4a14      	ldr	r2, [pc, #80]	; (2fc4 <UARTInit+0x2a8>)
    2f74:	4b13      	ldr	r3, [pc, #76]	; (2fc4 <UARTInit+0x2a8>)
    2f76:	681b      	ldr	r3, [r3, #0]
    2f78:	f023 030f 	bic.w	r3, r3, #15
    2f7c:	6013      	str	r3, [r2, #0]
		LPC_PINCON->PINSEL0 |= 0x0000000A; /* RxD3 is P0.1 and TxD3 is P0.0 */
    2f7e:	4a11      	ldr	r2, [pc, #68]	; (2fc4 <UARTInit+0x2a8>)
    2f80:	4b10      	ldr	r3, [pc, #64]	; (2fc4 <UARTInit+0x2a8>)
    2f82:	681b      	ldr	r3, [r3, #0]
    2f84:	f043 030a 	orr.w	r3, r3, #10
    2f88:	6013      	str	r3, [r2, #0]
		LPC_SC->PCONP |= 1 << 4 | 1 << 25; //Enable PCUART1
    2f8a:	4a0f      	ldr	r2, [pc, #60]	; (2fc8 <UARTInit+0x2ac>)
    2f8c:	4b0e      	ldr	r3, [pc, #56]	; (2fc8 <UARTInit+0x2ac>)
    2f8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2f92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    2f96:	f043 0310 	orr.w	r3, r3, #16
    2f9a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		/* By default, the PCLKSELx value is zero, thus, the PCLK for
		 all the peripherals is 1/4 of the SystemFrequency. */
		/* Bit 6~7 is for UART3 */
		pclkdiv = (LPC_SC->PCLKSEL1 >> 18) & 0x03;
    2f9e:	4b0a      	ldr	r3, [pc, #40]	; (2fc8 <UARTInit+0x2ac>)
    2fa0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
    2fa4:	0c9b      	lsrs	r3, r3, #18
    2fa6:	f003 0303 	and.w	r3, r3, #3
    2faa:	613b      	str	r3, [r7, #16]
		switch (pclkdiv) {
    2fac:	693b      	ldr	r3, [r7, #16]
    2fae:	2b02      	cmp	r3, #2
    2fb0:	d018      	beq.n	2fe4 <UARTInit+0x2c8>
    2fb2:	2b03      	cmp	r3, #3
    2fb4:	d01b      	beq.n	2fee <UARTInit+0x2d2>
    2fb6:	2b01      	cmp	r3, #1
    2fb8:	d010      	beq.n	2fdc <UARTInit+0x2c0>
		case 0x00:
		default:
			pclk = SystemCoreClock / 4;
    2fba:	4b04      	ldr	r3, [pc, #16]	; (2fcc <UARTInit+0x2b0>)
    2fbc:	681b      	ldr	r3, [r3, #0]
    2fbe:	089b      	lsrs	r3, r3, #2
    2fc0:	617b      	str	r3, [r7, #20]
			break;
    2fc2:	e019      	b.n	2ff8 <UARTInit+0x2dc>
    2fc4:	4002c000 	.word	0x4002c000
    2fc8:	400fc000 	.word	0x400fc000
    2fcc:	10000024 	.word	0x10000024
    2fd0:	4000c000 	.word	0x4000c000
    2fd4:	40010000 	.word	0x40010000
    2fd8:	40098000 	.word	0x40098000
		case 0x01:
			pclk = SystemCoreClock;
    2fdc:	4b19      	ldr	r3, [pc, #100]	; (3044 <UARTInit+0x328>)
    2fde:	681b      	ldr	r3, [r3, #0]
    2fe0:	617b      	str	r3, [r7, #20]
			break;
    2fe2:	e009      	b.n	2ff8 <UARTInit+0x2dc>
		case 0x02:
			pclk = SystemCoreClock / 2;
    2fe4:	4b17      	ldr	r3, [pc, #92]	; (3044 <UARTInit+0x328>)
    2fe6:	681b      	ldr	r3, [r3, #0]
    2fe8:	085b      	lsrs	r3, r3, #1
    2fea:	617b      	str	r3, [r7, #20]
			break;
    2fec:	e004      	b.n	2ff8 <UARTInit+0x2dc>
		case 0x03:
			pclk = SystemCoreClock / 8;
    2fee:	4b15      	ldr	r3, [pc, #84]	; (3044 <UARTInit+0x328>)
    2ff0:	681b      	ldr	r3, [r3, #0]
    2ff2:	08db      	lsrs	r3, r3, #3
    2ff4:	617b      	str	r3, [r7, #20]
			break;
    2ff6:	bf00      	nop
		}
		LPC_UART3->LCR = 0x83; /* 8 bits, no Parity, 1 Stop bit */
    2ff8:	4b13      	ldr	r3, [pc, #76]	; (3048 <UARTInit+0x32c>)
    2ffa:	2283      	movs	r2, #131	; 0x83
    2ffc:	731a      	strb	r2, [r3, #12]
		Fdiv = (pclk / 16) / baudrate; /*baud rate */
    2ffe:	697b      	ldr	r3, [r7, #20]
    3000:	091a      	lsrs	r2, r3, #4
    3002:	683b      	ldr	r3, [r7, #0]
    3004:	fbb2 f3f3 	udiv	r3, r2, r3
    3008:	60fb      	str	r3, [r7, #12]
		LPC_UART3->DLM = Fdiv / 256;
    300a:	4a0f      	ldr	r2, [pc, #60]	; (3048 <UARTInit+0x32c>)
    300c:	68fb      	ldr	r3, [r7, #12]
    300e:	0a1b      	lsrs	r3, r3, #8
    3010:	b2db      	uxtb	r3, r3
    3012:	7113      	strb	r3, [r2, #4]
		LPC_UART3->DLL = Fdiv % 256;
    3014:	4b0c      	ldr	r3, [pc, #48]	; (3048 <UARTInit+0x32c>)
    3016:	68fa      	ldr	r2, [r7, #12]
    3018:	b2d2      	uxtb	r2, r2
    301a:	701a      	strb	r2, [r3, #0]
		LPC_UART3->LCR = 0x03; /* DLAB = 0 */
    301c:	4b0a      	ldr	r3, [pc, #40]	; (3048 <UARTInit+0x32c>)
    301e:	2203      	movs	r2, #3
    3020:	731a      	strb	r2, [r3, #12]
		LPC_UART3->FCR = 0x07; /* Enable and reset TX and RX FIFO. */
    3022:	4b09      	ldr	r3, [pc, #36]	; (3048 <UARTInit+0x32c>)
    3024:	2207      	movs	r2, #7
    3026:	721a      	strb	r2, [r3, #8]
		NVIC_EnableIRQ(UART3_IRQn);
    3028:	2008      	movs	r0, #8
    302a:	f7ff fc2f 	bl	288c <NVIC_EnableIRQ>
		LPC_UART3->IER = IER_RBR | IER_THRE | IER_RLS; /* Enable UART3 interrupt */
    302e:	4b06      	ldr	r3, [pc, #24]	; (3048 <UARTInit+0x32c>)
    3030:	2207      	movs	r2, #7
    3032:	605a      	str	r2, [r3, #4]
		return (TRUE);
    3034:	2301      	movs	r3, #1
    3036:	e000      	b.n	303a <UARTInit+0x31e>
	}
	return (FALSE);
    3038:	2300      	movs	r3, #0
}
    303a:	4618      	mov	r0, r3
    303c:	3718      	adds	r7, #24
    303e:	46bd      	mov	sp, r7
    3040:	bd80      	pop	{r7, pc}
    3042:	bf00      	nop
    3044:	10000024 	.word	0x10000024
    3048:	4009c000 	.word	0x4009c000

0000304c <UARTSend>:
 **
 ** parameters:			portNum, buffer pointer, and data length
 ** Returned value:		None
 **
 *****************************************************************************/
void UARTSend(uint32_t portNum, uint8_t *buffer, uint32_t Length) {
    304c:	b480      	push	{r7}
    304e:	b087      	sub	sp, #28
    3050:	af00      	add	r7, sp, #0
    3052:	60f8      	str	r0, [r7, #12]
    3054:	60b9      	str	r1, [r7, #8]
    3056:	607a      	str	r2, [r7, #4]
	uint8_t *BufferPtr = buffer;
    3058:	68bb      	ldr	r3, [r7, #8]
    305a:	613b      	str	r3, [r7, #16]
	int index = 0;
    305c:	2300      	movs	r3, #0
    305e:	617b      	str	r3, [r7, #20]
	if (portNum == 0) {
    3060:	68fb      	ldr	r3, [r7, #12]
    3062:	2b00      	cmp	r3, #0
    3064:	d11b      	bne.n	309e <UARTSend+0x52>
		while (Length != 0) {
    3066:	e016      	b.n	3096 <UARTSend+0x4a>
			/* THRE status, contain valid data */
			while (!(UART0TxEmpty & 0x01));
    3068:	bf00      	nop
    306a:	4b3e      	ldr	r3, [pc, #248]	; (3164 <UARTSend+0x118>)
    306c:	781b      	ldrb	r3, [r3, #0]
    306e:	b2db      	uxtb	r3, r3
    3070:	f003 0301 	and.w	r3, r3, #1
    3074:	2b00      	cmp	r3, #0
    3076:	d0f8      	beq.n	306a <UARTSend+0x1e>
			LPC_UART0->THR = BufferPtr[index];
    3078:	493b      	ldr	r1, [pc, #236]	; (3168 <UARTSend+0x11c>)
    307a:	697b      	ldr	r3, [r7, #20]
    307c:	693a      	ldr	r2, [r7, #16]
    307e:	4413      	add	r3, r2
    3080:	781b      	ldrb	r3, [r3, #0]
    3082:	700b      	strb	r3, [r1, #0]
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
    3084:	4b37      	ldr	r3, [pc, #220]	; (3164 <UARTSend+0x118>)
    3086:	2200      	movs	r2, #0
    3088:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    308a:	697b      	ldr	r3, [r7, #20]
    308c:	3301      	adds	r3, #1
    308e:	617b      	str	r3, [r7, #20]
			Length--;
    3090:	687b      	ldr	r3, [r7, #4]
    3092:	3b01      	subs	r3, #1
    3094:	607b      	str	r3, [r7, #4]
 *****************************************************************************/
void UARTSend(uint32_t portNum, uint8_t *buffer, uint32_t Length) {
	uint8_t *BufferPtr = buffer;
	int index = 0;
	if (portNum == 0) {
		while (Length != 0) {
    3096:	687b      	ldr	r3, [r7, #4]
    3098:	2b00      	cmp	r3, #0
    309a:	d1e5      	bne.n	3068 <UARTSend+0x1c>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    309c:	e05c      	b.n	3158 <UARTSend+0x10c>
			UART0TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
    309e:	68fb      	ldr	r3, [r7, #12]
    30a0:	2b01      	cmp	r3, #1
    30a2:	d11b      	bne.n	30dc <UARTSend+0x90>
		while (Length != 0) {
    30a4:	e016      	b.n	30d4 <UARTSend+0x88>
			/* THRE status, contain valid data */
			while (!(UART1TxEmpty & 0x01));
    30a6:	bf00      	nop
    30a8:	4b30      	ldr	r3, [pc, #192]	; (316c <UARTSend+0x120>)
    30aa:	781b      	ldrb	r3, [r3, #0]
    30ac:	b2db      	uxtb	r3, r3
    30ae:	f003 0301 	and.w	r3, r3, #1
    30b2:	2b00      	cmp	r3, #0
    30b4:	d0f8      	beq.n	30a8 <UARTSend+0x5c>
			LPC_UART1->THR = BufferPtr[index];
    30b6:	492e      	ldr	r1, [pc, #184]	; (3170 <UARTSend+0x124>)
    30b8:	697b      	ldr	r3, [r7, #20]
    30ba:	693a      	ldr	r2, [r7, #16]
    30bc:	4413      	add	r3, r2
    30be:	781b      	ldrb	r3, [r3, #0]
    30c0:	700b      	strb	r3, [r1, #0]
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
    30c2:	4b2a      	ldr	r3, [pc, #168]	; (316c <UARTSend+0x120>)
    30c4:	2200      	movs	r2, #0
    30c6:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    30c8:	697b      	ldr	r3, [r7, #20]
    30ca:	3301      	adds	r3, #1
    30cc:	617b      	str	r3, [r7, #20]
			Length--;
    30ce:	687b      	ldr	r3, [r7, #4]
    30d0:	3b01      	subs	r3, #1
    30d2:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 1) {
		while (Length != 0) {
    30d4:	687b      	ldr	r3, [r7, #4]
    30d6:	2b00      	cmp	r3, #0
    30d8:	d1e5      	bne.n	30a6 <UARTSend+0x5a>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    30da:	e03d      	b.n	3158 <UARTSend+0x10c>
			UART1TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
    30dc:	68fb      	ldr	r3, [r7, #12]
    30de:	2b02      	cmp	r3, #2
    30e0:	d11b      	bne.n	311a <UARTSend+0xce>
		while (Length != 0) {
    30e2:	e016      	b.n	3112 <UARTSend+0xc6>
			/* THRE status, contain valid data */
			while (!(UART2TxEmpty & 0x01));
    30e4:	bf00      	nop
    30e6:	4b23      	ldr	r3, [pc, #140]	; (3174 <UARTSend+0x128>)
    30e8:	781b      	ldrb	r3, [r3, #0]
    30ea:	b2db      	uxtb	r3, r3
    30ec:	f003 0301 	and.w	r3, r3, #1
    30f0:	2b00      	cmp	r3, #0
    30f2:	d0f8      	beq.n	30e6 <UARTSend+0x9a>
			LPC_UART2->THR = BufferPtr[index];
    30f4:	4920      	ldr	r1, [pc, #128]	; (3178 <UARTSend+0x12c>)
    30f6:	697b      	ldr	r3, [r7, #20]
    30f8:	693a      	ldr	r2, [r7, #16]
    30fa:	4413      	add	r3, r2
    30fc:	781b      	ldrb	r3, [r3, #0]
    30fe:	700b      	strb	r3, [r1, #0]
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
    3100:	4b1c      	ldr	r3, [pc, #112]	; (3174 <UARTSend+0x128>)
    3102:	2200      	movs	r2, #0
    3104:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    3106:	697b      	ldr	r3, [r7, #20]
    3108:	3301      	adds	r3, #1
    310a:	617b      	str	r3, [r7, #20]
			Length--;
    310c:	687b      	ldr	r3, [r7, #4]
    310e:	3b01      	subs	r3, #1
    3110:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 2) {
		while (Length != 0) {
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	2b00      	cmp	r3, #0
    3116:	d1e5      	bne.n	30e4 <UARTSend+0x98>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    3118:	e01e      	b.n	3158 <UARTSend+0x10c>
			UART2TxEmpty = 0; /* not empty in the THR until it shifts out */
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
    311a:	68fb      	ldr	r3, [r7, #12]
    311c:	2b03      	cmp	r3, #3
    311e:	d11a      	bne.n	3156 <UARTSend+0x10a>
		while (Length != 0) {
    3120:	e016      	b.n	3150 <UARTSend+0x104>
			/* THRE status, contain valid data */
			while (!(UART3TxEmpty & 0x01));
    3122:	bf00      	nop
    3124:	4b15      	ldr	r3, [pc, #84]	; (317c <UARTSend+0x130>)
    3126:	781b      	ldrb	r3, [r3, #0]
    3128:	b2db      	uxtb	r3, r3
    312a:	f003 0301 	and.w	r3, r3, #1
    312e:	2b00      	cmp	r3, #0
    3130:	d0f8      	beq.n	3124 <UARTSend+0xd8>
			LPC_UART3->THR = BufferPtr[index];
    3132:	4913      	ldr	r1, [pc, #76]	; (3180 <UARTSend+0x134>)
    3134:	697b      	ldr	r3, [r7, #20]
    3136:	693a      	ldr	r2, [r7, #16]
    3138:	4413      	add	r3, r2
    313a:	781b      	ldrb	r3, [r3, #0]
    313c:	700b      	strb	r3, [r1, #0]
			UART3TxEmpty = 0; /* not empty in the THR until it shifts out */
    313e:	4b0f      	ldr	r3, [pc, #60]	; (317c <UARTSend+0x130>)
    3140:	2200      	movs	r2, #0
    3142:	701a      	strb	r2, [r3, #0]
			//BufferPtr++;
			index++;
    3144:	697b      	ldr	r3, [r7, #20]
    3146:	3301      	adds	r3, #1
    3148:	617b      	str	r3, [r7, #20]
			Length--;
    314a:	687b      	ldr	r3, [r7, #4]
    314c:	3b01      	subs	r3, #1
    314e:	607b      	str	r3, [r7, #4]
			//BufferPtr++;
			index++;
			Length--;
		}
	} else if (portNum == 3) {
		while (Length != 0) {
    3150:	687b      	ldr	r3, [r7, #4]
    3152:	2b00      	cmp	r3, #0
    3154:	d1e5      	bne.n	3122 <UARTSend+0xd6>
			//BufferPtr++;
			index++;
			Length--;
		}
	}
	return;
    3156:	bf00      	nop
}
    3158:	371c      	adds	r7, #28
    315a:	46bd      	mov	sp, r7
    315c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3160:	4770      	bx	lr
    3162:	bf00      	nop
    3164:	10000020 	.word	0x10000020
    3168:	4000c000 	.word	0x4000c000
    316c:	10000021 	.word	0x10000021
    3170:	40010000 	.word	0x40010000
    3174:	10000023 	.word	0x10000023
    3178:	40098000 	.word	0x40098000
    317c:	10000022 	.word	0x10000022
    3180:	4009c000 	.word	0x4009c000

00003184 <ReadUart>:

uint16_t ReadUart( uint8_t *veri, uint8_t PortNum )
{
    3184:	b480      	push	{r7}
    3186:	b087      	sub	sp, #28
    3188:	af00      	add	r7, sp, #0
    318a:	6078      	str	r0, [r7, #4]
    318c:	460b      	mov	r3, r1
    318e:	70fb      	strb	r3, [r7, #3]
	uint8_t *veri_ptr = veri;
    3190:	687b      	ldr	r3, [r7, #4]
    3192:	617b      	str	r3, [r7, #20]
	uint16_t buff_count = 0;
    3194:	2300      	movs	r3, #0
    3196:	827b      	strh	r3, [r7, #18]
	if (PortNum == 0) {
    3198:	78fb      	ldrb	r3, [r7, #3]
    319a:	2b00      	cmp	r3, #0
    319c:	d122      	bne.n	31e4 <ReadUart+0x60>
		if (UART0Count > 0) {
    319e:	4b4e      	ldr	r3, [pc, #312]	; (32d8 <ReadUart+0x154>)
    31a0:	881b      	ldrh	r3, [r3, #0]
    31a2:	b29b      	uxth	r3, r3
    31a4:	2b00      	cmp	r3, #0
    31a6:	d01d      	beq.n	31e4 <ReadUart+0x60>
			while (buff_count < UART0Count) {
    31a8:	e00b      	b.n	31c2 <ReadUart+0x3e>
				*veri_ptr = UART0Buffer[buff_count];
    31aa:	8a7b      	ldrh	r3, [r7, #18]
    31ac:	4a4b      	ldr	r2, [pc, #300]	; (32dc <ReadUart+0x158>)
    31ae:	5cd3      	ldrb	r3, [r2, r3]
    31b0:	b2da      	uxtb	r2, r3
    31b2:	697b      	ldr	r3, [r7, #20]
    31b4:	701a      	strb	r2, [r3, #0]
				buff_count++;
    31b6:	8a7b      	ldrh	r3, [r7, #18]
    31b8:	3301      	adds	r3, #1
    31ba:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    31bc:	697b      	ldr	r3, [r7, #20]
    31be:	3301      	adds	r3, #1
    31c0:	617b      	str	r3, [r7, #20]
{
	uint8_t *veri_ptr = veri;
	uint16_t buff_count = 0;
	if (PortNum == 0) {
		if (UART0Count > 0) {
			while (buff_count < UART0Count) {
    31c2:	4b45      	ldr	r3, [pc, #276]	; (32d8 <ReadUart+0x154>)
    31c4:	881b      	ldrh	r3, [r3, #0]
    31c6:	b29b      	uxth	r3, r3
    31c8:	8a7a      	ldrh	r2, [r7, #18]
    31ca:	429a      	cmp	r2, r3
    31cc:	d3ed      	bcc.n	31aa <ReadUart+0x26>
				*veri_ptr = UART0Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    31ce:	697b      	ldr	r3, [r7, #20]
    31d0:	2200      	movs	r2, #0
    31d2:	701a      	strb	r2, [r3, #0]
			uint16_t len = UART0Count;
    31d4:	4b40      	ldr	r3, [pc, #256]	; (32d8 <ReadUart+0x154>)
    31d6:	881b      	ldrh	r3, [r3, #0]
    31d8:	823b      	strh	r3, [r7, #16]
			UART0Count = 0;
    31da:	4b3f      	ldr	r3, [pc, #252]	; (32d8 <ReadUart+0x154>)
    31dc:	2200      	movs	r2, #0
    31de:	801a      	strh	r2, [r3, #0]
			return ( len );
    31e0:	8a3b      	ldrh	r3, [r7, #16]
    31e2:	e073      	b.n	32cc <ReadUart+0x148>
		}
	}
	if (PortNum == 1) {
    31e4:	78fb      	ldrb	r3, [r7, #3]
    31e6:	2b01      	cmp	r3, #1
    31e8:	d124      	bne.n	3234 <ReadUart+0xb0>



		if (UART1Count > 0) {
    31ea:	4b3d      	ldr	r3, [pc, #244]	; (32e0 <ReadUart+0x15c>)
    31ec:	881b      	ldrh	r3, [r3, #0]
    31ee:	b29b      	uxth	r3, r3
    31f0:	2b00      	cmp	r3, #0
    31f2:	d06a      	beq.n	32ca <ReadUart+0x146>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    31f4:	b672      	cpsid	i

			__disable_irq();

			while (buff_count < UART1Count) {
    31f6:	e00b      	b.n	3210 <ReadUart+0x8c>
				*veri_ptr = UART1Buffer[buff_count];
    31f8:	8a7b      	ldrh	r3, [r7, #18]
    31fa:	4a3a      	ldr	r2, [pc, #232]	; (32e4 <ReadUart+0x160>)
    31fc:	5cd3      	ldrb	r3, [r2, r3]
    31fe:	b2da      	uxtb	r2, r3
    3200:	697b      	ldr	r3, [r7, #20]
    3202:	701a      	strb	r2, [r3, #0]
				buff_count++;
    3204:	8a7b      	ldrh	r3, [r7, #18]
    3206:	3301      	adds	r3, #1
    3208:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    320a:	697b      	ldr	r3, [r7, #20]
    320c:	3301      	adds	r3, #1
    320e:	617b      	str	r3, [r7, #20]

		if (UART1Count > 0) {

			__disable_irq();

			while (buff_count < UART1Count) {
    3210:	4b33      	ldr	r3, [pc, #204]	; (32e0 <ReadUart+0x15c>)
    3212:	881b      	ldrh	r3, [r3, #0]
    3214:	b29b      	uxth	r3, r3
    3216:	8a7a      	ldrh	r2, [r7, #18]
    3218:	429a      	cmp	r2, r3
    321a:	d3ed      	bcc.n	31f8 <ReadUart+0x74>
				*veri_ptr = UART1Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    321c:	697b      	ldr	r3, [r7, #20]
    321e:	2200      	movs	r2, #0
    3220:	701a      	strb	r2, [r3, #0]
			uint16_t len = UART1Count;
    3222:	4b2f      	ldr	r3, [pc, #188]	; (32e0 <ReadUart+0x15c>)
    3224:	881b      	ldrh	r3, [r3, #0]
    3226:	81fb      	strh	r3, [r7, #14]
			UART1Count = 0;
    3228:	4b2d      	ldr	r3, [pc, #180]	; (32e0 <ReadUart+0x15c>)
    322a:	2200      	movs	r2, #0
    322c:	801a      	strh	r2, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    322e:	b662      	cpsie	i

			__enable_irq();
			return ( len );
    3230:	89fb      	ldrh	r3, [r7, #14]
    3232:	e04b      	b.n	32cc <ReadUart+0x148>
		}
	}//GPS Port
	else if (PortNum == 2) {
    3234:	78fb      	ldrb	r3, [r7, #3]
    3236:	2b02      	cmp	r3, #2
    3238:	d11f      	bne.n	327a <ReadUart+0xf6>
		if (UART2Count > 0) {
    323a:	4b2b      	ldr	r3, [pc, #172]	; (32e8 <ReadUart+0x164>)
    323c:	881b      	ldrh	r3, [r3, #0]
    323e:	b29b      	uxth	r3, r3
    3240:	2b00      	cmp	r3, #0
    3242:	d042      	beq.n	32ca <ReadUart+0x146>
			while (buff_count < UART2Count) {
    3244:	e00b      	b.n	325e <ReadUart+0xda>
				*veri_ptr = UART2Buffer[buff_count];
    3246:	8a7b      	ldrh	r3, [r7, #18]
    3248:	4a28      	ldr	r2, [pc, #160]	; (32ec <ReadUart+0x168>)
    324a:	5cd3      	ldrb	r3, [r2, r3]
    324c:	b2da      	uxtb	r2, r3
    324e:	697b      	ldr	r3, [r7, #20]
    3250:	701a      	strb	r2, [r3, #0]
				buff_count++;
    3252:	8a7b      	ldrh	r3, [r7, #18]
    3254:	3301      	adds	r3, #1
    3256:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    3258:	697b      	ldr	r3, [r7, #20]
    325a:	3301      	adds	r3, #1
    325c:	617b      	str	r3, [r7, #20]
			return ( len );
		}
	}//GPS Port
	else if (PortNum == 2) {
		if (UART2Count > 0) {
			while (buff_count < UART2Count) {
    325e:	4b22      	ldr	r3, [pc, #136]	; (32e8 <ReadUart+0x164>)
    3260:	881b      	ldrh	r3, [r3, #0]
    3262:	b29b      	uxth	r3, r3
    3264:	8a7a      	ldrh	r2, [r7, #18]
    3266:	429a      	cmp	r2, r3
    3268:	d3ed      	bcc.n	3246 <ReadUart+0xc2>
				*veri_ptr = UART2Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    326a:	697b      	ldr	r3, [r7, #20]
    326c:	2200      	movs	r2, #0
    326e:	701a      	strb	r2, [r3, #0]
			UART2Count = 0;
    3270:	4b1d      	ldr	r3, [pc, #116]	; (32e8 <ReadUart+0x164>)
    3272:	2200      	movs	r2, #0
    3274:	801a      	strh	r2, [r3, #0]
			return buff_count;
    3276:	8a7b      	ldrh	r3, [r7, #18]
    3278:	e028      	b.n	32cc <ReadUart+0x148>
		}
	} else if (PortNum == 3) {
    327a:	78fb      	ldrb	r3, [r7, #3]
    327c:	2b03      	cmp	r3, #3
    327e:	d124      	bne.n	32ca <ReadUart+0x146>
		if (UART3Count > 0) {
    3280:	4b1b      	ldr	r3, [pc, #108]	; (32f0 <ReadUart+0x16c>)
    3282:	881b      	ldrh	r3, [r3, #0]
    3284:	b29b      	uxth	r3, r3
    3286:	2b00      	cmp	r3, #0
    3288:	d01f      	beq.n	32ca <ReadUart+0x146>
			while (buff_count < UART3Count) {
    328a:	e00b      	b.n	32a4 <ReadUart+0x120>
				*veri_ptr = UART3Buffer[buff_count];
    328c:	8a7b      	ldrh	r3, [r7, #18]
    328e:	4a19      	ldr	r2, [pc, #100]	; (32f4 <ReadUart+0x170>)
    3290:	5cd3      	ldrb	r3, [r2, r3]
    3292:	b2da      	uxtb	r2, r3
    3294:	697b      	ldr	r3, [r7, #20]
    3296:	701a      	strb	r2, [r3, #0]
				buff_count++;
    3298:	8a7b      	ldrh	r3, [r7, #18]
    329a:	3301      	adds	r3, #1
    329c:	827b      	strh	r3, [r7, #18]
				veri_ptr++;
    329e:	697b      	ldr	r3, [r7, #20]
    32a0:	3301      	adds	r3, #1
    32a2:	617b      	str	r3, [r7, #20]
			UART2Count = 0;
			return buff_count;
		}
	} else if (PortNum == 3) {
		if (UART3Count > 0) {
			while (buff_count < UART3Count) {
    32a4:	4b12      	ldr	r3, [pc, #72]	; (32f0 <ReadUart+0x16c>)
    32a6:	881b      	ldrh	r3, [r3, #0]
    32a8:	b29b      	uxth	r3, r3
    32aa:	8a7a      	ldrh	r2, [r7, #18]
    32ac:	429a      	cmp	r2, r3
    32ae:	d3ed      	bcc.n	328c <ReadUart+0x108>
				*veri_ptr = UART3Buffer[buff_count];
				buff_count++;
				veri_ptr++;
			}
			*veri_ptr = '\0';
    32b0:	697b      	ldr	r3, [r7, #20]
    32b2:	2200      	movs	r2, #0
    32b4:	701a      	strb	r2, [r3, #0]
			int len = UART3Count;
    32b6:	4b0e      	ldr	r3, [pc, #56]	; (32f0 <ReadUart+0x16c>)
    32b8:	881b      	ldrh	r3, [r3, #0]
    32ba:	b29b      	uxth	r3, r3
    32bc:	60bb      	str	r3, [r7, #8]
			UART3Count = 0;
    32be:	4b0c      	ldr	r3, [pc, #48]	; (32f0 <ReadUart+0x16c>)
    32c0:	2200      	movs	r2, #0
    32c2:	801a      	strh	r2, [r3, #0]
			return len;
    32c4:	68bb      	ldr	r3, [r7, #8]
    32c6:	b29b      	uxth	r3, r3
    32c8:	e000      	b.n	32cc <ReadUart+0x148>
		}
	}
	return 0;
    32ca:	2300      	movs	r3, #0
}
    32cc:	4618      	mov	r0, r3
    32ce:	371c      	adds	r7, #28
    32d0:	46bd      	mov	sp, r7
    32d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    32d6:	4770      	bx	lr
    32d8:	10000440 	.word	0x10000440
    32dc:	100012e8 	.word	0x100012e8
    32e0:	10000442 	.word	0x10000442
    32e4:	10000e8c 	.word	0x10000e8c
    32e8:	10000444 	.word	0x10000444
    32ec:	100014f0 	.word	0x100014f0
    32f0:	10000446 	.word	0x10000446
    32f4:	100013f0 	.word	0x100013f0

000032f8 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value. 

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    32f8:	b480      	push	{r7}
    32fa:	b083      	sub	sp, #12
    32fc:	af00      	add	r7, sp, #0
    32fe:	4603      	mov	r3, r0
    3300:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    3302:	4908      	ldr	r1, [pc, #32]	; (3324 <NVIC_EnableIRQ+0x2c>)
    3304:	f997 3007 	ldrsb.w	r3, [r7, #7]
    3308:	095b      	lsrs	r3, r3, #5
    330a:	79fa      	ldrb	r2, [r7, #7]
    330c:	f002 021f 	and.w	r2, r2, #31
    3310:	2001      	movs	r0, #1
    3312:	fa00 f202 	lsl.w	r2, r0, r2
    3316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    331a:	370c      	adds	r7, #12
    331c:	46bd      	mov	sp, r7
    331e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3322:	4770      	bx	lr
    3324:	e000e100 	.word	0xe000e100

00003328 <WDT_IRQHandler>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void WDT_IRQHandler(void) {
    3328:	b480      	push	{r7}
    332a:	af00      	add	r7, sp, #0
	LPC_WDT->WDMOD &= ~WDTOF; /* clear the time-out terrupt flag */
    332c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3334:	781b      	ldrb	r3, [r3, #0]
    3336:	b2db      	uxtb	r3, r3
    3338:	f023 0304 	bic.w	r3, r3, #4
    333c:	b2db      	uxtb	r3, r3
    333e:	7013      	strb	r3, [r2, #0]
	wdt_counter++;
    3340:	4b04      	ldr	r3, [pc, #16]	; (3354 <WDT_IRQHandler+0x2c>)
    3342:	681b      	ldr	r3, [r3, #0]
    3344:	3301      	adds	r3, #1
    3346:	4a03      	ldr	r2, [pc, #12]	; (3354 <WDT_IRQHandler+0x2c>)
    3348:	6013      	str	r3, [r2, #0]
	return;
    334a:	bf00      	nop
}
    334c:	46bd      	mov	sp, r7
    334e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3352:	4770      	bx	lr
    3354:	10001cec 	.word	0x10001cec

00003358 <WDTInit>:
	//WDT_SetTimeOutRTC(300 * 1000 * 1000);
	LPC_WDT->WDMOD = 0x3;
	//WDTFeed();
}

uint32_t WDTInit(uint32_t feed) {
    3358:	b580      	push	{r7, lr}
    335a:	b082      	sub	sp, #8
    335c:	af00      	add	r7, sp, #0
    335e:	6078      	str	r0, [r7, #4]
	wdt_counter = 0;
    3360:	4b0b      	ldr	r3, [pc, #44]	; (3390 <WDTInit+0x38>)
    3362:	2200      	movs	r2, #0
    3364:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(WDT_IRQn);
    3366:	2000      	movs	r0, #0
    3368:	f7ff ffc6 	bl	32f8 <NVIC_EnableIRQ>
	LPC_WDT->WDCLKSEL = 0x1;//0x0 = IRC (Internal RC Oscillator) ,0x1 = APB Peripheral clock
    336c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3370:	2201      	movs	r2, #1
    3372:	611a      	str	r2, [r3, #16]
	//IRC is active even in Deep Sleep, and WDT Interrupt can wake up MCU in this mode.
	LPC_WDT->WDTC = feed; /* once WDEN is set, the WDT will start after feeding */
    3374:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3378:	687b      	ldr	r3, [r7, #4]
    337a:	6053      	str	r3, [r2, #4]
	LPC_WDT->WDMOD = 0x3;
    337c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3380:	2203      	movs	r2, #3
    3382:	701a      	strb	r2, [r3, #0]
	WDTFeed();
    3384:	f000 f806 	bl	3394 <WDTFeed>
}
    3388:	4618      	mov	r0, r3
    338a:	3708      	adds	r7, #8
    338c:	46bd      	mov	sp, r7
    338e:	bd80      	pop	{r7, pc}
    3390:	10001cec 	.word	0x10001cec

00003394 <WDTFeed>:
 **
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void WDTFeed(void) {
    3394:	b480      	push	{r7}
    3396:	af00      	add	r7, sp, #0
	LPC_WDT->WDFEED = 0xAA; /* Feeding sequence */
    3398:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    339c:	22aa      	movs	r2, #170	; 0xaa
    339e:	721a      	strb	r2, [r3, #8]
	LPC_WDT->WDFEED = 0x55;
    33a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    33a4:	2255      	movs	r2, #85	; 0x55
    33a6:	721a      	strb	r2, [r3, #8]
	return;
    33a8:	bf00      	nop
}
    33aa:	46bd      	mov	sp, r7
    33ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    33b0:	4770      	bx	lr
    33b2:	bf00      	nop

000033b4 <XModemReadByte>:
//	(*pByte) = receiveBuf[dataIndex++];
//	return (1);
//}


uint8_t XModemReadByte( unsigned char* pByte) {
    33b4:	b580      	push	{r7, lr}
    33b6:	b08a      	sub	sp, #40	; 0x28
    33b8:	af00      	add	r7, sp, #0
    33ba:	6078      	str	r0, [r7, #4]
	char* pnewline;
	char asciiLen[10];
	unsigned int len, i;
	unsigned dataoffset;

	if (dataIndex >= dataLen) {
    33bc:	4b49      	ldr	r3, [pc, #292]	; (34e4 <XModemReadByte+0x130>)
    33be:	881a      	ldrh	r2, [r3, #0]
    33c0:	4b49      	ldr	r3, [pc, #292]	; (34e8 <XModemReadByte+0x134>)
    33c2:	881b      	ldrh	r3, [r3, #0]
    33c4:	429a      	cmp	r2, r3
    33c6:	d37c      	bcc.n	34c2 <XModemReadByte+0x10e>
		// all buffer consumed read more from TCP connection
		dataLen = GSM_TCP_Recv( receiveBuf, RECEIVE_BUFF_LEN );
    33c8:	4848      	ldr	r0, [pc, #288]	; (34ec <XModemReadByte+0x138>)
    33ca:	f240 414c 	movw	r1, #1100	; 0x44c
    33ce:	f7fd fb39 	bl	a44 <GSM_TCP_Recv>
    33d2:	4603      	mov	r3, r0
    33d4:	b29a      	uxth	r2, r3
    33d6:	4b44      	ldr	r3, [pc, #272]	; (34e8 <XModemReadByte+0x134>)
    33d8:	801a      	strh	r2, [r3, #0]
		receiveBuf[dataLen] = '\0';
    33da:	4b43      	ldr	r3, [pc, #268]	; (34e8 <XModemReadByte+0x134>)
    33dc:	881b      	ldrh	r3, [r3, #0]
    33de:	461a      	mov	r2, r3
    33e0:	4b42      	ldr	r3, [pc, #264]	; (34ec <XModemReadByte+0x138>)
    33e2:	2100      	movs	r1, #0
    33e4:	5499      	strb	r1, [r3, r2]

		// find the length of the message between
		// ",TCP," and "\r\n"
		pdata = strstr( receiveBuf, "IPD" );
    33e6:	4841      	ldr	r0, [pc, #260]	; (34ec <XModemReadByte+0x138>)
    33e8:	4941      	ldr	r1, [pc, #260]	; (34f0 <XModemReadByte+0x13c>)
    33ea:	f002 f95e 	bl	56aa <strstr>
    33ee:	4603      	mov	r3, r0
    33f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (pdata == NULL)
    33f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    33f4:	2b00      	cmp	r3, #0
    33f6:	d117      	bne.n	3428 <XModemReadByte+0x74>
		{
			pdata = strstr( receiveBuf, ",TCP," );
    33f8:	483c      	ldr	r0, [pc, #240]	; (34ec <XModemReadByte+0x138>)
    33fa:	493e      	ldr	r1, [pc, #248]	; (34f4 <XModemReadByte+0x140>)
    33fc:	f002 f955 	bl	56aa <strstr>
    3400:	4603      	mov	r3, r0
    3402:	627b      	str	r3, [r7, #36]	; 0x24
			if (pdata == NULL) {
    3404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3406:	2b00      	cmp	r3, #0
    3408:	d101      	bne.n	340e <XModemReadByte+0x5a>
				return (0);
    340a:	2300      	movs	r3, #0
    340c:	e065      	b.n	34da <XModemReadByte+0x126>
			}

			pnewline = strstr(pdata, "\r\n");
    340e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3410:	4939      	ldr	r1, [pc, #228]	; (34f8 <XModemReadByte+0x144>)
    3412:	f002 f94a 	bl	56aa <strstr>
    3416:	4603      	mov	r3, r0
    3418:	623b      	str	r3, [r7, #32]
			dataoffset = 2;
    341a:	2302      	movs	r3, #2
    341c:	61bb      	str	r3, [r7, #24]
			if (pnewline == NULL) {
    341e:	6a3b      	ldr	r3, [r7, #32]
    3420:	2b00      	cmp	r3, #0
    3422:	d10e      	bne.n	3442 <XModemReadByte+0x8e>
				return (0);
    3424:	2300      	movs	r3, #0
    3426:	e058      	b.n	34da <XModemReadByte+0x126>
			}

		} else
		{
			pnewline = strstr( pdata, "TCP:" );
    3428:	6a78      	ldr	r0, [r7, #36]	; 0x24
    342a:	4934      	ldr	r1, [pc, #208]	; (34fc <XModemReadByte+0x148>)
    342c:	f002 f93d 	bl	56aa <strstr>
    3430:	4603      	mov	r3, r0
    3432:	623b      	str	r3, [r7, #32]
			if (pnewline == NULL) {
    3434:	6a3b      	ldr	r3, [r7, #32]
    3436:	2b00      	cmp	r3, #0
    3438:	d101      	bne.n	343e <XModemReadByte+0x8a>
				return (0);
    343a:	2300      	movs	r3, #0
    343c:	e04d      	b.n	34da <XModemReadByte+0x126>
			}
			dataoffset = 4;
    343e:	2304      	movs	r3, #4
    3440:	61bb      	str	r3, [r7, #24]
		}

		strncpy( asciiLen, pdata + 3, pnewline - pdata );
    3442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3444:	1cd9      	adds	r1, r3, #3
    3446:	6a3a      	ldr	r2, [r7, #32]
    3448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    344a:	1ad3      	subs	r3, r2, r3
    344c:	f107 0208 	add.w	r2, r7, #8
    3450:	4610      	mov	r0, r2
    3452:	461a      	mov	r2, r3
    3454:	f002 f8fd 	bl	5652 <strncpy>

		asciiLen[pnewline - pdata] = '\0';
    3458:	6a3a      	ldr	r2, [r7, #32]
    345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    345c:	1ad3      	subs	r3, r2, r3
    345e:	f107 0228 	add.w	r2, r7, #40	; 0x28
    3462:	4413      	add	r3, r2
    3464:	2200      	movs	r2, #0
    3466:	f803 2c20 	strb.w	r2, [r3, #-32]

		len = atoi(asciiLen);
    346a:	f107 0308 	add.w	r3, r7, #8
    346e:	4618      	mov	r0, r3
    3470:	f002 f870 	bl	5554 <atoi>
    3474:	4603      	mov	r3, r0
    3476:	617b      	str	r3, [r7, #20]

//		int count = sprintf(asciiLen, "%d", len );
//		asciiLen[count] = '\0';
//		TraceDumpHex(asciiLen, strlen(asciiLen));

		for (i = 0; i < len; i++) {
    3478:	2300      	movs	r3, #0
    347a:	61fb      	str	r3, [r7, #28]
    347c:	e00d      	b.n	349a <XModemReadByte+0xe6>
			receiveBuf[i] = *(pnewline + dataoffset + i);
    347e:	69ba      	ldr	r2, [r7, #24]
    3480:	69fb      	ldr	r3, [r7, #28]
    3482:	4413      	add	r3, r2
    3484:	6a3a      	ldr	r2, [r7, #32]
    3486:	4413      	add	r3, r2
    3488:	7819      	ldrb	r1, [r3, #0]
    348a:	4a18      	ldr	r2, [pc, #96]	; (34ec <XModemReadByte+0x138>)
    348c:	69fb      	ldr	r3, [r7, #28]
    348e:	4413      	add	r3, r2
    3490:	460a      	mov	r2, r1
    3492:	701a      	strb	r2, [r3, #0]

//		int count = sprintf(asciiLen, "%d", len );
//		asciiLen[count] = '\0';
//		TraceDumpHex(asciiLen, strlen(asciiLen));

		for (i = 0; i < len; i++) {
    3494:	69fb      	ldr	r3, [r7, #28]
    3496:	3301      	adds	r3, #1
    3498:	61fb      	str	r3, [r7, #28]
    349a:	69fa      	ldr	r2, [r7, #28]
    349c:	697b      	ldr	r3, [r7, #20]
    349e:	429a      	cmp	r2, r3
    34a0:	d3ed      	bcc.n	347e <XModemReadByte+0xca>
			receiveBuf[i] = *(pnewline + dataoffset + i);
		}
		dataLen   = len;
    34a2:	697b      	ldr	r3, [r7, #20]
    34a4:	b29a      	uxth	r2, r3
    34a6:	4b10      	ldr	r3, [pc, #64]	; (34e8 <XModemReadByte+0x134>)
    34a8:	801a      	strh	r2, [r3, #0]
		dataIndex = 0;
    34aa:	4b0e      	ldr	r3, [pc, #56]	; (34e4 <XModemReadByte+0x130>)
    34ac:	2200      	movs	r2, #0
    34ae:	801a      	strh	r2, [r3, #0]
		if( dataLen <= 0 ) {
    34b0:	4b0d      	ldr	r3, [pc, #52]	; (34e8 <XModemReadByte+0x134>)
    34b2:	881b      	ldrh	r3, [r3, #0]
    34b4:	2b00      	cmp	r3, #0
    34b6:	d104      	bne.n	34c2 <XModemReadByte+0x10e>
			dataLen = 0;
    34b8:	4b0b      	ldr	r3, [pc, #44]	; (34e8 <XModemReadByte+0x134>)
    34ba:	2200      	movs	r2, #0
    34bc:	801a      	strh	r2, [r3, #0]
			return (0);  // no data available
    34be:	2300      	movs	r3, #0
    34c0:	e00b      	b.n	34da <XModemReadByte+0x126>
		}
	}

	(*pByte) = receiveBuf[dataIndex++];
    34c2:	4b08      	ldr	r3, [pc, #32]	; (34e4 <XModemReadByte+0x130>)
    34c4:	881b      	ldrh	r3, [r3, #0]
    34c6:	1c5a      	adds	r2, r3, #1
    34c8:	b291      	uxth	r1, r2
    34ca:	4a06      	ldr	r2, [pc, #24]	; (34e4 <XModemReadByte+0x130>)
    34cc:	8011      	strh	r1, [r2, #0]
    34ce:	461a      	mov	r2, r3
    34d0:	4b06      	ldr	r3, [pc, #24]	; (34ec <XModemReadByte+0x138>)
    34d2:	5c9a      	ldrb	r2, [r3, r2]
    34d4:	687b      	ldr	r3, [r7, #4]
    34d6:	701a      	strb	r2, [r3, #0]
	return (1);
    34d8:	2301      	movs	r3, #1
}
    34da:	4618      	mov	r0, r3
    34dc:	3728      	adds	r7, #40	; 0x28
    34de:	46bd      	mov	sp, r7
    34e0:	bd80      	pop	{r7, pc}
    34e2:	bf00      	nop
    34e4:	10000c96 	.word	0x10000c96
    34e8:	10000c94 	.word	0x10000c94
    34ec:	10000848 	.word	0x10000848
    34f0:	000072bc 	.word	0x000072bc
    34f4:	000072c0 	.word	0x000072c0
    34f8:	000072c8 	.word	0x000072c8
    34fc:	000072cc 	.word	0x000072cc

00003500 <XModem1K_Client>:


int XModem1K_Client(
		uint32_t (*pu32Xmodem1kRxPacketCallback)(uint8_t *pu8Data,
				uint16_t u16Len)) {
    3500:	b580      	push	{r7, lr}
    3502:	b0be      	sub	sp, #248	; 0xf8
    3504:	af00      	add	r7, sp, #0
    3506:	6078      	str	r0, [r7, #4]
	uint32_t u32InProgress = 1;
    3508:	2301      	movs	r3, #1
    350a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	uint32_t u32State = STATE_IDLE;
    350e:	2300      	movs	r3, #0
    3510:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint32_t u32ByteCount;
	uint32_t u32PktLen;
	uint16_t u16CRC, calculatedCRC;
	uint16_t frameNum = 0;
    3514:	2300      	movs	r3, #0
    3516:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8

	uint32_t trials;

	/* Prepare UART for RX/TX */

	while (u32InProgress) {
    351a:	e226      	b.n	396a <XModem1K_Client+0x46a>
		WDTFeed();
    351c:	f7ff ff3a 	bl	3394 <WDTFeed>
		switch (u32State) {
    3520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    3524:	2b01      	cmp	r3, #1
    3526:	d01e      	beq.n	3566 <XModem1K_Client+0x66>
    3528:	2b01      	cmp	r3, #1
    352a:	d302      	bcc.n	3532 <XModem1K_Client+0x32>
    352c:	2b02      	cmp	r3, #2
    352e:	d061      	beq.n	35f4 <XModem1K_Client+0xf4>
    3530:	e21a      	b.n	3968 <XModem1K_Client+0x468>
		case STATE_IDLE: {

			/* Send command to server indicating we are ready to receive */
			uint8_t u8Cmd = POLL;
    3532:	2343      	movs	r3, #67	; 0x43
    3534:	73fb      	strb	r3, [r7, #15]

			TraceNL( "Start downloading" );
    3536:	48db      	ldr	r0, [pc, #876]	; (38a4 <XModem1K_Client+0x3a4>)
    3538:	f7ff f8a8 	bl	268c <TraceNL>
			TracePutcHex( u8Cmd );
    353c:	7bfb      	ldrb	r3, [r7, #15]
    353e:	4618      	mov	r0, r3
    3540:	f7ff f8bc 	bl	26bc <TracePutcHex>
			GSM_TCP_Send(&u8Cmd, 1);
    3544:	f107 030f 	add.w	r3, r7, #15
    3548:	4618      	mov	r0, r3
    354a:	2101      	movs	r1, #1
    354c:	f7fd fc38 	bl	dc0 <GSM_TCP_Send>

			/* Start timeout to send another poll if we do not get a response */
			vTimerStart(POLL_PERIOD_ms);
    3550:	f644 6020 	movw	r0, #20000	; 0x4e20
    3554:	f000 fa1a 	bl	398c <vTimerStart>
			trials   = DOWNLOAD_MAX_TRIALS;
    3558:	2303      	movs	r3, #3
    355a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

			u32State = STATE_CONNECTING;
    355e:	2301      	movs	r3, #1
    3560:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		}
			break;
    3564:	e201      	b.n	396a <XModem1K_Client+0x46a>

		case STATE_CONNECTING: {
			uint8_t u8Data;

			/* Check if a character has been received on the UART */
			if( XModemReadByte( &u8Data ) )
    3566:	f107 030e 	add.w	r3, r7, #14
    356a:	4618      	mov	r0, r3
    356c:	f7ff ff22 	bl	33b4 <XModemReadByte>
    3570:	4603      	mov	r3, r0
    3572:	2b00      	cmp	r3, #0
    3574:	d011      	beq.n	359a <XModem1K_Client+0x9a>
			{
				/* Expecting a start of packet character */
				if( u8Data == SOH )
    3576:	7bbb      	ldrb	r3, [r7, #14]
    3578:	2b01      	cmp	r3, #1
    357a:	d13a      	bne.n	35f2 <XModem1K_Client+0xf2>
				{
					/* SOH indicates short pay load packet is being transmitted */
					u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    357c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3580:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
					u32ByteCount = 1;
    3584:	2301      	movs	r3, #1
    3586:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

					/* Start packet timeout */
					vTimerStart( PACKET_TIMEOUT_PERIOD_ms);
    358a:	f644 6020 	movw	r0, #20000	; 0x4e20
    358e:	f000 f9fd 	bl	398c <vTimerStart>

					/* Wait for a further characters */
					u32State = STATE_RECEIVING;
    3592:	2302      	movs	r3, #2
    3594:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    3598:	e1e7      	b.n	396a <XModem1K_Client+0x46a>
				}
			} else /* No data received yet, check poll command timeout */
			{
				if ((LPC_TIM0->TCR & 0x01) == 0) {
    359a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    359e:	685b      	ldr	r3, [r3, #4]
    35a0:	f003 0301 	and.w	r3, r3, #1
    35a4:	2b00      	cmp	r3, #0
    35a6:	f040 81e0 	bne.w	396a <XModem1K_Client+0x46a>
					/* Timeout expired following poll command transmission so try again.. */
					uint8_t u8Cmd = POLL;
    35aa:	2343      	movs	r3, #67	; 0x43
    35ac:	737b      	strb	r3, [r7, #13]

					if (trials-- > 0) {
    35ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    35b2:	1e5a      	subs	r2, r3, #1
    35b4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
    35b8:	2b00      	cmp	r3, #0
    35ba:	d014      	beq.n	35e6 <XModem1K_Client+0xe6>
						TraceNL("Connecting state timer expired sending  new request  ");
    35bc:	48ba      	ldr	r0, [pc, #744]	; (38a8 <XModem1K_Client+0x3a8>)
    35be:	f7ff f865 	bl	268c <TraceNL>
						TracePutcHex( u8Cmd );
    35c2:	7b7b      	ldrb	r3, [r7, #13]
    35c4:	4618      	mov	r0, r3
    35c6:	f7ff f879 	bl	26bc <TracePutcHex>
						TraceNL("\r\n");
    35ca:	48b8      	ldr	r0, [pc, #736]	; (38ac <XModem1K_Client+0x3ac>)
    35cc:	f7ff f85e 	bl	268c <TraceNL>
						GSM_TCP_Send(&u8Cmd, 1);
    35d0:	f107 030d 	add.w	r3, r7, #13
    35d4:	4618      	mov	r0, r3
    35d6:	2101      	movs	r1, #1
    35d8:	f7fd fbf2 	bl	dc0 <GSM_TCP_Send>

					/*
					 * Restart timeout to send another poll
					 * if we do not get a response
					 */
					vTimerStart( POLL_PERIOD_ms);
    35dc:	f644 6020 	movw	r0, #20000	; 0x4e20
    35e0:	f000 f9d4 	bl	398c <vTimerStart>
    35e4:	e005      	b.n	35f2 <XModem1K_Client+0xf2>
						TraceNL("Connecting state timer expired sending  new request  ");
						TracePutcHex( u8Cmd );
						TraceNL("\r\n");
						GSM_TCP_Send(&u8Cmd, 1);
					} else {
						TraceNL("No reply give up upgrading");
    35e6:	48b2      	ldr	r0, [pc, #712]	; (38b0 <XModem1K_Client+0x3b0>)
    35e8:	f7ff f850 	bl	268c <TraceNL>
						return ( DOWNLOAD_ERR_TIMEOUT );
    35ec:	f04f 33ff 	mov.w	r3, #4294967295
    35f0:	e1c0      	b.n	3974 <XModem1K_Client+0x474>
					 */
					vTimerStart( POLL_PERIOD_ms);
				}
			}
		}
			break;
    35f2:	e1ba      	b.n	396a <XModem1K_Client+0x46a>

		case STATE_RECEIVING: {
			uint8_t u8Data;

			/* Check if a character has been received on the UART */
			if( XModemReadByte( &u8Data ) )
    35f4:	f107 030c 	add.w	r3, r7, #12
    35f8:	4618      	mov	r0, r3
    35fa:	f7ff fedb 	bl	33b4 <XModemReadByte>
    35fe:	4603      	mov	r3, r0
    3600:	2b00      	cmp	r3, #0
    3602:	f000 8189 	beq.w	3918 <XModem1K_Client+0x418>
			{
				// TracePutcHex( u8Data );
				/* Position of received byte determines action we take */
				if( u32ByteCount == 0 )
    3606:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    360a:	2b00      	cmp	r3, #0
    360c:	f040 80b2 	bne.w	3774 <XModem1K_Client+0x274>
				{
					/* Expecting a start of packet character */
					if( u8Data == SOH ) {
    3610:	7b3b      	ldrb	r3, [r7, #12]
    3612:	2b01      	cmp	r3, #1
    3614:	d10b      	bne.n	362e <XModem1K_Client+0x12e>
						/* SOH indicates short pay load packet is being transmitted */
						u32PktLen = SHORT_PACKET_PAYLOAD_LEN;
    3616:	f44f 6380 	mov.w	r3, #1024	; 0x400
    361a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
						u32ByteCount = 1;
    361e:	2301      	movs	r3, #1
    3620:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

						/* Start packet timeout */
						vTimerStart(PACKET_TIMEOUT_PERIOD_ms);
    3624:	f644 6020 	movw	r0, #20000	; 0x4e20
    3628:	f000 f9b0 	bl	398c <vTimerStart>
    362c:	e19b      	b.n	3966 <XModem1K_Client+0x466>
					} else if (u8Data == EOT) {
    362e:	7b3b      	ldrb	r3, [r7, #12]
    3630:	2b04      	cmp	r3, #4
    3632:	f040 8198 	bne.w	3966 <XModem1K_Client+0x466>
						TraceNL("Received EOT ");
    3636:	489f      	ldr	r0, [pc, #636]	; (38b4 <XModem1K_Client+0x3b4>)
    3638:	f7ff f828 	bl	268c <TraceNL>
						/* Server indicating transmission is complete */
						TraceNL("Closing TCP connection ");
    363c:	489e      	ldr	r0, [pc, #632]	; (38b8 <XModem1K_Client+0x3b8>)
    363e:	f7ff f825 	bl	268c <TraceNL>
						GSM_TCP_Close( );
    3642:	f7fd fdc7 	bl	11d4 <GSM_TCP_Close>

						u32InProgress = 0;
    3646:	2300      	movs	r3, #0
    3648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

						sprintf( buffer, "byte count: %d, packet len %d\r\n", u32ByteCount, u32PktLen);
    364c:	f107 0310 	add.w	r3, r7, #16
    3650:	4618      	mov	r0, r3
    3652:	499a      	ldr	r1, [pc, #616]	; (38bc <XModem1K_Client+0x3bc>)
    3654:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    3658:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    365c:	f000 fb6c 	bl	3d38 <sprintf>
						Trace( buffer, strlen( buffer ) );
    3660:	f107 0310 	add.w	r3, r7, #16
    3664:	4618      	mov	r0, r3
    3666:	f001 ffcf 	bl	5608 <strlen>
    366a:	4602      	mov	r2, r0
    366c:	f107 0310 	add.w	r3, r7, #16
    3670:	4618      	mov	r0, r3
    3672:	4611      	mov	r1, r2
    3674:	f7fe fffa 	bl	266c <Trace>

						/* Call the call back function to indicated a complete transmission */
						/* If length == 0, then EOT */
						pu32Xmodem1kRxPacketCallback( SECONDARY_IMAGE_LOAD_ADDR, 0);
    3678:	687b      	ldr	r3, [r7, #4]
    367a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    367e:	2100      	movs	r1, #0
    3680:	4798      	blx	r3

						uint32_t imageSize;
						uint16_t imageCRC;

						XModemReadByte( &u8Data );
    3682:	f107 030c 	add.w	r3, r7, #12
    3686:	4618      	mov	r0, r3
    3688:	f7ff fe94 	bl	33b4 <XModemReadByte>
						imageSize = u8Data << 24 & 0xFF000000;
    368c:	7b3b      	ldrb	r3, [r7, #12]
    368e:	061b      	lsls	r3, r3, #24
    3690:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

						XModemReadByte( &u8Data );
    3694:	f107 030c 	add.w	r3, r7, #12
    3698:	4618      	mov	r0, r3
    369a:	f7ff fe8b 	bl	33b4 <XModemReadByte>
						imageSize |= u8Data << 16 & 0x00FF0000;
    369e:	7b3b      	ldrb	r3, [r7, #12]
    36a0:	041b      	lsls	r3, r3, #16
    36a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    36a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
    36aa:	4313      	orrs	r3, r2
    36ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

						XModemReadByte( &u8Data );
    36b0:	f107 030c 	add.w	r3, r7, #12
    36b4:	4618      	mov	r0, r3
    36b6:	f7ff fe7d 	bl	33b4 <XModemReadByte>
						imageSize |= u8Data << 8 & 0x0000FF00;
    36ba:	7b3b      	ldrb	r3, [r7, #12]
    36bc:	021b      	lsls	r3, r3, #8
    36be:	b29b      	uxth	r3, r3
    36c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
    36c4:	4313      	orrs	r3, r2
    36c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

						XModemReadByte( &u8Data );
    36ca:	f107 030c 	add.w	r3, r7, #12
    36ce:	4618      	mov	r0, r3
    36d0:	f7ff fe70 	bl	33b4 <XModemReadByte>
						imageSize |= u8Data << 0 & 0x000000FF;
    36d4:	7b3b      	ldrb	r3, [r7, #12]
    36d6:	461a      	mov	r2, r3
    36d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    36dc:	4313      	orrs	r3, r2
    36de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc


						XModemReadByte( &u8Data );
    36e2:	f107 030c 	add.w	r3, r7, #12
    36e6:	4618      	mov	r0, r3
    36e8:	f7ff fe64 	bl	33b4 <XModemReadByte>
						imageCRC = u8Data << 8 & 0xFF00;
    36ec:	7b3b      	ldrb	r3, [r7, #12]
    36ee:	021b      	lsls	r3, r3, #8
    36f0:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda

						XModemReadByte( &u8Data );
    36f4:	f107 030c 	add.w	r3, r7, #12
    36f8:	4618      	mov	r0, r3
    36fa:	f7ff fe5b 	bl	33b4 <XModemReadByte>
						imageCRC |= u8Data << 0 & 0x00FF;
    36fe:	7b3b      	ldrb	r3, [r7, #12]
    3700:	b29a      	uxth	r2, r3
    3702:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
    3706:	4313      	orrs	r3, r2
    3708:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda

						sprintf( buffer, "file size: 0x%X, CRC: 0x%X\r\n", imageSize, imageCRC );
    370c:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
    3710:	f107 0210 	add.w	r2, r7, #16
    3714:	4610      	mov	r0, r2
    3716:	496a      	ldr	r1, [pc, #424]	; (38c0 <XModem1K_Client+0x3c0>)
    3718:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
    371c:	f000 fb0c 	bl	3d38 <sprintf>
						Trace( buffer );
    3720:	f107 0310 	add.w	r3, r7, #16
    3724:	4618      	mov	r0, r3
    3726:	f7fe ffa1 	bl	266c <Trace>

						calculatedCRC = u16CRC_Calc16( SECONDARY_IMAGE_LOAD_ADDR, imageSize );
    372a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
    372e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3732:	4619      	mov	r1, r3
    3734:	f7fd fd62 	bl	11fc <u16CRC_Calc16>
    3738:	4603      	mov	r3, r0
    373a:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8

						sprintf( buffer, "Calculated Image CRC: 0x%X\r\n", calculatedCRC );
    373e:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
    3742:	f107 0210 	add.w	r2, r7, #16
    3746:	4610      	mov	r0, r2
    3748:	495e      	ldr	r1, [pc, #376]	; (38c4 <XModem1K_Client+0x3c4>)
    374a:	461a      	mov	r2, r3
    374c:	f000 faf4 	bl	3d38 <sprintf>
						Trace( buffer );
    3750:	f107 0310 	add.w	r3, r7, #16
    3754:	4618      	mov	r0, r3
    3756:	f7fe ff89 	bl	266c <Trace>

						WriteImageSignature( imageSize, (0xFFFF0000 | (0x0000FFFF & (uint32_t)imageCRC)) );
    375a:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
    375e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3762:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3766:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
    376a:	4619      	mov	r1, r3
    376c:	f7fe fe8c 	bl	2488 <WriteImageSignature>

					    // We should have completed the image reception now dump it to see if any problem.
						// TraceDumpHex( SECONDARY_IMAGE_LOAD_ADDR, 20000 );

						return ( 0 );
    3770:	2300      	movs	r3, #0
    3772:	e0ff      	b.n	3974 <XModem1K_Client+0x474>

					} else {
						// Unexpected char ignore it
					}
				} else if (u32ByteCount == 1) {
    3774:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3778:	2b01      	cmp	r3, #1
    377a:	d108      	bne.n	378e <XModem1K_Client+0x28e>
					/* Byte 1 is the packet number - should be different from last one we received */
					frameNum = u8Data;
    377c:	7b3b      	ldrb	r3, [r7, #12]
    377e:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
					u32ByteCount++;
    3782:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3786:	3301      	adds	r3, #1
    3788:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    378c:	e0eb      	b.n	3966 <XModem1K_Client+0x466>
				} else if (u32ByteCount == 2) {
    378e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3792:	2b02      	cmp	r3, #2
    3794:	d11f      	bne.n	37d6 <XModem1K_Client+0x2d6>
					/* Byte 2 is the packet number inverted - check for error with last byte */
					frameNum <<= 8;
    3796:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
    379a:	021b      	lsls	r3, r3, #8
    379c:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
					frameNum |= u8Data;
    37a0:	7b3b      	ldrb	r3, [r7, #12]
    37a2:	b29a      	uxth	r2, r3
    37a4:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
    37a8:	4313      	orrs	r3, r2
    37aa:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
					sprintf( buffer, "frame number :  %d\r\n", frameNum );
    37ae:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
    37b2:	f107 0210 	add.w	r2, r7, #16
    37b6:	4610      	mov	r0, r2
    37b8:	4943      	ldr	r1, [pc, #268]	; (38c8 <XModem1K_Client+0x3c8>)
    37ba:	461a      	mov	r2, r3
    37bc:	f000 fabc 	bl	3d38 <sprintf>
				    TraceNL( buffer );
    37c0:	f107 0310 	add.w	r3, r7, #16
    37c4:	4618      	mov	r0, r3
    37c6:	f7fe ff61 	bl	268c <TraceNL>

					u32ByteCount++;
    37ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    37ce:	3301      	adds	r3, #1
    37d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    37d4:	e0c7      	b.n	3966 <XModem1K_Client+0x466>
				} else if( ((u32ByteCount == (SHORT_PACKET_PAYLOAD_LEN+3)) &&
    37d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    37da:	f240 4203 	movw	r2, #1027	; 0x403
    37de:	4293      	cmp	r3, r2
    37e0:	d10d      	bne.n	37fe <XModem1K_Client+0x2fe>
    37e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    37e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    37ea:	d108      	bne.n	37fe <XModem1K_Client+0x2fe>
						    (u32PktLen == SHORT_PACKET_PAYLOAD_LEN)) )
				{
					/* If pay load is short byte 131 is the MS byte of the packet CRC, if pay load
					 is long byte 1027 is the MS byte of the packet CRC. */
					u16CRC = u8Data;
    37ec:	7b3b      	ldrb	r3, [r7, #12]
    37ee:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
					u32ByteCount++;
    37f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    37f6:	3301      	adds	r3, #1
    37f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    37fc:	e08b      	b.n	3916 <XModem1K_Client+0x416>

				}
				else if( (u32ByteCount == (SHORT_PACKET_PAYLOAD_LEN+4)) &&
    37fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3802:	f240 4204 	movw	r2, #1028	; 0x404
    3806:	4293      	cmp	r3, r2
    3808:	d179      	bne.n	38fe <XModem1K_Client+0x3fe>
    380a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    380e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3812:	d174      	bne.n	38fe <XModem1K_Client+0x3fe>
						 (u32PktLen == SHORT_PACKET_PAYLOAD_LEN) )
				{
					/* If pay load is short byte 132 is the LS byte of the packet CRC, if pay load
					 is long byte 1028 is the LS byte of the packet CRC. */
					u16CRC <<= 8;
    3814:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
    3818:	021b      	lsls	r3, r3, #8
    381a:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
					u16CRC |= u8Data;
    381e:	7b3b      	ldrb	r3, [r7, #12]
    3820:	b29a      	uxth	r2, r3
    3822:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
    3826:	4313      	orrs	r3, r2
    3828:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea

					calculatedCRC = u16CRC_Calc16( &au8RxBuffer[0], u32PktLen );
    382c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    3830:	4826      	ldr	r0, [pc, #152]	; (38cc <XModem1K_Client+0x3cc>)
    3832:	4619      	mov	r1, r3
    3834:	f7fd fce2 	bl	11fc <u16CRC_Calc16>
    3838:	4603      	mov	r3, r0
    383a:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
					sprintf( buffer, "calculated CRC : 0x%X\r\n", calculatedCRC );
    383e:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
    3842:	f107 0210 	add.w	r2, r7, #16
    3846:	4610      	mov	r0, r2
    3848:	4921      	ldr	r1, [pc, #132]	; (38d0 <XModem1K_Client+0x3d0>)
    384a:	461a      	mov	r2, r3
    384c:	f000 fa74 	bl	3d38 <sprintf>
				    TraceNL( buffer );
    3850:	f107 0310 	add.w	r3, r7, #16
    3854:	4618      	mov	r0, r3
    3856:	f7fe ff19 	bl	268c <TraceNL>

					/* Check the received CRC against the CRC we generate on the packet data */
					if( calculatedCRC == u16CRC )
    385a:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
    385e:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
    3862:	429a      	cmp	r2, r3
    3864:	d13c      	bne.n	38e0 <XModem1K_Client+0x3e0>
					{
						uint8_t u8Cmd;

						u8Cmd = ACK;
    3866:	2306      	movs	r3, #6
    3868:	72fb      	strb	r3, [r7, #11]
						GSM_TCP_Send( &u8Cmd, 1 );
    386a:	f107 030b 	add.w	r3, r7, #11
    386e:	4618      	mov	r0, r3
    3870:	2101      	movs	r1, #1
    3872:	f7fd faa5 	bl	dc0 <GSM_TCP_Send>

						WDTFeed();
    3876:	f7ff fd8d 	bl	3394 <WDTFeed>
						// write to flash
						pu32Xmodem1kRxPacketCallback( &au8RxBuffer[0], u32PktLen );
    387a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    387e:	b29a      	uxth	r2, r3
    3880:	687b      	ldr	r3, [r7, #4]
    3882:	4812      	ldr	r0, [pc, #72]	; (38cc <XModem1K_Client+0x3cc>)
    3884:	4611      	mov	r1, r2
    3886:	4798      	blx	r3

						TraceNL("Received a frame ");
    3888:	4812      	ldr	r0, [pc, #72]	; (38d4 <XModem1K_Client+0x3d4>)
    388a:	f7fe feff 	bl	268c <TraceNL>
						TraceNL("Sending  ACK ");
    388e:	4812      	ldr	r0, [pc, #72]	; (38d8 <XModem1K_Client+0x3d8>)
    3890:	f7fe fefc 	bl	268c <TraceNL>
						TraceNL("CRC matches \r\n");
    3894:	4811      	ldr	r0, [pc, #68]	; (38dc <XModem1K_Client+0x3dc>)
    3896:	f7fe fef9 	bl	268c <TraceNL>
						DelayMs( 100 );
    389a:	2064      	movs	r0, #100	; 0x64
    389c:	f7fe fed0 	bl	2640 <DelayMs>
    38a0:	e029      	b.n	38f6 <XModem1K_Client+0x3f6>
    38a2:	bf00      	nop
    38a4:	000072d4 	.word	0x000072d4
    38a8:	000072e8 	.word	0x000072e8
    38ac:	000072c8 	.word	0x000072c8
    38b0:	00007320 	.word	0x00007320
    38b4:	0000733c 	.word	0x0000733c
    38b8:	0000734c 	.word	0x0000734c
    38bc:	00007364 	.word	0x00007364
    38c0:	00007384 	.word	0x00007384
    38c4:	000073a4 	.word	0x000073a4
    38c8:	000073c4 	.word	0x000073c4
    38cc:	10000448 	.word	0x10000448
    38d0:	000073dc 	.word	0x000073dc
    38d4:	000073f4 	.word	0x000073f4
    38d8:	00007408 	.word	0x00007408
    38dc:	00007418 	.word	0x00007418

					} else /* Error CRC calculated does not match that received */
					{
						/* Indicate problem to server - should result in packet being resent.. */
						uint8_t u8Cmd = NAK;
    38e0:	2315      	movs	r3, #21
    38e2:	72bb      	strb	r3, [r7, #10]
						TraceNL("CRC does not match  NAK ing");
    38e4:	4825      	ldr	r0, [pc, #148]	; (397c <XModem1K_Client+0x47c>)
    38e6:	f7fe fed1 	bl	268c <TraceNL>
						GSM_TCP_Send(&u8Cmd, 1);
    38ea:	f107 030a 	add.w	r3, r7, #10
    38ee:	4618      	mov	r0, r3
    38f0:	2101      	movs	r1, #1
    38f2:	f7fd fa65 	bl	dc0 <GSM_TCP_Send>
					}
					u32ByteCount = 0;
    38f6:	2300      	movs	r3, #0
    38f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
					u32ByteCount++;

				}
				else if( (u32ByteCount == (SHORT_PACKET_PAYLOAD_LEN+4)) &&
						 (u32PktLen == SHORT_PACKET_PAYLOAD_LEN) )
				{
    38fc:	e00b      	b.n	3916 <XModem1K_Client+0x416>
					}
					u32ByteCount = 0;

				} else {
					/* Must be pay load data so store */
					au8RxBuffer[u32ByteCount - PACKET_HEADER_LEN] = u8Data;
    38fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    3902:	3b03      	subs	r3, #3
    3904:	7b39      	ldrb	r1, [r7, #12]
    3906:	4a1e      	ldr	r2, [pc, #120]	; (3980 <XModem1K_Client+0x480>)
    3908:	54d1      	strb	r1, [r2, r3]
					u32ByteCount++;
    390a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    390e:	3301      	adds	r3, #1
    3910:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    3914:	e027      	b.n	3966 <XModem1K_Client+0x466>
    3916:	e026      	b.n	3966 <XModem1K_Client+0x466>
				}
			}
			else
			{
				if( (LPC_TIM0->TCR & 0x01) == 0 )
    3918:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    391c:	685b      	ldr	r3, [r3, #4]
    391e:	f003 0301 	and.w	r3, r3, #1
    3922:	2b00      	cmp	r3, #0
    3924:	d11f      	bne.n	3966 <XModem1K_Client+0x466>
				{
					/* Timeout expired no data received stop upgrade  */
					if (trials-- > 0)
    3926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    392a:	1e5a      	subs	r2, r3, #1
    392c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
    3930:	2b00      	cmp	r3, #0
    3932:	d012      	beq.n	395a <XModem1K_Client+0x45a>
					{
						TraceNL("Time out in RECEIVING   ");
    3934:	4813      	ldr	r0, [pc, #76]	; (3984 <XModem1K_Client+0x484>)
    3936:	f7fe fea9 	bl	268c <TraceNL>
						uint8_t u8Cmd = NAK;
    393a:	2315      	movs	r3, #21
    393c:	727b      	strb	r3, [r7, #9]
						GSM_TCP_Send(&u8Cmd, 1);
    393e:	f107 0309 	add.w	r3, r7, #9
    3942:	4618      	mov	r0, r3
    3944:	2101      	movs	r1, #1
    3946:	f7fd fa3b 	bl	dc0 <GSM_TCP_Send>

						u32ByteCount = 0;
    394a:	2300      	movs	r3, #0
    394c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
						vTimerStart( POLL_PERIOD_ms);
    3950:	f644 6020 	movw	r0, #20000	; 0x4e20
    3954:	f000 f81a 	bl	398c <vTimerStart>
    3958:	e005      	b.n	3966 <XModem1K_Client+0x466>
					} else {
						// no more trying giving up upgrading
						TraceNL("Download process failed giving up upgrading");
    395a:	480b      	ldr	r0, [pc, #44]	; (3988 <XModem1K_Client+0x488>)
    395c:	f7fe fe96 	bl	268c <TraceNL>
						return ( DOWNLOAD_ERR_TIMEOUT );
    3960:	f04f 33ff 	mov.w	r3, #4294967295
    3964:	e006      	b.n	3974 <XModem1K_Client+0x474>
					}
				}
			}
		}
			break;
    3966:	e000      	b.n	396a <XModem1K_Client+0x46a>

		default:
			break;
    3968:	bf00      	nop

	uint32_t trials;

	/* Prepare UART for RX/TX */

	while (u32InProgress) {
    396a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    396e:	2b00      	cmp	r3, #0
    3970:	f47f add4 	bne.w	351c <XModem1K_Client+0x1c>

		default:
			break;
		}
	}
}
    3974:	4618      	mov	r0, r3
    3976:	37f8      	adds	r7, #248	; 0xf8
    3978:	46bd      	mov	sp, r7
    397a:	bd80      	pop	{r7, pc}
    397c:	00007428 	.word	0x00007428
    3980:	10000448 	.word	0x10000448
    3984:	00007444 	.word	0x00007444
    3988:	00007460 	.word	0x00007460

0000398c <vTimerStart>:
 ** Parameters:	     None
 **
 ** Returned value:  None
 **
 *****************************************************************************/
static void vTimerStart(uint32_t u32Periodms) {
    398c:	b480      	push	{r7}
    398e:	b083      	sub	sp, #12
    3990:	af00      	add	r7, sp, #0
    3992:	6078      	str	r0, [r7, #4]
	/* Enable the timer clock */
	LPC_SC->PCONP |= (1UL << 1);
    3994:	4a19      	ldr	r2, [pc, #100]	; (39fc <vTimerStart+0x70>)
    3996:	4b19      	ldr	r3, [pc, #100]	; (39fc <vTimerStart+0x70>)
    3998:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    399c:	f043 0302 	orr.w	r3, r3, #2
    39a0:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

	/* Configure the timer so that we can poll for a match */
	LPC_TIM0->TCR = 0x02; /* reset timer */
    39a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    39a8:	2202      	movs	r2, #2
    39aa:	605a      	str	r2, [r3, #4]
	LPC_TIM0->PR = 0x00; /* set prescaler to zero */
    39ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    39b0:	2200      	movs	r2, #0
    39b2:	60da      	str	r2, [r3, #12]
	LPC_TIM0->MR0 = u32Periodms
    39b4:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
			* ((SystemCoreClock / 4 / (LPC_TIM0->PR + 1)) / 1000UL);
    39b8:	4b11      	ldr	r3, [pc, #68]	; (3a00 <vTimerStart+0x74>)
    39ba:	681b      	ldr	r3, [r3, #0]
    39bc:	4a11      	ldr	r2, [pc, #68]	; (3a04 <vTimerStart+0x78>)
    39be:	fba2 2303 	umull	r2, r3, r2, r3
    39c2:	0a1a      	lsrs	r2, r3, #8
    39c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    39c8:	68db      	ldr	r3, [r3, #12]
    39ca:	3301      	adds	r3, #1
    39cc:	fbb2 f3f3 	udiv	r3, r2, r3
    39d0:	687a      	ldr	r2, [r7, #4]
    39d2:	fb02 f303 	mul.w	r3, r2, r3
	LPC_SC->PCONP |= (1UL << 1);

	/* Configure the timer so that we can poll for a match */
	LPC_TIM0->TCR = 0x02; /* reset timer */
	LPC_TIM0->PR = 0x00; /* set prescaler to zero */
	LPC_TIM0->MR0 = u32Periodms
    39d6:	618b      	str	r3, [r1, #24]
			* ((SystemCoreClock / 4 / (LPC_TIM0->PR + 1)) / 1000UL);
	LPC_TIM0->IR = 0xFF; /* reset all interrupts */
    39d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    39dc:	22ff      	movs	r2, #255	; 0xff
    39de:	601a      	str	r2, [r3, #0]
	LPC_TIM0->MCR = 0x04; /* stop timer on match */
    39e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    39e4:	2204      	movs	r2, #4
    39e6:	615a      	str	r2, [r3, #20]
	LPC_TIM0->TCR = 0x01; /* start timer */
    39e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    39ec:	2201      	movs	r2, #1
    39ee:	605a      	str	r2, [r3, #4]
}
    39f0:	370c      	adds	r7, #12
    39f2:	46bd      	mov	sp, r7
    39f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    39f8:	4770      	bx	lr
    39fa:	bf00      	nop
    39fc:	400fc000 	.word	0x400fc000
    3a00:	10000024 	.word	0x10000024
    3a04:	10624dd3 	.word	0x10624dd3

00003a08 <SystemCoreClockUpdate>:

/*----------------------------------------------------------------------------
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
    3a08:	b538      	push	{r3, r4, r5, lr}

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    3a0a:	4b24      	ldr	r3, [pc, #144]	; (3a9c <SystemCoreClockUpdate+0x94>)
    3a0c:	4c24      	ldr	r4, [pc, #144]	; (3aa0 <SystemCoreClockUpdate+0x98>)
    3a0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3a12:	f3c2 6201 	ubfx	r2, r2, #24, #2
    3a16:	2a03      	cmp	r2, #3
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3a18:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    3a1c:	f002 0203 	and.w	r2, r2, #3
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    3a20:	d128      	bne.n	3a74 <SystemCoreClockUpdate+0x6c>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    3a22:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3a26:	2a01      	cmp	r2, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    3a28:	f3c1 010e 	ubfx	r1, r1, #0, #15
    3a2c:	f101 0101 	add.w	r1, r1, #1
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3a30:	d009      	beq.n	3a46 <SystemCoreClockUpdate+0x3e>
    3a32:	2a02      	cmp	r2, #2
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    3a34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    3a38:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    3a3c:	f3c2 4207 	ubfx	r2, r2, #16, #8
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{

  /// Determine clock frequency according to clock register values
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { // If PLL0 enabled and connected
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3a40:	d009      	beq.n	3a56 <SystemCoreClockUpdate+0x4e>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = (IRC_OSC * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3a42:	4818      	ldr	r0, [pc, #96]	; (3aa4 <SystemCoreClockUpdate+0x9c>)
    3a44:	e009      	b.n	3a5a <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    3a46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
    3a4a:	4817      	ldr	r0, [pc, #92]	; (3aa8 <SystemCoreClockUpdate+0xa0>)
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
    3a4c:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                ///Main oscillator => PLL0
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
    3a50:	f3c2 4207 	ubfx	r2, r2, #16, #8
    3a54:	e001      	b.n	3a5a <SystemCoreClockUpdate+0x52>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3a56:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
    3a5a:	3201      	adds	r2, #1
    3a5c:	2300      	movs	r3, #0
    3a5e:	fba1 0100 	umull	r0, r1, r1, r0
    3a62:	f002 f935 	bl	5cd0 <__aeabi_uldivmod>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    3a66:	b2ea      	uxtb	r2, r5
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    3a68:	3201      	adds	r2, #1
    3a6a:	2300      	movs	r3, #0
    3a6c:	f002 f930 	bl	5cd0 <__aeabi_uldivmod>
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  / // MSEL0 : PLL0 Multiplier, one less than actual.
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       / // NSEL0 : Actual Value Of PLL divider, one less than actual.
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));                 // Set to 8 in main.c
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = (RTC_CLK * 
    3a70:	6020      	str	r0, [r4, #0]
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    3a72:	bd38      	pop	{r3, r4, r5, pc}
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3a74:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3a78:	2a01      	cmp	r2, #1
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3a7a:	b2db      	uxtb	r3, r3
    3a7c:	f103 0301 	add.w	r3, r3, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3a80:	d003      	beq.n	3a8a <SystemCoreClockUpdate+0x82>
    3a82:	2a02      	cmp	r2, #2
    3a84:	d003      	beq.n	3a8e <SystemCoreClockUpdate+0x86>
      case 0:                                // Int. RC oscillator => PLL0
      case 3:                                // Reserved, default to Int. RC
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3a86:	4a09      	ldr	r2, [pc, #36]	; (3aac <SystemCoreClockUpdate+0xa4>)
    3a88:	e003      	b.n	3a92 <SystemCoreClockUpdate+0x8a>
        break;
      case 1:                                // Main oscillator => PLL0
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3a8a:	4a09      	ldr	r2, [pc, #36]	; (3ab0 <SystemCoreClockUpdate+0xa8>)
    3a8c:	e001      	b.n	3a92 <SystemCoreClockUpdate+0x8a>
        break;
      case 2:                                // RTC oscillator => PLL0
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3a8e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
    3a92:	fbb2 f3f3 	udiv	r3, r2, r3
    3a96:	6023      	str	r3, [r4, #0]
    3a98:	bd38      	pop	{r3, r4, r5, pc}
    3a9a:	bf00      	nop
    3a9c:	400fc000 	.word	0x400fc000
    3aa0:	10000024 	.word	0x10000024
    3aa4:	007a1200 	.word	0x007a1200
    3aa8:	016e3600 	.word	0x016e3600
    3aac:	003d0900 	.word	0x003d0900
    3ab0:	00b71b00 	.word	0x00b71b00

00003ab4 <SystemInit>:
 *         Initialize the System.
 */
void SystemInit (void)
{
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
    3ab4:	4b34      	ldr	r3, [pc, #208]	; (3b88 <SystemInit+0xd4>)
    3ab6:	2220      	movs	r2, #32
    3ab8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    3abc:	461a      	mov	r2, r3
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    3abe:	f8d2 11a0 	ldr.w	r1, [r2, #416]	; 0x1a0
    3ac2:	4b31      	ldr	r3, [pc, #196]	; (3b88 <SystemInit+0xd4>)
    3ac4:	0648      	lsls	r0, r1, #25
    3ac6:	d5fa      	bpl.n	3abe <SystemInit+0xa>
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    3ac8:	2203      	movs	r2, #3
    3aca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    3ace:	2200      	movs	r2, #0
    3ad0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    3ad4:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    3ad8:	4a2c      	ldr	r2, [pc, #176]	; (3b8c <SystemInit+0xd8>)
  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    3ada:	2001      	movs	r0, #1
    3adc:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    3ae0:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    3ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
  LPC_SC->PLL0FEED  = 0x55;
    3ae6:	2255      	movs	r2, #85	; 0x55

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
    3ae8:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3aec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    3af0:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    3af4:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3af8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    3afc:	4b22      	ldr	r3, [pc, #136]	; (3b88 <SystemInit+0xd4>)
    3afe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3b02:	0151      	lsls	r1, r2, #5
    3b04:	d5fa      	bpl.n	3afc <SystemInit+0x48>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    3b06:	2203      	movs	r2, #3
    3b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    3b0c:	22aa      	movs	r2, #170	; 0xaa
    3b0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3b12:	2255      	movs	r2, #85	; 0x55
    3b14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    3b18:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
    3b1c:	4a1a      	ldr	r2, [pc, #104]	; (3b88 <SystemInit+0xd4>)
    3b1e:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
    3b22:	d0f9      	beq.n	3b18 <SystemInit+0x64>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
    3b24:	2323      	movs	r3, #35	; 0x23
    3b26:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0xAA;
    3b2a:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PLL1FEED  = 0x55;
    3b2c:	2355      	movs	r3, #85	; 0x55

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    3b2e:	2001      	movs	r0, #1
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
  LPC_SC->PLL1FEED  = 0xAA;
    3b30:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3b34:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    3b38:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    3b3c:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3b40:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    3b44:	4b10      	ldr	r3, [pc, #64]	; (3b88 <SystemInit+0xd4>)
    3b46:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    3b4a:	0552      	lsls	r2, r2, #21
    3b4c:	d5fa      	bpl.n	3b44 <SystemInit+0x90>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    3b4e:	2203      	movs	r2, #3
    3b50:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    3b54:	22aa      	movs	r2, #170	; 0xaa
    3b56:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3b5a:	2255      	movs	r2, #85	; 0x55
    3b5c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    3b60:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    3b64:	4a08      	ldr	r2, [pc, #32]	; (3b88 <SystemInit+0xd4>)
    3b66:	f411 7f40 	tst.w	r1, #768	; 0x300
    3b6a:	d0f9      	beq.n	3b60 <SystemInit+0xac>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    3b6c:	4b08      	ldr	r3, [pc, #32]	; (3b90 <SystemInit+0xdc>)
    3b6e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    3b72:	2300      	movs	r3, #0
    3b74:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = (LPC_SC->FLASHCFG & ~0x0000F000) | FLASHCFG_Val;
    3b78:	6813      	ldr	r3, [r2, #0]
    3b7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
    3b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    3b82:	6013      	str	r3, [r2, #0]
    3b84:	4770      	bx	lr
    3b86:	bf00      	nop
    3b88:	400fc000 	.word	0x400fc000
    3b8c:	00050063 	.word	0x00050063
    3b90:	042887de 	.word	0x042887de

00003b94 <__main>:
    3b94:	b508      	push	{r3, lr}
    3b96:	2000      	movs	r0, #0
    3b98:	4601      	mov	r1, r0
    3b9a:	4602      	mov	r2, r0
    3b9c:	f000 fd84 	bl	46a8 <_initio>
    3ba0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3ba4:	f7fe ba1c 	b.w	1fe0 <main>

00003ba8 <memset>:
    3ba8:	f002 bcfa 	b.w	65a0 <__aeabi_lowlevel_memset>

00003bac <malloc>:
    3bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bae:	4b31      	ldr	r3, [pc, #196]	; (3c74 <malloc+0xc8>)
    3bb0:	1cc5      	adds	r5, r0, #3
    3bb2:	681c      	ldr	r4, [r3, #0]
    3bb4:	08ad      	lsrs	r5, r5, #2
    3bb6:	b198      	cbz	r0, 3be0 <malloc+0x34>
    3bb8:	461f      	mov	r7, r3
    3bba:	2600      	movs	r6, #0
    3bbc:	f105 0e0a 	add.w	lr, r5, #10
    3bc0:	f105 0c03 	add.w	ip, r5, #3
    3bc4:	e005      	b.n	3bd2 <malloc+0x26>
    3bc6:	6823      	ldr	r3, [r4, #0]
    3bc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    3bcc:	d014      	beq.n	3bf8 <malloc+0x4c>
    3bce:	4626      	mov	r6, r4
    3bd0:	68a4      	ldr	r4, [r4, #8]
    3bd2:	2c00      	cmp	r4, #0
    3bd4:	d1f7      	bne.n	3bc6 <malloc+0x1a>
    3bd6:	300c      	adds	r0, #12
    3bd8:	f001 fd76 	bl	56c8 <_sbrk>
    3bdc:	1c43      	adds	r3, r0, #1
    3bde:	d110      	bne.n	3c02 <malloc+0x56>
    3be0:	2000      	movs	r0, #0
    3be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3be4:	6811      	ldr	r1, [r2, #0]
    3be6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    3bea:	d115      	bne.n	3c18 <malloc+0x6c>
    3bec:	6851      	ldr	r1, [r2, #4]
    3bee:	440b      	add	r3, r1
    3bf0:	3303      	adds	r3, #3
    3bf2:	6063      	str	r3, [r4, #4]
    3bf4:	6893      	ldr	r3, [r2, #8]
    3bf6:	60a3      	str	r3, [r4, #8]
    3bf8:	68a2      	ldr	r2, [r4, #8]
    3bfa:	6863      	ldr	r3, [r4, #4]
    3bfc:	2a00      	cmp	r2, #0
    3bfe:	d1f1      	bne.n	3be4 <malloc+0x38>
    3c00:	e00a      	b.n	3c18 <malloc+0x6c>
    3c02:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    3c06:	e880 0028 	stmia.w	r0, {r3, r5}
    3c0a:	6084      	str	r4, [r0, #8]
    3c0c:	b90e      	cbnz	r6, 3c12 <malloc+0x66>
    3c0e:	6038      	str	r0, [r7, #0]
    3c10:	e000      	b.n	3c14 <malloc+0x68>
    3c12:	60b0      	str	r0, [r6, #8]
    3c14:	300c      	adds	r0, #12
    3c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c18:	42ab      	cmp	r3, r5
    3c1a:	db07      	blt.n	3c2c <malloc+0x80>
    3c1c:	459c      	cmp	ip, r3
    3c1e:	db05      	blt.n	3c2c <malloc+0x80>
    3c20:	4620      	mov	r0, r4
    3c22:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    3c26:	f840 3b0c 	str.w	r3, [r0], #12
    3c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c2c:	4573      	cmp	r3, lr
    3c2e:	d911      	bls.n	3c54 <malloc+0xa8>
    3c30:	4620      	mov	r0, r4
    3c32:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    3c36:	6065      	str	r5, [r4, #4]
    3c38:	f840 1b0c 	str.w	r1, [r0], #12
    3c3c:	eb00 0185 	add.w	r1, r0, r5, lsl #2
    3c40:	60a1      	str	r1, [r4, #8]
    3c42:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    3c46:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    3c4a:	1b5d      	subs	r5, r3, r5
    3c4c:	3d03      	subs	r5, #3
    3c4e:	604d      	str	r5, [r1, #4]
    3c50:	608a      	str	r2, [r1, #8]
    3c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c54:	2a00      	cmp	r2, #0
    3c56:	d1ba      	bne.n	3bce <malloc+0x22>
    3c58:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    3c5c:	f001 fd34 	bl	56c8 <_sbrk>
    3c60:	3001      	adds	r0, #1
    3c62:	d0bd      	beq.n	3be0 <malloc+0x34>
    3c64:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    3c68:	e884 0028 	stmia.w	r4, {r3, r5}
    3c6c:	f104 000c 	add.w	r0, r4, #12
    3c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c72:	bf00      	nop
    3c74:	10001e34 	.word	0x10001e34

00003c78 <free>:
    3c78:	b1a8      	cbz	r0, 3ca6 <free+0x2e>
    3c7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3c7e:	f840 3c0c 	str.w	r3, [r0, #-12]
    3c82:	f850 2c04 	ldr.w	r2, [r0, #-4]
    3c86:	b172      	cbz	r2, 3ca6 <free+0x2e>
    3c88:	6813      	ldr	r3, [r2, #0]
    3c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    3c8e:	d10a      	bne.n	3ca6 <free+0x2e>
    3c90:	6853      	ldr	r3, [r2, #4]
    3c92:	f850 1c08 	ldr.w	r1, [r0, #-8]
    3c96:	440b      	add	r3, r1
    3c98:	3303      	adds	r3, #3
    3c9a:	f840 3c08 	str.w	r3, [r0, #-8]
    3c9e:	6893      	ldr	r3, [r2, #8]
    3ca0:	f840 3c04 	str.w	r3, [r0, #-4]
    3ca4:	e7ed      	b.n	3c82 <free+0xa>
    3ca6:	4770      	bx	lr

00003ca8 <_Csys_alloc>:
    3ca8:	b510      	push	{r4, lr}
    3caa:	f7ff ff7f 	bl	3bac <malloc>
    3cae:	4604      	mov	r4, r0
    3cb0:	b928      	cbnz	r0, 3cbe <_Csys_alloc+0x16>
    3cb2:	4904      	ldr	r1, [pc, #16]	; (3cc4 <_Csys_alloc+0x1c>)
    3cb4:	2217      	movs	r2, #23
    3cb6:	f002 fc9f 	bl	65f8 <__sys_write>
    3cba:	f002 fc8a 	bl	65d2 <__sys_appexit>
    3cbe:	4620      	mov	r0, r4
    3cc0:	bd10      	pop	{r4, pc}
    3cc2:	bf00      	nop
    3cc4:	0000748c 	.word	0x0000748c

00003cc8 <fp_round>:
    3cc8:	5c42      	ldrb	r2, [r0, r1]
    3cca:	1843      	adds	r3, r0, r1
    3ccc:	2a34      	cmp	r2, #52	; 0x34
    3cce:	dc01      	bgt.n	3cd4 <fp_round+0xc>
    3cd0:	2000      	movs	r0, #0
    3cd2:	4770      	bx	lr
    3cd4:	2a35      	cmp	r2, #53	; 0x35
    3cd6:	d106      	bne.n	3ce6 <fp_round+0x1e>
    3cd8:	4619      	mov	r1, r3
    3cda:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    3cde:	2a30      	cmp	r2, #48	; 0x30
    3ce0:	d0fb      	beq.n	3cda <fp_round+0x12>
    3ce2:	2a00      	cmp	r2, #0
    3ce4:	d0f4      	beq.n	3cd0 <fp_round+0x8>
    3ce6:	461a      	mov	r2, r3
    3ce8:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    3cec:	2939      	cmp	r1, #57	; 0x39
    3cee:	d102      	bne.n	3cf6 <fp_round+0x2e>
    3cf0:	2130      	movs	r1, #48	; 0x30
    3cf2:	7011      	strb	r1, [r2, #0]
    3cf4:	e7f8      	b.n	3ce8 <fp_round+0x20>
    3cf6:	3101      	adds	r1, #1
    3cf8:	7011      	strb	r1, [r2, #0]
    3cfa:	7802      	ldrb	r2, [r0, #0]
    3cfc:	2a30      	cmp	r2, #48	; 0x30
    3cfe:	d0e7      	beq.n	3cd0 <fp_round+0x8>
    3d00:	1a1a      	subs	r2, r3, r0
    3d02:	2a00      	cmp	r2, #0
    3d04:	db03      	blt.n	3d0e <fp_round+0x46>
    3d06:	f813 2901 	ldrb.w	r2, [r3], #-1
    3d0a:	709a      	strb	r2, [r3, #2]
    3d0c:	e7f8      	b.n	3d00 <fp_round+0x38>
    3d0e:	2001      	movs	r0, #1
    3d10:	4770      	bx	lr

00003d12 <pr_dec.constprop.1>:
    3d12:	b510      	push	{r4, lr}
    3d14:	1f8c      	subs	r4, r1, #6
    3d16:	42a1      	cmp	r1, r4
    3d18:	d00d      	beq.n	3d36 <pr_dec.constprop.1+0x24>
    3d1a:	230a      	movs	r3, #10
    3d1c:	fb90 f3f3 	sdiv	r3, r0, r3
    3d20:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    3d24:	3030      	adds	r0, #48	; 0x30
    3d26:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
    3d2a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    3d2e:	f801 0901 	strb.w	r0, [r1], #-1
    3d32:	4618      	mov	r0, r3
    3d34:	e7ef      	b.n	3d16 <pr_dec.constprop.1+0x4>
    3d36:	bd10      	pop	{r4, pc}

00003d38 <sprintf>:
    3d38:	b40e      	push	{r1, r2, r3}
    3d3a:	b530      	push	{r4, r5, lr}
    3d3c:	4605      	mov	r5, r0
    3d3e:	b090      	sub	sp, #64	; 0x40
    3d40:	ab13      	add	r3, sp, #76	; 0x4c
    3d42:	f853 4b04 	ldr.w	r4, [r3], #4
    3d46:	2100      	movs	r1, #0
    3d48:	2228      	movs	r2, #40	; 0x28
    3d4a:	a806      	add	r0, sp, #24
    3d4c:	9305      	str	r3, [sp, #20]
    3d4e:	f7ff ff2b 	bl	3ba8 <memset>
    3d52:	230a      	movs	r3, #10
    3d54:	9309      	str	r3, [sp, #36]	; 0x24
    3d56:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    3d5a:	9308      	str	r3, [sp, #32]
    3d5c:	9b05      	ldr	r3, [sp, #20]
    3d5e:	9400      	str	r4, [sp, #0]
    3d60:	9301      	str	r3, [sp, #4]
    3d62:	4b0f      	ldr	r3, [pc, #60]	; (3da0 <sprintf+0x68>)
    3d64:	a806      	add	r0, sp, #24
    3d66:	9302      	str	r3, [sp, #8]
    3d68:	f04f 32ff 	mov.w	r2, #4294967295
    3d6c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    3d70:	9506      	str	r5, [sp, #24]
    3d72:	f000 fceb 	bl	474c <__vfprintf>
    3d76:	9b08      	ldr	r3, [sp, #32]
    3d78:	4604      	mov	r4, r0
    3d7a:	3b01      	subs	r3, #1
    3d7c:	2b00      	cmp	r3, #0
    3d7e:	9308      	str	r3, [sp, #32]
    3d80:	db03      	blt.n	3d8a <sprintf+0x52>
    3d82:	9b06      	ldr	r3, [sp, #24]
    3d84:	2200      	movs	r2, #0
    3d86:	701a      	strb	r2, [r3, #0]
    3d88:	e003      	b.n	3d92 <sprintf+0x5a>
    3d8a:	2000      	movs	r0, #0
    3d8c:	a906      	add	r1, sp, #24
    3d8e:	f001 fcdd 	bl	574c <__flsbuf>
    3d92:	4620      	mov	r0, r4
    3d94:	b010      	add	sp, #64	; 0x40
    3d96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3d9a:	b003      	add	sp, #12
    3d9c:	4770      	bx	lr
    3d9e:	bf00      	nop
    3da0:	00003da9 	.word	0x00003da9
    3da4:	00000000 	.word	0x00000000

00003da8 <fp_display>:
    3da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3dac:	4614      	mov	r4, r2
    3dae:	f647 72f0 	movw	r2, #32752	; 0x7ff0
    3db2:	684e      	ldr	r6, [r1, #4]
    3db4:	b09f      	sub	sp, #124	; 0x7c
    3db6:	9306      	str	r3, [sp, #24]
    3db8:	f3c6 430f 	ubfx	r3, r6, #16, #16
    3dbc:	f023 030f 	bic.w	r3, r3, #15
    3dc0:	045b      	lsls	r3, r3, #17
    3dc2:	680f      	ldr	r7, [r1, #0]
    3dc4:	0c5b      	lsrs	r3, r3, #17
    3dc6:	4293      	cmp	r3, r2
    3dc8:	9005      	str	r0, [sp, #20]
    3dca:	f8dd b0a4 	ldr.w	fp, [sp, #164]	; 0xa4
    3dce:	9708      	str	r7, [sp, #32]
    3dd0:	9607      	str	r6, [sp, #28]
    3dd2:	d127      	bne.n	3e24 <fp_display+0x7c>
    3dd4:	2300      	movs	r3, #0
    3dd6:	70e3      	strb	r3, [r4, #3]
    3dd8:	f3c6 0313 	ubfx	r3, r6, #0, #20
    3ddc:	433b      	orrs	r3, r7
    3dde:	f04f 036e 	mov.w	r3, #110	; 0x6e
    3de2:	d115      	bne.n	3e10 <fp_display+0x68>
    3de4:	2269      	movs	r2, #105	; 0x69
    3de6:	7063      	strb	r3, [r4, #1]
    3de8:	2e00      	cmp	r6, #0
    3dea:	f04f 0366 	mov.w	r3, #102	; 0x66
    3dee:	7022      	strb	r2, [r4, #0]
    3df0:	70a3      	strb	r3, [r4, #2]
    3df2:	da01      	bge.n	3df8 <fp_display+0x50>
    3df4:	4b84      	ldr	r3, [pc, #528]	; (4008 <fp_display+0x260>)
    3df6:	e010      	b.n	3e1a <fp_display+0x72>
    3df8:	9b06      	ldr	r3, [sp, #24]
    3dfa:	079a      	lsls	r2, r3, #30
    3dfc:	d406      	bmi.n	3e0c <fp_display+0x64>
    3dfe:	4a83      	ldr	r2, [pc, #524]	; (400c <fp_display+0x264>)
    3e00:	f013 0f04 	tst.w	r3, #4
    3e04:	4b82      	ldr	r3, [pc, #520]	; (4010 <fp_display+0x268>)
    3e06:	bf08      	it	eq
    3e08:	4613      	moveq	r3, r2
    3e0a:	e006      	b.n	3e1a <fp_display+0x72>
    3e0c:	4b81      	ldr	r3, [pc, #516]	; (4014 <fp_display+0x26c>)
    3e0e:	e004      	b.n	3e1a <fp_display+0x72>
    3e10:	7023      	strb	r3, [r4, #0]
    3e12:	2261      	movs	r2, #97	; 0x61
    3e14:	70a3      	strb	r3, [r4, #2]
    3e16:	4b7d      	ldr	r3, [pc, #500]	; (400c <fp_display+0x264>)
    3e18:	7062      	strb	r2, [r4, #1]
    3e1a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    3e1c:	2003      	movs	r0, #3
    3e1e:	6013      	str	r3, [r2, #0]
    3e20:	f000 bc3f 	b.w	46a2 <fp_display+0x8fa>
    3e24:	9b05      	ldr	r3, [sp, #20]
    3e26:	f023 0320 	bic.w	r3, r3, #32
    3e2a:	2b41      	cmp	r3, #65	; 0x41
    3e2c:	f000 8244 	beq.w	42b8 <fp_display+0x510>
    3e30:	4638      	mov	r0, r7
    3e32:	4631      	mov	r1, r6
    3e34:	2200      	movs	r2, #0
    3e36:	2300      	movs	r3, #0
    3e38:	f002 fb28 	bl	648c <__aeabi_dcmplt>
    3e3c:	b138      	cbz	r0, 3e4e <fp_display+0xa6>
    3e3e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    3e42:	9a08      	ldr	r2, [sp, #32]
    3e44:	461e      	mov	r6, r3
    3e46:	2301      	movs	r3, #1
    3e48:	4617      	mov	r7, r2
    3e4a:	9309      	str	r3, [sp, #36]	; 0x24
    3e4c:	e000      	b.n	3e50 <fp_display+0xa8>
    3e4e:	9009      	str	r0, [sp, #36]	; 0x24
    3e50:	4638      	mov	r0, r7
    3e52:	4631      	mov	r1, r6
    3e54:	2200      	movs	r2, #0
    3e56:	2300      	movs	r3, #0
    3e58:	f002 fb02 	bl	6460 <__aeabi_dcmpeq>
    3e5c:	2800      	cmp	r0, #0
    3e5e:	f040 820d 	bne.w	427c <fp_display+0x4d4>
    3e62:	f240 152d 	movw	r5, #301	; 0x12d
    3e66:	aa11      	add	r2, sp, #68	; 0x44
    3e68:	4638      	mov	r0, r7
    3e6a:	4631      	mov	r1, r6
    3e6c:	f001 fd70 	bl	5950 <_frexpl>
    3e70:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3e72:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    3e76:	4355      	muls	r5, r2
    3e78:	f5a5 53ab 	sub.w	r3, r5, #5472	; 0x1560
    3e7c:	3b1c      	subs	r3, #28
    3e7e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    3e82:	fb93 f5f5 	sdiv	r5, r3, r5
    3e86:	2000      	movs	r0, #0
    3e88:	4963      	ldr	r1, [pc, #396]	; (4018 <fp_display+0x270>)
    3e8a:	1aaa      	subs	r2, r5, r2
    3e8c:	f001 fd8e 	bl	59ac <_ldexpl>
    3e90:	2d00      	cmp	r5, #0
    3e92:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3e96:	da06      	bge.n	3ea6 <fp_display+0xfe>
    3e98:	a355      	add	r3, pc, #340	; (adr r3, 3ff0 <fp_display+0x248>)
    3e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e9e:	426e      	negs	r6, r5
    3ea0:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    3ea4:	e006      	b.n	3eb4 <fp_display+0x10c>
    3ea6:	4b5d      	ldr	r3, [pc, #372]	; (401c <fp_display+0x274>)
    3ea8:	f04f 0200 	mov.w	r2, #0
    3eac:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    3eb0:	d016      	beq.n	3ee0 <fp_display+0x138>
    3eb2:	462e      	mov	r6, r5
    3eb4:	07f3      	lsls	r3, r6, #31
    3eb6:	d509      	bpl.n	3ecc <fp_display+0x124>
    3eb8:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3ebc:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3ec0:	f001 ffc2 	bl	5e48 <__aeabi_dmul>
    3ec4:	2e01      	cmp	r6, #1
    3ec6:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3eca:	d009      	beq.n	3ee0 <fp_display+0x138>
    3ecc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    3ed0:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3ed4:	f001 ffb8 	bl	5e48 <__aeabi_dmul>
    3ed8:	1076      	asrs	r6, r6, #1
    3eda:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    3ede:	e7e9      	b.n	3eb4 <fp_display+0x10c>
    3ee0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3ee4:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    3ee8:	f002 f83e 	bl	5f68 <__aeabi_ddiv>
    3eec:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3ef0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3ef4:	a340      	add	r3, pc, #256	; (adr r3, 3ff8 <fp_display+0x250>)
    3ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
    3efa:	f002 fac7 	bl	648c <__aeabi_dcmplt>
    3efe:	b188      	cbz	r0, 3f24 <fp_display+0x17c>
    3f00:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3f04:	2200      	movs	r2, #0
    3f06:	4b46      	ldr	r3, [pc, #280]	; (4020 <fp_display+0x278>)
    3f08:	f001 ff9e 	bl	5e48 <__aeabi_dmul>
    3f0c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3f10:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3f14:	2200      	movs	r2, #0
    3f16:	4b42      	ldr	r3, [pc, #264]	; (4020 <fp_display+0x278>)
    3f18:	f002 f826 	bl	5f68 <__aeabi_ddiv>
    3f1c:	3d01      	subs	r5, #1
    3f1e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3f22:	e7e5      	b.n	3ef0 <fp_display+0x148>
    3f24:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3f28:	a335      	add	r3, pc, #212	; (adr r3, 4000 <fp_display+0x258>)
    3f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f2e:	f002 fb09 	bl	6544 <__aeabi_dcmpge>
    3f32:	b188      	cbz	r0, 3f58 <fp_display+0x1b0>
    3f34:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3f38:	2200      	movs	r2, #0
    3f3a:	4b39      	ldr	r3, [pc, #228]	; (4020 <fp_display+0x278>)
    3f3c:	f002 f814 	bl	5f68 <__aeabi_ddiv>
    3f40:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3f44:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3f48:	2200      	movs	r2, #0
    3f4a:	4b35      	ldr	r3, [pc, #212]	; (4020 <fp_display+0x278>)
    3f4c:	f001 ff7c 	bl	5e48 <__aeabi_dmul>
    3f50:	3501      	adds	r5, #1
    3f52:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3f56:	e7e5      	b.n	3f24 <fp_display+0x17c>
    3f58:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3f5c:	f002 fa32 	bl	63c4 <__aeabi_d2iz>
    3f60:	426b      	negs	r3, r5
    3f62:	ea13 0325 	ands.w	r3, r3, r5, asr #32
    3f66:	bf38      	it	cc
    3f68:	462b      	movcc	r3, r5
    3f6a:	4682      	mov	sl, r0
    3f6c:	930e      	str	r3, [sp, #56]	; 0x38
    3f6e:	4650      	mov	r0, sl
    3f70:	f002 fa6c 	bl	644c <__aeabi_i2d>
    3f74:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3f76:	1aaa      	subs	r2, r5, r2
    3f78:	f001 fd18 	bl	59ac <_ldexpl>
    3f7c:	2200      	movs	r2, #0
    3f7e:	2300      	movs	r3, #0
    3f80:	2d00      	cmp	r5, #0
    3f82:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    3f86:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    3f8a:	da4b      	bge.n	4024 <fp_display+0x27c>
    3f8c:	a118      	add	r1, pc, #96	; (adr r1, 3ff0 <fp_display+0x248>)
    3f8e:	e9d1 0100 	ldrd	r0, r1, [r1]
    3f92:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    3f96:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    3f9a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    3f9e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3fa2:	f04f 0800 	mov.w	r8, #0
    3fa6:	4642      	mov	r2, r8
    3fa8:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    3fac:	464b      	mov	r3, r9
    3fae:	f002 f883 	bl	60b8 <__aeabi_dsub>
    3fb2:	4602      	mov	r2, r0
    3fb4:	460b      	mov	r3, r1
    3fb6:	4630      	mov	r0, r6
    3fb8:	4639      	mov	r1, r7
    3fba:	f002 f969 	bl	6290 <__aeabi_dadd>
    3fbe:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    3fc2:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    3fc6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    3fca:	2200      	movs	r2, #0
    3fcc:	4b13      	ldr	r3, [pc, #76]	; (401c <fp_display+0x274>)
    3fce:	f001 ff3b 	bl	5e48 <__aeabi_dmul>
    3fd2:	4602      	mov	r2, r0
    3fd4:	460b      	mov	r3, r1
    3fd6:	2000      	movs	r0, #0
    3fd8:	490f      	ldr	r1, [pc, #60]	; (4018 <fp_display+0x270>)
    3fda:	f002 f86d 	bl	60b8 <__aeabi_dsub>
    3fde:	2200      	movs	r2, #0
    3fe0:	4b0e      	ldr	r3, [pc, #56]	; (401c <fp_display+0x274>)
    3fe2:	f001 ffc1 	bl	5f68 <__aeabi_ddiv>
    3fe6:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    3fea:	e024      	b.n	4036 <fp_display+0x28e>
    3fec:	f3af 8000 	nop.w
    3ff0:	9999999a 	.word	0x9999999a
    3ff4:	3fc99999 	.word	0x3fc99999
    3ff8:	00000000 	.word	0x00000000
    3ffc:	40f86a00 	.word	0x40f86a00
    4000:	00000000 	.word	0x00000000
    4004:	412e8480 	.word	0x412e8480
    4008:	00007656 	.word	0x00007656
    400c:	000074a3 	.word	0x000074a3
    4010:	00007626 	.word	0x00007626
    4014:	00007624 	.word	0x00007624
    4018:	3ff00000 	.word	0x3ff00000
    401c:	40140000 	.word	0x40140000
    4020:	40240000 	.word	0x40240000
    4024:	49ae      	ldr	r1, [pc, #696]	; (42e0 <fp_display+0x538>)
    4026:	f04f 0000 	mov.w	r0, #0
    402a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    402e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    4032:	f000 8089 	beq.w	4148 <fp_display+0x3a0>
    4036:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    403a:	f01c 0f01 	tst.w	ip, #1
    403e:	d048      	beq.n	40d2 <fp_display+0x32a>
    4040:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    4044:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    4048:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    404c:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    4050:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    4054:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    4058:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    405c:	f001 fef4 	bl	5e48 <__aeabi_dmul>
    4060:	4632      	mov	r2, r6
    4062:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    4066:	463b      	mov	r3, r7
    4068:	4640      	mov	r0, r8
    406a:	4649      	mov	r1, r9
    406c:	f002 f910 	bl	6290 <__aeabi_dadd>
    4070:	4602      	mov	r2, r0
    4072:	460b      	mov	r3, r1
    4074:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4078:	f001 fee6 	bl	5e48 <__aeabi_dmul>
    407c:	4602      	mov	r2, r0
    407e:	460b      	mov	r3, r1
    4080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    4084:	f002 f904 	bl	6290 <__aeabi_dadd>
    4088:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    408c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    4090:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    4094:	f001 fed8 	bl	5e48 <__aeabi_dmul>
    4098:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    409c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    40a0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    40a4:	f04f 0800 	mov.w	r8, #0
    40a8:	4642      	mov	r2, r8
    40aa:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    40ae:	464b      	mov	r3, r9
    40b0:	f002 f802 	bl	60b8 <__aeabi_dsub>
    40b4:	4602      	mov	r2, r0
    40b6:	460b      	mov	r3, r1
    40b8:	4630      	mov	r0, r6
    40ba:	4639      	mov	r1, r7
    40bc:	f002 f8e8 	bl	6290 <__aeabi_dadd>
    40c0:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    40c4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    40c8:	f1bc 0f01 	cmp.w	ip, #1
    40cc:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
    40d0:	d03a      	beq.n	4148 <fp_display+0x3a0>
    40d2:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    40d6:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    40da:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    40de:	4602      	mov	r2, r0
    40e0:	460b      	mov	r3, r1
    40e2:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    40e6:	f002 f8d3 	bl	6290 <__aeabi_dadd>
    40ea:	4632      	mov	r2, r6
    40ec:	463b      	mov	r3, r7
    40ee:	f002 f8cf 	bl	6290 <__aeabi_dadd>
    40f2:	4602      	mov	r2, r0
    40f4:	460b      	mov	r3, r1
    40f6:	4640      	mov	r0, r8
    40f8:	4649      	mov	r1, r9
    40fa:	f001 fea5 	bl	5e48 <__aeabi_dmul>
    40fe:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    4102:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    4106:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    410a:	f001 fe9d 	bl	5e48 <__aeabi_dmul>
    410e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    4112:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    4116:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    411a:	f04f 0800 	mov.w	r8, #0
    411e:	4642      	mov	r2, r8
    4120:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    4124:	464b      	mov	r3, r9
    4126:	f001 ffc7 	bl	60b8 <__aeabi_dsub>
    412a:	4602      	mov	r2, r0
    412c:	460b      	mov	r3, r1
    412e:	4630      	mov	r0, r6
    4130:	4639      	mov	r1, r7
    4132:	f002 f8ad 	bl	6290 <__aeabi_dadd>
    4136:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    413a:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    413e:	ea4f 0c6c 	mov.w	ip, ip, asr #1
    4142:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
    4146:	e778      	b.n	403a <fp_display+0x292>
    4148:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    414c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    4150:	f002 f9ca 	bl	64e8 <__aeabi_dcmple>
    4154:	b910      	cbnz	r0, 415c <fp_display+0x3b4>
    4156:	f10a 3aff 	add.w	sl, sl, #4294967295
    415a:	e708      	b.n	3f6e <fp_display+0x1c6>
    415c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    4160:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    4164:	f001 ffa8 	bl	60b8 <__aeabi_dsub>
    4168:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    416c:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    4170:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    4174:	f001 ffa0 	bl	60b8 <__aeabi_dsub>
    4178:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    417c:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    4180:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    4184:	f001 fef0 	bl	5f68 <__aeabi_ddiv>
    4188:	a353      	add	r3, pc, #332	; (adr r3, 42d8 <fp_display+0x530>)
    418a:	e9d3 2300 	ldrd	r2, r3, [r3]
    418e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    4192:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    4196:	f001 fe57 	bl	5e48 <__aeabi_dmul>
    419a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    419e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    41a2:	f002 f90f 	bl	63c4 <__aeabi_d2iz>
    41a6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    41aa:	4680      	mov	r8, r0
    41ac:	f002 f94e 	bl	644c <__aeabi_i2d>
    41b0:	4602      	mov	r2, r0
    41b2:	460b      	mov	r3, r1
    41b4:	4630      	mov	r0, r6
    41b6:	4639      	mov	r1, r7
    41b8:	f001 ff7e 	bl	60b8 <__aeabi_dsub>
    41bc:	a346      	add	r3, pc, #280	; (adr r3, 42d8 <fp_display+0x530>)
    41be:	e9d3 2300 	ldrd	r2, r3, [r3]
    41c2:	f001 fe41 	bl	5e48 <__aeabi_dmul>
    41c6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    41ca:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    41ce:	f002 f8f9 	bl	63c4 <__aeabi_d2iz>
    41d2:	4606      	mov	r6, r0
    41d4:	2e00      	cmp	r6, #0
    41d6:	da06      	bge.n	41e6 <fp_display+0x43e>
    41d8:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
    41dc:	f506 7610 	add.w	r6, r6, #576	; 0x240
    41e0:	f108 38ff 	add.w	r8, r8, #4294967295
    41e4:	e7f6      	b.n	41d4 <fp_display+0x42c>
    41e6:	4b3f      	ldr	r3, [pc, #252]	; (42e4 <fp_display+0x53c>)
    41e8:	429e      	cmp	r6, r3
    41ea:	dd06      	ble.n	41fa <fp_display+0x452>
    41ec:	f5a6 2674 	sub.w	r6, r6, #999424	; 0xf4000
    41f0:	f5a6 7610 	sub.w	r6, r6, #576	; 0x240
    41f4:	f108 0801 	add.w	r8, r8, #1
    41f8:	e7f5      	b.n	41e6 <fp_display+0x43e>
    41fa:	f1b8 0f00 	cmp.w	r8, #0
    41fe:	da06      	bge.n	420e <fp_display+0x466>
    4200:	f508 2874 	add.w	r8, r8, #999424	; 0xf4000
    4204:	f508 7810 	add.w	r8, r8, #576	; 0x240
    4208:	f10a 3aff 	add.w	sl, sl, #4294967295
    420c:	e7f5      	b.n	41fa <fp_display+0x452>
    420e:	4598      	cmp	r8, r3
    4210:	dd06      	ble.n	4220 <fp_display+0x478>
    4212:	f5a8 2874 	sub.w	r8, r8, #999424	; 0xf4000
    4216:	f5a8 7810 	sub.w	r8, r8, #576	; 0x240
    421a:	f10a 0a01 	add.w	sl, sl, #1
    421e:	e7f6      	b.n	420e <fp_display+0x466>
    4220:	4b31      	ldr	r3, [pc, #196]	; (42e8 <fp_display+0x540>)
    4222:	4650      	mov	r0, sl
    4224:	459a      	cmp	sl, r3
    4226:	dc11      	bgt.n	424c <fp_display+0x4a4>
    4228:	3301      	adds	r3, #1
    422a:	fb98 f2f3 	sdiv	r2, r8, r3
    422e:	fb96 f3f3 	sdiv	r3, r6, r3
    4232:	482e      	ldr	r0, [pc, #184]	; (42ec <fp_display+0x544>)
    4234:	210a      	movs	r1, #10
    4236:	fb00 8802 	mla	r8, r0, r2, r8
    423a:	fb00 6603 	mla	r6, r0, r3, r6
    423e:	fb01 2a0a 	mla	sl, r1, sl, r2
    4242:	fb01 3808 	mla	r8, r1, r8, r3
    4246:	434e      	muls	r6, r1
    4248:	3d01      	subs	r5, #1
    424a:	e01c      	b.n	4286 <fp_display+0x4de>
    424c:	4b25      	ldr	r3, [pc, #148]	; (42e4 <fp_display+0x53c>)
    424e:	459a      	cmp	sl, r3
    4250:	dd19      	ble.n	4286 <fp_display+0x4de>
    4252:	220a      	movs	r2, #10
    4254:	fb9a faf2 	sdiv	sl, sl, r2
    4258:	f06f 0309 	mvn.w	r3, #9
    425c:	fb03 000a 	mla	r0, r3, sl, r0
    4260:	4923      	ldr	r1, [pc, #140]	; (42f0 <fp_display+0x548>)
    4262:	3501      	adds	r5, #1
    4264:	fb01 8000 	mla	r0, r1, r0, r8
    4268:	fb90 f8f2 	sdiv	r8, r0, r2
    426c:	fb03 0308 	mla	r3, r3, r8, r0
    4270:	fb01 6603 	mla	r6, r1, r3, r6
    4274:	3605      	adds	r6, #5
    4276:	fb96 f6f2 	sdiv	r6, r6, r2
    427a:	e004      	b.n	4286 <fp_display+0x4de>
    427c:	2600      	movs	r6, #0
    427e:	46b0      	mov	r8, r6
    4280:	46b2      	mov	sl, r6
    4282:	f06f 0504 	mvn.w	r5, #4
    4286:	4621      	mov	r1, r4
    4288:	2730      	movs	r7, #48	; 0x30
    428a:	f801 7b06 	strb.w	r7, [r1], #6
    428e:	4650      	mov	r0, sl
    4290:	f7ff fd3f 	bl	3d12 <pr_dec.constprop.1>
    4294:	4640      	mov	r0, r8
    4296:	f104 010c 	add.w	r1, r4, #12
    429a:	f7ff fd3a 	bl	3d12 <pr_dec.constprop.1>
    429e:	4630      	mov	r0, r6
    42a0:	f104 0112 	add.w	r1, r4, #18
    42a4:	f7ff fd35 	bl	3d12 <pr_dec.constprop.1>
    42a8:	2300      	movs	r3, #0
    42aa:	7523      	strb	r3, [r4, #20]
    42ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    42ae:	3505      	adds	r5, #5
    42b0:	74e7      	strb	r7, [r4, #19]
    42b2:	ea43 0585 	orr.w	r5, r3, r5, lsl #2
    42b6:	e000      	b.n	42ba <fp_display+0x512>
    42b8:	2500      	movs	r5, #0
    42ba:	07ef      	lsls	r7, r5, #31
    42bc:	d501      	bpl.n	42c2 <fp_display+0x51a>
    42be:	4b0d      	ldr	r3, [pc, #52]	; (42f4 <fp_display+0x54c>)
    42c0:	e01f      	b.n	4302 <fp_display+0x55a>
    42c2:	9b06      	ldr	r3, [sp, #24]
    42c4:	079e      	lsls	r6, r3, #30
    42c6:	d41b      	bmi.n	4300 <fp_display+0x558>
    42c8:	4a0b      	ldr	r2, [pc, #44]	; (42f8 <fp_display+0x550>)
    42ca:	f013 0f04 	tst.w	r3, #4
    42ce:	4b0b      	ldr	r3, [pc, #44]	; (42fc <fp_display+0x554>)
    42d0:	bf08      	it	eq
    42d2:	4613      	moveq	r3, r2
    42d4:	e015      	b.n	4302 <fp_display+0x55a>
    42d6:	bf00      	nop
    42d8:	00000000 	.word	0x00000000
    42dc:	412e8480 	.word	0x412e8480
    42e0:	40140000 	.word	0x40140000
    42e4:	000f423f 	.word	0x000f423f
    42e8:	0001869f 	.word	0x0001869f
    42ec:	fffe7960 	.word	0xfffe7960
    42f0:	000f4240 	.word	0x000f4240
    42f4:	00007656 	.word	0x00007656
    42f8:	000074a3 	.word	0x000074a3
    42fc:	00007626 	.word	0x00007626
    4300:	4bad      	ldr	r3, [pc, #692]	; (45b8 <fp_display+0x810>)
    4302:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    4304:	f025 0501 	bic.w	r5, r5, #1
    4308:	6013      	str	r3, [r2, #0]
    430a:	2304      	movs	r3, #4
    430c:	fb95 f5f3 	sdiv	r5, r5, r3
    4310:	9b05      	ldr	r3, [sp, #20]
    4312:	f8db 6000 	ldr.w	r6, [fp]
    4316:	2b61      	cmp	r3, #97	; 0x61
    4318:	d010      	beq.n	433c <fp_display+0x594>
    431a:	dc06      	bgt.n	432a <fp_display+0x582>
    431c:	2b45      	cmp	r3, #69	; 0x45
    431e:	d067      	beq.n	43f0 <fp_display+0x648>
    4320:	2b47      	cmp	r3, #71	; 0x47
    4322:	d048      	beq.n	43b6 <fp_display+0x60e>
    4324:	2b41      	cmp	r3, #65	; 0x41
    4326:	d144      	bne.n	43b2 <fp_display+0x60a>
    4328:	e008      	b.n	433c <fp_display+0x594>
    432a:	9b05      	ldr	r3, [sp, #20]
    432c:	2b66      	cmp	r3, #102	; 0x66
    432e:	f000 80df 	beq.w	44f0 <fp_display+0x748>
    4332:	2b67      	cmp	r3, #103	; 0x67
    4334:	d03f      	beq.n	43b6 <fp_display+0x60e>
    4336:	2b65      	cmp	r3, #101	; 0x65
    4338:	d13b      	bne.n	43b2 <fp_display+0x60a>
    433a:	e059      	b.n	43f0 <fp_display+0x648>
    433c:	9b07      	ldr	r3, [sp, #28]
    433e:	2000      	movs	r0, #0
    4340:	f3c3 0113 	ubfx	r1, r3, #0, #20
    4344:	9b08      	ldr	r3, [sp, #32]
    4346:	4318      	orrs	r0, r3
    4348:	9b07      	ldr	r3, [sp, #28]
    434a:	f3c3 520a 	ubfx	r2, r3, #20, #11
    434e:	b112      	cbz	r2, 4356 <fp_display+0x5ae>
    4350:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
    4354:	e004      	b.n	4360 <fp_display+0x5b8>
    4356:	ea50 0301 	orrs.w	r3, r0, r1
    435a:	4b98      	ldr	r3, [pc, #608]	; (45bc <fp_display+0x814>)
    435c:	bf08      	it	eq
    435e:	2300      	moveq	r3, #0
    4360:	2a00      	cmp	r2, #0
    4362:	bf0c      	ite	eq
    4364:	2230      	moveq	r2, #48	; 0x30
    4366:	2231      	movne	r2, #49	; 0x31
    4368:	b966      	cbnz	r6, 4384 <fp_display+0x5dc>
    436a:	9d06      	ldr	r5, [sp, #24]
    436c:	072d      	lsls	r5, r5, #28
    436e:	d409      	bmi.n	4384 <fp_display+0x5dc>
    4370:	9d05      	ldr	r5, [sp, #20]
    4372:	4620      	mov	r0, r4
    4374:	4992      	ldr	r1, [pc, #584]	; (45c0 <fp_display+0x818>)
    4376:	4c93      	ldr	r4, [pc, #588]	; (45c4 <fp_display+0x81c>)
    4378:	2d61      	cmp	r5, #97	; 0x61
    437a:	bf08      	it	eq
    437c:	4621      	moveq	r1, r4
    437e:	f7ff fcdb 	bl	3d38 <sprintf>
    4382:	e00c      	b.n	439e <fp_display+0x5f6>
    4384:	e9cd 0100 	strd	r0, r1, [sp]
    4388:	9302      	str	r3, [sp, #8]
    438a:	4620      	mov	r0, r4
    438c:	4b8e      	ldr	r3, [pc, #568]	; (45c8 <fp_display+0x820>)
    438e:	498f      	ldr	r1, [pc, #572]	; (45cc <fp_display+0x824>)
    4390:	9c05      	ldr	r4, [sp, #20]
    4392:	2c61      	cmp	r4, #97	; 0x61
    4394:	bf18      	it	ne
    4396:	4619      	movne	r1, r3
    4398:	4633      	mov	r3, r6
    439a:	f7ff fccd 	bl	3d38 <sprintf>
    439e:	4a8c      	ldr	r2, [pc, #560]	; (45d0 <fp_display+0x828>)
    43a0:	4b8c      	ldr	r3, [pc, #560]	; (45d4 <fp_display+0x82c>)
    43a2:	9907      	ldr	r1, [sp, #28]
    43a4:	ea33 0321 	bics.w	r3, r3, r1, asr #32
    43a8:	bf28      	it	cs
    43aa:	4613      	movcs	r3, r2
    43ac:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    43ae:	6013      	str	r3, [r2, #0]
    43b0:	e177      	b.n	46a2 <fp_display+0x8fa>
    43b2:	2367      	movs	r3, #103	; 0x67
    43b4:	9305      	str	r3, [sp, #20]
    43b6:	9b06      	ldr	r3, [sp, #24]
    43b8:	2e00      	cmp	r6, #0
    43ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    43be:	9306      	str	r3, [sp, #24]
    43c0:	bfdc      	itt	le
    43c2:	2301      	movle	r3, #1
    43c4:	f8cb 3000 	strle.w	r3, [fp]
    43c8:	f8db 1000 	ldr.w	r1, [fp]
    43cc:	4620      	mov	r0, r4
    43ce:	2911      	cmp	r1, #17
    43d0:	bfd4      	ite	le
    43d2:	3101      	addle	r1, #1
    43d4:	2112      	movgt	r1, #18
    43d6:	f7ff fc77 	bl	3cc8 <fp_round>
    43da:	f8db 3000 	ldr.w	r3, [fp]
    43de:	4405      	add	r5, r0
    43e0:	429d      	cmp	r5, r3
    43e2:	db7e      	blt.n	44e2 <fp_display+0x73a>
    43e4:	3b01      	subs	r3, #1
    43e6:	f8cb 3000 	str.w	r3, [fp]
    43ea:	9b05      	ldr	r3, [sp, #20]
    43ec:	3b02      	subs	r3, #2
    43ee:	9305      	str	r3, [sp, #20]
    43f0:	f8db 3000 	ldr.w	r3, [fp]
    43f4:	2b11      	cmp	r3, #17
    43f6:	bfc1      	itttt	gt
    43f8:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    43fa:	3b11      	subgt	r3, #17
    43fc:	6013      	strgt	r3, [r2, #0]
    43fe:	2311      	movgt	r3, #17
    4400:	bfc8      	it	gt
    4402:	f8cb 3000 	strgt.w	r3, [fp]
    4406:	9b06      	ldr	r3, [sp, #24]
    4408:	f8db 6000 	ldr.w	r6, [fp]
    440c:	f413 6700 	ands.w	r7, r3, #2048	; 0x800
    4410:	f106 0602 	add.w	r6, r6, #2
    4414:	d104      	bne.n	4420 <fp_display+0x678>
    4416:	4620      	mov	r0, r4
    4418:	4631      	mov	r1, r6
    441a:	f7ff fc55 	bl	3cc8 <fp_round>
    441e:	4405      	add	r5, r0
    4420:	7863      	ldrb	r3, [r4, #1]
    4422:	7023      	strb	r3, [r4, #0]
    4424:	f8db 3000 	ldr.w	r3, [fp]
    4428:	b923      	cbnz	r3, 4434 <fp_display+0x68c>
    442a:	f640 0308 	movw	r3, #2056	; 0x808
    442e:	9a06      	ldr	r2, [sp, #24]
    4430:	4013      	ands	r3, r2
    4432:	b113      	cbz	r3, 443a <fp_display+0x692>
    4434:	232e      	movs	r3, #46	; 0x2e
    4436:	7063      	strb	r3, [r4, #1]
    4438:	e000      	b.n	443c <fp_display+0x694>
    443a:	2601      	movs	r6, #1
    443c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    443e:	681b      	ldr	r3, [r3, #0]
    4440:	2b00      	cmp	r3, #0
    4442:	bfc2      	ittt	gt
    4444:	233e      	movgt	r3, #62	; 0x3e
    4446:	55a3      	strbgt	r3, [r4, r6]
    4448:	3601      	addgt	r6, #1
    444a:	b177      	cbz	r7, 446a <fp_display+0x6c2>
    444c:	9b06      	ldr	r3, [sp, #24]
    444e:	071f      	lsls	r7, r3, #28
    4450:	d40b      	bmi.n	446a <fp_display+0x6c2>
    4452:	19a2      	adds	r2, r4, r6
    4454:	1b16      	subs	r6, r2, r4
    4456:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
    445a:	2b30      	cmp	r3, #48	; 0x30
    445c:	d0fa      	beq.n	4454 <fp_display+0x6ac>
    445e:	2b3e      	cmp	r3, #62	; 0x3e
    4460:	d0f8      	beq.n	4454 <fp_display+0x6ac>
    4462:	2b2e      	cmp	r3, #46	; 0x2e
    4464:	bf08      	it	eq
    4466:	f106 36ff 	addeq.w	r6, r6, #4294967295
    446a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    446e:	2d00      	cmp	r5, #0
    4470:	55a3      	strb	r3, [r4, r6]
    4472:	bfb8      	it	lt
    4474:	426d      	neglt	r5, r5
    4476:	f106 0302 	add.w	r3, r6, #2
    447a:	f106 0201 	add.w	r2, r6, #1
    447e:	bfb5      	itete	lt
    4480:	212d      	movlt	r1, #45	; 0x2d
    4482:	212b      	movge	r1, #43	; 0x2b
    4484:	461e      	movlt	r6, r3
    4486:	461e      	movge	r6, r3
    4488:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
    448c:	54a1      	strb	r1, [r4, r2]
    448e:	db0a      	blt.n	44a6 <fp_display+0x6fe>
    4490:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4494:	fb95 f2f2 	sdiv	r2, r5, r2
    4498:	f102 0130 	add.w	r1, r2, #48	; 0x30
    449c:	54e1      	strb	r1, [r4, r3]
    449e:	494e      	ldr	r1, [pc, #312]	; (45d8 <fp_display+0x830>)
    44a0:	1c5e      	adds	r6, r3, #1
    44a2:	fb01 5502 	mla	r5, r1, r2, r5
    44a6:	2d63      	cmp	r5, #99	; 0x63
    44a8:	dd0a      	ble.n	44c0 <fp_display+0x718>
    44aa:	2364      	movs	r3, #100	; 0x64
    44ac:	fb95 f3f3 	sdiv	r3, r5, r3
    44b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
    44b4:	55a2      	strb	r2, [r4, r6]
    44b6:	f06f 0263 	mvn.w	r2, #99	; 0x63
    44ba:	fb02 5503 	mla	r5, r2, r3, r5
    44be:	3601      	adds	r6, #1
    44c0:	230a      	movs	r3, #10
    44c2:	fb95 f3f3 	sdiv	r3, r5, r3
    44c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
    44ca:	55a2      	strb	r2, [r4, r6]
    44cc:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    44d0:	3530      	adds	r5, #48	; 0x30
    44d2:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
    44d6:	4434      	add	r4, r6
    44d8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    44dc:	7063      	strb	r3, [r4, #1]
    44de:	1cb0      	adds	r0, r6, #2
    44e0:	e0df      	b.n	46a2 <fp_display+0x8fa>
    44e2:	1d2a      	adds	r2, r5, #4
    44e4:	f6ff af7e 	blt.w	43e4 <fp_display+0x63c>
    44e8:	43ea      	mvns	r2, r5
    44ea:	4413      	add	r3, r2
    44ec:	f8cb 3000 	str.w	r3, [fp]
    44f0:	9a06      	ldr	r2, [sp, #24]
    44f2:	2d00      	cmp	r5, #0
    44f4:	f8db 3000 	ldr.w	r3, [fp]
    44f8:	f402 6700 	and.w	r7, r2, #2048	; 0x800
    44fc:	da4c      	bge.n	4598 <fp_display+0x7f0>
    44fe:	f1c5 0800 	rsb	r8, r5, #0
    4502:	1c5a      	adds	r2, r3, #1
    4504:	4590      	cmp	r8, r2
    4506:	dd09      	ble.n	451c <fp_display+0x774>
    4508:	2330      	movs	r3, #48	; 0x30
    450a:	7023      	strb	r3, [r4, #0]
    450c:	232e      	movs	r3, #46	; 0x2e
    450e:	7063      	strb	r3, [r4, #1]
    4510:	f8db 3000 	ldr.w	r3, [fp]
    4514:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    4516:	2602      	movs	r6, #2
    4518:	6013      	str	r3, [r2, #0]
    451a:	e038      	b.n	458e <fp_display+0x7e6>
    451c:	442b      	add	r3, r5
    451e:	1c9e      	adds	r6, r3, #2
    4520:	2e12      	cmp	r6, #18
    4522:	bfc1      	itttt	gt
    4524:	9a2b      	ldrgt	r2, [sp, #172]	; 0xac
    4526:	3b11      	subgt	r3, #17
    4528:	6013      	strgt	r3, [r2, #0]
    452a:	2613      	movgt	r6, #19
    452c:	b95f      	cbnz	r7, 4546 <fp_display+0x79e>
    452e:	4620      	mov	r0, r4
    4530:	4631      	mov	r1, r6
    4532:	f7ff fbc9 	bl	3cc8 <fp_round>
    4536:	b130      	cbz	r0, 4546 <fp_display+0x79e>
    4538:	ea7f 0805 	mvns.w	r8, r5
    453c:	f106 0601 	add.w	r6, r6, #1
    4540:	d101      	bne.n	4546 <fp_display+0x79e>
    4542:	7863      	ldrb	r3, [r4, #1]
    4544:	e00d      	b.n	4562 <fp_display+0x7ba>
    4546:	f1b8 0f01 	cmp.w	r8, #1
    454a:	eb04 0306 	add.w	r3, r4, r6
    454e:	d10c      	bne.n	456a <fp_display+0x7c2>
    4550:	1b1a      	subs	r2, r3, r4
    4552:	2a00      	cmp	r2, #0
    4554:	dd03      	ble.n	455e <fp_display+0x7b6>
    4556:	f813 2901 	ldrb.w	r2, [r3], #-1
    455a:	709a      	strb	r2, [r3, #2]
    455c:	e7f8      	b.n	4550 <fp_display+0x7a8>
    455e:	3601      	adds	r6, #1
    4560:	2330      	movs	r3, #48	; 0x30
    4562:	7023      	strb	r3, [r4, #0]
    4564:	232e      	movs	r3, #46	; 0x2e
    4566:	7063      	strb	r3, [r4, #1]
    4568:	e011      	b.n	458e <fp_display+0x7e6>
    456a:	1b1a      	subs	r2, r3, r4
    456c:	2a00      	cmp	r2, #0
    456e:	dd03      	ble.n	4578 <fp_display+0x7d0>
    4570:	f813 2901 	ldrb.w	r2, [r3], #-1
    4574:	70da      	strb	r2, [r3, #3]
    4576:	e7f8      	b.n	456a <fp_display+0x7c2>
    4578:	2330      	movs	r3, #48	; 0x30
    457a:	7023      	strb	r3, [r4, #0]
    457c:	232e      	movs	r3, #46	; 0x2e
    457e:	7063      	strb	r3, [r4, #1]
    4580:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    4582:	233c      	movs	r3, #60	; 0x3c
    4584:	70a3      	strb	r3, [r4, #2]
    4586:	f108 33ff 	add.w	r3, r8, #4294967295
    458a:	3602      	adds	r6, #2
    458c:	6013      	str	r3, [r2, #0]
    458e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    4590:	681b      	ldr	r3, [r3, #0]
    4592:	2b00      	cmp	r3, #0
    4594:	dc38      	bgt.n	4608 <fp_display+0x860>
    4596:	e06c      	b.n	4672 <fp_display+0x8ca>
    4598:	eb05 0803 	add.w	r8, r5, r3
    459c:	f108 0602 	add.w	r6, r8, #2
    45a0:	2e12      	cmp	r6, #18
    45a2:	dd50      	ble.n	4646 <fp_display+0x89e>
    45a4:	b9d7      	cbnz	r7, 45dc <fp_display+0x834>
    45a6:	4620      	mov	r0, r4
    45a8:	2113      	movs	r1, #19
    45aa:	f7ff fb8d 	bl	3cc8 <fp_round>
    45ae:	b1a8      	cbz	r0, 45dc <fp_display+0x834>
    45b0:	3501      	adds	r5, #1
    45b2:	2614      	movs	r6, #20
    45b4:	e013      	b.n	45de <fp_display+0x836>
    45b6:	bf00      	nop
    45b8:	00007624 	.word	0x00007624
    45bc:	fffffc01 	.word	0xfffffc01
    45c0:	00007630 	.word	0x00007630
    45c4:	00007628 	.word	0x00007628
    45c8:	00007647 	.word	0x00007647
    45cc:	00007638 	.word	0x00007638
    45d0:	00007656 	.word	0x00007656
    45d4:	000074a3 	.word	0x000074a3
    45d8:	fffffc18 	.word	0xfffffc18
    45dc:	2613      	movs	r6, #19
    45de:	1e72      	subs	r2, r6, #1
    45e0:	4295      	cmp	r5, r2
    45e2:	4623      	mov	r3, r4
    45e4:	da14      	bge.n	4610 <fp_display+0x868>
    45e6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    45ea:	f803 2c01 	strb.w	r2, [r3, #-1]
    45ee:	1b1a      	subs	r2, r3, r4
    45f0:	42aa      	cmp	r2, r5
    45f2:	ddf8      	ble.n	45e6 <fp_display+0x83e>
    45f4:	1963      	adds	r3, r4, r5
    45f6:	222e      	movs	r2, #46	; 0x2e
    45f8:	705a      	strb	r2, [r3, #1]
    45fa:	f8db 3000 	ldr.w	r3, [fp]
    45fe:	441d      	add	r5, r3
    4600:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    4602:	3d11      	subs	r5, #17
    4604:	601d      	str	r5, [r3, #0]
    4606:	b3a5      	cbz	r5, 4672 <fp_display+0x8ca>
    4608:	233e      	movs	r3, #62	; 0x3e
    460a:	55a3      	strb	r3, [r4, r6]
    460c:	3601      	adds	r6, #1
    460e:	e030      	b.n	4672 <fp_display+0x8ca>
    4610:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    4614:	f803 1c01 	strb.w	r1, [r3, #-1]
    4618:	1b19      	subs	r1, r3, r4
    461a:	4291      	cmp	r1, r2
    461c:	dbf8      	blt.n	4610 <fp_display+0x868>
    461e:	19a3      	adds	r3, r4, r6
    4620:	223c      	movs	r2, #60	; 0x3c
    4622:	f803 2c01 	strb.w	r2, [r3, #-1]
    4626:	1bad      	subs	r5, r5, r6
    4628:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    462a:	222e      	movs	r2, #46	; 0x2e
    462c:	3502      	adds	r5, #2
    462e:	601d      	str	r5, [r3, #0]
    4630:	55a2      	strb	r2, [r4, r6]
    4632:	f8db 2000 	ldr.w	r2, [fp]
    4636:	1c73      	adds	r3, r6, #1
    4638:	b1d2      	cbz	r2, 4670 <fp_display+0x8c8>
    463a:	992b      	ldr	r1, [sp, #172]	; 0xac
    463c:	3602      	adds	r6, #2
    463e:	600a      	str	r2, [r1, #0]
    4640:	223e      	movs	r2, #62	; 0x3e
    4642:	54e2      	strb	r2, [r4, r3]
    4644:	e015      	b.n	4672 <fp_display+0x8ca>
    4646:	b93f      	cbnz	r7, 4658 <fp_display+0x8b0>
    4648:	4620      	mov	r0, r4
    464a:	4631      	mov	r1, r6
    464c:	f7ff fb3c 	bl	3cc8 <fp_round>
    4650:	b110      	cbz	r0, 4658 <fp_display+0x8b0>
    4652:	3501      	adds	r5, #1
    4654:	f108 0603 	add.w	r6, r8, #3
    4658:	4623      	mov	r3, r4
    465a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    465e:	f803 2c01 	strb.w	r2, [r3, #-1]
    4662:	1b1a      	subs	r2, r3, r4
    4664:	42aa      	cmp	r2, r5
    4666:	ddf8      	ble.n	465a <fp_display+0x8b2>
    4668:	4425      	add	r5, r4
    466a:	232e      	movs	r3, #46	; 0x2e
    466c:	706b      	strb	r3, [r5, #1]
    466e:	e000      	b.n	4672 <fp_display+0x8ca>
    4670:	461e      	mov	r6, r3
    4672:	b16f      	cbz	r7, 4690 <fp_display+0x8e8>
    4674:	9b06      	ldr	r3, [sp, #24]
    4676:	0718      	lsls	r0, r3, #28
    4678:	d412      	bmi.n	46a0 <fp_display+0x8f8>
    467a:	19a0      	adds	r0, r4, r6
    467c:	1b06      	subs	r6, r0, r4
    467e:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
    4682:	2b30      	cmp	r3, #48	; 0x30
    4684:	d0fa      	beq.n	467c <fp_display+0x8d4>
    4686:	2b3e      	cmp	r3, #62	; 0x3e
    4688:	d0f8      	beq.n	467c <fp_display+0x8d4>
    468a:	2b2e      	cmp	r3, #46	; 0x2e
    468c:	d108      	bne.n	46a0 <fp_display+0x8f8>
    468e:	e005      	b.n	469c <fp_display+0x8f4>
    4690:	f8db 3000 	ldr.w	r3, [fp]
    4694:	b923      	cbnz	r3, 46a0 <fp_display+0x8f8>
    4696:	9b06      	ldr	r3, [sp, #24]
    4698:	0719      	lsls	r1, r3, #28
    469a:	d401      	bmi.n	46a0 <fp_display+0x8f8>
    469c:	1e70      	subs	r0, r6, #1
    469e:	e000      	b.n	46a2 <fp_display+0x8fa>
    46a0:	4630      	mov	r0, r6
    46a2:	b01f      	add	sp, #124	; 0x7c
    46a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000046a8 <_initio>:
    46a8:	b510      	push	{r4, lr}
    46aa:	2100      	movs	r1, #0
    46ac:	f44f 72a0 	mov.w	r2, #320	; 0x140
    46b0:	4822      	ldr	r0, [pc, #136]	; (473c <_initio+0x94>)
    46b2:	f7ff fa79 	bl	3ba8 <memset>
    46b6:	20c0      	movs	r0, #192	; 0xc0
    46b8:	f7ff faf6 	bl	3ca8 <_Csys_alloc>
    46bc:	4c20      	ldr	r4, [pc, #128]	; (4740 <_initio+0x98>)
    46be:	2100      	movs	r1, #0
    46c0:	22c0      	movs	r2, #192	; 0xc0
    46c2:	6020      	str	r0, [r4, #0]
    46c4:	f7ff fa70 	bl	3ba8 <memset>
    46c8:	6820      	ldr	r0, [r4, #0]
    46ca:	2300      	movs	r3, #0
    46cc:	4c1b      	ldr	r4, [pc, #108]	; (473c <_initio+0x94>)
    46ce:	2228      	movs	r2, #40	; 0x28
    46d0:	2118      	movs	r1, #24
    46d2:	fb02 4203 	mla	r2, r2, r3, r4
    46d6:	fb01 0103 	mla	r1, r1, r3, r0
    46da:	3301      	adds	r3, #1
    46dc:	2b08      	cmp	r3, #8
    46de:	6251      	str	r1, [r2, #36]	; 0x24
    46e0:	d1f4      	bne.n	46cc <_initio+0x24>
    46e2:	4622      	mov	r2, r4
    46e4:	4917      	ldr	r1, [pc, #92]	; (4744 <_initio+0x9c>)
    46e6:	2000      	movs	r0, #0
    46e8:	f001 f8d1 	bl	588e <_fdopen>
    46ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    46f0:	4620      	mov	r0, r4
    46f2:	2100      	movs	r1, #0
    46f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    46f8:	f000 ff38 	bl	556c <setvbuf>
    46fc:	f104 0228 	add.w	r2, r4, #40	; 0x28
    4700:	4911      	ldr	r1, [pc, #68]	; (4748 <_initio+0xa0>)
    4702:	2001      	movs	r0, #1
    4704:	f001 f8c3 	bl	588e <_fdopen>
    4708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    470c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4710:	2100      	movs	r1, #0
    4712:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4716:	f000 ff29 	bl	556c <setvbuf>
    471a:	f104 0250 	add.w	r2, r4, #80	; 0x50
    471e:	490a      	ldr	r1, [pc, #40]	; (4748 <_initio+0xa0>)
    4720:	2002      	movs	r0, #2
    4722:	f001 f8b4 	bl	588e <_fdopen>
    4726:	f104 0050 	add.w	r0, r4, #80	; 0x50
    472a:	2100      	movs	r1, #0
    472c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4738:	f000 bf18 	b.w	556c <setvbuf>
    473c:	10001cf4 	.word	0x10001cf4
    4740:	10001cf0 	.word	0x10001cf0
    4744:	00007658 	.word	0x00007658
    4748:	0000765a 	.word	0x0000765a

0000474c <__vfprintf>:
    474c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4750:	4604      	mov	r4, r0
    4752:	b0ad      	sub	sp, #180	; 0xb4
    4754:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    4758:	f8dd 80dc 	ldr.w	r8, [sp, #220]	; 0xdc
    475c:	2200      	movs	r2, #0
    475e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    4760:	9205      	str	r2, [sp, #20]
    4762:	7818      	ldrb	r0, [r3, #0]
    4764:	1c5d      	adds	r5, r3, #1
    4766:	2800      	cmp	r0, #0
    4768:	f000 863d 	beq.w	53e6 <__vfprintf+0xc9a>
    476c:	2825      	cmp	r0, #37	; 0x25
    476e:	d102      	bne.n	4776 <__vfprintf+0x2a>
    4770:	462a      	mov	r2, r5
    4772:	2700      	movs	r7, #0
    4774:	e023      	b.n	47be <__vfprintf+0x72>
    4776:	9b05      	ldr	r3, [sp, #20]
    4778:	ea4f 7be3 	mov.w	fp, r3, asr #31
    477c:	461a      	mov	r2, r3
    477e:	1c5e      	adds	r6, r3, #1
    4780:	465b      	mov	r3, fp
    4782:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    4786:	4552      	cmp	r2, sl
    4788:	eb73 030b 	sbcs.w	r3, r3, fp
    478c:	f280 8627 	bge.w	53de <__vfprintf+0xc92>
    4790:	68a3      	ldr	r3, [r4, #8]
    4792:	3b01      	subs	r3, #1
    4794:	2b00      	cmp	r3, #0
    4796:	60a3      	str	r3, [r4, #8]
    4798:	db05      	blt.n	47a6 <__vfprintf+0x5a>
    479a:	6823      	ldr	r3, [r4, #0]
    479c:	1c5a      	adds	r2, r3, #1
    479e:	6022      	str	r2, [r4, #0]
    47a0:	7018      	strb	r0, [r3, #0]
    47a2:	f000 be1c 	b.w	53de <__vfprintf+0xc92>
    47a6:	4621      	mov	r1, r4
    47a8:	f000 ffd0 	bl	574c <__flsbuf>
    47ac:	f000 be17 	b.w	53de <__vfprintf+0xc92>
    47b0:	d90b      	bls.n	47ca <__vfprintf+0x7e>
    47b2:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
    47b6:	d111      	bne.n	47dc <__vfprintf+0x90>
    47b8:	f047 0701 	orr.w	r7, r7, #1
    47bc:	462a      	mov	r2, r5
    47be:	f815 9b01 	ldrb.w	r9, [r5], #1
    47c2:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
    47c6:	d1f3      	bne.n	47b0 <__vfprintf+0x64>
    47c8:	e00e      	b.n	47e8 <__vfprintf+0x9c>
    47ca:	f1b9 0f20 	cmp.w	r9, #32
    47ce:	d00e      	beq.n	47ee <__vfprintf+0xa2>
    47d0:	f1b9 0f23 	cmp.w	r9, #35	; 0x23
    47d4:	d10e      	bne.n	47f4 <__vfprintf+0xa8>
    47d6:	f047 0708 	orr.w	r7, r7, #8
    47da:	e7ef      	b.n	47bc <__vfprintf+0x70>
    47dc:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
    47e0:	d108      	bne.n	47f4 <__vfprintf+0xa8>
    47e2:	f447 7700 	orr.w	r7, r7, #512	; 0x200
    47e6:	e7e9      	b.n	47bc <__vfprintf+0x70>
    47e8:	f047 0702 	orr.w	r7, r7, #2
    47ec:	e7e6      	b.n	47bc <__vfprintf+0x70>
    47ee:	f047 0704 	orr.w	r7, r7, #4
    47f2:	e7e3      	b.n	47bc <__vfprintf+0x70>
    47f4:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    47f8:	d001      	beq.n	47fe <__vfprintf+0xb2>
    47fa:	2300      	movs	r3, #0
    47fc:	e00d      	b.n	481a <__vfprintf+0xce>
    47fe:	f8d8 3000 	ldr.w	r3, [r8]
    4802:	f108 0104 	add.w	r1, r8, #4
    4806:	2b00      	cmp	r3, #0
    4808:	bfbc      	itt	lt
    480a:	425b      	neglt	r3, r3
    480c:	f087 0701 	eorlt.w	r7, r7, #1
    4810:	1c95      	adds	r5, r2, #2
    4812:	f892 9001 	ldrb.w	r9, [r2, #1]
    4816:	4688      	mov	r8, r1
    4818:	e00a      	b.n	4830 <__vfprintf+0xe4>
    481a:	f1a9 0230 	sub.w	r2, r9, #48	; 0x30
    481e:	b2d1      	uxtb	r1, r2
    4820:	2909      	cmp	r1, #9
    4822:	d805      	bhi.n	4830 <__vfprintf+0xe4>
    4824:	210a      	movs	r1, #10
    4826:	fb01 2303 	mla	r3, r1, r3, r2
    482a:	f815 9b01 	ldrb.w	r9, [r5], #1
    482e:	e7f4      	b.n	481a <__vfprintf+0xce>
    4830:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4834:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
    4838:	930f      	str	r3, [sp, #60]	; 0x3c
    483a:	d124      	bne.n	4886 <__vfprintf+0x13a>
    483c:	f895 9000 	ldrb.w	r9, [r5]
    4840:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    4844:	d003      	beq.n	484e <__vfprintf+0x102>
    4846:	2300      	movs	r3, #0
    4848:	3501      	adds	r5, #1
    484a:	9306      	str	r3, [sp, #24]
    484c:	e008      	b.n	4860 <__vfprintf+0x114>
    484e:	f8d8 3000 	ldr.w	r3, [r8]
    4852:	f895 9001 	ldrb.w	r9, [r5, #1]
    4856:	9306      	str	r3, [sp, #24]
    4858:	f108 0804 	add.w	r8, r8, #4
    485c:	3502      	adds	r5, #2
    485e:	e00c      	b.n	487a <__vfprintf+0x12e>
    4860:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    4864:	b2da      	uxtb	r2, r3
    4866:	2a09      	cmp	r2, #9
    4868:	d807      	bhi.n	487a <__vfprintf+0x12e>
    486a:	9906      	ldr	r1, [sp, #24]
    486c:	220a      	movs	r2, #10
    486e:	fb02 3301 	mla	r3, r2, r1, r3
    4872:	f815 9b01 	ldrb.w	r9, [r5], #1
    4876:	9306      	str	r3, [sp, #24]
    4878:	e7f2      	b.n	4860 <__vfprintf+0x114>
    487a:	9b06      	ldr	r3, [sp, #24]
    487c:	2b00      	cmp	r3, #0
    487e:	db02      	blt.n	4886 <__vfprintf+0x13a>
    4880:	f047 0710 	orr.w	r7, r7, #16
    4884:	e001      	b.n	488a <__vfprintf+0x13e>
    4886:	2300      	movs	r3, #0
    4888:	9306      	str	r3, [sp, #24]
    488a:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    488e:	d10d      	bne.n	48ac <__vfprintf+0x160>
    4890:	f895 9000 	ldrb.w	r9, [r5]
    4894:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    4898:	bf03      	ittte	eq
    489a:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    489e:	f047 0760 	orreq.w	r7, r7, #96	; 0x60
    48a2:	3502      	addeq	r5, #2
    48a4:	3501      	addne	r5, #1
    48a6:	bf18      	it	ne
    48a8:	f047 0720 	orrne.w	r7, r7, #32
    48ac:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
    48b0:	d002      	beq.n	48b8 <__vfprintf+0x16c>
    48b2:	f1b9 0f71 	cmp.w	r9, #113	; 0x71
    48b6:	d104      	bne.n	48c2 <__vfprintf+0x176>
    48b8:	f895 9000 	ldrb.w	r9, [r5]
    48bc:	f047 0760 	orr.w	r7, r7, #96	; 0x60
    48c0:	e01f      	b.n	4902 <__vfprintf+0x1b6>
    48c2:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    48c6:	d10e      	bne.n	48e6 <__vfprintf+0x19a>
    48c8:	f895 9000 	ldrb.w	r9, [r5]
    48cc:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    48d0:	bf03      	ittte	eq
    48d2:	f895 9001 	ldrbeq.w	r9, [r5, #1]
    48d6:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
    48da:	3502      	addeq	r5, #2
    48dc:	3501      	addne	r5, #1
    48de:	bf18      	it	ne
    48e0:	f047 0780 	orrne.w	r7, r7, #128	; 0x80
    48e4:	e00e      	b.n	4904 <__vfprintf+0x1b8>
    48e6:	f1b9 0f6a 	cmp.w	r9, #106	; 0x6a
    48ea:	d102      	bne.n	48f2 <__vfprintf+0x1a6>
    48ec:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    48f0:	e005      	b.n	48fe <__vfprintf+0x1b2>
    48f2:	f1b9 0f7a 	cmp.w	r9, #122	; 0x7a
    48f6:	d002      	beq.n	48fe <__vfprintf+0x1b2>
    48f8:	f1b9 0f74 	cmp.w	r9, #116	; 0x74
    48fc:	d102      	bne.n	4904 <__vfprintf+0x1b8>
    48fe:	f895 9000 	ldrb.w	r9, [r5]
    4902:	3501      	adds	r5, #1
    4904:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    4908:	dc25      	bgt.n	4956 <__vfprintf+0x20a>
    490a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    490e:	f280 826e 	bge.w	4dee <__vfprintf+0x6a2>
    4912:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    4916:	f000 826a 	beq.w	4dee <__vfprintf+0x6a2>
    491a:	dc0c      	bgt.n	4936 <__vfprintf+0x1ea>
    491c:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    4920:	f000 825f 	beq.w	4de2 <__vfprintf+0x696>
    4924:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    4928:	f000 8261 	beq.w	4dee <__vfprintf+0x6a2>
    492c:	f1b9 0f00 	cmp.w	r9, #0
    4930:	f000 80b4 	beq.w	4a9c <__vfprintf+0x350>
    4934:	e031      	b.n	499a <__vfprintf+0x24e>
    4936:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    493a:	f000 8252 	beq.w	4de2 <__vfprintf+0x696>
    493e:	dc04      	bgt.n	494a <__vfprintf+0x1fe>
    4940:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    4944:	f000 8171 	beq.w	4c2a <__vfprintf+0x4de>
    4948:	e027      	b.n	499a <__vfprintf+0x24e>
    494a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
    494e:	d01e      	beq.n	498e <__vfprintf+0x242>
    4950:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    4954:	e00c      	b.n	4970 <__vfprintf+0x224>
    4956:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    495a:	f000 81b4 	beq.w	4cc6 <__vfprintf+0x57a>
    495e:	dc0a      	bgt.n	4976 <__vfprintf+0x22a>
    4960:	f1b9 0f6e 	cmp.w	r9, #110	; 0x6e
    4964:	f000 809f 	beq.w	4aa6 <__vfprintf+0x35a>
    4968:	f300 81b6 	bgt.w	4cd8 <__vfprintf+0x58c>
    496c:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    4970:	f000 81f4 	beq.w	4d5c <__vfprintf+0x610>
    4974:	e011      	b.n	499a <__vfprintf+0x24e>
    4976:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    497a:	f000 81cd 	beq.w	4d18 <__vfprintf+0x5cc>
    497e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    4982:	f000 8179 	beq.w	4c78 <__vfprintf+0x52c>
    4986:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
    498a:	d106      	bne.n	499a <__vfprintf+0x24e>
    498c:	e0ae      	b.n	4aec <__vfprintf+0x3a0>
    498e:	f108 0304 	add.w	r3, r8, #4
    4992:	930e      	str	r3, [sp, #56]	; 0x38
    4994:	f8d8 9000 	ldr.w	r9, [r8]
    4998:	e001      	b.n	499e <__vfprintf+0x252>
    499a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    499e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    49a0:	f103 3aff 	add.w	sl, r3, #4294967295
    49a4:	f017 0301 	ands.w	r3, r7, #1
    49a8:	9306      	str	r3, [sp, #24]
    49aa:	d12e      	bne.n	4a0a <__vfprintf+0x2be>
    49ac:	f417 7f00 	tst.w	r7, #512	; 0x200
    49b0:	bf14      	ite	ne
    49b2:	f04f 0830 	movne.w	r8, #48	; 0x30
    49b6:	f04f 0820 	moveq.w	r8, #32
    49ba:	2600      	movs	r6, #0
    49bc:	2700      	movs	r7, #0
    49be:	9b05      	ldr	r3, [sp, #20]
    49c0:	199a      	adds	r2, r3, r6
    49c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    49c4:	f1a3 0a02 	sub.w	sl, r3, #2
    49c8:	ebba 0a06 	subs.w	sl, sl, r6
    49cc:	d41c      	bmi.n	4a08 <__vfprintf+0x2bc>
    49ce:	9b05      	ldr	r3, [sp, #20]
    49d0:	18f0      	adds	r0, r6, r3
    49d2:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    49d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    49da:	4290      	cmp	r0, r2
    49dc:	eb71 0303 	sbcs.w	r3, r1, r3
    49e0:	da0e      	bge.n	4a00 <__vfprintf+0x2b4>
    49e2:	68a2      	ldr	r2, [r4, #8]
    49e4:	3a01      	subs	r2, #1
    49e6:	2a00      	cmp	r2, #0
    49e8:	60a2      	str	r2, [r4, #8]
    49ea:	db05      	blt.n	49f8 <__vfprintf+0x2ac>
    49ec:	6822      	ldr	r2, [r4, #0]
    49ee:	1c51      	adds	r1, r2, #1
    49f0:	6021      	str	r1, [r4, #0]
    49f2:	f882 8000 	strb.w	r8, [r2]
    49f6:	e003      	b.n	4a00 <__vfprintf+0x2b4>
    49f8:	4640      	mov	r0, r8
    49fa:	4621      	mov	r1, r4
    49fc:	f000 fea6 	bl	574c <__flsbuf>
    4a00:	3601      	adds	r6, #1
    4a02:	f147 0700 	adc.w	r7, r7, #0
    4a06:	e7da      	b.n	49be <__vfprintf+0x272>
    4a08:	9205      	str	r2, [sp, #20]
    4a0a:	9b05      	ldr	r3, [sp, #20]
    4a0c:	17d9      	asrs	r1, r3, #31
    4a0e:	461a      	mov	r2, r3
    4a10:	f103 0b01 	add.w	fp, r3, #1
    4a14:	460b      	mov	r3, r1
    4a16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4a1a:	4282      	cmp	r2, r0
    4a1c:	418b      	sbcs	r3, r1
    4a1e:	da0e      	bge.n	4a3e <__vfprintf+0x2f2>
    4a20:	68a3      	ldr	r3, [r4, #8]
    4a22:	3b01      	subs	r3, #1
    4a24:	2b00      	cmp	r3, #0
    4a26:	60a3      	str	r3, [r4, #8]
    4a28:	db05      	blt.n	4a36 <__vfprintf+0x2ea>
    4a2a:	6823      	ldr	r3, [r4, #0]
    4a2c:	1c5a      	adds	r2, r3, #1
    4a2e:	6022      	str	r2, [r4, #0]
    4a30:	f883 9000 	strb.w	r9, [r3]
    4a34:	e003      	b.n	4a3e <__vfprintf+0x2f2>
    4a36:	4648      	mov	r0, r9
    4a38:	4621      	mov	r1, r4
    4a3a:	f000 fe87 	bl	574c <__flsbuf>
    4a3e:	9b06      	ldr	r3, [sp, #24]
    4a40:	b91b      	cbnz	r3, 4a4a <__vfprintf+0x2fe>
    4a42:	f8cd b014 	str.w	fp, [sp, #20]
    4a46:	f000 bcc7 	b.w	53d8 <__vfprintf+0xc8c>
    4a4a:	2600      	movs	r6, #0
    4a4c:	2700      	movs	r7, #0
    4a4e:	43f3      	mvns	r3, r6
    4a50:	eb13 0f0a 	cmn.w	r3, sl
    4a54:	d41b      	bmi.n	4a8e <__vfprintf+0x342>
    4a56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4a5a:	eb16 020b 	adds.w	r2, r6, fp
    4a5e:	eb47 73eb 	adc.w	r3, r7, fp, asr #31
    4a62:	4282      	cmp	r2, r0
    4a64:	418b      	sbcs	r3, r1
    4a66:	da0e      	bge.n	4a86 <__vfprintf+0x33a>
    4a68:	68a3      	ldr	r3, [r4, #8]
    4a6a:	3b01      	subs	r3, #1
    4a6c:	2b00      	cmp	r3, #0
    4a6e:	60a3      	str	r3, [r4, #8]
    4a70:	db05      	blt.n	4a7e <__vfprintf+0x332>
    4a72:	6823      	ldr	r3, [r4, #0]
    4a74:	1c5a      	adds	r2, r3, #1
    4a76:	6022      	str	r2, [r4, #0]
    4a78:	2220      	movs	r2, #32
    4a7a:	701a      	strb	r2, [r3, #0]
    4a7c:	e003      	b.n	4a86 <__vfprintf+0x33a>
    4a7e:	2020      	movs	r0, #32
    4a80:	4621      	mov	r1, r4
    4a82:	f000 fe63 	bl	574c <__flsbuf>
    4a86:	3601      	adds	r6, #1
    4a88:	f147 0700 	adc.w	r7, r7, #0
    4a8c:	e7df      	b.n	4a4e <__vfprintf+0x302>
    4a8e:	465b      	mov	r3, fp
    4a90:	f1ba 0f00 	cmp.w	sl, #0
    4a94:	bfa8      	it	ge
    4a96:	4453      	addge	r3, sl
    4a98:	f000 bc9d 	b.w	53d6 <__vfprintf+0xc8a>
    4a9c:	3d01      	subs	r5, #1
    4a9e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    4aa2:	f000 bc99 	b.w	53d8 <__vfprintf+0xc8c>
    4aa6:	f108 0304 	add.w	r3, r8, #4
    4aaa:	f017 0f40 	tst.w	r7, #64	; 0x40
    4aae:	930e      	str	r3, [sp, #56]	; 0x38
    4ab0:	f8d8 3000 	ldr.w	r3, [r8]
    4ab4:	d006      	beq.n	4ac4 <__vfprintf+0x378>
    4ab6:	9a05      	ldr	r2, [sp, #20]
    4ab8:	4610      	mov	r0, r2
    4aba:	17d1      	asrs	r1, r2, #31
    4abc:	e9c3 0100 	strd	r0, r1, [r3]
    4ac0:	f000 bc8a 	b.w	53d8 <__vfprintf+0xc8c>
    4ac4:	06be      	lsls	r6, r7, #26
    4ac6:	d40d      	bmi.n	4ae4 <__vfprintf+0x398>
    4ac8:	05f8      	lsls	r0, r7, #23
    4aca:	d504      	bpl.n	4ad6 <__vfprintf+0x38a>
    4acc:	f89d 2014 	ldrb.w	r2, [sp, #20]
    4ad0:	701a      	strb	r2, [r3, #0]
    4ad2:	f000 bc81 	b.w	53d8 <__vfprintf+0xc8c>
    4ad6:	0639      	lsls	r1, r7, #24
    4ad8:	d504      	bpl.n	4ae4 <__vfprintf+0x398>
    4ada:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    4ade:	801a      	strh	r2, [r3, #0]
    4ae0:	f000 bc7a 	b.w	53d8 <__vfprintf+0xc8c>
    4ae4:	9a05      	ldr	r2, [sp, #20]
    4ae6:	601a      	str	r2, [r3, #0]
    4ae8:	f000 bc76 	b.w	53d8 <__vfprintf+0xc8c>
    4aec:	f108 0304 	add.w	r3, r8, #4
    4af0:	930e      	str	r3, [sp, #56]	; 0x38
    4af2:	f8d8 9000 	ldr.w	r9, [r8]
    4af6:	4bab      	ldr	r3, [pc, #684]	; (4da4 <__vfprintf+0x658>)
    4af8:	f1b9 0f00 	cmp.w	r9, #0
    4afc:	bf08      	it	eq
    4afe:	4699      	moveq	r9, r3
    4b00:	4648      	mov	r0, r9
    4b02:	f000 fd81 	bl	5608 <strlen>
    4b06:	06fa      	lsls	r2, r7, #27
    4b08:	4682      	mov	sl, r0
    4b0a:	d503      	bpl.n	4b14 <__vfprintf+0x3c8>
    4b0c:	9b06      	ldr	r3, [sp, #24]
    4b0e:	4298      	cmp	r0, r3
    4b10:	bfa8      	it	ge
    4b12:	469a      	movge	sl, r3
    4b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4b16:	ebca 0b03 	rsb	fp, sl, r3
    4b1a:	f017 0301 	ands.w	r3, r7, #1
    4b1e:	9306      	str	r3, [sp, #24]
    4b20:	d131      	bne.n	4b86 <__vfprintf+0x43a>
    4b22:	f417 7f00 	tst.w	r7, #512	; 0x200
    4b26:	bf14      	ite	ne
    4b28:	f04f 0830 	movne.w	r8, #48	; 0x30
    4b2c:	f04f 0820 	moveq.w	r8, #32
    4b30:	2600      	movs	r6, #0
    4b32:	2700      	movs	r7, #0
    4b34:	f10b 32ff 	add.w	r2, fp, #4294967295
    4b38:	1b91      	subs	r1, r2, r6
    4b3a:	2900      	cmp	r1, #0
    4b3c:	db1c      	blt.n	4b78 <__vfprintf+0x42c>
    4b3e:	9b05      	ldr	r3, [sp, #20]
    4b40:	18f0      	adds	r0, r6, r3
    4b42:	eb47 71e3 	adc.w	r1, r7, r3, asr #31
    4b46:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    4b4a:	4290      	cmp	r0, r2
    4b4c:	eb71 0303 	sbcs.w	r3, r1, r3
    4b50:	da0e      	bge.n	4b70 <__vfprintf+0x424>
    4b52:	68a2      	ldr	r2, [r4, #8]
    4b54:	3a01      	subs	r2, #1
    4b56:	2a00      	cmp	r2, #0
    4b58:	60a2      	str	r2, [r4, #8]
    4b5a:	db05      	blt.n	4b68 <__vfprintf+0x41c>
    4b5c:	6822      	ldr	r2, [r4, #0]
    4b5e:	1c51      	adds	r1, r2, #1
    4b60:	6021      	str	r1, [r4, #0]
    4b62:	f882 8000 	strb.w	r8, [r2]
    4b66:	e003      	b.n	4b70 <__vfprintf+0x424>
    4b68:	4640      	mov	r0, r8
    4b6a:	4621      	mov	r1, r4
    4b6c:	f000 fdee 	bl	574c <__flsbuf>
    4b70:	3601      	adds	r6, #1
    4b72:	f147 0700 	adc.w	r7, r7, #0
    4b76:	e7dd      	b.n	4b34 <__vfprintf+0x3e8>
    4b78:	9b05      	ldr	r3, [sp, #20]
    4b7a:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    4b7e:	445b      	add	r3, fp
    4b80:	9305      	str	r3, [sp, #20]
    4b82:	ebcb 0b02 	rsb	fp, fp, r2
    4b86:	2600      	movs	r6, #0
    4b88:	2700      	movs	r7, #0
    4b8a:	45b2      	cmp	sl, r6
    4b8c:	9b05      	ldr	r3, [sp, #20]
    4b8e:	dd1c      	ble.n	4bca <__vfprintf+0x47e>
    4b90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4b94:	18f2      	adds	r2, r6, r3
    4b96:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    4b9a:	4282      	cmp	r2, r0
    4b9c:	418b      	sbcs	r3, r1
    4b9e:	da10      	bge.n	4bc2 <__vfprintf+0x476>
    4ba0:	68a3      	ldr	r3, [r4, #8]
    4ba2:	3b01      	subs	r3, #1
    4ba4:	2b00      	cmp	r3, #0
    4ba6:	60a3      	str	r3, [r4, #8]
    4ba8:	eb09 0306 	add.w	r3, r9, r6
    4bac:	db05      	blt.n	4bba <__vfprintf+0x46e>
    4bae:	6822      	ldr	r2, [r4, #0]
    4bb0:	1c51      	adds	r1, r2, #1
    4bb2:	6021      	str	r1, [r4, #0]
    4bb4:	781b      	ldrb	r3, [r3, #0]
    4bb6:	7013      	strb	r3, [r2, #0]
    4bb8:	e003      	b.n	4bc2 <__vfprintf+0x476>
    4bba:	7818      	ldrb	r0, [r3, #0]
    4bbc:	4621      	mov	r1, r4
    4bbe:	f000 fdc5 	bl	574c <__flsbuf>
    4bc2:	3601      	adds	r6, #1
    4bc4:	f147 0700 	adc.w	r7, r7, #0
    4bc8:	e7df      	b.n	4b8a <__vfprintf+0x43e>
    4bca:	f1ba 0f00 	cmp.w	sl, #0
    4bce:	bfa8      	it	ge
    4bd0:	4453      	addge	r3, sl
    4bd2:	9305      	str	r3, [sp, #20]
    4bd4:	9b06      	ldr	r3, [sp, #24]
    4bd6:	2b00      	cmp	r3, #0
    4bd8:	f000 83fe 	beq.w	53d8 <__vfprintf+0xc8c>
    4bdc:	2600      	movs	r6, #0
    4bde:	2700      	movs	r7, #0
    4be0:	43f3      	mvns	r3, r6
    4be2:	eb13 0f0b 	cmn.w	r3, fp
    4be6:	9b05      	ldr	r3, [sp, #20]
    4be8:	d41a      	bmi.n	4c20 <__vfprintf+0x4d4>
    4bea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4bee:	18f2      	adds	r2, r6, r3
    4bf0:	eb47 73e3 	adc.w	r3, r7, r3, asr #31
    4bf4:	4282      	cmp	r2, r0
    4bf6:	418b      	sbcs	r3, r1
    4bf8:	da0e      	bge.n	4c18 <__vfprintf+0x4cc>
    4bfa:	68a3      	ldr	r3, [r4, #8]
    4bfc:	3b01      	subs	r3, #1
    4bfe:	2b00      	cmp	r3, #0
    4c00:	60a3      	str	r3, [r4, #8]
    4c02:	db05      	blt.n	4c10 <__vfprintf+0x4c4>
    4c04:	6823      	ldr	r3, [r4, #0]
    4c06:	1c5a      	adds	r2, r3, #1
    4c08:	6022      	str	r2, [r4, #0]
    4c0a:	2220      	movs	r2, #32
    4c0c:	701a      	strb	r2, [r3, #0]
    4c0e:	e003      	b.n	4c18 <__vfprintf+0x4cc>
    4c10:	2020      	movs	r0, #32
    4c12:	4621      	mov	r1, r4
    4c14:	f000 fd9a 	bl	574c <__flsbuf>
    4c18:	3601      	adds	r6, #1
    4c1a:	f147 0700 	adc.w	r7, r7, #0
    4c1e:	e7df      	b.n	4be0 <__vfprintf+0x494>
    4c20:	f1bb 0f00 	cmp.w	fp, #0
    4c24:	bfa8      	it	ge
    4c26:	445b      	addge	r3, fp
    4c28:	e3d5      	b.n	53d6 <__vfprintf+0xc8a>
    4c2a:	067b      	lsls	r3, r7, #25
    4c2c:	d509      	bpl.n	4c42 <__vfprintf+0x4f6>
    4c2e:	f108 0807 	add.w	r8, r8, #7
    4c32:	f028 0807 	bic.w	r8, r8, #7
    4c36:	f108 0308 	add.w	r3, r8, #8
    4c3a:	930e      	str	r3, [sp, #56]	; 0x38
    4c3c:	e9d8 2300 	ldrd	r2, r3, [r8]
    4c40:	e005      	b.n	4c4e <__vfprintf+0x502>
    4c42:	f108 0304 	add.w	r3, r8, #4
    4c46:	f8d8 2000 	ldr.w	r2, [r8]
    4c4a:	930e      	str	r3, [sp, #56]	; 0x38
    4c4c:	2300      	movs	r3, #0
    4c4e:	063e      	lsls	r6, r7, #24
    4c50:	d501      	bpl.n	4c56 <__vfprintf+0x50a>
    4c52:	b292      	uxth	r2, r2
    4c54:	e003      	b.n	4c5e <__vfprintf+0x512>
    4c56:	05f8      	lsls	r0, r7, #23
    4c58:	d502      	bpl.n	4c60 <__vfprintf+0x514>
    4c5a:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4c5e:	2300      	movs	r3, #0
    4c60:	4951      	ldr	r1, [pc, #324]	; (4da8 <__vfprintf+0x65c>)
    4c62:	f017 0f08 	tst.w	r7, #8
    4c66:	4851      	ldr	r0, [pc, #324]	; (4dac <__vfprintf+0x660>)
    4c68:	bf08      	it	eq
    4c6a:	4608      	moveq	r0, r1
    4c6c:	06f9      	lsls	r1, r7, #27
    4c6e:	f140 80d6 	bpl.w	4e1e <__vfprintf+0x6d2>
    4c72:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4c76:	e0d2      	b.n	4e1e <__vfprintf+0x6d2>
    4c78:	067b      	lsls	r3, r7, #25
    4c7a:	d509      	bpl.n	4c90 <__vfprintf+0x544>
    4c7c:	f108 0807 	add.w	r8, r8, #7
    4c80:	f028 0807 	bic.w	r8, r8, #7
    4c84:	f108 0308 	add.w	r3, r8, #8
    4c88:	930e      	str	r3, [sp, #56]	; 0x38
    4c8a:	e9d8 2300 	ldrd	r2, r3, [r8]
    4c8e:	e005      	b.n	4c9c <__vfprintf+0x550>
    4c90:	f108 0304 	add.w	r3, r8, #4
    4c94:	f8d8 2000 	ldr.w	r2, [r8]
    4c98:	930e      	str	r3, [sp, #56]	; 0x38
    4c9a:	2300      	movs	r3, #0
    4c9c:	063e      	lsls	r6, r7, #24
    4c9e:	d501      	bpl.n	4ca4 <__vfprintf+0x558>
    4ca0:	b292      	uxth	r2, r2
    4ca2:	e003      	b.n	4cac <__vfprintf+0x560>
    4ca4:	05f8      	lsls	r0, r7, #23
    4ca6:	d502      	bpl.n	4cae <__vfprintf+0x562>
    4ca8:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4cac:	2300      	movs	r3, #0
    4cae:	493e      	ldr	r1, [pc, #248]	; (4da8 <__vfprintf+0x65c>)
    4cb0:	f017 0f08 	tst.w	r7, #8
    4cb4:	483e      	ldr	r0, [pc, #248]	; (4db0 <__vfprintf+0x664>)
    4cb6:	bf08      	it	eq
    4cb8:	4608      	moveq	r0, r1
    4cba:	06f9      	lsls	r1, r7, #27
    4cbc:	f140 80b1 	bpl.w	4e22 <__vfprintf+0x6d6>
    4cc0:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4cc4:	e0ad      	b.n	4e22 <__vfprintf+0x6d6>
    4cc6:	f108 0304 	add.w	r3, r8, #4
    4cca:	930e      	str	r3, [sp, #56]	; 0x38
    4ccc:	f8d8 2000 	ldr.w	r2, [r8]
    4cd0:	2300      	movs	r3, #0
    4cd2:	4938      	ldr	r1, [pc, #224]	; (4db4 <__vfprintf+0x668>)
    4cd4:	4836      	ldr	r0, [pc, #216]	; (4db0 <__vfprintf+0x664>)
    4cd6:	e0a7      	b.n	4e28 <__vfprintf+0x6dc>
    4cd8:	067e      	lsls	r6, r7, #25
    4cda:	d509      	bpl.n	4cf0 <__vfprintf+0x5a4>
    4cdc:	f108 0807 	add.w	r8, r8, #7
    4ce0:	f028 0807 	bic.w	r8, r8, #7
    4ce4:	f108 0308 	add.w	r3, r8, #8
    4ce8:	930e      	str	r3, [sp, #56]	; 0x38
    4cea:	e9d8 2300 	ldrd	r2, r3, [r8]
    4cee:	e005      	b.n	4cfc <__vfprintf+0x5b0>
    4cf0:	f108 0304 	add.w	r3, r8, #4
    4cf4:	f8d8 2000 	ldr.w	r2, [r8]
    4cf8:	930e      	str	r3, [sp, #56]	; 0x38
    4cfa:	2300      	movs	r3, #0
    4cfc:	0638      	lsls	r0, r7, #24
    4cfe:	d501      	bpl.n	4d04 <__vfprintf+0x5b8>
    4d00:	b292      	uxth	r2, r2
    4d02:	e003      	b.n	4d0c <__vfprintf+0x5c0>
    4d04:	05f9      	lsls	r1, r7, #23
    4d06:	d502      	bpl.n	4d0e <__vfprintf+0x5c2>
    4d08:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4d0c:	2300      	movs	r3, #0
    4d0e:	f017 0f08 	tst.w	r7, #8
    4d12:	4925      	ldr	r1, [pc, #148]	; (4da8 <__vfprintf+0x65c>)
    4d14:	4828      	ldr	r0, [pc, #160]	; (4db8 <__vfprintf+0x66c>)
    4d16:	e059      	b.n	4dcc <__vfprintf+0x680>
    4d18:	067e      	lsls	r6, r7, #25
    4d1a:	d509      	bpl.n	4d30 <__vfprintf+0x5e4>
    4d1c:	f108 0807 	add.w	r8, r8, #7
    4d20:	f028 0807 	bic.w	r8, r8, #7
    4d24:	f108 0308 	add.w	r3, r8, #8
    4d28:	930e      	str	r3, [sp, #56]	; 0x38
    4d2a:	e9d8 2300 	ldrd	r2, r3, [r8]
    4d2e:	e005      	b.n	4d3c <__vfprintf+0x5f0>
    4d30:	f108 0304 	add.w	r3, r8, #4
    4d34:	f8d8 2000 	ldr.w	r2, [r8]
    4d38:	930e      	str	r3, [sp, #56]	; 0x38
    4d3a:	2300      	movs	r3, #0
    4d3c:	0638      	lsls	r0, r7, #24
    4d3e:	d501      	bpl.n	4d44 <__vfprintf+0x5f8>
    4d40:	b292      	uxth	r2, r2
    4d42:	e003      	b.n	4d4c <__vfprintf+0x600>
    4d44:	05f9      	lsls	r1, r7, #23
    4d46:	d502      	bpl.n	4d4e <__vfprintf+0x602>
    4d48:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    4d4c:	2300      	movs	r3, #0
    4d4e:	f017 0110 	ands.w	r1, r7, #16
    4d52:	d068      	beq.n	4e26 <__vfprintf+0x6da>
    4d54:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4d58:	2100      	movs	r1, #0
    4d5a:	e064      	b.n	4e26 <__vfprintf+0x6da>
    4d5c:	067b      	lsls	r3, r7, #25
    4d5e:	d509      	bpl.n	4d74 <__vfprintf+0x628>
    4d60:	f108 0807 	add.w	r8, r8, #7
    4d64:	f028 0807 	bic.w	r8, r8, #7
    4d68:	f108 0308 	add.w	r3, r8, #8
    4d6c:	930e      	str	r3, [sp, #56]	; 0x38
    4d6e:	e9d8 2300 	ldrd	r2, r3, [r8]
    4d72:	e005      	b.n	4d80 <__vfprintf+0x634>
    4d74:	f8d8 2000 	ldr.w	r2, [r8]
    4d78:	f108 0304 	add.w	r3, r8, #4
    4d7c:	930e      	str	r3, [sp, #56]	; 0x38
    4d7e:	17d3      	asrs	r3, r2, #31
    4d80:	063e      	lsls	r6, r7, #24
    4d82:	d501      	bpl.n	4d88 <__vfprintf+0x63c>
    4d84:	b212      	sxth	r2, r2
    4d86:	e002      	b.n	4d8e <__vfprintf+0x642>
    4d88:	05f8      	lsls	r0, r7, #23
    4d8a:	d501      	bpl.n	4d90 <__vfprintf+0x644>
    4d8c:	b252      	sxtb	r2, r2
    4d8e:	17d3      	asrs	r3, r2, #31
    4d90:	2a00      	cmp	r2, #0
    4d92:	f173 0100 	sbcs.w	r1, r3, #0
    4d96:	da13      	bge.n	4dc0 <__vfprintf+0x674>
    4d98:	4252      	negs	r2, r2
    4d9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4d9e:	4807      	ldr	r0, [pc, #28]	; (4dbc <__vfprintf+0x670>)
    4da0:	e018      	b.n	4dd4 <__vfprintf+0x688>
    4da2:	bf00      	nop
    4da4:	0000765c 	.word	0x0000765c
    4da8:	000074a3 	.word	0x000074a3
    4dac:	00007663 	.word	0x00007663
    4db0:	00007666 	.word	0x00007666
    4db4:	0000767c 	.word	0x0000767c
    4db8:	00007669 	.word	0x00007669
    4dbc:	00007656 	.word	0x00007656
    4dc0:	07b9      	lsls	r1, r7, #30
    4dc2:	d406      	bmi.n	4dd2 <__vfprintf+0x686>
    4dc4:	49b6      	ldr	r1, [pc, #728]	; (50a0 <__vfprintf+0x954>)
    4dc6:	48b7      	ldr	r0, [pc, #732]	; (50a4 <__vfprintf+0x958>)
    4dc8:	f017 0f04 	tst.w	r7, #4
    4dcc:	bf08      	it	eq
    4dce:	4608      	moveq	r0, r1
    4dd0:	e000      	b.n	4dd4 <__vfprintf+0x688>
    4dd2:	48b5      	ldr	r0, [pc, #724]	; (50a8 <__vfprintf+0x95c>)
    4dd4:	f017 0110 	ands.w	r1, r7, #16
    4dd8:	d026      	beq.n	4e28 <__vfprintf+0x6dc>
    4dda:	f427 7700 	bic.w	r7, r7, #512	; 0x200
    4dde:	2100      	movs	r1, #0
    4de0:	e022      	b.n	4e28 <__vfprintf+0x6dc>
    4de2:	06fb      	lsls	r3, r7, #27
    4de4:	bf5e      	ittt	pl
    4de6:	230d      	movpl	r3, #13
    4de8:	f047 0710 	orrpl.w	r7, r7, #16
    4dec:	9306      	strpl	r3, [sp, #24]
    4dee:	9b06      	ldr	r3, [sp, #24]
    4df0:	f017 0f10 	tst.w	r7, #16
    4df4:	f108 0807 	add.w	r8, r8, #7
    4df8:	bf08      	it	eq
    4dfa:	2306      	moveq	r3, #6
    4dfc:	f028 0807 	bic.w	r8, r8, #7
    4e00:	9306      	str	r3, [sp, #24]
    4e02:	2100      	movs	r1, #0
    4e04:	f108 0308 	add.w	r3, r8, #8
    4e08:	930e      	str	r3, [sp, #56]	; 0x38
    4e0a:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
    4e0e:	e9d8 2300 	ldrd	r2, r3, [r8]
    4e12:	4608      	mov	r0, r1
    4e14:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
    4e18:	2200      	movs	r2, #0
    4e1a:	2300      	movs	r3, #0
    4e1c:	e004      	b.n	4e28 <__vfprintf+0x6dc>
    4e1e:	49a3      	ldr	r1, [pc, #652]	; (50ac <__vfprintf+0x960>)
    4e20:	e002      	b.n	4e28 <__vfprintf+0x6dc>
    4e22:	49a3      	ldr	r1, [pc, #652]	; (50b0 <__vfprintf+0x964>)
    4e24:	e000      	b.n	4e28 <__vfprintf+0x6dc>
    4e26:	489e      	ldr	r0, [pc, #632]	; (50a0 <__vfprintf+0x954>)
    4e28:	9e05      	ldr	r6, [sp, #20]
    4e2a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    4e2e:	ebba 0a06 	subs.w	sl, sl, r6
    4e32:	eb6b 7be6 	sbc.w	fp, fp, r6, asr #31
    4e36:	e9cd ab08 	strd	sl, fp, [sp, #32]
    4e3a:	9e06      	ldr	r6, [sp, #24]
    4e3c:	901f      	str	r0, [sp, #124]	; 0x7c
    4e3e:	f04f 30ff 	mov.w	r0, #4294967295
    4e42:	9020      	str	r0, [sp, #128]	; 0x80
    4e44:	9021      	str	r0, [sp, #132]	; 0x84
    4e46:	961e      	str	r6, [sp, #120]	; 0x78
    4e48:	2000      	movs	r0, #0
    4e4a:	f04f 0e55 	mov.w	lr, #85	; 0x55
    4e4e:	ae24      	add	r6, sp, #144	; 0x90
    4e50:	f800 e006 	strb.w	lr, [r0, r6]
    4e54:	3001      	adds	r0, #1
    4e56:	2820      	cmp	r0, #32
    4e58:	d1f7      	bne.n	4e4a <__vfprintf+0x6fe>
    4e5a:	f417 6f82 	tst.w	r7, #1040	; 0x410
    4e5e:	bf04      	itt	eq
    4e60:	2001      	moveq	r0, #1
    4e62:	901e      	streq	r0, [sp, #120]	; 0x78
    4e64:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
    4e68:	dc1b      	bgt.n	4ea2 <__vfprintf+0x756>
    4e6a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    4e6e:	f280 80d4 	bge.w	501a <__vfprintf+0x8ce>
    4e72:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    4e76:	f000 80d0 	beq.w	501a <__vfprintf+0x8ce>
    4e7a:	dc08      	bgt.n	4e8e <__vfprintf+0x742>
    4e7c:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    4e80:	f000 80cb 	beq.w	501a <__vfprintf+0x8ce>
    4e84:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
    4e88:	f040 80d7 	bne.w	503a <__vfprintf+0x8ee>
    4e8c:	e0c5      	b.n	501a <__vfprintf+0x8ce>
    4e8e:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    4e92:	f000 80c2 	beq.w	501a <__vfprintf+0x8ce>
    4e96:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
    4e9a:	d017      	beq.n	4ecc <__vfprintf+0x780>
    4e9c:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
    4ea0:	e011      	b.n	4ec6 <__vfprintf+0x77a>
    4ea2:	f1b9 0f70 	cmp.w	r9, #112	; 0x70
    4ea6:	d014      	beq.n	4ed2 <__vfprintf+0x786>
    4ea8:	dc08      	bgt.n	4ebc <__vfprintf+0x770>
    4eaa:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
    4eae:	d00d      	beq.n	4ecc <__vfprintf+0x780>
    4eb0:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
    4eb4:	f040 80c1 	bne.w	503a <__vfprintf+0x8ee>
    4eb8:	2100      	movs	r1, #0
    4eba:	e020      	b.n	4efe <__vfprintf+0x7b2>
    4ebc:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
    4ec0:	d004      	beq.n	4ecc <__vfprintf+0x780>
    4ec2:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    4ec6:	f040 80b8 	bne.w	503a <__vfprintf+0x8ee>
    4eca:	e002      	b.n	4ed2 <__vfprintf+0x786>
    4ecc:	f04f 0e00 	mov.w	lr, #0
    4ed0:	e027      	b.n	4f22 <__vfprintf+0x7d6>
    4ed2:	2000      	movs	r0, #0
    4ed4:	ea52 0e03 	orrs.w	lr, r2, r3
    4ed8:	4606      	mov	r6, r0
    4eda:	f000 80af 	beq.w	503c <__vfprintf+0x8f0>
    4ede:	f002 060f 	and.w	r6, r2, #15
    4ee2:	f811 e006 	ldrb.w	lr, [r1, r6]
    4ee6:	ae24      	add	r6, sp, #144	; 0x90
    4ee8:	f800 e006 	strb.w	lr, [r0, r6]
    4eec:	0916      	lsrs	r6, r2, #4
    4eee:	ea46 7603 	orr.w	r6, r6, r3, lsl #28
    4ef2:	ea4f 1e13 	mov.w	lr, r3, lsr #4
    4ef6:	4632      	mov	r2, r6
    4ef8:	4673      	mov	r3, lr
    4efa:	3001      	adds	r0, #1
    4efc:	e7ea      	b.n	4ed4 <__vfprintf+0x788>
    4efe:	ea52 0003 	orrs.w	r0, r2, r3
    4f02:	460e      	mov	r6, r1
    4f04:	f000 809a 	beq.w	503c <__vfprintf+0x8f0>
    4f08:	f002 0007 	and.w	r0, r2, #7
    4f0c:	3030      	adds	r0, #48	; 0x30
    4f0e:	ae24      	add	r6, sp, #144	; 0x90
    4f10:	5588      	strb	r0, [r1, r6]
    4f12:	08d0      	lsrs	r0, r2, #3
    4f14:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
    4f18:	08de      	lsrs	r6, r3, #3
    4f1a:	4602      	mov	r2, r0
    4f1c:	4633      	mov	r3, r6
    4f1e:	3101      	adds	r1, #1
    4f20:	e7ed      	b.n	4efe <__vfprintf+0x7b2>
    4f22:	ea52 0103 	orrs.w	r1, r2, r3
    4f26:	4676      	mov	r6, lr
    4f28:	f000 8088 	beq.w	503c <__vfprintf+0x8f0>
    4f2c:	0891      	lsrs	r1, r2, #2
    4f2e:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
    4f32:	9118      	str	r1, [sp, #96]	; 0x60
    4f34:	0899      	lsrs	r1, r3, #2
    4f36:	9119      	str	r1, [sp, #100]	; 0x64
    4f38:	0859      	lsrs	r1, r3, #1
    4f3a:	ea4f 0032 	mov.w	r0, r2, rrx
    4f3e:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
    4f42:	eb18 0800 	adds.w	r8, r8, r0
    4f46:	4640      	mov	r0, r8
    4f48:	eb49 0901 	adc.w	r9, r9, r1
    4f4c:	4649      	mov	r1, r9
    4f4e:	0906      	lsrs	r6, r0, #4
    4f50:	ea46 7609 	orr.w	r6, r6, r9, lsl #28
    4f54:	9610      	str	r6, [sp, #64]	; 0x40
    4f56:	090e      	lsrs	r6, r1, #4
    4f58:	9611      	str	r6, [sp, #68]	; 0x44
    4f5a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
    4f5e:	eb18 0800 	adds.w	r8, r8, r0
    4f62:	4640      	mov	r0, r8
    4f64:	eb49 0901 	adc.w	r9, r9, r1
    4f68:	4649      	mov	r1, r9
    4f6a:	0a06      	lsrs	r6, r0, #8
    4f6c:	ea46 6609 	orr.w	r6, r6, r9, lsl #24
    4f70:	9612      	str	r6, [sp, #72]	; 0x48
    4f72:	0a0e      	lsrs	r6, r1, #8
    4f74:	9613      	str	r6, [sp, #76]	; 0x4c
    4f76:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    4f7a:	eb18 0800 	adds.w	r8, r8, r0
    4f7e:	4640      	mov	r0, r8
    4f80:	eb49 0901 	adc.w	r9, r9, r1
    4f84:	4649      	mov	r1, r9
    4f86:	0c06      	lsrs	r6, r0, #16
    4f88:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
    4f8c:	9614      	str	r6, [sp, #80]	; 0x50
    4f8e:	0c0e      	lsrs	r6, r1, #16
    4f90:	9615      	str	r6, [sp, #84]	; 0x54
    4f92:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
    4f96:	eb18 0800 	adds.w	r8, r8, r0
    4f9a:	eb49 0901 	adc.w	r9, r9, r1
    4f9e:	4640      	mov	r0, r8
    4fa0:	4649      	mov	r1, r9
    4fa2:	2600      	movs	r6, #0
    4fa4:	961b      	str	r6, [sp, #108]	; 0x6c
    4fa6:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    4faa:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    4fae:	eb18 0800 	adds.w	r8, r8, r0
    4fb2:	eb49 0901 	adc.w	r9, r9, r1
    4fb6:	4640      	mov	r0, r8
    4fb8:	4649      	mov	r1, r9
    4fba:	08c6      	lsrs	r6, r0, #3
    4fbc:	08c9      	lsrs	r1, r1, #3
    4fbe:	1d90      	adds	r0, r2, #6
    4fc0:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
    4fc4:	910d      	str	r1, [sp, #52]	; 0x34
    4fc6:	f143 0100 	adc.w	r1, r3, #0
    4fca:	230a      	movs	r3, #10
    4fcc:	fba6 8903 	umull	r8, r9, r6, r3
    4fd0:	960c      	str	r6, [sp, #48]	; 0x30
    4fd2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4fd4:	ebb0 0008 	subs.w	r0, r0, r8
    4fd8:	fb03 9906 	mla	r9, r3, r6, r9
    4fdc:	ea4f 1610 	mov.w	r6, r0, lsr #4
    4fe0:	eb61 0109 	sbc.w	r1, r1, r9
    4fe4:	ea46 7601 	orr.w	r6, r6, r1, lsl #28
    4fe8:	0909      	lsrs	r1, r1, #4
    4fea:	9616      	str	r6, [sp, #88]	; 0x58
    4fec:	9117      	str	r1, [sp, #92]	; 0x5c
    4fee:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    4ff2:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
    4ff6:	eb10 0008 	adds.w	r0, r0, r8
    4ffa:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4ffe:	f102 0230 	add.w	r2, r2, #48	; 0x30
    5002:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    5006:	eb41 0109 	adc.w	r1, r1, r9
    500a:	ab24      	add	r3, sp, #144	; 0x90
    500c:	f80e 2003 	strb.w	r2, [lr, r3]
    5010:	f10e 0e01 	add.w	lr, lr, #1
    5014:	4602      	mov	r2, r0
    5016:	460b      	mov	r3, r1
    5018:	e783      	b.n	4f22 <__vfprintf+0x7d6>
    501a:	ab1f      	add	r3, sp, #124	; 0x7c
    501c:	9300      	str	r3, [sp, #0]
    501e:	ab1e      	add	r3, sp, #120	; 0x78
    5020:	9301      	str	r3, [sp, #4]
    5022:	ab20      	add	r3, sp, #128	; 0x80
    5024:	9302      	str	r3, [sp, #8]
    5026:	ab21      	add	r3, sp, #132	; 0x84
    5028:	9303      	str	r3, [sp, #12]
    502a:	9e38      	ldr	r6, [sp, #224]	; 0xe0
    502c:	4648      	mov	r0, r9
    502e:	a922      	add	r1, sp, #136	; 0x88
    5030:	aa24      	add	r2, sp, #144	; 0x90
    5032:	463b      	mov	r3, r7
    5034:	47b0      	blx	r6
    5036:	4606      	mov	r6, r0
    5038:	e000      	b.n	503c <__vfprintf+0x8f0>
    503a:	2600      	movs	r6, #0
    503c:	f417 6380 	ands.w	r3, r7, #1024	; 0x400
    5040:	931c      	str	r3, [sp, #112]	; 0x70
    5042:	d00e      	beq.n	5062 <__vfprintf+0x916>
    5044:	2300      	movs	r3, #0
    5046:	931e      	str	r3, [sp, #120]	; 0x78
    5048:	9b20      	ldr	r3, [sp, #128]	; 0x80
    504a:	2b00      	cmp	r3, #0
    504c:	bfc4      	itt	gt
    504e:	f103 33ff 	addgt.w	r3, r3, #4294967295
    5052:	931e      	strgt	r3, [sp, #120]	; 0x78
    5054:	9b21      	ldr	r3, [sp, #132]	; 0x84
    5056:	2b00      	cmp	r3, #0
    5058:	dd08      	ble.n	506c <__vfprintf+0x920>
    505a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    505c:	3b01      	subs	r3, #1
    505e:	4413      	add	r3, r2
    5060:	e003      	b.n	506a <__vfprintf+0x91e>
    5062:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5064:	1b9b      	subs	r3, r3, r6
    5066:	bf48      	it	mi
    5068:	2300      	movmi	r3, #0
    506a:	931e      	str	r3, [sp, #120]	; 0x78
    506c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    506e:	981f      	ldr	r0, [sp, #124]	; 0x7c
    5070:	eb06 0803 	add.w	r8, r6, r3
    5074:	f000 fac8 	bl	5608 <strlen>
    5078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    507a:	ebc8 0b03 	rsb	fp, r8, r3
    507e:	f007 0301 	and.w	r3, r7, #1
    5082:	930f      	str	r3, [sp, #60]	; 0x3c
    5084:	f240 2301 	movw	r3, #513	; 0x201
    5088:	403b      	ands	r3, r7
    508a:	ebc0 0b0b 	rsb	fp, r0, fp
    508e:	b18b      	cbz	r3, 50b4 <__vfprintf+0x968>
    5090:	f04f 0a00 	mov.w	sl, #0
    5094:	f04f 0800 	mov.w	r8, #0
    5098:	f04f 0900 	mov.w	r9, #0
    509c:	e040      	b.n	5120 <__vfprintf+0x9d4>
    509e:	bf00      	nop
    50a0:	000074a3 	.word	0x000074a3
    50a4:	00007626 	.word	0x00007626
    50a8:	00007624 	.word	0x00007624
    50ac:	0000766b 	.word	0x0000766b
    50b0:	0000767c 	.word	0x0000767c
    50b4:	f04f 0800 	mov.w	r8, #0
    50b8:	f04f 0900 	mov.w	r9, #0
    50bc:	f10b 33ff 	add.w	r3, fp, #4294967295
    50c0:	ebc8 0203 	rsb	r2, r8, r3
    50c4:	2a00      	cmp	r2, #0
    50c6:	db19      	blt.n	50fc <__vfprintf+0x9b0>
    50c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    50cc:	4590      	cmp	r8, r2
    50ce:	eb79 0303 	sbcs.w	r3, r9, r3
    50d2:	da0e      	bge.n	50f2 <__vfprintf+0x9a6>
    50d4:	68a3      	ldr	r3, [r4, #8]
    50d6:	3b01      	subs	r3, #1
    50d8:	2b00      	cmp	r3, #0
    50da:	60a3      	str	r3, [r4, #8]
    50dc:	db05      	blt.n	50ea <__vfprintf+0x99e>
    50de:	6823      	ldr	r3, [r4, #0]
    50e0:	1c5a      	adds	r2, r3, #1
    50e2:	6022      	str	r2, [r4, #0]
    50e4:	2220      	movs	r2, #32
    50e6:	701a      	strb	r2, [r3, #0]
    50e8:	e003      	b.n	50f2 <__vfprintf+0x9a6>
    50ea:	2020      	movs	r0, #32
    50ec:	4621      	mov	r1, r4
    50ee:	f000 fb2d 	bl	574c <__flsbuf>
    50f2:	f118 0801 	adds.w	r8, r8, #1
    50f6:	f149 0900 	adc.w	r9, r9, #0
    50fa:	e7df      	b.n	50bc <__vfprintf+0x970>
    50fc:	ea2b 7aeb 	bic.w	sl, fp, fp, asr #31
    5100:	ebca 0b03 	rsb	fp, sl, r3
    5104:	e7c6      	b.n	5094 <__vfprintf+0x948>
    5106:	eb18 020a 	adds.w	r2, r8, sl
    510a:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    510e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5112:	4282      	cmp	r2, r0
    5114:	418b      	sbcs	r3, r1
    5116:	db0e      	blt.n	5136 <__vfprintf+0x9ea>
    5118:	f118 0801 	adds.w	r8, r8, #1
    511c:	f149 0900 	adc.w	r9, r9, #0
    5120:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    5122:	eb0a 0308 	add.w	r3, sl, r8
    5126:	1c51      	adds	r1, r2, #1
    5128:	911f      	str	r1, [sp, #124]	; 0x7c
    512a:	f892 e000 	ldrb.w	lr, [r2]
    512e:	f1be 0f00 	cmp.w	lr, #0
    5132:	d1e8      	bne.n	5106 <__vfprintf+0x9ba>
    5134:	e00f      	b.n	5156 <__vfprintf+0xa0a>
    5136:	68a3      	ldr	r3, [r4, #8]
    5138:	3b01      	subs	r3, #1
    513a:	2b00      	cmp	r3, #0
    513c:	60a3      	str	r3, [r4, #8]
    513e:	db05      	blt.n	514c <__vfprintf+0xa00>
    5140:	6823      	ldr	r3, [r4, #0]
    5142:	1c5a      	adds	r2, r3, #1
    5144:	6022      	str	r2, [r4, #0]
    5146:	f883 e000 	strb.w	lr, [r3]
    514a:	e7e5      	b.n	5118 <__vfprintf+0x9cc>
    514c:	4670      	mov	r0, lr
    514e:	4621      	mov	r1, r4
    5150:	f000 fafc 	bl	574c <__flsbuf>
    5154:	e7e0      	b.n	5118 <__vfprintf+0x9cc>
    5156:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5158:	469a      	mov	sl, r3
    515a:	2a00      	cmp	r2, #0
    515c:	d135      	bne.n	51ca <__vfprintf+0xa7e>
    515e:	f417 7f00 	tst.w	r7, #512	; 0x200
    5162:	bf14      	ite	ne
    5164:	2730      	movne	r7, #48	; 0x30
    5166:	2720      	moveq	r7, #32
    5168:	2000      	movs	r0, #0
    516a:	2100      	movs	r1, #0
    516c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    5170:	9906      	ldr	r1, [sp, #24]
    5172:	f10b 32ff 	add.w	r2, fp, #4294967295
    5176:	1a51      	subs	r1, r2, r1
    5178:	2900      	cmp	r1, #0
    517a:	db20      	blt.n	51be <__vfprintf+0xa72>
    517c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    5180:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    5184:	18c0      	adds	r0, r0, r3
    5186:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
    518a:	4540      	cmp	r0, r8
    518c:	eb71 0209 	sbcs.w	r2, r1, r9
    5190:	da0f      	bge.n	51b2 <__vfprintf+0xa66>
    5192:	68a2      	ldr	r2, [r4, #8]
    5194:	3a01      	subs	r2, #1
    5196:	2a00      	cmp	r2, #0
    5198:	60a2      	str	r2, [r4, #8]
    519a:	db04      	blt.n	51a6 <__vfprintf+0xa5a>
    519c:	6822      	ldr	r2, [r4, #0]
    519e:	1c51      	adds	r1, r2, #1
    51a0:	6021      	str	r1, [r4, #0]
    51a2:	7017      	strb	r7, [r2, #0]
    51a4:	e005      	b.n	51b2 <__vfprintf+0xa66>
    51a6:	4638      	mov	r0, r7
    51a8:	4621      	mov	r1, r4
    51aa:	931d      	str	r3, [sp, #116]	; 0x74
    51ac:	f000 face 	bl	574c <__flsbuf>
    51b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    51b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    51b6:	3001      	adds	r0, #1
    51b8:	f141 0100 	adc.w	r1, r1, #0
    51bc:	e7d6      	b.n	516c <__vfprintf+0xa20>
    51be:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
    51c2:	eb03 0a0b 	add.w	sl, r3, fp
    51c6:	ebcb 0b02 	rsb	fp, fp, r2
    51ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    51cc:	2b00      	cmp	r3, #0
    51ce:	d07c      	beq.n	52ca <__vfprintf+0xb7e>
    51d0:	2700      	movs	r7, #0
    51d2:	42b7      	cmp	r7, r6
    51d4:	f280 80d5 	bge.w	5382 <__vfprintf+0xc36>
    51d8:	ab24      	add	r3, sp, #144	; 0x90
    51da:	f817 e003 	ldrb.w	lr, [r7, r3]
    51de:	f1be 0f3c 	cmp.w	lr, #60	; 0x3c
    51e2:	d007      	beq.n	51f4 <__vfprintf+0xaa8>
    51e4:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
    51e8:	d151      	bne.n	528e <__vfprintf+0xb42>
    51ea:	f04f 0800 	mov.w	r8, #0
    51ee:	f04f 0900 	mov.w	r9, #0
    51f2:	e034      	b.n	525e <__vfprintf+0xb12>
    51f4:	f04f 0800 	mov.w	r8, #0
    51f8:	f04f 0900 	mov.w	r9, #0
    51fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
    51fe:	eb0a 0308 	add.w	r3, sl, r8
    5202:	3a01      	subs	r2, #1
    5204:	2a00      	cmp	r2, #0
    5206:	9220      	str	r2, [sp, #128]	; 0x80
    5208:	db5c      	blt.n	52c4 <__vfprintf+0xb78>
    520a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    520e:	eb18 020a 	adds.w	r2, r8, sl
    5212:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    5216:	4282      	cmp	r2, r0
    5218:	418b      	sbcs	r3, r1
    521a:	da0e      	bge.n	523a <__vfprintf+0xaee>
    521c:	68a3      	ldr	r3, [r4, #8]
    521e:	3b01      	subs	r3, #1
    5220:	2b00      	cmp	r3, #0
    5222:	60a3      	str	r3, [r4, #8]
    5224:	db05      	blt.n	5232 <__vfprintf+0xae6>
    5226:	6823      	ldr	r3, [r4, #0]
    5228:	1c5a      	adds	r2, r3, #1
    522a:	6022      	str	r2, [r4, #0]
    522c:	2230      	movs	r2, #48	; 0x30
    522e:	701a      	strb	r2, [r3, #0]
    5230:	e003      	b.n	523a <__vfprintf+0xaee>
    5232:	2030      	movs	r0, #48	; 0x30
    5234:	4621      	mov	r1, r4
    5236:	f000 fa89 	bl	574c <__flsbuf>
    523a:	f118 0801 	adds.w	r8, r8, #1
    523e:	f149 0900 	adc.w	r9, r9, #0
    5242:	e7db      	b.n	51fc <__vfprintf+0xab0>
    5244:	eb18 020a 	adds.w	r2, r8, sl
    5248:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    524c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5250:	4282      	cmp	r2, r0
    5252:	418b      	sbcs	r3, r1
    5254:	db0b      	blt.n	526e <__vfprintf+0xb22>
    5256:	f118 0801 	adds.w	r8, r8, #1
    525a:	f149 0900 	adc.w	r9, r9, #0
    525e:	9a21      	ldr	r2, [sp, #132]	; 0x84
    5260:	eb0a 0308 	add.w	r3, sl, r8
    5264:	3a01      	subs	r2, #1
    5266:	2a00      	cmp	r2, #0
    5268:	9221      	str	r2, [sp, #132]	; 0x84
    526a:	daeb      	bge.n	5244 <__vfprintf+0xaf8>
    526c:	e02a      	b.n	52c4 <__vfprintf+0xb78>
    526e:	68a3      	ldr	r3, [r4, #8]
    5270:	3b01      	subs	r3, #1
    5272:	2b00      	cmp	r3, #0
    5274:	60a3      	str	r3, [r4, #8]
    5276:	db05      	blt.n	5284 <__vfprintf+0xb38>
    5278:	6823      	ldr	r3, [r4, #0]
    527a:	1c5a      	adds	r2, r3, #1
    527c:	6022      	str	r2, [r4, #0]
    527e:	2230      	movs	r2, #48	; 0x30
    5280:	701a      	strb	r2, [r3, #0]
    5282:	e7e8      	b.n	5256 <__vfprintf+0xb0a>
    5284:	4621      	mov	r1, r4
    5286:	2030      	movs	r0, #48	; 0x30
    5288:	f000 fa60 	bl	574c <__flsbuf>
    528c:	e7e3      	b.n	5256 <__vfprintf+0xb0a>
    528e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5292:	ea4f 79ea 	mov.w	r9, sl, asr #31
    5296:	4582      	cmp	sl, r0
    5298:	eb79 0201 	sbcs.w	r2, r9, r1
    529c:	f10a 0301 	add.w	r3, sl, #1
    52a0:	da10      	bge.n	52c4 <__vfprintf+0xb78>
    52a2:	68a2      	ldr	r2, [r4, #8]
    52a4:	3a01      	subs	r2, #1
    52a6:	2a00      	cmp	r2, #0
    52a8:	60a2      	str	r2, [r4, #8]
    52aa:	db05      	blt.n	52b8 <__vfprintf+0xb6c>
    52ac:	6822      	ldr	r2, [r4, #0]
    52ae:	1c51      	adds	r1, r2, #1
    52b0:	6021      	str	r1, [r4, #0]
    52b2:	f882 e000 	strb.w	lr, [r2]
    52b6:	e005      	b.n	52c4 <__vfprintf+0xb78>
    52b8:	4670      	mov	r0, lr
    52ba:	4621      	mov	r1, r4
    52bc:	9306      	str	r3, [sp, #24]
    52be:	f000 fa45 	bl	574c <__flsbuf>
    52c2:	9b06      	ldr	r3, [sp, #24]
    52c4:	3701      	adds	r7, #1
    52c6:	469a      	mov	sl, r3
    52c8:	e783      	b.n	51d2 <__vfprintf+0xa86>
    52ca:	f04f 0800 	mov.w	r8, #0
    52ce:	f04f 0900 	mov.w	r9, #0
    52d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    52d4:	eb0a 0708 	add.w	r7, sl, r8
    52d8:	3b01      	subs	r3, #1
    52da:	2b00      	cmp	r3, #0
    52dc:	931e      	str	r3, [sp, #120]	; 0x78
    52de:	db1c      	blt.n	531a <__vfprintf+0xbce>
    52e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    52e4:	eb18 020a 	adds.w	r2, r8, sl
    52e8:	eb49 73ea 	adc.w	r3, r9, sl, asr #31
    52ec:	4282      	cmp	r2, r0
    52ee:	418b      	sbcs	r3, r1
    52f0:	da0e      	bge.n	5310 <__vfprintf+0xbc4>
    52f2:	68a3      	ldr	r3, [r4, #8]
    52f4:	3b01      	subs	r3, #1
    52f6:	2b00      	cmp	r3, #0
    52f8:	60a3      	str	r3, [r4, #8]
    52fa:	db05      	blt.n	5308 <__vfprintf+0xbbc>
    52fc:	6823      	ldr	r3, [r4, #0]
    52fe:	1c5a      	adds	r2, r3, #1
    5300:	6022      	str	r2, [r4, #0]
    5302:	2230      	movs	r2, #48	; 0x30
    5304:	701a      	strb	r2, [r3, #0]
    5306:	e003      	b.n	5310 <__vfprintf+0xbc4>
    5308:	2030      	movs	r0, #48	; 0x30
    530a:	4621      	mov	r1, r4
    530c:	f000 fa1e 	bl	574c <__flsbuf>
    5310:	f118 0801 	adds.w	r8, r8, #1
    5314:	f149 0900 	adc.w	r9, r9, #0
    5318:	e7db      	b.n	52d2 <__vfprintf+0xb86>
    531a:	ab2c      	add	r3, sp, #176	; 0xb0
    531c:	eb03 0a06 	add.w	sl, r3, r6
    5320:	f1aa 0a21 	sub.w	sl, sl, #33	; 0x21
    5324:	f04f 0800 	mov.w	r8, #0
    5328:	f04f 0900 	mov.w	r9, #0
    532c:	ebc8 0306 	rsb	r3, r8, r6
    5330:	2b00      	cmp	r3, #0
    5332:	dd20      	ble.n	5376 <__vfprintf+0xc2a>
    5334:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5338:	eb18 0207 	adds.w	r2, r8, r7
    533c:	eb49 73e7 	adc.w	r3, r9, r7, asr #31
    5340:	4282      	cmp	r2, r0
    5342:	418b      	sbcs	r3, r1
    5344:	da10      	bge.n	5368 <__vfprintf+0xc1c>
    5346:	68a3      	ldr	r3, [r4, #8]
    5348:	3b01      	subs	r3, #1
    534a:	2b00      	cmp	r3, #0
    534c:	60a3      	str	r3, [r4, #8]
    534e:	db06      	blt.n	535e <__vfprintf+0xc12>
    5350:	6823      	ldr	r3, [r4, #0]
    5352:	1c5a      	adds	r2, r3, #1
    5354:	6022      	str	r2, [r4, #0]
    5356:	f89a 2000 	ldrb.w	r2, [sl]
    535a:	701a      	strb	r2, [r3, #0]
    535c:	e004      	b.n	5368 <__vfprintf+0xc1c>
    535e:	f89a 0000 	ldrb.w	r0, [sl]
    5362:	4621      	mov	r1, r4
    5364:	f000 f9f2 	bl	574c <__flsbuf>
    5368:	f118 0801 	adds.w	r8, r8, #1
    536c:	f10a 3aff 	add.w	sl, sl, #4294967295
    5370:	f149 0900 	adc.w	r9, r9, #0
    5374:	e7da      	b.n	532c <__vfprintf+0xbe0>
    5376:	2e00      	cmp	r6, #0
    5378:	bfac      	ite	ge
    537a:	eb07 0a06 	addge.w	sl, r7, r6
    537e:	f107 0a00 	addlt.w	sl, r7, #0
    5382:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5384:	b32b      	cbz	r3, 53d2 <__vfprintf+0xc86>
    5386:	2600      	movs	r6, #0
    5388:	2700      	movs	r7, #0
    538a:	43f3      	mvns	r3, r6
    538c:	eb13 0f0b 	cmn.w	r3, fp
    5390:	d41b      	bmi.n	53ca <__vfprintf+0xc7e>
    5392:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5396:	eb16 020a 	adds.w	r2, r6, sl
    539a:	eb47 73ea 	adc.w	r3, r7, sl, asr #31
    539e:	4282      	cmp	r2, r0
    53a0:	418b      	sbcs	r3, r1
    53a2:	da0e      	bge.n	53c2 <__vfprintf+0xc76>
    53a4:	68a3      	ldr	r3, [r4, #8]
    53a6:	3b01      	subs	r3, #1
    53a8:	2b00      	cmp	r3, #0
    53aa:	60a3      	str	r3, [r4, #8]
    53ac:	db05      	blt.n	53ba <__vfprintf+0xc6e>
    53ae:	6823      	ldr	r3, [r4, #0]
    53b0:	1c5a      	adds	r2, r3, #1
    53b2:	6022      	str	r2, [r4, #0]
    53b4:	2220      	movs	r2, #32
    53b6:	701a      	strb	r2, [r3, #0]
    53b8:	e003      	b.n	53c2 <__vfprintf+0xc76>
    53ba:	2020      	movs	r0, #32
    53bc:	4621      	mov	r1, r4
    53be:	f000 f9c5 	bl	574c <__flsbuf>
    53c2:	3601      	adds	r6, #1
    53c4:	f147 0700 	adc.w	r7, r7, #0
    53c8:	e7df      	b.n	538a <__vfprintf+0xc3e>
    53ca:	f1bb 0f00 	cmp.w	fp, #0
    53ce:	bfa8      	it	ge
    53d0:	44da      	addge	sl, fp
    53d2:	9b05      	ldr	r3, [sp, #20]
    53d4:	4453      	add	r3, sl
    53d6:	9305      	str	r3, [sp, #20]
    53d8:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    53dc:	9e05      	ldr	r6, [sp, #20]
    53de:	9605      	str	r6, [sp, #20]
    53e0:	462b      	mov	r3, r5
    53e2:	f7ff b9be 	b.w	4762 <__vfprintf+0x16>
    53e6:	9805      	ldr	r0, [sp, #20]
    53e8:	b02d      	add	sp, #180	; 0xb4
    53ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53ee:	bf00      	nop

000053f0 <ch_val>:
    53f0:	4b0a      	ldr	r3, [pc, #40]	; (541c <ch_val+0x2c>)
    53f2:	4403      	add	r3, r0
    53f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
    53f8:	069a      	lsls	r2, r3, #26
    53fa:	d501      	bpl.n	5400 <ch_val+0x10>
    53fc:	3830      	subs	r0, #48	; 0x30
    53fe:	e008      	b.n	5412 <ch_val+0x22>
    5400:	071a      	lsls	r2, r3, #28
    5402:	d501      	bpl.n	5408 <ch_val+0x18>
    5404:	3857      	subs	r0, #87	; 0x57
    5406:	e004      	b.n	5412 <ch_val+0x22>
    5408:	06db      	lsls	r3, r3, #27
    540a:	bf4c      	ite	mi
    540c:	3837      	submi	r0, #55	; 0x37
    540e:	f04f 30ff 	movpl.w	r0, #4294967295
    5412:	4288      	cmp	r0, r1
    5414:	bfa8      	it	ge
    5416:	f04f 30ff 	movge.w	r0, #4294967295
    541a:	4770      	bx	lr
    541c:	000074a4 	.word	0x000074a4

00005420 <_strtoul>:
    5420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5424:	4680      	mov	r8, r0
    5426:	4689      	mov	r9, r1
    5428:	4616      	mov	r6, r2
    542a:	4603      	mov	r3, r0
    542c:	461d      	mov	r5, r3
    542e:	f815 0b01 	ldrb.w	r0, [r5], #1
    5432:	b1d0      	cbz	r0, 546a <_strtoul+0x4a>
    5434:	4a27      	ldr	r2, [pc, #156]	; (54d4 <_strtoul+0xb4>)
    5436:	4402      	add	r2, r0
    5438:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
    543c:	07d2      	lsls	r2, r2, #31
    543e:	d501      	bpl.n	5444 <_strtoul+0x24>
    5440:	462b      	mov	r3, r5
    5442:	e7f3      	b.n	542c <_strtoul+0xc>
    5444:	2830      	cmp	r0, #48	; 0x30
    5446:	d110      	bne.n	546a <_strtoul+0x4a>
    5448:	7858      	ldrb	r0, [r3, #1]
    544a:	1c9d      	adds	r5, r3, #2
    544c:	f000 02df 	and.w	r2, r0, #223	; 0xdf
    5450:	2a58      	cmp	r2, #88	; 0x58
    5452:	d106      	bne.n	5462 <_strtoul+0x42>
    5454:	f036 0710 	bics.w	r7, r6, #16
    5458:	d13a      	bne.n	54d0 <_strtoul+0xb0>
    545a:	1cdd      	adds	r5, r3, #3
    545c:	7898      	ldrb	r0, [r3, #2]
    545e:	2610      	movs	r6, #16
    5460:	e008      	b.n	5474 <_strtoul+0x54>
    5462:	2701      	movs	r7, #1
    5464:	b936      	cbnz	r6, 5474 <_strtoul+0x54>
    5466:	2608      	movs	r6, #8
    5468:	e004      	b.n	5474 <_strtoul+0x54>
    546a:	b10e      	cbz	r6, 5470 <_strtoul+0x50>
    546c:	2700      	movs	r7, #0
    546e:	e001      	b.n	5474 <_strtoul+0x54>
    5470:	4637      	mov	r7, r6
    5472:	260a      	movs	r6, #10
    5474:	2400      	movs	r4, #0
    5476:	46a2      	mov	sl, r4
    5478:	46a3      	mov	fp, r4
    547a:	4631      	mov	r1, r6
    547c:	f7ff ffb8 	bl	53f0 <ch_val>
    5480:	2800      	cmp	r0, #0
    5482:	db0e      	blt.n	54a2 <_strtoul+0x82>
    5484:	fb06 0004 	mla	r0, r6, r4, r0
    5488:	0c03      	lsrs	r3, r0, #16
    548a:	fb06 3a0a 	mla	sl, r6, sl, r3
    548e:	f5ba 3f80 	cmp.w	sl, #65536	; 0x10000
    5492:	b284      	uxth	r4, r0
    5494:	bf28      	it	cs
    5496:	f04f 0b01 	movcs.w	fp, #1
    549a:	f815 0b01 	ldrb.w	r0, [r5], #1
    549e:	2701      	movs	r7, #1
    54a0:	e7eb      	b.n	547a <_strtoul+0x5a>
    54a2:	f1b9 0f00 	cmp.w	r9, #0
    54a6:	d005      	beq.n	54b4 <_strtoul+0x94>
    54a8:	b10f      	cbz	r7, 54ae <_strtoul+0x8e>
    54aa:	3d01      	subs	r5, #1
    54ac:	e000      	b.n	54b0 <_strtoul+0x90>
    54ae:	4645      	mov	r5, r8
    54b0:	f8c9 5000 	str.w	r5, [r9]
    54b4:	f1bb 0f00 	cmp.w	fp, #0
    54b8:	d006      	beq.n	54c8 <_strtoul+0xa8>
    54ba:	4b07      	ldr	r3, [pc, #28]	; (54d8 <_strtoul+0xb8>)
    54bc:	2222      	movs	r2, #34	; 0x22
    54be:	601a      	str	r2, [r3, #0]
    54c0:	f04f 30ff 	mov.w	r0, #4294967295
    54c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54c8:	ea44 400a 	orr.w	r0, r4, sl, lsl #16
    54cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54d0:	2701      	movs	r7, #1
    54d2:	e7cf      	b.n	5474 <_strtoul+0x54>
    54d4:	000074a4 	.word	0x000074a4
    54d8:	10000c98 	.word	0x10000c98

000054dc <strtol>:
    54dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    54de:	460e      	mov	r6, r1
    54e0:	4607      	mov	r7, r0
    54e2:	4601      	mov	r1, r0
    54e4:	460d      	mov	r5, r1
    54e6:	f815 3b01 	ldrb.w	r3, [r5], #1
    54ea:	b17b      	cbz	r3, 550c <strtol+0x30>
    54ec:	4817      	ldr	r0, [pc, #92]	; (554c <strtol+0x70>)
    54ee:	4418      	add	r0, r3
    54f0:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
    54f4:	f014 0401 	ands.w	r4, r4, #1
    54f8:	d001      	beq.n	54fe <strtol+0x22>
    54fa:	4629      	mov	r1, r5
    54fc:	e7f2      	b.n	54e4 <strtol+0x8>
    54fe:	2b2b      	cmp	r3, #43	; 0x2b
    5500:	d006      	beq.n	5510 <strtol+0x34>
    5502:	2b2d      	cmp	r3, #45	; 0x2d
    5504:	d102      	bne.n	550c <strtol+0x30>
    5506:	f44f 7400 	mov.w	r4, #512	; 0x200
    550a:	e001      	b.n	5510 <strtol+0x34>
    550c:	460d      	mov	r5, r1
    550e:	2400      	movs	r4, #0
    5510:	4628      	mov	r0, r5
    5512:	a901      	add	r1, sp, #4
    5514:	f7ff ff84 	bl	5420 <_strtoul>
    5518:	b126      	cbz	r6, 5524 <strtol+0x48>
    551a:	9b01      	ldr	r3, [sp, #4]
    551c:	42ab      	cmp	r3, r5
    551e:	bf08      	it	eq
    5520:	463b      	moveq	r3, r7
    5522:	6033      	str	r3, [r6, #0]
    5524:	05a3      	lsls	r3, r4, #22
    5526:	d508      	bpl.n	553a <strtol+0x5e>
    5528:	4240      	negs	r0, r0
    552a:	2800      	cmp	r0, #0
    552c:	dd0c      	ble.n	5548 <strtol+0x6c>
    552e:	4b08      	ldr	r3, [pc, #32]	; (5550 <strtol+0x74>)
    5530:	2222      	movs	r2, #34	; 0x22
    5532:	601a      	str	r2, [r3, #0]
    5534:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    5538:	e006      	b.n	5548 <strtol+0x6c>
    553a:	2800      	cmp	r0, #0
    553c:	bfbf      	itttt	lt
    553e:	4b04      	ldrlt	r3, [pc, #16]	; (5550 <strtol+0x74>)
    5540:	2222      	movlt	r2, #34	; 0x22
    5542:	601a      	strlt	r2, [r3, #0]
    5544:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
    5548:	b003      	add	sp, #12
    554a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    554c:	000074a4 	.word	0x000074a4
    5550:	10000c98 	.word	0x10000c98

00005554 <atoi>:
    5554:	b538      	push	{r3, r4, r5, lr}
    5556:	4c04      	ldr	r4, [pc, #16]	; (5568 <atoi+0x14>)
    5558:	2100      	movs	r1, #0
    555a:	6825      	ldr	r5, [r4, #0]
    555c:	220a      	movs	r2, #10
    555e:	f7ff ffbd 	bl	54dc <strtol>
    5562:	6025      	str	r5, [r4, #0]
    5564:	bd38      	pop	{r3, r4, r5, pc}
    5566:	bf00      	nop
    5568:	10000c98 	.word	0x10000c98

0000556c <setvbuf>:
    556c:	b570      	push	{r4, r5, r6, lr}
    556e:	68c4      	ldr	r4, [r0, #12]
    5570:	07a5      	lsls	r5, r4, #30
    5572:	d017      	beq.n	55a4 <setvbuf+0x38>
    5574:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    5578:	d009      	beq.n	558e <setvbuf+0x22>
    557a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    557e:	d003      	beq.n	5588 <setvbuf+0x1c>
    5580:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    5584:	d10e      	bne.n	55a4 <setvbuf+0x38>
    5586:	e002      	b.n	558e <setvbuf+0x22>
    5588:	6a41      	ldr	r1, [r0, #36]	; 0x24
    558a:	2301      	movs	r3, #1
    558c:	e003      	b.n	5596 <setvbuf+0x2a>
    558e:	4d06      	ldr	r5, [pc, #24]	; (55a8 <setvbuf+0x3c>)
    5590:	1e5e      	subs	r6, r3, #1
    5592:	42ae      	cmp	r6, r5
    5594:	d806      	bhi.n	55a4 <setvbuf+0x38>
    5596:	4314      	orrs	r4, r2
    5598:	6101      	str	r1, [r0, #16]
    559a:	6001      	str	r1, [r0, #0]
    559c:	61c3      	str	r3, [r0, #28]
    559e:	60c4      	str	r4, [r0, #12]
    55a0:	2000      	movs	r0, #0
    55a2:	bd70      	pop	{r4, r5, r6, pc}
    55a4:	2001      	movs	r0, #1
    55a6:	bd70      	pop	{r4, r5, r6, pc}
    55a8:	00fffffe 	.word	0x00fffffe

000055ac <strchr>:
    55ac:	b510      	push	{r4, lr}
    55ae:	4603      	mov	r3, r0
    55b0:	f810 2b01 	ldrb.w	r2, [r0], #1
    55b4:	b2cc      	uxtb	r4, r1
    55b6:	42a2      	cmp	r2, r4
    55b8:	d003      	beq.n	55c2 <strchr+0x16>
    55ba:	2a00      	cmp	r2, #0
    55bc:	d1f7      	bne.n	55ae <strchr+0x2>
    55be:	4610      	mov	r0, r2
    55c0:	bd10      	pop	{r4, pc}
    55c2:	4618      	mov	r0, r3
    55c4:	bd10      	pop	{r4, pc}

000055c6 <strcpy>:
    55c6:	ea40 0301 	orr.w	r3, r0, r1
    55ca:	079b      	lsls	r3, r3, #30
    55cc:	b510      	push	{r4, lr}
    55ce:	d113      	bne.n	55f8 <strcpy+0x32>
    55d0:	4602      	mov	r2, r0
    55d2:	3904      	subs	r1, #4
    55d4:	f851 3f04 	ldr.w	r3, [r1, #4]!
    55d8:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
    55dc:	ea24 0403 	bic.w	r4, r4, r3
    55e0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    55e4:	d102      	bne.n	55ec <strcpy+0x26>
    55e6:	f842 3b04 	str.w	r3, [r2], #4
    55ea:	e7f3      	b.n	55d4 <strcpy+0xe>
    55ec:	b2d9      	uxtb	r1, r3
    55ee:	f802 1b01 	strb.w	r1, [r2], #1
    55f2:	b141      	cbz	r1, 5606 <strcpy+0x40>
    55f4:	121b      	asrs	r3, r3, #8
    55f6:	e7f9      	b.n	55ec <strcpy+0x26>
    55f8:	1e42      	subs	r2, r0, #1
    55fa:	f811 3b01 	ldrb.w	r3, [r1], #1
    55fe:	f802 3f01 	strb.w	r3, [r2, #1]!
    5602:	2b00      	cmp	r3, #0
    5604:	d1f9      	bne.n	55fa <strcpy+0x34>
    5606:	bd10      	pop	{r4, pc}

00005608 <strlen>:
    5608:	b510      	push	{r4, lr}
    560a:	1c42      	adds	r2, r0, #1
    560c:	0783      	lsls	r3, r0, #30
    560e:	d005      	beq.n	561c <strlen+0x14>
    5610:	f810 3b01 	ldrb.w	r3, [r0], #1
    5614:	2b00      	cmp	r3, #0
    5616:	d1f9      	bne.n	560c <strlen+0x4>
    5618:	1a80      	subs	r0, r0, r2
    561a:	bd10      	pop	{r4, pc}
    561c:	4603      	mov	r3, r0
    561e:	f850 1b04 	ldr.w	r1, [r0], #4
    5622:	f1a1 3401 	sub.w	r4, r1, #16843009	; 0x1010101
    5626:	ea24 0401 	bic.w	r4, r4, r1
    562a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    562e:	d0f5      	beq.n	561c <strlen+0x14>
    5630:	f011 0fff 	tst.w	r1, #255	; 0xff
    5634:	d00a      	beq.n	564c <strlen+0x44>
    5636:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
    563a:	d005      	beq.n	5648 <strlen+0x40>
    563c:	f411 0f7f 	tst.w	r1, #16711680	; 0xff0000
    5640:	bf14      	ite	ne
    5642:	4603      	movne	r3, r0
    5644:	3303      	addeq	r3, #3
    5646:	e002      	b.n	564e <strlen+0x46>
    5648:	3302      	adds	r3, #2
    564a:	e000      	b.n	564e <strlen+0x46>
    564c:	3301      	adds	r3, #1
    564e:	1a98      	subs	r0, r3, r2
    5650:	bd10      	pop	{r4, pc}

00005652 <strncpy>:
    5652:	ea40 0301 	orr.w	r3, r0, r1
    5656:	b570      	push	{r4, r5, r6, lr}
    5658:	079d      	lsls	r5, r3, #30
    565a:	d111      	bne.n	5680 <strncpy+0x2e>
    565c:	460e      	mov	r6, r1
    565e:	4603      	mov	r3, r0
    5660:	2a03      	cmp	r2, #3
    5662:	4631      	mov	r1, r6
    5664:	d90d      	bls.n	5682 <strncpy+0x30>
    5666:	f856 5b04 	ldr.w	r5, [r6], #4
    566a:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    566e:	ea24 0405 	bic.w	r4, r4, r5
    5672:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    5676:	d104      	bne.n	5682 <strncpy+0x30>
    5678:	f843 5b04 	str.w	r5, [r3], #4
    567c:	3a04      	subs	r2, #4
    567e:	e7ef      	b.n	5660 <strncpy+0xe>
    5680:	4603      	mov	r3, r0
    5682:	3a01      	subs	r2, #1
    5684:	1c54      	adds	r4, r2, #1
    5686:	d00f      	beq.n	56a8 <strncpy+0x56>
    5688:	f811 4b01 	ldrb.w	r4, [r1], #1
    568c:	1e55      	subs	r5, r2, #1
    568e:	f803 4b01 	strb.w	r4, [r3], #1
    5692:	b93c      	cbnz	r4, 56a4 <strncpy+0x52>
    5694:	441a      	add	r2, r3
    5696:	4293      	cmp	r3, r2
    5698:	d003      	beq.n	56a2 <strncpy+0x50>
    569a:	2100      	movs	r1, #0
    569c:	f803 1b01 	strb.w	r1, [r3], #1
    56a0:	e7f9      	b.n	5696 <strncpy+0x44>
    56a2:	bd70      	pop	{r4, r5, r6, pc}
    56a4:	462a      	mov	r2, r5
    56a6:	e7ed      	b.n	5684 <strncpy+0x32>
    56a8:	bd70      	pop	{r4, r5, r6, pc}

000056aa <strstr>:
    56aa:	b510      	push	{r4, lr}
    56ac:	2300      	movs	r3, #0
    56ae:	5cca      	ldrb	r2, [r1, r3]
    56b0:	b14a      	cbz	r2, 56c6 <strstr+0x1c>
    56b2:	5cc4      	ldrb	r4, [r0, r3]
    56b4:	4294      	cmp	r4, r2
    56b6:	d101      	bne.n	56bc <strstr+0x12>
    56b8:	3301      	adds	r3, #1
    56ba:	e7f8      	b.n	56ae <strstr+0x4>
    56bc:	f810 3b01 	ldrb.w	r3, [r0], #1
    56c0:	2b00      	cmp	r3, #0
    56c2:	d1f3      	bne.n	56ac <strstr+0x2>
    56c4:	4618      	mov	r0, r3
    56c6:	bd10      	pop	{r4, pc}

000056c8 <_sbrk>:
    56c8:	b538      	push	{r3, r4, r5, lr}
    56ca:	4b0c      	ldr	r3, [pc, #48]	; (56fc <_sbrk+0x34>)
    56cc:	681a      	ldr	r2, [r3, #0]
    56ce:	b90a      	cbnz	r2, 56d4 <_sbrk+0xc>
    56d0:	4a0b      	ldr	r2, [pc, #44]	; (5700 <_sbrk+0x38>)
    56d2:	601a      	str	r2, [r3, #0]
    56d4:	1cc4      	adds	r4, r0, #3
    56d6:	681d      	ldr	r5, [r3, #0]
    56d8:	f024 0403 	bic.w	r4, r4, #3
    56dc:	442c      	add	r4, r5
    56de:	4620      	mov	r0, r4
    56e0:	f000 fac8 	bl	5c74 <__check_heap_overflow>
    56e4:	b918      	cbnz	r0, 56ee <_sbrk+0x26>
    56e6:	4b05      	ldr	r3, [pc, #20]	; (56fc <_sbrk+0x34>)
    56e8:	4628      	mov	r0, r5
    56ea:	601c      	str	r4, [r3, #0]
    56ec:	bd38      	pop	{r3, r4, r5, pc}
    56ee:	4b05      	ldr	r3, [pc, #20]	; (5704 <_sbrk+0x3c>)
    56f0:	220c      	movs	r2, #12
    56f2:	601a      	str	r2, [r3, #0]
    56f4:	f04f 30ff 	mov.w	r0, #4294967295
    56f8:	bd38      	pop	{r3, r4, r5, pc}
    56fa:	bf00      	nop
    56fc:	10001e38 	.word	0x10001e38
    5700:	10001e3c 	.word	0x10001e3c
    5704:	10000c98 	.word	0x10000c98

00005708 <_deferredlazyseek>:
    5708:	68c3      	ldr	r3, [r0, #12]
    570a:	b510      	push	{r4, lr}
    570c:	f023 0320 	bic.w	r3, r3, #32
    5710:	60c3      	str	r3, [r0, #12]
    5712:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5714:	6982      	ldr	r2, [r0, #24]
    5716:	685b      	ldr	r3, [r3, #4]
    5718:	4604      	mov	r4, r0
    571a:	429a      	cmp	r2, r3
    571c:	d00f      	beq.n	573e <_deferredlazyseek+0x36>
    571e:	f000 f8eb 	bl	58f8 <_fflush>
    5722:	68e3      	ldr	r3, [r4, #12]
    5724:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5726:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    572a:	f023 0310 	bic.w	r3, r3, #16
    572e:	f043 0310 	orr.w	r3, r3, #16
    5732:	60e3      	str	r3, [r4, #12]
    5734:	6853      	ldr	r3, [r2, #4]
    5736:	61a3      	str	r3, [r4, #24]
    5738:	6923      	ldr	r3, [r4, #16]
    573a:	6093      	str	r3, [r2, #8]
    573c:	6023      	str	r3, [r4, #0]
    573e:	68e3      	ldr	r3, [r4, #12]
    5740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    5744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    5748:	60e3      	str	r3, [r4, #12]
    574a:	bd10      	pop	{r4, pc}

0000574c <__flsbuf>:
    574c:	68cb      	ldr	r3, [r1, #12]
    574e:	b570      	push	{r4, r5, r6, lr}
    5750:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
    5754:	069b      	lsls	r3, r3, #26
    5756:	4605      	mov	r5, r0
    5758:	460c      	mov	r4, r1
    575a:	60ca      	str	r2, [r1, #12]
    575c:	d502      	bpl.n	5764 <__flsbuf+0x18>
    575e:	4608      	mov	r0, r1
    5760:	f7ff ffd2 	bl	5708 <_deferredlazyseek>
    5764:	68a1      	ldr	r1, [r4, #8]
    5766:	68e3      	ldr	r3, [r4, #12]
    5768:	1c4e      	adds	r6, r1, #1
    576a:	da0d      	bge.n	5788 <__flsbuf+0x3c>
    576c:	0598      	lsls	r0, r3, #22
    576e:	d40b      	bmi.n	5788 <__flsbuf+0x3c>
    5770:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
    5774:	60e3      	str	r3, [r4, #12]
    5776:	f06f 0201 	mvn.w	r2, #1
    577a:	6823      	ldr	r3, [r4, #0]
    577c:	1a52      	subs	r2, r2, r1
    577e:	60a2      	str	r2, [r4, #8]
    5780:	1c5a      	adds	r2, r3, #1
    5782:	6022      	str	r2, [r4, #0]
    5784:	701d      	strb	r5, [r3, #0]
    5786:	e056      	b.n	5836 <__flsbuf+0xea>
    5788:	f241 028a 	movw	r2, #4234	; 0x108a
    578c:	401a      	ands	r2, r3
    578e:	2a02      	cmp	r2, #2
    5790:	461e      	mov	r6, r3
    5792:	d005      	beq.n	57a0 <__flsbuf+0x54>
    5794:	2200      	movs	r2, #0
    5796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    579a:	60a2      	str	r2, [r4, #8]
    579c:	60e3      	str	r3, [r4, #12]
    579e:	e052      	b.n	5846 <__flsbuf+0xfa>
    57a0:	f24a 0110 	movw	r1, #40976	; 0xa010
    57a4:	4019      	ands	r1, r3
    57a6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    57aa:	d10a      	bne.n	57c2 <__flsbuf+0x76>
    57ac:	2100      	movs	r1, #0
    57ae:	4620      	mov	r0, r4
    57b0:	f000 f9a8 	bl	5b04 <fseek>
    57b4:	68e3      	ldr	r3, [r4, #12]
    57b6:	0699      	lsls	r1, r3, #26
    57b8:	d502      	bpl.n	57c0 <__flsbuf+0x74>
    57ba:	4620      	mov	r0, r4
    57bc:	f7ff ffa4 	bl	5708 <_deferredlazyseek>
    57c0:	68e6      	ldr	r6, [r4, #12]
    57c2:	f446 3390 	orr.w	r3, r6, #73728	; 0x12000
    57c6:	f416 6f70 	tst.w	r6, #3840	; 0xf00
    57ca:	60e3      	str	r3, [r4, #12]
    57cc:	d11c      	bne.n	5808 <__flsbuf+0xbc>
    57ce:	6960      	ldr	r0, [r4, #20]
    57d0:	f000 ff06 	bl	65e0 <__sys_istty>
    57d4:	b150      	cbz	r0, 57ec <__flsbuf+0xa0>
    57d6:	0572      	lsls	r2, r6, #21
    57d8:	d508      	bpl.n	57ec <__flsbuf+0xa0>
    57da:	6a63      	ldr	r3, [r4, #36]	; 0x24
    57dc:	6123      	str	r3, [r4, #16]
    57de:	6023      	str	r3, [r4, #0]
    57e0:	2301      	movs	r3, #1
    57e2:	61e3      	str	r3, [r4, #28]
    57e4:	f446 3392 	orr.w	r3, r6, #74752	; 0x12400
    57e8:	60e3      	str	r3, [r4, #12]
    57ea:	e00d      	b.n	5808 <__flsbuf+0xbc>
    57ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    57f0:	f7fe fa5a 	bl	3ca8 <_Csys_alloc>
    57f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    57f8:	68e2      	ldr	r2, [r4, #12]
    57fa:	61e3      	str	r3, [r4, #28]
    57fc:	f446 3394 	orr.w	r3, r6, #75776	; 0x12800
    5800:	431a      	orrs	r2, r3
    5802:	6120      	str	r0, [r4, #16]
    5804:	6020      	str	r0, [r4, #0]
    5806:	60e2      	str	r2, [r4, #12]
    5808:	f413 6f10 	tst.w	r3, #2304	; 0x900
    580c:	6821      	ldr	r1, [r4, #0]
    580e:	6926      	ldr	r6, [r4, #16]
    5810:	d01c      	beq.n	584c <__flsbuf+0x100>
    5812:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5814:	689b      	ldr	r3, [r3, #8]
    5816:	428b      	cmp	r3, r1
    5818:	bf2c      	ite	cs
    581a:	ebc6 0103 	rsbcs	r1, r6, r3
    581e:	ebc6 0101 	rsbcc	r1, r6, r1
    5822:	b951      	cbnz	r1, 583a <__flsbuf+0xee>
    5824:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5826:	1c72      	adds	r2, r6, #1
    5828:	609a      	str	r2, [r3, #8]
    582a:	6022      	str	r2, [r4, #0]
    582c:	69e2      	ldr	r2, [r4, #28]
    582e:	1e51      	subs	r1, r2, #1
    5830:	60a1      	str	r1, [r4, #8]
    5832:	60da      	str	r2, [r3, #12]
    5834:	7035      	strb	r5, [r6, #0]
    5836:	b2e8      	uxtb	r0, r5
    5838:	bd70      	pop	{r4, r5, r6, pc}
    583a:	4630      	mov	r0, r6
    583c:	4622      	mov	r2, r4
    583e:	f000 f8db 	bl	59f8 <_Cwritebuf>
    5842:	2800      	cmp	r0, #0
    5844:	d0ee      	beq.n	5824 <__flsbuf+0xd8>
    5846:	f04f 30ff 	mov.w	r0, #4294967295
    584a:	bd70      	pop	{r4, r5, r6, pc}
    584c:	1c4a      	adds	r2, r1, #1
    584e:	b2ed      	uxtb	r5, r5
    5850:	6022      	str	r2, [r4, #0]
    5852:	700d      	strb	r5, [r1, #0]
    5854:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5856:	6821      	ldr	r1, [r4, #0]
    5858:	6882      	ldr	r2, [r0, #8]
    585a:	428a      	cmp	r2, r1
    585c:	bf2c      	ite	cs
    585e:	ebc6 0102 	rsbcs	r1, r6, r2
    5862:	ebc6 0101 	rsbcc	r1, r6, r1
    5866:	69e2      	ldr	r2, [r4, #28]
    5868:	055b      	lsls	r3, r3, #21
    586a:	60c2      	str	r2, [r0, #12]
    586c:	d403      	bmi.n	5876 <__flsbuf+0x12a>
    586e:	2d0a      	cmp	r5, #10
    5870:	d001      	beq.n	5876 <__flsbuf+0x12a>
    5872:	4291      	cmp	r1, r2
    5874:	db09      	blt.n	588a <__flsbuf+0x13e>
    5876:	2300      	movs	r3, #0
    5878:	6086      	str	r6, [r0, #8]
    587a:	4622      	mov	r2, r4
    587c:	6026      	str	r6, [r4, #0]
    587e:	60a3      	str	r3, [r4, #8]
    5880:	4630      	mov	r0, r6
    5882:	f000 f8b9 	bl	59f8 <_Cwritebuf>
    5886:	2800      	cmp	r0, #0
    5888:	d1dd      	bne.n	5846 <__flsbuf+0xfa>
    588a:	4628      	mov	r0, r5
    588c:	bd70      	pop	{r4, r5, r6, pc}

0000588e <_fdopen>:
    588e:	b570      	push	{r4, r5, r6, lr}
    5890:	460d      	mov	r5, r1
    5892:	4606      	mov	r6, r0
    5894:	4610      	mov	r0, r2
    5896:	4614      	mov	r4, r2
    5898:	f000 f8e6 	bl	5a68 <fclose>
    589c:	782b      	ldrb	r3, [r5, #0]
    589e:	2b72      	cmp	r3, #114	; 0x72
    58a0:	d00a      	beq.n	58b8 <_fdopen+0x2a>
    58a2:	2b77      	cmp	r3, #119	; 0x77
    58a4:	d005      	beq.n	58b2 <_fdopen+0x24>
    58a6:	2b61      	cmp	r3, #97	; 0x61
    58a8:	d123      	bne.n	58f2 <_fdopen+0x64>
    58aa:	2308      	movs	r3, #8
    58ac:	f248 0202 	movw	r2, #32770	; 0x8002
    58b0:	e004      	b.n	58bc <_fdopen+0x2e>
    58b2:	2304      	movs	r3, #4
    58b4:	2202      	movs	r2, #2
    58b6:	e001      	b.n	58bc <_fdopen+0x2e>
    58b8:	2300      	movs	r3, #0
    58ba:	2201      	movs	r2, #1
    58bc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    58c0:	292b      	cmp	r1, #43	; 0x2b
    58c2:	d006      	beq.n	58d2 <_fdopen+0x44>
    58c4:	2962      	cmp	r1, #98	; 0x62
    58c6:	d109      	bne.n	58dc <_fdopen+0x4e>
    58c8:	f042 0204 	orr.w	r2, r2, #4
    58cc:	f043 0301 	orr.w	r3, r3, #1
    58d0:	e7f4      	b.n	58bc <_fdopen+0x2e>
    58d2:	f042 0203 	orr.w	r2, r2, #3
    58d6:	f043 0302 	orr.w	r3, r3, #2
    58da:	e7ef      	b.n	58bc <_fdopen+0x2e>
    58dc:	071b      	lsls	r3, r3, #28
    58de:	60e2      	str	r2, [r4, #12]
    58e0:	6166      	str	r6, [r4, #20]
    58e2:	4620      	mov	r0, r4
    58e4:	d507      	bpl.n	58f6 <_fdopen+0x68>
    58e6:	2100      	movs	r1, #0
    58e8:	2202      	movs	r2, #2
    58ea:	f000 f90b 	bl	5b04 <fseek>
    58ee:	4620      	mov	r0, r4
    58f0:	bd70      	pop	{r4, r5, r6, pc}
    58f2:	2000      	movs	r0, #0
    58f4:	bd70      	pop	{r4, r5, r6, pc}
    58f6:	bd70      	pop	{r4, r5, r6, pc}

000058f8 <_fflush>:
    58f8:	b538      	push	{r3, r4, r5, lr}
    58fa:	4604      	mov	r4, r0
    58fc:	6a42      	ldr	r2, [r0, #36]	; 0x24
    58fe:	6905      	ldr	r5, [r0, #16]
    5900:	6803      	ldr	r3, [r0, #0]
    5902:	68c0      	ldr	r0, [r0, #12]
    5904:	6891      	ldr	r1, [r2, #8]
    5906:	f420 2200 	bic.w	r2, r0, #524288	; 0x80000
    590a:	60e2      	str	r2, [r4, #12]
    590c:	f000 0282 	and.w	r2, r0, #130	; 0x82
    5910:	2a02      	cmp	r2, #2
    5912:	d002      	beq.n	591a <_fflush+0x22>
    5914:	f04f 30ff 	mov.w	r0, #4294967295
    5918:	bd38      	pop	{r3, r4, r5, pc}
    591a:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
    591e:	d016      	beq.n	594e <_fflush+0x56>
    5920:	4299      	cmp	r1, r3
    5922:	bf38      	it	cc
    5924:	4619      	movcc	r1, r3
    5926:	42a9      	cmp	r1, r5
    5928:	d109      	bne.n	593e <_fflush+0x46>
    592a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    592c:	2000      	movs	r0, #0
    592e:	609d      	str	r5, [r3, #8]
    5930:	68e3      	ldr	r3, [r4, #12]
    5932:	6025      	str	r5, [r4, #0]
    5934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5938:	60a0      	str	r0, [r4, #8]
    593a:	60e3      	str	r3, [r4, #12]
    593c:	bd38      	pop	{r3, r4, r5, pc}
    593e:	4628      	mov	r0, r5
    5940:	1b49      	subs	r1, r1, r5
    5942:	4622      	mov	r2, r4
    5944:	f000 f858 	bl	59f8 <_Cwritebuf>
    5948:	2800      	cmp	r0, #0
    594a:	d0ee      	beq.n	592a <_fflush+0x32>
    594c:	e7e2      	b.n	5914 <_fflush+0x1c>
    594e:	bd38      	pop	{r3, r4, r5, pc}

00005950 <_frexpl>:
    5950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5952:	4615      	mov	r5, r2
    5954:	2300      	movs	r3, #0
    5956:	2200      	movs	r2, #0
    5958:	4606      	mov	r6, r0
    595a:	460f      	mov	r7, r1
    595c:	f000 fd80 	bl	6460 <__aeabi_dcmpeq>
    5960:	b120      	cbz	r0, 596c <_frexpl+0x1c>
    5962:	2300      	movs	r3, #0
    5964:	602b      	str	r3, [r5, #0]
    5966:	2000      	movs	r0, #0
    5968:	2100      	movs	r1, #0
    596a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    596c:	f3c7 530a 	ubfx	r3, r7, #20, #11
    5970:	4630      	mov	r0, r6
    5972:	4639      	mov	r1, r7
    5974:	f2a3 34fe 	subw	r4, r3, #1022	; 0x3fe
    5978:	b98b      	cbnz	r3, 599e <_frexpl+0x4e>
    597a:	4632      	mov	r2, r6
    597c:	f3c7 0313 	ubfx	r3, r7, #0, #20
    5980:	0fd7      	lsrs	r7, r2, #31
    5982:	f403 2600 	and.w	r6, r3, #524288	; 0x80000
    5986:	ea47 0343 	orr.w	r3, r7, r3, lsl #1
    598a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    598e:	0052      	lsls	r2, r2, #1
    5990:	b11e      	cbz	r6, 599a <_frexpl+0x4a>
    5992:	f363 0113 	bfi	r1, r3, #0, #20
    5996:	4610      	mov	r0, r2
    5998:	e001      	b.n	599e <_frexpl+0x4e>
    599a:	3c01      	subs	r4, #1
    599c:	e7f0      	b.n	5980 <_frexpl+0x30>
    599e:	f240 33fe 	movw	r3, #1022	; 0x3fe
    59a2:	602c      	str	r4, [r5, #0]
    59a4:	f363 511e 	bfi	r1, r3, #20, #11
    59a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000059ac <_ldexpl>:
    59ac:	b570      	push	{r4, r5, r6, lr}
    59ae:	2300      	movs	r3, #0
    59b0:	4616      	mov	r6, r2
    59b2:	2200      	movs	r2, #0
    59b4:	4604      	mov	r4, r0
    59b6:	460d      	mov	r5, r1
    59b8:	f000 fd52 	bl	6460 <__aeabi_dcmpeq>
    59bc:	b110      	cbz	r0, 59c4 <_ldexpl+0x18>
    59be:	2000      	movs	r0, #0
    59c0:	2100      	movs	r1, #0
    59c2:	bd70      	pop	{r4, r5, r6, pc}
    59c4:	f240 73fe 	movw	r3, #2046	; 0x7fe
    59c8:	f3c5 520a 	ubfx	r2, r5, #20, #11
    59cc:	4432      	add	r2, r6
    59ce:	429a      	cmp	r2, r3
    59d0:	4620      	mov	r0, r4
    59d2:	4629      	mov	r1, r5
    59d4:	dd06      	ble.n	59e4 <_ldexpl+0x38>
    59d6:	4b06      	ldr	r3, [pc, #24]	; (59f0 <_ldexpl+0x44>)
    59d8:	2222      	movs	r2, #34	; 0x22
    59da:	601a      	str	r2, [r3, #0]
    59dc:	4b05      	ldr	r3, [pc, #20]	; (59f4 <_ldexpl+0x48>)
    59de:	e9d3 0100 	ldrd	r0, r1, [r3]
    59e2:	bd70      	pop	{r4, r5, r6, pc}
    59e4:	2a00      	cmp	r2, #0
    59e6:	ddea      	ble.n	59be <_ldexpl+0x12>
    59e8:	f362 511e 	bfi	r1, r2, #20, #11
    59ec:	bd70      	pop	{r4, r5, r6, pc}
    59ee:	bf00      	nop
    59f0:	10000c98 	.word	0x10000c98
    59f4:	00007690 	.word	0x00007690

000059f8 <_Cwritebuf>:
    59f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59fc:	68d5      	ldr	r5, [r2, #12]
    59fe:	4680      	mov	r8, r0
    5a00:	02eb      	lsls	r3, r5, #11
    5a02:	460e      	mov	r6, r1
    5a04:	4614      	mov	r4, r2
    5a06:	6957      	ldr	r7, [r2, #20]
    5a08:	d505      	bpl.n	5a16 <_Cwritebuf+0x1e>
    5a0a:	4638      	mov	r0, r7
    5a0c:	f000 fde5 	bl	65da <__sys_flen>
    5a10:	f045 0510 	orr.w	r5, r5, #16
    5a14:	61a0      	str	r0, [r4, #24]
    5a16:	4b13      	ldr	r3, [pc, #76]	; (5a64 <_Cwritebuf+0x6c>)
    5a18:	402b      	ands	r3, r5
    5a1a:	b153      	cbz	r3, 5a32 <_Cwritebuf+0x3a>
    5a1c:	4638      	mov	r0, r7
    5a1e:	69a1      	ldr	r1, [r4, #24]
    5a20:	f000 fde4 	bl	65ec <__sys_seek>
    5a24:	2800      	cmp	r0, #0
    5a26:	db14      	blt.n	5a52 <_Cwritebuf+0x5a>
    5a28:	f425 3500 	bic.w	r5, r5, #131072	; 0x20000
    5a2c:	f025 0510 	bic.w	r5, r5, #16
    5a30:	60e5      	str	r5, [r4, #12]
    5a32:	4632      	mov	r2, r6
    5a34:	4638      	mov	r0, r7
    5a36:	4641      	mov	r1, r8
    5a38:	f000 fdde 	bl	65f8 <__sys_write>
    5a3c:	1b80      	subs	r0, r0, r6
    5a3e:	bf18      	it	ne
    5a40:	f04f 30ff 	movne.w	r0, #4294967295
    5a44:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
    5a48:	1af6      	subs	r6, r6, r3
    5a4a:	69a3      	ldr	r3, [r4, #24]
    5a4c:	441e      	add	r6, r3
    5a4e:	61a6      	str	r6, [r4, #24]
    5a50:	b128      	cbz	r0, 5a5e <_Cwritebuf+0x66>
    5a52:	68e3      	ldr	r3, [r4, #12]
    5a54:	f04f 30ff 	mov.w	r0, #4294967295
    5a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5a5c:	60e3      	str	r3, [r4, #12]
    5a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a62:	bf00      	nop
    5a64:	00020010 	.word	0x00020010

00005a68 <fclose>:
    5a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a6c:	f100 050c 	add.w	r5, r0, #12
    5a70:	e895 01a0 	ldmia.w	r5, {r5, r7, r8}
    5a74:	07a9      	lsls	r1, r5, #30
    5a76:	b088      	sub	sp, #32
    5a78:	4604      	mov	r4, r0
    5a7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
    5a7c:	d025      	beq.n	5aca <fclose+0x62>
    5a7e:	072a      	lsls	r2, r5, #28
    5a80:	d416      	bmi.n	5ab0 <fclose+0x48>
    5a82:	f000 f827 	bl	5ad4 <fflush>
    5a86:	4640      	mov	r0, r8
    5a88:	f000 fda4 	bl	65d4 <__sys_close>
    5a8c:	052b      	lsls	r3, r5, #20
    5a8e:	d502      	bpl.n	5a96 <fclose+0x2e>
    5a90:	4638      	mov	r0, r7
    5a92:	f7fe f8f1 	bl	3c78 <free>
    5a96:	0dad      	lsrs	r5, r5, #22
    5a98:	05ad      	lsls	r5, r5, #22
    5a9a:	f115 4fa5 	cmn.w	r5, #1384120320	; 0x52800000
    5a9e:	d107      	bne.n	5ab0 <fclose+0x48>
    5aa0:	4668      	mov	r0, sp
    5aa2:	6a21      	ldr	r1, [r4, #32]
    5aa4:	2220      	movs	r2, #32
    5aa6:	f000 fda4 	bl	65f2 <__sys_tmpnam>
    5aaa:	4668      	mov	r0, sp
    5aac:	f000 f8d8 	bl	5c60 <remove>
    5ab0:	2100      	movs	r1, #0
    5ab2:	2218      	movs	r2, #24
    5ab4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5ab6:	f7fe f877 	bl	3ba8 <memset>
    5aba:	4620      	mov	r0, r4
    5abc:	2100      	movs	r1, #0
    5abe:	2228      	movs	r2, #40	; 0x28
    5ac0:	f7fe f872 	bl	3ba8 <memset>
    5ac4:	6266      	str	r6, [r4, #36]	; 0x24
    5ac6:	2000      	movs	r0, #0
    5ac8:	e001      	b.n	5ace <fclose+0x66>
    5aca:	f04f 30ff 	mov.w	r0, #4294967295
    5ace:	b008      	add	sp, #32
    5ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005ad4 <fflush>:
    5ad4:	b538      	push	{r3, r4, r5, lr}
    5ad6:	4604      	mov	r4, r0
    5ad8:	b118      	cbz	r0, 5ae2 <fflush+0xe>
    5ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5ade:	f000 b8d5 	b.w	5c8c <_do_fflush>
    5ae2:	4605      	mov	r5, r0
    5ae4:	4806      	ldr	r0, [pc, #24]	; (5b00 <fflush+0x2c>)
    5ae6:	4420      	add	r0, r4
    5ae8:	f000 f8d0 	bl	5c8c <_do_fflush>
    5aec:	3428      	adds	r4, #40	; 0x28
    5aee:	2800      	cmp	r0, #0
    5af0:	bf18      	it	ne
    5af2:	f04f 35ff 	movne.w	r5, #4294967295
    5af6:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
    5afa:	d1f3      	bne.n	5ae4 <fflush+0x10>
    5afc:	4628      	mov	r0, r5
    5afe:	bd38      	pop	{r3, r4, r5, pc}
    5b00:	10001cf4 	.word	0x10001cf4

00005b04 <fseek>:
    5b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b08:	68c6      	ldr	r6, [r0, #12]
    5b0a:	4b41      	ldr	r3, [pc, #260]	; (5c10 <fseek+0x10c>)
    5b0c:	4604      	mov	r4, r0
    5b0e:	4033      	ands	r3, r6
    5b10:	460d      	mov	r5, r1
    5b12:	4690      	mov	r8, r2
    5b14:	f8d0 9014 	ldr.w	r9, [r0, #20]
    5b18:	2b00      	cmp	r3, #0
    5b1a:	d075      	beq.n	5c08 <fseek+0x104>
    5b1c:	4648      	mov	r0, r9
    5b1e:	f000 fd5f 	bl	65e0 <__sys_istty>
    5b22:	4607      	mov	r7, r0
    5b24:	2800      	cmp	r0, #0
    5b26:	d16f      	bne.n	5c08 <fseek+0x104>
    5b28:	f1b8 0f01 	cmp.w	r8, #1
    5b2c:	d006      	beq.n	5b3c <fseek+0x38>
    5b2e:	f1b8 0f02 	cmp.w	r8, #2
    5b32:	d008      	beq.n	5b46 <fseek+0x42>
    5b34:	f1b8 0f00 	cmp.w	r8, #0
    5b38:	d166      	bne.n	5c08 <fseek+0x104>
    5b3a:	e029      	b.n	5b90 <fseek+0x8c>
    5b3c:	4620      	mov	r0, r4
    5b3e:	f000 f869 	bl	5c14 <ftell>
    5b42:	4405      	add	r5, r0
    5b44:	e024      	b.n	5b90 <fseek+0x8c>
    5b46:	4648      	mov	r0, r9
    5b48:	f000 fd47 	bl	65da <__sys_flen>
    5b4c:	f1b0 0e00 	subs.w	lr, r0, #0
    5b50:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    5b54:	da04      	bge.n	5b60 <fseek+0x5c>
    5b56:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    5b5a:	60e1      	str	r1, [r4, #12]
    5b5c:	2701      	movs	r7, #1
    5b5e:	e054      	b.n	5c0a <fseek+0x106>
    5b60:	6823      	ldr	r3, [r4, #0]
    5b62:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5b64:	461a      	mov	r2, r3
    5b66:	69a3      	ldr	r3, [r4, #24]
    5b68:	4619      	mov	r1, r3
    5b6a:	6883      	ldr	r3, [r0, #8]
    5b6c:	4293      	cmp	r3, r2
    5b6e:	bf2c      	ite	cs
    5b70:	18c9      	addcs	r1, r1, r3
    5b72:	1889      	addcc	r1, r1, r2
    5b74:	6923      	ldr	r3, [r4, #16]
    5b76:	f01c 0f20 	tst.w	ip, #32
    5b7a:	eba1 0303 	sub.w	r3, r1, r3
    5b7e:	d003      	beq.n	5b88 <fseek+0x84>
    5b80:	6842      	ldr	r2, [r0, #4]
    5b82:	4293      	cmp	r3, r2
    5b84:	bfb8      	it	lt
    5b86:	4613      	movlt	r3, r2
    5b88:	4573      	cmp	r3, lr
    5b8a:	bfac      	ite	ge
    5b8c:	18ed      	addge	r5, r5, r3
    5b8e:	4475      	addlt	r5, lr
    5b90:	2d00      	cmp	r5, #0
    5b92:	db39      	blt.n	5c08 <fseek+0x104>
    5b94:	f416 5f00 	tst.w	r6, #8192	; 0x2000
    5b98:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5b9a:	d004      	beq.n	5ba6 <fseek+0xa2>
    5b9c:	6823      	ldr	r3, [r4, #0]
    5b9e:	6891      	ldr	r1, [r2, #8]
    5ba0:	4299      	cmp	r1, r3
    5ba2:	bf38      	it	cc
    5ba4:	6093      	strcc	r3, [r2, #8]
    5ba6:	69a1      	ldr	r1, [r4, #24]
    5ba8:	428d      	cmp	r5, r1
    5baa:	db10      	blt.n	5bce <fseek+0xca>
    5bac:	6890      	ldr	r0, [r2, #8]
    5bae:	6823      	ldr	r3, [r4, #0]
    5bb0:	f8d4 e010 	ldr.w	lr, [r4, #16]
    5bb4:	4283      	cmp	r3, r0
    5bb6:	bf38      	it	cc
    5bb8:	4603      	movcc	r3, r0
    5bba:	1858      	adds	r0, r3, r1
    5bbc:	ebce 0000 	rsb	r0, lr, r0
    5bc0:	4285      	cmp	r5, r0
    5bc2:	dc04      	bgt.n	5bce <fseek+0xca>
    5bc4:	68d0      	ldr	r0, [r2, #12]
    5bc6:	eb01 0c00 	add.w	ip, r1, r0
    5bca:	4565      	cmp	r5, ip
    5bcc:	db06      	blt.n	5bdc <fseek+0xd8>
    5bce:	2300      	movs	r3, #0
    5bd0:	60a3      	str	r3, [r4, #8]
    5bd2:	6063      	str	r3, [r4, #4]
    5bd4:	f046 0620 	orr.w	r6, r6, #32
    5bd8:	6055      	str	r5, [r2, #4]
    5bda:	e00f      	b.n	5bfc <fseek+0xf8>
    5bdc:	1a6d      	subs	r5, r5, r1
    5bde:	07b1      	lsls	r1, r6, #30
    5be0:	bf44      	itt	mi
    5be2:	1a28      	submi	r0, r5, r0
    5be4:	60a0      	strmi	r0, [r4, #8]
    5be6:	07f2      	lsls	r2, r6, #31
    5be8:	bf44      	itt	mi
    5bea:	ebc3 030e 	rsbmi	r3, r3, lr
    5bee:	195b      	addmi	r3, r3, r5
    5bf0:	4475      	add	r5, lr
    5bf2:	bf48      	it	mi
    5bf4:	6063      	strmi	r3, [r4, #4]
    5bf6:	6025      	str	r5, [r4, #0]
    5bf8:	f026 0620 	bic.w	r6, r6, #32
    5bfc:	f426 2603 	bic.w	r6, r6, #536576	; 0x83000
    5c00:	f026 0640 	bic.w	r6, r6, #64	; 0x40
    5c04:	60e6      	str	r6, [r4, #12]
    5c06:	e000      	b.n	5c0a <fseek+0x106>
    5c08:	2702      	movs	r7, #2
    5c0a:	4638      	mov	r0, r7
    5c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5c10:	00100003 	.word	0x00100003

00005c14 <ftell>:
    5c14:	68c3      	ldr	r3, [r0, #12]
    5c16:	079a      	lsls	r2, r3, #30
    5c18:	d105      	bne.n	5c26 <ftell+0x12>
    5c1a:	4b10      	ldr	r3, [pc, #64]	; (5c5c <ftell+0x48>)
    5c1c:	2221      	movs	r2, #33	; 0x21
    5c1e:	601a      	str	r2, [r3, #0]
    5c20:	f04f 30ff 	mov.w	r0, #4294967295
    5c24:	4770      	bx	lr
    5c26:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    5c2a:	f003 0320 	and.w	r3, r3, #32
    5c2e:	d00a      	beq.n	5c46 <ftell+0x32>
    5c30:	b113      	cbz	r3, 5c38 <ftell+0x24>
    5c32:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5c34:	6858      	ldr	r0, [r3, #4]
    5c36:	e004      	b.n	5c42 <ftell+0x2e>
    5c38:	6802      	ldr	r2, [r0, #0]
    5c3a:	6983      	ldr	r3, [r0, #24]
    5c3c:	6900      	ldr	r0, [r0, #16]
    5c3e:	4413      	add	r3, r2
    5c40:	1a18      	subs	r0, r3, r0
    5c42:	3801      	subs	r0, #1
    5c44:	4770      	bx	lr
    5c46:	b113      	cbz	r3, 5c4e <ftell+0x3a>
    5c48:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5c4a:	6858      	ldr	r0, [r3, #4]
    5c4c:	4770      	bx	lr
    5c4e:	6802      	ldr	r2, [r0, #0]
    5c50:	6983      	ldr	r3, [r0, #24]
    5c52:	6900      	ldr	r0, [r0, #16]
    5c54:	4413      	add	r3, r2
    5c56:	1a18      	subs	r0, r3, r0
    5c58:	4770      	bx	lr
    5c5a:	bf00      	nop
    5c5c:	10000c98 	.word	0x10000c98

00005c60 <remove>:
    5c60:	b510      	push	{r4, lr}
    5c62:	4604      	mov	r4, r0
    5c64:	f7ff fcd0 	bl	5608 <strlen>
    5c68:	4601      	mov	r1, r0
    5c6a:	4620      	mov	r0, r4
    5c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5c70:	f000 bcb9 	b.w	65e6 <__sys_remove>

00005c74 <__check_heap_overflow>:
    5c74:	4b04      	ldr	r3, [pc, #16]	; (5c88 <__check_heap_overflow+0x14>)
    5c76:	b123      	cbz	r3, 5c82 <__check_heap_overflow+0xe>
    5c78:	4298      	cmp	r0, r3
    5c7a:	bf34      	ite	cc
    5c7c:	2000      	movcc	r0, #0
    5c7e:	2001      	movcs	r0, #1
    5c80:	4770      	bx	lr
    5c82:	4618      	mov	r0, r3
    5c84:	4770      	bx	lr
    5c86:	bf00      	nop
    5c88:	00000000 	.word	0x00000000

00005c8c <_do_fflush>:
    5c8c:	68c2      	ldr	r2, [r0, #12]
    5c8e:	b570      	push	{r4, r5, r6, lr}
    5c90:	f012 0303 	ands.w	r3, r2, #3
    5c94:	4604      	mov	r4, r0
    5c96:	d019      	beq.n	5ccc <_do_fflush+0x40>
    5c98:	0693      	lsls	r3, r2, #26
    5c9a:	d504      	bpl.n	5ca6 <_do_fflush+0x1a>
    5c9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5c9e:	685d      	ldr	r5, [r3, #4]
    5ca0:	f7ff fd32 	bl	5708 <_deferredlazyseek>
    5ca4:	e004      	b.n	5cb0 <_do_fflush+0x24>
    5ca6:	6805      	ldr	r5, [r0, #0]
    5ca8:	6983      	ldr	r3, [r0, #24]
    5caa:	442b      	add	r3, r5
    5cac:	6905      	ldr	r5, [r0, #16]
    5cae:	1b5d      	subs	r5, r3, r5
    5cb0:	68e3      	ldr	r3, [r4, #12]
    5cb2:	4620      	mov	r0, r4
    5cb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    5cb8:	60e3      	str	r3, [r4, #12]
    5cba:	f7ff fe1d 	bl	58f8 <_fflush>
    5cbe:	4606      	mov	r6, r0
    5cc0:	4629      	mov	r1, r5
    5cc2:	4620      	mov	r0, r4
    5cc4:	2200      	movs	r2, #0
    5cc6:	f7ff ff1d 	bl	5b04 <fseek>
    5cca:	4633      	mov	r3, r6
    5ccc:	4618      	mov	r0, r3
    5cce:	bd70      	pop	{r4, r5, r6, pc}

00005cd0 <__aeabi_uldivmod>:
    5cd0:	f05f 0c00 	movs.w	ip, #0

00005cd4 <__bhs_ldivmod1>:
    5cd4:	b530      	push	{r4, r5, lr}
    5cd6:	001c      	movs	r4, r3
    5cd8:	d122      	bne.n	5d20 <ldiv64>
    5cda:	0012      	movs	r2, r2
    5cdc:	d06f      	beq.n	5dbe <ldiv_divzero>
    5cde:	4291      	cmp	r1, r2
    5ce0:	d306      	bcc.n	5cf0 <ldiv32>
    5ce2:	4605      	mov	r5, r0
    5ce4:	4608      	mov	r0, r1
    5ce6:	2100      	movs	r1, #0
    5ce8:	f000 f86f 	bl	5dca <udiv6432>
    5cec:	4604      	mov	r4, r0
    5cee:	4628      	mov	r0, r5

00005cf0 <ldiv32>:
    5cf0:	f000 f86b 	bl	5dca <udiv6432>
    5cf4:	460a      	mov	r2, r1
    5cf6:	4621      	mov	r1, r4

00005cf8 <ldiv_return>:
    5cf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5cfc:	f01c 4f40 	tst.w	ip, #3221225472	; 0xc0000000
    5d00:	bf08      	it	eq
    5d02:	4770      	bxeq	lr
    5d04:	d503      	bpl.n	5d0e <ldiv_sign>
    5d06:	4249      	negs	r1, r1
    5d08:	4240      	negs	r0, r0
    5d0a:	f161 0100 	sbc.w	r1, r1, #0

00005d0e <ldiv_sign>:
    5d0e:	ea5f 0c8c 	movs.w	ip, ip, lsl #2
    5d12:	bf38      	it	cc
    5d14:	4770      	bxcc	lr
    5d16:	425b      	negs	r3, r3
    5d18:	4252      	negs	r2, r2
    5d1a:	f163 0300 	sbc.w	r3, r3, #0
    5d1e:	4770      	bx	lr

00005d20 <ldiv64>:
    5d20:	d442      	bmi.n	5da8 <ldiv_res01>
    5d22:	0c1c      	lsrs	r4, r3, #16
    5d24:	bf04      	itt	eq
    5d26:	041b      	lsleq	r3, r3, #16
    5d28:	f10c 0c10 	addeq.w	ip, ip, #16
    5d2c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    5d30:	bf04      	itt	eq
    5d32:	021b      	lsleq	r3, r3, #8
    5d34:	f10c 0c08 	addeq.w	ip, ip, #8
    5d38:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    5d3c:	bf04      	itt	eq
    5d3e:	011b      	lsleq	r3, r3, #4
    5d40:	f10c 0c04 	addeq.w	ip, ip, #4
    5d44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    5d48:	bf04      	itt	eq
    5d4a:	f10c 0c02 	addeq.w	ip, ip, #2
    5d4e:	ea5f 0383 	movseq.w	r3, r3, lsl #2
    5d52:	bf5c      	itt	pl
    5d54:	f10c 0c01 	addpl.w	ip, ip, #1
    5d58:	005b      	lslpl	r3, r3, #1
    5d5a:	f1cc 0e20 	rsb	lr, ip, #32
    5d5e:	fa22 f40e 	lsr.w	r4, r2, lr
    5d62:	4323      	orrs	r3, r4
    5d64:	fa02 f20c 	lsl.w	r2, r2, ip
    5d68:	fa00 f50c 	lsl.w	r5, r0, ip
    5d6c:	fa20 f00e 	lsr.w	r0, r0, lr
    5d70:	fa01 f40c 	lsl.w	r4, r1, ip
    5d74:	4320      	orrs	r0, r4
    5d76:	fa21 f10e 	lsr.w	r1, r1, lr
    5d7a:	4614      	mov	r4, r2
    5d7c:	461a      	mov	r2, r3
    5d7e:	f000 f824 	bl	5dca <udiv6432>
    5d82:	fba4 2300 	umull	r2, r3, r4, r0
    5d86:	1aaa      	subs	r2, r5, r2
    5d88:	eb71 0303 	sbcs.w	r3, r1, r3
    5d8c:	bf3c      	itt	cc
    5d8e:	191b      	addcc	r3, r3, r4
    5d90:	3801      	subcc	r0, #1
    5d92:	f1cc 0e20 	rsb	lr, ip, #32
    5d96:	fa22 f20c 	lsr.w	r2, r2, ip
    5d9a:	fa03 f40e 	lsl.w	r4, r3, lr
    5d9e:	4322      	orrs	r2, r4
    5da0:	fa23 f30c 	lsr.w	r3, r3, ip
    5da4:	2100      	movs	r1, #0
    5da6:	e7a7      	b.n	5cf8 <ldiv_return>

00005da8 <ldiv_res01>:
    5da8:	1a82      	subs	r2, r0, r2
    5daa:	eb71 0303 	sbcs.w	r3, r1, r3
    5dae:	bf3c      	itt	cc
    5db0:	4602      	movcc	r2, r0
    5db2:	460b      	movcc	r3, r1
    5db4:	f04f 0100 	mov.w	r1, #0
    5db8:	f141 0000 	adc.w	r0, r1, #0
    5dbc:	e79c      	b.n	5cf8 <ldiv_return>

00005dbe <ldiv_divzero>:
    5dbe:	2000      	movs	r0, #0
    5dc0:	2100      	movs	r1, #0
    5dc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5dc6:	f000 b83d 	b.w	5e44 <__aeabi_idiv0>

00005dca <udiv6432>:
    5dca:	2304      	movs	r3, #4
    5dcc:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    5dd0:	d209      	bcs.n	5de6 <udiv6432_entry>

00005dd2 <udiv6432_loop1>:
    5dd2:	0209      	lsls	r1, r1, #8
    5dd4:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
    5dd8:	0200      	lsls	r0, r0, #8
    5dda:	3b01      	subs	r3, #1
    5ddc:	bf08      	it	eq
    5dde:	4770      	bxeq	lr
    5de0:	ebb1 2f12 	cmp.w	r1, r2, lsr #8
    5de4:	d3f5      	bcc.n	5dd2 <udiv6432_loop1>

00005de6 <udiv6432_entry>:
    5de6:	1800      	adds	r0, r0, r0

00005de8 <udiv6432_loop>:
    5de8:	4149      	adcs	r1, r1
    5dea:	bf34      	ite	cc
    5dec:	4291      	cmpcc	r1, r2
    5dee:	1a89      	subcs	r1, r1, r2
    5df0:	4140      	adcs	r0, r0
    5df2:	4149      	adcs	r1, r1
    5df4:	bf34      	ite	cc
    5df6:	4291      	cmpcc	r1, r2
    5df8:	1a89      	subcs	r1, r1, r2
    5dfa:	4140      	adcs	r0, r0
    5dfc:	4149      	adcs	r1, r1
    5dfe:	bf34      	ite	cc
    5e00:	4291      	cmpcc	r1, r2
    5e02:	1a89      	subcs	r1, r1, r2
    5e04:	4140      	adcs	r0, r0
    5e06:	4149      	adcs	r1, r1
    5e08:	bf34      	ite	cc
    5e0a:	4291      	cmpcc	r1, r2
    5e0c:	1a89      	subcs	r1, r1, r2
    5e0e:	4140      	adcs	r0, r0
    5e10:	4149      	adcs	r1, r1
    5e12:	bf34      	ite	cc
    5e14:	4291      	cmpcc	r1, r2
    5e16:	1a89      	subcs	r1, r1, r2
    5e18:	4140      	adcs	r0, r0
    5e1a:	4149      	adcs	r1, r1
    5e1c:	bf34      	ite	cc
    5e1e:	4291      	cmpcc	r1, r2
    5e20:	1a89      	subcs	r1, r1, r2
    5e22:	4140      	adcs	r0, r0
    5e24:	4149      	adcs	r1, r1
    5e26:	bf34      	ite	cc
    5e28:	4291      	cmpcc	r1, r2
    5e2a:	1a89      	subcs	r1, r1, r2
    5e2c:	4140      	adcs	r0, r0
    5e2e:	4149      	adcs	r1, r1
    5e30:	bf34      	ite	cc
    5e32:	4291      	cmpcc	r1, r2
    5e34:	1a89      	subcs	r1, r1, r2
    5e36:	4140      	adcs	r0, r0
    5e38:	f1a3 0301 	sub.w	r3, r3, #1
    5e3c:	f013 0f0f 	tst.w	r3, #15
    5e40:	d1d2      	bne.n	5de8 <udiv6432_loop>
    5e42:	4770      	bx	lr

00005e44 <__aeabi_idiv0>:
    5e44:	4770      	bx	lr
	...

00005e48 <__aeabi_dmul>:
    5e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e4c:	f3c1 540a 	ubfx	r4, r1, #20, #11
    5e50:	2c00      	cmp	r4, #0
    5e52:	d054      	beq.n	5efe <__aeabi_dmul+0xb6>
    5e54:	f240 76ff 	movw	r6, #2047	; 0x7ff
    5e58:	42b4      	cmp	r4, r6
    5e5a:	d050      	beq.n	5efe <__aeabi_dmul+0xb6>
    5e5c:	f3c3 550a 	ubfx	r5, r3, #20, #11
    5e60:	2d00      	cmp	r5, #0
    5e62:	d04c      	beq.n	5efe <__aeabi_dmul+0xb6>
    5e64:	42b5      	cmp	r5, r6
    5e66:	d04a      	beq.n	5efe <__aeabi_dmul+0xb6>
    5e68:	f3c1 0e13 	ubfx	lr, r1, #0, #20
    5e6c:	ea4f 2ac2 	mov.w	sl, r2, lsl #11
    5e70:	f44e 1e80 	orr.w	lr, lr, #1048576	; 0x100000
    5e74:	fbae 670a 	umull	r6, r7, lr, sl
    5e78:	fbaa ab00 	umull	sl, fp, sl, r0
    5e7c:	eb16 080b 	adds.w	r8, r6, fp
    5e80:	463e      	mov	r6, r7
    5e82:	ea4f 5252 	mov.w	r2, r2, lsr #21
    5e86:	ea42 22c3 	orr.w	r2, r2, r3, lsl #11
    5e8a:	f04f 0900 	mov.w	r9, #0
    5e8e:	f149 0900 	adc.w	r9, r9, #0
    5e92:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    5e96:	fbe0 8902 	umlal	r8, r9, r0, r2
    5e9a:	2700      	movs	r7, #0
    5e9c:	eb16 0609 	adds.w	r6, r6, r9
    5ea0:	f147 0700 	adc.w	r7, r7, #0
    5ea4:	fbee 6702 	umlal	r6, r7, lr, r2
    5ea8:	404b      	eors	r3, r1
    5eaa:	f5b7 1f80 	cmp.w	r7, #1048576	; 0x100000
    5eae:	442c      	add	r4, r5
    5eb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    5eb4:	ea48 089a 	orr.w	r8, r8, sl, lsr #2
    5eb8:	d24b      	bcs.n	5f52 <__aeabi_dmul+0x10a>
    5eba:	19b6      	adds	r6, r6, r6
    5ebc:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    5ec0:	417f      	adcs	r7, r7
    5ec2:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
    5ec6:	4316      	orrs	r6, r2
    5ec8:	ea4f 0848 	mov.w	r8, r8, lsl #1
    5ecc:	ea4f 72d8 	mov.w	r2, r8, lsr #31
    5ed0:	18b6      	adds	r6, r6, r2
    5ed2:	f240 72fd 	movw	r2, #2045	; 0x7fd
    5ed6:	f147 0700 	adc.w	r7, r7, #0
    5eda:	f1b8 4f00 	cmp.w	r8, #2147483648	; 0x80000000
    5ede:	4635      	mov	r5, r6
    5ee0:	bf08      	it	eq
    5ee2:	f026 0501 	biceq.w	r5, r6, #1
    5ee6:	4294      	cmp	r4, r2
    5ee8:	d936      	bls.n	5f58 <__aeabi_dmul+0x110>
    5eea:	2c00      	cmp	r4, #0
    5eec:	bfa4      	itt	ge
    5eee:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    5ef2:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    5ef6:	2000      	movs	r0, #0
    5ef8:	4619      	mov	r1, r3
    5efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5efe:	ea83 0201 	eor.w	r2, r3, r1
    5f02:	0049      	lsls	r1, r1, #1
    5f04:	f511 1f00 	cmn.w	r1, #2097152	; 0x200000
    5f08:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
    5f0c:	d213      	bcs.n	5f36 <__aeabi_dmul+0xee>
    5f0e:	005b      	lsls	r3, r3, #1
    5f10:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    5f14:	d317      	bcc.n	5f46 <__aeabi_dmul+0xfe>
    5f16:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    5f1a:	d80d      	bhi.n	5f38 <__aeabi_dmul+0xf0>
    5f1c:	0d49      	lsrs	r1, r1, #21
    5f1e:	0549      	lsls	r1, r1, #21
    5f20:	2000      	movs	r0, #0
    5f22:	b169      	cbz	r1, 5f40 <__aeabi_dmul+0xf8>
    5f24:	0d5b      	lsrs	r3, r3, #21
    5f26:	055b      	lsls	r3, r3, #21
    5f28:	b153      	cbz	r3, 5f40 <__aeabi_dmul+0xf8>
    5f2a:	f042 42ff 	orr.w	r2, r2, #2139095040	; 0x7f800000
    5f2e:	f442 01e0 	orr.w	r1, r2, #7340032	; 0x700000
    5f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f36:	d00a      	beq.n	5f4e <__aeabi_dmul+0x106>
    5f38:	2000      	movs	r0, #0
    5f3a:	490a      	ldr	r1, [pc, #40]	; (5f64 <__aeabi_dmul+0x11c>)
    5f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f40:	4908      	ldr	r1, [pc, #32]	; (5f64 <__aeabi_dmul+0x11c>)
    5f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f46:	2000      	movs	r0, #0
    5f48:	4611      	mov	r1, r2
    5f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f4e:	005b      	lsls	r3, r3, #1
    5f50:	e7e1      	b.n	5f16 <__aeabi_dmul+0xce>
    5f52:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    5f56:	e7b9      	b.n	5ecc <__aeabi_dmul+0x84>
    5f58:	433b      	orrs	r3, r7
    5f5a:	eb03 5104 	add.w	r1, r3, r4, lsl #20
    5f5e:	4628      	mov	r0, r5
    5f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f64:	7ff80000 	.word	0x7ff80000

00005f68 <__aeabi_ddiv>:
    5f68:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
    5f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f70:	f1bc 0f00 	cmp.w	ip, #0
    5f74:	d053      	beq.n	601e <__aeabi_ddiv+0xb6>
    5f76:	f240 74ff 	movw	r4, #2047	; 0x7ff
    5f7a:	45a4      	cmp	ip, r4
    5f7c:	d04f      	beq.n	601e <__aeabi_ddiv+0xb6>
    5f7e:	f3c3 580a 	ubfx	r8, r3, #20, #11
    5f82:	f1b8 0f00 	cmp.w	r8, #0
    5f86:	d04a      	beq.n	601e <__aeabi_ddiv+0xb6>
    5f88:	45a0      	cmp	r8, r4
    5f8a:	d048      	beq.n	601e <__aeabi_ddiv+0xb6>
    5f8c:	ea4f 5a50 	mov.w	sl, r0, lsr #21
    5f90:	ea4f 5952 	mov.w	r9, r2, lsr #21
    5f94:	02c4      	lsls	r4, r0, #11
    5f96:	02d6      	lsls	r6, r2, #11
    5f98:	ea4a 20c1 	orr.w	r0, sl, r1, lsl #11
    5f9c:	ea49 22c3 	orr.w	r2, r9, r3, lsl #11
    5fa0:	f040 4500 	orr.w	r5, r0, #2147483648	; 0x80000000
    5fa4:	f042 4700 	orr.w	r7, r2, #2147483648	; 0x80000000
    5fa8:	42bd      	cmp	r5, r7
    5faa:	bf08      	it	eq
    5fac:	42b4      	cmpeq	r4, r6
    5fae:	ebc8 0c0c 	rsb	ip, r8, ip
    5fb2:	ea83 0801 	eor.w	r8, r3, r1
    5fb6:	d25d      	bcs.n	6074 <__aeabi_ddiv+0x10c>
    5fb8:	f20c 3cfd 	addw	ip, ip, #1021	; 0x3fd
    5fbc:	0879      	lsrs	r1, r7, #1
    5fbe:	ea4f 0036 	mov.w	r0, r6, rrx
    5fc2:	2334      	movs	r3, #52	; 0x34
    5fc4:	2200      	movs	r2, #0
    5fc6:	e000      	b.n	5fca <__aeabi_ddiv+0x62>
    5fc8:	3b01      	subs	r3, #1
    5fca:	428d      	cmp	r5, r1
    5fcc:	bf08      	it	eq
    5fce:	4284      	cmpeq	r4, r0
    5fd0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    5fd4:	d304      	bcc.n	5fe0 <__aeabi_ddiv+0x78>
    5fd6:	1a24      	subs	r4, r4, r0
    5fd8:	eb65 0501 	sbc.w	r5, r5, r1
    5fdc:	f042 0201 	orr.w	r2, r2, #1
    5fe0:	1924      	adds	r4, r4, r4
    5fe2:	416d      	adcs	r5, r5
    5fe4:	2b20      	cmp	r3, #32
    5fe6:	d062      	beq.n	60ae <__aeabi_ddiv+0x146>
    5fe8:	2b00      	cmp	r3, #0
    5fea:	d1ed      	bne.n	5fc8 <__aeabi_ddiv+0x60>
    5fec:	428d      	cmp	r5, r1
    5fee:	bf08      	it	eq
    5ff0:	4284      	cmpeq	r4, r0
    5ff2:	d303      	bcc.n	5ffc <__aeabi_ddiv+0x94>
    5ff4:	3201      	adds	r2, #1
    5ff6:	bf08      	it	eq
    5ff8:	f10e 0e01 	addeq.w	lr, lr, #1
    5ffc:	f240 71fd 	movw	r1, #2045	; 0x7fd
    6000:	458c      	cmp	ip, r1
    6002:	f008 4300 	and.w	r3, r8, #2147483648	; 0x80000000
    6006:	d93b      	bls.n	6080 <__aeabi_ddiv+0x118>
    6008:	f1bc 0f00 	cmp.w	ip, #0
    600c:	bfa4      	itt	ge
    600e:	f043 43ff 	orrge.w	r3, r3, #2139095040	; 0x7f800000
    6012:	f443 03e0 	orrge.w	r3, r3, #7340032	; 0x700000
    6016:	2000      	movs	r0, #0
    6018:	4619      	mov	r1, r3
    601a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    601e:	004a      	lsls	r2, r1, #1
    6020:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    6024:	d81c      	bhi.n	6060 <__aeabi_ddiv+0xf8>
    6026:	005c      	lsls	r4, r3, #1
    6028:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    602c:	d818      	bhi.n	6060 <__aeabi_ddiv+0xf8>
    602e:	ea43 0001 	orr.w	r0, r3, r1
    6032:	f3c0 500a 	ubfx	r0, r0, #20, #11
    6036:	0545      	lsls	r5, r0, #21
    6038:	b1b0      	cbz	r0, 6068 <__aeabi_ddiv+0x100>
    603a:	0d50      	lsrs	r0, r2, #21
    603c:	4059      	eors	r1, r3
    603e:	0540      	lsls	r0, r0, #21
    6040:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    6044:	b1a0      	cbz	r0, 6070 <__aeabi_ddiv+0x108>
    6046:	0d60      	lsrs	r0, r4, #21
    6048:	0540      	lsls	r0, r0, #21
    604a:	b348      	cbz	r0, 60a0 <__aeabi_ddiv+0x138>
    604c:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    6050:	d11d      	bne.n	608e <__aeabi_ddiv+0x126>
    6052:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    6056:	d003      	beq.n	6060 <__aeabi_ddiv+0xf8>
    6058:	2200      	movs	r2, #0
    605a:	4610      	mov	r0, r2
    605c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6060:	2000      	movs	r0, #0
    6062:	4914      	ldr	r1, [pc, #80]	; (60b4 <__aeabi_ddiv+0x14c>)
    6064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6068:	4912      	ldr	r1, [pc, #72]	; (60b4 <__aeabi_ddiv+0x14c>)
    606a:	4628      	mov	r0, r5
    606c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6074:	086d      	lsrs	r5, r5, #1
    6076:	ea4f 0434 	mov.w	r4, r4, rrx
    607a:	f20c 3cfe 	addw	ip, ip, #1022	; 0x3fe
    607e:	e79d      	b.n	5fbc <__aeabi_ddiv+0x54>
    6080:	eb03 530c 	add.w	r3, r3, ip, lsl #20
    6084:	eb03 010e 	add.w	r1, r3, lr
    6088:	4610      	mov	r0, r2
    608a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    608e:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    6092:	2200      	movs	r2, #0
    6094:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    6098:	4610      	mov	r0, r2
    609a:	4619      	mov	r1, r3
    609c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    60a0:	f041 41ff 	orr.w	r1, r1, #2139095040	; 0x7f800000
    60a4:	f441 03e0 	orr.w	r3, r1, #7340032	; 0x700000
    60a8:	4619      	mov	r1, r3
    60aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    60ae:	4696      	mov	lr, r2
    60b0:	e78a      	b.n	5fc8 <__aeabi_ddiv+0x60>
    60b2:	bf00      	nop
    60b4:	7ff80000 	.word	0x7ff80000

000060b8 <__aeabi_dsub>:
    60b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    60ba:	ea93 0401 	eors.w	r4, r3, r1
    60be:	460d      	mov	r5, r1
    60c0:	f100 80cc 	bmi.w	625c <__aeabi_dsub+0x1a4>
    60c4:	4299      	cmp	r1, r3
    60c6:	4606      	mov	r6, r0
    60c8:	d270      	bcs.n	61ac <__aeabi_dsub+0xf4>
    60ca:	4056      	eors	r6, r2
    60cc:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    60d0:	4072      	eors	r2, r6
    60d2:	4056      	eors	r6, r2
    60d4:	404d      	eors	r5, r1
    60d6:	404b      	eors	r3, r1
    60d8:	f240 70ff 	movw	r0, #2047	; 0x7ff
    60dc:	0d2c      	lsrs	r4, r5, #20
    60de:	f424 6100 	bic.w	r1, r4, #2048	; 0x800
    60e2:	4281      	cmp	r1, r0
    60e4:	eba4 5713 	sub.w	r7, r4, r3, lsr #20
    60e8:	f000 8096 	beq.w	6218 <__aeabi_dsub+0x160>
    60ec:	428f      	cmp	r7, r1
    60ee:	f000 8099 	beq.w	6224 <__aeabi_dsub+0x16c>
    60f2:	f3c5 0513 	ubfx	r5, r5, #0, #20
    60f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
    60fa:	2f1f      	cmp	r7, #31
    60fc:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
    6100:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    6104:	d857      	bhi.n	61b6 <__aeabi_dsub+0xfe>
    6106:	f1c7 0020 	rsb	r0, r7, #32
    610a:	fa03 fe00 	lsl.w	lr, r3, r0
    610e:	fa22 f107 	lsr.w	r1, r2, r7
    6112:	ea4e 0101 	orr.w	r1, lr, r1
    6116:	40fb      	lsrs	r3, r7
    6118:	1a71      	subs	r1, r6, r1
    611a:	1aed      	subs	r5, r5, r3
    611c:	428e      	cmp	r6, r1
    611e:	bf38      	it	cc
    6120:	f105 35ff 	addcc.w	r5, r5, #4294967295
    6124:	fa12 f300 	lsls.w	r3, r2, r0
    6128:	d006      	beq.n	6138 <__aeabi_dsub+0x80>
    612a:	3901      	subs	r1, #1
    612c:	1c4f      	adds	r7, r1, #1
    612e:	f1c3 0300 	rsb	r3, r3, #0
    6132:	bf08      	it	eq
    6134:	f105 35ff 	addeq.w	r5, r5, #4294967295
    6138:	f415 1fc0 	tst.w	r5, #1572864	; 0x180000
    613c:	d158      	bne.n	61f0 <__aeabi_dsub+0x138>
    613e:	0fdb      	lsrs	r3, r3, #31
    6140:	0fca      	lsrs	r2, r1, #31
    6142:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    6146:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    614a:	ea53 0502 	orrs.w	r5, r3, r2
    614e:	f000 809a 	beq.w	6286 <__aeabi_dsub+0x1ce>
    6152:	0b51      	lsrs	r1, r2, #13
    6154:	f1a4 0502 	sub.w	r5, r4, #2
    6158:	d108      	bne.n	616c <__aeabi_dsub+0xb4>
    615a:	0e19      	lsrs	r1, r3, #24
    615c:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
    6160:	0b51      	lsrs	r1, r2, #13
    6162:	f1a5 0508 	sub.w	r5, r5, #8
    6166:	ea4f 2303 	mov.w	r3, r3, lsl #8
    616a:	d0f6      	beq.n	615a <__aeabi_dsub+0xa2>
    616c:	0c51      	lsrs	r1, r2, #17
    616e:	d104      	bne.n	617a <__aeabi_dsub+0xc2>
    6170:	0f19      	lsrs	r1, r3, #28
    6172:	3d04      	subs	r5, #4
    6174:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    6178:	011b      	lsls	r3, r3, #4
    617a:	0cd1      	lsrs	r1, r2, #19
    617c:	d104      	bne.n	6188 <__aeabi_dsub+0xd0>
    617e:	0f99      	lsrs	r1, r3, #30
    6180:	3d02      	subs	r5, #2
    6182:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
    6186:	009b      	lsls	r3, r3, #2
    6188:	0d11      	lsrs	r1, r2, #20
    618a:	d104      	bne.n	6196 <__aeabi_dsub+0xde>
    618c:	0fd9      	lsrs	r1, r3, #31
    618e:	3d01      	subs	r5, #1
    6190:	ea41 0242 	orr.w	r2, r1, r2, lsl #1
    6194:	005b      	lsls	r3, r3, #1
    6196:	0ae4      	lsrs	r4, r4, #11
    6198:	ebb4 2fd5 	cmp.w	r4, r5, lsr #11
    619c:	f04f 0000 	mov.w	r0, #0
    61a0:	bf06      	itte	eq
    61a2:	eb02 5105 	addeq.w	r1, r2, r5, lsl #20
    61a6:	4618      	moveq	r0, r3
    61a8:	07e1      	lslne	r1, r4, #31
    61aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61ac:	4290      	cmp	r0, r2
    61ae:	d893      	bhi.n	60d8 <__aeabi_dsub+0x20>
    61b0:	4299      	cmp	r1, r3
    61b2:	d191      	bne.n	60d8 <__aeabi_dsub+0x20>
    61b4:	e789      	b.n	60ca <__aeabi_dsub+0x12>
    61b6:	2f35      	cmp	r7, #53	; 0x35
    61b8:	d826      	bhi.n	6208 <__aeabi_dsub+0x150>
    61ba:	f1a7 0020 	sub.w	r0, r7, #32
    61be:	fa23 f100 	lsr.w	r1, r3, r0
    61c2:	1a71      	subs	r1, r6, r1
    61c4:	428e      	cmp	r6, r1
    61c6:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    61ca:	fa22 f000 	lsr.w	r0, r2, r0
    61ce:	bf38      	it	cc
    61d0:	f105 35ff 	addcc.w	r5, r5, #4294967295
    61d4:	40bb      	lsls	r3, r7
    61d6:	0612      	lsls	r2, r2, #24
    61d8:	ea43 0300 	orr.w	r3, r3, r0
    61dc:	d048      	beq.n	6270 <__aeabi_dsub+0x1b8>
    61de:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    61e2:	3901      	subs	r1, #1
    61e4:	1c4e      	adds	r6, r1, #1
    61e6:	f1c3 0300 	rsb	r3, r3, #0
    61ea:	bf08      	it	eq
    61ec:	f105 35ff 	addeq.w	r5, r5, #4294967295
    61f0:	02e8      	lsls	r0, r5, #11
    61f2:	d42e      	bmi.n	6252 <__aeabi_dsub+0x19a>
    61f4:	3c01      	subs	r4, #1
    61f6:	0562      	lsls	r2, r4, #21
    61f8:	d037      	beq.n	626a <__aeabi_dsub+0x1b2>
    61fa:	0fde      	lsrs	r6, r3, #31
    61fc:	0fca      	lsrs	r2, r1, #31
    61fe:	ea42 0545 	orr.w	r5, r2, r5, lsl #1
    6202:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
    6206:	005b      	lsls	r3, r3, #1
    6208:	2b00      	cmp	r3, #0
    620a:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    620e:	db11      	blt.n	6234 <__aeabi_dsub+0x17c>
    6210:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    6214:	4630      	mov	r0, r6
    6216:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6218:	032b      	lsls	r3, r5, #12
    621a:	d117      	bne.n	624c <__aeabi_dsub+0x194>
    621c:	b387      	cbz	r7, 6280 <__aeabi_dsub+0x1c8>
    621e:	4630      	mov	r0, r6
    6220:	4629      	mov	r1, r5
    6222:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6224:	f240 73fe 	movw	r3, #2046	; 0x7fe
    6228:	429f      	cmp	r7, r3
    622a:	d8f5      	bhi.n	6218 <__aeabi_dsub+0x160>
    622c:	b99f      	cbnz	r7, 6256 <__aeabi_dsub+0x19e>
    622e:	4639      	mov	r1, r7
    6230:	4638      	mov	r0, r7
    6232:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6234:	3601      	adds	r6, #1
    6236:	bf08      	it	eq
    6238:	3501      	addeq	r5, #1
    623a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    623e:	bf08      	it	eq
    6240:	f026 0601 	biceq.w	r6, r6, #1
    6244:	eb05 5104 	add.w	r1, r5, r4, lsl #20
    6248:	4630      	mov	r0, r6
    624a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    624c:	2000      	movs	r0, #0
    624e:	490f      	ldr	r1, [pc, #60]	; (628c <__aeabi_dsub+0x1d4>)
    6250:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6252:	460e      	mov	r6, r1
    6254:	e7d8      	b.n	6208 <__aeabi_dsub+0x150>
    6256:	4629      	mov	r1, r5
    6258:	4630      	mov	r0, r6
    625a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    625c:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    6260:	462b      	mov	r3, r5
    6262:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    6266:	f000 b813 	b.w	6290 <__aeabi_dadd>
    626a:	0521      	lsls	r1, r4, #20
    626c:	4610      	mov	r0, r2
    626e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6270:	2b00      	cmp	r3, #0
    6272:	d1b6      	bne.n	61e2 <__aeabi_dsub+0x12a>
    6274:	02ea      	lsls	r2, r5, #11
    6276:	d5bd      	bpl.n	61f4 <__aeabi_dsub+0x13c>
    6278:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
    627c:	460e      	mov	r6, r1
    627e:	e7c7      	b.n	6210 <__aeabi_dsub+0x158>
    6280:	4902      	ldr	r1, [pc, #8]	; (628c <__aeabi_dsub+0x1d4>)
    6282:	4638      	mov	r0, r7
    6284:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6286:	4629      	mov	r1, r5
    6288:	4628      	mov	r0, r5
    628a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    628c:	7ff80000 	.word	0x7ff80000

00006290 <__aeabi_dadd>:
    6290:	b5f0      	push	{r4, r5, r6, r7, lr}
    6292:	ea93 0601 	eors.w	r6, r3, r1
    6296:	460c      	mov	r4, r1
    6298:	f100 8087 	bmi.w	63aa <__aeabi_dadd+0x11a>
    629c:	4299      	cmp	r1, r3
    629e:	4605      	mov	r5, r0
    62a0:	d339      	bcc.n	6316 <__aeabi_dadd+0x86>
    62a2:	f240 70ff 	movw	r0, #2047	; 0x7ff
    62a6:	0d26      	lsrs	r6, r4, #20
    62a8:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    62ac:	4281      	cmp	r1, r0
    62ae:	d03f      	beq.n	6330 <__aeabi_dadd+0xa0>
    62b0:	eba6 5713 	sub.w	r7, r6, r3, lsr #20
    62b4:	428f      	cmp	r7, r1
    62b6:	d04c      	beq.n	6352 <__aeabi_dadd+0xc2>
    62b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
    62bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    62c0:	2f1f      	cmp	r7, #31
    62c2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    62c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    62ca:	d838      	bhi.n	633e <__aeabi_dadd+0xae>
    62cc:	f1c7 0020 	rsb	r0, r7, #32
    62d0:	fa03 fe00 	lsl.w	lr, r3, r0
    62d4:	fa22 f107 	lsr.w	r1, r2, r7
    62d8:	40fb      	lsrs	r3, r7
    62da:	ea4e 0101 	orr.w	r1, lr, r1
    62de:	441c      	add	r4, r3
    62e0:	186d      	adds	r5, r5, r1
    62e2:	bf28      	it	cs
    62e4:	3401      	addcs	r4, #1
    62e6:	fa02 f300 	lsl.w	r3, r2, r0
    62ea:	02a2      	lsls	r2, r4, #10
    62ec:	d529      	bpl.n	6342 <__aeabi_dadd+0xb2>
    62ee:	3501      	adds	r5, #1
    62f0:	bf08      	it	eq
    62f2:	3401      	addeq	r4, #1
    62f4:	b90b      	cbnz	r3, 62fa <__aeabi_dadd+0x6a>
    62f6:	f025 0502 	bic.w	r5, r5, #2
    62fa:	0533      	lsls	r3, r6, #20
    62fc:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    6300:	005a      	lsls	r2, r3, #1
    6302:	f512 1f00 	cmn.w	r2, #2097152	; 0x200000
    6306:	f04f 0000 	mov.w	r0, #0
    630a:	d240      	bcs.n	638e <__aeabi_dadd+0xfe>
    630c:	07e4      	lsls	r4, r4, #31
    630e:	4619      	mov	r1, r3
    6310:	ea44 0055 	orr.w	r0, r4, r5, lsr #1
    6314:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6316:	f240 70ff 	movw	r0, #2047	; 0x7ff
    631a:	4074      	eors	r4, r6
    631c:	4073      	eors	r3, r6
    631e:	0d26      	lsrs	r6, r4, #20
    6320:	4055      	eors	r5, r2
    6322:	f426 6100 	bic.w	r1, r6, #2048	; 0x800
    6326:	406a      	eors	r2, r5
    6328:	4281      	cmp	r1, r0
    632a:	ea85 0502 	eor.w	r5, r5, r2
    632e:	d1bf      	bne.n	62b0 <__aeabi_dadd+0x20>
    6330:	0323      	lsls	r3, r4, #12
    6332:	f04f 0000 	mov.w	r0, #0
    6336:	d136      	bne.n	63a6 <__aeabi_dadd+0x116>
    6338:	4621      	mov	r1, r4
    633a:	4628      	mov	r0, r5
    633c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    633e:	2f35      	cmp	r7, #53	; 0x35
    6340:	d911      	bls.n	6366 <__aeabi_dadd+0xd6>
    6342:	2b00      	cmp	r3, #0
    6344:	f106 36ff 	add.w	r6, r6, #4294967295
    6348:	db24      	blt.n	6394 <__aeabi_dadd+0x104>
    634a:	eb04 5106 	add.w	r1, r4, r6, lsl #20
    634e:	4628      	mov	r0, r5
    6350:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6352:	f240 73fe 	movw	r3, #2046	; 0x7fe
    6356:	429f      	cmp	r7, r3
    6358:	d8ea      	bhi.n	6330 <__aeabi_dadd+0xa0>
    635a:	2f00      	cmp	r7, #0
    635c:	d1ec      	bne.n	6338 <__aeabi_dadd+0xa8>
    635e:	f004 4100 	and.w	r1, r4, #2147483648	; 0x80000000
    6362:	4638      	mov	r0, r7
    6364:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6366:	f1a7 0120 	sub.w	r1, r7, #32
    636a:	fa23 f001 	lsr.w	r0, r3, r1
    636e:	f1c7 0740 	rsb	r7, r7, #64	; 0x40
    6372:	40bb      	lsls	r3, r7
    6374:	fa22 f101 	lsr.w	r1, r2, r1
    6378:	182d      	adds	r5, r5, r0
    637a:	ea43 0301 	orr.w	r3, r3, r1
    637e:	d31b      	bcc.n	63b8 <__aeabi_dadd+0x128>
    6380:	0612      	lsls	r2, r2, #24
    6382:	f104 0401 	add.w	r4, r4, #1
    6386:	d0b0      	beq.n	62ea <__aeabi_dadd+0x5a>
    6388:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    638c:	e7ad      	b.n	62ea <__aeabi_dadd+0x5a>
    638e:	3601      	adds	r6, #1
    6390:	0531      	lsls	r1, r6, #20
    6392:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6394:	3501      	adds	r5, #1
    6396:	bf08      	it	eq
    6398:	3401      	addeq	r4, #1
    639a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    639e:	bf08      	it	eq
    63a0:	f025 0501 	biceq.w	r5, r5, #1
    63a4:	e7d1      	b.n	634a <__aeabi_dadd+0xba>
    63a6:	4906      	ldr	r1, [pc, #24]	; (63c0 <__aeabi_dadd+0x130>)
    63a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63aa:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
    63ae:	462b      	mov	r3, r5
    63b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    63b4:	f7ff be80 	b.w	60b8 <__aeabi_dsub>
    63b8:	0612      	lsls	r2, r2, #24
    63ba:	d1e5      	bne.n	6388 <__aeabi_dadd+0xf8>
    63bc:	e7c1      	b.n	6342 <__aeabi_dadd+0xb2>
    63be:	bf00      	nop
    63c0:	7ff80000 	.word	0x7ff80000

000063c4 <__aeabi_d2iz>:
    63c4:	02cb      	lsls	r3, r1, #11
    63c6:	0d0a      	lsrs	r2, r1, #20
    63c8:	ea43 5050 	orr.w	r0, r3, r0, lsr #21
    63cc:	f5c2 6383 	rsb	r3, r2, #1048	; 0x418
    63d0:	3306      	adds	r3, #6
    63d2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    63d6:	2bff      	cmp	r3, #255	; 0xff
    63d8:	fa20 f003 	lsr.w	r0, r0, r3
    63dc:	d90f      	bls.n	63fe <__aeabi_d2iz+0x3a>
    63de:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    63e2:	d00d      	beq.n	6400 <__aeabi_d2iz+0x3c>
    63e4:	f011 4080 	ands.w	r0, r1, #1073741824	; 0x40000000
    63e8:	d009      	beq.n	63fe <__aeabi_d2iz+0x3a>
    63ea:	004b      	lsls	r3, r1, #1
    63ec:	f513 1f00 	cmn.w	r3, #2097152	; 0x200000
    63f0:	d804      	bhi.n	63fc <__aeabi_d2iz+0x38>
    63f2:	0fc8      	lsrs	r0, r1, #31
    63f4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    63f8:	3801      	subs	r0, #1
    63fa:	4770      	bx	lr
    63fc:	2000      	movs	r0, #0
    63fe:	4770      	bx	lr
    6400:	4240      	negs	r0, r0
    6402:	4770      	bx	lr

00006404 <__bhs_ui2d>:
    6404:	b1f0      	cbz	r0, 6444 <__bhs_ui2d+0x40>
    6406:	0c03      	lsrs	r3, r0, #16
    6408:	bf0c      	ite	eq
    640a:	0400      	lsleq	r0, r0, #16
    640c:	f101 7180 	addne.w	r1, r1, #16777216	; 0x1000000
    6410:	0e03      	lsrs	r3, r0, #24
    6412:	bf0c      	ite	eq
    6414:	0200      	lsleq	r0, r0, #8
    6416:	f501 0100 	addne.w	r1, r1, #8388608	; 0x800000
    641a:	0f03      	lsrs	r3, r0, #28
    641c:	bf0c      	ite	eq
    641e:	0100      	lsleq	r0, r0, #4
    6420:	f501 0180 	addne.w	r1, r1, #4194304	; 0x400000
    6424:	0f83      	lsrs	r3, r0, #30
    6426:	bf0c      	ite	eq
    6428:	0080      	lsleq	r0, r0, #2
    642a:	f501 1100 	addne.w	r1, r1, #2097152	; 0x200000
    642e:	2800      	cmp	r0, #0
    6430:	bfac      	ite	ge
    6432:	0040      	lslge	r0, r0, #1
    6434:	f501 1180 	addlt.w	r1, r1, #1048576	; 0x100000
    6438:	eb01 23e0 	add.w	r3, r1, r0, asr #11
    643c:	0542      	lsls	r2, r0, #21
    643e:	4610      	mov	r0, r2
    6440:	4619      	mov	r1, r3
    6442:	4770      	bx	lr
    6444:	4603      	mov	r3, r0
    6446:	4619      	mov	r1, r3
    6448:	4770      	bx	lr
    644a:	bf00      	nop

0000644c <__aeabi_i2d>:
    644c:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
    6450:	0fc3      	lsrs	r3, r0, #31
    6452:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
    6456:	18d0      	adds	r0, r2, r3
    6458:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    645c:	f7ff bfd2 	b.w	6404 <__bhs_ui2d>

00006460 <__aeabi_dcmpeq>:
    6460:	b510      	push	{r4, lr}
    6462:	004c      	lsls	r4, r1, #1
    6464:	ea54 0e00 	orrs.w	lr, r4, r0
    6468:	d102      	bne.n	6470 <__aeabi_dcmpeq+0x10>
    646a:	ea52 0e43 	orrs.w	lr, r2, r3, lsl #1
    646e:	d00b      	beq.n	6488 <__aeabi_dcmpeq+0x28>
    6470:	4299      	cmp	r1, r3
    6472:	d001      	beq.n	6478 <__aeabi_dcmpeq+0x18>
    6474:	2000      	movs	r0, #0
    6476:	bd10      	pop	{r4, pc}
    6478:	4290      	cmp	r0, r2
    647a:	d1fb      	bne.n	6474 <__aeabi_dcmpeq+0x14>
    647c:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    6480:	bf8c      	ite	hi
    6482:	2000      	movhi	r0, #0
    6484:	2001      	movls	r0, #1
    6486:	bd10      	pop	{r4, pc}
    6488:	2001      	movs	r0, #1
    648a:	bd10      	pop	{r4, pc}

0000648c <__aeabi_dcmplt>:
    648c:	b430      	push	{r4, r5}
    648e:	ea53 0401 	orrs.w	r4, r3, r1
    6492:	d409      	bmi.n	64a8 <__aeabi_dcmplt+0x1c>
    6494:	005c      	lsls	r4, r3, #1
    6496:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    649a:	d802      	bhi.n	64a2 <__aeabi_dcmplt+0x16>
    649c:	4299      	cmp	r1, r3
    649e:	d317      	bcc.n	64d0 <__aeabi_dcmplt+0x44>
    64a0:	d019      	beq.n	64d6 <__aeabi_dcmplt+0x4a>
    64a2:	2000      	movs	r0, #0
    64a4:	bc30      	pop	{r4, r5}
    64a6:	4770      	bx	lr
    64a8:	004d      	lsls	r5, r1, #1
    64aa:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    64ae:	d8f8      	bhi.n	64a2 <__aeabi_dcmplt+0x16>
    64b0:	005c      	lsls	r4, r3, #1
    64b2:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    64b6:	d8f4      	bhi.n	64a2 <__aeabi_dcmplt+0x16>
    64b8:	4305      	orrs	r5, r0
    64ba:	d101      	bne.n	64c0 <__aeabi_dcmplt+0x34>
    64bc:	4314      	orrs	r4, r2
    64be:	d010      	beq.n	64e2 <__aeabi_dcmplt+0x56>
    64c0:	4299      	cmp	r1, r3
    64c2:	d805      	bhi.n	64d0 <__aeabi_dcmplt+0x44>
    64c4:	d1ed      	bne.n	64a2 <__aeabi_dcmplt+0x16>
    64c6:	4290      	cmp	r0, r2
    64c8:	bf94      	ite	ls
    64ca:	2000      	movls	r0, #0
    64cc:	2001      	movhi	r0, #1
    64ce:	e7e9      	b.n	64a4 <__aeabi_dcmplt+0x18>
    64d0:	2001      	movs	r0, #1
    64d2:	bc30      	pop	{r4, r5}
    64d4:	4770      	bx	lr
    64d6:	4290      	cmp	r0, r2
    64d8:	bf2c      	ite	cs
    64da:	2000      	movcs	r0, #0
    64dc:	2001      	movcc	r0, #1
    64de:	bc30      	pop	{r4, r5}
    64e0:	4770      	bx	lr
    64e2:	4620      	mov	r0, r4
    64e4:	e7de      	b.n	64a4 <__aeabi_dcmplt+0x18>
    64e6:	bf00      	nop

000064e8 <__aeabi_dcmple>:
    64e8:	b430      	push	{r4, r5}
    64ea:	ea53 0401 	orrs.w	r4, r3, r1
    64ee:	d409      	bmi.n	6504 <__aeabi_dcmple+0x1c>
    64f0:	005c      	lsls	r4, r3, #1
    64f2:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    64f6:	d802      	bhi.n	64fe <__aeabi_dcmple+0x16>
    64f8:	4299      	cmp	r1, r3
    64fa:	d319      	bcc.n	6530 <__aeabi_dcmple+0x48>
    64fc:	d01b      	beq.n	6536 <__aeabi_dcmple+0x4e>
    64fe:	2000      	movs	r0, #0
    6500:	bc30      	pop	{r4, r5}
    6502:	4770      	bx	lr
    6504:	004c      	lsls	r4, r1, #1
    6506:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    650a:	d8f8      	bhi.n	64fe <__aeabi_dcmple+0x16>
    650c:	005d      	lsls	r5, r3, #1
    650e:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    6512:	d8f4      	bhi.n	64fe <__aeabi_dcmple+0x16>
    6514:	4299      	cmp	r1, r3
    6516:	d80b      	bhi.n	6530 <__aeabi_dcmple+0x48>
    6518:	d008      	beq.n	652c <__aeabi_dcmple+0x44>
    651a:	ea54 0300 	orrs.w	r3, r4, r0
    651e:	d1ee      	bne.n	64fe <__aeabi_dcmple+0x16>
    6520:	ea55 0302 	orrs.w	r3, r5, r2
    6524:	bf0c      	ite	eq
    6526:	2001      	moveq	r0, #1
    6528:	2000      	movne	r0, #0
    652a:	e7e9      	b.n	6500 <__aeabi_dcmple+0x18>
    652c:	4290      	cmp	r0, r2
    652e:	d3f4      	bcc.n	651a <__aeabi_dcmple+0x32>
    6530:	bc30      	pop	{r4, r5}
    6532:	2001      	movs	r0, #1
    6534:	4770      	bx	lr
    6536:	4290      	cmp	r0, r2
    6538:	bf8c      	ite	hi
    653a:	2000      	movhi	r0, #0
    653c:	2001      	movls	r0, #1
    653e:	bc30      	pop	{r4, r5}
    6540:	4770      	bx	lr
    6542:	bf00      	nop

00006544 <__aeabi_dcmpge>:
    6544:	b430      	push	{r4, r5}
    6546:	ea53 0401 	orrs.w	r4, r3, r1
    654a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    654e:	d408      	bmi.n	6562 <__aeabi_dcmpge+0x1e>
    6550:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    6554:	d802      	bhi.n	655c <__aeabi_dcmpge+0x18>
    6556:	4299      	cmp	r1, r3
    6558:	d818      	bhi.n	658c <__aeabi_dcmpge+0x48>
    655a:	d01a      	beq.n	6592 <__aeabi_dcmpge+0x4e>
    655c:	2000      	movs	r0, #0
    655e:	bc30      	pop	{r4, r5}
    6560:	4770      	bx	lr
    6562:	f514 1f00 	cmn.w	r4, #2097152	; 0x200000
    6566:	d8f9      	bhi.n	655c <__aeabi_dcmpge+0x18>
    6568:	005d      	lsls	r5, r3, #1
    656a:	f515 1f00 	cmn.w	r5, #2097152	; 0x200000
    656e:	d8f5      	bhi.n	655c <__aeabi_dcmpge+0x18>
    6570:	4299      	cmp	r1, r3
    6572:	d30b      	bcc.n	658c <__aeabi_dcmpge+0x48>
    6574:	d008      	beq.n	6588 <__aeabi_dcmpge+0x44>
    6576:	ea54 0300 	orrs.w	r3, r4, r0
    657a:	d1ef      	bne.n	655c <__aeabi_dcmpge+0x18>
    657c:	ea55 0302 	orrs.w	r3, r5, r2
    6580:	bf0c      	ite	eq
    6582:	2001      	moveq	r0, #1
    6584:	2000      	movne	r0, #0
    6586:	e7ea      	b.n	655e <__aeabi_dcmpge+0x1a>
    6588:	4290      	cmp	r0, r2
    658a:	d8f4      	bhi.n	6576 <__aeabi_dcmpge+0x32>
    658c:	bc30      	pop	{r4, r5}
    658e:	2001      	movs	r0, #1
    6590:	4770      	bx	lr
    6592:	4290      	cmp	r0, r2
    6594:	bf34      	ite	cc
    6596:	2000      	movcc	r0, #0
    6598:	2001      	movcs	r0, #1
    659a:	bc30      	pop	{r4, r5}
    659c:	4770      	bx	lr
    659e:	bf00      	nop

000065a0 <__aeabi_lowlevel_memset>:
    65a0:	4603      	mov	r3, r0
    65a2:	f013 0f03 	tst.w	r3, #3
    65a6:	d10e      	bne.n	65c6 <memset1a>
    65a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    65ac:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    65b0:	ea41 4101 	orr.w	r1, r1, r1, lsl #16

000065b4 <__bhs_memset4>:
    65b4:	3a04      	subs	r2, #4

000065b6 <memset4>:
    65b6:	bf24      	itt	cs
    65b8:	f843 1b04 	strcs.w	r1, [r3], #4
    65bc:	f1b2 0204 	subscs.w	r2, r2, #4
    65c0:	d2f9      	bcs.n	65b6 <memset4>

000065c2 <memset1>:
    65c2:	f102 0204 	add.w	r2, r2, #4

000065c6 <memset1a>:
    65c6:	3a01      	subs	r2, #1
    65c8:	bf24      	itt	cs
    65ca:	f803 1b01 	strbcs.w	r1, [r3], #1
    65ce:	e7fa      	bcs.n	65c6 <memset1a>
    65d0:	4770      	bx	lr

000065d2 <__sys_appexit>:
    65d2:	e7fe      	b.n	65d2 <__sys_appexit>

000065d4 <__sys_close>:
    65d4:	f04f 30ff 	mov.w	r0, #4294967295
    65d8:	4770      	bx	lr

000065da <__sys_flen>:
    65da:	f04f 30ff 	mov.w	r0, #4294967295
    65de:	4770      	bx	lr

000065e0 <__sys_istty>:
    65e0:	f04f 30ff 	mov.w	r0, #4294967295
    65e4:	4770      	bx	lr

000065e6 <__sys_remove>:
    65e6:	f04f 30ff 	mov.w	r0, #4294967295
    65ea:	4770      	bx	lr

000065ec <__sys_seek>:
    65ec:	f04f 30ff 	mov.w	r0, #4294967295
    65f0:	4770      	bx	lr

000065f2 <__sys_tmpnam>:
    65f2:	f04f 30ff 	mov.w	r0, #4294967295
    65f6:	4770      	bx	lr

000065f8 <__sys_write>:
    65f8:	4610      	mov	r0, r2
    65fa:	4770      	bx	lr
    65fc:	2e383731 	.word	0x2e383731
    6600:	332e3336 	.word	0x332e3336
    6604:	31382e30 	.word	0x31382e30
    6608:	00000000 	.word	0x00000000
    660c:	65746e69 	.word	0x65746e69
    6610:	74656e72 	.word	0x74656e72
    6614:	00000000 	.word	0x00000000
    6618:	61646f76 	.word	0x61646f76
    661c:	656e6f66 	.word	0x656e6f66
    6620:	00000000 	.word	0x00000000
    6624:	656c694d 	.word	0x656c694d
    6628:	3a656761 	.word	0x3a656761
    662c:	0a642520 	.word	0x0a642520
    6630:	00000000 	.word	0x00000000
    6634:	5f726570 	.word	0x5f726570
    6638:	6f6e6769 	.word	0x6f6e6769
    663c:	7265706e 	.word	0x7265706e
    6640:	5f646f69 	.word	0x5f646f69
    6644:	3a6c6176 	.word	0x3a6c6176
    6648:	0a642520 	.word	0x0a642520
    664c:	00000000 	.word	0x00000000
    6650:	5f726570 	.word	0x5f726570
    6654:	6f6e6769 	.word	0x6f6e6769
    6658:	65706666 	.word	0x65706666
    665c:	646f6972 	.word	0x646f6972
    6660:	6c61765f 	.word	0x6c61765f
    6664:	6425203a 	.word	0x6425203a
    6668:	6570202c 	.word	0x6570202c
    666c:	67695f72 	.word	0x67695f72
    6670:	66666f6e 	.word	0x66666f6e
    6674:	69726570 	.word	0x69726570
    6678:	765f646f 	.word	0x765f646f
    667c:	6f286c61 	.word	0x6f286c61
    6680:	69676972 	.word	0x69676972
    6684:	296c616e 	.word	0x296c616e
    6688:	6425203a 	.word	0x6425203a
    668c:	0000000a 	.word	0x0000000a
    6690:	5f726570 	.word	0x5f726570
    6694:	6f6e6769 	.word	0x6f6e6769
    6698:	616f726e 	.word	0x616f726e
    669c:	676e696d 	.word	0x676e696d
    66a0:	69726570 	.word	0x69726570
    66a4:	765f646f 	.word	0x765f646f
    66a8:	203a6c61 	.word	0x203a6c61
    66ac:	000a6425 	.word	0x000a6425
    66b0:	5f726570 	.word	0x5f726570
    66b4:	6f6e6769 	.word	0x6f6e6769
    66b8:	6f726666 	.word	0x6f726666
    66bc:	6e696d61 	.word	0x6e696d61
    66c0:	72657067 	.word	0x72657067
    66c4:	5f646f69 	.word	0x5f646f69
    66c8:	3a6c6176 	.word	0x3a6c6176
    66cc:	0a642520 	.word	0x0a642520
    66d0:	00000000 	.word	0x00000000
    66d4:	5f726570 	.word	0x5f726570
    66d8:	70776f6c 	.word	0x70776f6c
    66dc:	6a5f776f 	.word	0x6a5f776f
    66e0:	5f747375 	.word	0x5f747375
    66e4:	656b6177 	.word	0x656b6177
    66e8:	6425203a 	.word	0x6425203a
    66ec:	0000000a 	.word	0x0000000a
    66f0:	5f726570 	.word	0x5f726570
    66f4:	70776f6c 	.word	0x70776f6c
    66f8:	635f776f 	.word	0x635f776f
    66fc:	65636e61 	.word	0x65636e61
    6700:	25203a6c 	.word	0x25203a6c
    6704:	00000a64 	.word	0x00000a64
    6708:	5f726570 	.word	0x5f726570
    670c:	70776f6c 	.word	0x70776f6c
    6710:	705f776f 	.word	0x705f776f
    6714:	6f697265 	.word	0x6f697265
    6718:	726f2864 	.word	0x726f2864
    671c:	6e696769 	.word	0x6e696769
    6720:	3a296c61 	.word	0x3a296c61
    6724:	0a642520 	.word	0x0a642520
    6728:	00000000 	.word	0x00000000
    672c:	5f726570 	.word	0x5f726570
    6730:	70776f6c 	.word	0x70776f6c
    6734:	705f776f 	.word	0x705f776f
    6738:	6f697265 	.word	0x6f697265
    673c:	25203a64 	.word	0x25203a64
    6740:	00000a64 	.word	0x00000a64
    6744:	5f726570 	.word	0x5f726570
    6748:	70776f6c 	.word	0x70776f6c
    674c:	6d5f776f 	.word	0x6d5f776f
    6750:	3a65646f 	.word	0x3a65646f
    6754:	0a642520 	.word	0x0a642520
    6758:	00000000 	.word	0x00000000
    675c:	5f726570 	.word	0x5f726570
    6760:	66666f63 	.word	0x66666f63
    6764:	635f6565 	.word	0x635f6565
    6768:	746e756f 	.word	0x746e756f
    676c:	203a7265 	.word	0x203a7265
    6770:	000a6425 	.word	0x000a6425
    6774:	3e2d2d2d 	.word	0x3e2d2d2d
    6778:	0d732520 	.word	0x0d732520
    677c:	0000000a 	.word	0x0000000a
    6780:	0a0d7325 	.word	0x0a0d7325
    6784:	00000000 	.word	0x00000000
    6788:	512b5441 	.word	0x512b5441
    678c:	3d445249 	.word	0x3d445249
    6790:	2c312c31 	.word	0x2c312c31
    6794:	31312c30 	.word	0x31312c30
    6798:	00003030 	.word	0x00003030
    679c:	65746e45 	.word	0x65746e45
    67a0:	20646572 	.word	0x20646572
    67a4:	63656843 	.word	0x63656843
    67a8:	4d53476b 	.word	0x4d53476b
    67ac:	66667542 	.word	0x66667542
    67b0:	00007265 	.word	0x00007265
    67b4:	512b5441 	.word	0x512b5441
    67b8:	3d445249 	.word	0x3d445249
    67bc:	2c312c31 	.word	0x2c312c31
    67c0:	30332c30 	.word	0x30332c30
    67c4:	00000030 	.word	0x00000030
    67c8:	54455323 	.word	0x54455323
    67cc:	0000003b 	.word	0x0000003b
    67d0:	7373654d 	.word	0x7373654d
    67d4:	20656761 	.word	0x20656761
    67d8:	6d6f7246 	.word	0x6d6f7246
    67dc:	72655320 	.word	0x72655320
    67e0:	20726576 	.word	0x20726576
    67e4:	0000203a 	.word	0x0000203a
    67e8:	65746e45 	.word	0x65746e45
    67ec:	20646572 	.word	0x20646572
    67f0:	64616572 	.word	0x64616572
    67f4:	736d7320 	.word	0x736d7320
    67f8:	0000002e 	.word	0x0000002e
    67fc:	00005441 	.word	0x00005441
    6800:	432b5441 	.word	0x432b5441
    6804:	3d52474d 	.word	0x3d52474d
    6808:	00000031 	.word	0x00000031
    680c:	432b5441 	.word	0x432b5441
    6810:	3d44474d 	.word	0x3d44474d
    6814:	00342c31 	.word	0x00342c31
    6818:	7373654d 	.word	0x7373654d
    681c:	20656761 	.word	0x20656761
    6820:	6d6f7246 	.word	0x6d6f7246
    6824:	534d5320 	.word	0x534d5320
    6828:	00203a20 	.word	0x00203a20
    682c:	65746e45 	.word	0x65746e45
    6830:	20646572 	.word	0x20646572
    6834:	5f4d5347 	.word	0x5f4d5347
    6838:	6e6e6f43 	.word	0x6e6e6f43
    683c:	54746365 	.word	0x54746365
    6840:	6972546f 	.word	0x6972546f
    6844:	6770556f 	.word	0x6770556f
    6848:	65646172 	.word	0x65646172
    684c:	76726553 	.word	0x76726553
    6850:	00007265 	.word	0x00007265
    6854:	00495441 	.word	0x00495441
    6858:	512b5441 	.word	0x512b5441
    685c:	43474649 	.word	0x43474649
    6860:	313d544e 	.word	0x313d544e
    6864:	00000000 	.word	0x00000000
    6868:	512b5441 	.word	0x512b5441
    686c:	47534349 	.word	0x47534349
    6870:	2c313d50 	.word	0x2c313d50
    6874:	22732522 	.word	0x22732522
    6878:	7325222c 	.word	0x7325222c
    687c:	25222c22 	.word	0x25222c22
    6880:	00002273 	.word	0x00002273
    6884:	512b5441 	.word	0x512b5441
    6888:	58554d49 	.word	0x58554d49
    688c:	0000303d 	.word	0x0000303d
    6890:	512b5441 	.word	0x512b5441
    6894:	54414256 	.word	0x54414256
    6898:	2c303d54 	.word	0x2c303d54
    689c:	30303533 	.word	0x30303533
    68a0:	0000302c 	.word	0x0000302c
    68a4:	512b5441 	.word	0x512b5441
    68a8:	54414256 	.word	0x54414256
    68ac:	2c313d54 	.word	0x2c313d54
    68b0:	30303333 	.word	0x30303333
    68b4:	0000302c 	.word	0x0000302c
    68b8:	512b5441 	.word	0x512b5441
    68bc:	4f485349 	.word	0x4f485349
    68c0:	3d415257 	.word	0x3d415257
    68c4:	00000031 	.word	0x00000031
    68c8:	512b5441 	.word	0x512b5441
    68cc:	4f485349 	.word	0x4f485349
    68d0:	3d545057 	.word	0x3d545057
    68d4:	00000031 	.word	0x00000031
    68d8:	512b5441 	.word	0x512b5441
    68dc:	49444e49 	.word	0x49444e49
    68e0:	0000303d 	.word	0x0000303d
    68e4:	512b5441 	.word	0x512b5441
    68e8:	41454849 	.word	0x41454849
    68ec:	00313d44 	.word	0x00313d44
    68f0:	512b5441 	.word	0x512b5441
    68f4:	444f4d49 	.word	0x444f4d49
    68f8:	00303d45 	.word	0x00303d45
    68fc:	512b5441 	.word	0x512b5441
    6900:	534e4449 	.word	0x534e4449
    6904:	313d5049 	.word	0x313d5049
    6908:	00000000 	.word	0x00000000
    690c:	512b5441 	.word	0x512b5441
    6910:	534e4449 	.word	0x534e4449
    6914:	303d5049 	.word	0x303d5049
    6918:	00000000 	.word	0x00000000
    691c:	512b5441 	.word	0x512b5441
    6920:	4c435047 	.word	0x4c435047
    6924:	3d535341 	.word	0x3d535341
    6928:	00003231 	.word	0x00003231
    692c:	512b5441 	.word	0x512b5441
    6930:	45504f49 	.word	0x45504f49
    6934:	54223d4e 	.word	0x54223d4e
    6938:	2c225043 	.word	0x2c225043
    693c:	22732522 	.word	0x22732522
    6940:	0d73252c 	.word	0x0d73252c
    6944:	0000000a 	.word	0x0000000a
    6948:	4c494146 	.word	0x4c494146
    694c:	00000000 	.word	0x00000000
    6950:	4e4e4f43 	.word	0x4e4e4f43
    6954:	20544345 	.word	0x20544345
    6958:	00004b4f 	.word	0x00004b4f
    695c:	45524c41 	.word	0x45524c41
    6960:	20594441 	.word	0x20594441
    6964:	4e4e4f43 	.word	0x4e4e4f43
    6968:	00544345 	.word	0x00544345
    696c:	6e6e6f43 	.word	0x6e6e6f43
    6970:	65746365 	.word	0x65746365
    6974:	6f742064 	.word	0x6f742064
    6978:	65687420 	.word	0x65687420
    697c:	72657320 	.word	0x72657320
    6980:	2e726576 	.word	0x2e726576
    6984:	00000000 	.word	0x00000000
    6988:	504f4951 	.word	0x504f4951
    698c:	66204e45 	.word	0x66204e45
    6990:	656c6961 	.word	0x656c6961
    6994:	00002e64 	.word	0x00002e64
    6998:	64726148 	.word	0x64726148
    699c:	73657220 	.word	0x73657220
    69a0:	69747465 	.word	0x69747465
    69a4:	6d20676e 	.word	0x6d20676e
    69a8:	6c75646f 	.word	0x6c75646f
    69ac:	00002e65 	.word	0x00002e65
    69b0:	6e6e6f63 	.word	0x6e6e6f63
    69b4:	69746365 	.word	0x69746365
    69b8:	61466e6f 	.word	0x61466e6f
    69bc:	6f436c69 	.word	0x6f436c69
    69c0:	20746e75 	.word	0x20746e75
    69c4:	3034203e 	.word	0x3034203e
    69c8:	73657220 	.word	0x73657220
    69cc:	74726174 	.word	0x74726174
    69d0:	20676e69 	.word	0x20676e69
    69d4:	75646f6d 	.word	0x75646f6d
    69d8:	002e656c 	.word	0x002e656c
    69dc:	65746e45 	.word	0x65746e45
    69e0:	20646572 	.word	0x20646572
    69e4:	6e6e6f43 	.word	0x6e6e6f43
    69e8:	6f746365 	.word	0x6f746365
    69ec:	6f697254 	.word	0x6f697254
    69f0:	00000000 	.word	0x00000000
    69f4:	512b5441 	.word	0x512b5441
    69f8:	49444e49 	.word	0x49444e49
    69fc:	0000313d 	.word	0x0000313d
    6a00:	512b5441 	.word	0x512b5441
    6a04:	4c435047 	.word	0x4c435047
    6a08:	3d535341 	.word	0x3d535341
    6a0c:	00000038 	.word	0x00000038
    6a10:	512b5441 	.word	0x512b5441
    6a14:	45504f49 	.word	0x45504f49
    6a18:	54223d4e 	.word	0x54223d4e
    6a1c:	2c225043 	.word	0x2c225043
    6a20:	22732522 	.word	0x22732522
    6a24:	0d64252c 	.word	0x0d64252c
    6a28:	00000000 	.word	0x00000000
    6a2c:	65746e45 	.word	0x65746e45
    6a30:	20646572 	.word	0x20646572
    6a34:	5f4d5347 	.word	0x5f4d5347
    6a38:	646e6553 	.word	0x646e6553
    6a3c:	65536f54 	.word	0x65536f54
    6a40:	72657672 	.word	0x72657672
    6a44:	00504354 	.word	0x00504354
    6a48:	512b5441 	.word	0x512b5441
    6a4c:	4e455349 	.word	0x4e455349
    6a50:	64253d44 	.word	0x64253d44
    6a54:	00000000 	.word	0x00000000
    6a58:	646e6553 	.word	0x646e6553
    6a5c:	204b4f20 	.word	0x204b4f20
    6a60:	6c696877 	.word	0x6c696877
    6a64:	2e676e69 	.word	0x2e676e69
    6a68:	0000002e 	.word	0x0000002e
    6a6c:	444e4553 	.word	0x444e4553
    6a70:	004b4f20 	.word	0x004b4f20
    6a74:	61746144 	.word	0x61746144
    6a78:	6e657320 	.word	0x6e657320
    6a7c:	00002e74 	.word	0x00002e74
    6a80:	4f525245 	.word	0x4f525245
    6a84:	00000052 	.word	0x00000052
    6a88:	61746144 	.word	0x61746144
    6a8c:	69616620 	.word	0x69616620
    6a90:	00002e6c 	.word	0x00002e6c
    6a94:	65746e45 	.word	0x65746e45
    6a98:	20646572 	.word	0x20646572
    6a9c:	5f4d5347 	.word	0x5f4d5347
    6aa0:	5f504354 	.word	0x5f504354
    6aa4:	646e6553 	.word	0x646e6553
    6aa8:	00000000 	.word	0x00000000
    6aac:	512b5441 	.word	0x512b5441
    6ab0:	44574f50 	.word	0x44574f50
    6ab4:	0000303d 	.word	0x0000303d
    6ab8:	00004b4f 	.word	0x00004b4f
    6abc:	432b5441 	.word	0x432b5441
    6ac0:	3d45454d 	.word	0x3d45454d
    6ac4:	00000032 	.word	0x00000032
    6ac8:	432b5441 	.word	0x432b5441
    6acc:	3d46474d 	.word	0x3d46474d
    6ad0:	00000031 	.word	0x00000031
    6ad4:	432b5441 	.word	0x432b5441
    6ad8:	3d494d4e 	.word	0x3d494d4e
    6adc:	2c312c32 	.word	0x2c312c32
    6ae0:	2c302c30 	.word	0x2c302c30
    6ae4:	00000030 	.word	0x00000030
    6ae8:	206d6953 	.word	0x206d6953
    6aec:	64726163 	.word	0x64726163
    6af0:	61657220 	.word	0x61657220
    6af4:	2e2e7964 	.word	0x2e2e7964
    6af8:	0000000d 	.word	0x0000000d
    6afc:	206d6953 	.word	0x206d6953
    6b00:	20746f6e 	.word	0x20746f6e
    6b04:	64616572 	.word	0x64616572
    6b08:	000d2179 	.word	0x000d2179
    6b0c:	432b5441 	.word	0x432b5441
    6b10:	00005153 	.word	0x00005153
    6b14:	432b5441 	.word	0x432b5441
    6b18:	3f474552 	.word	0x3f474552
    6b1c:	00000000 	.word	0x00000000
    6b20:	4552432b 	.word	0x4552432b
    6b24:	00000047 	.word	0x00000047
    6b28:	0000352c 	.word	0x0000352c
    6b2c:	0000312c 	.word	0x0000312c
    6b30:	002c352c 	.word	0x002c352c
    6b34:	65746e45 	.word	0x65746e45
    6b38:	20646572 	.word	0x20646572
    6b3c:	63656863 	.word	0x63656863
    6b40:	6973206b 	.word	0x6973206b
    6b44:	6163206d 	.word	0x6163206d
    6b48:	002e6472 	.word	0x002e6472
    6b4c:	432b5441 	.word	0x432b5441
    6b50:	3f4e4950 	.word	0x3f4e4950
    6b54:	00000000 	.word	0x00000000
    6b58:	44414552 	.word	0x44414552
    6b5c:	00000059 	.word	0x00000059
    6b60:	472b5441 	.word	0x472b5441
    6b64:	00004e53 	.word	0x00004e53
    6b68:	49454d49 	.word	0x49454d49
    6b6c:	00203a20 	.word	0x00203a20
    6b70:	432b5441 	.word	0x432b5441
    6b74:	00494d49 	.word	0x00494d49
    6b78:	49534d49 	.word	0x49534d49
    6b7c:	00203a20 	.word	0x00203a20
    6b80:	31455441 	.word	0x31455441
    6b84:	00000000 	.word	0x00000000
    6b88:	4f484345 	.word	0x4f484345
    6b8c:	004e4f20 	.word	0x004e4f20
    6b90:	492b5441 	.word	0x492b5441
    6b94:	313d5250 	.word	0x313d5250
    6b98:	30323531 	.word	0x30323531
    6b9c:	00000030 	.word	0x00000030
    6ba0:	74746553 	.word	0x74746553
    6ba4:	20676e69 	.word	0x20676e69
    6ba8:	20535047 	.word	0x20535047
    6bac:	64756162 	.word	0x64756162
    6bb0:	74617220 	.word	0x74617220
    6bb4:	00002065 	.word	0x00002065
    6bb8:	30455441 	.word	0x30455441
    6bbc:	00000000 	.word	0x00000000
    6bc0:	4f484345 	.word	0x4f484345
    6bc4:	46464f20 	.word	0x46464f20
    6bc8:	00000000 	.word	0x00000000
    6bcc:	512b5441 	.word	0x512b5441
    6bd0:	4f4c4349 	.word	0x4f4c4349
    6bd4:	00004553 	.word	0x00004553
    6bd8:	534f4c43 	.word	0x534f4c43
    6bdc:	43542045 	.word	0x43542045
    6be0:	6f632050 	.word	0x6f632050
    6be4:	63656e6e 	.word	0x63656e6e
    6be8:	6e6f6974 	.word	0x6e6f6974
    6bec:	00000020 	.word	0x00000020
    6bf0:	65746e45 	.word	0x65746e45
    6bf4:	20646572 	.word	0x20646572
    6bf8:	656e6547 	.word	0x656e6547
    6bfc:	65746172 	.word	0x65746172
    6c00:	73654d54 	.word	0x73654d54
    6c04:	65676173 	.word	0x65676173
    6c08:	00002928 	.word	0x00002928
    6c0c:	6c727473 	.word	0x6c727473
    6c10:	6c286e65 	.word	0x6c286e65
    6c14:	5f747361 	.word	0x5f747361
    6c18:	696c6176 	.word	0x696c6176
    6c1c:	70675f64 	.word	0x70675f64
    6c20:	29636d72 	.word	0x29636d72
    6c24:	25203a20 	.word	0x25203a20
    6c28:	00000d64 	.word	0x00000d64
    6c2c:	7325545b 	.word	0x7325545b
    6c30:	474f4e2d 	.word	0x474f4e2d
    6c34:	00005350 	.word	0x00005350
    6c38:	20535047 	.word	0x20535047
    6c3c:	696c6156 	.word	0x696c6156
    6c40:	203a2064 	.word	0x203a2064
    6c44:	6c727473 	.word	0x6c727473
    6c48:	6c286e65 	.word	0x6c286e65
    6c4c:	5f747361 	.word	0x5f747361
    6c50:	696c6176 	.word	0x696c6176
    6c54:	70675f64 	.word	0x70675f64
    6c58:	29636d72 	.word	0x29636d72
    6c5c:	25203a20 	.word	0x25203a20
    6c60:	6c202c64 	.word	0x6c202c64
    6c64:	5f747361 	.word	0x5f747361
    6c68:	696c6176 	.word	0x696c6176
    6c6c:	70675f64 	.word	0x70675f64
    6c70:	3a636d72 	.word	0x3a636d72
    6c74:	25203a20 	.word	0x25203a20
    6c78:	00000d73 	.word	0x00000d73
    6c7c:	0000002c 	.word	0x0000002c
    6c80:	00005825 	.word	0x00005825
    6c84:	65657053 	.word	0x65657053
    6c88:	54532064 	.word	0x54532064
    6c8c:	203a2052 	.word	0x203a2052
    6c90:	00000000 	.word	0x00000000
    6c94:	20726944 	.word	0x20726944
    6c98:	20525453 	.word	0x20525453
    6c9c:	0000203a 	.word	0x0000203a
    6ca0:	00006425 	.word	0x00006425
    6ca4:	0000004e 	.word	0x0000004e
    6ca8:	00000057 	.word	0x00000057
    6cac:	00000053 	.word	0x00000053
    6cb0:	00000045 	.word	0x00000045
    6cb4:	454d5f54 	.word	0x454d5f54
    6cb8:	47415353 	.word	0x47415353
    6cbc:	00003a45 	.word	0x00003a45
    6cc0:	7325545b 	.word	0x7325545b
    6cc4:	73257325 	.word	0x73257325
    6cc8:	73257325 	.word	0x73257325
    6ccc:	73257325 	.word	0x73257325
    6cd0:	64256425 	.word	0x64256425
    6cd4:	73257325 	.word	0x73257325
    6cd8:	00000000 	.word	0x00000000
    6cdc:	302d7325 	.word	0x302d7325
    6ce0:	253a3032 	.word	0x253a3032
    6ce4:	00000064 	.word	0x00000064
    6ce8:	313b7325 	.word	0x313b7325
    6cec:	253a3430 	.word	0x253a3430
    6cf0:	00000058 	.word	0x00000058
    6cf4:	253b7325 	.word	0x253b7325
    6cf8:	00000073 	.word	0x00000073
    6cfc:	303b7325 	.word	0x303b7325
    6d00:	253a3232 	.word	0x253a3232
    6d04:	00000073 	.word	0x00000073
    6d08:	313b7325 	.word	0x313b7325
    6d0c:	253a3230 	.word	0x253a3230
    6d10:	00000073 	.word	0x00000073
    6d14:	313b7325 	.word	0x313b7325
    6d18:	253a3530 	.word	0x253a3530
    6d1c:	00000064 	.word	0x00000064
    6d20:	303b7325 	.word	0x303b7325
    6d24:	253a3332 	.word	0x253a3332
    6d28:	00005d64 	.word	0x00005d64
    6d2c:	65746e45 	.word	0x65746e45
    6d30:	20646572 	.word	0x20646572
    6d34:	6e616843 	.word	0x6e616843
    6d38:	43206567 	.word	0x43206567
    6d3c:	69666e6f 	.word	0x69666e6f
    6d40:	61727567 	.word	0x61727567
    6d44:	6e6f6974 	.word	0x6e6f6974
    6d48:	00000000 	.word	0x00000000
    6d4c:	54455323 	.word	0x54455323
    6d50:	0000003b 	.word	0x0000003b
    6d54:	61726150 	.word	0x61726150
    6d58:	3a20316d 	.word	0x3a20316d
    6d5c:	2c732520 	.word	0x2c732520
    6d60:	72615020 	.word	0x72615020
    6d64:	20326d61 	.word	0x20326d61
    6d68:	7325203a 	.word	0x7325203a
    6d6c:	6150202c 	.word	0x6150202c
    6d70:	336d6172 	.word	0x336d6172
    6d74:	25203a20 	.word	0x25203a20
    6d78:	50202c73 	.word	0x50202c73
    6d7c:	6d617261 	.word	0x6d617261
    6d80:	203a2034 	.word	0x203a2034
    6d84:	202c7325 	.word	0x202c7325
    6d88:	61726150 	.word	0x61726150
    6d8c:	3a20356d 	.word	0x3a20356d
    6d90:	0d732520 	.word	0x0d732520
    6d94:	00000000 	.word	0x00000000
    6d98:	00000031 	.word	0x00000031
    6d9c:	00003130 	.word	0x00003130
    6da0:	502d5049 	.word	0x502d5049
    6da4:	2074726f 	.word	0x2074726f
    6da8:	75716552 	.word	0x75716552
    6dac:	2c747365 	.word	0x2c747365
    6db0:	20504920 	.word	0x20504920
    6db4:	7325203a 	.word	0x7325203a
    6db8:	6f50202c 	.word	0x6f50202c
    6dbc:	3a207472 	.word	0x3a207472
    6dc0:	0d732520 	.word	0x0d732520
    6dc4:	00000000 	.word	0x00000000
    6dc8:	00003231 	.word	0x00003231
    6dcc:	65736552 	.word	0x65736552
    6dd0:	65722074 	.word	0x65722074
    6dd4:	73657571 	.word	0x73657571
    6dd8:	65722074 	.word	0x65722074
    6ddc:	76696563 	.word	0x76696563
    6de0:	202c6465 	.word	0x202c6465
    6de4:	65736572 	.word	0x65736572
    6de8:	00002e74 	.word	0x00002e74
    6dec:	00003532 	.word	0x00003532
    6df0:	204e5041 	.word	0x204e5041
    6df4:	75716552 	.word	0x75716552
    6df8:	2c747365 	.word	0x2c747365
    6dfc:	4e504120 	.word	0x4e504120
    6e00:	25203a20 	.word	0x25203a20
    6e04:	55202c73 	.word	0x55202c73
    6e08:	20524553 	.word	0x20524553
    6e0c:	7325203a 	.word	0x7325203a
    6e10:	4150202c 	.word	0x4150202c
    6e14:	3a205353 	.word	0x3a205353
    6e18:	0d732520 	.word	0x0d732520
    6e1c:	00000000 	.word	0x00000000
    6e20:	00000034 	.word	0x00000034
    6e24:	00003430 	.word	0x00003430
    6e28:	00000030 	.word	0x00000030
    6e2c:	61647055 	.word	0x61647055
    6e30:	50206574 	.word	0x50206574
    6e34:	6f697265 	.word	0x6f697265
    6e38:	68432064 	.word	0x68432064
    6e3c:	65676e61 	.word	0x65676e61
    6e40:	71655220 	.word	0x71655220
    6e44:	74736575 	.word	0x74736575
    6e48:	4e4f202c 	.word	0x4e4f202c
    6e4c:	25203a20 	.word	0x25203a20
    6e50:	4f202c73 	.word	0x4f202c73
    6e54:	3a204646 	.word	0x3a204646
    6e58:	0d732520 	.word	0x0d732520
    6e5c:	00000000 	.word	0x00000000
    6e60:	61647055 	.word	0x61647055
    6e64:	50206574 	.word	0x50206574
    6e68:	6f697265 	.word	0x6f697265
    6e6c:	6f522864 	.word	0x6f522864
    6e70:	6e696d61 	.word	0x6e696d61
    6e74:	43202967 	.word	0x43202967
    6e78:	676e6168 	.word	0x676e6168
    6e7c:	65522065 	.word	0x65522065
    6e80:	73657571 	.word	0x73657571
    6e84:	4f202c74 	.word	0x4f202c74
    6e88:	203a204e 	.word	0x203a204e
    6e8c:	202c7325 	.word	0x202c7325
    6e90:	2046464f 	.word	0x2046464f
    6e94:	7325203a 	.word	0x7325203a
    6e98:	0000000d 	.word	0x0000000d
    6e9c:	00003131 	.word	0x00003131
    6ea0:	6e616843 	.word	0x6e616843
    6ea4:	4d206567 	.word	0x4d206567
    6ea8:	61656c69 	.word	0x61656c69
    6eac:	002e6567 	.word	0x002e6567
    6eb0:	00003233 	.word	0x00003233
    6eb4:	20776f4c 	.word	0x20776f4c
    6eb8:	65776f70 	.word	0x65776f70
    6ebc:	6f6d2072 	.word	0x6f6d2072
    6ec0:	002e6564 	.word	0x002e6564
    6ec4:	00003333 	.word	0x00003333
    6ec8:	20776f4c 	.word	0x20776f4c
    6ecc:	65776f70 	.word	0x65776f70
    6ed0:	61772072 	.word	0x61772072
    6ed4:	7520656b 	.word	0x7520656b
    6ed8:	65702070 	.word	0x65702070
    6edc:	646f6972 	.word	0x646f6972
    6ee0:	0000002e 	.word	0x0000002e
    6ee4:	00003433 	.word	0x00003433
    6ee8:	20776f4c 	.word	0x20776f4c
    6eec:	65776f70 	.word	0x65776f70
    6ef0:	6f6d2072 	.word	0x6f6d2072
    6ef4:	73206564 	.word	0x73206564
    6ef8:	63656c65 	.word	0x63656c65
    6efc:	6e6f6974 	.word	0x6e6f6974
    6f00:	45454420 	.word	0x45454420
    6f04:	4f502050 	.word	0x4f502050
    6f08:	20524557 	.word	0x20524557
    6f0c:	4e574f44 	.word	0x4e574f44
    6f10:	20737620 	.word	0x20737620
    6f14:	45574f50 	.word	0x45574f50
    6f18:	4f442052 	.word	0x4f442052
    6f1c:	00004e57 	.word	0x00004e57
    6f20:	00003332 	.word	0x00003332
    6f24:	646e6553 	.word	0x646e6553
    6f28:	6f702020 	.word	0x6f702020
    6f2c:	69746973 	.word	0x69746973
    6f30:	00006e6f 	.word	0x00006e6f
    6f34:	00000000 	.word	0x00000000
    6f38:	54455340 	.word	0x54455340
    6f3c:	3773253b 	.word	0x3773253b
    6f40:	73253b30 	.word	0x73253b30
    6f44:	00000000 	.word	0x00000000
    6f48:	7774654e 	.word	0x7774654e
    6f4c:	206b726f 	.word	0x206b726f
    6f50:	69676572 	.word	0x69676572
    6f54:	61727473 	.word	0x61727473
    6f58:	6e6f6974 	.word	0x6e6f6974
    6f5c:	72726520 	.word	0x72726520
    6f60:	0000726f 	.word	0x0000726f
    6f64:	69676552 	.word	0x69676552
    6f68:	72657473 	.word	0x72657473
    6f6c:	74206465 	.word	0x74206465
    6f70:	7367206f 	.word	0x7367206f
    6f74:	656e206d 	.word	0x656e206d
    6f78:	726f7774 	.word	0x726f7774
    6f7c:	00002e6b 	.word	0x00002e6b
    6f80:	6e676953 	.word	0x6e676953
    6f84:	53206c61 	.word	0x53206c61
    6f88:	6e657274 	.word	0x6e657274
    6f8c:	20687467 	.word	0x20687467
    6f90:	6425203a 	.word	0x6425203a
    6f94:	0000000a 	.word	0x0000000a
    6f98:	6f420a0d 	.word	0x6f420a0d
    6f9c:	6e69746f 	.word	0x6e69746f
    6fa0:	70752067 	.word	0x70752067
    6fa4:	00000000 	.word	0x00000000
    6fa8:	74737953 	.word	0x74737953
    6fac:	6f436d65 	.word	0x6f436d65
    6fb0:	6c436572 	.word	0x6c436572
    6fb4:	206b636f 	.word	0x206b636f
    6fb8:	6425203d 	.word	0x6425203d
    6fbc:	0d7a4820 	.word	0x0d7a4820
    6fc0:	0000000a 	.word	0x0000000a
    6fc4:	52504545 	.word	0x52504545
    6fc8:	49204d4f 	.word	0x49204d4f
    6fcc:	6974696e 	.word	0x6974696e
    6fd0:	7a696c61 	.word	0x7a696c61
    6fd4:	6f697461 	.word	0x6f697461
    6fd8:	6166206e 	.word	0x6166206e
    6fdc:	64656c69 	.word	0x64656c69
    6fe0:	0000002e 	.word	0x0000002e
    6fe4:	52504545 	.word	0x52504545
    6fe8:	49204d4f 	.word	0x49204d4f
    6fec:	6974696e 	.word	0x6974696e
    6ff0:	7a696c61 	.word	0x7a696c61
    6ff4:	002e6465 	.word	0x002e6465
    6ff8:	63656843 	.word	0x63656843
    6ffc:	676e696b 	.word	0x676e696b
    7000:	67707520 	.word	0x67707520
    7004:	65646172 	.word	0x65646172
    7008:	71657220 	.word	0x71657220
    700c:	74736575 	.word	0x74736575
    7010:	00000000 	.word	0x00000000
    7014:	74737953 	.word	0x74737953
    7018:	69206d65 	.word	0x69206d65
    701c:	6567616d 	.word	0x6567616d
    7020:	67707520 	.word	0x67707520
    7024:	65646172 	.word	0x65646172
    7028:	71657220 	.word	0x71657220
    702c:	74736575 	.word	0x74736575
    7030:	00006465 	.word	0x00006465
    7034:	76726553 	.word	0x76726553
    7038:	43207265 	.word	0x43207265
    703c:	656e6e6f 	.word	0x656e6e6f
    7040:	6f697463 	.word	0x6f697463
    7044:	7345206e 	.word	0x7345206e
    7048:	6c626174 	.word	0x6c626174
    704c:	65687369 	.word	0x65687369
    7050:	6f742064 	.word	0x6f742064
    7054:	67705520 	.word	0x67705520
    7058:	65646172 	.word	0x65646172
    705c:	72657320 	.word	0x72657320
    7060:	00726576 	.word	0x00726576
    7064:	6e776f44 	.word	0x6e776f44
    7068:	64616f6c 	.word	0x64616f6c
    706c:	6e696620 	.word	0x6e696620
    7070:	65687369 	.word	0x65687369
    7074:	00002064 	.word	0x00002064
    7078:	696e6946 	.word	0x696e6946
    707c:	64656873 	.word	0x64656873
    7080:	67707520 	.word	0x67707520
    7084:	69646172 	.word	0x69646172
    7088:	0000676e 	.word	0x0000676e
    708c:	746f6f42 	.word	0x746f6f42
    7090:	20676e69 	.word	0x20676e69
    7094:	4f434553 	.word	0x4f434553
    7098:	5241444e 	.word	0x5241444e
    709c:	6d692059 	.word	0x6d692059
    70a0:	00656761 	.word	0x00656761
    70a4:	746f6f42 	.word	0x746f6f42
    70a8:	20676e69 	.word	0x20676e69
    70ac:	4d495250 	.word	0x4d495250
    70b0:	20595241 	.word	0x20595241
    70b4:	67616d69 	.word	0x67616d69
    70b8:	00000065 	.word	0x00000065
    70bc:	61647055 	.word	0x61647055
    70c0:	70206574 	.word	0x70206574
    70c4:	6d617261 	.word	0x6d617261
    70c8:	72657465 	.word	0x72657465
    70cc:	73252073 	.word	0x73252073
    70d0:	0073253a 	.word	0x0073253a
    70d4:	63656843 	.word	0x63656843
    70d8:	676e696b 	.word	0x676e696b
    70dc:	20666920 	.word	0x20666920
    70e0:	67726174 	.word	0x67726174
    70e4:	6d207465 	.word	0x6d207465
    70e8:	726f6d65 	.word	0x726f6d65
    70ec:	73692079 	.word	0x73692079
    70f0:	616c6220 	.word	0x616c6220
    70f4:	00006b6e 	.word	0x00006b6e
    70f8:	67726154 	.word	0x67726154
    70fc:	73207465 	.word	0x73207465
    7100:	6f746365 	.word	0x6f746365
    7104:	25282072 	.word	0x25282072
    7108:	69202964 	.word	0x69202964
    710c:	6f6e2073 	.word	0x6f6e2073
    7110:	6c622074 	.word	0x6c622074
    7114:	206b6e61 	.word	0x206b6e61
    7118:	72646461 	.word	0x72646461
    711c:	7830203a 	.word	0x7830203a
    7120:	202c5825 	.word	0x202c5825
    7124:	58257830 	.word	0x58257830
    7128:	00000000 	.word	0x00000000
    712c:	67726154 	.word	0x67726154
    7130:	73207465 	.word	0x73207465
    7134:	6f746365 	.word	0x6f746365
    7138:	25282072 	.word	0x25282072
    713c:	69202964 	.word	0x69202964
    7140:	6c622073 	.word	0x6c622073
    7144:	206b6e61 	.word	0x206b6e61
    7148:	00000000 	.word	0x00000000
    714c:	72617453 	.word	0x72617453
    7150:	676e6974 	.word	0x676e6974
    7154:	776f6420 	.word	0x776f6420
    7158:	616f6c6e 	.word	0x616f6c6e
    715c:	00000064 	.word	0x00000064
    7160:	61746f54 	.word	0x61746f54
    7164:	20796c6c 	.word	0x20796c6c
    7168:	65636572 	.word	0x65636572
    716c:	64657669 	.word	0x64657669
    7170:	25203a20 	.word	0x25203a20
    7174:	20202064 	.word	0x20202064
    7178:	6d617266 	.word	0x6d617266
    717c:	656c2065 	.word	0x656c2065
    7180:	6874676e 	.word	0x6874676e
    7184:	25203a20 	.word	0x25203a20
    7188:	000a0d64 	.word	0x000a0d64
    718c:	61746f54 	.word	0x61746f54
    7190:	20796c6c 	.word	0x20796c6c
    7194:	6425203a 	.word	0x6425203a
    7198:	6c662020 	.word	0x6c662020
    719c:	57687361 	.word	0x57687361
    71a0:	65746972 	.word	0x65746972
    71a4:	65646e49 	.word	0x65646e49
    71a8:	203a2078 	.word	0x203a2078
    71ac:	0a0d6425 	.word	0x0a0d6425
    71b0:	00000000 	.word	0x00000000
    71b4:	70657270 	.word	0x70657270
    71b8:	64657261 	.word	0x64657261
    71bc:	00000020 	.word	0x00000020
    71c0:	79706f43 	.word	0x79706f43
    71c4:	6d615220 	.word	0x6d615220
    71c8:	73657220 	.word	0x73657220
    71cc:	20746c75 	.word	0x20746c75
    71d0:	65646f63 	.word	0x65646f63
    71d4:	25203a20 	.word	0x25203a20
    71d8:	000a0d64 	.word	0x000a0d64
    71dc:	69706f63 	.word	0x69706f63
    71e0:	00206465 	.word	0x00206465
    71e4:	49323375 	.word	0x49323375
    71e8:	435f5041 	.word	0x435f5041
    71ec:	61706d6f 	.word	0x61706d6f
    71f0:	3a206572 	.word	0x3a206572
    71f4:	20642520 	.word	0x20642520
    71f8:	6f727720 	.word	0x6f727720
    71fc:	25206574 	.word	0x25206574
    7200:	0a0d2064 	.word	0x0a0d2064
    7204:	00000000 	.word	0x00000000
    7208:	69726576 	.word	0x69726576
    720c:	64656966 	.word	0x64656966
    7210:	00000020 	.word	0x00000020
    7214:	69726576 	.word	0x69726576
    7218:	61636966 	.word	0x61636966
    721c:	6e6f6974 	.word	0x6e6f6974
    7220:	69616620 	.word	0x69616620
    7224:	2064656c 	.word	0x2064656c
    7228:	00000000 	.word	0x00000000
    722c:	74697257 	.word	0x74697257
    7230:	20676e69 	.word	0x20676e69
    7234:	6e676973 	.word	0x6e676973
    7238:	72757461 	.word	0x72757461
    723c:	30203a65 	.word	0x30203a65
    7240:	20582578 	.word	0x20582578
    7244:	52432020 	.word	0x52432020
    7248:	203a2043 	.word	0x203a2043
    724c:	0a0d5825 	.word	0x0a0d5825
    7250:	00000000 	.word	0x00000000
    7254:	73617245 	.word	0x73617245
    7258:	00206465 	.word	0x00206465
    725c:	6e676953 	.word	0x6e676953
    7260:	72757461 	.word	0x72757461
    7264:	30203a65 	.word	0x30203a65
    7268:	20582578 	.word	0x20582578
    726c:	52432020 	.word	0x52432020
    7270:	203a2043 	.word	0x203a2043
    7274:	0a0d5825 	.word	0x0a0d5825
    7278:	00000000 	.word	0x00000000
    727c:	636c6143 	.word	0x636c6143
    7280:	74616c75 	.word	0x74616c75
    7284:	49206465 	.word	0x49206465
    7288:	6567616d 	.word	0x6567616d
    728c:	43524320 	.word	0x43524320
    7290:	7830203a 	.word	0x7830203a
    7294:	0a0d5825 	.word	0x0a0d5825
    7298:	00000000 	.word	0x00000000
    729c:	00000a0d 	.word	0x00000a0d
    72a0:	78323025 	.word	0x78323025
    72a4:	00000000 	.word	0x00000000
    72a8:	73252020 	.word	0x73252020
    72ac:	00000a0d 	.word	0x00000a0d
    72b0:	32302520 	.word	0x32302520
    72b4:	00000078 	.word	0x00000078
    72b8:	00202020 	.word	0x00202020
    72bc:	00445049 	.word	0x00445049
    72c0:	5043542c 	.word	0x5043542c
    72c4:	0000002c 	.word	0x0000002c
    72c8:	00000a0d 	.word	0x00000a0d
    72cc:	3a504354 	.word	0x3a504354
    72d0:	00000000 	.word	0x00000000
    72d4:	72617453 	.word	0x72617453
    72d8:	6f642074 	.word	0x6f642074
    72dc:	6f6c6e77 	.word	0x6f6c6e77
    72e0:	6e696461 	.word	0x6e696461
    72e4:	00000067 	.word	0x00000067
    72e8:	6e6e6f43 	.word	0x6e6e6f43
    72ec:	69746365 	.word	0x69746365
    72f0:	7320676e 	.word	0x7320676e
    72f4:	65746174 	.word	0x65746174
    72f8:	6d697420 	.word	0x6d697420
    72fc:	65207265 	.word	0x65207265
    7300:	72697078 	.word	0x72697078
    7304:	73206465 	.word	0x73206465
    7308:	69646e65 	.word	0x69646e65
    730c:	2020676e 	.word	0x2020676e
    7310:	2077656e 	.word	0x2077656e
    7314:	75716572 	.word	0x75716572
    7318:	20747365 	.word	0x20747365
    731c:	00000020 	.word	0x00000020
    7320:	72206f4e 	.word	0x72206f4e
    7324:	796c7065 	.word	0x796c7065
    7328:	76696720 	.word	0x76696720
    732c:	70752065 	.word	0x70752065
    7330:	67707520 	.word	0x67707520
    7334:	69646172 	.word	0x69646172
    7338:	0000676e 	.word	0x0000676e
    733c:	65636552 	.word	0x65636552
    7340:	64657669 	.word	0x64657669
    7344:	544f4520 	.word	0x544f4520
    7348:	00000020 	.word	0x00000020
    734c:	736f6c43 	.word	0x736f6c43
    7350:	20676e69 	.word	0x20676e69
    7354:	20504354 	.word	0x20504354
    7358:	6e6e6f63 	.word	0x6e6e6f63
    735c:	69746365 	.word	0x69746365
    7360:	00206e6f 	.word	0x00206e6f
    7364:	65747962 	.word	0x65747962
    7368:	756f6320 	.word	0x756f6320
    736c:	203a746e 	.word	0x203a746e
    7370:	202c6425 	.word	0x202c6425
    7374:	6b636170 	.word	0x6b636170
    7378:	6c207465 	.word	0x6c207465
    737c:	25206e65 	.word	0x25206e65
    7380:	000a0d64 	.word	0x000a0d64
    7384:	656c6966 	.word	0x656c6966
    7388:	7a697320 	.word	0x7a697320
    738c:	30203a65 	.word	0x30203a65
    7390:	2c582578 	.word	0x2c582578
    7394:	43524320 	.word	0x43524320
    7398:	7830203a 	.word	0x7830203a
    739c:	0a0d5825 	.word	0x0a0d5825
    73a0:	00000000 	.word	0x00000000
    73a4:	636c6143 	.word	0x636c6143
    73a8:	74616c75 	.word	0x74616c75
    73ac:	49206465 	.word	0x49206465
    73b0:	6567616d 	.word	0x6567616d
    73b4:	43524320 	.word	0x43524320
    73b8:	7830203a 	.word	0x7830203a
    73bc:	0a0d5825 	.word	0x0a0d5825
    73c0:	00000000 	.word	0x00000000
    73c4:	6d617266 	.word	0x6d617266
    73c8:	756e2065 	.word	0x756e2065
    73cc:	7265626d 	.word	0x7265626d
    73d0:	20203a20 	.word	0x20203a20
    73d4:	0a0d6425 	.word	0x0a0d6425
    73d8:	00000000 	.word	0x00000000
    73dc:	636c6163 	.word	0x636c6163
    73e0:	74616c75 	.word	0x74616c75
    73e4:	43206465 	.word	0x43206465
    73e8:	3a204352 	.word	0x3a204352
    73ec:	25783020 	.word	0x25783020
    73f0:	000a0d58 	.word	0x000a0d58
    73f4:	65636552 	.word	0x65636552
    73f8:	64657669 	.word	0x64657669
    73fc:	66206120 	.word	0x66206120
    7400:	656d6172 	.word	0x656d6172
    7404:	00000020 	.word	0x00000020
    7408:	646e6553 	.word	0x646e6553
    740c:	20676e69 	.word	0x20676e69
    7410:	4b434120 	.word	0x4b434120
    7414:	00000020 	.word	0x00000020
    7418:	20435243 	.word	0x20435243
    741c:	6374616d 	.word	0x6374616d
    7420:	20736568 	.word	0x20736568
    7424:	00000a0d 	.word	0x00000a0d
    7428:	20435243 	.word	0x20435243
    742c:	73656f64 	.word	0x73656f64
    7430:	746f6e20 	.word	0x746f6e20
    7434:	74616d20 	.word	0x74616d20
    7438:	20206863 	.word	0x20206863
    743c:	204b414e 	.word	0x204b414e
    7440:	00676e69 	.word	0x00676e69
    7444:	656d6954 	.word	0x656d6954
    7448:	74756f20 	.word	0x74756f20
    744c:	206e6920 	.word	0x206e6920
    7450:	45434552 	.word	0x45434552
    7454:	4e495649 	.word	0x4e495649
    7458:	20202047 	.word	0x20202047
    745c:	00000000 	.word	0x00000000
    7460:	6e776f44 	.word	0x6e776f44
    7464:	64616f6c 	.word	0x64616f6c
    7468:	6f727020 	.word	0x6f727020
    746c:	73736563 	.word	0x73736563
    7470:	69616620 	.word	0x69616620
    7474:	2064656c 	.word	0x2064656c
    7478:	69766967 	.word	0x69766967
    747c:	7520676e 	.word	0x7520676e
    7480:	70752070 	.word	0x70752070
    7484:	64617267 	.word	0x64617267
    7488:	00676e69 	.word	0x00676e69
    748c:	202a2a2a 	.word	0x202a2a2a
    7490:	7973435f 	.word	0x7973435f
    7494:	6c615f73 	.word	0x6c615f73
    7498:	20636f6c 	.word	0x20636f6c
    749c:	6c696166 	.word	0x6c696166
    74a0:	000a6465 	.word	0x000a6465

000074a4 <__ctype>:
	...
    7524:	40404040 40404040 41414140 40404141     @@@@@@@@@AAAAA@@
    7534:	40404040 40404040 40404040 40404040     @@@@@@@@@@@@@@@@
    7544:	02020205 02020202 02020202 02020202     ................
    7554:	20202020 20202020 02022020 02020202               ......
    7564:	90909002 10909090 10101010 10101010     ................
    7574:	10101010 10101010 02101010 02020202     ................
    7584:	88888802 08888888 08080808 08080808     ................
    7594:	08080808 08080808 02080808 40020202     ...............@
	...
    7624:	0020002b 63257830 00642570 63255830     +. .0x%cp%d.0X%c
    7634:	00642550 63257830 2a2e252e 70786c6c     P%d.0x%c.%.*llxp
    7644:	30006425 2e632558 6c2a2e25 2550586c     %d.0X%c.%.*llXP%
    7654:	002d0064 00770072 6c756e28 3000296c     d.-.r.w.(null).0
    7664:	78300058 30003000 34333231 38373635     X.0x.0.012345678
    7674:	43424139 00464544 33323130 37363534     9ABCDEF.01234567
    7684:	62613938 66656463 00000000              89abcdef....

00007690 <__huge_vall>:
    7690:	ffffffff 7fefffff                       ........
